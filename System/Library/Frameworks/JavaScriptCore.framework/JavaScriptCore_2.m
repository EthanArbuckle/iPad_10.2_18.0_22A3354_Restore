void WTF::URLParser::shouldCopyFileURL<unsigned char>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 v10;
  int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;

  if (a3)
  {
    v5 = a3 - 1;
    if (a3 != 1 && (*a2 | 0x20u) - 123 >= 0xFFFFFFE6)
    {
      v7 = a3 - 1;
      v8 = a2;
      v9 = a2;
      while (1)
      {
        v10 = *++v9;
        v11 = v10;
        v12 = v10 - 11;
        if (v10 - 14 < 0xFFFFFFFB || v12 < 2)
          break;
        v8 = v9;
        if (!--v7)
          return;
      }
      if (v11 == 124 || v11 == 58)
      {
        v14 = v7 - 1;
        if (!v14)
          goto LABEL_27;
        v15 = 2;
        while (1)
        {
          v16 = v8[v15];
          if ((v16 - 14) < 0xFFFFFFFB || (v16 - 11) < 2)
            break;
          ++v15;
          if (!--v14)
            goto LABEL_27;
        }
        if ((v16 - 35) <= 0x39 && ((1 << (v16 - 35)) & 0x200000010001001) != 0)
        {
LABEL_27:
          v19 = 0;
          while (1)
          {
            v20 = a2[v19 + 1];
            v21 = v20 - 14;
            v22 = v20 - 11;
            if (v21 < 0xFFFFFFFB || v22 < 2)
              break;
            WTF::URLParser::syntaxViolation<unsigned char>(a1, (uint64_t)&a2[v19 + 1]);
            if (v5 == v19)
            {
              __break(1u);
              return;
            }
            if (v5 == ++v19)
              return;
          }
          if ((unint64_t)(~v19 + a3) >= 2)
          {
            v24 = a3 - v19 - 2;
            v25 = &a2[v19 + 2];
            do
            {
              v26 = *v25;
              if ((v26 - 14) < 0xFFFFFFFB || (v26 - 11) < 2)
                break;
              WTF::URLParser::syntaxViolation<unsigned char>(a1, (uint64_t)v25++);
              --v24;
            }
            while (v24);
          }
        }
      }
    }
  }
}

void WTF::URLParser::consumeDoubleDotPathSegment<unsigned char>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  unsigned int v10;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 *v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 *v21;
  int v22;
  unsigned int v23;

  v5 = a2[1];
  if (!v5)
  {
    do
    {
LABEL_20:
      __break(1u);
LABEL_21:
      v16 = (unsigned __int8 *)(a3 + 2);
      a3 = v5 - 1;
      *v3 = (uint64_t)v16;
      v3[1] = v5 - 1;
    }
    while (v5 == 1);
    while (1)
    {
      v17 = *v16;
      v18 = v17 - 14;
      v19 = v17 - 11;
      if (v18 < 0xFFFFFFFB || v19 < 2)
        break;
      WTF::URLParser::syntaxViolation<unsigned char>(v4, (uint64_t)v16);
      a3 = v3[1];
      if (a3)
      {
        v5 = *v3;
        v16 = (unsigned __int8 *)(*v3 + 1);
        --a3;
        *v3 = (uint64_t)v16;
        v3[1] = a3;
        if (a3)
          continue;
      }
      goto LABEL_20;
    }
    v21 = v16 + 1;
    --a3;
    *v3 = (uint64_t)v21;
    for (v3[1] = a3; a3; v3[1] = a3)
    {
      v22 = *v21;
      v23 = v22 - 14;
      a3 = (v22 - 11);
      if (v23 < 0xFFFFFFFB || a3 < 2)
        break;
      WTF::URLParser::syntaxViolation<unsigned char>(v4, (uint64_t)v21);
      a3 = v3[1];
      if (!a3)
        goto LABEL_20;
      v21 = (unsigned __int8 *)(*v3 + 1);
      --a3;
      *v3 = (uint64_t)v21;
    }
    goto LABEL_11;
  }
  v3 = a2;
  v4 = a1;
  a3 = *a2;
  v6 = (unsigned __int8 *)*a2;
  v8 = *v6;
  v7 = v6 + 1;
  --v5;
  *v3 = (uint64_t)v7;
  v3[1] = v5;
  if (v8 != 46)
  {
    for (; v5; v3[1] = v5)
    {
      v12 = *v7;
      v13 = v12 - 14;
      v14 = v12 - 11;
      if (v13 < 0xFFFFFFFB || v14 < 2)
        goto LABEL_21;
      WTF::URLParser::syntaxViolation<unsigned char>(v4, (uint64_t)v7);
      v5 = v3[1];
      if (!v5)
        break;
      a3 = *v3;
      v7 = (unsigned __int8 *)(*v3 + 1);
      --v5;
      *v3 = (uint64_t)v7;
    }
    goto LABEL_20;
  }
  if (v5)
  {
    do
    {
      v9 = *v7;
      v10 = v9 - 14;
      a3 = (v9 - 11);
      if (v10 < 0xFFFFFFFB || a3 < 2)
        break;
      WTF::URLParser::syntaxViolation<unsigned char>(v4, (uint64_t)v7);
      a3 = v3[1];
      if (!a3)
        goto LABEL_20;
      v7 = (unsigned __int8 *)(*v3 + 1);
      --a3;
      *v3 = (uint64_t)v7;
      v3[1] = a3;
    }
    while (a3);
  }
LABEL_11:
  WTF::URLParser::consumeSingleDotPathSegment<unsigned char>(v4, v3, a3);
}

void WTF::URLParser::consumeSingleDotPathSegment<unsigned char>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  _BYTE *v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v14;
  unsigned int v15;
  unsigned __int8 *v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned __int8 *v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v39;

  v6 = a2[1];
  if (!v6)
    goto LABEL_38;
  v4 = a2;
  v5 = a1;
  a3 = *a2;
  v7 = (unsigned __int8 *)*a2;
  v9 = *v7;
  v8 = v7 + 1;
  LOBYTE(v3) = v9;
  --v6;
  *v4 = v8;
  v4[1] = v6;
  if (v9 == 46)
  {
    if (!v6)
      return;
    while (1)
    {
      LOBYTE(v3) = *v8;
      v10 = *v8;
      v11 = v10 - 14;
      v12 = v10 - 11;
      if (v11 < 0xFFFFFFFB || v12 < 2)
        goto LABEL_39;
      WTF::URLParser::syntaxViolation<unsigned char>(v5, (uint64_t)v8);
      v6 = v4[1];
      if (!v6)
        goto LABEL_38;
      a3 = *v4;
      v8 = (_BYTE *)(*v4 + 1);
      --v6;
      *v4 = v8;
      v4[1] = v6;
      if (!v6)
        return;
    }
  }
  if (!v6)
    goto LABEL_38;
  while (1)
  {
    v14 = *v8;
    v15 = v14 - 14;
    v3 = v14 - 11;
    if (v15 < 0xFFFFFFFB || v3 < 2)
      break;
    WTF::URLParser::syntaxViolation<unsigned char>(v5, (uint64_t)v8);
    v6 = v4[1];
    if (v6)
    {
      a3 = *v4;
      v8 = (_BYTE *)(*v4 + 1);
      --v6;
      *v4 = v8;
      v4[1] = v6;
      if (v6)
        continue;
    }
    goto LABEL_38;
  }
  v17 = (unsigned __int8 *)(a3 + 2);
  --v6;
  *v4 = a3 + 2;
  v4[1] = v6;
  if (!v6)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    if (v3 == 92 || v3 == 47)
    {
      v28 = (unsigned __int8 *)(a3 + 2);
      *v4 = a3 + 2;
      v4[1] = v6 - 1;
      if (v6 != 1)
      {
        do
        {
          v29 = *v28;
          v30 = v29 - 14;
          v31 = v29 - 11;
          if (v30 < 0xFFFFFFFB || v31 < 2)
            break;
          WTF::URLParser::syntaxViolation<unsigned char>(v5, (uint64_t)v28);
          a3 = v4[1];
          if (!a3)
            goto LABEL_38;
          v28 = (unsigned __int8 *)(*v4 + 1);
          v33 = a3 - 1;
          *v4 = v28;
          v4[1] = v33;
        }
        while (v33);
      }
    }
    return;
  }
  while (1)
  {
    v18 = *v17;
    v19 = v18 - 14;
    v20 = v18 - 11;
    if (v19 < 0xFFFFFFFB || v20 < 2)
      break;
    WTF::URLParser::syntaxViolation<unsigned char>(v5, (uint64_t)v17);
    a3 = v4[1];
    if (a3)
    {
      v17 = (unsigned __int8 *)(*v4 + 1);
      v6 = a3 - 1;
      *v4 = v17;
      v4[1] = a3 - 1;
      if (a3 != 1)
        continue;
    }
    goto LABEL_38;
  }
  while (1)
  {
    v22 = v17 + 1;
    v23 = v6 - 1;
    *v4 = v17 + 1;
    v4[1] = v23;
    if (!v23)
      break;
    v24 = *v22;
    v25 = v24 - 14;
    v26 = v24 - 11;
    if (v25 < 0xFFFFFFFB || v26 < 2)
    {
      if (*v22 == 92 || *v22 == 47)
      {
        v34 = v17 + 2;
        *v4 = v34;
        v4[1] = v23 - 1;
        if (v23 != 1)
        {
          do
          {
            v35 = *v34;
            v36 = v35 - 14;
            v37 = v35 - 11;
            if (v36 < 0xFFFFFFFB || v37 < 2)
              break;
            WTF::URLParser::syntaxViolation<unsigned char>(v5, (uint64_t)v34);
            a3 = v4[1];
            if (!a3)
              goto LABEL_38;
            v34 = (unsigned __int8 *)(*v4 + 1);
            v39 = a3 - 1;
            *v4 = v34;
            v4[1] = v39;
          }
          while (v39);
        }
      }
      return;
    }
    WTF::URLParser::syntaxViolation<unsigned char>(v5, (uint64_t)(v17 + 1));
    v6 = v4[1];
    if (!v6)
      goto LABEL_38;
    v17 = (unsigned __int8 *)*v4;
  }
}

void WTF::URLParser::encodeNonUTF8Query<unsigned char>(uint64_t a1, uint64_t a2, unsigned int a3, void (***a4)(WTF **__return_ptr, _QWORD, uint64_t, _QWORD), uint64_t a5, uint64_t a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  WTF *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  int v29;
  unsigned int v30;
  int v31;

  (**a4)(&v28, a4, a2, a3);
  v16 = v30;
  if ((a6 == 0) != (v30 == 0))
  {
    WTF::URLParser::syntaxViolation<unsigned char>(a1, a5);
  }
  else
  {
    v17 = v28;
    v18 = v30;
    if (v30)
    {
      v18 = 0;
      while (1)
      {
        if (a6 == v18)
        {
          __break(1u);
          return;
        }
        v19 = *((unsigned __int8 *)v17 + v18);
        if (*(unsigned __int8 *)(a5 + v18) != (_DWORD)v19 || (WTF::characterClassTable[v19] & 0x10) != 0)
          break;
        if ((_DWORD)v19 == 39 && *(_BYTE *)(a1 + 56) != 0)
          break;
        v31 = *((unsigned __int8 *)v17 + v18);
        if (*(_BYTE *)(a1 + 59))
        {
          v21 = *(unsigned int *)(a1 + 52);
          if ((_DWORD)v21 == *(_DWORD *)(a1 + 48))
          {
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(a1 + 40, &v31);
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)(a1 + 40) + v21) = v19;
            ++*(_DWORD *)(a1 + 52);
          }
        }
        if (v16 == ++v18)
        {
          v18 = v16;
          goto LABEL_19;
        }
      }
      WTF::URLParser::syntaxViolation<unsigned char>(a1, a5 + v18);
      v22 = v16 - v18;
      if (v16 > v18)
        goto LABEL_20;
    }
    else
    {
LABEL_19:
      v22 = v16 - v18;
      if (v16 > v18)
      {
LABEL_20:
        v23 = (unsigned __int8 *)v17 + v18;
        do
        {
          v24 = *v23++;
          v9 = v24;
          if ((WTF::characterClassTable[v24] & 0x10) == 0
            && ((_DWORD)v9 == 39 ? (v25 = *(_BYTE *)(a1 + 56) == 0) : (v25 = 1), v25))
          {
            v31 = v9;
            if (*(_BYTE *)(a1 + 59))
            {
              v26 = *(unsigned int *)(a1 + 52);
              if ((_DWORD)v26 == *(_DWORD *)(a1 + 48))
              {
                WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(a1 + 40, &v31);
              }
              else
              {
                *(_BYTE *)(*(_QWORD *)(a1 + 40) + v26) = v9;
                ++*(_DWORD *)(a1 + 52);
              }
            }
          }
          else
          {
            WTF::URLParser::percentEncodeByte((WTF::URLParser *)a1, v9);
          }
          --v22;
        }
        while (v22);
      }
    }
  }
  v27 = v28;
  if (v28)
  {
    v28 = 0;
    v29 = 0;
    WTF::fastFree((unint64_t)v27, (void *)v9, v10, v11, v12, v13, v14, v15);
  }
}

uint64_t WTF::URLParser::parsePort<unsigned char>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  unint64_t v16;
  int v17;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  _DWORD v36[3];

  if (*(_BYTE *)(a1 + 57))
    return 0;
  v5 = a2[1];
  if (!v5)
    goto LABEL_58;
  v2 = a1;
  v3 = *a2;
  v6 = (unsigned __int8 *)(*a2 + 1);
  v7 = v5 - 1;
  *a2 = (uint64_t)v6;
  a2[1] = v7;
  if (v7)
  {
    while (1)
    {
      v8 = *v6;
      v9 = v8 - 14;
      v10 = v8 - 11;
      if (v9 < 0xFFFFFFFB || v10 < 2)
        break;
      WTF::URLParser::syntaxViolation<unsigned char>(v2, v3);
      v12 = a2[1];
      if (!v12)
        goto LABEL_58;
      v6 = (unsigned __int8 *)(*a2 + 1);
      v7 = v12 - 1;
      *a2 = (uint64_t)v6;
      a2[1] = v7;
      if (!v7)
        goto LABEL_11;
    }
    v14 = 0;
    v15 = 0;
    v16 = 0;
    do
    {
      while (1)
      {
        v17 = *v6;
        if ((v17 - 14) >= 0xFFFFFFFB && (v17 - 11) > 1)
          break;
        if ((v17 - 48) > 9)
          return 0;
        v19 = v17 == 48 && v16 == 0;
        v20 = v19;
        v14 = v17 + 10 * v14 - 48;
        if (HIWORD(v14))
          return 0;
        v15 |= v20;
        ++v16;
        --v7;
        *a2 = (uint64_t)++v6;
        a2[1] = v7;
        if (!v7)
          goto LABEL_30;
      }
      WTF::URLParser::syntaxViolation<unsigned char>(v2, v3);
      v21 = a2[1];
      if (!v21)
        goto LABEL_58;
      v7 = v21 - 1;
      v6 = (unsigned __int8 *)(*a2 + 1);
      *a2 = (uint64_t)v6;
      a2[1] = v7;
    }
    while (v7);
LABEL_30:
    v22 = v16 > 1;
    if (v14)
      v22 = v15;
    if (v22)
      WTF::URLParser::syntaxViolation<unsigned char>(v2, v3);
    v23 = (unint64_t)*(unsigned int *)(v2 + 8) >> 6;
    v24 = *(unsigned __int8 *)(v2 + 59);
    if (!*(_BYTE *)(v2 + 59))
    {
      v25 = *(_QWORD *)(v2 + 64);
      if (v25 && (v26 = *(_DWORD *)(v25 + 4)) != 0)
      {
        if (v23 >= v26)
          v23 = v26;
        else
          v23 = v23;
        v27 = WTF::URLParser::defaultPortForProtocol(*(unsigned __int8 **)(v25 + 8), v23 | ((unint64_t)((*(_DWORD *)(v25 + 16) >> 2) & 1) << 32));
        if (v27 < 0x10000)
          goto LABEL_45;
      }
      else
      {
        v27 = WTF::URLParser::defaultPortForProtocol("", 0x100000000);
        if (v27 < 0x10000)
        {
LABEL_45:
          v36[0] = 58;
          if (v24)
          {
            v32 = *(unsigned int *)(v2 + 52);
            if ((_DWORD)v32 == *(_DWORD *)(v2 + 48))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(v2 + 40, v36);
            }
            else
            {
              *(_BYTE *)(*(_QWORD *)(v2 + 40) + v32) = 58;
              ++*(_DWORD *)(v2 + 52);
            }
          }
          v29 = 0;
          do
          {
            v30 = (unsigned __int16)v14;
            *((_BYTE *)&v36[2] + v29-- + 3) = ((unsigned __int16)v14 % 0xAu) | 0x30;
            LOWORD(v14) = (unsigned __int16)v14 / 0xAu;
          }
          while (v30 > 9);
          if (!*(_BYTE *)(v2 + 59) || !v29)
          {
LABEL_49:
            if (*(_BYTE *)(v2 + 59))
            {
              v31 = *(_DWORD *)(v2 + 52) - *(_DWORD *)(v2 + 24);
              if (v31 < 8)
                goto LABEL_51;
            }
            else
            {
              v31 = *(_DWORD *)a2 - *(_DWORD *)(v2 + 72) - *(_DWORD *)(v2 + 24);
              if (v31 < 8)
              {
LABEL_51:
                *(_DWORD *)(v2 + 8) = *(_DWORD *)(v2 + 8) & 0xFFFFFFC7 | (8 * (v31 & 7));
                return 1;
              }
            }
            __break(0xC471u);
            JUMPOUT(0x197B4D164);
          }
          v33 = (char *)&v36[3] + v29;
          v34 = *(unsigned int *)(v2 + 52);
          v35 = v34;
          if (v34 - v29 > *(unsigned int *)(v2 + 48))
          {
            v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(v2 + 40, (WTF *)(v34 - v29), (uint64_t)&v36[3] + v29);
            v35 = *(unsigned int *)(v2 + 52);
          }
          if (v34 - v29 >= v35)
          {
            memcpy((void *)(*(_QWORD *)(v2 + 40) + v35), v33, -v29);
            *(_DWORD *)(v2 + 52) = v34 - v29;
            goto LABEL_49;
          }
          __break(0xC471u);
LABEL_71:
          JUMPOUT(0x197B4D0F8);
        }
      }
      goto LABEL_44;
    }
    if (*(_DWORD *)(v2 + 52) >= v23)
    {
      v27 = WTF::URLParser::defaultPortForProtocol(*(unsigned __int8 **)(v2 + 40), v23 | 0x100000000);
      if (v27 < 0x10000)
        goto LABEL_45;
LABEL_44:
      if ((unsigned __int16)v27 != (unsigned __int16)v14)
        goto LABEL_45;
LABEL_59:
      WTF::URLParser::syntaxViolation<unsigned char>(v2, v3);
      goto LABEL_49;
    }
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
LABEL_11:
  if (*(_BYTE *)(v2 + 59))
  {
    v13 = *(_DWORD *)(v2 + 52) - *(_DWORD *)(v2 + 24);
    if (v13 < 8)
      goto LABEL_13;
LABEL_54:
    __break(0xC471u);
    goto LABEL_71;
  }
  v13 = v3 - *(_DWORD *)(v2 + 72) - *(_DWORD *)(v2 + 24);
  if (v13 >= 8)
    goto LABEL_54;
LABEL_13:
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(v2 + 8) & 0xFFFFFFC7 | (8 * (v13 & 7));
  WTF::URLParser::syntaxViolation<unsigned char>(v2, v3);
  return 1;
}

void WTF::URLParser::parseIPv4Host<unsigned char,unsigned char>(uint64_t *a1, void *a2, uint64_t *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int *v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  WTF *v38;
  uint64_t v39;
  _BYTE v40[32];
  unsigned __int8 *v41;
  uint64_t v42;

  v41 = a4;
  v42 = a5;
  v38 = (WTF *)v40;
  v39 = 4;
  v37 = 0;
  if (!a5 || *a4 == 46)
  {
    *a1 = 0x100000001;
    return;
  }
  v11 = 0;
  while (1)
  {
    v12 = *a4;
    v13 = v12 - 14;
    v14 = v12 - 11;
    if (v13 >= 0xFFFFFFFB && v14 >= 2)
    {
      v37 = 1;
      --a5;
      v41 = ++a4;
      v42 = a5;
      goto LABEL_7;
    }
    if (v11 > 3)
      goto LABEL_20;
    WTF::URLParser::parseIPv4Piece<unsigned char>(&v36, &v41, &v37);
    if (v11 == (_DWORD)v39)
    {
      v17 = (_QWORD *)WTF::Vector<std::experimental::fundamentals_v3::expected<unsigned int,WTF::URLParser::IPv4PieceParsingError>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v38, (void *)(v11 + 1), (unint64_t)&v36, (uint64_t)a4, v16, a6, a7, a8);
      *((_QWORD *)v38 + HIDWORD(v39)) = *v17;
      v11 = ++HIDWORD(v39);
      a5 = v42;
      if (!v42)
        goto LABEL_22;
    }
    else
    {
      *((_QWORD *)v38 + v11) = v36;
      v11 = ++HIDWORD(v39);
      a5 = v42;
      if (!v42)
        goto LABEL_22;
    }
    a4 = v41;
    if (*v41 == 46)
      break;
LABEL_7:
    if (!a5)
      goto LABEL_22;
  }
  --a5;
  a4 = ++v41;
  v42 = a5;
  if (a5)
  {
    if (*a4 == 46)
    {
LABEL_20:
      v18 = 0x100000001;
      v19 = v38;
      goto LABEL_23;
    }
    goto LABEL_7;
  }
  v37 = 1;
LABEL_22:
  v18 = 0x100000001;
  v19 = v38;
  if (v11 - 5 >= 0xFFFFFFFC)
  {
    v20 = *((_DWORD *)v38 + 1);
    if (v20)
    {
      if (v20 != 1)
        goto LABEL_82;
      if (!*(_DWORD *)v38)
        goto LABEL_23;
    }
    v21 = v11;
    if (v11 != 1)
    {
      v22 = *((_DWORD *)v38 + 3);
      if (v22)
      {
        if (v22 != 1)
          goto LABEL_82;
        if (!*((_DWORD *)v38 + 2))
          goto LABEL_23;
      }
      if (v11 != 2)
      {
        v23 = *((_DWORD *)v38 + 5);
        if (v23)
        {
          if (v23 != 1)
            goto LABEL_82;
          if (!*((_DWORD *)v38 + 4))
            goto LABEL_23;
        }
        if (v11 != 3)
        {
          v24 = *((_DWORD *)v38 + 7);
          if (v24)
          {
            if (v24 != 1)
              goto LABEL_82;
            if (!*((_DWORD *)v38 + 6))
              goto LABEL_23;
          }
        }
      }
    }
    v25 = 0;
    v26 = (WTF *)((char *)v38 + 8 * v11);
    v27 = 8 * v21;
    v18 = 0x100000000;
    do
    {
      v28 = *(_DWORD *)((char *)v38 + v25 + 4);
      if (v28)
      {
        if (v28 != 1)
          goto LABEL_82;
        if (*(_DWORD *)((char *)v38 + v25) == 1)
          goto LABEL_23;
      }
      v25 += 8;
    }
    while (v27 != v25);
    if (v21 >= 2)
    {
      v29 = 0;
      while (v27 != v29)
      {
        if (*(_DWORD *)((char *)v38 + v29 + 4))
          goto LABEL_82;
        if (*(_DWORD *)((char *)v38 + v29) > 0xFFu)
          goto LABEL_23;
        v29 += 8;
        if (v27 - 8 == v29)
          goto LABEL_53;
      }
LABEL_83:
      __break(0xC471u);
      JUMPOUT(0x197B4D628);
    }
LABEL_53:
    v30 = (unsigned int *)((char *)v38 + 8 * v21 - 8);
    if (!v30[1])
    {
      v31 = 5 - v21;
      if (v31 >= 5)
        goto LABEL_83;
      if (WTF::pow256(unsigned long)::values[v31] <= (unint64_t)*v30)
        goto LABEL_23;
      if (!v37)
        goto LABEL_60;
      WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)a2, *a3);
      if (!HIDWORD(v39))
        goto LABEL_78;
      v19 = v38;
      v26 = (WTF *)((char *)v38 + 8 * HIDWORD(v39));
      do
      {
LABEL_60:
        if (*((_DWORD *)v19 + 1))
          goto LABEL_82;
        if (*(_DWORD *)v19 >= 0x100u)
          WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)a2, *a3);
        v19 = (WTF *)((char *)v19 + 8);
      }
      while (v19 != v26);
      v32 = HIDWORD(v39);
      if (HIDWORD(v39) != 4)
      {
LABEL_78:
        WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)a2, *a3);
        v32 = HIDWORD(v39);
        if (!HIDWORD(v39))
        {
          __break(0xC471u);
          JUMPOUT(0x197B4D644);
        }
      }
      v19 = v38;
      v33 = *((_QWORD *)v38 + v32 - 1);
      v34 = v32 - 1;
      HIDWORD(v39) = v34;
      if (!HIDWORD(v33))
      {
        if (!v34)
        {
          v18 = v33;
          goto LABEL_23;
        }
        if (!*((_DWORD *)v38 + 1))
        {
          v35 = v33 + (*(_DWORD *)v38 << 24);
          if (v34 == 1)
            goto LABEL_72;
          if (*((_DWORD *)v38 + 3))
            goto LABEL_82;
          v35 += *((_DWORD *)v38 + 2) << 16;
          if (v34 == 2)
          {
LABEL_72:
            v18 = v35;
            goto LABEL_23;
          }
          if (!*((_DWORD *)v38 + 5))
          {
            v35 += *((_DWORD *)v38 + 4) << 8;
            if (v34 == 3)
              goto LABEL_72;
            if (!*((_DWORD *)v38 + 7))
            {
              if (v34 == 4)
              {
                v18 = *((_DWORD *)v38 + 6) + v35;
                goto LABEL_23;
              }
              if (!*((_DWORD *)v38 + 9))
              {
                __break(0xC471u);
                JUMPOUT(0x197B4D66CLL);
              }
            }
          }
        }
      }
    }
LABEL_82:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_83;
  }
LABEL_23:
  *a1 = v18;
  if (v40 != (_BYTE *)v19)
  {
    if (v19)
    {
      v38 = 0;
      LODWORD(v39) = 0;
      WTF::fastFree((unint64_t)v19, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    }
  }
}

uint64_t WTF::dnsNameEndsInNumber(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v37;
  int v38;
  unsigned int v39;
  _BOOL8 v40;
  BOOL v41;
  char v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  char v46;
  unint64_t v47;
  int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  char v54;

  v2 = a2;
  v3 = a2;
  v4 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) != 0)
  {
    if (!(_DWORD)a2)
      return 0;
    v5 = a2 - 1;
    v6 = a1[v5];
    if (a2 == 1)
    {
      if (v6 == 46)
      {
LABEL_5:
        LODWORD(v7) = a2 - 2;
LABEL_6:
        if (v7 >= a2)
          v7 = v5;
        else
          v7 = v7;
        if (v7 >= a2)
          goto LABEL_60;
        v8 = a1[v7];
        if (v7 - 1 >= a2)
          goto LABEL_58;
        if (v8 != 46)
        {
          while (v7)
          {
            v9 = v7 - 1;
            v10 = a1[--v7];
            if (v10 == 46)
            {
LABEL_27:
              v3 = v5;
              LODWORD(v7) = v9;
              goto LABEL_43;
            }
          }
LABEL_41:
          LODWORD(v7) = -1;
        }
LABEL_42:
        v3 = v5;
LABEL_43:
        v5 = (v7 + 1);
        if (a2 <= v5)
          return 0;
        LODWORD(v7) = v3 + ~(_DWORD)v7;
        if ((int)a2 - (int)v5 <= v7)
        {
          LODWORD(v7) = a2 - v5;
          if (!(_DWORD)v5)
          {
LABEL_49:
            if (!(_DWORD)a2)
              return 0;
            goto LABEL_54;
          }
        }
        a2 = v7;
        v2 -= v5;
        if (!v4)
        {
          if (v2 < v7)
            goto LABEL_60;
          a1 += 2 * v5;
          if (!(_DWORD)v7)
            return 0;
LABEL_54:
          if ((a2 & 0xFF00000000) != 0)
            v18 = *a1;
          else
            v18 = *(unsigned __int16 *)a1;
          if ((v18 - 48) <= 9)
          {
            if ((_DWORD)a2 == 1)
              return 1;
            if ((a2 & 0xFF00000000) != 0)
            {
              if (v18 == 48 && (a1[1] & 0xDF) == 0x58)
              {
                if (a2 >= 3)
                {
                  v20 = 2;
                  do
                  {
                    v25 = a1[v20];
                    v26 = v25 - 48;
                    v27 = (v25 | 0x20) - 97;
                    if (v26 >= 0xA && v27 > 5)
                      return v20 == -1;
                  }
                  while (a2 != ++v20);
                }
LABEL_111:
                v20 = -1;
                return v20 == -1;
              }
              v43 = a2 - 1;
              do
              {
                v44 = *a1++;
                v45 = v44 - 48;
                v40 = (v44 - 48) < 0xA;
                v41 = v43-- != 0;
                v46 = v41;
              }
              while (v45 <= 9 && (v46 & 1) != 0);
            }
            else
            {
              if (v18 == 48 && (*((_WORD *)a1 + 1) & 0xFFDF) == 0x58)
              {
                if (a2 >= 3)
                {
                  v20 = 2;
                  while (1)
                  {
                    v33 = *(unsigned __int16 *)&a1[2 * v20];
                    v34 = v33 - 48;
                    v35 = (v33 | 0x20) - 97;
                    if (v34 >= 0xA && v35 > 5)
                      return v20 == -1;
                    if (a2 == ++v20)
                      goto LABEL_111;
                  }
                }
                goto LABEL_111;
              }
              v51 = a2 - 1;
              do
              {
                v52 = *(unsigned __int16 *)a1;
                a1 += 2;
                v53 = v52 - 48;
                v40 = (v52 - 48) < 0xA;
                v41 = v51-- != 0;
                v54 = v41;
              }
              while (v53 <= 9 && (v54 & 1) != 0);
            }
            return v40;
          }
          return 0;
        }
        if (v2 >= v7)
        {
          a1 += v5;
          a2 = v7 | 0x100000000;
          goto LABEL_49;
        }
LABEL_60:
        while (1)
        {
          __break(1u);
LABEL_61:
          if ((_DWORD)v7 != 46)
            goto LABEL_62;
LABEL_18:
          LODWORD(v7) = v5 - 1;
LABEL_19:
          if (v7 >= a2)
            v7 = v5;
          else
            v7 = v7;
          if (v7 < v2)
          {
            v8 = *(unsigned __int16 *)&a1[2 * v7];
            if (v7 - 1 < v2)
            {
              if (v8 == 46)
                goto LABEL_42;
              while (v7)
              {
                v9 = v7 - 1;
                v11 = *(unsigned __int16 *)&a1[2 * v7-- - 2];
                if (v11 == 46)
                  goto LABEL_27;
              }
              goto LABEL_41;
            }
LABEL_58:
            if (v8 == 46)
              goto LABEL_42;
            if (!v7)
              goto LABEL_41;
          }
        }
      }
LABEL_57:
      v19 = *a1;
      goto LABEL_63;
    }
    if (v6 == 46)
      goto LABEL_5;
    v12 = a2;
    while (1)
    {
      v13 = v12 - 1;
      if (v12 == 1)
        break;
      v14 = a1[v12-- - 2];
      if (v14 == 46)
        goto LABEL_35;
    }
  }
  else
  {
    if (!(_DWORD)a2)
      return 0;
    v5 = a2 - 1;
    LODWORD(v7) = *(unsigned __int16 *)&a1[2 * v5];
    if (a2 == 1)
      goto LABEL_61;
    if ((_DWORD)v7 == 46)
      goto LABEL_18;
    v15 = a2;
    while (1)
    {
      v13 = v15 - 1;
      if (v15 == 1)
        break;
      v16 = *(unsigned __int16 *)&a1[2 * v15-- - 4];
      if (v16 == 46)
      {
LABEL_35:
        LODWORD(v7) = v13 - 1;
        if (v13 - 1 != v5)
          goto LABEL_43;
        LODWORD(v7) = v5 - 1;
        if (!v4)
          goto LABEL_19;
        goto LABEL_6;
      }
    }
  }
  if (v4)
    goto LABEL_57;
LABEL_62:
  v19 = *(unsigned __int16 *)a1;
LABEL_63:
  if ((v19 - 48) > 9)
    return 0;
  if ((_DWORD)a2 == 1)
    return 1;
  if (v4)
  {
    if (v19 == 48 && (a1[1] & 0xDF) == 0x58)
    {
      if (a2 >= 3)
      {
        v20 = 2;
        while (1)
        {
          v21 = a1[v20];
          v22 = v21 - 48;
          v23 = (v21 | 0x20) - 97;
          if (v22 >= 0xA && v23 > 5)
            return v20 == -1;
          if (v2 == ++v20)
            goto LABEL_111;
        }
      }
      goto LABEL_111;
    }
    v37 = v2 - 1;
    do
    {
      v38 = *a1++;
      v39 = v38 - 48;
      v40 = (v38 - 48) < 0xA;
      v41 = v37-- != 0;
      v42 = v41;
    }
    while (v39 <= 9 && (v42 & 1) != 0);
  }
  else
  {
    if (v19 == 48 && (*((_WORD *)a1 + 1) & 0xFFDF) == 0x58)
    {
      if (a2 >= 3)
      {
        v20 = 2;
        while (1)
        {
          v29 = *(unsigned __int16 *)&a1[2 * v20];
          v30 = v29 - 48;
          v31 = (v29 | 0x20) - 97;
          if (v30 >= 0xA && v31 > 5)
            return v20 == -1;
          if (v2 == ++v20)
            goto LABEL_111;
        }
      }
      goto LABEL_111;
    }
    v47 = v2 - 1;
    do
    {
      v48 = *(unsigned __int16 *)a1;
      a1 += 2;
      v49 = v48 - 48;
      v40 = (v48 - 48) < 0xA;
      v41 = v47-- != 0;
      v50 = v41;
    }
    while (v49 <= 9 && (v50 & 1) != 0);
  }
  return v40;
}

void WTF::URLParser::percentDecode<unsigned char>(uint64_t a1, uint64_t a2, uint64_t a3, WTF *this, uint64_t *a5)
{
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  char v31;
  char v32;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 2048;
  if ((unint64_t)this >= 0x801)
  {
    if ((unint64_t)this >> 32)
    {
      __break(0xC471u);
      return;
    }
    v10 = WTF::fastMalloc(this);
    *(_DWORD *)(a1 + 8) = (_DWORD)this;
    *(_QWORD *)a1 = v10;
    goto LABEL_6;
  }
  if (this)
  {
LABEL_6:
    v11 = 0;
    do
    {
      while (1)
      {
        v32 = *(_BYTE *)(a3 + v11);
        if (v32 == 37)
          break;
        v28 = *(unsigned int *)(a1 + 12);
        if ((_DWORD)v28 != *(_DWORD *)(a1 + 8))
        {
          *(_BYTE *)(*(_QWORD *)a1 + v28) = v32;
          goto LABEL_33;
        }
        v29 = (WTF *)(v28 + 1);
LABEL_30:
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *WTF::Vector<unsigned char,2048ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, v29, (unint64_t)&v32);
LABEL_33:
        ++*(_DWORD *)(a1 + 12);
        if (++v11 >= (unint64_t)this)
          return;
      }
      if ((unint64_t)this < 3 || v11 >= (unint64_t)this - 2)
        goto LABEL_28;
      v12 = *(unsigned __int8 *)(a3 + v11 + 1);
      v13 = v12 - 48;
      v14 = (v12 | 0x20) - 97;
      v15 = v13 >= 0xA && v14 > 5;
      if (v15
        || ((v16 = v11 + 2, v17 = *(unsigned __int8 *)(a3 + v11 + 2),
                            v18 = v17 - 48,
                            v19 = (v17 | 0x20) - 97,
                            v18 >= 0xA)
          ? (v20 = v19 > 5)
          : (v20 = 0),
            v20))
      {
LABEL_28:
        v30 = *(unsigned int *)(a1 + 12);
        if ((_DWORD)v30 != *(_DWORD *)(a1 + 8))
        {
          *(_BYTE *)(*(_QWORD *)a1 + v30) = 37;
          goto LABEL_33;
        }
        v29 = (WTF *)(v30 + 1);
        goto LABEL_30;
      }
      WTF::URLParser::syntaxViolation<unsigned char>(a2, *a5);
      v21 = *(unsigned __int8 *)(a3 + v11 + 1);
      v22 = *(unsigned __int8 *)(a3 + v16);
      if (v21 >= 0x41)
        v23 = 9;
      else
        v23 = 0;
      v24 = v23 + v21;
      if (v22 >= 0x41)
        v25 = (v22 + 9) & 0xF;
      else
        v25 = v22 - 48;
      v26 = v25 | (16 * v24);
      v31 = v26;
      v27 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v27 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *WTF::Vector<unsigned char,2048ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, (WTF *)(v27 + 1), (unint64_t)&v31);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v27) = v26;
      ++*(_DWORD *)(a1 + 12);
      v11 += 3;
    }
    while (v16 + 1 < (unint64_t)this);
  }
}

void WTF::URLParser::domainToASCII<unsigned char>()
{
  uint64_t v0;
  WTF::StringImpl *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  WTF *v10;
  BOOL v12;
  unint64_t v13;
  int8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t v17;
  unint64_t v18;
  unint64_t v19;
  WTF *v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint16x4_t *v28;
  unsigned __int8 v29;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t *v36;
  uint64_t v37;
  int8x16_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int16 *v41;
  uint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  uint16x4_t *v45;
  unint64_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  uint16x8_t v53;
  uint32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  uint32x4_t v58;
  int8x16_t v59;
  int8x16_t v60;
  uint32x4_t v61;
  int8x16_t v62;
  int8x16_t v63;
  uint32x4_t v64;
  int8x16_t v65;
  int8x16_t v66;
  unsigned int v67;
  uint64_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t *v71;
  uint64_t v72;
  int8x16_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned __int8 *v76;
  unint64_t v77;
  int8x16_t v78;
  int8x16_t v79;
  uint8x8_t *v80;
  unint64_t v81;
  int8x16_t v82;
  int8x16_t v83;
  uint8x8_t v84;
  uint16x8_t v85;
  uint32x4_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  uint32x4_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  unint64_t v95;
  uint8x16_t *v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  uint8x16_t v103;
  uint16x8_t v104;
  uint32x4_t v105;
  int8x16_t v106;
  int8x16_t v107;
  uint16x8_t v108;
  uint32x4_t v109;
  int8x16_t v110;
  int8x16_t v111;
  uint32x4_t v112;
  int8x16_t v113;
  uint32x4_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  unsigned int v119;
  unint64_t v120;
  const UIDNA *v121;
  int v122;
  unint64_t v123;
  WTF *v124;
  unint64_t v125;
  unint64_t v126;
  WTF *v127;
  WTF *v128;
  __int128 v129;
  char *v130;
  int8x16_t v131;
  __int128 v132;
  __int128 v133;
  char *v134;
  char *v135;
  char *v136;
  WTF *v137;
  unint64_t v138;
  unint64_t v139;
  WTF *v140;
  WTF *v141;
  __int16 v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int32_t v150;
  WTF *v151;
  WTF *v153;
  uint64_t v154;
  size_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  WTF *v160;
  WTF *v161;
  uint64_t v162;
  unint64_t v163;
  int v164;
  unsigned int v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  WTF *v174;
  char *v175;
  unint64_t v176;
  UChar *v177;
  unint64_t v178;
  unint64_t v179;
  uint8x8_t *v180;
  uint16x8_t *v181;
  unint64_t v182;
  uint8x16_t v183;
  uint16x8_t v184;
  uint16x8_t v185;
  uint8x8_t *v186;
  uint16x8_t *v187;
  unint64_t v188;
  uint8x8_t v189;
  int8x16_t *v190;
  int8x16_t *v191;
  unint64_t v192;
  int8x16_t v193;
  int8x16_t v194;
  int8x16_t v195;
  int8x16_t v196;
  int8x8_t *v197;
  unint64_t v198;
  UChar *v199;
  int16x8_t v200;
  char v201;
  int v202;
  int v203;
  unsigned __int16 v204;
  WTF *v205;
  unint64_t v206;
  _BYTE v207[64];
  WTF *v208;
  unint64_t v209;
  UIDNAInfo pInfo;
  UErrorCode pErrorCode;
  WTF *v212;
  size_t __n;
  _BYTE v214[2055];
  char v215;
  WTF **v216;
  UChar dest[16];
  _QWORD v218[510];
  int8x16x2_t v219;
  int8x16x2_t v220;
  int8x16x2_t v221;

  v0 = MEMORY[0x1E0C80A78]();
  v4 = v3;
  v5 = v2;
  v6 = (uint64_t)v1;
  v7 = v0;
  v218[508] = *MEMORY[0x1E0C80C00];
  v212 = (WTF *)v214;
  __n = 2048;
  v8 = *(_DWORD *)(v2 + 16);
  v9 = *(_QWORD *)(v2 + 8);
  v10 = (WTF *)*(unsigned int *)(v2 + 4);
  v12 = (v9 & 7) == 0 || v10 == 0;
  if ((v8 & 4) == 0)
  {
    v13 = v9 + 2 * (_QWORD)v10;
    if (v12)
    {
      v14 = 0;
      v15 = *(_QWORD *)(v2 + 8);
    }
    else
    {
      v14 = 0;
      v21 = 2 * (_QWORD)v10 - 2;
      v22 = v9 + 2;
      v15 = *(_QWORD *)(v2 + 8);
      do
      {
        v23 = *(unsigned __int16 *)v15;
        v15 += 2;
        *(_QWORD *)&v14 |= v23;
        if ((v22 & 7) == 0)
          break;
        v24 = v21;
        v21 -= 2;
        v22 += 2;
      }
      while (v24);
    }
    v25 = v13 & 0xFFFFFFFFFFFFFFF8;
    if (v15 >= (v13 & 0xFFFFFFFFFFFFFFF8))
    {
      v28 = (uint16x4_t *)v15;
      goto LABEL_36;
    }
    v26 = v15 + 8;
    if (v25 > v15 + 8)
      v26 = v13 & 0xFFFFFFFFFFFFFFF8;
    v27 = v26 + ~v15;
    if (v27 >= 0x18)
    {
      v33 = (v27 >> 3) + 1;
      v28 = (uint16x4_t *)(v15 + 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL));
      v34 = 0uLL;
      v35 = (int8x16_t)(unint64_t)v14;
      v36 = (int8x16_t *)(v15 + 16);
      v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v35 = vorrq_s8(v36[-1], v35);
        v34 = vorrq_s8(*v36, v34);
        v36 += 2;
        v37 -= 4;
      }
      while (v37);
      v38 = vorrq_s8(v34, v35);
      v14 = vorr_s8(*(int8x8_t *)v38.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
      if (v33 == (v33 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_36:
        if (v28 == (uint16x4_t *)v13)
          goto LABEL_43;
        v40 = v9 + 2 * (_QWORD)v10 - (_QWORD)v28 - 2;
        if (v40 >= 0x1E)
        {
          v42 = (v40 >> 1) + 1;
          v43 = 0uLL;
          v44 = (int8x16_t)(unint64_t)v14;
          v41 = (unsigned __int16 *)v28 + (v42 & 0xFFFFFFFFFFFFFFF0);
          v45 = v28 + 2;
          v46 = v42 & 0xFFFFFFFFFFFFFFF0;
          v47 = 0uLL;
          v48 = 0uLL;
          v49 = 0uLL;
          v50 = 0uLL;
          v51 = 0uLL;
          v52 = 0uLL;
          do
          {
            v53 = *(uint16x8_t *)v45[-2].i8;
            v54 = vmovl_u16(*(uint16x4_t *)v53.i8);
            v55.i64[0] = v54.u32[0];
            v55.i64[1] = v54.u32[1];
            v56 = v55;
            v55.i64[0] = v54.u32[2];
            v55.i64[1] = v54.u32[3];
            v57 = v55;
            v58 = vmovl_high_u16(v53);
            v55.i64[0] = v58.u32[0];
            v55.i64[1] = v58.u32[1];
            v59 = v55;
            v55.i64[0] = v58.u32[2];
            v55.i64[1] = v58.u32[3];
            v60 = v55;
            v61 = vmovl_u16(*v45);
            v55.i64[0] = v61.u32[0];
            v55.i64[1] = v61.u32[1];
            v62 = v55;
            v55.i64[0] = v61.u32[2];
            v55.i64[1] = v61.u32[3];
            v63 = v55;
            v64 = vmovl_high_u16(*(uint16x8_t *)v45->i8);
            v55.i64[0] = v64.u32[0];
            v55.i64[1] = v64.u32[1];
            v65 = v55;
            v55.i64[0] = v64.u32[2];
            v55.i64[1] = v64.u32[3];
            v48 = vorrq_s8(v48, v60);
            v47 = vorrq_s8(v47, v59);
            v43 = vorrq_s8(v43, v57);
            v44 = vorrq_s8(v44, v56);
            v52 = vorrq_s8(v52, v55);
            v51 = vorrq_s8(v51, v65);
            v50 = vorrq_s8(v50, v63);
            v49 = vorrq_s8(v49, v62);
            v45 += 4;
            v46 -= 16;
          }
          while (v46);
          v66 = vorrq_s8(vorrq_s8(vorrq_s8(v49, v44), vorrq_s8(v51, v47)), vorrq_s8(vorrq_s8(v50, v43), vorrq_s8(v52, v48)));
          v14 = vorr_s8(*(int8x8_t *)v66.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL));
          if (v42 == (v42 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_43:
            if ((*(_QWORD *)&v14 & 0xFF80FF80FF80FF80) != 0)
              goto LABEL_79;
            goto LABEL_78;
          }
        }
        else
        {
          v41 = (unsigned __int16 *)v28;
        }
        do
        {
          v67 = *v41++;
          *(_QWORD *)&v14 |= v67;
        }
        while (v41 != (unsigned __int16 *)v13);
        goto LABEL_43;
      }
    }
    else
    {
      v28 = (uint16x4_t *)v15;
    }
    do
    {
      v39 = (uint64_t)*v28++;
      *(_QWORD *)&v14 |= v39;
    }
    while ((unint64_t)v28 < v25);
    goto LABEL_36;
  }
  v16 = (unint64_t)v10 + v9;
  if (v12)
  {
    v17 = 0;
    v18 = *(_QWORD *)(v2 + 8);
    v19 = v16 & 0xFFFFFFFFFFFFFFF8;
    if (v9 >= (v16 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_12:
      v20 = (WTF *)v18;
      goto LABEL_62;
    }
  }
  else
  {
    v18 = v9 + 1;
    v29 = *(_BYTE *)v9;
    if (((v9 + 1) & 7) != 0 && (_DWORD)v10 != 1)
    {
      v29 |= *(_BYTE *)(v9 + 1);
      v18 = v9 + 2;
      if (((v9 + 2) & 7) != 0 && (_DWORD)v10 != 2)
      {
        v29 |= *(_BYTE *)(v9 + 2);
        v18 = v9 + 3;
        if (((v9 + 3) & 7) != 0 && (_DWORD)v10 != 3)
        {
          v29 |= *(_BYTE *)(v9 + 3);
          v18 = v9 + 4;
          if (((v9 + 4) & 7) != 0 && (_DWORD)v10 != 4)
          {
            v29 |= *(_BYTE *)(v9 + 4);
            v18 = v9 + 5;
            if (((v9 + 5) & 7) != 0 && (_DWORD)v10 != 5)
            {
              v29 |= *(_BYTE *)(v9 + 5);
              v18 = v9 + 6;
              if (((v9 + 6) & 7) != 0 && (_DWORD)v10 != 6)
              {
                v29 |= *(_BYTE *)(v9 + 6);
                v18 = v9 + 7;
                if (((v9 + 7) & 7) != 0 && (_DWORD)v10 != 7)
                {
                  v29 |= *(_BYTE *)(v9 + 7);
                  v18 = v9 + 8;
                }
              }
            }
          }
        }
      }
    }
    v17 = (int8x8_t)v29;
    v19 = v16 & 0xFFFFFFFFFFFFFFF8;
    if (v18 >= (v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_12;
  }
  v31 = v18 + 8;
  if (v19 > v18 + 8)
    v31 = v19;
  v32 = v31 + ~v18;
  if (v32 < 0x18)
  {
    v20 = (WTF *)v18;
    do
    {
LABEL_61:
      v74 = *(_QWORD *)v20;
      v20 = (WTF *)((char *)v20 + 8);
      *(_QWORD *)&v17 |= v74;
    }
    while ((unint64_t)v20 < v19);
    goto LABEL_62;
  }
  v68 = (v32 >> 3) + 1;
  v20 = (WTF *)(v18 + 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL));
  v69 = 0uLL;
  v70 = (int8x16_t)(unint64_t)v17;
  v71 = (int8x16_t *)(v18 + 16);
  v72 = v68 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v70 = vorrq_s8(v71[-1], v70);
    v69 = vorrq_s8(*v71, v69);
    v71 += 2;
    v72 -= 4;
  }
  while (v72);
  v73 = vorrq_s8(v69, v70);
  v17 = vorr_s8(*(int8x8_t *)v73.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL));
  if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_61;
LABEL_62:
  if (v20 == (WTF *)v16)
    goto LABEL_77;
  v75 = (WTF *)((char *)v10 + v9) - v20;
  if (v75 < 8)
  {
    v76 = (unsigned __int8 *)v20;
    goto LABEL_76;
  }
  if (v75 >= 0x10)
  {
    v77 = v75 & 0xFFFFFFFFFFFFFFF0;
    v93 = 0uLL;
    v94 = (int8x16_t)(unint64_t)v17;
    v95 = v75 & 0xFFFFFFFFFFFFFFF0;
    v96 = (uint8x16_t *)v20;
    v97 = 0uLL;
    v98 = 0uLL;
    v99 = 0uLL;
    v100 = 0uLL;
    v101 = 0uLL;
    v102 = 0uLL;
    do
    {
      v103 = *v96++;
      v104 = vmovl_u8(*(uint8x8_t *)v103.i8);
      v105 = vmovl_u16(*(uint16x4_t *)v104.i8);
      v106.i64[0] = v105.u32[0];
      v106.i64[1] = v105.u32[1];
      v107 = v106;
      v108 = vmovl_high_u8(v103);
      v109 = vmovl_high_u16(v108);
      v106.i64[0] = v109.u32[2];
      v106.i64[1] = v109.u32[3];
      v110 = v106;
      v106.i64[0] = v105.u32[2];
      v106.i64[1] = v105.u32[3];
      v111 = v106;
      v112 = vmovl_high_u16(v104);
      v106.i64[0] = v112.u32[0];
      v106.i64[1] = v112.u32[1];
      v113 = v106;
      v114 = vmovl_u16(*(uint16x4_t *)v108.i8);
      v106.i64[0] = v114.u32[0];
      v106.i64[1] = v114.u32[1];
      v115 = v106;
      v106.i64[0] = v109.u32[0];
      v106.i64[1] = v109.u32[1];
      v116 = v106;
      v106.i64[0] = v112.u32[2];
      v106.i64[1] = v112.u32[3];
      v117 = v106;
      v106.i64[0] = v114.u32[2];
      v106.i64[1] = v114.u32[3];
      v100 = vorrq_s8(v100, v106);
      v98 = vorrq_s8(v98, v117);
      v101 = vorrq_s8(v101, v116);
      v99 = vorrq_s8(v99, v115);
      v97 = vorrq_s8(v97, v113);
      v93 = vorrq_s8(v93, v111);
      v102 = vorrq_s8(v102, v110);
      v94 = vorrq_s8(v94, v107);
      v95 -= 16;
    }
    while (v95);
    v118 = vorrq_s8(vorrq_s8(vorrq_s8(v94, v99), vorrq_s8(v97, v101)), vorrq_s8(vorrq_s8(v93, v100), vorrq_s8(v98, v102)));
    v17 = vorr_s8(*(int8x8_t *)v118.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL));
    if (v75 == v77)
      goto LABEL_77;
    if ((v75 & 8) == 0)
    {
      v76 = (unsigned __int8 *)v20 + v77;
      do
      {
LABEL_76:
        v119 = *v76++;
        *(_QWORD *)&v17 |= v119;
      }
      while (v76 != (unsigned __int8 *)v16);
      goto LABEL_77;
    }
  }
  else
  {
    v77 = 0;
  }
  v76 = (unsigned __int8 *)v20 + (v75 & 0xFFFFFFFFFFFFFFF8);
  v78 = 0uLL;
  v79 = (int8x16_t)(unint64_t)v17;
  v80 = (uint8x8_t *)((char *)v20 + v77);
  v81 = v77 - (v75 & 0xFFFFFFFFFFFFFFF8);
  v82 = 0uLL;
  v83 = 0uLL;
  do
  {
    v84 = *v80++;
    v85 = vmovl_u8(v84);
    v86 = vmovl_u16(*(uint16x4_t *)v85.i8);
    v87.i64[0] = v86.u32[0];
    v87.i64[1] = v86.u32[1];
    v88 = v87;
    v87.i64[0] = v86.u32[2];
    v87.i64[1] = v86.u32[3];
    v89 = v87;
    v90 = vmovl_high_u16(v85);
    v87.i64[0] = v90.u32[0];
    v87.i64[1] = v90.u32[1];
    v91 = v87;
    v87.i64[0] = v90.u32[2];
    v87.i64[1] = v90.u32[3];
    v83 = vorrq_s8(v83, v87);
    v82 = vorrq_s8(v82, v91);
    v78 = vorrq_s8(v78, v89);
    v79 = vorrq_s8(v79, v88);
    v81 += 8;
  }
  while (v81);
  v92 = vorrq_s8(vorrq_s8(v79, v82), vorrq_s8(v78, v83));
  v17 = vorr_s8(*(int8x8_t *)v92.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL));
  if (v75 != (v75 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_76;
LABEL_77:
  if ((*(_QWORD *)&v17 & 0x8080808080808080) != 0)
    goto LABEL_79;
LABEL_78:
  if ((WTF::URLParser::subdomainStartsWithXNDashDash((unsigned __int16 **)v2, v1) & 1) == 0)
  {
    if ((v8 & 4) == 0)
    {
      if (v10 >= 0x801)
      {
        LODWORD(__n) = (_DWORD)v10;
        v212 = (WTF *)WTF::fastMalloc(v10);
        goto LABEL_176;
      }
      if ((_DWORD)v10)
      {
        do
        {
LABEL_176:
          v203 = *(unsigned __int16 *)v9;
          v204 = v203 - 65;
          if ((v203 - 65) <= 0x19)
          {
            WTF::URLParser::syntaxViolation<unsigned char>(v6, *v4);
            LOWORD(v203) = *(_WORD *)v9;
            v204 = *(_WORD *)v9 - 65;
          }
          *((_BYTE *)v212 + HIDWORD(__n)) = v203 | (32 * (v204 < 0x1Au));
          v165 = ++HIDWORD(__n);
          v9 += 2;
          v10 = (WTF *)((char *)v10 - 1);
        }
        while (v10);
        goto LABEL_179;
      }
LABEL_150:
      v165 = 0;
LABEL_179:
      *(_QWORD *)v7 = v7 + 16;
      *(_DWORD *)(v7 + 8) = 2048;
      if (v212 == (WTF *)v214)
      {
        memcpy((void *)(v7 + 16), v214, v165);
      }
      else
      {
        *(_QWORD *)v7 = v212;
        *(_DWORD *)(v7 + 8) = __n;
      }
      *(_DWORD *)(v7 + 12) = v165;
LABEL_183:
      *(_BYTE *)(v7 + 2064) = 1;
      return;
    }
    if (v10 < 0x801)
    {
      if (!(_DWORD)v10)
        goto LABEL_150;
    }
    else
    {
      LODWORD(__n) = (_DWORD)v10;
      v212 = (WTF *)WTF::fastMalloc(v10);
    }
    do
    {
      v164 = *(unsigned __int8 *)v9;
      if ((v164 - 65) <= 0x19)
      {
        WTF::URLParser::syntaxViolation<unsigned char>(v6, *v4);
        v164 = *(unsigned __int8 *)v9;
      }
      *((_BYTE *)v212 + HIDWORD(__n)) = WTF::asciiCaseFoldTable[v164];
      v165 = ++HIDWORD(__n);
      ++v9;
      v10 = (WTF *)((char *)v10 - 1);
    }
    while (v10);
    goto LABEL_179;
  }
LABEL_79:
  pErrorCode = U_ZERO_ERROR;
  pInfo = (UIDNAInfo)xmmword_199123570;
  v120 = atomic_load(&WTF::URLParser::internationalDomainNameTranscoder(void)::onceFlag);
  if (v120 != -1)
  {
    v205 = (WTF *)&v215;
    v216 = &v205;
    std::__call_once(&WTF::URLParser::internationalDomainNameTranscoder(void)::onceFlag, &v216, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::URLParser::internationalDomainNameTranscoder(void)::$_0 &&>>);
  }
  v121 = (const UIDNA *)WTF::URLParser::internationalDomainNameTranscoder(void)::encoder;
  v122 = *(_DWORD *)(v5 + 16);
  v123 = *(unsigned int *)(v5 + 4);
  v124 = *(WTF **)(v5 + 8);
  v205 = (WTF *)v207;
  v206 = 32;
  v208 = 0;
  v209 = 0;
  if ((v122 & 4) == 0)
  {
    v125 = v123;
    goto LABEL_100;
  }
  if (v123 <= 0x20)
  {
    HIDWORD(v206) = v123;
    v127 = (WTF *)v207;
    v128 = (WTF *)v207;
  }
  else
  {
    if (v123 <= 0x29)
      v126 = 41;
    else
      v126 = v123;
    if (v126 >> 31)
      goto LABEL_187;
    v127 = (WTF *)WTF::fastMalloc((WTF *)(2 * v126));
    v205 = v127;
    v206 = __PAIR64__(v123, v126);
    if (v123 < 0x40)
    {
      v128 = v127;
      v137 = (WTF *)((char *)v127 + 2 * v123);
      if (v127 != v137)
        goto LABEL_94;
      goto LABEL_99;
    }
    v128 = (WTF *)((char *)v127 + 2 * (v123 & 0xFFFFFFC0));
    v129 = 0uLL;
    v130 = (char *)v127;
    do
    {
      v219.val[0] = *(int8x16_t *)v124;
      v131 = *((int8x16_t *)v124 + 1);
      v220.val[0] = (int8x16_t)*((_OWORD *)v124 + 2);
      v132 = *((_OWORD *)v124 + 3);
      v124 = (WTF *)((char *)v124 + 64);
      v133 = v132;
      v220.val[1] = 0uLL;
      v221.val[0] = v131;
      v219.val[1] = 0uLL;
      v134 = v130;
      vst2q_s8(v134, v219);
      v134 += 32;
      v221.val[1] = 0uLL;
      vst2q_s8(v134, v221);
      v135 = v130 + 64;
      vst2q_s8(v135, v220);
      v136 = v130 + 96;
      vst2q_s8(v136, *(int8x16x2_t *)(&v129 - 1));
      v130 += 128;
    }
    while (v130 != (char *)v128);
  }
  v137 = (WTF *)((char *)v127 + 2 * v123);
  if (v128 != v137)
  {
LABEL_94:
    v138 = v137 - v128 - 2;
    if (v138 < 0xE
      || (v139 = (WTF *)((char *)v127 + 2 * v123) - v128 - 2, v128 < (WTF *)((char *)v124 + (v139 >> 1) + 1))
      && v124 < (WTF *)((char *)v128 + (v139 & 0xFFFFFFFFFFFFFFFELL) + 2))
    {
      v140 = v128;
      v141 = v124;
      goto LABEL_98;
    }
    v162 = (v138 >> 1) + 1;
    if (v138 >= 0x3E)
    {
      v163 = v162 & 0xFFFFFFFFFFFFFFE0;
      v180 = (uint8x8_t *)((char *)v124 + 16);
      v181 = (uint16x8_t *)((char *)v128 + 32);
      v182 = v162 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v183 = *(uint8x16_t *)v180[-2].i8;
        v184 = vmovl_u8(*v180);
        v185 = vmovl_high_u8(*(uint8x16_t *)v180->i8);
        v181[-2] = vmovl_u8(*(uint8x8_t *)v183.i8);
        v181[-1] = vmovl_high_u8(v183);
        *v181 = v184;
        v181[1] = v185;
        v181 += 4;
        v180 += 4;
        v182 -= 32;
      }
      while (v182);
      if (v162 == v163)
        goto LABEL_99;
      if ((v162 & 0x18) == 0)
      {
        v141 = (WTF *)((char *)v124 + v163);
        v140 = (WTF *)((char *)v128 + 2 * v163);
        do
        {
LABEL_98:
          v142 = *(unsigned __int8 *)v141;
          v141 = (WTF *)((char *)v141 + 1);
          *(_WORD *)v140 = v142;
          v140 = (WTF *)((char *)v140 + 2);
        }
        while (v140 != v137);
        goto LABEL_99;
      }
    }
    else
    {
      v163 = 0;
    }
    v140 = (WTF *)((char *)v128 + 2 * (v162 & 0xFFFFFFFFFFFFFFF8));
    v141 = (WTF *)((char *)v124 + (v162 & 0xFFFFFFFFFFFFFFF8));
    v186 = (uint8x8_t *)((char *)v124 + v163);
    v187 = (uint16x8_t *)((char *)v128 + 2 * v163);
    v188 = v163 - (v162 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v189 = *v186++;
      *v187++ = vmovl_u8(v189);
      v188 += 8;
    }
    while (v188);
    if (v162 == (v162 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_99;
    goto LABEL_98;
  }
LABEL_99:
  v124 = v205;
  v125 = HIDWORD(v206);
  LODWORD(v123) = *(_DWORD *)(v5 + 4);
LABEL_100:
  v208 = v124;
  v209 = v125;
  v150 = uidna_nameToASCII(v121, (const UChar *)v124, v123, dest, 2048, &pInfo, &pErrorCode);
  v151 = v205;
  if (v207 != (_BYTE *)v205 && v205 != 0)
  {
    v205 = 0;
    LODWORD(v206) = 0;
    WTF::fastFree((unint64_t)v151, v143, v144, v145, v146, v147, v148, v149);
  }
  if (pErrorCode <= U_ZERO_ERROR && pInfo.errors <= 0x3F)
  {
    v154 = v150;
    if (v150)
    {
      v155 = HIDWORD(__n);
      v156 = HIDWORD(__n) + (uint64_t)v150;
      if (v156 <= __n)
        goto LABEL_143;
      v157 = __n + ((unint64_t)__n >> 2);
      if (v157 >= 0x10)
        v158 = v157 + 1;
      else
        v158 = 16;
      if (v158 <= v156)
        v159 = HIDWORD(__n) + (uint64_t)v150;
      else
        v159 = v158;
      v160 = v212;
      if (v159 < 0x801)
      {
        v212 = (WTF *)v214;
        LODWORD(__n) = 2048;
        v161 = (WTF *)v214;
        goto LABEL_138;
      }
      if (!HIDWORD(v159))
      {
        v161 = (WTF *)WTF::fastMalloc((WTF *)v159);
        LODWORD(__n) = v159;
        v212 = v161;
LABEL_138:
        memcpy(v161, v160, v155);
        if (v214 != (_BYTE *)v160 && v160)
        {
          if (v212 == v160)
          {
            v212 = 0;
            LODWORD(__n) = 0;
          }
          WTF::fastFree((unint64_t)v160, v166, v167, v168, v169, v170, v171, v172);
        }
LABEL_143:
        v173 = HIDWORD(__n);
        if (v156 < HIDWORD(__n))
        {
          __break(0xC471u);
          JUMPOUT(0x197B4E908);
        }
        v174 = v212;
        v175 = (char *)v212 + HIDWORD(__n);
        v176 = (v154 - 1) & 0x7FFFFFFFFFFFFFFFLL;
        if (v176 < 7)
        {
          v177 = dest;
          goto LABEL_169;
        }
        if (v175 < (char *)&dest[v154])
        {
          v177 = dest;
          if (dest < (UChar *)((char *)v212 + HIDWORD(__n) + v176 + 1))
            goto LABEL_169;
        }
        v178 = v176 + 1;
        if (v176 >= 0x1F)
        {
          v179 = v178 & 0xFFFFFFFFFFFFFFE0;
          v190 = (int8x16_t *)v218;
          v191 = (int8x16_t *)((char *)v212 + HIDWORD(__n) + 16);
          v192 = v178 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v194 = v190[-2];
            v193 = v190[-1];
            v196 = *v190;
            v195 = v190[1];
            v190 += 4;
            v191[-1] = vuzp1q_s8(v194, v193);
            *v191 = vuzp1q_s8(v196, v195);
            v191 += 2;
            v192 -= 32;
          }
          while (v192);
          if (v178 == v179)
            goto LABEL_170;
          if ((v178 & 0x18) == 0)
          {
            v177 = &dest[v179];
            v175 += v179;
            do
            {
LABEL_169:
              v201 = *(_BYTE *)v177++;
              *v175++ = v201;
            }
            while (v177 != &dest[v154]);
LABEL_170:
            HIDWORD(__n) = v156;
            if (!WTF::operator==(*(unsigned __int8 **)(v5 + 8), *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32), (unsigned __int8 *)v212, v156 | 0x100000000))WTF::URLParser::syntaxViolation<unsigned char>(v6, *v4);
            *(_QWORD *)v7 = v7 + 16;
            *(_DWORD *)(v7 + 8) = 2048;
            if (v212 == (WTF *)v214)
            {
              v202 = HIDWORD(__n);
              memcpy((void *)(v7 + 16), v214, HIDWORD(__n));
            }
            else
            {
              *(_QWORD *)v7 = v212;
              v202 = HIDWORD(__n);
              *(_DWORD *)(v7 + 8) = __n;
            }
            *(_DWORD *)(v7 + 12) = v202;
            goto LABEL_183;
          }
        }
        else
        {
          v179 = 0;
        }
        v175 += v178 & 0xFFFFFFFFFFFFFFF8;
        v177 = &dest[v178 & 0xFFFFFFFFFFFFFFF8];
        v197 = (int8x8_t *)((char *)v174 + v179 + v173);
        v198 = v179 - (v178 & 0xFFFFFFFFFFFFFFF8);
        v199 = &dest[v179];
        do
        {
          v200 = *(int16x8_t *)v199;
          v199 += 8;
          *v197++ = vmovn_s16(v200);
          v198 += 8;
        }
        while (v198);
        if (v178 == (v178 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_170;
        goto LABEL_169;
      }
LABEL_187:
      __break(0xC471u);
      JUMPOUT(0x197B4E900);
    }
  }
  *(_BYTE *)v7 = 0;
  *(_BYTE *)(v7 + 2064) = 0;
  v153 = v212;
  if (v214 != (_BYTE *)v212)
  {
    if (v212)
    {
      v212 = 0;
      LODWORD(__n) = 0;
      WTF::fastFree((unint64_t)v153, v143, v144, v145, v146, v147, v148, v149);
    }
  }
}

uint64_t std::optional<WTF::Vector<unsigned char,2048ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  if (*(_BYTE *)(a1 + 2064))
  {
    v9 = *(_QWORD *)a1;
    if (a1 + 16 != *(_QWORD *)a1 && v9 != 0)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

uint64_t *WTF::URLParser::parseIPv4Piece<unsigned char>(uint64_t *result, unsigned __int8 **a2, _BYTE *a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  char v5;
  unsigned int v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  unsigned __int8 v12;
  unsigned int v14;

  v3 = a2[1];
  if (v3)
  {
    v4 = *a2;
    if (**a2 == 46)
    {
LABEL_3:
      *result = 0x100000000;
    }
    else
    {
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = v4 + 1;
        while (1)
        {
          v8 = *v4;
          if (v8 - 9 > 4)
            break;
          if (v8 - 11 < 2)
            goto LABEL_12;
          *a3 = 1;
          ++v4;
          --v3;
          *a2 = v7;
          a2[1] = v3;
          ++v7;
          if (!v3)
            goto LABEL_40;
        }
        if (v8 == 46)
          break;
LABEL_12:
        switch(v5)
        {
          case 0:
            if (v8 == 48)
            {
              v5 = 2;
              --v3;
              ++v4;
              *a2 = v7;
              a2[1] = v3;
              if (!v3)
                goto LABEL_40;
            }
            else
            {
              v5 = 1;
            }
            break;
          case 1:
            v9 = v8 - 48;
            if (v8 - 48 > 9)
              goto LABEL_3;
            v10 = 0x100000001;
            if (v6 > 0x19999999)
              goto LABEL_41;
            v11 = __CFADD__(v9, 10 * v6);
            v6 = v9 + 10 * v6;
            if (v11)
              goto LABEL_41;
            v5 = 1;
            --v3;
            ++v4;
            *a2 = v7;
            a2[1] = v3;
            if (!v3)
              goto LABEL_40;
            continue;
          case 2:
            *a3 = 1;
            if ((*v4 | 0x20) == 0x78)
              goto LABEL_37;
            v5 = 3;
            continue;
          case 3:
            if ((v8 - 56) < 0xF8u)
              goto LABEL_3;
            v10 = 0x100000001;
            if (v6 >> 29)
              goto LABEL_41;
            v11 = __CFADD__(v8 - 48, 8 * v6);
            v6 = v8 - 48 + 8 * v6;
            if (v11)
              goto LABEL_41;
            v5 = 3;
            --v3;
            ++v4;
            *a2 = v7;
            a2[1] = v3;
            if (!v3)
              goto LABEL_40;
            continue;
          case 4:
            v12 = v8 - 48;
            if (v8 - 48 >= 0xA && (v8 | 0x20) - 97 > 5)
              goto LABEL_3;
            v14 = v6 >> 28;
            if (!(v6 >> 28))
              v6 *= 16;
            if (v8 >= 0x41)
              v12 = (v8 + 9) & 0xF;
            v11 = __CFADD__(v6, v12);
            v6 += v12;
            v10 = 0x100000001;
            if (v11 || v14)
              goto LABEL_41;
LABEL_37:
            v5 = 4;
            --v3;
            ++v4;
            *a2 = v7;
            a2[1] = v3;
            if (!v3)
              goto LABEL_40;
            continue;
          default:
            continue;
        }
      }
LABEL_40:
      v10 = v6;
LABEL_41:
      *result = v10;
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

unint64_t WTF::Vector<std::experimental::fundamentals_v3::expected<unsigned int,WTF::URLParser::IPv4PieceParsingError>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  __int128 *v30;
  _OWORD *v31;
  uint64_t v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  __int128 *v41;
  _OWORD *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;

  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3
    || (v11 = *(unsigned int *)(a1 + 12), v12 = (uint64_t *)(v10 + 8 * v11), (unint64_t)v12 <= a3))
  {
    v19 = *(unsigned int *)(a1 + 8);
    v20 = v19 + (v19 >> 2);
    if (v20 >= 0x10)
      v21 = v20 + 1;
    else
      v21 = 16;
    if (v21 <= (unint64_t)a2)
      v22 = (unint64_t)a2;
    else
      v22 = v21;
    if (v22 <= v19)
      return a3;
    v23 = *(unsigned int *)(a1 + 12);
    if (v22 < 5)
    {
      v24 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
      if (!(_DWORD)v23)
        goto LABEL_35;
    }
    else
    {
      if (v22 >> 29)
        goto LABEL_55;
      v24 = WTF::fastMalloc((WTF *)(8 * v22));
      *(_DWORD *)(a1 + 8) = v22;
      *(_QWORD *)a1 = v24;
      if (!(_DWORD)v23)
        goto LABEL_35;
    }
    v25 = (v23 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v25 < 3 || v24 - v10 < 0x20)
    {
      v28 = (_QWORD *)v24;
      v29 = (uint64_t *)v10;
    }
    else
    {
      v26 = v25 + 1;
      v27 = (v25 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v28 = (_QWORD *)(v24 + 8 * v27);
      v29 = (uint64_t *)(v10 + 8 * v27);
      v30 = (__int128 *)(v10 + 16);
      v31 = (_OWORD *)(v24 + 16);
      v32 = v27;
      do
      {
        v33 = *v30;
        *(v31 - 1) = *(v30 - 1);
        *v31 = v33;
        v30 += 2;
        v31 += 2;
        v32 -= 4;
      }
      while (v32);
      if (v26 == v27)
      {
LABEL_35:
        if (a1 + 16 != v10 && v10)
        {
          if (*(_QWORD *)a1 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
        }
        return a3;
      }
    }
    do
    {
      v35 = *v29++;
      *v28++ = v35;
    }
    while (v29 != (uint64_t *)(v10 + 8 * v23));
    goto LABEL_35;
  }
  v13 = *(unsigned int *)(a1 + 8);
  v14 = v13 + (v13 >> 2);
  if (v14 >= 0x10)
    v15 = v14 + 1;
  else
    v15 = 16;
  if (v15 <= (unint64_t)a2)
    v16 = (unint64_t)a2;
  else
    v16 = v15;
  if (v16 > v13)
  {
    if (v16 < 5)
    {
      v17 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
      v18 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v18 < 3)
        goto LABEL_47;
      goto LABEL_42;
    }
    if (!(v16 >> 29))
    {
      v17 = WTF::fastMalloc((WTF *)(8 * v16));
      *(_DWORD *)(a1 + 8) = v16;
      *(_QWORD *)a1 = v17;
      v18 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v18 < 3)
        goto LABEL_47;
LABEL_42:
      if (v17 - v10 >= 0x20)
      {
        v37 = v18 + 1;
        v38 = (v18 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v39 = (_QWORD *)(v17 + 8 * v38);
        v40 = (uint64_t *)(v10 + 8 * v38);
        v41 = (__int128 *)(v10 + 16);
        v42 = (_OWORD *)(v17 + 16);
        v43 = v38;
        do
        {
          v44 = *v41;
          *(v42 - 1) = *(v41 - 1);
          *v42 = v44;
          v41 += 2;
          v42 += 2;
          v43 -= 4;
        }
        while (v43);
        if (v37 == v38)
        {
LABEL_49:
          v34 = *(_QWORD *)a1;
          if (a1 + 16 != v10 && v10)
          {
            if (v34 == v10)
            {
              *(_QWORD *)a1 = 0;
              *(_DWORD *)(a1 + 8) = 0;
            }
            WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
            v34 = *(_QWORD *)a1;
          }
          return v34 + 8 * ((uint64_t)(a3 - v10) >> 3);
        }
        do
        {
LABEL_48:
          v45 = *v40++;
          *v39++ = v45;
        }
        while (v40 != v12);
        goto LABEL_49;
      }
LABEL_47:
      v39 = (_QWORD *)v17;
      v40 = (uint64_t *)v10;
      goto LABEL_48;
    }
LABEL_55:
    __break(0xC471u);
    JUMPOUT(0x197B4EDECLL);
  }
  v34 = *(_QWORD *)a1;
  return v34 + 8 * ((uint64_t)(a3 - v10) >> 3);
}

void WTF::Vector<unsigned char,2048ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(uint64_t a1, WTF *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  size_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return;
  v7 = *(const void **)a1;
  v8 = *(unsigned int *)(a1 + 12);
  if (v5 < 0x801)
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 2048;
    memcpy((void *)(a1 + 16), v7, v8);
    if ((const void *)(a1 + 16) == v7)
      return;
    goto LABEL_13;
  }
  if (HIDWORD(v5))
  {
    __break(0xC471u);
    return;
  }
  v9 = (void *)WTF::fastMalloc((WTF *)v5);
  *(_DWORD *)(a1 + 8) = v5;
  *(_QWORD *)a1 = v9;
  memcpy(v9, v7, v8);
  if ((const void *)(a1 + 16) != v7)
  {
LABEL_13:
    if (v7)
    {
      if (*(const void **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

unint64_t WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 2 * v6 <= a3))
  {
    v20 = *(unsigned int *)(a1 + 8);
    v21 = v20 + (v20 >> 2);
    if (v21 >= 0x10)
      v22 = v21 + 1;
    else
      v22 = 16;
    if (v22 <= a2)
      v23 = a2;
    else
      v23 = v22;
    if (v23 > v20)
    {
      if (v23 >> 31)
        goto LABEL_30;
      v24 = *(unsigned int *)(a1 + 12);
      v25 = (void *)WTF::fastMalloc((WTF *)(2 * v23));
      *(_DWORD *)(a1 + 8) = v23;
      *(_QWORD *)a1 = v25;
      memcpy(v25, v5, 2 * v24);
      if (v5)
      {
        if (*(const void **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v5, v26, v27, v28, v29, v30, v31, v32);
      }
    }
    return a3;
  }
  v7 = *(unsigned int *)(a1 + 8);
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= a2)
    v10 = a2;
  else
    v10 = v9;
  if (v10 > v7)
  {
    if (!(v10 >> 31))
    {
      v11 = (void *)WTF::fastMalloc((WTF *)(2 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      memcpy(v11, v5, 2 * v6);
      v19 = *(const void **)a1;
      if (v5)
      {
        if (v19 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
        v19 = *(const void **)a1;
      }
      return (unint64_t)v19 + 2 * ((uint64_t)(a3 - (_QWORD)v5) >> 1);
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x197B4F04CLL);
  }
  v19 = *(const void **)a1;
  return (unint64_t)v19 + 2 * ((uint64_t)(a3 - (_QWORD)v5) >> 1);
}

void WTF::URLParser::copyURLPartsUntil<char16_t>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, _QWORD *a5)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;

  WTF::URLParser::syntaxViolation<char16_t>(a1, a4);
  if (*(_DWORD *)(a1 + 48))
  {
    if (*(_DWORD *)(a1 + 52))
      *(_DWORD *)(a1 + 52) = 0;
    v16 = *(_QWORD *)(a1 + 40);
    if (v16)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 48) = 0;
      WTF::fastFree(v16, v9, v10, v11, v12, v13, v14, v15);
    }
  }
  switch(a3)
  {
    case 0:
      WTF::URLParser::copyASCIIStringUntil((WTF::URLParser *)a1, *(const WTF::String **)a2, (unint64_t)*(unsigned int *)(a2 + 8) >> 6);
      goto LABEL_23;
    case 1:
      WTF::URLParser::copyASCIIStringUntil((WTF::URLParser *)a1, *(const WTF::String **)a2, *(unsigned int *)(a2 + 12));
      goto LABEL_22;
    case 2:
      WTF::URLParser::copyASCIIStringUntil((WTF::URLParser *)a1, *(const WTF::String **)a2, *(unsigned int *)(a2 + 16));
      goto LABEL_21;
    case 3:
      WTF::URLParser::copyASCIIStringUntil((WTF::URLParser *)a1, *(const WTF::String **)a2, *(unsigned int *)(a2 + 20));
      goto LABEL_20;
    case 4:
      WTF::URLParser::copyASCIIStringUntil((WTF::URLParser *)a1, *(const WTF::String **)a2, *(unsigned int *)(a2 + 24));
      goto LABEL_19;
    case 5:
      WTF::URLParser::copyASCIIStringUntil((WTF::URLParser *)a1, *(const WTF::String **)a2, ((*(_DWORD *)(a2 + 8) >> 3) & 7u) + *(_DWORD *)(a2 + 24));
      goto LABEL_18;
    case 6:
      WTF::URLParser::copyASCIIStringUntil((WTF::URLParser *)a1, *(const WTF::String **)a2, *(unsigned int *)(a2 + 28));
      goto LABEL_17;
    case 7:
      WTF::URLParser::copyASCIIStringUntil((WTF::URLParser *)a1, *(const WTF::String **)a2, *(unsigned int *)(a2 + 32));
      goto LABEL_16;
    case 8:
      WTF::URLParser::copyASCIIStringUntil((WTF::URLParser *)a1, *(const WTF::String **)a2, *(unsigned int *)(a2 + 36));
      *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
LABEL_16:
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
LABEL_17:
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
LABEL_18:
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(a2 + 8) >> 3) & 7));
LABEL_19:
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
LABEL_20:
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
LABEL_21:
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
LABEL_22:
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
LABEL_23:
      v17 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | *(_DWORD *)(a2 + 8) & 1;
      *(_DWORD *)(a1 + 8) = v17;
      v18 = v17 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a2 + 8) >> 1) & 1));
      *(_DWORD *)(a1 + 8) = v18;
      v19 = (unsigned __int8 *)(*(_DWORD *)(a2 + 8) & 0xFFFFFFC0 | v18 & 0x3F);
      *(_DWORD *)(a1 + 8) = (_DWORD)v19;
      v20 = v19 >> 6;
      v21 = *(unsigned int *)(a1 + 52);
      if (v21 >= v19 >> 6)
        goto LABEL_24;
      goto LABEL_54;
    default:
      v19 = (unsigned __int8 *)*(unsigned int *)(a1 + 8);
      v20 = v19 >> 6;
      v21 = *(unsigned int *)(a1 + 52);
      if (v21 < v19 >> 6)
      {
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
LABEL_24:
      if (v19 < 0x40)
        goto LABEL_25;
      v19 = *(unsigned __int8 **)(a1 + 40);
      v27 = *v19;
      switch(v27)
      {
        case 'w':
          if (v20 == 3)
          {
            if (v19[1] != 115 || v19[2] != 115)
              goto LABEL_25;
          }
          else if (v20 != 2 || v19[1] != 115)
          {
            goto LABEL_25;
          }
          *a5 = 0;
LABEL_63:
          *(_BYTE *)(a1 + 56) = 1;
          return;
        case 'h':
          if (v20 == 5)
          {
LABEL_55:
            if (v19[1] == 116 && v19[2] == 116 && v19[3] == 112 && v19[4] == 115)
              goto LABEL_63;
            goto LABEL_25;
          }
          if (v20 != 4 || v19[1] != 116 || v19[2] != 116)
            goto LABEL_25;
          v28 = v19[3];
          break;
        case 'f':
          if (v20 == 4)
          {
            if (v19[1] == 105 && v19[2] == 108 && v19[3] == 101)
            {
              *(_BYTE *)(a1 + 57) = 1;
              *(_BYTE *)(a1 + 56) = 1;
              return;
            }
            goto LABEL_25;
          }
          if (v20 != 3 || v19[1] != 116)
            goto LABEL_25;
          v28 = v19[2];
          break;
        default:
          goto LABEL_25;
      }
      if (v28 == 112)
        goto LABEL_63;
LABEL_25:
      *(_BYTE *)(a1 + 56) = 0;
      *a5 = 0;
      v22 = ((*(_DWORD *)(a1 + 8) >> 3) & 7u) + *(_DWORD *)(a1 + 24);
      v23 = (v22 + 2);
      if (v21 > v23)
      {
        if (v21 <= v22)
        {
          __break(0xC471u);
          JUMPOUT(0x197B4F438);
        }
        v24 = *(_QWORD *)(a1 + 40);
        if (*(_BYTE *)(v24 + v22) == 47)
        {
          v25 = v22 + 1;
          if (v21 <= v25)
          {
            __break(0xC471u);
            JUMPOUT(0x197B4F440);
          }
          if (*(_BYTE *)(v24 + v25) == 46 && *(_BYTE *)(v24 + v23) == 47)
          {
            memmove((void *)(v24 + v25), (const void *)(v24 + v25 + 2), v21 - (v25 + 2));
            *(_DWORD *)(a1 + 52) -= 2;
            *(uint32x2_t *)(a1 + 28) = vqsub_u32(*(uint32x2_t *)(a1 + 28), (uint32x2_t)0x200000002);
            v26 = *(_DWORD *)(a1 + 36);
            if (v26 <= 2)
              v26 = 2;
            *(_DWORD *)(a1 + 36) = v26 - 2;
          }
        }
      }
      return;
  }
}

void WTF::URLParser::parseAuthority<char16_t>(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  size_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  char v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  size_t v47;
  const void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  unsigned __int16 *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v77;
  unsigned __int16 *v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  int v86;
  int v88;
  uint64_t v89;
  int v90;
  int v91;
  char v92;
  char v93;
  unsigned int v94;
  unsigned __int8 *v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t v98;
  unint64_t v99;
  const char *v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  char v108;
  void *__src;
  char __srca;
  char __srcb;
  void **v112;
  unsigned __int16 *v113;
  uint64_t v114;
  unsigned __int8 v115;
  unsigned __int8 v116;
  unsigned __int8 v117[4];

  v113 = a2;
  v114 = a3;
  if (!a3)
  {
    WTF::URLParser::syntaxViolation<char16_t>(a1, (uint64_t)a2);
    if (*(_BYTE *)(a1 + 59))
      LODWORD(v69) = *(_DWORD *)(a1 + 52);
    else
      v69 = ((unint64_t)a2 - *(_QWORD *)(a1 + 72)) >> 1;
    *(_DWORD *)(a1 + 16) = v69;
    *(_DWORD *)(a1 + 20) = v69;
    return;
  }
  v112 = (void **)(a1 + 40);
  while (1)
  {
    v4 = v113;
    v5 = *v113;
    if ((v5 & 0xFC00) == 0xD800)
    {
      if (a3 != 1)
      {
        v6 = v113[1];
        v7 = (v6 & 0xFC00) == 56320;
        v8 = ((_DWORD)v5 << 10) - 56613888 + v6;
        if (v7)
          LODWORD(v5) = v8;
      }
      WTF::URLParser::syntaxViolation<char16_t>(a1, (uint64_t)v113);
LABEL_11:
      if (v5 >> 11 < 0x1B || (v5 & 0xFFFFE000) == 0xE000)
      {
        v117[0] = (v5 >> 12) | 0xE0;
        v117[1] = (v5 >> 6) & 0x3F | 0x80;
        v9 = 3;
        v117[2] = v5 & 0x3F | 0x80;
        if (*(_BYTE *)(a1 + 59))
          goto LABEL_24;
      }
      else if ((v5 - 0x10000) >> 20)
      {
        if (*(_BYTE *)(a1 + 59))
        {
          v58 = *(unsigned int *)(a1 + 52);
          v59 = v58 + 9;
          v60 = "%EF%BF%BD";
          if (v58 + 9 > *(unsigned int *)(a1 + 48))
          {
            v60 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v112, (WTF *)(v58 + 9), (uint64_t)"%EF%BF%BD");
            v58 = *(unsigned int *)(a1 + 52);
            if (v59 < v58)
            {
              __break(0xC471u);
              JUMPOUT(0x197B4FE90);
            }
          }
          v61 = *(_QWORD *)(a1 + 40) + v58;
          v62 = *(_QWORD *)v60;
          *(_BYTE *)(v61 + 8) = v60[8];
          *(_QWORD *)v61 = v62;
          *(_DWORD *)(a1 + 52) = v59;
        }
      }
      else
      {
        v117[0] = (v5 >> 18) | 0xF0;
        v117[1] = (v5 >> 12) & 0x3F | 0x80;
        v117[2] = (v5 >> 6) & 0x3F | 0x80;
        v9 = 4;
        v117[3] = v5 & 0x3F | 0x80;
        if (*(_BYTE *)(a1 + 59))
          goto LABEL_24;
      }
      goto LABEL_4;
    }
    if ((_DWORD)v5 == 58)
      break;
    if (v5 <= 0x7F)
    {
      if ((_DWORD)v5 == 127 || (WTF::characterClassTable[v5] & 1) != 0)
      {
        WTF::URLParser::syntaxViolation<char16_t>(a1, (uint64_t)v113);
        WTF::URLParser::percentEncodeByte((WTF::URLParser *)a1, v5);
      }
      else
      {
        *(_DWORD *)v117 = *v113;
        if (*(_BYTE *)(a1 + 59))
        {
          v10 = *(unsigned int *)(a1 + 52);
          if ((_DWORD)v10 == *(_DWORD *)(a1 + 48))
          {
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v112, v117);
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)(a1 + 40) + v10) = v5;
            ++*(_DWORD *)(a1 + 52);
          }
        }
      }
      goto LABEL_4;
    }
    WTF::URLParser::syntaxViolation<char16_t>(a1, (uint64_t)v113);
    if (v5 > 0x7FF)
      goto LABEL_11;
    v117[0] = (v5 >> 6) | 0xC0;
    v9 = 2;
    v117[1] = v5 & 0x3F | 0x80;
    if (*(_BYTE *)(a1 + 59))
    {
LABEL_24:
      v11 = v9 - 1;
      v12 = &v117[1];
      v13 = v117[0];
LABEL_27:
      v15 = *(unsigned int *)(a1 + 52);
      if ((_DWORD)v15 == *(_DWORD *)(a1 + 48))
      {
        v16 = v15 + (v15 >> 2);
        if (v16 >= 0x10)
          v17 = v16 + 1;
        else
          v17 = 16;
        if (v17 <= v15 + 1)
          v18 = v15 + 1;
        else
          v18 = v17;
        if (HIDWORD(v18))
        {
LABEL_189:
          __break(0xC471u);
          JUMPOUT(0x197B4FE78);
        }
        __src = *v112;
        v19 = (void *)WTF::fastMalloc((WTF *)v18);
        *(_DWORD *)(a1 + 48) = v18;
        *(_QWORD *)(a1 + 40) = v19;
        memcpy(v19, __src, v15);
        if (__src)
        {
          if (*v112 == __src)
          {
            *(_QWORD *)(a1 + 40) = 0;
            *(_DWORD *)(a1 + 48) = 0;
          }
          WTF::fastFree((unint64_t)__src, v20, v21, v22, v23, v24, v25, v26);
        }
        v27 = (_BYTE *)(*(_QWORD *)(a1 + 40) + *(unsigned int *)(a1 + 52));
      }
      else
      {
        v27 = (char *)*v112 + v15;
      }
      *v27 = 37;
      v28 = (*(_DWORD *)(a1 + 52) + 1);
      *(_DWORD *)(a1 + 52) = v28;
      if (v13 >= 0xA0)
        v29 = 55;
      else
        v29 = 48;
      if (*(_BYTE *)(a1 + 59))
      {
        if ((_DWORD)v28 == *(_DWORD *)(a1 + 48))
        {
          __srca = v29;
          v30 = v28 + (v28 >> 2);
          if (v30 >= 0x10)
            v31 = v30 + 1;
          else
            v31 = 16;
          if (v31 <= v28 + 1)
            v32 = v28 + 1;
          else
            v32 = v31;
          if (HIDWORD(v32))
          {
            __break(0xC471u);
            JUMPOUT(0x197B4FE80);
          }
          v107 = *v112;
          v33 = (void *)WTF::fastMalloc((WTF *)v32);
          *(_DWORD *)(a1 + 48) = v32;
          *(_QWORD *)(a1 + 40) = v33;
          memcpy(v33, v107, v28);
          if (v107)
          {
            if (*v112 == v107)
            {
              *(_QWORD *)(a1 + 40) = 0;
              *(_DWORD *)(a1 + 48) = 0;
            }
            WTF::fastFree((unint64_t)v107, v34, v35, v36, v37, v38, v39, v40);
          }
          v41 = (_BYTE *)(*(_QWORD *)(a1 + 40) + *(unsigned int *)(a1 + 52));
          v29 = __srca;
        }
        else
        {
          v41 = (char *)*v112 + v28;
        }
        *v41 = v29 + (v13 >> 4);
        LODWORD(v28) = *(_DWORD *)(a1 + 52) + 1;
        *(_DWORD *)(a1 + 52) = v28;
      }
      v42 = v13 & 0xF;
      if ((v13 & 0xF) >= 0xA)
        v43 = 55;
      else
        v43 = 48;
      if (*(_BYTE *)(a1 + 59))
      {
        if ((_DWORD)v28 == *(_DWORD *)(a1 + 48))
        {
          v108 = v13 & 0xF;
          __srcb = v43;
          v44 = v28 + ((unint64_t)v28 >> 2);
          if (v44 >= 0x10)
            v45 = v44 + 1;
          else
            v45 = 16;
          if (v45 <= (unint64_t)v28 + 1)
            v46 = v28 + 1;
          else
            v46 = v45;
          if (HIDWORD(v46))
          {
            __break(0xC471u);
            JUMPOUT(0x197B4FE88);
          }
          v47 = v28;
          v48 = *v112;
          v49 = (void *)WTF::fastMalloc((WTF *)v46);
          *(_DWORD *)(a1 + 48) = v46;
          *(_QWORD *)(a1 + 40) = v49;
          memcpy(v49, v48, v47);
          if (v48)
          {
            if (*v112 == v48)
            {
              *(_QWORD *)(a1 + 40) = 0;
              *(_DWORD *)(a1 + 48) = 0;
            }
            WTF::fastFree((unint64_t)v48, v50, v51, v52, v53, v54, v55, v56);
          }
          v57 = (_BYTE *)(*(_QWORD *)(a1 + 40) + *(unsigned int *)(a1 + 52));
          v43 = __srcb;
          v42 = v108;
        }
        else
        {
          v57 = (char *)*v112 + v28;
        }
        *v57 = v43 + v42;
        ++*(_DWORD *)(a1 + 52);
      }
      while (v11)
      {
        --v11;
        v14 = *v12++;
        v13 = v14;
        if (*(_BYTE *)(a1 + 59))
          goto LABEL_27;
      }
    }
LABEL_4:
    WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>(a1, &v113);
    a3 = v114;
    if (!v114)
      goto LABEL_171;
  }
  v63 = *(unsigned __int8 *)(a1 + 59);
  if (*(_BYTE *)(a1 + 59))
  {
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 52);
    v64 = v4 + 1;
    v113 = v4 + 1;
    v65 = a3 - 1;
    if (a3 == 1)
      goto LABEL_89;
  }
  else
  {
    *(_DWORD *)(a1 + 16) = ((uint64_t)v113 - *(_QWORD *)(a1 + 72)) >> 1;
    v64 = v4 + 1;
    v113 = v4 + 1;
    v65 = a3 - 1;
    if (a3 == 1)
      goto LABEL_89;
  }
  v70 = *v64;
  if (v65 == 1)
  {
    if ((v70 - 9) <= 4 && (v70 - 13) < 0xFFFFFFFE)
      goto LABEL_111;
LABEL_105:
    v114 = v65;
    *(_DWORD *)v117 = 58;
    if (!v63)
      goto LABEL_139;
LABEL_181:
    v106 = *(unsigned int *)(a1 + 52);
    if ((_DWORD)v106 == *(_DWORD *)(a1 + 48))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v112, v117);
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 40) + v106) = 58;
      ++*(_DWORD *)(a1 + 52);
    }
LABEL_139:
    if (v65)
    {
      do
      {
        v89 = *v113;
        if ((v89 & 0xFC00) == 0xD800)
        {
          if (v65 != 1)
          {
            v90 = v113[1];
            v7 = (v90 & 0xFC00) == 56320;
            v91 = ((_DWORD)v89 << 10) - 56613888 + v90;
            if (v7)
              LODWORD(v89) = v91;
          }
          WTF::URLParser::syntaxViolation<char16_t>(a1, (uint64_t)v113);
        }
        else
        {
          if (v89 <= 0x7F)
          {
            if ((_DWORD)v89 != 127 && (WTF::characterClassTable[v89] & 1) == 0)
            {
              *(_DWORD *)v117 = *v113;
              if (*(_BYTE *)(a1 + 59))
              {
                v96 = *(unsigned int *)(a1 + 52);
                if ((_DWORD)v96 == *(_DWORD *)(a1 + 48))
                {
                  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v112, v117);
                }
                else
                {
                  *(_BYTE *)(*(_QWORD *)(a1 + 40) + v96) = v89;
                  ++*(_DWORD *)(a1 + 52);
                }
              }
              goto LABEL_142;
            }
            WTF::URLParser::syntaxViolation<char16_t>(a1, (uint64_t)v113);
            v97 = v89;
            goto LABEL_163;
          }
          WTF::URLParser::syntaxViolation<char16_t>(a1, (uint64_t)v113);
          if (v89 <= 0x7FF)
          {
            v93 = 0;
            v94 = (v89 >> 6) | 0xFFFFFFC0;
            v92 = 1;
            v95 = v117;
            goto LABEL_160;
          }
        }
        if (v89 >> 11 < 0x1B || (v89 & 0xFFFFE000) == 0xE000)
        {
          v92 = 0;
          v94 = (v89 >> 12) | 0xFFFFFFE0;
          v117[0] = (v89 >> 6) & 0x3F | 0x80;
          v93 = 1;
          v95 = &v116;
          goto LABEL_160;
        }
        if (!((v89 - 0x10000) >> 20))
        {
          v92 = 0;
          v93 = 0;
          v94 = (v89 >> 18) | 0xFFFFFFF0;
          v117[0] = (v89 >> 12) & 0x3F | 0x80;
          v116 = (v89 >> 6) & 0x3F | 0x80;
          v95 = &v115;
LABEL_160:
          *v95 = v89 & 0x3F | 0x80;
          WTF::URLParser::percentEncodeByte((WTF::URLParser *)a1, v94);
          WTF::URLParser::percentEncodeByte((WTF::URLParser *)a1, v117[0]);
          if ((v92 & 1) != 0)
            goto LABEL_142;
          WTF::URLParser::percentEncodeByte((WTF::URLParser *)a1, v116);
          if ((v93 & 1) != 0)
            goto LABEL_142;
          v97 = v115;
LABEL_163:
          WTF::URLParser::percentEncodeByte((WTF::URLParser *)a1, v97);
          goto LABEL_142;
        }
        if (*(_BYTE *)(a1 + 59))
        {
          v98 = *(unsigned int *)(a1 + 52);
          v99 = v98 + 9;
          v100 = "%EF%BF%BD";
          if (v98 + 9 > *(unsigned int *)(a1 + 48))
          {
            v100 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v112, (WTF *)(v98 + 9), (uint64_t)"%EF%BF%BD");
            v98 = *(unsigned int *)(a1 + 52);
            if (v99 < v98)
              goto LABEL_189;
          }
          v101 = *(_QWORD *)(a1 + 40) + v98;
          v102 = *(_QWORD *)v100;
          *(_BYTE *)(v101 + 8) = v100[8];
          *(_QWORD *)v101 = v102;
          *(_DWORD *)(a1 + 52) = v99;
        }
LABEL_142:
        WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>(a1, &v113);
        v65 = v114;
      }
      while (v114);
    }
LABEL_171:
    v103 = *(unsigned __int8 *)(a1 + 59);
    if (*(_BYTE *)(a1 + 59))
    {
      LODWORD(v104) = *(_DWORD *)(a1 + 52);
      *(_DWORD *)(a1 + 20) = v104;
      if (*(_DWORD *)(a1 + 16))
      {
LABEL_174:
        *(_DWORD *)v117 = 64;
        if (v103)
          goto LABEL_176;
        return;
      }
    }
    else
    {
      v104 = ((unint64_t)v113 - *(_QWORD *)(a1 + 72)) >> 1;
      *(_DWORD *)(a1 + 20) = v104;
      if (*(_DWORD *)(a1 + 16))
        goto LABEL_174;
    }
    *(_DWORD *)(a1 + 16) = v104;
    goto LABEL_174;
  }
  v71 = *v64;
  if ((v70 & 0xFC00) == 0xD800)
  {
    v72 = v4[2];
    v7 = (v72 & 0xFC00) == 56320;
    v71 = (v70 << 10) - 56613888 + v72;
    if (!v7)
      v71 = *v64;
  }
  v73 = v71 - 9;
  v74 = v71 - 13;
  if (v73 > 4 || v74 >= 0xFFFFFFFE)
    goto LABEL_105;
LABEL_111:
  v77 = 1;
  if (v65 != 1 && (v70 & 0xFC00) == 0xD800)
  {
    if ((v4[2] & 0xFC00) == 0xDC00)
      v77 = 2;
    else
      v77 = 1;
  }
  v65 -= v77;
  if (v65)
  {
    v78 = &v64[v77];
    do
    {
      v80 = *v78;
      if (v65 == 1)
      {
        if ((v80 - 14) < 0xFFFFFFFB || (v80 - 11) < 2)
          goto LABEL_138;
      }
      else
      {
        v81 = *v78;
        if ((v80 & 0xFC00) == 0xD800)
        {
          v82 = v78[1];
          v7 = (v82 & 0xFC00) == 56320;
          v81 = (v80 << 10) - 56613888 + v82;
          if (!v7)
            v81 = *v78;
        }
        v83 = v81 - 14;
        v84 = v81 - 11;
        if (v83 < 0xFFFFFFFB || v84 < 2)
        {
LABEL_138:
          v113 = v78;
          v114 = v65;
          WTF::URLParser::syntaxViolation<char16_t>(a1, (uint64_t)v4);
          v88 = *(unsigned __int8 *)(a1 + 59);
          *(_DWORD *)v117 = 58;
          if (!v88)
            goto LABEL_139;
          goto LABEL_181;
        }
      }
      if (v65 == 1)
      {
        v79 = 1;
      }
      else
      {
        v86 = v80 & 0xFC00;
        v79 = 1;
        if (v86 == 55296)
        {
          if ((v78[1] & 0xFC00) == 0xDC00)
            v79 = 2;
          else
            v79 = 1;
        }
      }
      v78 += v79;
      v65 -= v79;
    }
    while (v65);
  }
LABEL_89:
  WTF::URLParser::syntaxViolation<char16_t>(a1, (uint64_t)v4);
  v67 = *(_DWORD *)(a1 + 12);
  v66 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 20) = v66;
  if (v66 > v67)
  {
    *(_DWORD *)v117 = 64;
    if (*(_BYTE *)(a1 + 59))
    {
LABEL_176:
      v105 = *(unsigned int *)(a1 + 52);
      if ((_DWORD)v105 == *(_DWORD *)(a1 + 48))
      {
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v112, v117);
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 40) + v105) = 64;
        ++*(_DWORD *)(a1 + 52);
      }
    }
  }
}

uint64_t WTF::URLParser::parseHostAndPort<char16_t>()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t *v33;
  int v34;
  int v35;
  char v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  char v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  char v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  const char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v80;
  int v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  unsigned __int16 v86;
  unsigned int v87;
  _BOOL4 v88;
  uint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v97;
  int v98;
  unsigned int v99;
  unsigned __int8 v100;
  uint64_t v101;
  char v102;
  BOOL v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  __int16 v107;
  int v108;
  int v109;
  unint64_t v110;
  unsigned __int8 *v111;
  uint64_t v112;
  unint64_t v113;
  unsigned __int8 *v114;
  unsigned __int16 *v115;
  int v116;
  int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  unint64_t v122;
  BOOL v123;
  int v125;
  uint64_t v126;
  int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  unint64_t v132;
  int v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int8 *v139;
  int v140;
  uint64_t v141;
  unsigned __int8 *v142;
  unint64_t v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v150;
  int v151;
  int v152;
  int v153;
  uint64_t v154;
  int v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unsigned int v163;
  unint64_t v165;
  _BOOL4 v166;
  int v167;
  int v168;
  unsigned int v169;
  BOOL v170;
  char v171;
  unsigned __int8 v172;
  int v173;
  unint64_t v174;
  BOOL v175;
  int v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  unint64_t v182;
  int v183;
  int v184;
  unsigned int v185;
  unsigned int v186;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unsigned __int16 *v191;
  int v192;
  unsigned __int8 v193;
  unsigned int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  uint64_t v203;
  int v204;
  int v205;
  unsigned int v206;
  unsigned int v207;
  uint64_t v210;
  int v211;
  int v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  int v217;
  BOOL v218;
  int v219;
  int v220;
  int v221;
  unsigned int v222;
  unsigned int v223;
  unint64_t v225;
  unint64_t v226;
  int v227;
  int v228;
  int v229;
  unsigned int v230;
  unsigned int v231;
  unint64_t v233;
  uint64_t v235;
  uint64_t v236;
  unsigned __int16 v237;
  unsigned int v238;
  int v239;
  unsigned int v240;
  size_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  BOOL v245;
  _WORD *v246;
  __int16 v247;
  unint64_t v248;
  uint64_t v249;
  __int16 v250;
  unint64_t v251;
  uint64_t v252;
  __int16 v253;
  unint64_t v254;
  uint64_t v255;
  __int16 v256;
  unint64_t v257;
  uint64_t v258;
  __int16 v259;
  unint64_t v260;
  uint64_t v261;
  __int16 v262;
  unint64_t v263;
  uint64_t v264;
  __int16 v265;
  unint64_t v266;
  uint64_t v267;
  __int16 v268;
  unint64_t v269;
  uint64_t v270;
  int v271;
  int v272;
  uint64_t v273;
  unint64_t v274;
  BOOL v275;
  uint64_t v277;
  uint64_t v278;
  _BYTE *v279;
  int v280;
  unint64_t v281;
  unsigned int v282;
  uint64_t v283;
  unsigned int v284;
  uint64_t v285;
  int v286;
  unsigned __int8 *v287;
  uint64_t v288;
  size_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  WTF *v301;
  unint64_t v302;
  char v303;
  unint64_t v304;
  uint64_t v305;
  BOOL v306;
  char v307;
  char v308;
  unint64_t v309;
  _BYTE *v310;
  uint64_t v311;
  uint64_t v312;
  unsigned __int8 *__src;
  size_t __n;
  _BYTE v315[2056];
  WTF::StringImpl *v316;
  WTF *v317;
  int v318;
  unsigned int v319;
  __int128 v320;
  _BYTE v321[2048];
  __int128 v322;
  __int128 v323;
  uint64_t v324;
  int v325;
  char v326;

  v1 = MEMORY[0x1E0C80A78]();
  v9 = v3;
  *(_QWORD *)&v323 = v2;
  *((_QWORD *)&v323 + 1) = v3;
  if (!v3)
    return v9;
  v10 = (unsigned __int16 *)v2;
  v11 = v1;
  v12 = *(unsigned __int16 *)v2;
  if ((v12 & 0xFC00) == 0xD800)
    goto LABEL_905;
  if (v12 == 58)
    return 0;
  if (v12 != 91)
  {
LABEL_905:
    if (*(_BYTE *)(v1 + 56))
    {
      if (!*(_BYTE *)(v1 + 58))
      {
        v1 = WTF::URLParser::subdomainStartsWithXNDashDash<char16_t>((unsigned __int16 *)v2, v3);
        if ((v1 & 1) == 0)
        {
          v320 = v323;
          while (1)
          {
            v16 = *v10;
            if ((*v10 & 0xFC00) == 0xD800)
            {
              if (v9 == 1)
                goto LABEL_11;
              goto LABEL_26;
            }
            if (v16 - 9 <= 4)
              break;
            if (v16 == 58)
            {
LABEL_42:
              *(_QWORD *)&v323 = v10;
              *((_QWORD *)&v323 + 1) = v9;
              v0 = v320;
              if ((uint64_t)((uint64_t)v10 - v320) <= -2)
                goto LABEL_880;
              __src = v315;
              __n = 4;
              if (v10 == (unsigned __int16 *)v320 || *(_WORD *)v320 == 46)
                goto LABEL_413;
              v310 = v315;
              v22 = 0;
              v23 = 0;
              v24 = (uint64_t)((uint64_t)v10 - v320) >> 1;
              v2 = 1;
              v25 = (unsigned __int16 *)v320;
              while (2)
              {
                v74 = *v25;
                if (v24 == 1)
                {
                  if ((v74 - 14) < 0xFFFFFFFB || (v74 - 11) < 2)
                    goto LABEL_179;
                }
                else
                {
                  v75 = *v25;
                  if ((v74 & 0xFC00) == 0xD800)
                  {
                    v76 = v25[1];
                    v123 = (v76 & 0xFC00) == 56320;
                    v75 = (v74 << 10) - 56613888 + v76;
                    if (!v123)
                      v75 = *v25;
                  }
                  v77 = v75 - 14;
                  v78 = v75 - 11;
                  if (v77 < 0xFFFFFFFB || v78 < 2)
                  {
LABEL_179:
                    if (v23 > 3)
                      goto LABEL_290;
                    if (!v24)
                    {
                      v317 = 0;
                      v80 = v23;
                      if (v23 == (_DWORD)__n)
                        goto LABEL_282;
                      goto LABEL_284;
                    }
                    if (v74 == 46)
                    {
LABEL_182:
                      v317 = (WTF *)0x100000000;
                      v80 = v23;
                      if (v23 == (_DWORD)__n)
                        goto LABEL_282;
                      goto LABEL_284;
                    }
                    v83 = 0;
                    v84 = 0;
                    while (2)
                    {
                      v86 = *v25;
                      v87 = *v25;
                      if ((*v25 & 0xFC00) == 0xD800)
                      {
                        v88 = 0;
LABEL_207:
                        switch(v83)
                        {
                          case 0:
                            v90 = !v88;
                            if (v86 != 48)
                              v90 = 1;
                            if ((v90 & 1) == 0)
                            {
                              --v24;
                              v83 = 2;
                              v85 = 1;
                              goto LABEL_199;
                            }
                            v83 = 1;
                            goto LABEL_200;
                          case 1:
                            v103 = !v88;
                            if (v24 == 1)
                              v103 = 0;
                            if (v103)
                              goto LABEL_182;
                            v104 = v87 - 48;
                            if (v87 - 48 > 9)
                              goto LABEL_182;
                            v105 = 10 * v84;
                            if (v84 > 0x19999999)
                              v105 = v84;
                            v101 = 0x100000001;
                            v17 = __CFADD__(v105, v104);
                            v106 = v105 + v104;
                            if (v17 || v84 > 0x19999999)
                              goto LABEL_281;
                            if (v24 == 1)
                            {
                              v85 = 1;
                            }
                            else
                            {
                              v123 = (v86 & 0xFC00) == 55296;
                              v85 = 1;
                              if (v123)
                              {
                                if ((v25[1] & 0xFC00) == 0xDC00)
                                  v85 = 2;
                                else
                                  v85 = 1;
                              }
                            }
                            v24 -= v85;
                            v83 = 1;
                            v84 = v106;
                            goto LABEL_199;
                          case 2:
                            if (v88 && (v86 | 0x20) == 0x78)
                            {
                              --v24;
                              v83 = 4;
                              v22 = 1;
                              v85 = 1;
LABEL_199:
                              v25 += v85;
                            }
                            else
                            {
                              v83 = 3;
                              v22 = 1;
                            }
LABEL_200:
                            if (v24)
                              continue;
                            goto LABEL_280;
                          case 3:
                            v102 = !v88;
                            if ((v86 & 0xFFF8) != 0x30)
                              v102 = 1;
                            if ((v102 & 1) != 0)
                              goto LABEL_182;
                            v101 = 0x100000001;
                            if (v84 >> 29)
                              goto LABEL_281;
                            v17 = __CFADD__(v87 - 48, 8 * v84);
                            v84 = v87 - 48 + 8 * v84;
                            if (v17)
                              goto LABEL_281;
                            --v24;
                            v83 = 3;
                            v85 = 1;
                            goto LABEL_199;
                          case 4:
                            v91 = v24 == 1 || v88;
                            v92 = v87;
                            if ((v91 & 1) == 0)
                            {
                              v93 = v25[1];
                              v123 = (v93 & 0xFC00) == 56320;
                              v92 = (v87 << 10) - 56613888 + v93;
                              if (!v123)
                                v92 = v87;
                            }
                            v94 = v92 - 48;
                            v95 = (v92 | 0x20) - 97;
                            if (v94 >= 0xA && v95 > 5)
                              goto LABEL_182;
                            v97 = v84 >> 28;
                            if (!(v84 >> 28))
                              v84 *= 16;
                            if ((v91 & 1) == 0)
                            {
                              v98 = v25[1];
                              v123 = (v98 & 0xFC00) == 56320;
                              v99 = (v87 << 10) - 56613888 + v98;
                              if (v123)
                                v87 = v99;
                            }
                            v100 = v87 - 48;
                            if (v87 >= 0x41)
                              v100 = (v87 + 9) & 0xF;
                            v17 = __CFADD__(v84, v100);
                            v84 += v100;
                            v101 = 0x100000001;
                            if (v17 || v97)
                              goto LABEL_281;
                            if (v24 == 1)
                            {
                              v85 = 1;
                            }
                            else
                            {
                              v123 = (v86 & 0xFC00) == 55296;
                              v85 = 1;
                              if (v123)
                              {
                                if ((v25[1] & 0xFC00) == 0xDC00)
                                  v85 = 2;
                                else
                                  v85 = 1;
                              }
                            }
                            v24 -= v85;
                            v83 = 4;
                            goto LABEL_199;
                          default:
                            goto LABEL_200;
                        }
                      }
                      break;
                    }
                    if (v87 - 9 > 4)
                      goto LABEL_278;
                    if (v87 - 11 < 2)
                    {
LABEL_279:
                      v88 = 1;
                      goto LABEL_207;
                    }
                    if (v24 == 1)
                    {
                      v89 = 1;
                      goto LABEL_270;
                    }
LABEL_265:
                    v123 = (v86 & 0xFC00) == 55296;
                    v89 = 1;
                    if (v123)
                    {
                      if ((v25[1] & 0xFC00) == 0xDC00)
                        v89 = 2;
                      else
                        v89 = 1;
                    }
                    while (1)
                    {
LABEL_270:
                      v25 += v89;
                      v24 -= v89;
                      if (!v24)
                      {
                        v22 = 1;
                        v317 = (WTF *)v84;
                        v80 = v23;
                        if (v23 == (_DWORD)__n)
                          goto LABEL_282;
                        goto LABEL_284;
                      }
                      v86 = *v25;
                      v87 = *v25;
                      v88 = (*v25 & 0xFC00) != 55296;
                      if ((*v25 & 0xFC00) == 0xD800)
                        goto LABEL_276;
                      if (v87 - 9 > 4)
                        break;
                      if (v87 - 11 < 2)
                      {
LABEL_276:
                        v22 = 1;
                        goto LABEL_207;
                      }
                      if (v24 != 1)
                        goto LABEL_265;
                      v89 = 1;
                    }
                    v22 = 1;
LABEL_278:
                    if (v86 != 46)
                      goto LABEL_279;
LABEL_280:
                    v101 = v84;
LABEL_281:
                    v317 = (WTF *)v101;
                    v80 = v23;
                    if (v23 == (_DWORD)__n)
                    {
LABEL_282:
                      v1 = WTF::Vector<std::experimental::fundamentals_v3::expected<unsigned int,WTF::URLParser::IPv4PieceParsingError>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__src, (void *)(v80 + 1), (unint64_t)&v317, v4, v5, v6, v7, v8);
                      v2 = 1;
                      *(_QWORD *)&__src[8 * HIDWORD(__n)] = *(_QWORD *)v1;
                      goto LABEL_285;
                    }
LABEL_284:
                    *(_QWORD *)&__src[8 * v80] = v317;
LABEL_285:
                    v23 = ++HIDWORD(__n);
                    if (!v24)
                      goto LABEL_351;
                    if (*v25 != 46)
                      goto LABEL_170;
                    if (--v24)
                    {
                      v108 = v25[1];
                      ++v25;
                      v107 = v108;
                      if (v108 == 46 && (v107 & 0xFC00) != 0xD800)
                      {
LABEL_290:
                        v109 = 0;
                        LODWORD(v110) = 1;
                        v111 = __src;
                        if (v315 == __src)
                          goto LABEL_406;
LABEL_404:
                        if (v111)
                        {
                          __src = 0;
                          LODWORD(__n) = 0;
                          WTF::fastFree((unint64_t)v111, (void *)v2, v3, v4, v5, v6, v7, v8);
                        }
LABEL_406:
                        if (v109)
                        {
                          WTF::URLParser::serializeIPv4((WTF::URLParser *)v11, v110);
                          if (*(_BYTE *)(v11 + 59))
                          {
                            *(_DWORD *)(v11 + 24) = *(_DWORD *)(v11 + 52);
                            if (v9)
                            {
LABEL_409:
                              if (WTF::URLParser::parsePort<char16_t>(v11, (unsigned __int16 **)&v323))
                                return 3;
                              else
                                return 0;
                            }
                          }
                          else
                          {
                            *(_DWORD *)(v11 + 24) = ((unint64_t)v10 - *(_QWORD *)(v11 + 72)) >> 1;
                            if (v9)
                              goto LABEL_409;
                          }
                          *(_DWORD *)(v11 + 8) &= 0xFFFFFFC7;
                          return 4;
                        }
                        if (!(_DWORD)v110)
                          return 0;
LABEL_413:
                        v114 = (unsigned __int8 *)*((_QWORD *)&v320 + 1);
                        if ((unsigned __int16 *)v0 == v10 && *((_QWORD *)&v320 + 1) == v9)
                          goto LABEL_452;
                        if (!*((_QWORD *)&v320 + 1))
                        {
                          v0 = v320;
                          __break(1u);
                          goto LABEL_841;
                        }
                        v125 = v11 + 40;
                        while (2)
                        {
                          v146 = *(unsigned __int16 *)v0;
                          if ((*(_WORD *)v0 & 0xFC00) == 0xD800)
                          {
                            if (v114 != (unsigned __int8 *)1)
                            {
                              v147 = *(unsigned __int16 *)(v0 + 2);
                              v123 = (v147 & 0xFC00) == 56320;
                              v148 = (v146 << 10) - 56613888 + v147;
                              if (v123)
                                v146 = v148;
                            }
LABEL_427:
                            if ((v146 - 65) <= 0x19)
                            {
                              WTF::URLParser::syntaxViolation<char16_t>(v11, v0);
                              v150 = *(unsigned __int16 *)v0;
                              if (v114 != (unsigned __int8 *)1)
                              {
LABEL_429:
                                if ((v150 & 0xFC00) == 0xD800)
                                {
                                  v151 = *(unsigned __int16 *)(v0 + 2);
                                  v123 = (v151 & 0xFC00) == 56320;
                                  v152 = (v150 << 10) - 56613888 + v151;
                                  if (v123)
                                    v150 = v152;
                                }
                              }
                            }
                            else
                            {
                              v150 = *(unsigned __int16 *)v0;
                              if (v114 != (unsigned __int8 *)1)
                                goto LABEL_429;
                            }
                            v153 = v150 | (32 * ((v150 - 65) < 0x1A));
                            LODWORD(__src) = v153;
                            if (!*(_BYTE *)(v11 + 59))
                            {
                              if (v114 != (unsigned __int8 *)1)
                                break;
LABEL_443:
                              LODWORD(v126) = 1;
                              --v114;
                              v0 += 2;
                              if ((unsigned __int16 *)v0 != v10)
                              {
LABEL_417:
                                if (!v114)
                                {
                                  *(_QWORD *)&v320 = v0;
                                  __break(1u);
                                  goto LABEL_685;
                                }
                                continue;
                              }
LABEL_440:
                              if (v114 == (unsigned __int8 *)v9)
                              {
                                *(_QWORD *)&v320 = v0;
                                v0 = (unint64_t)v10;
LABEL_452:
                                *((_QWORD *)&v320 + 1) = v9;
                                v155 = *(unsigned __int8 *)(v11 + 59);
                                if (*(_BYTE *)(v11 + 59))
                                  LODWORD(v156) = *(_DWORD *)(v11 + 52);
                                else
                                  v156 = (v0 - *(_QWORD *)(v11 + 72)) >> 1;
                                *(_DWORD *)(v11 + 24) = v156;
                                LODWORD(v157) = *(_DWORD *)(v11 + 20);
                                if ((_DWORD)v157 == *(_DWORD *)(v11 + 12))
                                  v157 = v157;
                                else
                                  v157 = (v157 + 1);
                                v2 = (v156 - v157);
                                if (v155)
                                {
                                  v278 = *(unsigned int *)(v11 + 52);
                                  if (v278 < v157 || v278 - v157 < v2)
                                    goto LABEL_880;
                                  if ((WTF::dnsNameEndsInNumber((unsigned __int8 *)(*(_QWORD *)(v11 + 40) + v157), v2 | 0x100000000) & 1) != 0)return 0;
                                }
                                else
                                {
                                  v158 = *(_QWORD *)(v11 + 64);
                                  if (v158
                                    && (v1 = *(_QWORD *)(v158 + 8),
                                        v159 = *(unsigned int *)(v158 + 4) | ((unint64_t)((*(_DWORD *)(v158 + 16) >> 2) & 1) << 32),
                                        v159 > v157))
                                  {
                                    if ((int)v159 - (int)v157 > v2)
                                      goto LABEL_463;
                                    if ((_DWORD)v157)
                                    {
                                      v2 = (v159 - v157);
LABEL_463:
                                      v160 = v159 - v157;
                                      if ((v159 & 0x100000000) != 0)
                                      {
                                        if (v160 < v2)
                                          goto LABEL_880;
                                        if ((WTF::dnsNameEndsInNumber((unsigned __int8 *)(v1 + v157), v2 | 0x100000000) & 1) != 0)return 0;
                                      }
                                      else
                                      {
                                        if (v160 < v2)
                                          goto LABEL_880;
                                        if ((WTF::dnsNameEndsInNumber((unsigned __int8 *)(v1 + 2 * v157), v2) & 1) != 0)
                                          return 0;
                                      }
                                    }
                                    else if ((WTF::dnsNameEndsInNumber((unsigned __int8 *)v1, v159) & 1) != 0)
                                    {
                                      return 0;
                                    }
                                  }
                                  else if ((WTF::dnsNameEndsInNumber("", 0x100000000) & 1) != 0)
                                  {
                                    return 0;
                                  }
                                }
                                if (v9)
                                {
                                  if (WTF::URLParser::parsePort<char16_t>(v11, (unsigned __int16 **)&v320))return 5;
                                  else
                                    return 0;
                                }
                                else
                                {
                                  *(_DWORD *)(v11 + 8) &= 0xFFFFFFC7;
                                  return 6;
                                }
                              }
                              goto LABEL_417;
                            }
                            v154 = *(unsigned int *)(v11 + 52);
                            if ((_DWORD)v154 == *(_DWORD *)(v11 + 48))
                            {
                              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(v11 + 40, &__src);
                              if (v114 == (unsigned __int8 *)1)
                                goto LABEL_443;
                            }
                            else
                            {
                              *(_BYTE *)(*(_QWORD *)(v11 + 40) + v154) = v153;
                              ++*(_DWORD *)(v11 + 52);
                              if (v114 == (unsigned __int8 *)1)
                                goto LABEL_443;
                            }
                          }
                          else
                          {
                            if ((v146 - 14) < 0xFFFFFFFB || (v146 - 11) < 2)
                              goto LABEL_427;
                            WTF::URLParser::syntaxViolation<char16_t>(v11, v0);
                            if (v114 == (unsigned __int8 *)1)
                              goto LABEL_443;
                          }
                          break;
                        }
                        v126 = 1;
                        if ((*(_WORD *)v0 & 0xFC00) == 0xD800)
                        {
                          if ((*(_WORD *)(v0 + 2) & 0xFC00) == 0xDC00)
                            v126 = 2;
                          else
                            v126 = 1;
                        }
                        v114 -= v126;
                        v0 += 2 * v126;
                        if ((unsigned __int16 *)v0 != v10)
                          goto LABEL_417;
                        goto LABEL_440;
                      }
LABEL_170:
                      if (!v24)
                        goto LABEL_351;
                      continue;
                    }
                    v22 = 1;
LABEL_351:
                    v111 = __src;
                    if (v23 - 5 < 0xFFFFFFFC)
                      goto LABEL_352;
                    v133 = *((_DWORD *)__src + 1);
                    if (v133)
                    {
                      if (v133 != 1)
                        goto LABEL_891;
                      if (!*(_DWORD *)__src)
                        goto LABEL_352;
                    }
                    if (v23 != 1)
                    {
                      v134 = *((_DWORD *)__src + 3);
                      if (v134)
                      {
                        if (v134 != 1)
                          goto LABEL_891;
                        if (!*((_DWORD *)__src + 2))
                          goto LABEL_352;
                      }
                      if (v23 != 2)
                      {
                        v135 = *((_DWORD *)__src + 5);
                        if (v135)
                        {
                          if (v135 != 1)
                            goto LABEL_891;
                          if (!*((_DWORD *)__src + 4))
                            goto LABEL_352;
                        }
                        if (v23 != 3)
                        {
                          v136 = *((_DWORD *)__src + 7);
                          if (v136)
                          {
                            if (v136 != 1)
                              goto LABEL_891;
                            if (!*((_DWORD *)__src + 6))
                            {
LABEL_352:
                              v109 = 0;
                              LODWORD(v110) = 1;
                              if (v315 != __src)
                                goto LABEL_404;
                              goto LABEL_406;
                            }
                          }
                        }
                      }
                    }
                    v137 = 0;
                    v138 = 8 * v23;
                    v139 = &__src[v138];
                    do
                    {
                      v140 = *(_DWORD *)&__src[v137 + 4];
                      if (v140)
                      {
                        if (v140 != 1)
                          goto LABEL_891;
                        if (*(_DWORD *)&__src[v137] == 1)
                          goto LABEL_392;
                      }
                      v137 += 8;
                    }
                    while (v138 != v137);
                    if (v23 < 2 || v23 == 1)
                    {
LABEL_382:
                      v142 = &__src[8 * v23 - 8];
                      if (!*((_DWORD *)v142 + 1))
                      {
                        v143 = 5 - v23;
                        if (v143 >= 5)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x197B52470);
                        }
                        if (WTF::pow256(unsigned long)::values[v143] <= (unint64_t)*(unsigned int *)v142)
                        {
LABEL_392:
                          LODWORD(v110) = 0;
                          v109 = 0;
                          if (v315 != __src)
                            goto LABEL_404;
                          goto LABEL_406;
                        }
                        if (!v22)
                          goto LABEL_389;
                        WTF::URLParser::syntaxViolation<char16_t>(v11, v0);
                        if (!HIDWORD(__n))
                          goto LABEL_860;
                        v111 = __src;
                        v139 = &__src[8 * HIDWORD(__n)];
                        do
                        {
LABEL_389:
                          if (*((_DWORD *)v111 + 1))
                            goto LABEL_891;
                          if (*(_DWORD *)v111 >= 0x100u)
                            WTF::URLParser::syntaxViolation<char16_t>(v11, v0);
                          v111 += 8;
                        }
                        while (v111 != v139);
                        v144 = HIDWORD(__n);
                        if (HIDWORD(__n) != 4)
                        {
LABEL_860:
                          WTF::URLParser::syntaxViolation<char16_t>(v11, v0);
                          v144 = HIDWORD(__n);
                          if (!HIDWORD(__n))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x197B524E4);
                          }
                        }
                        v111 = __src;
                        v110 = *(_QWORD *)&__src[8 * v144 - 8];
                        v145 = v144 - 1;
                        HIDWORD(__n) = v145;
                        if (!HIDWORD(v110))
                        {
                          if (!v145)
                            goto LABEL_403;
                          if (*((_DWORD *)__src + 1))
                            goto LABEL_891;
                          LODWORD(v110) = v110 + (*(_DWORD *)__src << 24);
                          if (v145 == 1)
                            goto LABEL_403;
                          if (*((_DWORD *)__src + 3))
                            goto LABEL_891;
                          LODWORD(v110) = v110 + (*((_DWORD *)__src + 2) << 16);
                          if (v145 == 2)
                            goto LABEL_403;
                          if (*((_DWORD *)__src + 5))
                            goto LABEL_891;
                          LODWORD(v110) = v110 + (*((_DWORD *)__src + 4) << 8);
                          if (v145 == 3)
                          {
LABEL_403:
                            v109 = 1;
                            if (v315 == __src)
                              goto LABEL_406;
                            goto LABEL_404;
                          }
                          if (!*((_DWORD *)__src + 7))
                          {
                            if (v145 == 4)
                            {
                              LODWORD(v110) = *((_DWORD *)__src + 6) + v110;
                              v109 = 1;
                              if (v315 != __src)
                                goto LABEL_404;
                              goto LABEL_406;
                            }
                            if (!*((_DWORD *)__src + 9))
                            {
                              __break(0xC471u);
                              JUMPOUT(0x197B52664);
                            }
                          }
                        }
                      }
                    }
                    else
                    {
                      v141 = 0;
                      while (1)
                      {
                        if (v138 == v141)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x197B5267CLL);
                        }
                        if (*(_DWORD *)&__src[v141 + 4])
                          break;
                        if (*(_DWORD *)&__src[v141] > 0xFFu)
                          goto LABEL_392;
                        v141 += 8;
                        if (v138 - 8 == v141)
                          goto LABEL_382;
                      }
                    }
LABEL_891:
                    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_892:
                    *(_QWORD *)&v323 = v0;
                    __break(0xC471u);
                    JUMPOUT(0x197B52674);
                  }
                }
                break;
              }
              if (v24 == 1)
              {
                v73 = 1;
              }
              else
              {
                v82 = v74 & 0xFC00;
                v73 = 1;
                if (v82 == 55296)
                {
                  if ((v25[1] & 0xFC00) == 0xDC00)
                    v73 = 2;
                  else
                    v73 = 1;
                }
              }
              v24 -= v73;
              v25 += v73;
              v22 = 1;
              goto LABEL_170;
            }
            if (v16 <= 0x7F)
              goto LABEL_25;
LABEL_26:
            if (v9 != 1)
            {
              v18 = v16 & 0xFC00;
              v15 = 1;
              if (v18 == 55296)
              {
                if ((v10[1] & 0xFC00) == 0xDC00)
                  v15 = 2;
                else
                  v15 = 1;
              }
              goto LABEL_12;
            }
LABEL_11:
            v15 = 1;
LABEL_12:
            v10 += v15;
            v9 -= v15;
            if (!v9)
              goto LABEL_42;
          }
          v17 = v16 > 0x7F || v16 - 11 >= 2;
          if (v17)
            goto LABEL_26;
LABEL_25:
          if ((WTF::characterClassTable[*v10] & 8) != 0)
            return 0;
          goto LABEL_26;
        }
      }
      v322 = v323;
      v310 = v321;
      *(_QWORD *)&v320 = v321;
      *((_QWORD *)&v320 + 1) = 2048;
      v235 = v323;
      v0 = v323;
      while (1)
      {
        v237 = *v10;
        if ((*v10 & 0xFC00) == 0xD800)
          goto LABEL_719;
        if (*v10 - 9 > 4)
          break;
        if (*v10 - 11 < 2)
          goto LABEL_724;
        WTF::URLParser::syntaxViolation<char16_t>(v11, v235);
LABEL_742:
        if (v9 == 1)
        {
          v236 = 1;
        }
        else
        {
          v236 = 1;
          if ((*v10 & 0xFC00) == 0xD800)
          {
            if ((v10[1] & 0xFC00) == 0xDC00)
              v236 = 2;
            else
              v236 = 1;
          }
        }
        v0 = (unint64_t)&v10[v236];
        v10 = (unsigned __int16 *)v0;
        v9 -= v236;
        if (!v9)
        {
          v10 = (unsigned __int16 *)v0;
LABEL_751:
          *(_QWORD *)&v323 = v0;
          *((_QWORD *)&v323 + 1) = v9;
          v0 = (unint64_t)&v317;
          WTF::URLParser::percentDecode<char16_t>((uint64_t)&v317, v11, v320, (WTF *)HIDWORD(v320), (uint64_t *)&v322);
          if (!v317 || (WTF::fromUTF8Impl<false>((unint64_t)v317, v319, (uint64_t *)&v316), !v316))
          {
            v9 = 0;
            goto LABEL_882;
          }
          if (!WTF::operator==(*((unsigned __int8 **)v316 + 1), *((unsigned int *)v316 + 1) | ((unint64_t)((*((_DWORD *)v316 + 4) >> 2) & 1) << 32), (unsigned __int8 *)v317, v319 | 0x100000000))WTF::URLParser::syntaxViolation<char16_t>(v11, v235);
          WTF::URLParser::domainToASCII<char16_t>();
          if (v315[2048])
          {
            v5 = HIDWORD(__n);
            v114 = __src;
            if (!HIDWORD(__n))
              goto LABEL_762;
            v244 = 0;
            v245 = 1;
            do
            {
              if (((char)__src[v244] & 0x80000000) == 0 && (WTF::characterClassTable[__src[v244]] & 8) != 0)
                break;
              v245 = ++v244 < (unint64_t)HIDWORD(__n);
            }
            while (HIDWORD(__n) != v244);
            if (!v245)
            {
LABEL_762:
              WTF::URLParser::parseIPv4Host<char16_t,unsigned char>(&v312, (void *)v11, (uint64_t *)&v322, __src, HIDWORD(__n), v6, v7, v8);
              if (HIDWORD(v312) != 1)
              {
                if (!HIDWORD(v312))
                {
                  WTF::URLParser::serializeIPv4((WTF::URLParser *)v11, v312);
                  if (*(_BYTE *)(v11 + 59))
                  {
                    *(_DWORD *)(v11 + 24) = *(_DWORD *)(v11 + 52);
                    if (v9)
                      goto LABEL_766;
                  }
                  else
                  {
                    *(_DWORD *)(v11 + 24) = ((unint64_t)v10 - *(_QWORD *)(v11 + 72)) >> 1;
                    if (v9)
                    {
LABEL_766:
                      if (WTF::URLParser::parsePort<char16_t>(v11, (unsigned __int16 **)&v323))
                        v9 = 3;
                      else
                        v9 = 0;
LABEL_877:
                      std::optional<WTF::Vector<unsigned char,2048ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional((uint64_t)&__src, (void *)v2, v3, v4, v5, v6, v7, v8);
                      v1 = (uint64_t)v316;
                      v316 = 0;
                      if (v1)
                      {
                        if (*(_DWORD *)v1 == 2)
                          goto LABEL_881;
                        *(_DWORD *)v1 -= 2;
                      }
LABEL_882:
                      v279 = v310;
                      v301 = v317;
                      if ((WTF *)(v0 + 16) != v317 && v317)
                      {
                        v317 = 0;
                        v318 = 0;
                        WTF::fastFree((unint64_t)v301, (void *)v2, v3, v4, v5, v6, v7, v8);
                      }
LABEL_885:
                      v302 = v320;
                      if (v279 != (_BYTE *)v320 && (_QWORD)v320)
                      {
                        *(_QWORD *)&v320 = 0;
                        DWORD2(v320) = 0;
                        WTF::fastFree(v302, (void *)v2, v3, v4, v5, v6, v7, v8);
                      }
                      return v9;
                    }
                  }
                  *(_DWORD *)(v11 + 8) &= 0xFFFFFFC7;
                  v9 = 4;
                  goto LABEL_877;
                }
                goto LABEL_891;
              }
LABEL_841:
              if ((_DWORD)v312)
              {
                if (!*(_BYTE *)(v11 + 59))
                  goto LABEL_843;
                v289 = HIDWORD(__n);
                v290 = *(unsigned int *)(v11 + 52);
                if (HIDWORD(__n))
                {
                  v281 = v290 + HIDWORD(__n);
                  if (v281 > *(unsigned int *)(v11 + 48))
                  {
                    v291 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(v11 + 40, (WTF *)(v290 + HIDWORD(__n)), (uint64_t)v114);
                    v290 = *(unsigned int *)(v11 + 52);
                    if (v281 < v290)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197B52690);
                    }
                    v114 = (unsigned __int8 *)v291;
                  }
                  v1 = (uint64_t)memcpy((void *)(*(_QWORD *)(v11 + 40) + v290), v114, v289);
                  *(_DWORD *)(v11 + 52) = v281;
                  v280 = *(unsigned __int8 *)(v11 + 59);
                  if (!*(_BYTE *)(v11 + 59))
                  {
LABEL_843:
                    v280 = 0;
                    v281 = ((unint64_t)v10 - *(_QWORD *)(v11 + 72)) >> 1;
                  }
                }
                else
                {
                  v280 = 1;
                  LODWORD(v281) = *(_DWORD *)(v11 + 52);
                }
                *(_DWORD *)(v11 + 24) = v281;
                v282 = *(_DWORD *)(v11 + 20);
                if (v282 == *(_DWORD *)(v11 + 12))
                  v2 = v282;
                else
                  v2 = v282 + 1;
                v3 = (v281 - v2);
                if (v280)
                {
                  v292 = *(unsigned int *)(v11 + 52);
                  if (v292 < v2 || v292 - v2 < v3)
                    goto LABEL_880;
                  if ((WTF::dnsNameEndsInNumber((unsigned __int8 *)(*(_QWORD *)(v11 + 40) + v2), v3 | 0x100000000) & 1) == 0)
                    goto LABEL_855;
                }
                else
                {
                  v324 = 0;
                  v283 = *(_QWORD *)(v11 + 64);
                  if (v283)
                  {
                    v284 = *(unsigned __int8 *)(v283 + 16);
                    v285 = *(_QWORD *)(v283 + 8);
                    LODWORD(v283) = *(_DWORD *)(v283 + 4);
                    v324 = v285;
                    v286 = (v284 >> 2) & 1;
                  }
                  else
                  {
                    LOBYTE(v286) = 1;
                  }
                  v325 = v283;
                  v326 = v286;
                  v287 = (unsigned __int8 *)WTF::StringView::substring((const char *)&v324, v2, v3);
                  if ((WTF::dnsNameEndsInNumber(v287, v288) & 1) == 0)
                  {
LABEL_855:
                    if (v9)
                    {
                      if (WTF::URLParser::parsePort<char16_t>(v11, (unsigned __int16 **)&v323))
                        v9 = 5;
                      else
                        v9 = 0;
                    }
                    else
                    {
                      *(_DWORD *)(v11 + 8) &= 0xFFFFFFC7;
                      v9 = 6;
                    }
                    goto LABEL_877;
                  }
                }
              }
            }
          }
          v9 = 0;
          goto LABEL_877;
        }
      }
      if (*v10 == 58)
        goto LABEL_751;
LABEL_724:
      if (*v10 > 0x7Fu)
      {
LABEL_719:
        WTF::URLParser::syntaxViolation<char16_t>(v11, v235);
        v237 = *v10;
      }
      v238 = v237;
      if ((v237 & 0xFC00) == 0xD800)
      {
        if (v9 != 1)
        {
          v239 = v10[1];
          v123 = (v239 & 0xFC00) == 56320;
          v240 = (v238 << 10) - 56613888 + v239;
          if (v123)
            v238 = v240;
        }
LABEL_734:
        if (v238 >> 11 < 0x1B || (v238 & 0xFFFFE000) == 0xE000)
        {
          LOBYTE(__src) = (v238 >> 12) | 0xE0;
          BYTE1(__src) = (v238 >> 6) & 0x3F | 0x80;
          BYTE2(__src) = v238 & 0x3F | 0x80;
          v241 = 3;
        }
        else
        {
          if ((v238 - 0x10000) >> 20)
          {
            v9 = 0;
            *(_QWORD *)&v323 = v0;
            v279 = v321;
            goto LABEL_885;
          }
          LOBYTE(__src) = (v238 >> 18) | 0xF0;
          BYTE1(__src) = (v238 >> 12) & 0x3F | 0x80;
          BYTE2(__src) = (v238 >> 6) & 0x3F | 0x80;
          BYTE3(__src) = v238 & 0x3F | 0x80;
          v241 = 4;
        }
        goto LABEL_739;
      }
      if (v237 > 0x7Fu)
      {
        if (v237 > 0x7FFu)
          goto LABEL_734;
        LOBYTE(__src) = (v237 >> 6) | 0xC0;
        BYTE1(__src) = v237 & 0x3F | 0x80;
        v241 = 2;
      }
      else
      {
        LOBYTE(__src) = v237;
        v241 = 1;
      }
LABEL_739:
      v242 = HIDWORD(v320);
      v243 = v241 + HIDWORD(v320);
      if (v243 > DWORD2(v320))
      {
        WTF::Vector<unsigned char,2048ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)&v320, (WTF *)(v241 + HIDWORD(v320)));
        v242 = HIDWORD(v320);
        if (v243 < HIDWORD(v320))
        {
          *(_QWORD *)&v323 = v0;
          __break(0xC471u);
          JUMPOUT(0x197B52688);
        }
      }
      memcpy((void *)(v320 + v242), &__src, v241);
      HIDWORD(v320) = v243;
      if (!v9)
        goto LABEL_747;
      goto LABEL_742;
    }
    v311 = v1 + 40;
    v0 = v323;
    while (1)
    {
      v27 = *v10;
      if ((*v10 & 0xFC00) == 0xD800)
        break;
      if (v27 - 9 > 4)
      {
        if (v27 == 58)
        {
          v72 = 0;
          *(_QWORD *)&v323 = v0;
          *((_QWORD *)&v323 + 1) = v9;
          if (*(_BYTE *)(v11 + 59))
            goto LABEL_293;
LABEL_166:
          *(_DWORD *)(v11 + 24) = ((unint64_t)v10 - *(_QWORD *)(v11 + 72)) >> 1;
          if (!v72)
          {
LABEL_294:
            if (WTF::URLParser::parsePort<char16_t>(v11, (unsigned __int16 **)&v323))
              return 8;
            else
              return 0;
          }
LABEL_167:
          *(_DWORD *)(v11 + 8) &= 0xFFFFFFC7;
          return 7;
        }
      }
      else if (v27 - 11 >= 2)
      {
        WTF::URLParser::syntaxViolation<char16_t>(v11, (uint64_t)v10);
        goto LABEL_113;
      }
      if (v27 > 0x7F)
      {
        WTF::URLParser::syntaxViolation<char16_t>(v11, (uint64_t)v10);
        if (v27 <= 0x7FF)
        {
          v31 = 0;
          v32 = (v27 >> 6) | 0xC0;
          v30 = 1;
          v33 = (uint64_t *)&v320;
LABEL_70:
          *(_BYTE *)v33 = v27 & 0x3F | 0x80;
          LODWORD(__src) = 37;
          if (*(_BYTE *)(v11 + 59))
          {
            v57 = *(unsigned int *)(v11 + 52);
            if ((_DWORD)v57 == *(_DWORD *)(v11 + 48))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(v311, &__src);
            }
            else
            {
              *(_BYTE *)(*(_QWORD *)(v11 + 40) + v57) = 37;
              ++*(_DWORD *)(v11 + 52);
            }
          }
          v34 = (v32 >> 4) + 55;
          LODWORD(__src) = v34;
          if (*(_BYTE *)(v11 + 59))
          {
            v58 = *(unsigned int *)(v11 + 52);
            if ((_DWORD)v58 == *(_DWORD *)(v11 + 48))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(v311, &__src);
            }
            else
            {
              *(_BYTE *)(*(_QWORD *)(v11 + 40) + v58) = v34;
              ++*(_DWORD *)(v11 + 52);
            }
          }
          if ((v32 & 0xF) >= 0xA)
            v35 = 55;
          else
            v35 = 48;
          v36 = v35 + (v32 & 0xF);
          LODWORD(__src) = v35 + (v32 & 0xF);
          if (*(_BYTE *)(v11 + 59))
          {
            v59 = *(unsigned int *)(v11 + 52);
            if ((_DWORD)v59 == *(_DWORD *)(v11 + 48))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(v311, &__src);
              v37 = v320;
              LODWORD(__src) = 37;
              if (*(_BYTE *)(v11 + 59))
                goto LABEL_136;
            }
            else
            {
              *(_BYTE *)(*(_QWORD *)(v11 + 40) + v59) = v36;
              ++*(_DWORD *)(v11 + 52);
              v37 = v320;
              LODWORD(__src) = 37;
              if (*(_BYTE *)(v11 + 59))
                goto LABEL_136;
            }
LABEL_77:
            if (v37 >= 0xA0)
              v38 = 55;
            else
              v38 = 48;
            v39 = v38 + (v37 >> 4);
            LODWORD(__src) = v39;
            if (!*(_BYTE *)(v11 + 59))
              goto LABEL_81;
          }
          else
          {
            v37 = v320;
            LODWORD(__src) = 37;
            if (!*(_BYTE *)(v11 + 59))
              goto LABEL_77;
LABEL_136:
            v64 = *(unsigned int *)(v11 + 52);
            if ((_DWORD)v64 == *(_DWORD *)(v11 + 48))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(v311, &__src);
              if (v37 >= 0xA0)
                v65 = 55;
              else
                v65 = 48;
              v39 = v65 + (v37 >> 4);
              LODWORD(__src) = v39;
              if (*(_BYTE *)(v11 + 59))
                goto LABEL_147;
LABEL_81:
              if ((v37 & 0xF) >= 0xA)
                v40 = 55;
              else
                v40 = 48;
              v41 = v40 + (v37 & 0xF);
              LODWORD(__src) = v40 + (v37 & 0xF);
              if (*(_BYTE *)(v11 + 59))
              {
                v60 = *(unsigned int *)(v11 + 52);
                if ((_DWORD)v60 == *(_DWORD *)(v11 + 48))
                {
                  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(v311, &__src);
                }
                else
                {
                  *(_BYTE *)(*(_QWORD *)(v11 + 40) + v60) = v41;
                  ++*(_DWORD *)(v11 + 52);
                }
              }
              if ((v30 & 1) == 0)
              {
                v42 = v317;
                LODWORD(__src) = 37;
                if (*(_BYTE *)(v11 + 59))
                {
                  v61 = *(unsigned int *)(v11 + 52);
                  if ((_DWORD)v61 == *(_DWORD *)(v11 + 48))
                  {
                    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(v311, &__src);
                  }
                  else
                  {
                    *(_BYTE *)(*(_QWORD *)(v11 + 40) + v61) = 37;
                    ++*(_DWORD *)(v11 + 52);
                  }
                }
                if (v42 >= 0xA0)
                  v43 = 55;
                else
                  v43 = 48;
                v44 = v43 + (v42 >> 4);
                LODWORD(__src) = v44;
                if (*(_BYTE *)(v11 + 59))
                {
                  v62 = *(unsigned int *)(v11 + 52);
                  if ((_DWORD)v62 == *(_DWORD *)(v11 + 48))
                  {
                    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(v311, &__src);
                  }
                  else
                  {
                    *(_BYTE *)(*(_QWORD *)(v11 + 40) + v62) = v44;
                    ++*(_DWORD *)(v11 + 52);
                  }
                }
                if ((v42 & 0xF) >= 0xA)
                  v45 = 55;
                else
                  v45 = 48;
                v46 = v45 + (v42 & 0xF);
                LODWORD(__src) = v45 + (v42 & 0xF);
                if (*(_BYTE *)(v11 + 59))
                {
                  v63 = *(unsigned int *)(v11 + 52);
                  if ((_DWORD)v63 == *(_DWORD *)(v11 + 48))
                  {
                    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(v311, &__src);
                  }
                  else
                  {
                    *(_BYTE *)(*(_QWORD *)(v11 + 40) + v63) = v46;
                    ++*(_DWORD *)(v11 + 52);
                  }
                }
                if ((v31 & 1) == 0)
                {
                  v47 = v324;
                  LODWORD(__src) = 37;
                  if (*(_BYTE *)(v11 + 59))
                  {
                    v69 = *(unsigned int *)(v11 + 52);
                    if ((_DWORD)v69 == *(_DWORD *)(v11 + 48))
                    {
                      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(v311, &__src);
                    }
                    else
                    {
                      *(_BYTE *)(*(_QWORD *)(v11 + 40) + v69) = 37;
                      ++*(_DWORD *)(v11 + 52);
                    }
                  }
                  if (v47 >= 0xA0)
                    v48 = 55;
                  else
                    v48 = 48;
                  v49 = v48 + (v47 >> 4);
                  LODWORD(__src) = v49;
                  if (*(_BYTE *)(v11 + 59))
                  {
                    v70 = *(unsigned int *)(v11 + 52);
                    if ((_DWORD)v70 == *(_DWORD *)(v11 + 48))
                    {
                      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(v311, &__src);
                    }
                    else
                    {
                      *(_BYTE *)(*(_QWORD *)(v11 + 40) + v70) = v49;
                      ++*(_DWORD *)(v11 + 52);
                    }
                  }
                  if ((v47 & 0xF) >= 0xA)
                    v50 = 55;
                  else
                    v50 = 48;
                  v51 = v50 + (v47 & 0xF);
                  LODWORD(__src) = v50 + (v47 & 0xF);
                  if (*(_BYTE *)(v11 + 59))
                  {
                    v71 = *(unsigned int *)(v11 + 52);
                    if ((_DWORD)v71 == *(_DWORD *)(v11 + 48))
                    {
                      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(v311, &__src);
                    }
                    else
                    {
                      *(_BYTE *)(*(_QWORD *)(v11 + 40) + v71) = v51;
                      ++*(_DWORD *)(v11 + 52);
                    }
                  }
                }
              }
              if (!v9)
              {
LABEL_747:
                *(_QWORD *)&v323 = v0;
                __break(1u);
LABEL_748:
                LODWORD(v226) = 0;
                v161 = 1;
                goto LABEL_789;
              }
              goto LABEL_113;
            }
            *(_BYTE *)(*(_QWORD *)(v11 + 40) + v64) = 37;
            ++*(_DWORD *)(v11 + 52);
            if (v37 >= 0xA0)
              v66 = 55;
            else
              v66 = 48;
            v39 = v66 + (v37 >> 4);
            LODWORD(__src) = v39;
            if (!*(_BYTE *)(v11 + 59))
              goto LABEL_81;
          }
LABEL_147:
          v67 = *(unsigned int *)(v11 + 52);
          if ((_DWORD)v67 == *(_DWORD *)(v11 + 48))
          {
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(v311, &__src);
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)(v11 + 40) + v67) = v39;
            ++*(_DWORD *)(v11 + 52);
          }
          goto LABEL_81;
        }
        goto LABEL_55;
      }
      if ((WTF::characterClassTable[*v10] & 4) != 0)
      {
        if (v27 != 37)
        {
          v9 = 0;
          *(_QWORD *)&v323 = v0;
          return v9;
        }
LABEL_112:
        LODWORD(__src) = *v10;
        if (*(_BYTE *)(v11 + 59))
        {
          v68 = *(unsigned int *)(v11 + 52);
          if ((_DWORD)v68 == *(_DWORD *)(v11 + 48))
          {
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(v311, &__src);
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)(v11 + 40) + v68) = v27;
            ++*(_DWORD *)(v11 + 52);
          }
        }
        goto LABEL_113;
      }
      if ((unsigned __int16)(v27 - 127) > 0xFFA0u)
        goto LABEL_112;
      WTF::URLParser::syntaxViolation<char16_t>(v11, (uint64_t)v10);
      WTF::URLParser::percentEncodeByte((WTF::URLParser *)v11, v27);
LABEL_113:
      if (v9 == 1)
      {
        v26 = 1;
      }
      else
      {
        v26 = 1;
        if ((*v10 & 0xFC00) == 0xD800)
        {
          v26 = 1;
          if ((v10[1] & 0xFC00) == 0xDC00)
            v26 = 2;
        }
      }
      v0 = (unint64_t)&v10[v26];
      v10 = (unsigned __int16 *)v0;
      v9 -= v26;
      if (!v9)
      {
        v72 = 1;
        v10 = (unsigned __int16 *)v0;
        v323 = v0;
        if (!*(_BYTE *)(v11 + 59))
          goto LABEL_166;
LABEL_293:
        *(_DWORD *)(v11 + 24) = *(_DWORD *)(v11 + 52);
        if (!v72)
          goto LABEL_294;
        goto LABEL_167;
      }
    }
    if (v9 != 1)
    {
      v28 = v10[1];
      v123 = (v28 & 0xFC00) == 56320;
      v29 = (v27 << 10) - 56613888 + v28;
      if (v123)
        v27 = v29;
    }
    WTF::URLParser::syntaxViolation<char16_t>(v11, (uint64_t)v10);
LABEL_55:
    if (v27 >> 11 < 0x1B || (v27 & 0xFFFFE000) == 0xE000)
    {
      v30 = 0;
      v32 = (v27 >> 12) | 0xE0;
      LOBYTE(v320) = (v27 >> 6) & 0x3F | 0x80;
      v31 = 1;
      v33 = (uint64_t *)&v317;
      goto LABEL_70;
    }
    if (!((v27 - 0x10000) >> 20))
    {
      v30 = 0;
      v31 = 0;
      v32 = (v27 >> 18) | 0xF0;
      LOBYTE(v320) = (v27 >> 12) & 0x3F | 0x80;
      LOBYTE(v317) = (v27 >> 6) & 0x3F | 0x80;
      v33 = &v324;
      goto LABEL_70;
    }
    if (*(_BYTE *)(v11 + 59))
    {
      v52 = *(unsigned int *)(v11 + 52);
      v53 = v52 + 9;
      v54 = "%EF%BF%BD";
      if (v52 + 9 > *(unsigned int *)(v11 + 48))
      {
        v54 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(v311, (WTF *)(v52 + 9), (uint64_t)"%EF%BF%BD");
        v52 = *(unsigned int *)(v11 + 52);
        if (v53 < v52)
          goto LABEL_892;
      }
      v55 = *(_QWORD *)(v11 + 40) + v52;
      v56 = *(_QWORD *)v54;
      *(_BYTE *)(v55 + 8) = v54[8];
      *(_QWORD *)v55 = v56;
      *(_DWORD *)(v11 + 52) = v53;
    }
    goto LABEL_113;
  }
  v320 = v323;
  v13 = *((_QWORD *)&v323 + 1);
  if (!*((_QWORD *)&v323 + 1))
    return 0;
  v14 = (unsigned __int16 *)v320;
  while (1)
  {
    v20 = *v14;
    v21 = v20 & 0xFC00;
    if (v21 != 55296)
      break;
    if (v13 != 1)
      goto LABEL_37;
    v19 = 1;
LABEL_32:
    v14 += v19;
    v13 -= v19;
    if (!v13)
      return 0;
  }
  if (v20 != 93)
  {
LABEL_37:
    v19 = 1;
    if (v13 != 1 && v21 == 55296)
    {
      if ((v14[1] & 0xFC00) == 0xDC00)
        v19 = 2;
      else
        v19 = 1;
    }
    goto LABEL_32;
  }
  *(_QWORD *)&v320 = v14;
  *((_QWORD *)&v320 + 1) = v13;
  v112 = (uint64_t)v14 - v2;
  if ((uint64_t)((uint64_t)v14 - v2) <= -2 || (unsigned __int16 *)v2 == v14)
    goto LABEL_880;
  v113 = (v112 >> 1) - 1;
  if (v112 >> 1 == 1)
    return 0;
  LODWORD(v114) = -56613888;
  v115 = (unsigned __int16 *)(v2 + 2);
  v0 = 1;
  v9 = 55296;
  while (2)
  {
    v116 = *v115;
    if (v113 == 1)
    {
      if ((v116 - 14) < 0xFFFFFFFB || (v116 - 11) < 2)
        goto LABEL_326;
LABEL_310:
      WTF::URLParser::syntaxViolation<char16_t>(v11, (uint64_t)v10);
      if (v113 == 1)
      {
        v122 = 1;
        v113 = 0;
        v123 = 1;
      }
      else
      {
        v122 = 1;
        if ((*v115 & 0xFC00) == 0xD800)
        {
          if ((v115[1] & 0xFC00) == 0xDC00)
            v122 = 2;
          else
            v122 = 1;
        }
        v17 = v113 >= v122;
        v113 -= v122;
        v123 = v113 == 0;
        if (!v17)
          goto LABEL_880;
      }
      v115 += v122;
      if (v123)
        return 0;
      continue;
    }
    break;
  }
  v117 = *v115;
  if ((v116 & 0xFC00) == 0xD800)
  {
    v118 = v115[1];
    v123 = (v118 & 0xFC00) == 56320;
    v117 = (v116 << 10) - 56613888 + v118;
    if (!v123)
      v117 = *v115;
  }
  v119 = v117 - 14;
  v120 = v117 - 11;
  if (v119 >= 0xFFFFFFFB && v120 >= 2)
    goto LABEL_310;
LABEL_326:
  __src = 0;
  __n = 0;
  v125 = 55296;
  LODWORD(v310) = v116 == 58;
  if (v116 != 58)
  {
    v161 = 0;
LABEL_479:
    v306 = 0;
    v307 = v310 ^ 1;
    v0 = 56320;
    while (1)
    {
      v309 = v161;
      if (v161 <= 8)
        v162 = 8;
      else
        v162 = v161;
      v305 = v162;
      if (v161 == 8)
        return 0;
      v163 = *v115;
      if (v163 != 58 || v125 == 0)
        break;
      v9 = v161;
LABEL_654:
      if ((v307 & 1) == 0)
        return 0;
      ++v115;
      if (--v113)
      {
        while (1)
        {
          v219 = *v115;
          if (v113 != 1 && (v219 & 0xFC00) == v125)
          {
            v220 = v115[1];
            v123 = (v220 & 0xFC00) == 56320;
            v221 = (_DWORD)v114 + (v219 << 10) + v220;
            if (v123)
              v219 = v221;
          }
          v222 = v219 - 14;
          v223 = v219 - 11;
          if (v222 < 0xFFFFFFFB || v223 < 2)
            break;
          WTF::URLParser::syntaxViolation<char16_t>(v11, (uint64_t)v10);
          if (v113 == 1)
          {
            v225 = 1;
          }
          else
          {
            v225 = 1;
            if ((*v115 & 0xFC00) == v125)
            {
              if ((v115[1] & 0xFC00) == 0xDC00)
                v225 = 2;
              else
                v225 = 1;
            }
          }
          v17 = v113 >= v225;
          v113 -= v225;
          if (!v17)
            goto LABEL_880;
          v115 += v225;
          if (!v113)
          {
            v113 = 0;
            break;
          }
        }
      }
      if (v306)
        WTF::URLParser::syntaxViolation<char16_t>(v11, (uint64_t)v10);
      v307 = 0;
      LODWORD(v226) = 0;
      v161 = v9 + 1;
      LODWORD(v310) = 1;
      if (!v113)
        goto LABEL_789;
    }
    v303 = (char)v310;
    v165 = v161;
    while (1)
    {
      v304 = v165;
      v123 = v165 == 6;
      v166 = v165 < 6;
      if (!v123 && (v310 & v166) == 0)
        goto LABEL_492;
      v189 = 0;
      v167 = 0;
      v190 = v113;
      v191 = v115;
      while (v190)
      {
        v193 = 0;
        v194 = 0;
        v195 = *v191;
LABEL_582:
        v196 = v195 & 0xFC00;
        v197 = v195;
        if (v190 != 1)
        {
          v197 = v195;
          if (v196 == v125)
          {
            v198 = v191[1];
            v1 = (unsigned __int16)v198 & 0xFC00;
            v197 = v195;
            if ((_DWORD)v1 == 56320)
              v197 = (_DWORD)v114 + (v195 << 10) + v198;
          }
        }
        if ((v197 - 48) > 9)
          break;
        if (v194)
        {
          v199 = 10 * v194;
          if (v196 != v125)
            goto LABEL_595;
        }
        else
        {
          if (v196 != v125)
          {
            if (((v195 == 48) & v193) != 0)
              break;
            v199 = 0;
            v193 |= v195 == 48;
            v200 = v195;
            goto LABEL_598;
          }
          v199 = 0;
        }
        if (v190 == 1)
        {
LABEL_595:
          v200 = v195;
          goto LABEL_598;
        }
        v201 = v191[1];
        v123 = (v201 & 0xFC00) == 56320;
        v200 = (_DWORD)v114 + (v195 << 10) + v201;
        if (!v123)
          v200 = v195;
LABEL_598:
        v194 = v199 + v200 - 48;
        if (v194 <= 0xFF)
        {
          if (v190 == 1)
          {
            v203 = 1;
            goto LABEL_606;
          }
          v202 = v195 & 0xFC00;
          v203 = 1;
LABEL_602:
          if (v202 == v125)
          {
            if ((v191[1] & 0xFC00) == 0xDC00)
              v203 = 2;
            else
              v203 = 1;
          }
LABEL_606:
          while (1)
          {
            v191 += v203;
            v190 -= v203;
            if (!v190)
              break;
            v195 = *v191;
            v202 = v195 & 0xFC00;
            v204 = (unsigned __int16)v195;
            if (v190 != 1 && v202 == v125)
            {
              v205 = v191[1];
              v123 = (v205 & 0xFC00) == 56320;
              v204 = (_DWORD)v114 + (v195 << 10) + v205;
              if (!v123)
                v204 = *v191;
            }
            v206 = v204 - 14;
            v207 = v204 - 11;
            if (v206 < 0xFFFFFFFB || v207 < 2)
            {
              if (v195 != 46 || v202 == v125)
                goto LABEL_582;
              break;
            }
            v203 = 1;
            if (v190 != 1)
              goto LABEL_602;
          }
          if (((v194 != 0) & v193) != 0)
            break;
          if (v189 > 2)
          {
            if (v190)
              break;
          }
          else
          {
            if (!v190 || *v191 != 46 || !v125)
              break;
            ++v191;
            if (--v190)
            {
              do
              {
                v211 = *v191;
                if (v190 == 1)
                {
                  v212 = *v191;
                }
                else
                {
                  v212 = *v191;
                  if ((v211 & 0xFC00) == v125)
                  {
                    v213 = v191[1];
                    v123 = (v213 & 0xFC00) == 56320;
                    v212 = (_DWORD)v114 + (v211 << 10) + v213;
                    if (!v123)
                      v212 = *v191;
                  }
                }
                v214 = v212 - 14;
                v215 = v212 - 11;
                if (v214 < 0xFFFFFFFB || v215 < 2)
                  break;
                if (v190 == 1)
                {
                  v210 = 1;
                }
                else
                {
                  v217 = v211 & 0xFC00;
                  v210 = 1;
                  if (v217 == v125)
                  {
                    if ((v191[1] & 0xFC00) == 0xDC00)
                      v210 = 2;
                    else
                      v210 = 1;
                  }
                }
                v191 += v210;
                v190 -= v210;
              }
              while (v190);
            }
          }
          v192 = v167 << 8;
          v167 = (v167 << 8) | v194;
          if (++v189 != 4)
            continue;
          v0 = v304;
          if ((v310 & (v304 == 5)) == 0)
          {
            WTF::URLParser::syntaxViolation<char16_t>(v11, (uint64_t)v10);
            v246 = (_WORD *)&__src + v304;
            *v246 = HIWORD(v192);
            v9 = v304 + 2;
            v246[1] = v167;
            if ((v307 & 1) != 0)
              goto LABEL_682;
            goto LABEL_770;
          }
          return 0;
        }
        break;
      }
LABEL_492:
      v308 = 0;
      v9 = 0;
      LOWORD(v167) = 0;
LABEL_493:
      if ((v163 & 0xFC00) != v125 && (v163 - 48 < 0xA || (v163 | 0x20) - 97 <= 5))
      {
        if (v163 - 65 <= 0x19)
        {
          WTF::URLParser::syntaxViolation<char16_t>(v11, (uint64_t)v10);
          v163 = *v115;
        }
        if ((v163 & 0xFC00) == v125)
        {
          if (v113 != 1)
          {
            v168 = v115[1];
            if ((v168 & 0xFC00) == 0xDC00)
            {
              v169 = (_DWORD)v114 + (v163 << 10) + v168;
              goto LABEL_510;
            }
          }
        }
        else
        {
          if (v9)
            v170 = 0;
          else
            v170 = v163 == 48;
          v171 = v170;
          v308 |= v171;
        }
        v169 = v163;
LABEL_510:
        if (v169 >= 0x41)
          v172 = (v169 + 9) & 0xF;
        else
          v172 = v169 - 48;
        if (v113 == 1)
        {
          v174 = 1;
        }
        else
        {
          v173 = v163 & 0xFC00;
          v174 = 1;
          if (v173 == v125)
          {
            if ((v115[1] & 0xFC00) == 0xDC00)
              v174 = 2;
            else
              v174 = 1;
          }
        }
        v17 = v113 >= v174;
        v113 -= v174;
        v175 = v113 == 0;
        if (v17)
        {
          LOWORD(v167) = 16 * v167 + v172;
          while (1)
          {
            v115 += v174;
            if (v175)
            {
              v113 = 0;
              ++v9;
              goto LABEL_547;
            }
            v163 = *v115;
            if (v113 == 1)
            {
              if (v163 - 14 < 0xFFFFFFFB || v163 - 11 < 2)
                goto LABEL_544;
            }
            else
            {
              v176 = *v115;
              if ((v163 & 0xFC00) == v125)
              {
                v177 = v115[1];
                v123 = (v177 & 0xFC00) == 56320;
                v176 = (_DWORD)v114 + (v163 << 10) + v177;
                if (!v123)
                  v176 = *v115;
              }
              v178 = v176 - 14;
              v179 = v176 - 11;
              if (v178 < 0xFFFFFFFB || v179 < 2)
              {
LABEL_544:
                if (++v9 != 4)
                  goto LABEL_493;
                goto LABEL_547;
              }
            }
            WTF::URLParser::syntaxViolation<char16_t>(v11, (uint64_t)v10);
            if (v113 == 1)
            {
              v174 = 1;
            }
            else
            {
              v174 = 1;
              if ((*v115 & 0xFC00) == v125)
              {
                if ((v115[1] & 0xFC00) == 0xDC00)
                  v174 = 2;
                else
                  v174 = 1;
              }
            }
            v17 = v113 >= v174;
            v113 -= v174;
            v175 = v113 == 0;
            if (!v17)
              goto LABEL_880;
          }
        }
        goto LABEL_880;
      }
LABEL_547:
      v306 = (unsigned __int16)v167 == 0;
      if ((_WORD)v167)
      {
        if ((v308 & 1) == 0)
          goto LABEL_549;
      }
      else if (!(v303 & 1 | (v9 > 1)))
      {
LABEL_549:
        v182 = v304;
        if (v304 == v305)
          goto LABEL_880;
        goto LABEL_550;
      }
      WTF::URLParser::syntaxViolation<char16_t>(v11, (uint64_t)v10);
      v182 = v304;
      if (v304 == v305)
        goto LABEL_880;
LABEL_550:
      v9 = v182 + 1;
      *((_WORD *)&__src + v182) = v167;
      if (!v113)
        goto LABEL_681;
      if (v182 == 7 || *v115 != 58 || !v125)
        return 0;
      if (!--v113)
      {
LABEL_680:
        WTF::URLParser::syntaxViolation<char16_t>(v11, (uint64_t)v10);
LABEL_681:
        if ((v307 & 1) != 0)
        {
LABEL_682:
          if (v9 != 8)
            return 0;
          LODWORD(v226) = 1;
          goto LABEL_788;
        }
LABEL_770:
        v226 = v9 - v309;
        if (v9 == v309)
        {
LABEL_788:
          v161 = v309;
          goto LABEL_789;
        }
        if (v9 - 1 < 8)
        {
          v247 = HIWORD(__n);
          HIWORD(__n) = v167;
          *((_WORD *)&__src + v9 - 1) = v247;
          if (v226 == 1)
            goto LABEL_787;
          v248 = v309 - 1;
          if (v9 - 2 <= 7)
          {
            v249 = 2 * (v9 - 2);
            v250 = WORD2(__n);
            WORD2(__n) = *(_WORD *)((char *)&__src + v249);
            *(_WORD *)((char *)&__src + v249) = v250;
            if (v226 == 2)
              goto LABEL_787;
            v251 = v226 - 2 + v248;
            if (v251 <= 7)
            {
              v252 = 2 * v251;
              v253 = WORD1(__n);
              WORD1(__n) = *(_WORD *)((char *)&__src + v252);
              *(_WORD *)((char *)&__src + v252) = v253;
              if (v226 == 3)
                goto LABEL_787;
              v254 = v226 - 3 + v248;
              if (v254 <= 7)
              {
                v255 = 2 * v254;
                v256 = __n;
                LOWORD(__n) = *(_WORD *)((char *)&__src + v255);
                *(_WORD *)((char *)&__src + v255) = v256;
                if (v226 == 4)
                  goto LABEL_787;
                v257 = v226 - 4 + v248;
                if (v257 <= 7)
                {
                  v258 = 2 * v257;
                  v259 = HIWORD(__src);
                  HIWORD(__src) = *(_WORD *)((char *)&__src + v258);
                  *(_WORD *)((char *)&__src + v258) = v259;
                  if (v226 == 5)
                    goto LABEL_787;
                  v260 = v226 - 5 + v248;
                  if (v260 <= 7)
                  {
                    v261 = 2 * v260;
                    v262 = WORD2(__src);
                    WORD2(__src) = *(_WORD *)((char *)&__src + v261);
                    *(_WORD *)((char *)&__src + v261) = v262;
                    if (v226 == 6)
                      goto LABEL_787;
                    v263 = v226 - 6 + v248;
                    if (v263 <= 7)
                    {
                      v264 = 2 * v263;
                      v265 = WORD1(__src);
                      WORD1(__src) = *(_WORD *)((char *)&__src + v264);
                      *(_WORD *)((char *)&__src + v264) = v265;
                      if (v226 == 7
                        || (v266 = v226 - 7 + v248, v266 <= 7)
                        && (v267 = 2 * v266,
                            v268 = (__int16)__src,
                            LOWORD(__src) = *(_WORD *)((char *)&__src + v267),
                            *(_WORD *)((char *)&__src + v267) = v268,
                            v226 == 8))
                      {
LABEL_787:
                        LODWORD(v226) = 0;
                        goto LABEL_788;
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_880:
        __break(1u);
LABEL_881:
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v1, (WTF::AtomStringImpl *)v2, v3, v4, v5, v6, v7, v8);
        WTF::fastFree(v293, v294, v295, v296, v297, v298, v299, v300);
        goto LABEL_882;
      }
      ++v115;
      while (1)
      {
        v163 = *v115;
        if (v113 == 1)
        {
          v183 = *v115;
        }
        else
        {
          v183 = *v115;
          if ((v163 & 0xFC00) == v125)
          {
            v184 = v115[1];
            v123 = (v184 & 0xFC00) == 56320;
            v183 = (_DWORD)v114 + (v163 << 10) + v184;
            if (!v123)
              v183 = *v115;
          }
        }
        v185 = v183 - 14;
        v186 = v183 - 11;
        if (v185 < 0xFFFFFFFB || v186 < 2)
          break;
        WTF::URLParser::syntaxViolation<char16_t>(v11, (uint64_t)v10);
        if (v113 == 1)
        {
          v188 = 1;
        }
        else
        {
          v188 = 1;
          if ((*v115 & 0xFC00) == v125)
          {
            if ((v115[1] & 0xFC00) == 0xDC00)
              v188 = 2;
            else
              v188 = 1;
          }
        }
        v17 = v113 >= v188;
        v113 -= v188;
        if (!v17)
          goto LABEL_880;
        v115 += v188;
        if (!v113)
          goto LABEL_680;
      }
      v303 = 0;
      v218 = v163 != 58 || v125 == 0;
      v165 = v9;
      if (!v218)
        goto LABEL_654;
    }
  }
  v0 = v113 - 1;
  if (v113 == 1)
    return 0;
  v9 = (unint64_t)(v115 + 1);
  while (1)
  {
    LODWORD(v126) = *(unsigned __int16 *)v9;
    if (v0 == 1)
    {
      v127 = *(unsigned __int16 *)v9;
    }
    else
    {
      v127 = *(unsigned __int16 *)v9;
      if ((v126 & 0xFC00) == 0xD800)
      {
        v128 = *(unsigned __int16 *)(v9 + 2);
        v123 = (v128 & 0xFC00) == 56320;
        v127 = ((_DWORD)v126 << 10) - 56613888 + v128;
        if (!v123)
          v127 = *(unsigned __int16 *)v9;
      }
    }
    v129 = v127 - 14;
    v130 = v127 - 11;
    if (v129 < 0xFFFFFFFB || v130 < 2)
      break;
    WTF::URLParser::syntaxViolation<char16_t>(v11, (uint64_t)v10);
    if (v0 == 1)
    {
      v132 = 1;
    }
    else
    {
      v132 = 1;
      if ((*(_WORD *)v9 & 0xFC00) == 0xD800)
      {
        if ((*(_WORD *)(v9 + 2) & 0xFC00) == 0xDC00)
          v132 = 2;
        else
          v132 = 1;
      }
    }
    v17 = v0 >= v132;
    v0 -= v132;
    if (!v17)
      goto LABEL_880;
    v9 += 2 * v132;
    if (!v0)
      return 0;
  }
LABEL_685:
  if ((_DWORD)v126 != 58)
    return 0;
  v113 = v0 - 1;
  if (v0 == 1)
    goto LABEL_748;
  v115 = (unsigned __int16 *)(v9 + 2);
  v161 = 1;
  v0 = 55296;
  v9 = 56320;
  do
  {
    v227 = *v115;
    if (v113 != 1 && (v227 & 0xFC00) == 0xD800)
    {
      v228 = v115[1];
      v123 = (v228 & 0xFC00) == 56320;
      v229 = (_DWORD)v114 + (v227 << 10) + v228;
      if (v123)
        v227 = v229;
    }
    v230 = v227 - 14;
    v231 = v227 - 11;
    if (v230 < 0xFFFFFFFB || v231 < 2)
      goto LABEL_479;
    WTF::URLParser::syntaxViolation<char16_t>(v11, (uint64_t)v10);
    if (v113 == 1)
    {
      v233 = 1;
    }
    else
    {
      v233 = 1;
      if ((*v115 & 0xFC00) == 0xD800)
      {
        if ((v115[1] & 0xFC00) == 0xDC00)
          v233 = 2;
        else
          v233 = 1;
      }
    }
    v17 = v113 >= v233;
    v113 -= v233;
    if (!v17)
      goto LABEL_880;
    v115 += v233;
  }
  while (v113);
  LODWORD(v226) = 0;
LABEL_789:
  v269 = 0;
  v270 = 0;
  v271 = 0;
  v272 = 0;
  do
  {
    while (1)
    {
      v273 = v270;
      if (!*((_WORD *)&__src + v270))
      {
        v273 = v270 + 1;
        if (v270 != 7 && !*((_WORD *)&__src + v273))
        {
          v273 = v270 + 2;
          if (v270 != 6 && !*((_WORD *)&__src + v273))
          {
            v273 = v270 + 3;
            if (v270 != 5 && !*((_WORD *)&__src + v273))
            {
              v273 = v270 + 4;
              if (v270 != 4 && !*((_WORD *)&__src + v273))
              {
                v273 = v270 + 5;
                if (v270 != 3 && !*((_WORD *)&__src + v273))
                {
                  v273 = v270 + 6;
                  if (v270 != 2 && !*((_WORD *)&__src + v273))
                  {
                    v273 = v270 + 7;
                    if (v270 != 1 && !*((_WORD *)&__src + v273))
                      v273 = 8;
                  }
                }
              }
            }
          }
        }
      }
      v274 = v273 - v270;
      if (v273 != v270)
        break;
      if ((unint64_t)++v270 >= 8)
        goto LABEL_823;
    }
    if (v271)
      v275 = v269 >= v274;
    else
      v275 = 0;
    if (!v275)
    {
      v277 = v273 - v270;
    }
    else
    {
      LODWORD(v270) = v272;
      v277 = v269;
    }
    if (v274 != 1)
    {
      v272 = v270;
      v271 = 1;
      v269 = v277;
    }
    v270 = v273 + 1;
  }
  while ((unint64_t)(v273 + 1) < 8);
LABEL_823:
  if (v271)
  {
    if (v161 != v272 + 1)
      LODWORD(v226) = 1;
    if ((_DWORD)v226 == 1)
LABEL_827:
      WTF::URLParser::syntaxViolation<char16_t>(v11, (uint64_t)v10);
  }
  else if ((v226 & 1) == 0)
  {
    goto LABEL_827;
  }
  WTF::URLParser::serializeIPv6((WTF::URLParser *)v11, (unint64_t)__src, __n);
  WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>(v11, &v320);
  if (!*(_BYTE *)(v11 + 59))
  {
    *(_DWORD *)(v11 + 24) = ((_QWORD)v320 - *(_QWORD *)(v11 + 72)) >> 1;
    if (*((_QWORD *)&v320 + 1))
      goto LABEL_831;
LABEL_863:
    v9 = 2;
    goto LABEL_864;
  }
  *(_DWORD *)(v11 + 24) = *(_DWORD *)(v11 + 52);
  if (!*((_QWORD *)&v320 + 1))
    goto LABEL_863;
LABEL_831:
  v9 = 0;
  if (*(_WORD *)v320 == 58)
    return WTF::URLParser::parsePort<char16_t>(v11, (unsigned __int16 **)&v320);
LABEL_864:
  *(_DWORD *)(v11 + 8) &= 0xFFFFFFC7;
  return v9;
}

BOOL WTF::URLParser::shouldCopyFileURL<char16_t>(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  int v4;
  int v5;
  int v6;
  BOOL v7;
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;

  v31 = a2;
  v32 = a3;
  if (!a3)
    return 1;
  v4 = *a2;
  if (a3 == 1)
  {
    if ((v4 | 0x20u) - 97 > 0x19)
      return 1;
  }
  else
  {
    v5 = *a2;
    if ((v4 & 0xFC00) == 0xD800)
    {
      v6 = a2[1];
      v7 = (v6 & 0xFC00) == 56320;
      v5 = v6 + (v4 << 10) - 56613888;
      if (!v7)
        v5 = *a2;
    }
    if ((v5 | 0x20u) - 97 > 0x19)
      return 1;
  }
  v9 = 1;
  if (a3 != 1 && (v4 & 0xFC00) == 0xD800)
  {
    if ((a2[1] & 0xFC00) == 0xDC00)
      v9 = 2;
    else
      v9 = 1;
  }
  v10 = a3 - v9;
  if (a3 == v9)
    return 1;
  v11 = &a2[v9];
  while (1)
  {
    v12 = *v11;
    v13 = v12 & 0xFC00;
    v14 = (unsigned __int16)v12;
    if (v10 != 1 && v13 == 55296)
    {
      v15 = v11[1];
      v7 = (v15 & 0xFC00) == 56320;
      v14 = (v12 << 10) - 56613888 + v15;
      if (!v7)
        v14 = *v11;
    }
    v16 = v14 - 14;
    v17 = v14 - 11;
    if (v16 < 0xFFFFFFFB || v17 < 2)
      break;
    v19 = 1;
    if (v10 != 1 && v13 == 55296)
    {
      if ((v11[1] & 0xFC00) == 0xDC00)
        v19 = 2;
      else
        v19 = 1;
    }
    v11 += v19;
    v10 -= v19;
    if (!v10)
      return 1;
  }
  if (v13 == 55296 || v12 != 124 && v12 != 58)
    return 1;
  v20 = v10 - 1;
  if (!v20)
    goto LABEL_56;
  v21 = v11 + 1;
  while (1)
  {
    v22 = *v21;
    v23 = v22 & 0xFC00;
    v24 = (unsigned __int16)v22;
    if (v20 != 1 && v23 == 55296)
    {
      v25 = v21[1];
      v7 = (v25 & 0xFC00) == 56320;
      v24 = (v22 << 10) - 56613888 + v25;
      if (!v7)
        v24 = *v21;
    }
    v26 = v24 - 14;
    v27 = v24 - 11;
    if (v26 < 0xFFFFFFFB || v27 < 2)
      break;
    v29 = 1;
    if (v20 != 1 && v23 == 55296)
    {
      if ((v21[1] & 0xFC00) == 0xDC00)
        v29 = 2;
      else
        v29 = 1;
    }
    v21 += v29;
    v20 -= v29;
    if (!v20)
      goto LABEL_56;
  }
  result = 1;
  if (v23 != 55296
    && (v22 - 35) <= 0x39
    && ((1 << (v22 - 35)) & 0x200000010001001) != 0)
  {
LABEL_56:
    WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>(a1, &v31);
    if (v32)
    {
      WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>(a1, &v31);
      if (v32)
      {
        v30 = *v31;
        result = 1;
        if (v30 <= 0x5C && (v30 & 0xFC00) != 0xD800)
          return (WTF::characterClassTable[v30] & 0x20) == 0;
        return result;
      }
    }
    return 1;
  }
  return result;
}

BOOL WTF::URLParser::takesTwoAdvancesUntilEnd<char16_t>(_WORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  BOOL v13;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v26;

  if (!a2)
    return 0;
  v2 = 1;
  if (a2 != 1 && (*a1 & 0xFC00) == 0xD800)
  {
    if ((a1[1] & 0xFC00) == 0xDC00)
      v2 = 2;
    else
      v2 = 1;
  }
  v3 = a2 - v2;
  if (a2 == v2)
    return 0;
  v4 = &a1[v2];
  while (1)
  {
    v6 = *v4;
    v7 = v6 & 0xFC00;
    if (v3 != 1 && v7 == 55296)
    {
      v8 = v4[1];
      v12 = (v8 & 0xFC00) == 56320;
      v9 = (v6 << 10) - 56613888 + v8;
      if (v12)
        v6 = v9;
    }
    v10 = v6 - 14;
    v11 = v6 - 11;
    v12 = v3 != 1 && v7 == 55296;
    v13 = !v12;
    if (v10 < 0xFFFFFFFB || v11 < 2)
      break;
    if (v13)
    {
      ++v4;
      if (!--v3)
        return 0;
    }
    else
    {
      if ((v4[1] & 0xFC00) == 0xDC00)
        v5 = 2;
      else
        v5 = 1;
      v4 += v5;
      v3 -= v5;
      if (!v3)
        return 0;
    }
  }
  if (!v13)
  {
    if ((v4[1] & 0xFC00) == 0xDC00)
      v16 = 2;
    else
      v16 = 1;
    v17 = v3 - v16;
    if (!v17)
      return v17 == 0;
LABEL_39:
    v18 = &v4[v16];
    while (1)
    {
      v20 = *v18;
      if (v17 == 1)
      {
        if ((v20 - 14) < 0xFFFFFFFB || (v20 - 11) < 2)
          return v17 == 0;
      }
      else
      {
        v21 = *v18;
        if ((v20 & 0xFC00) == 0xD800)
        {
          v22 = v18[1];
          v12 = (v22 & 0xFC00) == 56320;
          v21 = (v20 << 10) - 56613888 + v22;
          if (!v12)
            v21 = *v18;
        }
        v23 = v21 - 14;
        v24 = v21 - 11;
        if (v23 < 0xFFFFFFFB || v24 < 2)
          return v17 == 0;
      }
      if (v17 == 1)
      {
        v19 = 1;
      }
      else
      {
        v26 = v20 & 0xFC00;
        v19 = 1;
        if (v26 == 55296)
        {
          if ((v18[1] & 0xFC00) == 0xDC00)
            v19 = 2;
          else
            v19 = 1;
        }
      }
      v18 += v19;
      v17 -= v19;
      if (!v17)
        return v17 == 0;
    }
  }
  v16 = 1;
  v17 = v3 - 1;
  if (v17)
    goto LABEL_39;
  return v17 == 0;
}

void WTF::URLParser::consumeDoubleDotPathSegment<char16_t>(uint64_t a1, unsigned __int16 **a2)
{
  int v4;

  if (a2[1])
  {
    v4 = **a2;
    WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>(a1, a2);
    if (v4 != 46)
    {
      WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>(a1, a2);
      WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>(a1, a2);
    }
    WTF::URLParser::consumeSingleDotPathSegment<char16_t>(a1, a2);
  }
  else
  {
    __break(1u);
  }
}

void WTF::URLParser::consumeSingleDotPathSegment<char16_t>(uint64_t a1, unsigned __int16 **a2)
{
  int v4;
  int v5;
  int v6;

  if (!a2[1])
  {
    __break(1u);
    return;
  }
  v4 = **a2;
  WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>(a1, a2);
  if (v4 != 46)
  {
    WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>(a1, a2);
    WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>(a1, a2);
    if (!a2[1])
      return;
    v5 = **a2;
    if ((v5 & 0xFC00) == 0xD800 || v5 != 92 && v5 != 47)
      return;
LABEL_12:
    WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>(a1, a2);
    return;
  }
  if (a2[1])
  {
    v6 = **a2;
    if ((v6 & 0xFC00) != 0xD800 && (v6 == 47 || v6 == 92))
      goto LABEL_12;
  }
}

void WTF::URLParser::encodeNonUTF8Query<char16_t>(uint64_t a1, uint64_t a2, unsigned int a3, void (***a4)(WTF **__return_ptr, _QWORD, uint64_t, _QWORD), unsigned __int16 *a5, uint64_t a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  WTF *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  WTF *v35;
  int v36;
  unsigned int v37;
  int v38;

  (**a4)(&v35, a4, a2, a3);
  v16 = v37;
  if ((a6 == 0) != (v37 == 0))
  {
    WTF::URLParser::syntaxViolation<char16_t>(a1, (uint64_t)a5);
  }
  else
  {
    v17 = v35;
    v18 = v37;
    if (v37)
    {
      v18 = 0;
      v19 = a1 + 40;
      while (1)
      {
        if (!a6)
        {
          __break(1u);
          return;
        }
        v21 = *a5;
        if (a6 != 1 && (v21 & 0xFC00) == 0xD800)
        {
          v22 = a5[1];
          v23 = v22 & 0xFC00;
          v24 = v22 + (v21 << 10) - 56613888;
          if (v23 == 56320)
            v21 = v24;
        }
        v25 = *((unsigned __int8 *)v17 + v18);
        if (v21 != (_DWORD)v25 || (WTF::characterClassTable[v25] & 0x10) != 0)
          break;
        if ((_DWORD)v25 == 39 && *(_BYTE *)(a1 + 56) != 0)
          break;
        v38 = *((unsigned __int8 *)v17 + v18);
        if (*(_BYTE *)(a1 + 59))
        {
          v27 = *(unsigned int *)(a1 + 52);
          if ((_DWORD)v27 == *(_DWORD *)(a1 + 48))
          {
            v34 = v19;
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(v19, &v38);
            v19 = v34;
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)(a1 + 40) + v27) = v25;
            ++*(_DWORD *)(a1 + 52);
          }
        }
        if (a6 == 1)
        {
          v20 = 1;
        }
        else
        {
          v20 = 1;
          if ((*a5 & 0xFC00) == 0xD800)
          {
            if ((a5[1] & 0xFC00) == 0xDC00)
              v20 = 2;
            else
              v20 = 1;
          }
        }
        a6 -= v20;
        a5 += v20;
        if (v16 == ++v18)
        {
          v18 = v16;
          goto LABEL_29;
        }
      }
      WTF::URLParser::syntaxViolation<char16_t>(a1, (uint64_t)a5);
      v28 = v16 - v18;
      if (v16 > v18)
        goto LABEL_30;
    }
    else
    {
LABEL_29:
      v28 = v16 - v18;
      if (v16 > v18)
      {
LABEL_30:
        v29 = (unsigned __int8 *)v17 + v18;
        do
        {
          v30 = *v29++;
          v9 = v30;
          if ((WTF::characterClassTable[v30] & 0x10) == 0
            && ((_DWORD)v9 == 39 ? (v31 = *(_BYTE *)(a1 + 56) == 0) : (v31 = 1), v31))
          {
            v38 = v9;
            if (*(_BYTE *)(a1 + 59))
            {
              v32 = *(unsigned int *)(a1 + 52);
              if ((_DWORD)v32 == *(_DWORD *)(a1 + 48))
              {
                WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(a1 + 40, &v38);
              }
              else
              {
                *(_BYTE *)(*(_QWORD *)(a1 + 40) + v32) = v9;
                ++*(_DWORD *)(a1 + 52);
              }
            }
          }
          else
          {
            WTF::URLParser::percentEncodeByte((WTF::URLParser *)a1, v9);
          }
          --v28;
        }
        while (v28);
      }
    }
  }
  v33 = v35;
  if (v35)
  {
    v35 = 0;
    v36 = 0;
    WTF::fastFree((unint64_t)v33, (void *)v9, v10, v11, v12, v13, v14, v15);
  }
}

uint64_t WTF::URLParser::parsePort<char16_t>(uint64_t a1, unsigned __int16 **a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v5;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unsigned int v20;
  unsigned int v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v28;
  BOOL v29;
  _BOOL8 v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  _DWORD v43[3];

  if (*(_BYTE *)(a1 + 57))
    return 0;
  v5 = a2[1];
  if (!v5)
    goto LABEL_84;
  v2 = a1;
  v3 = *a2;
  if (v5 == (unsigned __int16 *)1 || (**a2 & 0xFC00) != 55296)
  {
    v7 = (unsigned __int16 *)((char *)v5 - 1);
    v8 = v3 + 1;
    *a2 = v3 + 1;
    a2[1] = v7;
    if (v7)
      goto LABEL_15;
LABEL_30:
    if (*(_BYTE *)(v2 + 59))
    {
      v20 = *(_DWORD *)(v2 + 52) - *(_DWORD *)(v2 + 24);
      if (v20 < 8)
        goto LABEL_32;
    }
    else
    {
      v20 = (((unint64_t)v3 - *(_QWORD *)(v2 + 72)) >> 1) - *(_DWORD *)(v2 + 24);
      if (v20 < 8)
      {
LABEL_32:
        *(_DWORD *)(v2 + 8) = *(_DWORD *)(v2 + 8) & 0xFFFFFFC7 | (8 * (v20 & 7));
        WTF::URLParser::syntaxViolation<char16_t>(v2, (uint64_t)v3);
        return 1;
      }
    }
    __break(0xC471u);
    goto LABEL_97;
  }
  v9 = 1;
  if ((v3[1] & 0xFC00) == 0xDC00)
    v9 = 2;
  v7 = (unsigned __int16 *)((char *)v5 - v9);
  v8 = &v3[v9];
  *a2 = v8;
  a2[1] = v7;
  if (!v7)
    goto LABEL_30;
  while (1)
  {
LABEL_15:
    v11 = *v8;
    if (v7 != (unsigned __int16 *)1 && (v11 & 0xFC00) == 0xD800)
    {
      v12 = v8[1];
      v13 = v12 & 0xFC00;
      v14 = v12 + (v11 << 10) - 56613888;
      if (v13 == 56320)
        v11 = v14;
    }
    v15 = v11 - 14;
    v16 = v11 - 11;
    if (v15 < 0xFFFFFFFB || v16 <= 1)
      break;
    WTF::URLParser::syntaxViolation<char16_t>(v2, (uint64_t)v3);
    v18 = a2[1];
    if (!v18)
      goto LABEL_84;
    v19 = *a2;
    if (v18 == (unsigned __int16 *)1)
    {
      v10 = 1;
    }
    else
    {
      v10 = 1;
      if ((*v19 & 0xFC00) == 0xD800)
      {
        if ((v19[1] & 0xFC00) == 0xDC00)
          v10 = 2;
        else
          v10 = 1;
      }
    }
    v7 = (unsigned __int16 *)((char *)v18 - v10);
    v8 = &v19[v10];
    *a2 = v8;
    a2[1] = v7;
    if (!v7)
      goto LABEL_30;
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  do
  {
    if ((*v8 & 0xFC00) == 0xD800)
      return 0;
    v26 = *v8;
    if ((v26 - 14) >= 0xFFFFFFFB && (v26 - 11) > 1)
    {
      WTF::URLParser::syntaxViolation<char16_t>(v2, (uint64_t)v3);
      v7 = a2[1];
      if (!v7)
        goto LABEL_84;
      v8 = *a2;
      if (v7 == (unsigned __int16 *)1)
        goto LABEL_34;
    }
    else
    {
      if ((v26 - 48) > 9)
        return 0;
      v28 = v26 == 48 && v24 == 0;
      v29 = v28;
      v22 = v26 + 10 * v22 - 48;
      if (HIWORD(v22))
        return 0;
      v23 |= v29;
      ++v24;
      if (v7 == (unsigned __int16 *)1)
      {
LABEL_34:
        v25 = 1;
        goto LABEL_35;
      }
    }
    v25 = 1;
    if ((*v8 & 0xFC00) == 0xD800)
    {
      if ((v8[1] & 0xFC00) == 0xDC00)
        v25 = 2;
      else
        v25 = 1;
    }
LABEL_35:
    v7 = (unsigned __int16 *)((char *)v7 - v25);
    v8 += v25;
    *a2 = v8;
    a2[1] = v7;
  }
  while (v7);
  v30 = v24 > 1;
  if (v22)
    LOBYTE(v30) = v23;
  if (v30)
    WTF::URLParser::syntaxViolation<char16_t>(v2, (uint64_t)v3);
  v31 = (unint64_t)*(unsigned int *)(v2 + 8) >> 6;
  v32 = *(unsigned __int8 *)(v2 + 59);
  if (*(_BYTE *)(v2 + 59))
  {
    if (*(_DWORD *)(v2 + 52) >= v31)
    {
      v35 = WTF::URLParser::defaultPortForProtocol(*(unsigned __int8 **)(v2 + 40), v31 | 0x100000000);
      if (v35 < 0x10000)
        goto LABEL_72;
      goto LABEL_71;
    }
LABEL_84:
    __break(1u);
LABEL_85:
    WTF::URLParser::syntaxViolation<char16_t>(v2, (uint64_t)v3);
    goto LABEL_76;
  }
  v33 = *(_QWORD *)(v2 + 64);
  if (!v33 || (v34 = *(_DWORD *)(v33 + 4)) == 0)
  {
    v35 = WTF::URLParser::defaultPortForProtocol("", 0x100000000);
    if (v35 < 0x10000)
      goto LABEL_72;
LABEL_71:
    if ((unsigned __int16)v35 != (unsigned __int16)v22)
      goto LABEL_72;
    goto LABEL_85;
  }
  if (v31 >= v34)
    v31 = v34;
  else
    v31 = v31;
  v35 = WTF::URLParser::defaultPortForProtocol(*(unsigned __int8 **)(v33 + 8), v31 | ((unint64_t)((*(_DWORD *)(v33 + 16) >> 2) & 1) << 32));
  if (v35 >= 0x10000)
    goto LABEL_71;
LABEL_72:
  v43[0] = 58;
  if (v32)
  {
    v39 = *(unsigned int *)(v2 + 52);
    if ((_DWORD)v39 == *(_DWORD *)(v2 + 48))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(v2 + 40, v43);
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(v2 + 40) + v39) = 58;
      ++*(_DWORD *)(v2 + 52);
    }
  }
  v36 = 0;
  do
  {
    v37 = (unsigned __int16)v22;
    *((_BYTE *)&v43[2] + v36-- + 3) = ((unsigned __int16)v22 % 0xAu) | 0x30;
    LOWORD(v22) = (unsigned __int16)v22 / 0xAu;
  }
  while (v37 > 9);
  if (*(_BYTE *)(v2 + 59) && v36)
  {
    v40 = (char *)&v43[3] + v36;
    v41 = *(unsigned int *)(v2 + 52);
    v42 = v41;
    if (v41 - v36 > *(unsigned int *)(v2 + 48))
    {
      v40 = (char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(v2 + 40, (WTF *)(v41 - v36), (uint64_t)&v43[3] + v36);
      v42 = *(unsigned int *)(v2 + 52);
    }
    if (v41 - v36 >= v42)
    {
      memcpy((void *)(*(_QWORD *)(v2 + 40) + v42), v40, -v36);
      *(_DWORD *)(v2 + 52) = v41 - v36;
      goto LABEL_76;
    }
    __break(0xC471u);
LABEL_97:
    JUMPOUT(0x197B532F4);
  }
LABEL_76:
  if (!*(_BYTE *)(v2 + 59))
  {
    v38 = (((unint64_t)*a2 - *(_QWORD *)(v2 + 72)) >> 1) - *(_DWORD *)(v2 + 24);
    if (v38 < 8)
      goto LABEL_78;
LABEL_87:
    __break(0xC471u);
    JUMPOUT(0x197B53360);
  }
  v38 = *(_DWORD *)(v2 + 52) - *(_DWORD *)(v2 + 24);
  if (v38 >= 8)
    goto LABEL_87;
LABEL_78:
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(v2 + 8) & 0xFFFFFFC7 | (8 * (v38 & 7));
  return 1;
}

void WTF::URLParser::percentDecode<char16_t>(uint64_t a1, uint64_t a2, uint64_t a3, WTF *this, uint64_t *a5)
{
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  char v31;
  char v32;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 2048;
  if ((unint64_t)this >= 0x801)
  {
    if ((unint64_t)this >> 32)
    {
      __break(0xC471u);
      return;
    }
    v10 = WTF::fastMalloc(this);
    *(_DWORD *)(a1 + 8) = (_DWORD)this;
    *(_QWORD *)a1 = v10;
    goto LABEL_6;
  }
  if (this)
  {
LABEL_6:
    v11 = 0;
    do
    {
      while (1)
      {
        v32 = *(_BYTE *)(a3 + v11);
        if (v32 == 37)
          break;
        v28 = *(unsigned int *)(a1 + 12);
        if ((_DWORD)v28 != *(_DWORD *)(a1 + 8))
        {
          *(_BYTE *)(*(_QWORD *)a1 + v28) = v32;
          goto LABEL_33;
        }
        v29 = (WTF *)(v28 + 1);
LABEL_30:
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *WTF::Vector<unsigned char,2048ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, v29, (unint64_t)&v32);
LABEL_33:
        ++*(_DWORD *)(a1 + 12);
        if (++v11 >= (unint64_t)this)
          return;
      }
      if ((unint64_t)this < 3 || v11 >= (unint64_t)this - 2)
        goto LABEL_28;
      v12 = *(unsigned __int8 *)(a3 + v11 + 1);
      v13 = v12 - 48;
      v14 = (v12 | 0x20) - 97;
      v15 = v13 >= 0xA && v14 > 5;
      if (v15
        || ((v16 = v11 + 2, v17 = *(unsigned __int8 *)(a3 + v11 + 2),
                            v18 = v17 - 48,
                            v19 = (v17 | 0x20) - 97,
                            v18 >= 0xA)
          ? (v20 = v19 > 5)
          : (v20 = 0),
            v20))
      {
LABEL_28:
        v30 = *(unsigned int *)(a1 + 12);
        if ((_DWORD)v30 != *(_DWORD *)(a1 + 8))
        {
          *(_BYTE *)(*(_QWORD *)a1 + v30) = 37;
          goto LABEL_33;
        }
        v29 = (WTF *)(v30 + 1);
        goto LABEL_30;
      }
      WTF::URLParser::syntaxViolation<char16_t>(a2, *a5);
      v21 = *(unsigned __int8 *)(a3 + v11 + 1);
      v22 = *(unsigned __int8 *)(a3 + v16);
      if (v21 >= 0x41)
        v23 = 9;
      else
        v23 = 0;
      v24 = v23 + v21;
      if (v22 >= 0x41)
        v25 = (v22 + 9) & 0xF;
      else
        v25 = v22 - 48;
      v26 = v25 | (16 * v24);
      v31 = v26;
      v27 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v27 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *WTF::Vector<unsigned char,2048ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, (WTF *)(v27 + 1), (unint64_t)&v31);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v27) = v26;
      ++*(_DWORD *)(a1 + 12);
      v11 += 3;
    }
    while (v16 + 1 < (unint64_t)this);
  }
}

void WTF::URLParser::domainToASCII<char16_t>()
{
  uint64_t v0;
  WTF::StringImpl *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  WTF *v10;
  BOOL v12;
  unint64_t v13;
  int8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t v17;
  unint64_t v18;
  unint64_t v19;
  WTF *v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint16x4_t *v28;
  unsigned __int8 v29;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t *v36;
  uint64_t v37;
  int8x16_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int16 *v41;
  uint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  uint16x4_t *v45;
  unint64_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  uint16x8_t v53;
  uint32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  uint32x4_t v58;
  int8x16_t v59;
  int8x16_t v60;
  uint32x4_t v61;
  int8x16_t v62;
  int8x16_t v63;
  uint32x4_t v64;
  int8x16_t v65;
  int8x16_t v66;
  unsigned int v67;
  uint64_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t *v71;
  uint64_t v72;
  int8x16_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned __int8 *v76;
  unint64_t v77;
  int8x16_t v78;
  int8x16_t v79;
  uint8x8_t *v80;
  unint64_t v81;
  int8x16_t v82;
  int8x16_t v83;
  uint8x8_t v84;
  uint16x8_t v85;
  uint32x4_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  uint32x4_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  unint64_t v95;
  uint8x16_t *v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  uint8x16_t v103;
  uint16x8_t v104;
  uint32x4_t v105;
  int8x16_t v106;
  int8x16_t v107;
  uint16x8_t v108;
  uint32x4_t v109;
  int8x16_t v110;
  int8x16_t v111;
  uint32x4_t v112;
  int8x16_t v113;
  uint32x4_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  unsigned int v119;
  unint64_t v120;
  const UIDNA *v121;
  int v122;
  unint64_t v123;
  WTF *v124;
  unint64_t v125;
  unint64_t v126;
  WTF *v127;
  WTF *v128;
  __int128 v129;
  char *v130;
  int8x16_t v131;
  __int128 v132;
  __int128 v133;
  char *v134;
  char *v135;
  char *v136;
  WTF *v137;
  unint64_t v138;
  unint64_t v139;
  WTF *v140;
  WTF *v141;
  __int16 v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int32_t v150;
  WTF *v151;
  WTF *v153;
  uint64_t v154;
  size_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  WTF *v160;
  WTF *v161;
  uint64_t v162;
  unint64_t v163;
  int v164;
  unsigned int v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  WTF *v174;
  char *v175;
  unint64_t v176;
  UChar *v177;
  unint64_t v178;
  unint64_t v179;
  uint8x8_t *v180;
  uint16x8_t *v181;
  unint64_t v182;
  uint8x16_t v183;
  uint16x8_t v184;
  uint16x8_t v185;
  uint8x8_t *v186;
  uint16x8_t *v187;
  unint64_t v188;
  uint8x8_t v189;
  int8x16_t *v190;
  int8x16_t *v191;
  unint64_t v192;
  int8x16_t v193;
  int8x16_t v194;
  int8x16_t v195;
  int8x16_t v196;
  int8x8_t *v197;
  unint64_t v198;
  UChar *v199;
  int16x8_t v200;
  char v201;
  int v202;
  int v203;
  unsigned __int16 v204;
  WTF *v205;
  unint64_t v206;
  _BYTE v207[64];
  WTF *v208;
  unint64_t v209;
  UIDNAInfo pInfo;
  UErrorCode pErrorCode;
  WTF *v212;
  size_t __n;
  _BYTE v214[2055];
  char v215;
  WTF **v216;
  UChar dest[16];
  _QWORD v218[510];
  int8x16x2_t v219;
  int8x16x2_t v220;
  int8x16x2_t v221;

  v0 = MEMORY[0x1E0C80A78]();
  v4 = v3;
  v5 = v2;
  v6 = (uint64_t)v1;
  v7 = v0;
  v218[508] = *MEMORY[0x1E0C80C00];
  v212 = (WTF *)v214;
  __n = 2048;
  v8 = *(_DWORD *)(v2 + 16);
  v9 = *(_QWORD *)(v2 + 8);
  v10 = (WTF *)*(unsigned int *)(v2 + 4);
  v12 = (v9 & 7) == 0 || v10 == 0;
  if ((v8 & 4) == 0)
  {
    v13 = v9 + 2 * (_QWORD)v10;
    if (v12)
    {
      v14 = 0;
      v15 = *(_QWORD *)(v2 + 8);
    }
    else
    {
      v14 = 0;
      v21 = 2 * (_QWORD)v10 - 2;
      v22 = v9 + 2;
      v15 = *(_QWORD *)(v2 + 8);
      do
      {
        v23 = *(unsigned __int16 *)v15;
        v15 += 2;
        *(_QWORD *)&v14 |= v23;
        if ((v22 & 7) == 0)
          break;
        v24 = v21;
        v21 -= 2;
        v22 += 2;
      }
      while (v24);
    }
    v25 = v13 & 0xFFFFFFFFFFFFFFF8;
    if (v15 >= (v13 & 0xFFFFFFFFFFFFFFF8))
    {
      v28 = (uint16x4_t *)v15;
      goto LABEL_36;
    }
    v26 = v15 + 8;
    if (v25 > v15 + 8)
      v26 = v13 & 0xFFFFFFFFFFFFFFF8;
    v27 = v26 + ~v15;
    if (v27 >= 0x18)
    {
      v33 = (v27 >> 3) + 1;
      v28 = (uint16x4_t *)(v15 + 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL));
      v34 = 0uLL;
      v35 = (int8x16_t)(unint64_t)v14;
      v36 = (int8x16_t *)(v15 + 16);
      v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v35 = vorrq_s8(v36[-1], v35);
        v34 = vorrq_s8(*v36, v34);
        v36 += 2;
        v37 -= 4;
      }
      while (v37);
      v38 = vorrq_s8(v34, v35);
      v14 = vorr_s8(*(int8x8_t *)v38.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
      if (v33 == (v33 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_36:
        if (v28 == (uint16x4_t *)v13)
          goto LABEL_43;
        v40 = v9 + 2 * (_QWORD)v10 - (_QWORD)v28 - 2;
        if (v40 >= 0x1E)
        {
          v42 = (v40 >> 1) + 1;
          v43 = 0uLL;
          v44 = (int8x16_t)(unint64_t)v14;
          v41 = (unsigned __int16 *)v28 + (v42 & 0xFFFFFFFFFFFFFFF0);
          v45 = v28 + 2;
          v46 = v42 & 0xFFFFFFFFFFFFFFF0;
          v47 = 0uLL;
          v48 = 0uLL;
          v49 = 0uLL;
          v50 = 0uLL;
          v51 = 0uLL;
          v52 = 0uLL;
          do
          {
            v53 = *(uint16x8_t *)v45[-2].i8;
            v54 = vmovl_u16(*(uint16x4_t *)v53.i8);
            v55.i64[0] = v54.u32[0];
            v55.i64[1] = v54.u32[1];
            v56 = v55;
            v55.i64[0] = v54.u32[2];
            v55.i64[1] = v54.u32[3];
            v57 = v55;
            v58 = vmovl_high_u16(v53);
            v55.i64[0] = v58.u32[0];
            v55.i64[1] = v58.u32[1];
            v59 = v55;
            v55.i64[0] = v58.u32[2];
            v55.i64[1] = v58.u32[3];
            v60 = v55;
            v61 = vmovl_u16(*v45);
            v55.i64[0] = v61.u32[0];
            v55.i64[1] = v61.u32[1];
            v62 = v55;
            v55.i64[0] = v61.u32[2];
            v55.i64[1] = v61.u32[3];
            v63 = v55;
            v64 = vmovl_high_u16(*(uint16x8_t *)v45->i8);
            v55.i64[0] = v64.u32[0];
            v55.i64[1] = v64.u32[1];
            v65 = v55;
            v55.i64[0] = v64.u32[2];
            v55.i64[1] = v64.u32[3];
            v48 = vorrq_s8(v48, v60);
            v47 = vorrq_s8(v47, v59);
            v43 = vorrq_s8(v43, v57);
            v44 = vorrq_s8(v44, v56);
            v52 = vorrq_s8(v52, v55);
            v51 = vorrq_s8(v51, v65);
            v50 = vorrq_s8(v50, v63);
            v49 = vorrq_s8(v49, v62);
            v45 += 4;
            v46 -= 16;
          }
          while (v46);
          v66 = vorrq_s8(vorrq_s8(vorrq_s8(v49, v44), vorrq_s8(v51, v47)), vorrq_s8(vorrq_s8(v50, v43), vorrq_s8(v52, v48)));
          v14 = vorr_s8(*(int8x8_t *)v66.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL));
          if (v42 == (v42 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_43:
            if ((*(_QWORD *)&v14 & 0xFF80FF80FF80FF80) != 0)
              goto LABEL_79;
            goto LABEL_78;
          }
        }
        else
        {
          v41 = (unsigned __int16 *)v28;
        }
        do
        {
          v67 = *v41++;
          *(_QWORD *)&v14 |= v67;
        }
        while (v41 != (unsigned __int16 *)v13);
        goto LABEL_43;
      }
    }
    else
    {
      v28 = (uint16x4_t *)v15;
    }
    do
    {
      v39 = (uint64_t)*v28++;
      *(_QWORD *)&v14 |= v39;
    }
    while ((unint64_t)v28 < v25);
    goto LABEL_36;
  }
  v16 = (unint64_t)v10 + v9;
  if (v12)
  {
    v17 = 0;
    v18 = *(_QWORD *)(v2 + 8);
    v19 = v16 & 0xFFFFFFFFFFFFFFF8;
    if (v9 >= (v16 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_12:
      v20 = (WTF *)v18;
      goto LABEL_62;
    }
  }
  else
  {
    v18 = v9 + 1;
    v29 = *(_BYTE *)v9;
    if (((v9 + 1) & 7) != 0 && (_DWORD)v10 != 1)
    {
      v29 |= *(_BYTE *)(v9 + 1);
      v18 = v9 + 2;
      if (((v9 + 2) & 7) != 0 && (_DWORD)v10 != 2)
      {
        v29 |= *(_BYTE *)(v9 + 2);
        v18 = v9 + 3;
        if (((v9 + 3) & 7) != 0 && (_DWORD)v10 != 3)
        {
          v29 |= *(_BYTE *)(v9 + 3);
          v18 = v9 + 4;
          if (((v9 + 4) & 7) != 0 && (_DWORD)v10 != 4)
          {
            v29 |= *(_BYTE *)(v9 + 4);
            v18 = v9 + 5;
            if (((v9 + 5) & 7) != 0 && (_DWORD)v10 != 5)
            {
              v29 |= *(_BYTE *)(v9 + 5);
              v18 = v9 + 6;
              if (((v9 + 6) & 7) != 0 && (_DWORD)v10 != 6)
              {
                v29 |= *(_BYTE *)(v9 + 6);
                v18 = v9 + 7;
                if (((v9 + 7) & 7) != 0 && (_DWORD)v10 != 7)
                {
                  v29 |= *(_BYTE *)(v9 + 7);
                  v18 = v9 + 8;
                }
              }
            }
          }
        }
      }
    }
    v17 = (int8x8_t)v29;
    v19 = v16 & 0xFFFFFFFFFFFFFFF8;
    if (v18 >= (v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_12;
  }
  v31 = v18 + 8;
  if (v19 > v18 + 8)
    v31 = v19;
  v32 = v31 + ~v18;
  if (v32 < 0x18)
  {
    v20 = (WTF *)v18;
    do
    {
LABEL_61:
      v74 = *(_QWORD *)v20;
      v20 = (WTF *)((char *)v20 + 8);
      *(_QWORD *)&v17 |= v74;
    }
    while ((unint64_t)v20 < v19);
    goto LABEL_62;
  }
  v68 = (v32 >> 3) + 1;
  v20 = (WTF *)(v18 + 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL));
  v69 = 0uLL;
  v70 = (int8x16_t)(unint64_t)v17;
  v71 = (int8x16_t *)(v18 + 16);
  v72 = v68 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v70 = vorrq_s8(v71[-1], v70);
    v69 = vorrq_s8(*v71, v69);
    v71 += 2;
    v72 -= 4;
  }
  while (v72);
  v73 = vorrq_s8(v69, v70);
  v17 = vorr_s8(*(int8x8_t *)v73.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL));
  if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_61;
LABEL_62:
  if (v20 == (WTF *)v16)
    goto LABEL_77;
  v75 = (WTF *)((char *)v10 + v9) - v20;
  if (v75 < 8)
  {
    v76 = (unsigned __int8 *)v20;
    goto LABEL_76;
  }
  if (v75 >= 0x10)
  {
    v77 = v75 & 0xFFFFFFFFFFFFFFF0;
    v93 = 0uLL;
    v94 = (int8x16_t)(unint64_t)v17;
    v95 = v75 & 0xFFFFFFFFFFFFFFF0;
    v96 = (uint8x16_t *)v20;
    v97 = 0uLL;
    v98 = 0uLL;
    v99 = 0uLL;
    v100 = 0uLL;
    v101 = 0uLL;
    v102 = 0uLL;
    do
    {
      v103 = *v96++;
      v104 = vmovl_u8(*(uint8x8_t *)v103.i8);
      v105 = vmovl_u16(*(uint16x4_t *)v104.i8);
      v106.i64[0] = v105.u32[0];
      v106.i64[1] = v105.u32[1];
      v107 = v106;
      v108 = vmovl_high_u8(v103);
      v109 = vmovl_high_u16(v108);
      v106.i64[0] = v109.u32[2];
      v106.i64[1] = v109.u32[3];
      v110 = v106;
      v106.i64[0] = v105.u32[2];
      v106.i64[1] = v105.u32[3];
      v111 = v106;
      v112 = vmovl_high_u16(v104);
      v106.i64[0] = v112.u32[0];
      v106.i64[1] = v112.u32[1];
      v113 = v106;
      v114 = vmovl_u16(*(uint16x4_t *)v108.i8);
      v106.i64[0] = v114.u32[0];
      v106.i64[1] = v114.u32[1];
      v115 = v106;
      v106.i64[0] = v109.u32[0];
      v106.i64[1] = v109.u32[1];
      v116 = v106;
      v106.i64[0] = v112.u32[2];
      v106.i64[1] = v112.u32[3];
      v117 = v106;
      v106.i64[0] = v114.u32[2];
      v106.i64[1] = v114.u32[3];
      v100 = vorrq_s8(v100, v106);
      v98 = vorrq_s8(v98, v117);
      v101 = vorrq_s8(v101, v116);
      v99 = vorrq_s8(v99, v115);
      v97 = vorrq_s8(v97, v113);
      v93 = vorrq_s8(v93, v111);
      v102 = vorrq_s8(v102, v110);
      v94 = vorrq_s8(v94, v107);
      v95 -= 16;
    }
    while (v95);
    v118 = vorrq_s8(vorrq_s8(vorrq_s8(v94, v99), vorrq_s8(v97, v101)), vorrq_s8(vorrq_s8(v93, v100), vorrq_s8(v98, v102)));
    v17 = vorr_s8(*(int8x8_t *)v118.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL));
    if (v75 == v77)
      goto LABEL_77;
    if ((v75 & 8) == 0)
    {
      v76 = (unsigned __int8 *)v20 + v77;
      do
      {
LABEL_76:
        v119 = *v76++;
        *(_QWORD *)&v17 |= v119;
      }
      while (v76 != (unsigned __int8 *)v16);
      goto LABEL_77;
    }
  }
  else
  {
    v77 = 0;
  }
  v76 = (unsigned __int8 *)v20 + (v75 & 0xFFFFFFFFFFFFFFF8);
  v78 = 0uLL;
  v79 = (int8x16_t)(unint64_t)v17;
  v80 = (uint8x8_t *)((char *)v20 + v77);
  v81 = v77 - (v75 & 0xFFFFFFFFFFFFFFF8);
  v82 = 0uLL;
  v83 = 0uLL;
  do
  {
    v84 = *v80++;
    v85 = vmovl_u8(v84);
    v86 = vmovl_u16(*(uint16x4_t *)v85.i8);
    v87.i64[0] = v86.u32[0];
    v87.i64[1] = v86.u32[1];
    v88 = v87;
    v87.i64[0] = v86.u32[2];
    v87.i64[1] = v86.u32[3];
    v89 = v87;
    v90 = vmovl_high_u16(v85);
    v87.i64[0] = v90.u32[0];
    v87.i64[1] = v90.u32[1];
    v91 = v87;
    v87.i64[0] = v90.u32[2];
    v87.i64[1] = v90.u32[3];
    v83 = vorrq_s8(v83, v87);
    v82 = vorrq_s8(v82, v91);
    v78 = vorrq_s8(v78, v89);
    v79 = vorrq_s8(v79, v88);
    v81 += 8;
  }
  while (v81);
  v92 = vorrq_s8(vorrq_s8(v79, v82), vorrq_s8(v78, v83));
  v17 = vorr_s8(*(int8x8_t *)v92.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL));
  if (v75 != (v75 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_76;
LABEL_77:
  if ((*(_QWORD *)&v17 & 0x8080808080808080) != 0)
    goto LABEL_79;
LABEL_78:
  if ((WTF::URLParser::subdomainStartsWithXNDashDash((unsigned __int16 **)v2, v1) & 1) == 0)
  {
    if ((v8 & 4) == 0)
    {
      if (v10 >= 0x801)
      {
        LODWORD(__n) = (_DWORD)v10;
        v212 = (WTF *)WTF::fastMalloc(v10);
        goto LABEL_176;
      }
      if ((_DWORD)v10)
      {
        do
        {
LABEL_176:
          v203 = *(unsigned __int16 *)v9;
          v204 = v203 - 65;
          if ((v203 - 65) <= 0x19)
          {
            WTF::URLParser::syntaxViolation<char16_t>(v6, *v4);
            LOWORD(v203) = *(_WORD *)v9;
            v204 = *(_WORD *)v9 - 65;
          }
          *((_BYTE *)v212 + HIDWORD(__n)) = v203 | (32 * (v204 < 0x1Au));
          v165 = ++HIDWORD(__n);
          v9 += 2;
          v10 = (WTF *)((char *)v10 - 1);
        }
        while (v10);
        goto LABEL_179;
      }
LABEL_150:
      v165 = 0;
LABEL_179:
      *(_QWORD *)v7 = v7 + 16;
      *(_DWORD *)(v7 + 8) = 2048;
      if (v212 == (WTF *)v214)
      {
        memcpy((void *)(v7 + 16), v214, v165);
      }
      else
      {
        *(_QWORD *)v7 = v212;
        *(_DWORD *)(v7 + 8) = __n;
      }
      *(_DWORD *)(v7 + 12) = v165;
LABEL_183:
      *(_BYTE *)(v7 + 2064) = 1;
      return;
    }
    if (v10 < 0x801)
    {
      if (!(_DWORD)v10)
        goto LABEL_150;
    }
    else
    {
      LODWORD(__n) = (_DWORD)v10;
      v212 = (WTF *)WTF::fastMalloc(v10);
    }
    do
    {
      v164 = *(unsigned __int8 *)v9;
      if ((v164 - 65) <= 0x19)
      {
        WTF::URLParser::syntaxViolation<char16_t>(v6, *v4);
        v164 = *(unsigned __int8 *)v9;
      }
      *((_BYTE *)v212 + HIDWORD(__n)) = WTF::asciiCaseFoldTable[v164];
      v165 = ++HIDWORD(__n);
      ++v9;
      v10 = (WTF *)((char *)v10 - 1);
    }
    while (v10);
    goto LABEL_179;
  }
LABEL_79:
  pErrorCode = U_ZERO_ERROR;
  pInfo = (UIDNAInfo)xmmword_199123570;
  v120 = atomic_load(&WTF::URLParser::internationalDomainNameTranscoder(void)::onceFlag);
  if (v120 != -1)
  {
    v205 = (WTF *)&v215;
    v216 = &v205;
    std::__call_once(&WTF::URLParser::internationalDomainNameTranscoder(void)::onceFlag, &v216, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::URLParser::internationalDomainNameTranscoder(void)::$_0 &&>>);
  }
  v121 = (const UIDNA *)WTF::URLParser::internationalDomainNameTranscoder(void)::encoder;
  v122 = *(_DWORD *)(v5 + 16);
  v123 = *(unsigned int *)(v5 + 4);
  v124 = *(WTF **)(v5 + 8);
  v205 = (WTF *)v207;
  v206 = 32;
  v208 = 0;
  v209 = 0;
  if ((v122 & 4) == 0)
  {
    v125 = v123;
    goto LABEL_100;
  }
  if (v123 <= 0x20)
  {
    HIDWORD(v206) = v123;
    v127 = (WTF *)v207;
    v128 = (WTF *)v207;
  }
  else
  {
    if (v123 <= 0x29)
      v126 = 41;
    else
      v126 = v123;
    if (v126 >> 31)
      goto LABEL_187;
    v127 = (WTF *)WTF::fastMalloc((WTF *)(2 * v126));
    v205 = v127;
    v206 = __PAIR64__(v123, v126);
    if (v123 < 0x40)
    {
      v128 = v127;
      v137 = (WTF *)((char *)v127 + 2 * v123);
      if (v127 != v137)
        goto LABEL_94;
      goto LABEL_99;
    }
    v128 = (WTF *)((char *)v127 + 2 * (v123 & 0xFFFFFFC0));
    v129 = 0uLL;
    v130 = (char *)v127;
    do
    {
      v219.val[0] = *(int8x16_t *)v124;
      v131 = *((int8x16_t *)v124 + 1);
      v220.val[0] = (int8x16_t)*((_OWORD *)v124 + 2);
      v132 = *((_OWORD *)v124 + 3);
      v124 = (WTF *)((char *)v124 + 64);
      v133 = v132;
      v220.val[1] = 0uLL;
      v221.val[0] = v131;
      v219.val[1] = 0uLL;
      v134 = v130;
      vst2q_s8(v134, v219);
      v134 += 32;
      v221.val[1] = 0uLL;
      vst2q_s8(v134, v221);
      v135 = v130 + 64;
      vst2q_s8(v135, v220);
      v136 = v130 + 96;
      vst2q_s8(v136, *(int8x16x2_t *)(&v129 - 1));
      v130 += 128;
    }
    while (v130 != (char *)v128);
  }
  v137 = (WTF *)((char *)v127 + 2 * v123);
  if (v128 != v137)
  {
LABEL_94:
    v138 = v137 - v128 - 2;
    if (v138 < 0xE
      || (v139 = (WTF *)((char *)v127 + 2 * v123) - v128 - 2, v128 < (WTF *)((char *)v124 + (v139 >> 1) + 1))
      && v124 < (WTF *)((char *)v128 + (v139 & 0xFFFFFFFFFFFFFFFELL) + 2))
    {
      v140 = v128;
      v141 = v124;
      goto LABEL_98;
    }
    v162 = (v138 >> 1) + 1;
    if (v138 >= 0x3E)
    {
      v163 = v162 & 0xFFFFFFFFFFFFFFE0;
      v180 = (uint8x8_t *)((char *)v124 + 16);
      v181 = (uint16x8_t *)((char *)v128 + 32);
      v182 = v162 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v183 = *(uint8x16_t *)v180[-2].i8;
        v184 = vmovl_u8(*v180);
        v185 = vmovl_high_u8(*(uint8x16_t *)v180->i8);
        v181[-2] = vmovl_u8(*(uint8x8_t *)v183.i8);
        v181[-1] = vmovl_high_u8(v183);
        *v181 = v184;
        v181[1] = v185;
        v181 += 4;
        v180 += 4;
        v182 -= 32;
      }
      while (v182);
      if (v162 == v163)
        goto LABEL_99;
      if ((v162 & 0x18) == 0)
      {
        v141 = (WTF *)((char *)v124 + v163);
        v140 = (WTF *)((char *)v128 + 2 * v163);
        do
        {
LABEL_98:
          v142 = *(unsigned __int8 *)v141;
          v141 = (WTF *)((char *)v141 + 1);
          *(_WORD *)v140 = v142;
          v140 = (WTF *)((char *)v140 + 2);
        }
        while (v140 != v137);
        goto LABEL_99;
      }
    }
    else
    {
      v163 = 0;
    }
    v140 = (WTF *)((char *)v128 + 2 * (v162 & 0xFFFFFFFFFFFFFFF8));
    v141 = (WTF *)((char *)v124 + (v162 & 0xFFFFFFFFFFFFFFF8));
    v186 = (uint8x8_t *)((char *)v124 + v163);
    v187 = (uint16x8_t *)((char *)v128 + 2 * v163);
    v188 = v163 - (v162 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v189 = *v186++;
      *v187++ = vmovl_u8(v189);
      v188 += 8;
    }
    while (v188);
    if (v162 == (v162 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_99;
    goto LABEL_98;
  }
LABEL_99:
  v124 = v205;
  v125 = HIDWORD(v206);
  LODWORD(v123) = *(_DWORD *)(v5 + 4);
LABEL_100:
  v208 = v124;
  v209 = v125;
  v150 = uidna_nameToASCII(v121, (const UChar *)v124, v123, dest, 2048, &pInfo, &pErrorCode);
  v151 = v205;
  if (v207 != (_BYTE *)v205 && v205 != 0)
  {
    v205 = 0;
    LODWORD(v206) = 0;
    WTF::fastFree((unint64_t)v151, v143, v144, v145, v146, v147, v148, v149);
  }
  if (pErrorCode <= U_ZERO_ERROR && pInfo.errors <= 0x3F)
  {
    v154 = v150;
    if (v150)
    {
      v155 = HIDWORD(__n);
      v156 = HIDWORD(__n) + (uint64_t)v150;
      if (v156 <= __n)
        goto LABEL_143;
      v157 = __n + ((unint64_t)__n >> 2);
      if (v157 >= 0x10)
        v158 = v157 + 1;
      else
        v158 = 16;
      if (v158 <= v156)
        v159 = HIDWORD(__n) + (uint64_t)v150;
      else
        v159 = v158;
      v160 = v212;
      if (v159 < 0x801)
      {
        v212 = (WTF *)v214;
        LODWORD(__n) = 2048;
        v161 = (WTF *)v214;
        goto LABEL_138;
      }
      if (!HIDWORD(v159))
      {
        v161 = (WTF *)WTF::fastMalloc((WTF *)v159);
        LODWORD(__n) = v159;
        v212 = v161;
LABEL_138:
        memcpy(v161, v160, v155);
        if (v214 != (_BYTE *)v160 && v160)
        {
          if (v212 == v160)
          {
            v212 = 0;
            LODWORD(__n) = 0;
          }
          WTF::fastFree((unint64_t)v160, v166, v167, v168, v169, v170, v171, v172);
        }
LABEL_143:
        v173 = HIDWORD(__n);
        if (v156 < HIDWORD(__n))
        {
          __break(0xC471u);
          JUMPOUT(0x197B5424CLL);
        }
        v174 = v212;
        v175 = (char *)v212 + HIDWORD(__n);
        v176 = (v154 - 1) & 0x7FFFFFFFFFFFFFFFLL;
        if (v176 < 7)
        {
          v177 = dest;
          goto LABEL_169;
        }
        if (v175 < (char *)&dest[v154])
        {
          v177 = dest;
          if (dest < (UChar *)((char *)v212 + HIDWORD(__n) + v176 + 1))
            goto LABEL_169;
        }
        v178 = v176 + 1;
        if (v176 >= 0x1F)
        {
          v179 = v178 & 0xFFFFFFFFFFFFFFE0;
          v190 = (int8x16_t *)v218;
          v191 = (int8x16_t *)((char *)v212 + HIDWORD(__n) + 16);
          v192 = v178 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v194 = v190[-2];
            v193 = v190[-1];
            v196 = *v190;
            v195 = v190[1];
            v190 += 4;
            v191[-1] = vuzp1q_s8(v194, v193);
            *v191 = vuzp1q_s8(v196, v195);
            v191 += 2;
            v192 -= 32;
          }
          while (v192);
          if (v178 == v179)
            goto LABEL_170;
          if ((v178 & 0x18) == 0)
          {
            v177 = &dest[v179];
            v175 += v179;
            do
            {
LABEL_169:
              v201 = *(_BYTE *)v177++;
              *v175++ = v201;
            }
            while (v177 != &dest[v154]);
LABEL_170:
            HIDWORD(__n) = v156;
            if (!WTF::operator==(*(unsigned __int8 **)(v5 + 8), *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32), (unsigned __int8 *)v212, v156 | 0x100000000))WTF::URLParser::syntaxViolation<char16_t>(v6, *v4);
            *(_QWORD *)v7 = v7 + 16;
            *(_DWORD *)(v7 + 8) = 2048;
            if (v212 == (WTF *)v214)
            {
              v202 = HIDWORD(__n);
              memcpy((void *)(v7 + 16), v214, HIDWORD(__n));
            }
            else
            {
              *(_QWORD *)v7 = v212;
              v202 = HIDWORD(__n);
              *(_DWORD *)(v7 + 8) = __n;
            }
            *(_DWORD *)(v7 + 12) = v202;
            goto LABEL_183;
          }
        }
        else
        {
          v179 = 0;
        }
        v175 += v178 & 0xFFFFFFFFFFFFFFF8;
        v177 = &dest[v178 & 0xFFFFFFFFFFFFFFF8];
        v197 = (int8x8_t *)((char *)v174 + v179 + v173);
        v198 = v179 - (v178 & 0xFFFFFFFFFFFFFFF8);
        v199 = &dest[v179];
        do
        {
          v200 = *(int16x8_t *)v199;
          v199 += 8;
          *v197++ = vmovn_s16(v200);
          v198 += 8;
        }
        while (v198);
        if (v178 == (v178 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_170;
        goto LABEL_169;
      }
LABEL_187:
      __break(0xC471u);
      JUMPOUT(0x197B54244);
    }
  }
  *(_BYTE *)v7 = 0;
  *(_BYTE *)(v7 + 2064) = 0;
  v153 = v212;
  if (v214 != (_BYTE *)v212)
  {
    if (v212)
    {
      v212 = 0;
      LODWORD(__n) = 0;
      WTF::fastFree((unint64_t)v153, v143, v144, v145, v146, v147, v148, v149);
    }
  }
}

void WTF::URLParser::parseIPv4Host<char16_t,unsigned char>(uint64_t *a1, void *a2, uint64_t *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int *v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  WTF *v38;
  uint64_t v39;
  _BYTE v40[32];
  unsigned __int8 *v41;
  uint64_t v42;

  v41 = a4;
  v42 = a5;
  v38 = (WTF *)v40;
  v39 = 4;
  v37 = 0;
  if (!a5 || *a4 == 46)
  {
    *a1 = 0x100000001;
    return;
  }
  v11 = 0;
  while (1)
  {
    v12 = *a4;
    v13 = v12 - 14;
    v14 = v12 - 11;
    if (v13 >= 0xFFFFFFFB && v14 >= 2)
    {
      v37 = 1;
      --a5;
      v41 = ++a4;
      v42 = a5;
      goto LABEL_7;
    }
    if (v11 > 3)
      goto LABEL_20;
    WTF::URLParser::parseIPv4Piece<unsigned char>(&v36, &v41, &v37);
    if (v11 == (_DWORD)v39)
    {
      v17 = (_QWORD *)WTF::Vector<std::experimental::fundamentals_v3::expected<unsigned int,WTF::URLParser::IPv4PieceParsingError>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v38, (void *)(v11 + 1), (unint64_t)&v36, (uint64_t)a4, v16, a6, a7, a8);
      *((_QWORD *)v38 + HIDWORD(v39)) = *v17;
      v11 = ++HIDWORD(v39);
      a5 = v42;
      if (!v42)
        goto LABEL_22;
    }
    else
    {
      *((_QWORD *)v38 + v11) = v36;
      v11 = ++HIDWORD(v39);
      a5 = v42;
      if (!v42)
        goto LABEL_22;
    }
    a4 = v41;
    if (*v41 == 46)
      break;
LABEL_7:
    if (!a5)
      goto LABEL_22;
  }
  --a5;
  a4 = ++v41;
  v42 = a5;
  if (a5)
  {
    if (*a4 == 46)
    {
LABEL_20:
      v18 = 0x100000001;
      v19 = v38;
      goto LABEL_23;
    }
    goto LABEL_7;
  }
  v37 = 1;
LABEL_22:
  v18 = 0x100000001;
  v19 = v38;
  if (v11 - 5 >= 0xFFFFFFFC)
  {
    v20 = *((_DWORD *)v38 + 1);
    if (v20)
    {
      if (v20 != 1)
        goto LABEL_82;
      if (!*(_DWORD *)v38)
        goto LABEL_23;
    }
    v21 = v11;
    if (v11 != 1)
    {
      v22 = *((_DWORD *)v38 + 3);
      if (v22)
      {
        if (v22 != 1)
          goto LABEL_82;
        if (!*((_DWORD *)v38 + 2))
          goto LABEL_23;
      }
      if (v11 != 2)
      {
        v23 = *((_DWORD *)v38 + 5);
        if (v23)
        {
          if (v23 != 1)
            goto LABEL_82;
          if (!*((_DWORD *)v38 + 4))
            goto LABEL_23;
        }
        if (v11 != 3)
        {
          v24 = *((_DWORD *)v38 + 7);
          if (v24)
          {
            if (v24 != 1)
              goto LABEL_82;
            if (!*((_DWORD *)v38 + 6))
              goto LABEL_23;
          }
        }
      }
    }
    v25 = 0;
    v26 = (WTF *)((char *)v38 + 8 * v11);
    v27 = 8 * v21;
    v18 = 0x100000000;
    do
    {
      v28 = *(_DWORD *)((char *)v38 + v25 + 4);
      if (v28)
      {
        if (v28 != 1)
          goto LABEL_82;
        if (*(_DWORD *)((char *)v38 + v25) == 1)
          goto LABEL_23;
      }
      v25 += 8;
    }
    while (v27 != v25);
    if (v21 >= 2)
    {
      v29 = 0;
      while (v27 != v29)
      {
        if (*(_DWORD *)((char *)v38 + v29 + 4))
          goto LABEL_82;
        if (*(_DWORD *)((char *)v38 + v29) > 0xFFu)
          goto LABEL_23;
        v29 += 8;
        if (v27 - 8 == v29)
          goto LABEL_53;
      }
LABEL_83:
      __break(0xC471u);
      JUMPOUT(0x197B54674);
    }
LABEL_53:
    v30 = (unsigned int *)((char *)v38 + 8 * v21 - 8);
    if (!v30[1])
    {
      v31 = 5 - v21;
      if (v31 >= 5)
        goto LABEL_83;
      if (WTF::pow256(unsigned long)::values[v31] <= (unint64_t)*v30)
        goto LABEL_23;
      if (!v37)
        goto LABEL_60;
      WTF::URLParser::syntaxViolation<char16_t>((uint64_t)a2, *a3);
      if (!HIDWORD(v39))
        goto LABEL_78;
      v19 = v38;
      v26 = (WTF *)((char *)v38 + 8 * HIDWORD(v39));
      do
      {
LABEL_60:
        if (*((_DWORD *)v19 + 1))
          goto LABEL_82;
        if (*(_DWORD *)v19 >= 0x100u)
          WTF::URLParser::syntaxViolation<char16_t>((uint64_t)a2, *a3);
        v19 = (WTF *)((char *)v19 + 8);
      }
      while (v19 != v26);
      v32 = HIDWORD(v39);
      if (HIDWORD(v39) != 4)
      {
LABEL_78:
        WTF::URLParser::syntaxViolation<char16_t>((uint64_t)a2, *a3);
        v32 = HIDWORD(v39);
        if (!HIDWORD(v39))
        {
          __break(0xC471u);
          JUMPOUT(0x197B54690);
        }
      }
      v19 = v38;
      v33 = *((_QWORD *)v38 + v32 - 1);
      v34 = v32 - 1;
      HIDWORD(v39) = v34;
      if (!HIDWORD(v33))
      {
        if (!v34)
        {
          v18 = v33;
          goto LABEL_23;
        }
        if (!*((_DWORD *)v38 + 1))
        {
          v35 = v33 + (*(_DWORD *)v38 << 24);
          if (v34 == 1)
            goto LABEL_72;
          if (*((_DWORD *)v38 + 3))
            goto LABEL_82;
          v35 += *((_DWORD *)v38 + 2) << 16;
          if (v34 == 2)
          {
LABEL_72:
            v18 = v35;
            goto LABEL_23;
          }
          if (!*((_DWORD *)v38 + 5))
          {
            v35 += *((_DWORD *)v38 + 4) << 8;
            if (v34 == 3)
              goto LABEL_72;
            if (!*((_DWORD *)v38 + 7))
            {
              if (v34 == 4)
              {
                v18 = *((_DWORD *)v38 + 6) + v35;
                goto LABEL_23;
              }
              if (!*((_DWORD *)v38 + 9))
              {
                __break(0xC471u);
                JUMPOUT(0x197B546B8);
              }
            }
          }
        }
      }
    }
LABEL_82:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_83;
  }
LABEL_23:
  *a1 = v18;
  if (v40 != (_BYTE *)v19)
  {
    if (v19)
    {
      v38 = 0;
      LODWORD(v39) = 0;
      WTF::fastFree((unint64_t)v19, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    }
  }
}

char *WTF::Vector<unsigned char,2048ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, WTF *a2, unint64_t a3)
{
  char *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v26 = *a1;
        return &v26[a3 - (_QWORD)v5];
      }
      if (v10 < 0x801)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 2048;
        goto LABEL_31;
      }
      if (!HIDWORD(v10))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)v10);
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, v6);
        v26 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v26 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v5, v27, v28, v29, v30, v31, v32, v33);
          v26 = *a1;
        }
        return &v26[a3 - (_QWORD)v5];
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x197B54898);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 <= v12)
    return (char *)a3;
  v16 = *((unsigned int *)a1 + 3);
  if (v15 < 0x801)
  {
    *a1 = (char *)(a1 + 2);
    *((_DWORD *)a1 + 2) = 2048;
    memcpy(a1 + 2, v5, v16);
    if (a1 + 2 == (char **)v5)
      return (char *)a3;
  }
  else
  {
    if (HIDWORD(v15))
      goto LABEL_37;
    v17 = (char *)WTF::fastMalloc((WTF *)v15);
    *((_DWORD *)a1 + 2) = v15;
    *a1 = v17;
    memcpy(v17, v5, v16);
    if (a1 + 2 == (char **)v5)
      return (char *)a3;
  }
  if (!v5)
    return (char *)a3;
  if (*a1 == v5)
  {
    *a1 = 0;
    *((_DWORD *)a1 + 2) = 0;
  }
  WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
  return (char *)a3;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::URLParser::internationalDomainNameTranscoder(void)::$_0 &&>>()
{
  uint64_t result;
  int v1;

  v1 = 0;
  result = MEMORY[0x19AEBC420](60, &v1);
  WTF::URLParser::internationalDomainNameTranscoder(void)::encoder = result;
  if (v1 >= 1 || !result)
  {
    __break(0xC471u);
    JUMPOUT(0x197B54900);
  }
  return result;
}

UText *WTF::uTextCloneImpl(UText *this, UText *a2, const UText *a3, UErrorCode *status, UErrorCode *a5)
{
  UText *v5;
  UText *v8;
  int32_t extraSize;
  UText *v10;
  size_t v11;
  void *pExtra;
  int32_t flags;
  int32_t sizeOfStruct;
  unint64_t context;
  UText *v16;
  char *v17;
  void *v18;
  unint64_t p;
  char *v20;
  UText *v21;
  unint64_t q;
  char *v23;
  UText *v24;
  unint64_t chunkContents;
  void *v26;

  if (*(int *)status > 0)
    return 0;
  v8 = a2;
  extraSize = a2->extraSize;
  v10 = utext_setup(this, extraSize, status);
  v5 = v10;
  if (*(int *)status > 0)
    return v5;
  v11 = extraSize;
  pExtra = v10->pExtra;
  flags = v10->flags;
  sizeOfStruct = v10->sizeOfStruct;
  if (sizeOfStruct >= v8->sizeOfStruct)
    sizeOfStruct = v8->sizeOfStruct;
  memcpy(v10, v8, sizeOfStruct);
  v5->pExtra = pExtra;
  v5->flags = flags;
  memcpy(pExtra, v8->pExtra, v11);
  context = (unint64_t)v5->context;
  v16 = (UText *)v8->pExtra;
  if (context >= (unint64_t)v16 && context < (unint64_t)v16 + v8->extraSize)
  {
    v17 = (char *)v5->pExtra;
    v18 = v8->pExtra;
LABEL_12:
    v5->context = &v17[context - (_QWORD)v18];
    v16 = (UText *)v8->pExtra;
    goto LABEL_13;
  }
  if (context >= (unint64_t)v8)
  {
    v18 = v8;
    v17 = (char *)v5;
    if (context < (unint64_t)v8 + v8->sizeOfStruct)
      goto LABEL_12;
  }
LABEL_13:
  p = (unint64_t)v5->p;
  if (p >= (unint64_t)v16 && p < (unint64_t)v16 + v8->extraSize)
  {
    v20 = (char *)v5->pExtra;
    v21 = v16;
LABEL_18:
    v5->p = &v20[p - (_QWORD)v21];
    v16 = (UText *)v8->pExtra;
    goto LABEL_19;
  }
  if (p >= (unint64_t)v8)
  {
    v21 = v8;
    v20 = (char *)v5;
    if (p < (unint64_t)v8 + v8->sizeOfStruct)
      goto LABEL_18;
  }
LABEL_19:
  q = (unint64_t)v5->q;
  if (q >= (unint64_t)v16 && q < (unint64_t)v16 + v8->extraSize)
  {
    v23 = (char *)v5->pExtra;
    v24 = v16;
LABEL_24:
    v5->q = &v23[q - (_QWORD)v24];
    v16 = (UText *)v8->pExtra;
    goto LABEL_25;
  }
  if (q >= (unint64_t)v8)
  {
    v24 = v8;
    v23 = (char *)v5;
    if (q < (unint64_t)v8 + v8->sizeOfStruct)
      goto LABEL_24;
  }
LABEL_25:
  chunkContents = (unint64_t)v5->chunkContents;
  if (chunkContents < (unint64_t)v16 || chunkContents >= (unint64_t)v16 + v8->extraSize)
  {
    if (chunkContents < (unint64_t)v8)
      goto LABEL_31;
    v26 = v5;
    if (chunkContents >= (unint64_t)v8 + v8->sizeOfStruct)
      goto LABEL_31;
  }
  else
  {
    v26 = v5->pExtra;
    v8 = v16;
  }
  chunkContents = (unint64_t)v26 + chunkContents - (_QWORD)v8;
LABEL_31:
  v5->chunkContents = (const UChar *)chunkContents;
  return v5;
}

UText *WTF::openLatin1ContextAwareUTextProvider(UText *a1, const void *a2, unint64_t a3, const void *a4, int32_t a5, UErrorCode *status)
{
  UText *result;

  if (*(int *)status > 0)
    return 0;
  if (!a2 || a3 >> 31)
  {
    result = 0;
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  else
  {
    result = utext_setup(a1, 32, status);
    if (*(int *)status <= 0)
    {
      result->pFuncs = (const UTextFuncs *)&WTF::textLatin1ContextAwareFuncs;
      result->providerProperties = 4;
      result->context = a2;
      result->p = a2;
      result->a = a3;
      result->q = a4;
      result->b = a5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

double WTF::uTextLatin1Clone(UText *this, UText *a2, const UText *a3, UErrorCode *status, UErrorCode *a5)
{
  UText *v7;
  double result;
  int64_t chunkNativeStart;
  const UChar *pExtra;

  if (*(int *)status <= 0)
  {
    v7 = utext_setup(this, 32, status);
    if (*(int *)status <= 0)
    {
      v7->providerProperties = a2->providerProperties;
      v7->chunkNativeStart = a2->chunkNativeStart;
      chunkNativeStart = a2->chunkNativeStart;
      v7->chunkNativeLimit = chunkNativeStart;
      v7->nativeIndexingLimit = chunkNativeStart;
      v7->chunkOffset = 0;
      v7->context = a2->context;
      v7->a = a2->a;
      pExtra = (const UChar *)v7->pExtra;
      v7->chunkContents = pExtra;
      v7->pFuncs = (const UTextFuncs *)&WTF::uTextLatin1Funcs;
      result = 0.0;
      *(_OWORD *)pExtra = 0u;
      *((_OWORD *)pExtra + 1) = 0u;
    }
  }
  return result;
}

uint64_t WTF::uTextLatin1NativeLength(WTF *this, UText *a2)
{
  return *((_QWORD *)this + 14);
}

uint64_t WTF::uTextLatin1Access(WTF *this, UText *a2, int a3)
{
  uint64_t p_chunkNativeLimit;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  UText *v10;
  int v11;
  _WORD *v12;
  char *v13;
  uint64_t v14;
  _WORD *v15;
  unint64_t v16;
  __int128 v17;
  char *v18;
  int8x16_t v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  _WORD *v29;
  char *v30;
  __int16 v31;
  uint8x8_t *v32;
  uint16x8_t *v33;
  unint64_t v34;
  uint8x16_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint8x8_t *v38;
  uint16x8_t *v39;
  unint64_t v40;
  uint8x8_t v41;
  int8x16x2_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;

  p_chunkNativeLimit = *((_QWORD *)this + 14);
  v4 = *((_QWORD *)this + 2);
  if (a3)
  {
    if (v4 <= (uint64_t)a2 || (v5 = *((_QWORD *)this + 4), (uint64_t)a2 < v5))
    {
      if (p_chunkNativeLimit <= (uint64_t)a2 && v4 == p_chunkNativeLimit)
      {
        *((_DWORD *)this + 10) = (_DWORD)a2 - *((_DWORD *)this + 8);
        return 0;
      }
      v7 = 0;
      *((_QWORD *)this + 4) = a2;
      if ((uint64_t)&a2->chunkNativeLimit < p_chunkNativeLimit)
        p_chunkNativeLimit = (uint64_t)&a2->chunkNativeLimit;
      *((_QWORD *)this + 2) = p_chunkNativeLimit;
LABEL_22:
      v11 = p_chunkNativeLimit - (_DWORD)a2;
      *((_DWORD *)this + 10) = v7;
      *((_DWORD *)this + 11) = p_chunkNativeLimit - (_DWORD)a2;
      v12 = (_WORD *)*((_QWORD *)this + 6);
      v13 = (char *)a2 + *((_QWORD *)this + 9);
      v14 = (p_chunkNativeLimit - (_QWORD)a2) << 32;
      v15 = (_WORD *)((char *)v12 + (v14 >> 31));
      if ((unint64_t)v14 < 0x3F00000001)
      {
        v16 = *((_QWORD *)this + 6);
        if (v12 == v15)
        {
LABEL_39:
          *((_DWORD *)this + 7) = *((_DWORD *)this + 11);
          return 1;
        }
      }
      else
      {
        v16 = (unint64_t)&v12[v11 & 0x7FFFFFFFFFFFFFC0];
        v17 = 0uLL;
        v18 = (char *)*((_QWORD *)this + 6);
        do
        {
          v42.val[0] = *(int8x16_t *)v13;
          v19 = *((int8x16_t *)v13 + 1);
          v43.val[0] = (int8x16_t)*((_OWORD *)v13 + 2);
          v20 = *((_OWORD *)v13 + 3);
          v13 += 64;
          v21 = v20;
          v43.val[1] = 0uLL;
          v44.val[0] = v19;
          v42.val[1] = 0uLL;
          v22 = v18;
          vst2q_s8(v22, v42);
          v22 += 32;
          v44.val[1] = 0uLL;
          vst2q_s8(v22, v44);
          v23 = v18 + 64;
          vst2q_s8(v23, v43);
          v24 = v18 + 96;
          vst2q_s8(v24, *(int8x16x2_t *)(&v17 - 1));
          v18 += 128;
        }
        while (v18 != (char *)v16);
        if ((_WORD *)v16 == v15)
          goto LABEL_39;
      }
      v25 = (unint64_t)v12 + (v14 >> 31) - v16 - 2;
      if (v25 < 0xE
        || (v16 < (unint64_t)&v13[(v25 >> 1) + 1]
          ? (v26 = (unint64_t)v13 >= (v25 & 0xFFFFFFFFFFFFFFFELL) + v16 + 2)
          : (v26 = 1),
            !v26))
      {
        v29 = (_WORD *)v16;
        v30 = v13;
        goto LABEL_38;
      }
      v27 = (v25 >> 1) + 1;
      if (v25 >= 0x3E)
      {
        v28 = v27 & 0xFFFFFFFFFFFFFFE0;
        v32 = (uint8x8_t *)(v13 + 16);
        v33 = (uint16x8_t *)(v16 + 32);
        v34 = v27 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v35 = *(uint8x16_t *)v32[-2].i8;
          v36 = vmovl_u8(*v32);
          v37 = vmovl_high_u8(*(uint8x16_t *)v32->i8);
          v33[-2] = vmovl_u8(*(uint8x8_t *)v35.i8);
          v33[-1] = vmovl_high_u8(v35);
          *v33 = v36;
          v33[1] = v37;
          v33 += 4;
          v32 += 4;
          v34 -= 32;
        }
        while (v34);
        if (v27 == v28)
          goto LABEL_39;
        if ((v27 & 0x18) == 0)
        {
          v30 = &v13[v28];
          v29 = (_WORD *)(v16 + 2 * v28);
          do
          {
LABEL_38:
            v31 = *v30++;
            *v29++ = v31;
          }
          while (v29 != v15);
          goto LABEL_39;
        }
      }
      else
      {
        v28 = 0;
      }
      v29 = (_WORD *)(v16 + 2 * (v27 & 0xFFFFFFFFFFFFFFF8));
      v30 = &v13[v27 & 0xFFFFFFFFFFFFFFF8];
      v38 = (uint8x8_t *)&v13[v28];
      v39 = (uint16x8_t *)(v16 + 2 * v28);
      v40 = v28 - (v27 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v41 = *v38++;
        *v39++ = vmovl_u8(v41);
        v40 += 8;
      }
      while (v40);
      if (v27 == (v27 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_39;
      goto LABEL_38;
    }
    *((_DWORD *)this + 10) = (_DWORD)a2 - v5;
    return 1;
  }
  else
  {
    if (v4 >= (uint64_t)a2)
    {
      v8 = *((_QWORD *)this + 4);
      if ((uint64_t)a2 > v8)
      {
        *((_DWORD *)this + 10) = (_DWORD)a2 - v8;
        return 1;
      }
    }
    if (a2 || *((_QWORD *)this + 4))
    {
      if (p_chunkNativeLimit >= (uint64_t)a2)
        p_chunkNativeLimit = (uint64_t)a2;
      *((_QWORD *)this + 2) = p_chunkNativeLimit;
      if (p_chunkNativeLimit >= 16)
        v10 = (UText *)(p_chunkNativeLimit - 16);
      else
        v10 = 0;
      *((_QWORD *)this + 4) = v10;
      v7 = (_DWORD)a2 - (_DWORD)v10;
      a2 = v10;
      goto LABEL_22;
    }
    *((_DWORD *)this + 10) = 0;
    return 0;
  }
}

uint64_t WTF::uTextLatin1Extract(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned int a5, int *a6)
{
  int v6;
  uint64_t result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  signed int v12;
  unint64_t v13;
  uint64_t v14;
  _WORD *v15;
  unint64_t v16;
  __int128 v17;
  char *v18;
  int8x16_t v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  _WORD *v30;
  unsigned __int8 *v31;
  __int16 v32;
  uint8x8_t *v33;
  uint16x8_t *v34;
  unint64_t v35;
  uint8x16_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint8x8_t *v39;
  uint16x8_t *v40;
  unint64_t v41;
  uint8x8_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;
  int8x16x2_t v45;

  v6 = *a6;
  if (*a6 > 0)
    return 0;
  if ((a5 & 0x80000000) != 0 || (v9 = *(_QWORD *)(a1 + 112), !a4) && a5)
  {
    result = 0;
    v10 = 1;
LABEL_7:
    *a6 = v10;
    return result;
  }
  if (a2 < 0 || a3 < a2 || a3 - a2 >= 0x80000000)
  {
    result = 0;
    v10 = 8;
    goto LABEL_7;
  }
  if (v9 >= a2)
    v11 = a2;
  else
    v11 = *(_QWORD *)(a1 + 112);
  if (v9 >= a3)
    v9 = a3;
  result = v9 - v11;
  if (v9 != v11)
  {
    if (!a4)
    {
      v25 = a5;
      if (result < a5)
        goto LABEL_43;
      goto LABEL_45;
    }
    if ((int)result >= (int)a5)
      v12 = a5;
    else
      v12 = v9 - v11;
    v13 = *(_QWORD *)(a1 + 72) + v11;
    v14 = v12;
    v15 = (_WORD *)(a4 + 2 * v12);
    if (v12 < 0x40)
    {
      v16 = a4;
    }
    else
    {
      v16 = a4 + 2 * (v12 & 0x7FFFFFFFFFFFFFC0);
      v17 = 0uLL;
      v18 = (char *)a4;
      do
      {
        v43.val[0] = *(int8x16_t *)v13;
        v19 = *(int8x16_t *)(v13 + 16);
        v44.val[0] = *(int8x16_t *)(v13 + 32);
        v20 = *(_OWORD *)(v13 + 48);
        v13 += 64;
        v21 = v20;
        v44.val[1] = 0uLL;
        v45.val[0] = v19;
        v43.val[1] = 0uLL;
        v22 = v18;
        vst2q_s8(v22, v43);
        v22 += 32;
        v45.val[1] = 0uLL;
        vst2q_s8(v22, v45);
        v23 = v18 + 64;
        vst2q_s8(v23, v44);
        v24 = v18 + 96;
        vst2q_s8(v24, *(int8x16x2_t *)(&v17 - 1));
        v18 += 128;
      }
      while (v18 != (char *)v16);
    }
    if ((_WORD *)v16 != v15)
    {
      v26 = a4 + 2 * v14 - v16 - 2;
      if (v26 < 0xE
        || (v16 < v13 + (v26 >> 1) + 1 ? (v27 = v13 >= (v26 & 0xFFFFFFFFFFFFFFFELL) + v16 + 2) : (v27 = 1), !v27))
      {
        v30 = (_WORD *)v16;
        v31 = (unsigned __int8 *)v13;
        goto LABEL_40;
      }
      v28 = (v26 >> 1) + 1;
      if (v26 >= 0x3E)
      {
        v29 = v28 & 0xFFFFFFFFFFFFFFE0;
        v33 = (uint8x8_t *)(v13 + 16);
        v34 = (uint16x8_t *)(v16 + 32);
        v35 = v28 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v36 = *(uint8x16_t *)v33[-2].i8;
          v37 = vmovl_u8(*v33);
          v38 = vmovl_high_u8(*(uint8x16_t *)v33->i8);
          v34[-2] = vmovl_u8(*(uint8x8_t *)v36.i8);
          v34[-1] = vmovl_high_u8(v36);
          *v34 = v37;
          v34[1] = v38;
          v34 += 4;
          v33 += 4;
          v35 -= 32;
        }
        while (v35);
        if (v28 == v29)
          goto LABEL_41;
        if ((v28 & 0x18) == 0)
        {
          v31 = (unsigned __int8 *)(v13 + v29);
          v30 = (_WORD *)(v16 + 2 * v29);
          do
          {
LABEL_40:
            v32 = *v31++;
            *v30++ = v32;
          }
          while (v30 != v15);
          goto LABEL_41;
        }
      }
      else
      {
        v29 = 0;
      }
      v30 = (_WORD *)(v16 + 2 * (v28 & 0xFFFFFFFFFFFFFFF8));
      v31 = (unsigned __int8 *)(v13 + (v28 & 0xFFFFFFFFFFFFFFF8));
      v39 = (uint8x8_t *)(v13 + v29);
      v40 = (uint16x8_t *)(v16 + 2 * v29);
      v41 = v29 - (v28 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v42 = *v39++;
        *v40++ = vmovl_u8(v42);
        v41 += 8;
      }
      while (v41);
      if (v28 != (v28 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_40;
    }
LABEL_41:
    v25 = a5;
    if (result < a5)
    {
      *(_WORD *)(a4 + 2 * result) = 0;
      v6 = *a6;
LABEL_43:
      if (v6 == -124)
      {
        v10 = 0;
        goto LABEL_7;
      }
      return result;
    }
LABEL_45:
    if (result == v25)
      v10 = -124;
    else
      v10 = 15;
    goto LABEL_7;
  }
  return result;
}

uint64_t WTF::uTextLatin1MapOffsetToNative(WTF *this, const UText *a2)
{
  return *((_QWORD *)this + 4) + *((int *)this + 10);
}

const UText *WTF::uTextLatin1MapNativeIndexToUTF16(WTF *this, const UText *a2)
{
  return a2;
}

uint64_t WTF::uTextLatin1Close(uint64_t this, UText *a2)
{
  *(_QWORD *)(this + 72) = 0;
  return this;
}

uint64_t WTF::uTextLatin1ContextAwareNativeLength(WTF *this, UText *a2)
{
  return *((_QWORD *)this + 14) + *((int *)this + 30);
}

uint64_t WTF::uTextLatin1ContextAwareAccess(WTF *this, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  UText *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  signed int v17;
  signed int v18;
  unint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  int8x16_t v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  UText *v32;
  char *v33;
  uint64_t v34;
  signed int v35;
  signed int v36;
  char *v37;
  uint64_t v38;
  _WORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  int8x16_t v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  char *v47;
  char *v48;
  unint64_t v49;
  _WORD *v50;
  char *v51;
  __int16 v52;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _WORD *v58;
  unsigned __int8 *v59;
  __int16 v60;
  uint8x8_t *v61;
  uint16x8_t *v62;
  unint64_t v63;
  uint8x16_t v64;
  uint16x8_t v65;
  uint16x8_t v66;
  uint8x8_t *v67;
  uint16x8_t *v68;
  unint64_t v69;
  uint8x8_t v70;
  uint64_t v71;
  unint64_t v72;
  uint8x8_t *v73;
  uint16x8_t *v74;
  unint64_t v75;
  uint8x16_t v76;
  uint16x8_t v77;
  uint16x8_t v78;
  uint8x8_t *v79;
  uint16x8_t *v80;
  unint64_t v81;
  uint8x8_t v82;
  int8x16x2_t v83;
  int8x16x2_t v84;
  int8x16x2_t v85;
  int8x16x2_t v86;
  int8x16x2_t v87;
  int8x16x2_t v88;

  v3 = *((_QWORD *)this + 9);
  if (!v3)
    return v3;
  v4 = *((_DWORD *)this + 30);
  v5 = v4;
  v6 = *((_QWORD *)this + 14) + v4;
  v7 = *((_QWORD *)this + 4);
  if (!a3)
  {
    if (a2 > v7 && *((_QWORD *)this + 2) >= a2)
    {
      if (a2 - v7 >= 0x7FFFFFFF)
        LODWORD(v7) = 0;
      else
        LODWORD(v7) = a2 - v7;
      goto LABEL_88;
    }
    if (a2 <= 0 && !v7)
    {
      v3 = 0;
      goto LABEL_89;
    }
LABEL_15:
    if (a2 < 0)
    {
      v9 = 0;
    }
    else
    {
      v9 = (UText *)(*((_QWORD *)this + 14) + v4);
      if (v6 >= a2)
      {
        v10 = *((_QWORD *)this + 6);
        if (v10)
          goto LABEL_18;
        goto LABEL_26;
      }
    }
    a2 = (uint64_t)v9;
    v10 = *((_QWORD *)this + 6);
    if (v10)
    {
LABEL_18:
      v11 = *((_QWORD *)this + 8);
      if (v4 && a2 <= v4)
      {
        if (a2 == v4)
        {
          if ((a3 == 0) != (v10 == v11))
          {
            if (v10 == v11)
              goto LABEL_32;
LABEL_82:
            *((_QWORD *)this + 4) = 0;
            *((_QWORD *)this + 2) = v4;
            *((_DWORD *)this + 11) = v4;
            *((_DWORD *)this + 7) = v4;
            if (a2 >= 0x7FFFFFFF)
              v54 = 0;
            else
              v54 = a2;
            if (v4 >= v54)
              LODWORD(v7) = v54;
            else
              LODWORD(v7) = v4;
            goto LABEL_88;
          }
          if (a3)
            goto LABEL_60;
        }
        else if (v10 != v11)
        {
          goto LABEL_82;
        }
        goto LABEL_81;
      }
      if (v10 == v11)
      {
LABEL_32:
        v12 = (unint64_t)*((int *)this + 6) >> 1;
        v13 = (char *)(a2 - v12);
        if ((uint64_t)(a2 - v12) <= v5)
          v13 = (char *)v5;
        v14 = (char *)(v12 + a2);
        if ((uint64_t)v14 >= v6)
          v14 = (char *)v6;
        if (a3)
        {
          v15 = a2;
        }
        else
        {
          v14 = (char *)a2;
          v15 = (uint64_t)v13;
        }
        *((_QWORD *)this + 2) = v14;
        *((_QWORD *)this + 4) = v15;
        v16 = (uint64_t)&v14[-v15];
        if (v16 >= 0x7FFFFFFF)
          v17 = 0;
        else
          v17 = v16;
        *((_DWORD *)this + 7) = v17;
        if (a3)
          v18 = 0;
        else
          v18 = v17;
        *((_DWORD *)this + 10) = v18;
        *((_DWORD *)this + 11) = v17;
        v19 = *((_QWORD *)this + 10) + v15 - v5;
        v20 = v17;
        v21 = (_WORD *)(v10 + 2 * v17);
        if (v17 < 0x40)
        {
          v22 = v10;
        }
        else
        {
          v22 = v10 + 2 * (v17 & 0x7FFFFFFFFFFFFFC0);
          v23 = 0uLL;
          v24 = (char *)v10;
          do
          {
            v83.val[0] = *(int8x16_t *)v19;
            v25 = *(int8x16_t *)(v19 + 16);
            v85.val[0] = *(int8x16_t *)(v19 + 32);
            v26 = *(_OWORD *)(v19 + 48);
            v19 += 64;
            v27 = v26;
            v85.val[1] = 0uLL;
            v87.val[0] = v25;
            v83.val[1] = 0uLL;
            v28 = v24;
            vst2q_s8(v28, v83);
            v28 += 32;
            v87.val[1] = 0uLL;
            vst2q_s8(v28, v87);
            v29 = v24 + 64;
            vst2q_s8(v29, v85);
            v30 = v24 + 96;
            vst2q_s8(v30, *(int8x16x2_t *)(&v23 - 1));
            v24 += 128;
          }
          while (v24 != (char *)v22);
        }
        if ((_WORD *)v22 == v21)
          return 1;
        v57 = v10 + 2 * v20 - v22 - 2;
        if (v57 < 0xE || v22 < v19 + (v57 >> 1) + 1 && v19 < (v57 & 0xFFFFFFFFFFFFFFFELL) + v22 + 2)
        {
          v58 = (_WORD *)v22;
          v59 = (unsigned __int8 *)v19;
          goto LABEL_99;
        }
        v71 = (v57 >> 1) + 1;
        if (v57 >= 0x3E)
        {
          v72 = v71 & 0xFFFFFFFFFFFFFFE0;
          v73 = (uint8x8_t *)(v19 + 16);
          v74 = (uint16x8_t *)(v22 + 32);
          v75 = v71 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v76 = *(uint8x16_t *)v73[-2].i8;
            v77 = vmovl_u8(*v73);
            v78 = vmovl_high_u8(*(uint8x16_t *)v73->i8);
            v74[-2] = vmovl_u8(*(uint8x8_t *)v76.i8);
            v74[-1] = vmovl_high_u8(v76);
            *v74 = v77;
            v74[1] = v78;
            v74 += 4;
            v73 += 4;
            v75 -= 32;
          }
          while (v75);
          if (v71 == v72)
            return 1;
          if ((v71 & 0x18) == 0)
          {
            v59 = (unsigned __int8 *)(v19 + v72);
            v58 = (_WORD *)(v22 + 2 * v72);
            do
            {
LABEL_99:
              v60 = *v59++;
              *v58++ = v60;
              v3 = 1;
            }
            while (v58 != v21);
            return v3;
          }
        }
        else
        {
          v72 = 0;
        }
        v58 = (_WORD *)(v22 + 2 * (v71 & 0xFFFFFFFFFFFFFFF8));
        v59 = (unsigned __int8 *)(v19 + (v71 & 0xFFFFFFFFFFFFFFF8));
        v79 = (uint8x8_t *)(v19 + v72);
        v80 = (uint16x8_t *)(v22 + 2 * v72);
        v81 = v72 - (v71 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v82 = *v79++;
          *v80++ = vmovl_u8(v82);
          v81 += 8;
        }
        while (v81);
        if (v71 != (v71 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_99;
        return 1;
      }
      goto LABEL_53;
    }
LABEL_26:
    if (v4 && a2 <= v4)
    {
      if (a3 && a2 == v4)
      {
        v11 = *((_QWORD *)this + 8);
LABEL_60:
        *((_QWORD *)this + 6) = v11;
        v31 = (unint64_t)*((int *)this + 6) >> 1;
        goto LABEL_61;
      }
LABEL_81:
      *((_QWORD *)this + 6) = *((_QWORD *)this + 11);
      goto LABEL_82;
    }
    v11 = *((_QWORD *)this + 8);
LABEL_53:
    *((_QWORD *)this + 6) = v11;
    v31 = (unint64_t)*((int *)this + 6) >> 1;
    if (!a3)
    {
      v32 = (UText *)(a2 - v31);
      v6 = a2;
      if ((uint64_t)v32 <= v5)
        a2 = v5;
      else
        a2 = (uint64_t)v32;
      goto LABEL_63;
    }
LABEL_61:
    v33 = (char *)(v31 + a2);
    if ((uint64_t)v33 < v6)
      v6 = (uint64_t)v33;
LABEL_63:
    *((_QWORD *)this + 2) = v6;
    *((_QWORD *)this + 4) = a2;
    v34 = v6 - a2;
    if (v34 >= 0x7FFFFFFF)
      v35 = 0;
    else
      v35 = v34;
    *((_DWORD *)this + 7) = v35;
    if (a3)
      v36 = 0;
    else
      v36 = v35;
    *((_DWORD *)this + 10) = v36;
    *((_DWORD *)this + 11) = v35;
    v37 = (char *)(*((_QWORD *)this + 10) + a2 - v5);
    v38 = v35;
    v39 = (_WORD *)(v11 + 2 * v35);
    if (v35 < 0x40)
    {
      v40 = v11;
      if ((_WORD *)v11 == v39)
        return 1;
    }
    else
    {
      v40 = v11 + 2 * (v35 & 0x7FFFFFFFFFFFFFC0);
      v41 = 0uLL;
      v42 = (char *)v11;
      do
      {
        v84.val[0] = *(int8x16_t *)v37;
        v43 = *((int8x16_t *)v37 + 1);
        v86.val[0] = (int8x16_t)*((_OWORD *)v37 + 2);
        v44 = *((_OWORD *)v37 + 3);
        v37 += 64;
        v45 = v44;
        v86.val[1] = 0uLL;
        v88.val[0] = v43;
        v84.val[1] = 0uLL;
        v46 = v42;
        vst2q_s8(v46, v84);
        v46 += 32;
        v88.val[1] = 0uLL;
        vst2q_s8(v46, v88);
        v47 = v42 + 64;
        vst2q_s8(v47, v86);
        v48 = v42 + 96;
        vst2q_s8(v48, *(int8x16x2_t *)(&v41 - 1));
        v42 += 128;
      }
      while (v42 != (char *)v40);
      if ((_WORD *)v40 == v39)
        return 1;
    }
    v49 = v11 + 2 * v38 - v40 - 2;
    if (v49 < 0xE
      || v40 < (unint64_t)&v37[(v49 >> 1) + 1] && (unint64_t)v37 < (v49 & 0xFFFFFFFFFFFFFFFELL) + v40 + 2)
    {
      v50 = (_WORD *)v40;
      v51 = v37;
      goto LABEL_79;
    }
    v55 = (v49 >> 1) + 1;
    if (v49 >= 0x3E)
    {
      v56 = v55 & 0xFFFFFFFFFFFFFFE0;
      v61 = (uint8x8_t *)(v37 + 16);
      v62 = (uint16x8_t *)(v40 + 32);
      v63 = v55 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v64 = *(uint8x16_t *)v61[-2].i8;
        v65 = vmovl_u8(*v61);
        v66 = vmovl_high_u8(*(uint8x16_t *)v61->i8);
        v62[-2] = vmovl_u8(*(uint8x8_t *)v64.i8);
        v62[-1] = vmovl_high_u8(v64);
        *v62 = v65;
        v62[1] = v66;
        v62 += 4;
        v61 += 4;
        v63 -= 32;
      }
      while (v63);
      if (v55 == v56)
        return 1;
      if ((v55 & 0x18) == 0)
      {
        v51 = &v37[v56];
        v50 = (_WORD *)(v40 + 2 * v56);
        do
        {
LABEL_79:
          v52 = *v51++;
          *v50++ = v52;
        }
        while (v50 != v39);
        return 1;
      }
    }
    else
    {
      v56 = 0;
    }
    v50 = (_WORD *)(v40 + 2 * (v55 & 0xFFFFFFFFFFFFFFF8));
    v51 = &v37[v55 & 0xFFFFFFFFFFFFFFF8];
    v67 = (uint8x8_t *)&v37[v56];
    v68 = (uint16x8_t *)(v40 + 2 * v56);
    v69 = v56 - (v55 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v70 = *v67++;
      *v68++ = vmovl_u8(v70);
      v69 += 8;
    }
    while (v69);
    if (v55 == (v55 & 0xFFFFFFFFFFFFFFF8))
      return 1;
    goto LABEL_79;
  }
  v8 = __OFSUB__(a2, v7);
  v7 = a2 - v7;
  if (v7 < 0 == v8 && *((_QWORD *)this + 2) > a2)
  {
    if (v7 >= 0x7FFFFFFF)
      LODWORD(v7) = 0;
LABEL_88:
    v3 = 1;
    goto LABEL_89;
  }
  if (v6 > a2 || *((_QWORD *)this + 2) != v6)
    goto LABEL_15;
  v3 = 0;
  LODWORD(v7) = *((_DWORD *)this + 11);
LABEL_89:
  *((_DWORD *)this + 10) = v7;
  return v3;
}

uint64_t WTF::uTextLatin1ContextAwareExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  *a6 = 16;
  return 0;
}

uint64_t WTF::uTextLatin1ContextAwareClose(uint64_t this, UText *a2)
{
  *(_QWORD *)(this + 72) = 0;
  return this;
}

UText *WTF::openUTF16ContextAwareUTextProvider(UText *a1, const void *a2, unint64_t a3, const void *a4, int32_t a5, UErrorCode *status)
{
  UText *result;

  if (*(int *)status > 0)
    return 0;
  if (!a2 || a3 >> 31)
  {
    result = 0;
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  else
  {
    result = utext_setup(a1, 0, status);
    if (*(int *)status <= 0)
    {
      result->pFuncs = (const UTextFuncs *)&WTF::textUTF16ContextAwareFuncs;
      result->providerProperties = 4;
      result->context = a2;
      result->p = a2;
      result->a = a3;
      result->q = a4;
      result->b = a5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WTF::uTextUTF16ContextAwareNativeLength(WTF *this, UText *a2)
{
  return *((_QWORD *)this + 14) + *((int *)this + 30);
}

uint64_t WTF::uTextUTF16ContextAwareAccess(WTF *this, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  UText *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  int v16;

  v3 = *((_QWORD *)this + 9);
  if (v3)
  {
    v4 = *((_QWORD *)this + 14);
    v5 = *((_DWORD *)this + 30);
    v6 = v4 + v5;
    v7 = *((_QWORD *)this + 4);
    if (a3)
    {
      v8 = __OFSUB__(a2, v7);
      v9 = a2 - v7;
      if (v9 < 0 == v8 && *((_QWORD *)this + 2) > a2)
      {
        if (v9 >= 0x7FFFFFFF)
          v5 = 0;
        else
          v5 = v9;
LABEL_58:
        v3 = 1;
        goto LABEL_59;
      }
      if (v6 <= a2 && *((_QWORD *)this + 2) == v6)
      {
        v3 = 0;
        v5 = *((_DWORD *)this + 11);
LABEL_59:
        *((_DWORD *)this + 10) = v5;
        return v3;
      }
    }
    else
    {
      if (a2 > v7 && *((_QWORD *)this + 2) >= a2)
      {
        if (a2 - v7 >= 0x7FFFFFFF)
          v5 = 0;
        else
          v5 = a2 - v7;
        goto LABEL_58;
      }
      if (a2 <= 0 && !v7)
      {
        v5 = 0;
        v3 = 0;
        goto LABEL_59;
      }
    }
    if (a2 < 0)
    {
      v10 = 0;
    }
    else
    {
      v10 = (UText *)(v4 + v5);
      if (v6 >= a2)
      {
        v11 = *((_QWORD *)this + 6);
        if (v11)
        {
LABEL_19:
          v12 = *((_QWORD *)this + 10);
          if (v5 && a2 <= v5)
          {
            if (a2 != v5)
            {
              if (v11 != v12)
                goto LABEL_53;
              goto LABEL_52;
            }
            if ((a3 == 0) != (v11 == v12))
            {
              if (v11 == v12)
                goto LABEL_39;
LABEL_53:
              *((_QWORD *)this + 4) = 0;
              *((_QWORD *)this + 2) = v5;
              *((_DWORD *)this + 11) = v5;
              *((_DWORD *)this + 7) = v5;
              if (a2 >= 0x7FFFFFFF)
                v16 = 0;
              else
                v16 = a2;
              if (v5 >= v16)
                v5 = v16;
              goto LABEL_58;
            }
            if (!a3)
            {
LABEL_52:
              *((_QWORD *)this + 6) = *((_QWORD *)this + 11);
              goto LABEL_53;
            }
          }
          else if (v11 == v12)
          {
LABEL_39:
            *((_QWORD *)this + 4) = v5;
            *((_QWORD *)this + 2) = v6;
            if (v4 >= 0x7FFFFFFF)
              LODWORD(v4) = 0;
            *((_DWORD *)this + 11) = v4;
            *((_DWORD *)this + 7) = v4;
            v15 = a2 - v5;
            if (v15 >= 0x7FFFFFFF)
              LODWORD(v15) = 0;
            if ((int)v4 >= (int)v15)
              v5 = v15;
            else
              v5 = v4;
            goto LABEL_58;
          }
LABEL_38:
          *((_QWORD *)this + 6) = v12;
          goto LABEL_39;
        }
LABEL_27:
        if (a3)
          v13 = a2 == v5;
        else
          v13 = 0;
        v14 = !v13;
        if (v5 && a2 <= v5 && (v14 & 1) != 0)
          goto LABEL_52;
        v12 = *((_QWORD *)this + 10);
        goto LABEL_38;
      }
    }
    a2 = (uint64_t)v10;
    v11 = *((_QWORD *)this + 6);
    if (v11)
      goto LABEL_19;
    goto LABEL_27;
  }
  return v3;
}

uint64_t WTF::uTextUTF16ContextAwareExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  *a6 = 16;
  return 0;
}

uint64_t WTF::uTextUTF16ContextAwareClose(uint64_t this, UText *a2)
{
  *(_QWORD *)(this + 72) = 0;
  return this;
}

uint64_t WTF::Unicode::convert@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  unint64_t v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  int v17;
  char v18;
  unint64_t v19;
  unint64_t v20;

  v8 = result;
  v10 = 0;
  v11 = 0;
  v20 = 0;
  while (1)
  {
    v12 = v11;
    if (v10 >= a2)
    {
      v18 = 0;
      goto LABEL_20;
    }
    v13 = v10 + 1;
    v14 = *(unsigned __int16 *)(v8 + 2 * v10);
    if (v10 + 1 != a2 && (v14 & 0xFC00) == 0xD800)
      break;
    ++v10;
    if (v14 >> 11 == 27)
      goto LABEL_19;
LABEL_15:
    if (v20 != a4)
    {
      result = WTF::Unicode::append<(WTF::Unicode::Replacement)0,char8_t>(a3, a4, &v20, v14);
      v11 = v14 | v12;
      if (!(_DWORD)result)
        continue;
    }
    v18 = 2;
    goto LABEL_20;
  }
  if (a2 <= v13)
    goto LABEL_22;
  v15 = *(unsigned __int16 *)(v8 + 2 * v13);
  v16 = (v15 & 0xFC00) == 56320;
  v17 = v15 + (v14 << 10) - 56613888;
  if (v16)
    v10 += 2;
  else
    ++v10;
  if (v16)
    v14 = v17;
  if (v14 >> 11 != 27)
    goto LABEL_15;
LABEL_19:
  v18 = 1;
LABEL_20:
  *(_BYTE *)a5 = v18;
  v19 = v20;
  if (a4 >= v20)
  {
    *(_QWORD *)(a5 + 8) = a3;
    *(_QWORD *)(a5 + 16) = v19;
    *(_BYTE *)(a5 + 24) = v12 < 0x80;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

{
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  unint64_t v15;

  v15 = 0;
  if (a2)
  {
    v9 = result;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      while (1)
      {
        result = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>(v9, a2, &v15);
        if ((_DWORD)result == -1)
        {
          v13 = 1;
          goto LABEL_19;
        }
        if (v11 == a4)
        {
          v14 = 2;
          goto LABEL_17;
        }
        if (WORD1(result))
          break;
        if (a4 <= v11)
          goto LABEL_21;
        v12 = v11 + 1;
        *(_WORD *)(a3 + 2 * v11) = result;
        v10 |= result;
        ++v11;
        if (v15 >= a2)
          goto LABEL_13;
      }
      if (WORD1(result) > 0x10u || v11 + 1 >= a4)
        break;
      if (a4 <= v11)
        goto LABEL_21;
      *(_WORD *)(a3 + 2 * v11) = (result >> 10) - 10304;
      v12 = v11 + 2;
      *(_WORD *)(a3 + 2 * (v11 + 1)) = result & 0x3FF | 0xDC00;
      v10 |= result;
      v11 += 2;
      if (v15 >= a2)
      {
LABEL_13:
        v13 = 0;
        v11 = v12;
        goto LABEL_19;
      }
    }
    v13 = 2;
LABEL_19:
    *(_BYTE *)a5 = v13;
    if (a4 >= v11)
      goto LABEL_20;
LABEL_21:
    __break(1u);
  }
  else
  {
    a4 = 0;
    v10 = 0;
    v14 = 0;
LABEL_17:
    *(_BYTE *)a5 = v14;
    v11 = a4;
LABEL_20:
    *(_QWORD *)(a5 + 8) = a3;
    *(_QWORD *)(a5 + 16) = v11;
    *(_BYTE *)(a5 + 24) = v10 < 0x80;
  }
  return result;
}

uint64_t WTF::Unicode::convert@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned __int8 *v8;
  int v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  char v14;
  BOOL v15;
  unint64_t v16;

  v8 = (unsigned __int8 *)result;
  v10 = 0;
  v16 = 0;
  while (1)
  {
    v11 = v10;
    v12 = v16;
    if (!a2)
      break;
    if (v16 == a4)
      goto LABEL_9;
    v13 = *v8++;
    result = WTF::Unicode::append<(WTF::Unicode::Replacement)0,char8_t>(a3, a4, &v16, v13);
    v10 = v11 | v13;
    --a2;
    if ((_DWORD)result)
    {
      v14 = 2;
      v12 = v16;
      goto LABEL_7;
    }
  }
  v14 = 0;
LABEL_7:
  *(_BYTE *)a5 = v14;
  v15 = a4 >= v12;
  a4 = v12;
  if (v15)
    goto LABEL_10;
  __break(1u);
LABEL_9:
  *(_BYTE *)a5 = 2;
LABEL_10:
  *(_QWORD *)(a5 + 8) = a3;
  *(_QWORD *)(a5 + 16) = a4;
  *(_BYTE *)(a5 + 24) = v11 < 0x80;
  return result;
}

uint64_t WTF::Unicode::convertReplacingInvalidSequences@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;

  v20 = 0;
  if (!a2)
  {
    a4 = 0;
    v10 = 0;
    v19 = 0;
LABEL_26:
    *(_BYTE *)a5 = v19;
    v17 = a4;
LABEL_28:
    *(_QWORD *)(a5 + 8) = a3;
    *(_QWORD *)(a5 + 16) = v17;
    *(_BYTE *)(a5 + 24) = v10 < 0x80;
    return result;
  }
  v9 = result;
  v10 = 0;
  v11 = 0;
  while (1)
  {
    v12 = v11 + 1;
    v13 = *(unsigned __int16 *)(v9 + 2 * v11);
    if ((v13 & 0xF800) == 0xD800)
    {
      if (v12 == a2 || (v13 & 0x400) != 0)
      {
        ++v11;
        v13 = 65533;
        if (v20 == a4)
          goto LABEL_25;
      }
      else
      {
        if (a2 <= v12)
          goto LABEL_30;
        v14 = *(unsigned __int16 *)(v9 + 2 * v12);
        v15 = (v14 & 0xFC00) == 56320;
        v16 = v14 + (v13 << 10) - 56613888;
        if (v15)
          v11 += 2;
        else
          ++v11;
        if (v15)
          v13 = v16;
        else
          v13 = 65533;
        if (v20 == a4)
        {
LABEL_25:
          v19 = 2;
          goto LABEL_26;
        }
      }
    }
    else
    {
      ++v11;
      if (v20 == a4)
        goto LABEL_25;
    }
    result = WTF::Unicode::append<(WTF::Unicode::Replacement)0,char8_t>(a3, a4, &v20, v13);
    if ((_DWORD)result)
      break;
LABEL_3:
    v10 |= v13;
    if (v11 >= a2)
    {
      v17 = v20;
      *(_BYTE *)a5 = 0;
      if (a4 >= v17)
        goto LABEL_28;
      goto LABEL_30;
    }
  }
  v17 = v20;
  v18 = v20 + 2;
  if (v20 + 2 < a4)
  {
    if (a4 <= v20)
      goto LABEL_30;
    *(_BYTE *)(a3 + v20) = -17;
    if (a4 <= v17 + 1)
      goto LABEL_30;
    *(_BYTE *)(a3 + v17 + 1) = -65;
    v20 = v17 + 3;
    *(_BYTE *)(a3 + v18) = -67;
    goto LABEL_3;
  }
  *(_BYTE *)a5 = 2;
  if (a4 >= v17)
    goto LABEL_28;
LABEL_30:
  __break(1u);
  return result;
}

{
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v19;
  char v20;

  if (!a2)
  {
    a4 = 0;
    v5 = 0;
    v20 = 0;
LABEL_48:
    *(_BYTE *)a5 = v20;
    *(_QWORD *)(a5 + 8) = a3;
    *(_QWORD *)(a5 + 16) = a4;
    *(_BYTE *)(a5 + 24) = v5 < 0x80;
    return result;
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
  do
  {
    v9 = v7;
    v10 = v6 + 1;
    v11 = *(char *)(result + v6);
    v12 = *(unsigned __int8 *)(result + v6);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_7;
    if (v10 == a2)
    {
LABEL_10:
      v12 = 65533;
      v6 = a2;
      if (v9 == a4)
        goto LABEL_47;
      goto LABEL_27;
    }
    if (v12 < 0xE0)
    {
      if (v12 < 0xC2)
        goto LABEL_45;
      v15 = v12 & 0x1F;
    }
    else
    {
      if (v12 > 0xEF)
      {
        v19 = v12 - 240;
        if (v19 > 4)
          goto LABEL_45;
        if (a2 <= v10)
          goto LABEL_51;
        v13 = *(unsigned __int8 *)(result + v10);
        if (((byte_199123850[v13 >> 4] >> v19) & 1) == 0)
          goto LABEL_45;
        v10 = v6 + 2;
        if (v6 + 2 == a2)
          goto LABEL_10;
        if (a2 <= v10)
          goto LABEL_51;
        v14 = *(unsigned __int8 *)(result + v10) ^ 0x80;
        if (v14 > 0x3F)
        {
LABEL_45:
          v12 = 65533;
LABEL_7:
          v6 = v10;
          if (v9 == a4)
            goto LABEL_47;
          goto LABEL_27;
        }
        LODWORD(v13) = v13 & 0x3F | (v19 << 6);
        if (++v10 == a2)
          goto LABEL_10;
      }
      else
      {
        if (a2 <= v10)
          goto LABEL_51;
        v13 = v11 & 0xF;
        if (((a00000000000000[v13] >> (*(_BYTE *)(result + v10) >> 5)) & 1) == 0)
          goto LABEL_45;
        v14 = *(_BYTE *)(result + v10++) & 0x3F;
        if (v10 == a2)
          goto LABEL_10;
      }
      v15 = v14 | ((_DWORD)v13 << 6);
    }
    if (a2 <= v10)
      goto LABEL_51;
    v16 = *(unsigned __int8 *)(result + v10) ^ 0x80;
    v17 = v16 > 0x3F;
    v12 = v16 | (v15 << 6);
    if (v17)
      v6 = v10;
    else
      v6 = v10 + 1;
    if (v17)
      v12 = 65533;
    if (v9 == a4)
    {
LABEL_47:
      v20 = 2;
      goto LABEL_48;
    }
LABEL_27:
    if (HIWORD(v12))
    {
      if (HIWORD(v12) > 0x10u || v9 + 1 >= a4)
      {
        if (a4 <= v9)
          goto LABEL_51;
        v8 = -3;
        v7 = v9 + 1;
      }
      else
      {
        if (a4 <= v9)
          goto LABEL_51;
        *(_WORD *)(a3 + 2 * v9) = (v12 >> 10) - 10304;
        v8 = v12 & 0x3FF | 0xDC00;
        v7 = v9 + 2;
        ++v9;
      }
    }
    else
    {
      if (a4 <= v9)
        goto LABEL_51;
      v7 = v9 + 1;
      v8 = v12;
    }
    *(_WORD *)(a3 + 2 * v9) = v8;
    v5 |= v12;
  }
  while (v6 < a2);
  *(_BYTE *)a5 = 0;
  if (a4 >= v7)
  {
    *(_QWORD *)(a5 + 8) = a3;
    *(_QWORD *)(a5 + 16) = v7;
    *(_BYTE *)(a5 + 24) = v5 < 0x80;
    return result;
  }
LABEL_51:
  __break(1u);
  return result;
}

uint64_t WTF::Unicode::checkUTF8@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = result;
  if (!a2)
    goto LABEL_10;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  do
  {
    v10 = v8;
    result = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>(v3, a2, &v10);
    if ((_DWORD)result == -1)
      break;
    v8 = v10;
    v9 = result < 0x10000 ? 1 : 2;
    v6 += v9;
    v7 |= result;
  }
  while (v10 < a2);
  if (a2 < v8)
  {
    __break(1u);
LABEL_10:
    v6 = 0;
    v7 = 0;
    v8 = 0;
  }
  *(_QWORD *)a3 = v3;
  *(_QWORD *)(a3 + 8) = v8;
  *(_QWORD *)(a3 + 16) = v6;
  *(_BYTE *)(a3 + 24) = v7 < 0x80;
  return result;
}

uint64_t WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>(uint64_t result, unint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;

  v3 = *a3;
  v4 = *a3 + 1;
  *a3 = v4;
  if (a2 <= v3)
    goto LABEL_26;
  v5 = *(char *)(result + v3);
  v6 = *(unsigned __int8 *)(result + v3);
  if ((v5 & 0x80000000) == 0)
    return *(unsigned __int8 *)(result + v3);
  if (v4 == a2)
    return 0xFFFFFFFFLL;
  if (v6 < 0xE0)
  {
    if (v6 >= 0xC2)
    {
      v9 = v6 & 0x1F;
      if (a2 > v4)
        goto LABEL_14;
      goto LABEL_26;
    }
    return 0xFFFFFFFFLL;
  }
  if (v6 <= 0xEF)
  {
    if (a2 > v4)
    {
      v7 = v5 & 0xF;
      if (((a00000000000000[v7] >> (*(_BYTE *)(result + v4) >> 5)) & 1) == 0)
        return 0xFFFFFFFFLL;
      v8 = *(_BYTE *)(result + v4++) & 0x3F;
      *a3 = v4;
      if (v4 == a2)
        return 0xFFFFFFFFLL;
      goto LABEL_10;
    }
LABEL_26:
    __break(1u);
    return result;
  }
  v12 = v6 - 240;
  if (v12 > 4)
    return 0xFFFFFFFFLL;
  if (a2 <= v4)
    goto LABEL_26;
  v7 = *(unsigned __int8 *)(result + v4);
  if (((byte_199123850[v7 >> 4] >> v12) & 1) == 0)
    return 0xFFFFFFFFLL;
  v13 = v3 + 2;
  *a3 = v3 + 2;
  if (v3 + 2 == a2)
    return 0xFFFFFFFFLL;
  if (a2 <= v13)
    goto LABEL_26;
  v8 = *(unsigned __int8 *)(result + v13) ^ 0x80;
  if (v8 > 0x3F)
    return 0xFFFFFFFFLL;
  LODWORD(v7) = v7 & 0x3F | (v12 << 6);
  v4 = v13 + 1;
  *a3 = v4;
  if (v4 == a2)
    return 0xFFFFFFFFLL;
LABEL_10:
  v9 = v8 | ((_DWORD)v7 << 6);
  if (a2 <= v4)
    goto LABEL_26;
LABEL_14:
  v10 = *(unsigned __int8 *)(result + v4) ^ 0x80;
  if (v10 > 0x3F)
    return 0xFFFFFFFFLL;
  v11 = v10 | (v9 << 6);
  *a3 = v4 + 1;
  if (v11 >> 11 == 27)
    return 0xFFFFFFFFLL;
  else
    return v11;
}

uint64_t WTF::Unicode::computeUTF16LengthWithHash(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  int v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v14;

  v14 = 0;
  if (!a2)
    return 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = -1640531527;
  while (1)
  {
    v11 = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>(a1, a2, &v14);
    if (v11 == -1)
      break;
    if (HIWORD(v11))
    {
      v8 = (unsigned __int16)(v11 >> 10) + 55232;
      v9 = ((v7 + v5) << 16) ^ (v8 << 11) ^ (v7 + v5);
      v10 = !v6;
      v6 = v6;
      if (v10)
        v5 = (unsigned __int16)(v11 >> 10) + 55232;
      else
        v5 = v11 & 0x3FF | 0xDC00;
      if (v10)
        v9 = (((v11 & 0x3FF) << 11) | 0x6E00000) ^ ((v7 + v8) << 16) ^ (v7 + v8);
      v7 = v9 + (v9 >> 11);
      v4 += 2;
      if (v14 >= a2)
        return v4;
    }
    else
    {
      v10 = !v6;
      v6 = !v6;
      if (v10)
      {
        v5 = (unsigned __int16)v11;
      }
      else
      {
        v12 = ((unsigned __int16)v11 << 11) ^ ((v7 + v5) << 16) ^ (v7 + v5);
        v7 = v12 + (v12 >> 11);
      }
      ++v4;
      if (v14 >= a2)
        return v4;
    }
  }
  return 0;
}

uint64_t WTF::Unicode::equal(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  int v14;
  unint64_t v16;

  v7 = result;
  v8 = 0;
  v16 = 0;
  while (v8 < a2 && v16 < a4)
  {
    v10 = v8 + 1;
    v11 = *(unsigned __int16 *)(v7 + 2 * v8);
    if (v8 + 1 != a2 && (v11 & 0xFC00) == 0xD800)
    {
      if (a2 <= v10)
      {
        __break(1u);
        return result;
      }
      v12 = *(unsigned __int16 *)(v7 + 2 * v10);
      v13 = (v12 & 0xFC00) == 56320;
      v14 = v12 + (v11 << 10) - 56613888;
      if (v13)
        v10 = v8 + 2;
      else
        v10 = v8 + 1;
      if (v13)
        v11 = v14;
    }
    if (v11 >> 11 == 27)
      v9 = -1;
    else
      v9 = v11;
    result = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>(a3, a4, &v16);
    v8 = v10;
    if (v9 != (_DWORD)result)
      return 0;
  }
  return v8 == a2 && v16 == a4;
}

BOOL WTF::Unicode::equal(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unint64_t v14;

  v8 = 0;
  v14 = 0;
  while (v8 < a2 && v14 < a4)
  {
    v9 = v8 + 1;
    v10 = *(unsigned __int8 *)(a1 + v8);
    v11 = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>(a3, a4, &v14);
    v8 = v9;
    if (v11 != v10)
      return 0;
  }
  return a2 == v8 && v14 == a4;
}

uint64_t WTF::Unicode::append<(WTF::Unicode::Replacement)0,char8_t>(uint64_t result, unint64_t a2, unint64_t *a3, unsigned int a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (a4 <= 0x7F)
  {
    v4 = (*a3)++;
    if (a2 > v4)
    {
      *(_BYTE *)(result + v4) = a4;
      return 0;
    }
    goto LABEL_23;
  }
  if (a4 <= 0x7FF)
  {
    v5 = *a3;
    v6 = *a3 + 1;
    if (v6 < a2)
    {
      *a3 = v6;
      if (a2 > v5)
      {
        *(_BYTE *)(result + v5) = (a4 >> 6) | 0xC0;
        *a3 = v5 + 2;
        *(_BYTE *)(result + v6) = a4 & 0x3F | 0x80;
        return 0;
      }
      goto LABEL_23;
    }
LABEL_17:
    v8 = v5 + 2;
    if (v5 + 2 < a2)
    {
      v12 = v5 + 1;
      *a3 = v5 + 1;
      if (a2 > v5)
      {
        *(_BYTE *)(result + v5) = (a4 >> 12) | 0xE0;
        *a3 = v8;
        if (a2 > v12)
        {
          *(_BYTE *)(result + v12) = (a4 >> 6) & 0x3F | 0x80;
          v11 = v5 + 3;
          goto LABEL_21;
        }
      }
      goto LABEL_23;
    }
    return 1;
  }
  if (a4 >> 11 < 0x1B || (a4 & 0xFFFFE000) == 0xE000)
  {
    v5 = *a3;
    goto LABEL_17;
  }
  if ((a4 - 0x10000) >> 20)
    return 1;
  v7 = *a3;
  v8 = *a3 + 3;
  if (v8 >= a2)
    return 1;
  v9 = v7 + 1;
  *a3 = v7 + 1;
  if (a2 > v7)
  {
    *(_BYTE *)(result + v7) = (a4 >> 18) | 0xF0;
    v10 = v7 + 2;
    *a3 = v7 + 2;
    if (a2 > v9)
    {
      *(_BYTE *)(result + v9) = (a4 >> 12) & 0x3F | 0x80;
      *a3 = v8;
      if (a2 > v10)
      {
        *(_BYTE *)(result + v10) = (a4 >> 6) & 0x3F | 0x80;
        v11 = v7 + 4;
LABEL_21:
        *a3 = v11;
        *(_BYTE *)(result + v8) = a4 & 0x3F | 0x80;
        return 0;
      }
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

unint64_t WTF::UUID::generateWeakRandomUUIDVersion4(WTF::UUID *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  int v15;

  if (__ldaxr(_MergedGlobals_18))
  {
    __clrex();
  }
  else if (!__stxr(1u, _MergedGlobals_18))
  {
    goto LABEL_5;
  }
  this = (WTF::UUID *)WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)_MergedGlobals_18);
LABEL_5:
  if (byte_1ECF58378 == 1)
  {
    v9 = unk_1ECF58388;
    v10 = qword_1ECF58380 ^ (qword_1ECF58380 << 23);
    v11 = v10 >> 17;
  }
  else
  {
    v12 = WTF::cryptographicallyRandomNumber<unsigned int>((uint64_t)this, a2, a3, a4, a5, a6, a7, a8);
    if (v12 <= 1)
      v13 = 1;
    else
      v13 = v12;
    v10 = ((unint64_t)v13 << 23) ^ v13;
    v11 = v10 >> 17;
    v9 = (v10 >> 17) ^ ((v13 >> 26) & 0xFF800000007FFFFFLL | ((unint64_t)v13 << 23));
    byte_1ECF58378 = 1;
  }
  v14 = v10 ^ v11 ^ (v9 >> 26) ^ v9;
  qword_1ECF58380 = v14;
  unk_1ECF58388 = ((v9 ^ (v9 << 23)) >> 17) ^ (v14 >> 26) ^ v9 ^ (v9 << 23) ^ v14;
  v15 = __ldxr(_MergedGlobals_18);
  if (v15 == 1)
  {
    if (!__stlxr(0, _MergedGlobals_18))
      return ((((v9 ^ (v9 << 23)) >> 17) ^ (v14 >> 26) ^ v9 ^ (v9 << 23) ^ v14) + v14) & 0x3FFFFFFFFFFFFFFFLL | 0x8000000000000000;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(_MergedGlobals_18, 0, a3, a4, a5, a6, a7, a8);
  return ((((v9 ^ (v9 << 23)) >> 17) ^ (v14 >> 26) ^ v9 ^ (v9 << 23) ^ v14) + v14) & 0x3FFFFFFFFFFFFFFFLL | 0x8000000000000000;
}

unint64_t WTF::UUID::createVersion5(_BYTE *a1)
{
  return ((unint64_t)a1[9] << 48) & 0xC0FFFFFFFFFFFFFFLL | ((unint64_t)(a1[8] & 0x3F) << 56) | ((unint64_t)a1[10] << 40) | ((unint64_t)a1[11] << 32) | ((unint64_t)a1[12] << 24) | ((unint64_t)a1[13] << 16) | a1[15] | ((unint64_t)a1[14] << 8) | 0x8000000000000000;
}

unint64_t WTF::UUID::createVersion5(uint64_t a1, uint64_t a2, const void *a3, CC_LONG a4)
{
  __int128 v6;
  CC_SHA1_CTX c;
  unsigned __int8 md[8];
  uint64_t v10;
  int v11;
  __int128 data;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  LOBYTE(v6) = HIBYTE(a2);
  BYTE1(v6) = BYTE6(a2);
  BYTE2(v6) = BYTE5(a2);
  BYTE3(v6) = BYTE4(a2);
  BYTE4(v6) = BYTE3(a2);
  BYTE5(v6) = BYTE2(a2);
  BYTE6(v6) = BYTE1(a2);
  BYTE7(v6) = a2;
  BYTE8(v6) = HIBYTE(a1);
  BYTE9(v6) = BYTE6(a1);
  BYTE10(v6) = BYTE5(a1);
  BYTE11(v6) = BYTE4(a1);
  BYTE12(v6) = BYTE3(a1);
  BYTE13(v6) = BYTE2(a1);
  BYTE14(v6) = BYTE1(a1);
  HIBYTE(v6) = a1;
  data = v6;
  CC_SHA1_Init(&c);
  CC_SHA1_Update(&c, &data, 0x10u);
  CC_SHA1_Update(&c, a3, a4);
  *(_QWORD *)md = 0;
  v10 = 0;
  v11 = 0;
  CC_SHA1_Final(md, &c);
  return ((unint64_t)BYTE1(v10) << 48) & 0xC0FFFFFFFFFFFFFFLL | ((unint64_t)(v10 & 0x3F) << 56) | ((unint64_t)BYTE2(v10) << 40) | ((unint64_t)BYTE3(v10) << 32) | ((unint64_t)BYTE4(v10) << 24) | ((unint64_t)BYTE5(v10) << 16) | HIBYTE(v10) | ((unint64_t)BYTE6(v10) << 8) | 0x8000000000000000;
}

WTF::UUID *WTF::UUID::UUID(WTF::UUID *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  WTF::cryptographicallyRandomValues((uint64_t)&v11, 16, a3, a4, a5, a6, a7, a8);
  v9 = v12 & 0xFFFFFFFFFFFF0FFFLL | 0x4000;
  *(_QWORD *)this = v11 & 0x3FFFFFFFFFFFFFFFLL | 0x8000000000000000;
  *((_QWORD *)this + 1) = v9;
  return this;
}

{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  WTF::cryptographicallyRandomValues((uint64_t)&v11, 16, a3, a4, a5, a6, a7, a8);
  v9 = v12 & 0xFFFFFFFFFFFF0FFFLL | 0x4000;
  *(_QWORD *)this = v11 & 0x3FFFFFFFFFFFFFFFLL | 0x8000000000000000;
  *((_QWORD *)this + 1) = v9;
  return this;
}

uint64_t WTF::UUID::toString@<X0>(WTF::UUID *this@<X0>, int **a2@<X8>)
{
  unint64_t v3;
  uint64_t result;
  int v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11[2];
  int **v12;
  int *v13;

  v3 = *((_QWORD *)this + 1);
  v9 = *(_QWORD *)this;
  v10 = v3;
  result = _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_(&v9);
  if ((result & 0x80000000) == 0)
  {
    v5 = result;
    if (!(_DWORD)result)
    {
      v8 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_6;
    }
    v7 = v9;
    v6 = v10;
    result = WTF::tryFastCompactMalloc((WTF *)(result + 20), v11);
    v8 = (int *)v11[0];
    if (v11[0])
    {
      *(_DWORD *)v11[0] = 2;
      v8[1] = v5;
      *((_QWORD *)v8 + 1) = v8 + 5;
      v8[4] = 4;
      v11[0] = v7;
      v11[1] = v6;
      v12 = &v13;
      v13 = v8 + 5;
      result = (uint64_t)_ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIhEEvPT_EUlDpOT_E_EEDcOS5_(v11, (_BYTE ***)&v12);
LABEL_6:
      *a2 = v8;
      return result;
    }
  }
  *a2 = 0;
  __break(0xC471u);
  return result;
}

unint64_t WTF::UUID::parse@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;

  if ((_DWORD)a2 != 36)
    goto LABEL_47;
  v4 = result;
  v5 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) == 0)
  {
    if (*(_WORD *)(result + 16) == 45
      && *(_WORD *)(result + 26) == 45
      && *(_WORD *)(result + 36) == 45
      && *(_WORD *)(result + 46) == 45
      && *(_WORD *)result != 43
      && *(_WORD *)(result + 18) != 43
      && *(_WORD *)(result + 38) != 43)
    {
      v6 = *(unsigned __int16 *)(result + 48);
      goto LABEL_19;
    }
LABEL_47:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
  if (*(_BYTE *)(result + 8) != 45
    || *(_BYTE *)(result + 13) != 45
    || *(_BYTE *)(result + 18) != 45
    || *(_BYTE *)(result + 23) != 45
    || *(_BYTE *)result == 43
    || *(_BYTE *)(result + 9) == 43
    || *(_BYTE *)(result + 19) == 43)
  {
    goto LABEL_47;
  }
  v6 = *(unsigned __int8 *)(result + 24);
LABEL_19:
  if (v6 == 43)
    goto LABEL_47;
  v7 = v5 ? 0x100000008 : 8;
  result = WTF::parseInteger<unsigned long long>(result, v7);
  if (!v8)
    goto LABEL_47;
  v9 = result;
  v10 = v5 ? v4 + 9 : v4 + 18;
  v11 = v5 ? 0x100000004 : 4;
  result = WTF::parseInteger<unsigned long long>(v10, v11);
  if (!v12)
    goto LABEL_47;
  v13 = result;
  v14 = v5 ? v4 + 14 : v4 + 28;
  result = WTF::parseInteger<unsigned long long>(v14, v11);
  if (!v15)
    goto LABEL_47;
  v16 = result;
  v17 = v5 ? v4 + 19 : v4 + 38;
  result = WTF::parseInteger<unsigned long long>(v17, v11);
  if (!v18)
    goto LABEL_47;
  v19 = result;
  v20 = v5 ? v4 + 24 : v4 + 48;
  v21 = v5 ? 0x10000000CLL : 12;
  result = WTF::parseInteger<unsigned long long>(v20, v21);
  if (!v22)
    goto LABEL_47;
  v23 = result | (v19 << 48);
  if (v23 <= 1)
    goto LABEL_47;
  *(_QWORD *)a3 = v23;
  *(_QWORD *)(a3 + 8) = (v13 << 16) | (v9 << 32) | v16;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

unint64_t WTF::parseInteger<unsigned long long>(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFF00000000) != 0)
    return WTF::parseInteger<unsigned long long,unsigned char>(a1, a2, 0x10u, 0);
  else
    return WTF::parseInteger<unsigned long long,char16_t>(a1, a2, 0x10u, 0);
}

unint64_t WTF::UUID::parseVersion4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  result = WTF::UUID::parse(a1, a2, (uint64_t)&v6);
  if ((_BYTE)v7 && (WORD4(v6) & 0xF000) == 0x4000 && (unint64_t)v6 >> 62 == 2)
  {
    v5 = v7;
    *a3 = v6;
    a3[1] = v5;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *((_BYTE *)a3 + 16) = 0;
  }
  return result;
}

uint64_t WTF::createVersion4UUIDString@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, int **a7@<X8>)
{
  uint64_t result;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int **v18;
  int *v19;

  v16 = 0;
  v17 = 0;
  WTF::cryptographicallyRandomValues((uint64_t)&v16, 16, a1, a2, a3, a4, a5, a6);
  v14 = v16 & 0x3FFFFFFFFFFFFFFFLL | 0x8000000000000000;
  v15 = v17 & 0xFFFFFFFFFFFF0FFFLL | 0x4000;
  result = _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_(&v14);
  if ((result & 0x80000000) == 0)
  {
    v10 = result;
    if (!(_DWORD)result)
    {
      v13 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_6;
    }
    v12 = v14;
    v11 = v15;
    result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v16);
    v13 = (int *)v16;
    if (v16)
    {
      *(_DWORD *)v16 = 2;
      v13[1] = v10;
      *((_QWORD *)v13 + 1) = v13 + 5;
      v13[4] = 4;
      v16 = v12;
      v17 = v11;
      v18 = &v19;
      v19 = v13 + 5;
      result = (uint64_t)_ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIhEEvPT_EUlDpOT_E_EEDcOS5_(&v16, (_BYTE ***)&v18);
LABEL_6:
      *a7 = v13;
      return result;
    }
  }
  *a7 = 0;
  __break(0xC471u);
  return result;
}

uint64_t WTF::createVersion4UUIDStringWeak@<X0>(WTF *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>)
{
  unint64_t v10;
  uint64_t result;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  unint64_t WeakRandomUUIDVersion4;
  unint64_t v17;
  unint64_t v18[2];
  int **v19;
  int *v20;

  WeakRandomUUIDVersion4 = WTF::UUID::generateWeakRandomUUIDVersion4(this, a2, a3, a4, a5, a6, a7, a8);
  v17 = v10;
  result = _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_(&WeakRandomUUIDVersion4);
  if ((result & 0x80000000) == 0)
  {
    v12 = result;
    if (!(_DWORD)result)
    {
      v15 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_6;
    }
    v14 = WeakRandomUUIDVersion4;
    v13 = v17;
    result = WTF::tryFastCompactMalloc((WTF *)(result + 20), v18);
    v15 = (int *)v18[0];
    if (v18[0])
    {
      *(_DWORD *)v18[0] = 2;
      v15[1] = v12;
      *((_QWORD *)v15 + 1) = v15 + 5;
      v15[4] = 4;
      v18[0] = v14;
      v18[1] = v13;
      v19 = &v20;
      v20 = v15 + 5;
      result = (uint64_t)_ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIhEEvPT_EUlDpOT_E_EEDcOS5_(v18, (_BYTE ***)&v19);
LABEL_6:
      *a9 = v15;
      return result;
    }
  }
  *a9 = 0;
  __break(0xC471u);
  return result;
}

void WTF::bootSessionUUIDString(uint64_t *a1@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  char v5;
  char **v6;
  char *v7;

  v3 = atomic_load(&WTF::bootSessionUUIDString(void)::onceKey);
  if (v3 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(&WTF::bootSessionUUIDString(void)::onceKey, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::bootSessionUUIDString(void)::$_0 &&>>);
  }
  v4 = WTF::bootSessionUUIDString(void)::bootSessionUUID;
  if (WTF::bootSessionUUIDString(void)::bootSessionUUID)
    *(_DWORD *)WTF::bootSessionUUIDString(void)::bootSessionUUID += 2;
  *a1 = v4;
}

BOOL WTF::isVersion4UUID(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  WTF::UUID::parse(a1, a2, (uint64_t)&v4);
  return v6 && ((unsigned __int16)v5 & 0xF000 ^ 0x4000 | v4 & 0xC000000000000000) == 0x8000000000000000;
}

unint64_t WTF::parseInteger<unsigned long long,unsigned char>(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  char v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *i;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  int v23;
  uint64_t v25;
  int v26;

  if (!a1 || !a2)
    return 0;
  v4 = 0;
  while (1)
  {
    v5 = *(unsigned __int8 *)(a1 + v4);
    if (v5 - 9 >= 5 && v5 != 32)
      break;
    if (a2 == ++v4)
      return 0;
  }
  if (v5 != 43)
  {
    v7 = (unsigned __int8 *)(a1 + v4);
    v6 = a2 - v4;
    v8 = v5 - 48;
    if (v5 - 48 > 9)
      goto LABEL_10;
    goto LABEL_17;
  }
  if (a2 - 1 == v4)
    return 0;
  v6 = ~v4 + a2;
  v7 = (unsigned __int8 *)(a1 + v4 + 1);
  v5 = *v7;
  v8 = v5 - 48;
  if (v5 - 48 <= 9)
  {
LABEL_17:
    if (v8 < a3)
    {
      if ((int)a3 >= 36)
        v11 = 36;
      else
        v11 = a3;
      v10 = v11 + 87;
      goto LABEL_22;
    }
    return 0;
  }
LABEL_10:
  if ((v5 | 0x20) < 0x61)
    return 0;
  v9 = (int)a3 >= 36 ? 36 : a3;
  v10 = v9 + 87;
  if (v9 + 87 <= (v5 | 0x20))
    return 0;
LABEL_22:
  v12 = 0;
  v13 = 0;
  v14 = &v7[v6];
  v15 = v6 - 1;
  for (i = v7 + 1; ; ++i)
  {
    v17 = v5 - 48;
    v18 = v5 - 48;
    v19 = (v5 | 0x20) - 87;
    if (v17 < 0xA)
      v19 = v18;
    v20 = (v12 * (unsigned __int128)a3) >> 64;
    if (is_mul_ok(v12, a3))
      v12 *= a3;
    v21 = __CFADD__(v12, v19);
    v22 = v12 + v19;
    v23 = v21;
    if (!v21)
      v12 = v22;
    if (v20 ? 1 : v23)
      v13 = 1;
    if (!v15)
      break;
    ++v7;
    v5 = *i;
    if (v5 - 48 <= 9)
    {
      if (v5 - 48 >= a3)
      {
        v14 = v7;
        break;
      }
    }
    else if ((v5 | 0x20) < 0x61 || v10 <= (v5 | 0x20))
    {
      v14 = i;
      break;
    }
    --v15;
  }
  if (v13)
    return 0;
  if (!a4 && v15)
  {
    v25 = 0;
    while (1)
    {
      v26 = v14[v25];
      if ((v26 - 9) >= 5 && v26 != 32)
        break;
      if (v15 == ++v25)
        return v12;
    }
    return 0;
  }
  return v12;
}

unint64_t WTF::parseInteger<unsigned long long,char16_t>(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unsigned __int16 *i;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  int v21;
  uint64_t v23;
  int v24;

  if (!a1 || !a2)
    return 0;
  for (i = (unsigned __int16 *)(a1 + 2); ; ++i)
  {
    v5 = *(i - 1);
    if (v5 - 9 >= 5 && v5 != 32)
      break;
    if (!--a2)
      return 0;
  }
  if (v5 != 43)
  {
    --i;
    v6 = v5 - 48;
    if (v5 - 48 > 9)
      goto LABEL_10;
    goto LABEL_17;
  }
  if (!--a2)
    return 0;
  v5 = *i;
  v6 = v5 - 48;
  if (v5 - 48 <= 9)
  {
LABEL_17:
    if (v6 < a3)
    {
      if ((int)a3 >= 36)
        v9 = 36;
      else
        v9 = a3;
      v8 = v9 + 87;
      goto LABEL_22;
    }
    return 0;
  }
LABEL_10:
  if ((v5 | 0x20) < 0x61)
    return 0;
  v7 = (int)a3 >= 36 ? 36 : a3;
  v8 = v7 + 87;
  if (v7 + 87 <= (v5 | 0x20))
    return 0;
LABEL_22:
  v10 = 0;
  v11 = 0;
  v12 = a2 - 1;
  v13 = i + 1;
  v14 = &i[a2];
  while (1)
  {
    v15 = v5 - 48;
    v16 = v5 - 48;
    v17 = (v5 | 0x20) - 87;
    if (v15 < 0xA)
      v17 = v16;
    v18 = (v10 * (unsigned __int128)a3) >> 64;
    if (is_mul_ok(v10, a3))
      v10 *= a3;
    v19 = __CFADD__(v10, v17);
    v20 = v10 + v17;
    v21 = v19;
    if (!v19)
      v10 = v20;
    if (v18 ? 1 : v21)
      v11 = 1;
    if (!v12)
      break;
    ++i;
    v5 = *v13;
    if (v5 - 48 <= 9)
    {
      if (v5 - 48 >= a3)
      {
        v14 = i;
        break;
      }
    }
    else if ((v5 | 0x20) < 0x61 || v8 <= (v5 | 0x20))
    {
      v14 = v13;
      break;
    }
    --v12;
    ++v13;
  }
  if (v11)
    return 0;
  if (!a4 && v12)
  {
    v23 = 0;
    while (1)
    {
      v24 = v14[v23];
      if ((v24 - 9) >= 5 && v24 != 32)
        break;
      if (v12 == ++v23)
        return v10;
    }
    return 0;
  }
  return v10;
}

_BYTE *std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::bootSessionUUIDString(void)::$_0 &&>>()
{
  _BYTE *result;
  size_t v1;
  int *v2;
  size_t v3;
  _BYTE __src[37];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 37;
  result = (_BYTE *)sysctlbyname("kern.bootsessionuuid", __src, &v3, 0, 0);
  if (!(_DWORD)result)
  {
    v1 = v3 - 1;
    if (v3 == 1)
    {
      v2 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      if (v1 >> 31)
      {
        __break(0xC471u);
        return result;
      }
      v2 = (int *)WTF::fastCompactMalloc((WTF *)(v3 + 19));
      result = v2 + 5;
      *v2 = 2;
      v2[1] = v1;
      *((_QWORD *)v2 + 1) = v2 + 5;
      v2[4] = 4;
      if (v1 == 1)
        *result = __src[0];
      else
        result = memcpy(result, __src, v1);
    }
    WTF::bootSessionUUIDString(void)::bootSessionUUID = (uint64_t)v2;
  }
  return result;
}

uint64_t WTF::UUID::operator NSUUID *(unint64_t *a1)
{
  id v2;
  unint64_t v3;
  uint64_t result;
  int v5;
  void *v6;
  void *v7;
  int *v8;
  id v9;
  void *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28[2];
  int **v29;
  int *v30;

  v2 = objc_alloc(MEMORY[0x1E0CB3A28]);
  v3 = a1[1];
  v26 = (void *)*a1;
  v27 = (void *)v3;
  result = _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_((unint64_t *)&v26);
  if ((result & 0x80000000) != 0)
    goto LABEL_10;
  v5 = result;
  if (!(_DWORD)result)
  {
    v8 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_6;
  }
  v7 = v26;
  v6 = v27;
  result = WTF::tryFastCompactMalloc((WTF *)(result + 20), v28);
  v8 = (int *)v28[0];
  if (!v28[0])
  {
LABEL_10:
    __break(0xC471u);
    return result;
  }
  *(_DWORD *)v28[0] = 2;
  v8[1] = v5;
  *((_QWORD *)v8 + 1) = v8 + 5;
  v8[4] = 4;
  v28[0] = v7;
  v28[1] = v6;
  v29 = &v30;
  v30 = v8 + 5;
  _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIhEEvPT_EUlDpOT_E_EEDcOS5_((unint64_t *)v28, (_BYTE ***)&v29);
LABEL_6:
  WTF::StringImpl::createCFString((WTF::StringImpl *)v8, (CFStringRef *)v28);
  v9 = v28[0];
  v10 = (void *)objc_msgSend(v2, "initWithUUIDString:", v9);

  if (*v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v11, v12, v13, v14, v15, v16, v17);
    WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
  }
  else
  {
    *v8 -= 2;
  }
  return (uint64_t)v10;
}

void sub_197B57750(_Unwind_Exception *a1)
{
  WTF::StringImpl *v1;
  void *v2;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_DWORD *)v1 == 2)
  {
    WTF::StringImpl::~StringImpl(v1, v4, v5, v6, v7, v8, v9, v10);
    WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v1 -= 2;
  _Unwind_Resume(a1);
}

void WTF::UUID::fromNSUUID(WTF::UUID *this@<X0>, _BYTE *a2@<X8>)
{
  WTF::UUID *v4;
  WTF::UUID *v5;
  __CFString *v6;
  unint64_t v7;
  unint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;

  v4 = this;
  v5 = v4;
  if (v4)
  {
    -[WTF::UUID UUIDString](v4, "UUIDString");
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
    WTF::String::String(&v25, v6);
    if (v25)
    {
      v7 = *((_QWORD *)v25 + 1);
      v8 = *((unsigned int *)v25 + 1) | ((unint64_t)((*((_DWORD *)v25 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v7 = 0;
      v8 = 0x100000000;
    }
    WTF::UUID::parse(v7, v8, (uint64_t)a2);
    v16 = v25;
    v25 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::~StringImpl(v16, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
      }
      else
      {
        *(_DWORD *)v16 -= 2;
      }
    }

  }
  else
  {
    *a2 = 0;
    a2[16] = 0;

  }
}

void sub_197B57858(_Unwind_Exception *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;
  void *v11;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::~StringImpl(a10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      *(_DWORD *)a10 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void sub_197B57894(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WTF::WallTime::approximateMonotonicTime(WTF::WallTime *this)
{
  unint64_t v1;
  char v2;
  char **v3;
  char *v4;

  if (fabs(*(double *)this) != INFINITY)
  {
    WTF::WallTime::now(this);
    mach_absolute_time();
    v1 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v1 != -1)
    {
      v4 = &v2;
      v3 = &v4;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
  }
}

uint64_t WTF::WallTime::dump(WTF::WallTime *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v4;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v4, "%s", "Wall(");
  WTF::PrintStream::printf(v4, "%lf", *(double *)this);
  WTF::PrintStream::printf(v4, "%s", " sec)");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t WTF::weakRandomNumber<unsigned int>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v12;
  unint64_t v13;

  if (_MergedGlobals_19 == 1)
  {
    v8 = qword_1ECF583A0;
    v9 = qword_1ECF58398 ^ (qword_1ECF58398 << 23);
    v10 = v9 >> 17;
  }
  else
  {
    v12 = WTF::cryptographicallyRandomNumber<unsigned int>(a1, a2, a3, a4, a5, a6, a7, a8);
    if (v12 <= 1)
      v13 = 1;
    else
      v13 = v12;
    v9 = ((unint64_t)v13 << 23) ^ v13;
    v10 = v9 >> 17;
    v8 = (v9 >> 17) ^ ((v13 >> 26) & 0xFF800000007FFFFFLL | ((unint64_t)v13 << 23));
    _MergedGlobals_19 = 1;
  }
  qword_1ECF58398 = v8;
  qword_1ECF583A0 = v9 ^ v10 ^ (v8 >> 26) ^ v8;
  return (qword_1ECF583A0 + v8);
}

uint64_t WTF::weakRandomUint32(WTF *this)
{
  return random();
}

void WTF::WordLock::lockSlow(WTF::WordLock *this)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  std::unique_lock<std::mutex> __lk;
  char v12;
  std::mutex v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  uint64_t v19;

  v2 = 0;
  v19 = *MEMORY[0x1E0C80C00];
  v3 = atomic_load((unint64_t *)this);
  if ((v3 & 1) != 0)
    goto LABEL_10;
LABEL_6:
  v4 = __ldaxr((unint64_t *)this);
  if (v4 != v3)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(v3 | 1, (unint64_t *)this))
  {
    while (1)
    {
LABEL_10:
      while (v3 <= 3 && v2 <= 0x27)
      {
        ++v2;
        MEMORY[0x19AEBBF94](0, 1, 1);
        v3 = atomic_load((unint64_t *)this);
        if ((v3 & 1) == 0)
          goto LABEL_6;
      }
      v12 = 0;
      memset(v13.__m_.__opaque, 0, sizeof(v13.__m_.__opaque));
      v13.__m_.__sig = 850045863;
      v14 = 1018212795;
      v15 = 0u;
      v16 = 0u;
      v17 = 0u;
      v18 = 0;
      v5 = atomic_load((unint64_t *)this);
      if ((v5 & 3) == 1)
      {
        v6 = __ldaxr((unint64_t *)this);
        if (v6 == v5)
        {
          if (!__stlxr(v5 | 2, (unint64_t *)this))
          {
            v12 = 1;
            v7 = v5 & 0xFFFFFFFFFFFFFFFCLL;
            if (v7)
            {
              *(_QWORD *)(*(_QWORD *)(v7 + 128) + 120) = &v12;
              *(_QWORD *)(v7 + 128) = &v12;
              v8 = atomic_load((unint64_t *)this);
              v9 = v8 & 0xFFFFFFFFFFFFFFFDLL;
            }
            else
            {
              v18 = &v12;
              v10 = atomic_load((unint64_t *)this);
              v9 = v10 & 0xFFFFFFFFFFFFFFFDLL | (unint64_t)&v12;
            }
            atomic_store(v9, (unint64_t *)this);
            __lk.__m_ = &v13;
            __lk.__owns_ = 1;
            std::mutex::lock(&v13);
            while (v12)
              std::condition_variable::wait((std::condition_variable *)&v14, &__lk);
            if (__lk.__owns_)
              std::mutex::unlock(__lk.__m_);
            goto LABEL_5;
          }
        }
        else
        {
          __clrex();
        }
      }
      MEMORY[0x19AEBBF94](0, 1, 1);
LABEL_5:
      std::condition_variable::~condition_variable((std::condition_variable *)&v14);
      std::mutex::~mutex(&v13);
      v3 = atomic_load((unint64_t *)this);
      if ((v3 & 1) == 0)
        goto LABEL_6;
    }
  }
}

void WTF::WordLock::unlockSlow(WTF::WordLock *this)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;

  do
  {
    while (1)
    {
      while (1)
      {
        v2 = atomic_load((unint64_t *)this);
        if (v2 != 1)
          break;
        v3 = __ldaxr((unint64_t *)this);
        if (v3 == 1)
        {
          if (!__stlxr(0, (unint64_t *)this))
            return;
        }
        else
        {
          __clrex();
        }
LABEL_3:
        MEMORY[0x19AEBBF94](0, 1, 1);
      }
      if ((v2 & 2) != 0)
        goto LABEL_3;
      v4 = __ldaxr((unint64_t *)this);
      if (v4 == v2)
        break;
      __clrex();
    }
  }
  while (__stlxr(v2 | 2, (unint64_t *)this));
  v5 = atomic_load((unint64_t *)this);
  v6 = v5 & 0xFFFFFFFFFFFFFFFCLL;
  v5 &= 0xFFFFFFFFFFFFFFFCLL;
  v9 = *(_QWORD *)(v5 + 120);
  v7 = (_QWORD *)(v5 + 120);
  v8 = v9;
  if (v9)
    *(_QWORD *)(v8 + 128) = *(_QWORD *)(v6 + 128);
  atomic_load((unint64_t *)this);
  atomic_store(v8, (unint64_t *)this);
  *v7 = 0;
  v7[1] = 0;
  std::mutex::lock((std::mutex *)(v6 + 8));
  *(_BYTE *)v6 = 0;
  std::condition_variable::notify_one((std::condition_variable *)(v6 + 72));
  std::mutex::unlock((std::mutex *)(v6 + 8));
}

uint64_t WTF::WorkerPool::WorkerPool(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int i;
  uint64_t v21;
  void *v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unsigned int *v53;

  *(_DWORD *)a1 = 1;
  v10 = WTF::fastMalloc((WTF *)8);
  *(_DWORD *)v10 = 1;
  *(_BYTE *)(v10 + 4) = 0;
  *(_QWORD *)(a1 + 8) = v10;
  v11 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v11 = 1;
  *(_BYTE *)(v11 + 4) = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 16) = v11;
  *(double *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = 0x7FF8000000000000;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = a2;
  *(_QWORD *)(a1 + 104) = a3;
  v18 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 4);
  if (__ldaxr(v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v18);
LABEL_5:
  if (a4)
  {
    for (i = 0; i != a4; ++i)
    {
      v21 = WTF::fastMalloc((WTF *)0x40);
      v23 = (unsigned int *)v21;
      v24 = *(unsigned int **)(a1 + 8);
      if (v24)
      {
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 + 1, v24));
        v26 = *(_QWORD *)(a1 + 16);
        do
          v27 = __ldaxr((unsigned int *)v26);
        while (__stlxr(v27 + 1, (unsigned int *)v26));
        do
          v28 = __ldaxr(v24);
        while (__stlxr(v28 + 1, v24));
        do
          v29 = __ldaxr(v24);
        while (__stlxr(v29 + 1, v24));
        *(_DWORD *)(v21 + 8) = 1;
        *(_QWORD *)v21 = off_1E3571898;
        do
          v30 = __ldaxr(v24);
        while (__stlxr(v30 + 1, v24));
      }
      else
      {
        v26 = *(_QWORD *)(a1 + 16);
        do
          v44 = __ldaxr((unsigned int *)v26);
        while (__stlxr(v44 + 1, (unsigned int *)v26));
        *(_DWORD *)(v21 + 8) = 1;
        *(_QWORD *)v21 = off_1E3571898;
      }
      *(_QWORD *)(v21 + 16) = v24;
      *(_QWORD *)(v21 + 24) = v26;
      *(double *)(v21 + 32) = a5;
      *(_WORD *)(v21 + 40) = 256;
      *(_DWORD *)(v21 + 42) = 0;
      v53 = (unsigned int *)v21;
      v31 = (_QWORD *)(v26 + 8);
      v32 = *(unsigned int *)(v26 + 20);
      if ((_DWORD)v32 == *(_DWORD *)(v26 + 16))
      {
        v33 = (_QWORD *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v31, v32 + 1, (unint64_t)&v53);
        v32 = *(unsigned int *)(v26 + 20);
        *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8 * v32) = *v33;
      }
      else
      {
        *(_QWORD *)(*v31 + 8 * v32) = v23;
      }
      *(_DWORD *)(v26 + 20) = v32 + 1;
      if (!v24)
        goto LABEL_24;
      do
      {
        v34 = __ldaxr(v24);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v24));
      if (!v35)
      {
        atomic_store(1u, v24);
        WTF::fastFree((unint64_t)v24, v22, v12, v13, v14, v15, v16, v17);
      }
      do
      {
        v36 = __ldaxr(v24);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v24));
      if (!v37)
      {
        atomic_store(1u, v24);
        WTF::fastFree((unint64_t)v24, v22, v12, v13, v14, v15, v16, v17);
        *(_QWORD *)v23 = off_1E3572648;
        *((_QWORD *)v23 + 6) = a1;
        *((_QWORD *)v23 + 7) = 0;
        v53 = v23;
        v38 = *(unsigned int *)(a1 + 60);
        if ((_DWORD)v38 == *(_DWORD *)(a1 + 56))
        {
LABEL_25:
          v39 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 48, v38 + 1, (unint64_t)&v53);
          v40 = *(unsigned int *)(a1 + 60);
          v41 = *(_QWORD *)(a1 + 48);
          v42 = *v39;
          *v39 = 0;
          *(_QWORD *)(v41 + 8 * v40) = v42;
          *(_DWORD *)(a1 + 60) = v40 + 1;
          v43 = v53;
          v53 = 0;
          if (!v43)
            goto LABEL_35;
          goto LABEL_32;
        }
      }
      else
      {
LABEL_24:
        *(_QWORD *)v23 = off_1E3572648;
        *((_QWORD *)v23 + 6) = a1;
        *((_QWORD *)v23 + 7) = 0;
        v53 = v23;
        v38 = *(unsigned int *)(a1 + 60);
        if ((_DWORD)v38 == *(_DWORD *)(a1 + 56))
          goto LABEL_25;
      }
      v45 = *(_QWORD *)(a1 + 48);
      v53 = 0;
      *(_QWORD *)(v45 + 8 * v38) = v23;
      *(_DWORD *)(a1 + 60) = v38 + 1;
      v43 = v53;
      v53 = 0;
      if (!v43)
        goto LABEL_35;
LABEL_32:
      v46 = v43 + 2;
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (v48)
      {
LABEL_35:
        if (v24)
          goto LABEL_36;
        continue;
      }
      atomic_store(1u, v43 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v43 + 8))(v43);
      if (v24)
      {
        do
        {
LABEL_36:
          v49 = __ldaxr(v24);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, v24));
        if (!v50)
        {
          atomic_store(1u, v24);
          WTF::fastFree((unint64_t)v24, v22, v12, v13, v14, v15, v16, v17);
        }
      }
    }
  }
  v51 = __ldxr(v18);
  if (v51 == 1)
  {
    if (!__stlxr(0, v18))
      return a1;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v18, 0, v12, v13, v14, v15, v16, v17);
  return a1;
}

void WTF::WorkerPool::~WorkerPool(WTF::WorkerPool *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int **v47;
  unsigned int **v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  WTF::WorkerPool *v64;
  uint64_t *v65;
  double v66;
  int v67;
  unsigned __int8 *v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (**v71)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned __int8 **v72;
  timespec __tp;
  void (**v74)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = (unsigned __int8 *)(*((_QWORD *)this + 1) + 4);
  if (__ldaxr(v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
LABEL_5:
  v11 = *((_DWORD *)this + 15);
  if (v11)
  {
    v12 = (_QWORD *)((char *)this + 64);
    v13 = *((_QWORD *)this + 9);
    do
    {
      if (*v12)
      {
        if (v13 + 1 != *v12)
          goto LABEL_8;
      }
      else
      {
        v14 = *((unsigned int *)this + 22);
        if (v13)
        {
          if (v13 != v14 - 1)
            goto LABEL_8;
        }
        else if ((_DWORD)v14)
        {
          v13 = 0;
          goto LABEL_8;
        }
      }
      WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacity((uint64_t *)this + 8);
      v13 = *((_QWORD *)this + 9);
LABEL_8:
      *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v13) = 0;
      if (v13 == *((unsigned int *)this + 22) - 1)
        v13 = 0;
      else
        ++v13;
      *((_QWORD *)this + 9) = v13;
      --v11;
    }
    while (v11);
  }
  v15 = *((_QWORD *)this + 2);
  v16 = (unsigned __int8 *)(v15 + 4);
  v17 = atomic_load((unsigned __int8 *)(v15 + 4));
  if ((v17 & 1) != 0)
  {
    atomic_store(0, v16);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v16, a2, a3, a4, a5, a6, a7, a8);
  }
  v18 = *(unsigned int *)(v15 + 20);
  if ((_DWORD)v18)
  {
    v19 = *(uint64_t **)(v15 + 8);
    v20 = 8 * v18;
    do
    {
      v21 = *v19;
      if (*(_BYTE *)(*v19 + 43))
      {
        if (*(_BYTE *)(v21 + 42))
        {
          *(_BYTE *)(v21 + 42) = 0;
          v22 = (unsigned __int8 *)(v21 + 44);
          v23 = atomic_load(v22);
          if ((v23 & 1) != 0)
          {
            LOBYTE(v66) = 0;
            v70 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v22;
            v71 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&v66;
            __tp.tv_sec = (__darwin_time_t)WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
            __tp.tv_nsec = (uint64_t)&__tp;
            v74 = &v70;
            WTF::ParkingLot::unparkOneImpl((uint64_t)v22, (unint64_t)&__tp, a3, a4, a5, a6, a7, a8);
          }
        }
      }
      else
      {
        WTF::AutomaticThread::start(v21);
      }
      ++v19;
      v20 -= 8;
    }
    while (v20);
  }
  v24 = __ldxr(v9);
  if (v24 != 1)
  {
    __clrex();
LABEL_35:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
    v64 = this;
    v25 = *((unsigned int *)this + 15);
    if (!(_DWORD)v25)
      goto LABEL_64;
    goto LABEL_36;
  }
  if (__stlxr(0, v9))
    goto LABEL_35;
  v64 = this;
  v25 = *((unsigned int *)this + 15);
  if ((_DWORD)v25)
  {
LABEL_36:
    v26 = (uint64_t *)*((_QWORD *)v64 + 6);
    v65 = &v26[v25];
    do
    {
      v27 = *v26;
      v28 = (unsigned __int8 *)(*(_QWORD *)(*v26 + 16) + 4);
      if (__ldaxr(v28))
      {
        __clrex();
      }
      else if (!__stxr(1u, v28))
      {
        goto LABEL_44;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v28);
LABEL_44:
      if (*(_BYTE *)(v27 + 41))
      {
        while (1)
        {
          v30 = *(_QWORD *)(v27 + 16);
          v66 = INFINITY;
          v67 = 0;
          __tp.tv_sec = 0;
          __tp.tv_nsec = 0;
          clock_gettime(_CLOCK_REALTIME, &__tp);
          if (v67)
          {
            __break(0xC471u);
            JUMPOUT(0x197B585F4);
          }
          v31 = (unsigned __int8 *)(v30 + 4);
          if (v66 >= (double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec)
            break;
          v32 = __ldxr(v31);
          if (v32 == 1)
          {
            if (!__stlxr(0, v31))
              goto LABEL_55;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v31, 0, a3, a4, a5, a6, a7, a8);
          if (!__ldaxr(v31))
          {
LABEL_59:
            if (!__stxr(1u, v31))
              goto LABEL_48;
            goto LABEL_47;
          }
LABEL_46:
          __clrex();
LABEL_47:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v31);
LABEL_48:
          if (!*(_BYTE *)(v27 + 41))
            goto LABEL_61;
        }
        v68 = v31;
        v69 = v27 + 45;
        __tp.tv_sec = (__darwin_time_t)WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
        __tp.tv_nsec = (uint64_t)&__tp;
        v74 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&v69;
        v70 = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
        v71 = &v70;
        v72 = &v68;
        WTF::ParkingLot::parkConditionallyImpl(v27 + 45, (uint64_t)&__tp, (uint64_t)&v70, (WTF::TimeWithDynamicClockType *)&v66);
LABEL_55:
        if (!__ldaxr(v31))
          goto LABEL_59;
        goto LABEL_46;
      }
LABEL_61:
      v35 = __ldxr(v28);
      if (v35 == 1)
      {
        if (!__stlxr(0, v28))
          goto LABEL_39;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v28, 0, a3, a4, a5, a6, a7, a8);
LABEL_39:
      ++v26;
    }
    while (v26 != v65);
  }
LABEL_64:
  v36 = *((_QWORD *)v64 + 8);
  v37 = *((_QWORD *)v64 + 9);
  v38 = (uint64_t *)*((_QWORD *)v64 + 10);
  if (v36 <= v37)
  {
    if (v36 == v37)
      goto LABEL_78;
    v41 = v36;
    v42 = &v38[v41];
    v43 = 8 * v37 - v41 * 8;
    do
    {
      v44 = *v42;
      *v42 = 0;
      if (v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
      ++v42;
      v43 -= 8;
    }
    while (v43);
  }
  else
  {
    if (v37)
    {
      v39 = 8 * v37;
      do
      {
        v40 = *v38;
        *v38 = 0;
        if (v40)
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
        ++v38;
        v39 -= 8;
      }
      while (v39);
      v38 = (uint64_t *)*((_QWORD *)v64 + 10);
      v36 = *((_QWORD *)v64 + 8);
    }
    v45 = *((unsigned int *)v64 + 22);
    if (v36 != v45)
    {
      v59 = v36;
      v60 = &v38[v59];
      v61 = 8 * v45 - v59 * 8;
      do
      {
        v62 = *v60;
        *v60 = 0;
        if (v62)
          (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
        ++v60;
        v61 -= 8;
      }
      while (v61);
    }
  }
  v38 = (uint64_t *)*((_QWORD *)v64 + 10);
LABEL_78:
  if (v38)
  {
    *((_QWORD *)v64 + 10) = 0;
    *((_DWORD *)v64 + 22) = 0;
    WTF::fastFree((unint64_t)v38, a2, a3, a4, a5, a6, a7, a8);
  }
  v46 = *((unsigned int *)v64 + 15);
  v47 = (unsigned int **)*((_QWORD *)v64 + 6);
  if ((_DWORD)v46)
  {
    v48 = &v47[v46];
    do
    {
      v49 = *v47;
      *v47 = 0;
      if (v49)
      {
        v50 = v49 + 2;
        do
        {
          v51 = __ldaxr(v50);
          v52 = v51 - 1;
        }
        while (__stlxr(v52, v50));
        if (!v52)
        {
          atomic_store(1u, v49 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
        }
      }
      ++v47;
    }
    while (v47 != v48);
    v47 = (unsigned int **)*((_QWORD *)v64 + 6);
  }
  if (v47)
  {
    *((_QWORD *)v64 + 6) = 0;
    *((_DWORD *)v64 + 14) = 0;
    WTF::fastFree((unint64_t)v47, a2, a3, a4, a5, a6, a7, a8);
  }
  v53 = *((_QWORD *)v64 + 2);
  *((_QWORD *)v64 + 2) = 0;
  if (!v53)
    goto LABEL_94;
  do
  {
    v54 = __ldaxr((unsigned int *)v53);
    v55 = v54 - 1;
  }
  while (__stlxr(v55, (unsigned int *)v53));
  if (v55)
  {
LABEL_94:
    v56 = (unsigned int *)*((_QWORD *)v64 + 1);
    *((_QWORD *)v64 + 1) = 0;
    if (!v56)
      return;
    goto LABEL_95;
  }
  atomic_store(1u, (unsigned int *)v53);
  v63 = *(_QWORD *)(v53 + 8);
  if (v63)
  {
    *(_QWORD *)(v53 + 8) = 0;
    *(_DWORD *)(v53 + 16) = 0;
    WTF::fastFree(v63, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree(v53, a2, a3, a4, a5, a6, a7, a8);
  v56 = (unsigned int *)*((_QWORD *)v64 + 1);
  *((_QWORD *)v64 + 1) = 0;
  if (v56)
  {
    do
    {
LABEL_95:
      v57 = __ldaxr(v56);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v56));
    if (!v58)
    {
      atomic_store(1u, v56);
      WTF::fastFree((unint64_t)v56, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void WTF::WorkerPool::postTask(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  unsigned __int8 *v26;
  char v27;

  v10 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 4);
  v26 = v10;
  v27 = 1;
  if (__ldaxr(v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
LABEL_5:
  v13 = *(_QWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 72);
  if (v13)
  {
    if (v12 + 1 != v13)
      goto LABEL_14;
    goto LABEL_13;
  }
  v14 = *(unsigned int *)(a1 + 88);
  if (!v12)
  {
    if ((_DWORD)v14)
    {
      v12 = 0;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v12 == v14 - 1)
  {
LABEL_13:
    WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacity((uint64_t *)(a1 + 64));
    v12 = *(_QWORD *)(a1 + 72);
  }
LABEL_14:
  v15 = *(_QWORD *)(a1 + 80);
  v16 = *a2;
  *a2 = 0;
  *(_QWORD *)(v15 + 8 * v12) = v16;
  if (v12 == *(unsigned int *)(a1 + 88) - 1)
    v17 = 0;
  else
    v17 = v12 + 1;
  *(_QWORD *)(a1 + 72) = v17;
  WTF::AutomaticThreadCondition::notifyOne(*(_QWORD *)(a1 + 16), (uint64_t)&v26, a3, a4, a5, a6, a7, a8);
  if (v27)
  {
    v24 = v26;
    v25 = __ldxr(v26);
    if (v25 != 1)
    {
      __clrex();
      goto LABEL_20;
    }
    if (__stlxr(0, v26))
LABEL_20:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v24, 0, v18, v19, v20, v21, v22, v23);
  }
}

void WTF::WorkerPool::Worker::~Worker(WTF::WorkerPool::Worker *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::AutomaticThread::~AutomaticThread(this, a2, a3, a4, a5, a6, a7, a8);
}

{
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::AutomaticThread::~AutomaticThread(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t WTF::WorkerPool::Worker::name(WTF::WorkerPool::Worker *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 6) + 96);
}

uint64_t WTF::WorkerPool::Worker::poll(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(v1 + 64);
  if (v2 == *(_QWORD *)(v1 + 72))
    return 2;
  v5 = *(_QWORD *)(v1 + 80);
  v6 = 8 * v2;
  v7 = *(_QWORD *)(v5 + 8 * v2);
  *(_QWORD *)(v5 + v6) = 0;
  v8 = *(_QWORD *)(v1 + 80);
  v9 = *(_QWORD *)(v8 + 8 * v2);
  *(_QWORD *)(v8 + v6) = 0;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v2 = *(_QWORD *)(v1 + 64);
  }
  if (v2 == *(unsigned int *)(v1 + 88) - 1)
    v10 = 0;
  else
    v10 = v2 + 1;
  *(_QWORD *)(v1 + 64) = v10;
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v7;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v7 = *(_QWORD *)(a1 + 56);
  }
  return v7 == 0;
}

uint64_t WTF::WorkerPool::Worker::work(WTF::WorkerPool::Worker *this)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7));
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return 0;
}

void WTF::WorkerPool::Worker::threadDidStart(WTF::WorkerPool::Worker *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  int v11;
  unsigned __int8 *v12;

  v9 = (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 6) + 8) + 4);
  if (__ldaxr(v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
LABEL_5:
  ++*(_DWORD *)(*((_QWORD *)this + 6) + 40);
  v11 = __ldxr(v9);
  if (v11 == 1)
  {
    if (!__stlxr(0, v9))
      return;
    v12 = v9;
  }
  else
  {
    __clrex();
    v12 = v9;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::WorkerPool::Worker::threadIsStopping(uint64_t result)
{
  --*(_DWORD *)(*(_QWORD *)(result + 48) + 40);
  return result;
}

uint64_t WTF::WorkerPool::Worker::shouldSleep(uint64_t a1)
{
  uint64_t v1;
  double v2;
  BOOL v3;
  double v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  char v11;
  char **v12;
  char *v13;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(double *)(v1 + 24);
  v3 = v2 <= 0.0;
  v4 = fabs(v2);
  if (!v3 && v4 == INFINITY)
    return 0;
  v6 = mach_absolute_time();
  v8 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v8 != -1)
  {
    v13 = &v11;
    v12 = &v13;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v7) = dword_1ECF4400C;
  v9 = (double)(v6 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v7 * 1000000000.0);
  if (v9 < *(double *)(v1 + 32) + *(double *)(v1 + 24))
    return 0;
  *(double *)(v1 + 32) = v9;
  return 1;
}

void WTF::WorkQueueBase::~WorkQueueBase(WTF::WorkQueueBase *this)
{
  void *v1;

  *(_QWORD *)this = off_1E35726F8;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)
    os_release(v1);
}

{
  void *v1;

  *(_QWORD *)this = off_1E35726F8;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)
    os_release(v1);
}

void WTF::WorkQueueBase::~WorkQueueBase(WTF::WorkQueueBase *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;

  *(_QWORD *)this = off_1E35726F8;
  v9 = (void *)*((_QWORD *)this + 2);
  if (v9)
    os_release(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::ConcurrentWorkQueue::create(const char *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;

  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = off_1E35726F8;
  *(_QWORD *)(v8 + 16) = 0;
  *(_DWORD *)(v8 + 24) = 0;
  WTF::WorkQueueBase::platformInitialize(v8, a1, a2, 1, a3);
  *(_QWORD *)v8 = off_1E3572698;
  *(_QWORD *)(v8 + 32) = &unk_1E35726D0;
  *a4 = v8;
}

uint64_t WTF::ConcurrentWorkQueue::ConcurrentWorkQueue(uint64_t a1, const char *a2, uint64_t a3, int a4)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E35726F8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  WTF::WorkQueueBase::platformInitialize(a1, a2, a3, 1, a4);
  *(_QWORD *)a1 = off_1E3572698;
  *(_QWORD *)(a1 + 32) = &unk_1E35726D0;
  return a1;
}

{
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E35726F8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  WTF::WorkQueueBase::platformInitialize(a1, a2, a3, 1, a4);
  *(_QWORD *)a1 = off_1E3572698;
  *(_QWORD *)(a1 + 32) = &unk_1E35726D0;
  return a1;
}

void WTF::ConcurrentWorkQueue::dispatch(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v4 = *(NSObject **)(a1 + 16);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v6 = (unsigned int *)(a1 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *v5 = a1;
  v8 = *a2;
  *a2 = 0;
  v5[1] = v8;
}

void `non-virtual thunk to'WTF::ConcurrentWorkQueue::dispatch(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;

  v4 = a1 - 32;
  v5 = *(NSObject **)(a1 - 16);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v7 = (unsigned int *)(a1 - 24);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *v6 = v4;
  v9 = *a2;
  *a2 = 0;
  v6[1] = v9;
}

uint64_t WTF::WorkQueue::main(WTF::WorkQueue *this)
{
  unint64_t v1;
  unint64_t v3;
  char v4;
  char **v5;
  char *v6;

  if ((_MergedGlobals_20 & 1) == 0)
  {
    qword_1ECF583B0 = 0;
    _MergedGlobals_20 = 1;
    v3 = atomic_load(&qword_1ECF583B8);
    if (v3 == -1)
      return qword_1ECF583B0;
    goto LABEL_3;
  }
  v1 = atomic_load(&qword_1ECF583B8);
  if (v1 != -1)
  {
LABEL_3:
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&qword_1ECF583B8, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::WorkQueue::main(void)::$_0 &&>>);
  }
  return qword_1ECF583B0;
}

void WTF::WorkQueue::create(const char *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;

  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = off_1E35726F8;
  *(_QWORD *)(v8 + 16) = 0;
  *(_DWORD *)(v8 + 24) = 0;
  WTF::WorkQueueBase::platformInitialize(v8, a1, a2, 0, a3);
  *(_QWORD *)v8 = off_1E3572728;
  *(_QWORD *)(v8 + 32) = &unk_1E3572778;
  *a4 = v8;
}

uint64_t WTF::WorkQueue::WorkQueue(uint64_t a1, const char *a2, uint64_t a3, int a4)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E35726F8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  WTF::WorkQueueBase::platformInitialize(a1, a2, a3, 0, a4);
  *(_QWORD *)a1 = off_1E3572728;
  *(_QWORD *)(a1 + 32) = &unk_1E3572778;
  return a1;
}

{
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E35726F8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  WTF::WorkQueueBase::platformInitialize(a1, a2, a3, 0, a4);
  *(_QWORD *)a1 = off_1E3572728;
  *(_QWORD *)(a1 + 32) = &unk_1E3572778;
  return a1;
}

void WTF::WorkQueue::dispatch(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v4 = *(NSObject **)(a1 + 16);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v6 = (unsigned int *)(a1 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *v5 = a1;
  v8 = *a2;
  *a2 = 0;
  v5[1] = v8;
}

void `non-virtual thunk to'WTF::WorkQueue::dispatch(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;

  v4 = a1 - 32;
  v5 = *(NSObject **)(a1 - 16);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v7 = (unsigned int *)(a1 - 24);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *v6 = v4;
  v9 = *a2;
  *a2 = 0;
  v6[1] = v9;
}

BOOL WTF::WorkQueue::isCurrent(WTF::WorkQueue *this)
{
  unsigned int specific;
  uint64_t v4;

  specific = dispatch_get_specific(&WTF::ThreadLike::s_uid);
  if (specific)
    return specific == *((_DWORD *)this + 6);
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4)
    v4 = WTF::Thread::initializeCurrentTLS(0);
  return *(_DWORD *)(v4 + 48) == *((_DWORD *)this + 6);
}

BOOL `non-virtual thunk to'WTF::WorkQueue::isCurrent(WTF::WorkQueue *this)
{
  unsigned int specific;
  uint64_t v4;

  specific = dispatch_get_specific(&WTF::ThreadLike::s_uid);
  if (specific)
    return specific == *((_DWORD *)this - 2);
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4)
    v4 = WTF::Thread::initializeCurrentTLS(0);
  return *(_DWORD *)(v4 + 48) == *((_DWORD *)this - 2);
}

uint64_t WTF::WorkQueue::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t `non-virtual thunk to'WTF::WorkQueue::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this - 24);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

unsigned int *WTF::WorkQueue::deref(unsigned int *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = this + 2;
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, this + 2);
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

uint64_t `non-virtual thunk to'WTF::WorkQueue::deref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(this - 24);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, v1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 32) + 8))(this - 32);
  }
  return this;
}

void WTF::ConcurrentWorkQueue::~ConcurrentWorkQueue(WTF::ConcurrentWorkQueue *this)
{
  void *v1;

  *(_QWORD *)this = off_1E35726F8;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)
    os_release(v1);
}

void WTF::ConcurrentWorkQueue::~ConcurrentWorkQueue(WTF::ConcurrentWorkQueue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;

  *(_QWORD *)this = off_1E35726F8;
  v9 = (void *)*((_QWORD *)this + 2);
  if (v9)
    os_release(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void `non-virtual thunk to'WTF::ConcurrentWorkQueue::~ConcurrentWorkQueue(WTF::ConcurrentWorkQueue *this)
{
  void *v1;

  *((_QWORD *)this - 4) = off_1E35726F8;
  v1 = (void *)*((_QWORD *)this - 2);
  if (v1)
    os_release(v1);
}

void `non-virtual thunk to'WTF::ConcurrentWorkQueue::~ConcurrentWorkQueue(WTF::ConcurrentWorkQueue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  void *v9;

  *((_QWORD *)this - 4) = off_1E35726F8;
  v8 = (char *)this - 32;
  v9 = (void *)*((_QWORD *)this - 2);
  if (v9)
    os_release(v9);
  WTF::fastFree((unint64_t)v8, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::WorkQueue::~WorkQueue(WTF::WorkQueue *this)
{
  void *v1;

  *(_QWORD *)this = off_1E35726F8;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)
    os_release(v1);
}

void WTF::WorkQueue::~WorkQueue(WTF::WorkQueue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;

  *(_QWORD *)this = off_1E35726F8;
  v9 = (void *)*((_QWORD *)this + 2);
  if (v9)
    os_release(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void `non-virtual thunk to'WTF::WorkQueue::~WorkQueue(WTF::WorkQueue *this)
{
  void *v1;

  *((_QWORD *)this - 4) = off_1E35726F8;
  v1 = (void *)*((_QWORD *)this - 2);
  if (v1)
    os_release(v1);
}

void `non-virtual thunk to'WTF::WorkQueue::~WorkQueue(WTF::WorkQueue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  void *v9;

  *((_QWORD *)this - 4) = off_1E35726F8;
  v8 = (char *)this - 32;
  v9 = (void *)*((_QWORD *)this - 2);
  if (v9)
    os_release(v9);
  WTF::fastFree((unint64_t)v8, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::WorkQueue::main(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = WTF::fastMalloc((WTF *)0x28);
  v1 = MEMORY[0x1E0C80D38];
  os_retain(MEMORY[0x1E0C80D38]);
  *(_DWORD *)(v0 + 8) = 1;
  *(_QWORD *)(v0 + 16) = v1;
  *(_DWORD *)(v0 + 24) = 1;
  *(_QWORD *)v0 = off_1E3572728;
  *(_QWORD *)(v0 + 32) = &unk_1E3572778;
  result = qword_1ECF583B0;
  qword_1ECF583B0 = v0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

void WTF::WorkQueueBase::dispatch(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v4 = *(NSObject **)(a1 + 16);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v6 = (unsigned int *)(a1 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *v5 = a1;
  v8 = *a2;
  *a2 = 0;
  v5[1] = v8;
}

void WTF::dispatchWorkItem<WTF::`anonymous namespace'::DispatchWorkItem>(unint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (!v10)
    goto LABEL_7;
  v11 = v10 + 2;
  do
  {
    v12 = __ldaxr(v11);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v11));
  if (!v13)
  {
    atomic_store(1u, v10 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    v14 = a1;
  }
  else
  {
LABEL_7:
    v14 = a1;
  }
  WTF::fastFree(v14, v2, v3, v4, v5, v6, v7, v8);
}

void WTF::WorkQueueBase::dispatchWithQOS(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  dispatch_qos_class_t v3;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  dispatch_block_t v8;

  if (a3 <= 4)
  {
    if (WTF::globalMaxQOSclass >= dword_199123870[a3])
      v5 = dword_199123870[a3];
    else
      v5 = WTF::globalMaxQOSclass;
    if (WTF::globalMaxQOSclass)
      v3 = v5;
    else
      v3 = dword_199123870[a3];
  }
  v6 = *a2;
  *a2 = 0;
  v7 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v7 = MEMORY[0x1E0C809A0];
  v7[1] = 50331650;
  v7[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::WorkQueueBase::dispatchWithQOS(WTF::Function<void ()(void)> &&,WTF::Thread::QOS)::$_0>(WTF::WorkQueueBase::dispatchWithQOS(WTF::Function<void ()(void)> &&,WTF::Thread::QOS)::$_0)::{lambda(void *)#1}::__invoke;
  v7[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::WorkQueueBase::dispatchWithQOS(WTF::Function<void ()(void)> &&,WTF::Thread::QOS)::$_0>(WTF::WorkQueueBase::dispatchWithQOS(WTF::Function<void ()(void)> &&,WTF::Thread::QOS)::$_0)::descriptor;
  v7[4] = v6;
  v8 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v3, 0, v7);
  _Block_release(v7);
  dispatch_async(*(dispatch_queue_t *)(a1 + 16), v8);
  _Block_release(v8);
}

void WTF::WorkQueueBase::dispatchAfter(uint64_t a1, uint64_t *a2, double a3)
{
  double v5;
  double v6;
  int64_t v7;
  dispatch_time_t v8;
  NSObject *v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;

  v5 = a3 * 1000.0 * 1000.0 * 1000.0;
  v6 = -9.22337204e18;
  if (v5 > -9.22337204e18)
    v6 = v5;
  if (v5 >= 9.22337204e18)
    v7 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v7 = (uint64_t)v6;
  v8 = dispatch_time(0, v7);
  v9 = *(NSObject **)(a1 + 16);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v11 = (unsigned int *)(a1 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *v10 = a1;
  v13 = *a2;
  *a2 = 0;
  v10[1] = v13;
}

void WTF::WorkQueueBase::dispatchSync(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *(NSObject **)(a1 + 16);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  v5 = *a2;
  *a2 = 0;
  *v4 = v5;
  dispatch_sync_f(v3, v4, (dispatch_function_t)WTF::dispatchWorkItem<WTF::Function<void ()(void)>>);
}

void WTF::dispatchWorkItem<WTF::Function<void ()(void)>>(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
  v9 = *a1;
  *a1 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)a1, v2, v3, v4, v5, v6, v7, v8);
}

void WTF::WorkQueueBase::platformInitialize(uint64_t a1, const char *a2, uint64_t a3, int a4, int a5)
{
  NSObject *v7;
  int v8;
  dispatch_qos_class_t v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  unsigned int v13;
  void *v14;

  if (a4)
    v7 = MEMORY[0x1E0C80D50];
  else
    v7 = 0;
  if (WTF::globalMaxQOSclass >= dword_199123870[a5])
    v8 = dword_199123870[a5];
  else
    v8 = WTF::globalMaxQOSclass;
  if (WTF::globalMaxQOSclass)
    v9 = v8;
  else
    v9 = dword_199123870[a5];
  v10 = dispatch_queue_attr_make_with_qos_class(v7, v9, 0);
  v11 = dispatch_queue_create(a2, v10);
  v12 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  if (v12)
  {
    os_release(v12);
    v11 = *(NSObject **)(a1 + 16);
  }
  dispatch_set_context(v11, (void *)a1);
  do
  {
    v13 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
    v14 = (void *)(v13 + 1);
  }
  while (__stlxr(v14, (unsigned int *)&WTF::ThreadLike::s_uid));
  *(_DWORD *)(a1 + 24) = (_DWORD)v14;
  dispatch_queue_set_specific(*(dispatch_queue_t *)(a1 + 16), &WTF::ThreadLike::s_uid, v14, 0);
}

uint64_t WTF::WorkQueue::WorkQueue(uint64_t a1)
{
  uint64_t v2;

  v2 = MEMORY[0x1E0C80D38];
  os_retain(MEMORY[0x1E0C80D38]);
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = v2;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)a1 = off_1E3572728;
  *(_QWORD *)(a1 + 32) = &unk_1E3572778;
  return a1;
}

{
  uint64_t v2;

  v2 = MEMORY[0x1E0C80D38];
  os_retain(MEMORY[0x1E0C80D38]);
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = v2;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)a1 = off_1E3572728;
  *(_QWORD *)(a1 + 32) = &unk_1E3572778;
  return a1;
}

void WTF::ConcurrentWorkQueue::apply(size_t a1, uint64_t *a2)
{
  NSObject *global_queue;
  uint64_t v5;
  _QWORD *v6;

  global_queue = dispatch_get_global_queue(0, 0);
  v5 = *a2;
  *a2 = 0;
  v6 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v6 = MEMORY[0x1E0C809A0];
  v6[1] = 50331650;
  v6[2] = WTF::BlockPtr<void ()(unsigned long)>::fromCallable<WTF::ConcurrentWorkQueue::apply(unsigned long,WTF::Function<void ()(unsigned long)> &&)::$_0>(WTF::ConcurrentWorkQueue::apply(unsigned long,WTF::Function<void ()(unsigned long)> &&)::$_0)::{lambda(void *,unsigned long)#1}::__invoke;
  v6[3] = &WTF::BlockPtr<void ()(unsigned long)>::fromCallable<WTF::ConcurrentWorkQueue::apply(unsigned long,WTF::Function<void ()(unsigned long)> &&)::$_0>(WTF::ConcurrentWorkQueue::apply(unsigned long,WTF::Function<void ()(unsigned long)> &&)::$_0)::descriptor;
  v6[4] = v5;
  dispatch_apply(a1, global_queue, v6);
  _Block_release(v6);
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WTF::WorkQueueBase::dispatchWithQOS(WTF::Function<void ()(void)> &&,WTF::Thread::QOS)::$_0>(WTF::WorkQueueBase::dispatchWithQOS(WTF::Function<void ()(void)> &&,WTF::Thread::QOS)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WTF::WorkQueueBase::dispatchWithQOS(WTF::Function<void ()(void)> &&,WTF::Thread::QOS)::$_0>(WTF::WorkQueueBase::dispatchWithQOS(WTF::Function<void ()(void)> &&,WTF::Thread::QOS)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(unsigned long)>::fromCallable<WTF::ConcurrentWorkQueue::apply(unsigned long,WTF::Function<void ()(unsigned long)> &&)::$_0>(WTF::ConcurrentWorkQueue::apply(unsigned long,WTF::Function<void ()(unsigned long)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(unsigned long)>::fromCallable<WTF::ConcurrentWorkQueue::apply(unsigned long,WTF::Function<void ()(unsigned long)> &&)::$_0>(WTF::ConcurrentWorkQueue::apply(unsigned long,WTF::Function<void ()(unsigned long)> &&)::$_0)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void WTF::setPermissionsOfConfigPage(WTF *this)
{
  unint64_t v1;
  char v2;
  char **v3;
  char *v4;

  v1 = atomic_load(&WTF::setPermissionsOfConfigPage(void)::onceFlag);
  if (v1 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&WTF::setPermissionsOfConfigPage(void)::onceFlag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::setPermissionsOfConfigPage(void)::$_0 &&>>);
  }
}

const mach_header_64 *WTF::Config::initialize(WTF::Config *this)
{
  unint64_t v1;
  unint64_t v2;
  const mach_header_64 *result;
  unint64_t v4;
  unint64_t size;

  v1 = WTF::s_pageSize;
  if (!WTF::s_pageSize)
  {
    v2 = sysconf(29);
    WTF::s_pageSize = v2;
    if ((v2 & (v2 - 1)) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197B59A80);
    }
    v1 = v2;
    if (v2 > 0x4000)
    {
      __break(0xC471u);
      JUMPOUT(0x197B59AA0);
    }
    if (((v2 + 0x3FFF) & -(uint64_t)v2) != 0x4000)
    {
      __break(0xC471u);
LABEL_18:
      JUMPOUT(0x197B59A60);
    }
  }
  result = (const mach_header_64 *)dlsym((void *)0xFFFFFFFFFFFFFFFBLL, "_mh_execute_header");
  if (result
    && (size = 0, (result = (const mach_header_64 *)getsegmentdata(result, "__PAGEZERO", &size)) == 0)
    && (v4 = size) != 0)
  {
    if (v1 > size)
      v4 = v1;
    qword_1ECF4C080 = v4 & -(uint64_t)v1;
  }
  else
  {
    qword_1ECF4C080 = v1;
  }
  qword_1ECF4C088 = 0xFFFFFFFFFLL;
  if (byte_1ECF4C0AA)
  {
    __break(0xC471u);
    goto LABEL_18;
  }
  byte_1ECF4C0AA = 1;
  return result;
}

void WTF::Config::finalize(WTF::Config *this)
{
  unint64_t v1;
  char v2;
  char **v3;
  char *v4;

  v1 = atomic_load(WTF::Config::finalize(void)::once);
  if (v1 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(WTF::Config::finalize(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Config::finalize(void)::$_0 &&>>);
  }
}

uint64_t WTF::Config::permanentlyFreeze(WTF::Config *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;

  if (WTF::s_pageSize)
  {
    v1 = WTF::s_pageSize + 0x3FFF;
    v2 = -WTF::s_pageSize;
  }
  else
  {
    v3 = sysconf(29);
    WTF::s_pageSize = v3;
    if ((v3 & (v3 - 1)) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197B59C5CLL);
    }
    if (v3 > 0x4000)
    {
      __break(0xC471u);
      JUMPOUT(0x197B59C7CLL);
    }
    v1 = v3 + 0x3FFF;
    v2 = -(uint64_t)v3;
    if (((v3 + 0x3FFF) & -(uint64_t)v3) != 0x4000)
    {
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x197B59BFCLL);
    }
  }
  if ((v1 & v2) != 0x4000)
    goto LABEL_17;
  if (!byte_1ECF4C090)
  {
    byte_1ECF4C090 = 1;
    byte_1ECF4C020 = 1;
  }
  result = MEMORY[0x19AEBC7EC](*MEMORY[0x1E0C83DA0], g_config, 0x4000, 1, 1);
  if ((_DWORD)result)
  {
    __break(0xC471u);
    JUMPOUT(0x197B59C1CLL);
  }
  if (!byte_1ECF4C090)
  {
    __break(0xC471u);
    JUMPOUT(0x197B59C3CLL);
  }
  return result;
}

uint64_t WTF::Config::disableFreezingForTesting(WTF::Config *this)
{
  uint64_t result;

  if (byte_1ECF4C090)
  {
    result = 182;
    __break(0xC471u);
  }
  else
  {
    byte_1ECF4C091 = 1;
  }
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::setPermissionsOfConfigPage(void)::$_0 &&>>()
{
  vm_map_t *v0;
  vm_map_t v1;
  unint64_t v2;
  uint64_t result;
  vm_map_t v4;
  unint64_t v5;
  mach_vm_address_t address;

  address = (mach_vm_address_t)g_config;
  v0 = (vm_map_t *)MEMORY[0x1E0C83DA0];
  v1 = *MEMORY[0x1E0C83DA0];
  v2 = WTF::s_pageSize;
  if (!WTF::s_pageSize)
  {
    v2 = sysconf(29);
    WTF::s_pageSize = v2;
    if ((v2 & (v2 - 1)) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197B59E50);
    }
    if (v2 > 0x4000)
    {
      __break(0xC471u);
      JUMPOUT(0x197B59E70);
    }
    if (((v2 + 0x3FFF) & -(uint64_t)v2) != 0x4000)
    {
      __break(0xC471u);
      JUMPOUT(0x197B59E90);
    }
  }
  result = mach_vm_map(v1, &address, 0x4000uLL, v2 - 1, 16512, 0, 0, 0, 3, 3, 1u);
  if ((_DWORD)result)
  {
    v4 = *v0;
    v5 = WTF::s_pageSize;
    if (!WTF::s_pageSize)
    {
      v5 = sysconf(29);
      WTF::s_pageSize = v5;
      if ((v5 & (v5 - 1)) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197B59EB0);
      }
      if (v5 > 0x4000)
      {
        __break(0xC471u);
        JUMPOUT(0x197B59ED0);
      }
      if (((v5 + 0x3FFF) & -(uint64_t)v5) != 0x4000)
        goto LABEL_18;
    }
    result = mach_vm_map(v4, &address, 0x4000uLL, v5 - 1, 0x4000, 0, 0, 0, 3, 3, 1u);
    if ((_DWORD)result)
    {
LABEL_18:
      __break(0xC471u);
      JUMPOUT(0x197B59E30);
    }
  }
  return result;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Config::finalize(void)::$_0 &&>>(WTF::SignalHandlers *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  WTF::SignalHandlers::finalize(a1);
  if (byte_1ECF4C091)
    return;
  if (WTF::s_pageSize)
  {
    v1 = WTF::s_pageSize + 0x3FFF;
    v2 = -WTF::s_pageSize;
  }
  else
  {
    v3 = sysconf(29);
    WTF::s_pageSize = v3;
    if ((v3 & (v3 - 1)) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197B5A048);
    }
    if (v3 > 0x4000)
    {
      __break(0xC471u);
      JUMPOUT(0x197B5A068);
    }
    v1 = v3 + 0x3FFF;
    v2 = -(uint64_t)v3;
    if (((v3 + 0x3FFF) & -(uint64_t)v3) != 0x4000)
    {
LABEL_18:
      __break(0xC471u);
      JUMPOUT(0x197B59FE8);
    }
  }
  if ((v1 & v2) != 0x4000)
    goto LABEL_18;
  if (!byte_1ECF4C090)
  {
    byte_1ECF4C090 = 1;
    byte_1ECF4C020 = 1;
  }
  if (MEMORY[0x19AEBC7EC](*MEMORY[0x1E0C83DA0], g_config, 0x4000, 1, 1))
  {
    __break(0xC471u);
    JUMPOUT(0x197B5A008);
  }
  if (!byte_1ECF4C090)
  {
    __break(0xC471u);
    JUMPOUT(0x197B5A028);
  }
}

void WTF::exitProcess(WTF *this)
{
  exit((int)this);
}

void WTF::terminateProcess(WTF *this)
{
  _exit((int)this);
}

int **WTF::String::String(int **result, _WORD *a2, unint64_t a3)
{
  int **v3;
  int *v6;
  _WORD *v7;

  v3 = result;
  if (!a2)
  {
    v6 = 0;
LABEL_9:
    *v3 = v6;
    return v3;
  }
  if (!a3)
  {
    v6 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_9;
  }
  if (a3 < 0x7FFFFFF0)
  {
    v6 = (int *)WTF::fastCompactMalloc((WTF *)(2 * a3 + 20));
    v7 = v6 + 5;
    *v6 = 2;
    v6[1] = a3;
    *((_QWORD *)v6 + 1) = v6 + 5;
    v6[4] = 0;
    if (a3 == 1)
      *v7 = *a2;
    else
      memcpy(v7, a2, 2 * a3);
    goto LABEL_9;
  }
  __break(0xC471u);
  return result;
}

{
  int **v3;
  int *v6;
  _WORD *v7;

  v3 = result;
  if (!a2)
  {
    v6 = 0;
LABEL_9:
    *v3 = v6;
    return v3;
  }
  if (!a3)
  {
    v6 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_9;
  }
  if (a3 < 0x7FFFFFF0)
  {
    v6 = (int *)WTF::fastCompactMalloc((WTF *)(2 * a3 + 20));
    v7 = v6 + 5;
    *v6 = 2;
    v6[1] = a3;
    *((_QWORD *)v6 + 1) = v6 + 5;
    v6[4] = 0;
    if (a3 == 1)
      *v7 = *a2;
    else
      memcpy(v7, a2, 2 * a3);
    goto LABEL_9;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WTF::String::String(uint64_t *result, _BYTE *a2, size_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  _BYTE *v7;

  v3 = result;
  if (a2)
  {
    if (a3)
    {
      if (a3 >> 31)
      {
        __break(0xC471u);
      }
      else
      {
        v6 = WTF::fastCompactMalloc((WTF *)(a3 + 20));
        v7 = (_BYTE *)(v6 + 20);
        *(_DWORD *)v6 = 2;
        *(_DWORD *)(v6 + 4) = a3;
        *(_QWORD *)(v6 + 8) = v6 + 20;
        *(_DWORD *)(v6 + 16) = 4;
        if (a3 == 1)
          *v7 = *a2;
        else
          memcpy(v7, a2, a3);
        *v3 = v6;
        return v3;
      }
    }
    else
    {
      WTF::StringImpl::s_emptyAtomString += 2;
      *result = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  _BYTE *v7;

  v3 = result;
  if (a2)
  {
    if (a3)
    {
      if (a3 >> 31)
      {
        __break(0xC471u);
      }
      else
      {
        v6 = WTF::fastCompactMalloc((WTF *)(a3 + 20));
        v7 = (_BYTE *)(v6 + 20);
        *(_DWORD *)v6 = 2;
        *(_DWORD *)(v6 + 4) = a3;
        *(_QWORD *)(v6 + 8) = v6 + 20;
        *(_DWORD *)(v6 + 16) = 4;
        if (a3 == 1)
          *v7 = *a2;
        else
          memcpy(v7, a2, a3);
        *v3 = v6;
        return v3;
      }
    }
    else
    {
      WTF::StringImpl::s_emptyAtomString += 2;
      *result = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  _BYTE *v7;

  v3 = result;
  if (a2)
  {
    if (a3)
    {
      if (a3 >> 31)
      {
        __break(0xC471u);
      }
      else
      {
        v6 = WTF::fastCompactMalloc((WTF *)(a3 + 20));
        v7 = (_BYTE *)(v6 + 20);
        *(_DWORD *)v6 = 2;
        *(_DWORD *)(v6 + 4) = a3;
        *(_QWORD *)(v6 + 8) = v6 + 20;
        *(_DWORD *)(v6 + 16) = 4;
        if (a3 == 1)
          *v7 = *a2;
        else
          memcpy(v7, a2, a3);
        *v3 = v6;
        return v3;
      }
    }
    else
    {
      WTF::StringImpl::s_emptyAtomString += 2;
      *result = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  _BYTE *v7;

  v3 = result;
  if (a2)
  {
    if (a3)
    {
      if (a3 >> 31)
      {
        __break(0xC471u);
      }
      else
      {
        v6 = WTF::fastCompactMalloc((WTF *)(a3 + 20));
        v7 = (_BYTE *)(v6 + 20);
        *(_DWORD *)v6 = 2;
        *(_DWORD *)(v6 + 4) = a3;
        *(_QWORD *)(v6 + 8) = v6 + 20;
        *(_DWORD *)(v6 + 16) = 4;
        if (a3 == 1)
          *v7 = *a2;
        else
          memcpy(v7, a2, a3);
        *v3 = v6;
        return v3;
      }
    }
    else
    {
      WTF::StringImpl::s_emptyAtomString += 2;
      *result = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

size_t WTF::String::String(size_t this, const char *__s)
{
  _QWORD *v2;
  size_t v4;
  uint64_t v5;
  _BYTE *v6;

  v2 = (_QWORD *)this;
  if (__s)
  {
    this = strlen(__s);
    if (this)
    {
      v4 = this;
      if (this >> 31)
      {
        __break(0xC471u);
      }
      else
      {
        v5 = WTF::fastCompactMalloc((WTF *)(this + 20));
        v6 = (_BYTE *)(v5 + 20);
        *(_DWORD *)v5 = 2;
        *(_DWORD *)(v5 + 4) = v4;
        *(_QWORD *)(v5 + 8) = v5 + 20;
        *(_DWORD *)(v5 + 16) = 4;
        if (v4 == 1)
          *v6 = *__s;
        else
          memcpy(v6, __s, v4);
        *v2 = v5;
        return (size_t)v2;
      }
    }
    else
    {
      WTF::StringImpl::s_emptyAtomString += 2;
      *v2 = &WTF::StringImpl::s_emptyAtomString;
      return (size_t)v2;
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

{
  _QWORD *v2;
  size_t v4;
  uint64_t v5;
  _BYTE *v6;

  v2 = (_QWORD *)this;
  if (__s)
  {
    this = strlen(__s);
    if (this)
    {
      v4 = this;
      if (this >> 31)
      {
        __break(0xC471u);
      }
      else
      {
        v5 = WTF::fastCompactMalloc((WTF *)(this + 20));
        v6 = (_BYTE *)(v5 + 20);
        *(_DWORD *)v5 = 2;
        *(_DWORD *)(v5 + 4) = v4;
        *(_QWORD *)(v5 + 8) = v5 + 20;
        *(_DWORD *)(v5 + 16) = 4;
        if (v4 == 1)
          *v6 = *__s;
        else
          memcpy(v6, __s, v4);
        *v2 = v5;
        return (size_t)v2;
      }
    }
    else
    {
      WTF::StringImpl::s_emptyAtomString += 2;
      *v2 = &WTF::StringImpl::s_emptyAtomString;
      return (size_t)v2;
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

uint64_t WTF::codePointCompare(WTF **this, const WTF::StringImpl **a2, const WTF::String *a3)
{
  return WTF::codePointCompare(*this, *a2, a3);
}

uint64_t WTF::codePointCompare(WTF *this, const WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned __int16 *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned __int16 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  if (!this)
  {
    if (!a2)
      return 0;
    if (*((_DWORD *)a2 + 1))
      return 0xFFFFFFFFLL;
    return 0;
  }
  if (!a2)
    return *((_DWORD *)this + 1) != 0;
  v3 = *((_DWORD *)a2 + 4);
  v4 = *((_DWORD *)this + 1);
  v5 = *((_DWORD *)a2 + 1);
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  if ((*((_BYTE *)this + 16) & 4) == 0)
  {
    if ((v3 & 4) != 0)
    {
      if ((_DWORD)v6)
      {
        v17 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v18 = (unsigned __int16 *)*((_QWORD *)this + 1);
        while (1)
        {
          v19 = *v18;
          v20 = *v17;
          v11 = v19 > v20;
          if (v19 != v20)
            goto LABEL_40;
          ++v18;
          ++v17;
          if (!--v6)
            goto LABEL_34;
        }
      }
    }
    else if ((_DWORD)v6)
    {
      v7 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
      v8 = (unsigned __int16 *)*((_QWORD *)this + 1);
      while (1)
      {
        v9 = *v8;
        v10 = *v7;
        v11 = v9 > v10;
        if (v9 != v10)
          break;
        ++v8;
        ++v7;
        if (!--v6)
          goto LABEL_34;
      }
LABEL_40:
      if (v11)
        return 1;
      else
        return 0xFFFFFFFFLL;
    }
    goto LABEL_34;
  }
  if ((v3 & 4) != 0)
  {
    if ((_DWORD)v6)
    {
      v21 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      v22 = (unsigned __int8 *)*((_QWORD *)this + 1);
      while (1)
      {
        v23 = *v22;
        v24 = *v21;
        v11 = v23 > v24;
        if (v23 != v24)
          goto LABEL_40;
        ++v22;
        ++v21;
        if (!--v6)
          goto LABEL_34;
      }
    }
    goto LABEL_34;
  }
  if (!(_DWORD)v6)
  {
LABEL_34:
    if (v5 < v4)
      v25 = 1;
    else
      v25 = -1;
    if (v4 == v5)
      return 0;
    else
      return v25;
  }
  v13 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
  v14 = (unsigned __int8 *)*((_QWORD *)this + 1);
  while (1)
  {
    v15 = *v14;
    v16 = *v13;
    if (v16 != v15)
      break;
    ++v14;
    ++v13;
    if (!--v6)
      goto LABEL_34;
  }
  if (v16 < v15)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t WTF::String::characterStartingAt(WTF::String *this, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  int v7;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v3 = *(_DWORD *)(v2 + 4);
  if (v3 <= a2)
    return 0;
  v4 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    return *(unsigned __int8 *)(v4 + a2);
  result = *(unsigned __int16 *)(v4 + 2 * a2);
  if ((result & 0xF800) == 0xD800)
  {
    if (a2 + 1 < v3 && (result & 0xFC00) == 55296)
    {
      v7 = *(unsigned __int16 *)(v4 + 2 * (a2 + 1));
      if ((v7 & 0xFC00) == 0xDC00)
        return (v7 + ((_DWORD)result << 10) - 56613888);
    }
    return 0;
  }
  return result;
}

void WTF::makeStringByJoining(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, WTF::StringImpl **a9@<X8>)
{
  __int128 v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  int8x16_t v14;
  int8x16_t *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  unint64_t v31;
  unsigned __int128 *v32;
  unsigned __int128 v33;
  _BYTE *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  char *v37;
  int8x16_t v38;
  __int128 v39;
  char *v40;
  char *v41;
  char *v42;
  _WORD *v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _WORD *v57;
  unsigned __int8 *v58;
  __int16 v59;
  uint64_t v60;
  _WORD *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  int8x16_t v65;
  int8x16_t v66;
  char *v67;
  char *v68;
  char *v69;
  _WORD *v70;
  unint64_t v71;
  BOOL v72;
  uint64_t v73;
  unint64_t v74;
  _WORD *v75;
  unsigned __int8 *v76;
  __int16 v77;
  unint64_t v78;
  BOOL v79;
  unint64_t v80;
  _BYTE *v81;
  char *v82;
  char v83;
  unint64_t v84;
  unsigned __int128 *v85;
  unsigned __int128 v86;
  _BYTE *v87;
  unint64_t v88;
  unint64_t v89;
  BOOL v90;
  unint64_t v91;
  _BYTE *v92;
  char *v93;
  char v94;
  uint8x8_t *v95;
  uint16x8_t *v96;
  unint64_t v97;
  uint8x16_t v98;
  uint16x8_t v99;
  uint16x8_t v100;
  uint8x8_t *v101;
  uint16x8_t *v102;
  unint64_t v103;
  uint8x8_t v104;
  uint8x8_t *v105;
  uint16x8_t *v106;
  unint64_t v107;
  uint8x16_t v108;
  uint16x8_t v109;
  uint16x8_t v110;
  uint8x8_t *v111;
  uint16x8_t *v112;
  unint64_t v113;
  uint8x8_t v114;
  int8x16_t *v115;
  int8x16_t *v116;
  unint64_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int16x8_t *v122;
  int8x8_t *v123;
  unint64_t v124;
  int16x8_t v125;
  int8x16_t *v126;
  int8x16_t *v127;
  unint64_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int16x8_t *v133;
  int8x8_t *v134;
  unint64_t v135;
  int16x8_t v136;
  WTF::StringImpl *v137;
  WTF::AtomStringImpl *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __int128 v171;
  int8x16_t v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  unsigned int v175;
  char v176;
  int8x16x2_t v177;
  int8x16x2_t v178;
  int8x16x2_t v179;
  int8x16x2_t v180;
  int8x16x2_t v181;
  int8x16x2_t v182;
  int8x16x2_t v183;

  v173 = 0;
  v174 = 0;
  v175 = 0;
  v176 = 1;
  if (!a2)
    goto LABEL_181;
  v11 = (uint64_t *)a3;
  v12 = a1;
  v13 = &a1[a2];
  v14 = 0uLL;
  do
  {
    v171 = v9;
    v172 = v14;
    if (!v175)
    {
      v24 = *v12;
      if (v174)
      {
        if (v24)
        {
          v15 = *(int8x16_t **)(v24 + 8);
          v16 = *(unsigned int *)(v24 + 4);
          if ((*(_BYTE *)(v24 + 16) & 4) == 0)
          {
            WTF::StringBuilder::append((uint64_t)&v173, v15, v16, a4, a5, a6, a7, a8);
            goto LABEL_5;
          }
        }
        else
        {
          v15 = 0;
          v16 = 0;
        }
        WTF::StringBuilder::append((uint64_t)&v173, v15, v16, a4, a5, a6, a7, a8);
LABEL_5:
        v9 = v171;
        v14 = v172;
        goto LABEL_6;
      }
      if (v24)
        *(_DWORD *)v24 += 2;
      v35 = v173;
      v173 = (WTF::StringImpl *)v24;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
        {
          WTF::StringImpl::~StringImpl(v35, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
          v9 = v171;
          v14 = v172;
          v24 = *v12;
          if (!*v12)
            goto LABEL_56;
          goto LABEL_55;
        }
        *(_DWORD *)v35 -= 2;
      }
      if (!v24)
      {
LABEL_56:
        v175 = v24;
        goto LABEL_6;
      }
LABEL_55:
      LODWORD(v24) = *(_DWORD *)(v24 + 4);
      goto LABEL_56;
    }
    v17 = *v11;
    if (*v11)
    {
      v18 = *(_DWORD *)(v17 + 4);
      v19 = *v12;
      if (!*v12)
        goto LABEL_23;
    }
    else
    {
      v18 = 0;
      v19 = *v12;
      if (!*v12)
      {
LABEL_23:
        if (__CFADD__(v175, v18))
          v22 = 0xFFFFFFFFLL;
        else
          v22 = v175 + v18;
        v23 = v174;
        if (!v174)
          goto LABEL_27;
        goto LABEL_28;
      }
    }
    v20 = *(_DWORD *)(v19 + 4);
    v54 = __CFADD__(v18, v20);
    v21 = v18 + v20;
    if (v54)
      v21 = -1;
    if (__CFADD__(v175, v21))
      v22 = 0xFFFFFFFFLL;
    else
      v22 = v175 + v21;
    v23 = v174;
    if (!v174)
    {
LABEL_27:
      v23 = v173;
      if (!v173)
        goto LABEL_29;
    }
LABEL_28:
    if ((*((_BYTE *)v23 + 16) & 4) == 0)
      goto LABEL_35;
LABEL_29:
    if (v17 && (*(_BYTE *)(v17 + 16) & 4) == 0)
    {
      v25 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v173, (WTF::AtomStringImpl *)v22, a3, a4, a5, a6, a7, a8);
      v9 = v171;
      v14 = v172;
      v26 = (_WORD *)v25;
      if (!v25)
        goto LABEL_6;
      goto LABEL_37;
    }
    if (v19 && (*(_BYTE *)(v19 + 16) & 4) == 0)
    {
LABEL_35:
      v27 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v173, (WTF::AtomStringImpl *)v22, a3, a4, a5, a6, a7, a8);
      v9 = v171;
      v14 = v172;
      if (!v27)
        goto LABEL_6;
      v26 = (_WORD *)v27;
      if (!v17)
      {
        v44 = 0;
        if (!v19)
          goto LABEL_6;
LABEL_82:
        v61 = &v26[v44];
        a2 = *(_QWORD *)(v19 + 8);
        v62 = *(unsigned int *)(v19 + 4);
        if ((*(_BYTE *)(v19 + 16) & 4) != 0)
        {
          if (v62 < 0x40)
          {
            v63 = (unint64_t)&v26[v44];
            v70 = &v61[v62];
            if (v61 == v70)
              goto LABEL_6;
          }
          else
          {
            v63 = (unint64_t)&v61[v62 & 0xFFFFFFC0];
            v64 = (char *)&v26[v44];
            do
            {
              v178.val[0] = *(int8x16_t *)a2;
              v65 = *(int8x16_t *)(a2 + 16);
              v180.val[0] = *(int8x16_t *)(a2 + 32);
              v66 = *(int8x16_t *)(a2 + 48);
              a2 += 64;
              v182.val[0] = v66;
              v180.val[1] = v14;
              v183.val[0] = v65;
              v178.val[1] = v14;
              v67 = v64;
              vst2q_s8(v67, v178);
              v67 += 32;
              v182.val[1] = v14;
              v183.val[1] = v14;
              vst2q_s8(v67, v183);
              v68 = v64 + 64;
              vst2q_s8(v68, v180);
              v69 = v64 + 96;
              v64 += 128;
              vst2q_s8(v69, v182);
            }
            while (v64 != (char *)v63);
            v70 = &v61[v62];
            if ((_WORD *)v63 == v70)
              goto LABEL_6;
          }
          v71 = (unint64_t)&v26[v44 - 1 + v62] - v63;
          if (v71 < 0xE
            || (v63 < a2 + (v71 >> 1) + 1 ? (v72 = a2 >= v63 + (v71 & 0xFFFFFFFFFFFFFFFELL) + 2) : (v72 = 1), !v72))
          {
            v75 = (_WORD *)v63;
            v76 = (unsigned __int8 *)a2;
            goto LABEL_101;
          }
          v73 = (v71 >> 1) + 1;
          if (v71 >= 0x3E)
          {
            v74 = v73 & 0xFFFFFFFFFFFFFFE0;
            v105 = (uint8x8_t *)(a2 + 16);
            v106 = (uint16x8_t *)(v63 + 32);
            v107 = v73 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v108 = *(uint8x16_t *)v105[-2].i8;
              v109 = vmovl_u8(*v105);
              v110 = vmovl_high_u8(*(uint8x16_t *)v105->i8);
              v106[-2] = vmovl_u8(*(uint8x8_t *)v108.i8);
              v106[-1] = vmovl_high_u8(v108);
              *v106 = v109;
              v106[1] = v110;
              v106 += 4;
              v105 += 4;
              v107 -= 32;
            }
            while (v107);
            if (v73 == v74)
              goto LABEL_6;
            if ((v73 & 0x18) == 0)
            {
              v76 = (unsigned __int8 *)(a2 + v74);
              v75 = (_WORD *)(v63 + 2 * v74);
              do
              {
LABEL_101:
                v77 = *v76++;
                *v75++ = v77;
              }
              while (v75 != v70);
              goto LABEL_6;
            }
          }
          else
          {
            v74 = 0;
          }
          v75 = (_WORD *)(v63 + 2 * (v73 & 0xFFFFFFFFFFFFFFF8));
          v76 = (unsigned __int8 *)(a2 + (v73 & 0xFFFFFFFFFFFFFFF8));
          v111 = (uint8x8_t *)(a2 + v74);
          v112 = (uint16x8_t *)(v63 + 2 * v74);
          v113 = v74 - (v73 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v114 = *v111++;
            *v112++ = vmovl_u8(v114);
            v113 += 8;
          }
          while (v113);
          if (v73 != (v73 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_101;
        }
        else if ((_DWORD)v62)
        {
          if ((_DWORD)v62 != 1)
          {
            a3 = 2 * v62;
            v171 = v9;
            v172 = v14;
LABEL_130:
            memcpy(v61, (const void *)a2, a3);
            goto LABEL_5;
          }
          *v61 = *(_WORD *)a2;
        }
        goto LABEL_6;
      }
LABEL_37:
      a2 = *(_QWORD *)(v17 + 8);
      v28 = *(unsigned int *)(v17 + 4);
      if ((*(_BYTE *)(v17 + 16) & 4) == 0)
      {
        if ((_DWORD)v28)
        {
          if ((_DWORD)v28 == 1)
          {
            *v26 = *(_WORD *)a2;
          }
          else
          {
            memcpy(v26, (const void *)a2, 2 * v28);
            v9 = v171;
            v14 = v172;
          }
        }
LABEL_81:
        v44 = *(unsigned int *)(v17 + 4);
        if (!v19)
          goto LABEL_6;
        goto LABEL_82;
      }
      if (v28 < 0x40)
      {
        v36 = (unint64_t)v26;
        v43 = &v26[v28];
        if (v26 == v43)
          goto LABEL_81;
      }
      else
      {
        v36 = (unint64_t)&v26[v28 & 0xFFFFFFC0];
        v37 = (char *)v26;
        do
        {
          v177.val[0] = *(int8x16_t *)a2;
          v38 = *(int8x16_t *)(a2 + 16);
          v179.val[0] = *(int8x16_t *)(a2 + 32);
          v39 = *(_OWORD *)(a2 + 48);
          a2 += 64;
          v9 = v39;
          v179.val[1] = v14;
          v181.val[0] = v38;
          v177.val[1] = v14;
          v40 = v37;
          vst2q_s8(v40, v177);
          v40 += 32;
          v181.val[1] = v14;
          vst2q_s8(v40, v181);
          v41 = v37 + 64;
          vst2q_s8(v41, v179);
          v42 = v37 + 96;
          vst2q_s8(v42, *(int8x16x2_t *)&v9);
          v37 += 128;
        }
        while (v37 != (char *)v36);
        v43 = &v26[v28];
        if ((_WORD *)v36 == v43)
          goto LABEL_81;
      }
      v53 = (unint64_t)&v26[v28 - 1] - v36;
      if (v53 < 0xE
        || (v36 < a2 + (v53 >> 1) + 1 ? (v54 = a2 >= v36 + (v53 & 0xFFFFFFFFFFFFFFFELL) + 2) : (v54 = 1), !v54))
      {
        v57 = (_WORD *)v36;
        v58 = (unsigned __int8 *)a2;
        goto LABEL_76;
      }
      v55 = (v53 >> 1) + 1;
      if (v53 >= 0x3E)
      {
        v56 = v55 & 0xFFFFFFFFFFFFFFE0;
        v95 = (uint8x8_t *)(a2 + 16);
        v96 = (uint16x8_t *)(v36 + 32);
        v97 = v55 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v98 = *(uint8x16_t *)v95[-2].i8;
          v99 = vmovl_u8(*v95);
          v100 = vmovl_high_u8(*(uint8x16_t *)v95->i8);
          v96[-2] = vmovl_u8(*(uint8x8_t *)v98.i8);
          v96[-1] = vmovl_high_u8(v98);
          *v96 = v99;
          v96[1] = v100;
          v96 += 4;
          v95 += 4;
          v97 -= 32;
        }
        while (v97);
        if (v55 == v56)
          goto LABEL_81;
        if ((v55 & 0x18) == 0)
        {
          v58 = (unsigned __int8 *)(a2 + v56);
          v57 = (_WORD *)(v36 + 2 * v56);
          goto LABEL_76;
        }
      }
      else
      {
        v56 = 0;
      }
      v57 = (_WORD *)(v36 + 2 * (v55 & 0xFFFFFFFFFFFFFFF8));
      v58 = (unsigned __int8 *)(a2 + (v55 & 0xFFFFFFFFFFFFFFF8));
      v101 = (uint8x8_t *)(a2 + v56);
      v102 = (uint16x8_t *)(v36 + 2 * v56);
      v103 = v56 - (v55 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v104 = *v101++;
        *v102++ = vmovl_u8(v104);
        v103 += 8;
      }
      while (v103);
      if (v55 == (v55 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_81;
      do
      {
LABEL_76:
        v59 = *v58++;
        *v57++ = v59;
      }
      while (v57 != v43);
      goto LABEL_81;
    }
    v29 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v173, (WTF::AtomStringImpl *)v22, a3, a4, a5, a6, a7, a8);
    v9 = v171;
    v14 = v172;
    if (!v29)
      goto LABEL_6;
    v30 = v29;
    if (v17)
    {
      a2 = *(_QWORD *)(v17 + 8);
      a3 = *(unsigned int *)(v17 + 4);
      if ((*(_BYTE *)(v17 + 16) & 4) != 0)
      {
        if ((_DWORD)a3)
        {
          if ((_DWORD)a3 == 1)
          {
            *v29 = *(_BYTE *)a2;
          }
          else
          {
            memcpy(v29, (const void *)a2, a3);
            v9 = v171;
            v14 = v172;
          }
        }
LABEL_120:
        v60 = *(unsigned int *)(v17 + 4);
        if (!v19)
          goto LABEL_6;
        goto LABEL_121;
      }
      if (a3 < 0x10)
      {
        v31 = (unint64_t)v29;
        v34 = &v29[a3];
        if (v29 == &v29[a3])
          goto LABEL_120;
      }
      else
      {
        v31 = (unint64_t)&v29[a3 & 0xFFFFFFF0];
        v32 = (unsigned __int128 *)v29;
        do
        {
          v33 = (unsigned __int128)vld2q_s8((const char *)a2);
          a2 += 32;
          *v32++ = v33;
        }
        while (v32 != (unsigned __int128 *)v31);
        v34 = &v29[a3];
        if ((_BYTE *)v31 == &v29[a3])
          goto LABEL_120;
      }
      v78 = (unint64_t)&v29[a3 - v31];
      if (v78 < 8 || (v31 < a2 + 2 * v78 ? (v79 = a2 >= (unint64_t)&v29[a3]) : (v79 = 1), !v79))
      {
        v81 = (_BYTE *)v31;
        v82 = (char *)a2;
        goto LABEL_117;
      }
      if (v78 >= 0x20)
      {
        v80 = v78 & 0xFFFFFFFFFFFFFFE0;
        v115 = (int8x16_t *)(a2 + 32);
        v116 = (int8x16_t *)(v31 + 16);
        v117 = v78 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v119 = v115[-2];
          v118 = v115[-1];
          v121 = *v115;
          v120 = v115[1];
          v115 += 4;
          v116[-1] = vuzp1q_s8(v119, v118);
          *v116 = vuzp1q_s8(v121, v120);
          v116 += 2;
          v117 -= 32;
        }
        while (v117);
        if (v78 == v80)
          goto LABEL_120;
        if ((v78 & 0x18) == 0)
        {
          v82 = (char *)(a2 + 2 * v80);
          v81 = (_BYTE *)(v31 + v80);
          goto LABEL_117;
        }
      }
      else
      {
        v80 = 0;
      }
      v81 = (_BYTE *)(v31 + (v78 & 0xFFFFFFFFFFFFFFF8));
      v82 = (char *)(a2 + 2 * (v78 & 0xFFFFFFFFFFFFFFF8));
      v122 = (int16x8_t *)(a2 + 2 * v80);
      v123 = (int8x8_t *)(v31 + v80);
      v124 = v80 - (v78 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v125 = *v122++;
        *v123++ = vmovn_s16(v125);
        v124 += 8;
      }
      while (v124);
      if (v78 == (v78 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_120;
      do
      {
LABEL_117:
        v83 = *v82;
        v82 += 2;
        *v81++ = v83;
      }
      while (v81 != v34);
      goto LABEL_120;
    }
    v60 = 0;
    if (!v19)
      goto LABEL_6;
LABEL_121:
    v61 = &v30[v60];
    a2 = *(_QWORD *)(v19 + 8);
    a3 = *(unsigned int *)(v19 + 4);
    if ((*(_BYTE *)(v19 + 16) & 4) != 0)
    {
      if ((_DWORD)a3)
      {
        if ((_DWORD)a3 != 1)
          goto LABEL_130;
        *(_BYTE *)v61 = *(_BYTE *)a2;
      }
    }
    else
    {
      if (a3 < 0x10)
      {
        v84 = (unint64_t)&v30[v60];
        v87 = (char *)v61 + a3;
        if (v61 == (_WORD *)((char *)v61 + a3))
          goto LABEL_6;
      }
      else
      {
        v84 = (unint64_t)v61 + (a3 & 0xFFFFFFF0);
        v85 = (unsigned __int128 *)&v30[v60];
        do
        {
          v86 = (unsigned __int128)vld2q_s8((const char *)a2);
          a2 += 32;
          *v85++ = v86;
        }
        while (v85 != (unsigned __int128 *)v84);
        v87 = (char *)v61 + a3;
        if ((_WORD *)v84 == (_WORD *)((char *)v61 + a3))
          goto LABEL_6;
      }
      v88 = (unint64_t)&v30[v60 + a3];
      v89 = v88 - v84;
      if (v88 - v84 < 8 || (v84 < a2 + 2 * v89 ? (v90 = a2 >= v88) : (v90 = 1), !v90))
      {
        v92 = (_BYTE *)v84;
        v93 = (char *)a2;
        goto LABEL_141;
      }
      if (v89 >= 0x20)
      {
        v91 = v89 & 0xFFFFFFFFFFFFFFE0;
        v126 = (int8x16_t *)(a2 + 32);
        v127 = (int8x16_t *)(v84 + 16);
        v128 = v89 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v130 = v126[-2];
          v129 = v126[-1];
          v132 = *v126;
          v131 = v126[1];
          v126 += 4;
          v127[-1] = vuzp1q_s8(v130, v129);
          *v127 = vuzp1q_s8(v132, v131);
          v127 += 2;
          v128 -= 32;
        }
        while (v128);
        if (v89 == v91)
          goto LABEL_6;
        if ((v89 & 0x18) == 0)
        {
          v93 = (char *)(a2 + 2 * v91);
          v92 = (_BYTE *)(v84 + v91);
          do
          {
LABEL_141:
            v94 = *v93;
            v93 += 2;
            *v92++ = v94;
          }
          while (v92 != v87);
          goto LABEL_6;
        }
      }
      else
      {
        v91 = 0;
      }
      v92 = (_BYTE *)(v84 + (v89 & 0xFFFFFFFFFFFFFFF8));
      v93 = (char *)(a2 + 2 * (v89 & 0xFFFFFFFFFFFFFFF8));
      v133 = (int16x8_t *)(a2 + 2 * v91);
      v134 = (int8x8_t *)(v84 + v91);
      v135 = v91 - (v89 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v136 = *v133++;
        *v134++ = vmovn_s16(v136);
        v135 += 8;
      }
      while (v135);
      if (v89 != (v89 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_141;
    }
LABEL_6:
    ++v12;
  }
  while (v12 != v13);
  v137 = v173;
  if (v173)
    goto LABEL_190;
  a2 = v175;
  if ((v175 & 0x80000000) != 0)
    goto LABEL_189;
LABEL_181:
  if (!v174 || *((_DWORD *)v174 + 1) <= a2 + (a2 >> 2))
    goto LABEL_189;
  if ((*((_BYTE *)v174 + 16) & 4) != 0)
    WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v173, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  else
    WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v173, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  v145 = v173;
  v173 = v174;
  v174 = 0;
  if (!v145)
  {
LABEL_189:
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v173);
    v137 = v173;
    if (!v173)
      goto LABEL_191;
    goto LABEL_190;
  }
  if (*(_DWORD *)v145 != 2)
  {
    *(_DWORD *)v145 -= 2;
    goto LABEL_189;
  }
  WTF::StringImpl::~StringImpl(v145, v138, v139, v140, v141, v142, v143, v144);
  WTF::fastFree(v163, v164, v165, v166, v167, v168, v169, v170);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v173);
  v137 = v173;
  if (v173)
LABEL_190:
    *(_DWORD *)v137 += 2;
LABEL_191:
  *a9 = v137;
  v146 = v174;
  v174 = 0;
  if (!v146)
    goto LABEL_194;
  if (*(_DWORD *)v146 == 2)
  {
    WTF::StringImpl::~StringImpl(v146, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v147, v148, v149, v150, v151, v152, v153, v154);
    v137 = v173;
    v173 = 0;
    if (!v137)
      return;
    goto LABEL_197;
  }
  *(_DWORD *)v146 -= 2;
LABEL_194:
  v173 = 0;
  if (v137)
  {
LABEL_197:
    if (*(_DWORD *)v137 == 2)
    {
      WTF::StringImpl::~StringImpl(v137, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v155, v156, v157, v158, v159, v160, v161, v162);
    }
    else
    {
      *(_DWORD *)v137 -= 2;
    }
  }
}

uint64_t WTF::makeStringByRemoving@<X0>(uint64_t this@<X0>, const WTF::String *a2@<X1>, unsigned int a3@<W2>, int **a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  int8x16_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int8x16_t *v14;
  uint64_t v15;
  int v16;

  v5 = *(_QWORD *)this;
  if (!a3)
  {
    if (v5)
      goto LABEL_13;
LABEL_14:
    *a4 = (int *)v5;
    return this;
  }
  if (!v5)
    goto LABEL_14;
  v6 = *(unsigned int *)(v5 + 4);
  if (v6 <= a2)
  {
LABEL_13:
    *(_DWORD *)v5 += 2;
    goto LABEL_14;
  }
  if ((int)v6 - (int)a2 >= a3)
    v7 = a3;
  else
    v7 = v6 - (_DWORD)a2;
  v8 = *(unsigned int *)(v5 + 16);
  v9 = *(int8x16_t **)(v5 + 8);
  v10 = (v8 >> 2) & 1;
  v11 = v7 + a2;
  if (v6 <= v11)
  {
    v12 = 0x100000000;
    v14 = (int8x16_t *)"";
  }
  else if ((_DWORD)v11)
  {
    v13 = v6 - v11;
    v12 = v13;
    if ((_DWORD)v10)
    {
      if (v13 >= v13)
      {
        v14 = (int8x16_t *)((char *)v9 + v11);
        v12 = v13 | 0x100000000;
        goto LABEL_20;
      }
LABEL_29:
      __break(1u);
      return this;
    }
    if (v13 < v13)
      goto LABEL_29;
    v14 = (int8x16_t *)((char *)v9 + 2 * v11);
  }
  else
  {
    v12 = (v10 << 32) | v6;
    v14 = v9;
  }
LABEL_20:
  if (((v12 | a2) & 0x80000000) != 0
    || (this = ((_DWORD)a2 + v12), __OFADD__((_DWORD)a2, (_DWORD)v12)))
  {
    *a4 = 0;
LABEL_28:
    __break(0xC471u);
    goto LABEL_29;
  }
  v15 = a2 | (((v8 >> 2) & 1) << 32);
  if ((_DWORD)v10)
    v16 = HIDWORD(v12);
  else
    v16 = 0;
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(this, v16, v9, v15, v14, v12, a4);
  if (!*a4)
    goto LABEL_28;
  return this;
}

int **WTF::String::substringSharingImpl@<X0>(int **this@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, int **a4@<X8>)
{
  int *v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  _WORD *v9;
  int *v10;
  int v11;
  uint64_t v12;
  _BYTE *v13;
  const void *v14;
  size_t v15;

  v5 = *this;
  if (*this)
  {
    v6 = v5[1];
    if (v6 >= a2)
      v7 = a2;
    else
      v7 = v6;
    if (v6 - v7 >= a3)
      v8 = a3;
    else
      v8 = v6 - v7;
    if ((_DWORD)v7)
      goto LABEL_14;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
  }
  if ((_DWORD)v8 == v6)
  {
    if (!v5)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_14:
  if (!(_DWORD)v8)
  {
    v5 = &WTF::StringImpl::s_emptyAtomString;
LABEL_21:
    *v5 += 2;
    *a4 = v5;
    return this;
  }
  if ((v5[4] & 4) != 0)
  {
    if (v8 <= 0xC)
    {
      v13 = (_BYTE *)(*((_QWORD *)v5 + 1) + v7);
      v5 = (int *)WTF::fastCompactMalloc((WTF *)(v8 + 20));
      this = (int **)(v5 + 5);
      *v5 = 2;
      v5[1] = v8;
      *((_QWORD *)v5 + 1) = v5 + 5;
      v5[4] = 4;
      if ((_DWORD)v8 == 1)
      {
        *(_BYTE *)this = *v13;
        *a4 = v5;
        return this;
      }
      v14 = v13;
      v15 = v8;
      goto LABEL_33;
    }
  }
  else if (v8 <= 6)
  {
    v9 = (_WORD *)(*((_QWORD *)v5 + 1) + 2 * v7);
    v5 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v8 + 20));
    this = (int **)(v5 + 5);
    *v5 = 2;
    v5[1] = v8;
    *((_QWORD *)v5 + 1) = v5 + 5;
    v5[4] = 0;
    if ((_DWORD)v8 == 1)
    {
      *(_WORD *)this = *v9;
LABEL_19:
      *a4 = v5;
      return this;
    }
    v14 = v9;
    v15 = 2 * v8;
LABEL_33:
    this = (int **)memcpy(this, v14, v15);
    *a4 = v5;
    return this;
  }
  v10 = *this;
  if ((v5[4] & 3) == 2)
    v10 = (int *)*((_QWORD *)v5 + 3);
  this = (int **)WTF::fastCompactMalloc((WTF *)0x20);
  v11 = v5[4];
  v12 = *((_QWORD *)v5 + 1);
  *v10 += 2;
  *(_DWORD *)this = 2;
  *((_DWORD *)this + 1) = v8;
  if ((v11 & 4) != 0)
  {
    this[1] = (int *)(v12 + v7);
    *((_DWORD *)this + 4) = 6;
  }
  else
  {
    this[1] = (int *)(v12 + 2 * v7);
    *((_DWORD *)this + 4) = 2;
  }
  this[3] = v10;
  *a4 = (int *)this;
  return this;
}

_BYTE *WTF::String::convertToASCIILowercase@<X0>(WTF::String *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *result;
  uint64_t v4;

  result = *(_BYTE **)this;
  if (result)
  {
    result = WTF::StringImpl::convertToASCIILowercase(result, &v4);
    *a2 = v4;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

_BYTE *WTF::String::convertToASCIIUppercase@<X0>(WTF::String *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *result;
  uint64_t v4;

  result = *(_BYTE **)this;
  if (result)
  {
    result = WTF::StringImpl::convertToASCIIUppercase(result, &v4);
    *a2 = v4;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void WTF::String::convertToLowercaseWithoutLocale(WTF::StringImpl **this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  v3 = *this;
  if (v3)
  {
    WTF::StringImpl::convertToLowercaseWithoutLocale(v3, &v4);
    *a2 = v4;
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t WTF::String::convertToLowercaseWithoutLocaleStartingAtFailingIndex8Bit@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v5 = *(unsigned int *)(v4 + 4);
    if ((v5 & 0x80000000) != 0)
    {
      __break(0xC471u);
    }
    else
    {
      LODWORD(v6) = a2;
      this = WTF::fastCompactMalloc((WTF *)(v5 + 20));
      v7 = this;
      *(_DWORD *)this = 2;
      *(_DWORD *)(this + 4) = v5;
      *(_QWORD *)(this + 8) = this + 20;
      *(_DWORD *)(this + 16) = 4;
      if ((_DWORD)v6)
      {
        v8 = 0;
        do
        {
          *(_BYTE *)(this + 20 + v8) = *(_BYTE *)(*(_QWORD *)(v4 + 8) + v8);
          ++v8;
        }
        while (v6 != v8);
      }
      if (*(_DWORD *)(v4 + 4) > v6)
      {
        v6 = v6;
        do
        {
          while (1)
          {
            v9 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 8) + v6);
            if ((*(char *)(*(_QWORD *)(v4 + 8) + v6) & 0x80000000) == 0)
              break;
            this = MEMORY[0x19AEBC048](v9);
            *(_BYTE *)(v7 + v6++ + 20) = this;
            if (v6 >= *(unsigned int *)(v4 + 4))
              goto LABEL_11;
          }
          this = WTF::asciiCaseFoldTable[v9];
          *(_BYTE *)(v7 + v6++ + 20) = this;
        }
        while (v6 < *(unsigned int *)(v4 + 4));
      }
LABEL_11:
      *a3 = v7;
    }
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

void WTF::String::convertToUppercaseWithoutLocale(WTF::StringImpl **this@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  WTF::StringImpl *v10;
  uint64_t v11;

  v10 = *this;
  if (v10)
  {
    WTF::StringImpl::convertToUppercaseWithoutLocale(v10, a2, a3, a4, a5, a6, a7, a8, &v11);
    *a9 = v11;
  }
  else
  {
    *a9 = 0;
  }
}

void WTF::String::convertToLowercaseWithLocale(WTF ***this@<X0>, const WTF::AtomString *a2@<X1>, _QWORD *a3@<X8>)
{
  WTF **v4;
  uint64_t v5;

  v4 = *this;
  if (v4)
  {
    WTF::StringImpl::convertToLowercaseWithLocale(v4, a2, &v5);
    *a3 = v5;
  }
  else
  {
    *a3 = 0;
  }
}

void WTF::String::convertToUppercaseWithLocale(WTF::StringImpl **this@<X0>, const WTF::AtomString *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S2>)
{
  WTF::StringImpl *v11;
  int *v12;

  v11 = *this;
  if (v11)
  {
    WTF::StringImpl::convertToUppercaseWithLocale(v11, a2, a3, a4, a5, a6, a7, a8, &v12, a10);
    *a9 = v12;
  }
  else
  {
    *a9 = 0;
  }
}

uint64_t WTF::String::trim@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (result)
  {
    result = WTF::StringImpl::trimMatchedCharacters<BOOL (*)(char16_t)>(result, a2, &v5);
    *a3 = v5;
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void WTF::String::simplifyWhiteSpace(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v10;
  uint64_t v11;

  v10 = *a1;
  if (v10)
  {
    if ((*(_BYTE *)(v10 + 16) & 4) != 0)
      WTF::StringImpl::simplifyMatchedCharactersToSpace<unsigned char,BOOL (*)(char16_t)>(v10, a2, a3, a4, a5, a6, a7, a8, &v11);
    else
      WTF::StringImpl::simplifyMatchedCharactersToSpace<char16_t,BOOL (*)(char16_t)>(v10, a2, a3, a4, a5, a6, a7, a8, &v11);
    *a9 = v11;
  }
  else
  {
    *a9 = 0;
  }
}

void WTF::String::foldCase(WTF::StringImpl **this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  v3 = *this;
  if (v3)
  {
    WTF::StringImpl::foldCase(v3, &v4);
    *a2 = v4;
  }
  else
  {
    *a2 = 0;
  }
}

void WTF::String::charactersWithoutNullTermination(WTF::String *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  char *v6;
  unsigned int v7;
  uint8x8_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unsigned __int8 *v34;
  char *v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint8x8_t *v39;
  uint16x8_t *v40;
  uint8x16_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint8x8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint8x8_t v47;
  __int16 v48;
  char *v49;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v4 = *(_DWORD *)(v3 + 4);
    v5 = (v4 + 1);
    if (v4 == -1)
    {
      v6 = 0;
      v7 = -1;
      v8 = *(uint8x8_t **)(v3 + 8);
      v9 = 0xFFFFFFFFLL;
      if ((*(_BYTE *)(v3 + 16) & 4) == 0)
      {
LABEL_4:
        if (v7)
        {
          if (v7 <= v5)
          {
LABEL_42:
            memcpy(v6, v8, 2 * v9);
            goto LABEL_61;
          }
          v10 = v5 + (v5 >> 2);
          if (v10 >= 0x10)
            v11 = v10 + 1;
          else
            v11 = 16;
          if (v11 <= v9)
            v5 = v9;
          else
            v5 = v11;
          if (!(v5 >> 31))
          {
            v12 = WTF::fastMalloc((WTF *)(2 * v5));
            if (v6)
            {
              if ((char *)v12 == v6)
              {
                LODWORD(v5) = 0;
                v20 = 0;
              }
              else
              {
                v20 = (char *)v12;
              }
              WTF::fastFree((unint64_t)v6, v13, v14, v15, v16, v17, v18, v19);
              v6 = v20;
            }
            else
            {
              v6 = (char *)v12;
            }
            goto LABEL_42;
          }
LABEL_63:
          __break(0xC471u);
          JUMPOUT(0x197B5BC38);
        }
LABEL_61:
        *(_QWORD *)a2 = v6;
        *(_DWORD *)(a2 + 8) = v5;
        *(_DWORD *)(a2 + 12) = v7;
        goto LABEL_62;
      }
    }
    else
    {
      if ((v5 & 0x80000000) != 0 || (WTF::tryFastMalloc((WTF *)(2 * v5), &v49), (v6 = v49) == 0))
      {
        *(_BYTE *)a2 = 0;
        *(_DWORD *)(a2 + 16) = 1;
        return;
      }
      v22 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
      {
        v7 = 0;
        goto LABEL_61;
      }
      v7 = *(_DWORD *)(v22 + 4);
      v8 = *(uint8x8_t **)(v22 + 8);
      v9 = v7;
      if ((*(_BYTE *)(v22 + 16) & 4) == 0)
        goto LABEL_4;
    }
    if (!v7)
      goto LABEL_61;
    if (v7 > v5)
    {
      v23 = v5 + (v5 >> 2);
      if (v23 >= 0x10)
        v24 = v23 + 1;
      else
        v24 = 16;
      if (v24 <= v9)
        v5 = v9;
      else
        v5 = v24;
      if (v5 >> 31)
        goto LABEL_63;
      v25 = WTF::fastMalloc((WTF *)(2 * v5));
      if (!v6)
      {
        v6 = (char *)v25;
        v34 = (unsigned __int8 *)v8 + v9;
        if (v7 < 8)
          goto LABEL_38;
        goto LABEL_44;
      }
      if ((char *)v25 == v6)
      {
        LODWORD(v5) = 0;
        v33 = 0;
      }
      else
      {
        v33 = (char *)v25;
      }
      WTF::fastFree((unint64_t)v6, v26, v27, v28, v29, v30, v31, v32);
      v6 = v33;
    }
    v34 = (unsigned __int8 *)v8 + v9;
    if (v7 < 8)
    {
LABEL_38:
      v35 = v6;
      goto LABEL_60;
    }
LABEL_44:
    v36 = v6 >= (char *)v34 || v8 >= (uint8x8_t *)&v6[2 * v9];
    v35 = v6;
    if (!v36)
      goto LABEL_60;
    if (v7 >= 0x20)
    {
      v38 = 0;
      v37 = v9 & 0xFFFFFFE0;
      v39 = v8 + 2;
      do
      {
        v40 = (uint16x8_t *)&v6[v38];
        v41 = *(uint8x16_t *)v39[-2].i8;
        v42 = vmovl_u8(*v39);
        v43 = vmovl_high_u8(*(uint8x16_t *)v39->i8);
        *v40 = vmovl_u8(*(uint8x8_t *)v41.i8);
        v40[1] = vmovl_high_u8(v41);
        v40[2] = v42;
        v40[3] = v43;
        v39 += 4;
        v38 += 64;
      }
      while (((2 * v9) & 0x1FFFFFFC0) != v38);
      if (v37 == v9)
        goto LABEL_61;
      if ((v9 & 0x18) == 0)
      {
        v8 = (uint8x8_t *)((char *)v8 + v37);
        v35 = &v6[2 * v37];
        do
        {
LABEL_60:
          v48 = v8->u8[0];
          v8 = (uint8x8_t *)((char *)v8 + 1);
          *(_WORD *)v35 = v48;
          v35 += 2;
        }
        while (v8 != (uint8x8_t *)v34);
        goto LABEL_61;
      }
    }
    else
    {
      v37 = 0;
    }
    v35 = &v6[2 * (v9 & 0xFFFFFFF8)];
    v44 = (uint8x8_t *)((char *)v8 + v37);
    v45 = 2 * v37;
    v46 = v37 - (v9 & 0xFFFFFFF8);
    do
    {
      v47 = *v44++;
      *(uint16x8_t *)&v6[v45] = vmovl_u8(v47);
      v45 += 16;
      v46 += 8;
    }
    while (v46);
    v8 = (uint8x8_t *)((char *)v8 + (v9 & 0xFFFFFFF8));
    if ((v9 & 0xFFFFFFF8) == v9)
      goto LABEL_61;
    goto LABEL_60;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
LABEL_62:
  *(_DWORD *)(a2 + 16) = 0;
}

void WTF::String::charactersWithNullTermination(WTF::String *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _WORD *v7;
  _WORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::String::charactersWithoutNullTermination(this, a2);
  if (!*(_DWORD *)(a2 + 16))
  {
    v3 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v3 != *(_DWORD *)(a2 + 8))
    {
      v8 = *(_WORD **)a2;
LABEL_15:
      v8[v3] = 0;
      *(_DWORD *)(a2 + 12) = v3 + 1;
      return;
    }
    v4 = v3 + (v3 >> 2);
    if (v4 >= 0x10)
      v5 = v4 + 1;
    else
      v5 = 16;
    if (v5 <= v3 + 1)
      v6 = v3 + 1;
    else
      v6 = v5;
    if (!(v6 >> 31))
    {
      v7 = *(_WORD **)a2;
      v8 = (_WORD *)WTF::fastMalloc((WTF *)(2 * v6));
      *(_DWORD *)(a2 + 8) = v6;
      *(_QWORD *)a2 = v8;
      memcpy(v8, v7, 2 * v3);
      if (v7)
      {
        if (v8 == v7)
        {
          v8 = 0;
          *(_QWORD *)a2 = 0;
          *(_DWORD *)(a2 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v7, v9, v10, v11, v12, v13, v14, v15);
      }
      goto LABEL_15;
    }
    __break(0xC471u);
  }
}

unint64_t WTF::String::number@<X0>(unint64_t this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  _BYTE *v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _BYTE v13[13];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((this & 0x80000000) == 0)
  {
    v3 = 0;
    do
    {
      v4 = (this % 0xA) | 0x30;
      v13[v3-- + 12] = (this % 0xA) | 0x30;
      v5 = this >= 9;
      v6 = (_DWORD)this == 9;
      this = this / 0xAuLL;
    }
    while (!v6 && v5);
    if (v3 + 14 < 15)
    {
      if (v3)
      {
        if (!((unint64_t)-v3 >> 31))
        {
          v7 = WTF::fastCompactMalloc((WTF *)(20 - v3));
          this = v7 + 20;
          *(_DWORD *)v7 = 2;
          *(_DWORD *)(v7 + 4) = -(int)v3;
          *(_QWORD *)(v7 + 8) = v7 + 20;
          *(_DWORD *)(v7 + 16) = 4;
          *a2 = v7;
          if (v3 != -1)
          {
            v8 = &v13[v3 + 13];
            v9 = -v3;
            return (unint64_t)memcpy((void *)this, v8, v9);
          }
          *(_BYTE *)this = v4;
          return this;
        }
LABEL_21:
        __break(0xC471u);
        JUMPOUT(0x197B5BF5CLL);
      }
LABEL_13:
      WTF::StringImpl::s_emptyAtomString += 2;
      *a2 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
      return this;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v10 = 0;
  v11 = -(int)this;
  do
  {
    v13[v10-- + 12] = (v11 % 0xA) | 0x30;
    v5 = v11 >= 9;
    v6 = v11 == 9;
    v11 /= 0xAu;
  }
  while (!v6 && v5);
  v13[v10 + 12] = 45;
  if (v10 + 14 >= 16)
    goto LABEL_20;
  if (v10 == 1)
    goto LABEL_13;
  if ((unint64_t)(1 - v10) >> 31)
    goto LABEL_21;
  v12 = WTF::fastCompactMalloc((WTF *)(21 - v10));
  this = v12 + 20;
  *(_DWORD *)v12 = 2;
  *(_DWORD *)(v12 + 4) = 1 - v10;
  *(_QWORD *)(v12 + 8) = v12 + 20;
  *(_DWORD *)(v12 + 16) = 4;
  *a2 = v12;
  if (v10)
  {
    v8 = &v13[v10 + 12];
    v9 = 1 - v10;
    return (unint64_t)memcpy((void *)this, v8, v9);
  }
  *(_BYTE *)this = 45;
  return this;
}

{
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  _BYTE v7[13];
  uint64_t v8;

  v3 = 0;
  v8 = *MEMORY[0x1E0C80C00];
  do
  {
    v4 = (this % 0xA) | 0x30;
    v7[v3-- + 12] = (this % 0xA) | 0x30;
    v5 = this > 9;
    this = this / 0xAuLL;
  }
  while (v5);
  if (v3 + 14 >= 15)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (!v3)
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a2 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
    return this;
  }
  if ((unint64_t)-v3 >> 31)
  {
LABEL_12:
    __break(0xC471u);
    return this;
  }
  v6 = WTF::fastCompactMalloc((WTF *)(20 - v3));
  this = v6 + 20;
  *(_DWORD *)v6 = 2;
  *(_DWORD *)(v6 + 4) = -(int)v3;
  *(_QWORD *)(v6 + 8) = v6 + 20;
  *(_DWORD *)(v6 + 16) = 4;
  *a2 = v6;
  if (v3 != -1)
    return (unint64_t)memcpy((void *)this, &v7[v3 + 13], -v3);
  *(_BYTE *)this = v4;
  return this;
}

{
  uint64_t v3;
  char v4;
  BOOL v5;
  uint64_t v6;
  _BYTE *v7;
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE v12[25];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((this & 0x8000000000000000) == 0)
  {
    v3 = 0;
    do
    {
      v4 = (this % 0xA) | 0x30;
      v12[v3-- + 24] = v4;
      v5 = this > 9;
      this /= 0xAuLL;
    }
    while (v5);
    if (v3 + 26 < 27)
    {
      if (v3)
      {
        if (!((unint64_t)-v3 >> 31))
        {
          v6 = WTF::fastCompactMalloc((WTF *)(20 - v3));
          this = v6 + 20;
          *(_DWORD *)v6 = 2;
          *(_DWORD *)(v6 + 4) = -(int)v3;
          *(_QWORD *)(v6 + 8) = v6 + 20;
          *(_DWORD *)(v6 + 16) = 4;
          *a2 = v6;
          if (v3 != -1)
          {
            v7 = &v12[v3 + 25];
            v8 = -v3;
            return (unint64_t)memcpy((void *)this, v7, v8);
          }
          *(_BYTE *)this = v4;
          return this;
        }
LABEL_21:
        __break(0xC471u);
        JUMPOUT(0x197B5C304);
      }
LABEL_13:
      WTF::StringImpl::s_emptyAtomString += 2;
      *a2 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
      return this;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v9 = 0;
  v10 = -(uint64_t)this;
  do
  {
    v12[v9-- + 24] = (v10 % 0xA) | 0x30;
    v5 = v10 > 9;
    v10 /= 0xAuLL;
  }
  while (v5);
  v12[v9 + 24] = 45;
  if (v9 + 26 >= 28)
    goto LABEL_20;
  if (v9 == 1)
    goto LABEL_13;
  if ((unint64_t)(1 - v9) >> 31)
    goto LABEL_21;
  v11 = WTF::fastCompactMalloc((WTF *)(21 - v9));
  this = v11 + 20;
  *(_DWORD *)v11 = 2;
  *(_DWORD *)(v11 + 4) = 1 - v9;
  *(_QWORD *)(v11 + 8) = v11 + 20;
  *(_DWORD *)(v11 + 16) = 4;
  *a2 = v11;
  if (v9)
  {
    v7 = &v12[v9 + 24];
    v8 = 1 - v9;
    return (unint64_t)memcpy((void *)this, v7, v8);
  }
  *(_BYTE *)this = 45;
  return this;
}

{
  uint64_t v3;
  char v4;
  BOOL v5;
  uint64_t v6;
  _BYTE v7[25];
  uint64_t v8;

  v3 = 0;
  v8 = *MEMORY[0x1E0C80C00];
  do
  {
    v4 = (this % 0xA) | 0x30;
    v7[v3-- + 24] = v4;
    v5 = this > 9;
    this /= 0xAuLL;
  }
  while (v5);
  if (v3 + 26 >= 27)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (!v3)
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a2 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
    return this;
  }
  if ((unint64_t)-v3 >> 31)
  {
LABEL_12:
    __break(0xC471u);
    return this;
  }
  v6 = WTF::fastCompactMalloc((WTF *)(20 - v3));
  this = v6 + 20;
  *(_DWORD *)v6 = 2;
  *(_DWORD *)(v6 + 4) = -(int)v3;
  *(_QWORD *)(v6 + 8) = v6 + 20;
  *(_DWORD *)(v6 + 16) = 4;
  *a2 = v6;
  if (v3 != -1)
    return (unint64_t)memcpy((void *)this, &v7[v3 + 25], -v3);
  *(_BYTE *)this = v4;
  return this;
}

{
  uint64_t v3;
  char v4;
  BOOL v5;
  uint64_t v6;
  _BYTE *v7;
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE v12[25];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((this & 0x8000000000000000) == 0)
  {
    v3 = 0;
    do
    {
      v4 = (this % 0xA) | 0x30;
      v12[v3-- + 24] = v4;
      v5 = this > 9;
      this /= 0xAuLL;
    }
    while (v5);
    if (v3 + 26 < 27)
    {
      if (v3)
      {
        if (!((unint64_t)-v3 >> 31))
        {
          v6 = WTF::fastCompactMalloc((WTF *)(20 - v3));
          this = v6 + 20;
          *(_DWORD *)v6 = 2;
          *(_DWORD *)(v6 + 4) = -(int)v3;
          *(_QWORD *)(v6 + 8) = v6 + 20;
          *(_DWORD *)(v6 + 16) = 4;
          *a2 = v6;
          if (v3 != -1)
          {
            v7 = &v12[v3 + 25];
            v8 = -v3;
            return (unint64_t)memcpy((void *)this, v7, v8);
          }
          *(_BYTE *)this = v4;
          return this;
        }
LABEL_21:
        __break(0xC471u);
        JUMPOUT(0x197B5C6ACLL);
      }
LABEL_13:
      WTF::StringImpl::s_emptyAtomString += 2;
      *a2 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
      return this;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v9 = 0;
  v10 = -(uint64_t)this;
  do
  {
    v12[v9-- + 24] = (v10 % 0xA) | 0x30;
    v5 = v10 > 9;
    v10 /= 0xAuLL;
  }
  while (v5);
  v12[v9 + 24] = 45;
  if (v9 + 26 >= 28)
    goto LABEL_20;
  if (v9 == 1)
    goto LABEL_13;
  if ((unint64_t)(1 - v9) >> 31)
    goto LABEL_21;
  v11 = WTF::fastCompactMalloc((WTF *)(21 - v9));
  this = v11 + 20;
  *(_DWORD *)v11 = 2;
  *(_DWORD *)(v11 + 4) = 1 - v9;
  *(_QWORD *)(v11 + 8) = v11 + 20;
  *(_DWORD *)(v11 + 16) = 4;
  *a2 = v11;
  if (v9)
  {
    v7 = &v12[v9 + 24];
    v8 = 1 - v9;
    return (unint64_t)memcpy((void *)this, v7, v8);
  }
  *(_BYTE *)this = 45;
  return this;
}

{
  uint64_t v3;
  char v4;
  BOOL v5;
  uint64_t v6;
  _BYTE v7[25];
  uint64_t v8;

  v3 = 0;
  v8 = *MEMORY[0x1E0C80C00];
  do
  {
    v4 = (this % 0xA) | 0x30;
    v7[v3-- + 24] = v4;
    v5 = this > 9;
    this /= 0xAuLL;
  }
  while (v5);
  if (v3 + 26 >= 27)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (!v3)
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a2 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
    return this;
  }
  if ((unint64_t)-v3 >> 31)
  {
LABEL_12:
    __break(0xC471u);
    return this;
  }
  v6 = WTF::fastCompactMalloc((WTF *)(20 - v3));
  this = v6 + 20;
  *(_DWORD *)v6 = 2;
  *(_DWORD *)(v6 + 4) = -(int)v3;
  *(_QWORD *)(v6 + 8) = v6 + 20;
  *(_DWORD *)(v6 + 16) = 4;
  *a2 = v6;
  if (v3 != -1)
    return (unint64_t)memcpy((void *)this, &v7[v3 + 25], -v3);
  *(_BYTE *)this = v4;
  return this;
}

size_t WTF::String::numberToStringFixedPrecision@<X0>(int a1@<W0>, int a2@<W1>, int **a3@<X8>, float a4@<S0>)
{
  size_t result;
  _BYTE *v6;
  size_t v7;
  int *v8;
  _BYTE v9[124];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  result = WTF::numberToFixedPrecisionString(a1, (uint64_t)v9, a2, a4);
  if (!result)
  {
    v8 = 0;
LABEL_9:
    *a3 = v8;
    return result;
  }
  v6 = (_BYTE *)result;
  result = strlen((const char *)result);
  if (!result)
  {
    v8 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_9;
  }
  v7 = result;
  if (!(result >> 31))
  {
    v8 = (int *)WTF::fastCompactMalloc((WTF *)(result + 20));
    result = (size_t)(v8 + 5);
    *v8 = 2;
    v8[1] = v7;
    *((_QWORD *)v8 + 1) = v8 + 5;
    v8[4] = 4;
    if (v7 == 1)
      *(_BYTE *)result = *v6;
    else
      result = (size_t)memcpy((void *)result, v6, v7);
    goto LABEL_9;
  }
  __break(0xC471u);
  return result;
}

size_t WTF::String::numberToStringFixedPrecision@<X0>(int a1@<W0>, int a2@<W1>, int **a3@<X8>, double a4@<D0>)
{
  size_t result;
  _BYTE *v6;
  size_t v7;
  int *v8;
  _BYTE v9[124];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  result = WTF::numberToFixedPrecisionString(a1, (uint64_t)v9, a2, a4);
  if (!result)
  {
    v8 = 0;
LABEL_9:
    *a3 = v8;
    return result;
  }
  v6 = (_BYTE *)result;
  result = strlen((const char *)result);
  if (!result)
  {
    v8 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_9;
  }
  v7 = result;
  if (!(result >> 31))
  {
    v8 = (int *)WTF::fastCompactMalloc((WTF *)(result + 20));
    result = (size_t)(v8 + 5);
    *v8 = 2;
    v8[1] = v7;
    *((_QWORD *)v8 + 1) = v8 + 5;
    v8[4] = 4;
    if (v7 == 1)
      *(_BYTE *)result = *v6;
    else
      result = (size_t)memcpy((void *)result, v6, v7);
    goto LABEL_9;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::String::number@<X0>(float a1@<S0>, int **a2@<X8>)
{
  int v4;
  int v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  size_t v11;
  unint64_t result;
  size_t v13;
  int *v14;
  char __dst[124];
  char __s[3];
  _BYTE v17[29];

  *(_QWORD *)&v17[21] = *MEMORY[0x1E0C80C00];
  v4 = (LODWORD(a1) >> 23);
  v5 = LODWORD(a1) ^ (v4 << 23);
  if (v4 != 255)
  {
    if ((LODWORD(a1) & 0x7FFFFFFF) != 0 && v5 < 0)
    {
      __s[0] = 45;
      v7 = &__s[1];
    }
    else
    {
      v7 = __s;
      if ((LODWORD(a1) & 0x7FFFFFFF) == 0)
      {
        v6 = &__s[1];
        __s[0] = 48;
        goto LABEL_13;
      }
    }
    v8 = WTF::dragonbox::detail::to_decimal_impl<float,WTF::dragonbox::default_float_traits<float>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v5, v4);
    v6 = WTF::dragonbox::detail::to_shortest(v8, HIDWORD(v8), (uint64_t)v7, v9);
    goto LABEL_13;
  }
  if ((v5 & 0x7FFFFFFF) != 0)
  {
    qmemcpy(__s, "NaN", sizeof(__s));
    v6 = v17;
  }
  else
  {
    v10 = __s;
    if (v5 < 0)
    {
      __s[0] = 45;
      v10 = &__s[1];
    }
    *(_QWORD *)v10 = 0x7974696E69666E49;
    v6 = v10 + 8;
  }
LABEL_13:
  *v6 = 0;
  v11 = (int)strlen(__s);
  memcpy(__dst, __s, v11);
  __dst[v11] = 0;
  result = strlen(__dst);
  if (!result)
  {
    v14 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
LABEL_19:
    *a2 = v14;
    return result;
  }
  v13 = result;
  if (!(result >> 31))
  {
    v14 = (int *)WTF::fastCompactMalloc((WTF *)(result + 20));
    result = (unint64_t)(v14 + 5);
    *v14 = 2;
    v14[1] = v13;
    *((_QWORD *)v14 + 1) = v14 + 5;
    v14[4] = 4;
    if (v13 == 1)
      *(_BYTE *)result = __dst[0];
    else
      result = (unint64_t)memcpy((void *)result, __dst, v13);
    goto LABEL_19;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::String::number@<X0>(double a1@<D0>, int **a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  char *v11;
  size_t v12;
  unint64_t result;
  size_t v14;
  int *v15;
  char __dst[124];
  char __s[3];
  _BYTE v18[31];

  *(_QWORD *)&v18[23] = *MEMORY[0x1E0C80C00];
  v4 = (*(_QWORD *)&a1 >> 52) & 0x7FFLL;
  if ((_DWORD)v4 != 2047)
  {
    v6 = *(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL;
    if ((*(_QWORD *)&a1 & 0x8000000000000000) != 0 && v6)
    {
      __s[0] = 45;
      v7 = &__s[1];
    }
    else
    {
      v7 = __s;
      if (!v6)
      {
        v5 = &__s[1];
        __s[0] = 48;
        goto LABEL_13;
      }
    }
    v8 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(*(_QWORD *)&a1 & 0x800FFFFFFFFFFFFFLL, v4);
    v5 = WTF::dragonbox::detail::to_shortest(v8, v9, (uint64_t)v7, v10);
    goto LABEL_13;
  }
  if ((*(_QWORD *)&a1 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    qmemcpy(__s, "NaN", sizeof(__s));
    v5 = v18;
  }
  else
  {
    v11 = __s;
    if ((*(_QWORD *)&a1 & 0x8000000000000000) != 0)
    {
      __s[0] = 45;
      v11 = &__s[1];
    }
    *(_QWORD *)v11 = 0x7974696E69666E49;
    v5 = v11 + 8;
  }
LABEL_13:
  *v5 = 0;
  v12 = (int)strlen(__s);
  memcpy(__dst, __s, v12);
  __dst[v12] = 0;
  result = strlen(__dst);
  if (!result)
  {
    v15 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
LABEL_19:
    *a2 = v15;
    return result;
  }
  v14 = result;
  if (!(result >> 31))
  {
    v15 = (int *)WTF::fastCompactMalloc((WTF *)(result + 20));
    result = (unint64_t)(v15 + 5);
    *v15 = 2;
    v15[1] = v14;
    *((_QWORD *)v15 + 1) = v15 + 5;
    v15[4] = 4;
    if (v14 == 1)
      *(_BYTE *)result = __dst[0];
    else
      result = (unint64_t)memcpy((void *)result, __dst, v14);
    goto LABEL_19;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::String::numberToStringFixedWidth@<X0>(WTF::String *this@<X0>, double a2@<D0>, int **a3@<X8>)
{
  unint64_t result;
  char *v5;
  size_t v6;
  int *v7;
  char *__s;
  int v9;
  int v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  __s = &v11;
  v9 = 124;
  v10 = 0;
  result = WTF::double_conversion::DoubleToStringConverter::ToFixed((uint64_t)&WTF::double_conversion::DoubleToStringConverter::EcmaScriptConverter(void)::converter, (int)this, (uint64_t)&__s, a2);
  __s[v10] = 0;
  v5 = __s;
  if (!__s)
  {
    v7 = 0;
LABEL_9:
    *a3 = v7;
    return result;
  }
  result = strlen(__s);
  if (!result)
  {
    v7 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_9;
  }
  v6 = result;
  if (!(result >> 31))
  {
    v7 = (int *)WTF::fastCompactMalloc((WTF *)(result + 20));
    result = (unint64_t)(v7 + 5);
    *v7 = 2;
    v7[1] = v6;
    *((_QWORD *)v7 + 1) = v7 + 5;
    v7[4] = 4;
    if (v6 == 1)
      *(_BYTE *)result = *v5;
    else
      result = (unint64_t)memcpy((void *)result, v5, v6);
    goto LABEL_9;
  }
  __break(0xC471u);
  return result;
}

double WTF::String::toDouble(WTF::StringImpl **this, BOOL *a2)
{
  WTF::StringImpl *v2;
  double result;

  v2 = *this;
  if (v2)
  {
    WTF::StringImpl::toDouble(v2, a2);
  }
  else
  {
    if (a2)
      *a2 = 0;
    return 0.0;
  }
  return result;
}

float WTF::String::toFloat(WTF::StringImpl **this, BOOL *a2)
{
  WTF::StringImpl *v2;

  v2 = *this;
  if (v2)
    return WTF::StringImpl::toFloat(v2, a2);
  if (a2)
    *a2 = 0;
  return 0.0;
}

_DWORD *WTF::String::isolatedCopy@<X0>(_DWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  int v4;
  _BYTE *v5;
  size_t v6;
  uint64_t v8;
  const void *v9;
  size_t v10;

  v3 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
  {
    *a2 = 0;
    return result;
  }
  v4 = *(_DWORD *)(v3 + 16);
  v5 = *(_BYTE **)(v3 + 8);
  v6 = *(unsigned int *)(v3 + 4);
  if ((v4 & 3) == 0 && v5 != (_BYTE *)(v3 + 20))
  {
    if ((v4 & 4) != 0)
    {
      if ((_DWORD)v6)
      {
        result = (_DWORD *)WTF::fastCompactMalloc((WTF *)0x20);
        *result = 2;
        result[1] = v6;
        *((_QWORD *)result + 1) = v5;
        result[4] = 4;
        *a2 = (uint64_t)result;
        return result;
      }
    }
    else if ((_DWORD)v6)
    {
      result = (_DWORD *)WTF::fastCompactMalloc((WTF *)0x20);
      *result = 2;
      result[1] = v6;
      *((_QWORD *)result + 1) = v5;
      result[4] = 0;
      *a2 = (uint64_t)result;
      return result;
    }
    goto LABEL_22;
  }
  if ((v4 & 4) != 0)
  {
    if ((_DWORD)v6)
    {
      if ((v6 & 0x80000000) == 0)
      {
        v8 = WTF::fastCompactMalloc((WTF *)(v6 + 20));
        result = (_DWORD *)(v8 + 20);
        *(_DWORD *)v8 = 2;
        *(_DWORD *)(v8 + 4) = v6;
        *(_QWORD *)(v8 + 8) = v8 + 20;
        *(_DWORD *)(v8 + 16) = 4;
        if ((_DWORD)v6 == 1)
        {
          *(_BYTE *)result = *v5;
          *a2 = v8;
          return result;
        }
        v9 = v5;
        v10 = v6;
        goto LABEL_25;
      }
LABEL_26:
      __break(0xC471u);
      JUMPOUT(0x197B5D0A0);
    }
LABEL_22:
    WTF::StringImpl::s_emptyAtomString += 2;
    *a2 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
    return result;
  }
  if (!(_DWORD)v6)
    goto LABEL_22;
  if (v6 >= 0x7FFFFFF0)
    goto LABEL_26;
  v8 = WTF::fastCompactMalloc((WTF *)(2 * v6 + 20));
  result = (_DWORD *)(v8 + 20);
  *(_DWORD *)v8 = 2;
  *(_DWORD *)(v8 + 4) = v6;
  *(_QWORD *)(v8 + 8) = v8 + 20;
  *(_DWORD *)(v8 + 16) = 0;
  if ((_DWORD)v6 == 1)
  {
    *(_WORD *)result = *(_WORD *)v5;
    *a2 = v8;
    return result;
  }
  v9 = v5;
  v10 = 2 * v6;
LABEL_25:
  result = memcpy(result, v9, v10);
  *a2 = v8;
  return result;
}

uint64_t *WTF::String::isolatedCopy@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  size_t v4;
  int v5;
  BOOL v6;
  _BYTE *v7;
  uint64_t v9;
  const void *v10;
  size_t v11;

  v3 = *result;
  if (!*result
    || (v4 = *(unsigned int *)(v3 + 4), !(_DWORD)v4)
    || ((v5 = *(_DWORD *)(v3 + 16), *(_DWORD *)v3 == 2) ? (v6 = (*(_DWORD *)(v3 + 16) & 0x10) == 0) : (v6 = 0), v6))
  {
    *result = 0;
    *a2 = v3;
    return result;
  }
  v7 = *(_BYTE **)(v3 + 8);
  if ((v5 & 3) != 0 || v7 == (_BYTE *)(v3 + 20))
  {
    if ((v5 & 4) != 0)
    {
      if ((v4 & 0x80000000) == 0)
      {
        v9 = WTF::fastCompactMalloc((WTF *)(v4 + 20));
        result = (uint64_t *)(v9 + 20);
        *(_DWORD *)v9 = 2;
        *(_DWORD *)(v9 + 4) = v4;
        *(_QWORD *)(v9 + 8) = v9 + 20;
        *(_DWORD *)(v9 + 16) = 4;
        if ((_DWORD)v4 == 1)
        {
          *(_BYTE *)result = *v7;
          *a2 = v9;
          return result;
        }
        v10 = v7;
        v11 = v4;
        goto LABEL_26;
      }
    }
    else if (v4 < 0x7FFFFFF0)
    {
      v9 = WTF::fastCompactMalloc((WTF *)(2 * v4 + 20));
      result = (uint64_t *)(v9 + 20);
      *(_DWORD *)v9 = 2;
      *(_DWORD *)(v9 + 4) = v4;
      *(_QWORD *)(v9 + 8) = v9 + 20;
      *(_DWORD *)(v9 + 16) = 0;
      if ((_DWORD)v4 == 1)
      {
        *(_WORD *)result = *(_WORD *)v7;
        *a2 = v9;
        return result;
      }
      v10 = v7;
      v11 = 2 * v4;
LABEL_26:
      result = (uint64_t *)memcpy(result, v10, v11);
      *a2 = v9;
      return result;
    }
    __break(0xC471u);
    JUMPOUT(0x197B5D258);
  }
  result = (uint64_t *)WTF::fastCompactMalloc((WTF *)0x20);
  *(_DWORD *)result = 2;
  *((_DWORD *)result + 1) = v4;
  result[1] = (uint64_t)v7;
  if ((v5 & 4) != 0)
    *((_DWORD *)result + 4) = 4;
  else
    *((_DWORD *)result + 4) = 0;
  *a2 = (uint64_t)result;
  return result;
}

BOOL WTF::String::isSafeToSendToAnotherThread(WTF::String *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this || !*(_DWORD *)(v1 + 4))
    return 1;
  if (*(_DWORD *)v1 == 2)
    return (*(_BYTE *)(v1 + 16) & 0x10) == 0;
  return 0;
}

uint64_t WTF::String::splitInternal<false>(uint64_t *a1, unsigned int a2, _QWORD *a3, double a4, double a5, float a6)
{
  uint64_t result;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  const char *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;

  result = *a1;
  if (result)
  {
    v10 = *(const char **)(result + 8);
    v11 = *(unsigned int *)(result + 4);
    v12 = v11 | ((unint64_t)((*(_DWORD *)(result + 16) >> 2) & 1) << 32);
    v13 = v11;
    v14 = 0;
    if ((v12 & 0xFF00000000) != 0)
    {
      while (1)
      {
        result = WTF::StringImpl::find(result, a2, v14, a4, a5, a6);
        if (result == -1)
          break;
        v17 = result;
        if (result != v14)
        {
          if (v12 <= v14)
          {
            v15 = 0x100000000;
            v16 = "";
          }
          else
          {
            v18 = result - v14;
            if (v12 - v14 > result - v14 || (v18 = v12 - v14, v16 = v10, v15 = v12, v14))
            {
              if (v13 - (unint64_t)v14 < v18)
                goto LABEL_40;
              v16 = &v10[v14];
              v15 = v18 | 0x100000000;
            }
          }
          (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v16, v15);
        }
        v14 = v17 + 1;
        result = *a1;
        if (!*a1)
        {
          LODWORD(v23) = 0;
          goto LABEL_28;
        }
      }
    }
    else
    {
      while (1)
      {
        result = WTF::StringImpl::find(result, a2, v14, a4, a5, a6);
        if (result == -1)
          break;
        v21 = result;
        if (result != v14)
        {
          if (v12 <= v14)
          {
            v19 = 0x100000000;
            v20 = "";
          }
          else
          {
            v22 = result - v14;
            if (v12 - v14 > result - v14 || (v22 = v12 - v14, v20 = v10, v19 = v12, v14))
            {
              v19 = v22;
              if (v13 - (unint64_t)v14 < v22)
                goto LABEL_40;
              v20 = &v10[2 * v14];
            }
          }
          (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v20, v19);
        }
        v14 = v21 + 1;
        result = *a1;
        if (!*a1)
        {
          if (v21 == -1)
            return result;
          goto LABEL_31;
        }
      }
    }
    v23 = *a1;
    if (*a1)
    {
      if (v14 == *(_DWORD *)(v23 + 4))
        return result;
    }
    else
    {
LABEL_28:
      if (v14 == (_DWORD)v23)
        return result;
    }
LABEL_31:
    v24 = v12 - v14;
    if (v12 <= v14)
    {
      v12 = 0x100000000;
      v10 = "";
      return (*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v10, v12);
    }
    if (!v14)
      return (*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v10, v12);
    v25 = v13 - v14;
    if ((v12 & 0xFF00000000) != 0)
    {
      if (v25 >= v24)
      {
        v10 += v14;
        v12 = v24 | 0x100000000;
        return (*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v10, v12);
      }
    }
    else if (v25 >= v24)
    {
      v10 += 2 * v14;
      v12 = v12 - v14;
      return (*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v10, v12);
    }
LABEL_40:
    __break(1u);
  }
  return result;
}

uint64_t WTF::String::split@<X0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  double v7;
  double v8;
  float v9;
  uint64_t result;
  _QWORD *v11;

  *a3 = 0;
  a3[1] = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E3572800;
  v6[1] = a3;
  v11 = v6;
  WTF::String::splitInternal<false>(a1, a2, &v11, v7, v8, v9);
  result = (uint64_t)v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::String::split(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, float a7@<S2>)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t Common;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  StringView v61;
  StringView v62;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v8 = *a1;
  if (!v8)
    return;
  if (a2)
  {
    v12 = 0;
    while (1)
    {
      LODWORD(v61.m_characters) = *(_DWORD *)(v8 + 4);
      HIDWORD(v61.m_characters) = (*(_DWORD *)(v8 + 16) >> 2) & 1;
      *(_QWORD *)&v61.m_length = a2;
      v62.m_characters = a3;
      *(_QWORD *)&v62.m_length = v12;
      Common = WTF::findCommon(*(_QWORD *)(v8 + 8), v61, v62, a5, a6, a7);
      if (Common == -1)
      {
        v8 = *a1;
        if (*a1)
        {
          v37 = *(_DWORD *)(v8 + 4);
          if ((_DWORD)v12 == v37)
            return;
          if (!(_DWORD)v12)
            goto LABEL_32;
          goto LABEL_23;
        }
LABEL_24:
        if (!(_DWORD)v12)
          return;
        v8 = 0;
        v59 = 0;
        v38 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v38 != *(_DWORD *)(a4 + 8))
          goto LABEL_35;
LABEL_26:
        v39 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v38 + 1, (unint64_t)&v59);
        v47 = *(unsigned int *)(a4 + 12);
        v48 = *(_QWORD *)a4;
        v49 = *v39;
        *v39 = 0;
        *(_QWORD *)(v48 + 8 * v47) = v49;
        v50 = v59;
        *(_DWORD *)(a4 + 12) = v47 + 1;
        v59 = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
          {
            WTF::StringImpl::~StringImpl(v50, v40, v41, v42, v43, v44, v45, v46);
            WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
          }
          else
          {
            *(_DWORD *)v50 -= 2;
          }
        }
        return;
      }
      v21 = Common;
      if (Common != v12)
        break;
LABEL_5:
      v12 = (v21 + (_DWORD)a3);
      v8 = *a1;
      if (!*a1)
        goto LABEL_24;
    }
    v22 = *a1;
    if (*a1)
    {
      v15 = (v21 - v12);
      if ((_DWORD)v12 || *(_DWORD *)(v22 + 4) > v15)
      {
        WTF::StringImpl::substring((_QWORD *)v22, v12, v15, (uint64_t *)&v60);
        v22 = (uint64_t)v60;
        v59 = v60;
        v23 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v23 == *(_DWORD *)(a4 + 8))
        {
LABEL_12:
          v24 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v23 + 1, (unint64_t)&v59);
          v23 = *(unsigned int *)(a4 + 12);
          v25 = *(_QWORD *)a4;
          v26 = *v24;
          *v24 = 0;
          *(_QWORD *)(v25 + 8 * v23) = v26;
          goto LABEL_15;
        }
      }
      else
      {
        *(_DWORD *)v22 += 2;
        v59 = (WTF::StringImpl *)v22;
        v23 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v23 == *(_DWORD *)(a4 + 8))
          goto LABEL_12;
      }
    }
    else
    {
      v59 = 0;
      v23 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v23 == *(_DWORD *)(a4 + 8))
        goto LABEL_12;
    }
    v27 = *(_QWORD *)a4;
    v59 = 0;
    *(_QWORD *)(v27 + 8 * v23) = v22;
LABEL_15:
    *(_DWORD *)(a4 + 12) = v23 + 1;
    v28 = v59;
    v59 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    goto LABEL_5;
  }
  v37 = *(_DWORD *)(v8 + 4);
  if (v37)
  {
LABEL_32:
    if (v37 < 0)
    {
      LODWORD(v12) = 0;
LABEL_23:
      WTF::StringImpl::substring((_QWORD *)v8, v12, 0x7FFFFFFFu, (uint64_t *)&v60);
      v8 = (uint64_t)v60;
    }
    else
    {
      *(_DWORD *)v8 += 2;
    }
    v59 = (WTF::StringImpl *)v8;
    v38 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v38 == *(_DWORD *)(a4 + 8))
      goto LABEL_26;
LABEL_35:
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v38) = v8;
    *(_DWORD *)(a4 + 12) = v38 + 1;
  }
}

uint64_t WTF::String::splitInternal<true>(uint64_t *a1, unsigned int a2, _QWORD *a3, double a4, double a5, float a6)
{
  uint64_t result;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  const char *v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  result = *a1;
  if (!result)
    goto LABEL_25;
  v10 = *(const char **)(result + 8);
  v11 = *(unsigned int *)(result + 4);
  v12 = v11 | ((unint64_t)((*(_DWORD *)(result + 16) >> 2) & 1) << 32);
  v13 = v11;
  v14 = 0;
  if ((v12 & 0xFF00000000) != 0)
  {
    do
    {
      result = WTF::StringImpl::find(result, a2, v14, a4, a5, a6);
      if (result == -1)
        break;
      v17 = result;
      if (v12 <= v14)
      {
        v15 = 0x100000000;
        v16 = "";
      }
      else
      {
        v18 = result - v14;
        if (v12 - v14 > result - v14 || (v18 = v12 - v14, v16 = v10, v15 = v12, v14))
        {
          if (v13 - (unint64_t)v14 < v18)
            goto LABEL_29;
          v16 = &v10[v14];
          v15 = v18 | 0x100000000;
        }
      }
      (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v16, v15);
      v14 = v17 + 1;
      result = *a1;
    }
    while (*a1);
  }
  else
  {
    do
    {
      result = WTF::StringImpl::find(result, a2, v14, a4, a5, a6);
      if (result == -1)
        break;
      v21 = result;
      if (v12 <= v14)
      {
        v19 = 0x100000000;
        v20 = "";
      }
      else
      {
        v22 = result - v14;
        if (v12 - v14 > result - v14 || (v22 = v12 - v14, v20 = v10, v19 = v12, v14))
        {
          v19 = v22;
          if (v13 - (unint64_t)v14 < v22)
            goto LABEL_29;
          v20 = &v10[2 * v14];
        }
      }
      (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v20, v19);
      v14 = v21 + 1;
      result = *a1;
    }
    while (*a1);
  }
  v23 = v12 - v14;
  if (v12 <= v14)
  {
LABEL_25:
    v12 = 0x100000000;
    v10 = "";
    return (*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v10, v12);
  }
  if (!v14)
    return (*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v10, v12);
  v24 = v13 - v14;
  if ((v12 & 0xFF00000000) != 0)
  {
    if (v24 >= v23)
    {
      v10 += v14;
      v12 = v23 | 0x100000000;
      return (*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v10, v12);
    }
  }
  else if (v24 >= v23)
  {
    v10 += 2 * v14;
    v12 = v12 - v14;
    return (*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v10, v12);
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t WTF::String::splitAllowingEmptyEntries@<X0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  double v7;
  double v8;
  float v9;
  uint64_t result;
  _QWORD *v11;

  *a3 = 0;
  a3[1] = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E3572828;
  v6[1] = a3;
  v11 = v6;
  WTF::String::splitInternal<true>(a1, a2, &v11, v7, v8, v9);
  result = (uint64_t)v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::String::splitAllowingEmptyEntries(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, float a7@<S2>)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t Common;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  StringView v60;
  StringView v61;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v9 = *a1;
  if (!v9)
    goto LABEL_22;
  if (!a2)
    goto LABEL_28;
  v12 = 0;
  while (1)
  {
    LODWORD(v60.m_characters) = *(_DWORD *)(v9 + 4);
    HIDWORD(v60.m_characters) = (*(_DWORD *)(v9 + 16) >> 2) & 1;
    *(_QWORD *)&v60.m_length = a2;
    v61.m_characters = a3;
    *(_QWORD *)&v61.m_length = v12;
    Common = WTF::findCommon(*(_QWORD *)(v9 + 8), v60, v61, a5, a6, a7);
    if (Common == -1)
      break;
    v21 = Common;
    v22 = *a1;
    if (*a1)
    {
      v15 = (v21 - v12);
      if ((_DWORD)v12 || *(_DWORD *)(v22 + 4) > v15)
      {
        WTF::StringImpl::substring((_QWORD *)v22, v12, v15, (uint64_t *)&v59);
        v22 = (uint64_t)v59;
        v58 = v59;
        v23 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v23 != *(_DWORD *)(a4 + 8))
          goto LABEL_13;
      }
      else
      {
        *(_DWORD *)v22 += 2;
        v58 = (WTF::StringImpl *)v22;
        v23 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v23 != *(_DWORD *)(a4 + 8))
        {
LABEL_13:
          v27 = *(_QWORD *)a4;
          v58 = 0;
          *(_QWORD *)(v27 + 8 * v23) = v22;
          goto LABEL_14;
        }
      }
    }
    else
    {
      v58 = 0;
      v23 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v23 != *(_DWORD *)(a4 + 8))
        goto LABEL_13;
    }
    v24 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v23 + 1, (unint64_t)&v58);
    v23 = *(unsigned int *)(a4 + 12);
    v25 = *(_QWORD *)a4;
    v26 = *v24;
    *v24 = 0;
    *(_QWORD *)(v25 + 8 * v23) = v26;
LABEL_14:
    *(_DWORD *)(a4 + 12) = v23 + 1;
    v28 = v58;
    v58 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    v12 = (v21 + (_DWORD)a3);
    v9 = *a1;
    if (!*a1)
      goto LABEL_22;
  }
  v9 = *a1;
  if (!*a1)
  {
LABEL_22:
    v9 = 0;
    v58 = 0;
    v37 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v37 != *(_DWORD *)(a4 + 8))
      goto LABEL_31;
    goto LABEL_23;
  }
  if ((_DWORD)v12)
    goto LABEL_21;
LABEL_28:
  if ((*(_DWORD *)(v9 + 4) & 0x80000000) != 0)
  {
    LODWORD(v12) = 0;
LABEL_21:
    WTF::StringImpl::substring((_QWORD *)v9, v12, 0x7FFFFFFFu, (uint64_t *)&v59);
    v9 = (uint64_t)v59;
  }
  else
  {
    *(_DWORD *)v9 += 2;
  }
  v58 = (WTF::StringImpl *)v9;
  v37 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v37 != *(_DWORD *)(a4 + 8))
  {
LABEL_31:
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v37) = v9;
    *(_DWORD *)(a4 + 12) = v37 + 1;
    return;
  }
LABEL_23:
  v38 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v37 + 1, (unint64_t)&v58);
  v46 = *(unsigned int *)(a4 + 12);
  v47 = *(_QWORD *)a4;
  v48 = *v38;
  *v38 = 0;
  *(_QWORD *)(v47 + 8 * v46) = v48;
  v49 = v58;
  *(_DWORD *)(a4 + 12) = v46 + 1;
  v58 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
}

int8x16_t *WTF::String::ascii@<X0>(WTF::String *this@<X0>, int8x16_t **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  WTF *v6;
  int8x16_t *result;
  int8x16_t *v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  char *i8;
  char *v14;
  char v15;
  int v16;
  int v17;
  unsigned __int16 *v19;
  int v20;
  int v21;
  uint64_t v23;
  int16x8_t v24;
  uint16x8_t v25;
  int8x16_t v26;
  unint64_t v27;
  int8x16_t *v28;
  int16x8_t *v29;
  int16x8_t v30;
  int16x8_t v31;
  int8x8_t *v32;
  unint64_t v33;
  int16x8_t v34;
  uint16x8_t v35;
  int16x8_t *v36;
  int16x8_t v37;
  int8x16_t v38;
  int8x16_t v39;
  uint64_t v40;
  int8x16_t *v41;
  int8x16_t *v42;
  int8x16_t v43;
  int8x8_t *v44;
  int8x8_t *v45;
  uint64_t v46;
  int8x8_t v47;

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (v4 = *(unsigned int *)(v3 + 4), !(_DWORD)v4))
  {
    result = (int8x16_t *)WTF::fastMalloc((WTF *)0x11);
    result->i32[0] = 1;
    result->i64[1] = 0;
    *a2 = result;
    result[1].i8[0] = 0;
    return result;
  }
  v5 = *(_QWORD *)(v3 + 8);
  v6 = (WTF *)(v4 + 17);
  if ((*(_BYTE *)(v3 + 16) & 4) == 0)
  {
    result = (int8x16_t *)WTF::fastMalloc(v6);
    result->i32[0] = 1;
    result->i64[1] = v4;
    *a2 = result;
    v8 = result + 1;
    result[1].i8[v4] = 0;
    v9 = (v4 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v9 < 7
      || ((unint64_t)v8 < v5 + 2 * (v4 - 1) + 2
        ? (v10 = v5 >= (unint64_t)result[1].u64 + v9 + 1)
        : (v10 = 1),
          !v10))
    {
      v19 = (unsigned __int16 *)v5;
      goto LABEL_24;
    }
    v11 = v9 + 1;
    if (v9 >= 0xF)
    {
      v12 = v11 & 0xFFFFFFFFFFFFFFF0;
      v24.i64[0] = 0x7F007F007F007FLL;
      v24.i64[1] = 0x7F007F007F007FLL;
      v25.i64[0] = 0x5F005F005F005FLL;
      v25.i64[1] = 0x5F005F005F005FLL;
      v26.i64[0] = 0x3F3F3F3F3F3F3F3FLL;
      v26.i64[1] = 0x3F3F3F3F3F3F3F3FLL;
      v27 = v11 & 0xFFFFFFFFFFFFFFF0;
      v28 = result + 1;
      v29 = (int16x8_t *)v5;
      do
      {
        v31 = *v29;
        v30 = v29[1];
        v29 += 2;
        *v28++ = vbslq_s8(vuzp1q_s8(vbicq_s8((int8x16_t)vcgtq_u16(v25, (uint16x8_t)vaddq_s16(v31, v24)), (int8x16_t)vceqzq_s16(v31)), vbicq_s8((int8x16_t)vcgtq_u16(v25, (uint16x8_t)vaddq_s16(v30, v24)), (int8x16_t)vceqzq_s16(v30))), v26, vuzp1q_s8((int8x16_t)v31, (int8x16_t)v30));
        v27 -= 16;
      }
      while (v27);
      if (v11 == v12)
        return result;
      if ((v11 & 8) == 0)
      {
        v19 = (unsigned __int16 *)(v5 + 2 * v12);
        v8 = (int8x16_t *)((char *)v8 + v12);
        do
        {
LABEL_24:
          v21 = *v19++;
          v20 = v21;
          if ((unsigned __int16)((unsigned __int16)(v21 - 128) >> 5) < 0x7FDu && v20 != 0)
            LOBYTE(v20) = 63;
          v8->i8[0] = v20;
          v8 = (int8x16_t *)((char *)v8 + 1);
        }
        while (v19 != (unsigned __int16 *)(v5 + 2 * v4));
        return result;
      }
    }
    else
    {
      v12 = 0;
    }
    v8 = (int8x16_t *)((char *)v8 + (v11 & 0xFFFFFFFFFFFFFFF8));
    v19 = (unsigned __int16 *)(v5 + 2 * (v11 & 0xFFFFFFFFFFFFFFF8));
    v32 = (int8x8_t *)&result[1].i8[v12];
    v33 = v12 - (v11 & 0xFFFFFFFFFFFFFFF8);
    v34.i64[0] = 0x7F007F007F007FLL;
    v34.i64[1] = 0x7F007F007F007FLL;
    v35.i64[0] = 0x5F005F005F005FLL;
    v35.i64[1] = 0x5F005F005F005FLL;
    v36 = (int16x8_t *)(v5 + 2 * v12);
    do
    {
      v37 = *v36++;
      *v32++ = vbsl_s8(vmovn_s16((int16x8_t)vbicq_s8((int8x16_t)vcgtq_u16(v35, (uint16x8_t)vaddq_s16(v37, v34)), (int8x16_t)vceqzq_s16(v37))), (int8x8_t)0x3F3F3F3F3F3F3F3FLL, vmovn_s16(v37));
      v33 += 8;
    }
    while (v33);
    if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
      return result;
    goto LABEL_24;
  }
  result = (int8x16_t *)WTF::fastMalloc(v6);
  result->i32[0] = 1;
  result->i64[1] = v4;
  *a2 = result;
  i8 = result[1].i8;
  result[1].i8[v4] = 0;
  if (v4 < 8 || (unint64_t)result - v5 >= 0xFFFFFFFFFFFFFFF0)
  {
    v14 = (char *)v5;
    goto LABEL_16;
  }
  if (v4 < 0x10)
  {
    v23 = 0;
LABEL_47:
    i8 += v4 & 0xFFFFFFF8;
    v14 = (char *)(v5 + (v4 & 0xFFFFFFF8));
    v44 = (int8x8_t *)(v5 + v23);
    v45 = (int8x8_t *)&result[1].i8[v23];
    v46 = v23 - (v4 & 0xFFFFFFF8);
    do
    {
      v47 = *v44++;
      *v45++ = vbsl_s8(vbic_s8(vcgt_s8((int8x8_t)0x2020202020202020, v47), vceqz_s8(v47)), (int8x8_t)0x3F3F3F3F3F3F3F3FLL, v47);
      v46 += 8;
    }
    while (v46);
    if ((v4 & 0xFFFFFFF8) == v4)
      return result;
    goto LABEL_16;
  }
  v23 = v4 & 0xFFFFFFF0;
  v38.i64[0] = 0x2020202020202020;
  v38.i64[1] = 0x2020202020202020;
  v39.i64[0] = 0x3F3F3F3F3F3F3F3FLL;
  v39.i64[1] = 0x3F3F3F3F3F3F3F3FLL;
  v40 = v23;
  v41 = result + 1;
  v42 = (int8x16_t *)v5;
  do
  {
    v43 = *v42++;
    *v41++ = vbslq_s8(vbicq_s8(vcgtq_s8(v38, v43), vceqzq_s8(v43)), v39, v43);
    v40 -= 16;
  }
  while (v40);
  if (v23 == v4)
    return result;
  if ((v4 & 8) != 0)
    goto LABEL_47;
  v14 = (char *)(v5 + v23);
  i8 += v23;
  do
  {
LABEL_16:
    v16 = *v14++;
    v15 = v16;
    v17 = v16;
    if (v16 < 32 && v17 != 0)
      v15 = 63;
    *i8++ = v15;
  }
  while (v14 != (char *)(v5 + v4));
  return result;
}

int8x16_t *WTF::String::latin1@<X0>(int8x16_t *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  size_t v4;
  int8x16_t *v5;
  char *i8;
  unint64_t v7;
  int8x16_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  int8x16_t *v14;
  int8x16_t *v15;
  uint16x8_t v16;
  int8x16_t v17;
  unint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x8_t *v23;
  unint64_t v24;
  uint16x8_t v25;
  int8x16_t *v26;
  int8x16_t v27;
  int16x8_t v28;
  char v29;
  unsigned int v30;

  v3 = this->i64[0];
  if (!this->i64[0] || (v4 = *(unsigned int *)(v3 + 4), !(_DWORD)v4))
  {
    this = (int8x16_t *)WTF::fastMalloc((WTF *)0x11);
    this->i32[0] = 1;
    this->i64[1] = 0;
    *a2 = (uint64_t)this;
    this[1].i8[0] = 0;
    return this;
  }
  v5 = *(int8x16_t **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) == 0)
  {
    this = (int8x16_t *)WTF::fastMalloc((WTF *)(v4 + 17));
    this->i32[0] = 1;
    this->i64[1] = v4;
    *a2 = (uint64_t)this;
    i8 = this[1].i8;
    this[1].i8[v4] = 0;
    v7 = (v4 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v7 < 7)
    {
      v8 = v5;
      goto LABEL_26;
    }
    v11 = i8 >= &v5->i8[2 * v4] || v5 >= (int8x16_t *)&this[1].i8[v7 + 1];
    v8 = v5;
    if (!v11)
    {
      do
      {
LABEL_26:
        v30 = v8->u16[0];
        v8 = (int8x16_t *)((char *)v8 + 2);
        v29 = v30;
        if (v30 >= 0x100)
          v29 = 63;
        *i8++ = v29;
      }
      while (v8 != (int8x16_t *)((char *)v5 + 2 * v4));
      return this;
    }
    v12 = v7 + 1;
    if (v7 >= 0x1F)
    {
      v13 = v12 & 0xFFFFFFFFFFFFFFE0;
      v14 = v5 + 2;
      v15 = this + 2;
      v16.i64[0] = 0x100010001000100;
      v16.i64[1] = 0x100010001000100;
      v17.i64[0] = 0x3F3F3F3F3F3F3F3FLL;
      v17.i64[1] = 0x3F3F3F3F3F3F3F3FLL;
      v18 = v12 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v19 = v14[-2];
        v20 = v14[-1];
        v21 = *v14;
        v22 = v14[1];
        v14 += 4;
        v15[-1] = vbslq_s8(vuzp1q_s8((int8x16_t)vcgtq_u16(v16, (uint16x8_t)v19), (int8x16_t)vcgtq_u16(v16, (uint16x8_t)v20)), vuzp1q_s8(v19, v20), v17);
        *v15 = vbslq_s8(vuzp1q_s8((int8x16_t)vcgtq_u16(v16, (uint16x8_t)v21), (int8x16_t)vcgtq_u16(v16, (uint16x8_t)v22)), vuzp1q_s8(v21, v22), v17);
        v15 += 2;
        v18 -= 32;
      }
      while (v18);
      if (v12 == v13)
        return this;
      if ((v12 & 0x18) == 0)
      {
        v8 = (int8x16_t *)((char *)v5 + 2 * v13);
        i8 += v13;
        goto LABEL_26;
      }
    }
    else
    {
      v13 = 0;
    }
    i8 += v12 & 0xFFFFFFFFFFFFFFF8;
    v8 = (int8x16_t *)((char *)v5 + 2 * (v12 & 0xFFFFFFFFFFFFFFF8));
    v23 = (int8x8_t *)&this[1].i8[v13];
    v24 = v13 - (v12 & 0xFFFFFFFFFFFFFFF8);
    v25.i64[0] = 0x100010001000100;
    v25.i64[1] = 0x100010001000100;
    v26 = (int8x16_t *)((char *)v5 + 2 * v13);
    do
    {
      v27 = *v26++;
      v28 = (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v27);
      *v23++ = vorr_s8(vmovn_s16((int16x8_t)vandq_s8(v27, (int8x16_t)v28)), vbic_s8((int8x8_t)0x3F3F3F3F3F3F3F3FLL, vmovn_s16(v28)));
      v24 += 8;
    }
    while (v24);
    if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
      return this;
    goto LABEL_26;
  }
  *a2 = 0;
  if (v5)
  {
    v9 = WTF::fastMalloc((WTF *)(v4 + 17));
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = v4;
    *a2 = v9;
    v10 = v9 + 16;
    this = (int8x16_t *)memcpy((void *)(v9 + 16), v5, v4);
    *(_BYTE *)(v10 + v4) = 0;
  }
  return this;
}

void WTF::String::tryGetUTF8(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, float a9@<S1>)
{
  uint64_t v10;
  char *v12;
  size_t v13;
  uint64_t v14;

  v10 = *a1;
  if (*a1)
  {
    v12 = *(char **)(v10 + 8);
    v13 = *(unsigned int *)(v10 + 4);
    if ((*(_BYTE *)(v10 + 16) & 4) != 0)
      WTF::StringImpl::utf8ForCharacters(v12, v13, a8, a9);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v12, v13, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    *(_QWORD *)a8 = v14;
    *(_DWORD *)(a8 + 8) = 0;
  }
}

void WTF::String::tryGetUTF8(WTF::String *this@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, float a8@<S1>)
{
  uint64_t v9;
  char *v10;
  size_t v11;
  uint64_t v12;

  v9 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v10 = *(char **)(v9 + 8);
    v11 = *(unsigned int *)(v9 + 4);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
      WTF::StringImpl::utf8ForCharacters(v10, v11, a7, a8);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v10, v11, 0, a2, a3, a4, a5, a6, a7);
  }
  else
  {
    v12 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)a7 = v12;
    *(_BYTE *)(v12 + 16) = 0;
    *(_DWORD *)(a7 + 8) = 0;
  }
}

void WTF::String::utf8(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>, float a9@<S1>)
{
  uint64_t v10;
  char *v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  int v23;
  WTF *v24;
  int v25;

  v10 = *a1;
  if (*a1)
  {
    v12 = *(char **)(v10 + 8);
    v13 = *(unsigned int *)(v10 + 4);
    if ((*(_BYTE *)(v10 + 16) & 4) != 0)
      WTF::StringImpl::utf8ForCharacters(v12, v13, (uint64_t)&v24, a9);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v12, v13, a2, a3, a4, a5, a6, a7, (uint64_t)&v24);
    if (v25)
    {
      __break(0xC471u);
    }
    else
    {
      v22 = v24;
      if (v24)
      {
        v23 = (*(_DWORD *)v24)++;
        *a8 = v22;
        v24 = 0;
        if (v23)
          *(_DWORD *)v22 = v23;
        else
          WTF::fastFree((unint64_t)v22, v14, v15, v16, v17, v18, v19, v20);
      }
      else
      {
        *a8 = 0;
      }
    }
  }
  else
  {
    v21 = WTF::fastMalloc((WTF *)0x11);
    *(_QWORD *)(v21 + 8) = 0;
    *(_BYTE *)(v21 + 16) = 0;
    *(_DWORD *)v21 = 2;
    *a8 = v21;
    *(_DWORD *)v21 = 1;
  }
}

int *WTF::String::make8Bit@<X0>(int *result@<X0>, unint64_t a2@<X1>, int **a3@<X8>)
{
  const char *v4;
  int *v6;
  char *v7;
  unint64_t v8;
  unsigned __int128 *v9;
  unsigned __int128 v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  char *v15;
  const char *v16;
  char v17;
  int8x16_t *v18;
  int8x16_t *v19;
  unint64_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int16x8_t *v25;
  int8x8_t *v26;
  unint64_t v27;
  int16x8_t v28;

  v4 = (const char *)result;
  if (!(_DWORD)a2)
  {
    v6 = 0;
    result = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    *a3 = &WTF::StringImpl::s_emptyAtomString;
    v7 = (char *)a2;
    v8 = 0;
    if (a2 < 0x10)
      goto LABEL_8;
    goto LABEL_6;
  }
  if ((unint64_t)a2 >> 31)
  {
    __break(0xC471u);
    return result;
  }
  result = (int *)WTF::fastCompactMalloc((WTF *)(a2 + 20));
  v6 = result + 5;
  *result = 2;
  result[1] = a2;
  *((_QWORD *)result + 1) = result + 5;
  result[4] = 4;
  *a3 = result;
  v7 = (char *)result + a2 + 20;
  v8 = (unint64_t)(result + 5);
  if (a2 >= 0x10)
  {
LABEL_6:
    v8 = (unint64_t)v6 + (a2 & 0xFFFFFFFFFFFFFFF0);
    v9 = (unsigned __int128 *)v6;
    do
    {
      v10 = (unsigned __int128)vld2q_s8(v4);
      v4 += 32;
      *v9++ = v10;
    }
    while (v9 != (unsigned __int128 *)v8);
  }
LABEL_8:
  if ((char *)v8 == v7)
    return result;
  v11 = (unint64_t)v6 + a2;
  v12 = (unint64_t)v6 + a2 - v8;
  if (v12 < 8 || (v8 < (unint64_t)&v4[2 * v12] ? (v13 = (unint64_t)v4 >= v11) : (v13 = 1), !v13))
  {
    v15 = (char *)v8;
    v16 = v4;
    goto LABEL_18;
  }
  if (v12 >= 0x20)
  {
    v14 = v12 & 0xFFFFFFFFFFFFFFE0;
    v18 = (int8x16_t *)(v4 + 32);
    v19 = (int8x16_t *)(v8 + 16);
    v20 = v12 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v22 = v18[-2];
      v21 = v18[-1];
      v24 = *v18;
      v23 = v18[1];
      v18 += 4;
      v19[-1] = vuzp1q_s8(v22, v21);
      *v19 = vuzp1q_s8(v24, v23);
      v19 += 2;
      v20 -= 32;
    }
    while (v20);
    if (v12 == v14)
      return result;
    if ((v12 & 0x18) == 0)
    {
      v16 = &v4[2 * v14];
      v15 = (char *)(v8 + v14);
      do
      {
LABEL_18:
        v17 = *v16;
        v16 += 2;
        *v15++ = v17;
      }
      while (v15 != v7);
      return result;
    }
  }
  else
  {
    v14 = 0;
  }
  v15 = (char *)(v8 + (v12 & 0xFFFFFFFFFFFFFFF8));
  v16 = &v4[2 * (v12 & 0xFFFFFFFFFFFFFFF8)];
  v25 = (int16x8_t *)&v4[2 * v14];
  v26 = (int8x8_t *)(v8 + v14);
  v27 = v14 - (v12 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v28 = *v25++;
    *v26++ = vmovn_s16(v28);
    v27 += 8;
  }
  while (v27);
  if (v12 != (v12 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_18;
  return result;
}

void WTF::String::convertTo16Bit(WTF::StringImpl **this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  uint64_t v10;
  int *v11;
  int *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  char *v19;
  int8x16_t v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  _WORD *v30;
  unsigned __int8 *v31;
  __int16 v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint8x8_t *v42;
  uint16x8_t *v43;
  unint64_t v44;
  uint8x16_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint8x8_t *v48;
  uint16x8_t *v49;
  unint64_t v50;
  uint8x8_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;

  v8 = *this;
  if (!*this || (*((_BYTE *)v8 + 16) & 4) == 0)
    return;
  v10 = *((unsigned int *)v8 + 1);
  if (!(_DWORD)v10)
  {
    v12 = 0;
    v11 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    v14 = *((_QWORD *)v8 + 1);
    v15 = *((unsigned int *)v8 + 1);
    v16 = 2 * v15;
    if (v15 >= 0x40)
      goto LABEL_7;
LABEL_12:
    v17 = (unint64_t)v12;
    if (v12 == (int *)v16)
      goto LABEL_23;
LABEL_13:
    v26 = (unint64_t)v12 + 2 * v15 - v17 - 2;
    if (v26 < 0xE
      || (v17 < v14 + (v26 >> 1) + 1 ? (v27 = v14 >= (v26 & 0xFFFFFFFFFFFFFFFELL) + v17 + 2) : (v27 = 1), !v27))
    {
      v30 = (_WORD *)v17;
      v31 = (unsigned __int8 *)v14;
      goto LABEL_22;
    }
    v28 = (v26 >> 1) + 1;
    if (v26 >= 0x3E)
    {
      v29 = v28 & 0xFFFFFFFFFFFFFFE0;
      v42 = (uint8x8_t *)(v14 + 16);
      v43 = (uint16x8_t *)(v17 + 32);
      v44 = v28 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v45 = *(uint8x16_t *)v42[-2].i8;
        v46 = vmovl_u8(*v42);
        v47 = vmovl_high_u8(*(uint8x16_t *)v42->i8);
        v43[-2] = vmovl_u8(*(uint8x8_t *)v45.i8);
        v43[-1] = vmovl_high_u8(v45);
        *v43 = v46;
        v43[1] = v47;
        v43 += 4;
        v42 += 4;
        v44 -= 32;
      }
      while (v44);
      if (v28 == v29)
        goto LABEL_23;
      if ((v28 & 0x18) == 0)
      {
        v31 = (unsigned __int8 *)(v14 + v29);
        v30 = (_WORD *)(v17 + 2 * v29);
        goto LABEL_22;
      }
    }
    else
    {
      v29 = 0;
    }
    v30 = (_WORD *)(v17 + 2 * (v28 & 0xFFFFFFFFFFFFFFF8));
    v31 = (unsigned __int8 *)(v14 + (v28 & 0xFFFFFFFFFFFFFFF8));
    v48 = (uint8x8_t *)(v14 + v29);
    v49 = (uint16x8_t *)(v17 + 2 * v29);
    v50 = v29 - (v28 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v51 = *v48++;
      *v49++ = vmovl_u8(v51);
      v50 += 8;
    }
    while (v50);
    if (v28 == (v28 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_23;
    do
    {
LABEL_22:
      v32 = *v31++;
      *v30++ = v32;
    }
    while (v30 != (_WORD *)v16);
    goto LABEL_23;
  }
  if (v10 >= 0x7FFFFFF0)
  {
    __break(0xC471u);
    return;
  }
  v11 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v10 + 20));
  v12 = v11 + 5;
  *v11 = 2;
  v11[1] = v10;
  *((_QWORD *)v11 + 1) = v11 + 5;
  v11[4] = 0;
  v13 = *this;
  if (!*this)
  {
    *this = (WTF::StringImpl *)v11;
    return;
  }
  v14 = *((_QWORD *)v13 + 1);
  v15 = *((unsigned int *)v13 + 1);
  v16 = (uint64_t)v12 + 2 * v15;
  if (v15 < 0x40)
    goto LABEL_12;
LABEL_7:
  v17 = (unint64_t)v12 + 2 * (v15 & 0xFFFFFFC0);
  v18 = 0uLL;
  v19 = (char *)v12;
  do
  {
    v52.val[0] = *(int8x16_t *)v14;
    v20 = *(int8x16_t *)(v14 + 16);
    v53.val[0] = *(int8x16_t *)(v14 + 32);
    v21 = *(_OWORD *)(v14 + 48);
    v14 += 64;
    v22 = v21;
    v53.val[1] = 0uLL;
    v54.val[0] = v20;
    v52.val[1] = 0uLL;
    v23 = v19;
    vst2q_s8(v23, v52);
    v23 += 32;
    v54.val[1] = 0uLL;
    vst2q_s8(v23, v54);
    v24 = v19 + 64;
    vst2q_s8(v24, v53);
    v25 = v19 + 96;
    vst2q_s8(v25, *(int8x16x2_t *)(&v18 - 1));
    v19 += 128;
  }
  while (v19 != (char *)v17);
  if (v17 != v16)
    goto LABEL_13;
LABEL_23:
  v33 = *this;
  *this = (WTF::StringImpl *)v11;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::~StringImpl(v33, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v33 -= 2;
    }
  }
}

void WTF::String::fromUTF8(unint64_t a1@<X0>, size_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (a1)
    WTF::fromUTF8Impl<false>(a1, a2, a3);
  else
    *a3 = 0;
}

void WTF::fromUTF8Impl<false>(unint64_t a1@<X0>, size_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  unsigned __int8 v7;
  unint64_t v8;
  int8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x16_t *v13;
  uint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t *v17;
  uint64_t v18;
  int8x16_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  uint8x8_t *v26;
  unint64_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint8x8_t v30;
  uint16x8_t v31;
  uint32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint32x4_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  unint64_t v41;
  uint8x16_t *v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  uint8x16_t v49;
  uint16x8_t v50;
  uint32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  uint16x8_t v54;
  uint32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  uint32x4_t v58;
  int8x16_t v59;
  uint32x4_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  unsigned int v65;
  WTF *v66;
  unsigned int v67;
  uint64_t v68;
  _BYTE *v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v83;
  _WORD *v84;
  WTF *v87;
  unsigned int v88;
  _BYTE v89[2048];
  size_t v90;

  if (a2 >> 31)
  {
    __break(0xC471u);
    goto LABEL_88;
  }
  if (!a2)
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a3 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
    return;
  }
  v6 = a1 + a2;
  if ((a1 & 7) == 0)
  {
    v9 = 0;
    v8 = a1;
    v10 = v6 & 0xFFFFFFFFFFFFFFF8;
    if (a1 < (v6 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_20;
LABEL_26:
    v13 = (uint8x16_t *)v8;
    goto LABEL_31;
  }
  v8 = a1 + 1;
  v7 = *(_BYTE *)a1;
  if (((a1 + 1) & 7) != 0 && a2 != 1)
  {
    v7 |= *(_BYTE *)(a1 + 1);
    v8 = a1 + 2;
    if (((a1 + 2) & 7) != 0 && a2 != 2)
    {
      v7 |= *(_BYTE *)(a1 + 2);
      v8 = a1 + 3;
      if (((a1 + 3) & 7) != 0 && a2 != 3)
      {
        v7 |= *(_BYTE *)(a1 + 3);
        v8 = a1 + 4;
        if (((a1 + 4) & 7) != 0 && a2 != 4)
        {
          v7 |= *(_BYTE *)(a1 + 4);
          v8 = a1 + 5;
          if (((a1 + 5) & 7) != 0 && a2 != 5)
          {
            v7 |= *(_BYTE *)(a1 + 5);
            v8 = a1 + 6;
            if (((a1 + 6) & 7) != 0 && a2 != 6)
            {
              v7 |= *(_BYTE *)(a1 + 6);
              v8 = a1 + 7;
              if (((a1 + 7) & 7) != 0 && a2 != 7)
              {
                v7 |= *(_BYTE *)(a1 + 7);
                v8 = a1 + 8;
              }
            }
          }
        }
      }
    }
  }
  v9 = (int8x8_t)v7;
  v10 = v6 & 0xFFFFFFFFFFFFFFF8;
  if (v8 >= (v6 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_26;
LABEL_20:
  v11 = v8 + 8;
  if (v10 > v8 + 8)
    v11 = v10;
  v12 = v11 + ~v8;
  if (v12 < 0x18)
  {
    v13 = (uint8x16_t *)v8;
    do
    {
LABEL_30:
      v20 = v13->i64[0];
      v13 = (uint8x16_t *)((char *)v13 + 8);
      *(_QWORD *)&v9 |= v20;
    }
    while ((unint64_t)v13 < v10);
    goto LABEL_31;
  }
  v14 = (v12 >> 3) + 1;
  v13 = (uint8x16_t *)(v8 + 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL));
  v15 = 0uLL;
  v16 = (int8x16_t)(unint64_t)v9;
  v17 = (int8x16_t *)(v8 + 16);
  v18 = v14 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v16 = vorrq_s8(v17[-1], v16);
    v15 = vorrq_s8(*v17, v15);
    v17 += 2;
    v18 -= 4;
  }
  while (v18);
  v19 = vorrq_s8(v15, v16);
  v9 = vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
  if (v14 != (v14 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_30;
LABEL_31:
  if (v13 != (uint8x16_t *)v6)
  {
    v21 = a2 + a1 - (_QWORD)v13;
    if (v21 < 8)
    {
      v22 = (unsigned __int8 *)v13;
      goto LABEL_45;
    }
    if (v21 >= 0x10)
    {
      v23 = v21 & 0xFFFFFFFFFFFFFFF0;
      v39 = 0uLL;
      v40 = (int8x16_t)(unint64_t)v9;
      v41 = v21 & 0xFFFFFFFFFFFFFFF0;
      v42 = v13;
      v43 = 0uLL;
      v44 = 0uLL;
      v45 = 0uLL;
      v46 = 0uLL;
      v47 = 0uLL;
      v48 = 0uLL;
      do
      {
        v49 = *v42++;
        v50 = vmovl_u8(*(uint8x8_t *)v49.i8);
        v51 = vmovl_u16(*(uint16x4_t *)v50.i8);
        v52.i64[0] = v51.u32[0];
        v52.i64[1] = v51.u32[1];
        v53 = v52;
        v54 = vmovl_high_u8(v49);
        v55 = vmovl_high_u16(v54);
        v52.i64[0] = v55.u32[2];
        v52.i64[1] = v55.u32[3];
        v56 = v52;
        v52.i64[0] = v51.u32[2];
        v52.i64[1] = v51.u32[3];
        v57 = v52;
        v58 = vmovl_high_u16(v50);
        v52.i64[0] = v58.u32[0];
        v52.i64[1] = v58.u32[1];
        v59 = v52;
        v60 = vmovl_u16(*(uint16x4_t *)v54.i8);
        v52.i64[0] = v60.u32[0];
        v52.i64[1] = v60.u32[1];
        v61 = v52;
        v52.i64[0] = v55.u32[0];
        v52.i64[1] = v55.u32[1];
        v62 = v52;
        v52.i64[0] = v58.u32[2];
        v52.i64[1] = v58.u32[3];
        v63 = v52;
        v52.i64[0] = v60.u32[2];
        v52.i64[1] = v60.u32[3];
        v46 = vorrq_s8(v46, v52);
        v44 = vorrq_s8(v44, v63);
        v47 = vorrq_s8(v47, v62);
        v45 = vorrq_s8(v45, v61);
        v43 = vorrq_s8(v43, v59);
        v39 = vorrq_s8(v39, v57);
        v48 = vorrq_s8(v48, v56);
        v40 = vorrq_s8(v40, v53);
        v41 -= 16;
      }
      while (v41);
      v64 = vorrq_s8(vorrq_s8(vorrq_s8(v40, v45), vorrq_s8(v43, v47)), vorrq_s8(vorrq_s8(v39, v46), vorrq_s8(v44, v48)));
      v9 = vorr_s8(*(int8x8_t *)v64.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL));
      if (v21 == v23)
        goto LABEL_46;
      if ((v21 & 8) == 0)
      {
        v22 = &v13->u8[v23];
        do
        {
LABEL_45:
          v65 = *v22++;
          *(_QWORD *)&v9 |= v65;
        }
        while (v22 != (unsigned __int8 *)v6);
        goto LABEL_46;
      }
    }
    else
    {
      v23 = 0;
    }
    v22 = &v13->u8[v21 & 0xFFFFFFFFFFFFFFF8];
    v24 = 0uLL;
    v25 = (int8x16_t)(unint64_t)v9;
    v26 = (uint8x8_t *)&v13->i8[v23];
    v27 = v23 - (v21 & 0xFFFFFFFFFFFFFFF8);
    v28 = 0uLL;
    v29 = 0uLL;
    do
    {
      v30 = *v26++;
      v31 = vmovl_u8(v30);
      v32 = vmovl_u16(*(uint16x4_t *)v31.i8);
      v33.i64[0] = v32.u32[0];
      v33.i64[1] = v32.u32[1];
      v34 = v33;
      v33.i64[0] = v32.u32[2];
      v33.i64[1] = v32.u32[3];
      v35 = v33;
      v36 = vmovl_high_u16(v31);
      v33.i64[0] = v36.u32[0];
      v33.i64[1] = v36.u32[1];
      v37 = v33;
      v33.i64[0] = v36.u32[2];
      v33.i64[1] = v36.u32[3];
      v29 = vorrq_s8(v29, v33);
      v28 = vorrq_s8(v28, v37);
      v24 = vorrq_s8(v24, v35);
      v25 = vorrq_s8(v25, v34);
      v27 += 8;
    }
    while (v27);
    v38 = vorrq_s8(vorrq_s8(v25, v28), vorrq_s8(v24, v29));
    v9 = vorr_s8(*(int8x8_t *)v38.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
    if (v21 == (v21 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_46;
    goto LABEL_45;
  }
LABEL_46:
  if ((*(_QWORD *)&v9 & 0x8080808080808080) == 0)
  {
    v68 = WTF::fastCompactMalloc((WTF *)(a2 + 20));
    v69 = (_BYTE *)(v68 + 20);
    *(_DWORD *)v68 = 2;
    *(_DWORD *)(v68 + 4) = a2;
    *(_QWORD *)(v68 + 8) = v68 + 20;
    *(_DWORD *)(v68 + 16) = 4;
    if (a2 == 1)
      *v69 = *(_BYTE *)a1;
    else
      memcpy(v69, (const void *)a1, a2);
    *a3 = v68;
    return;
  }
  v87 = (WTF *)v89;
  v88 = a2;
  if (a2 < 0x401)
  {
    v67 = a2;
    v66 = (WTF *)v89;
  }
  else
  {
    v66 = (WTF *)WTF::fastMalloc((WTF *)(2 * a2));
    v87 = v66;
    v67 = v88;
  }
  v70 = 0;
  v71 = v67;
  v90 = 0;
  do
  {
    v72 = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>(a1, a2, &v90);
    if (v72 == -1)
    {
LABEL_64:
      if (v70 <= v71)
      {
LABEL_65:
        *a3 = 0;
        v81 = (unint64_t)v87;
        if (v89 == (_BYTE *)v87 || v87 == 0)
          return;
LABEL_69:
        WTF::fastFree(v81, v73, v74, v75, v76, v77, v78, v79);
        return;
      }
      goto LABEL_88;
    }
    if (v70 == v71)
      goto LABEL_65;
    if (HIWORD(v72))
    {
      if (HIWORD(v72) > 0x10u || v70 + 1 >= v71)
        goto LABEL_64;
      if (v70 >= v71)
        goto LABEL_88;
      *((_WORD *)v66 + v70) = (v72 >> 10) - 10304;
      v80 = v70 + 2;
      ++v70;
      LOWORD(v72) = v72 & 0x3FF | 0xDC00;
    }
    else
    {
      if (v70 >= v71)
        goto LABEL_88;
      v80 = v70 + 1;
    }
    *((_WORD *)v66 + v70) = v72;
    v70 = v80;
  }
  while (v90 < a2);
  if (v80 > v71)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  if (v80 > a2 || v80 >= 0x7FFFFFF0)
  {
LABEL_89:
    __break(0xC471u);
    JUMPOUT(0x197B5ED0CLL);
  }
  v83 = WTF::fastCompactMalloc((WTF *)(2 * v80 + 20));
  v84 = (_WORD *)(v83 + 20);
  *(_DWORD *)v83 = 2;
  *(_DWORD *)(v83 + 4) = v80;
  *(_QWORD *)(v83 + 8) = v83 + 20;
  *(_DWORD *)(v83 + 16) = 0;
  if (v80 != 1)
  {
    memcpy(v84, v66, 2 * v80);
    *a3 = v83;
    v81 = (unint64_t)v87;
    if (v89 == (_BYTE *)v87 || v87 == 0)
      return;
    goto LABEL_69;
  }
  *v84 = *(_WORD *)v66;
  *a3 = v83;
  v81 = (unint64_t)v87;
  if (v89 != (_BYTE *)v87 && v87 != 0)
    goto LABEL_69;
}

void WTF::fromUTF8Impl<true>(unint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v6;
  unsigned __int8 v7;
  unint64_t v8;
  int8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x16_t *v13;
  uint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t *v17;
  uint64_t v18;
  int8x16_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  uint8x8_t *v26;
  unint64_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint8x8_t v30;
  uint16x8_t v31;
  uint32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint32x4_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  unint64_t v41;
  uint8x16_t *v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  uint8x16_t v49;
  uint16x8_t v50;
  uint32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  uint16x8_t v54;
  uint32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  uint32x4_t v58;
  int8x16_t v59;
  uint32x4_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  unsigned int v65;
  WTF *v66;
  unsigned int v67;
  uint64_t v68;
  _BYTE *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  WTF *v78;
  unint64_t v79;
  _WORD *v80;
  _WORD *v81;
  char v82[8];
  _WORD *v83;
  unint64_t v84;
  WTF *v85;
  int v86;
  unsigned int v87;
  _BYTE v88[2048];

  if (a2 >> 31)
  {
    __break(0xC471u);
    goto LABEL_70;
  }
  if (!a2)
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a3 = &WTF::StringImpl::s_emptyAtomString;
    return;
  }
  v6 = a1 + a2;
  if ((a1 & 7) == 0)
  {
    v9 = 0;
    v8 = a1;
    v10 = v6 & 0xFFFFFFFFFFFFFFF8;
    if (a1 < (v6 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_20;
LABEL_26:
    v13 = (uint8x16_t *)v8;
    goto LABEL_31;
  }
  v8 = a1 + 1;
  v7 = *(_BYTE *)a1;
  if (((a1 + 1) & 7) != 0 && a2 != 1)
  {
    v7 |= *(_BYTE *)(a1 + 1);
    v8 = a1 + 2;
    if (((a1 + 2) & 7) != 0 && a2 != 2)
    {
      v7 |= *(_BYTE *)(a1 + 2);
      v8 = a1 + 3;
      if (((a1 + 3) & 7) != 0 && a2 != 3)
      {
        v7 |= *(_BYTE *)(a1 + 3);
        v8 = a1 + 4;
        if (((a1 + 4) & 7) != 0 && a2 != 4)
        {
          v7 |= *(_BYTE *)(a1 + 4);
          v8 = a1 + 5;
          if (((a1 + 5) & 7) != 0 && a2 != 5)
          {
            v7 |= *(_BYTE *)(a1 + 5);
            v8 = a1 + 6;
            if (((a1 + 6) & 7) != 0 && a2 != 6)
            {
              v7 |= *(_BYTE *)(a1 + 6);
              v8 = a1 + 7;
              if (((a1 + 7) & 7) != 0 && a2 != 7)
              {
                v7 |= *(_BYTE *)(a1 + 7);
                v8 = a1 + 8;
              }
            }
          }
        }
      }
    }
  }
  v9 = (int8x8_t)v7;
  v10 = v6 & 0xFFFFFFFFFFFFFFF8;
  if (v8 >= (v6 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_26;
LABEL_20:
  v11 = v8 + 8;
  if (v10 > v8 + 8)
    v11 = v10;
  v12 = v11 + ~v8;
  if (v12 < 0x18)
  {
    v13 = (uint8x16_t *)v8;
    do
    {
LABEL_30:
      v20 = v13->i64[0];
      v13 = (uint8x16_t *)((char *)v13 + 8);
      *(_QWORD *)&v9 |= v20;
    }
    while ((unint64_t)v13 < v10);
    goto LABEL_31;
  }
  v14 = (v12 >> 3) + 1;
  v13 = (uint8x16_t *)(v8 + 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL));
  v15 = 0uLL;
  v16 = (int8x16_t)(unint64_t)v9;
  v17 = (int8x16_t *)(v8 + 16);
  v18 = v14 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v16 = vorrq_s8(v17[-1], v16);
    v15 = vorrq_s8(*v17, v15);
    v17 += 2;
    v18 -= 4;
  }
  while (v18);
  v19 = vorrq_s8(v15, v16);
  v9 = vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
  if (v14 != (v14 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_30;
LABEL_31:
  if (v13 == (uint8x16_t *)v6)
    goto LABEL_46;
  v21 = a2 + a1 - (_QWORD)v13;
  if (v21 < 8)
  {
    v22 = (unsigned __int8 *)v13;
    goto LABEL_45;
  }
  if (v21 >= 0x10)
  {
    v23 = v21 & 0xFFFFFFFFFFFFFFF0;
    v39 = 0uLL;
    v40 = (int8x16_t)(unint64_t)v9;
    v41 = v21 & 0xFFFFFFFFFFFFFFF0;
    v42 = v13;
    v43 = 0uLL;
    v44 = 0uLL;
    v45 = 0uLL;
    v46 = 0uLL;
    v47 = 0uLL;
    v48 = 0uLL;
    do
    {
      v49 = *v42++;
      v50 = vmovl_u8(*(uint8x8_t *)v49.i8);
      v51 = vmovl_u16(*(uint16x4_t *)v50.i8);
      v52.i64[0] = v51.u32[0];
      v52.i64[1] = v51.u32[1];
      v53 = v52;
      v54 = vmovl_high_u8(v49);
      v55 = vmovl_high_u16(v54);
      v52.i64[0] = v55.u32[2];
      v52.i64[1] = v55.u32[3];
      v56 = v52;
      v52.i64[0] = v51.u32[2];
      v52.i64[1] = v51.u32[3];
      v57 = v52;
      v58 = vmovl_high_u16(v50);
      v52.i64[0] = v58.u32[0];
      v52.i64[1] = v58.u32[1];
      v59 = v52;
      v60 = vmovl_u16(*(uint16x4_t *)v54.i8);
      v52.i64[0] = v60.u32[0];
      v52.i64[1] = v60.u32[1];
      v61 = v52;
      v52.i64[0] = v55.u32[0];
      v52.i64[1] = v55.u32[1];
      v62 = v52;
      v52.i64[0] = v58.u32[2];
      v52.i64[1] = v58.u32[3];
      v63 = v52;
      v52.i64[0] = v60.u32[2];
      v52.i64[1] = v60.u32[3];
      v46 = vorrq_s8(v46, v52);
      v44 = vorrq_s8(v44, v63);
      v47 = vorrq_s8(v47, v62);
      v45 = vorrq_s8(v45, v61);
      v43 = vorrq_s8(v43, v59);
      v39 = vorrq_s8(v39, v57);
      v48 = vorrq_s8(v48, v56);
      v40 = vorrq_s8(v40, v53);
      v41 -= 16;
    }
    while (v41);
    v64 = vorrq_s8(vorrq_s8(vorrq_s8(v40, v45), vorrq_s8(v43, v47)), vorrq_s8(vorrq_s8(v39, v46), vorrq_s8(v44, v48)));
    v9 = vorr_s8(*(int8x8_t *)v64.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL));
    if (v21 == v23)
      goto LABEL_46;
    if ((v21 & 8) == 0)
    {
      v22 = &v13->u8[v23];
      do
      {
LABEL_45:
        v65 = *v22++;
        *(_QWORD *)&v9 |= v65;
      }
      while (v22 != (unsigned __int8 *)v6);
      goto LABEL_46;
    }
  }
  else
  {
    v23 = 0;
  }
  v22 = &v13->u8[v21 & 0xFFFFFFFFFFFFFFF8];
  v24 = 0uLL;
  v25 = (int8x16_t)(unint64_t)v9;
  v26 = (uint8x8_t *)&v13->i8[v23];
  v27 = v23 - (v21 & 0xFFFFFFFFFFFFFFF8);
  v28 = 0uLL;
  v29 = 0uLL;
  do
  {
    v30 = *v26++;
    v31 = vmovl_u8(v30);
    v32 = vmovl_u16(*(uint16x4_t *)v31.i8);
    v33.i64[0] = v32.u32[0];
    v33.i64[1] = v32.u32[1];
    v34 = v33;
    v33.i64[0] = v32.u32[2];
    v33.i64[1] = v32.u32[3];
    v35 = v33;
    v36 = vmovl_high_u16(v31);
    v33.i64[0] = v36.u32[0];
    v33.i64[1] = v36.u32[1];
    v37 = v33;
    v33.i64[0] = v36.u32[2];
    v33.i64[1] = v36.u32[3];
    v29 = vorrq_s8(v29, v33);
    v28 = vorrq_s8(v28, v37);
    v24 = vorrq_s8(v24, v35);
    v25 = vorrq_s8(v25, v34);
    v27 += 8;
  }
  while (v27);
  v38 = vorrq_s8(vorrq_s8(v25, v28), vorrq_s8(v24, v29));
  v9 = vorr_s8(*(int8x8_t *)v38.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
  if (v21 != (v21 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_45;
LABEL_46:
  if ((*(_QWORD *)&v9 & 0x8080808080808080) != 0)
  {
    v85 = (WTF *)v88;
    v86 = 1024;
    v87 = a2;
    if (a2 < 0x401)
    {
      v67 = a2;
      v66 = (WTF *)v88;
    }
    else
    {
      v66 = (WTF *)WTF::fastMalloc((WTF *)(2 * a2));
      v86 = a2;
      v85 = v66;
      v67 = v87;
    }
    WTF::Unicode::convertReplacingInvalidSequences(a1, a2, (uint64_t)v66, v67, (uint64_t)v82);
    if (v82[0])
    {
      v77 = 0;
      goto LABEL_54;
    }
    v79 = v84;
    if (v84 > a2)
    {
      __break(0xC471u);
      JUMPOUT(0x197B5F228);
    }
    if (!v84)
    {
      v77 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_54;
    }
    if (v84 < 0x7FFFFFF0)
    {
      v80 = v83;
      v77 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v84 + 20));
      v81 = v77 + 5;
      *v77 = 2;
      v77[1] = v79;
      *((_QWORD *)v77 + 1) = v77 + 5;
      v77[4] = 0;
      if (v79 == 1)
        *v81 = *v80;
      else
        memcpy(v81, v80, 2 * v79);
LABEL_54:
      *a3 = v77;
      v78 = v85;
      if (v88 != (_BYTE *)v85)
      {
        if (v85)
        {
          v85 = 0;
          v86 = 0;
          WTF::fastFree((unint64_t)v78, v70, v71, v72, v73, v74, v75, v76);
        }
      }
      return;
    }
    __break(0xC471u);
LABEL_70:
    JUMPOUT(0x197B5F208);
  }
  v68 = WTF::fastCompactMalloc((WTF *)(a2 + 20));
  v69 = (_BYTE *)(v68 + 20);
  *(_DWORD *)v68 = 2;
  *(_DWORD *)(v68 + 4) = a2;
  *(_QWORD *)(v68 + 8) = v68 + 20;
  *(_DWORD *)(v68 + 16) = 4;
  if (a2 == 1)
    *v69 = *(_BYTE *)a1;
  else
    memcpy(v69, (const void *)a1, a2);
  *a3 = v68;
}

void WTF::String::fromUTF8WithLatin1Fallback(_BYTE *a1@<X0>, size_t a2@<X1>, _QWORD *a3@<X8>)
{
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;

  if (!a1)
  {
    v24 = 0;
    if (!(a2 >> 31))
    {
      *a3 = 0;
      return;
    }
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)a1, a2, (uint64_t *)&v24);
  if (v24)
  {
    *a3 = v24;
    return;
  }
  if (a2 >> 31)
  {
LABEL_17:
    __break(0xC471u);
    return;
  }
  if (a2)
  {
    v13 = WTF::fastCompactMalloc((WTF *)(a2 + 20));
    v14 = (_BYTE *)(v13 + 20);
    *(_DWORD *)v13 = 2;
    *(_DWORD *)(v13 + 4) = a2;
    *(_QWORD *)(v13 + 8) = v13 + 20;
    *(_DWORD *)(v13 + 16) = 4;
    *a3 = v13;
    if (a2 == 1)
      *v14 = *a1;
    else
      memcpy(v14, a1, a2);
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a3 = &WTF::StringImpl::s_emptyAtomString;
  }
  v15 = v24;
  v24 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, v6, v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
}

_WORD *WTF::String::fromCodePoint@<X0>(_WORD *result@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _WORD __src[2];

  LOWORD(v2) = (_WORD)result;
  v4 = result >> 16;
  if (result >> 16)
  {
    if (v4 > 0x10)
    {
      v6 = 0;
      goto LABEL_9;
    }
    v2 = (result >> 10) - 10304;
    __src[0] = (result >> 10) - 10304;
    __src[1] = (unsigned __int16)result & 0x3FF | 0xDC00;
    v5 = 2;
  }
  else
  {
    __src[0] = (_WORD)result;
    v5 = 1;
  }
  v6 = WTF::fastCompactMalloc((WTF *)(2 * v5 + 20));
  result = (_WORD *)(v6 + 20);
  *(_DWORD *)v6 = 2;
  *(_DWORD *)(v6 + 4) = v5;
  *(_QWORD *)(v6 + 8) = v6 + 20;
  *(_DWORD *)(v6 + 16) = 0;
  if (v4)
    result = memcpy(result, __src, 2 * v5);
  else
    *result = v2;
LABEL_9:
  *a2 = v6;
  return result;
}

unsigned __int8 *WTF::charactersToDouble(uint64_t a1, unsigned __int8 *a2, BOOL *a3)
{
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *result;
  BOOL v9;
  unint64_t v10;

  v5 = 0;
  if (a2)
  {
    while (1)
    {
      v6 = v5[a1];
      if ((v6 - 9) >= 5 && v6 != 32)
        break;
      if (a2 == ++v5)
      {
        v5 = a2;
        break;
      }
    }
  }
  v7 = &v5[a1];
  v10 = 0;
  result = fast_float::from_chars_advanced<double,char>(&v5[a1], &a2[a1], &v10, 0x2E00000005);
  if (result == v7)
  {
    if (!a3)
      return result;
    v9 = 0;
  }
  else
  {
    if (!a3)
      return result;
    v9 = &result[v5 - v7] == a2;
  }
  *a3 = v9;
  return result;
}

unsigned __int16 *WTF::charactersToDouble(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  unsigned __int16 *result;
  BOOL v9;
  uint64_t v10;

  v5 = 0;
  if (a2)
  {
    while (1)
    {
      v6 = *(unsigned __int16 *)(a1 + 2 * v5);
      if ((v6 - 9) >= 5 && v6 != 32)
        break;
      if (a2 == ++v5)
      {
        v5 = a2;
        break;
      }
    }
  }
  v7 = (unsigned __int16 *)(a1 + 2 * v5);
  v10 = 0;
  result = fast_float::from_chars_advanced<double,char16_t>(v7, (unsigned __int16 *)(a1 + 2 * a2), (double *)&v10, 0x2E00000005);
  if (result == v7)
  {
    if (!a3)
      return result;
    v9 = 0;
  }
  else
  {
    if (!a3)
      return result;
    v9 = result - v7 + v5 == a2;
  }
  *a3 = v9;
  return result;
}

float WTF::charactersToFloat(uint64_t a1, unsigned __int8 *a2, BOOL *a3)
{
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  double v9;
  BOOL v10;
  double v12;

  v5 = 0;
  if (a2)
  {
    while (1)
    {
      v6 = v5[a1];
      if ((v6 - 9) >= 5 && v6 != 32)
        break;
      if (a2 == ++v5)
      {
        v5 = a2;
        break;
      }
    }
  }
  v7 = &v5[a1];
  v12 = 0.0;
  v8 = fast_float::from_chars_advanced<double,char>(&v5[a1], &a2[a1], (unint64_t *)&v12, 0x2E00000005);
  if (v8 == v7)
  {
    v9 = 0.0;
    if (a3)
    {
      v10 = 0;
LABEL_13:
      *a3 = v10;
    }
  }
  else
  {
    v9 = v12;
    if (a3)
    {
      v10 = &v8[v5 - v7] == a2;
      goto LABEL_13;
    }
  }
  return v9;
}

float WTF::charactersToFloat(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  double v9;
  BOOL v10;
  double v12;

  v5 = 0;
  if (a2)
  {
    while (1)
    {
      v6 = *(unsigned __int16 *)(a1 + 2 * v5);
      if ((v6 - 9) >= 5 && v6 != 32)
        break;
      if (a2 == ++v5)
      {
        v5 = a2;
        break;
      }
    }
  }
  v7 = (unsigned __int16 *)(a1 + 2 * v5);
  v12 = 0.0;
  v8 = fast_float::from_chars_advanced<double,char16_t>(v7, (unsigned __int16 *)(a1 + 2 * a2), &v12, 0x2E00000005);
  if (v8 == v7)
  {
    v9 = 0.0;
    if (a3)
    {
      v10 = 0;
LABEL_13:
      *a3 = v10;
    }
  }
  else
  {
    v9 = v12;
    if (a3)
    {
      v10 = v8 - v7 + v5 == a2;
      goto LABEL_13;
    }
  }
  return v9;
}

float WTF::charactersToFloat(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  float result;
  double v9;
  double v10;

  v4 = 0;
  if (a2)
  {
    while (1)
    {
      v5 = *(unsigned __int8 *)(a1 + v4);
      if ((v5 - 9) >= 5 && v5 != 32)
        break;
      if (a2 == ++v4)
      {
        v4 = a2;
        break;
      }
    }
  }
  v6 = (unsigned __int8 *)(a1 + v4);
  v10 = 0.0;
  v7 = fast_float::from_chars_advanced<double,char>((unsigned __int8 *)(a1 + v4), (unsigned __int8 *)(a1 + a2), (unint64_t *)&v10, 0x2E00000005);
  result = 0.0;
  *a3 = v7 - v6;
  if (v7 != v6)
  {
    v9 = v10;
    *a3 = v7 - v6 + v4;
    return v9;
  }
  return result;
}

float WTF::charactersToFloat(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  int v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  float result;
  uint64_t v9;
  double v10;
  double v11;

  v4 = 0;
  if (a2)
  {
    while (1)
    {
      v5 = *(unsigned __int16 *)(a1 + 2 * v4);
      if ((v5 - 9) >= 5 && v5 != 32)
        break;
      if (a2 == ++v4)
      {
        v4 = a2;
        break;
      }
    }
  }
  v6 = (unsigned __int16 *)(a1 + 2 * v4);
  v11 = 0.0;
  v7 = fast_float::from_chars_advanced<double,char16_t>(v6, (unsigned __int16 *)(a1 + 2 * a2), &v11, 0x2E00000005);
  result = 0.0;
  v9 = v7 - v6;
  *a3 = v9;
  if (v7 != v6)
  {
    v10 = v11;
    *a3 = v9 + v4;
    return v10;
  }
  return result;
}

void WTF::Detail::CallableWrapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::String::splitInternal<false>(char16_t)::{lambda(WTF::StringView)#1},void,WTF::StringView>::call(uint64_t a1, _WORD *a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  size_t v6;
  int *v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  v3 = a3;
  v5 = *(_QWORD *)(a1 + 8);
  if ((a3 & 0xFF00000000) == 0)
  {
    if (a2)
    {
      v10 = a3;
      if ((_DWORD)a3)
      {
        if (a3 < 0x7FFFFFF0uLL)
        {
          v6 = 2 * a3;
          v7 = (int *)WTF::fastCompactMalloc((WTF *)(v6 + 20));
          v8 = v7 + 5;
          *v7 = 2;
          v7[1] = v3;
          *((_QWORD *)v7 + 1) = v7 + 5;
          v7[4] = 0;
          if (v10 == 1)
          {
            *v8 = *a2;
            v31 = (WTF::StringImpl *)v7;
            v9 = *(unsigned int *)(v5 + 12);
            if ((_DWORD)v9 != *(_DWORD *)(v5 + 8))
              goto LABEL_20;
            goto LABEL_15;
          }
          goto LABEL_21;
        }
LABEL_24:
        __break(0xC471u);
        JUMPOUT(0x197B5FA74);
      }
LABEL_19:
      v7 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      v31 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
      v9 = *(unsigned int *)(v5 + 12);
      if ((_DWORD)v9 == *(_DWORD *)(v5 + 8))
        goto LABEL_15;
      goto LABEL_20;
    }
LABEL_14:
    v7 = 0;
    v31 = 0;
    v9 = *(unsigned int *)(v5 + 12);
    if ((_DWORD)v9 == *(_DWORD *)(v5 + 8))
      goto LABEL_15;
    goto LABEL_20;
  }
  if (!a2)
    goto LABEL_14;
  v6 = a3;
  if (!(_DWORD)a3)
    goto LABEL_19;
  if ((unint64_t)a3 >> 31)
    goto LABEL_24;
  v7 = (int *)WTF::fastCompactMalloc((WTF *)(a3 + 20));
  v8 = v7 + 5;
  *v7 = 2;
  v7[1] = v3;
  *((_QWORD *)v7 + 1) = v7 + 5;
  v7[4] = 4;
  if (v6 != 1)
  {
LABEL_21:
    memcpy(v8, a2, v6);
    v31 = (WTF::StringImpl *)v7;
    v9 = *(unsigned int *)(v5 + 12);
    if ((_DWORD)v9 == *(_DWORD *)(v5 + 8))
      goto LABEL_15;
LABEL_20:
    *(_QWORD *)(*(_QWORD *)v5 + 8 * v9) = v7;
    *(_DWORD *)(v5 + 12) = v9 + 1;
    return;
  }
  *(_BYTE *)v8 = *(_BYTE *)a2;
  v31 = (WTF::StringImpl *)v7;
  v9 = *(unsigned int *)(v5 + 12);
  if ((_DWORD)v9 != *(_DWORD *)(v5 + 8))
    goto LABEL_20;
LABEL_15:
  v11 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, v9 + 1, (unint64_t)&v31);
  v19 = *(unsigned int *)(v5 + 12);
  v20 = *(_QWORD *)v5;
  v21 = *v11;
  *v11 = 0;
  *(_QWORD *)(v20 + 8 * v19) = v21;
  v22 = v31;
  *(_DWORD *)(v5 + 12) = v19 + 1;
  v31 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
}

void WTF::Detail::CallableWrapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::String::splitInternal<true>(char16_t)::{lambda(WTF::StringView)#1},void,WTF::StringView>::call(uint64_t a1, _WORD *a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  size_t v6;
  int *v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  v3 = a3;
  v5 = *(_QWORD *)(a1 + 8);
  if ((a3 & 0xFF00000000) == 0)
  {
    if (a2)
    {
      v10 = a3;
      if ((_DWORD)a3)
      {
        if (a3 < 0x7FFFFFF0uLL)
        {
          v6 = 2 * a3;
          v7 = (int *)WTF::fastCompactMalloc((WTF *)(v6 + 20));
          v8 = v7 + 5;
          *v7 = 2;
          v7[1] = v3;
          *((_QWORD *)v7 + 1) = v7 + 5;
          v7[4] = 0;
          if (v10 == 1)
          {
            *v8 = *a2;
            v31 = (WTF::StringImpl *)v7;
            v9 = *(unsigned int *)(v5 + 12);
            if ((_DWORD)v9 != *(_DWORD *)(v5 + 8))
              goto LABEL_20;
            goto LABEL_15;
          }
          goto LABEL_21;
        }
LABEL_24:
        __break(0xC471u);
        JUMPOUT(0x197B5FC74);
      }
LABEL_19:
      v7 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      v31 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
      v9 = *(unsigned int *)(v5 + 12);
      if ((_DWORD)v9 == *(_DWORD *)(v5 + 8))
        goto LABEL_15;
      goto LABEL_20;
    }
LABEL_14:
    v7 = 0;
    v31 = 0;
    v9 = *(unsigned int *)(v5 + 12);
    if ((_DWORD)v9 == *(_DWORD *)(v5 + 8))
      goto LABEL_15;
    goto LABEL_20;
  }
  if (!a2)
    goto LABEL_14;
  v6 = a3;
  if (!(_DWORD)a3)
    goto LABEL_19;
  if ((unint64_t)a3 >> 31)
    goto LABEL_24;
  v7 = (int *)WTF::fastCompactMalloc((WTF *)(a3 + 20));
  v8 = v7 + 5;
  *v7 = 2;
  v7[1] = v3;
  *((_QWORD *)v7 + 1) = v7 + 5;
  v7[4] = 4;
  if (v6 != 1)
  {
LABEL_21:
    memcpy(v8, a2, v6);
    v31 = (WTF::StringImpl *)v7;
    v9 = *(unsigned int *)(v5 + 12);
    if ((_DWORD)v9 == *(_DWORD *)(v5 + 8))
      goto LABEL_15;
LABEL_20:
    *(_QWORD *)(*(_QWORD *)v5 + 8 * v9) = v7;
    *(_DWORD *)(v5 + 12) = v9 + 1;
    return;
  }
  *(_BYTE *)v8 = *(_BYTE *)a2;
  v31 = (WTF::StringImpl *)v7;
  v9 = *(unsigned int *)(v5 + 12);
  if ((_DWORD)v9 != *(_DWORD *)(v5 + 8))
    goto LABEL_20;
LABEL_15:
  v11 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, v9 + 1, (unint64_t)&v31);
  v19 = *(unsigned int *)(v5 + 12);
  v20 = *(_QWORD *)v5;
  v21 = *v11;
  *v11 = 0;
  *(_QWORD *)(v20 + 8 * v19) = v21;
  v22 = v31;
  *(_DWORD *)(v5 + 12) = v19 + 1;
  v31 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
}

uint64_t (*mach_exc_server_routine(uint64_t a1))()
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 2411) >= 0xFFFFFFFA)
    return catch_mach_exc_subsystem[5 * (v1 - 2405) + 5];
  else
    return 0;
}

uint64_t _Xmach_exception_raise(uint64_t result, uint64_t a2)
{
  int v3;
  unsigned int v4;
  unsigned int v5;

  if ((*(_DWORD *)result & 0x80000000) == 0)
  {
LABEL_2:
    v3 = -304;
    goto LABEL_3;
  }
  v3 = -304;
  if (*(_DWORD *)(result + 24) == 2)
  {
    v4 = *(_DWORD *)(result + 4);
    if (v4 >= 0x44 && v4 <= 0x54)
    {
      if (*(unsigned __int16 *)(result + 38) << 16 != 1114112 || *(unsigned __int16 *)(result + 50) << 16 != 1114112)
      {
        v3 = -300;
        goto LABEL_3;
      }
      v5 = *(_DWORD *)(result + 64);
      if (v5 <= 2 && v5 <= (v4 - 68) >> 3 && v4 == 8 * v5 + 68)
      {
        result = WTF::dataLog<char [88],char [2]>("We should not have called catch_exception_raise(), please file a bug at bugs.webkit.org", "\n");
        v3 = 5;
        goto LABEL_3;
      }
      goto LABEL_2;
    }
  }
LABEL_3:
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

_DWORD *_Xmach_exception_raise_state(_DWORD *result, uint64_t a2)
{
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  _DWORD *v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  _DWORD *v12;
  _DWORD *v13;

  if ((*result & 0x80000000) != 0)
    goto LABEL_17;
  v3 = result[1];
  v4 = v3 < 0x30 || v3 > 0x1480;
  if (!v4
    && (v5 = result[9], v5 <= 2)
    && ((v6 = 2 * v5, v5 <= (v3 - 48) >> 3) ? (v7 = v3 >= 8 * v5 + 48) : (v7 = 0),
        v7
     && (v8 = &result[v6], v9 = v8[11], v9 <= 0x510)
     && ((v10 = v3 - v6 * 4, v9 <= (v10 - 48) >> 2) ? (v11 = v10 == 4 * v9 + 48) : (v11 = 0), v11)))
  {
    v12 = v8 - 4;
    *(_DWORD *)(a2 + 40) = 1296;
    v13 = v12 + 14;
    result = (_DWORD *)catch_mach_exception_raise_state(result[3], result[8], (uint64_t)(result + 10), v5, v12 + 14, v12 + 16, v9, (char *)(a2 + 44), (unsigned int *)(a2 + 40));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    if (!(_DWORD)result)
    {
      *(_DWORD *)(a2 + 36) = *v13;
      *(_DWORD *)(a2 + 4) = 4 * *(_DWORD *)(a2 + 40) + 44;
    }
  }
  else
  {
LABEL_17:
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  return result;
}

uint64_t _Xmach_exception_raise_state_identity(uint64_t result, uint64_t a2)
{
  int v3;
  unsigned int v4;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  if ((*(_DWORD *)result & 0x80000000) == 0)
  {
LABEL_2:
    v3 = -304;
    goto LABEL_3;
  }
  v3 = -304;
  if (*(_DWORD *)(result + 24) == 2)
  {
    v4 = *(_DWORD *)(result + 4);
    if (v4 >= 0x4C && v4 <= 0x149C)
    {
      if (*(unsigned __int16 *)(result + 38) << 16 != 1114112 || *(unsigned __int16 *)(result + 50) << 16 != 1114112)
      {
        v3 = -300;
        goto LABEL_3;
      }
      v6 = *(_DWORD *)(result + 64);
      if (v6 > 2)
        goto LABEL_2;
      v3 = -304;
      if (v6 <= (v4 - 76) >> 3)
      {
        v7 = 8 * v6;
        if (v4 >= 8 * v6 + 76)
        {
          v8 = *(_DWORD *)(result + v7 + 72);
          if (v8 <= 0x510)
          {
            v9 = v4 - v7;
            if (v8 <= (v9 - 76) >> 2 && v9 == 4 * v8 + 76)
            {
              *(_DWORD *)(a2 + 40) = 1296;
              result = WTF::dataLog<char [88],char [2]>("We should not have called catch_mach_exception_raise_state_identity, please file a bug at bugs.webkit.org", "\n");
              v3 = 5;
              goto LABEL_3;
            }
          }
          goto LABEL_2;
        }
      }
    }
  }
LABEL_3:
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

uint64_t _Xmach_exception_raise_state_identity_protected(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v5;
  unsigned int v6;
  unsigned int v8;
  unsigned int v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;

  if ((*(_DWORD *)result & 0x80000000) == 0)
    goto LABEL_2;
  v5 = -304;
  if (*(_DWORD *)(result + 24) != 1)
    goto LABEL_3;
  v6 = *(_DWORD *)(result + 4);
  if (v6 < 0x48 || v6 > 0x1498)
    goto LABEL_3;
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    v5 = -300;
    goto LABEL_3;
  }
  v8 = *(_DWORD *)(result + 60);
  if (v8 > 2)
    goto LABEL_2;
  v5 = -304;
  if (v8 > (v6 - 72) >> 3)
    goto LABEL_3;
  v9 = 8 * v8;
  if (v6 < 8 * v8 + 72)
    goto LABEL_3;
  v10 = (_DWORD *)(result + v9);
  v11 = v10[17];
  if (v11 > 0x510 || (v12 = v6 - v9, v11 > (v12 - 72) >> 2) || v12 != 4 * v11 + 72)
  {
LABEL_2:
    v5 = -304;
LABEL_3:
    *(_DWORD *)(a2 + 32) = v5;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  *(_DWORD *)(a2 + 40) = 1296;
  v13 = v10 + 16;
  result = catch_mach_exception_raise_state(*(_DWORD *)(result + 12), *(_DWORD *)(result + 56), result + 64, a4, v10 + 16, v10 + 18, v11, (char *)(a2 + 44), (unsigned int *)(a2 + 40));
  *(_DWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  if (!(_DWORD)result)
  {
    *(_DWORD *)(a2 + 36) = *v13;
    *(_DWORD *)(a2 + 4) = 4 * *(_DWORD *)(a2 + 40) + 44;
  }
  return result;
}

uint64_t mach_exc_server(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  void (*v5)(void);
  uint64_t result;

  v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  v4 = a1[5];
  if ((v4 - 2411) >= 0xFFFFFFFA
    && (v5 = (void (*)(void))catch_mach_exc_subsystem[5 * (v4 - 2405) + 5]) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

uint64_t bmalloc::availableMemory(bmalloc *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&bmalloc::availableMemory(void)::onceFlag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&bmalloc::availableMemory(void)::onceFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<bmalloc::availableMemory(void)::$_0 &&>>);
  }
  return bmalloc::availableMemory(void)::availableMemory;
}

double bmalloc::memoryStatus(bmalloc *this)
{
  kern_return_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  double result;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[36];
  unint64_t v8;
  char v9;
  char **v10;
  char *v11;

  task_info_outCnt = 93;
  v1 = task_info(*MEMORY[0x1E0C83DA0], 0x16u, task_info_out, &task_info_outCnt);
  v2 = v8;
  v3 = atomic_load(&bmalloc::availableMemory(void)::onceFlag);
  if (v3 != -1)
  {
    v10 = &v11;
    v11 = &v9;
    std::__call_once(&bmalloc::availableMemory(void)::onceFlag, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<bmalloc::availableMemory(void)::$_0 &&>>);
  }
  if (v1)
    v4 = 0;
  else
    v4 = v2;
  result = (double)v4 / (double)(unint64_t)bmalloc::availableMemory(void)::availableMemory;
  if (result > 1.0)
    return 1.0;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<bmalloc::availableMemory(void)::$_0 &&>>()
{
  host_t v0;
  kern_return_t v1;
  unint64_t v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[10];
  unint64_t v8;

  v0 = MEMORY[0x19AEBB5B0]();
  host_info_outCnt = 12;
  v1 = host_info(v0, 1, host_info_out, &host_info_outCnt);
  mach_port_deallocate(*MEMORY[0x1E0C83DA0], v0);
  v2 = v8;
  getpid();
  result = memorystatus_control();
  if ((_DWORD)result)
  {
    v4 = 880803840;
  }
  else if (host_info_out[0] >= 0)
  {
    v4 = (unint64_t)host_info_out[0] << 20;
  }
  else
  {
    v4 = -1;
  }
  v5 = 0x20000000;
  if (!v1)
    v5 = v2;
  if (v4 >= v5)
    v4 = v5;
  bmalloc::availableMemory(void)::availableMemory = (v4 + 0x7FFFFFF) & 0xFFFFFFFFF8000000;
  return result;
}

uint64_t bmalloc::api::mallocOutOfLine(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;

  if (!a3)
  {
    if (a2 < 2)
    {
      v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (v3)
      {
        v4 = (unint64_t)(a1 + 15) >> 4;
        if ((unint64_t)(a1 + 15) <= 0x1AF)
        {
          v5 = 23 * v4 + 7;
        }
        else
        {
          if ((unint64_t)(a1 + 15) >> 5 > 0x138)
            return bmalloc_allocate_casual(a1, a2);
          v5 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v4 + 626);
          if (*(_DWORD *)(v3 + 8052) <= v5)
            return bmalloc_allocate_casual(a1, a2);
        }
        v10 = v3 + 8 * v5;
        v11 = v10 + 8064;
        *(_BYTE *)(v10 + 8064) = 1;
        v12 = *(unsigned int *)(v10 + 8080);
        if ((_DWORD)v12)
        {
          *(_DWORD *)(v11 + 16) = v12 - *(_DWORD *)(v11 + 20);
          result = *(_QWORD *)(v11 + 8) - v12;
          *(_BYTE *)v11 = 0;
          return result;
        }
        v14 = *(_QWORD *)(v11 + 40);
        v15 = *(_QWORD *)(v11 + 24);
        if (v14)
        {
LABEL_22:
          v16 = __clz(v14);
          *(_QWORD *)(v11 + 40) = v14 & ~(0x8000000000000000 >> v16);
          result = v15 + 16 * v16;
          *(_BYTE *)v11 = 0;
          return result;
        }
        if (*(_BYTE *)(v11 + 5) == 6)
        {
          v23 = *(unsigned int *)(v11 + 32);
          v24 = *(_DWORD *)(v11 + 36);
          if (v23 < v24)
          {
            *(_QWORD *)(v11 + 8 * v23 + 56) = 0;
            v25 = (unint64_t *)(8 * v23 + 8 * v5 + v3 + 8128);
            v26 = v24 - 1 - v23;
            while (v26)
            {
              v15 += 1024;
              v28 = *v25++;
              v27 = v28;
              LODWORD(v23) = v23 + 1;
              --v26;
              if (v28)
              {
                v14 = __rbit64(v27);
                *(_DWORD *)(v11 + 32) = v23;
                *(_QWORD *)(v11 + 24) = v15;
                goto LABEL_22;
              }
            }
            *(_DWORD *)(v11 + 32) = v24;
          }
        }
        *(_BYTE *)v11 = 0;
      }
      return bmalloc_allocate_casual(a1, a2);
    }
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x197B60668);
  }
  if (a3 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197B60670);
  }
  if (a2 >= 2)
    goto LABEL_51;
  v6 = (unint64_t)(a1 + 15) >> 4;
  if (v6 == dword_1ECF2C478)
  {
    v7 = dword_1ECF2C470;
    v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v8)
      return bmalloc_allocate_auxiliary_with_alignment_casual(&bmalloc::api::gigacageHeaps, a1, 1);
LABEL_24:
    if (*(_DWORD *)(v8 + 8052) > v7)
    {
      v17 = v8 + 8 * v7;
      v18 = v17 + 8064;
      *(_BYTE *)(v17 + 8064) = 1;
      v19 = *(unsigned int *)(v17 + 8080);
      if ((_DWORD)v19)
      {
        *(_DWORD *)(v18 + 16) = v19 - *(_DWORD *)(v18 + 20);
        result = *(_QWORD *)(v18 + 8) - v19;
        *(_BYTE *)v18 = 0;
        return result;
      }
      v20 = *(_QWORD *)(v18 + 40);
      v21 = *(_QWORD *)(v18 + 24);
      if (v20)
      {
LABEL_28:
        v22 = __clz(v20);
        *(_QWORD *)(v18 + 40) = v20 & ~(0x8000000000000000 >> v22);
        result = v21 + 16 * v22;
        *(_BYTE *)v18 = 0;
        return result;
      }
      if (*(_BYTE *)(v18 + 5) == 6)
      {
        v29 = *(unsigned int *)(v18 + 32);
        v30 = *(_DWORD *)(v18 + 36);
        if (v29 < v30)
        {
          *(_QWORD *)(v18 + 8 * v29 + 56) = 0;
          v31 = (unint64_t *)(8 * v29 + 8 * v7 + v8 + 8128);
          v32 = v30 - 1 - v29;
          while (v32)
          {
            v21 += 1024;
            v34 = *v31++;
            v33 = v34;
            LODWORD(v29) = v29 + 1;
            --v32;
            if (v34)
            {
              v20 = __rbit64(v33);
              *(_DWORD *)(v18 + 32) = v29;
              *(_QWORD *)(v18 + 24) = v21;
              goto LABEL_28;
            }
          }
          *(_DWORD *)(v18 + 32) = v30;
        }
      }
      *(_BYTE *)v18 = 0;
    }
    return bmalloc_allocate_auxiliary_with_alignment_casual(&bmalloc::api::gigacageHeaps, a1, 1);
  }
  if (off_1ECF2C468)
  {
    if (v6 >= *((unsigned int *)off_1ECF2C468 + 9))
    {
      v7 = 0;
      v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v8)
        return bmalloc_allocate_auxiliary_with_alignment_casual(&bmalloc::api::gigacageHeaps, a1, 1);
      goto LABEL_24;
    }
    v9 = *((_QWORD *)off_1ECF2C468 + 1);
    if (v9)
    {
      v7 = *(_DWORD *)(v9 + 4 * v6);
      v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v8)
        return bmalloc_allocate_auxiliary_with_alignment_casual(&bmalloc::api::gigacageHeaps, a1, 1);
      goto LABEL_24;
    }
    v7 = 0;
    v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v8)
      goto LABEL_24;
  }
  return bmalloc_allocate_auxiliary_with_alignment_casual(&bmalloc::api::gigacageHeaps, a1, 1);
}

void bmalloc::api::freeOutOfLine(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v9)
  {
    pas_try_deallocate_slow_no_cache(a1, (uint64_t)&bmalloc_heap_config, 1);
    return;
  }
  if (a1 >> 43
    || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a1 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a1)) & 1) == 0)
  {
    if (a1 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a1 >> 24)
    {
      a4 = 0;
      v11 = a1;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a1 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a1) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
        goto LABEL_4;
      v11 = a1;
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v9, v11, 1, a4, a5, a6, a7, a8);
    return;
  }
LABEL_4:
  v10 = *(unsigned int *)(v9 + 8000);
  if (v10 >= 0x3E7)
  {
    pas_thread_local_cache_append_deallocation_slow(v9, a1, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)(v9 + 8 * v10) = a1 | 0x5000000000000;
    *(_DWORD *)(v9 + 8000) = v10 + 1;
  }
}

void *bmalloc::api::tryLargeZeroedMemalignVirtual(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v9;
  int v10;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  bmalloc::DebugHeap *SlowCase;
  void *auxiliary_with_alignment_casual;
  uint8x8_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;

  v9 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] != 1)
    goto LABEL_92;
  v10 = a4;
  v13 = bmalloc::vmPageSize(void)::cached;
  if (!bmalloc::vmPageSize(void)::cached)
  {
    v13 = sysconf(29);
    if (v13 < 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197B60C3CLL);
    }
    bmalloc::vmPageSize(void)::cached = v13;
  }
  v14 = (v13 - 1 + a1) & -v13;
  if (v14 < a1)
  {
    __break(0xC471u);
    JUMPOUT(0x197B60C24);
  }
  v15 = (v13 - 1 + a2) & -v13;
  if (v15 < a2)
  {
    __break(0xC471u);
    JUMPOUT(0x197B60C2CLL);
  }
  SlowCase = (bmalloc::DebugHeap *)bmalloc::debugHeapCache;
  if (bmalloc::debugHeapCache != 1)
  {
    if (bmalloc::debugHeapCache)
      goto LABEL_14;
    if (bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
    {
      if (*(_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
      {
LABEL_11:
        SlowCase = (bmalloc::DebugHeap *)bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
        if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
          SlowCase = (bmalloc::DebugHeap *)bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
        bmalloc::debugHeapCache = (uint64_t)SlowCase;
        if (!SlowCase)
        {
          __break(0xC471u);
          JUMPOUT(0x197B60C44);
        }
LABEL_14:
        auxiliary_with_alignment_casual = (void *)bmalloc::DebugHeap::memalignLarge(SlowCase, v14, v15);
        if (!auxiliary_with_alignment_casual)
          return auxiliary_with_alignment_casual;
        goto LABEL_80;
      }
    }
    else if (*(_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0))
    {
      goto LABEL_11;
    }
    bmalloc::debugHeapCache = 1;
  }
  if (v10)
  {
    if (v10 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197B60C54);
    }
    if (a3 < 2)
    {
      v24 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
      v24.i16[0] = vaddlv_u8(v24);
      if (v24.u32[0] != 1)
        goto LABEL_79;
      v25 = (v15 + v14 - 1) & -(uint64_t)v14;
      if (v15 < v14)
        v25 = v14;
      if (v14 == 1)
        v25 = v15;
      v26 = (unint64_t)(v25 + 15) >> 4;
      if (v26 == dword_1ECF2C478)
      {
        v27 = dword_1ECF2C470;
        v28 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
        if (!v28)
          goto LABEL_79;
      }
      else
      {
        if (!off_1ECF2C468)
          goto LABEL_79;
        if (v26 >= *((unsigned int *)off_1ECF2C468 + 9))
        {
          v27 = 0;
          v28 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
          if (!v28)
            goto LABEL_79;
        }
        else
        {
          v30 = *((_QWORD *)off_1ECF2C468 + 1);
          if (v30)
          {
            v27 = *(_DWORD *)(v30 + 4 * v26);
            v28 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
            if (!v28)
              goto LABEL_79;
          }
          else
          {
            v27 = 0;
            v28 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
            if (!v28)
              goto LABEL_79;
          }
        }
      }
      if (*(_DWORD *)(v28 + 8052) > v27)
      {
        v34 = v28 + 8 * v27 + 8064;
        if (v14 == 1 || 1 << *(_BYTE *)(v28 + 8 * v27 + 8068) >= v14)
        {
          *(_BYTE *)v34 = 1;
          v35 = *(unsigned int *)(v28 + 8 * v27 + 8080);
          if ((_DWORD)v35)
          {
            *(_DWORD *)(v28 + 8 * v27 + 8080) = v35 - *(_DWORD *)(v28 + 8 * v27 + 8084);
            auxiliary_with_alignment_casual = (void *)(*(_QWORD *)(v28 + 8 * v27 + 8072) - v35);
            *(_BYTE *)v34 = 0;
            if (!auxiliary_with_alignment_casual)
              return auxiliary_with_alignment_casual;
            goto LABEL_80;
          }
          v36 = *(_QWORD *)(v28 + 8 * v27 + 8104);
          v37 = *(_QWORD *)(v28 + 8 * v27 + 8088);
          if (v36)
          {
LABEL_61:
            v38 = __clz(v36);
            *(_QWORD *)(v34 + 40) = v36 & ~(0x8000000000000000 >> v38);
            auxiliary_with_alignment_casual = (void *)(v37 + 16 * v38);
            *(_BYTE *)v34 = 0;
            if (!auxiliary_with_alignment_casual)
              return auxiliary_with_alignment_casual;
            goto LABEL_80;
          }
          if (*(_BYTE *)(v28 + 8 * v27 + 8069) == 6)
          {
            v39 = *(unsigned int *)(v28 + 8 * v27 + 8096);
            v40 = *(_DWORD *)(v28 + 8 * v27 + 8100);
            if (v39 < v40)
            {
              *(_QWORD *)(v34 + 8 * v39 + 56) = 0;
              v41 = (unint64_t *)(8 * v39 + 8 * v27 + v28 + 8128);
              v42 = v40 - 1 - v39;
              while (v42)
              {
                v37 += 1024;
                v44 = *v41++;
                v43 = v44;
                LODWORD(v39) = v39 + 1;
                --v42;
                if (v44)
                {
                  v36 = __rbit64(v43);
                  *(_DWORD *)(v34 + 32) = v39;
                  *(_QWORD *)(v34 + 24) = v37;
                  goto LABEL_61;
                }
              }
              *(_DWORD *)(v34 + 32) = v40;
            }
          }
          *(_BYTE *)v34 = 0;
        }
      }
LABEL_79:
      auxiliary_with_alignment_casual = (void *)bmalloc_try_allocate_auxiliary_with_alignment_casual(&bmalloc::api::gigacageHeaps, v15, v14, a3);
      if (!auxiliary_with_alignment_casual)
        return auxiliary_with_alignment_casual;
      goto LABEL_80;
    }
LABEL_92:
    __break(0xC471u);
    JUMPOUT(0x197B60C1CLL);
  }
  if (a3 >= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197B60C4CLL);
  }
  v18 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
  v18.i16[0] = vaddlv_u8(v18);
  if (v18.u32[0] != 1)
    goto LABEL_30;
  v19 = (v15 + v14 - 1) & -(uint64_t)v14;
  if (v15 < v14)
    v19 = v14;
  if (v14 == 1)
    v19 = v15;
  v20 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v20)
    goto LABEL_30;
  v21 = v19 + 15;
  if (v21 >> 5 > 0x138)
    goto LABEL_30;
  v22 = *((unsigned int *)&bmalloc_common_primitive_heap_support + (v21 >> 4) + 626);
  if (*(_DWORD *)(v20 + 8052) <= v22)
    goto LABEL_30;
  v23 = v20 + 8 * v22 + 8064;
  if (v14 != 1 && 1 << *(_BYTE *)(v20 + 8 * v22 + 8068) < v14)
    goto LABEL_30;
  *(_BYTE *)v23 = 1;
  v29 = *(unsigned int *)(v20 + 8 * v22 + 8080);
  if ((_DWORD)v29)
  {
    *(_DWORD *)(v20 + 8 * v22 + 8080) = v29 - *(_DWORD *)(v20 + 8 * v22 + 8084);
    auxiliary_with_alignment_casual = (void *)(*(_QWORD *)(v20 + 8 * v22 + 8072) - v29);
    *(_BYTE *)v23 = 0;
    if (!auxiliary_with_alignment_casual)
      return auxiliary_with_alignment_casual;
  }
  else
  {
    v31 = *(_QWORD *)(v20 + 8 * v22 + 8104);
    v32 = *(_QWORD *)(v20 + 8 * v22 + 8088);
    if (!v31)
    {
      if (*(_BYTE *)(v20 + 8 * v22 + 8069) == 6)
      {
        v45 = *(unsigned int *)(v20 + 8 * v22 + 8096);
        v46 = *(_DWORD *)(v20 + 8 * v22 + 8100);
        if (v45 < v46)
        {
          *(_QWORD *)(v23 + 8 * v45 + 56) = 0;
          v47 = (unint64_t *)(8 * v45 + 8 * v22 + v20 + 8128);
          v48 = v46 - 1 - v45;
          while (v48)
          {
            v32 += 1024;
            v50 = *v47++;
            v49 = v50;
            LODWORD(v45) = v45 + 1;
            --v48;
            if (v50)
            {
              v31 = __rbit64(v49);
              *(_DWORD *)(v23 + 32) = v45;
              *(_QWORD *)(v23 + 24) = v32;
              goto LABEL_51;
            }
          }
          *(_DWORD *)(v23 + 32) = v46;
        }
      }
      *(_BYTE *)v23 = 0;
LABEL_30:
      auxiliary_with_alignment_casual = bmalloc_try_allocate_with_alignment_impl_casual_case(v15, v14, a3, a4, a5, a6, a7, a8);
      if (!auxiliary_with_alignment_casual)
        return auxiliary_with_alignment_casual;
      goto LABEL_80;
    }
LABEL_51:
    v33 = __clz(v31);
    *(_QWORD *)(v23 + 40) = v31 & ~(0x8000000000000000 >> v33);
    auxiliary_with_alignment_casual = (void *)(v32 + 16 * v33);
    *(_BYTE *)v23 = 0;
    if (!auxiliary_with_alignment_casual)
      return auxiliary_with_alignment_casual;
  }
LABEL_80:
  if (mmap(auxiliary_with_alignment_casual, v15, 3, 4114, 889192448, 0) != auxiliary_with_alignment_casual)
  {
    __break(0xC471u);
    JUMPOUT(0x197B60C34);
  }
  return auxiliary_with_alignment_casual;
}

void bmalloc::api::freeLargeVirtual(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *SlowCase;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  SlowCase = (_QWORD *)bmalloc::debugHeapCache;
  if (bmalloc::debugHeapCache == 1)
  {
LABEL_11:
    v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v10)
    {
      pas_try_deallocate_slow_no_cache(a1, (uint64_t)&bmalloc_heap_config, 1);
      return;
    }
    if (!(a1 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a1 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a1)) & 1) != 0)
    {
      goto LABEL_14;
    }
    if (a1 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a1 >> 24)
    {
      a4 = 0;
      v12 = a1;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a1 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a1) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
      {
LABEL_14:
        v11 = *(unsigned int *)(v10 + 8000);
        if (v11 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v10, a1, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v10 + 8 * v11) = a1 | 0x5000000000000;
          *(_DWORD *)(v10 + 8000) = v11 + 1;
        }
        return;
      }
      v12 = a1;
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v10, v12, 1, a4, a5, a6, a7, a8);
    return;
  }
  if (bmalloc::debugHeapCache)
  {
LABEL_8:
    bmalloc::DebugHeap::freeLarge(SlowCase, (void *)a1);
    return;
  }
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
    if (*(_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0))
      goto LABEL_5;
    goto LABEL_10;
  }
  if (!*(_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
LABEL_10:
    bmalloc::debugHeapCache = 1;
    goto LABEL_11;
  }
LABEL_5:
  SlowCase = (_QWORD *)bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
    SlowCase = (_QWORD *)bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
  bmalloc::debugHeapCache = (uint64_t)SlowCase;
  if (SlowCase)
    goto LABEL_8;
  __break(0xC471u);
}

void bmalloc::api::scavengeThisThread(bmalloc::api *this, uint64_t a2, os_unfair_lock_s *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t StatusReg;
  uint64_t v9;
  os_unfair_lock_s *v10;
  unsigned int v11;
  os_unfair_lock_s *v13;
  int v14;
  unsigned int v15;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = *(_QWORD *)(StatusReg + 752);
  if (v9)
  {
    v10 = (os_unfair_lock_s *)(*(_QWORD *)(v9 + 8016) + 20);
    v11 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&v10->_os_unfair_lock_opaque))
    {
      if (!__stxr(v11, &v10->_os_unfair_lock_opaque))
        goto LABEL_8;
    }
    __clrex();
    os_unfair_lock_lock(v10);
LABEL_8:
    flush_deallocation_log_for_scavenger(v9, a2, a3, a4, a5, a6, a7, a8);
    *(_DWORD *)(v9 + 8000) = 0;
    *(_QWORD *)(v9 + 8008) = 0;
    *(_BYTE *)(v9 + 8004) = 1;
    v13 = (os_unfair_lock_s *)(*(_QWORD *)(v9 + 8016) + 20);
    v14 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v15 = __ldxr(&v13->_os_unfair_lock_opaque);
      if (v15 != v14)
        break;
      if (!__stlxr(0, &v13->_os_unfair_lock_opaque))
        goto LABEL_13;
    }
    __clrex();
    os_unfair_lock_unlock(v13);
LABEL_13:
    pas_scavenger_notify_eligibility_if_needed();
    pas_thread_local_cache_stop_local_allocators(v9, 0);
    pas_scavenger_notify_eligibility_if_needed();
  }
}

malloc_zone_t **bmalloc::api::scavenge(bmalloc::api *this, uint64_t a2, os_unfair_lock_s *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t StatusReg;
  uint64_t v16;
  os_unfair_lock_s *v17;
  unsigned int v18;
  os_unfair_lock_s *v20;
  int v21;
  unsigned int v22;
  malloc_zone_t **result;

  pas_scavenger_run_synchronously_now((uint64_t)this, a2, a3, a4, a5, a6, a7, a8);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v16 = *(_QWORD *)(StatusReg + 752);
  if (v16)
  {
    v17 = (os_unfair_lock_s *)(*(_QWORD *)(v16 + 8016) + 20);
    v18 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&v17->_os_unfair_lock_opaque))
    {
      if (!__stxr(v18, &v17->_os_unfair_lock_opaque))
        goto LABEL_7;
    }
    __clrex();
    os_unfair_lock_lock(v17);
LABEL_7:
    flush_deallocation_log_for_scavenger(v16, v8, v9, v10, v11, v12, v13, v14);
    *(_DWORD *)(v16 + 8000) = 0;
    *(_QWORD *)(v16 + 8008) = 0;
    *(_BYTE *)(v16 + 8004) = 1;
    v20 = (os_unfair_lock_s *)(*(_QWORD *)(v16 + 8016) + 20);
    v21 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v22 = __ldxr(&v20->_os_unfair_lock_opaque);
      if (v22 != v21)
        break;
      if (!__stlxr(0, &v20->_os_unfair_lock_opaque))
        goto LABEL_12;
    }
    __clrex();
    os_unfair_lock_unlock(v20);
LABEL_12:
    pas_scavenger_notify_eligibility_if_needed();
    pas_thread_local_cache_stop_local_allocators(v16, 0);
    pas_scavenger_notify_eligibility_if_needed();
  }
  result = (malloc_zone_t **)bmalloc::debugHeapCache;
  if (bmalloc::debugHeapCache == 1)
    return result;
  if (bmalloc::debugHeapCache)
    return (malloc_zone_t **)malloc_zone_pressure_relief(*result, 0);
  result = (malloc_zone_t **)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object;
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
    result = (malloc_zone_t **)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0);
    if (*(_BYTE *)result)
      goto LABEL_17;
LABEL_22:
    bmalloc::debugHeapCache = 1;
    return result;
  }
  if (!*(_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
    goto LABEL_22;
LABEL_17:
  result = (malloc_zone_t **)bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
    result = (malloc_zone_t **)bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
  bmalloc::debugHeapCache = (uint64_t)result;
  if (result)
    return (malloc_zone_t **)malloc_zone_pressure_relief(*result, 0);
  __break(0xC471u);
  return result;
}

BOOL bmalloc::api::isEnabled()
{
  if (bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
    return *(_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object == 0;
  else
    return *(_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0) == 0;
}

uint64_t bmalloc::api::setScavengerThreadQOSClass(uint64_t this, qos_class_t a2)
{
  atomic_store(this, &pas_scavenger_requested_qos_class);
  return this;
}

int *bmalloc::api::decommitAlignedPhysical(void *a1, size_t a2)
{
  int *result;

  do
  {
    result = (int *)madvise(a1, a2, 7);
    if ((_DWORD)result != -1)
      break;
    result = __error();
  }
  while (*result == 35);
  return result;
}

double bmalloc::api::enableMiniMode(bmalloc::api *this)
{
  char *v1;
  const char *v2;
  int v3;
  int v4;
  double result;

  v1 = getenv("XPC_SERVICE_NAME");
  if (!v1
    || (v2 = v1, v3 = strncmp(v1, "application.", 0xCuLL), v4 = strncmp(v2, "com.apple.WebKit.", 0x11uLL), v3) && v4)
  {
    pas_scavenger_period_in_milliseconds = 0x4014000000000000;
    pas_scavenger_max_epoch_delta = 5000000;
    pas_physical_page_sharing_pool_balancing_enabled = 1;
    pas_physical_page_sharing_pool_balancing_enabled_for_utility = 1;
    result = NAN;
    qword_1ECF325B8 = 0xFFFFFFFF00000000;
    qword_1ECF325E0 = 0xFFFFFFFF00000000;
  }
  return result;
}

uint64_t bmalloc::api::disableScavenger(bmalloc::api *this)
{
  unint64_t v1;

  v1 = ensure_data_instance();
  pthread_mutex_lock((pthread_mutex_t *)v1);
  ++pas_scavenger_should_suspend_count;
  while (pas_scavenger_current_state)
    pthread_cond_wait((pthread_cond_t *)(v1 + 64), (pthread_mutex_t *)v1);
  return pthread_mutex_unlock((pthread_mutex_t *)v1);
}

void bmalloc::api::forceEnablePGM(bmalloc::api *this)
{
  pas_probabilistic_guard_malloc_is_initialized = 1;
  pas_probabilistic_guard_malloc_can_use = 1;
  pas_probabilistic_guard_malloc_random = 1;
  pas_probabilistic_guard_malloc_counter = 0;
}

unint64_t bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(bmalloc::Environment *a1)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  uint64_t v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  char *v8;
  unint64_t result;
  int v11;

  do
    v1 = __ldaxr(bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_mutex);
  while (__stxr(1u, bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_mutex));
  if ((v1 & 1) == 0)
    goto LABEL_15;
  do
    v2 = __ldaxr(&bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_mutex[1]);
  while (__stlxr(1u, &bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_mutex[1]));
  if ((v2 & 1) != 0)
  {
    do
LABEL_10:
      v5 = __ldaxr(bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_mutex);
    while (__stxr(1u, bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_mutex));
    if ((v5 & 1) != 0)
    {
      do
      {
        a1 = (bmalloc::Environment *)MEMORY[0x19AEBBF94](0, 1, 1);
        do
          v6 = __ldaxr(bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_mutex);
        while (__stxr(1u, bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_mutex));
      }
      while ((v6 & 1) != 0);
    }
LABEL_15:
    if (atomic_load((unint64_t *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object))
      goto LABEL_20;
    goto LABEL_16;
  }
  v3 = 0;
  while (1)
  {
    do
      v4 = __ldaxr(bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_mutex);
    while (__stxr(1u, bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_mutex));
    if ((v4 & 1) == 0)
      break;
    if (++v3 == 256)
    {
      atomic_store(0, &bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_mutex[1]);
      goto LABEL_10;
    }
  }
  atomic_store(0, &bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_mutex[1]);
  if (!atomic_load((unint64_t *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object))
  {
LABEL_16:
    bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_memory = bmalloc::Environment::computeIsDebugHeapEnabled(a1);
    v8 = getenv("WebKitPasStatusReporter");
    if (v8)
    {
      v11 = 0;
      if (sscanf(v8, "%u", &v11) == 1)
        pas_status_reporter_enabled = v11;
    }
    atomic_store((unint64_t)&bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_memory, (unint64_t *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object);
  }
LABEL_20:
  result = atomic_load((unint64_t *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object);
  atomic_store(0, bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_mutex);
  return result;
}

uint64_t bmalloc::ARC4RandomNumberGenerator::randomValues(uint64_t this, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  int v12;
  unsigned __int8 v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned __int8 v17;
  uint64_t v18;
  char v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  uint64_t v23;
  char v24;
  unsigned __int8 v25;
  char v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  char v34;
  _BYTE bytes[128];
  uint64_t v36;

  v5 = this;
  v36 = *MEMORY[0x1E0C80C00];
  do
    v6 = __ldaxr((unsigned __int8 *)&_MergedGlobals_21);
  while (__stxr(1u, (unsigned __int8 *)&_MergedGlobals_21));
  if ((v6 & 1) != 0)
  {
    do
      v7 = __ldaxr(byte_1ECF583C1);
    while (__stlxr(1u, byte_1ECF583C1));
    if ((v7 & 1) == 0)
    {
      v8 = 0;
      while (1)
      {
        do
          v9 = __ldaxr((unsigned __int8 *)&_MergedGlobals_21);
        while (__stxr(1u, (unsigned __int8 *)&_MergedGlobals_21));
        if ((v9 & 1) == 0)
          break;
        if (++v8 == 256)
        {
          atomic_store(0, byte_1ECF583C1);
          goto LABEL_11;
        }
      }
      atomic_store(0, byte_1ECF583C1);
      if (*(int *)(this + 260) <= 0)
        goto LABEL_20;
LABEL_17:
      if (a3)
        goto LABEL_29;
      goto LABEL_36;
    }
    do
LABEL_11:
      v10 = __ldaxr((unsigned __int8 *)&_MergedGlobals_21);
    while (__stxr(1u, (unsigned __int8 *)&_MergedGlobals_21));
    if ((v10 & 1) != 0)
    {
      do
      {
        this = MEMORY[0x19AEBBF94](0, 1, 1);
        do
          v11 = __ldaxr((unsigned __int8 *)&_MergedGlobals_21);
        while (__stxr(1u, (unsigned __int8 *)&_MergedGlobals_21));
      }
      while ((v11 & 1) != 0);
    }
  }
  if (*(int *)(v5 + 260) > 0)
    goto LABEL_17;
LABEL_20:
  this = CCRandomGenerateBytes(bytes, 0x80uLL);
  if ((_DWORD)this)
  {
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x197B618FCLL);
  }
  v12 = 0;
  v13 = *(_BYTE *)v5 - 1;
  v14 = *(unsigned __int8 *)(v5 + 1);
  do
  {
    ++v13;
    v15 = v5 + 2;
    v16 = *(unsigned __int8 *)(v5 + 2 + v13);
    v14 += v16 + bytes[v12 & 0x7F];
    *(_BYTE *)(v15 + v13) = *(_BYTE *)(v5 + 2 + v14);
    *(_BYTE *)(v15 + v14) = v16;
    ++v12;
  }
  while (v12 != 256);
  v17 = v13;
  do
  {
    ++v17;
    v18 = v5 + 2;
    v19 = *(_BYTE *)(v5 + 2 + v17);
    v13 += v19;
    *(_BYTE *)(v18 + v17) = *(_BYTE *)(v5 + 2 + v13);
    *(_BYTE *)(v18 + v13) = v19;
    --v12;
  }
  while (v12);
  *(_BYTE *)v5 = v17;
  *(_BYTE *)(v5 + 1) = v13;
  for (*(_DWORD *)(v5 + 260) = 1600000; a3; a2[a3] = *(_BYTE *)(v5 + 2 + (v26 + v24)))
  {
LABEL_29:
    v27 = *(_DWORD *)(v5 + 260);
    *(_DWORD *)(v5 + 260) = v27 - 1;
    if (v27 >= 2)
    {
      v20 = *(_BYTE *)v5;
      v21 = *(_BYTE *)(v5 + 1);
    }
    else
    {
      this = CCRandomGenerateBytes(bytes, 0x80uLL);
      if ((_DWORD)this)
        goto LABEL_37;
      v28 = 0;
      v21 = *(_BYTE *)v5 - 1;
      v29 = *(unsigned __int8 *)(v5 + 1);
      do
      {
        ++v21;
        v30 = v5 + 2;
        v31 = *(unsigned __int8 *)(v5 + 2 + v21);
        v29 += v31 + bytes[v28 & 0x7F];
        *(_BYTE *)(v30 + v21) = *(_BYTE *)(v5 + 2 + v29);
        *(_BYTE *)(v30 + v29) = v31;
        ++v28;
      }
      while (v28 != 256);
      v32 = 256;
      v20 = v21;
      do
      {
        ++v20;
        v33 = v5 + 2;
        v34 = *(_BYTE *)(v5 + 2 + v20);
        v21 += v34;
        *(_BYTE *)(v33 + v20) = *(_BYTE *)(v5 + 2 + v21);
        *(_BYTE *)(v33 + v21) = v34;
        --v32;
      }
      while (v32);
      *(_DWORD *)(v5 + 260) = 1600000;
    }
    v22 = v20 + 1;
    *(_BYTE *)v5 = v22;
    v23 = v5 + 2;
    v24 = *(_BYTE *)(v5 + 2 + v22);
    v25 = v24 + v21;
    v26 = *(_BYTE *)(v5 + 2 + v25);
    *(_BYTE *)(v5 + 1) = v25;
    *(_BYTE *)(v23 + v22) = v26;
    *(_BYTE *)(v23 + v25) = v24;
    --a3;
  }
LABEL_36:
  atomic_store(0, (unsigned __int8 *)&_MergedGlobals_21);
  return this;
}

uint64_t bmalloc::cryptoRandom(bmalloc *this, uint64_t a2)
{
  unint64_t SlowCase;

  SlowCase = bmalloc::StaticPerProcessStorageTraits<bmalloc::ARC4RandomNumberGenerator>::Storage::s_object;
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::ARC4RandomNumberGenerator>::Storage::s_object)
    SlowCase = bmalloc::StaticPerProcess<bmalloc::ARC4RandomNumberGenerator>::getSlowCase();
  return bmalloc::ARC4RandomNumberGenerator::randomValues(SlowCase, this, a2);
}

unint64_t bmalloc::StaticPerProcess<bmalloc::ARC4RandomNumberGenerator>::getSlowCase()
{
  unsigned __int8 v0;
  unsigned __int8 v1;
  uint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unint64_t result;

  do
    v0 = __ldaxr((unsigned __int8 *)&_MergedGlobals_21);
  while (__stxr(1u, (unsigned __int8 *)&_MergedGlobals_21));
  if ((v0 & 1) != 0)
  {
    do
      v1 = __ldaxr(byte_1ECF583C1);
    while (__stlxr(1u, byte_1ECF583C1));
    if ((v1 & 1) == 0)
    {
      v2 = 0;
      while (1)
      {
        do
          v3 = __ldaxr((unsigned __int8 *)&_MergedGlobals_21);
        while (__stxr(1u, (unsigned __int8 *)&_MergedGlobals_21));
        if ((v3 & 1) == 0)
          break;
        if (++v2 == 256)
        {
          atomic_store(0, byte_1ECF583C1);
          goto LABEL_10;
        }
      }
      atomic_store(0, byte_1ECF583C1);
      if (!atomic_load((unint64_t *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::ARC4RandomNumberGenerator>::Storage::s_object))
        goto LABEL_18;
LABEL_16:
      result = atomic_load((unint64_t *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::ARC4RandomNumberGenerator>::Storage::s_object);
      atomic_store(0, (unsigned __int8 *)&_MergedGlobals_21);
      return result;
    }
    do
LABEL_10:
      v4 = __ldaxr((unsigned __int8 *)&_MergedGlobals_21);
    while (__stxr(1u, (unsigned __int8 *)&_MergedGlobals_21));
    if ((v4 & 1) != 0)
    {
      do
      {
        MEMORY[0x19AEBBF94](0, 1, 1);
        do
          v5 = __ldaxr((unsigned __int8 *)&_MergedGlobals_21);
        while (__stxr(1u, (unsigned __int8 *)&_MergedGlobals_21));
      }
      while ((v5 & 1) != 0);
    }
  }
  if (atomic_load((unint64_t *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::ARC4RandomNumberGenerator>::Storage::s_object))
    goto LABEL_16;
LABEL_18:
  unk_1ECF583C6 = xmmword_19911D0A0;
  unk_1ECF583D6 = xmmword_19911D0B0;
  unk_1ECF583E6 = xmmword_19911D0C0;
  unk_1ECF583F6 = xmmword_19911D0D0;
  unk_1ECF58406 = xmmword_19911D0E0;
  unk_1ECF58416 = xmmword_19911D0F0;
  unk_1ECF58426 = xmmword_19911D100;
  unk_1ECF58436 = xmmword_19911D110;
  unk_1ECF58446 = xmmword_19911D120;
  unk_1ECF58456 = xmmword_19911D130;
  unk_1ECF58466 = xmmword_19911D140;
  unk_1ECF58476 = xmmword_19911D150;
  unk_1ECF58486 = xmmword_19911D160;
  unk_1ECF58496 = xmmword_19911D170;
  unk_1ECF584A6 = xmmword_19911D180;
  unk_1ECF584B6 = xmmword_19911D190;
  word_1ECF583C4 = 0;
  dword_1ECF584C8 = 0;
  atomic_store((unint64_t)&word_1ECF583C4, (unint64_t *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::ARC4RandomNumberGenerator>::Storage::s_object);
  result = atomic_load((unint64_t *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::ARC4RandomNumberGenerator>::Storage::s_object);
  atomic_store(0, (unsigned __int8 *)&_MergedGlobals_21);
  return result;
}

uint64_t bmalloc::DebugHeap::memalignLarge(bmalloc::DebugHeap *this, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t *v24;

  result = 0;
  v5 = *((_QWORD *)this + 1);
  v6 = v5 - 1;
  v7 = v5 - 1 + a2;
  v8 = -v5;
  v9 = v7 & v8;
  v10 = v6 + a3;
  v11 = v10 & v8;
  v12 = (v10 & v8) + (v7 & v8);
  if (!__CFADD__(v10 & v8, v7 & v8) && v12 >= v11)
  {
    v13 = (char *)mmap(0, (v10 & v8) + (v7 & v8), 3, 4098, 889192448, 0);
    result = 0;
    if ((unint64_t)(v13 + 1) >= 2)
    {
      v14 = &v13[v12];
      v15 = (unint64_t)&v13[v9 - 1] & -v9;
      v16 = (char *)(v15 + v11);
      if (v15 + v11 > (unint64_t)v14)
      {
        __break(0xC471u);
      }
      else
      {
        if (v13 != (char *)v15)
          munmap(v13, v15 - (_QWORD)v13);
        if (v14 != v16)
          munmap((void *)(v15 + v11), v14 - v16);
        v23 = v15;
        if (v15)
        {
          do
            v17 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex);
          while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex));
          if ((v17 & 1) != 0)
          {
            do
              v18 = __ldaxr(byte_1ECF50029);
            while (__stlxr(1u, byte_1ECF50029));
            if ((v18 & 1) != 0)
            {
              do
LABEL_20:
                v21 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex);
              while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex));
              if ((v21 & 1) != 0)
              {
                do
                {
                  MEMORY[0x19AEBBF94](0, 1, 1);
                  do
                    v22 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex);
                  while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex));
                }
                while ((v22 & 1) != 0);
              }
            }
            else
            {
              v19 = 0;
              while (1)
              {
                do
                  v20 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex);
                while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex));
                if ((v20 & 1) == 0)
                  break;
                if (++v19 == 256)
                {
                  atomic_store(0, byte_1ECF50029);
                  goto LABEL_20;
                }
              }
              atomic_store(0, byte_1ECF50029);
            }
          }
          v24 = &v23;
          std::__hash_table<std::__hash_value_type<void *,unsigned long>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,unsigned long>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,unsigned long>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>((float *)this + 4, &v23, (uint64_t)&std::piecewise_construct, &v24)[3] = v11;
          atomic_store(0, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex);
          return v23;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

_QWORD *bmalloc::DebugHeap::freeLarge(_QWORD *this, void *a2)
{
  _QWORD *v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  _QWORD *v9;
  size_t v10;
  void *v11;
  void *v12;
  void *__p[3];

  v12 = a2;
  if (a2)
  {
    v2 = this;
    do
      v3 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex);
    while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex));
    if ((v3 & 1) != 0)
    {
      do
        v4 = __ldaxr(byte_1ECF50029);
      while (__stlxr(1u, byte_1ECF50029));
      if ((v4 & 1) != 0)
      {
        do
LABEL_12:
          v7 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex);
        while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex));
        if ((v7 & 1) != 0)
        {
          do
          {
            MEMORY[0x19AEBBF94](0, 1, 1);
            do
              v8 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex);
            while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex));
          }
          while ((v8 & 1) != 0);
        }
      }
      else
      {
        v5 = 0;
        while (1)
        {
          do
            v6 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex);
          while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex));
          if ((v6 & 1) == 0)
            break;
          if (++v5 == 256)
          {
            atomic_store(0, byte_1ECF50029);
            goto LABEL_12;
          }
        }
        atomic_store(0, byte_1ECF50029);
      }
    }
    v9 = v2 + 2;
    __p[0] = &v12;
    v10 = std::__hash_table<std::__hash_value_type<void *,unsigned long>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,unsigned long>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,unsigned long>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>((float *)v2 + 4, (uint64_t *)&v12, (uint64_t)&std::piecewise_construct, (_QWORD **)__p)[3];
    this = std::__hash_table<std::__hash_value_type<void *,unsigned long>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,unsigned long>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,unsigned long>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,unsigned long>>>::find<void *>(v9, (uint64_t *)&v12);
    if (this)
    {
      std::__hash_table<std::__hash_value_type<void *,unsigned long>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,unsigned long>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,unsigned long>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,unsigned long>>>::remove(v9, this, (uint64_t)__p);
      v11 = __p[0];
      __p[0] = 0;
      if (v11)
        operator delete(v11);
      atomic_store(0, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex);
      return (_QWORD *)munmap(v12, v10);
    }
    else
    {
      __break(0xC471u);
    }
  }
  return this;
}

BOOL pas_debug_heap_is_enabled(int a1)
{
  _BOOL8 result;
  uint64_t v3;
  _BYTE *SlowCase;

  result = 0;
  if (a1 != 1 && a1 != 3)
  {
    if (a1 != 2)
      goto LABEL_17;
    v3 = bmalloc::debugHeapCache;
    if (bmalloc::debugHeapCache == 1)
    {
      v3 = 0;
    }
    else if (!bmalloc::debugHeapCache)
    {
      SlowCase = (_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object;
      if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
        SlowCase = (_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0);
      if (*SlowCase)
      {
        v3 = bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
        if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
          v3 = bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
        bmalloc::debugHeapCache = v3;
        if (!v3)
        {
LABEL_17:
          __break(0xC471u);
          JUMPOUT(0x197B61EC4);
        }
      }
      else
      {
        v3 = 0;
        bmalloc::debugHeapCache = 1;
      }
    }
    return v3 != 0;
  }
  return result;
}

void *pas_debug_heap_malloc(size_t size)
{
  malloc_zone_t **v2;
  _BYTE *SlowCase;

  v2 = (malloc_zone_t **)bmalloc::debugHeapCache;
  if (bmalloc::debugHeapCache)
  {
    if (bmalloc::debugHeapCache == 1)
      goto LABEL_12;
  }
  else
  {
    SlowCase = (_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object;
    if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
      SlowCase = (_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0);
    if (!*SlowCase)
    {
      bmalloc::debugHeapCache = 1;
      __break(0xC471u);
      JUMPOUT(0x197B61F80);
    }
    v2 = (malloc_zone_t **)bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
    if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
      v2 = (malloc_zone_t **)bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
    bmalloc::debugHeapCache = (uint64_t)v2;
    if (!v2)
    {
LABEL_12:
      __break(0xC471u);
      JUMPOUT(0x197B61F4CLL);
    }
  }
  return malloc_type_zone_malloc(*v2, size, 0x107A63CuLL);
}

void *pas_debug_heap_memalign(size_t alignment, size_t size)
{
  malloc_zone_t **v4;
  _BYTE *SlowCase;

  v4 = (malloc_zone_t **)bmalloc::debugHeapCache;
  if (bmalloc::debugHeapCache)
  {
    if (bmalloc::debugHeapCache == 1)
      goto LABEL_12;
  }
  else
  {
    SlowCase = (_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object;
    if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
      SlowCase = (_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0);
    if (!*SlowCase)
    {
      bmalloc::debugHeapCache = 1;
      __break(0xC471u);
      JUMPOUT(0x197B62024);
    }
    v4 = (malloc_zone_t **)bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
    if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
      v4 = (malloc_zone_t **)bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
    bmalloc::debugHeapCache = (uint64_t)v4;
    if (!v4)
    {
LABEL_12:
      __break(0xC471u);
      JUMPOUT(0x197B61FE8);
    }
  }
  return malloc_type_zone_memalign(*v4, alignment, size, 0x52BEF45BuLL);
}

void *pas_debug_heap_realloc(void *ptr, size_t size)
{
  malloc_zone_t **v4;
  _BYTE *SlowCase;

  v4 = (malloc_zone_t **)bmalloc::debugHeapCache;
  if (bmalloc::debugHeapCache)
  {
    if (bmalloc::debugHeapCache == 1)
      goto LABEL_12;
  }
  else
  {
    SlowCase = (_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object;
    if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
      SlowCase = (_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0);
    if (!*SlowCase)
    {
      bmalloc::debugHeapCache = 1;
      __break(0xC471u);
      JUMPOUT(0x197B620C8);
    }
    v4 = (malloc_zone_t **)bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
    if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
      v4 = (malloc_zone_t **)bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
    bmalloc::debugHeapCache = (uint64_t)v4;
    if (!v4)
    {
LABEL_12:
      __break(0xC471u);
      JUMPOUT(0x197B6208CLL);
    }
  }
  return malloc_type_zone_realloc(*v4, ptr, size, 0x3174BF3DuLL);
}

void pas_debug_heap_free(void *ptr)
{
  malloc_zone_t **v2;
  _BYTE *SlowCase;

  v2 = (malloc_zone_t **)bmalloc::debugHeapCache;
  if (bmalloc::debugHeapCache)
  {
    if (bmalloc::debugHeapCache == 1)
      goto LABEL_12;
  }
  else
  {
    SlowCase = (_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object;
    if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
      SlowCase = (_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0);
    if (!*SlowCase)
    {
      bmalloc::debugHeapCache = 1;
      __break(0xC471u);
      JUMPOUT(0x197B62154);
    }
    v2 = (malloc_zone_t **)bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
    if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
      v2 = (malloc_zone_t **)bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
    bmalloc::debugHeapCache = (uint64_t)v2;
    if (!v2)
    {
LABEL_12:
      __break(0xC471u);
      JUMPOUT(0x197B62128);
    }
  }
  malloc_zone_free(*v2, ptr);
}

_QWORD *std::__hash_table<std::__hash_value_type<void *,unsigned long>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,unsigned long>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,unsigned long>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>(float *a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  float v19;
  float v20;
  _QWORD *v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  size_t v32;
  size_t v33;
  size_t v34;
  _QWORD *i;
  size_t v36;
  uint64_t v37;
  size_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  size_t v44;
  size_t v45;
  _QWORD *v46;
  unint64_t v47;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *((_QWORD *)a1 + 1);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v18 = operator new(0x20uLL);
  *v18 = 0;
  v18[1] = v10;
  v18[2] = **a4;
  v18[3] = 0;
  v19 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v20 = a1[8];
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *((_QWORD *)a1 + 1);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v38 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v11 < 3 || (v39 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v45 = std::__next_prime(v38);
        if (prime <= v45)
          prime = v45;
        if (prime >= v11)
        {
LABEL_60:
          v11 = *((_QWORD *)a1 + 1);
          v41 = v11 - 1;
          if ((v11 & (v11 - 1)) == 0)
            goto LABEL_87;
          goto LABEL_74;
        }
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
        if (prime <= v38)
          prime = v38;
        if (prime >= v11)
          goto LABEL_60;
      }
      if (prime)
      {
LABEL_37:
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v27 = operator new(8 * prime);
        v28 = *(_QWORD **)a1;
        *(_QWORD *)a1 = v27;
        if (v28)
          operator delete(v28);
        v29 = 0;
        *((_QWORD *)a1 + 1) = prime;
        do
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v29++) = 0;
        while (prime != v29);
        v31 = (uint64_t *)(a1 + 4);
        v30 = (_QWORD *)*((_QWORD *)a1 + 2);
        if (!v30)
          goto LABEL_73;
        v32 = v30[1];
        v33 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v34 = v32 & v33;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v31;
          for (i = (_QWORD *)*v30; *v30; i = (_QWORD *)*v30)
          {
            v36 = i[1] & v33;
            if (v36 == v34)
            {
              v30 = i;
            }
            else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
            {
              *v30 = *i;
              v37 = 8 * v36;
              *i = **(_QWORD **)(*(_QWORD *)a1 + v37);
              **(_QWORD **)(*(_QWORD *)a1 + v37) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v30;
              v30 = i;
              v34 = v36;
            }
          }
          goto LABEL_73;
        }
        if (v32 >= prime)
          v32 %= prime;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v31;
        v42 = (_QWORD *)*v30;
        if (!*v30)
        {
LABEL_73:
          v11 = prime;
          v41 = prime - 1;
          if ((prime & (prime - 1)) != 0)
            goto LABEL_74;
LABEL_87:
          v4 = v41 & v10;
          v21 = *(_QWORD **)a1;
          v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v10));
          if (v22)
            goto LABEL_26;
          goto LABEL_88;
        }
        while (1)
        {
          v44 = v42[1];
          if (v44 >= prime)
            v44 %= prime;
          if (v44 == v32)
            goto LABEL_67;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v44))
          {
            *v30 = *v42;
            v43 = 8 * v44;
            *v42 = **(_QWORD **)(*(_QWORD *)a1 + v43);
            **(_QWORD **)(*(_QWORD *)a1 + v43) = v42;
            v42 = v30;
LABEL_67:
            v30 = v42;
            v42 = (_QWORD *)*v42;
            if (!v42)
              goto LABEL_73;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = v30;
            v30 = v42;
            v42 = (_QWORD *)*v42;
            v32 = v44;
            if (!v42)
              goto LABEL_73;
          }
        }
      }
      v46 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v46)
        operator delete(v46);
      v11 = 0;
      *((_QWORD *)a1 + 1) = 0;
    }
    v41 = v11 - 1;
    if ((v11 & (v11 - 1)) == 0)
      goto LABEL_87;
LABEL_74:
    if (v10 >= v11)
    {
      v4 = v10 % v11;
      v21 = *(_QWORD **)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
      if (v22)
        goto LABEL_26;
    }
    else
    {
      v4 = v10;
      v21 = *(_QWORD **)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
      if (v22)
        goto LABEL_26;
    }
    goto LABEL_88;
  }
  v21 = *(_QWORD **)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
LABEL_26:
    *v18 = *v22;
LABEL_94:
    *v22 = v18;
    goto LABEL_95;
  }
LABEL_88:
  *v18 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v18;
  v21[v4] = a1 + 4;
  if (*v18)
  {
    v47 = *(_QWORD *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v47 >= v11)
        v47 %= v11;
    }
    else
    {
      v47 &= v11 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v47);
    goto LABEL_94;
  }
LABEL_95:
  ++*((_QWORD *)a1 + 3);
  return v18;
}

void std::__throw_bad_array_new_length[abi:sn180100]()
{
  abort();
}

_QWORD *std::__hash_table<std::__hash_value_type<void *,unsigned long>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,unsigned long>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,unsigned long>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,unsigned long>>>::find<void *>(_QWORD *a1, uint64_t *a2)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = HIDWORD(*a2);
  v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v4);
  v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v6;
    if (v6 >= *(_QWORD *)&v2)
      v8 = v6 % *(_QWORD *)&v2;
  }
  else
  {
    v8 = v6 & (*(_QWORD *)&v2 - 1);
  }
  v9 = *(_QWORD **)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  result = (_QWORD *)*v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      v11 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v13 = result[1];
        if (v13 == v6)
        {
          if (result[2] == v3)
            return result;
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v12 = result[1];
      if (v12 == v6)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v2)
          v12 %= *(_QWORD *)&v2;
        if (v12 != v8)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<void *,unsigned long>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,unsigned long>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,unsigned long>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,unsigned long>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase()
{
  unsigned __int8 v0;
  unsigned __int8 v1;
  uint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  uint64_t result;
  char *v9;

  do
    v0 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex);
  while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex));
  if ((v0 & 1) == 0)
    goto LABEL_15;
  do
    v1 = __ldaxr(byte_1ECF50029);
  while (__stlxr(1u, byte_1ECF50029));
  if ((v1 & 1) != 0)
  {
    do
LABEL_10:
      v4 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex);
    while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex));
    if ((v4 & 1) != 0)
    {
      do
      {
        MEMORY[0x19AEBBF94](0, 1, 1);
        do
          v5 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex);
        while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex));
      }
      while ((v5 & 1) != 0);
    }
LABEL_15:
    if (!atomic_load((unint64_t *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object))
      goto LABEL_18;
LABEL_16:
    result = atomic_load((unint64_t *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object);
    atomic_store(0, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex);
    return result;
  }
  v2 = 0;
  while (1)
  {
    do
      v3 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex);
    while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex));
    if ((v3 & 1) == 0)
      break;
    if (++v2 == 256)
    {
      atomic_store(0, byte_1ECF50029);
      goto LABEL_10;
    }
  }
  atomic_store(0, byte_1ECF50029);
  if (atomic_load((unint64_t *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object))
    goto LABEL_16;
LABEL_18:
  bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_memory = (uint64_t)malloc_default_zone();
  result = bmalloc::vmPageSize(void)::cached;
  if (!bmalloc::vmPageSize(void)::cached)
  {
    result = sysconf(29);
    if (result < 0)
    {
      __break(0xC471u);
      return result;
    }
    bmalloc::vmPageSize(void)::cached = result;
  }
  qword_1ECF50038 = result;
  unk_1ECF50040 = 0u;
  unk_1ECF50050 = 0u;
  dword_1ECF50060 = 1065353216;
  if (!getenv("DEBUG_HEAP_USE_DEFAULT_ZONE"))
  {
    v9 = getenv("MallocStackLogging");
    if (!v9 || strcmp(v9, "lite"))
    {
      bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_memory = (uint64_t)malloc_create_zone(0, 0);
      malloc_set_zone_name((malloc_zone_t *)bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_memory, "WebKit Using System Malloc");
    }
  }
  atomic_store((unint64_t)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_memory, (unint64_t *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object);
  result = atomic_load((unint64_t *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object);
  atomic_store(0, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_mutex);
  return result;
}

bmalloc::Environment *bmalloc::Environment::Environment(bmalloc::Environment *a1)
{
  char *v2;
  int v4;

  *(_BYTE *)a1 = bmalloc::Environment::computeIsDebugHeapEnabled(a1);
  v2 = getenv("WebKitPasStatusReporter");
  if (v2)
  {
    v4 = 0;
    if (sscanf(v2, "%u", &v4) == 1)
      pas_status_reporter_enabled = v4;
  }
  return a1;
}

{
  char *v2;
  int v4;

  *(_BYTE *)a1 = bmalloc::Environment::computeIsDebugHeapEnabled(a1);
  v2 = getenv("WebKitPasStatusReporter");
  if (v2)
  {
    v4 = 0;
    if (sscanf(v2, "%u", &v4) == 1)
      pas_status_reporter_enabled = v4;
  }
  return a1;
}

BOOL bmalloc::Environment::computeIsDebugHeapEnabled(bmalloc::Environment *this)
{
  char *v1;
  char *v3;
  char *v4;
  uint32_t v5;
  uint32_t v6;
  uint32_t v7;
  BOOL v8;
  char *image_name;
  char *v10;
  const char *v11;
  bmalloc *v12;

  v1 = getenv("WebKitMallocForceEnabled");
  if (v1 && atoi(v1))
    return 0;
  if (getenv("Malloc"))
    return 1;
  if (getenv("MallocLogFile"))
    return 1;
  if (getenv("MallocGuardEdges"))
    return 1;
  if (getenv("MallocDoNotProtectPrelude"))
    return 1;
  if (getenv("MallocDoNotProtectPostlude"))
    return 1;
  if (getenv("MallocScribble"))
    return 1;
  if (getenv("MallocCheckHeapStart"))
    return 1;
  if (getenv("MallocCheckHeapEach"))
    return 1;
  if (getenv("MallocCheckHeapSleep"))
    return 1;
  if (getenv("MallocCheckHeapAbort"))
    return 1;
  if (getenv("MallocErrorAbort"))
    return 1;
  if (getenv("MallocCorruptionAbort"))
    return 1;
  if (getenv("MallocHelp"))
    return 1;
  v3 = getenv("MallocStackLogging");
  if (v3)
  {
    if (!strcmp(v3, "lite"))
      return 1;
  }
  v4 = getenv("DYLD_INSERT_LIBRARIES");
  if (v4)
  {
    if (strstr(v4, "libgmalloc"))
      return 1;
  }
  v5 = _dyld_image_count();
  if (v5)
  {
    v6 = v5;
    v7 = 0;
    v8 = 1;
    do
    {
      image_name = (char *)_dyld_get_image_name(v7);
      if (image_name)
      {
        v10 = strstr(image_name, "/libclang_rt.");
        if (v10)
        {
          v11 = v10 + 13;
          if (!strncmp(v10 + 13, "asan_", 5uLL) || !strncmp(v11, "tsan_", 5uLL))
            break;
        }
      }
      v8 = ++v7 < v6;
    }
    while (v6 != v7);
    if (v8)
      return 1;
  }
  v12 = (bmalloc *)malloc_engaged_nano();
  return !(_DWORD)v12 && !bmalloc::shouldProcessUnconditionallyUseBmalloc(v12);
}

void Gigacage::ensureGigacage(Gigacage *this)
{
  unint64_t v1;
  char v2;
  char **v3;
  char *v4;

  v1 = atomic_load(&Gigacage::ensureGigacage(void)::onceFlag);
  if (v1 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&Gigacage::ensureGigacage(void)::onceFlag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<Gigacage::ensureGigacage(void)::$_0 &&>>);
  }
}

void Gigacage::disablePrimitiveGigacage(Gigacage *this)
{
  unint64_t v1;
  uint64_t *SlowCase;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  unint64_t v14;
  unint64_t v15;
  char v16;
  char **v17;
  char *v18;

  if (byte_1ECF4C022)
  {
    fwrite("FATAL: Disabling Primitive gigacage is forbidden, but we don't want that in this process.\n", 0x5AuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    if (byte_1ECF4C022)
    {
      __break(0xC471u);
      goto LABEL_37;
    }
  }
  v1 = atomic_load(&Gigacage::ensureGigacage(void)::onceFlag);
  if (v1 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&Gigacage::ensureGigacage(void)::onceFlag, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<Gigacage::ensureGigacage(void)::$_0 &&>>);
  }
  disablePrimitiveGigacageRequested = 1;
  if (qword_1ECF4C038)
  {
    SlowCase = (uint64_t *)bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_object;
    if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_object)
      SlowCase = (uint64_t *)bmalloc::StaticPerProcess<bmalloc::PrimitiveDisableCallbacks>::getSlowCase();
    do
      v3 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex);
    while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex));
    if ((v3 & 1) != 0)
    {
      do
        v4 = __ldaxr(byte_1ECF50081);
      while (__stlxr(1u, byte_1ECF50081));
      if ((v4 & 1) == 0)
      {
        v5 = 0;
        while (1)
        {
          do
            v6 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex);
          while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex));
          if ((v6 & 1) == 0)
            break;
          if (++v5 == 256)
          {
            atomic_store(0, byte_1ECF50081);
            goto LABEL_17;
          }
        }
        atomic_store(0, byte_1ECF50081);
        v9 = SlowCase[1];
        if (!v9)
          goto LABEL_25;
        goto LABEL_23;
      }
      do
LABEL_17:
        v7 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex);
      while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex));
      if ((v7 & 1) != 0)
      {
        do
        {
          MEMORY[0x19AEBBF94](0, 1, 1);
          do
            v8 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex);
          while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex));
        }
        while ((v8 & 1) != 0);
      }
    }
    v9 = SlowCase[1];
    if (!v9)
    {
LABEL_25:
      SlowCase[1] = 0;
      v14 = SlowCase[2];
      if (v14 < 4)
      {
LABEL_31:
        atomic_store(0, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex);
        return;
      }
      v15 = bmalloc::vmPageSize(void)::cached;
      if (bmalloc::vmPageSize(void)::cached)
      {
LABEL_29:
        if (v14 > v15 >> 4)
          bmalloc::Vector<Gigacage::Callback>::shrinkCapacity((uint64_t)SlowCase);
        goto LABEL_31;
      }
      v15 = sysconf(29);
      if ((v15 & 0x8000000000000000) == 0)
      {
        bmalloc::vmPageSize(void)::cached = v15;
        goto LABEL_29;
      }
      __break(0xC471u);
LABEL_37:
      JUMPOUT(0x197B62F68);
    }
LABEL_23:
    v10 = *SlowCase;
    v11 = *SlowCase + 16 * v9;
    do
    {
      v13 = *(void (**)(uint64_t))v10;
      v12 = *(_QWORD *)(v10 + 8);
      v10 += 16;
      v13(v12);
    }
    while (v10 != v11);
    goto LABEL_25;
  }
}

void Gigacage::addPrimitiveDisableCallback(Gigacage *this, void (*a2)(void *), void *a3)
{
  unint64_t v5;
  uint64_t *SlowCase;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  char **v17;
  char *v18;

  v5 = atomic_load(&Gigacage::ensureGigacage(void)::onceFlag);
  if (v5 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&Gigacage::ensureGigacage(void)::onceFlag, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<Gigacage::ensureGigacage(void)::$_0 &&>>);
  }
  if (qword_1ECF4C038)
  {
    SlowCase = (uint64_t *)bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_object;
    if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_object)
      SlowCase = (uint64_t *)bmalloc::StaticPerProcess<bmalloc::PrimitiveDisableCallbacks>::getSlowCase();
    do
      v7 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex);
    while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex));
    if ((v7 & 1) != 0)
    {
      do
        v8 = __ldaxr(byte_1ECF50081);
      while (__stlxr(1u, byte_1ECF50081));
      if ((v8 & 1) == 0)
      {
        v9 = 0;
        while (1)
        {
          do
            v10 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex);
          while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex));
          if ((v10 & 1) == 0)
            break;
          if (++v9 == 256)
          {
            atomic_store(0, byte_1ECF50081);
            goto LABEL_15;
          }
        }
        atomic_store(0, byte_1ECF50081);
        v13 = SlowCase[1];
        if (v13 != SlowCase[2])
          goto LABEL_22;
        goto LABEL_21;
      }
      do
LABEL_15:
        v11 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex);
      while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex));
      if ((v11 & 1) != 0)
      {
        do
        {
          MEMORY[0x19AEBBF94](0, 1, 1);
          do
            v12 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex);
          while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex));
        }
        while ((v12 & 1) != 0);
      }
    }
    v13 = SlowCase[1];
    if (v13 != SlowCase[2])
    {
LABEL_22:
      v14 = *SlowCase;
      SlowCase[1] = v13 + 1;
      v15 = (_QWORD *)(v14 + 16 * v13);
      *v15 = this;
      v15[1] = a2;
      atomic_store(0, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex);
      return;
    }
LABEL_21:
    bmalloc::Vector<Gigacage::Callback>::growCapacity((uint64_t)SlowCase);
    v13 = SlowCase[1];
    goto LABEL_22;
  }
  ((void (*)(_QWORD))this)(a2);
}

unint64_t Gigacage::removePrimitiveDisableCallback(unint64_t this, void (*a2)(void *), void *a3)
{
  unint64_t v4;
  uint64_t *v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v4 = this;
  v5 = (uint64_t *)bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_object;
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_object)
  {
    this = bmalloc::StaticPerProcess<bmalloc::PrimitiveDisableCallbacks>::getSlowCase();
    v5 = (uint64_t *)this;
  }
  do
    v6 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex);
  while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex));
  if ((v6 & 1) != 0)
  {
    do
      v7 = __ldaxr(byte_1ECF50081);
    while (__stlxr(1u, byte_1ECF50081));
    if ((v7 & 1) == 0)
    {
      v8 = 0;
      while (1)
      {
        do
          v9 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex);
        while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex));
        if ((v9 & 1) == 0)
          break;
        if (++v8 == 256)
        {
          atomic_store(0, byte_1ECF50081);
          goto LABEL_12;
        }
      }
      atomic_store(0, byte_1ECF50081);
      v12 = v5[1];
      if (!v12)
        goto LABEL_29;
      goto LABEL_18;
    }
    do
LABEL_12:
      v10 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex);
    while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex));
    if ((v10 & 1) != 0)
    {
      do
      {
        this = MEMORY[0x19AEBBF94](0, 1, 1);
        do
          v11 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex);
        while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex));
      }
      while ((v11 & 1) != 0);
    }
  }
  v12 = v5[1];
  if (!v12)
  {
LABEL_29:
    atomic_store(0, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex);
    return this;
  }
LABEL_18:
  v13 = v12;
  v14 = *v5;
  while (*(_QWORD *)v14 != v4 || *(void (**)(void *))(v14 + 8) != a2)
  {
    v14 += 16;
    if (!--v13)
      goto LABEL_29;
  }
  *(_OWORD *)v14 = *(_OWORD *)(*v5 + 16 * v12 - 16);
  v15 = v5[2];
  v16 = v5[1] - 1;
  v5[1] = v16;
  if (v16 >= v15 >> 2)
    goto LABEL_29;
  this = bmalloc::vmPageSize(void)::cached;
  if (bmalloc::vmPageSize(void)::cached)
    goto LABEL_26;
  this = sysconf(29);
  if ((this & 0x8000000000000000) == 0)
  {
    bmalloc::vmPageSize(void)::cached = this;
LABEL_26:
    if (v15 > this >> 4)
    {
      this = bmalloc::Vector<Gigacage::Callback>::shrinkCapacity((uint64_t)v5);
      atomic_store(0, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex);
      return this;
    }
    goto LABEL_29;
  }
  __break(0xC471u);
  return this;
}

void Gigacage::forbidDisablingPrimitiveGigacage(Gigacage *this)
{
  unint64_t v1;
  BOOL v2;
  BOOL v3;
  BOOL v4;
  char v5;
  char **v6;
  char *v7;

  v1 = atomic_load(&Gigacage::ensureGigacage(void)::onceFlag);
  if (v1 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(&Gigacage::ensureGigacage(void)::onceFlag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<Gigacage::ensureGigacage(void)::$_0 &&>>);
  }
  if (!byte_1ECF4C024
    || byte_1ECF4C023
    && (byte_1ECF4C021 ? (v2 = qword_1ECF4C038 == 0) : (v2 = 1),
        !v2 ? (v3 = qword_1ECF4C028 == 0) : (v3 = 1),
        !v3 ? (v4 = qword_1ECF4C030 == 0) : (v4 = 1),
        v4))
  {
    __break(0xC471u);
  }
  else if (!byte_1ECF4C022)
  {
    byte_1ECF4C022 = 1;
  }
}

uint64_t Gigacage::shouldBeEnabled(Gigacage *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&Gigacage::shouldBeEnabled(void)::onceFlag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&Gigacage::shouldBeEnabled(void)::onceFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<Gigacage::shouldBeEnabled(void)::$_0 &&>>);
  }
  return byte_1ECF4C023;
}

uint64_t Gigacage::allocBase(int a1)
{
  if (a1 >= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197B633CCLL);
  }
  return g_config[a1 + 8];
}

uint64_t Gigacage::size(uint64_t result)
{
  if ((int)result < 1)
    return g_config[result + 9];
  __break(0xC471u);
  return result;
}

uint64_t Gigacage::footprint()
{
  return 0;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<Gigacage::ensureGigacage(void)::$_0 &&>>()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t SlowCase;
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  FILE **v12;
  char v13;
  _QWORD *v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  if (byte_1ECF4C025)
  {
    __break(0xC471u);
    JUMPOUT(0x197B63700);
  }
  byte_1ECF4C025 = 1;
  v0 = atomic_load(&Gigacage::shouldBeEnabled(void)::onceFlag);
  if (v0 != -1)
  {
    v15[0] = &v13;
    v14 = v15;
    std::__call_once(&Gigacage::shouldBeEnabled(void)::onceFlag, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<Gigacage::shouldBeEnabled(void)::$_0 &&>>);
  }
  if (byte_1ECF4C023)
  {
    v1 = bmalloc::vmPageSize(void)::cached;
    if (!bmalloc::vmPageSize(void)::cached)
    {
      v1 = sysconf(29);
      if (v1 < 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197B63718);
      }
      bmalloc::vmPageSize(void)::cached = v1;
    }
    if (((v1 - 1) & (unint64_t)g_config) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197B63708);
    }
    v14 = 0;
    SlowCase = bmalloc::StaticPerProcessStorageTraits<bmalloc::ARC4RandomNumberGenerator>::Storage::s_object;
    if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::ARC4RandomNumberGenerator>::Storage::s_object)
      SlowCase = bmalloc::StaticPerProcess<bmalloc::ARC4RandomNumberGenerator>::getSlowCase();
    bmalloc::ARC4RandomNumberGenerator::randomValues(SlowCase, &v14, 8);
    v3 = (char *)mmap(0, 0x800000000uLL, 3, 4098, 1056964608, 0);
    if ((unint64_t)(v3 + 1) < 2)
      goto LABEL_33;
    v4 = v3 + 0x800000000;
    v5 = (unint64_t)(v3 + 0x3FFFFFFFFLL) & 0xFFFFFFFC00000000;
    v6 = v5 + 0x400000000;
    if (v5 + 0x400000000 > (unint64_t)(v3 + 0x800000000))
    {
      __break(0xC471u);
      JUMPOUT(0x197B63710);
    }
    if (v3 != (char *)v5)
      munmap(v3, v5 - (_QWORD)v3);
    if (v4 != (char *)v6)
      munmap((void *)(v5 + 0x400000000), (size_t)&v4[-v6]);
    if (v5)
    {
      while (madvise((void *)v5, 0x400000000uLL, 7) == -1 && *__error() == 35)
        ;
      qword_1ECF4C038 = v5;
      if (bmalloc::StaticPerProcessStorageTraits<bmalloc::ARC4RandomNumberGenerator>::Storage::s_object)
      {
        bmalloc::ARC4RandomNumberGenerator::randomValues(bmalloc::StaticPerProcessStorageTraits<bmalloc::ARC4RandomNumberGenerator>::Storage::s_object, v15, 16);
        v7 = bmalloc::vmPageSize(void)::cached;
        if (bmalloc::vmPageSize(void)::cached)
        {
LABEL_22:
          v8 = (0x400000000 - (v15[0] & 0xFFFFFFF)) & -v7;
LABEL_26:
          v10 = v8 - v7;
          qword_1ECF4C048 = v8 - v7;
LABEL_27:
          qword_1ECF4C040 = v5 + ((v15[1] % (unint64_t)(0x400000000 - v8)) & -v7);
          v11 = (void *)(v10 + qword_1ECF4C040);
          pas_ensure_heap_forced_into_reserved_memory((uint64_t *)&bmalloc::api::gigacageHeaps, 1, (uint64_t)&bmalloc_heap_config, &bmalloc_primitive_runtime_config, qword_1ECF4C040, v10 + qword_1ECF4C040);
          mprotect(v11, v6 - (_QWORD)v11, 0);
          qword_1ECF4C028 = v5;
          qword_1ECF4C030 = 0x400000000;
          byte_1ECF4C021 = 1;
          return;
        }
      }
      else
      {
        v9 = bmalloc::StaticPerProcess<bmalloc::ARC4RandomNumberGenerator>::getSlowCase();
        bmalloc::ARC4RandomNumberGenerator::randomValues(v9, v15, 16);
        v7 = bmalloc::vmPageSize(void)::cached;
        if (bmalloc::vmPageSize(void)::cached)
          goto LABEL_22;
      }
      v7 = sysconf(29);
      if (v7 < 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197B63720);
      }
      bmalloc::vmPageSize(void)::cached = v7;
      v8 = (0x400000000 - (v15[0] & 0xFFFFFFF)) & -v7;
      if (v7)
        goto LABEL_26;
      v7 = sysconf(29);
      if (v7 < 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197B63728);
      }
      bmalloc::vmPageSize(void)::cached = v7;
      v10 = v8 - v7;
      qword_1ECF4C048 = v8 - v7;
      if (v7)
        goto LABEL_27;
      v7 = sysconf(29);
      if ((v7 & 0x8000000000000000) == 0)
      {
        bmalloc::vmPageSize(void)::cached = v7;
        goto LABEL_27;
      }
      __break(0xC471u);
    }
    else
    {
LABEL_33:
      v12 = (FILE **)MEMORY[0x1E0C80C10];
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "FATAL: Could not allocate gigacage memory with maxAlignment = %lu, totalSize = %lu.\n", 0x400000000, 0x400000000);
      fwrite("(Make sure you have not set a virtual memory limit.)\n", 0x35uLL, 1uLL, *v12);
      __break(0xC471u);
    }
    JUMPOUT(0x197B636F8);
  }
}

unint64_t bmalloc::StaticPerProcess<bmalloc::PrimitiveDisableCallbacks>::getSlowCase()
{
  unsigned __int8 v0;
  unsigned __int8 v1;
  uint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unint64_t result;

  do
    v0 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex);
  while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex));
  if ((v0 & 1) != 0)
  {
    do
      v1 = __ldaxr(byte_1ECF50081);
    while (__stlxr(1u, byte_1ECF50081));
    if ((v1 & 1) == 0)
    {
      v2 = 0;
      while (1)
      {
        do
          v3 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex);
        while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex));
        if ((v3 & 1) == 0)
          break;
        if (++v2 == 256)
        {
          atomic_store(0, byte_1ECF50081);
          goto LABEL_10;
        }
      }
      atomic_store(0, byte_1ECF50081);
      if (!atomic_load((unint64_t *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_object))
        goto LABEL_18;
LABEL_16:
      result = atomic_load((unint64_t *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_object);
      atomic_store(0, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex);
      return result;
    }
    do
LABEL_10:
      v4 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex);
    while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex));
    if ((v4 & 1) != 0)
    {
      do
      {
        MEMORY[0x19AEBBF94](0, 1, 1);
        do
          v5 = __ldaxr((unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex);
        while (__stxr(1u, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex));
      }
      while ((v5 & 1) != 0);
    }
  }
  if (atomic_load((unint64_t *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_object))
    goto LABEL_16;
LABEL_18:
  bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_memory = 0;
  *(_QWORD *)algn_1ECF584D8 = 0;
  qword_1ECF584E0 = 0;
  atomic_store((unint64_t)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_memory, (unint64_t *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_object);
  result = atomic_load((unint64_t *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_object);
  atomic_store(0, (unsigned __int8 *)&bmalloc::StaticPerProcessStorageTraits<bmalloc::PrimitiveDisableCallbacks>::Storage::s_mutex);
  return result;
}

unint64_t bmalloc::Vector<Gigacage::Callback>::shrinkCapacity(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;

  result = bmalloc::vmPageSize(void)::cached;
  if (!bmalloc::vmPageSize(void)::cached)
  {
    result = sysconf(29);
    if ((result & 0x8000000000000000) != 0)
    {
      __break(0xC471u);
      return result;
    }
    bmalloc::vmPageSize(void)::cached = result;
  }
  if (result >> 4 <= *(_QWORD *)(a1 + 16) >> 2)
    v3 = *(_QWORD *)(a1 + 16) >> 2;
  else
    v3 = result >> 4;
  return bmalloc::Vector<Gigacage::Callback>::reallocateBuffer(a1, v3);
}

uint64_t bmalloc::Vector<Gigacage::Callback>::reallocateBuffer(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  size_t v5;
  void *v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 >= 0xFFFFFFFFFFFFFFFLL)
    goto LABEL_18;
  result = bmalloc::vmPageSize(void)::cached;
  if (bmalloc::vmPageSize(void)::cached)
  {
    v5 = (16 * a2 + bmalloc::vmPageSize(void)::cached - 1) & -bmalloc::vmPageSize(void)::cached;
    if (v5)
      goto LABEL_4;
LABEL_9:
    v6 = 0;
    v7 = *(const void **)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_14;
    goto LABEL_10;
  }
  result = sysconf(29);
  if (result < 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197B639C8);
  }
  bmalloc::vmPageSize(void)::cached = result;
  v5 = (16 * a2 + result - 1) & -result;
  if (!v5)
    goto LABEL_9;
LABEL_4:
  result = (uint64_t)mmap(0, v5, 3, 4098, 889192448, 0);
  v6 = (void *)result;
  if ((unint64_t)(result + 1) <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197B639C0);
  }
  v7 = *(const void **)a1;
  if (*(_QWORD *)a1)
  {
LABEL_10:
    memcpy(v6, v7, 16 * *(_QWORD *)(a1 + 8));
    v8 = *(void **)a1;
    v9 = *(_QWORD *)(a1 + 16);
    v10 = bmalloc::vmPageSize(void)::cached;
    if (bmalloc::vmPageSize(void)::cached)
    {
LABEL_13:
      result = munmap(v8, (16 * v9 + v10 - 1) & -v10);
      goto LABEL_14;
    }
    v10 = sysconf(29);
    if ((v10 & 0x8000000000000000) == 0)
    {
      bmalloc::vmPageSize(void)::cached = v10;
      goto LABEL_13;
    }
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x197B639B8);
  }
LABEL_14:
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = v5 >> 4;
  return result;
}

unint64_t bmalloc::Vector<Gigacage::Callback>::growCapacity(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;

  result = bmalloc::vmPageSize(void)::cached;
  if (!bmalloc::vmPageSize(void)::cached)
  {
    result = sysconf(29);
    if ((result & 0x8000000000000000) != 0)
    {
      __break(0xC471u);
      return result;
    }
    bmalloc::vmPageSize(void)::cached = result;
  }
  if (result >> 4 <= 2 * *(_QWORD *)(a1 + 8))
    v3 = 2 * *(_QWORD *)(a1 + 8);
  else
    v3 = result >> 4;
  return bmalloc::Vector<Gigacage::Callback>::reallocateBuffer(a1, v3);
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<Gigacage::shouldBeEnabled(void)::$_0 &&>>()
{
  bmalloc *SlowCase;
  char *v1;
  const char *v2;

  if (byte_1ECF4C024)
  {
    __break(0xC471u);
    return;
  }
  byte_1ECF4C024 = 1;
  SlowCase = (bmalloc *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object;
  if (bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
    if (*(_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
      return;
  }
  else
  {
    SlowCase = (bmalloc *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0);
    if (*(_BYTE *)SlowCase)
      return;
  }
  if (bmalloc::gigacageEnabledForProcess(SlowCase))
  {
    v1 = getenv("GIGACAGE_ENABLED");
    if (v1)
    {
      v2 = v1;
      if (!strcasecmp(v1, "no") || !strcasecmp(v2, "false") || !strcasecmp(v2, "0"))
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Warning: disabling gigacage because GIGACAGE_ENABLED=%s!\n", v2);
        return;
      }
      if (strcasecmp(v2, "yes") && strcasecmp(v2, "true"))
      {
        if (strcasecmp(v2, "1"))
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "Warning: invalid argument to GIGACAGE_ENABLED: %s\n", v2);
      }
    }
    byte_1ECF4C023 = 1;
  }
}

BOOL bmalloc::isActiveHeapKind(int a1)
{
  unint64_t v2;
  char v5;
  char **v6;
  char *v7;

  v2 = atomic_load(&Gigacage::ensureGigacage(void)::onceFlag);
  if (v2 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(&Gigacage::ensureGigacage(void)::onceFlag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<Gigacage::ensureGigacage(void)::$_0 &&>>);
  }
  return a1 != 1 || byte_1ECF4C021 != 0;
}

uint64_t bmalloc::mapToActiveHeapKind(unsigned int a1)
{
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  v2 = atomic_load(&Gigacage::ensureGigacage(void)::onceFlag);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&Gigacage::ensureGigacage(void)::onceFlag, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<Gigacage::ensureGigacage(void)::$_0 &&>>);
  }
  if (a1 == 1)
    return byte_1ECF4C021;
  else
    return a1;
}

uint64_t bmalloc::api::isoAllocate(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v1)
  {
    v2 = *(unsigned int *)(a1 + 16);
    if (*(_DWORD *)(v1 + 8052) > v2)
    {
      v3 = v1 + 8 * v2;
      v4 = v3 + 8064;
      *(_BYTE *)(v3 + 8064) = 1;
      v5 = *(unsigned int *)(v3 + 8080);
      if ((_DWORD)v5)
      {
        *(_DWORD *)(v4 + 16) = v5 - *(_DWORD *)(v4 + 20);
        result = *(_QWORD *)(v4 + 8) - v5;
        *(_BYTE *)v4 = 0;
        return result;
      }
      v7 = *(_QWORD *)(v4 + 40);
      v8 = *(_QWORD *)(v4 + 24);
      if (v7)
      {
LABEL_6:
        v9 = __clz(v7);
        *(_QWORD *)(v4 + 40) = v7 & ~(0x8000000000000000 >> v9);
        result = v8 + 16 * v9;
        *(_BYTE *)v4 = 0;
        return result;
      }
      if (*(_BYTE *)(v4 + 5) == 6)
      {
        v10 = *(unsigned int *)(v4 + 32);
        v11 = *(_DWORD *)(v4 + 36);
        if (v10 < v11)
        {
          *(_QWORD *)(v4 + 8 * v10 + 56) = 0;
          v12 = (unint64_t *)(8 * v10 + 8 * v2 + v1 + 8128);
          v13 = v11 - 1 - v10;
          while (v13)
          {
            v8 += 1024;
            v15 = *v12++;
            v14 = v15;
            LODWORD(v10) = v10 + 1;
            --v13;
            if (v15)
            {
              v7 = __rbit64(v14);
              *(_DWORD *)(v4 + 32) = v10;
              *(_QWORD *)(v4 + 24) = v8;
              goto LABEL_6;
            }
          }
          *(_DWORD *)(v4 + 32) = v11;
        }
      }
      *(_BYTE *)v4 = 0;
    }
  }
  return bmalloc_iso_allocate_casual(a1, 1);
}

uint64_t bmalloc::api::isoTryAllocate(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v1)
  {
    v2 = *(unsigned int *)(a1 + 16);
    if (*(_DWORD *)(v1 + 8052) > v2)
    {
      v3 = v1 + 8 * v2;
      v4 = v3 + 8064;
      *(_BYTE *)(v3 + 8064) = 1;
      v5 = *(unsigned int *)(v3 + 8080);
      if ((_DWORD)v5)
      {
        *(_DWORD *)(v4 + 16) = v5 - *(_DWORD *)(v4 + 20);
        result = *(_QWORD *)(v4 + 8) - v5;
        *(_BYTE *)v4 = 0;
        return result;
      }
      v7 = *(_QWORD *)(v4 + 40);
      v8 = *(_QWORD *)(v4 + 24);
      if (v7)
      {
LABEL_6:
        v9 = __clz(v7);
        *(_QWORD *)(v4 + 40) = v7 & ~(0x8000000000000000 >> v9);
        result = v8 + 16 * v9;
        *(_BYTE *)v4 = 0;
        return result;
      }
      if (*(_BYTE *)(v4 + 5) == 6)
      {
        v10 = *(unsigned int *)(v4 + 32);
        v11 = *(_DWORD *)(v4 + 36);
        if (v10 < v11)
        {
          *(_QWORD *)(v4 + 8 * v10 + 56) = 0;
          v12 = (unint64_t *)(8 * v10 + 8 * v2 + v1 + 8128);
          v13 = v11 - 1 - v10;
          while (v13)
          {
            v8 += 1024;
            v15 = *v12++;
            v14 = v15;
            LODWORD(v10) = v10 + 1;
            --v13;
            if (v15)
            {
              v7 = __rbit64(v14);
              *(_DWORD *)(v4 + 32) = v10;
              *(_QWORD *)(v4 + 24) = v8;
              goto LABEL_6;
            }
          }
          *(_DWORD *)(v4 + 32) = v11;
        }
      }
      *(_BYTE *)v4 = 0;
    }
  }
  return bmalloc_try_iso_allocate_casual(a1, 1);
}

uint64_t bmalloc::api::isoAllocateCompact(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v1)
  {
    v2 = *(unsigned int *)(a1 + 16);
    if (*(_DWORD *)(v1 + 8052) > v2)
    {
      v3 = v1 + 8 * v2;
      v4 = v3 + 8064;
      *(_BYTE *)(v3 + 8064) = 1;
      v5 = *(unsigned int *)(v3 + 8080);
      if ((_DWORD)v5)
      {
        *(_DWORD *)(v4 + 16) = v5 - *(_DWORD *)(v4 + 20);
        result = *(_QWORD *)(v4 + 8) - v5;
        *(_BYTE *)v4 = 0;
        return result;
      }
      v7 = *(_QWORD *)(v4 + 40);
      v8 = *(_QWORD *)(v4 + 24);
      if (v7)
      {
LABEL_6:
        v9 = __clz(v7);
        *(_QWORD *)(v4 + 40) = v7 & ~(0x8000000000000000 >> v9);
        result = v8 + 16 * v9;
        *(_BYTE *)v4 = 0;
        return result;
      }
      if (*(_BYTE *)(v4 + 5) == 6)
      {
        v10 = *(unsigned int *)(v4 + 32);
        v11 = *(_DWORD *)(v4 + 36);
        if (v10 < v11)
        {
          *(_QWORD *)(v4 + 8 * v10 + 56) = 0;
          v12 = (unint64_t *)(8 * v10 + 8 * v2 + v1 + 8128);
          v13 = v11 - 1 - v10;
          while (v13)
          {
            v8 += 1024;
            v15 = *v12++;
            v14 = v15;
            LODWORD(v10) = v10 + 1;
            --v13;
            if (v15)
            {
              v7 = __rbit64(v14);
              *(_DWORD *)(v4 + 32) = v10;
              *(_QWORD *)(v4 + 24) = v8;
              goto LABEL_6;
            }
          }
          *(_DWORD *)(v4 + 32) = v11;
        }
      }
      *(_BYTE *)v4 = 0;
    }
  }
  return bmalloc_iso_allocate_casual(a1, 0);
}

uint64_t bmalloc::api::isoTryAllocateCompact(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v1)
  {
    v2 = *(unsigned int *)(a1 + 16);
    if (*(_DWORD *)(v1 + 8052) > v2)
    {
      v3 = v1 + 8 * v2;
      v4 = v3 + 8064;
      *(_BYTE *)(v3 + 8064) = 1;
      v5 = *(unsigned int *)(v3 + 8080);
      if ((_DWORD)v5)
      {
        *(_DWORD *)(v4 + 16) = v5 - *(_DWORD *)(v4 + 20);
        result = *(_QWORD *)(v4 + 8) - v5;
        *(_BYTE *)v4 = 0;
        return result;
      }
      v7 = *(_QWORD *)(v4 + 40);
      v8 = *(_QWORD *)(v4 + 24);
      if (v7)
      {
LABEL_6:
        v9 = __clz(v7);
        *(_QWORD *)(v4 + 40) = v7 & ~(0x8000000000000000 >> v9);
        result = v8 + 16 * v9;
        *(_BYTE *)v4 = 0;
        return result;
      }
      if (*(_BYTE *)(v4 + 5) == 6)
      {
        v10 = *(unsigned int *)(v4 + 32);
        v11 = *(_DWORD *)(v4 + 36);
        if (v10 < v11)
        {
          *(_QWORD *)(v4 + 8 * v10 + 56) = 0;
          v12 = (unint64_t *)(8 * v10 + 8 * v2 + v1 + 8128);
          v13 = v11 - 1 - v10;
          while (v13)
          {
            v8 += 1024;
            v15 = *v12++;
            v14 = v15;
            LODWORD(v10) = v10 + 1;
            --v13;
            if (v15)
            {
              v7 = __rbit64(v14);
              *(_DWORD *)(v4 + 32) = v10;
              *(_QWORD *)(v4 + 24) = v8;
              goto LABEL_6;
            }
          }
          *(_DWORD *)(v4 + 32) = v11;
        }
      }
      *(_BYTE *)v4 = 0;
    }
  }
  return bmalloc_try_iso_allocate_casual(a1, 0);
}

void bmalloc::api::isoDeallocate(unint64_t this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  bmalloc::api *v11;

  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v9)
  {
    pas_try_deallocate_slow_no_cache(this, (uint64_t)&bmalloc_heap_config, 1);
    return;
  }
  if (this >> 43
    || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((this >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(this)) & 1) == 0)
  {
    if (this >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= this >> 24)
    {
      a4 = 0;
      v11 = (bmalloc::api *)this;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((this >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(this) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
        goto LABEL_4;
      v11 = (bmalloc::api *)this;
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v9, (unint64_t)v11, 1, a4, a5, a6, a7, a8);
    return;
  }
LABEL_4:
  v10 = *(unsigned int *)(v9 + 8000);
  if (v10 >= 0x3E7)
  {
    pas_thread_local_cache_append_deallocation_slow(v9, this, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)(v9 + 8 * v10) = this | 0x5000000000000;
    *(_DWORD *)(v9 + 8000) = v10 + 1;
  }
}

uint64_t bmalloc::IsoMallocFallback::tryMalloc(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  char **v22;
  char *v23;

  while (!_MergedGlobals_22)
  {
    v4 = atomic_load(&qword_1ECF584F0);
    if (v4 != -1)
    {
      v22 = &v23;
      v23 = &v21;
    }
  }
  if (_MergedGlobals_22 != 1)
  {
    if (_MergedGlobals_22 == 2)
      return 0;
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x197B642FCLL);
  }
  if (a2 >= 2)
    goto LABEL_28;
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v5)
  {
    v6 = (unint64_t)(a1 + 15) >> 4;
    if ((unint64_t)(a1 + 15) <= 0x1AF)
    {
      v7 = 23 * v6 + 7;
    }
    else
    {
      if ((unint64_t)(a1 + 15) >> 5 > 0x138)
        return bmalloc_try_allocate_casual(a1, a2);
      v7 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v6 + 626);
      if (*(_DWORD *)(v5 + 8052) <= v7)
        return bmalloc_try_allocate_casual(a1, a2);
    }
    v9 = v5 + 8 * v7;
    v10 = v9 + 8064;
    *(_BYTE *)(v9 + 8064) = 1;
    v11 = *(unsigned int *)(v9 + 8080);
    if ((_DWORD)v11)
    {
      *(_DWORD *)(v10 + 16) = v11 - *(_DWORD *)(v10 + 20);
      result = *(_QWORD *)(v10 + 8) - v11;
    }
    else
    {
      v12 = *(_QWORD *)(v10 + 40);
      v13 = *(_QWORD *)(v10 + 24);
      if (!v12)
      {
        if (*(_BYTE *)(v10 + 5) == 6)
        {
          v15 = *(unsigned int *)(v10 + 32);
          v16 = *(_DWORD *)(v10 + 36);
          if (v15 < v16)
          {
            *(_QWORD *)(v10 + 8 * v15 + 56) = 0;
            v17 = (unint64_t *)(8 * v15 + 8 * v7 + v5 + 8128);
            v18 = v16 - 1 - v15;
            while (v18)
            {
              v13 += 1024;
              v20 = *v17++;
              v19 = v20;
              LODWORD(v15) = v15 + 1;
              --v18;
              if (v20)
              {
                v12 = __rbit64(v19);
                *(_DWORD *)(v10 + 32) = v15;
                *(_QWORD *)(v10 + 24) = v13;
                goto LABEL_17;
              }
            }
            *(_DWORD *)(v10 + 32) = v16;
          }
        }
        *(_BYTE *)v10 = 0;
        return bmalloc_try_allocate_casual(a1, a2);
      }
LABEL_17:
      v14 = __clz(v12);
      *(_QWORD *)(v10 + 40) = v12 & ~(0x8000000000000000 >> v14);
      result = v13 + 16 * v14;
    }
    *(_BYTE *)v10 = 0;
    return result;
  }
  return bmalloc_try_allocate_casual(a1, a2);
}

void bmalloc::IsoMallocFallback::tryFree(unint64_t this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char **v13;
  char *v14;

  while (!_MergedGlobals_22)
  {
    v9 = atomic_load(&qword_1ECF584F0);
    if (v9 != -1)
    {
      v13 = &v14;
      v14 = &v12;
    }
  }
  if (_MergedGlobals_22 == 1)
  {
    v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v10)
    {
      pas_try_deallocate_slow_no_cache(this, (uint64_t)&bmalloc_heap_config, 1);
      return;
    }
    if (!(this >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((this >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(this)) & 1) != 0)
    {
      goto LABEL_8;
    }
    if (this >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= this >> 24)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((this >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(this) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
      {
LABEL_8:
        v11 = *(unsigned int *)(v10 + 8000);
        if (v11 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v10, this, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v10 + 8 * v11) = this | 0x5000000000000;
          *(_DWORD *)(v10 + 8000) = v11 + 1;
        }
        return;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v10, this, 1, a4, a5, a6, a7, a8);
    return;
  }
  if (_MergedGlobals_22 != 2)
    __break(0xC471u);
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<bmalloc::IsoMallocFallback::`anonymous namespace'::determineMallocFallbackState(void)::$_0 &&>>()
{
  char *v0;
  const char *v1;

  if (!_MergedGlobals_22)
  {
    if (bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
    {
      if (!*(_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
        goto LABEL_6;
    }
    else if (!*(_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0))
    {
LABEL_6:
      v0 = getenv("bmalloc_IsoHeap");
      if (!v0 || (v1 = v0, strcasecmp(v0, "false")) && strcasecmp(v1, "no") && strcmp(v1, "0"))
      {
        _MergedGlobals_22 = 2;
        return;
      }
    }
    _MergedGlobals_22 = 1;
  }
}

unsigned __int8 *bmalloc::Mutex::lockSlowCase(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned __int8 v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  v1 = this;
  v2 = this + 1;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(1u, v2));
  if ((v3 & 1) != 0)
  {
    do
LABEL_9:
      v6 = __ldaxr(this);
    while (__stxr(1u, this));
    if ((v6 & 1) != 0)
    {
      do
      {
        this = (unsigned __int8 *)MEMORY[0x19AEBBF94](0, 1, 1);
        do
          v7 = __ldaxr(v1);
        while (__stxr(1u, v1));
      }
      while ((v7 & 1) != 0);
    }
  }
  else
  {
    v4 = 0;
    while (1)
    {
      do
        v5 = __ldaxr(this);
      while (__stxr(1u, this));
      if ((v5 & 1) == 0)
        break;
      if (++v4 == 256)
      {
        atomic_store(0, v2);
        goto LABEL_9;
      }
    }
    atomic_store(0, v2);
  }
  return this;
}

uint64_t bmalloc::gigacageEnabledForProcess(bmalloc *this)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v1 = (void *)MEMORY[0x19AEBB88C](this);
  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "bundleIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = objc_msgSend(v3, "hasPrefix:", CFSTR("com.apple.WebKit.WebContent"));
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "processName");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v6, "isEqualToString:", CFSTR("jsc")) & 1) != 0
      || (objc_msgSend(v6, "isEqualToString:", CFSTR("DumpRenderTree")) & 1) != 0
      || (objc_msgSend(v6, "isEqualToString:", CFSTR("wasm")) & 1) != 0
      || (objc_msgSend(v6, "hasPrefix:", CFSTR("test")) & 1) != 0)
    {
      v4 = 1;
    }
    else
    {
      v4 = objc_msgSend(v6, "hasPrefix:", CFSTR("Test"));
    }
    v3 = v6;
  }

  objc_autoreleasePoolPop(v1);
  return v4;
}

void sub_197B64704(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_197B64718(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_197B6472C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_197B6473C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t bmalloc::shouldProcessUnconditionallyUseBmalloc(bmalloc *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&bmalloc::shouldProcessUnconditionallyUseBmalloc(void)::onceFlag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&bmalloc::shouldProcessUnconditionallyUseBmalloc(void)::onceFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<bmalloc::shouldProcessUnconditionallyUseBmalloc(void)::$_0 &&>>);
  }
  return bmalloc::shouldProcessUnconditionallyUseBmalloc(void)::result;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<bmalloc::shouldProcessUnconditionallyUseBmalloc(void)::$_0 &&>>()
{
  void *v0;
  void *v1;
  void *v2;
  BOOL v3;
  void *v4;
  void *v5;
  char v6;

  v0 = (void *)MEMORY[0x19AEBB88C]();
  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "bundleIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    v3 = objc_msgSend(v2, "rangeOfString:options:", CFSTR("com.apple.WebKit"), 1) != 0x7FFFFFFFFFFFFFFFLL
      || objc_msgSend(v2, "rangeOfString:options:", CFSTR("safari"), 1) != 0x7FFFFFFFFFFFFFFFLL;
    bmalloc::shouldProcessUnconditionallyUseBmalloc(void)::result = v3;

    objc_autoreleasePoolPop(v0);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "processName");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v5, "isEqualToString:", CFSTR("jsc")) & 1) != 0
      || (objc_msgSend(v5, "isEqualToString:", CFSTR("wasm")) & 1) != 0)
    {
      v6 = 1;
    }
    else
    {
      v6 = objc_msgSend(v5, "hasPrefix:", CFSTR("test"));
    }
    bmalloc::shouldProcessUnconditionallyUseBmalloc(void)::result = v6;

    objc_autoreleasePoolPop(v0);
  }
}

void sub_197B648D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_197B648F0(_Unwind_Exception *a1)
{

  _Unwind_Resume(a1);
}

void sub_197B64904(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_197B6491C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_197B6492C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

JSC::DFG::SpeculativeJIT *JSC::DFG::SpeculativeJIT::SpeculativeJIT(JSC::DFG::SpeculativeJIT *this, JSC::CodeBlock **a2)
{
  JSC::DFG::JITCompiler *v3;
  uint64_t v4;
  uint64_t v5;
  JSC::DFG::SpeculativeJIT *result;
  uint64_t v7;
  JSC::DFG::InPlaceAbstractState *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  JSC::DFG::PhiChildren *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::DFG::PhiChildren *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v36;

  v3 = JSC::DFG::JITCompiler::JITCompiler(this, a2);
  v4 = *((_QWORD *)v3 + 44);
  *((_QWORD *)v3 + 495) = v4;
  *((_QWORD *)v3 + 497) = 0;
  *((_WORD *)v3 + 1992) = 433;
  *((_DWORD *)v3 + 997) = 0;
  v5 = ((*(_DWORD *)(v4 + 856) + *(_DWORD *)(v4 + 860) + 3) & 0xFFFFFFFE) - 2;
  result = (JSC::DFG::JITCompiler *)((char *)v3 + 4008);
  *((_QWORD *)this + 499) = result;
  *((_DWORD *)this + 1000) = 32;
  *((_DWORD *)this + 1001) = v5;
  if (v5 >= 0x21)
  {
    if (v5 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      return result;
    }
    v36 = 24 * v5;
    result = (JSC::DFG::SpeculativeJIT *)WTF::fastMalloc((WTF *)(24 * v5));
    *((_DWORD *)this + 1000) = (v36 & 0xFFFFFFF8) / 0x18;
    *((_QWORD *)this + 499) = result;
    v5 = *((unsigned int *)this + 1001);
  }
  if ((_DWORD)v5)
  {
    v7 = 24 * v5;
    do
    {
      *(_QWORD *)result = 0;
      *((_QWORD *)result + 1) = 0;
      *((_BYTE *)result + 16) = 0;
      result = (JSC::DFG::SpeculativeJIT *)((char *)result + 24);
      v7 -= 24;
    }
    while (v7);
  }
  *(_OWORD *)((char *)this + 4776) = xmmword_1991238D0;
  *(_OWORD *)((char *)this + 4792) = xmmword_1991238E0;
  *(_OWORD *)((char *)this + 4808) = xmmword_1991238F0;
  *(_OWORD *)((char *)this + 4824) = xmmword_1991238D0;
  *(_OWORD *)((char *)this + 4840) = xmmword_1991238E0;
  *(_OWORD *)((char *)this + 4856) = xmmword_1991238F0;
  *(_OWORD *)((char *)this + 4872) = xmmword_1991238D0;
  *(_OWORD *)((char *)this + 4888) = xmmword_1991238E0;
  *(_OWORD *)((char *)this + 4904) = xmmword_1991238F0;
  *(_OWORD *)((char *)this + 4920) = xmmword_1991238D0;
  *(_OWORD *)((char *)this + 4936) = xmmword_1991238E0;
  *(_OWORD *)((char *)this + 4952) = xmmword_1991238F0;
  *(_OWORD *)((char *)this + 4968) = xmmword_1991238D0;
  *(_OWORD *)((char *)this + 4984) = xmmword_1991238E0;
  *(_OWORD *)((char *)this + 5000) = xmmword_1991238F0;
  *(_OWORD *)((char *)this + 5016) = xmmword_1991238D0;
  *(_OWORD *)((char *)this + 5032) = xmmword_1991238E0;
  *(_OWORD *)((char *)this + 5048) = xmmword_1991238F0;
  *(_OWORD *)((char *)this + 5064) = xmmword_1991238D0;
  *(_OWORD *)((char *)this + 5080) = xmmword_1991238E0;
  *(_OWORD *)((char *)this + 5096) = xmmword_1991238F0;
  *(_OWORD *)((char *)this + 5112) = xmmword_1991238D0;
  *(_OWORD *)((char *)this + 5128) = xmmword_1991238E0;
  *(_OWORD *)((char *)this + 5144) = xmmword_1991238F0;
  *(_OWORD *)((char *)this + 5160) = xmmword_1991238D0;
  *(_OWORD *)((char *)this + 5176) = xmmword_1991238E0;
  *(_OWORD *)((char *)this + 5192) = xmmword_1991238F0;
  *(_OWORD *)((char *)this + 5208) = xmmword_1991238D0;
  *(_OWORD *)((char *)this + 5224) = xmmword_1991238E0;
  *((_DWORD *)this + 1310) = 0;
  *((_BYTE *)this + 5244) = 1;
  *((_OWORD *)this + 328) = 0u;
  *((_QWORD *)this + 658) = (char *)this + 5280;
  *((_QWORD *)this + 659) = 8;
  *((int64x2_t *)this + 342) = vdupq_n_s64(2uLL);
  *((_WORD *)this + 2744) = 0;
  v8 = JSC::DFG::InPlaceAbstractState::InPlaceAbstractState((JSC::DFG::SpeculativeJIT *)((char *)this + 5496), *((JSC::DFG::Graph **)this + 495));
  v9 = *((_QWORD *)this + 495);
  *((_QWORD *)this + 699) = *(_QWORD *)(v9 + 32);
  *((_QWORD *)this + 700) = v9;
  *((_QWORD *)this + 701) = *(_QWORD *)(v9 + 16);
  *((_QWORD *)this + 702) = v8;
  *((_QWORD *)this + 703) = 0;
  if (*(_DWORD *)(v9 + 944) == 2)
  {
    v15 = (JSC::DFG::PhiChildren *)WTF::fastMalloc((WTF *)8);
    v22 = JSC::DFG::PhiChildren::PhiChildren(v15, (JSC::DFG::Graph *)v9, v16, v17, v18, v19, v20, v21);
    v30 = (uint64_t *)*((_QWORD *)this + 703);
    *((_QWORD *)this + 703) = v22;
    if (v30)
    {
      v31 = *v30;
      if (*v30)
      {
        v32 = *(unsigned int *)(v31 - 4);
        if ((_DWORD)v32)
        {
          v33 = v31 + 24;
          do
          {
            if (*(_QWORD *)(v33 - 24) != -1)
            {
              v34 = *(_QWORD *)(v33 - 16);
              if (v33 != v34 && v34 != 0)
              {
                *(_QWORD *)(v33 - 16) = 0;
                *(_DWORD *)(v33 - 8) = 0;
                WTF::fastFree(v34, v23, v24, v25, v26, v27, v28, v29);
              }
            }
            v33 += 48;
            --v32;
          }
          while (v32);
        }
        WTF::fastFree(v31 - 16, v23, v24, v25, v26, v27, v28, v29);
      }
      WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
    }
  }
  *((_OWORD *)this + 352) = 0u;
  v10 = (unsigned int *)*((_QWORD *)this + 46);
  if (v10)
  {
    v11 = v10 + 2;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    do
    {
      v13 = __ldaxr(v11);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v11));
    if (!v14)
    {
      atomic_store(1u, v10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 32))(v10);
    }
  }
  *((_QWORD *)this + 706) = v10 + 80;
  *((_QWORD *)this + 707) = (char *)this + 5672;
  *((_QWORD *)this + 708) = 8;
  *((_BYTE *)this + 5772) = 0;
  *((_BYTE *)this + 5776) = 0;
  *(_OWORD *)((char *)this + 5736) = 0u;
  *(_OWORD *)((char *)this + 5752) = 0u;
  *((_BYTE *)this + 5768) = 0;
  return this;
}

void JSC::DFG::SpeculativeJIT::~SpeculativeJIT(JSC::DFG::SpeculativeJIT *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  JSC::DFG::SpeculativeJIT *v16;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::DFG::SpeculativeJIT *v34;
  unint64_t v35;
  JSC::DFG::SpeculativeJIT *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;

  v9 = *((_QWORD *)this + 719);
  if (v9)
  {
    *((_QWORD *)this + 719) = 0;
    *((_DWORD *)this + 1440) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((unsigned int *)this + 1437);
  if ((_DWORD)v10)
  {
    v37 = (uint64_t *)*((_QWORD *)this + 717);
    v38 = 24 * v10;
    do
    {
      v39 = *v37;
      *v37 = 0;
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      v37 += 3;
      v38 -= 24;
    }
    while (v38);
  }
  v11 = *((_QWORD *)this + 717);
  if (v11)
  {
    *((_QWORD *)this + 717) = 0;
    *((_DWORD *)this + 1436) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *((unsigned int *)this + 1417);
  if ((_DWORD)v12)
  {
    v13 = (uint64_t *)*((_QWORD *)this + 707);
    v14 = 8 * v12;
    do
    {
      v15 = *v13;
      *v13 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  v16 = (JSC::DFG::SpeculativeJIT *)*((_QWORD *)this + 707);
  if ((JSC::DFG::SpeculativeJIT *)((char *)this + 5672) != v16 && v16 != 0)
  {
    *((_QWORD *)this + 707) = 0;
    *((_DWORD *)this + 1416) = 0;
    WTF::fastFree((unint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
  }
  v18 = *((_QWORD *)this + 704);
  if (v18)
  {
    *((_QWORD *)this + 704) = 0;
    *((_DWORD *)this + 1410) = 0;
    WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
  }
  v19 = (uint64_t *)*((_QWORD *)this + 703);
  *((_QWORD *)this + 703) = 0;
  if (v19)
  {
    v20 = *v19;
    if (*v19)
    {
      v21 = *(unsigned int *)(v20 - 4);
      if ((_DWORD)v21)
      {
        v22 = v20 + 24;
        do
        {
          if (*(_QWORD *)(v22 - 24) != -1)
          {
            v23 = *(_QWORD *)(v22 - 16);
            if (v22 != v23 && v23 != 0)
            {
              *(_QWORD *)(v22 - 16) = 0;
              *(_DWORD *)(v22 - 8) = 0;
              WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
            }
          }
          v22 += 48;
          --v21;
        }
        while (v21);
      }
      WTF::fastFree(v20 - 16, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree((unint64_t)v19, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::InPlaceAbstractState::~InPlaceAbstractState((JSC::DFG::SpeculativeJIT *)((char *)this + 5496), a2, a3, a4, a5, a6, a7, a8);
  v32 = *((_QWORD *)this + 685);
  if ((v32 & 1) != 0 && (v32 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v32 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
  v33 = *((_QWORD *)this + 684);
  if ((v33 & 1) != 0 && (v33 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v33 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
  v34 = (JSC::DFG::SpeculativeJIT *)*((_QWORD *)this + 658);
  if ((JSC::DFG::SpeculativeJIT *)((char *)this + 5280) != v34 && v34)
  {
    *((_QWORD *)this + 658) = 0;
    *((_DWORD *)this + 1318) = 0;
    WTF::fastFree((unint64_t)v34, v25, v26, v27, v28, v29, v30, v31);
  }
  v35 = *((_QWORD *)this + 656);
  if (v35)
  {
    *((_QWORD *)this + 656) = 0;
    *((_DWORD *)this + 1314) = 0;
    WTF::fastFree(v35, v25, v26, v27, v28, v29, v30, v31);
  }
  v36 = (JSC::DFG::SpeculativeJIT *)*((_QWORD *)this + 499);
  if ((JSC::DFG::SpeculativeJIT *)((char *)this + 4008) != v36 && v36)
  {
    *((_QWORD *)this + 499) = 0;
    *((_DWORD *)this + 1000) = 0;
    WTF::fastFree((unint64_t)v36, v25, v26, v27, v28, v29, v30, v31);
  }
  JSC::DFG::JITCompiler::~JITCompiler(this, (unint64_t)v25, v26, v27, v28, v29, v30, v31);
}

void JSC::DFG::SpeculativeJIT::compile(JSC::DFG::SpeculativeJIT *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t i;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  pthread_key_t *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF *v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  JSC::DFG::Graph **v125;
  unint64_t v126;
  uint64_t v127;
  __int128 *p_start;
  uint64_t v129;
  size_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int *v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int v146;
  _QWORD *v147;
  uint64_t **v148;
  unsigned int *v149;
  unsigned int v150;
  uint64_t **v151;
  unsigned int v152;
  unsigned int *v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unint64_t v158;
  uint64_t v159;
  _DWORD *v160;
  _DWORD *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int *v179;
  unsigned int v180;
  unsigned int v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  WTF *v189;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  BOOL v207;
  uint64_t v208;
  unint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  void *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  char v253;
  uint64_t **v254;
  JSC::ExecutableMemoryHandle *v255;
  uint64_t v256;
  unint64_t v257;
  WTF *v258;
  uint64_t v259;
  _BYTE v260[24];
  uint64_t *v261;
  JSC::ExecutableMemoryHandle *v262;
  JSC::ExecutableAllocator *v263;
  size_t len;
  uint64_t v265;
  WTF *v266;
  _BYTE v267[128];
  unsigned int v268;
  char v269;
  int v270;
  unsigned int v271;
  __int128 start;
  __int128 v273;
  uint64_t v274;
  uint64_t v275;

  v275 = *MEMORY[0x1E0C80C00];
  v9 = *((_QWORD *)this + 44);
  if (*(_BYTE *)(v9 + 972))
  {
    v249 = *(_DWORD *)(v9 + 968);
    if (v249 <= 1)
      v249 = 1;
    *(_QWORD *)(*((_QWORD *)this + 46) + 224) = JSC::VM::scratchBufferForSize(*(JSC::VM **)(v9 + 16), 8 * v249, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_DWORD *)this + 50);
  v263 = 0;
  if (*((_BYTE *)this + 3952))
  {
    LODWORD(v258) = v10;
    JSC::PCToCodeOriginMapBuilder::appendItemSlow((uint64_t)this + 3936, (unsigned int *)&v258, (unint64_t *)&v263);
    v10 = *((_DWORD *)this + 50);
  }
  v11 = *((_QWORD *)this + 45);
  if (v11)
    *(_DWORD *)(v11 + 32) = v10;
  if (v10 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), a2, a3, a4, a5, a6, a7, a8);
    v10 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v10) = -1447068675;
  v12 = *((_DWORD *)this + 50);
  v13 = v12 + 4;
  *((_DWORD *)this + 50) = v12 + 4;
  if ((v12 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), a2, a3, a4, a5, a6, a7, a8);
    v13 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v13) = -1862269955;
  *((_DWORD *)this + 50) += 4;
  v14 = *((_QWORD *)this + 44);
  if ((*(_DWORD *)(*(_QWORD *)(v14 + 32) + 32) & 0x80000000) != 0)
    JSC::MacroAssemblerARM64::store8((uint64_t)this, 1, *(_QWORD *)(v14 + 16) + 41452, a4, a5, a6, a7, a8);
  v258 = (WTF *)v260;
  v259 = 2;
  JSC::DFG::emitStackOverflowCheck((uint64_t)this, &v258, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::add64((uint64_t)this, 16- ((8 * (*(_DWORD *)(*((_QWORD *)this + 495) + 856) + *(_DWORD *)(*((_QWORD *)this + 495) + 860)) + 24) & 0xFFFFFFF0), 29, 31, v15, v16, v17, v18);
  JSC::DFG::JITCompiler::compileSetupRegistersForEntry(this, v19, v20, v21, v22, v23, v24, v25);
  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 24) + 372))
  {
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197B659A0);
    }
    v194 = *((_QWORD *)this + 46) + 344;
    *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v194, *((char *)this + 304), v28, v29, v30, v31, v32);
    v195 = *((_DWORD *)this + 50);
    if (v195 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v26, v27, v28, v29, v30, v31, v32);
      v195 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v195) = 956301887;
    *((_DWORD *)this + 50) += 4;
  }
  JSC::DFG::SpeculativeJIT::checkArgumentTypes(this, v26, v27, v28, v29, v30, v31, v32);
  v40 = *((_QWORD *)this + 495);
  if (*(_DWORD *)(v40 + 60))
  {
    for (i = 0; i < *(unsigned int *)(v40 + 60); ++i)
    {
      v42 = *((_QWORD *)this + 45);
      if (v42)
      {
        if (i >= *(unsigned int *)(v42 + 52))
        {
          __break(0xC471u);
LABEL_174:
          JUMPOUT(0x197B658BCLL);
        }
        *(_DWORD *)(*(_QWORD *)(v42 + 40) + 4 * i) = *((_DWORD *)this + 50);
      }
      *((_QWORD *)this + 496) = *(_QWORD *)(*(_QWORD *)(v40 + 48) + 8 * i);
      JSC::DFG::SpeculativeJIT::compileCurrentBlock(this, v33, v34, v35, v36, v37, v38, v39);
      v40 = *((_QWORD *)this + 495);
    }
  }
  JSC::DFG::SpeculativeJIT::linkBranches((__int128 *)this, v33, v34, v35, v36, v37, v38, v39);
  v50 = *((_QWORD *)this + 684);
  if ((v50 & 1) != 0)
  {
    v205 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
    if ((v50 & 2) != 0
      || ((v206 = *(unsigned int *)((v50 & 0xFFFFFFFF8) + 8), (_DWORD)v206 != 0x3FFFFFFF)
        ? (v207 = (_DWORD)v206 == -1)
        : (v207 = 1),
          v207))
    {
      v208 = 2;
    }
    else if (v206 >> 28)
    {
      v251 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v251 = v205;
      *(_DWORD *)(v251 + 8) = v206;
      v208 = 1;
      v205 = v251;
    }
    else
    {
      v208 = v205;
      v205 = v206 << 36;
    }
    v50 = v205 | v208;
  }
  v257 = v50;
  if (*((_BYTE *)this + 3952))
  {
    LODWORD(v263) = *((_DWORD *)this + 50);
    JSC::PCToCodeOriginMapBuilder::appendItemSlow((uint64_t)this + 3936, (unsigned int *)&v263, &v257);
  }
  v51 = *((_QWORD *)this + 45);
  if (v51)
    *(_DWORD *)(v51 + 64) = *((_DWORD *)this + 50);
  if ((v50 & 1) != 0 && (v50 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v50 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
  if (HIDWORD(v259))
  {
    v52 = 0;
    v53 = 0;
    v54 = 12 * HIDWORD(v259);
    do
    {
      if (v53 >= HIDWORD(v259))
      {
        __break(0xC471u);
        JUMPOUT(0x197B65A14);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v258 + v52), (uint64_t)this, v44, v45, v46, v47, v48, v49);
      ++v53;
      v52 += 12;
    }
    while (v54 != v52);
  }
  v256 = 0;
  JSC::DFG::JITCompiler::emitStoreCodeOrigin((uint64_t)this, &v256, v44, v45, v46, v47, v48, v49);
  if ((v256 & 1) != 0 && (v256 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v256 & 0xFFFFFFFF8, v55, v56, v57, v58, v59, v60, v61);
  v62 = *((_DWORD *)this + 50);
  if (v62 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v55, v56, v57, v58, v59, v60, v61);
    v62 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v62) = -129956960;
  *((_DWORD *)this + 50) += 4;
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationThrowStackOverflowError, v56, v57, v58, v59, v60, v61, (int *)&v263);
  v69 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 16) + 90440);
  v70 = *(_QWORD *)(v69 + 24);
  v71 = *(unsigned int **)(v69 + 32);
  if (v71)
  {
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 + 1, v71));
    JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>((uint64_t)this, v70, v63, v64, v65, v66, v67, v68);
    do
    {
      v80 = __ldaxr(v71);
      v81 = v80 - 1;
    }
    while (__stlxr(v81, v71));
    if (!v81)
    {
      atomic_store(1u, v71);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v71, v73, v74, v75, v76, v77, v78, v79);
      WTF::fastFree(v209, v210, v211, v212, v213, v214, v215, v216);
    }
  }
  else
  {
    JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>((uint64_t)this, v70, v63, v64, v65, v66, v67, v68);
  }
  JSC::DFG::SpeculativeJIT::runSlowPathGenerators((uint64_t)this, (JSC::DFG::SpeculativeJIT *)((char *)this + 3936), v74, v75, v76, v77, v78, v79);
  v89 = *((_DWORD *)this + 50);
  v263 = 0;
  if (*((_BYTE *)this + 3952))
  {
    LODWORD(v261) = v89;
    JSC::PCToCodeOriginMapBuilder::appendItemSlow((uint64_t)this + 3936, (unsigned int *)&v261, (unint64_t *)&v263);
  }
  JSC::DFG::JITCompiler::linkOSRExits(this, v82, v83, v84, v85, v86, v87, v88);
  v90 = *((_QWORD *)this + 495);
  if (*(_DWORD *)(v90 + 60))
  {
    v91 = 0;
    v92 = 0;
    do
    {
      v93 = *(_QWORD *)(*(_QWORD *)(v90 + 48) + 8 * v92);
      if (v93 && (*(_BYTE *)(v93 + 19) || *(_BYTE *)(v93 + 20)))
      {
        if (v92 >= *((unsigned int *)this + 101))
        {
          __break(0xC471u);
          JUMPOUT(0x197B65A1CLL);
        }
        v94 = (_DWORD *)(*((_QWORD *)this + 49) + v91);
        v95 = *((unsigned int *)this + 1315);
        if ((_DWORD)v95 == *((_DWORD *)this + 1314))
        {
          v96 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 5248, v95 + 1, (unint64_t)v94);
          v97 = *((unsigned int *)this + 1315);
          *(_DWORD *)(*((_QWORD *)this + 656) + 4 * v97) = *v96;
          *((_DWORD *)this + 1315) = v97 + 1;
          v90 = *((_QWORD *)this + 495);
        }
        else
        {
          *(_DWORD *)(*((_QWORD *)this + 656) + 4 * v95) = *v94;
          *((_DWORD *)this + 1315) = v95 + 1;
        }
      }
      ++v92;
      v91 += 4;
    }
    while (v92 < *(unsigned int *)(v90 + 60));
  }
  v98 = *((_DWORD *)this + 50);
  v263 = 0;
  if (*((_BYTE *)this + 3952))
  {
    LODWORD(v261) = v98;
    JSC::PCToCodeOriginMapBuilder::appendItemSlow((uint64_t)this + 3936, (unsigned int *)&v261, (unint64_t *)&v263);
  }
  v99 = *((_QWORD *)this + 45);
  if (v99)
    *(_DWORD *)(v99 + 68) = *((_DWORD *)this + 50);
  v100 = *((_QWORD *)this + 42);
  v263 = 0;
  len = 0;
  v265 = v100;
  v266 = (WTF *)v267;
  v268 = 128;
  v101 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v101 != -1)
  {
    v261 = &v252;
    v254 = &v261;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v254, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v102 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v110 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v110)
  {
    v110 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v110, v102);
  }
  v111 = *(WTF **)v110;
  if (*(_QWORD *)v110 != v110 + 8)
  {
    v112 = *(_DWORD *)(v110 + 136);
    if (v268 < v112)
    {
      if (v266 && v266 != (WTF *)v267)
      {
        WTF::fastFree((unint64_t)v266, v103, v104, v105, v106, v107, v108, v109);
        v111 = *(WTF **)v110;
        v112 = *(_DWORD *)(v110 + 136);
      }
      v266 = v111;
      v268 = v112;
      *(_QWORD *)v110 = v110 + 8;
      *(_DWORD *)(v110 + 136) = 128;
    }
  }
  v269 = 1;
  v270 = 0;
  v271 = 1;
  start = 0u;
  v273 = 0u;
  v274 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v263, (uint64_t)this, 0, v105, v106, v107, v108, v109);
  if ((_BYTE)v270)
  {
    JSC::DFG::JITCompiler::link(this, &v263, v113, v114, v115, v116, v117, v118);
    JSC::DFG::SpeculativeJIT::linkOSREntries(this, (JSC::LinkBuffer *)&v263, v119, v120, v121, v122, v123, v124);
    if (HIBYTE(word_1ECF4C286) || BYTE1(dword_1ECF4C28A))
    {
      v125 = (JSC::DFG::Graph **)*((_QWORD *)this + 45);
      v126 = atomic_load(&WTF::initializeLogFile(void)::once);
      if (v126 != -1)
      {
        v261 = &v252;
        v254 = &v261;
        std::__call_once(&WTF::initializeLogFile(void)::once, &v254, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
      }
      JSC::DFG::Disassembler::dump(v125, (WTF::PrintStream *)WTF::s_file, (JSC::LinkBuffer *)&v263);
      BYTE1(v270) = 1;
    }
    v127 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 24) + 112);
    if (v127)
      JSC::DFG::Disassembler::reportToProfiler(*((JSC::DFG::Graph ***)this + 45), v127, &v263);
    if (byte_1ECF4C288 | HIBYTE(word_1ECF4C286))
    {
      v202 = 1;
    }
    else
    {
      if (!BYTE1(dword_1ECF4C28A) && !byte_1ECF4C289)
      {
        if (DWORD1(v273))
        {
          v191 = (uint64_t *)*((_QWORD *)&start + 1);
          v192 = 8 * DWORD1(v273);
          do
          {
            v193 = *v191++;
            (*(void (**)(uint64_t, JSC::ExecutableAllocator **))(*(_QWORD *)v193 + 16))(v193, &v263);
            v192 -= 8;
          }
          while (v192);
        }
        p_start = &start;
        if (HIDWORD(v274))
        {
          v196 = (uint64_t *)*((_QWORD *)&v273 + 1);
          v197 = 8 * HIDWORD(v274);
          do
          {
            v198 = *v196++;
            (*(void (**)(uint64_t, JSC::ExecutableAllocator **))(*(_QWORD *)v198 + 16))(v198, &v263);
            v197 -= 8;
          }
          while (v197);
        }
        v129 = v271;
        v130 = len;
        *((_QWORD *)JSC::LinkBuffer::s_profileCummulativeLinkedSizes + v271) += len;
        ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v129);
        sys_icache_invalidate((void *)start, v130);
        v138 = (unsigned int *)v263;
        if (v263)
        {
          do
            v250 = __ldaxr(v138);
          while (__stlxr(v250 + 1, v138));
          p_start = (__int128 *)(v138 + 2);
        }
        v139 = *(_QWORD *)p_start;
        v261 = (uint64_t *)v139;
        v262 = (JSC::ExecutableMemoryHandle *)v138;
        if (byte_1ECF4C2A2)
          JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v263, (uint64_t)&v261, 0, 0);
        v254 = (uint64_t **)v139;
        v255 = 0;
        if (!v138)
          goto LABEL_87;
        do
          v140 = __ldaxr(v138);
        while (__stlxr(v140 + 1, v138));
        v141 = (unsigned int *)v255;
        v255 = (JSC::ExecutableMemoryHandle *)v138;
        if (v141)
        {
          do
          {
            v142 = __ldaxr(v141);
            v143 = v142 - 1;
          }
          while (__stlxr(v143, v141));
          if (!v143)
          {
            atomic_store(1u, v141);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v141, (uint64_t)v131, v132, v133, v134, v135, v136, v137);
            WTF::fastFree(v241, v242, v243, v244, v245, v246, v247, v248);
          }
        }
        v144 = (unsigned int *)v262;
        v262 = 0;
        if (!v144)
          goto LABEL_87;
        do
        {
          v145 = __ldaxr(v144);
          v146 = v145 - 1;
        }
        while (__stlxr(v146, v144));
        if (v146)
        {
LABEL_87:
          v147 = (_QWORD *)*((_QWORD *)this + 46);
          v148 = v254;
          v149 = (unsigned int *)v255;
          if (v255)
          {
            do
              v150 = __ldaxr(v149);
            while (__stlxr(v150 + 1, v149));
            if (!v147[2])
            {
              v151 = v254;
              v147[2] = v148;
              do
                v152 = __ldaxr(v149);
              while (__stlxr(v152 + 1, v149));
LABEL_92:
              v153 = (unsigned int *)v147[3];
              v147[3] = v149;
              if (v153)
              {
                do
                {
                  v154 = __ldaxr(v153);
                  v155 = v154 - 1;
                }
                while (__stlxr(v155, v153));
                if (!v155)
                {
                  atomic_store(1u, v153);
                  JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v153, (uint64_t)v131, v132, v133, v134, v135, v136, v137);
                  WTF::fastFree(v217, v218, v219, v220, v221, v222, v223, v224);
                }
              }
              v147[4] = v151;
              if (v149)
              {
                do
                {
                  v156 = __ldaxr(v149);
                  v157 = v156 - 1;
                }
                while (__stlxr(v157, v149));
                if (!v157)
                {
                  atomic_store(1u, v149);
                  JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v149, (uint64_t)v131, v132, v133, v134, v135, v136, v137);
                  WTF::fastFree(v225, v226, v227, v228, v229, v230, v231, v232);
                }
              }
              v158 = *((_QWORD *)this + 704);
              *((_QWORD *)this + 704) = 0;
              v159 = *((unsigned int *)this + 1411);
              *((_QWORD *)this + 705) = 0;
              if ((_DWORD)v159)
              {
                v160 = (_DWORD *)WTF::fastMalloc((WTF *)(14 * v159 + 4));
                v161 = v160;
                v162 = 0;
                *v160 = v159;
                do
                {
                  v163 = (char *)v160 + v162;
                  v164 = *(_QWORD *)(v158 + v162);
                  *(_QWORD *)(v163 + 10) = *(_QWORD *)(v158 + v162 + 6);
                  *(_QWORD *)(v163 + 4) = v164;
                  v162 += 14;
                }
                while (14 * v159 != v162);
              }
              else
              {
                v161 = 0;
              }
              if (v158)
                WTF::fastFree(v158, v131, v132, v133, v134, v135, v136, v137);
              v165 = *((_QWORD *)this + 46);
              v166 = *(_QWORD *)(v165 + 312);
              *(_QWORD *)(v165 + 312) = v161;
              if (v166)
                WTF::fastFree(v166, v131, v132, v133, v134, v135, v136, v137);
              v167 = *(_QWORD *)(*((_QWORD *)this + 495) + 24);
              v168 = *((_QWORD *)this + 46);
              *((_QWORD *)this + 46) = 0;
              v176 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
              *v176 = off_1E358E4F8;
              v176[1] = v167;
              v176[2] = v168;
              v176[3] = 1;
              v177 = *(_QWORD *)(*((_QWORD *)this + 495) + 24);
              v178 = *(_QWORD *)(v177 + 120);
              *(_QWORD *)(v177 + 120) = v176;
              if (v178)
                (*(void (**)(uint64_t))(*(_QWORD *)v178 + 8))(v178);
              v179 = (unsigned int *)v255;
              v255 = 0;
              if (v179)
              {
                do
                {
                  v180 = __ldaxr(v179);
                  v181 = v180 - 1;
                }
                while (__stlxr(v181, v179));
                if (!v181)
                {
                  atomic_store(1u, v179);
                  JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v179, (uint64_t)v169, v170, v171, v172, v173, v174, v175);
                  WTF::fastFree(v233, v234, v235, v236, v237, v238, v239, v240);
                }
              }
              goto LABEL_113;
            }
          }
          else if (!v147[2])
          {
            v147[2] = v254;
            v151 = v148;
            goto LABEL_92;
          }
          __break(0xC471u);
          goto LABEL_174;
        }
        atomic_store(1u, v144);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v144, (uint64_t)v131, v132, v133, v134, v135, v136, v137);
LABEL_158:
        WTF::fastFree((unint64_t)v204, v131, v132, v133, v134, v135, v136, v137);
        goto LABEL_87;
      }
      v202 = BYTE1(dword_1ECF4C28A) != 0;
    }
    v252 = *((_QWORD *)this + 42);
    v253 = 4;
    WTF::toCString<JSC::CodeBlockWithJITType>(&v252, (uint64_t *)&v261);
    if (v261)
      v203 = (uint64_t)(v261 + 2);
    else
      v203 = 0;
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)357,char const*>((uint64_t)&v263, v202, 0, 0, "DFG JIT code for %s", v203, &v254);
    v204 = v261;
    v261 = 0;
    if (!v204)
      goto LABEL_87;
    if (*(_DWORD *)v204 != 1)
    {
      --*(_DWORD *)v204;
      goto LABEL_87;
    }
    goto LABEL_158;
  }
  v199 = *(_QWORD *)(*((_QWORD *)this + 495) + 24);
  v200 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  JSC::DFG::FailedFinalizer::FailedFinalizer(v200, v199);
  v201 = *(_QWORD *)(v199 + 120);
  *(_QWORD *)(v199 + 120) = v200;
  if (v201)
    (*(void (**)(uint64_t))(*(_QWORD *)v201 + 8))(v201);
LABEL_113:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v263, v169, v170, v171, v172, v173, v174, v175);
  v189 = v258;
  if (v260 != (_BYTE *)v258 && v258 != 0)
  {
    v258 = 0;
    LODWORD(v259) = 0;
    WTF::fastFree((unint64_t)v189, v182, v183, v184, v185, v186, v187, v188);
  }
}

void JSC::DFG::emitStackOverflowCheck(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int *v32;
  int *v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t *v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;

  v10 = JSC::DFG::Graph::requiredRegisterCountForExecutionAndExit(*(JSC::DFG::Graph **)(a1 + 352), a2, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::add64(a1, (-8 * v10), 29, 1, v11, v12, v13, v14);
  if (dword_1ECF4C250 < (8 * v10))
  {
    JSC::MacroAssemblerARM64::branch64(a1, 8, 1, 29, v16, v17, v18, v19, (uint64_t)&v44);
    v36 = v44;
    if (v44 != -1)
    {
      v37 = a2[3];
      if ((_DWORD)v37 == a2[2])
      {
        v38 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, (void *)(v37 + 1), (unint64_t)&v44, v15, v16, v17, v18, v19);
        v40 = *v38;
        v39 = (uint64_t *)(v38 + 1);
        v36 = v40;
        LODWORD(v37) = a2[3];
      }
      else
      {
        v39 = &v45;
      }
      v41 = *(_QWORD *)a2 + 12 * v37;
      *(_DWORD *)v41 = v36;
      *(_QWORD *)(v41 + 4) = *v39;
      ++a2[3];
    }
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197B65BACLL);
  }
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 16) + 8;
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load64(a1, v20, *(char *)(a1 + 272), v15, v16, v17, v18, v19);
  JSC::MacroAssemblerARM64::branch64(a1, 8, 16, 1, v21, v22, v23, v24, (uint64_t)&v42);
  v30 = v42;
  if (v42 != -1)
  {
    v31 = a2[3];
    if ((_DWORD)v31 == a2[2])
    {
      v32 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, (void *)(v31 + 1), (unint64_t)&v42, v25, v26, v27, v28, v29);
      v34 = *v32;
      v33 = v32 + 1;
      v30 = v34;
      LODWORD(v31) = a2[3];
    }
    else
    {
      v33 = &v43;
    }
    v35 = *(_QWORD *)a2 + 12 * v31;
    *(_DWORD *)v35 = v30;
    *(_QWORD *)(v35 + 4) = *(_QWORD *)v33;
    ++a2[3];
  }
}

uint64_t *JSC::CodeOrigin::CodeOrigin(uint64_t *this, const JSC::CodeOrigin *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;

  v2 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v3 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v4 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v4 != 0x3FFFFFFF)
        ? (v5 = (_DWORD)v4 == -1)
        : (v5 = 1),
          v5))
    {
      v6 = 2;
    }
    else if (v4 >> 28)
    {
      v9 = this;
      v7 = v3;
      v8 = v4;
      v3 = WTF::fastMalloc((WTF *)0x10);
      this = v9;
      *(_QWORD *)v3 = v7;
      *(_DWORD *)(v3 + 8) = v8;
      v6 = 1;
    }
    else
    {
      v6 = v3;
      v3 = v4 << 36;
    }
    v2 = v3 | v6;
  }
  *this = v2;
  return this;
}

unsigned int *JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v8 = result[3];
  if ((_DWORD)v8)
  {
    v10 = result;
    v11 = 0;
    v12 = 0;
    v13 = 12 * v8;
    while (v12 < v10[3])
    {
      result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)v10 + v11), a2, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v13 == v11)
        return result;
    }
    __break(0xC471u);
  }
  return result;
}

JSC::ARM64LogicalImmediate *JSC::DFG::JITCompiler::emitStoreCodeOrigin(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  JSC::ARM64LogicalImmediate *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  JSC::AssemblerBuffer *v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;

  v9 = *a2;
  if ((*a2 & 1) == 0)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 80);
LABEL_3:
    v11 = 1;
    v12 = v9;
    goto LABEL_4;
  }
  v45 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
  if ((v9 & 2) != 0
    || ((v46 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v46 != 0x3FFFFFFF)
      ? (v47 = (_DWORD)v46 == -1)
      : (v47 = 1),
        v47))
  {
    v48 = 2;
  }
  else if (v46 >> 28)
  {
    v61 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v61 = v45;
    *(_DWORD *)(v61 + 8) = v46;
    v48 = 1;
    v45 = v61;
  }
  else
  {
    v48 = v45;
    v45 = v46 << 36;
  }
  v9 = v45 | v48;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 80);
  if ((v9 & 1) == 0)
    goto LABEL_3;
  v49 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
  if ((v9 & 2) != 0
    || ((v50 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v50 != 0x3FFFFFFF)
      ? (v51 = (_DWORD)v50 == -1)
      : (v51 = 1),
        v51))
  {
    v52 = 2;
  }
  else if (v50 >> 28)
  {
    v62 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v62 = v49;
    *(_DWORD *)(v62 + 8) = v50;
    v52 = 1;
    v49 = v62;
  }
  else
  {
    v52 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    v49 = v50 << 36;
  }
  v11 = 0;
  v12 = v49 | v52;
LABEL_4:
  v68 = v12;
  v13 = (uint64_t *)(v10 + 8);
  v14 = *(unsigned int *)(v10 + 20);
  if (!(_DWORD)v14)
  {
    v15 = 0;
LABEL_13:
    if ((_DWORD)v14 == *(_DWORD *)(v10 + 16))
    {
      v34 = (uint64_t *)WTF::Vector<JSC::CodeOrigin,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v15 + 1, (unint64_t)&v68);
      v35 = *(unsigned int *)(v10 + 20);
      LODWORD(v14) = *(_DWORD *)(v10 + 20);
      v36 = *(_QWORD *)(v10 + 8);
      v37 = *v34;
      if ((*v34 & 1) != 0)
      {
        v65 = *(unsigned int *)(v10 + 20);
        v66 = *(_QWORD *)(v10 + 8);
        v57 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
        if ((v37 & 2) != 0
          || ((v58 = *(unsigned int *)((v37 & 0xFFFFFFFF8) + 8), (_DWORD)v58 != 0x3FFFFFFF)
            ? (v59 = (_DWORD)v58 == -1)
            : (v59 = 1),
              v59))
        {
          v60 = 2;
        }
        else if (v58 >> 28)
        {
          v64 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v64 = v57;
          *(_DWORD *)(v64 + 8) = v58;
          LODWORD(v14) = *(_DWORD *)(v10 + 20);
          v60 = 1;
          v57 = v64;
        }
        else
        {
          v60 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
          v57 = v58 << 36;
        }
        v37 = v57 | v60;
        v35 = v65;
        v36 = v66;
      }
      *(_QWORD *)(v36 + 8 * v35) = v37;
    }
    else
    {
      v19 = *v13;
      if ((v12 & 1) != 0)
      {
        v53 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
        if ((v12 & 2) != 0
          || ((v54 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v54 != 0x3FFFFFFF)
            ? (v55 = (_DWORD)v54 == -1)
            : (v55 = 1),
              v55))
        {
          v56 = 2;
        }
        else if (v54 >> 28)
        {
          v63 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
          v67 = v15;
          v53 = WTF::fastMalloc((WTF *)0x10);
          v15 = v67;
          *(_QWORD *)v53 = v63;
          *(_DWORD *)(v53 + 8) = v54;
          LODWORD(v14) = *(_DWORD *)(v10 + 20);
          v56 = 1;
        }
        else
        {
          v56 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
          v53 = v54 << 36;
        }
        v12 = v53 | v56;
      }
      *(_QWORD *)(v19 + 8 * v15) = v12;
    }
    LODWORD(v14) = v14 + 1;
    *(_DWORD *)(v10 + 20) = v14;
    v12 = v68;
    goto LABEL_17;
  }
  v15 = *(unsigned int *)(v10 + 20);
  v16 = *(_QWORD *)(*v13 + 8 * v14 - 8);
  if (v16 != v12)
  {
    if ((v16 & 2) != 0)
    {
      LODWORD(v17) = -1;
    }
    else if ((v16 & 1) != 0)
    {
      LODWORD(v17) = *(_DWORD *)((v16 & 0xFFFFFFFF8) + 8);
    }
    else
    {
      v17 = v16 >> 36;
    }
    if ((v12 & 2) != 0)
    {
      LODWORD(v18) = -1;
    }
    else if ((v12 & 1) != 0)
    {
      LODWORD(v18) = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8);
    }
    else
    {
      v18 = v12 >> 36;
    }
    if ((_DWORD)v17 != (_DWORD)v18)
      goto LABEL_13;
    v43 = (_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 1) != 0)
      v43 = (_QWORD *)*v43;
    v44 = (_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 1) != 0)
      v44 = (_QWORD *)*v44;
    if (v43 != v44)
      goto LABEL_13;
  }
LABEL_17:
  v20 = (JSC::ARM64LogicalImmediate *)(v14 - 1);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if ((v11 & 1) == 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)v20)
  {
    v29 = *(_DWORD *)(a1 + 200);
    v28 = (unsigned int *)(a1 + 200);
    v27 = v29;
    v30 = (JSC::AssemblerBuffer *)(v28 - 36);
    v31 = v29 + 4;
    v32 = *(v28 - 2);
    v33 = -1207811137;
    goto LABEL_42;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197B66044);
  }
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) & *(_DWORD *)(a1 + 288)) == 0)
    goto LABEL_39;
  v21 = *(_QWORD *)(a1 + 280);
  if (v21 != (int)v20)
  {
    v22 = JSC::ARM64LogicalImmediate::create32(v20);
    if (v22 != -1)
    {
      v23 = *(char *)(a1 + 272) | (v22 << 10);
      v24 = 838861792;
LABEL_25:
      v25 = v23 | v24;
      v26 = *(_DWORD *)(a1 + 200);
      if (v26 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v26 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v26) = v25;
      *(_DWORD *)(a1 + 200) += 4;
      goto LABEL_40;
    }
    v38 = v21 ^ (unsigned __int16)v20;
    if (!((v21 ^ (unint64_t)(int)v20) >> 32))
    {
      if ((v20 & 0xFFFF0000) != (unint64_t)(v21 & 0xFFFF0000))
      {
        v39 = ((v20 & 0xFFFF0000) >> 11) | *(_BYTE *)(a1 + 272) & 0x1F | 0x72A00000;
        v40 = *(_DWORD *)(a1 + 200);
        if (v40 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v40 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v40) = v39;
        *(_DWORD *)(a1 + 200) += 4;
      }
      if (!v38)
        goto LABEL_40;
      v23 = *(_BYTE *)(a1 + 272) & 0x1F | (32 * (unsigned __int16)v20);
      v24 = 1920991232;
      goto LABEL_25;
    }
LABEL_39:
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, v20, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
LABEL_40:
    *(_QWORD *)(a1 + 280) = (int)v20;
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) |= *(_DWORD *)(a1 + 288);
  }
  v33 = -1207811152;
  v41 = *(_DWORD *)(a1 + 200);
  v28 = (unsigned int *)(a1 + 200);
  v27 = v41;
  v30 = (JSC::AssemblerBuffer *)(v28 - 36);
  v31 = v41 + 4;
  v32 = *(v28 - 2);
LABEL_42:
  if (v31 > v32)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v30, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v27 = *v28;
  }
  *(_DWORD *)(*(_QWORD *)v30 + v27) = v33;
  *v28 += 4;
  return v20;
}

void JSC::DFG::SpeculativeJIT::runSlowPathGenerators(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  WTF::StringImpl *v28;
  int v29;
  JSC::AssemblerBuffer *v30;
  JSC::JITSizeStatistics *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  WTF::StringImpl *v66;
  int v67;
  JSC::JITSizeStatistics *v68;
  WTF::AtomStringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  JSC::AssemblerBuffer *v100;
  int v101;
  unint64_t v102;
  int v103;
  unint64_t v104;
  int v105;
  WTF::StringImpl *v106;
  __int128 v107;
  const char *v108;
  uint64_t v109;

  v12 = *(unsigned int *)(a1 + 5668);
  if ((_DWORD)v12)
  {
    v13 = *(uint64_t **)(a1 + 5656);
    v14 = &v13[v12];
    v15 = (_BYTE *)(a1 + 5776);
    v8 = a1 + 5472;
    while (1)
    {
      v16 = *v13;
      if (*((_BYTE *)a2 + 16))
      {
        LODWORD(v108) = *(_DWORD *)(a1 + 200);
        JSC::PCToCodeOriginMapBuilder::appendItemSlow((uint64_t)a2, (unsigned int *)&v108, (unint64_t *)(v16 + 24));
        v16 = *v13;
      }
      v17 = BYTE4(qword_1ECF4C780);
      if (BYTE4(qword_1ECF4C780))
        break;
      v9 &= 0xFFFFFFFFFFFFFF00;
LABEL_7:
      v18 = *(_DWORD *)(a1 + 200);
      if (v18 < *(_DWORD *)(a1 + 52))
      {
        v30 = (JSC::AssemblerBuffer *)(a1 + 56);
        do
        {
          if ((v18 + 4) > *(_DWORD *)(a1 + 192))
          {
            v100 = v30;
            JSC::AssemblerBuffer::outOfLineGrow(v30, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v30 = v100;
            v18 = *(_DWORD *)(a1 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = -721215457;
          v18 = *(_DWORD *)(a1 + 200) + 4;
          *(_DWORD *)(a1 + 200) = v18;
        }
        while (v18 < *(_DWORD *)(a1 + 52));
      }
      *(_DWORD *)(a1 + 208) = 0;
      *(_DWORD *)(v16 + 16) = v18;
      *(_QWORD *)(a1 + 3976) = *(_QWORD *)(v16 + 8);
      *(_DWORD *)(a1 + 5772) = *(_DWORD *)(v16 + 20);
      *v15 = 1;
      JSC::DFG::NodeOrigin::operator=((uint64_t *)(a1 + 5472), (uint64_t *)(v16 + 24), a3, a4, a5, a6, a7, a8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 24))(v16, a1);
      if (*v15)
        *v15 = 0;
      if (v17)
      {
        v31 = *(JSC::JITSizeStatistics **)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 16) + 41440);
        v104 = v9;
        v105 = v101;
        JSC::JITSizeStatistics::markEnd(v31, (Marker *)&v104, (JSC::CCallHelpers *)a1, *(JSC::JITPlan **)(*(_QWORD *)(a1 + 3960) + 24));
        v104 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v9, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
          }
          else
          {
            *(_DWORD *)v9 -= 2;
          }
          v9 = 0;
        }
      }
      if (++v13 == v14)
        goto LABEL_12;
    }
    v25 = *(unsigned __int16 *)(*(_QWORD *)(v16 + 8) + 18);
    v108 = "DFG_slow_";
    v109 = 10;
    v107 = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * v25];
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v108, (uint64_t)&v107, (int **)&v106);
    v9 = (unint64_t)v106;
    if (!v106)
    {
      __break(0xC471u);
      goto LABEL_58;
    }
    v26 = *(_DWORD *)v106;
    *(_DWORD *)v106 += 4;
    v101 = *(_DWORD *)(a1 + 200);
    v27 = v26 + 2;
    if (v27)
    {
      *(_DWORD *)v9 = v27;
      v106 = 0;
      v28 = (WTF::StringImpl *)v9;
    }
    else
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      v28 = v106;
      v106 = 0;
      if (!v28)
      {
LABEL_29:
        v16 = *v13;
        goto LABEL_7;
      }
      v27 = *(_DWORD *)v28;
    }
    v29 = v27 - 2;
    if (v29)
    {
      *(_DWORD *)v28 = v29;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v28, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    goto LABEL_29;
  }
LABEL_12:
  v19 = *(unsigned int *)(a1 + 5748);
  if ((_DWORD)v19)
  {
    v20 = (_BYTE *)(a1 + 5776);
    v21 = 24 * v19;
    v22 = (_DWORD *)(*(_QWORD *)(a1 + 5736) + 16);
    do
    {
      v23 = *((_QWORD *)v22 - 1);
      *(_QWORD *)(a1 + 3976) = v23;
      *(_DWORD *)(a1 + 5772) = *v22;
      *v20 = 1;
      if (*((_BYTE *)a2 + 16))
      {
        LODWORD(v108) = *(_DWORD *)(a1 + 200);
        JSC::PCToCodeOriginMapBuilder::appendItemSlow((uint64_t)a2, (unsigned int *)&v108, (unint64_t *)v23);
      }
      v24 = BYTE4(qword_1ECF4C780);
      if (BYTE4(qword_1ECF4C780))
      {
        v56 = *(unsigned __int16 *)(v23 + 18);
        v108 = "DFG_slow_";
        v109 = 10;
        v107 = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * v56];
        WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v108, (uint64_t)&v107, (int **)&v106);
        v8 = (unint64_t)v106;
        if (!v106)
        {
          __break(0xC471u);
LABEL_58:
          JUMPOUT(0x197B665D0);
        }
        v64 = *(_DWORD *)v106;
        *(_DWORD *)v106 += 4;
        v101 = *(_DWORD *)(a1 + 200);
        v65 = v64 + 2;
        if (v65)
        {
          *(_DWORD *)v8 = v65;
          v106 = 0;
          v66 = (WTF::StringImpl *)v8;
          goto LABEL_46;
        }
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v57, v58, v59, v60, v61, v62, v63);
        WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
        v66 = v106;
        v106 = 0;
        if (v66)
        {
          v65 = *(_DWORD *)v66;
LABEL_46:
          v67 = v65 - 2;
          if (v67)
          {
            *(_DWORD *)v66 = v67;
          }
          else
          {
            WTF::StringImpl::~StringImpl(v66, v57, v58, v59, v60, v61, v62, v63);
            WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
          }
        }
      }
      else
      {
        v8 &= 0xFFFFFFFFFFFFFF00;
      }
      (*(void (**)(_QWORD))(**((_QWORD **)v22 - 2) + 16))(*((_QWORD *)v22 - 2));
      if (*v20)
        *v20 = 0;
      if (v24)
      {
        v68 = *(JSC::JITSizeStatistics **)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 16) + 41440);
        v102 = v8;
        v103 = v101;
        JSC::JITSizeStatistics::markEnd(v68, (Marker *)&v102, (JSC::CCallHelpers *)a1, *(JSC::JITPlan **)(*(_QWORD *)(a1 + 3960) + 24));
        v102 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v69, v70, v71, v72, v73, v74, v75);
            WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
          }
          else
          {
            *(_DWORD *)v8 -= 2;
          }
          v8 = 0;
        }
      }
      v22 += 6;
      v21 -= 24;
    }
    while (v21);
  }
}

void JSC::DFG::SpeculativeJIT::linkOSREntries(JSC::DFG::SpeculativeJIT *this, JSC::LinkBuffer *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  JSC::DFG::OSREntryData *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  JSC::DFG::OSREntryData *v57;
  unint64_t v58;
  JSC::DFG::OSREntryData *v59;
  _BOOL8 isEmpty;
  WTF::PrintStream *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  WTF *v67;
  JSC::DFG::OSREntryData *v68[2];
  WTF *v69;
  int v70;
  int v71;
  int v72;

  v9 = *((_QWORD *)this + 495);
  if (*(_DWORD *)(v9 + 60))
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v68[0] = 0;
      v13 = *(JSC::DFG::OSREntryData **)(*(_QWORD *)(v9 + 48) + 8 * v11);
      v68[0] = v13;
      if (v13)
      {
        if (*((_BYTE *)v13 + 19))
        {
          if (*((_BYTE *)v13 + 20))
          {
LABEL_52:
            v62 = WTF::HashMap<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::find((uint64_t *)(v9 + 440), v68);
            WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<JSC::DFG::SpeculativeJIT::linkOSREntries(JSC::LinkBuffer &)::$_0>(&v69, v62 + 1);
            if (*((unsigned int *)this + 1315) <= v12)
            {
LABEL_56:
              __break(0xC471u);
              JUMPOUT(0x197B6692CLL);
            }
            v72 = *(_DWORD *)(*((_QWORD *)this + 656) + 4 * v12);
            JSC::DFG::JITCompiler::noticeCatchEntrypoint((uint64_t)this, (uint64_t)v68[0], &v72, a2, (uint64_t)&v69, v63, v64, v65);
            v67 = v69;
            if (v69)
            {
              v69 = 0;
              v70 = 0;
              WTF::fastFree((unint64_t)v67, v66, a3, a4, a5, a6, a7, a8);
            }
          }
          else
          {
            if (*((unsigned int *)this + 1315) <= v12)
              goto LABEL_56;
            v71 = *(_DWORD *)(*((_QWORD *)this + 656) + 4 * v12);
            JSC::DFG::JITCompiler::noticeOSREntry((uint64_t)this, (unint64_t)v13, &v71, a2, a5, a6, a7, a8);
          }
          ++v12;
          v9 = *((_QWORD *)this + 495);
          goto LABEL_6;
        }
        if (*((_BYTE *)v13 + 20))
          goto LABEL_52;
      }
LABEL_6:
      ++v11;
    }
    while (v11 < *(unsigned int *)(v9 + 60));
  }
  v14 = *((_QWORD *)this + 46);
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v17 = *((unsigned int *)this + 959);
    v18 = 126 - 2 * __clz(v17);
    if ((_DWORD)v17)
      v19 = v18;
    else
      v19 = 0;
    std::__introsort<std::_ClassicAlgPolicy,JSC::DFG::JITCode::finalizeOSREntrypoints(WTF::Vector<JSC::DFG::OSREntryData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::OSREntryData*,false>(*((uint64_t **)this + 478), (uint64_t *)(*((_QWORD *)this + 478) + (v17 << 6)), v19, 1, a5, a6, a7, a8);
    WTF::FixedVector<JSC::DFG::OSREntryData>::operator=<0ul,WTF::CrashOnOverflow>((unsigned int **)(v14 + 256), (unint64_t *)this + 478, v20, v21, v22, v23, v24, v25);
    do
    {
      v32 = __ldaxr(v15);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v15));
    if (!v33)
    {
      atomic_store(1u, (unsigned int *)(v14 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    }
  }
  else
  {
    JSC::DFG::JITCode::finalizeOSREntrypoints(0, (uint64_t)this + 3824, a3, a4, a5, a6, a7, a8);
  }
  v34 = *((_QWORD *)this + 46);
  if (v34)
  {
    v35 = (unsigned int *)(v34 + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 + 1, v35));
    v37 = *((_QWORD *)this + 495);
    v38 = v37 + 880;
    v39 = *(_QWORD *)(v37 + 880);
    v40 = *(unsigned int *)(v37 + 892);
    v41 = 126 - 2 * __clz(v40);
    if ((_DWORD)v40)
      v42 = v41;
    else
      v42 = 0;
    std::__introsort<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*,false>(v39, (_QWORD *)(v39 + 24 * v40), v42, 1, v28, v29, v30, v31);
    WTF::FixedVector<JSC::DFG::CatchEntrypointData>::operator=<0ul,WTF::CrashOnOverflow>((unsigned int **)(v34 + 120), v38, v43, v44, v45, v46, v47, v48);
    do
    {
      v49 = __ldaxr(v35);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v35));
    if (!v50)
    {
      atomic_store(1u, (unsigned int *)(v34 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 32))(v34);
    }
  }
  else
  {
    JSC::DFG::CommonData::finalizeCatchEntrypoints(40, *((_QWORD *)this + 495) + 880, v26, v27, v28, v29, v30, v31);
  }
  if (qword_1ECF4C32A | byte_1ECF4C323)
  {
    JSC::DumpContext::DumpContext(&v69);
    WTF::dataLog<char [16]>("OSR Entries:\n");
    v51 = *((_QWORD *)this + 46);
    if (v51)
    {
      v52 = (unsigned int *)(v51 + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 + 1, v52));
      do
      {
        v54 = __ldaxr(v52);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v52));
      if (!v55)
      {
        atomic_store(1u, (unsigned int *)(v51 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 32))(v51);
      }
    }
    v56 = *(unsigned int **)(v51 + 256);
    if (v56)
      v57 = (JSC::DFG::OSREntryData *)(v56 + 2);
    else
      v57 = 0;
    if (v56)
      v58 = (unint64_t)&v56[16 * (unint64_t)*v56 + 2];
    else
      v58 = 0;
    if (v57 != (JSC::DFG::OSREntryData *)v58)
    {
      v59 = v57;
      do
      {
        v68[0] = v57;
        v68[1] = (JSC::DFG::OSREntryData *)&v69;
        WTF::dataLog<char [5],WTF::ValueInContext<JSC::DFG::OSREntryData,JSC::DumpContext>,char [2]>(v68);
        v59 = (JSC::DFG::OSREntryData *)((char *)v59 + 64);
        v57 = (JSC::DFG::OSREntryData *)((char *)v57 + 64);
      }
      while (v59 != (JSC::DFG::OSREntryData *)v58);
    }
    isEmpty = JSC::DumpContext::isEmpty((JSC::DumpContext *)&v69);
    if (!isEmpty)
    {
      v61 = (WTF::PrintStream *)WTF::dataFile((WTF *)isEmpty);
      JSC::DumpContext::dump((JSC::DumpContext *)&v69, v61, "");
    }
    JSC::DumpContext::~DumpContext((JSC::DumpContext *)&v69);
  }
}

void JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)357,char const*>(uint64_t a1@<X0>, char a2@<W1>, char *a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  JSC::ExecutableMemoryHandle *v40;

  JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl(a1, a2, a3, a4, a5, &v39, a6);
  v15 = (unsigned int *)v40;
  *a7 = v39;
  a7[1] = 0;
  if (v15)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v17 = (unsigned int *)a7[1];
    a7[1] = v15;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v17, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
      }
    }
    v20 = (unsigned int *)v40;
    v40 = 0;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v20, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
      }
    }
  }
}

void WTF::toCString<JSC::CodeBlockWithJITType>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (**v15)(WTF::StringPrintStream *__hidden);
  _BYTE *v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v15 = off_1E3572250;
  v16 = v18;
  v17 = xmmword_199122F80;
  v18[0] = 0;
  JSC::CodeBlock::dumpAssumingJITType(*a1);
  WTF::PrintStream::end((WTF::PrintStream *)&v15);
  v11 = v16;
  v10 = v17;
  *a2 = 0;
  if (!v11)
  {
    v14 = 0;
LABEL_6:
    WTF::fastFree(v14, v3, v4, v5, v6, v7, v8, v9);
    return;
  }
  if (v10 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x197B66AF0);
  }
  v12 = WTF::fastMalloc((WTF *)(v10 + 17));
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = v10;
  *a2 = v12;
  v13 = v12 + 16;
  memcpy((void *)(v12 + 16), v11, v10);
  *(_BYTE *)(v13 + v10) = 0;
  v14 = (unint64_t)v16;
  if (v16 != v18)
    goto LABEL_6;
}

void WTF::CString::~CString(WTF::CString *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;

  v9 = *(_DWORD **)this;
  *(_QWORD *)this = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v9;
  }
}

void JSC::DFG::SpeculativeJIT::compileFunction(JSC::DFG::SpeculativeJIT *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int j;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  size_t v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  WTF *v93;
  unsigned int *v94;
  __int16 v95;
  unsigned __int8 *v96;
  size_t v97;
  int v98;
  _BYTE *v99;
  char v100;
  __int16 v101;
  char v102;
  __int16 v103;
  size_t v104;
  int v105;
  char *v106;
  char v107;
  __int16 v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  size_t v113;
  int v114;
  char v115;
  uint64_t v116;
  int v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int *v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  _DWORD *v158;
  uint64_t v159;
  _DWORD *v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  pthread_key_t *v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  WTF *v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  JSC::DFG::Graph **v189;
  unint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  unint64_t v194;
  _QWORD *v195;
  WTF **p_start;
  uint64_t v197;
  size_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int *v206;
  WTF *v207;
  unsigned int v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int *v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  unint64_t v218;
  uint64_t v219;
  _DWORD *v220;
  _DWORD *v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  WTF *v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  char v257;
  uint64_t v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int *v266;
  size_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unsigned int *v271;
  WTF *v272;
  unsigned int v273;
  unsigned int *v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int *v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int v281;
  unsigned int v282;
  uint64_t v283;
  uint64_t v284;
  BOOL v285;
  uint64_t v286;
  unint64_t v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  void *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unsigned int v320;
  unsigned int v321;
  uint64_t v322;
  _QWORD *v323;
  unint64_t v324;
  void *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  void *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  void *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  JSC::AssemblerBuffer *i;
  uint64_t v350;
  int v351;
  uint64_t v352;
  int v353;
  unint64_t v354;
  WTF *v355;
  uint64_t v356;
  _BYTE v357[31];
  char v358;
  WTF **v359;
  size_t len[2];
  uint64_t v361;
  WTF *v362;
  _BYTE v363[128];
  unsigned int v364;
  char v365;
  int v366;
  unsigned int v367;
  __int128 start;
  __int128 v369;
  uint64_t v370;
  void (**v371)(WTF::StringPrintStream *__hidden);
  unsigned int *v372;
  __int128 v373;
  _BYTE v374[128];
  uint64_t v375;

  v375 = *MEMORY[0x1E0C80C00];
  v9 = *((_QWORD *)this + 44);
  if (*(_BYTE *)(v9 + 972))
  {
    v320 = *(_DWORD *)(v9 + 968);
    if (v320 <= 1)
      v320 = 1;
    *(_QWORD *)(*((_QWORD *)this + 46) + 224) = JSC::VM::scratchBufferForSize(*(JSC::VM **)(v9 + 16), 8 * v320, a3, a4, a5, a6, a7, a8);
  }
  j = *((_DWORD *)this + 50);
  len[0] = 0;
  if (*((_BYTE *)this + 3952))
  {
    LODWORD(v371) = j;
    JSC::PCToCodeOriginMapBuilder::appendItemSlow((uint64_t)this + 3936, (unsigned int *)&v371, len);
    j = *((_DWORD *)this + 50);
  }
  v11 = *((_QWORD *)this + 45);
  if (v11)
    *(_DWORD *)(v11 + 32) = j;
  for (i = (JSC::DFG::SpeculativeJIT *)((char *)this + 56); j < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = j)
  {
    if ((j + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(i, a2, a3, a4, a5, a6, a7, a8);
      j = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + j) = -721215457;
    j = *((_DWORD *)this + 50) + 4;
  }
  *((_DWORD *)this + 52) = 0;
  v12 = j;
  if ((j + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(i, a2, a3, a4, a5, a6, a7, a8);
    v12 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v12) = -1447068675;
  v13 = *((_DWORD *)this + 50);
  v14 = v13 + 4;
  *((_DWORD *)this + 50) = v13 + 4;
  if ((v13 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(i, a2, a3, a4, a5, a6, a7, a8);
    v14 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v14) = -1862269955;
  v15 = *((_DWORD *)this + 50) + 4;
  *((_DWORD *)this + 50) = v15;
  v16 = *((_QWORD *)this + 44);
  if ((*(_DWORD *)(*(_QWORD *)(v16 + 32) + 32) & 0x80000000) != 0)
  {
    JSC::MacroAssemblerARM64::store8((uint64_t)this, 1, *(_QWORD *)(v16 + 16) + 41452, a4, a5, a6, a7, a8);
    v15 = *((_DWORD *)this + 50);
  }
  for (; v15 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v15)
  {
    if ((v15 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(i, a2, a3, a4, a5, a6, a7, a8);
      v15 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v15) = -721215457;
    v15 = *((_DWORD *)this + 50) + 4;
  }
  *((_DWORD *)this + 52) = 0;
  v355 = (WTF *)v357;
  v356 = 2;
  JSC::DFG::emitStackOverflowCheck((uint64_t)this, &v355, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::add64((uint64_t)this, 16- ((8 * (*(_DWORD *)(*((_QWORD *)this + 495) + 856) + *(_DWORD *)(*((_QWORD *)this + 495) + 860)) + 24) & 0xFFFFFFF0), 29, 31, v17, v18, v19, v20);
  JSC::DFG::JITCompiler::compileSetupRegistersForEntry(this, v21, v22, v23, v24, v25, v26, v27);
  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 24) + 372))
  {
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197B67D7CLL);
    }
    v250 = *((_QWORD *)this + 46) + 344;
    *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v250, *((char *)this + 304), v30, v31, v32, v33, v34);
    v251 = *((_DWORD *)this + 50);
    if (v251 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(i, (uint64_t)v28, v29, v30, v31, v32, v33, v34);
      v251 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v251) = 956301887;
    *((_DWORD *)this + 50) += 4;
  }
  JSC::DFG::SpeculativeJIT::checkArgumentTypes(this, v28, v29, v30, v31, v32, v33, v34);
  v42 = *((_QWORD *)this + 495);
  if (*(_DWORD *)(v42 + 60))
  {
    v43 = 0;
    do
    {
      v44 = *((_QWORD *)this + 45);
      if (v44)
      {
        if (v43 >= *(unsigned int *)(v44 + 52))
        {
          __break(0xC471u);
          JUMPOUT(0x197B67F54);
        }
        *(_DWORD *)(*(_QWORD *)(v44 + 40) + 4 * v43) = *((_DWORD *)this + 50);
      }
      *((_QWORD *)this + 496) = *(_QWORD *)(*(_QWORD *)(v42 + 48) + 8 * v43);
      JSC::DFG::SpeculativeJIT::compileCurrentBlock(this, v35, v36, v37, v38, v39, v40, v41);
      ++v43;
      v42 = *((_QWORD *)this + 495);
    }
    while (v43 < *(unsigned int *)(v42 + 60));
  }
  JSC::DFG::SpeculativeJIT::linkBranches((__int128 *)this, v35, v36, v37, v38, v39, v40, v41);
  v52 = *((_QWORD *)this + 684);
  if ((v52 & 1) != 0)
  {
    v283 = *(_QWORD *)(v52 & 0xFFFFFFFF8);
    if ((v52 & 2) != 0
      || ((v284 = *(unsigned int *)((v52 & 0xFFFFFFFF8) + 8), (_DWORD)v284 != 0x3FFFFFFF)
        ? (v285 = (_DWORD)v284 == -1)
        : (v285 = 1),
          v285))
    {
      v286 = 2;
    }
    else if (v284 >> 28)
    {
      v348 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v348 = v283;
      *(_DWORD *)(v348 + 8) = v284;
      v286 = 1;
      v283 = v348;
    }
    else
    {
      v286 = v283;
      v283 = v284 << 36;
    }
    v52 = v283 | v286;
  }
  v354 = v52;
  if (*((_BYTE *)this + 3952))
  {
    LODWORD(len[0]) = *((_DWORD *)this + 50);
    JSC::PCToCodeOriginMapBuilder::appendItemSlow((uint64_t)this + 3936, (unsigned int *)len, &v354);
  }
  v53 = *((_QWORD *)this + 45);
  if (v53)
    *(_DWORD *)(v53 + 64) = *((_DWORD *)this + 50);
  if ((v52 & 1) != 0 && (v52 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v52 & 0xFFFFFFFF8, v45, v46, v47, v48, v49, v50, v51);
  if (*(_DWORD *)(*((_QWORD *)this + 42) + 28) != 1)
  {
    for (j = *((_DWORD *)this + 50); j < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = j)
    {
      if ((j + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(i, (uint64_t)v45, v46, v47, v48, v49, v50, v51);
        j = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + j) = -721215457;
      j = *((_DWORD *)this + 50) + 4;
    }
    *((_DWORD *)this + 52) = 0;
    v54 = j;
    if ((j + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(i, (uint64_t)v45, v46, v47, v48, v49, v50, v51);
      v54 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v54) = -1447068675;
    v55 = *((_DWORD *)this + 50);
    v56 = v55 + 4;
    *((_DWORD *)this + 50) = v55 + 4;
    if ((v55 + 8) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(i, (uint64_t)v45, v46, v47, v48, v49, v50, v51);
      v56 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v56) = -1862269955;
    v57 = *((_DWORD *)this + 50) + 4;
    *((_DWORD *)this + 50) = v57;
    v58 = *((_QWORD *)this + 44);
    if ((*(_DWORD *)(*(_QWORD *)(v58 + 32) + 32) & 0x80000000) != 0)
    {
      JSC::MacroAssemblerARM64::store8((uint64_t)this, 1, *(_QWORD *)(v58 + 16) + 41452, v47, v48, v49, v50, v51);
      v57 = *((_DWORD *)this + 50);
    }
    v59 = *(unsigned int *)(*((_QWORD *)this + 42) + 28);
    if (v57 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(i, (uint64_t)v45, v46, v47, v48, v49, v50, v51);
      v57 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v57) = -1203633247;
    *((_DWORD *)this + 50) += 4;
    JSC::MacroAssemblerARM64::branch32((uint64_t)this, 2, 1, v59, v48, v49, v50, v51, (uint64_t)len);
    v353 = v15;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)len, (unsigned int *)&v353, (uint64_t)this, v60, v61, v62, v63, v64);
    JSC::AssemblyHelpers::getArityPadding((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 44) + 16), v59, 1, 0, 2, 3, (uint64_t)&v355);
    v352 = 0;
    JSC::DFG::JITCompiler::emitStoreCodeOrigin((uint64_t)this, &v352, v65, v66, v67, v68, v69, v70);
    if ((v352 & 1) != 0 && (v352 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v352 & 0xFFFFFFFF8, v71, v72, v73, v74, v75, v76, v77);
    v78 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 16) + 90440);
    v79 = *(_QWORD *)(v78 + 312);
    v80 = *(unsigned int **)(v78 + 320);
    if (v80)
    {
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 + 1, v80));
    }
    *((_DWORD *)this + 52) = 0;
    v82 = *((_DWORD *)this + 50);
    if (v82 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(i, (uint64_t)v71, v72, v73, v74, v75, v76, v77);
      v82 = *((_DWORD *)this + 50);
    }
    v83 = (_QWORD *)((char *)this + 32);
    *(_DWORD *)(*((_QWORD *)this + 7) + v82) = -1811939328;
    v84 = (*((_DWORD *)this + 50) + 4);
    *((_DWORD *)this + 50) = v84;
    LOBYTE(v361) = -1;
    BYTE3(v361) = 15;
    *(_WORD *)((char *)&v361 + 1) = 65;
    len[0] = v84 - 4;
    len[1] = v79;
    WORD2(v361) = 384;
    v85 = *((unsigned int *)this + 11);
    if ((_DWORD)v85 == *((_DWORD *)this + 10))
    {
      v255 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v83, v85 + 1, (unint64_t)len, v73, v74, v75, v76, v77);
      v86 = *((_QWORD *)this + 4) + 24 * *((unsigned int *)this + 11);
      *(_QWORD *)v86 = 0;
      *(_QWORD *)(v86 + 8) = 0;
      *(_BYTE *)(v86 + 16) = -1;
      v256 = (((*(unsigned __int8 *)(v86 + 19) >> 4) & 0xF) << 20) | 0xF0041;
      *(_WORD *)(v86 + 17) = 65;
      *(_BYTE *)(v86 + 19) = BYTE2(v256);
      *(_WORD *)(v86 + 20) &= 0xFC00u;
      v87 = *(_OWORD *)v255;
      v88 = *(_QWORD *)(v255 + 16);
    }
    else
    {
      v86 = *v83 + 24 * v85;
      v87 = *(_OWORD *)len;
      v88 = v361;
    }
    *(_QWORD *)(v86 + 16) = v88;
    *(_OWORD *)v86 = v87;
    ++*((_DWORD *)this + 11);
    if (v80)
    {
      do
      {
        v89 = __ldaxr(v80);
        v90 = v89 - 1;
      }
      while (__stlxr(v90, v80));
      if (!v90)
      {
        atomic_store(1u, v80);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v80, (uint64_t)v71, v72, v73, v74, v75, v76, v77);
        WTF::fastFree(v312, v313, v314, v315, v316, v317, v318, v319);
      }
    }
    v351 = v15;
    JSC::MacroAssembler::jump((uint64_t)this, (unsigned int *)&v351, v72, v73, v74, v75, v76, v77);
  }
  v91 = HIDWORD(v356);
  if (HIDWORD(v356))
  {
    v92 = 0;
    do
    {
      if (v92 >= HIDWORD(v356))
      {
        __break(0xC471u);
        JUMPOUT(0x197B67F38);
      }
      v93 = v355;
      v94 = (unsigned int *)((char *)v355 + 12 * v92);
      *((_DWORD *)this + 52) = 0;
      v96 = (unsigned __int8 *)(v94 + 2);
      v95 = *((unsigned __int8 *)v94 + 8);
      switch(*((_BYTE *)v94 + 8))
      {
        case 0x83:
        case 0x87:
          v97 = *v94;
          v98 = *((_DWORD *)this + 50);
          if (v98 < *((_DWORD *)this + 13))
          {
            do
            {
              if ((v98 + 4) > *((_DWORD *)this + 48))
              {
                JSC::AssemblerBuffer::outOfLineGrow(i, (uint64_t)v45, v46, v47, v48, v49, v50, v51);
                v98 = *((_DWORD *)this + 50);
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v98) = -721215457;
              v98 = *((_DWORD *)this + 50) + 4;
              *((_DWORD *)this + 50) = v98;
            }
            while (v98 < *((_DWORD *)this + 13));
            v95 = *v96;
          }
          v99 = (char *)v93 + 12 * v92;
          v100 = v99[9];
          v101 = v99[10];
          v102 = v99[11];
          len[0] = v97;
          len[1] = v98;
          BYTE3(v361) = v100 & 0xF;
          *(_WORD *)((char *)&v361 + 1) = v95;
          v103 = v101 << 6;
          goto LABEL_55;
        case 0x84:
        case 0x88:
          v104 = *v94;
          v105 = *((_DWORD *)this + 50);
          if (v105 < *((_DWORD *)this + 13))
          {
            do
            {
              if ((v105 + 4) > *((_DWORD *)this + 48))
              {
                JSC::AssemblerBuffer::outOfLineGrow(i, (uint64_t)v45, v46, v47, v48, v49, v50, v51);
                v105 = *((_DWORD *)this + 50);
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v105) = -721215457;
              v105 = *((_DWORD *)this + 50) + 4;
              *((_DWORD *)this + 50) = v105;
            }
            while (v105 < *((_DWORD *)this + 13));
            v95 = *v96;
          }
          v106 = (char *)v93 + 12 * v92;
          v107 = v106[9];
          v108 = *((_WORD *)v106 + 2);
          v102 = v106[11];
          len[0] = v104;
          len[1] = v105;
          BYTE3(v361) = v107 & 0xF;
          *(_WORD *)((char *)&v361 + 1) = v95;
          v103 = v108 & 0x3F;
LABEL_55:
          WORD2(v361) = v103;
          LOBYTE(v361) = v102;
          break;
        default:
          v113 = *v94;
          v114 = *((_DWORD *)this + 50);
          if (v114 < *((_DWORD *)this + 13))
          {
            do
            {
              if ((v114 + 4) > *((_DWORD *)this + 48))
              {
                JSC::AssemblerBuffer::outOfLineGrow(i, (uint64_t)v45, v46, v47, v48, v49, v50, v51);
                v114 = *((_DWORD *)this + 50);
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v114) = -721215457;
              v114 = *((_DWORD *)this + 50) + 4;
              *((_DWORD *)this + 50) = v114;
            }
            while (v114 < *((_DWORD *)this + 13));
            v95 = *v96;
          }
          v115 = *((_BYTE *)v93 + 12 * v92 + 9);
          LOBYTE(v361) = -1;
          len[0] = v113;
          len[1] = v114;
          BYTE3(v361) = v115 & 0xF;
          *(_WORD *)((char *)&v361 + 1) = v95;
          WORD2(v361) = 0;
          break;
      }
      v109 = *((unsigned int *)this + 11);
      if ((_DWORD)v109 == *((_DWORD *)this + 10))
      {
        v116 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 32, v109 + 1, (unint64_t)len, v47, v48, v49, v50, v51);
        v110 = *((_QWORD *)this + 4) + 24 * *((unsigned int *)this + 11);
        *(_QWORD *)v110 = 0;
        *(_QWORD *)(v110 + 8) = 0;
        *(_BYTE *)(v110 + 16) = -1;
        v117 = (((*(unsigned __int8 *)(v110 + 19) >> 4) & 0xF) << 20) | 0xF0041;
        *(_WORD *)(v110 + 17) = 65;
        *(_BYTE *)(v110 + 19) = BYTE2(v117);
        *(_WORD *)(v110 + 20) &= 0xFC00u;
        v111 = *(_OWORD *)v116;
        v112 = *(_QWORD *)(v116 + 16);
      }
      else
      {
        v110 = *((_QWORD *)this + 4) + 24 * v109;
        v111 = *(_OWORD *)len;
        v112 = v361;
      }
      *(_QWORD *)(v110 + 16) = v112;
      *(_OWORD *)v110 = v111;
      ++*((_DWORD *)this + 11);
      ++v92;
    }
    while (v92 != v91);
  }
  v350 = 0;
  JSC::DFG::JITCompiler::emitStoreCodeOrigin((uint64_t)this, &v350, v46, v47, v48, v49, v50, v51);
  if ((v350 & 1) != 0 && (v350 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v350 & 0xFFFFFFFF8, v118, v119, v120, v121, v122, v123, v124);
  v125 = *((_DWORD *)this + 50);
  if (v125 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(i, (uint64_t)v118, v119, v120, v121, v122, v123, v124);
    v125 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v125) = -129956960;
  *((_DWORD *)this + 50) += 4;
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationThrowStackOverflowError, v119, v120, v121, v122, v123, v124, (int *)len);
  v132 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 16) + 90440);
  v133 = *(_QWORD *)(v132 + 24);
  v134 = *(unsigned int **)(v132 + 32);
  if (v134)
  {
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 + 1, v134));
    JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>((uint64_t)this, v133, v126, v127, v128, v129, v130, v131);
    v143 = j;
    do
    {
      v144 = __ldaxr(v134);
      v145 = v144 - 1;
    }
    while (__stlxr(v145, v134));
    if (!v145)
    {
      atomic_store(1u, v134);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v134, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v287, v288, v289, v290, v291, v292, v293, v294);
    }
  }
  else
  {
    JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>((uint64_t)this, v133, v126, v127, v128, v129, v130, v131);
    v143 = j;
  }
  JSC::DFG::SpeculativeJIT::runSlowPathGenerators((uint64_t)this, (JSC::DFG::SpeculativeJIT *)((char *)this + 3936), v137, v138, v139, v140, v141, v142);
  v153 = *((_DWORD *)this + 50);
  len[0] = 0;
  if (*((_BYTE *)this + 3952))
  {
    LODWORD(v371) = v153;
    JSC::PCToCodeOriginMapBuilder::appendItemSlow((uint64_t)this + 3936, (unsigned int *)&v371, len);
  }
  JSC::DFG::JITCompiler::linkOSRExits(this, v146, v147, v148, v149, v150, v151, v152);
  v154 = *((_QWORD *)this + 495);
  if (*(_DWORD *)(v154 + 60))
  {
    v155 = 0;
    v156 = 0;
    do
    {
      v157 = *(_QWORD *)(*(_QWORD *)(v154 + 48) + 8 * v156);
      if (v157 && (*(_BYTE *)(v157 + 19) || *(_BYTE *)(v157 + 20)))
      {
        if (v156 >= *((unsigned int *)this + 101))
        {
          __break(0xC471u);
          JUMPOUT(0x197B67F4CLL);
        }
        v158 = (_DWORD *)(*((_QWORD *)this + 49) + v155);
        v159 = *((unsigned int *)this + 1315);
        if ((_DWORD)v159 == *((_DWORD *)this + 1314))
        {
          v160 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 5248, v159 + 1, (unint64_t)v158);
          v161 = *((unsigned int *)this + 1315);
          *(_DWORD *)(*((_QWORD *)this + 656) + 4 * v161) = *v160;
          *((_DWORD *)this + 1315) = v161 + 1;
          v154 = *((_QWORD *)this + 495);
        }
        else
        {
          *(_DWORD *)(*((_QWORD *)this + 656) + 4 * v159) = *v158;
          *((_DWORD *)this + 1315) = v159 + 1;
        }
      }
      ++v156;
      v155 += 4;
    }
    while (v156 < *(unsigned int *)(v154 + 60));
  }
  v162 = *((_DWORD *)this + 50);
  len[0] = 0;
  if (*((_BYTE *)this + 3952))
  {
    LODWORD(v371) = v162;
    JSC::PCToCodeOriginMapBuilder::appendItemSlow((uint64_t)this + 3936, (unsigned int *)&v371, len);
  }
  v163 = *((_QWORD *)this + 45);
  if (v163)
    *(_DWORD *)(v163 + 68) = *((_DWORD *)this + 50);
  v164 = *((_QWORD *)this + 42);
  len[0] = 0;
  len[1] = 0;
  v361 = v164;
  v362 = (WTF *)v363;
  v364 = 128;
  v165 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v165 != -1)
  {
    v371 = (void (**)(WTF::StringPrintStream *__hidden))&v358;
    v359 = (WTF **)&v371;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v359, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v166 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v174 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v174)
  {
    v174 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v174, v166);
  }
  v175 = *(WTF **)v174;
  if (*(_QWORD *)v174 != v174 + 8)
  {
    v176 = *(_DWORD *)(v174 + 136);
    if (v364 < v176)
    {
      if (v362 && v362 != (WTF *)v363)
      {
        WTF::fastFree((unint64_t)v362, v167, v168, v169, v170, v171, v172, v173);
        v175 = *(WTF **)v174;
        v176 = *(_DWORD *)(v174 + 136);
      }
      v362 = v175;
      v364 = v176;
      *(_QWORD *)v174 = v174 + 8;
      *(_DWORD *)(v174 + 136) = 128;
    }
  }
  v365 = 1;
  v366 = 0;
  v367 = 1;
  start = 0u;
  v369 = 0u;
  v370 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)len, (uint64_t)this, 0, v169, v170, v171, v172, v173);
  if ((_BYTE)v366)
  {
    JSC::DFG::JITCompiler::link(this, (JSC::ExecutableAllocator **)len, v177, v178, v179, v180, v181, v182);
    JSC::DFG::SpeculativeJIT::linkOSREntries(this, (JSC::LinkBuffer *)len, v183, v184, v185, v186, v187, v188);
    if (HIBYTE(word_1ECF4C286) || BYTE1(dword_1ECF4C28A))
    {
      v189 = (JSC::DFG::Graph **)*((_QWORD *)this + 45);
      v190 = atomic_load(&WTF::initializeLogFile(void)::once);
      if (v190 != -1)
      {
        v371 = (void (**)(WTF::StringPrintStream *__hidden))&v358;
        v359 = (WTF **)&v371;
        std::__call_once(&WTF::initializeLogFile(void)::once, &v359, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
      }
      JSC::DFG::Disassembler::dump(v189, (WTF::PrintStream *)WTF::s_file, (JSC::LinkBuffer *)len);
      BYTE1(v366) = 1;
    }
    v191 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 24) + 112);
    if (v191)
      JSC::DFG::Disassembler::reportToProfiler(*((JSC::DFG::Graph ***)this + 45), v191, len);
    if (v143 < 4)
      v192 = 0;
    else
      v192 = *(_DWORD *)((char *)v362 + (v143 & 0xFFFFFFFC) - 4);
    v193 = (v143 - v192);
    v194 = v193 + start;
    if ((unint64_t)start > v193 + (uint64_t)start || (unint64_t)start + len[1] < v194)
    {
      __break(0xC471u);
      JUMPOUT(0x197B67900);
    }
    v195 = (_QWORD *)*((_QWORD *)this + 46);
    if (byte_1ECF4C288 | HIBYTE(word_1ECF4C286))
    {
      v257 = 1;
    }
    else
    {
      if (!BYTE1(dword_1ECF4C28A) && !byte_1ECF4C289)
      {
        if (DWORD1(v369))
        {
          v247 = (uint64_t *)*((_QWORD *)&start + 1);
          v248 = 8 * DWORD1(v369);
          do
          {
            v249 = *v247++;
            (*(void (**)(uint64_t, size_t *))(*(_QWORD *)v249 + 16))(v249, len);
            v248 -= 8;
          }
          while (v248);
        }
        p_start = (WTF **)&start;
        if (HIDWORD(v370))
        {
          v252 = (uint64_t *)*((_QWORD *)&v369 + 1);
          v253 = 8 * HIDWORD(v370);
          do
          {
            v254 = *v252++;
            (*(void (**)(uint64_t, size_t *))(*(_QWORD *)v254 + 16))(v254, len);
            v253 -= 8;
          }
          while (v253);
        }
        v197 = v367;
        v198 = len[1];
        *((_QWORD *)JSC::LinkBuffer::s_profileCummulativeLinkedSizes + v367) += len[1];
        ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v197);
        sys_icache_invalidate((void *)start, v198);
        v206 = (unsigned int *)len[0];
        if (len[0])
        {
          do
            v321 = __ldaxr(v206);
          while (__stlxr(v321 + 1, v206));
          p_start = (WTF **)(v206 + 2);
        }
        v207 = *p_start;
        v371 = (void (**)(WTF::StringPrintStream *__hidden))v207;
        v372 = v206;
        if (byte_1ECF4C2A2)
          JSC::LinkBuffer::logJITCodeForPerf((uint64_t)len, (uint64_t)&v371, 0, 0);
        if (v206)
        {
          do
            v208 = __ldaxr(v206);
          while (__stlxr(v208 + 1, v206));
          v209 = v372;
          v372 = 0;
          if (v209)
          {
            do
            {
              v210 = __ldaxr(v209);
              v211 = v210 - 1;
            }
            while (__stlxr(v211, v209));
            if (!v211)
            {
              atomic_store(1u, v209);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v209, (uint64_t)v199, v200, v201, v202, v203, v204, v205);
              WTF::fastFree(v295, v296, v297, v298, v299, v300, v301, v302);
            }
          }
          if (!v195[2])
          {
            v195[2] = v207;
            do
              v212 = __ldaxr(v206);
            while (__stlxr(v212 + 1, v206));
LABEL_127:
            v213 = (unsigned int *)v195[3];
            v195[3] = v206;
            if (v213)
            {
              do
              {
                v214 = __ldaxr(v213);
                v215 = v214 - 1;
              }
              while (__stlxr(v215, v213));
              if (!v215)
              {
                atomic_store(1u, v213);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v213, (uint64_t)v199, v200, v201, v202, v203, v204, v205);
                WTF::fastFree(v303, v304, v305, v306, v307, v308, v309, v310);
              }
            }
            v195[4] = v194;
            if (!v206)
              goto LABEL_134;
            do
            {
              v216 = __ldaxr(v206);
              v217 = v216 - 1;
            }
            while (__stlxr(v217, v206));
            if (v217)
              goto LABEL_134;
            atomic_store(1u, v206);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v206, (uint64_t)v199, v200, v201, v202, v203, v204, v205);
            goto LABEL_230;
          }
        }
        else if (!v195[2])
        {
          v195[2] = v207;
          goto LABEL_127;
        }
        __break(0xC471u);
        JUMPOUT(0x197B67C38);
      }
      v257 = BYTE1(dword_1ECF4C28A) != 0;
    }
    v258 = *((_QWORD *)this + 42);
    v371 = off_1E3572250;
    v372 = (unsigned int *)v374;
    v373 = xmmword_199122F80;
    v374[0] = 0;
    JSC::CodeBlock::dumpAssumingJITType(v258);
    v371[5]((WTF::StringPrintStream *)&v371);
    v266 = v372;
    if (v372)
    {
      v267 = v373;
      if ((unint64_t)v373 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x197B67F5CLL);
      }
      if ((_QWORD)v373 == -17)
      {
        __break(0xC471u);
        JUMPOUT(0x197B67F64);
      }
      v268 = WTF::fastMalloc((WTF *)(v373 + 17));
      *(_DWORD *)v268 = 1;
      *(_QWORD *)(v268 + 8) = v267;
      memcpy((void *)(v268 + 16), v266, v267);
      *(_BYTE *)(v268 + 16 + v267) = 0;
      v269 = (unint64_t)v372;
      if (v372 == (unsigned int *)v374)
      {
LABEL_182:
        v270 = v268 + 16;
        if (!v268)
          v270 = 0;
        JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl((uint64_t)len, v257, 0, 0, "DFG JIT code for %s", (WTF **)&v371, v270);
        v272 = (WTF *)v371;
        v271 = v372;
        if (v372)
        {
          do
            v273 = __ldaxr(v271);
          while (__stlxr(v273 + 1, v271));
          v274 = v372;
          v372 = 0;
          if (v274)
          {
            do
            {
              v275 = __ldaxr(v274);
              v276 = v275 - 1;
            }
            while (__stlxr(v276, v274));
            if (!v276)
            {
              atomic_store(1u, v274);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v274, (uint64_t)v199, v200, v201, v202, v203, v204, v205);
              WTF::fastFree(v324, v325, v326, v327, v328, v329, v330, v331);
            }
          }
          if (!v195[2])
          {
            v195[2] = v272;
            do
              v277 = __ldaxr(v271);
            while (__stlxr(v277 + 1, v271));
LABEL_193:
            v278 = (unsigned int *)v195[3];
            v195[3] = v271;
            if (v278)
            {
              do
              {
                v279 = __ldaxr(v278);
                v280 = v279 - 1;
              }
              while (__stlxr(v280, v278));
              if (!v280)
              {
                atomic_store(1u, v278);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v278, (uint64_t)v199, v200, v201, v202, v203, v204, v205);
                WTF::fastFree(v332, v333, v334, v335, v336, v337, v338, v339);
              }
            }
            v195[4] = v194;
            if (v271)
            {
              do
              {
                v281 = __ldaxr(v271);
                v282 = v281 - 1;
              }
              while (__stlxr(v282, v271));
              if (!v282)
              {
                atomic_store(1u, v271);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v271, (uint64_t)v199, v200, v201, v202, v203, v204, v205);
                WTF::fastFree(v340, v341, v342, v343, v344, v345, v346, v347);
              }
            }
            if (!v268)
            {
LABEL_134:
              v218 = *((_QWORD *)this + 704);
              *((_QWORD *)this + 704) = 0;
              v219 = *((unsigned int *)this + 1411);
              *((_QWORD *)this + 705) = 0;
              if ((_DWORD)v219)
              {
                v220 = (_DWORD *)WTF::fastMalloc((WTF *)(14 * v219 + 4));
                v221 = v220;
                v222 = 0;
                *v220 = v219;
                do
                {
                  v223 = (char *)v220 + v222;
                  v224 = *(_QWORD *)(v218 + v222);
                  *(_QWORD *)(v223 + 10) = *(_QWORD *)(v218 + v222 + 6);
                  *(_QWORD *)(v223 + 4) = v224;
                  v222 += 14;
                }
                while (14 * v219 != v222);
              }
              else
              {
                v221 = 0;
              }
              if (v218)
                WTF::fastFree(v218, v199, v200, v201, v202, v203, v204, v205);
              v225 = *((_QWORD *)this + 46);
              v226 = *(_QWORD *)(v225 + 312);
              *(_QWORD *)(v225 + 312) = v221;
              if (v226)
                WTF::fastFree(v226, v199, v200, v201, v202, v203, v204, v205);
              v227 = *(_QWORD *)(*((_QWORD *)this + 495) + 24);
              v228 = *((_QWORD *)this + 46);
              *((_QWORD *)this + 46) = 0;
              v236 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
              *v236 = off_1E358E4F8;
              v236[1] = v227;
              v236[2] = v228;
              v236[3] = v194;
              v237 = *(_QWORD *)(*((_QWORD *)this + 495) + 24);
              v238 = *(_QWORD *)(v237 + 120);
              *(_QWORD *)(v237 + 120) = v236;
              if (v238)
                goto LABEL_142;
              goto LABEL_143;
            }
            if (*(_DWORD *)v268 != 1)
            {
              --*(_DWORD *)v268;
              goto LABEL_134;
            }
            v311 = v268;
LABEL_230:
            WTF::fastFree(v311, v199, v200, v201, v202, v203, v204, v205);
            goto LABEL_134;
          }
        }
        else if (!v195[2])
        {
          v195[2] = v371;
          goto LABEL_193;
        }
        __break(0xC471u);
        JUMPOUT(0x197B67EA4);
      }
    }
    else
    {
      v268 = 0;
      v269 = 0;
    }
    WTF::fastFree(v269, v259, v260, v261, v262, v263, v264, v265);
    goto LABEL_182;
  }
  v322 = *(_QWORD *)(*((_QWORD *)this + 495) + 24);
  v323 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  JSC::DFG::FailedFinalizer::FailedFinalizer(v323, v322);
  v238 = *(_QWORD *)(v322 + 120);
  *(_QWORD *)(v322 + 120) = v323;
  if (v238)
LABEL_142:
    (*(void (**)(uint64_t))(*(_QWORD *)v238 + 8))(v238);
LABEL_143:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)len, v229, v230, v231, v232, v233, v234, v235);
  v246 = v355;
  if (v357 != (_BYTE *)v355)
  {
    if (v355)
    {
      v355 = 0;
      LODWORD(v356) = 0;
      WTF::fastFree((unint64_t)v246, v239, v240, v241, v242, v243, v244, v245);
    }
  }
}

_DWORD *JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int *a9@<X8>)
{
  int v9;
  JSC::AssemblerBuffer *v10;
  JSC::AssemblerBuffer *v11;
  int *v12;
  _DWORD *v13;

  v9 = result[50];
  *a9 = v9;
  if (v9 < result[13])
  {
    v10 = (JSC::AssemblerBuffer *)(result + 14);
    do
    {
      if ((v9 + 4) > result[48])
      {
        v13 = result;
        v11 = v10;
        v12 = a9;
        JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
        v10 = v11;
        a9 = v12;
        result = v13;
        v9 = v13[50];
      }
      *(_DWORD *)(*((_QWORD *)result + 7) + v9) = -721215457;
      v9 = result[50] + 4;
      result[50] = v9;
      *a9 = v9;
    }
    while (v9 < result[13]);
  }
  result[52] = 0;
  return result;
}

void JSC::MacroAssemblerARM64::load32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;

  v8 = a3;
  v9 = a2;
  if ((HIDWORD(a2) + 256) <= 0x1FF)
  {
    v11 = ((WORD2(a2) & 0x1FF) << 12) | a3 & 0x1F | (32 * (char)a2);
    v12 = -1203765248;
LABEL_3:
    v13 = v11 | v12;
    goto LABEL_4;
  }
  if (HIDWORD(a2) <= 0x3FFC && (a2 & 0x300000000) == 0)
  {
    v11 = (HIDWORD(a2) << 8) & 0x3FFC00;
    v12 = a3 & 0x1F | (32 * (char)a2) | 0xB9400000;
    goto LABEL_3;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    return;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  v13 = v8 & 0x1F | (32 * v9) | 0xB8716800;
LABEL_4:
  v16 = *(_DWORD *)(a1 + 200);
  v15 = (unsigned int *)(a1 + 200);
  v14 = v16;
  if (v16 + 4 > *(v15 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 - 36), a2, a3, a4, a5, a6, a7, a8);
    v14 = *v15;
  }
  *(_DWORD *)(*((_QWORD *)v15 - 18) + v14) = v13;
  *v15 += 4;
}

{
  int v8;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::AssemblerBuffer *v27;
  int v28;
  unsigned int v29;

  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_29;
  v8 = a3;
  v11 = *(_QWORD *)(a1 + 296);
  v12 = *(_DWORD *)(a1 + 320);
  v13 = *(_DWORD *)(v11 + 208);
  if ((v13 & v12) == 0)
  {
LABEL_3:
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2, 17, a4, a5, a6, a7, a8);
    if (v8 != 17)
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197B6A46CLL);
      }
      *(_QWORD *)(a1 + 312) = a2;
      v21 = *(_QWORD *)(a1 + 296);
      v22 = *(_DWORD *)(v21 + 208) | *(_DWORD *)(a1 + 320);
      goto LABEL_6;
    }
    if (*(_BYTE *)(a1 + 212))
    {
      v21 = *(_QWORD *)(a1 + 296);
      v22 = *(_DWORD *)(v21 + 208) & ~*(_DWORD *)(a1 + 320);
LABEL_6:
      *(_DWORD *)(v21 + 208) = v22;
      v23 = *(_DWORD *)(a1 + 200);
      if (v23 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v14, v15, v16, v17, v18, v19, v20);
        v23 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = v8 & 0x1F | 0xB87F6A20;
LABEL_9:
      *(_DWORD *)(a1 + 200) += 4;
      return;
    }
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x197B6A44CLL);
  }
  v24 = *(_QWORD *)(a1 + 312);
  v25 = a2 - v24;
  if ((_DWORD)a3 == 17)
    *(_DWORD *)(v11 + 208) = v13 & ~v12;
  if (v25 == (int)v25)
  {
    if ((v25 + 256) <= 0x1FF)
    {
      v26 = a3 & 0x1F | ((unsigned __int16)(v25 & 0x1FF) << 12) | 0xB8400220;
      v27 = (JSC::AssemblerBuffer *)(a1 + 56);
      goto LABEL_19;
    }
    if (v25 <= 0x3FFC && (v25 & 3) == 0)
    {
      v28 = a3 & 0x1F | (((v25 >> 2) & 0xFFF) << 10) | 0xB9400220;
      v29 = *(_DWORD *)(a1 + 200);
      if (v29 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        v29 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = v28;
      goto LABEL_9;
    }
  }
  if ((v24 ^ (unint64_t)a2) >> 16)
    goto LABEL_3;
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), (32 * (unsigned __int16)a2) | 0xF2800011, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197B6A524);
  }
  *(_QWORD *)(a1 + 312) = a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) |= *(_DWORD *)(a1 + 320);
  v26 = v8 & 0x1F | 0xB87F6A20;
  v27 = (JSC::AssemblerBuffer *)(a1 + 56);
LABEL_19:
  JSC::AssemblerBuffer::putInt(v27, v26, a3, a4, a5, a6, a7, a8);
}

void JSC::MacroAssemblerARM64::branch32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  JSC::AssemblerBuffer *v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;

  v9 = a3;
  v10 = a2;
  if ((_DWORD)a4)
  {
    if (a4 > 0xFFF)
    {
      v17 = -(int)a4;
      if (-(int)a4 > 0xFFF)
      {
        if ((a4 & 0xFFF) != 0)
        {
          v13 = 0;
          v14 = 0;
          v16 = 0;
          LOBYTE(v17) = 0;
          v15 = 0;
        }
        else
        {
          v31 = (int)a4 >> 12;
          v32 = BYTE3(a4);
          v33 = 0xC00000000;
          v34 = 1;
          if (-((int)a4 >> 12) > 0xFFF)
            v33 = 0;
          if (-v31 <= 0xFFF)
          {
            v35 = 0x100000000;
          }
          else
          {
            v34 = 0;
            v35 = 0;
          }
          if (-v31 <= 0xFFF)
            v36 = -v31;
          else
            LOBYTE(v36) = 0;
          if (-v31 <= 0xFFF)
            v37 = -((int)a4 >> 12) & 0xFFFFFF00;
          else
            v37 = 0;
          v16 = 0x100000000;
          v38 = v32 == 0;
          if (v32)
            v13 = v33;
          else
            v13 = 0xC00000000;
          if (v38)
            v14 = 0;
          else
            v14 = v34;
          if (v38)
          {
            LOBYTE(v17) = (int)a4 >> 12;
          }
          else
          {
            v16 = v35;
            LOBYTE(v17) = v36;
          }
          if (v38)
            v15 = v31 & 0xFFFFFF00;
          else
            v15 = v37;
        }
      }
      else
      {
        v13 = 0;
        v15 = v17 & 0xFFFFFF00;
        v16 = 0x100000000;
        v14 = 1;
      }
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = a4 & 0xFFFFFF00;
      v16 = 0x100000000;
      LOBYTE(v17) = a4;
    }
    v18 = v13 | v15 | v17;
    v19 = v16 | v14;
    goto LABEL_16;
  }
  v18 = 0;
  v19 = 0x100000000;
  if ((int)a2 <= 0)
  {
    if (!(_DWORD)a2)
      goto LABEL_40;
  }
  else
  {
    switch((_DWORD)a2)
    {
      case 1:
LABEL_40:
        JSC::MacroAssemblerARM64::branchTest32(a1, v10, a3, a3, a5, a6, a7, a8, a9);
        return;
      case 0xA:
        v10 = 5;
        goto LABEL_40;
      case 0xB:
        v10 = 4;
        goto LABEL_40;
    }
  }
LABEL_16:
  if ((v19 & 0xFF00000000) != 0)
  {
    v20 = (JSC::AssemblerBuffer *)(a1 + 56);
    v21 = *(_DWORD *)(a1 + 200);
    if ((_BYTE)v19)
      v22 = 822083615;
    else
      v22 = 1895825439;
    if ((v18 & 0xFFFFFFFF00000000) == 0xC00000000)
      v22 |= 0x400000u;
    v24 = v22 | ((v18 & 0xFFF) << 10) | (32 * a3);
    if (v21 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v20, a2, a3, a4, a5, a6, a7, a8);
      v21 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v21) = v24;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197B6844CLL);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a4, a1 + 264, a4, a5, a6, a7, a8);
    if (v9 == 31)
    {
      v23 = *(_DWORD *)(a1 + 200);
      if (v23 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        v23 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = 1798333439;
    }
    else
    {
      v39 = *(_DWORD *)(a1 + 200);
      if (v39 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        v39 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v39) = (32 * (v9 & 0x1F)) | 0x6B10001F;
    }
  }
  v25 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v25;
  if (*(_BYTE *)(a1 + 328))
  {
    for (; (signed int)v25 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v25)
    {
      if (v25 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        v25 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = -721215457;
      v25 = *(_DWORD *)(a1 + 200) + 4;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  if (v25 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v25 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = v10 | 0x54000000;
  v26 = *(_DWORD *)(a1 + 200);
  v27 = v26 + 4;
  *(_DWORD *)(a1 + 200) = v26 + 4;
  v28 = v26 + 8;
  v29 = v26 + 4;
  if (v28 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v29 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v30 = -122;
  else
    v30 = -126;
  *(_DWORD *)a9 = v27;
  *(_DWORD *)(a9 + 4) = 0;
  *(_BYTE *)(a9 + 8) = v30;
  *(_BYTE *)(a9 + 9) = v10;
  *(_WORD *)(a9 + 10) = -256;
}

{
  unsigned __int8 v9;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int i;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;

  v9 = a2;
  v12 = (a4 & 0x1F) << 16;
  if ((_DWORD)a3 == 31)
  {
    v13 = v12 | 0x6B2063FF;
    v14 = *(_DWORD *)(a1 + 200);
    if (v14 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v14 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v13;
    *(_DWORD *)(a1 + 200) += 4;
  }
  else
  {
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), v12 | (32 * (a3 & 0x1F)) | 0x6B00001F, a3, a4, a5, a6, a7, a8);
  }
  if (*(_BYTE *)(a1 + 328))
  {
    for (i = *(_DWORD *)(a1 + 200); (signed int)i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
    {
      if (i + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        i = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
      i = *(_DWORD *)(a1 + 200) + 4;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  else
  {
    i = *(_DWORD *)(a1 + 200);
  }
  if (i + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    i = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = v9 | 0x54000000;
  v16 = *(_DWORD *)(a1 + 200);
  v17 = v16 + 4;
  *(_DWORD *)(a1 + 200) = v16 + 4;
  v18 = v16 + 8;
  v19 = v16 + 4;
  if (v18 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v19 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v19) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v20 = -122;
  else
    v20 = -126;
  *(_DWORD *)a9 = v17;
  *(_DWORD *)(a9 + 4) = 0;
  *(_BYTE *)(a9 + 8) = v20;
  *(_BYTE *)(a9 + 9) = v9;
  *(_WORD *)(a9 + 10) = -256;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load32(a1, a4, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branch32(a1, a2, a3, 17, v13, v14, v15, v16, a9);
  }
  else
  {
    __break(0xC471u);
  }
}

{
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 212))
  {
    v10 = a4;
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load32(a1, a3, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branch32(a1, a2, 17, v10, v13, v14, v15, v16, a9);
  }
  else
  {
    __break(0xC471u);
  }
}

unsigned int *JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(unsigned int *result, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  __int16 v13;
  char v14;
  __int16 v15;
  uint64_t v16;
  char v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  __int128 v27;
  uint64_t v28;

  v9 = *((unsigned __int8 *)result + 8);
  switch(*((_BYTE *)result + 8))
  {
    case 0x83:
    case 0x87:
      v10 = (_QWORD *)(a3 + 32);
      v11 = *a2;
      v12 = *((_BYTE *)result + 9);
      v13 = *((unsigned __int8 *)result + 10);
      v14 = *((_BYTE *)result + 11);
      *(_QWORD *)&v27 = *result;
      *((_QWORD *)&v27 + 1) = v11;
      BYTE3(v28) = v12 & 0xF;
      *(_WORD *)((char *)&v28 + 1) = v9;
      v15 = v13 << 6;
      goto LABEL_4;
    case 0x84:
    case 0x88:
      v10 = (_QWORD *)(a3 + 32);
      v16 = *a2;
      v17 = *((_BYTE *)result + 9);
      v18 = *((_WORD *)result + 2);
      v14 = *((_BYTE *)result + 11);
      *(_QWORD *)&v27 = *result;
      *((_QWORD *)&v27 + 1) = v16;
      BYTE3(v28) = v17 & 0xF;
      *(_WORD *)((char *)&v28 + 1) = v9;
      v15 = v18 & 0x3F;
LABEL_4:
      WORD2(v28) = v15;
      LOBYTE(v28) = v14;
      v19 = *(unsigned int *)(a3 + 44);
      if ((_DWORD)v19 != *(_DWORD *)(a3 + 40))
        goto LABEL_5;
      result = (unsigned int *)WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v19 + 1, (unint64_t)&v27, a4, a5, a6, a7, a8);
      v20 = *(_QWORD *)(a3 + 32) + 24 * *(unsigned int *)(a3 + 44);
      *(_QWORD *)v20 = 0;
      *(_QWORD *)(v20 + 8) = 0;
      *(_BYTE *)(v20 + 16) = -1;
      goto LABEL_10;
    default:
      v10 = (_QWORD *)(a3 + 32);
      v23 = *result;
      v24 = *a2;
      v25 = *((_BYTE *)result + 9);
      LOBYTE(v28) = -1;
      *(_QWORD *)&v27 = v23;
      *((_QWORD *)&v27 + 1) = v24;
      BYTE3(v28) = v25 & 0xF;
      *(_WORD *)((char *)&v28 + 1) = v9;
      WORD2(v28) = 0;
      v19 = *(unsigned int *)(a3 + 44);
      if ((_DWORD)v19 == *(_DWORD *)(a3 + 40))
      {
        result = (unsigned int *)WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 32, v19 + 1, (unint64_t)&v27, a4, a5, a6, a7, a8);
        v20 = *(_QWORD *)(a3 + 32) + 24 * *(unsigned int *)(a3 + 44);
        *(_QWORD *)v20 = 0;
        *(_QWORD *)(v20 + 8) = 0;
        *(_BYTE *)(v20 + 16) = -1;
LABEL_10:
        v26 = (*(unsigned __int8 *)(v20 + 19) << 16) | 0xF0000;
        *(_WORD *)(v20 + 17) = 65;
        *(_BYTE *)(v20 + 19) = BYTE2(v26);
        *(_WORD *)(v20 + 20) &= 0xFC00u;
        v21 = *(_OWORD *)result;
        v22 = *((_QWORD *)result + 2);
      }
      else
      {
LABEL_5:
        v20 = *v10 + 24 * v19;
        v21 = v27;
        v22 = v28;
      }
      *(_QWORD *)(v20 + 16) = v22;
      *(_OWORD *)v20 = v21;
      ++*(_DWORD *)(a3 + 44);
      return result;
  }
}

void JSC::MacroAssemblerARM64::move(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int *v12;
  _QWORD *v13;

  if ((_DWORD)a2 == (_DWORD)a3)
    return;
  if ((_DWORD)a2 == 63)
  {
    if ((_DWORD)a3 != 31)
    {
      v10 = a3 & 0x1F | 0xD2800000;
      goto LABEL_7;
    }
    goto LABEL_13;
  }
  if ((_DWORD)a2 == 31 || (_DWORD)a3 == 31)
  {
LABEL_13:
    v8 = a3 | (32 * a2);
    v9 = -1862270976;
    goto LABEL_6;
  }
  v8 = a3 & 0x1F | ((a2 & 0x1F) << 16);
  v9 = -1442839584;
LABEL_6:
  v10 = v8 | v9;
LABEL_7:
  v12 = a1 + 50;
  v11 = a1[50];
  v13 = a1 + 14;
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = *v12;
  }
  *(_DWORD *)(*v13 + v11) = v10;
  *v12 += 4;
}

unsigned int *JSC::MacroAssembler::jump(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  int i;
  unsigned int v12;
  char v13;
  JSC::AssemblerBuffer *v15;
  unsigned int v16;
  unsigned int v17[2];
  char v18;
  __int16 v19;
  char v20;

  v10 = (JSC::AssemblerBuffer *)(a1 + 56);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      v15 = v10;
      JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v10 = v15;
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v12 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v13 = 69;
  else
    v13 = 65;
  v17[0] = i;
  v17[1] = 0;
  v18 = v13;
  v19 = 15;
  v20 = -1;
  v16 = *a2;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v17, &v16, a1, a4, a5, a6, a7, a8);
}

void JSC::DFG::SpeculativeJIT::exceptionCheck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  WTF *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int *v64;
  uint64_t v65;

  v64 = 0;
  v65 = 2;
  v10 = *(_QWORD *)(a1 + 3960);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 3976) + 8);
  if ((v11 & 1) != 0)
  {
    v45 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v46 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v46 != 0x3FFFFFFF)
        ? (v47 = (_DWORD)v46 == -1)
        : (v47 = 1),
          v47))
    {
      v48 = 2;
    }
    else if (v46 >> 28)
    {
      v53 = v45;
      v54 = v46;
      v45 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v45 = v53;
      *(_DWORD *)(v45 + 8) = v54;
      v48 = 1;
    }
    else
    {
      v48 = v45;
      v45 = v46 << 36;
    }
    v11 = v45 | v48;
  }
  v63 = v11;
  v19 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v10, &v63, &v65, &v64, a5, a6, a7, a8);
  if ((v63 & 1) != 0 && (v63 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v63 & 0xFFFFFFFF8, v12, v13, v14, v15, v16, v17, v18);
  if (!v19)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a1, *(_QWORD *)(*(_QWORD *)(a1 + 352) + 16), 0, 0, a2, v16, v17, v18, (uint64_t)&v61, v20);
    v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 16) + 90440);
    v27 = *(_QWORD *)(v26 + 8);
    v28 = *(unsigned int **)(v26 + 16);
    if (!v28)
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(&v61, v27, a1, v21, v22, v23, v24, v25);
      goto LABEL_9;
    }
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 + 1, v28));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(&v61, v27, a1, v21, v22, v23, v24, v25);
    do
    {
      v37 = __ldaxr(v28);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v28));
    if (v38)
      goto LABEL_9;
    atomic_store(1u, v28);
    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v28, (uint64_t)v30, v31, v32, v33, v34, v35, v36);
    goto LABEL_38;
  }
  if (*(_BYTE *)(a1 + 5768))
  {
    __break(0xC471u);
    JUMPOUT(0x197B68AD8);
  }
  v39 = 5772;
  if (!*(_BYTE *)(a1 + 5776))
    v39 = 5644;
  v40 = *(unsigned int *)(a1 + v39);
  JSC::AssemblyHelpers::emitExceptionCheck(a1, *(_QWORD *)(*(_QWORD *)(a1 + 352) + 16), 0, 0, a2, v16, v17, v18, (uint64_t)&v61, v20);
  v41 = v65;
  if ((v65 & 1) != 0)
  {
    v49 = *(_QWORD *)(v65 & 0xFFFFFFFF8);
    if ((v65 & 2) != 0
      || ((v50 = *(unsigned int *)((v65 & 0xFFFFFFFF8) + 8), (_DWORD)v50 != 0x3FFFFFFF)
        ? (v51 = (_DWORD)v50 == -1)
        : (v51 = 1),
          v51))
    {
      v52 = 2;
    }
    else if (v50 >> 28)
    {
      v55 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v55 = v49;
      *(_DWORD *)(v55 + 8) = v50;
      v52 = 1;
      v49 = v55;
    }
    else
    {
      v52 = *(_QWORD *)(v65 & 0xFFFFFFFF8);
      v49 = v50 << 36;
    }
    v41 = v49 | v52;
  }
  v60 = v41;
  v42 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 368) + 80) + 20);
  if (!v42)
  {
    __break(0xC471u);
    JUMPOUT(0x197B68B24);
  }
  v56 = (WTF *)&v58;
  v57 = 2;
  if (v61 != -1)
  {
    v59 = v62;
    HIDWORD(v57) = 1;
    v58 = v61;
  }
  JSC::DFG::JITCompiler::appendExceptionHandlingOSRExit(a1, a1, 0x1AuLL, v40, &v60, (uint64_t)v64, v42 - 1, (uint64_t)&v56);
  v43 = v56;
  if (&v58 != (unsigned int *)v56 && v56)
  {
    v56 = 0;
    LODWORD(v57) = 0;
    WTF::fastFree((unint64_t)v43, v30, v31, v32, v33, v34, v35, v36);
  }
  if ((v60 & 1) != 0)
  {
    v44 = v60 & 0xFFFFFFFF8;
    if ((v60 & 0xFFFFFFFF8) != 0)
LABEL_38:
      WTF::fastFree(v44, v30, v31, v32, v33, v34, v35, v36);
  }
LABEL_9:
  if ((v65 & 1) != 0 && (v65 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v65 & 0xFFFFFFFF8, v30, v31, v32, v33, v34, v35, v36);
}

uint64_t JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  int v14;
  char v15;
  __int16 v16;
  uint64_t v17;
  char v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  __int128 v27;
  uint64_t v28;

  v10 = *((unsigned __int8 *)a1 + 8);
  switch(*((_BYTE *)a1 + 8))
  {
    case 0x83:
    case 0x87:
      result = a3 + 32;
      v12 = *a1;
      v13 = *((_BYTE *)a1 + 9);
      v14 = *((unsigned __int8 *)a1 + 10);
      v15 = *((_BYTE *)a1 + 11);
      *(_QWORD *)&v27 = v12;
      *((_QWORD *)&v27 + 1) = a2;
      BYTE3(v28) = v13 & 0xF;
      *(_WORD *)((char *)&v28 + 1) = v10;
      if (v14)
        v16 = 192;
      else
        v16 = 128;
      goto LABEL_6;
    case 0x84:
    case 0x88:
      result = a3 + 32;
      v17 = *a1;
      v18 = *((_BYTE *)a1 + 9);
      v19 = *((_WORD *)a1 + 2);
      v15 = *((_BYTE *)a1 + 11);
      *(_QWORD *)&v27 = v17;
      *((_QWORD *)&v27 + 1) = a2;
      BYTE3(v28) = v18 & 0xF;
      *(_WORD *)((char *)&v28 + 1) = v10;
      v16 = v19 & 0x3F | 0x80;
LABEL_6:
      WORD2(v28) = v16;
      LOBYTE(v28) = v15;
      v20 = *(unsigned int *)(a3 + 44);
      if ((_DWORD)v20 != *(_DWORD *)(a3 + 40))
        goto LABEL_7;
      goto LABEL_10;
    default:
      result = a3 + 32;
      v24 = *a1;
      v25 = *((_BYTE *)a1 + 9);
      LOBYTE(v28) = -1;
      *(_QWORD *)&v27 = v24;
      *((_QWORD *)&v27 + 1) = a2;
      BYTE3(v28) = v25 & 0xF;
      *(_WORD *)((char *)&v28 + 1) = v10;
      WORD2(v28) = 128;
      v20 = *(unsigned int *)(a3 + 44);
      if ((_DWORD)v20 == *(_DWORD *)(a3 + 40))
      {
LABEL_10:
        result = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v20 + 1, (unint64_t)&v27, a4, a5, a6, a7, a8);
        v21 = *(_QWORD *)(a3 + 32) + 24 * *(unsigned int *)(a3 + 44);
        *(_QWORD *)v21 = 0;
        *(_QWORD *)(v21 + 8) = 0;
        *(_BYTE *)(v21 + 16) = -1;
        v26 = (*(unsigned __int8 *)(v21 + 19) << 16) | 0xF0000;
        *(_WORD *)(v21 + 17) = 65;
        *(_BYTE *)(v21 + 19) = BYTE2(v26);
        *(_WORD *)(v21 + 20) &= 0xFC00u;
        v22 = *(_OWORD *)result;
        v23 = *(_QWORD *)(result + 16);
      }
      else
      {
LABEL_7:
        v21 = *(_QWORD *)result + 24 * v20;
        v22 = v27;
        v23 = v28;
      }
      *(_QWORD *)(v21 + 16) = v23;
      *(_OWORD *)v21 = v22;
      ++*(_DWORD *)(a3 + 44);
      return result;
  }
}

uint64_t JSC::DFG::SpeculativeJIT::recordCallSiteAndGenerateExceptionHandlingOSRExitIfNeeded(JSC::DFG::SpeculativeJIT *this, const JSC::CodeOrigin *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  _QWORD v57[3];
  uint64_t v58;
  unint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;

  v60 = 0;
  v61 = 2;
  v11 = *((_QWORD *)this + 495);
  v12 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v36 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v37 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v37 != 0x3FFFFFFF)
        ? (v38 = (_DWORD)v37 == -1)
        : (v38 = 1),
          v38))
    {
      v39 = 2;
    }
    else if (v37 >> 28)
    {
      v51 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v51 = v36;
      *(_DWORD *)(v51 + 8) = v37;
      v39 = 1;
      v36 = v51;
    }
    else
    {
      v39 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v36 = v37 << 36;
    }
    v12 = v36 | v39;
  }
  v59 = v12;
  v20 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v11, &v59, &v61, &v60, a5, a6, a7, a8);
  if ((v59 & 1) != 0 && (v59 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v59 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  v21 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) == 0)
  {
    v22 = *(_QWORD *)(*((_QWORD *)this + 46) + 80);
LABEL_5:
    v23 = 1;
    v24 = v21;
    goto LABEL_6;
  }
  v40 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
  if ((v21 & 2) != 0
    || ((v41 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v41 != 0x3FFFFFFF)
      ? (v42 = (_DWORD)v41 == -1)
      : (v42 = 1),
        v42))
  {
    v43 = 2;
  }
  else if (v41 >> 28)
  {
    v52 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v52 = v40;
    *(_DWORD *)(v52 + 8) = v41;
    v43 = 1;
    v40 = v52;
  }
  else
  {
    v43 = v40;
    v40 = v41 << 36;
  }
  v21 = v40 | v43;
  v22 = *(_QWORD *)(*((_QWORD *)this + 46) + 80);
  if ((v21 & 1) == 0)
    goto LABEL_5;
  v44 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
  if ((v21 & 2) != 0
    || ((v45 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v45 != 0x3FFFFFFF)
      ? (v46 = (_DWORD)v45 == -1)
      : (v46 = 1),
        v46))
  {
    v47 = 2;
  }
  else if (v45 >> 28)
  {
    v53 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
    v44 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v44 = v53;
    *(_DWORD *)(v44 + 8) = v45;
    v47 = 1;
  }
  else
  {
    v47 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
    v44 = v45 << 36;
  }
  v23 = 0;
  v24 = v44 | v47;
LABEL_6:
  v62 = v24;
  v32 = JSC::DFG::CodeOriginPool::addCodeOrigin(v22, &v62);
  if ((v62 & 1) != 0 && (v62 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v62 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
  if ((v23 & 1) == 0 && (v21 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v21 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
  if (v20)
  {
    v34 = v61;
    if ((v61 & 1) != 0)
    {
      v48 = *(_QWORD *)(v61 & 0xFFFFFFFF8);
      if ((v61 & 2) != 0
        || (v49 = *(unsigned int *)((v61 & 0xFFFFFFFF8) + 8), (_DWORD)v49 == 0x3FFFFFFF)
        || (_DWORD)v49 == -1)
      {
        v50 = 2;
      }
      else if (v49 >> 28)
      {
        v54 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v54 = v48;
        *(_DWORD *)(v54 + 8) = v49;
        v50 = 1;
        v48 = v54;
      }
      else
      {
        v50 = *(_QWORD *)(v61 & 0xFFFFFFFF8);
        v48 = v49 << 36;
      }
      v34 = v48 | v50;
    }
    v58 = v34;
    memset(v57, 0, sizeof(v57));
    v55 = (WTF *)v57;
    v56 = 2;
    JSC::DFG::JITCompiler::appendExceptionHandlingOSRExit((uint64_t)this, (uint64_t)this, 0x1BuLL, a3, &v58, (uint64_t)v60, v32, (uint64_t)&v55);
    v35 = v55;
    if (v57 != (_QWORD *)v55 && v55)
    {
      v55 = 0;
      LODWORD(v56) = 0;
      WTF::fastFree((unint64_t)v35, v25, v26, v27, v28, v29, v30, v31);
    }
    if ((v58 & 1) != 0 && (v58 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v58 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
  }
  if ((v61 & 1) != 0 && (v61 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v61 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
  return v32;
}

void JSC::DFG::SpeculativeJIT::emitAllocateRawObject(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  char v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x8_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  JSC::ARM64LogicalImmediate *v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  int v44;
  JSC::VM *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  _BYTE *v73;
  WTF *v74;
  WTF *v75;
  unsigned int v76;
  int v77;
  _BYTE *v78;
  unint64_t v79;
  WTF *v80;
  WTF *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF *v98;
  _QWORD *v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF *v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  int v139;
  uint64_t v140;
  unsigned int v141;
  int v142;
  unint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v151;
  unsigned int v152;
  char v153;
  int *v154;
  int *v155;
  int v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  int v171;
  JSC::AssemblerBuffer *v172;
  unsigned int v173;
  unint64_t v174;
  int v175;
  unsigned int v176;
  int v177;
  JSC::VM *v178;
  unsigned int v179;
  uint64_t v180;
  _DWORD v181[2];
  char v182;
  __int16 v183;
  char v184;
  int v185;
  int v186;
  char v187;
  __int16 v188;
  char v189;
  WTF *v190;
  uint64_t v191;
  _BYTE v192[24];
  uint64_t v193;
  char v194;
  uint64_t v195;
  char v196;
  WTF *v197;
  unsigned int v198;
  unsigned int v199;
  _BYTE v200[24];
  _BYTE *v201;
  char *v202;
  _BYTE v203[32];

  v8 = a6;
  v9 = a5;
  v14 = *(_BYTE *)(a3 + 8);
  v15 = *(unsigned __int8 *)(a3 + 14);
  v16 = *(unsigned __int16 *)(a3 + 24);
  if (v16 == 65534)
    goto LABEL_5;
  if (v16 == 0xFFFF)
    v16 = *(_DWORD *)(*(_QWORD *)(a3 + 64) + 84);
  if (v16 < 64)
  {
LABEL_5:
    v17 = 0;
  }
  else if ((v16 - 63) >= 5)
  {
    v132 = (v16 - 64) | ((v16 - 64) >> 1) | (((v16 - 64) | ((v16 - 64) >> 1)) >> 2);
    v133 = v132 | (v132 >> 4) | ((v132 | (v132 >> 4)) >> 8);
    v17 = (v133 | HIWORD(v133)) + 1;
  }
  else
  {
    v17 = 4;
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v195, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v193, (JSC::DFG::SpeculativeJIT *)a1, v18, v19, v20, v21, v22, v23);
  v32 = *(unsigned __int16 *)(a3 + 24);
  if (v32 == 65534)
    goto LABEL_10;
  if (v32 == 0xFFFF)
    v32 = *(_DWORD *)(*(_QWORD *)(a3 + 64) + 84);
  if (v32 < 64)
  {
LABEL_10:
    v33 = 0;
  }
  else if ((v32 - 63) >= 5)
  {
    v134 = (v32 - 64) | ((v32 - 64) >> 1) | (((v32 - 64) | ((v32 - 64) >> 1)) >> 2);
    v135 = v134 | (v134 >> 4) | ((v134 | (v134 >> 4)) >> 8);
    v33 = (v135 | HIWORD(v135)) + 1;
  }
  else
  {
    v33 = 4;
  }
  v34 = v33;
  if (v8 <= 3)
    LODWORD(v35) = 3;
  else
    LODWORD(v35) = v8;
  if (v8)
    v35 = v35;
  else
    v35 = 5;
  v36 = v35 + v33;
  v37 = 8 * v36;
  v176 = v9;
  v171 = v15;
  if (v36 > 9)
  {
    if (v36 > 0x3EB)
      v38 = v37 + 8;
    else
      v38 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                            + (((unint64_t)(v37 + 23) >> 2) & 0x7FFFFFFFCLL));
  }
  else
  {
    v38 = (v37 + 23) & 0x1FFFFFFFF0;
  }
  v179 = v196;
  v39 = v194;
  v190 = (WTF *)v192;
  v191 = 2;
  v174 = v38 - 8 * v34 - 8;
  v40 = (JSC::ARM64LogicalImmediate *)(v174 >> 3);
  v41 = 8 * (_QWORD)v40 + 8;
  v177 = v14 & 0xE;
  if ((v14 & 0xE) == 0)
    v41 = 0;
  v42 = v41 + 8 * v17;
  v43 = *(_DWORD *)(a1 + 200);
  if (v43 + 4 > *(_DWORD *)(a1 + 192))
  {
    v31 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v24, v25, v26, v27, v28, v29, v30).n128_u64[0];
    v43 = *(_DWORD *)(a1 + 200);
  }
  v172 = (JSC::AssemblerBuffer *)(a1 + 56);
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v43) = a4 & 0x1F | 0xD2800000;
  v44 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v44;
  v45 = *(JSC::VM **)(*(_QWORD *)(a1 + 352) + 16);
  v46 = v39;
  v178 = v45;
  if (v42)
  {
    if (v42 <= 0x1F60 && (v47 = *(char **)((char *)v45 + (((v42 + 15) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
    {
      v201 = 0;
      v202 = v47;
      JSC::AssemblyHelpers::emitAllocate(a1, a4, (uint64_t)&v201, v179, v46, (uint64_t)&v190, 0, v30, v31);
      JSC::MacroAssemblerARM64::add64(a1, (8 * v17 + 8) & 0xFFFFFFF8, a4, a4, v48, v49, v50, v51);
      v45 = v178;
      if (v177)
      {
        if ((v174 >> 3))
        {
          if (!*(_BYTE *)(a1 + 212))
          {
            __break(0xC471u);
            JUMPOUT(0x197B69A94);
          }
          JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, v40, a1 + 264, v26, v27, v28, v29, v30);
          v52 = a1;
          v53 = 16;
        }
        else
        {
          v52 = a1;
          v53 = 63;
        }
        JSC::MacroAssemblerARM64::store32(v52, v53, a4 | 0xFFFFFFFC00000000, v26, v27, v28, v29, v30);
        v45 = v178;
      }
    }
    else
    {
      for (; v44 < *(_DWORD *)(a1 + 52); v45 = v178)
      {
        if ((v44 + 4) > *(_DWORD *)(a1 + 192))
        {
          v31 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v172, v24, v25, v26, v27, v28, v29, v30).n128_u64[0];
          v44 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v44) = -721215457;
        v44 = *(_DWORD *)(a1 + 200) + 4;
        *(_DWORD *)(a1 + 200) = v44;
      }
      v152 = v44;
      if ((v44 + 4) > *(_DWORD *)(a1 + 192))
      {
        v31 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v172, v24, v25, v26, v27, v28, v29, v30).n128_u64[0];
        v45 = v178;
        v152 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v152) = 335544320;
      *(_DWORD *)(a1 + 200) += 4;
      if (*(_BYTE *)(a1 + 328))
        v153 = 69;
      else
        v153 = 65;
      v185 = v44;
      v186 = 0;
      v187 = v153;
      v188 = 15;
      v189 = -1;
      if (v44 != -1)
      {
        if (HIDWORD(v191) == (_DWORD)v191)
        {
          v154 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v190, (void *)(HIDWORD(v191) + 1), (unint64_t)&v185, v26, v27, v28, v29, v30);
          v45 = v178;
          v156 = *v154;
          v155 = v154 + 1;
          v157 = (char *)v190 + 12 * HIDWORD(v191);
          *(_DWORD *)v157 = v156;
        }
        else
        {
          v155 = &v186;
          v157 = (char *)v190 + 12 * HIDWORD(v191);
          *(_DWORD *)v157 = v44;
        }
        *(_QWORD *)(v157 + 4) = *(_QWORD *)v155;
        ++HIDWORD(v191);
      }
    }
  }
  if (*(_BYTE *)(a3 + 9) == 36)
  {
    if (*((_DWORD *)v45 + 9405) <= 0xFu)
    {
      __break(0xC471u);
      goto LABEL_150;
    }
    v54 = (char *)v45 + 37560;
  }
  else
  {
    v54 = *(char **)((char *)v45 + (((8 * v171 + 31) >> 1) & 0x7F8) + 15024);
    if (!v54)
    {
      JSC::ARM64Assembler::label((_DWORD *)(a1 + 32), v24, v25, v26, v27, v28, v29, v30, (int *)&v201);
      JSC::AssemblerBuffer::putInt(v172, 335544320, v158, v159, v160, v161, v162, v163);
      if (*(_BYTE *)(a1 + 328))
        v170 = 69;
      else
        v170 = 65;
      v181[0] = (_DWORD)v201;
      v181[1] = 0;
      v182 = v170;
      v183 = 15;
      v184 = -1;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v190, v181, v164, v165, v166, v167, v168, v169);
      goto LABEL_38;
    }
  }
  v201 = 0;
  v202 = v54;
  JSC::AssemblyHelpers::emitAllocate(a1, a2, (uint64_t)&v201, (char)v179, v46, (uint64_t)&v190, 1, v30, v31);
  v60 = (a3 >> 4) | ((unint64_t)*(unsigned int *)(a3 + 8) << 32);
  if (v60)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197B69A54);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, v60, a1 + 264, v55, v56, v57, v58, v59);
    v61 = 16;
  }
  else
  {
    v61 = 63;
  }
  JSC::MacroAssemblerARM64::store64(a1, v61, a2, v55, v56, v57, v58, v59);
  JSC::MacroAssemblerARM64::store64(a1, a4, a2 | 0x800000000, v62, v63, v64, v65, v66);
  JSC::AssemblyHelpers::emitFillStorageWithJSEmpty(a1, a2, 16, *(unsigned __int8 *)(a3 + 14), v179, v67, v68, v69);
LABEL_38:
  v70 = WTF::fastMalloc((WTF *)0xA8);
  v71 = HIDWORD(v191);
  v197 = (WTF *)v200;
  v198 = 2;
  v199 = HIDWORD(v191);
  if (HIDWORD(v191) < 3)
  {
    v73 = v200;
  }
  else
  {
    if (HIDWORD(v191) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197B69BBCLL);
    }
    v72 = 12 * HIDWORD(v191);
    v73 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v191)));
    v198 = (v72 & 0xFFFFFFFC) / 0xC;
    v197 = (WTF *)v73;
    v71 = HIDWORD(v191);
  }
  if (v71)
  {
    v74 = v190;
    v75 = (WTF *)((char *)v190 + 12 * v71);
    do
    {
      *(_DWORD *)v73 = *(_DWORD *)v74;
      *(_QWORD *)(v73 + 4) = *(_QWORD *)((char *)v74 + 4);
      v74 = (WTF *)((char *)v74 + 12);
      v73 += 12;
    }
    while (v74 != v75);
  }
  v76 = v199;
  v201 = v203;
  LODWORD(v202) = 2;
  HIDWORD(v202) = v199;
  if (v199 >= 3)
  {
    if (v199 < 0x15555556)
    {
      v77 = 12 * v199;
      v78 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v199));
      LODWORD(v202) = (v77 & 0xFFFFFFFC) / 0xC;
      v201 = v78;
      v76 = v199;
      goto LABEL_49;
    }
    __break(0xC471u);
LABEL_150:
    JUMPOUT(0x197B69A24);
  }
  v78 = v203;
LABEL_49:
  v79 = v174 >> 3;
  if (v76)
  {
    v80 = v197;
    v81 = (WTF *)((char *)v197 + 12 * v76);
    do
    {
      *(_DWORD *)v78 = *(_DWORD *)v80;
      *(_QWORD *)(v78 + 4) = *(_QWORD *)((char *)v80 + 4);
      v80 = (WTF *)((char *)v80 + 12);
      v78 += 12;
    }
    while (v80 != v81);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v70, (uint64_t *)&v201, (_DWORD *)a1);
  v89 = (unint64_t)v201;
  if (v203 != v201 && v201 != 0)
  {
    v201 = 0;
    LODWORD(v202) = 0;
    WTF::fastFree(v89, v82, v83, v84, v85, v86, v87, v88);
  }
  *(_QWORD *)v70 = off_1E3572970;
  *(_QWORD *)(v70 + 96) = operationNewRawObject;
  *(_BYTE *)(v70 + 104) = a2;
  *(_BYTE *)(v70 + 105) = a4;
  *(_DWORD *)(v70 + 108) = v79;
  *(_QWORD *)(v70 + 112) = a3;
  *(_QWORD *)(v70 + 120) = v70 + 136;
  *(_QWORD *)(v70 + 128) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, 0, v70 + 120, a2, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v87, v88);
  v98 = v197;
  if (v200 != (_BYTE *)v197 && v197)
  {
    v197 = 0;
    v198 = 0;
    WTF::fastFree((unint64_t)v98, v91, v92, v93, v94, v95, v96, v97);
  }
  v180 = v70;
  v99 = (_QWORD *)(a1 + 5656);
  v100 = *(unsigned int *)(a1 + 5668);
  v101 = v176;
  if ((_DWORD)v100 == *(_DWORD *)(a1 + 5664))
  {
    v103 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v99, v100 + 1, (unint64_t)&v180);
    v100 = *(unsigned int *)(a1 + 5668);
    v102 = (uint64_t *)(*(_QWORD *)(a1 + 5656) + 8 * v100);
    v70 = *v103;
  }
  else
  {
    v102 = (uint64_t *)(*v99 + 8 * v100);
    v103 = &v180;
  }
  *v103 = 0;
  *v102 = v70;
  *(_DWORD *)(a1 + 5668) = v100 + 1;
  v104 = v180;
  v180 = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  v105 = v79 - v176;
  if (v79 > v176)
  {
    if ((*(_BYTE *)(a3 + 8) & 0xE) == 6)
    {
      v138 = *(_DWORD *)(a1 + 200);
      if (v138 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v172, (uint64_t)v91, v92, v93, v94, v95, v96, v97);
        v138 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v138) = v179 | 0xB24D2FE0;
      *(_DWORD *)(a1 + 200) += 4;
      if (v105 < 2)
      {
        v151 = 0;
      }
      else
      {
        v139 = v179 & 0x1F;
        v140 = -(uint64_t)(v105 >> 1);
        v141 = v176 << 15;
        v142 = 8 * v176;
        v175 = (32 * a4) | (v139 << 10);
        v173 = v139 | 0xA9000000;
        v143 = a4 | ((unint64_t)v176 << 35);
        do
        {
          if (((v142 >> 3) + 64) > 0x7F)
          {
            JSC::MacroAssemblerARM64::store64(a1, (char)v179, v143, v93, v94, v95, v96, v97);
            JSC::MacroAssemblerARM64::store64(a1, (char)v179, v143 + 0x800000000, v145, v146, v147, v148, v149);
          }
          else
          {
            v144 = *(_DWORD *)(a1 + 200);
            if (v144 + 4 > *(_DWORD *)(a1 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v172, (uint64_t)v91, v92, v93, v94, v95, v96, v97);
              v144 = *(_DWORD *)(a1 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 56) + v144) = v175 | v141 & 0x3F8000 | v173;
            *(_DWORD *)(a1 + 200) += 4;
          }
          v143 += 0x1000000000;
          v141 += 0x10000;
          v142 += 16;
        }
        while (!__CFADD__(v140++, 1));
        v151 = (unint64_t)(v105 & 0x1FFFFFFE) << 35;
        v101 = v176;
      }
      if ((v105 & 1) != 0)
        JSC::MacroAssemblerARM64::store64(a1, v179, (v151 + ((unint64_t)v176 << 35)) | a4, v93, v94, v95, v96, v97);
    }
    else
    {
      JSC::AssemblyHelpers::emitFillStorageWithJSEmpty(a1, a4, 8 * v176, v79 - v176, (char)v179, v95, v96, v97);
    }
  }
  if (v177)
  {
    if (v101)
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197B69A74);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)v176, a1 + 264, v93, v94, v95, v96, v97);
      v106 = 16;
    }
    else
    {
      v106 = 63;
    }
    JSC::MacroAssemblerARM64::store32(a1, v106, a4 | 0xFFFFFFF800000000, v93, v94, v95, v96, v97);
  }
  v107 = *(unsigned __int16 *)(a3 + 24);
  if (v107 == 65534)
    goto LABEL_76;
  if (v107 == 0xFFFF)
    v107 = *(_DWORD *)(*(_QWORD *)(a3 + 64) + 84);
  if (v107 < 64)
  {
LABEL_76:
    v108 = 0;
  }
  else if ((v107 - 63) >= 5)
  {
    v136 = (v107 - 64) | ((v107 - 64) >> 1) | (((v107 - 64) | ((v107 - 64) >> 1)) >> 2);
    v137 = v136 | (v136 >> 4) | ((v136 | (v136 >> 4)) >> 8);
    v108 = (v137 | HIWORD(v137)) + 1;
  }
  else
  {
    v108 = 4;
  }
  JSC::AssemblyHelpers::emitFillStorageWithJSEmpty(a1, a4, 8 * ~(unint64_t)v108, v108, v179, v95, v96, v97);
  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded((JSC::AssemblyHelpers *)a1, v178, v109, v110, v111, v112, v113, (uint64_t)&v201);
  v121 = *(_DWORD *)(a1 + 200);
  if (v121 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v172, v114, v115, v116, v117, v118, v119, v120);
    v121 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v121) = -721208641;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v201, a1, v115, v116, v117, v118, v119, v120);
  v129 = v190;
  if (v192 != (_BYTE *)v190 && v190)
  {
    v190 = 0;
    LODWORD(v191) = 0;
    WTF::fastFree((unint64_t)v129, v122, v123, v124, v125, v126, v127, v128);
  }
  if (v193)
  {
    v130 = v194;
    if (v194 != -1)
    {
      if (v194 > 15)
        v130 = -1;
      --*(_DWORD *)(v193 + 12 * v130 + 4784);
    }
  }
  if (v195)
  {
    v131 = v196;
    if (v196 != -1)
    {
      if (v196 > 15)
        v131 = -1;
      --*(_DWORD *)(v195 + 12 * v131 + 4784);
    }
  }
}

void JSC::MacroAssemblerARM64::store32(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;

  v9 = a1;
  if (!a2)
  {
    v10 = 63;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a1 + 212))
  {
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a2, a1 + 264, a4, a5, a6, a7, a8);
    a1 = v9;
    v10 = 16;
LABEL_5:
    JSC::MacroAssemblerARM64::store32(a1, v10, a3, a4, a5, a6, a7, a8);
    return;
  }
  __break(0xC471u);
}

_DWORD *JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(_DWORD *result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v8 = *a2;
  if (*a2 != -1)
  {
    v9 = a2;
    v10 = result;
    v11 = result[3];
    if ((_DWORD)v11 == result[2])
    {
      result = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, (void *)(v11 + 1), (unint64_t)a2, a4, a5, a6, a7, a8);
      v9 = result;
      v12 = *(_QWORD *)v10 + 12 * v10[3];
      v8 = *result;
    }
    else
    {
      v12 = *(_QWORD *)result + 12 * v11;
    }
    *(_DWORD *)v12 = v8;
    *(_QWORD *)(v12 + 4) = *(_QWORD *)(v9 + 1);
    ++v10[3];
  }
  return result;
}

uint64_t *JSC::DFG::SpeculativeJIT::addSlowPathGenerator(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = (uint64_t *)a2;
  result = (uint64_t *)(a1 + 5656);
  v5 = *(unsigned int *)(a1 + 5668);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 5664))
  {
    result = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v5 + 1, a2);
    v2 = result;
    v5 = *(unsigned int *)(a1 + 5668);
    v6 = (_QWORD *)(*(_QWORD *)(a1 + 5656) + 8 * v5);
  }
  else
  {
    v6 = (_QWORD *)(*result + 8 * v5);
  }
  v7 = *v2;
  *v2 = 0;
  *v6 = v7;
  *(_DWORD *)(a1 + 5668) = v5 + 1;
  return result;
}

void JSC::AssemblyHelpers::emitFillStorageWithJSEmpty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  JSC::AssemblerBuffer *v23;

  if (!(_DWORD)a4)
    return;
  v8 = a4;
  if ((_DWORD)a4 == 1)
  {
    v22 = 0;
    v12 = a2;
LABEL_14:
    JSC::MacroAssemblerARM64::store64(a1, 63, (v22 + (a3 << 32)) | v12, a4, a5, a6, a7, a8);
    return;
  }
  v11 = a4 >> 1;
  v12 = a2;
  v23 = (JSC::AssemblerBuffer *)(a1 + 56);
  v13 = a2 | (unint64_t)(a3 << 32);
  v14 = (32 * a2) | 0xA9007C1F;
  v15 = a3;
  do
  {
    if ((v15 & 7) != 0 || ((v15 >> 3) + 64) > 0x7F)
    {
      JSC::MacroAssemblerARM64::store64(a1, 63, v13, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::store64(a1, 63, v13 + 0x800000000, v17, v18, v19, v20, v21);
    }
    else
    {
      v16 = *(_DWORD *)(a1 + 200);
      if (v16 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v23, a2, a3, a4, a5, a6, a7, a8);
        v16 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v16) = v14 | (((v15 >> 3) & 0x7F) << 15);
      *(_DWORD *)(a1 + 200) += 4;
    }
    v13 += 0x1000000000;
    v15 += 16;
    --v11;
  }
  while (v11);
  if ((v8 & 1) != 0)
  {
    v22 = (unint64_t)(v8 & 0x1FFFFFFE) << 35;
    goto LABEL_14;
  }
}

unsigned int *JSC::AssemblyHelpers::mutatorFence(JSC::AssemblyHelpers *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v18[3];

  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(this, a2, a4, a5, a6, a7, a8, (uint64_t)v18);
  v16 = *((_DWORD *)this + 50);
  if (v16 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblyHelpers *)((char *)this + 56), v9, v10, v11, v12, v13, v14, v15);
    v16 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v16) = -721208641;
  *((_DWORD *)this + 50) += 4;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v18, (uint64_t)this, v10, v11, v12, v13, v14, v15);
}

void JSC::DFG::SpeculativeJIT::emitGetCallee(_DWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  JSC::ARM64LogicalImmediate *v20;

  v10 = *a2 & 0xFFFFFFFF8;
  if ((*a2 & 1) != 0)
    v10 = *(_QWORD *)v10;
  if (v10)
  {
    v13 = *(_QWORD *)(v10 + 41);
    if ((*(_BYTE *)(v10 + 32) & 1) != 0)
    {
      JSC::MacroAssemblerARM64::load64((uint64_t)a1, (v13 << 35) | 0x1D, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v19, (JSC::DFG::JITCompiler *)a1, v13, a4, a5, a6, a7, a8);
      if (v19 == 0xFFFFFFFFLL)
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a1, (uint64_t)v20, a3, v14, v15, v16, v17, v18);
      else
        JSC::MacroAssemblerARM64::load64((uint64_t)a1, ((unint64_t)v19 << 35) + 0x380000001ALL, a3, v14, v15, v16, v17, v18);
    }
  }
  else
  {
    v11 = a3 & 0x1F | 0xF84183A0;
    v12 = a1[50];
    if (v12 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v12 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v11;
    a1[50] += 4;
  }
}

void JSC::DFG::SpeculativeJIT::emitGetArgumentStart(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = (_QWORD *)(*a2 & 0xFFFFFFFF8);
  if ((*a2 & 1) != 0)
    v8 = (_QWORD *)*v8;
  if (!v8)
  {
    v9 = 48;
LABEL_5:
    JSC::MacroAssemblerARM64::add64(a1, v9, 29, a3, a5, a6, a7, a8);
    return;
  }
  v10 = (_QWORD *)*v8;
  if (!v10 || *(_DWORD *)v10 < 2u)
  {
    v9 = 4294967288;
    goto LABEL_5;
  }
  if (*((_BYTE *)v10 + 13) == 8)
  {
    v9 = (8 * *(_DWORD *)((char *)v10 + 14));
    goto LABEL_5;
  }
  __break(0xC471u);
}

void JSC::DFG::SpeculativeJIT::emitOSRExitFuzzCheck(JSC::DFG::SpeculativeJIT *this, uint64_t a2)
{
  JSC::DFG::SpeculativeJIT *v2;
  JSC::DFG *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int canUseOSRExitFuzzing;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v63[3];
  int v64;

  if (!HIBYTE(word_1ECF4C648))
    goto LABEL_2;
  v2 = this;
  v3 = *(JSC::DFG **)(*(_QWORD *)(a2 + 3960) + 40);
  v4 = *(_QWORD *)(a2 + 5472);
  v5 = (_QWORD *)(v4 & 0xFFFFFFFF8);
  if ((v4 & 1) != 0)
    v5 = (_QWORD *)*v5;
  if (v5)
    v3 = (JSC::DFG *)v5[1];
  canUseOSRExitFuzzing = JSC::DFG::canUseOSRExitFuzzing(v3, (JSC::CodeBlock *)a2);
  this = v2;
  if (canUseOSRExitFuzzing
    && ((v13 = JSC::DFG::g_numberOfStaticOSRExitFuzzChecks + 1,
         ++JSC::DFG::g_numberOfStaticOSRExitFuzzChecks,
         unk_1ECF4C64C)
      ? (v14 = unk_1ECF4C64C == v13)
      : (v14 = 1),
        v14))
  {
    *(_QWORD *)v2 = 0xFFFFFFFFLL;
    *((_DWORD *)v2 + 2) = -16773311;
    JSC::MacroAssemblerARM64::pushToSave((_DWORD *)a2, 0, v6, v7, v8, v9, v10, v11);
    JSC::MacroAssemblerARM64::load32(a2, (uint64_t)&JSC::DFG::g_numberOfOSRExitFuzzChecks, 0, v15, v16, v17, v18, v19);
    v27 = *(_DWORD *)(a2 + 200);
    if (v27 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v20, v21, v22, v23, v24, v25, v26);
      v27 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v27) = 285213696;
    *(_DWORD *)(a2 + 200) += 4;
    JSC::MacroAssemblerARM64::store32(a2, 0, (JSC::ARM64LogicalImmediate *)&JSC::DFG::g_numberOfOSRExitFuzzChecks, v22, v23, v24, v25, v26);
    if (qword_1ECF4C650)
    {
      if (HIDWORD(qword_1ECF4C650))
        v34 = HIDWORD(qword_1ECF4C650);
      else
        v34 = qword_1ECF4C650;
      if (HIDWORD(qword_1ECF4C650))
        v35 = 3;
      else
        v35 = 1;
      JSC::MacroAssemblerARM64::branch32(a2, v35, 0, v34, v30, v31, v32, v33, (uint64_t)v63);
      JSC::MacroAssemblerARM64::popToRestore((_DWORD *)a2, 0, v36, v37, v38, v39, v40, v41);
      JSC::ARM64Assembler::label((_DWORD *)(a2 + 32), v42, v43, v44, v45, v46, v47, v48, &v64);
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), 335544320, v49, v50, v51, v52, v53, v54);
      v61 = 0xFF000F4500000000;
      if (!*(_BYTE *)(a2 + 328))
        v61 = 0xFF000F4100000000;
      *(_DWORD *)v2 = v64;
      *(_QWORD *)((char *)v2 + 4) = v61;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v63, a2, v55, v56, v57, v58, v59, v60);
    }
    JSC::MacroAssemblerARM64::popToRestore((_DWORD *)a2, 0, v28, v29, v30, v31, v32, v33);
  }
  else
  {
LABEL_2:
    *(_QWORD *)this = 0xFFFFFFFFLL;
    *((_DWORD *)this + 2) = -16773311;
  }
}

void JSC::MacroAssemblerARM64::pushToSave(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned int v10;

  v8 = a2;
  v10 = a1[50];
  if (v10 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v10 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v10) = v8 & 0x1F | 0xF81F0FE0;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::store32(uint64_t a1, uint64_t a2, JSC::ARM64LogicalImmediate *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  JSC::AssemblerBuffer *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v60;
  JSC::AssemblerBuffer *v61;
  unsigned int v62;
  unsigned int v63;

  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_137;
  v9 = a2;
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) & *(_DWORD *)(a1 + 320)) == 0)
    goto LABEL_3;
  v29 = *(_QWORD *)(a1 + 312);
  v30 = (_DWORD)this - v29;
  if ((JSC::ARM64LogicalImmediate *)((char *)this - v29) != (JSC::ARM64LogicalImmediate *)((int)this - (int)v29))
    goto LABEL_142;
  if (v30 + 256 <= 0x1FF)
  {
    v31 = a2 & 0x1F | ((v30 & 0x1FF) << 12) | 0xB8000220;
    v32 = *(_DWORD *)(a1 + 200);
    if (v32 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, (uint64_t)this, a4, a5, a6, a7, a8);
      v32 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v32) = v31;
    goto LABEL_14;
  }
  if (v30 > 0x3FFC || (v30 & 3) != 0)
  {
LABEL_142:
    if ((v29 ^ (unint64_t)this) >> 16)
    {
LABEL_3:
      if (this == (JSC::ARM64LogicalImmediate *)-1)
      {
        v11 = -1837105135;
        goto LABEL_7;
      }
      if (!this)
      {
        v11 = -763363311;
LABEL_7:
        v13 = (unsigned int *)(a1 + 200);
        v12 = *(_DWORD *)(a1 + 200);
        v14 = (JSC::AssemblerBuffer *)(a1 + 56);
        v15 = v12 + 4;
        v16 = *(_DWORD *)(a1 + 192);
        goto LABEL_8;
      }
      v18 = (unint64_t)this ^ ((uint64_t)this >> 63);
      v19 = HIDWORD(v18);
      if (!HIDWORD(v18))
        v19 = (unint64_t)this ^ ((uint64_t)this >> 63);
      if (v19 < 0x10000)
      {
        v20 = 32 * (HIDWORD(v18) != 0);
      }
      else
      {
        v19 >>= 16;
        v20 = (32 * (HIDWORD(v18) != 0)) | 0x10;
      }
      if (v19 >= 0x100)
      {
        v19 >>= 8;
        v20 |= 8u;
      }
      if (v19 >= 0x10)
      {
        v19 >>= 4;
        v20 |= 4u;
      }
      if (v19 >= 4)
      {
        v19 >>= 2;
        v20 += 2;
      }
      if (v19 <= 1)
        v21 = v20;
      else
        v21 = v20 + 1;
      v22 = (unint64_t)this >> 32;
      v23 = (0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v21) ^ v18;
      if (v23)
      {
        v24 = HIDWORD(v23);
        if (!HIDWORD(v23))
          v24 = v23;
        v25 = (32 * (HIDWORD(v23) != 0)) | 0x10;
        if (v24 < 0x10000)
          v25 = 32 * (HIDWORD(v23) != 0);
        else
          v24 >>= 16;
        if (v24 >= 0x100)
        {
          v24 >>= 8;
          v25 |= 8u;
        }
        if (v24 >= 0x10)
        {
          v24 >>= 4;
          v25 |= 4u;
        }
        if (v24 >= 4)
        {
          v24 >>= 2;
          v25 += 2;
        }
        if (v24 > 1)
          ++v25;
        if (v23 != 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v25)
        {
          if ((_DWORD)this != HIDWORD(this))
            goto LABEL_45;
          v58 = JSC::ARM64LogicalImmediate::create32(this);
LABEL_120:
          if (v58 != -1)
          {
            v11 = (v58 << 10) | 0xB20003F1;
            goto LABEL_7;
          }
LABEL_45:
          if ((unsigned __int16)this == 0xFFFF)
            v26 = -1;
          else
            v26 = 0;
          if ((_WORD)this)
            v27 = v26;
          else
            v27 = 1;
          v28 = WORD1(this);
          if (WORD1(this))
          {
            if (WORD1(this) == 0xFFFF)
              --v27;
          }
          else
          {
            ++v27;
          }
          if (WORD2(this))
          {
            if (WORD2(this) == 0xFFFF)
              --v27;
          }
          else
          {
            ++v27;
          }
          v33 = (unint64_t)this >> 48;
          if ((unint64_t)this >> 48)
          {
            if ((_DWORD)v33 == 0xFFFF)
              --v27;
          }
          else
          {
            ++v27;
          }
          v14 = (JSC::AssemblerBuffer *)(a1 + 56);
          v13 = (unsigned int *)(a1 + 200);
          if ((v27 & 0x80000000) == 0)
          {
            if ((_WORD)this)
            {
              v34 = (32 * (unsigned __int16)this) | 0xD2800011;
              v35 = *(_DWORD *)(a1 + 200);
              if (v35 + 4 > *(_DWORD *)(a1 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, (uint64_t)this, a4, a5, a6, a7, a8);
                v34 = (32 * (unsigned __int16)this) | 0xD2800011;
                v28 = WORD1(this);
                v35 = *v13;
              }
              *(_DWORD *)(*(_QWORD *)v14 + v35) = v34;
              v36 = *v13;
              v37 = *v13 + 4;
              *v13 = v37;
              if (!v28)
                goto LABEL_77;
              v38 = (32 * (this >> 16)) | 0xF2A00011;
              v39 = v36 + 8;
            }
            else
            {
              if (!WORD1(this))
              {
                LOBYTE(v28) = 1;
LABEL_77:
                if (!WORD2(this))
                {
                  if (!(_DWORD)v33)
                    goto LABEL_10;
                  v42 = 32 * v33;
                  v12 = *(_DWORD *)(a1 + 200);
                  if ((v28 & 1) != 0)
                    v11 = v42 | 0xD2E00011;
                  else
                    v11 = v42 | 0xF2E00011;
                  if (v12 + 4 <= *(_DWORD *)(a1 + 192))
                    goto LABEL_9;
                  goto LABEL_114;
                }
                v40 = *(_DWORD *)(a1 + 200);
                if ((v28 & 1) != 0)
                  v41 = -759169007;
                else
                  v41 = -222298095;
                v43 = (32 * (unsigned __int16)v22) | v41;
                if (v40 + 4 > *(_DWORD *)(a1 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, (uint64_t)this, a4, a5, a6, a7, a8);
                  v40 = *v13;
                }
                *(_DWORD *)(*(_QWORD *)v14 + v40) = v43;
                v44 = *v13;
                v12 = *v13 + 4;
                *v13 = v12;
                if (!(_DWORD)v33)
                  goto LABEL_10;
                v15 = v44 + 8;
                v16 = *(_DWORD *)(a1 + 192);
                v11 = (32 * v33) | 0xF2E00011;
LABEL_8:
                if (v15 <= v16)
                {
LABEL_9:
                  *(_DWORD *)(*(_QWORD *)v14 + v12) = v11;
                  *v13 += 4;
LABEL_10:
                  if (!*(_BYTE *)(a1 + 212))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197B6AB4CLL);
                  }
                  *(_QWORD *)(a1 + 312) = this;
                  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) |= *(_DWORD *)(a1 + 320);
                  v17 = *(_DWORD *)(a1 + 200);
                  if (v17 + 4 > *(_DWORD *)(a1 + 192))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, (uint64_t)this, a4, a5, a6, a7, a8);
                    v17 = *(_DWORD *)(a1 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v17) = v9 & 0x1F | 0xB83F6A20;
LABEL_14:
                  *(_DWORD *)(a1 + 200) += 4;
                  return;
                }
LABEL_114:
                JSC::AssemblerBuffer::outOfLineGrow(v14, a2, (uint64_t)this, a4, a5, a6, a7, a8);
                v12 = *v13;
                goto LABEL_9;
              }
              v38 = (32 * (this >> 16)) | 0xD2A00011;
              v37 = *(_DWORD *)(a1 + 200);
              v39 = v37 + 4;
            }
            if (v39 > *(_DWORD *)(a1 + 192))
            {
              v62 = v38;
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, (uint64_t)this, a4, a5, a6, a7, a8);
              v38 = v62;
              v37 = *v13;
            }
            LOBYTE(v28) = 0;
            *(_DWORD *)(*(_QWORD *)v14 + v37) = v38;
            *v13 += 4;
            goto LABEL_77;
          }
          if ((unsigned __int16)this == 0xFFFF)
          {
            if (WORD1(this) == 0xFFFF)
            {
              if (WORD2(this) == 0xFFFF)
              {
                if ((_DWORD)v33 == 0xFFFF)
                  goto LABEL_10;
                v11 = (32 * (v33 ^ 0xFFFF)) | 0x92E00011;
                v12 = *(_DWORD *)(a1 + 200);
                goto LABEL_110;
              }
              v12 = *(_DWORD *)(a1 + 200);
              v50 = v12 + 4;
              v51 = *(_DWORD *)(a1 + 192);
              v52 = (32 * (WORD2(this) ^ 0xFFFF)) | 0x92C00011;
              goto LABEL_105;
            }
            v48 = (32 * (WORD1(this) ^ 0xFFFF)) | 0x92A00011;
            v12 = *(_DWORD *)(a1 + 200);
            v49 = v12 + 4;
          }
          else
          {
            v45 = (32 * ((unsigned __int16)this ^ 0xFFFF)) | 0x92800011;
            v46 = *(_DWORD *)(a1 + 200);
            if (v46 + 4 > *(_DWORD *)(a1 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, (uint64_t)this, a4, a5, a6, a7, a8);
              v45 = (32 * ((unsigned __int16)this ^ 0xFFFF)) | 0x92800011;
              v28 = WORD1(this);
              v46 = *v13;
            }
            *(_DWORD *)(*(_QWORD *)v14 + v46) = v45;
            v47 = *v13;
            v12 = *v13 + 4;
            *v13 = v12;
            if (v28 == 0xFFFF)
              goto LABEL_103;
            v48 = (32 * (this >> 16)) | 0xF2A00011;
            v49 = v47 + 8;
          }
          if (v49 > *(_DWORD *)(a1 + 192))
          {
            v63 = v48;
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, (uint64_t)this, a4, a5, a6, a7, a8);
            v48 = v63;
            v12 = *v13;
          }
          *(_DWORD *)(*(_QWORD *)v14 + v12) = v48;
          v12 = *v13 + 4;
          *v13 = v12;
LABEL_103:
          if (WORD2(this) == 0xFFFF)
          {
LABEL_108:
            if ((_DWORD)v33 == 0xFFFF)
              goto LABEL_10;
            v11 = (32 * v33) | 0xF2E00011;
LABEL_110:
            v15 = v12 + 4;
            v16 = *(_DWORD *)(a1 + 192);
            goto LABEL_8;
          }
          v50 = v12 + 4;
          v51 = *(_DWORD *)(a1 + 192);
          v52 = (32 * (unsigned __int16)v22) | 0xF2C00011;
LABEL_105:
          if (v50 > v51)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, (uint64_t)this, a4, a5, a6, a7, a8);
            v12 = *v13;
          }
          *(_DWORD *)(*(_QWORD *)v14 + v12) = v52;
          v12 = *v13 + 4;
          *v13 = v12;
          goto LABEL_108;
        }
        v53 = v25 + 1;
      }
      else
      {
        v53 = 0;
      }
      v54 = 63 - v21;
      v55 = v21 - v53;
      v56 = v53 - v21 + 62;
      if ((uint64_t)this < 0)
      {
        v57 = v54;
      }
      else
      {
        v56 = v55;
        v57 = -v53 & 0x3F;
      }
      v58 = v56 | (v57 << 6) | 0x1000;
      goto LABEL_120;
    }
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), ((32 * (unsigned __int16)this) | 0xF2E00011) - 6291456, (uint64_t)this, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(a1 + 212))
    {
      *(_QWORD *)(a1 + 312) = this;
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) |= *(_DWORD *)(a1 + 320);
      v60 = v9 & 0x1F | 0xB83F6A20;
      v61 = (JSC::AssemblerBuffer *)(a1 + 56);
      goto LABEL_133;
    }
LABEL_137:
    __break(0xC471u);
    JUMPOUT(0x197B6AB2CLL);
  }
  v60 = a2 & 0x1F | (((v30 >> 2) & 0xFFF) << 10) | 0xB9000220;
  v61 = (JSC::AssemblerBuffer *)(a1 + 56);
LABEL_133:
  JSC::AssemblerBuffer::putInt(v61, v60, (uint64_t)this, a4, a5, a6, a7, a8);
}

void JSC::MacroAssemblerARM64::popToRestore(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned int v10;

  v8 = a2;
  v10 = a1[50];
  if (v10 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v10 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v10) = v8 & 0x1F | 0xF84107E0;
  a1[50] += 4;
}

unsigned int *JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  char v13;
  __int16 v14;
  char v15;
  __int16 v16;
  uint64_t v17;
  int v18;
  char v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  JSC::AssemblerBuffer *v29;
  JSC::AssemblerBuffer *v30;
  JSC::AssemblerBuffer *v31;
  JSC::AssemblerBuffer *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int *v36;
  __int128 v37;
  uint64_t v38;

  *(_DWORD *)(a2 + 208) = 0;
  v9 = *((unsigned __int8 *)result + 8);
  switch(*((_BYTE *)result + 8))
  {
    case 0x83:
    case 0x87:
      v10 = *result;
      v11 = *(_DWORD *)(a2 + 200);
      if (v11 < *(_DWORD *)(a2 + 52))
      {
        v29 = (JSC::AssemblerBuffer *)(a2 + 56);
        do
        {
          if ((v11 + 4) > *(_DWORD *)(a2 + 192))
          {
            v31 = v29;
            v34 = result;
            JSC::AssemblerBuffer::outOfLineGrow(v29, a2, a3, a4, a5, a6, a7, a8);
            v29 = v31;
            result = v34;
            v11 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v11) = -721215457;
          v11 = *(_DWORD *)(a2 + 200) + 4;
          *(_DWORD *)(a2 + 200) = v11;
        }
        while (v11 < *(_DWORD *)(a2 + 52));
        v9 = *((unsigned __int8 *)result + 8);
      }
      v12 = (_QWORD *)(a2 + 32);
      v13 = *((_BYTE *)result + 9);
      v14 = *((unsigned __int8 *)result + 10);
      v15 = *((_BYTE *)result + 11);
      *(_QWORD *)&v37 = v10;
      *((_QWORD *)&v37 + 1) = v11;
      BYTE3(v38) = v13 & 0xF;
      *(_WORD *)((char *)&v38 + 1) = v9;
      v16 = v14 << 6;
      goto LABEL_6;
    case 0x84:
    case 0x88:
      v17 = *result;
      v18 = *(_DWORD *)(a2 + 200);
      if (v18 < *(_DWORD *)(a2 + 52))
      {
        v30 = (JSC::AssemblerBuffer *)(a2 + 56);
        do
        {
          if ((v18 + 4) > *(_DWORD *)(a2 + 192))
          {
            v32 = v30;
            v35 = result;
            JSC::AssemblerBuffer::outOfLineGrow(v30, a2, a3, a4, a5, a6, a7, a8);
            v30 = v32;
            result = v35;
            v18 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v18) = -721215457;
          v18 = *(_DWORD *)(a2 + 200) + 4;
          *(_DWORD *)(a2 + 200) = v18;
        }
        while (v18 < *(_DWORD *)(a2 + 52));
        v9 = *((unsigned __int8 *)result + 8);
      }
      v12 = (_QWORD *)(a2 + 32);
      v19 = *((_BYTE *)result + 9);
      v20 = *((_WORD *)result + 2);
      v15 = *((_BYTE *)result + 11);
      *(_QWORD *)&v37 = v17;
      *((_QWORD *)&v37 + 1) = v18;
      BYTE3(v38) = v19 & 0xF;
      *(_WORD *)((char *)&v38 + 1) = v9;
      v16 = v20 & 0x3F;
LABEL_6:
      WORD2(v38) = v16;
      LOBYTE(v38) = v15;
      v21 = *(unsigned int *)(a2 + 44);
      if ((_DWORD)v21 != *(_DWORD *)(a2 + 40))
        goto LABEL_7;
      result = (unsigned int *)WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v21 + 1, (unint64_t)&v37, a4, a5, a6, a7, a8);
      v22 = *(_QWORD *)(a2 + 32) + 24 * *(unsigned int *)(a2 + 44);
      *(_QWORD *)v22 = 0;
      *(_QWORD *)(v22 + 8) = 0;
      *(_BYTE *)(v22 + 16) = -1;
      goto LABEL_13;
    default:
      v25 = *result;
      v26 = *(_DWORD *)(a2 + 200);
      if (v26 < *(_DWORD *)(a2 + 52))
      {
        do
        {
          if ((v26 + 4) > *(_DWORD *)(a2 + 192))
          {
            v33 = v25;
            v36 = result;
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
            v25 = v33;
            result = v36;
            v26 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v26) = -721215457;
          v26 = *(_DWORD *)(a2 + 200) + 4;
          *(_DWORD *)(a2 + 200) = v26;
        }
        while (v26 < *(_DWORD *)(a2 + 52));
        v9 = *((unsigned __int8 *)result + 8);
      }
      v12 = (_QWORD *)(a2 + 32);
      v27 = *((_BYTE *)result + 9);
      LOBYTE(v38) = -1;
      *(_QWORD *)&v37 = v25;
      *((_QWORD *)&v37 + 1) = v26;
      BYTE3(v38) = v27 & 0xF;
      *(_WORD *)((char *)&v38 + 1) = v9;
      WORD2(v38) = 0;
      v21 = *(unsigned int *)(a2 + 44);
      if ((_DWORD)v21 == *(_DWORD *)(a2 + 40))
      {
        result = (unsigned int *)WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 32, v21 + 1, (unint64_t)&v37, a4, a5, a6, a7, a8);
        v22 = *(_QWORD *)(a2 + 32) + 24 * *(unsigned int *)(a2 + 44);
        *(_QWORD *)v22 = 0;
        *(_QWORD *)(v22 + 8) = 0;
        *(_BYTE *)(v22 + 16) = -1;
LABEL_13:
        v28 = (*(unsigned __int8 *)(v22 + 19) << 16) | 0xF0000;
        *(_WORD *)(v22 + 17) = 65;
        *(_BYTE *)(v22 + 19) = BYTE2(v28);
        *(_WORD *)(v22 + 20) &= 0xFC00u;
        v23 = *(_OWORD *)result;
        v24 = *((_QWORD *)result + 2);
      }
      else
      {
LABEL_7:
        v22 = *v12 + 24 * v21;
        v23 = v37;
        v24 = v38;
      }
      *(_QWORD *)(v22 + 16) = v24;
      *(_OWORD *)v22 = v23;
      ++*(_DWORD *)(a2 + 44);
      return result;
  }
}

void JSC::DFG::SpeculativeJIT::speculationCheck(uint64_t a1, unint64_t a2, JSC::DFG::Node *a3, JSC::DFG::Node *a4, int *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  WTF *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  WTF *v34;
  WTF *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  WTF *v61;
  uint64_t v62;
  _QWORD v63[2];
  _BYTE v64[24];
  int v65;
  char v66;
  int *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  WTF *v71;
  int v72;
  unsigned int v73;
  _BYTE v74[24];
  int *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;

  if (!*(_BYTE *)(a1 + 5244))
    return;
  JSC::DFG::SpeculativeJIT::emitOSRExitFuzzCheck((JSC::DFG::SpeculativeJIT *)&v81, a1);
  if (v81 == -1)
  {
    v18 = *a5;
    v19 = *(_QWORD *)(a5 + 1);
    v67 = &v69;
    v68 = 2;
    if (v18 != -1)
    {
      v70 = v19;
      HIDWORD(v68) = 1;
      v69 = v18;
    }
    v61 = (WTF *)v63;
    v62 = 2;
    *(_OWORD *)&v64[8] = xmmword_199123900;
    v65 = -16773311;
    WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unint64_t)&v61, (unsigned int *)&v67, v10, v11, v12, v13, v14, v15);
    WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::append<JSC::DFG::OSRExitCompilationInfo&>(a1 + 3784, (uint64_t *)&v61);
    if (*(unsigned int *)(a1 + 3804) > (unint64_t)(*(_QWORD *)(a1 + 3784) - 1) >> 2)
    {
      v28 = v61;
      if (v63 != (_QWORD *)v61 && v61)
      {
        v61 = 0;
        LODWORD(v62) = 0;
        WTF::fastFree((unint64_t)v28, v20, v21, v22, v23, v24, v25, v26);
      }
      v29 = (unint64_t)v67;
      if (&v69 == v67 || !v67)
        goto LABEL_28;
      v67 = 0;
      LODWORD(v68) = 0;
      goto LABEL_27;
    }
LABEL_44:
    __break(0xC471u);
    JUMPOUT(0x197B6B490);
  }
  v75 = &v77;
  v77 = v81;
  v78 = v82;
  v76 = 0x100000002;
  v16 = *a5;
  if (*a5 == -1)
  {
    v17 = 1;
  }
  else
  {
    v80 = *(_QWORD *)(a5 + 1);
    v17 = 2;
    v79 = v16;
    HIDWORD(v76) = 2;
  }
  v71 = (WTF *)v74;
  v72 = 2;
  v73 = v17;
  v30 = (char *)(&v77 + 3 * v17);
  v31 = 16;
  do
  {
    v32 = (char *)&v71 + v31;
    v33 = (char *)&v75 + v31;
    *(_DWORD *)v32 = *(_DWORD *)((char *)&v75 + v31);
    *(_QWORD *)(v32 + 4) = *(int **)((char *)&v75 + v31 + 4);
    v31 += 12;
  }
  while (v33 + 12 != v30);
  v61 = (WTF *)v63;
  v62 = 2;
  *(_OWORD *)&v64[8] = xmmword_199123900;
  v65 = -16773311;
  WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unint64_t)&v61, (unsigned int *)&v71, v10, v11, v12, v13, v14, v15);
  WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::append<JSC::DFG::OSRExitCompilationInfo&>(a1 + 3784, (uint64_t *)&v61);
  if (*(unsigned int *)(a1 + 3804) <= (unint64_t)(*(_QWORD *)(a1 + 3784) - 1) >> 2)
    goto LABEL_44;
  v34 = v61;
  if (v63 != (_QWORD *)v61 && v61)
  {
    v61 = 0;
    LODWORD(v62) = 0;
    WTF::fastFree((unint64_t)v34, v20, v21, v22, v23, v24, v25, v26);
  }
  v35 = v71;
  if (v74 != (_BYTE *)v71 && v71)
  {
    v71 = 0;
    v72 = 0;
    WTF::fastFree((unint64_t)v35, v20, v21, v22, v23, v24, v25, v26);
  }
  v29 = (unint64_t)v75;
  if (&v77 == v75 || !v75)
    goto LABEL_28;
  v75 = 0;
  LODWORD(v76) = 0;
LABEL_27:
  WTF::fastFree(v29, v20, v21, v22, v23, v24, v25, v26);
LABEL_28:
  JSC::DFG::Graph::methodOfGettingAValueProfileFor(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), a4, v22, v23, v24, v25, v26, (uint64_t)v60, v27);
  JSC::DFG::OSRExit::OSRExit((uint64_t)&v61, a2, a3, (uint64_t)v60, a1, *(unsigned int *)(a1 + 5644), 0xFFFFFFFFLL, v36);
  v44 = (_QWORD *)(a1 + 3840);
  v45 = *(unsigned int *)(a1 + 3852);
  if ((_DWORD)v45 == *(_DWORD *)(a1 + 3848))
  {
    v53 = WTF::Vector<JSC::DFG::OSRExit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v45 + 1, (unint64_t)&v61);
    v54 = *(_QWORD *)(a1 + 3840) + 72 * *(unsigned int *)(a1 + 3852);
    v55 = *(_DWORD *)v53;
    *(_WORD *)(v54 + 4) = *(_WORD *)(v53 + 4);
    *(_DWORD *)v54 = v55;
    v56 = *(_QWORD *)(v53 + 8);
    *(_QWORD *)(v53 + 8) = 0;
    *(_QWORD *)(v54 + 8) = v56;
    v57 = *(_QWORD *)(v53 + 16);
    *(_QWORD *)(v53 + 16) = 0;
    *(_QWORD *)(v54 + 16) = v57;
    *(_QWORD *)(v54 + 24) = *(_QWORD *)(v53 + 24);
    v58 = *(_QWORD *)(v53 + 32);
    *(_QWORD *)(v54 + 37) = *(_QWORD *)(v53 + 37);
    *(_QWORD *)(v54 + 32) = v58;
    v59 = *(_QWORD *)(v53 + 48);
    *(_QWORD *)(v53 + 48) = 0;
    *(_QWORD *)(v54 + 48) = v59;
    LODWORD(v59) = *(_DWORD *)(v53 + 56);
    *(_BYTE *)(v54 + 60) = *(_BYTE *)(v53 + 60);
    *(_DWORD *)(v54 + 56) = v59;
    v52 = (_QWORD *)(v54 + 64);
  }
  else
  {
    v46 = *v44 + 72 * v45;
    v47 = (int)v61;
    *(_WORD *)(v46 + 4) = WORD2(v61);
    *(_DWORD *)v46 = v47;
    v48 = v62;
    v62 = 0;
    *(_QWORD *)(v46 + 8) = v48;
    v49 = v63[0];
    v63[0] = 0;
    *(_QWORD *)(v46 + 16) = v49;
    *(_QWORD *)(v46 + 24) = v63[1];
    v50 = *(_QWORD *)v64;
    *(_QWORD *)(v46 + 37) = *(_QWORD *)&v64[5];
    *(_QWORD *)(v46 + 32) = v50;
    v51 = *(_QWORD *)&v64[16];
    *(_QWORD *)&v64[16] = 0;
    *(_QWORD *)(v46 + 48) = v51;
    LODWORD(v51) = v65;
    *(_BYTE *)(v46 + 60) = v66;
    *(_DWORD *)(v46 + 56) = v51;
    v52 = (_QWORD *)(v46 + 64);
    v53 = (uint64_t)&v61;
  }
  *v52 = *(_QWORD *)(v53 + 64);
  ++*(_DWORD *)(a1 + 3852);
  if ((v64[16] & 1) != 0 && (*(_QWORD *)&v64[16] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(*(_QWORD *)&v64[16] & 0xFFFFFFFF8, v37, v38, v39, v40, v41, v42, v43);
  if ((v63[0] & 1) != 0 && (v63[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v63[0] & 0xFFFFFFFF8, v37, v38, v39, v40, v41, v42, v43);
  if ((v62 & 1) != 0 && (v62 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v62 & 0xFFFFFFFF8, v37, v38, v39, v40, v41, v42, v43);
  if ((v60[0] & 1) != 0 && (v60[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v60[0] & 0xFFFFFFFF8, v37, v38, v39, v40, v41, v42, v43);
}

uint64_t JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *((unsigned int *)a2 + 3);
  result = a1 + 16;
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 12) = v4;
  if (v4 >= 3)
  {
    if (v4 >= 0x15555556)
    {
      __break(0xC471u);
      return result;
    }
    v6 = 12 * v4;
    result = WTF::fastMalloc((WTF *)(12 * v4));
    *(_DWORD *)(a1 + 8) = (v6 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)a1 = result;
  }
  v7 = *((_DWORD *)a2 + 3);
  if (v7)
  {
    v8 = *a2;
    v9 = *a2 + 12 * v7;
    do
    {
      *(_DWORD *)result = *(_DWORD *)v8;
      *(_QWORD *)(result + 4) = *(_QWORD *)(v8 + 4);
      v8 += 12;
      result += 12;
    }
    while (v8 != v9);
  }
  return a1;
}

void JSC::DFG::SpeculativeJIT::speculationCheck(uint64_t a1, unint64_t a2, JSC::DFG::Node *a3, JSC::DFG::Node *a4, unsigned int *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t *v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  _BYTE *v32;
  WTF *v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int8x8_t v42;
  WTF *v43;
  WTF *v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[2];
  WTF *v74;
  uint64_t v75;
  _QWORD v76[2];
  _BYTE v77[24];
  int v78;
  char v79;
  WTF *v80;
  unsigned int v81;
  int v82;
  _BYTE v83[24];
  WTF *v84;
  unsigned int v85;
  int v86;
  _BYTE v87[28];
  int v88;
  uint64_t v89;
  WTF *v90;
  uint64_t v91;
  _BYTE v92[28];
  int v93;
  uint64_t v94;

  if (!*(_BYTE *)(a1 + 5244))
    return;
  JSC::DFG::SpeculativeJIT::emitOSRExitFuzzCheck((JSC::DFG::SpeculativeJIT *)&v93, a1);
  v16 = v93;
  if (v93 == -1)
  {
    v27 = a5[3];
    v80 = (WTF *)v83;
    v81 = 2;
    v82 = v27;
    if (v27 < 3)
    {
      v29 = v83;
      if (!(_DWORD)v27)
        goto LABEL_30;
    }
    else
    {
      if (v27 >= 0x15555556)
      {
        __break(0xC471u);
LABEL_58:
        JUMPOUT(0x197B6BA90);
      }
      v28 = 12 * v27;
      v29 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v27));
      v81 = (v28 & 0xFFFFFFFC) / 0xC;
      v80 = (WTF *)v29;
      LODWORD(v27) = a5[3];
      if (!(_DWORD)v27)
      {
LABEL_30:
        v74 = (WTF *)v76;
        v75 = 2;
        *(_OWORD *)&v77[8] = xmmword_199123900;
        v78 = -16773311;
        WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unint64_t)&v74, (unsigned int *)&v80, v10, v11, v12, v13, v14, v15);
        WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::append<JSC::DFG::OSRExitCompilationInfo&>(a1 + 3784, (uint64_t *)&v74);
        if (*(unsigned int *)(a1 + 3804) <= (unint64_t)(*(_QWORD *)(a1 + 3784) - 1) >> 2)
        {
          __break(0xC471u);
          JUMPOUT(0x197B6BA98);
        }
        v48 = v74;
        if (v76 != (_QWORD *)v74 && v74)
        {
          v74 = 0;
          LODWORD(v75) = 0;
          WTF::fastFree((unint64_t)v48, v35, v36, v37, v38, v39, v40, v41);
        }
        v45 = v80;
        if (v83 == (_BYTE *)v80 || !v80)
          goto LABEL_38;
        v80 = 0;
        v81 = 0;
        goto LABEL_37;
      }
    }
    v46 = *(_QWORD *)a5;
    v47 = *(_QWORD *)a5 + 12 * v27;
    do
    {
      *(_DWORD *)v29 = *(_DWORD *)v46;
      *(_QWORD *)(v29 + 4) = *(_QWORD *)(v46 + 4);
      v46 += 12;
      v29 += 12;
    }
    while (v46 != v47);
    goto LABEL_30;
  }
  v90 = (WTF *)v92;
  v91 = 2;
  WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)&v90, a5, v10, v11, v12, v13, v14, v15);
  v88 = v16;
  v89 = v94;
  if (HIDWORD(v91) == (_DWORD)v91)
  {
    v23 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v90, (void *)(HIDWORD(v91) + 1), (unint64_t)&v88, v18, v19, v20, v21, v22);
    v25 = *v23;
    v24 = (uint64_t *)(v23 + 1);
    v26 = (char *)v90 + 12 * HIDWORD(v91);
    *(_DWORD *)v26 = v25;
  }
  else
  {
    v24 = &v89;
    v26 = (char *)v90 + 12 * HIDWORD(v91);
    *(_DWORD *)v26 = v16;
  }
  *(_QWORD *)(v26 + 4) = *v24;
  v30 = (HIDWORD(v91) + 1);
  HIDWORD(v91) = v30;
  v84 = (WTF *)v87;
  v85 = 2;
  v86 = v30;
  if (v30 < 3)
  {
    v32 = v87;
    if (!(_DWORD)v30)
      goto LABEL_17;
    goto LABEL_15;
  }
  if (v30 >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x197B6BAA0);
  }
  v31 = 12 * v30;
  v32 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v30));
  v85 = (v31 & 0xFFFFFFFC) / 0xC;
  v84 = (WTF *)v32;
  LODWORD(v30) = HIDWORD(v91);
  if (HIDWORD(v91))
  {
LABEL_15:
    v33 = v90;
    v34 = (WTF *)((char *)v90 + 12 * v30);
    do
    {
      *(_DWORD *)v32 = *(_DWORD *)v33;
      *(_QWORD *)(v32 + 4) = *(_QWORD *)((char *)v33 + 4);
      v33 = (WTF *)((char *)v33 + 12);
      v32 += 12;
    }
    while (v33 != v34);
  }
LABEL_17:
  v74 = (WTF *)v76;
  v75 = 2;
  *(_OWORD *)&v77[8] = xmmword_199123900;
  v78 = -16773311;
  WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unint64_t)&v74, (unsigned int *)&v84, v17, v18, v19, v20, v21, v22);
  WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::append<JSC::DFG::OSRExitCompilationInfo&>(a1 + 3784, (uint64_t *)&v74);
  if (*(unsigned int *)(a1 + 3804) <= (unint64_t)(*(_QWORD *)(a1 + 3784) - 1) >> 2)
  {
    __break(0xC471u);
    goto LABEL_58;
  }
  v43 = v74;
  if (v76 != (_QWORD *)v74 && v74)
  {
    v74 = 0;
    LODWORD(v75) = 0;
    WTF::fastFree((unint64_t)v43, v35, v36, v37, v38, v39, v40, v41);
  }
  v44 = v84;
  if (v87 != (_BYTE *)v84 && v84)
  {
    v84 = 0;
    v85 = 0;
    WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
  }
  v45 = v90;
  if (v92 == (_BYTE *)v90 || !v90)
    goto LABEL_38;
  v90 = 0;
  LODWORD(v91) = 0;
LABEL_37:
  WTF::fastFree((unint64_t)v45, v35, v36, v37, v38, v39, v40, v41);
LABEL_38:
  JSC::DFG::Graph::methodOfGettingAValueProfileFor(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), a4, v37, v38, v39, v40, v41, (uint64_t)v73, v42);
  JSC::DFG::OSRExit::OSRExit((uint64_t)&v74, a2, a3, (uint64_t)v73, a1, *(unsigned int *)(a1 + 5644), 0xFFFFFFFFLL, v49);
  v57 = (_QWORD *)(a1 + 3840);
  v58 = *(unsigned int *)(a1 + 3852);
  if ((_DWORD)v58 == *(_DWORD *)(a1 + 3848))
  {
    v66 = WTF::Vector<JSC::DFG::OSRExit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v57, v58 + 1, (unint64_t)&v74);
    v67 = *(_QWORD *)(a1 + 3840) + 72 * *(unsigned int *)(a1 + 3852);
    v68 = *(_DWORD *)v66;
    *(_WORD *)(v67 + 4) = *(_WORD *)(v66 + 4);
    *(_DWORD *)v67 = v68;
    v69 = *(_QWORD *)(v66 + 8);
    *(_QWORD *)(v66 + 8) = 0;
    *(_QWORD *)(v67 + 8) = v69;
    v70 = *(_QWORD *)(v66 + 16);
    *(_QWORD *)(v66 + 16) = 0;
    *(_QWORD *)(v67 + 16) = v70;
    *(_QWORD *)(v67 + 24) = *(_QWORD *)(v66 + 24);
    v71 = *(_QWORD *)(v66 + 32);
    *(_QWORD *)(v67 + 37) = *(_QWORD *)(v66 + 37);
    *(_QWORD *)(v67 + 32) = v71;
    v72 = *(_QWORD *)(v66 + 48);
    *(_QWORD *)(v66 + 48) = 0;
    *(_QWORD *)(v67 + 48) = v72;
    LODWORD(v72) = *(_DWORD *)(v66 + 56);
    *(_BYTE *)(v67 + 60) = *(_BYTE *)(v66 + 60);
    *(_DWORD *)(v67 + 56) = v72;
    v65 = (_QWORD *)(v67 + 64);
  }
  else
  {
    v59 = *v57 + 72 * v58;
    v60 = (int)v74;
    *(_WORD *)(v59 + 4) = WORD2(v74);
    *(_DWORD *)v59 = v60;
    v61 = v75;
    v75 = 0;
    *(_QWORD *)(v59 + 8) = v61;
    v62 = v76[0];
    v76[0] = 0;
    *(_QWORD *)(v59 + 16) = v62;
    *(_QWORD *)(v59 + 24) = v76[1];
    v63 = *(_QWORD *)v77;
    *(_QWORD *)(v59 + 37) = *(_QWORD *)&v77[5];
    *(_QWORD *)(v59 + 32) = v63;
    v64 = *(_QWORD *)&v77[16];
    *(_QWORD *)&v77[16] = 0;
    *(_QWORD *)(v59 + 48) = v64;
    LODWORD(v64) = v78;
    *(_BYTE *)(v59 + 60) = v79;
    *(_DWORD *)(v59 + 56) = v64;
    v65 = (_QWORD *)(v59 + 64);
    v66 = (uint64_t)&v74;
  }
  *v65 = *(_QWORD *)(v66 + 64);
  ++*(_DWORD *)(a1 + 3852);
  if ((v77[16] & 1) != 0 && (*(_QWORD *)&v77[16] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(*(_QWORD *)&v77[16] & 0xFFFFFFFF8, v50, v51, v52, v53, v54, v55, v56);
  if ((v76[0] & 1) != 0 && (v76[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v76[0] & 0xFFFFFFFF8, v50, v51, v52, v53, v54, v55, v56);
  if ((v75 & 1) != 0 && (v75 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v75 & 0xFFFFFFFF8, v50, v51, v52, v53, v54, v55, v56);
  if ((v73[0] & 1) != 0 && (v73[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v73[0] & 0xFFFFFFFF8, v50, v51, v52, v53, v54, v55, v56);
}

uint64_t JSC::DFG::SpeculativeJIT::speculationCheck(uint64_t a1, unint64_t a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x8_t v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  WTF *v47;
  uint64_t v48;
  _QWORD v49[2];
  _BYTE v50[24];
  int v51;
  char v52;
  WTF *v53;
  uint64_t v54;
  _QWORD v55[3];

  if (!*(_BYTE *)(a1 + 5244))
    return 0xFFFFFFFFLL;
  v11 = *(unsigned int *)(a1 + 3852);
  memset(v55, 0, sizeof(v55));
  v53 = (WTF *)v55;
  v54 = 2;
  v47 = (WTF *)v49;
  v48 = 2;
  *(_OWORD *)&v50[8] = xmmword_199123900;
  v51 = -16773311;
  WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unint64_t)&v47, (unsigned int *)&v53, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::append<JSC::DFG::OSRExitCompilationInfo&>(a1 + 3784, (uint64_t *)&v47);
  if (*(unsigned int *)(a1 + 3804) > (unint64_t)(*(_QWORD *)(a1 + 3784) - 1) >> 2)
  {
    v21 = v47;
    if (v49 != (_QWORD *)v47 && v47)
    {
      v47 = 0;
      LODWORD(v48) = 0;
      WTF::fastFree((unint64_t)v21, v13, v14, v15, v16, v17, v18, v19);
    }
    v22 = v53;
    if (v55 != (_QWORD *)v53 && v53)
    {
      v53 = 0;
      LODWORD(v54) = 0;
      WTF::fastFree((unint64_t)v22, v13, v14, v15, v16, v17, v18, v19);
    }
    JSC::DFG::Graph::methodOfGettingAValueProfileFor(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), 0, v15, v16, v17, v18, v19, (uint64_t)v46, v20);
    JSC::DFG::OSRExit::OSRExit((uint64_t)&v47, a2, a3, (uint64_t)v46, a1, *(unsigned int *)(a1 + 5644), 0xFFFFFFFFLL, v23);
    v31 = *(unsigned int *)(a1 + 3852);
    if ((_DWORD)v31 == *(_DWORD *)(a1 + 3848))
    {
      v39 = WTF::Vector<JSC::DFG::OSRExit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 3840, v31 + 1, (unint64_t)&v47);
      v40 = *(_QWORD *)(a1 + 3840) + 72 * *(unsigned int *)(a1 + 3852);
      v41 = *(_DWORD *)v39;
      *(_WORD *)(v40 + 4) = *(_WORD *)(v39 + 4);
      *(_DWORD *)v40 = v41;
      v42 = *(_QWORD *)(v39 + 8);
      *(_QWORD *)(v39 + 8) = 0;
      *(_QWORD *)(v40 + 8) = v42;
      v43 = *(_QWORD *)(v39 + 16);
      *(_QWORD *)(v39 + 16) = 0;
      *(_QWORD *)(v40 + 16) = v43;
      *(_QWORD *)(v40 + 24) = *(_QWORD *)(v39 + 24);
      v44 = *(_QWORD *)(v39 + 32);
      *(_QWORD *)(v40 + 37) = *(_QWORD *)(v39 + 37);
      *(_QWORD *)(v40 + 32) = v44;
      v45 = *(_QWORD *)(v39 + 48);
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v40 + 48) = v45;
      LODWORD(v45) = *(_DWORD *)(v39 + 56);
      *(_BYTE *)(v40 + 60) = *(_BYTE *)(v39 + 60);
      *(_DWORD *)(v40 + 56) = v45;
      v38 = (_QWORD *)(v40 + 64);
    }
    else
    {
      v32 = *(_QWORD *)(a1 + 3840) + 72 * v31;
      v33 = (int)v47;
      *(_WORD *)(v32 + 4) = WORD2(v47);
      *(_DWORD *)v32 = v33;
      v34 = v48;
      v48 = 0;
      *(_QWORD *)(v32 + 8) = v34;
      v35 = v49[0];
      v49[0] = 0;
      *(_QWORD *)(v32 + 16) = v35;
      *(_QWORD *)(v32 + 24) = v49[1];
      v36 = *(_QWORD *)v50;
      *(_QWORD *)(v32 + 37) = *(_QWORD *)&v50[5];
      *(_QWORD *)(v32 + 32) = v36;
      v37 = *(_QWORD *)&v50[16];
      *(_QWORD *)&v50[16] = 0;
      *(_QWORD *)(v32 + 48) = v37;
      LODWORD(v37) = v51;
      *(_BYTE *)(v32 + 60) = v52;
      *(_DWORD *)(v32 + 56) = v37;
      v38 = (_QWORD *)(v32 + 64);
      v39 = (uint64_t)&v47;
    }
    *v38 = *(_QWORD *)(v39 + 64);
    ++*(_DWORD *)(a1 + 3852);
    if ((v50[16] & 1) != 0 && (*(_QWORD *)&v50[16] & 0xFFFFFFFF8) != 0)
      WTF::fastFree(*(_QWORD *)&v50[16] & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
    if ((v49[0] & 1) != 0 && (v49[0] & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v49[0] & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
    if ((v48 & 1) != 0 && (v48 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v48 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
    if ((v46[0] & 1) != 0 && (v46[0] & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v46[0] & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
    return v11;
  }
  __break(0xC471u);
  return result;
}

void JSC::DFG::SpeculativeJIT::speculationCheck(uint64_t a1, unint64_t a2, JSC::DFG::Node *a3, JSC::DFG::Node *a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  WTF *v53;
  uint64_t v54;
  _QWORD v55[2];
  _BYTE v56[24];
  int v57;
  char v58;
  WTF *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;

  if (*(_BYTE *)(a1 + 5244))
  {
    v13 = (_QWORD *)(a1 + 3856);
    v14 = *(unsigned int *)(a1 + 3868);
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 3864))
    {
      a6 = (_QWORD *)WTF::Vector<JSC::DFG::SpeculationRecovery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v14 + 1, (unint64_t)a6);
      v15 = (_QWORD *)(*(_QWORD *)(a1 + 3856) + 8 * *(unsigned int *)(a1 + 3868));
    }
    else
    {
      v15 = (_QWORD *)(*v13 + 8 * v14);
    }
    *v15 = *a6;
    ++*(_DWORD *)(a1 + 3868);
    v16 = *(_DWORD *)a5;
    v17 = *(_QWORD *)(a5 + 4);
    v59 = (WTF *)&v61;
    v60 = 2;
    if (v16 != -1)
    {
      v62 = v17;
      HIDWORD(v60) = 1;
      v61 = v16;
    }
    v53 = (WTF *)v55;
    v54 = 2;
    *(_OWORD *)&v56[8] = xmmword_199123900;
    v57 = -16773311;
    WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unint64_t)&v53, (unsigned int *)&v59, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
    WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::append<JSC::DFG::OSRExitCompilationInfo&>(a1 + 3784, (uint64_t *)&v53);
    if (*(unsigned int *)(a1 + 3804) <= (unint64_t)(*(_QWORD *)(a1 + 3784) - 1) >> 2)
    {
      __break(0xC471u);
    }
    else
    {
      v26 = v53;
      if (v55 != (_QWORD *)v53 && v53)
      {
        v53 = 0;
        LODWORD(v54) = 0;
        WTF::fastFree((unint64_t)v26, v18, v19, v20, v21, v22, v23, v24);
      }
      v27 = v59;
      if (&v61 != (int *)v59 && v59)
      {
        v59 = 0;
        LODWORD(v60) = 0;
        WTF::fastFree((unint64_t)v27, v18, v19, v20, v21, v22, v23, v24);
      }
      JSC::DFG::Graph::methodOfGettingAValueProfileFor(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), a4, v20, v21, v22, v23, v24, (uint64_t)v52, v25);
      JSC::DFG::OSRExit::OSRExit((uint64_t)&v53, a2, a3, (uint64_t)v52, a1, *(unsigned int *)(a1 + 5644), v14, v28);
      v36 = (_QWORD *)(a1 + 3840);
      v37 = *(unsigned int *)(a1 + 3852);
      if ((_DWORD)v37 == *(_DWORD *)(a1 + 3848))
      {
        v45 = WTF::Vector<JSC::DFG::OSRExit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v36, v37 + 1, (unint64_t)&v53);
        v46 = *(_QWORD *)(a1 + 3840) + 72 * *(unsigned int *)(a1 + 3852);
        v47 = *(_DWORD *)v45;
        *(_WORD *)(v46 + 4) = *(_WORD *)(v45 + 4);
        *(_DWORD *)v46 = v47;
        v48 = *(_QWORD *)(v45 + 8);
        *(_QWORD *)(v45 + 8) = 0;
        *(_QWORD *)(v46 + 8) = v48;
        v49 = *(_QWORD *)(v45 + 16);
        *(_QWORD *)(v45 + 16) = 0;
        *(_QWORD *)(v46 + 16) = v49;
        *(_QWORD *)(v46 + 24) = *(_QWORD *)(v45 + 24);
        v50 = *(_QWORD *)(v45 + 32);
        *(_QWORD *)(v46 + 37) = *(_QWORD *)(v45 + 37);
        *(_QWORD *)(v46 + 32) = v50;
        v51 = *(_QWORD *)(v45 + 48);
        *(_QWORD *)(v45 + 48) = 0;
        *(_QWORD *)(v46 + 48) = v51;
        LODWORD(v51) = *(_DWORD *)(v45 + 56);
        *(_BYTE *)(v46 + 60) = *(_BYTE *)(v45 + 60);
        *(_DWORD *)(v46 + 56) = v51;
        v44 = (_QWORD *)(v46 + 64);
      }
      else
      {
        v38 = *v36 + 72 * v37;
        v39 = (int)v53;
        *(_WORD *)(v38 + 4) = WORD2(v53);
        *(_DWORD *)v38 = v39;
        v40 = v54;
        v54 = 0;
        *(_QWORD *)(v38 + 8) = v40;
        v41 = v55[0];
        v55[0] = 0;
        *(_QWORD *)(v38 + 16) = v41;
        *(_QWORD *)(v38 + 24) = v55[1];
        v42 = *(_QWORD *)v56;
        *(_QWORD *)(v38 + 37) = *(_QWORD *)&v56[5];
        *(_QWORD *)(v38 + 32) = v42;
        v43 = *(_QWORD *)&v56[16];
        *(_QWORD *)&v56[16] = 0;
        *(_QWORD *)(v38 + 48) = v43;
        LODWORD(v43) = v57;
        *(_BYTE *)(v38 + 60) = v58;
        *(_DWORD *)(v38 + 56) = v43;
        v44 = (_QWORD *)(v38 + 64);
        v45 = (uint64_t)&v53;
      }
      *v44 = *(_QWORD *)(v45 + 64);
      ++*(_DWORD *)(a1 + 3852);
      if ((v56[16] & 1) != 0 && (*(_QWORD *)&v56[16] & 0xFFFFFFFF8) != 0)
        WTF::fastFree(*(_QWORD *)&v56[16] & 0xFFFFFFFF8, v29, v30, v31, v32, v33, v34, v35);
      if ((v55[0] & 1) != 0 && (v55[0] & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v55[0] & 0xFFFFFFFF8, v29, v30, v31, v32, v33, v34, v35);
      if ((v54 & 1) != 0 && (v54 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v54 & 0xFFFFFFFF8, v29, v30, v31, v32, v33, v34, v35);
      if ((v52[0] & 1) != 0 && (v52[0] & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v52[0] & 0xFFFFFFFF8, v29, v30, v31, v32, v33, v34, v35);
    }
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compileInvalidationPoint(uint64_t this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  __int128 *v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  JSC::AssemblerBuffer *v46;
  JSC::AssemblerBuffer *v47;
  uint64_t v48;
  int v49;
  char v50;
  __int128 v51;
  _QWORD v52[2];
  _BYTE v53[24];
  int v54;
  char v55;
  WTF *v56;
  uint64_t v57;
  _QWORD v58[3];
  int v59;
  uint64_t v60;

  if (*(_BYTE *)(this + 5244))
  {
    v9 = this;
    if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(this + 3960) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
    {
      memset(v58, 0, sizeof(v58));
      v56 = (WTF *)v58;
      v57 = 2;
      *(_QWORD *)&v51 = v52;
      *((_QWORD *)&v51 + 1) = 2;
      *(_OWORD *)&v53[8] = xmmword_199123900;
      v54 = -16773311;
      WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unint64_t)&v51, (unsigned int *)&v56, a3, a4, a5, a6, a7, a8);
      WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::append<JSC::DFG::OSRExitCompilationInfo&>(v9 + 3784, (uint64_t *)&v51);
      v17 = *(_QWORD *)(v9 + 3784) - 1;
      if (v17 >> 2 >= *(unsigned int *)(v9 + 3804))
      {
        __break(0xC471u);
      }
      else
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v9 + 3792) + 8 * (v17 >> 2));
        v19 = v51;
        if (v52 != (_QWORD *)v51 && (_QWORD)v51)
        {
          *(_QWORD *)&v51 = 0;
          DWORD2(v51) = 0;
          WTF::fastFree(v19, v10, v11, v12, v13, v14, v15, v16);
        }
        v20 = v56;
        if (v58 != (_QWORD *)v56 && v56)
        {
          v56 = 0;
          LODWORD(v57) = 0;
          WTF::fastFree((unint64_t)v20, v10, v11, v12, v13, v14, v15, v16);
        }
        v48 = 2;
        v50 = 0;
        v49 = 0;
        JSC::DFG::OSRExit::OSRExit((uint64_t)&v51, 0x17uLL, (JSC::DFG::Node *)0xFF80000000, (uint64_t)&v48, v9, *(unsigned int *)(v9 + 5644), 0xFFFFFFFFLL, v16);
        v28 = (_QWORD *)(v9 + 3840);
        v29 = *(unsigned int *)(v9 + 3852);
        if ((_DWORD)v29 == *(_DWORD *)(v9 + 3848))
        {
          v37 = (__int128 *)WTF::Vector<JSC::DFG::OSRExit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v28, v29 + 1, (unint64_t)&v51);
          v40 = *(_QWORD *)(v9 + 3840) + 72 * *(unsigned int *)(v9 + 3852);
          v41 = *(_DWORD *)v37;
          *(_WORD *)(v40 + 4) = *((_WORD *)v37 + 2);
          *(_DWORD *)v40 = v41;
          v42 = *((_QWORD *)v37 + 1);
          *((_QWORD *)v37 + 1) = 0;
          *(_QWORD *)(v40 + 8) = v42;
          v43 = *((_QWORD *)v37 + 2);
          *((_QWORD *)v37 + 2) = 0;
          *(_QWORD *)(v40 + 16) = v43;
          *(_QWORD *)(v40 + 24) = *((_QWORD *)v37 + 3);
          v44 = *((_QWORD *)v37 + 4);
          *(_QWORD *)(v40 + 37) = *(_QWORD *)((char *)v37 + 37);
          *(_QWORD *)(v40 + 32) = v44;
          v45 = *((_QWORD *)v37 + 6);
          *((_QWORD *)v37 + 6) = 0;
          *(_QWORD *)(v40 + 48) = v45;
          LODWORD(v45) = *((_DWORD *)v37 + 14);
          *(_BYTE *)(v40 + 60) = *((_BYTE *)v37 + 60);
          *(_DWORD *)(v40 + 56) = v45;
          v36 = (_QWORD *)(v40 + 64);
        }
        else
        {
          v30 = *v28 + 72 * v29;
          v31 = v51;
          *(_WORD *)(v30 + 4) = WORD2(v51);
          *(_DWORD *)v30 = v31;
          v32 = *((_QWORD *)&v51 + 1);
          *((_QWORD *)&v51 + 1) = 0;
          *(_QWORD *)(v30 + 8) = v32;
          v33 = v52[0];
          v52[0] = 0;
          *(_QWORD *)(v30 + 16) = v33;
          *(_QWORD *)(v30 + 24) = v52[1];
          v34 = *(_QWORD *)v53;
          *(_QWORD *)(v30 + 37) = *(_QWORD *)&v53[5];
          *(_QWORD *)(v30 + 32) = v34;
          v35 = *(_QWORD *)&v53[16];
          *(_QWORD *)&v53[16] = 0;
          *(_QWORD *)(v30 + 48) = v35;
          LODWORD(v35) = v54;
          *(_BYTE *)(v30 + 60) = v55;
          *(_DWORD *)(v30 + 56) = v35;
          v36 = (_QWORD *)(v30 + 64);
          v37 = &v51;
        }
        *v36 = *((_QWORD *)v37 + 8);
        ++*(_DWORD *)(v9 + 3852);
        if ((v53[16] & 1) != 0 && (*(_QWORD *)&v53[16] & 0xFFFFFFFF8) != 0)
          WTF::fastFree(*(_QWORD *)&v53[16] & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
        if ((v52[0] & 1) != 0 && (v52[0] & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v52[0] & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
        if ((BYTE8(v51) & 1) != 0 && (*((_QWORD *)&v51 + 1) & 0xFFFFFFFF8) != 0)
          WTF::fastFree(*((_QWORD *)&v51 + 1) & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
        v38 = v17 & 3;
        v39 = *(_DWORD *)(v9 + 200);
        if (v39 != *(_DWORD *)(v9 + 48) && v39 < *(_DWORD *)(v9 + 52))
        {
          v46 = (JSC::AssemblerBuffer *)(v9 + 56);
          do
          {
            if ((v39 + 4) > *(_DWORD *)(v9 + 192))
            {
              v47 = v46;
              JSC::AssemblerBuffer::outOfLineGrow(v46, (uint64_t)v21, v22, v23, v24, v25, v26, v27);
              v46 = v47;
              v39 = *(_DWORD *)(v9 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v9 + 56) + v39) = -721215457;
            v39 = *(_DWORD *)(v9 + 200) + 4;
            *(_DWORD *)(v9 + 200) = v39;
          }
          while (v39 < *(_DWORD *)(v9 + 52));
        }
        *(_DWORD *)(v9 + 48) = v39;
        *(_DWORD *)(v9 + 52) = v39 + 4;
        *(_DWORD *)(v18 + (v38 << 6) + 40) = v39;
        if (v39 != -1)
          return JSC::DFG::SpeculativeJIT::noResult(v9, (uint64_t)a2, 0, v23, v24, v25, v26, v27);
        __break(0xC471u);
      }
      JUMPOUT(0x197B6C38CLL);
    }
    JSC::MacroAssemblerARM64::branchTest8(this, 1, 0x300000001ALL, 0xFFFFFFFFLL, a5, a6, a7, a8, (uint64_t)&v51);
    v59 = v51;
    v60 = *(_QWORD *)((char *)&v51 + 4);
    JSC::DFG::SpeculativeJIT::speculationCheck(v9, 0x17uLL, (JSC::DFG::Node *)0xFF80000000, 0, &v59);
    return JSC::DFG::SpeculativeJIT::noResult(v9, (uint64_t)a2, 0, v23, v24, v25, v26, v27);
  }
  return this;
}

void JSC::MacroAssemblerARM64::branchTest8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x8_t v19;

  if (a2 <= 1 && a4 == 0xFFFFFFFFLL)
  {
    v12 = -1;
  }
  else if (a2 <= 1)
  {
    v12 = a4;
  }
  else
  {
    v12 = (char)a4;
  }
  if (*(_BYTE *)(a1 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    v14 = *(char *)(a1 + 304);
    if (a2 > 1)
      JSC::MacroAssemblerARM64::load8SignedExtendTo32(a1, a3, v14, a4, a5, a6, a7, a8);
    else
      JSC::MacroAssemblerARM64::load8(a1, a3, v14, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)v12, a1, a2, 17, v15, v16, v17, v18, a9, v19);
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t JSC::DFG::SpeculativeJIT::noResult(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[14];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a3 == 1)
    return result;
  v9 = result;
  v10 = *(_QWORD *)(a2 + 24);
  if ((*(_BYTE *)(a2 + 56) & 0x10) != 0)
  {
    v37 = *(_QWORD *)(a2 + 32);
    if ((int)v37 + (int)v10 <= v10)
      return result;
    v38 = *(_QWORD *)(a2 + 24);
    while (1)
    {
      v39 = *(_QWORD *)(v9 + 3960);
      if (v38 >= *(unsigned int *)(v39 + 164))
        break;
      v40 = *(_QWORD *)(*(_QWORD *)(v39 + 152) + 8 * v38);
      if ((v40 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        result = JSC::DFG::SpeculativeJIT::use(v9, v40, a3, a4, a5, a6, a7, a8);
        v10 = *(_QWORD *)(a2 + 24);
        v37 = *(_QWORD *)(a2 + 32);
      }
      if (++v38 >= (v10 + v37))
        return result;
    }
    goto LABEL_51;
  }
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if (!v11)
    return result;
  if ((*(_BYTE *)(v11 + 56) & 7) == 0)
    goto LABEL_7;
  v12 = ~*(_DWORD *)(v11 + 48);
  if (v12 >= *(unsigned int *)(result + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B6C928);
  }
  v13 = *(_QWORD *)(result + 3992);
  v14 = (_DWORD *)(v13 + 24 * (int)v12);
  v15 = v14[2] - 1;
  v14[2] = v15;
  if (v15)
    goto LABEL_7;
  if (*(_BYTE *)(v13 + 24 * (int)v12 + 15))
  {
    v16 = *(_DWORD *)(*(_QWORD *)v14 + 20);
    if (v16 < 0xFFFFFFFE)
    {
      result += 5632;
      *(_QWORD *)&v41[4] = 0x3FFFFFFFLL;
      *(_DWORD *)v41 = v16;
      *(_WORD *)&v41[12] = 6;
      v17 = *(unsigned int *)(v9 + 5644);
      if ((_DWORD)v17 == *(_DWORD *)(v9 + 5640))
      {
        result = WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v17 + 1, (unint64_t)v41, a4, a5, a6, a7, a8);
        v18 = (_QWORD *)(*(_QWORD *)(v9 + 5632) + 14 * *(unsigned int *)(v9 + 5644));
        v19 = *(_QWORD *)result;
        v20 = *(_QWORD *)(result + 6);
      }
      else
      {
        v18 = (_QWORD *)(*(_QWORD *)result + 14 * v17);
        v19 = *(_QWORD *)v41;
        v20 = *(_QWORD *)&v41[6];
      }
      *(_QWORD *)((char *)v18 + 6) = v20;
      *v18 = v19;
      ++*(_DWORD *)(v9 + 5644);
      goto LABEL_14;
    }
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x197B6C8FCLL);
  }
LABEL_14:
  if (*(_BYTE *)(v13 + 24 * (int)v12 + 12))
  {
    if (*(_BYTE *)(v13 + 24 * (int)v12 + 12) == 4)
    {
      v22 = v9
          + 12
          * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[*(char *)(v13
                                                                                               + 24 * (int)v12
                                                                                               + 17)];
      *(_DWORD *)(v22 + 4968) = 0x3FFFFFFF;
      v23 = 4972;
    }
    else
    {
      v21 = *(char *)(v13 + 24 * (int)v12 + 17);
      if (v21 > 15)
        v21 = -1;
      v22 = v9 + 12 * v21;
      *(_DWORD *)(v22 + 4776) = 0x3FFFFFFF;
      v23 = 4780;
    }
    *(_DWORD *)(v22 + v23) = -1;
  }
LABEL_7:
  if ((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) != 0)
    {
      v24 = ~*(_DWORD *)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v24 >= *(unsigned int *)(v9 + 4004))
      {
        __break(0xC471u);
        JUMPOUT(0x197B6C930);
      }
      v25 = *(_QWORD *)(v9 + 3992);
      v26 = (_DWORD *)(v25 + 24 * (int)v24);
      v27 = v26[2] - 1;
      v26[2] = v27;
      if (!v27)
      {
        if (*(_BYTE *)(v25 + 24 * (int)v24 + 15))
        {
          v29 = *(_DWORD *)(*(_QWORD *)v26 + 20);
          if (v29 >= 0xFFFFFFFE)
          {
            __break(0xC471u);
            JUMPOUT(0x197B6C91CLL);
          }
          result = v9 + 5632;
          *(_QWORD *)&v41[4] = 0x3FFFFFFFLL;
          *(_DWORD *)v41 = v29;
          *(_WORD *)&v41[12] = 6;
          v30 = *(unsigned int *)(v9 + 5644);
          if ((_DWORD)v30 == *(_DWORD *)(v9 + 5640))
          {
            result = WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v30 + 1, (unint64_t)v41, a4, a5, a6, a7, a8);
            v31 = (_QWORD *)(*(_QWORD *)(v9 + 5632) + 14 * *(unsigned int *)(v9 + 5644));
            v32 = *(_QWORD *)result;
            v33 = *(_QWORD *)(result + 6);
          }
          else
          {
            v31 = (_QWORD *)(*(_QWORD *)result + 14 * v30);
            v32 = *(_QWORD *)v41;
            v33 = *(_QWORD *)&v41[6];
          }
          *(_QWORD *)((char *)v31 + 6) = v33;
          *v31 = v32;
          ++*(_DWORD *)(v9 + 5644);
        }
        if (*(_BYTE *)(v25 + 24 * (int)v24 + 12))
        {
          if (*(_BYTE *)(v25 + 24 * (int)v24 + 12) == 4)
          {
            v35 = v9
                + 12
                * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[*(char *)(v25 + 24 * (int)v24 + 17)];
            *(_DWORD *)(v35 + 4968) = 0x3FFFFFFF;
            v36 = 4972;
          }
          else
          {
            v34 = *(char *)(v25 + 24 * (int)v24 + 17);
            if (v34 > 15)
              v34 = -1;
            v35 = v9 + 12 * v34;
            *(_DWORD *)(v35 + 4776) = 0x3FFFFFFF;
            v36 = 4780;
          }
          *(_DWORD *)(v35 + v36) = -1;
        }
      }
    }
    v28 = *(_QWORD *)(a2 + 40);
    if ((v28 & 0xFF00FFFFFFFFFFFFLL) != 0)
      return JSC::DFG::SpeculativeJIT::use(v9, v28, a3, a4, a5, a6, a7, a8);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::unreachable(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((_BYTE *)this + 5244) = 0;
  JSC::MacroAssemblerARM64::abortWithReason((unsigned int *)this, *((unsigned __int16 *)a2 + 9), a3, a4, a5, a6, a7, a8);
}

void JSC::MacroAssemblerARM64::abortWithReason(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;

  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a1, a2, 17, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(a1, (JSC::ARM64LogicalImmediate *)0xE1, 16, v9, v10, v11, v12, v13);
  v21 = a1[50];
  if (v21 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v14, v15, v16, v17, v18, v19, v20);
    v21 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v21) = -734491104;
  a1[50] += 4;
}

void JSC::DFG::SpeculativeJIT::terminateSpeculativeExecution(uint64_t a1, unint64_t a2, uint64_t a3, JSC::DFG::Node *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  unsigned __int8 v10;
  JSC::AssemblerBuffer *v13;
  int i;
  unsigned int v15;
  char v16;
  JSC::AssemblerBuffer *v17;
  int v18[2];
  char v19;
  __int16 v20;
  char v21;

  v8 = (_BYTE *)(a1 + 5244);
  if (*(_BYTE *)(a1 + 5244))
  {
    v10 = a3;
    v13 = (JSC::AssemblerBuffer *)(a1 + 56);
    for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(a1 + 192))
      {
        v17 = v13;
        JSC::AssemblerBuffer::outOfLineGrow(v13, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        v13 = v17;
        i = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
      i = *(_DWORD *)(a1 + 200) + 4;
    }
    v15 = i;
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v13, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      v15 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = 335544320;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v16 = 69;
    else
      v16 = 65;
    v18[0] = i;
    v18[1] = 0;
    v19 = v16;
    v20 = 15;
    v21 = -1;
    JSC::DFG::SpeculativeJIT::speculationCheck(a1, a2, (JSC::DFG::Node *)(((unint64_t)v10 << 32) | 0x80000000), a4, v18);
    *v8 = 0;
    if (qword_1ECF4C32A | byte_1ECF4C323)
      WTF::dataLog<char [16]>("Bailing compilation.\n");
  }
}

void JSC::DFG::SpeculativeJIT::typeCheck(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  JSC::DFG::AbstractValue *v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  JSC::DFG::AbstractValue *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;

  v13 = *(_QWORD *)(a1 + 5616);
  v14 = *(_QWORD *)(v13 + 8);
  v15 = *(unsigned int *)((a3 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (uint64_t *)(v14 + 24);
  v17 = (uint64_t *)(v14 + 8);
  if ((a3 & 1) != 0)
    v17 = v16;
  v18 = *v17;
  v19 = *v17 + 32 * v15;
  v20 = (JSC::DFG::AbstractValue *)v19;
  v21 = *(_DWORD *)(v13 + 88);
  v22 = *(_DWORD *)(v19 + 20);
  if (v21 != v22)
  {
    if ((*(_QWORD *)(v19 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v22 ^ v21) >= 2)
      {
        v27 = *(_QWORD *)v19;
        if (*(_QWORD *)v19 != 4)
        {
          *(_QWORD *)v19 = v27 | 2;
          v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v27 & 1) != 0)
          {
            v36 = 2 * *v28;
            while (v36 * 4)
            {
              v37 = *(_QWORD *)&v28[v36];
              if ((*(_BYTE *)(v37 + 19) & 0xC) == 0)
              {
                v38 = *(_QWORD *)(v37 + 96);
                v39 = (v38 & 1) != 0 ? (v38 >> 1) & 3 : *(unsigned __int8 *)(v38 + 4);
                v36 -= 2;
                if (v39 != 2)
                  continue;
              }
              v40 = a6;
              WTF::fastFree((unint64_t)v28, a2, a3, a4, a5, a6, a7, a8);
              v20 = (JSC::DFG::AbstractValue *)v19;
              a6 = v40;
              goto LABEL_37;
            }
          }
          else if (v28)
          {
            if ((*((_BYTE *)v28 + 19) & 0xC) != 0
              || ((v29 = *((_QWORD *)v28 + 12), (v29 & 1) != 0)
                ? (v30 = (v29 >> 1) & 3)
                : (v30 = *(unsigned __int8 *)(v29 + 4)),
                  v30 == 2))
            {
LABEL_37:
              *(_QWORD *)v20 = 4;
            }
          }
        }
        *(_DWORD *)(v18 + 32 * v15 + 16) = -21020677;
      }
      if ((v21 & 1) != 0)
        *(_QWORD *)v20 &= ~2uLL;
    }
    *(_DWORD *)(v19 + 20) = v21;
  }
  v25 = *(_QWORD *)(v19 + 8);
  v24 = (unint64_t *)(v19 + 8);
  v23 = v25;
  v26 = v25 & a4;
  if ((v25 & a4) != v25)
  {
    if ((v23 & 0x2800FFFFFFF7) != 0)
    {
      v31 = a6;
      v32 = JSC::DFG::AbstractValue::filterSlow(v20, a4, a3, a4, a5, a6, a7, a8);
      a6 = v31;
      if (!v32)
        goto LABEL_5;
    }
    else
    {
      *v24 = v26;
      if (v26)
        goto LABEL_5;
      v33 = a6;
      *v24 = 0;
      v34 = v18 + 32 * v15;
      *(_DWORD *)(v34 + 16) = 0;
      v35 = v20;
      if ((*(_QWORD *)v20 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v20 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      *(_QWORD *)v35 = 0;
      *(_QWORD *)(v34 + 24) = 0;
      a6 = v33;
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 5616) + 80) = 0;
  }
LABEL_5:
  v41 = *(_DWORD *)a5;
  v42 = *(_QWORD *)(a5 + 4);
  JSC::DFG::SpeculativeJIT::speculationCheck(a1, a6, (JSC::DFG::Node *)a2, (JSC::DFG::Node *)(a3 & 0xFF00FFFFFFFFFFFFLL), &v41);
}

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::filter<JSC::DFG::Edge>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  JSC::DFG::AbstractValue *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;

  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = (JSC::DFG::AbstractValue *)v16;
  v18 = *(_DWORD *)(v10 + 88);
  v19 = *(_DWORD *)(v16 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v25 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v25 | 2;
          v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v25 & 1) != 0)
          {
            v29 = 2 * *v26;
            while (v29 * 4)
            {
              v30 = *(_QWORD *)&v26[v29];
              if ((*(_BYTE *)(v30 + 19) & 0xC) == 0)
              {
                v31 = *(_QWORD *)(v30 + 96);
                v32 = (v31 & 1) != 0 ? (v31 >> 1) & 3 : *(unsigned __int8 *)(v31 + 4);
                v29 -= 2;
                if (v32 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v26, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_23;
            }
          }
          else if (v26)
          {
            if ((*((_BYTE *)v26 + 19) & 0xC) != 0
              || ((v27 = *((_QWORD *)v26 + 12), (v27 & 1) != 0)
                ? (v28 = (v27 >> 1) & 3)
                : (v28 = *(unsigned __int8 *)(v27 + 4)),
                  v28 == 2))
            {
LABEL_23:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v18;
  }
  v22 = *(_QWORD *)(v16 + 8);
  v21 = (unint64_t *)(v16 + 8);
  v20 = v22;
  v23 = v22 & a3;
  if ((v22 & a3) == v22)
    return 0;
  if ((v20 & 0x2800FFFFFFF7) == 0)
  {
    *v21 = v23;
    if (v23)
      return 0;
    JSC::DFG::AbstractValue::clear(v17, a2, a3, a4, a5, a6, a7, a8);
LABEL_11:
    *(_BYTE *)(*(_QWORD *)(a1 + 24) + 80) = 0;
    return 1;
  }
  result = JSC::DFG::AbstractValue::filterSlow(v17, a3, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
    goto LABEL_11;
  return result;
}

void JSC::DFG::SpeculativeJIT::typeCheck(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, unsigned int *a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  JSC::DFG::AbstractValue *v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int *v31;
  int v32;
  unsigned int *v33;
  uint64_t v34;
  JSC::DFG::AbstractValue *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int *v40;

  v13 = *(_QWORD *)(a1 + 5616);
  v14 = *(_QWORD *)(v13 + 8);
  v15 = *(unsigned int *)((a3 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (uint64_t *)(v14 + 24);
  v17 = (uint64_t *)(v14 + 8);
  if ((a3 & 1) != 0)
    v17 = v16;
  v18 = *v17;
  v19 = *v17 + 32 * v15;
  v20 = (JSC::DFG::AbstractValue *)v19;
  v21 = *(_DWORD *)(v13 + 88);
  v22 = *(_DWORD *)(v19 + 20);
  if (v21 != v22)
  {
    if ((*(_QWORD *)(v19 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v22 ^ v21) >= 2)
      {
        v27 = *(_QWORD *)v19;
        if (*(_QWORD *)v19 != 4)
        {
          *(_QWORD *)v19 = v27 | 2;
          v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v27 & 1) != 0)
          {
            v36 = 2 * *v28;
            while (v36 * 4)
            {
              v37 = *(_QWORD *)&v28[v36];
              if ((*(_BYTE *)(v37 + 19) & 0xC) == 0)
              {
                v38 = *(_QWORD *)(v37 + 96);
                v39 = (v38 & 1) != 0 ? (v38 >> 1) & 3 : *(unsigned __int8 *)(v38 + 4);
                v36 -= 2;
                if (v39 != 2)
                  continue;
              }
              v40 = a5;
              WTF::fastFree((unint64_t)v28, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
              v20 = (JSC::DFG::AbstractValue *)v19;
              a5 = v40;
              goto LABEL_37;
            }
          }
          else if (v28)
          {
            if ((*((_BYTE *)v28 + 19) & 0xC) != 0
              || ((v29 = *((_QWORD *)v28 + 12), (v29 & 1) != 0)
                ? (v30 = (v29 >> 1) & 3)
                : (v30 = *(unsigned __int8 *)(v29 + 4)),
                  v30 == 2))
            {
LABEL_37:
              *(_QWORD *)v20 = 4;
            }
          }
        }
        *(_DWORD *)(v18 + 32 * v15 + 16) = -21020677;
      }
      if ((v21 & 1) != 0)
        *(_QWORD *)v20 &= ~2uLL;
    }
    *(_DWORD *)(v19 + 20) = v21;
  }
  v25 = *(_QWORD *)(v19 + 8);
  v24 = (unint64_t *)(v19 + 8);
  v23 = v25;
  v26 = v25 & a4;
  if ((v25 & a4) != v25)
  {
    if ((v23 & 0x2800FFFFFFF7) != 0)
    {
      v31 = a5;
      v32 = JSC::DFG::AbstractValue::filterSlow(v20, a4, a3, a4, (uint64_t)a5, a6, a7, a8);
      a5 = v31;
      if (!v32)
        goto LABEL_5;
    }
    else
    {
      *v24 = v26;
      if (v26)
        goto LABEL_5;
      v33 = a5;
      *v24 = 0;
      v34 = v18 + 32 * v15;
      *(_DWORD *)(v34 + 16) = 0;
      v35 = v20;
      if ((*(_QWORD *)v20 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v20 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      *(_QWORD *)v35 = 0;
      *(_QWORD *)(v34 + 24) = 0;
      a5 = v33;
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 5616) + 80) = 0;
  }
LABEL_5:
  JSC::DFG::SpeculativeJIT::speculationCheck(a1, a6, (JSC::DFG::Node *)a2, (JSC::DFG::Node *)(a3 & 0xFF00FFFFFFFFFFFFLL), a5);
}

uint64_t JSC::DFG::SpeculativeJIT::usedRegisters(JSC::DFG::SpeculativeJIT *this)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v1 = 0;
  v2 = (char *)this + 4776;
  v3 = 15;
  v4 = 0xFFFFFFFFLL;
  v5 = 0x3FFFFFFFLL;
  v6 = 1;
  do
  {
    if ((char)v3 <= 15)
      v7 = v3;
    else
      v7 = 0xFFFFFFFFLL;
    v8 = *(_DWORD *)&v2[12 * v7 + 8];
    if (v8 || *(_DWORD *)&v2[12 * v7] != 0x3FFFFFFF)
    {
      LOBYTE(v9) = v3;
      if ((v3 & 0x40) != 0)
        goto LABEL_16;
      v1 |= 1 << v3;
    }
    --v3;
  }
  while (v3 != -1);
  v2 = (char *)this + 4968;
  v3 = 0x16u;
  v4 = (uint64_t)&JSC::FPRInfo::toRegister::registerForIndex;
  v5 = 1;
  v6 = (uint64_t)&JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister;
  do
  {
    v9 = *(char *)(v4 + v3);
    v8 = *(_DWORD *)(v6 + 4 * v9);
    if (!*(_DWORD *)&v2[12 * v8 + 8])
      goto LABEL_17;
    do
    {
      LOBYTE(v9) = v9 + 32;
      if ((v9 & 0x40) == 0)
      {
        v1 |= v5 << v9;
        break;
      }
LABEL_16:
      __break(1u);
LABEL_17:
      v8 = *(_DWORD *)&v2[12 * v8];
    }
    while (v8 != 0x3FFFFFFF);
    --v3;
  }
  while (v3 != -1);
  return v1 | 0xFF00FFFC0000;
}

uint64_t JSC::DFG::SpeculativeJIT::addSlowPathGeneratorLambda(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v2 = result;
  v3 = *a2;
  *a2 = 0;
  v4 = *(_QWORD *)(result + 3976);
  v12 = v3;
  v13 = v4;
  v14 = *(_DWORD *)(result + 5644);
  v5 = *(unsigned int *)(result + 5748);
  if ((_DWORD)v5 == *(_DWORD *)(result + 5744))
  {
    v6 = WTF::Vector<JSC::DFG::SpeculativeJIT::SlowPathLambda,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result + 5736, v5 + 1, (unint64_t)&v12);
    v7 = *(_QWORD *)(v2 + 5736) + 24 * *(unsigned int *)(v2 + 5748);
    v8 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)v7 = v8;
    v9 = *(_QWORD *)(v6 + 8);
    *(_DWORD *)(v7 + 16) = *(_DWORD *)(v6 + 16);
    *(_QWORD *)(v7 + 8) = v9;
    result = v12;
    ++*(_DWORD *)(v2 + 5748);
    v12 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v10 = *(_QWORD *)(result + 5736) + 24 * v5;
    *(_QWORD *)v10 = v3;
    v11 = v13;
    *(_DWORD *)(v10 + 16) = v14;
    *(_QWORD *)(v10 + 8) = v11;
    ++*(_DWORD *)(result + 5748);
  }
  return result;
}

unint64_t JSC::DFG::SpeculativeJIT::silentSavePlanForGPR(uint64_t a1, int a2, char a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v3 = ~a2;
  if (v3 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B6D63CLL);
  }
  v4 = *(_QWORD *)(a1 + 3992);
  v5 = (uint64_t *)(v4 + 24 * (int)v3);
  v6 = *v5;
  v7 = *((unsigned __int8 *)v5 + 12);
  if (*((_BYTE *)v5 + 14))
  {
    v8 = 0;
  }
  else
  {
    if (v7 == 1)
    {
      v8 = 2;
LABEL_35:
      v19 = *(unsigned __int16 *)(v6 + 18);
      v10 = 3840;
      if (v19 > 0xB5)
      {
        if (v19 != 182 && v19 != 355 && v19 != 348)
          return v10 & 0xFFFFFFFFFF80FFFFLL | ((unint64_t)(a3 & 0x7F) << 16) | v8;
      }
      else if (v19 >= 3)
      {
        return v10 & 0xFFFFFFFFFF80FFFFLL | ((unint64_t)(a3 & 0x7F) << 16) | v8;
      }
      v10 = 256;
      return v10 & 0xFFFFFFFFFF80FFFFLL | ((unint64_t)(a3 & 0x7F) << 16) | v8;
    }
    if ((v7 & 0xFE) == 6)
      v8 = 3;
    else
      v8 = 4;
  }
  v9 = v7 - 1;
  v10 = 4864;
  switch(v9)
  {
    case 0:
      goto LABEL_35;
    case 1:
      v24 = *(_QWORD *)(a1 + 3992);
      v25 = a3;
      if ((JSC::DFG::Node::hasConstant((JSC::DFG::Node *)v6) & 1) != 0)
      {
        v10 = 512;
        goto LABEL_46;
      }
      v21 = *(unsigned __int8 *)(v24 + 24 * (int)v3 + 13);
      if (v21 == 2 || v21 == 0)
        goto LABEL_45;
      if (v21 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x197B6D634);
      }
      v10 = 5632;
      goto LABEL_46;
    case 2:
      v23 = *(_QWORD *)(a1 + 3992);
      v25 = a3;
      if ((JSC::DFG::Node::hasConstant((JSC::DFG::Node *)v6) & 1) != 0)
      {
        v10 = 768;
      }
      else
      {
        v20 = *(unsigned __int8 *)(v23 + 24 * (int)v3 + 13);
        if (!*(_BYTE *)(v23 + 24 * (int)v3 + 13))
        {
LABEL_45:
          v10 = 5120;
          goto LABEL_46;
        }
        if (v20 != 2)
        {
          if (v20 != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x197B6D59CLL);
          }
          goto LABEL_45;
        }
        v10 = 5376;
      }
LABEL_46:
      a3 = v25;
      return v10 & 0xFFFFFFFFFF80FFFFLL | ((unint64_t)(a3 & 0x7F) << 16) | v8;
    case 4:
      __break(0xC471u);
      JUMPOUT(0x197B6D5FCLL);
    case 5:
      v16 = *(unsigned __int16 *)(v6 + 18);
      v10 = 4864;
      if (v16 > 0xB5)
      {
        if (v16 != 182 && v16 != 355 && v16 != 348)
          return v10 & 0xFFFFFFFFFF80FFFFLL | ((unint64_t)(a3 & 0x7F) << 16) | v8;
      }
      else if (v16 >= 3)
      {
        return v10 & 0xFFFFFFFFFF80FFFFLL | ((unint64_t)(a3 & 0x7F) << 16) | v8;
      }
      if (v16 > 2
        || ((v17 = **(_QWORD **)(v6 + 72)) != 0 ? (v18 = (v17 & 0xFFFE000000000002) == 0) : (v18 = 0), !v18))
      {
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x2F2, "SilentRegisterSavePlan JSC::DFG::SpeculativeJIT::silentSavePlanForGPR(VirtualRegister, GPRReg)", "node->isCellConstant()");
        __break(0xC471u);
        JUMPOUT(0x197B6D4CCLL);
      }
      v10 = 1280;
      return v10 & 0xFFFFFFFFFF80FFFFLL | ((unint64_t)(a3 & 0x7F) << 16) | v8;
    case 6:
      return v10 & 0xFFFFFFFFFF80FFFFLL | ((unint64_t)(a3 & 0x7F) << 16) | v8;
    default:
      v11 = *(unsigned __int16 *)(v6 + 18);
      if (v11 <= 0xB5)
      {
        if (v11 < 3)
          goto LABEL_10;
LABEL_16:
        v13 = *(_BYTE *)(v4 + 24 * (int)v3 + 13) == 1;
        v10 = 5120;
        v14 = 4096;
        goto LABEL_17;
      }
      if (v11 != 182 && v11 != 355 && v11 != 348)
        goto LABEL_16;
LABEL_10:
      if (v11 > 2 || (v12 = **(_QWORD **)(v6 + 72)) == 0)
      {
        v10 = 1792;
        return v10 & 0xFFFFFFFFFF80FFFFLL | ((unint64_t)(a3 & 0x7F) << 16) | v8;
      }
      v13 = (v12 & 0xFFFE000000000002) == 0;
      v10 = 1792;
      v14 = 1536;
LABEL_17:
      if (v13)
        v10 = v14;
      return v10 & 0xFFFFFFFFFF80FFFFLL | ((unint64_t)(a3 & 0x7F) << 16) | v8;
  }
}

uint64_t JSC::DFG::Node::hasConstant(JSC::DFG::Node *this)
{
  int v1;
  uint64_t result;

  v1 = *((unsigned __int16 *)this + 9);
  result = 1;
  if (v1 <= 181)
  {
    if (v1 < 3)
      return result;
    return 0;
  }
  if (v1 != 182 && v1 != 348 && v1 != 355)
    return 0;
  return result;
}

double JSC::DFG::Node::asNumber(JSC::DFG::Node *this)
{
  int v1;
  __int128 *v2;
  unint64_t v3;
  double result;

  v1 = *((unsigned __int16 *)this + 9);
  if (v1 == 355 || v1 == 348)
  {
    v2 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
    {
      JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
      LODWORD(qword_1EE342DB8) = 0;
    }
  }
  else
  {
    v2 = (__int128 *)*((_QWORD *)this + 9);
  }
  v3 = *(_QWORD *)v2;
  result = (double)(int)v3;
  if (v3 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&result = v3 - 0x2000000000000;
  return result;
}

void JSC::DFG::SpeculativeJIT::silentSpillImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v9;
  uint64_t v10;

  switch(*(_BYTE *)a2)
  {
    case 0:
      return;
    case 1:
      v8 = *(_BYTE *)(a2 + 2);
      v9 = *(unsigned int *)(*(_QWORD *)(a2 + 8) + 48);
      v10 = 0x40000001DLL;
      goto LABEL_4;
    case 2:
      v8 = *(_BYTE *)(a2 + 2);
      v9 = *(unsigned int *)(*(_QWORD *)(a2 + 8) + 48);
      v10 = 29;
LABEL_4:
      JSC::MacroAssemblerARM64::store32(a1, v8 & 0x7F, v10 | (v9 << 35), a4, a5, a6, a7, a8);
      break;
    case 3:
    case 4:
      JSC::MacroAssemblerARM64::store64(a1, *(_BYTE *)(a2 + 2) & 0x7F, ((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 8) + 48) << 35) | 0x1D, a4, a5, a6, a7, a8);
      break;
    case 5:
      JSC::MacroAssemblerARM64::storeDouble(a1, (char)((*(_BYTE *)(a2 + 2) & 0x7F) - 32), ((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 8) + 48) << 35) | 0x1D, a4, a5, a6, a7, a8);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197B6D7A0);
  }
}

void JSC::MacroAssemblerARM64::store32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;

  v8 = a3;
  v9 = a2;
  if ((HIDWORD(a3) + 256) <= 0x1FF)
  {
    v11 = ((WORD2(a3) & 0x1FF) << 12) | a2 & 0x1F | (32 * (char)a3);
    v12 = -1207959552;
LABEL_3:
    v13 = v11 | v12;
    goto LABEL_4;
  }
  if (HIDWORD(a3) <= 0x3FFC && (a3 & 0x300000000) == 0)
  {
    v11 = (HIDWORD(a3) << 8) & 0x3FFC00;
    v12 = a2 & 0x1F | (32 * (char)a3) | 0xB9000000;
    goto LABEL_3;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    return;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  v13 = v9 & 0x1F | (32 * v8) | 0xB8316800;
LABEL_4:
  v16 = *(_DWORD *)(a1 + 200);
  v15 = (unsigned int *)(a1 + 200);
  v14 = v16;
  if (v16 + 4 > *(v15 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 - 36), a2, a3, a4, a5, a6, a7, a8);
    v14 = *v15;
  }
  *(_DWORD *)(*((_QWORD *)v15 - 18) + v14) = v13;
  *v15 += 4;
}

void JSC::MacroAssemblerARM64::store64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if ((HIDWORD(a3) + 256) > 0x1FF)
  {
    if (HIDWORD(a3) > 0x7FF8 || (a3 & 0x700000000) != 0)
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        return;
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      v11 = v9 & 0x1F | (32 * v8) | 0xF8316800;
    }
    else
    {
      v11 = (HIDWORD(a3) << 7) & 0x3FFC00 | a2 & 0x1F | (32 * (char)a3) | 0xF9000000;
    }
  }
  else
  {
    v11 = ((WORD2(a3) & 0x1FF) << 12) | a2 & 0x1F | (32 * (char)a3) | 0xF8000000;
  }
  v14 = *(_DWORD *)(a1 + 200);
  v13 = (unsigned int *)(a1 + 200);
  v12 = v14;
  if (v14 + 4 > *(v13 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 - 36), a2, a3, a4, a5, a6, a7, a8);
    v12 = *v13;
  }
  *(_DWORD *)(*((_QWORD *)v13 - 18) + v12) = v11;
  *v13 += 4;
}

void JSC::MacroAssemblerARM64::storeDouble(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  int v16;

  v8 = a3;
  v9 = a2;
  if ((HIDWORD(a3) + 256) > 0x1FF)
  {
    if (HIDWORD(a3) > 0x7FF8 || (a3 & 0x700000000) != 0)
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        return;
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      v15 = v9 | (32 * v8);
      v16 = -63870976;
    }
    else
    {
      v15 = a2 | (32 * (char)a3) | (HIDWORD(a3) << 7) & 0x3FFC00;
      v16 = -50331648;
    }
    v11 = v15 | v16;
  }
  else
  {
    v11 = a2 | (32 * (char)a3) | ((WORD2(a3) & 0x1FF) << 12) | 0xFC000000;
  }
  v14 = *(_DWORD *)(a1 + 200);
  v13 = (unsigned int *)(a1 + 200);
  v12 = v14;
  if (v14 + 4 > *(v13 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 - 36), a2, a3, a4, a5, a6, a7, a8);
    v12 = *v13;
  }
  *(_DWORD *)(*((_QWORD *)v13 - 18) + v12) = v11;
  *v13 += 4;
}

void JSC::DFG::SpeculativeJIT::silentFillImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  __int128 *v31;
  unint64_t v32;
  double v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  int v66;
  __int128 *v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[2];

  v8 = (_DWORD *)a1;
  if (*(_BYTE *)(a2 + 1) == 20)
  {
    v9 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 48);
    v10 = *(unsigned __int8 *)(a2 + 2);
    if ((8 * v9 + 256) > 0x1FF)
    {
      if ((8 * v9) > 0x7FF8)
      {
        if (!*(_BYTE *)(a1 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x197B6DE98);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, 8 * v9, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
        v13 = v10 & 0x1F | 0xF8716BA0;
        goto LABEL_5;
      }
      v11 = (v10 | (v9 << 10)) & 0x3FFC1F;
      v12 = -113245280;
    }
    else
    {
      v11 = (v10 | (v9 << 15)) & 0x801F801F;
      v12 = -130022496;
    }
    v13 = v11 | v12;
LABEL_5:
    v16 = v8[50];
    v15 = v8 + 50;
    v14 = v16;
    if (v16 + 4 > *(v15 - 2))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 - 36), a2, a3, a4, a5, a6, a7, a8);
      v14 = *v15;
    }
    *(_DWORD *)(*((_QWORD *)v15 - 18) + v14) = v13;
    *v15 += 4;
    return;
  }
  switch(*(_BYTE *)(a2 + 1))
  {
    case 0:
      return;
    case 1:
      v24 = *(_QWORD *)(a2 + 8);
      v25 = *(unsigned __int16 *)(v24 + 18);
      if (v25 == 355 || v25 == 348)
      {
        v26 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
        {
          JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
          LODWORD(qword_1EE342DB8) = 0;
        }
      }
      else
      {
        v26 = *(__int128 **)(v24 + 72);
      }
      v27 = *(_BYTE *)(a2 + 2) & 0x7F;
      v28 = *(unsigned int *)v26;
      goto LABEL_23;
    case 2:
      v68 = a2;
      v21 = JSC::DFG::Node::asAnyInt(*(JSC::DFG::Node **)(a2 + 8)) << 12;
      goto LABEL_56;
    case 3:
      v68 = a2;
      v21 = JSC::DFG::Node::asAnyInt(*(JSC::DFG::Node **)(a2 + 8));
LABEL_56:
      v20 = *(_BYTE *)(v68 + 2) & 0x7F;
      a1 = (uint64_t)v8;
      goto LABEL_13;
    case 4:
      v65 = *(_QWORD *)(a2 + 8);
      v66 = *(unsigned __int16 *)(v65 + 18);
      if (v66 == 355 || v66 == 348)
      {
        v67 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
        {
          JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
          LODWORD(qword_1EE342DB8) = 0;
        }
      }
      else
      {
        v67 = *(__int128 **)(v65 + 72);
      }
      v28 = *(_QWORD *)v67 == 7;
      v27 = *(_BYTE *)(a2 + 2) & 0x7F;
LABEL_23:
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)v28, v27, a4, a5, a6, a7, a8);
      return;
    case 5:
      v57 = *(_QWORD *)(a2 + 8);
      v58 = *(unsigned __int16 *)(v57 + 18);
      if (v58 == 355 || v58 == 348)
      {
        v59 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
        {
          JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
          LODWORD(qword_1EE342DB8) = 0;
        }
      }
      else
      {
        v59 = *(uint64_t **)(v57 + 72);
      }
      JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)v74, (JSC::DFG::JITCompiler *)a1, *v59, a4, a5, a6, a7, a8);
      JSC::DFG::JITCompiler::loadLinkableConstant(v8, v74[0], (JSC::ARM64LogicalImmediate *)v74[1], *(_BYTE *)(a2 + 2) & 0x7F, v60, v61, v62, v63);
      return;
    case 6:
    case 7:
      v17 = *(_QWORD *)(a2 + 8);
      v18 = *(unsigned __int16 *)(v17 + 18);
      if (v18 == 355 || v18 == 348)
      {
        v19 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
        {
          JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
          LODWORD(qword_1EE342DB8) = 0;
        }
      }
      else
      {
        v19 = *(uint64_t **)(v17 + 72);
      }
      v20 = *(_BYTE *)(a2 + 2) & 0x7F;
      v21 = *v19;
LABEL_13:
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v21, v20, a4, a5, a6, a7, a8);
      return;
    case 0xD:
      v29 = *(_QWORD *)(a2 + 8);
      v30 = *(unsigned __int16 *)(v29 + 18);
      if (v30 == 355 || v30 == 348)
      {
        v31 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
        {
          JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
          LODWORD(qword_1EE342DB8) = 0;
        }
      }
      else
      {
        v31 = *(__int128 **)(v29 + 72);
      }
      v32 = *(_QWORD *)v31;
      if (v32 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v33 = v32 - 0x2000000000000;
      else
        v33 = (double)(int)v32;
      JSC::MacroAssembler::moveDouble(a1, *(uint64_t *)&v33, (char)((*(_BYTE *)(a2 + 2) & 0x7F) - 32), a4, a5, a6, a7, a8);
      return;
    case 0xE:
      v22 = *(unsigned int *)(*(_QWORD *)(a2 + 8) + 48);
      v23 = 0x40000001DLL;
      goto LABEL_16;
    case 0xF:
      v22 = *(unsigned int *)(*(_QWORD *)(a2 + 8) + 48);
      v23 = 29;
LABEL_16:
      JSC::MacroAssemblerARM64::load32(a1, v23 | (v22 << 35), *(_BYTE *)(a2 + 2) & 0x7F, a4, a5, a6, a7, a8);
      return;
    case 0x10:
      JSC::MacroAssemblerARM64::load32(a1, ((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 8) + 48) << 35) | 0x1D, *(_BYTE *)(a2 + 2) & 0x7F, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::or64(v8, 27, *(_BYTE *)(a2 + 2) & 0x7F, v35, v36, v37, v38, v39);
      return;
    case 0x11:
      v46 = a2;
      JSC::MacroAssemblerARM64::load32(a1, ((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 8) + 48) << 35) | 0x1D, *(_BYTE *)(a2 + 2) & 0x7F, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::signExtend32ToPtr(v8, *(_BYTE *)(v46 + 2) & 0x7F, *(_BYTE *)(v46 + 2) & 0x7F, v47, v48, v49, v50, v51);
      goto LABEL_44;
    case 0x12:
      JSC::MacroAssemblerARM64::load32(a1, ((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 8) + 48) << 35) | 0x1D, *(_BYTE *)(a2 + 2) & 0x7F, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::signExtend32ToPtr(v8, *(_BYTE *)(a2 + 2) & 0x7F, *(_BYTE *)(a2 + 2) & 0x7F, v41, v42, v43, v44, v45);
      return;
    case 0x13:
      JSC::MacroAssemblerARM64::load64(a1, ((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 8) + 48) << 35) | 0x1D, *(_BYTE *)(a2 + 2) & 0x7F, a4, a5, a6, a7, a8);
      return;
    case 0x15:
      JSC::MacroAssemblerARM64::load64(a1, ((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 8) + 48) << 35) | 0x1D, *(_BYTE *)(a2 + 2) & 0x7F, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::rshift64(v8, *(_BYTE *)(a2 + 2) & 0x7F, 12, *(_BYTE *)(a2 + 2) & 0x7F, v70, v71, v72, v73);
      return;
    case 0x16:
      v46 = a2;
      JSC::MacroAssemblerARM64::load64(a1, ((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 8) + 48) << 35) | 0x1D, *(_BYTE *)(a2 + 2) & 0x7F, a4, a5, a6, a7, a8);
LABEL_44:
      JSC::MacroAssemblerARM64::lshift64(v8, *(_BYTE *)(v46 + 2) & 0x7F, 12, *(_BYTE *)(v46 + 2) & 0x7F, v52, v53, v54, v55);
      break;
    case 0x17:
      JSC::MacroAssemblerARM64::loadDouble(a1, ((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 8) + 48) << 35) | 0x1D, (char)((*(_BYTE *)(a2 + 2) & 0x7F) - 32), a4, a5, a6, a7, a8);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197B6DF44);
  }
}

uint64_t JSC::DFG::Node::asAnyInt(JSC::DFG::Node *this)
{
  int v1;
  __int128 *v2;
  uint64_t v3;

  v1 = *((unsigned __int16 *)this + 9);
  if (v1 == 355 || v1 == 348)
  {
    v2 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
    {
      v3 = 0;
      JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
      LODWORD(qword_1EE342DB8) = 0;
      return (uint64_t)COERCE_DOUBLE(v3 - 0x2000000000000);
    }
  }
  else
  {
    v2 = (__int128 *)*((_QWORD *)this + 9);
  }
  v3 = *(_QWORD *)v2;
  if (*(_QWORD *)v2 >= 0xFFFE000000000000)
    return (int)v3;
  return (uint64_t)COERCE_DOUBLE(v3 - 0x2000000000000);
}

void JSC::MacroAssembler::moveDouble(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;

  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197B6E2E8);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197B6E308);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v17 = *(_BYTE *)(a1 + 304);
  v18 = *(_DWORD *)(a1 + 200);
  if (v18 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v10, v11, v12, v13, v14, v15, v16);
    v18 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = a3 | (32 * (v17 & 0x1F)) | 0x9E670000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::or64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = ((v9 & 0x1F) << 16) | (32 * (v8 & 0x1F)) | v8 & 0x1F | 0xAA000000;
  a1[50] += 4;
}

{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0xAA000000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::signExtend32ToPtr(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 & 0x1F | (32 * (v9 & 0x1F)) | 0x93407C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::load64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;

  v8 = a3;
  v9 = a2;
  if ((HIDWORD(a2) + 256) <= 0x1FF)
  {
    v11 = ((WORD2(a2) & 0x1FF) << 12) | a3 & 0x1F | (32 * (char)a2);
    v12 = -130023424;
LABEL_3:
    v13 = v11 | v12;
    goto LABEL_4;
  }
  if (HIDWORD(a2) <= 0x7FF8 && (a2 & 0x700000000) == 0)
  {
    v11 = (HIDWORD(a2) << 7) & 0x3FFC00;
    v12 = a3 & 0x1F | (32 * (char)a2) | 0xF9400000;
    goto LABEL_3;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    return;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  v13 = v8 & 0x1F | (32 * v9) | 0xF8716800;
LABEL_4:
  v16 = *(_DWORD *)(a1 + 200);
  v15 = (unsigned int *)(a1 + 200);
  v14 = v16;
  if (v16 + 4 > *(v15 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 - 36), a2, a3, a4, a5, a6, a7, a8);
    v14 = *v15;
  }
  *(_DWORD *)(*((_QWORD *)v15 - 18) + v14) = v13;
  *v15 += 4;
}

{
  int v8;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  JSC::AssemblerBuffer *v29;

  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_29;
  v8 = a3;
  v11 = *(_QWORD *)(a1 + 296);
  v12 = *(_DWORD *)(a1 + 320);
  v13 = *(_DWORD *)(v11 + 208);
  if ((v13 & v12) == 0)
  {
LABEL_3:
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2, 17, a4, a5, a6, a7, a8);
    if (v8 != 17)
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197C24954);
      }
      *(_QWORD *)(a1 + 312) = a2;
      v21 = *(_QWORD *)(a1 + 296);
      v22 = *(_DWORD *)(v21 + 208) | *(_DWORD *)(a1 + 320);
      goto LABEL_6;
    }
    if (*(_BYTE *)(a1 + 212))
    {
      v21 = *(_QWORD *)(a1 + 296);
      v22 = *(_DWORD *)(v21 + 208) & ~*(_DWORD *)(a1 + 320);
LABEL_6:
      *(_DWORD *)(v21 + 208) = v22;
      v23 = *(_DWORD *)(a1 + 200);
      if (v23 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v14, v15, v16, v17, v18, v19, v20);
        v23 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = v8 & 0x1F | 0xF87F6A20;
LABEL_9:
      *(_DWORD *)(a1 + 200) += 4;
      return;
    }
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x197C24934);
  }
  v24 = *(_QWORD *)(a1 + 312);
  v25 = a2 - v24;
  if ((_DWORD)a3 == 17)
    *(_DWORD *)(v11 + 208) = v13 & ~v12;
  if (v25 != (int)v25)
    goto LABEL_35;
  if ((v25 + 256) <= 0x1FF)
  {
    v26 = a3 & 0x1F | ((v25 & 0x1FF) << 12) | 0xF8400220;
    v27 = *(_DWORD *)(a1 + 200);
    if (v27 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v27 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = v26;
    goto LABEL_9;
  }
  if (v25 <= 0x7FF8 && (v25 & 7) == 0)
  {
    v28 = a3 & 0x1F | (((v25 >> 3) & 0xFFF) << 10) | 0xF9400220;
    v29 = (JSC::AssemblerBuffer *)(a1 + 56);
  }
  else
  {
LABEL_35:
    if ((v24 ^ (unint64_t)a2) >> 16)
      goto LABEL_3;
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), (32 * (unsigned __int16)a2) | 0xF2800011, a3, a4, a5, a6, a7, a8);
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197C24A50);
    }
    *(_QWORD *)(a1 + 312) = a2;
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) |= *(_DWORD *)(a1 + 320);
    v28 = v8 & 0x1F | 0xF87F6A20;
    v29 = (JSC::AssemblerBuffer *)(a1 + 56);
  }
  JSC::AssemblerBuffer::putInt(v29, v28, a3, a4, a5, a6, a7, a8);
}

void JSC::MacroAssemblerARM64::loadDouble(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  int v16;

  v8 = a3;
  v9 = a2;
  if ((HIDWORD(a2) + 256) > 0x1FF)
  {
    if (HIDWORD(a2) > 0x7FF8 || (a2 & 0x700000000) != 0)
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        return;
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      v15 = v8 | (32 * v9);
      v16 = -59676672;
    }
    else
    {
      v15 = a3 | (32 * (char)a2) | (HIDWORD(a2) << 7) & 0x3FFC00;
      v16 = -46137344;
    }
    v11 = v15 | v16;
  }
  else
  {
    v11 = a3 | (32 * (char)a2) | ((WORD2(a2) & 0x1FF) << 12) | 0xFC400000;
  }
  v14 = *(_DWORD *)(a1 + 200);
  v13 = (unsigned int *)(a1 + 200);
  v12 = v14;
  if (v14 + 4 > *(v13 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 - 36), a2, a3, a4, a5, a6, a7, a8);
    v12 = *v13;
  }
  *(_DWORD *)(*((_QWORD *)v13 - 18) + v12) = v11;
  *v13 += 4;
}

void JSC::DFG::SpeculativeJIT::jumpSlowForUnwantedArrayMode(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  void *v24;
  _DWORD *v25;
  _DWORD *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD v63[3];
  _BYTE v64[12];
  _BYTE v65[12];
  _DWORD v66[3];
  _DWORD v67[3];
  _DWORD v68[3];

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 2;
  if ((a4 & 0x10000000) != 0)
    v11 = 31;
  else
    v11 = 15;
  if (a4 != 9)
  {
    v12 = 4;
    switch((char)a4)
    {
      case 6:
        v12 = 2;
        goto LABEL_6;
      case 7:
        goto LABEL_6;
      case 8:
        v12 = 6;
        goto LABEL_6;
      case 10:
        v12 = 10;
        goto LABEL_6;
      case 11:
        if (BYTE1(a4) == 2)
        {
          v39 = v65;
          v40 = v65;
          v41 = a2;
          v42 = 0;
        }
        else
        {
          if (BYTE1(a4) - 3 < 3)
          {
            __break(0xC471u);
            JUMPOUT(0x197B6E940);
          }
          if (BYTE1(a4) >= 2u)
          {
LABEL_29:
            JSC::MacroAssemblerARM64::and32(a2, (JSC::ARM64LogicalImmediate *)0xE, a3, a3);
            JSC::MacroAssemblerARM64::sub32(a2, a3, 10, a3, v49, v50, v51, v52);
            JSC::MacroAssemblerARM64::branch32(a2, 8, a3, 2, v53, v54, v55, v56, (uint64_t)v63);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)a1, v63, v57, v58, v59, v60, v61, v62);
            return;
          }
          v39 = v64;
          v40 = v64;
          v41 = a2;
          v42 = 1;
        }
        JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, v41, v42, a3, a5, a6, a7, a8, (uint64_t)v40, (int8x8_t)2);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append((_DWORD *)a1, v39, v43, v44, v45, v46, v47, v48);
        goto LABEL_29;
      default:
        __break(0xC471u);
        JUMPOUT(0x197B6E970);
    }
  }
  v12 = 8;
LABEL_6:
  switch(BYTE1(a4))
  {
    case 0:
    case 1:
      JSC::MacroAssemblerARM64::and32(a2, (JSC::ARM64LogicalImmediate *)v11, a3, a3);
      JSC::MacroAssemblerARM64::branch32(a2, 1, a3, v12, v29, v30, v31, v32, (uint64_t)v67);
      v22 = v67[0];
      if (v67[0] == -1)
        return;
      v23 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v23 == *(_DWORD *)(a1 + 8))
      {
        v24 = (void *)(v23 + 1);
        v25 = v67;
        goto LABEL_10;
      }
      v33 = v67;
      goto LABEL_15;
    case 2:
      JSC::MacroAssemblerARM64::and32(a2, (JSC::ARM64LogicalImmediate *)v11, a3, a3);
      JSC::MacroAssemblerARM64::branch32(a2, 1, a3, v12 | 1, v13, v14, v15, v16, (uint64_t)v68);
      v22 = v68[0];
      if (v68[0] == -1)
        return;
      v23 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v23 == *(_DWORD *)(a1 + 8))
      {
        v24 = (void *)(v23 + 1);
        v25 = v68;
        goto LABEL_10;
      }
      v33 = v68;
      goto LABEL_15;
    case 3:
    case 4:
    case 5:
      __break(0xC471u);
      JUMPOUT(0x197B6E920);
    case 6:
      JSC::MacroAssemblerARM64::and32(a2, (JSC::ARM64LogicalImmediate *)(v11 & 0x1E), a3, a3);
      JSC::MacroAssemblerARM64::branch32(a2, 1, a3, v12, v35, v36, v37, v38, (uint64_t)v66);
      v22 = v66[0];
      if (v66[0] == -1)
        return;
      v23 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v23 == *(_DWORD *)(a1 + 8))
      {
        v24 = (void *)(v23 + 1);
        v25 = v66;
LABEL_10:
        v26 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v24, (unint64_t)v25, v17, v18, v19, v20, v21);
        v28 = *v26;
        v27 = v26 + 1;
        v22 = v28;
        LODWORD(v23) = *(_DWORD *)(a1 + 12);
      }
      else
      {
        v33 = v66;
LABEL_15:
        v27 = v33 + 1;
      }
      v34 = *(_QWORD *)a1 + 12 * v23;
      *(_DWORD *)v34 = v22;
      *(_QWORD *)(v34 + 4) = *v27;
      ++*(_DWORD *)(a1 + 12);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197B6E968);
  }
}

void JSC::MacroAssemblerARM64::branchTest32(JSC::ARM64LogicalImmediate *this@<X3>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int8x8_t a10@<D0>)
{
  unsigned int v10;
  char v11;
  int v12;
  uint8x8_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unsigned int i;
  int v23;
  int v24;
  JSC::AssemblerBuffer *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  char v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int j;

  v10 = this;
  v11 = a4;
  v12 = a3;
  if ((_DWORD)this == -1)
  {
    if (a3 <= 1)
    {
      if (*(_BYTE *)(a2 + 328))
      {
        for (i = *(_DWORD *)(a2 + 200); (signed int)i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
        {
          if (i + 4 > *(_DWORD *)(a2 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a3, a4, (uint64_t)this, a5, a6, a7, a8);
            i = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
          i = *(_DWORD *)(a2 + 200) + 4;
        }
        *(_DWORD *)(a2 + 208) = 0;
      }
      else
      {
        i = *(_DWORD *)(a2 + 200);
      }
      if (v12)
        v41 = 889192448;
      else
        v41 = 872415232;
      v42 = v11 & 0x1F | v41;
      if (i + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a3, a4, (uint64_t)this, a5, a6, a7, a8);
        i = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = v42;
      v43 = *(_DWORD *)(a2 + 200);
      v32 = v43 + 4;
      *(_DWORD *)(a2 + 200) = v43 + 4;
      v44 = v43 + 8;
      v45 = v43 + 4;
      if (v44 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a3, a4, (uint64_t)this, a5, a6, a7, a8);
        v45 = *(_DWORD *)(a2 + 200);
      }
      v16 = 0;
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v45) = -721215457;
      *(_DWORD *)(a2 + 200) += 4;
      v39 = *(_BYTE *)(a2 + 328) == 0;
      v35 = -121;
      v40 = -125;
      goto LABEL_46;
    }
    v29 = (unsigned __int16)(32 * (a4 & 0x1F)) | ((a4 & 0x1F) << 16) | 0x6A00001F;
    goto LABEL_19;
  }
  if (a3 <= 1)
  {
    a10.i32[0] = (int)this;
    v15 = (uint8x8_t)vcnt_s8(a10);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.i32[0] == 1)
    {
      v16 = __clz(__rbit32(this));
      if (*(_BYTE *)(a2 + 328))
      {
        for (j = *(_DWORD *)(a2 + 200); j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
        {
          if ((j + 4) > *(_DWORD *)(a2 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a3, a4, (uint64_t)this, a5, a6, a7, a8);
            j = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
          j = *(_DWORD *)(a2 + 200) + 4;
        }
        *(_DWORD *)(a2 + 208) = 0;
      }
      v17 = (v16 << 26) & 0x80000000;
      v18 = v16 << 19;
      v19 = v11 & 0x1F;
      if (v12)
      {
        v20 = v17 | v19;
        v21 = v18 | 0x37000000;
      }
      else
      {
        v20 = v18 & 0xF80000 | v19 | v17;
        v21 = 905969664;
      }
      v36 = v20 | v21;
      v37 = *(_DWORD *)(a2 + 200);
      if (v37 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a3, a4, (uint64_t)this, a5, a6, a7, a8);
        v37 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v37) = v36;
      v32 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v32;
      v38 = v32;
      if ((v32 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a3, a4, (uint64_t)this, a5, a6, a7, a8);
        v38 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = -721215457;
      *(_DWORD *)(a2 + 200) += 4;
      v39 = *(_BYTE *)(a2 + 328) == 0;
      v35 = -120;
      v40 = -124;
LABEL_46:
      if (v39)
        v35 = v40;
      goto LABEL_48;
    }
  }
  v23 = JSC::ARM64LogicalImmediate::create32(this);
  if (v23 == -1)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197B6EDB8);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v10, *(char *)(a2 + 272), (uint64_t)this, a5, a6, a7, a8);
    v29 = (32 * (v11 & 0x1F)) | 0x6A10001F;
LABEL_19:
    v30 = *(_DWORD *)(a2 + 200);
    if (v30 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a3, a4, (uint64_t)this, a5, a6, a7, a8);
      v30 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = v29;
    v27 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v27;
    if (*(_BYTE *)(a2 + 328))
    {
      for (; (signed int)v27 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v27)
      {
        if (v27 + 4 > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a3, a4, (uint64_t)this, a5, a6, a7, a8);
          v27 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v27) = -721215457;
        v27 = *(_DWORD *)(a2 + 200) + 4;
      }
      *(_DWORD *)(a2 + 208) = 0;
    }
    v28 = v12 | 0x54000000;
    v25 = (JSC::AssemblerBuffer *)(a2 + 56);
    goto LABEL_23;
  }
  v24 = (32 * (v11 & 0x1F)) | (v23 << 10) | 0x7200001F;
  v25 = (JSC::AssemblerBuffer *)(a2 + 56);
  v26 = *(_DWORD *)(a2 + 200);
  if (v26 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a3, a4, (uint64_t)this, a5, a6, a7, a8);
    v26 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v26) = v24;
  v27 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v27;
  if (*(_BYTE *)(a2 + 328))
  {
    while ((signed int)v27 < *(_DWORD *)(a2 + 52))
    {
      if (v27 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a3, a4, (uint64_t)this, a5, a6, a7, a8);
        v27 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v27) = -721215457;
      v27 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v27;
    }
    *(_DWORD *)(a2 + 208) = 0;
  }
  v28 = v12 | 0x54000000;
LABEL_23:
  if (v27 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v25, a3, a4, (uint64_t)this, a5, a6, a7, a8);
    v27 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v27) = v28;
  v31 = *(_DWORD *)(a2 + 200);
  v32 = v31 + 4;
  *(_DWORD *)(a2 + 200) = v31 + 4;
  v33 = v31 + 8;
  v34 = v31 + 4;
  if (v33 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v25, a3, a4, (uint64_t)this, a5, a6, a7, a8);
    v34 = *(_DWORD *)(a2 + 200);
  }
  v16 = 0;
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v34) = -721215457;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v35 = -122;
  else
    v35 = -126;
  v11 = -1;
LABEL_48:
  *(_DWORD *)a9 = v32;
  *(_DWORD *)(a9 + 4) = v16;
  *(_BYTE *)(a9 + 8) = v35;
  *(_BYTE *)(a9 + 9) = v12;
  *(_BYTE *)(a9 + 10) = 0;
  *(_BYTE *)(a9 + 11) = v11;
}

uint64_t JSC::DFG::SpeculativeJIT::checkArray(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  JSC::DFG::Graph *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  int8x8_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  uint64_t result;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  int *v64;
  JSC::DFG::SpeculativeJIT *v65;
  JSC::DFG::Node *v66;
  JSC::DFG::Node *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  unsigned int *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  JSC::DFG::SpeculativeJIT *v81;
  unsigned __int8 v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE v95[12];
  WTF *v96[2];
  uint64_t v97;
  _BYTE v98[12];
  uint64_t v99;
  char v100;
  char v101;
  int v102;
  int v103;
  WTF *v104;

  if (*((_WORD *)a2 + 9) == 146)
    v10 = *((_DWORD *)a2 + 20);
  else
    v10 = *((_DWORD *)a2 + 18);
  v102 = v10;
  v11 = *((_QWORD *)a2 + 3);
  v12 = v11 & 0xFF00FFFFFFFFFFFFLL;
  if ((v11 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_7;
  v13 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v13 >= *((unsigned int *)this + 1001))
    goto LABEL_88;
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v13 + 12)
    || (v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        (_DWORD)v15 == -1))
  {
LABEL_7:
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v11, a3, a4, a5, a6, a7, a8);
  }
  v16 = (JSC::DFG::Graph *)*((_QWORD *)this + 495);
  v17 = *((_QWORD *)a2 + 3);
  v18 = *((_QWORD *)this + 688);
  v19 = *(unsigned int *)((v17 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v20 = (uint64_t *)(v18 + 24);
  v21 = (uint64_t *)(v18 + 8);
  if ((v17 & 1) != 0)
    v22 = v20;
  else
    v22 = v21;
  v23 = *v22;
  v24 = *v22 + 32 * v19;
  v25 = *((_DWORD *)this + 1396);
  v26 = *(_DWORD *)(v24 + 20);
  if (v25 != v26)
  {
    if ((*(_QWORD *)(v24 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v26 ^ v25) >= 2)
      {
        v52 = *(_QWORD *)v24;
        if (*(_QWORD *)v24 != 4)
        {
          *(_QWORD *)v24 = v52 | 2;
          v77 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v52 & 1) != 0)
          {
            v84 = 2 * *v77;
            while (v84 * 4)
            {
              v85 = *(_QWORD *)&v77[v84];
              if ((*(_BYTE *)(v85 + 19) & 0xC) == 0)
              {
                v86 = *(_QWORD *)(v85 + 96);
                v87 = (v86 & 1) != 0 ? (v86 >> 1) & 3 : *(unsigned __int8 *)(v86 + 4);
                v84 -= 2;
                if (v87 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v77, v14, a3, a4, a5, a6, a7, a8);
              goto LABEL_63;
            }
          }
          else if (v77)
          {
            if ((*((_BYTE *)v77 + 19) & 0xC) != 0
              || ((v78 = *((_QWORD *)v77 + 12), (v78 & 1) != 0)
                ? (v79 = (v78 >> 1) & 3)
                : (v79 = *(unsigned __int8 *)(v78 + 4)),
                  v79 == 2))
            {
LABEL_63:
              *(_QWORD *)v24 = 4;
            }
          }
        }
        *(_DWORD *)(v23 + 32 * v19 + 16) = -21020677;
      }
      if ((v25 & 1) != 0)
        *(_QWORD *)v24 &= ~2uLL;
    }
    *(_DWORD *)(v24 + 20) = v25;
  }
  if (JSC::DFG::ArrayMode::alreadyChecked((JSC::DFG::ArrayMode *)&v102, v16, a2, (const JSC::DFG::AbstractValue *)v24, a5, a6, a7, a8))
  {
    result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, *((_QWORD *)this + 497), 0, v28, v29, v30, v31, v32);
    goto LABEL_30;
  }
  LOBYTE(v99) = 0;
  v101 = 0;
  v33 = v102 - 12;
  if (v33 < 0xFFFFFFFA)
  {
    v34 = 0;
  }
  else
  {
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v99, this, v27, v28, v29, v30, v31, v32);
    v101 = 1;
    v34 = v100;
  }
  *(_QWORD *)v98 = 0xFFFFFFFFLL;
  v35 = (int8x8_t)4278193985;
  *(_DWORD *)&v98[8] = -16773311;
  if (*((_WORD *)a2 + 9) != 141)
    goto LABEL_16;
  v68 = *((_QWORD *)a2 + 3);
  v69 = *((_QWORD *)this + 702);
  v70 = *(_QWORD *)(v69 + 8);
  v71 = *(unsigned int *)((v68 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v72 = (_QWORD *)(v70 + 24);
  v73 = (_QWORD *)(v70 + 8);
  if ((v68 & 1) != 0)
    v74 = v72;
  else
    v74 = v73;
  v75 = *v74 + 32 * v71;
  v76 = (void *)*(unsigned int *)(v69 + 88);
  if ((_DWORD)v76 != *(_DWORD *)(v75 + 20))
  {
    if ((*(_QWORD *)(v75 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v75, v76, v27, v28, v29, v30, v31, v32);
    else
      *(_DWORD *)(v75 + 20) = (_DWORD)v76;
  }
  if ((*(_BYTE *)(v75 + 13) & 4) != 0)
  {
    JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v15, 0xFFFFFFFFLL, v29, v30, v31, v32, (uint64_t)v96, v35);
    v36 = (int)v96[0];
    *(_DWORD *)v98 = v96[0];
    *(WTF **)&v98[4] = *(WTF **)((char *)v96 + 4);
  }
  else
  {
LABEL_16:
    v36 = -1;
  }
  if (v102 - 6 < 6)
  {
    if (v33 > 0xFFFFFFF9)
    {
      JSC::MacroAssemblerARM64::load8((uint64_t)this, v15 | 0x400000000, v34, v28, v29, v30, v31, v32);
      JSC::DFG::SpeculativeJIT::jumpSlowForUnwantedArrayMode((uint64_t)v96, (uint64_t)this, v34, v102, v37, v38, v39, v40);
      JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 7uLL, (JSC::DFG::Node *)(((unint64_t)v15 << 32) | 0x80000000), 0, (unsigned int *)v96);
      v48 = v96[0];
      if (&v97 != (uint64_t *)v96[0] && v96[0])
      {
        memset(v96, 0, 12);
        WTF::fastFree((unint64_t)v48, v41, v42, v43, v44, v45, v46, v47);
      }
      goto LABEL_22;
    }
    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_88:
    __break(0xC471u);
    JUMPOUT(0x197B6F494);
  }
  if (v102 > 0x18u)
  {
    if (v102 == 25)
      goto LABEL_45;
    goto LABEL_89;
  }
  switch(v102)
  {
    case 0xCu:
      v80 = *((_QWORD *)a2 + 3);
      v81 = this;
      v82 = v15;
      v83 = 33;
LABEL_66:
      JSC::DFG::SpeculativeJIT::speculateCellTypeWithoutTypeFiltering((uint64_t)v81, v80, v82, v83, v29, v30, v31, v32);
      goto LABEL_22;
    case 5u:
      __break(0xC471u);
      goto LABEL_96;
    case 0xDu:
      v80 = *((_QWORD *)a2 + 3);
      v81 = this;
      v82 = v15;
      v83 = 34;
      goto LABEL_66;
  }
LABEL_89:
  v88 = JSC::DFG::toTypedArrayType(v102);
  if (v88 == 12 || !v88)
  {
    JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 495), a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x488, "void JSC::DFG::SpeculativeJIT::checkArray(Node *)", "arrayMode.isSomeTypedArrayView()");
    __break(0xC471u);
LABEL_96:
    JUMPOUT(0x197B6F420);
  }
  if (v102 != 25)
  {
    v89 = *((_QWORD *)a2 + 3);
    v90 = JSC::DFG::toTypedArrayType(v102);
    if ((v90 - 1) >= 0xC)
    {
      __break(0xC471u);
      JUMPOUT(0x197B6F530);
    }
    JSC::AssemblyHelpers::branchIfNotType((uint64_t)&v103, (uint64_t)this, v15, 257 * (v90 + 38), v91, v92, v93, v94);
    v67 = (JSC::DFG::Node *)(v89 & 0xFF00FFFFFFFFFFFFLL);
    LODWORD(v96[0]) = v103;
    *(WTF **)((char *)v96 + 4) = v104;
    v64 = (int *)v96;
    v65 = this;
    v66 = (JSC::DFG::Node *)(((unint64_t)v15 << 32) | 0x80000000);
    goto LABEL_49;
  }
LABEL_45:
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197B6F478);
  }
  *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
  v53 = *((char *)this + 272);
  v54 = *((_BYTE *)this + 272);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v15 | 0x500000000, v53, v28, v29, v30, v31, v32);
  v62 = v53 | (32 * v53) | 0x51009C00;
  v63 = *((_DWORD *)this + 50);
  if (v63 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v55, v56, v57, v58, v59, v60, v61);
    v63 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v63) = v62;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 8, v54, 10, v58, v59, v60, v61, (uint64_t)v95);
  v64 = (int *)v95;
  v65 = this;
  v66 = (JSC::DFG::Node *)(((unint64_t)v15 << 32) | 0x80000000);
  v67 = 0;
LABEL_49:
  JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)v65, 1uLL, v66, v67, v64);
LABEL_22:
  if (v36 != -1)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v98, (uint64_t)this, v42, v43, v44, v45, v46, v47);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, *((_QWORD *)this + 497), 0, v43, v44, v45, v46, v47);
  if (v101)
  {
    if (v99)
    {
      v50 = v100;
      if (v100 != -1)
      {
        if (v100 > 15)
          v50 = -1;
        --*(_DWORD *)(v99 + 12 * v50 + 4784);
      }
    }
  }
LABEL_30:
  if (v12)
  {
    if ((int)v15 > 15)
      v51 = -1;
    else
      v51 = v15;
    --*((_DWORD *)this + 3 * v51 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculateCellOperand::SpeculateCellOperand(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;

  v8 = result;
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_BYTE *)(result + 16) = -1;
  if ((a3 & 0xFF00FFFFFFFFFFFFLL) == 0)
    return v8;
  v9 = ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v9 < *(unsigned int *)(a2 + 4004))
  {
    if (*(_BYTE *)(*(_QWORD *)(a2 + 3992) + 24 * (int)v9 + 12))
      *(_BYTE *)(result + 16) = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a2, a3, a3, a4, a5, a6, a7, a8);
    return v8;
  }
  __break(0xC471u);
  return result;
}

JSC::DFG::GPRTemporary *std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>(char *a1, JSC::DFG::SpeculativeJIT **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  JSC::DFG::GPRTemporary *result;

  if (a1[16])
  {
    if (*(_QWORD *)a1)
    {
      v8 = a1[8];
      if (v8 != -1)
      {
        if (v8 > 15)
          v8 = -1;
        --*(_DWORD *)(*(_QWORD *)a1 + 12 * v8 + 4784);
      }
    }
    a1[16] = 0;
  }
  result = JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)a1, *a2, a3, a4, a5, a6, a7, a8);
  *((_BYTE *)result + 16) = 1;
  return result;
}

void JSC::MacroAssemblerARM64::load8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  char v16;

  v8 = a3;
  if ((HIDWORD(a2) + 256) <= 0x1FF)
  {
    v10 = ((WORD2(a2) & 0x1FF) << 12) | a3 & 0x1F | (32 * (char)a2);
    v11 = 943718400;
LABEL_3:
    v12 = v10 | v11;
    goto LABEL_4;
  }
  if (HIDWORD(a2) <= 0xFFF)
  {
    v10 = ((WORD2(a2) & 0xFFF) << 10) | a3 & 0x1F | (32 * (char)a2);
    v11 = 960495616;
    goto LABEL_3;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    return;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v16 = a2;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  v12 = v8 & 0x1F | (32 * v16) | 0x38716800;
LABEL_4:
  v15 = *(_DWORD *)(a1 + 200);
  v14 = (unsigned int *)(a1 + 200);
  v13 = v15;
  if (v15 + 4 > *(v14 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v14 - 36), a2, a3, a4, a5, a6, a7, a8);
    v13 = *v14;
  }
  *(_DWORD *)(*((_QWORD *)v14 - 18) + v13) = v12;
  *v14 += 4;
}

void JSC::DFG::SpeculativeJIT::speculateCellTypeWithoutTypeFiltering(uint64_t a1, uint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::Node *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v10 = (JSC::DFG::Node *)(((unint64_t)a3 << 32) | 0x80000000);
  JSC::AssemblyHelpers::branchIfNotType((uint64_t)&v11, a1, a3, a4 | ((unint64_t)a4 << 8), a5, a6, a7, a8);
  v13 = v11;
  v14 = v12;
  JSC::DFG::SpeculativeJIT::speculationCheck(a1, 1uLL, v10, (JSC::DFG::Node *)(a2 & 0xFF00FFFFFFFFFFFFLL), &v13);
}

void JSC::AssemblyHelpers::branchIfNotType(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = a4;
  v11 = BYTE1(a4);
  if (BYTE1(a4) != a4)
  {
    if (*(_BYTE *)(a2 + 212))
    {
      v21 = a4;
      *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
      v22 = *(char *)(a2 + 272);
      JSC::MacroAssemblerARM64::load8(a2, a3 | 0x500000000, v22, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::sub32(a2, v22, v8, v22, v23, v24, v25, v26);
      v16 = (v11 - v21);
      v17 = a1;
      v18 = a2;
      v19 = 8;
      v20 = v22;
      goto LABEL_4;
    }
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x197B6F8E0);
  }
  if (!*(_BYTE *)(a2 + 212))
    goto LABEL_7;
  *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
  JSC::MacroAssemblerARM64::load8(a2, a3 | 0x500000000, *(char *)(a2 + 304), a4, a5, a6, a7, a8);
  v16 = v8;
  v17 = a1;
  v18 = a2;
  v19 = 1;
  v20 = 17;
LABEL_4:
  JSC::MacroAssemblerARM64::branch32(v18, v19, v20, v16, v12, v13, v14, v15, v17);
}

void JSC::DFG::SpeculativeJIT::arrayify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned __int8 v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  WTF *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  _DWORD *v33;
  uint64_t *v34;
  int v35;
  char *v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  int v40;
  _BYTE *v41;
  WTF *v42;
  WTF *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  char v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  WTF *v99;
  WTF *v100;
  unint64_t v101;
  char *v102;
  WTF *v103;
  int v105;
  char v106;
  char v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  WTF *v111;
  uint64_t v112;
  _BYTE v113[24];
  uint64_t v114;
  char v115;
  WTF *v116;
  unsigned int v117;
  unsigned int v118;
  _BYTE v119[32];

  v8 = a4;
  v9 = a3;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v114, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
  v18 = v115;
  v107 = v115;
  if (*(_WORD *)(a2 + 18) == 146)
  {
    v19 = 0;
    v111 = (WTF *)v113;
    v112 = 2;
    v20 = 255;
    goto LABEL_3;
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v116, (JSC::DFG::SpeculativeJIT *)a1, v12, v13, v14, v15, v16, v17);
  v19 = v116;
  v20 = v117;
  v81 = *(unsigned __int16 *)(a2 + 18);
  v111 = (WTF *)v113;
  v112 = 2;
  if (v81 == 146)
  {
LABEL_3:
    if (*(_BYTE *)(a1 + 212))
    {
      v21 = (*(_QWORD *)(a2 + 72) >> 4);
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load32(a1, v9, *(char *)(a1 + 304), v13, v14, v15, v16, v17);
      JSC::MacroAssemblerARM64::branch32(a1, 1, 17, v21, v22, v23, v24, v25, (uint64_t)&v109);
      v31 = v109;
      if (v109 != -1)
      {
        v32 = HIDWORD(v112);
        if (HIDWORD(v112) == (_DWORD)v112)
        {
          v33 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v111, (void *)(HIDWORD(v112) + 1), (unint64_t)&v109, v26, v27, v28, v29, v30);
          v35 = *v33;
          v34 = (uint64_t *)(v33 + 1);
          v31 = v35;
          v32 = HIDWORD(v112);
        }
        else
        {
          v34 = &v110;
        }
        v36 = (char *)v111 + 12 * v32;
        *(_DWORD *)v36 = v31;
        *(_QWORD *)(v36 + 4) = *v34;
        ++HIDWORD(v112);
      }
      goto LABEL_9;
    }
LABEL_82:
    __break(0xC471u);
    JUMPOUT(0x197B6FF0CLL);
  }
  JSC::MacroAssemblerARM64::load8(a1, v9 | 0x400000000, v18, v13, v14, v15, v16, v17);
  v106 = v8;
  if (*(_WORD *)(a2 + 18) == 146)
    v86 = *(_DWORD *)(a2 + 80);
  else
    v86 = *(_DWORD *)(a2 + 72);
  JSC::DFG::SpeculativeJIT::jumpSlowForUnwantedArrayMode((uint64_t)&v116, a1, v18, v86, v82, v83, v84, v85);
  v94 = v116;
  v95 = v118;
  if (v118)
  {
    v96 = HIDWORD(v112) + (unint64_t)v118;
    if (v96 > v112)
    {
      v97 = v112 + ((unint64_t)v112 >> 2);
      if (v97 >= 0x10)
        v98 = v97 + 1;
      else
        v98 = 16;
      if (v98 <= v96)
        v98 = HIDWORD(v112) + (unint64_t)v118;
      v99 = v111;
      if (v98 < 3)
      {
        v111 = (WTF *)v113;
        LODWORD(v112) = 2;
      }
      else
      {
        if (v98 >= 0x15555556)
          goto LABEL_82;
        v105 = 12 * v98;
        v100 = (WTF *)WTF::fastMalloc((WTF *)(12 * v98));
        v99 = v111;
        LODWORD(v112) = (v105 & 0xFFFFFFFC) / 0xC;
        v111 = v100;
        v96 = HIDWORD(v112) + v95;
      }
      if (v113 != (_BYTE *)v99 && v99)
      {
        v101 = v96;
        if (v111 == v99)
        {
          v111 = 0;
          LODWORD(v112) = 0;
        }
        WTF::fastFree((unint64_t)v99, v87, v88, v89, v90, v91, v92, v93);
        v96 = v101;
      }
    }
    if (v96 < HIDWORD(v112))
    {
      __break(0xC471u);
      JUMPOUT(0x197B6FF24);
    }
    v102 = (char *)v111 + 12 * HIDWORD(v112);
    v103 = (WTF *)((char *)v94 + 12 * v95);
    do
    {
      *(_DWORD *)v102 = *(_DWORD *)v94;
      *(_QWORD *)(v102 + 4) = *(_QWORD *)((char *)v94 + 4);
      v94 = (WTF *)((char *)v94 + 12);
      v102 += 12;
    }
    while (v94 != v103);
    HIDWORD(v112) = v96;
    v94 = v116;
  }
  v8 = v106;
  if (v119 != (_BYTE *)v94 && v94 != 0)
  {
    v116 = 0;
    v117 = 0;
    WTF::fastFree((unint64_t)v94, v87, v88, v89, v90, v91, v92, v93);
  }
LABEL_9:
  v37 = WTF::fastMalloc((WTF *)0xA8);
  v38 = HIDWORD(v112);
  v116 = (WTF *)v119;
  v117 = 2;
  v118 = HIDWORD(v112);
  if (HIDWORD(v112) < 3)
  {
    v41 = v119;
  }
  else
  {
    if (HIDWORD(v112) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197B6FF1CLL);
    }
    v39 = v8;
    v40 = 12 * HIDWORD(v112);
    v41 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v112)));
    v117 = (v40 & 0xFFFFFFFC) / 0xC;
    v116 = (WTF *)v41;
    v38 = HIDWORD(v112);
    v8 = v39;
  }
  if (v38)
  {
    v42 = v111;
    v43 = (WTF *)((char *)v111 + 12 * v38);
    do
    {
      *(_DWORD *)v41 = *(_DWORD *)v42;
      *(_QWORD *)(v41 + 4) = *(_QWORD *)((char *)v42 + 4);
      v42 = (WTF *)((char *)v42 + 12);
      v41 += 12;
    }
    while (v42 != v43);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v37, (uint64_t *)&v116, (_DWORD *)a1);
  v51 = v116;
  if (v119 != (_BYTE *)v116 && v116 != 0)
  {
    v116 = 0;
    v117 = 0;
    WTF::fastFree((unint64_t)v51, v44, v45, v46, v47, v48, v49, v50);
  }
  *(_QWORD *)v37 = off_1E35729A0;
  v53 = *(unsigned __int16 *)(a2 + 18);
  *(_WORD *)(v37 + 92) = v53;
  if (v53 == 146)
    v54 = *(_QWORD *)(a2 + 72);
  else
    v54 = 0;
  *(_QWORD *)(v37 + 96) = v54;
  if (*(_WORD *)(a2 + 18) == 146)
    v55 = *(_DWORD *)(a2 + 80);
  else
    v55 = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(v37 + 120) = v37 + 136;
  *(_DWORD *)(v37 + 104) = v55;
  *(_BYTE *)(v37 + 108) = v9;
  *(_BYTE *)(v37 + 109) = v8;
  *(_BYTE *)(v37 + 110) = v107;
  *(_BYTE *)(v37 + 111) = v20;
  *(_QWORD *)(v37 + 112) = -1;
  *(_QWORD *)(v37 + 128) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, 0, v37 + 120, 0xFFFFFFFFLL, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v49, v50);
  if (*(unsigned __int8 *)(v37 + 109) != 255 && *(unsigned __int8 *)(v37 + 104) - 7 <= 2)
    *(_DWORD *)(v37 + 112) = JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0x16uLL, (JSC::DFG::Node *)0xFF80000000, v56, v57, v58, v59, v60);
  *(_DWORD *)(v37 + 116) = JSC::DFG::SpeculativeJIT::speculationCheck(a1, 7uLL, (JSC::DFG::Node *)(((unint64_t)*(unsigned __int8 *)(v37 + 108) << 32) | 0x80000000), v56, v57, v58, v59, v60);
  v108 = v37;
  v66 = (_QWORD *)(a1 + 5656);
  v67 = *(unsigned int *)(a1 + 5668);
  if ((_DWORD)v67 == *(_DWORD *)(a1 + 5664))
  {
    v69 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v66, v67 + 1, (unint64_t)&v108);
    v67 = *(unsigned int *)(a1 + 5668);
    v68 = (uint64_t *)(*(_QWORD *)(a1 + 5656) + 8 * v67);
    v37 = *v69;
  }
  else
  {
    v68 = (uint64_t *)(*v66 + 8 * v67);
    v69 = &v108;
  }
  *v69 = 0;
  *v68 = v37;
  *(_DWORD *)(a1 + 5668) = v67 + 1;
  v70 = v108;
  v108 = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  JSC::DFG::SpeculativeJIT::noResult(a1, *(_QWORD *)(a1 + 3976), 0, v61, v62, v63, v64, v65);
  v78 = v111;
  if (v113 != (_BYTE *)v111 && v111)
  {
    v111 = 0;
    LODWORD(v112) = 0;
    WTF::fastFree((unint64_t)v78, v71, v72, v73, v74, v75, v76, v77);
  }
  if (v19 && v20 != 255)
  {
    if ((char)v20 > 15)
      v79 = -1;
    else
      v79 = v20;
    --*((_DWORD *)v19 + 3 * v79 + 1196);
  }
  if (v114)
  {
    v80 = v115;
    if (v115 != -1)
    {
      if (v115 > 15)
        v80 = -1;
      --*(_DWORD *)(v114 + 12 * v80 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::arrayify(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  char v17;
  unint64_t v18;
  char v19;
  _BYTE v20[7];

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_25;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
    goto LABEL_27;
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_25:
    v12 = -1;
  v13 = *((_QWORD *)a2 + 4);
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v18 = *((_QWORD *)a2 + 4);
    v19 = -1;
    v14 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v14 < *((unsigned int *)this + 1001))
    {
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 12))
      {
        v15 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v13, (uint64_t)v20, a4, a5, a6, a7, a8);
        v19 = v15;
      }
      else
      {
        v15 = -1;
      }
      if (v12 == -1)
      {
        v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
        v15 = v19;
      }
      if (v15 == -1)
      {
        v15 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v18, (uint64_t)v20, a4, a5, a6, a7, a8);
        v19 = v15;
      }
      JSC::DFG::SpeculativeJIT::arrayify((uint64_t)this, (uint64_t)a2, v12, v15, a5, a6, a7, a8);
      v16 = v19;
      if (v19 > 15)
        v16 = -1;
      --*((_DWORD *)this + 3 * v16 + 1196);
      goto LABEL_16;
    }
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x197B700F4);
  }
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::arrayify((uint64_t)this, (uint64_t)a2, v12, 0xFFFFFFFFLL, a5, a6, a7, a8);
LABEL_16:
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v12 > 15)
      v17 = -1;
    else
      v17 = v12;
    --*((_DWORD *)this + 3 * v17 + 1196);
  }
}

uint64_t JSC::DFG::SpeculateInt32Operand::SpeculateInt32Operand(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_BYTE *)(result + 16) = -1;
  v8 = ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v8 >= *(unsigned int *)(a2 + 4004))
  {
    __break(0xC471u);
  }
  else
  {
    v9 = result;
    if (*(_BYTE *)(*(_QWORD *)(a2 + 3992) + 24 * (int)v8 + 12))
      *(_BYTE *)(result + 16) = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)a2, a3, result + 17, a4, a5, a6, a7, a8);
    return v9;
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::fillStorage(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  int v15;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  _BYTE v39[14];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  v9 = ~(_DWORD)v8;
  if (v9 >= *(unsigned int *)(a1 + 4004))
    goto LABEL_20;
  v11 = *(_QWORD *)(a1 + 3992);
  v12 = v11 + 24 * (int)v9;
  v15 = *(unsigned __int8 *)(v12 + 12);
  v14 = (_BYTE *)(v12 + 12);
  v13 = v15;
  if (v15 == 7)
  {
    v17 = *(char *)(v11 + 24 * (int)v9 + 17);
    if ((int)v17 > 15)
      v18 = -1;
    else
      v18 = *(char *)(v11 + 24 * (int)v9 + 17);
    ++*(_DWORD *)(a1 + 12 * v18 + 4784);
    return v17;
  }
  if (v13 || *(_BYTE *)(v11 + 24 * (int)v9 + 13) != 7)
    return JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
  v19 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = v19;
  if ((int)v19 > 15)
    v25 = -1;
  else
    v25 = v19;
  v26 = a1 + 12 * v25;
  *(_DWORD *)(v26 + 4776) = v8;
  *(_DWORD *)(v26 + 4780) = 2;
  JSC::MacroAssemblerARM64::load64(a1, (v8 << 35) | 0x1D, v19, v20, v21, v22, v23, v24);
  *v14 = 7;
  v32 = v11 + 24 * (int)v9;
  *(_BYTE *)(v32 + 17) = v17;
  if (*(_BYTE *)(v32 + 15))
  {
    if (*(_DWORD *)(*(_QWORD *)(v11 + 24 * (int)v9) + 20) < 0xFFFFFFFE)
    {
      v33 = (_QWORD *)(a1 + 5632);
      *(_DWORD *)v39 = *(_DWORD *)(*(_QWORD *)(v11 + 24 * (int)v9) + 20);
      *(_QWORD *)&v39[4] = v17 | 0x3FFFFF00;
      *(_WORD *)&v39[12] = 1796;
      v34 = *(unsigned int *)(a1 + 5644);
      if ((_DWORD)v34 == *(_DWORD *)(a1 + 5640))
      {
        v38 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v33, v34 + 1, (unint64_t)v39, v27, v28, v29, v30, v31);
        v35 = (_QWORD *)(*(_QWORD *)(a1 + 5632) + 14 * *(unsigned int *)(a1 + 5644));
        v36 = *v38;
        v37 = *(uint64_t *)((char *)v38 + 6);
      }
      else
      {
        v35 = (_QWORD *)(*v33 + 14 * v34);
        v36 = *(_QWORD *)v39;
        v37 = *(_QWORD *)&v39[6];
      }
      *(_QWORD *)((char *)v35 + 6) = v37;
      *v35 = v36;
      ++*(_DWORD *)(a1 + 5644);
      return v17;
    }
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x197B703B4);
  }
  return v17;
}

uint64_t JSC::DFG::SpeculativeJIT::allocate(JSC::DFG::SpeculativeJIT *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char *v30;

  v8 = (char *)this + 4776;
  if (*((_DWORD *)this + 1196))
  {
    v9 = -1;
    v10 = 16;
  }
  else
  {
    v9 = *((_DWORD *)this + 1195);
    if (v9 == -1)
    {
      v10 = 0;
      v11 = (char *)this + 4784;
LABEL_4:
      v12 = 12 * v10;
      v13 = *(_DWORD *)&v8[v12];
      *(_QWORD *)&v8[v12] = 0xFFFFFFFF3FFFFFFFLL;
      goto LABEL_5;
    }
    v10 = 0;
  }
  if (!*((_DWORD *)this + 1199))
  {
    v15 = *((_DWORD *)this + 1198);
    if (v15 == -1)
    {
      v11 = (char *)this + 4796;
      v10 = 1;
      goto LABEL_4;
    }
    if (v15 < v9)
      v10 = 1;
    else
      v10 = v10;
    if (v15 < v9)
      v9 = *((_DWORD *)this + 1198);
  }
  if (!*((_DWORD *)this + 1202))
  {
    v16 = *((_DWORD *)this + 1201);
    if (v16 == -1)
    {
      v11 = (char *)this + 4808;
      v10 = 2;
      goto LABEL_4;
    }
    if (v16 >= v9)
      v10 = v10;
    else
      v10 = 2;
    if (v16 < v9)
      v9 = *((_DWORD *)this + 1201);
  }
  if (!*((_DWORD *)this + 1205))
  {
    v17 = *((_DWORD *)this + 1204);
    if (v17 == -1)
    {
      v11 = (char *)this + 4820;
      v10 = 3;
      goto LABEL_4;
    }
    if (v17 >= v9)
      v10 = v10;
    else
      v10 = 3;
    if (v17 < v9)
      v9 = *((_DWORD *)this + 1204);
  }
  if (!*((_DWORD *)this + 1208))
  {
    v18 = *((_DWORD *)this + 1207);
    if (v18 == -1)
    {
      v11 = (char *)this + 4832;
      v10 = 4;
      goto LABEL_4;
    }
    if (v18 >= v9)
      v10 = v10;
    else
      v10 = 4;
    if (v18 < v9)
      v9 = *((_DWORD *)this + 1207);
  }
  if (!*((_DWORD *)this + 1211))
  {
    v19 = *((_DWORD *)this + 1210);
    if (v19 == -1)
    {
      v11 = (char *)this + 4844;
      v10 = 5;
      goto LABEL_4;
    }
    if (v19 >= v9)
      v10 = v10;
    else
      v10 = 5;
    if (v19 < v9)
      v9 = *((_DWORD *)this + 1210);
  }
  if (!*((_DWORD *)this + 1214))
  {
    v20 = *((_DWORD *)this + 1213);
    if (v20 == -1)
    {
      v11 = (char *)this + 4856;
      v10 = 6;
      goto LABEL_4;
    }
    if (v20 >= v9)
      v10 = v10;
    else
      v10 = 6;
    if (v20 < v9)
      v9 = *((_DWORD *)this + 1213);
  }
  if (!*((_DWORD *)this + 1217))
  {
    v21 = *((_DWORD *)this + 1216);
    if (v21 == -1)
    {
      v11 = (char *)this + 4868;
      v10 = 7;
      goto LABEL_4;
    }
    if (v21 >= v9)
      v10 = v10;
    else
      v10 = 7;
    if (v21 < v9)
      v9 = *((_DWORD *)this + 1216);
  }
  if (!*((_DWORD *)this + 1220))
  {
    v22 = *((_DWORD *)this + 1219);
    if (v22 == -1)
    {
      v11 = (char *)this + 4880;
      v10 = 8;
      goto LABEL_4;
    }
    if (v22 >= v9)
      v10 = v10;
    else
      v10 = 8;
    if (v22 < v9)
      v9 = *((_DWORD *)this + 1219);
  }
  if (!*((_DWORD *)this + 1223))
  {
    v23 = *((_DWORD *)this + 1222);
    if (v23 == -1)
    {
      v11 = (char *)this + 4892;
      v10 = 9;
      goto LABEL_4;
    }
    if (v23 >= v9)
      v10 = v10;
    else
      v10 = 9;
    if (v23 < v9)
      v9 = *((_DWORD *)this + 1222);
  }
  if (!*((_DWORD *)this + 1226))
  {
    v24 = *((_DWORD *)this + 1225);
    if (v24 == -1)
    {
      v11 = (char *)this + 4904;
      v10 = 10;
      goto LABEL_4;
    }
    if (v24 >= v9)
      v10 = v10;
    else
      v10 = 10;
    if (v24 < v9)
      v9 = *((_DWORD *)this + 1225);
  }
  if (!*((_DWORD *)this + 1229))
  {
    v25 = *((_DWORD *)this + 1228);
    if (v25 == -1)
    {
      v11 = (char *)this + 4916;
      v10 = 11;
      goto LABEL_4;
    }
    if (v25 >= v9)
      v10 = v10;
    else
      v10 = 11;
    if (v25 < v9)
      v9 = *((_DWORD *)this + 1228);
  }
  if (!*((_DWORD *)this + 1232))
  {
    v26 = *((_DWORD *)this + 1231);
    if (v26 == -1)
    {
      v11 = (char *)this + 4928;
      v10 = 12;
      goto LABEL_4;
    }
    if (v26 >= v9)
      v10 = v10;
    else
      v10 = 12;
    if (v26 < v9)
      v9 = *((_DWORD *)this + 1231);
  }
  if (!*((_DWORD *)this + 1235))
  {
    v27 = *((_DWORD *)this + 1234);
    if (v27 == -1)
    {
      v11 = (char *)this + 4940;
      v10 = 13;
      goto LABEL_4;
    }
    if (v27 >= v9)
      v10 = v10;
    else
      v10 = 13;
    if (v27 < v9)
      v9 = *((_DWORD *)this + 1234);
  }
  if (!*((_DWORD *)this + 1238))
  {
    v28 = *((_DWORD *)this + 1237);
    if (v28 == -1)
    {
      v11 = (char *)this + 4952;
      v10 = 14;
      goto LABEL_4;
    }
    if (v28 >= v9)
      v10 = v10;
    else
      v10 = 14;
    if (v28 < v9)
      v9 = *((_DWORD *)this + 1237);
  }
  if (!*((_DWORD *)this + 1241))
  {
    v29 = *((_DWORD *)this + 1240);
    if (v29 == -1)
    {
      v11 = (char *)this + 4964;
      v10 = 15;
      goto LABEL_4;
    }
    if (v29 >= v9)
      v10 = v10;
    else
      v10 = 15;
  }
  v30 = &v8[12 * v10];
  v13 = *(_DWORD *)v30;
  *(_QWORD *)v30 = 0xFFFFFFFF3FFFFFFFLL;
  v11 = v30 + 8;
LABEL_5:
  *(_DWORD *)v11 = 1;
  if (v13 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  return v10;
}

uint64_t *JSC::DFG::SpeculativeJIT::useChildren(uint64_t *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[14];
  uint64_t v42;

  v9 = (uint64_t)this;
  v42 = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)a2 + 3);
  if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
  {
    v37 = *((_QWORD *)a2 + 4);
    if ((int)v37 + (int)v10 <= v10)
      return this;
    v38 = *((_QWORD *)a2 + 3);
    while (1)
    {
      v39 = *(_QWORD *)(v9 + 3960);
      if (v38 >= *(unsigned int *)(v39 + 164))
        break;
      v40 = *(_QWORD *)(*(_QWORD *)(v39 + 152) + 8 * v38);
      if ((v40 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        this = (uint64_t *)JSC::DFG::SpeculativeJIT::use(v9, v40, a3, a4, a5, a6, a7, a8);
        v10 = *((_QWORD *)a2 + 3);
        v37 = *((_QWORD *)a2 + 4);
      }
      if (++v38 >= (v10 + v37))
        return this;
    }
    goto LABEL_50;
  }
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if (!v11)
    return this;
  if ((*(_BYTE *)(v11 + 56) & 7) == 0)
    goto LABEL_6;
  v12 = ~*(_DWORD *)(v11 + 48);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197B70B84);
  }
  v13 = this[499];
  v14 = (_DWORD *)(v13 + 24 * (int)v12);
  v15 = v14[2] - 1;
  v14[2] = v15;
  if (v15)
    goto LABEL_6;
  if (*(_BYTE *)(v13 + 24 * (int)v12 + 15))
  {
    v16 = *(_DWORD *)(*(_QWORD *)v14 + 20);
    if (v16 < 0xFFFFFFFE)
    {
      this += 704;
      *(_QWORD *)&v41[4] = 0x3FFFFFFFLL;
      *(_DWORD *)v41 = v16;
      *(_WORD *)&v41[12] = 6;
      v17 = *(unsigned int *)(v9 + 5644);
      if ((_DWORD)v17 == *(_DWORD *)(v9 + 5640))
      {
        this = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v17 + 1, (unint64_t)v41, a4, a5, a6, a7, a8);
        v18 = (_QWORD *)(*(_QWORD *)(v9 + 5632) + 14 * *(unsigned int *)(v9 + 5644));
        v19 = *this;
        v20 = *(uint64_t *)((char *)this + 6);
      }
      else
      {
        v18 = (_QWORD *)(*this + 14 * v17);
        v19 = *(_QWORD *)v41;
        v20 = *(_QWORD *)&v41[6];
      }
      *(_QWORD *)((char *)v18 + 6) = v20;
      *v18 = v19;
      ++*(_DWORD *)(v9 + 5644);
      goto LABEL_13;
    }
LABEL_50:
    __break(0xC471u);
    JUMPOUT(0x197B70B58);
  }
LABEL_13:
  if (*(_BYTE *)(v13 + 24 * (int)v12 + 12))
  {
    if (*(_BYTE *)(v13 + 24 * (int)v12 + 12) == 4)
    {
      v22 = v9
          + 12
          * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[*(char *)(v13
                                                                                               + 24 * (int)v12
                                                                                               + 17)];
      *(_DWORD *)(v22 + 4968) = 0x3FFFFFFF;
      v23 = 4972;
    }
    else
    {
      v21 = *(char *)(v13 + 24 * (int)v12 + 17);
      if (v21 > 15)
        v21 = -1;
      v22 = v9 + 12 * v21;
      *(_DWORD *)(v22 + 4776) = 0x3FFFFFFF;
      v23 = 4780;
    }
    *(_DWORD *)(v22 + v23) = -1;
  }
LABEL_6:
  if ((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) != 0)
    {
      v24 = ~*(_DWORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v24 >= *(unsigned int *)(v9 + 4004))
      {
        __break(0xC471u);
        JUMPOUT(0x197B70B8CLL);
      }
      v25 = *(_QWORD *)(v9 + 3992);
      v26 = (_DWORD *)(v25 + 24 * (int)v24);
      v27 = v26[2] - 1;
      v26[2] = v27;
      if (!v27)
      {
        if (*(_BYTE *)(v25 + 24 * (int)v24 + 15))
        {
          v29 = *(_DWORD *)(*(_QWORD *)v26 + 20);
          if (v29 >= 0xFFFFFFFE)
          {
            __break(0xC471u);
            JUMPOUT(0x197B70B78);
          }
          this = (uint64_t *)(v9 + 5632);
          *(_QWORD *)&v41[4] = 0x3FFFFFFFLL;
          *(_DWORD *)v41 = v29;
          *(_WORD *)&v41[12] = 6;
          v30 = *(unsigned int *)(v9 + 5644);
          if ((_DWORD)v30 == *(_DWORD *)(v9 + 5640))
          {
            this = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v30 + 1, (unint64_t)v41, a4, a5, a6, a7, a8);
            v31 = (_QWORD *)(*(_QWORD *)(v9 + 5632) + 14 * *(unsigned int *)(v9 + 5644));
            v32 = *this;
            v33 = *(uint64_t *)((char *)this + 6);
          }
          else
          {
            v31 = (_QWORD *)(*this + 14 * v30);
            v32 = *(_QWORD *)v41;
            v33 = *(_QWORD *)&v41[6];
          }
          *(_QWORD *)((char *)v31 + 6) = v33;
          *v31 = v32;
          ++*(_DWORD *)(v9 + 5644);
        }
        if (*(_BYTE *)(v25 + 24 * (int)v24 + 12))
        {
          if (*(_BYTE *)(v25 + 24 * (int)v24 + 12) == 4)
          {
            v35 = v9
                + 12
                * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[*(char *)(v25 + 24 * (int)v24 + 17)];
            *(_DWORD *)(v35 + 4968) = 0x3FFFFFFF;
            v36 = 4972;
          }
          else
          {
            v34 = *(char *)(v25 + 24 * (int)v24 + 17);
            if (v34 > 15)
              v34 = -1;
            v35 = v9 + 12 * v34;
            *(_DWORD *)(v35 + 4776) = 0x3FFFFFFF;
            v36 = 4780;
          }
          *(_DWORD *)(v35 + v36) = -1;
        }
      }
    }
    v28 = *((_QWORD *)a2 + 5);
    if ((v28 & 0xFF00FFFFFFFFFFFFLL) != 0)
      return (uint64_t *)JSC::DFG::SpeculativeJIT::use(v9, v28, a3, a4, a5, a6, a7, a8);
  }
  return this;
}

uint64_t JSC::DFG::SpeculativeJIT::use(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[14];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) == 0)
    return result;
  v8 = result;
  v9 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v9 >= *(unsigned int *)(result + 4004))
    goto LABEL_18;
  v10 = *(_QWORD *)(result + 3992);
  v11 = (_DWORD *)(v10 + 24 * (int)v9);
  v12 = v11[2] - 1;
  v11[2] = v12;
  if (v12)
    return result;
  if (!*(_BYTE *)(v10 + 24 * (int)v9 + 15))
    goto LABEL_10;
  v13 = *(_DWORD *)(*(_QWORD *)v11 + 20);
  if (v13 >= 0xFFFFFFFE)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x197B70D80);
  }
  result += 5632;
  *(_QWORD *)&v21[4] = 0x3FFFFFFFLL;
  *(_DWORD *)v21 = v13;
  *(_WORD *)&v21[12] = 6;
  v14 = *(unsigned int *)(v8 + 5644);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 5640))
  {
    result = WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v14 + 1, (unint64_t)v21, a4, a5, a6, a7, a8);
    v15 = (_QWORD *)(*(_QWORD *)(v8 + 5632) + 14 * *(unsigned int *)(v8 + 5644));
    v16 = *(_QWORD *)result;
    v17 = *(_QWORD *)(result + 6);
  }
  else
  {
    v15 = (_QWORD *)(*(_QWORD *)result + 14 * v14);
    v16 = *(_QWORD *)v21;
    v17 = *(_QWORD *)&v21[6];
  }
  *(_QWORD *)((char *)v15 + 6) = v17;
  *v15 = v16;
  ++*(_DWORD *)(v8 + 5644);
LABEL_10:
  if (*(_BYTE *)(v10 + 24 * (int)v9 + 12))
  {
    if (*(_BYTE *)(v10 + 24 * (int)v9 + 12) == 4)
    {
      v19 = v8
          + 12
          * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[*(char *)(v10
                                                                                               + 24 * (int)v9
                                                                                               + 17)];
      *(_DWORD *)(v19 + 4968) = 0x3FFFFFFF;
      v20 = 4972;
    }
    else
    {
      v18 = *(char *)(v10 + 24 * (int)v9 + 17);
      if (v18 > 15)
        v18 = -1;
      v19 = v8 + 12 * v18;
      *(_DWORD *)(v19 + 4776) = 0x3FFFFFFF;
      v20 = 4780;
    }
    *(_DWORD *)(v19 + v20) = -1;
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileGetById(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  _DWORD *v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  char v47;
  char v48;
  char v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char v70;
  _DWORD *v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  char v108;
  char v109;
  unint64_t v110;
  _BYTE v111[12];
  uint64_t v112;
  char v113;
  char v114;
  uint64_t v115;
  char v116;
  char v117;
  _BYTE v118[12];
  uint64_t v119;

  v8 = a3;
  v11 = *(_QWORD *)(a2 + 24);
  v12 = (v11 >> 50) & 0x3F;
  if ((_DWORD)v12 == 8)
  {
    LOBYTE(v115) = 0;
    v117 = 0;
    LOBYTE(v112) = 0;
    v114 = 0;
    v13 = v11 & 0xFF00FFFFFFFFFFFFLL;
    if ((v11 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_77;
    v14 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v14 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      JUMPOUT(0x197B715C8);
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v14 + 12))
      v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v11, a3, a4, a5, a6, a7, a8);
    else
LABEL_77:
      v15 = -1;
    v16 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v16 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
    }
    else
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v16 + 8) == 1)
      {
        if (v15 == -1)
          v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v11, a3, a4, a5, a6, a7, a8);
        if (v15 > 15)
          v42 = -1;
        else
          v42 = v15;
        ++*(_DWORD *)(a1 + 12 * v42 + 4784);
        v17 = v15;
      }
      else
      {
        v17 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)a1, a2, a3, a4, a5, a6, a7, a8);
      }
      v18 = -1;
      v19 = -1;
      if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 3960) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
      {
LABEL_10:
        v107 = v19;
        v109 = v18;
        if (v15 == -1)
          v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v11, a3, a4, a5, a6, a7, a8);
        JSC::DFG::SpeculativeJIT::use((uint64_t *)a1, (JSC::DFG::Node *)(v11 & 0xFF00FFFFFFFFFFFFLL), a3, a4, a5, a6, a7, a8);
        v20 = *(_QWORD *)a2;
        if ((*(_QWORD *)a2 & 1) != 0)
        {
          v75 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
          if ((v20 & 2) != 0
            || (v76 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v76 == 0x3FFFFFFF)
            || (_DWORD)v76 == -1)
          {
            v77 = 2;
          }
          else if (v76 >> 28)
          {
            v100 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v100 = v75;
            *(_DWORD *)(v100 + 8) = v76;
            v77 = 1;
            v75 = v100;
          }
          else
          {
            v77 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
            v75 = v76 << 36;
          }
          v20 = v75 | v77;
          v22 = JSC::DFG::Node::cacheableIdentifier((JSC::DFG::Node *)a2);
          if ((v20 & 1) != 0)
          {
            v78 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
            if ((v20 & 2) != 0
              || ((v79 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v79 != 0x3FFFFFFF)
                ? (v80 = (_DWORD)v79 == -1)
                : (v80 = 1),
                  v80))
            {
              v81 = 2;
            }
            else if (v79 >> 28)
            {
              v101 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v101 = v78;
              *(_DWORD *)(v101 + 8) = v79;
              v81 = 1;
              v78 = v101;
            }
            else
            {
              v81 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
              v78 = v79 << 36;
            }
            v23 = 0;
            v24 = v78 | v81;
LABEL_15:
            *(_QWORD *)v111 = v24;
            *(_DWORD *)v118 = -1;
            *(_QWORD *)&v118[4] = 0xFF000F4100000000;
            JSC::DFG::SpeculativeJIT::cachedGetById(a1, v21, (JSC::CodeOrigin *)v111, v15, v17, v107, v109, v22, (int *)v118, 0, v8);
            if ((v111[0] & 1) != 0 && (*(_QWORD *)v111 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(*(_QWORD *)v111 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
            if ((v23 & 1) == 0 && (v20 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v20 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
            v32 = a1 + 4776;
            v33 = *(_DWORD *)(a2 + 48);
            if (v17 > 15)
              v34 = -1;
            else
              v34 = v17;
            v35 = (_DWORD *)(v32 + 12 * v34);
            *v35 = v33;
            v35[1] = 4;
            v36 = ~v33;
            if (v36 < *(unsigned int *)(a1 + 4004))
            {
              v37 = *(_QWORD *)(a1 + 3992) + 24 * (int)v36;
              v38 = *(_DWORD *)(a2 + 52);
              *(_QWORD *)v37 = a2;
              *(_DWORD *)(v37 + 8) = v38;
              *(_BYTE *)(v37 + 17) = v17;
              *(_DWORD *)(v37 + 12) = 16;
              *(_BYTE *)(v37 + 16) = 0;
              if (v17 != -1)
                --*(_DWORD *)(v32 + 12 * v34 + 8);
              if (v13)
              {
                if (v15 > 15)
                  v39 = -1;
                else
                  v39 = v15;
LABEL_27:
                --*(_DWORD *)(v32 + 12 * v39 + 8);
                goto LABEL_28;
              }
              goto LABEL_28;
            }
LABEL_133:
            __break(0xC471u);
            JUMPOUT(0x197B715D8);
          }
        }
        else
        {
          v22 = JSC::DFG::Node::cacheableIdentifier((JSC::DFG::Node *)a2);
        }
        v23 = 1;
        v24 = v20;
        goto LABEL_15;
      }
      *(_QWORD *)v118 = a1;
      std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v115, (JSC::DFG::SpeculativeJIT **)v118, a3, a4, a5, a6, a7, a8);
      *(_QWORD *)v118 = a1;
      std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v112, (JSC::DFG::SpeculativeJIT **)v118, v88, v89, v90, v91, v92, v93);
      if (v117 && v114)
      {
        v19 = v116;
        v18 = v113;
        goto LABEL_10;
      }
    }
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }
  if ((_DWORD)v12)
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), (JSC::DFG::Node *)a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x542, "void JSC::DFG::SpeculativeJIT::compileGetById(Node *, AccessType)", "Bad use kind");
    __break(0xC471u);
    goto LABEL_137;
  }
  LOBYTE(v115) = 0;
  v117 = 0;
  LOBYTE(v112) = 0;
  v114 = 0;
  if ((v11 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_78;
  v43 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v43 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B715E0);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v43 + 12))
    v44 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, v11, a3, a4, a5, a6, a7, a8);
  else
LABEL_78:
    v44 = -1;
  v45 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v45 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B715E8);
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v45 + 8) == 1)
  {
    if (v44 == -1)
      v44 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, v11, a3, a4, a5, a6, a7, a8);
    if (v44 > 15)
      v46 = -1;
    else
      v46 = v44;
    ++*(_DWORD *)(a1 + 12 * v46 + 4784);
    v47 = v44;
  }
  else
  {
    v47 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
  v48 = -1;
  v49 = -1;
  if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 3960) + 24) + 16) - 1) & 0xFFFFFFFD) == 0)
  {
    *(_QWORD *)v118 = a1;
    std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v115, (JSC::DFG::SpeculativeJIT **)v118, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)v118 = a1;
    std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v112, (JSC::DFG::SpeculativeJIT **)v118, v94, v95, v96, v97, v98, v99);
    if (!v117 || !v114)
      goto LABEL_132;
    v49 = v116;
    v48 = v113;
  }
  v106 = v49;
  v108 = v48;
  if (v44 == -1)
    v44 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, v11, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::use((uint64_t *)a1, (JSC::DFG::Node *)(v11 & 0xFF00FFFFFFFFFFFFLL), a3, a4, a5, a6, a7, a8);
  v50 = 1;
  JSC::AssemblyHelpers::branchIfNotCell(a1, v44, 1, v51, v52, v53, v54, v55, (uint64_t)v111);
  v56 = *(_QWORD *)a2;
  v110 = v11 & 0xFF00FFFFFFFFFFFFLL;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v82 = *(_QWORD *)(v56 & 0xFFFFFFFF8);
    if ((v56 & 2) != 0
      || (v83 = *(unsigned int *)((v56 & 0xFFFFFFFF8) + 8), (_DWORD)v83 == 0x3FFFFFFF)
      || (_DWORD)v83 == -1)
    {
      v84 = 2;
    }
    else if (v83 >> 28)
    {
      v102 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v102 = v82;
      *(_DWORD *)(v102 + 8) = v83;
      v84 = 1;
      v82 = v102;
    }
    else
    {
      v84 = *(_QWORD *)(v56 & 0xFFFFFFFF8);
      v82 = v83 << 36;
    }
    v56 = v82 | v84;
    v50 = ((v82 | v84) & 1) == 0;
  }
  v58 = JSC::DFG::Node::cacheableIdentifier((JSC::DFG::Node *)a2);
  v59 = *(_DWORD *)v111;
  v60 = *(_QWORD *)&v111[4];
  v61 = v56;
  if (!v50)
  {
    v85 = *(_QWORD *)(v56 & 0xFFFFFFFF8);
    if ((v56 & 2) != 0 || (v86 = *(_DWORD *)((v56 & 0xFFFFFFFF8) + 8), v86 == 0x3FFFFFFF) || v86 == -1)
    {
      v87 = 2;
    }
    else
    {
      v104 = *(unsigned int *)((v56 & 0xFFFFFFFF8) + 8);
      v105 = *(_QWORD *)(v56 & 0xFFFFFFFF8);
      if (v86 >> 28)
      {
        v103 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v103 = v105;
        *(_DWORD *)(v103 + 8) = v104;
        v87 = 1;
        v85 = v103;
      }
      else
      {
        v87 = *(_QWORD *)(v56 & 0xFFFFFFFF8);
        v85 = v104 << 36;
      }
    }
    v61 = v85 | v87;
  }
  v119 = v61;
  *(_DWORD *)v118 = v59;
  *(_QWORD *)&v118[4] = v60;
  JSC::DFG::SpeculativeJIT::cachedGetById(a1, v57, (JSC::CodeOrigin *)&v119, v44, v47, v106, v108, v58, (int *)v118, 0, v8);
  if ((v119 & 1) != 0 && (v119 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v119 & 0xFFFFFFFF8, v62, v63, v64, v65, v66, v67, v68);
  if (!v50 && (v56 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v56 & 0xFFFFFFFF8, v62, v63, v64, v65, v66, v67, v68);
  v32 = a1 + 4776;
  v69 = *(_DWORD *)(a2 + 48);
  if (v47 > 15)
    v70 = -1;
  else
    v70 = v47;
  v71 = (_DWORD *)(v32 + 12 * v70);
  *v71 = v69;
  v71[1] = 4;
  v72 = ~v69;
  if (v72 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
LABEL_137:
    JUMPOUT(0x197B714D0);
  }
  v73 = *(_QWORD *)(a1 + 3992) + 24 * (int)v72;
  v74 = *(_DWORD *)(a2 + 52);
  *(_QWORD *)v73 = a2;
  *(_DWORD *)(v73 + 8) = v74;
  *(_BYTE *)(v73 + 17) = v47;
  *(_DWORD *)(v73 + 12) = 16;
  *(_BYTE *)(v73 + 16) = 0;
  if (v47 != -1)
    --*(_DWORD *)(v32 + 12 * v70 + 8);
  if (v110)
  {
    if (v44 > 15)
      v39 = -1;
    else
      v39 = v44;
    goto LABEL_27;
  }
LABEL_28:
  if (v114)
  {
    if (v112)
    {
      v40 = v113;
      if (v113 != -1)
      {
        if (v113 > 15)
          v40 = -1;
        --*(_DWORD *)(v112 + 12 * v40 + 4784);
      }
    }
  }
  if (v117)
  {
    if (v115)
    {
      v41 = v116;
      if (v116 != -1)
      {
        if (v116 > 15)
          v41 = -1;
        --*(_DWORD *)(v115 + 12 * v41 + 4784);
      }
    }
  }
}

uint64_t JSC::DFG::Node::cacheableIdentifier(JSC::DFG::Node *this)
{
  int v1;
  char *v2;
  uint64_t result;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;

  v1 = *((unsigned __int16 *)this + 9);
  if ((v1 - 109) < 0xD)
    goto LABEL_2;
  if ((v1 - 255) < 2)
  {
    v2 = (char *)(*((_QWORD *)this + 9) + 8);
    return *(_QWORD *)v2;
  }
  if ((v1 - 335) < 2
    || ((v4 = v1 - 106, v5 = v4 > 0x25, v6 = (1 << v4) & 0x2001000001, !v5) ? (v7 = v6 == 0) : (v7 = 1), !v7))
  {
LABEL_2:
    v2 = (char *)this + 72;
    return *(_QWORD *)v2;
  }
  result = 1190;
  __break(0xC471u);
  return result;
}

uint64_t JSC::DFG::JSValueOperand::JSValueOperand(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;

  v8 = result;
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_BYTE *)(result + 16) = -1;
  if ((a3 & 0xFF00FFFFFFFFFFFFLL) == 0)
    return v8;
  v9 = ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v9 < *(unsigned int *)(a2 + 4004))
  {
    if (*(_BYTE *)(*(_QWORD *)(a2 + 3992) + 24 * (int)v9 + 12))
      *(_BYTE *)(result + 16) = JSC::DFG::SpeculativeJIT::fillJSValue(a2, a3, a3, a4, a5, a6, a7, a8);
    return v8;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::DFG::JSValueRegsTemporary::JSValueRegsTemporary(uint64_t a1, JSC::DFG::SpeculativeJIT *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::DFG::JSValueRegsTemporary::JSValueRegsTemporary(a1, a2, a4, a4, a5, a6, a7, a8);
}

void JSC::AssemblyHelpers::branchIfNotCell(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v11;
  int v12;
  JSC::AssemblerBuffer *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  char v26;
  char v27;
  char v28;
  unsigned int i;
  int v30;
  unsigned int v31;
  unsigned int v32;

  v11 = a2;
  if ((_DWORD)a3 != 1)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197B719ECLL);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    v16 = *(_BYTE *)(a1 + 272) & 0x1F;
    v13 = (JSC::AssemblerBuffer *)(a1 + 56);
    v17 = *(_DWORD *)(a1 + 200);
    if (v17 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v17 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v17) = v16 | 0xD2800040;
    v18 = *(_DWORD *)(a1 + 200);
    v19 = v18 + 4;
    *(_DWORD *)(a1 + 200) = v18 + 4;
    v20 = v16 | 0xF2FFFFC0;
    if ((v18 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v19 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v19) = v20;
    v21 = *(_DWORD *)(a1 + 200);
    v22 = v21 + 4;
    *(_DWORD *)(a1 + 200) = v21 + 4;
    if ((v21 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v22 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = (32 * (v11 & 0x1F)) | 0xEA10001F;
    v15 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v15;
    if (!*(_BYTE *)(a1 + 328))
      goto LABEL_18;
    while ((signed int)v15 < *(_DWORD *)(a1 + 52))
    {
      if (v15 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        v15 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = -721215457;
      v15 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v15;
    }
    goto LABEL_45;
  }
  if (a2 != 28)
  {
    v12 = (32 * (a2 & 0x1F)) | 0xEA1C001F;
    v13 = (JSC::AssemblerBuffer *)(a1 + 56);
    v14 = *(_DWORD *)(a1 + 200);
    if (v14 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v14 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v12;
    v15 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v15;
    if (!*(_BYTE *)(a1 + 328))
      goto LABEL_18;
    while ((signed int)v15 < *(_DWORD *)(a1 + 52))
    {
      if (v15 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        v15 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = -721215457;
      v15 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v15;
    }
LABEL_45:
    *(_DWORD *)(a1 + 208) = 0;
LABEL_18:
    if (v15 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v13, a2, a3, a4, a5, a6, a7, a8);
      v15 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = 1409286145;
    v23 = *(_DWORD *)(a1 + 200);
    v24 = v23 + 4;
    *(_DWORD *)(a1 + 200) = v23 + 4;
    v25 = v23 + 4;
    if ((v23 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v13, a2, a3, a4, a5, a6, a7, a8);
      v25 = *(_DWORD *)(a1 + 200);
    }
    v26 = 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = -721215457;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v27 = -122;
    else
      v27 = -126;
    v28 = -1;
    goto LABEL_26;
  }
  if (*(_BYTE *)(a1 + 328))
  {
    for (i = *(_DWORD *)(a1 + 200); (signed int)i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
    {
      if (i + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        i = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
      i = *(_DWORD *)(a1 + 200) + 4;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  else
  {
    i = *(_DWORD *)(a1 + 200);
  }
  if (i + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    i = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -1258291172;
  v30 = *(_DWORD *)(a1 + 200);
  v24 = v30 + 4;
  *(_DWORD *)(a1 + 200) = v30 + 4;
  v31 = v30 + 8;
  v32 = v30 + 4;
  if (v31 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v32 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v32) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v27 = -121;
  else
    v27 = -125;
  v28 = 28;
  v26 = 1;
LABEL_26:
  *(_DWORD *)a9 = v24;
  *(_DWORD *)(a9 + 4) = 0;
  *(_BYTE *)(a9 + 8) = v27;
  *(_BYTE *)(a9 + 9) = 1;
  *(_BYTE *)(a9 + 10) = v26;
  *(_BYTE *)(a9 + 11) = v28;
}

void JSC::DFG::SpeculativeJIT::compileGetByIdFlush(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  char v115;
  uint64_t v116;
  _BYTE v117[12];
  uint64_t v118;
  char v119;
  char v120;
  uint64_t v121;
  char v122;
  char v123;
  _BYTE v124[12];
  uint64_t v125;

  v8 = a3;
  v11 = *(_QWORD *)(a2 + 24);
  v12 = (v11 >> 50) & 0x3F;
  if ((_DWORD)v12 != 8)
  {
    if ((_DWORD)v12)
    {
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), (JSC::DFG::Node *)a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x583, "void JSC::DFG::SpeculativeJIT::compileGetByIdFlush(Node *, AccessType)", "Bad use kind");
      __break(0xC471u);
    }
    else
    {
      LOBYTE(v121) = 0;
      v123 = 0;
      LOBYTE(v118) = 0;
      v120 = 0;
      v46 = v11 & 0xFF00FFFFFFFFFFFFLL;
      if ((v11 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_55;
      v47 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v47 >= *(unsigned int *)(a1 + 4004))
      {
        __break(0xC471u);
        JUMPOUT(0x197B72244);
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v47 + 12))
        v48 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, v11, a3, a4, a5, a6, a7, a8);
      else
LABEL_55:
        v48 = -1;
      ++*(_DWORD *)(a1 + 4784);
      v49 = *(unsigned int *)(a1 + 4776);
      if ((_DWORD)v49 != 0x3FFFFFFF)
      {
        *(_QWORD *)(a1 + 4776) = 0xFFFFFFFF3FFFFFFFLL;
        JSC::DFG::SpeculativeJIT::spill(a1, v49, a3, a4, a5, a6, a7, a8);
      }
      v50 = -1;
      v51 = -1;
      if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 3960) + 24) + 16) - 1) & 0xFFFFFFFD) == 0)
      {
        *(_QWORD *)v124 = a1;
        std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v121, (JSC::DFG::SpeculativeJIT **)v124, a3, a4, a5, a6, a7, a8);
        *(_QWORD *)v124 = a1;
        std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v118, (JSC::DFG::SpeculativeJIT **)v124, v96, v97, v98, v99, v100, v101);
        if (!v123 || !v120)
          goto LABEL_110;
        v51 = v122;
        v50 = v119;
      }
      v114 = v51;
      v115 = v50;
      if (v48 == -1)
        v48 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, v11, a3, a4, a5, a6, a7, a8);
      JSC::DFG::SpeculativeJIT::use((uint64_t *)a1, (JSC::DFG::Node *)(v11 & 0xFF00FFFFFFFFFFFFLL), a3, a4, a5, a6, a7, a8);
      JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)a1, v52, v53, v54, v55, v56, v57, v58);
      v59 = 1;
      JSC::AssemblyHelpers::branchIfNotCell(a1, v48, 1, v60, v61, v62, v63, v64, (uint64_t)v117);
      v65 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 1) != 0)
      {
        v102 = *(_QWORD *)(v65 & 0xFFFFFFFF8);
        if ((v65 & 2) != 0
          || (v103 = *(unsigned int *)((v65 & 0xFFFFFFFF8) + 8), (_DWORD)v103 == 0x3FFFFFFF)
          || (_DWORD)v103 == -1)
        {
          v104 = 2;
        }
        else if (v103 >> 28)
        {
          v110 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v110 = v102;
          *(_DWORD *)(v110 + 8) = v103;
          v104 = 1;
          v102 = v110;
        }
        else
        {
          v104 = *(_QWORD *)(v65 & 0xFFFFFFFF8);
          v102 = v103 << 36;
        }
        v65 = v102 | v104;
        v59 = ((v102 | v104) & 1) == 0;
      }
      v67 = JSC::DFG::Node::cacheableIdentifier((JSC::DFG::Node *)a2);
      v68 = *(_DWORD *)v117;
      v69 = *(_QWORD *)&v117[4];
      v70 = v65;
      if (!v59)
      {
        v105 = *(_QWORD *)(v65 & 0xFFFFFFFF8);
        if ((v65 & 2) != 0 || (v106 = *(_DWORD *)((v65 & 0xFFFFFFFF8) + 8), v106 == 0x3FFFFFFF) || v106 == -1)
        {
          v107 = 2;
        }
        else
        {
          v112 = *(unsigned int *)((v65 & 0xFFFFFFFF8) + 8);
          v113 = *(_QWORD *)(v65 & 0xFFFFFFFF8);
          if (v106 >> 28)
          {
            v111 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v111 = v113;
            *(_DWORD *)(v111 + 8) = v112;
            v107 = 1;
            v105 = v111;
          }
          else
          {
            v107 = *(_QWORD *)(v65 & 0xFFFFFFFF8);
            v105 = v112 << 36;
          }
        }
        v70 = v105 | v107;
      }
      v125 = v70;
      *(_DWORD *)v124 = v68;
      *(_QWORD *)&v124[4] = v69;
      JSC::DFG::SpeculativeJIT::cachedGetById(a1, v66, (JSC::CodeOrigin *)&v125, v48, 0, v114, v115, v67, (int *)v124, 1u, v8);
      if ((v125 & 1) != 0 && (v125 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v125 & 0xFFFFFFFF8, v71, v72, v73, v74, v75, v76, v77);
      if (!v59 && (v65 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v65 & 0xFFFFFFFF8, v71, v72, v73, v74, v75, v76, v77);
      v78 = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 4776) = v78;
      *(_DWORD *)(a1 + 4780) = 4;
      v79 = ~v78;
      if (v79 < *(unsigned int *)(a1 + 4004))
      {
        v80 = *(_QWORD *)(a1 + 3992) + 24 * (int)v79;
        v81 = *(_DWORD *)(a2 + 52);
        *(_QWORD *)v80 = a2;
        *(_DWORD *)(v80 + 8) = v81;
        *(_BYTE *)(v80 + 12) = 16;
        *(_DWORD *)(v80 + 13) = 0;
        *(_BYTE *)(v80 + 17) = 0;
        --*(_DWORD *)(a1 + 4784);
        if (!v46)
          goto LABEL_22;
        v42 = a1 + 4776;
        if (v48 > 15)
          v43 = -1;
        else
          v43 = v48;
        goto LABEL_21;
      }
      __break(0xC471u);
    }
    JUMPOUT(0x197B72058);
  }
  LOBYTE(v121) = 0;
  v123 = 0;
  LOBYTE(v118) = 0;
  v120 = 0;
  v13 = v11 & 0xFF00FFFFFFFFFFFFLL;
  if ((v11 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_54;
  v14 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    goto LABEL_110;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v14 + 12))
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v11, a3, a4, a5, a6, a7, a8);
  else
LABEL_54:
    v15 = -1;
  ++*(_DWORD *)(a1 + 4784);
  v16 = *(unsigned int *)(a1 + 4776);
  if ((_DWORD)v16 != 0x3FFFFFFF)
  {
    *(_QWORD *)(a1 + 4776) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill(a1, v16, a3, a4, a5, a6, a7, a8);
  }
  v17 = -1;
  v18 = -1;
  if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 3960) + 24) + 16) - 1) & 0xFFFFFFFD) == 0)
  {
    *(_QWORD *)v124 = a1;
    std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v121, (JSC::DFG::SpeculativeJIT **)v124, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)v124 = a1;
    std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v118, (JSC::DFG::SpeculativeJIT **)v124, v90, v91, v92, v93, v94, v95);
    if (v123 && v120)
    {
      v18 = v122;
      v17 = v119;
      goto LABEL_9;
    }
LABEL_110:
    __break(1u);
    goto LABEL_111;
  }
LABEL_9:
  if (v15 == -1)
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v11, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::use((uint64_t *)a1, (JSC::DFG::Node *)(v11 & 0xFF00FFFFFFFFFFFFLL), a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)a1, v19, v20, v21, v22, v23, v24, v25);
  v26 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) == 0)
  {
    v28 = JSC::DFG::Node::cacheableIdentifier((JSC::DFG::Node *)a2);
LABEL_13:
    v29 = 1;
    v30 = v26;
    goto LABEL_14;
  }
  v82 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
  if ((v26 & 2) != 0
    || ((v83 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v83 != 0x3FFFFFFF)
      ? (v84 = (_DWORD)v83 == -1)
      : (v84 = 1),
        v84))
  {
    v85 = 2;
  }
  else if (v83 >> 28)
  {
    v108 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v108 = v82;
    *(_DWORD *)(v108 + 8) = v83;
    v85 = 1;
    v82 = v108;
  }
  else
  {
    v85 = v82;
    v82 = v83 << 36;
  }
  v26 = v82 | v85;
  v28 = JSC::DFG::Node::cacheableIdentifier((JSC::DFG::Node *)a2);
  if ((v26 & 1) == 0)
    goto LABEL_13;
  v86 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
  if ((v26 & 2) != 0
    || ((v87 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v87 != 0x3FFFFFFF)
      ? (v88 = (_DWORD)v87 == -1)
      : (v88 = 1),
        v88))
  {
    v89 = 2;
  }
  else if (v87 >> 28)
  {
    v116 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
    v109 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v109 = v116;
    *(_DWORD *)(v109 + 8) = v87;
    v89 = 1;
    v86 = v109;
  }
  else
  {
    v89 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
    v86 = v87 << 36;
  }
  v29 = 0;
  v30 = v86 | v89;
LABEL_14:
  *(_QWORD *)v117 = v30;
  *(_DWORD *)v124 = -1;
  *(_QWORD *)&v124[4] = 0xFF000F4100000000;
  JSC::DFG::SpeculativeJIT::cachedGetById(a1, v27, (JSC::CodeOrigin *)v117, v15, 0, v18, v17, v28, (int *)v124, 1u, v8);
  if ((v117[0] & 1) != 0 && (*(_QWORD *)v117 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(*(_QWORD *)v117 & 0xFFFFFFFF8, v31, v32, v33, v34, v35, v36, v37);
  if ((v29 & 1) == 0 && (v26 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v26 & 0xFFFFFFFF8, v31, v32, v33, v34, v35, v36, v37);
  v38 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 4776) = v38;
  *(_DWORD *)(a1 + 4780) = 4;
  v39 = ~v38;
  if (v39 >= *(unsigned int *)(a1 + 4004))
  {
LABEL_111:
    __break(0xC471u);
    JUMPOUT(0x197B7223CLL);
  }
  v40 = *(_QWORD *)(a1 + 3992) + 24 * (int)v39;
  v41 = *(_DWORD *)(a2 + 52);
  *(_QWORD *)v40 = a2;
  *(_DWORD *)(v40 + 8) = v41;
  *(_BYTE *)(v40 + 12) = 16;
  *(_DWORD *)(v40 + 13) = 0;
  *(_BYTE *)(v40 + 17) = 0;
  --*(_DWORD *)(a1 + 4784);
  if (v13)
  {
    v42 = a1 + 4776;
    if (v15 > 15)
      v43 = -1;
    else
      v43 = v15;
LABEL_21:
    --*(_DWORD *)(v42 + 12 * v43 + 8);
  }
LABEL_22:
  if (v120)
  {
    if (v118)
    {
      v44 = v119;
      if (v119 != -1)
      {
        if (v119 > 15)
          v44 = -1;
        --*(_DWORD *)(v118 + 12 * v44 + 4784);
      }
    }
  }
  if (v123)
  {
    if (v121)
    {
      v45 = v122;
      if (v122 != -1)
      {
        if (v122 > 15)
          v45 = -1;
        --*(_DWORD *)(v121 + 12 * v45 + 4784);
      }
    }
  }
}

double JSC::DFG::SpeculativeJIT::flushRegisters(JSC::DFG::SpeculativeJIT *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double result;

  v9 = *((unsigned int *)this + 1194);
  if ((_DWORD)v9 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v9, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v10 = *((unsigned int *)this + 1197);
  if ((_DWORD)v10 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)((char *)this + 4788) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v11 = *((unsigned int *)this + 1200);
  if ((_DWORD)v11 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v11, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *((_QWORD *)this + 600) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v12 = *((unsigned int *)this + 1203);
  if ((_DWORD)v12 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v12, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)((char *)this + 4812) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v13 = *((unsigned int *)this + 1206);
  if ((_DWORD)v13 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *((_QWORD *)this + 603) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v14 = *((unsigned int *)this + 1209);
  if ((_DWORD)v14 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)((char *)this + 4836) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v15 = *((unsigned int *)this + 1212);
  if ((_DWORD)v15 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v15, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *((_QWORD *)this + 606) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v16 = *((unsigned int *)this + 1215);
  if ((_DWORD)v16 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v16, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)((char *)this + 4860) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v17 = *((unsigned int *)this + 1218);
  if ((_DWORD)v17 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v17, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *((_QWORD *)this + 609) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v18 = *((unsigned int *)this + 1221);
  if ((_DWORD)v18 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v18, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)((char *)this + 4884) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v19 = *((unsigned int *)this + 1224);
  if ((_DWORD)v19 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v19, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *((_QWORD *)this + 612) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v20 = *((unsigned int *)this + 1227);
  if ((_DWORD)v20 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v20, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)((char *)this + 4908) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v21 = *((unsigned int *)this + 1230);
  if ((_DWORD)v21 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v21, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *((_QWORD *)this + 615) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v22 = *((unsigned int *)this + 1233);
  if ((_DWORD)v22 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v22, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)((char *)this + 4932) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v23 = *((unsigned int *)this + 1236);
  if ((_DWORD)v23 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v23, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *((_QWORD *)this + 618) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v24 = (_QWORD *)((char *)this + 4980);
  v25 = *((unsigned int *)this + 1239);
  if ((_DWORD)v25 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v25, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)((char *)this + 4956) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v26 = *((unsigned int *)this + 1242);
  if ((_DWORD)v26 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v26, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *((_QWORD *)this + 621) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v27 = *(unsigned int *)v24;
  if ((_DWORD)v27 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v27, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *v24 = 0xFFFFFFFF3FFFFFFFLL;
  }
  v28 = *((unsigned int *)this + 1248);
  if ((_DWORD)v28 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v28, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *((_QWORD *)this + 624) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v29 = *((unsigned int *)this + 1251);
  if ((_DWORD)v29 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v29, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *(_QWORD *)((char *)this + 5004) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v30 = *((unsigned int *)this + 1254);
  if ((_DWORD)v30 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v30, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *((_QWORD *)this + 627) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v31 = *((unsigned int *)this + 1257);
  if ((_DWORD)v31 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v31, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *(_QWORD *)((char *)this + 5028) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v32 = *((unsigned int *)this + 1260);
  if ((_DWORD)v32 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v32, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *((_QWORD *)this + 630) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v33 = *((unsigned int *)this + 1263);
  if ((_DWORD)v33 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v33, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *(_QWORD *)((char *)this + 5052) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v34 = *((unsigned int *)this + 1266);
  if ((_DWORD)v34 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v34, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *((_QWORD *)this + 633) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v35 = *((unsigned int *)this + 1269);
  if ((_DWORD)v35 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v35, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *(_QWORD *)((char *)this + 5076) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v36 = *((unsigned int *)this + 1272);
  if ((_DWORD)v36 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v36, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *((_QWORD *)this + 636) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v37 = *((unsigned int *)this + 1275);
  if ((_DWORD)v37 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v37, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *(_QWORD *)((char *)this + 5100) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v38 = *((unsigned int *)this + 1278);
  if ((_DWORD)v38 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v38, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *((_QWORD *)this + 639) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v39 = *((unsigned int *)this + 1281);
  if ((_DWORD)v39 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v39, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *(_QWORD *)((char *)this + 5124) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v40 = *((unsigned int *)this + 1284);
  if ((_DWORD)v40 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v40, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *((_QWORD *)this + 642) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v41 = *((unsigned int *)this + 1287);
  if ((_DWORD)v41 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v41, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *(_QWORD *)((char *)this + 5148) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v42 = *((unsigned int *)this + 1290);
  if ((_DWORD)v42 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v42, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *((_QWORD *)this + 645) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v43 = *((unsigned int *)this + 1293);
  if ((_DWORD)v43 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v43, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *(_QWORD *)((char *)this + 5172) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v44 = *((unsigned int *)this + 1296);
  if ((_DWORD)v44 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v44, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *((_QWORD *)this + 648) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v45 = *((unsigned int *)this + 1299);
  if ((_DWORD)v45 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v45, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *(_QWORD *)((char *)this + 5196) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v46 = *((unsigned int *)this + 1302);
  if ((_DWORD)v46 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v46, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *((_QWORD *)this + 651) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v47 = *((unsigned int *)this + 1305);
  if ((_DWORD)v47 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v47, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *(_QWORD *)((char *)this + 5220) = 0xFFFFFFFF3FFFFFFFLL;
  }
  v48 = *((unsigned int *)this + 1308);
  if ((_DWORD)v48 != 0x3FFFFFFF)
  {
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v48, a3, a4, a5, a6, a7, a8);
    result = NAN;
    *((_QWORD *)this + 654) = 0xFFFFFFFF3FFFFFFFLL;
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileDeleteById(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  signed __int8 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  JSC::DFG::SlowPathGenerator *v66;
  WTF *v67;
  JSC::DFG::SlowPathGenerator *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unsigned int v77;
  unsigned int v78;
  JSC::DFG::SpeculativeJIT *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  JSC::DFG::Node *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(JSC::JSGlobalObject *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  JSC::DFG::SlowPathGenerator *v110;
  WTF *v111;
  int v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  WTF *v116;
  int v117;
  uint64_t v118;
  JSC::DFG::SlowPathGenerator *v119;
  uint64_t v120;
  JSC::DFG::SpeculativeJIT *v121;
  uint64_t v122;
  unsigned __int8 v123;
  int v124;
  uint64_t v125;
  _QWORD v126[2];
  unsigned int v127;
  _QWORD v128[2];
  uint64_t v129;
  _BYTE *v130;
  uint64_t v131;
  _BYTE v132[24];
  uint64_t v133;
  signed __int8 v134;
  uint64_t v135;
  unint64_t v136;
  unsigned __int8 v137;
  JSC::DFG::SpeculativeJIT *v138;
  unsigned __int8 v139;
  char v140;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFC000000000000) == 0x20000000000000)
  {
    LOBYTE(v138) = 0;
    v140 = 0;
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v135, (uint64_t)this, v10, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v133, this, v11, v12, v13, v14, v15, v16);
    v130 = v132;
    v131 = 2;
    if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
    {
      v23 = 255;
    }
    else
    {
      v121 = this;
      std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v138, &v121, v17, v18, v19, v20, v21, v22);
      if (!v140)
      {
        __break(1u);
        return;
      }
      v23 = v139;
    }
    v24 = v134;
    v25 = v137;
    if (v137 == 255)
    {
      v25 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v135, v136, v17, v18, v19, v20, v21, v22);
      v137 = v25;
    }
    JSC::CodeOrigin::CodeOrigin(&v129, a2);
    v31 = JSC::DFG::SpeculativeJIT::recordCallSiteAndGenerateExceptionHandlingOSRExitIfNeeded(this, (const JSC::CodeOrigin *)&v129, *((unsigned int *)this + 1411), v26, v27, v28, v29, v30);
    v128[0] = JSC::DFG::SpeculativeJIT::usedRegisters(this);
    v128[1] = v32;
    JSC::DFG::JITCompiler::addStructureStubInfo(this, (uint64_t)v126);
    v33 = *((_QWORD *)this + 42);
    v34 = v126[0];
    v35 = v126[1];
    JSC::CodeOrigin::CodeOrigin(&v120, (const JSC::CodeOrigin *)&v129);
    v36 = JSC::DFG::Node::ecmaMode(a2);
    v37 = JSC::DFG::Node::cacheableIdentifier(a2);
    LOBYTE(v109) = v23;
    if (v36)
      v38 = 24;
    else
      v38 = 23;
    JSC::JITDelByIdGenerator::JITDelByIdGenerator((uint64_t)&v121, v33, v34, v35, 4, &v120, v31, v38, (uint64_t)v128, v37, v25, 0, v24, v109);
    if ((v120 & 1) != 0 && (v120 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v120 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
    if (JSC::DFG::Node::ecmaMode(a2))
      v52 = operationDeleteByIdSloppyOptimize;
    else
      v52 = operationDeleteByIdStrictOptimize;
    if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
    {
      JSC::JITDelByIdGenerator::generateFastPath((JSC::JITDelByIdGenerator *)&v121, this, v46, v47, v48, v49, v50, v51);
      v114 = v124;
      v115 = v125;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v130, &v114, v53, v54, v55, v56, v57, v58);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v111, (uint64_t *)&v130);
      JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((uint64_t *)&v119, (uint64_t *)&v111, this, (uint64_t)v52, v24, v25, v122);
      v66 = v119;
      v67 = v111;
      if (&v113 != (uint64_t *)v111 && v111)
      {
        v111 = 0;
        v112 = 0;
LABEL_17:
        WTF::fastFree((unint64_t)v67, v59, v60, v61, v62, v63, v64, v65);
      }
    }
    else
    {
      v108 = v127;
      JSC::JITInlineCacheGenerator::generateDFGDataICFastPath((uint64_t)&v121, (uint64_t)this, v127, (char)v23, v48, v49, v50, v51);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v116, (uint64_t *)&v130);
      JSC::DFG::slowPathICCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>((uint64_t *)&v119, (uint64_t *)&v116, this, v108, v23, v23 | 0x3000000000, (uint64_t)v52, v24, v25, 0, v23);
      v66 = v119;
      v67 = v116;
      if (&v118 != (uint64_t *)v116 && v116)
      {
        v116 = 0;
        v117 = 0;
        goto LABEL_17;
      }
    }
    JSC::DFG::JITCompiler::addDelById(this, (const JSC::JITDelByIdGenerator *)&v121, v66, v61, v62, v63, v64, v65);
    v110 = v66;
    JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)this, (unint64_t)&v110);
    v68 = v110;
    v110 = 0;
    if (v68)
      (*(void (**)(JSC::DFG::SlowPathGenerator *))(*(_QWORD *)v68 + 8))(v68);
    JSC::DFG::SpeculativeJIT::unblessedBooleanResult((uint64_t)this, v24, (uint64_t)a2, 0);
    if ((v129 & 1) != 0 && (v129 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v129 & 0xFFFFFFFF8, v69, v70, v71, v72, v73, v74, v75);
    v76 = (unint64_t)v130;
    if (v132 != v130 && v130)
    {
      v130 = 0;
      LODWORD(v131) = 0;
      WTF::fastFree(v76, v69, v70, v71, v72, v73, v74, v75);
    }
    if (v133)
    {
      v77 = v134;
      if (v134 != -1)
      {
        if (v134 > 15)
          v77 = -1;
        --*(_DWORD *)(v133 + 12 * v77 + 4784);
      }
    }
    if ((v136 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v78 = (char)v137;
      if ((char)v137 > 15)
        v78 = -1;
      --*(_DWORD *)(v135 + 12 * v78 + 4784);
    }
    if (!v140)
      return;
    v79 = v138;
    if (!v138)
      return;
    v80 = (char)v139;
    if ((char)v139 == -1)
      return;
LABEL_46:
    if (v80 > 15)
      v80 = -1;
    --*((_DWORD *)v79 + 3 * v80 + 1196);
    return;
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v121, (uint64_t)this, v10, 0, a5, a6, a7, a8);
  v88 = v123;
  if (v123 == 255)
  {
    v88 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v121, v122, v82, v83, v84, v85, v86, v87);
    v123 = v88;
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v81, v82, v83, v84, v85, v86, v87);
  ++*((_DWORD *)this + 1196);
  v95 = *((unsigned int *)this + 1194);
  if ((_DWORD)v95 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v95, v89, v90, v91, v92, v93, v94);
  }
  if (JSC::DFG::Node::ecmaMode(a2))
    v102 = operationDeleteByIdSloppyGeneric;
  else
    v102 = operationDeleteByIdStrictGeneric;
  v103 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v96, v97, v98, v99, v100, v101);
  v105 = v104;
  v106 = JSC::DFG::Node::cacheableIdentifier(a2);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,unsigned long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,unsigned long>((int *)&v130, (unsigned __int8 *)this, (uint64_t)v102, v103, v105, v88, v106, v107);
  JSC::DFG::SpeculativeJIT::unblessedBooleanResult((uint64_t)this, 0, (uint64_t)a2, 0);
  --*((_DWORD *)this + 1196);
  if ((v122 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v79 = v121;
    v80 = (char)v123;
    goto LABEL_46;
  }
}

uint64_t JSC::DFG::Node::ecmaMode(JSC::DFG::Node *this)
{
  int v1;
  char *v2;
  uint64_t result;
  char v4;

  v1 = *((unsigned __int16 *)this + 9);
  if (v1 == 6)
    goto LABEL_2;
  if (*((unsigned __int16 *)this + 9) <= 0x74u)
  {
    if ((v1 - 101) < 4)
      goto LABEL_7;
  }
  else
  {
    v4 = v1 - 117;
    if ((v1 - 117) <= 0x3C)
    {
      if (((1 << v4) & 0x100000000000201FLL) != 0)
      {
LABEL_7:
        v2 = (char *)this + 80;
        return *(unsigned int *)v2;
      }
      if (((1 << v4) & 0x4020) != 0)
        goto LABEL_2;
    }
    if (v1 == 391)
      goto LABEL_7;
    if (v1 == 253)
    {
LABEL_2:
      v2 = (char *)this + 72;
      return *(unsigned int *)v2;
    }
  }
  result = 2599;
  __break(0xC471u);
  return result;
}

void JSC::DFG::slowPathICCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>(uint64_t *a1, uint64_t *a2, _DWORD *a3, int a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, int a10, char a11)
{
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _BYTE *v25;
  WTF *v26;
  WTF *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _BYTE *v32;
  WTF *v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  WTF *v44;
  WTF *v45;
  unsigned int v46;
  _BYTE v47[24];
  WTF *v48;
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[24];
  WTF *v52;
  unsigned int v53;
  unsigned int v54;
  _BYTE v55[24];

  v19 = *((unsigned int *)a2 + 3);
  v45 = (WTF *)v47;
  v46 = v19;
  if (v19 < 3)
  {
    v20 = v47;
  }
  else
  {
    if (v19 >= 0x15555556)
      goto LABEL_36;
    v20 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v19));
    v45 = (WTF *)v20;
    LODWORD(v19) = *((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v19)
  {
    v21 = *a2;
    v22 = *a2 + 12 * v19;
    do
    {
      *(_DWORD *)v20 = *(_DWORD *)v21;
      *(_QWORD *)(v20 + 4) = *(_QWORD *)(v21 + 4);
      v21 += 12;
      v20 += 12;
    }
    while (v21 != v22);
  }
  v23 = WTF::fastMalloc((WTF *)0xB8);
  v24 = v46;
  v48 = (WTF *)v51;
  v49 = 2;
  v50 = v46;
  if (v46 < 3)
  {
    v25 = v51;
  }
  else
  {
    if (v46 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197B730B0);
    }
    v25 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v46));
    v49 = 12 * v46 / 0xC;
    v48 = (WTF *)v25;
    v24 = v46;
  }
  if (v24)
  {
    v26 = v45;
    v27 = (WTF *)((char *)v45 + 12 * v24);
    do
    {
      *(_DWORD *)v25 = *(_DWORD *)v26;
      *(_QWORD *)(v25 + 4) = *(_QWORD *)((char *)v26 + 4);
      v26 = (WTF *)((char *)v26 + 12);
      v25 += 12;
    }
    while (v26 != v27);
  }
  v28 = v50;
  v52 = (WTF *)v55;
  v53 = 2;
  v54 = v50;
  if (v50 >= 3)
  {
    if (v50 < 0x15555556)
    {
      v29 = a6;
      v30 = a7;
      v31 = 12 * v50;
      v32 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v50));
      v53 = (v31 & 0xFFFFFFFC) / 0xC;
      v52 = (WTF *)v32;
      v28 = v50;
      goto LABEL_19;
    }
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x197B730A8);
  }
  v29 = a6;
  v30 = a7;
  v32 = v55;
LABEL_19:
  if (v28)
  {
    v33 = v48;
    v34 = (WTF *)((char *)v48 + 12 * v28);
    do
    {
      *(_DWORD *)v32 = *(_DWORD *)v33;
      *(_QWORD *)(v32 + 4) = *(_QWORD *)((char *)v33 + 4);
      v33 = (WTF *)((char *)v33 + 12);
      v32 += 12;
    }
    while (v33 != v34);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(v23, (uint64_t *)&v52, a3, 0, 0, a8);
  v42 = v52;
  if (v55 != (_BYTE *)v52 && v52 != 0)
  {
    v52 = 0;
    v53 = 0;
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  }
  *(_QWORD *)v23 = &off_1E3572C10;
  *(_BYTE *)(v23 + 152) = a5;
  *(_QWORD *)(v23 + 156) = v29;
  *(_QWORD *)(v23 + 168) = v30;
  *(_BYTE *)(v23 + 176) = a9;
  *(_BYTE *)(v23 + 177) = a11;
  *(_DWORD *)(v23 + 180) = a4;
  *a1 = v23;
  v44 = v48;
  if (v51 != (_BYTE *)v48 && v48)
  {
    v48 = 0;
    v49 = 0;
    WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
  }
  if (v47 != (_BYTE *)v45)
  {
    if (v45)
      WTF::fastFree((unint64_t)v45, v35, v36, v37, v38, v39, v40, v41);
  }
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>(uint64_t *a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  char v22;
  _BYTE *v23;
  WTF *v24;
  WTF *v25;
  unsigned int v26;
  int v27;
  _BYTE *v28;
  WTF *v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  WTF *v40;
  _DWORD *v41;
  WTF *v42;
  unsigned int v43;
  _BYTE v44[24];
  WTF *v45;
  unsigned int v46;
  unsigned int v47;
  _BYTE v48[24];
  WTF *v49;
  unsigned int v50;
  unsigned int v51;
  _BYTE v52[24];

  v14 = *((unsigned int *)a2 + 3);
  v42 = (WTF *)v44;
  v43 = v14;
  if (v14 < 3)
  {
    v15 = v44;
  }
  else
  {
    if (v14 >= 0x15555556)
      goto LABEL_36;
    v15 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v14));
    v42 = (WTF *)v15;
    LODWORD(v14) = *((_DWORD *)a2 + 3);
  }
  v41 = a3;
  if ((_DWORD)v14)
  {
    v16 = *a2;
    v17 = *a2 + 12 * v14;
    do
    {
      *(_DWORD *)v15 = *(_DWORD *)v16;
      *(_QWORD *)(v15 + 4) = *(_QWORD *)(v16 + 4);
      v16 += 12;
      v15 += 12;
    }
    while (v16 != v17);
  }
  v18 = a4;
  v19 = WTF::fastMalloc((WTF *)0xB0);
  v20 = v43;
  v45 = (WTF *)v48;
  v46 = 2;
  v47 = v43;
  if (v43 < 3)
  {
    v21 = a1;
    v22 = a6;
    v23 = v48;
  }
  else
  {
    if (v43 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197B733A4);
    }
    v21 = a1;
    v22 = a6;
    v23 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v43));
    v46 = 12 * v43 / 0xC;
    v45 = (WTF *)v23;
    v20 = v43;
  }
  if (v20)
  {
    v24 = v42;
    v25 = (WTF *)((char *)v42 + 12 * v20);
    do
    {
      *(_DWORD *)v23 = *(_DWORD *)v24;
      *(_QWORD *)(v23 + 4) = *(_QWORD *)((char *)v24 + 4);
      v24 = (WTF *)((char *)v24 + 12);
      v23 += 12;
    }
    while (v24 != v25);
  }
  v26 = v47;
  v49 = (WTF *)v52;
  v50 = 2;
  v51 = v47;
  if (v47 < 3)
  {
    v28 = v52;
    if (!v47)
      goto LABEL_22;
LABEL_20:
    v29 = v45;
    v30 = (WTF *)((char *)v45 + 12 * v26);
    do
    {
      *(_DWORD *)v28 = *(_DWORD *)v29;
      *(_QWORD *)(v28 + 4) = *(_QWORD *)((char *)v29 + 4);
      v29 = (WTF *)((char *)v29 + 12);
      v28 += 12;
    }
    while (v29 != v30);
    goto LABEL_22;
  }
  if (v47 >= 0x15555556)
  {
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x197B7339CLL);
  }
  v27 = 12 * v47;
  v28 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v47));
  v50 = (v27 & 0xFFFFFFFC) / 0xC;
  v49 = (WTF *)v28;
  v26 = v47;
  if (v47)
    goto LABEL_20;
LABEL_22:
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(v19, (uint64_t *)&v49, v41, 0, 0, a5);
  v38 = v49;
  if (v52 != (_BYTE *)v49 && v49 != 0)
  {
    v49 = 0;
    v50 = 0;
    WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
  }
  *(_QWORD *)v19 = &off_1E3572C70;
  *(_QWORD *)(v19 + 152) = v18;
  *(_BYTE *)(v19 + 160) = v22;
  *(_QWORD *)(v19 + 168) = a7;
  *v21 = v19;
  v40 = v45;
  if (v48 != (_BYTE *)v45 && v45)
  {
    v45 = 0;
    v46 = 0;
    WTF::fastFree((unint64_t)v40, v31, v32, v33, v34, v35, v36, v37);
  }
  if (v44 != (_BYTE *)v42)
  {
    if (v42)
      WTF::fastFree((unint64_t)v42, v31, v32, v33, v34, v35, v36, v37);
  }
}

double JSC::DFG::JITCompiler::addDelById(JSC::DFG::JITCompiler *this, const JSC::JITDelByIdGenerator *a2, JSC::DFG::SlowPathGenerator *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v19;
  char v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  JSC::DFG::SlowPathGenerator *v28;

  v19 = *(_OWORD *)a2;
  v20 = *((_BYTE *)a2 + 16);
  v8 = *((_DWORD *)a2 + 5);
  v9 = *((_DWORD *)a2 + 6);
  v21 = v8;
  v22 = v9;
  v10 = *((_DWORD *)a2 + 7);
  v11 = *((_DWORD *)a2 + 8);
  v23 = v10;
  v24 = v11;
  v12 = *((_DWORD *)a2 + 9);
  v13 = *((_DWORD *)a2 + 10);
  v25 = v12;
  v26 = v13;
  v14 = *(_QWORD *)((char *)a2 + 44);
  v27 = v14;
  v28 = a3;
  v15 = *((unsigned int *)this + 521);
  if ((_DWORD)v15 == *((_DWORD *)this + 520))
    return WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITDelByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::InlineCacheWrapper<JSC::JITDelByIdGenerator>>((uint64_t)this + 2072, (unint64_t)&v19, (uint64_t)a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 259) + (v15 << 6);
  v17 = *(_OWORD *)a2;
  *(_BYTE *)(v16 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)v16 = v17;
  *(_DWORD *)(v16 + 20) = v8;
  *(_DWORD *)(v16 + 24) = v9;
  *(_DWORD *)(v16 + 28) = v10;
  *(_DWORD *)(v16 + 32) = v11;
  *(_DWORD *)(v16 + 36) = v12;
  *(_DWORD *)(v16 + 40) = v13;
  *(_QWORD *)(v16 + 44) = v14;
  *(_QWORD *)(v16 + 56) = a3;
  ++*((_DWORD *)this + 521);
  return *(double *)&v17;
}

uint64_t JSC::DFG::SpeculativeJIT::unblessedBooleanResult(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  JSC::MacroAssemblerARM64::or32(a1, (JSC::ARM64LogicalImmediate *)6, a2, a2);
  return JSC::DFG::SpeculativeJIT::jsValueResult(a1, a2, a3, 21, a4, v8, v9, v10);
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,unsigned long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,unsigned long>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  int *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  __int16 *v38;
  char *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unsigned __int8 *v60;
  char v61;
  int v62;
  unsigned __int8 *__src;
  JSC::AssemblerBuffer *v64;
  unsigned int v65;
  unsigned int v66;
  __int16 v67;
  _BYTE v68[6];

  v12 = (uint64_t)a2;
  v13 = a1;
  if (a6 != 1)
  {
    v67 = a6 | 0x100;
    v65 = 1;
    v64 = (JSC::AssemblerBuffer *)(a2 + 56);
    v14 = 1;
    do
    {
      v15 = 0;
      v16 = 0;
      v17 = v14;
      do
      {
        if ((v68[v15 - 1] & 0x40) != 0)
        {
LABEL_56:
          __break(1u);
          if (a1)
            WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
          goto LABEL_53;
        }
        v16 |= 1 << v68[v15 - 1];
        v15 += 2;
      }
      while (2 * v14 != v15);
      v18 = 0;
      do
      {
        v19 = v68[v18 - 2] & 0x7F;
        if (v19 >= 0x40)
          goto LABEL_56;
        v16 &= ~(1 << v19);
        v18 += 2;
      }
      while (2 * v14 != v18);
      v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
      v20.i16[0] = vaddlv_u8(v20);
      v21 = v20.i32[0];
      v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.i32[0] + v21)
      {
        v23 = 0;
        if (v14 <= 1)
          v24 = 1;
        else
          v24 = v14;
        v25 = 2 * v24;
        while (1)
        {
          v26 = v68[v23 - 1];
          if ((v26 & 0x7Fu) >= 0x40)
            goto LABEL_56;
          if (((v16 >> (v26 & 0x7F)) & 1) != 0)
            break;
          v23 += 2;
          if (v25 == v23)
            goto LABEL_33;
        }
        v27 = v68[v23 - 2];
        if (v27 != v26)
        {
          if ((char)v27 == 63)
          {
            if (v26 == 31)
              goto LABEL_27;
            v29 = v26 & 0x1F | 0xD2800000;
          }
          else
          {
            v28 = (char)v26 == 31 || (char)v27 == 31;
            if (!v28)
            {
              v29 = v26 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v29 = (char)v26 | (32 * (char)v27) | 0x91000000;
          }
LABEL_28:
          v30 = *(_DWORD *)(v12 + 200);
          if (v30 + 4 > *(_DWORD *)(v12 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v64, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v30 = *(_DWORD *)(v12 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v12 + 56) + v30) = v29;
          *(_DWORD *)(v12 + 200) += 4;
          v17 = v65;
        }
        a1 = (int *)memmove(&v68[v23 - 2], &v68[v23], 2 * v17 - v23 - 2);
        v14 = v65 - 1;
        goto LABEL_32;
      }
      v31 = HIBYTE(v67);
      v61 = v67;
      JSC::MacroAssemblerARM64::swap(v12, (char)v67, SHIBYTE(v67), a4, a5, a6, a7, a8);
      a1 = (int *)memmove(&v67, v68, 2 * v65 - 2);
      v32 = v65 - 1;
      v28 = v65 == 1;
      v66 = v32;
      v33 = (unsigned __int8 *)&v67;
      __src = &v68[2 * v32 - 2];
      if (v28)
      {
        v34 = 0;
        v35 = 0;
        v62 = 0;
        a2 = &v68[2 * v32 - 2];
      }
      else
      {
        v37 = 2 * v32;
        v38 = &v67;
        while (*(unsigned __int8 *)v38 != v31)
        {
          ++v38;
          v37 -= 2;
          if (!v37)
            goto LABEL_43;
        }
        *(_BYTE *)v38 = v61;
LABEL_43:
        v62 = 0;
        v39 = (char *)&v67;
        a2 = __src;
        v40 = __src;
        do
        {
          if (*v33 == v33[1])
          {
            v41 = v33;
            if (v40 != &v68[2 * v66 - 2])
            {
              if (v33 == a2)
              {
                v41 = v40;
              }
              else
              {
                v59 = v39 - (char *)a2;
                v60 = v40;
                a1 = (int *)memmove(v40, a2, v39 - (char *)a2);
                v41 = &v60[v59];
              }
            }
            a2 = v33 + 2;
            ++v62;
            v40 = v41;
          }
          v33 += 2;
          v39 += 2;
        }
        while (v33 < __src);
        v34 = v66;
        v35 = v66;
        __src = v40;
      }
      v36 = &v68[2 * v34 - 2];
      if (a2 != v36)
      {
        a1 = (int *)memmove(__src, a2, v36 - a2);
        v35 = v66;
      }
      v14 = v35 - v62;
LABEL_32:
      v65 = v14;
LABEL_33:
      ;
    }
    while (v14);
  }
LABEL_53:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a7, 2, a4, a5, a6, a7, a8);
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a5, 0, v42, v43, v44, v45, v46);
  else
    JSC::MacroAssemblerARM64::load64(v12, (a4 << 35) + 0x380000001ALL, 0, v42, v43, v44, v45, v46);
  JSC::DFG::SpeculativeJIT::appendCall(v12, a3, v47, v48, v49, v50, v51, v52, v13);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v12, 1, v53, v54, v55, v56, v57, v58);
}

uint64_t JSC::DFG::JITCompiler::LinkableConstant::globalObject(JSC::DFG::JITCompiler::LinkableConstant *this, JSC::DFG::JITCompiler *a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::JITCompiler::LinkableConstant *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::DFG::JITCompiler::LinkableConstant *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v8 = this;
  v9 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v12 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v12 != 0x3FFFFFFF)
        ? (v13 = (_DWORD)v12 == -1)
        : (v13 = 1),
          v13))
    {
      v14 = 2;
    }
    else if (v12 >> 28)
    {
      v23 = v11;
      v24 = v8;
      v25 = v12;
      v11 = WTF::fastMalloc((WTF *)0x10);
      v8 = v24;
      *(_QWORD *)v11 = v23;
      *(_DWORD *)(v11 + 8) = v25;
      v14 = 1;
    }
    else
    {
      v14 = v11;
      v11 = v12 << 36;
    }
    v15 = v11 | v14;
    v26 = v11 | v14;
    JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((uint64_t)&v27, v8, (uint64_t)a3, &v26, a5, a6, a7, a8);
    if ((v15 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v15 & 0xFFFFFFFF8, v16, v17, v18, v19, v20, v21, v22);
  }
  else
  {
    v26 = *(_QWORD *)a2;
    JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((uint64_t)&v27, this, (uint64_t)a3, &v26, a5, a6, a7, a8);
  }
  return v27;
}

void JSC::DFG::SpeculativeJIT::compileDeleteByVal(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  JSC::DFG::Node *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  char *v27;
  uint64_t (*v28)(JSC::JSGlobalObject *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  char *v65;
  uint64_t i;
  uint64_t v67;
  char *v68;
  uint64_t j;
  uint64_t v70;
  unsigned int v71;
  char v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  _BYTE *v84;
  char v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  char v94;
  _BYTE *v95;
  uint64_t (*v96)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  _DWORD *v104;
  char *v105;
  char v106;
  unsigned int v107;
  int v108;
  _BYTE *v109;
  WTF *v110;
  WTF *v111;
  uint64_t v112;
  unsigned int v113;
  _BYTE *v114;
  WTF *v115;
  WTF *v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t (*v119)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v120;
  _BYTE *v121;
  _BYTE *v122;
  _BYTE *v123;
  unsigned int v124;
  int v125;
  _BYTE *v126;
  _BYTE *v127;
  _BYTE *v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  int v141;
  WTF *v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  WTF *v168;
  char v169;
  char v170;
  char v171;
  unsigned int v172;
  char v173;
  char v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  WTF *v183;
  char v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  BOOL v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unsigned int v204;
  uint64_t v205;
  char v206;
  char v207;
  uint64_t v208;
  WTF *v209;
  unsigned int v210;
  unsigned int v211;
  _BYTE v212[28];
  int v213;
  uint64_t v214;
  WTF *v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  __int128 v219;
  char v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  _QWORD v226[2];
  uint64_t v227;
  _DWORD v228[3];
  WTF *v229;
  uint64_t v230;
  _BYTE v231[24];
  uint64_t v232;
  unsigned __int8 v233;
  char v234;
  _BYTE *v235;
  unsigned int v236;
  unsigned int v237;
  _BYTE v238[24];
  __int128 v239;
  _BYTE v240[4];
  int v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  _BYTE *v247;
  unsigned int v248;
  unsigned int v249;
  _BYTE v250[40];

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFC000000000000) != 0x20000000000000)
  {
    v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
    if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_109;
    v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v12 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197B74A90);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
      v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    else
LABEL_109:
      v13 = -1;
    v14 = *((_QWORD *)a2 + 4);
    v15 = v14 & 0xFF00FFFFFFFFFFFFLL;
    if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_110;
    v16 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v16 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197B74A98);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v16 + 12))
      v17 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
    else
LABEL_110:
      v17 = -1;
    if (v13 == -1)
      v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    if (v17 == -1)
      v17 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::flushRegisters(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    ++*((_DWORD *)this + 1196);
    v24 = *((unsigned int *)this + 1194);
    if ((_DWORD)v24 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v24, (uint64_t)v18, v19, v20, v21, v22, v23);
    }
    v25 = *((unsigned __int16 *)a2 + 9);
    if (v25 == 6)
      goto LABEL_17;
    if (*((unsigned __int16 *)a2 + 9) <= 0x74u)
    {
      if ((v25 - 101) < 4)
        goto LABEL_180;
    }
    else
    {
      v173 = v25 - 117;
      if ((v25 - 117) <= 0x3C)
      {
        if (((1 << v173) & 0x100000000000201FLL) != 0)
        {
LABEL_180:
          v26 = (char *)a2 + 80;
          goto LABEL_18;
        }
        if (((1 << v173) & 0x4020) != 0)
          goto LABEL_17;
      }
      if (v25 == 391)
        goto LABEL_180;
      if (v25 == 253)
      {
LABEL_17:
        v26 = (char *)a2 + 72;
LABEL_18:
        v27 = (char *)this + 4776;
        if (*v26)
          v28 = operationDeleteByValSloppyGeneric;
        else
          v28 = operationDeleteByValStrictGeneric;
        v29 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v18, v19, v20, v21, v22, v23);
        JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v239, (int *)this, (uint64_t)v28, v29, v30, v13, v17, v31);
        JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, 0, 0);
        JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 21, 0, v32, v33, v34);
        --*((_DWORD *)this + 1196);
        if (v15)
        {
          if (v17 > 15)
            v35 = -1;
          else
            v35 = v17;
          --*(_DWORD *)&v27[12 * v35 + 8];
        }
        if (v11)
        {
          if (v13 > 15)
            v36 = -1;
          else
            v36 = v13;
          --*(_DWORD *)&v27[12 * v36 + 8];
        }
        return;
      }
    }
    __break(0xC471u);
LABEL_258:
    JUMPOUT(0x197B748A4);
  }
  LOBYTE(v232) = 0;
  v234 = 0;
  v37 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_183;
  v38 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v38 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197B74AA0);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v38 + 12))
    v39 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  else
LABEL_183:
    v39 = -1;
  v40 = *((_QWORD *)a2 + 4);
  v41 = v40 & 0xFF00FFFFFFFFFFFFLL;
  if ((v40 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_176;
  v42 = ~*(_DWORD *)((v40 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v42 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197B74AA8);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v42 + 12))
    v43 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
  else
LABEL_176:
    v43 = -1;
  v44 = ~*(_DWORD *)((v40 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v44 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_253;
  }
  if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v44 + 8) == 1)
  {
    if (v43 == -1)
      v43 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v40, a3, a4, a5, a6, a7, a8);
    if (v43 > 15)
      v45 = -1;
    else
      v45 = v43;
    ++*((_DWORD *)this + 3 * v45 + 1196);
    v207 = v43;
  }
  else
  {
    v207 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  v229 = (WTF *)v231;
  v230 = 2;
  v204 = 255;
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
    goto LABEL_49;
  *(_QWORD *)&v239 = this;
  std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v232, (JSC::DFG::SpeculativeJIT **)&v239, a3, a4, a5, a6, a7, a8);
  if (!v234)
  {
LABEL_253:
    __break(1u);
    goto LABEL_254;
  }
  v204 = v233;
LABEL_49:
  if (v39 == -1)
    v39 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  if (v43 == -1)
    v43 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v40, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::speculate(this, (uint64_t)a2, *((_QWORD *)a2 + 4), a4, a5, a6, a7, a8);
  v52 = *((_QWORD *)a2 + 4);
  v53 = *((_QWORD *)this + 702);
  v54 = *(_QWORD *)(v53 + 8);
  v55 = *(unsigned int *)((v52 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v56 = (_QWORD *)(v54 + 24);
  v57 = (_QWORD *)(v54 + 8);
  if ((v52 & 1) != 0)
    v58 = v56;
  else
    v58 = v57;
  v59 = *v58 + 32 * v55;
  v60 = (void *)*(unsigned int *)(v53 + 88);
  if ((_DWORD)v60 != *(_DWORD *)(v59 + 20))
  {
    if ((*(_QWORD *)(v59 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v59, v60, v46, v47, v48, v49, v50, v51);
    else
      *(_DWORD *)(v59 + 20) = (_DWORD)v60;
  }
  if ((*(_QWORD *)(v59 + 8) & 0xFFFFD7FF00000008) != 0)
  {
    JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v43, 1, v47, v48, v49, v50, v51, (uint64_t)v228);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v229, v228, v176, v177, v178, v179, v180, v181);
  }
  v61 = &v214;
  v62 = *(_QWORD *)a2;
  v206 = v43;
  v203 = v41;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v184 = v39;
    v185 = v62 & 0xFFFFFFFF8;
    v186 = *(_QWORD *)(v62 & 0xFFFFFFFF8);
    if ((*(_QWORD *)a2 & 2) != 0
      || (v187 = *(unsigned int *)(v185 + 8), (_DWORD)v187 == 0x3FFFFFFF)
      || (_DWORD)v187 == -1)
    {
      v188 = 2;
    }
    else if (v187 >> 28)
    {
      v196 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v196 = v186;
      *(_DWORD *)(v196 + 8) = v187;
      v188 = 1;
      v186 = v196;
    }
    else
    {
      v188 = v186;
      v186 = v187 << 36;
    }
    v62 = v186 | v188;
    v39 = v184;
  }
  v227 = v62;
  v63 = JSC::DFG::SpeculativeJIT::recordCallSiteAndGenerateExceptionHandlingOSRExitIfNeeded(this, (const JSC::CodeOrigin *)&v227, *((unsigned int *)this + 1411), v47, v48, v49, v50, v51);
  v64 = 0;
  v65 = (char *)this + 4776;
  for (i = 15; i != -1; --i)
  {
    if ((char)i <= 15)
      v67 = i;
    else
      v67 = 0xFFFFFFFFLL;
    if (*(_DWORD *)&v65[12 * v67 + 8] || *(_DWORD *)&v65[12 * v67] != 0x3FFFFFFF)
    {
      if ((i & 0x40) != 0)
        goto LABEL_253;
      v64 |= 1 << i;
    }
  }
  v68 = (char *)this + 4968;
  for (j = 0x16u; j != -1; --j)
  {
    v70 = JSC::FPRInfo::toRegister::registerForIndex[j];
    v71 = JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v70];
    if (*(_DWORD *)&v68[12 * v71 + 8] || *(_DWORD *)&v68[12 * v71] != 0x3FFFFFFF)
    {
      v72 = v70 + 32;
      if ((v72 & 0x40) != 0)
        goto LABEL_253;
      v64 |= 1 << v72;
    }
  }
  v226[0] = v64 | 0xFF00FFFC0000;
  v226[1] = 0;
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    v73 = *((_QWORD *)this + 46);
    if (v73)
    {
      v74 = (unsigned int *)(v73 + 8);
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 + 1, v74));
    }
    v76 = WTF::fastMalloc((WTF *)0x90);
    *(_QWORD *)v76 = 2;
    *(_DWORD *)(v76 + 96) = 0;
    *(_OWORD *)(v76 + 12) = 0u;
    *(_OWORD *)(v76 + 28) = 0u;
    *(_DWORD *)(v76 + 44) = 0;
    *(_QWORD *)(v76 + 64) = 0;
    *(_QWORD *)(v76 + 72) = 0;
    *(_QWORD *)(v76 + 56) = 0;
    *(_QWORD *)(v76 + 104) = 0;
    *(_QWORD *)(v76 + 112) = -1;
    *(_WORD *)(v76 + 120) = -1;
    *(_DWORD *)(v76 + 122) = 0x10000;
    *(_BYTE *)(v76 + 126) = 0;
    *(_BYTE *)(v76 + 127) = BYTE12(xmmword_1ECF4C260);
    *(_BYTE *)(v76 + 128) = 0;
    *(_WORD *)(v76 + 129) &= 0xFC00u;
    *(_QWORD *)(v76 + 136) = 0;
    *(_QWORD *)(v76 + 136) = *(_QWORD *)(v73 + 184);
    *(_QWORD *)(v73 + 184) = v76;
    v77 = (unsigned int *)(v73 + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (v78 == 1)
    {
      atomic_store(1u, (unsigned int *)(v73 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v73 + 32))(v73);
    }
    v79 = 0;
    v80 = 0;
  }
  else
  {
    v80 = *((unsigned int *)this + 968);
    v76 = WTF::SegmentedVector<JSC::DFG::UnlinkedStructureStubInfo,8ul>::alloc<>((uint64_t)this + 3872);
    v79 = 2;
  }
  v81 = *((_QWORD *)this + 42);
  v82 = v62;
  v201 = v62;
  if ((v62 & 1) != 0)
  {
    v200 = v39;
    v189 = v37;
    v190 = v62 & 0xFFFFFFFF8;
    v191 = v62;
    v192 = *(_QWORD *)(v62 & 0xFFFFFFFF8);
    if ((v191 & 2) != 0
      || ((v193 = *(unsigned int *)(v190 + 8), (_DWORD)v193 != 0x3FFFFFFF) ? (v194 = (_DWORD)v193 == -1) : (v194 = 1),
          v194))
    {
      v195 = 2;
    }
    else
    {
      v205 = *((_QWORD *)this + 42);
      v199 = v79;
      if (v193 >> 28)
      {
        v197 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v197 = v192;
        *(_DWORD *)(v197 + 8) = v193;
        v195 = 1;
        v192 = v197;
      }
      else
      {
        v195 = v192;
        v192 = v193 << 36;
      }
      v79 = v199;
      v81 = v205;
    }
    v82 = v192 | v195;
    v37 = v189;
    v39 = v200;
  }
  v218 = v82;
  v83 = *((unsigned __int16 *)a2 + 9);
  v202 = v37;
  if (v83 == 6)
    goto LABEL_85;
  if (*((unsigned __int16 *)a2 + 9) <= 0x74u)
  {
    if ((v83 - 101) < 4)
      goto LABEL_191;
LABEL_216:
    __break(0xC471u);
    JUMPOUT(0x197B748E8);
  }
  v174 = v83 - 117;
  if ((v83 - 117) > 0x3C)
  {
LABEL_214:
    if (v83 == 391)
      goto LABEL_191;
    if (v83 != 253)
      goto LABEL_216;
LABEL_85:
    v84 = (char *)a2 + 72;
    goto LABEL_86;
  }
  if (((1 << v174) & 0x100000000000201FLL) == 0)
  {
    if (((1 << v174) & 0x4020) != 0)
      goto LABEL_85;
    goto LABEL_214;
  }
LABEL_191:
  v84 = (char *)a2 + 80;
LABEL_86:
  LOBYTE(v198) = v204;
  if (*v84)
    v85 = 26;
  else
    v85 = 25;
  JSC::JITDelByValGenerator::JITDelByValGenerator((uint64_t)&v219, v81, v76, v79, 0, &v218, v63, v85, (uint64_t)v226, v39, 0, v206, 0, v207, v198);
  if ((v218 & 1) != 0 && (v218 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v218 & 0xFFFFFFFF8, v86, v87, v88, v89, v90, v91, v92);
  v93 = *((unsigned __int16 *)a2 + 9);
  v94 = v207;
  if (v93 == 6)
    goto LABEL_91;
  if (*((unsigned __int16 *)a2 + 9) <= 0x74u)
  {
    if ((v93 - 101) < 4)
      goto LABEL_195;
LABEL_220:
    __break(0xC471u);
    JUMPOUT(0x197B7492CLL);
  }
  v175 = v93 - 117;
  if ((v93 - 117) > 0x3C)
  {
LABEL_218:
    if (v93 == 391)
      goto LABEL_195;
    if (v93 != 253)
      goto LABEL_220;
LABEL_91:
    v95 = (char *)a2 + 72;
    goto LABEL_92;
  }
  if (((1 << v175) & 0x100000000000201FLL) == 0)
  {
    if (((1 << v175) & 0x4020) != 0)
      goto LABEL_91;
    goto LABEL_218;
  }
LABEL_195:
  v95 = (char *)a2 + 80;
LABEL_92:
  if (*v95)
    v96 = operationDeleteByValSloppyOptimize;
  else
    v96 = operationDeleteByValStrictOptimize;
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) == 0)
  {
    JSC::JITInlineCacheGenerator::generateDFGDataICFastPath((uint64_t)&v219, (uint64_t)this, v80, (char)v204, v89, v90, v91, v92);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v215, (uint64_t *)&v229);
    v141 = v207;
    JSC::DFG::slowPathICCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>((uint64_t *)&v239, (uint64_t *)&v215, this, v80, v204, v204 | 0x3000000000, (uint64_t)v96, v207, v39, 0, v206, 0, v204);
    v117 = v239;
    v183 = v215;
    if (&v217 != (uint64_t *)v215 && v215)
    {
      v215 = 0;
      v216 = 0;
      WTF::fastFree((unint64_t)v183, v182, v130, v131, v132, v133, v134, v135);
    }
    v140 = v202;
    v106 = v206;
    goto LABEL_143;
  }
  JSC::JITDelByValGenerator::generateFastPath((JSC::JITDelByValGenerator *)&v219, this, v87, v88, v89, v90, v91, v92);
  v102 = v224;
  v213 = v224;
  v214 = v225;
  v103 = HIDWORD(v230);
  if (v224 == -1)
  {
    v106 = v206;
  }
  else
  {
    if (HIDWORD(v230) == (_DWORD)v230)
    {
      v104 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v229, (void *)(HIDWORD(v230) + 1), (unint64_t)&v213, v97, v98, v99, v100, v101);
      v61 = (uint64_t *)(v104 + 1);
      v102 = *v104;
      v103 = HIDWORD(v230);
    }
    v105 = (char *)v229 + 12 * v103;
    *(_DWORD *)v105 = v102;
    v106 = v206;
    *(_QWORD *)(v105 + 4) = *v61;
    v103 = ++HIDWORD(v230);
  }
  v107 = v103;
  v209 = (WTF *)v212;
  v210 = 2;
  v211 = v103;
  if (v103 < 3)
  {
    v109 = v212;
    goto LABEL_103;
  }
  if (v103 >= 0x15555556)
  {
LABEL_254:
    __break(0xC471u);
    JUMPOUT(0x197B74AB8);
  }
  v108 = 12 * v103;
  v109 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v103));
  v210 = (v108 & 0xFFFFFFFC) / 0xC;
  v209 = (WTF *)v109;
  v107 = HIDWORD(v230);
  v103 = HIDWORD(v230);
LABEL_103:
  if (v103)
  {
    v110 = v229;
    v111 = (WTF *)((char *)v229 + 12 * v107);
    do
    {
      *(_DWORD *)v109 = *(_DWORD *)v110;
      *(_QWORD *)(v109 + 4) = *(_QWORD *)((char *)v110 + 4);
      v110 = (WTF *)((char *)v110 + 12);
      v109 += 12;
    }
    while (v110 != v111);
  }
  v112 = *((_QWORD *)&v219 + 1);
  v113 = v211;
  v235 = v238;
  v236 = 2;
  v237 = v211;
  if (v211 < 3)
  {
    v114 = v238;
  }
  else
  {
    if (v211 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197B74AC0);
    }
    v114 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v211));
    v236 = 12 * v211 / 0xC;
    v235 = v114;
    v113 = v211;
  }
  if (v113)
  {
    v115 = v209;
    v116 = (WTF *)((char *)v209 + 12 * v113);
    do
    {
      *(_DWORD *)v114 = *(_DWORD *)v115;
      *(_QWORD *)(v114 + 4) = *(_QWORD *)((char *)v115 + 4);
      v115 = (WTF *)((char *)v115 + 12);
      v114 += 12;
    }
    while (v115 != v116);
  }
  v117 = WTF::fastMalloc((WTF *)0xB0);
  v118 = v237;
  v247 = v250;
  v248 = 2;
  v249 = v237;
  if (v237 < 3)
  {
    v119 = v96;
    v121 = v250;
  }
  else
  {
    if (v237 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197B74AC8);
    }
    v119 = v96;
    v120 = 12 * v237;
    v121 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v237));
    v248 = (v120 & 0xFFFFFFFC) / 0xC;
    v247 = v121;
    v118 = v237;
    v106 = v206;
  }
  if (v118)
  {
    v122 = v235;
    v123 = &v235[12 * v118];
    do
    {
      *(_DWORD *)v121 = *(_DWORD *)v122;
      *(_QWORD *)(v121 + 4) = *(_QWORD *)(v122 + 4);
      v122 += 12;
      v121 += 12;
    }
    while (v122 != v123);
  }
  v124 = v249;
  *(_QWORD *)&v239 = v240;
  DWORD2(v239) = 2;
  HIDWORD(v239) = v249;
  if (v249 < 3)
  {
    v126 = v240;
  }
  else
  {
    if (v249 >= 0x15555556)
    {
      __break(0xC471u);
      goto LABEL_258;
    }
    v125 = 12 * v249;
    v126 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v249));
    DWORD2(v239) = (v125 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)&v239 = v126;
    v124 = v249;
    v106 = v206;
  }
  if (v124)
  {
    v127 = v247;
    v128 = &v247[12 * v124];
    do
    {
      *(_DWORD *)v126 = *(_DWORD *)v127;
      *(_QWORD *)(v126 + 4) = *(_QWORD *)(v127 + 4);
      v127 += 12;
      v126 += 12;
    }
    while (v127 != v128);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(v117, (uint64_t *)&v239, this, 0, 0, v207);
  v136 = v239;
  if (v240 != (_BYTE *)v239 && (_QWORD)v239 != 0)
  {
    *(_QWORD *)&v239 = 0;
    DWORD2(v239) = 0;
    WTF::fastFree(v136, v129, v130, v131, v132, v133, v134, v135);
  }
  *(_QWORD *)v117 = &off_1E3572D00;
  *(_QWORD *)(v117 + 152) = v119;
  *(_BYTE *)(v117 + 160) = v39;
  *(_BYTE *)(v117 + 161) = v106;
  *(_QWORD *)(v117 + 168) = v112;
  v138 = (unint64_t)v247;
  if (v250 != v247 && v247)
  {
    v247 = 0;
    v248 = 0;
    WTF::fastFree(v138, v129, v130, v131, v132, v133, v134, v135);
  }
  v139 = (unint64_t)v235;
  v140 = v202;
  v141 = v207;
  if (v238 != v235 && v235)
  {
    v235 = 0;
    v236 = 0;
    WTF::fastFree(v139, v129, v130, v131, v132, v133, v134, v135);
  }
  v142 = v209;
  if (v212 == (_BYTE *)v209)
  {
    v94 = v207;
  }
  else
  {
    v94 = v207;
    if (v209)
    {
      v209 = 0;
      v210 = 0;
      WTF::fastFree((unint64_t)v142, v129, v130, v131, v132, v133, v134, v135);
    }
  }
LABEL_143:
  v239 = v219;
  v240[0] = v220;
  v143 = v221;
  v144 = v222;
  v241 = v221;
  v242 = v222;
  v145 = HIDWORD(v222);
  v146 = v223;
  v243 = v223;
  v147 = HIDWORD(v223);
  v148 = v224;
  v244 = v224;
  v149 = v225;
  v245 = v225;
  v246 = v117;
  v150 = *((unsigned int *)this + 589);
  if ((_DWORD)v150 == *((_DWORD *)this + 588))
  {
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITDelByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::InlineCacheWrapper<JSC::JITDelByIdGenerator>>((uint64_t)this + 2344, (unint64_t)&v239, v130, v131, v132, v133, v134, v135);
  }
  else
  {
    v151 = *((_QWORD *)this + 293) + (v150 << 6);
    v152 = v219;
    *(_BYTE *)(v151 + 16) = v220;
    *(_OWORD *)v151 = v152;
    *(_DWORD *)(v151 + 20) = v143;
    *(_DWORD *)(v151 + 24) = v144;
    *(_DWORD *)(v151 + 28) = v145;
    *(_DWORD *)(v151 + 32) = v146;
    *(_DWORD *)(v151 + 36) = v147;
    *(_DWORD *)(v151 + 40) = v148;
    *(_QWORD *)(v151 + 44) = v149;
    *(_QWORD *)(v151 + 56) = v117;
    ++*((_DWORD *)this + 589);
  }
  v208 = v117;
  v153 = (_QWORD *)((char *)this + 5656);
  v154 = *((unsigned int *)this + 1417);
  if ((_DWORD)v154 == *((_DWORD *)this + 1416))
  {
    v156 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v153, v154 + 1, (unint64_t)&v208);
    v154 = *((unsigned int *)this + 1417);
    v155 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v154);
    v117 = *v156;
  }
  else
  {
    v155 = (uint64_t *)(*v153 + 8 * v154);
    v156 = &v208;
  }
  *v156 = 0;
  *v155 = v117;
  *((_DWORD *)this + 1417) = v154 + 1;
  v157 = v208;
  v208 = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, v141, v141);
  JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v141, (uint64_t)a2, 21, 0, v158, v159, v160);
  if ((v201 & 1) != 0 && (v201 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v201 & 0xFFFFFFFF8, v161, v162, v163, v164, v165, v166, v167);
  v168 = v229;
  if (v231 != (_BYTE *)v229 && v229)
  {
    v229 = 0;
    LODWORD(v230) = 0;
    WTF::fastFree((unint64_t)v168, v161, v162, v163, v164, v165, v166, v167);
  }
  if (v94 != -1)
  {
    if (v141 > 15)
      v169 = -1;
    else
      v169 = v94;
    --*(_DWORD *)&v65[12 * v169 + 8];
  }
  if (v203)
  {
    if (v106 > 15)
      v170 = -1;
    else
      v170 = v106;
    --*(_DWORD *)&v65[12 * v170 + 8];
  }
  if (v140)
  {
    if (v39 > 15)
      v171 = -1;
    else
      v171 = v39;
    --*(_DWORD *)&v65[12 * v171 + 8];
  }
  if (v234)
  {
    if (v232)
    {
      v172 = (char)v233;
      if ((char)v233 != -1)
      {
        if ((char)v233 > 15)
          v172 = -1;
        --*(_DWORD *)(v232 + 12 * v172 + 4784);
      }
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculate(JSC::DFG::SpeculativeJIT *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch((a3 >> 50) & 0x3F)
  {
    case 0uLL:
    case 2uLL:
    case 7uLL:
    case 9uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x2EuLL:
    case 0x31uLL:
    case 0x34uLL:
      return;
    case 1uLL:
      JSC::DFG::SpeculativeJIT::speculateInt32((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 3uLL:
      JSC::DFG::SpeculativeJIT::speculateAnyInt(a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 4uLL:
      JSC::DFG::SpeculativeJIT::speculateNumber((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 5uLL:
      JSC::DFG::SpeculativeJIT::speculateRealNumber((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 6uLL:
      JSC::DFG::SpeculativeJIT::speculateBoolean((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 8uLL:
      JSC::DFG::SpeculativeJIT::speculateCell((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0xAuLL:
      JSC::DFG::SpeculativeJIT::speculateCellOrOther((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0xBuLL:
      JSC::DFG::SpeculativeJIT::speculateObject((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0xCuLL:
      JSC::DFG::SpeculativeJIT::speculateArray((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0xDuLL:
      JSC::DFG::SpeculativeJIT::speculateFunction((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0xEuLL:
      JSC::DFG::SpeculativeJIT::speculateFinalObject((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0xFuLL:
      JSC::DFG::SpeculativeJIT::speculatePromiseObject((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x10uLL:
      JSC::DFG::SpeculativeJIT::speculateRegExpObject((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x11uLL:
      JSC::DFG::SpeculativeJIT::speculateProxyObject((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x12uLL:
      JSC::DFG::SpeculativeJIT::speculateDerivedArray((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x13uLL:
      JSC::DFG::SpeculativeJIT::speculateObjectOrOther((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x14uLL:
      JSC::DFG::SpeculativeJIT::speculateStringIdent((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x15uLL:
      JSC::DFG::SpeculativeJIT::speculateString((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x16uLL:
      JSC::DFG::SpeculativeJIT::speculateStringOrOther((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x19uLL:
      JSC::DFG::SpeculativeJIT::speculateSymbol((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x1BuLL:
      JSC::DFG::SpeculativeJIT::speculateHeapBigInt((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x1DuLL:
      JSC::DFG::SpeculativeJIT::speculateDateObject((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x1EuLL:
      JSC::DFG::SpeculativeJIT::speculateMapObject((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x1FuLL:
      JSC::DFG::SpeculativeJIT::speculateSetObject((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x20uLL:
      JSC::DFG::SpeculativeJIT::speculateMapIteratorObject((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x21uLL:
      JSC::DFG::SpeculativeJIT::speculateSetIteratorObject((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x22uLL:
      JSC::DFG::SpeculativeJIT::speculateWeakMapObject((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x23uLL:
      JSC::DFG::SpeculativeJIT::speculateWeakSetObject((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x24uLL:
      JSC::DFG::SpeculativeJIT::speculateDataViewObject((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x25uLL:
      JSC::DFG::SpeculativeJIT::speculateStringObject((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x26uLL:
      JSC::DFG::SpeculativeJIT::speculateStringOrStringObject((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x27uLL:
      JSC::DFG::SpeculativeJIT::speculateNotStringVar((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x28uLL:
      JSC::DFG::SpeculativeJIT::speculateNotSymbol((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x29uLL:
    case 0x2AuLL:
      JSC::DFG::SpeculativeJIT::speculateNotCell((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x2BuLL:
      JSC::DFG::SpeculativeJIT::speculateNotDouble(a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x2CuLL:
      JSC::DFG::SpeculativeJIT::speculateNeitherDoubleNorHeapBigInt((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x2DuLL:
      JSC::DFG::SpeculativeJIT::speculateNeitherDoubleNorHeapBigIntNorString((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x2FuLL:
      JSC::DFG::SpeculativeJIT::speculateOther((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x30uLL:
      JSC::DFG::SpeculativeJIT::speculateMisc((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x32uLL:
      JSC::DFG::SpeculativeJIT::speculateDoubleRepReal((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    case 0x33uLL:
      JSC::DFG::SpeculativeJIT::speculateDoubleRepAnyInt((uint64_t)a1, a3, a3, a4, a5, a6, a7, a8);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197B74BF0);
  }
}

BOOL JSC::DFG::SpeculativeJIT::needsTypeCheck(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;

  v9 = *(_QWORD *)(a1 + 5616);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v12 = (uint64_t *)(v10 + 24);
  v13 = (uint64_t *)(v10 + 8);
  if ((a2 & 1) != 0)
    v13 = v12;
  v14 = *v13;
  v15 = *v13 + 32 * v11;
  v16 = *(_DWORD *)(v9 + 88);
  v17 = *(_DWORD *)(v15 + 20);
  if (v16 != v17)
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v17 ^ v16) >= 2)
      {
        v19 = *(_QWORD *)v15;
        if (*(_QWORD *)v15 != 4)
        {
          *(_QWORD *)v15 = v19 | 2;
          v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v19 & 1) != 0)
          {
            v23 = 2 * *v20;
            while (v23 * 4)
            {
              v24 = *(_QWORD *)&v20[v23];
              if ((*(_BYTE *)(v24 + 19) & 0xC) == 0)
              {
                v25 = *(_QWORD *)(v24 + 96);
                v26 = (v25 & 1) != 0 ? (v25 >> 1) & 3 : *(unsigned __int8 *)(v25 + 4);
                v23 -= 2;
                if (v26 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v20, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_18;
            }
          }
          else if (v20)
          {
            if ((*((_BYTE *)v20 + 19) & 0xC) != 0
              || ((v21 = *((_QWORD *)v20 + 12), (v21 & 1) != 0)
                ? (v22 = (v21 >> 1) & 3)
                : (v22 = *(unsigned __int8 *)(v21 + 4)),
                  v22 == 2))
            {
LABEL_18:
              *(_QWORD *)v15 = 4;
            }
          }
        }
        *(_DWORD *)(v14 + 32 * v11 + 16) = -21020677;
      }
      if ((v16 & 1) != 0)
        *(_QWORD *)v15 &= ~2uLL;
    }
    *(_DWORD *)(v15 + 20) = v16;
  }
  return (*(_QWORD *)(v15 + 8) & ~a3) != 0;
}

void JSC::DFG::slowPathICCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>(uint64_t *a1, uint64_t *a2, _DWORD *a3, int a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, int a10, char a11, int a12, char a13)
{
  uint64_t v19;
  char v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _BYTE *v26;
  WTF *v27;
  WTF *v28;
  unsigned int v29;
  int v30;
  _BYTE *v31;
  WTF *v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  WTF *v43;
  WTF *v45;
  unsigned int v46;
  _BYTE v47[24];
  WTF *v48;
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[24];
  WTF *v52;
  unsigned int v53;
  unsigned int v54;
  _BYTE v55[32];

  v19 = *((unsigned int *)a2 + 3);
  v45 = (WTF *)v47;
  v46 = v19;
  if (v19 < 3)
  {
    v20 = a5;
    v21 = v47;
    if (!(_DWORD)v19)
      goto LABEL_8;
  }
  else
  {
    if (v19 >= 0x15555556)
      goto LABEL_36;
    v20 = a5;
    v21 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v19));
    v45 = (WTF *)v21;
    LODWORD(v19) = *((_DWORD *)a2 + 3);
    if (!(_DWORD)v19)
      goto LABEL_8;
  }
  v22 = *a2;
  v23 = *a2 + 12 * v19;
  do
  {
    *(_DWORD *)v21 = *(_DWORD *)v22;
    *(_QWORD *)(v21 + 4) = *(_QWORD *)(v22 + 4);
    v22 += 12;
    v21 += 12;
  }
  while (v22 != v23);
LABEL_8:
  v24 = WTF::fastMalloc((WTF *)0xB8);
  v25 = v46;
  v48 = (WTF *)v51;
  v49 = 2;
  v50 = v46;
  if (v46 < 3)
  {
    v26 = v51;
  }
  else
  {
    if (v46 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197B751A0);
    }
    v26 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v46));
    v49 = 12 * v46 / 0xC;
    v48 = (WTF *)v26;
    v25 = v46;
  }
  if (v25)
  {
    v27 = v45;
    v28 = (WTF *)((char *)v45 + 12 * v25);
    do
    {
      *(_DWORD *)v26 = *(_DWORD *)v27;
      *(_QWORD *)(v26 + 4) = *(_QWORD *)((char *)v27 + 4);
      v27 = (WTF *)((char *)v27 + 12);
      v26 += 12;
    }
    while (v27 != v28);
  }
  v29 = v50;
  v52 = (WTF *)v55;
  v53 = 2;
  v54 = v50;
  if (v50 >= 3)
  {
    if (v50 < 0x15555556)
    {
      v30 = 12 * v50;
      v31 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v50));
      v53 = (v30 & 0xFFFFFFFC) / 0xC;
      v52 = (WTF *)v31;
      v29 = v50;
      goto LABEL_19;
    }
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x197B75198);
  }
  v31 = v55;
LABEL_19:
  if (v29)
  {
    v32 = v48;
    v33 = (WTF *)((char *)v48 + 12 * v29);
    do
    {
      *(_DWORD *)v31 = *(_DWORD *)v32;
      *(_QWORD *)(v31 + 4) = *(_QWORD *)((char *)v32 + 4);
      v32 = (WTF *)((char *)v32 + 12);
      v31 += 12;
    }
    while (v32 != v33);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(v24, (uint64_t *)&v52, a3, 0, 0, a8);
  v41 = v52;
  if (v55 != (_BYTE *)v52 && v52 != 0)
  {
    v52 = 0;
    v53 = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  *(_QWORD *)v24 = &off_1E3572CA0;
  *(_BYTE *)(v24 + 152) = v20;
  *(_QWORD *)(v24 + 156) = a6;
  *(_QWORD *)(v24 + 168) = a7;
  *(_BYTE *)(v24 + 176) = a9;
  *(_BYTE *)(v24 + 177) = a11;
  *(_BYTE *)(v24 + 178) = a13;
  *(_DWORD *)(v24 + 180) = a4;
  *a1 = v24;
  v43 = v48;
  if (v51 != (_BYTE *)v48 && v48)
  {
    v48 = 0;
    v49 = 0;
    WTF::fastFree((unint64_t)v43, v34, v35, v36, v37, v38, v39, v40);
  }
  if (v47 != (_BYTE *)v45)
  {
    if (v45)
      WTF::fastFree((unint64_t)v45, v34, v35, v36, v37, v38, v39, v40);
  }
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int *v12;
  unsigned int v13;
  JSC::AssemblerBuffer *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  __int16 *v38;
  int v39;
  char *v40;
  int *v41;
  int *v42;
  uint64_t v43;
  unsigned int v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  int *v59;
  int *v60;
  JSC::AssemblerBuffer *v61;
  unsigned int v62;
  unsigned int v63;
  __int16 v64;
  _BYTE v65[6];

  v11 = (uint64_t)a2;
  v12 = a1;
  if (a6 == 1)
  {
    if (a7 == 2)
      goto LABEL_61;
    v13 = 0;
    goto LABEL_6;
  }
  v64 = a6 | 0x100;
  v13 = 1;
  v62 = 1;
  if (a7 != 2)
  {
LABEL_6:
    *(_WORD *)&v65[2 * v13++ - 2] = a7 | 0x200;
    v62 = v13;
  }
  v14 = (JSC::AssemblerBuffer *)(a2 + 14);
  do
  {
    v15 = 0;
    v16 = 0;
    v17 = v13;
    do
    {
      if ((v65[v15 - 1] & 0x40) != 0)
      {
LABEL_64:
        __break(1u);
        if (a1)
          WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_61;
      }
      v16 |= 1 << v65[v15 - 1];
      v15 += 2;
    }
    while (2 * v13 != v15);
    v18 = 0;
    do
    {
      v19 = v65[v18 - 2] & 0x7F;
      if (v19 >= 0x40)
        goto LABEL_64;
      v16 &= ~(1 << v19);
      v18 += 2;
    }
    while (2 * v13 != v18);
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v20.i16[0] = vaddlv_u8(v20);
    v21 = v20.i32[0];
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.i32[0] + v21)
    {
      v23 = 0;
      if (v13 <= 1)
        v24 = 1;
      else
        v24 = v13;
      v25 = 2 * v24;
      while (1)
      {
        v26 = v65[v23 - 1];
        if ((v26 & 0x7Fu) >= 0x40)
          goto LABEL_64;
        if (((v16 >> (v26 & 0x7F)) & 1) != 0)
          break;
        v23 += 2;
        if (v25 == v23)
          goto LABEL_58;
      }
      v27 = v65[v23 - 2];
      if (v27 != v26)
      {
        v28 = (char)v27;
        if ((char)v27 == 63)
        {
          v29 = *(_DWORD *)(v11 + 200);
          v30 = *(_DWORD *)(v11 + 192);
          if (v26 == 31)
            goto LABEL_52;
          v32 = v26 & 0x1F | 0xD2800000;
        }
        else
        {
          v29 = *(_DWORD *)(v11 + 200);
          v30 = *(_DWORD *)(v11 + 192);
          v31 = (char)v26 == 31 || v28 == 31;
          if (!v31)
          {
            v32 = v26 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v32 = (char)v26 | (32 * v28) | 0x91000000;
        }
LABEL_53:
        if (v29 + 4 > v30)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v29 = *(_DWORD *)(v11 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v11 + 56) + v29) = v32;
        *(_DWORD *)(v11 + 200) += 4;
        v17 = v62;
      }
      a1 = (int *)memmove(&v65[v23 - 2], &v65[v23], 2 * v17 - v23 - 2);
      v13 = v62 - 1;
      goto LABEL_57;
    }
    v61 = v14;
    v33 = HIBYTE(v64);
    v34 = v64;
    JSC::MacroAssemblerARM64::swap(v11, (char)v64, SHIBYTE(v64), a4, a5, a6, a7, a8);
    memmove(&v64, v65, 2 * v62 - 2);
    v35 = v62 - 1;
    v31 = v62 == 1;
    v63 = v35;
    v36 = (int *)&v64;
    a1 = (int *)&v65[2 * v35 - 2];
    if (v31)
    {
      v43 = 0;
      v44 = 0;
      v39 = 0;
      a2 = a1;
    }
    else
    {
      v37 = 2 * v35;
      v38 = &v64;
      while (*(unsigned __int8 *)v38 != v33)
      {
        ++v38;
        v37 -= 2;
        if (!v37)
          goto LABEL_36;
      }
      *(_BYTE *)v38 = v34;
LABEL_36:
      v39 = 0;
      v40 = (char *)&v64;
      a2 = a1;
      v41 = a1;
      do
      {
        if (*(unsigned __int8 *)v36 == *((unsigned __int8 *)v36 + 1))
        {
          v42 = v36;
          if (v41 != (int *)&v65[2 * v63 - 2])
          {
            v60 = a1;
            if (v36 == a2)
            {
              v42 = v41;
            }
            else
            {
              v58 = v40 - (char *)a2;
              v59 = v41;
              memmove(v41, a2, v40 - (char *)a2);
              v42 = (int *)((char *)v59 + v58);
            }
            a1 = v60;
          }
          a2 = (int *)((char *)v36 + 2);
          ++v39;
          v41 = v42;
        }
        v36 = (int *)((char *)v36 + 2);
        v40 += 2;
      }
      while (v36 < a1);
      v43 = v63;
      v44 = v63;
      a1 = v41;
    }
    v45 = (int *)&v65[2 * v43 - 2];
    v14 = v61;
    if (a2 != v45)
    {
      a1 = (int *)memmove(a1, a2, (char *)v45 - (char *)a2);
      v44 = v63;
    }
    v13 = v44 - v39;
LABEL_57:
    v62 = v13;
LABEL_58:
    ;
  }
  while (v13);
LABEL_61:
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v11, a5, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v11, (a4 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v11, a3, v46, v47, v48, v49, v50, v51, v12);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v11, 1, v52, v53, v54, v55, v56, v57);
}

void JSC::DFG::SpeculativeJIT::compileInById(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unsigned __int8 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t i;
  uint64_t v26;
  char *v27;
  uint64_t j;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  char v50;
  char *v51;
  unsigned int v52;
  int v53;
  _DWORD *v54;
  WTF *v55;
  WTF *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  _BYTE *v60;
  WTF *v61;
  WTF *v62;
  unsigned int v63;
  int v64;
  _BYTE *v65;
  _BYTE *v66;
  _BYTE *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v77;
  WTF *v79;
  char v80;
  unint64_t v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  __int16 v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  int v98;
  char v99;
  int v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  WTF *v105;
  char v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  unint64_t v131;
  unsigned int v132;
  unsigned __int8 v133;
  uint64_t v134;
  WTF *v135;
  unsigned int v136;
  unsigned int v137;
  _DWORD v138[8];
  uint64_t v139;
  WTF *v140;
  int v141;
  uint64_t v142;
  WTF *v143;
  uint64_t v144;
  _BYTE v145[24];
  uint64_t v146;
  __int128 v147;
  char v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  __int16 v152;
  int v153;
  uint64_t v154;
  _QWORD v155[2];
  uint64_t v156;
  uint64_t v157;
  char v158;
  char v159;
  uint64_t v160;
  unsigned __int8 v161;
  char v162;
  __int128 v163;
  _BYTE v164[4];
  int v165;
  uint64_t v166;
  uint64_t v167;
  __int16 v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  _BYTE *v172;
  unsigned int v173;
  unsigned int v174;
  _BYTE v175[40];

  LOBYTE(v160) = 0;
  v162 = 0;
  LOBYTE(v157) = 0;
  v159 = 0;
  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_115;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_158;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_115:
    v12 = -1;
  v13 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v13 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_153;
  }
  if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v13 + 8) == 1)
  {
    if (v12 == -1)
      v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    if (v12 > 15)
      v50 = -1;
    else
      v50 = v12;
    ++*((_DWORD *)this + 3 * v50 + 1196);
    v14 = v12;
  }
  else
  {
    v14 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = -1;
  v132 = 255;
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
    goto LABEL_9;
  *(_QWORD *)&v163 = this;
  std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v160, (JSC::DFG::SpeculativeJIT **)&v163, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)&v163 = this;
  std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v157, (JSC::DFG::SpeculativeJIT **)&v163, v109, v110, v111, v112, v113, v114);
  if (!v162 || !v159)
  {
LABEL_153:
    __break(1u);
    goto LABEL_154;
  }
  v132 = v161;
  v15 = v158;
LABEL_9:
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::use((uint64_t *)this, (JSC::DFG::Node *)(v10 & 0xFF00FFFFFFFFFFFFLL), a3, a4, a5, a6, a7, a8);
  v21 = *(_QWORD *)a2;
  v129 = v15;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v116 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
    if ((v21 & 2) != 0
      || (v117 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v117 == 0x3FFFFFFF)
      || (_DWORD)v117 == -1)
    {
      v118 = 2;
    }
    else if (v117 >> 28)
    {
      v125 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v125 = v116;
      *(_DWORD *)(v125 + 8) = v117;
      v118 = 1;
      v116 = v125;
    }
    else
    {
      v118 = v116;
      v116 = v117 << 36;
    }
    v21 = v116 | v118;
  }
  v156 = v21;
  v22 = JSC::DFG::SpeculativeJIT::recordCallSiteAndGenerateExceptionHandlingOSRExitIfNeeded(this, (const JSC::CodeOrigin *)&v156, *((unsigned int *)this + 1411), v16, v17, v18, v19, v20);
  v23 = 0;
  v24 = (char *)this + 4776;
  for (i = 15; i != -1; --i)
  {
    if ((char)i <= 15)
      v26 = i;
    else
      v26 = 0xFFFFFFFFLL;
    if (*(_DWORD *)&v24[12 * v26 + 8] || *(_DWORD *)&v24[12 * v26] != 0x3FFFFFFF)
    {
      if ((i & 0x40) != 0)
        goto LABEL_153;
      v23 |= 1 << i;
    }
  }
  v27 = (char *)this + 4968;
  for (j = 0x16u; j != -1; --j)
  {
    v29 = JSC::FPRInfo::toRegister::registerForIndex[j];
    v30 = JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v29];
    if (*(_DWORD *)&v27[12 * v30 + 8] || *(_DWORD *)&v27[12 * v30] != 0x3FFFFFFF)
    {
      v31 = v29 + 32;
      if ((v31 & 0x40) != 0)
        goto LABEL_153;
      v23 |= 1 << v31;
    }
  }
  v155[0] = v23 | 0xFF00FFFC0000;
  v155[1] = 0;
  v133 = v14;
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    v32 = *((_QWORD *)this + 46);
    if (v32)
    {
      v33 = (unsigned int *)(v32 + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 + 1, v33));
    }
    v35 = WTF::fastMalloc((WTF *)0x90);
    *(_QWORD *)v35 = 2;
    *(_DWORD *)(v35 + 96) = 0;
    *(_OWORD *)(v35 + 12) = 0u;
    *(_OWORD *)(v35 + 28) = 0u;
    *(_DWORD *)(v35 + 44) = 0;
    *(_QWORD *)(v35 + 64) = 0;
    *(_QWORD *)(v35 + 72) = 0;
    *(_QWORD *)(v35 + 56) = 0;
    *(_QWORD *)(v35 + 104) = 0;
    *(_QWORD *)(v35 + 112) = -1;
    *(_WORD *)(v35 + 120) = -1;
    *(_DWORD *)(v35 + 122) = 0x10000;
    *(_BYTE *)(v35 + 126) = 0;
    *(_BYTE *)(v35 + 127) = BYTE12(xmmword_1ECF4C260);
    *(_BYTE *)(v35 + 128) = 0;
    *(_WORD *)(v35 + 129) &= 0xFC00u;
    *(_QWORD *)(v35 + 136) = 0;
    *(_QWORD *)(v35 + 136) = *(_QWORD *)(v32 + 184);
    *(_QWORD *)(v32 + 184) = v35;
    v36 = (unsigned int *)(v32 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (v37 == 1)
    {
      atomic_store(1u, (unsigned int *)(v32 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
    }
    v38 = 0;
    v128 = 0;
  }
  else
  {
    v128 = *((unsigned int *)this + 968);
    v35 = WTF::SegmentedVector<JSC::DFG::UnlinkedStructureStubInfo,8ul>::alloc<>((uint64_t)this + 3872);
    v38 = 2;
  }
  v131 = v10 & 0xFF00FFFFFFFFFFFFLL;
  v39 = *((_QWORD *)this + 42);
  v40 = v21;
  v130 = v21;
  if ((v21 & 1) != 0)
  {
    v119 = v21 & 0xFFFFFFFF8;
    v120 = v21;
    v121 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
    if ((v120 & 2) != 0
      || ((v122 = *(unsigned int *)(v119 + 8), (_DWORD)v122 != 0x3FFFFFFF) ? (v123 = (_DWORD)v122 == -1) : (v123 = 1),
          v123))
    {
      v124 = 2;
    }
    else if (v122 >> 28)
    {
      v126 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v126 = v121;
      *(_DWORD *)(v126 + 8) = v122;
      v124 = 1;
      v121 = v126;
    }
    else
    {
      v124 = v121;
      v121 = v122 << 36;
    }
    v40 = v121 | v124;
  }
  v146 = v40;
  v41 = JSC::DFG::Node::cacheableIdentifier(a2);
  LOBYTE(v127) = v132;
  JSC::JITInByIdGenerator::JITInByIdGenerator((uint64_t)&v147, v39, v35, v38, 0, &v146, v22, (uint64_t)v155, v41, v12, v133, v127);
  if ((v146 & 1) != 0 && (v146 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v146 & 0xFFFFFFFF8, v42, v43, v44, v45, v46, v47, v48);
  v143 = (WTF *)v145;
  v144 = 2;
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    JSC::JITByIdGenerator::generateFastCommon((JSC::JITByIdGenerator *)&v147, this, 40, v44, v45, v46, v47, v48);
    v138[7] = v153;
    v139 = v154;
    v49 = HIDWORD(v144);
    if (v153 != -1)
    {
      v51 = (char *)v143 + 12 * HIDWORD(v144);
      *(_DWORD *)v51 = v153;
      *(_QWORD *)(v51 + 4) = v139;
      v49 = ++HIDWORD(v144);
    }
    v52 = v49;
    v135 = (WTF *)v138;
    v136 = 2;
    v137 = v49;
    if (v49 < 3)
    {
      v54 = v138;
    }
    else
    {
      if (v49 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197B76160);
      }
      v53 = 12 * v49;
      v54 = (_DWORD *)WTF::fastMalloc((WTF *)(12 * v49));
      v136 = (v53 & 0xFFFFFFFC) / 0xC;
      v135 = (WTF *)v54;
      v52 = HIDWORD(v144);
      v49 = HIDWORD(v144);
    }
    if (v49)
    {
      v55 = v143;
      v56 = (WTF *)((char *)v143 + 12 * v52);
      do
      {
        *v54 = *(_DWORD *)v55;
        *(_QWORD *)(v54 + 1) = *(_QWORD *)((char *)v55 + 4);
        v55 = (WTF *)((char *)v55 + 12);
        v54 += 3;
      }
      while (v55 != v56);
    }
    v57 = *((_QWORD *)&v147 + 1);
    v58 = WTF::fastMalloc((WTF *)0xB0);
    v59 = v137;
    v172 = v175;
    v173 = 2;
    v174 = v137;
    if (v137 < 3)
    {
      v60 = v175;
    }
    else
    {
      if (v137 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197B76168);
      }
      v60 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v137));
      v173 = 12 * v137 / 0xC;
      v172 = v60;
      v59 = v137;
    }
    if (v59)
    {
      v61 = v135;
      v62 = (WTF *)((char *)v135 + 12 * v59);
      do
      {
        *(_DWORD *)v60 = *(_DWORD *)v61;
        *(_QWORD *)(v60 + 4) = *(_QWORD *)((char *)v61 + 4);
        v61 = (WTF *)((char *)v61 + 12);
        v60 += 12;
      }
      while (v61 != v62);
    }
    v63 = v174;
    *(_QWORD *)&v163 = v164;
    DWORD2(v163) = 2;
    HIDWORD(v163) = v174;
    if (v174 < 3)
    {
      v65 = v164;
      goto LABEL_62;
    }
    if (v174 < 0x15555556)
    {
      v64 = 12 * v174;
      v65 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v174));
      DWORD2(v163) = (v64 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)&v163 = v65;
      v63 = v174;
LABEL_62:
      if (v63)
      {
        v66 = v172;
        v67 = &v172[12 * v63];
        do
        {
          *(_DWORD *)v65 = *(_DWORD *)v66;
          *(_QWORD *)(v65 + 4) = *(_QWORD *)(v66 + 4);
          v66 += 12;
          v65 += 12;
        }
        while (v66 != v67);
      }
      JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::JSValueRegs>::CallSlowPathGenerator(v58, (uint64_t *)&v163, this, 0, 0, v133);
      v75 = v163;
      if (v164 != (_BYTE *)v163 && (_QWORD)v163 != 0)
      {
        *(_QWORD *)&v163 = 0;
        DWORD2(v163) = 0;
        WTF::fastFree(v75, v68, v69, v70, v71, v72, v73, v74);
      }
      *(_QWORD *)v58 = &off_1E3572D90;
      *(_QWORD *)(v58 + 152) = operationInByIdOptimize;
      *(_BYTE *)(v58 + 160) = v12;
      *(_QWORD *)(v58 + 168) = v57;
      v77 = (unint64_t)v172;
      if (v175 != v172 && v172 != 0)
      {
        v172 = 0;
        v173 = 0;
        WTF::fastFree(v77, v68, v69, v70, v71, v72, v73, v74);
      }
      v79 = v135;
      v80 = v133;
      if (v138 == (_DWORD *)v135)
      {
        v81 = v131;
      }
      else
      {
        v81 = v131;
        if (v135)
        {
          v135 = 0;
          v136 = 0;
          WTF::fastFree((unint64_t)v79, v68, v69, v70, v71, v72, v73, v74);
        }
      }
      goto LABEL_78;
    }
    __break(0xC471u);
LABEL_158:
    JUMPOUT(0x197B76148);
  }
  JSC::JITInByIdGenerator::generateDFGDataICFastPath((uint64_t)&v147, (uint64_t)this, v128, v12, v133, (char)v132, v129, v48);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v140, (uint64_t *)&v143);
  JSC::DFG::slowPathICCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>((uint64_t *)&v163, (uint64_t *)&v140, this, v128, v132, v132 | 0x3000000000, v133, v12, v132);
  v58 = v163;
  v115 = v140;
  v80 = v133;
  if (&v142 != (uint64_t *)v140 && v140)
  {
    v140 = 0;
    v141 = 0;
    WTF::fastFree((unint64_t)v115, v68, v69, v70, v71, v72, v73, v74);
  }
  v81 = v131;
LABEL_78:
  v163 = v147;
  v164[0] = v148;
  v82 = v149;
  v83 = v150;
  v165 = v149;
  v166 = v150;
  v84 = HIDWORD(v150);
  v85 = v151;
  v167 = v151;
  v86 = HIDWORD(v151);
  v87 = v152;
  v168 = v152;
  v88 = v153;
  v169 = v153;
  v89 = v154;
  v170 = v154;
  v171 = v58;
  v90 = *((unsigned int *)this + 657);
  if ((_DWORD)v90 == *((_DWORD *)this + 656))
  {
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITInByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::InlineCacheWrapper<JSC::JITInByIdGenerator>>((uint64_t)this + 2616, (unint64_t)&v163);
  }
  else
  {
    v91 = *((_QWORD *)this + 327) + (v90 << 6);
    v92 = v147;
    *(_BYTE *)(v91 + 16) = v148;
    *(_OWORD *)v91 = v92;
    *(_DWORD *)(v91 + 20) = v82;
    *(_DWORD *)(v91 + 24) = v83;
    *(_DWORD *)(v91 + 28) = v84;
    *(_DWORD *)(v91 + 32) = v85;
    *(_DWORD *)(v91 + 36) = v86;
    *(_WORD *)(v91 + 40) = v87;
    *(_DWORD *)(v91 + 44) = v88;
    *(_QWORD *)(v91 + 48) = v89;
    *(_QWORD *)(v91 + 56) = v58;
    ++*((_DWORD *)this + 657);
  }
  v134 = v58;
  v93 = (_QWORD *)((char *)this + 5656);
  v94 = *((unsigned int *)this + 1417);
  if ((_DWORD)v94 == *((_DWORD *)this + 1416))
  {
    v96 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v94 + 1, (unint64_t)&v134);
    v94 = *((unsigned int *)this + 1417);
    v95 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v94);
    v58 = *v96;
  }
  else
  {
    v95 = (uint64_t *)(*v93 + 8 * v94);
    v96 = &v134;
  }
  *v96 = 0;
  *v95 = v58;
  *((_DWORD *)this + 1417) = v94 + 1;
  v97 = v134;
  v134 = 0;
  if (v97)
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  v98 = *((_DWORD *)a2 + 12);
  if (v80 > 15)
    v99 = -1;
  else
    v99 = v80;
  v100 = v99;
  v101 = &v24[12 * v99];
  *(_DWORD *)v101 = v98;
  *((_DWORD *)v101 + 1) = 4;
  v102 = ~v98;
  if (v102 >= *((unsigned int *)this + 1001))
  {
LABEL_154:
    __break(0xC471u);
    JUMPOUT(0x197B76158);
  }
  v103 = *((_QWORD *)this + 499) + 24 * (int)v102;
  v104 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v103 = a2;
  *(_DWORD *)(v103 + 8) = v104;
  *(_BYTE *)(v103 + 17) = v80;
  *(_DWORD *)(v103 + 12) = 21;
  *(_BYTE *)(v103 + 16) = 0;
  v105 = v143;
  if (v145 != (_BYTE *)v143 && v143)
  {
    v143 = 0;
    LODWORD(v144) = 0;
    WTF::fastFree((unint64_t)v105, v68, v69, v70, v71, v72, v73, v74);
  }
  if ((v130 & 1) != 0 && (v130 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v130 & 0xFFFFFFFF8, v68, v69, v70, v71, v72, v73, v74);
  if (v80 != -1)
    --*(_DWORD *)&v24[12 * v100 + 8];
  if (v81)
  {
    if (v12 > 15)
      v106 = -1;
    else
      v106 = v12;
    --*(_DWORD *)&v24[12 * v106 + 8];
  }
  if (v159)
  {
    if (v157)
    {
      v107 = v158;
      if (v158 != -1)
      {
        if (v158 > 15)
          v107 = -1;
        --*(_DWORD *)(v157 + 12 * v107 + 4784);
      }
    }
  }
  if (v162)
  {
    if (v160)
    {
      v108 = (char)v161;
      if ((char)v161 != -1)
      {
        if ((char)v161 > 15)
          v108 = -1;
        --*(_DWORD *)(v160 + 12 * v108 + 4784);
      }
    }
  }
}

void JSC::DFG::slowPathICCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>(uint64_t *a1, uint64_t *a2, _DWORD *a3, int a4, char a5, uint64_t a6, char a7, char a8, char a9)
{
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _BYTE *v22;
  WTF *v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  WTF *v35;
  unsigned int v36;
  _BYTE v37[24];
  WTF *v38;
  unsigned int v39;
  unsigned int v40;
  _BYTE v41[24];

  v16 = WTF::fastMalloc((WTF *)0xB8);
  v17 = *((unsigned int *)a2 + 3);
  v35 = (WTF *)v37;
  v36 = v17;
  if (v17 < 3)
  {
    v18 = v37;
    if (!(_DWORD)v17)
      goto LABEL_8;
  }
  else
  {
    if (v17 >= 0x15555556)
      goto LABEL_24;
    v18 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v17));
    v35 = (WTF *)v18;
    LODWORD(v17) = *((_DWORD *)a2 + 3);
    if (!(_DWORD)v17)
      goto LABEL_8;
  }
  v19 = *a2;
  v20 = *a2 + 12 * v17;
  do
  {
    *(_DWORD *)v18 = *(_DWORD *)v19;
    *(_QWORD *)(v18 + 4) = *(_QWORD *)(v19 + 4);
    v19 += 12;
    v18 += 12;
  }
  while (v19 != v20);
LABEL_8:
  v21 = v36;
  v38 = (WTF *)v41;
  v39 = 2;
  v40 = v36;
  if (v36 >= 3)
  {
    if (v36 < 0x15555556)
    {
      v22 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v36));
      v39 = 12 * v36 / 0xC;
      v38 = (WTF *)v22;
      v21 = v36;
      goto LABEL_12;
    }
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x197B763A4);
  }
  v22 = v41;
LABEL_12:
  if (v21)
  {
    v23 = v35;
    v24 = (WTF *)((char *)v35 + 12 * v21);
    do
    {
      *(_DWORD *)v22 = *(_DWORD *)v23;
      *(_QWORD *)(v22 + 4) = *(_QWORD *)((char *)v23 + 4);
      v23 = (WTF *)((char *)v23 + 12);
      v22 += 12;
    }
    while (v23 != v24);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::JSValueRegs>::CallSlowPathGenerator(v16, (uint64_t *)&v38, a3, 0, 0, a7);
  v32 = v38;
  if (v41 != (_BYTE *)v38 && v38 != 0)
  {
    v38 = 0;
    v39 = 0;
    WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
  }
  *(_QWORD *)v16 = &off_1E3572D30;
  *(_BYTE *)(v16 + 152) = a5;
  *(_QWORD *)(v16 + 156) = a6;
  *(_QWORD *)(v16 + 168) = operationInByIdOptimize;
  *(_BYTE *)(v16 + 176) = a8;
  *(_BYTE *)(v16 + 177) = a9;
  *(_DWORD *)(v16 + 180) = a4;
  if (v37 != (_BYTE *)v35 && v35)
    WTF::fastFree((unint64_t)v35, v25, v26, v27, v28, v29, v30, v31);
  *a1 = v16;
}

void JSC::DFG::SpeculativeJIT::compileInByVal(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t i;
  uint64_t v35;
  char *v36;
  uint64_t j;
  uint64_t v38;
  unsigned int v39;
  char v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  _DWORD *v63;
  uint64_t *v64;
  int v65;
  _DWORD *v66;
  uint64_t *v67;
  JSC::DFG::Node *v68;
  char v69;
  char v70;
  _DWORD *v71;
  unsigned int v72;
  int v73;
  _BYTE *v74;
  WTF *v75;
  WTF *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  unint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  int v102;
  char v103;
  int v104;
  char *v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  WTF *v109;
  unsigned int v110;
  char v111;
  char v112;
  WTF *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  JSC::DFG::Node *v129;
  unsigned int v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  WTF *v134;
  unsigned int v135;
  unsigned int v136;
  _BYTE v137[28];
  int v138;
  uint64_t v139;
  WTF *v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  char v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  _QWORD v151[2];
  uint64_t v152;
  WTF *v153;
  uint64_t v154;
  _BYTE v155[24];
  uint64_t v156;
  unsigned __int8 v157;
  char v158;
  uint64_t v159[2];
  __int16 v160;
  uint64_t (*v161)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, int8x8_t);
  _DWORD *v162;
  char v163;
  char v164;
  char v165;
  __int128 v166;
  char v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_101;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_142;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_101:
    v12 = -1;
  v13 = *((_QWORD *)a2 + 4);
  v14 = v13 & 0xFF00FFFFFFFFFFFFLL;
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_98;
  v15 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197B76E4CLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12))
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
  else
LABEL_98:
    v16 = -1;
  v17 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v17 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_139;
  }
  if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v17 + 8) == 1)
  {
    if (v16 == -1)
      v16 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
    if (v16 > 15)
      v18 = -1;
    else
      v18 = v16;
    ++*((_DWORD *)this + 3 * v18 + 1196);
    v132 = v16;
  }
  else
  {
    v132 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  LOBYTE(v156) = 0;
  v158 = 0;
  v130 = 255;
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
    goto LABEL_18;
  *(_QWORD *)&v166 = this;
  std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v156, (JSC::DFG::SpeculativeJIT **)&v166, a3, a4, a5, a6, a7, a8);
  if (!v158)
  {
LABEL_139:
    __break(1u);
    goto LABEL_140;
  }
  v130 = v157;
LABEL_18:
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  if (v16 == -1)
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::use((uint64_t *)this, (JSC::DFG::Node *)(v10 & 0xFF00FFFFFFFFFFFFLL), a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::use((uint64_t *)this, (JSC::DFG::Node *)(v13 & 0xFF00FFFFFFFFFFFFLL), v19, v20, v21, v22, v23, v24);
  v153 = (WTF *)v155;
  v154 = 2;
  v30 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v114 = *(_QWORD *)(v30 & 0xFFFFFFFF8);
    if ((v30 & 2) != 0
      || (v115 = *(unsigned int *)((v30 & 0xFFFFFFFF8) + 8), (_DWORD)v115 == 0x3FFFFFFF)
      || (_DWORD)v115 == -1)
    {
      v116 = 2;
    }
    else if (v115 >> 28)
    {
      v121 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v121 = v114;
      *(_DWORD *)(v121 + 8) = v115;
      v116 = 1;
      v114 = v121;
    }
    else
    {
      v116 = v114;
      v114 = v115 << 36;
    }
    v30 = v114 | v116;
  }
  v152 = v30;
  v31 = JSC::DFG::SpeculativeJIT::recordCallSiteAndGenerateExceptionHandlingOSRExitIfNeeded(this, (const JSC::CodeOrigin *)&v152, *((unsigned int *)this + 1411), v25, v26, v27, v28, v29);
  v32 = 0;
  v33 = (char *)this + 4776;
  for (i = 15; i != -1; --i)
  {
    if ((char)i <= 15)
      v35 = i;
    else
      v35 = 0xFFFFFFFFLL;
    if (*(_DWORD *)&v33[12 * v35 + 8] || *(_DWORD *)&v33[12 * v35] != 0x3FFFFFFF)
    {
      if ((i & 0x40) != 0)
        goto LABEL_139;
      v32 |= 1 << i;
    }
  }
  v36 = (char *)this + 4968;
  for (j = 0x16u; j != -1; --j)
  {
    v38 = JSC::FPRInfo::toRegister::registerForIndex[j];
    v39 = JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v38];
    if (*(_DWORD *)&v36[12 * v39 + 8] || *(_DWORD *)&v36[12 * v39] != 0x3FFFFFFF)
    {
      v40 = v38 + 32;
      if ((v40 & 0x40) != 0)
        goto LABEL_139;
      v32 |= 1 << v40;
    }
  }
  v127 = v14;
  v128 = v10 & 0xFF00FFFFFFFFFFFFLL;
  v151[0] = v32 | 0xFF00FFFC0000;
  v151[1] = 0;
  v131 = v30;
  v126 = v31;
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    v41 = *((_QWORD *)this + 46);
    if (v41)
    {
      v42 = (unsigned int *)(v41 + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 + 1, v42));
    }
    v44 = WTF::fastMalloc((WTF *)0x90);
    *(_QWORD *)v44 = 2;
    *(_DWORD *)(v44 + 96) = 0;
    *(_OWORD *)(v44 + 12) = 0u;
    *(_OWORD *)(v44 + 28) = 0u;
    *(_DWORD *)(v44 + 44) = 0;
    *(_QWORD *)(v44 + 64) = 0;
    *(_QWORD *)(v44 + 72) = 0;
    *(_QWORD *)(v44 + 56) = 0;
    *(_QWORD *)(v44 + 104) = 0;
    *(_QWORD *)(v44 + 112) = -1;
    *(_WORD *)(v44 + 120) = -1;
    *(_DWORD *)(v44 + 122) = 0x10000;
    *(_BYTE *)(v44 + 126) = 0;
    *(_BYTE *)(v44 + 127) = BYTE12(xmmword_1ECF4C260);
    *(_BYTE *)(v44 + 128) = 0;
    *(_WORD *)(v44 + 129) &= 0xFC00u;
    *(_QWORD *)(v44 + 136) = 0;
    *(_QWORD *)(v44 + 136) = *(_QWORD *)(v41 + 184);
    *(_QWORD *)(v41 + 184) = v44;
    v45 = (unsigned int *)(v41 + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (v46 == 1)
    {
      atomic_store(1u, (unsigned int *)(v41 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 32))(v41);
    }
    v47 = 0;
    v125 = 0;
  }
  else
  {
    v125 = *((unsigned int *)this + 968);
    v44 = WTF::SegmentedVector<JSC::DFG::UnlinkedStructureStubInfo,8ul>::alloc<>((uint64_t)this + 3872);
    v47 = 2;
  }
  v129 = a2;
  v48 = *((_QWORD *)this + 42);
  v49 = v30;
  if ((v30 & 1) != 0)
  {
    v117 = *(_QWORD *)(v30 & 0xFFFFFFFF8);
    if ((v30 & 2) != 0
      || ((v118 = *(unsigned int *)((v30 & 0xFFFFFFFF8) + 8), (_DWORD)v118 != 0x3FFFFFFF)
        ? (v119 = (_DWORD)v118 == -1)
        : (v119 = 1),
          v119))
    {
      v120 = 2;
    }
    else if (v118 >> 28)
    {
      v122 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v122 = v117;
      *(_DWORD *)(v122 + 8) = v118;
      v120 = 1;
      v117 = v122;
    }
    else
    {
      v120 = *(_QWORD *)(v30 & 0xFFFFFFFF8);
      v117 = v118 << 36;
    }
    v49 = v117 | v120;
  }
  v143 = v49;
  BYTE1(v124) = v130;
  LOBYTE(v124) = -1;
  JSC::JITInByValGenerator::JITInByValGenerator((uint64_t)&v144, v48, v44, v47, 0, &v143, v126, 19, (uint64_t)v151, v12, 0, v16, 0, v132, v124);
  if ((v143 & 1) != 0 && (v143 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v143 & 0xFFFFFFFF8, v50, v51, v52, v53, v54, v55, v56);
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    JSC::JITDelByValGenerator::generateFastPath((JSC::JITDelByValGenerator *)&v144, this, v51, v52, v53, v54, v55, v56);
    v138 = v149;
    v139 = v150;
    v62 = HIDWORD(v154);
    if (v149 == -1)
    {
      v69 = v12;
      v68 = v129;
      v70 = v132;
    }
    else
    {
      if (HIDWORD(v154) == (_DWORD)v154)
      {
        v63 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v153, (void *)(HIDWORD(v154) + 1), (unint64_t)&v138, v57, v58, v59, v60, v61);
        v65 = *v63;
        v64 = (uint64_t *)(v63 + 1);
        v66 = (_DWORD *)((char *)v153 + 12 * HIDWORD(v154));
        *v66 = v65;
        v67 = (uint64_t *)(v66 + 1);
        v69 = v12;
        v68 = v129;
        v70 = v132;
      }
      else
      {
        v71 = (_DWORD *)((char *)v153 + 12 * HIDWORD(v154));
        *v71 = v149;
        v67 = (uint64_t *)(v71 + 1);
        v69 = v12;
        v68 = v129;
        v70 = v132;
        v64 = &v139;
      }
      *v67 = *v64;
      v62 = ++HIDWORD(v154);
    }
    v72 = v62;
    v134 = (WTF *)v137;
    v135 = 2;
    v136 = v62;
    if (v62 < 3)
    {
      v74 = v137;
      goto LABEL_58;
    }
    if (v62 < 0x15555556)
    {
      v73 = 12 * v62;
      v74 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v62));
      v135 = (v73 & 0xFFFFFFFC) / 0xC;
      v134 = (WTF *)v74;
      v72 = HIDWORD(v154);
      v62 = HIDWORD(v154);
LABEL_58:
      if (v62)
      {
        v75 = v153;
        v76 = (WTF *)((char *)v153 + 12 * v72);
        do
        {
          *(_DWORD *)v74 = *(_DWORD *)v75;
          *(_QWORD *)(v74 + 4) = *(_QWORD *)((char *)v75 + 4);
          v75 = (WTF *)((char *)v75 + 12);
          v74 += 12;
        }
        while (v75 != v76);
      }
      v165 = v70;
      v164 = v69;
      v163 = v16;
      *(_QWORD *)&v166 = *((_QWORD *)&v144 + 1);
      v161 = operationInByValOptimize;
      v162 = this;
      v160 = 0;
      v159[1] = 0;
      std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<long long> (*&)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::CCallHelpers::CellValue&,JSC::JSValueRegs&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,decltype(nullptr) &>((uint64_t *)&v134, &v162, (uint64_t *)&v161, (unsigned __int8 *)&v160 + 1, (char *)&v160, &v165, &v164, &v163, v159, (uint64_t *)&v166);
      v84 = v159[0];
      v85 = v134;
      if (v137 == (_BYTE *)v134)
      {
        v86 = v128;
      }
      else
      {
        v86 = v128;
        if (v134)
        {
          v134 = 0;
          v135 = 0;
          WTF::fastFree((unint64_t)v85, v77, v78, v79, v80, v81, v82, v83);
        }
      }
      goto LABEL_64;
    }
    __break(0xC471u);
LABEL_142:
    JUMPOUT(0x197B76E44);
  }
  JSC::JITInlineCacheGenerator::generateDFGDataICFastPath((uint64_t)&v144, (uint64_t)this, v125, (char)v130, v53, v54, v55, v56);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v140, (uint64_t *)&v153);
  LOBYTE(v123) = v130;
  JSC::DFG::slowPathICCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,decltype(nullptr)>((uint64_t *)&v140, this, v125, v130, v130 | 0x3000000000, (uint64_t)operationInByValOptimize, 0, 0, (uint64_t *)&v166, v132, 0, v12, 0, v16, v123, 0);
  v84 = v166;
  *(_QWORD *)&v166 = 0;
  v113 = v140;
  if (&v142 != (uint64_t *)v140 && v140)
  {
    v140 = 0;
    v141 = 0;
    WTF::fastFree((unint64_t)v113, v77, v78, v79, v80, v81, v82, v83);
  }
  v86 = v128;
  v69 = v12;
  v68 = v129;
  v70 = v132;
LABEL_64:
  v166 = v144;
  v167 = v145;
  v87 = v146;
  v88 = v147;
  v168 = v146;
  v169 = v147;
  v89 = HIDWORD(v147);
  v90 = v148;
  v170 = v148;
  v91 = HIDWORD(v148);
  v92 = v149;
  v171 = v149;
  v93 = v150;
  v172 = v150;
  v173 = v84;
  v94 = *((unsigned int *)this + 725);
  if ((_DWORD)v94 == *((_DWORD *)this + 724))
  {
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITInByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::InlineCacheWrapper<JSC::JITInByValGenerator>>((uint64_t)this + 2888, (unint64_t)&v166, v78, v79, v80, v81, v82, v83);
  }
  else
  {
    v95 = *((_QWORD *)this + 361) + (v94 << 6);
    v96 = v144;
    *(_BYTE *)(v95 + 16) = v145;
    *(_OWORD *)v95 = v96;
    *(_DWORD *)(v95 + 20) = v87;
    *(_DWORD *)(v95 + 24) = v88;
    *(_DWORD *)(v95 + 28) = v89;
    *(_DWORD *)(v95 + 32) = v90;
    *(_DWORD *)(v95 + 36) = v91;
    *(_DWORD *)(v95 + 40) = v92;
    *(_QWORD *)(v95 + 44) = v93;
    *(_QWORD *)(v95 + 56) = v84;
    ++*((_DWORD *)this + 725);
  }
  v133 = v84;
  v97 = (_QWORD *)((char *)this + 5656);
  v98 = *((unsigned int *)this + 1417);
  if ((_DWORD)v98 == *((_DWORD *)this + 1416))
  {
    v100 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v97, v98 + 1, (unint64_t)&v133);
    v98 = *((unsigned int *)this + 1417);
    v99 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v98);
    v84 = *v100;
  }
  else
  {
    v99 = (uint64_t *)(*v97 + 8 * v98);
    v100 = &v133;
  }
  *v100 = 0;
  *v99 = v84;
  *((_DWORD *)this + 1417) = v98 + 1;
  v101 = v133;
  v133 = 0;
  if (v101)
    (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
  v102 = *((_DWORD *)v68 + 12);
  if (v70 > 15)
    v103 = -1;
  else
    v103 = v70;
  v104 = v103;
  v105 = &v33[12 * v103];
  *(_DWORD *)v105 = v102;
  *((_DWORD *)v105 + 1) = 4;
  v106 = ~v102;
  if (v106 >= *((unsigned int *)this + 1001))
  {
LABEL_140:
    __break(0xC471u);
    JUMPOUT(0x197B76E5CLL);
  }
  v107 = *((_QWORD *)this + 499) + 24 * (int)v106;
  v108 = *((_DWORD *)v68 + 13);
  *(_QWORD *)v107 = v68;
  *(_DWORD *)(v107 + 8) = v108;
  *(_BYTE *)(v107 + 17) = v70;
  *(_DWORD *)(v107 + 12) = 21;
  *(_BYTE *)(v107 + 16) = 0;
  if ((v131 & 1) != 0 && (v131 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v131 & 0xFFFFFFFF8, v77, v78, v79, v80, v81, v82, v83);
  v109 = v153;
  if (v155 != (_BYTE *)v153 && v153)
  {
    v153 = 0;
    LODWORD(v154) = 0;
    WTF::fastFree((unint64_t)v109, v77, v78, v79, v80, v81, v82, v83);
  }
  if (v158)
  {
    if (v156)
    {
      v110 = (char)v157;
      if ((char)v157 != -1)
      {
        if ((char)v157 > 15)
          v110 = -1;
        --*(_DWORD *)(v156 + 12 * v110 + 4784);
      }
    }
  }
  if (v70 != -1)
    --*(_DWORD *)&v33[12 * v104 + 8];
  if (v127)
  {
    if (v16 > 15)
      v111 = -1;
    else
      v111 = v16;
    --*(_DWORD *)&v33[12 * v111 + 8];
  }
  if (v86)
  {
    if (v69 > 15)
      v112 = -1;
    else
      v112 = v69;
    --*(_DWORD *)&v33[12 * v112 + 8];
  }
}

void JSC::DFG::slowPathICCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,decltype(nullptr)>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 a7@<W6>, char a8@<W7>, uint64_t *a9@<X8>, char a10, int a11, char a12, int a13, char a14, ...)
{
  char v14;
  unsigned __int8 v15;
  uint64_t v16;
  char v17;
  _DWORD *v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  int v23;
  va_list va;

  va_start(va, a14);
  v23 = a3;
  v22 = a5;
  v21 = a10;
  v20 = a12;
  v19 = a14;
  v18 = a2;
  v17 = a4;
  v16 = a6;
  v15 = a7;
  v14 = a8;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,decltype(nullptr)>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::StructureStubInfoIndex &,JSC::ARM64Registers::RegisterID&,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address &,JSC::ExceptionOperationResult<long long> (*&)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::CCallHelpers::CellValue&,JSC::JSValueRegs&,JSC::ARM64Registers::RegisterID&,decltype(nullptr) &>(a1, &v18, &v23, &v17, &v22, &v16, &v15, &v14, a9, &v21, &v20, &v19, va);
}

uint64_t JSC::DFG::JITCompiler::addInByVal(uint64_t result, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v18 = *a2;
  v19 = *((_BYTE *)a2 + 16);
  v8 = *((_DWORD *)a2 + 5);
  v9 = *((_DWORD *)a2 + 6);
  v20 = v8;
  v21 = v9;
  v10 = *((_DWORD *)a2 + 7);
  v11 = *((_DWORD *)a2 + 8);
  v22 = v10;
  v23 = v11;
  v12 = *((_DWORD *)a2 + 9);
  v13 = *((_DWORD *)a2 + 10);
  v24 = v12;
  v25 = v13;
  v14 = *(_QWORD *)((char *)a2 + 44);
  v26 = v14;
  v27 = a3;
  v15 = *(unsigned int *)(result + 2900);
  if ((_DWORD)v15 == *(_DWORD *)(result + 2896))
    return WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITInByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::InlineCacheWrapper<JSC::JITInByValGenerator>>(result + 2888, (unint64_t)&v18, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(result + 2888) + (v15 << 6);
  v17 = *a2;
  *(_BYTE *)(v16 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)v16 = v17;
  *(_DWORD *)(v16 + 20) = v8;
  *(_DWORD *)(v16 + 24) = v9;
  *(_DWORD *)(v16 + 28) = v10;
  *(_DWORD *)(v16 + 32) = v11;
  *(_DWORD *)(v16 + 36) = v12;
  *(_DWORD *)(v16 + 40) = v13;
  *(_QWORD *)(v16 + 44) = v14;
  *(_QWORD *)(v16 + 56) = a3;
  ++*(_DWORD *)(result + 2900);
  return result;
}

void JSC::DFG::SpeculativeJIT::compileHasPrivate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  JSC::DFG::Node *v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  uint64_t v44;
  uint64_t v45;
  uint64_t j;
  uint64_t v47;
  unsigned int v48;
  char v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  JSC::DFG::Node *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  _DWORD *v80;
  uint64_t *v81;
  int v82;
  _DWORD *v83;
  uint64_t *v84;
  int v85;
  int v86;
  _BYTE *v87;
  _DWORD *v88;
  unsigned int v89;
  int v90;
  _BYTE *v91;
  _BYTE *v92;
  _BYTE *v93;
  void *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF *v103;
  unint64_t v104;
  _DWORD *v105;
  _BYTE *v106;
  _BYTE *v107;
  void *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  int v121;
  char v122;
  unsigned int v123;
  _DWORD *v124;
  unint64_t v125;
  uint64_t v126;
  int v127;
  unint64_t v128;
  unsigned int v129;
  char v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  JSC::DFG::Node *v143;
  unint64_t v144;
  unsigned int v145;
  unsigned int v146;
  char v147;
  uint64_t v148;
  WTF *v149;
  _DWORD v150[2];
  _BYTE v151[28];
  int v152;
  uint64_t v153;
  WTF *v154;
  _DWORD v155[2];
  _BYTE v156[24];
  uint64_t v157;
  __int128 v158[2];
  int v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unsigned int v163;
  _QWORD v164[2];
  uint64_t v165;
  _BYTE *v166;
  uint64_t v167;
  _BYTE v168[24];
  uint64_t v169;
  unsigned __int8 v170;
  char v171;
  char v172;
  __int16 v173;
  unsigned int v174;
  uint64_t v175;
  __int16 v176;
  void *v177;
  _DWORD *v178;
  _DWORD **v179;
  char v180;
  char v181[9];

  v145 = a3;
  v10 = *(_QWORD *)(a2 + 24);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_117;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *(unsigned int *)(a1 + 4004))
    goto LABEL_151;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, *(_QWORD *)(a2 + 24), a3, a4, a5, a6, a7, a8);
  else
LABEL_117:
    v13 = -1;
  v14 = *(_QWORD *)(a2 + 32);
  v15 = (JSC::DFG::Node *)(v14 & 0xFF00FFFFFFFFFFFFLL);
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_118;
  v16 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v16 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B77AACLL);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v16 + 12))
    v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, *(_QWORD *)(a2 + 32), a3, a4, a5, a6, a7, a8);
  else
LABEL_118:
    v17 = -1;
  v18 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v18 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
LABEL_146:
    __break(1u);
    goto LABEL_151;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v18 + 8) == 1)
  {
    if (v13 == -1)
      v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v10, a3, a4, a5, a6, a7, a8);
    if (v13 > 15)
      v20 = -1;
    else
      v20 = v13;
    ++*(_DWORD *)(a1 + 12 * v20 + 4784);
    v19 = v13;
  }
  else
  {
    v19 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
  LOBYTE(v169) = 0;
  v171 = 0;
  v146 = 255;
  if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 3960) + 24) + 16) - 1) & 0xFFFFFFFD) == 0)
  {
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v169, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
    v171 = 1;
    v146 = v170;
  }
  if (v13 == -1)
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v10, a3, a4, a5, a6, a7, a8);
  if (v17 == -1)
    v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v14, a3, a4, a5, a6, a7, a8);
  v147 = v17;
  LODWORD(v21) = v17;
  JSC::DFG::SpeculativeJIT::speculateSymbol(a1, *(_QWORD *)(a2 + 32), v17, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::use((uint64_t *)a1, (JSC::DFG::Node *)(v10 & 0xFF00FFFFFFFFFFFFLL), v22, v23, v24, v25, v26, v27);
  JSC::DFG::SpeculativeJIT::use((uint64_t *)a1, v15, v28, v29, v30, v31, v32, v33);
  v166 = v168;
  v167 = 2;
  v39 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v60 = v15;
    v42 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
    if ((v39 & 2) != 0
      || (v57 = *(unsigned int *)((v39 & 0xFFFFFFFF8) + 8), (_DWORD)v57 == 0x3FFFFFFF)
      || (_DWORD)v57 == -1)
    {
      v132 = 2;
    }
    else
    {
      if (v57 >> 28)
        goto LABEL_143;
      v132 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
      v42 = v57 << 36;
    }
    goto LABEL_137;
  }
  while (1)
  {
    v165 = v39;
    v40 = JSC::DFG::SpeculativeJIT::recordCallSiteAndGenerateExceptionHandlingOSRExitIfNeeded((JSC::DFG::SpeculativeJIT *)a1, (const JSC::CodeOrigin *)&v165, *(unsigned int *)(a1 + 5644), v34, v35, v36, v37, v38);
    v41 = 0;
    v42 = a1 + 4776;
    for (i = 15; i != -1; --i)
    {
      if ((char)i <= 15)
        v44 = i;
      else
        v44 = 0xFFFFFFFFLL;
      if (*(_DWORD *)(v42 + 12 * v44 + 8) || *(_DWORD *)(v42 + 12 * v44) != 0x3FFFFFFF)
      {
        if ((i & 0x40) != 0)
          goto LABEL_146;
        v41 |= 1 << i;
      }
    }
    v45 = a1 + 4968;
    for (j = 0x16u; j != -1; --j)
    {
      v47 = JSC::FPRInfo::toRegister::registerForIndex[j];
      v48 = JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v47];
      if (*(_DWORD *)(v45 + 12 * v48 + 8) || *(_DWORD *)(v45 + 12 * v48) != 0x3FFFFFFF)
      {
        v49 = v47 + 32;
        if ((v49 & 0x40) != 0)
          goto LABEL_146;
        v41 |= 1 << v49;
      }
    }
    v143 = v15;
    v144 = v11;
    v164[0] = v41 | 0xFF00FFFC0000;
    v164[1] = 0;
    v142 = v21;
    if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
    {
      v50 = *(_QWORD *)(a1 + 368);
      if (v50)
      {
        v51 = (unsigned int *)(v50 + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 + 1, v51));
      }
      v21 = WTF::fastMalloc((WTF *)0x90);
      *(_QWORD *)v21 = 2;
      *(_DWORD *)(v21 + 96) = 0;
      *(_OWORD *)(v21 + 12) = 0u;
      *(_OWORD *)(v21 + 28) = 0u;
      *(_DWORD *)(v21 + 44) = 0;
      *(_QWORD *)(v21 + 64) = 0;
      *(_QWORD *)(v21 + 72) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_QWORD *)(v21 + 104) = 0;
      *(_QWORD *)(v21 + 112) = -1;
      *(_WORD *)(v21 + 120) = -1;
      *(_DWORD *)(v21 + 122) = 0x10000;
      *(_BYTE *)(v21 + 126) = 0;
      *(_BYTE *)(v21 + 127) = BYTE12(xmmword_1ECF4C260);
      *(_BYTE *)(v21 + 128) = 0;
      *(_WORD *)(v21 + 129) &= 0xFC00u;
      *(_QWORD *)(v21 + 136) = 0;
      *(_QWORD *)(v21 + 136) = *(_QWORD *)(v50 + 184);
      *(_QWORD *)(v50 + 184) = v21;
      v53 = (unsigned int *)(v50 + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (v54 == 1)
      {
        atomic_store(1u, (unsigned int *)(v50 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 32))(v50);
      }
      v55 = 0;
      v56 = 0;
    }
    else
    {
      v56 = *(_DWORD *)(a1 + 3872);
      v21 = WTF::SegmentedVector<JSC::DFG::UnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 3872);
      v55 = 2;
    }
    v161 = v21;
    LODWORD(v162) = v55;
    v163 = v56;
    v57 = *(_QWORD *)(a1 + 336);
    v58 = v39;
    v11 = v162;
    if ((v39 & 1) != 0)
    {
      v133 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
      if ((v39 & 2) != 0
        || ((v134 = *(unsigned int *)((v39 & 0xFFFFFFFF8) + 8), (_DWORD)v134 != 0x3FFFFFFF)
          ? (v135 = (_DWORD)v134 == -1)
          : (v135 = 1),
            v135))
      {
        v136 = 2;
      }
      else if (v134 >> 28)
      {
        v140 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
        v141 = *(_DWORD *)((v39 & 0xFFFFFFFF8) + 8);
        v138 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v138 = v140;
        *(_DWORD *)(v138 + 8) = v141;
        v136 = 1;
        v133 = v138;
      }
      else
      {
        v136 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
        v133 = v134 << 36;
      }
      v58 = v133 | v136;
    }
    v157 = v58;
    v59 = v40;
    v60 = (JSC::DFG::Node *)v145;
    BYTE1(v139) = v146;
    LOBYTE(v139) = -1;
    JSC::JITInByValGenerator::JITInByValGenerator((uint64_t)v158, v57, v21, v11, 0, &v157, v59, v145, (uint64_t)v164, v13, 0, v147, 0, v19, v139);
    if ((v157 & 1) != 0 && (v157 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v157 & 0xFFFFFFFF8, v61, v62, v63, v64, v65, v66, v67);
    if ((_DWORD)v162 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_143:
    v137 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v137 = v42;
    *(_DWORD *)(v137 + 8) = v57;
    v132 = 1;
    v42 = v137;
LABEL_137:
    v39 = v42 | v132;
    v15 = v60;
  }
  v179 = &v178;
  ((void (*)(_DWORD ***, uint64_t *))off_1E35729C0[v162])(&v179, &v161);
  if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 3960) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    JSC::JITDelByValGenerator::generateFastPath((JSC::JITDelByValGenerator *)v158, (JSC::CCallHelpers *)a1, v68, v69, v70, v71, v72, v73);
    v152 = v159;
    v153 = v160;
    v79 = HIDWORD(v167);
    if (v159 != -1)
    {
      if (HIDWORD(v167) == (_DWORD)v167)
      {
        v80 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v166, (void *)(HIDWORD(v167) + 1), (unint64_t)&v152, v74, v75, v76, v77, v78);
        v82 = *v80;
        v81 = (uint64_t *)(v80 + 1);
        v83 = &v166[12 * HIDWORD(v167)];
        *v83 = v82;
        v84 = (uint64_t *)(v83 + 1);
      }
      else
      {
        v88 = &v166[12 * HIDWORD(v167)];
        *v88 = v159;
        v84 = (uint64_t *)(v88 + 1);
        v81 = &v153;
      }
      *v84 = *v81;
      v79 = ++HIDWORD(v167);
    }
    v89 = v79;
    v149 = (WTF *)v151;
    v150[0] = 2;
    v150[1] = v79;
    if (v79 < 3)
    {
      v91 = v151;
      if (!v79)
        goto LABEL_71;
    }
    else
    {
      if (v79 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197B77ABCLL);
      }
      v90 = 12 * v79;
      v91 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v79));
      v150[0] = (v90 & 0xFFFFFFFC) / 0xC;
      v149 = (WTF *)v91;
      v89 = HIDWORD(v167);
      if (!HIDWORD(v167))
      {
LABEL_71:
        v94 = operationHasPrivateBrandOptimize;
        LOBYTE(v174) = v19;
        v181[0] = v13;
        if (v145 == 20)
          v94 = operationHasPrivateNameOptimize;
        v180 = v147;
        v178 = (_DWORD *)a1;
        v179 = (_DWORD **)*((_QWORD *)&v158[0] + 1);
        v177 = v94;
        v176 = 0;
        std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<long long> (*&)(long long,long long,JSC::StructureStubInfo *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::CCallHelpers::CellValue&,JSC::CCallHelpers::CellValue&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&>(&v175, (uint64_t *)&v149, &v178, (uint64_t *)&v177, (unsigned __int8 *)&v176 + 1, (char *)&v176, (char *)&v174, v181, &v180, (uint64_t *)&v179);
        v102 = v175;
        v103 = v149;
        if (v151 != (_BYTE *)v149)
        {
          v104 = v144;
          if (!v149)
            goto LABEL_86;
          v105 = v150;
          v149 = 0;
LABEL_84:
          *v105 = 0;
          WTF::fastFree((unint64_t)v103, v95, v96, v97, v98, v99, v100, v101);
          goto LABEL_86;
        }
        goto LABEL_85;
      }
    }
    v92 = v166;
    v93 = &v166[12 * v89];
    do
    {
      *(_DWORD *)v91 = *(_DWORD *)v92;
      *(_QWORD *)(v91 + 4) = *(_QWORD *)(v92 + 4);
      v92 += 12;
      v91 += 12;
    }
    while (v92 != v93);
    goto LABEL_71;
  }
  JSC::JITInlineCacheGenerator::generateDFGDataICFastPath((uint64_t)v158, a1, v163, (char)v146, v70, v71, v72, v73);
  v85 = HIDWORD(v167);
  v154 = (WTF *)v156;
  v155[0] = 2;
  v155[1] = HIDWORD(v167);
  if (HIDWORD(v167) >= 3)
  {
    if (HIDWORD(v167) < 0x15555556)
    {
      v86 = 12 * HIDWORD(v167);
      v87 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v167)));
      v155[0] = (v86 & 0xFFFFFFFC) / 0xC;
      v154 = (WTF *)v87;
      v85 = HIDWORD(v167);
      if (!HIDWORD(v167))
        goto LABEL_79;
      goto LABEL_77;
    }
LABEL_151:
    __break(0xC471u);
    JUMPOUT(0x197B77AA4);
  }
  v87 = v156;
  if (!HIDWORD(v167))
    goto LABEL_79;
LABEL_77:
  v106 = v166;
  v107 = &v166[12 * v85];
  do
  {
    *(_DWORD *)v87 = *(_DWORD *)v106;
    *(_QWORD *)(v87 + 4) = *(_QWORD *)(v106 + 4);
    v106 += 12;
    v87 += 12;
  }
  while (v106 != v107);
LABEL_79:
  v108 = operationHasPrivateBrandOptimize;
  v174 = v163;
  v178 = (_DWORD *)a1;
  v179 = (_DWORD **)(v146 | 0x3000000000);
  v181[0] = v19;
  if (v145 == 20)
    v108 = operationHasPrivateNameOptimize;
  v180 = v13;
  HIBYTE(v176) = v147;
  LOBYTE(v176) = v146;
  v177 = v108;
  v173 = 0;
  v172 = v146;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::StructureStubInfoIndex &,JSC::ARM64Registers::RegisterID&,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address &,JSC::ExceptionOperationResult<long long> (*&)(long long,long long,JSC::StructureStubInfo *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::CCallHelpers::CellValue&,JSC::CCallHelpers::CellValue&,JSC::ARM64Registers::RegisterID&>(&v175, (uint64_t *)&v154, &v178, (int *)&v174, (char *)&v176, (uint64_t *)&v179, (uint64_t *)&v177, (unsigned __int8 *)&v173 + 1, (char *)&v173, v181, &v180, (char *)&v176 + 1, &v172);
  v102 = v175;
  v103 = v154;
  if (v156 != (_BYTE *)v154)
  {
    v104 = v144;
    if (!v154)
      goto LABEL_86;
    v105 = v155;
    v154 = 0;
    goto LABEL_84;
  }
LABEL_85:
  v104 = v144;
LABEL_86:
  JSC::DFG::JITCompiler::addInByVal(a1, v158, v102, v97, v98, v99, v100, v101);
  v148 = v102;
  v116 = (_QWORD *)(a1 + 5656);
  v117 = *(unsigned int *)(a1 + 5668);
  if ((_DWORD)v117 == *(_DWORD *)(a1 + 5664))
  {
    v119 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v116, v117 + 1, (unint64_t)&v148);
    v117 = *(unsigned int *)(a1 + 5668);
    v118 = (uint64_t *)(*(_QWORD *)(a1 + 5656) + 8 * v117);
    v102 = *v119;
  }
  else
  {
    v118 = (uint64_t *)(*v116 + 8 * v117);
    v119 = &v148;
  }
  *v119 = 0;
  *v118 = v102;
  *(_DWORD *)(a1 + 5668) = v117 + 1;
  v120 = v148;
  v148 = 0;
  if (v120)
    (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
  v121 = *(_DWORD *)(a2 + 48);
  if (v19 > 15)
    v122 = -1;
  else
    v122 = v19;
  v123 = v122;
  v124 = (_DWORD *)(v42 + 12 * v122);
  *v124 = v121;
  v124[1] = 4;
  v125 = ~v121;
  if (v125 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B77AB4);
  }
  v126 = *(_QWORD *)(a1 + 3992) + 24 * (int)v125;
  v127 = *(_DWORD *)(a2 + 52);
  *(_QWORD *)v126 = a2;
  *(_DWORD *)(v126 + 8) = v127;
  *(_BYTE *)(v126 + 17) = v19;
  *(_DWORD *)(v126 + 12) = 21;
  *(_BYTE *)(v126 + 16) = 0;
  if ((v39 & 1) != 0 && (v39 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v39 & 0xFFFFFFFF8, v109, v110, v111, v112, v113, v114, v115);
  v128 = (unint64_t)v166;
  if (v168 != v166 && v166)
  {
    v166 = 0;
    LODWORD(v167) = 0;
    WTF::fastFree(v128, v109, v110, v111, v112, v113, v114, v115);
  }
  if (v171)
  {
    if (v169)
    {
      v129 = (char)v170;
      if ((char)v170 != -1)
      {
        if ((char)v170 > 15)
          v129 = -1;
        --*(_DWORD *)(v169 + 12 * v129 + 4784);
      }
    }
  }
  if (v19 != -1)
    --*(_DWORD *)(v42 + 12 * v123 + 8);
  if (v143)
  {
    if (v142 > 15)
      v130 = -1;
    else
      v130 = v147;
    --*(_DWORD *)(v42 + 12 * v130 + 8);
  }
  if (v104)
  {
    if (v13 > 15)
      v131 = -1;
    else
      v131 = v13;
    --*(_DWORD *)(v42 + 12 * v131 + 8);
  }
}

void JSC::DFG::SpeculativeJIT::speculateSymbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _BYTE v34[12];

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 5616);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((a2 & 1) != 0)
    v15 = v14;
  v16 = *v15;
  v17 = *v15 + 32 * v13;
  v18 = *(_DWORD *)(v11 + 88);
  v19 = *(_DWORD *)(v17 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v26 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 != 4)
        {
          *(_QWORD *)v17 = v26 | 2;
          v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v26 & 1) != 0)
          {
            v30 = 2 * *v27;
            while (v30 * 4)
            {
              v31 = *(_QWORD *)&v27[v30];
              if ((*(_BYTE *)(v31 + 19) & 0xC) == 0)
              {
                v32 = *(_QWORD *)(v31 + 96);
                v33 = (v32 & 1) != 0 ? (v32 >> 1) & 3 : *(unsigned __int8 *)(v32 + 4);
                v30 -= 2;
                if (v33 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v27, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_21;
            }
          }
          else if (v27)
          {
            if ((*((_BYTE *)v27 + 19) & 0xC) != 0
              || ((v28 = *((_QWORD *)v27 + 12), (v28 & 1) != 0)
                ? (v29 = (v28 >> 1) & 3)
                : (v29 = *(unsigned __int8 *)(v28 + 4)),
                  v29 == 2))
            {
LABEL_21:
              *(_QWORD *)v17 = 4;
            }
          }
        }
        *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v17 &= ~2uLL;
    }
    *(_DWORD *)(v17 + 20) = v18;
  }
  if ((*(_QWORD *)(v17 + 8) & 0x2C00BFFFFFF7) != 0)
  {
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v8 | 0x500000000, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 4, v20, v21, v22, v23, (uint64_t)v34);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v8 << 32) | 0x80000000), a2, 0xFFFFD3FF40000008, (uint64_t)v34, 1uLL, v24, v25);
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void JSC::DFG::SpeculativeJIT::compileHasPrivateName(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::SpeculativeJIT::compileHasPrivate((uint64_t)this, (uint64_t)a2, 20, a4, a5, a6, a7, a8);
}

void JSC::DFG::SpeculativeJIT::compileHasPrivateBrand(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::SpeculativeJIT::compileHasPrivate((uint64_t)this, (uint64_t)a2, 21, a4, a5, a6, a7, a8);
}

uint64_t *JSC::DFG::SpeculativeJIT::compilePushWithScope(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::DFG::Node *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t *result;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  JSC::DFG::Node *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;
  unint64_t v74;
  unsigned __int8 v75;

  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v73, (uint64_t)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  v16 = v75;
  if (v75 == 255)
  {
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v73, v74, v10, v11, v12, v13, v14, v15);
    v75 = v16;
  }
  ++*((_DWORD *)this + 1196);
  v17 = *((unsigned int *)this + 1194);
  if ((_DWORD)v17 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v17, v10, v11, v12, v13, v14, v15);
  }
  v18 = *((_QWORD *)a2 + 4);
  if ((v18 & 0xFC000000000000) == 0x2C000000000000)
  {
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v70, (uint64_t)this, *((_QWORD *)a2 + 4), v11, v12, v13, v14, v15);
    v25 = v72;
    if (v72 == 255)
    {
      v25 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v70, v71, v19, v20, v21, v22, v23, v24);
      v72 = v25;
    }
    v26 = (char)v25;
    JSC::DFG::SpeculativeJIT::speculateObject((uint64_t)this, v18, v26, v20, v21, v22, v23, v24);
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v27, v28, v29, v30, v31, v32, v33);
    v40 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v34, v35, v36, v37, v38, v39);
    JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<JSC::JSCell * (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSObject *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v69, (int *)this, v40, v41, (char)v16, v26, v42, v43);
  }
  else
  {
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v70, (uint64_t)this, *((_QWORD *)a2 + 4), 0, v12, v13, v14, v15);
    v58 = v72;
    if (v72 == 255)
    {
      v58 = JSC::DFG::SpeculativeJIT::fillJSValue(v70, v71, v52, v53, v54, v55, v56, v57);
      v72 = v58;
    }
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v51, v52, v53, v54, v55, v56, v57);
    v65 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v59, v60, v61, v62, v63, v64);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSCell *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>(&v69, (int *)this, v65, v66, (char)v16, v58, v67, v68);
  }
  if ((v71 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v48 = (char)v72;
    if ((char)v72 > 15)
      v48 = -1;
    --*(_DWORD *)(v70 + 12 * v48 + 4784);
  }
  result = JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)this, 0, a2, 0, v44, v45, v46, v47);
  --*((_DWORD *)this + 1196);
  if ((v74 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v50 = (char)v75;
    if ((char)v75 > 15)
      v50 = -1;
    --*(_DWORD *)(v73 + 12 * v50 + 4784);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::speculateObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _BYTE v34[12];

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 5616);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((a2 & 1) != 0)
    v15 = v14;
  v16 = *v15;
  v17 = *v15 + 32 * v13;
  v18 = *(_DWORD *)(v11 + 88);
  v19 = *(_DWORD *)(v17 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v26 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 != 4)
        {
          *(_QWORD *)v17 = v26 | 2;
          v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v26 & 1) != 0)
          {
            v30 = 2 * *v27;
            while (v30 * 4)
            {
              v31 = *(_QWORD *)&v27[v30];
              if ((*(_BYTE *)(v31 + 19) & 0xC) == 0)
              {
                v32 = *(_QWORD *)(v31 + 96);
                v33 = (v32 & 1) != 0 ? (v32 >> 1) & 3 : *(unsigned __int8 *)(v32 + 4);
                v30 -= 2;
                if (v33 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v27, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_21;
            }
          }
          else if (v27)
          {
            if ((*((_BYTE *)v27 + 19) & 0xC) != 0
              || ((v28 = *((_QWORD *)v27 + 12), (v28 & 1) != 0)
                ? (v29 = (v28 >> 1) & 3)
                : (v29 = *(unsigned __int8 *)(v28 + 4)),
                  v29 == 2))
            {
LABEL_21:
              *(_QWORD *)v17 = 4;
            }
          }
        }
        *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v17 &= ~2uLL;
    }
    *(_DWORD *)(v17 + 20) = v18;
  }
  if ((*(_QWORD *)(v17 + 8) & 0xFFFFDFFFF0000008) != 0)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197B78104);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load8(a1, v8 | 0x500000000, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branch32(a1, 3, 17, 23, v20, v21, v22, v23, (uint64_t)v34);
    JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v8 << 32) | 0x80000000), a2, 0x20000FFFFFF7uLL, (uint64_t)v34, 1uLL, v24, v25);
  }
}

_QWORD *JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<JSC::JSCell * (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSObject *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int *v11;
  unsigned int v12;
  JSC::AssemblerBuffer *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint8x8_t v19;
  __int32 v20;
  uint8x8_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  __int16 *v37;
  int v38;
  char *v39;
  int *v40;
  int *v41;
  uint64_t v42;
  unsigned int v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v52;
  int *v53;
  int *v54;
  JSC::AssemblerBuffer *v55;
  unsigned int v56;
  unsigned int v57;
  __int16 v58;
  _BYTE v59[6];

  v10 = (uint64_t)a2;
  v11 = a1;
  if ((_DWORD)a5 == 1)
  {
    if ((_DWORD)a6 == 2)
      goto LABEL_61;
    v12 = 0;
    goto LABEL_6;
  }
  v58 = a5 | 0x100;
  v12 = 1;
  v56 = 1;
  if ((_DWORD)a6 != 2)
  {
LABEL_6:
    *(_WORD *)&v59[2 * v12++ - 2] = a6 | 0x200;
    v56 = v12;
  }
  v13 = (JSC::AssemblerBuffer *)(a2 + 14);
  do
  {
    v14 = 0;
    v15 = 0;
    v16 = v12;
    do
    {
      if ((v59[v14 - 1] & 0x40) != 0)
      {
LABEL_64:
        __break(1u);
        if (a1)
          WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_61;
      }
      v15 |= 1 << v59[v14 - 1];
      v14 += 2;
    }
    while (2 * v12 != v14);
    v17 = 0;
    do
    {
      v18 = v59[v17 - 2] & 0x7F;
      if (v18 >= 0x40)
        goto LABEL_64;
      v15 &= ~(1 << v18);
      v17 += 2;
    }
    while (2 * v12 != v17);
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v19.i16[0] = vaddlv_u8(v19);
    v20 = v19.i32[0];
    v21 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v15));
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.i32[0] + v20)
    {
      v22 = 0;
      if (v12 <= 1)
        v23 = 1;
      else
        v23 = v12;
      v24 = 2 * v23;
      while (1)
      {
        v25 = v59[v22 - 1];
        if ((v25 & 0x7Fu) >= 0x40)
          goto LABEL_64;
        if (((v15 >> (v25 & 0x7F)) & 1) != 0)
          break;
        v22 += 2;
        if (v24 == v22)
          goto LABEL_58;
      }
      v26 = v59[v22 - 2];
      if (v26 != v25)
      {
        v27 = (char)v26;
        if ((char)v26 == 63)
        {
          v28 = *(_DWORD *)(v10 + 200);
          v29 = *(_DWORD *)(v10 + 192);
          if (v25 == 31)
            goto LABEL_52;
          v31 = v25 & 0x1F | 0xD2800000;
        }
        else
        {
          v28 = *(_DWORD *)(v10 + 200);
          v29 = *(_DWORD *)(v10 + 192);
          v30 = (char)v25 == 31 || v27 == 31;
          if (!v30)
          {
            v31 = v25 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v31 = (char)v25 | (32 * v27) | 0x91000000;
        }
LABEL_53:
        if (v28 + 4 > v29)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v13, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v28 = *(_DWORD *)(v10 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v10 + 56) + v28) = v31;
        *(_DWORD *)(v10 + 200) += 4;
        v16 = v56;
      }
      a1 = (int *)memmove(&v59[v22 - 2], &v59[v22], 2 * v16 - v22 - 2);
      v12 = v56 - 1;
      goto LABEL_57;
    }
    v55 = v13;
    v32 = HIBYTE(v58);
    v33 = v58;
    JSC::MacroAssemblerARM64::swap(v10, (char)v58, SHIBYTE(v58), a4, a5, a6, a7, a8);
    memmove(&v58, v59, 2 * v56 - 2);
    v34 = v56 - 1;
    v30 = v56 == 1;
    v57 = v34;
    v35 = (int *)&v58;
    a1 = (int *)&v59[2 * v34 - 2];
    if (v30)
    {
      v42 = 0;
      v43 = 0;
      v38 = 0;
      a2 = a1;
    }
    else
    {
      v36 = 2 * v34;
      v37 = &v58;
      while (*(unsigned __int8 *)v37 != v32)
      {
        ++v37;
        v36 -= 2;
        if (!v36)
          goto LABEL_36;
      }
      *(_BYTE *)v37 = v33;
LABEL_36:
      v38 = 0;
      v39 = (char *)&v58;
      a2 = a1;
      v40 = a1;
      do
      {
        if (*(unsigned __int8 *)v35 == *((unsigned __int8 *)v35 + 1))
        {
          v41 = v35;
          if (v40 != (int *)&v59[2 * v57 - 2])
          {
            v54 = a1;
            if (v35 == a2)
            {
              v41 = v40;
            }
            else
            {
              v52 = v39 - (char *)a2;
              v53 = v40;
              memmove(v40, a2, v39 - (char *)a2);
              v41 = (int *)((char *)v53 + v52);
            }
            a1 = v54;
          }
          a2 = (int *)((char *)v35 + 2);
          ++v38;
          v40 = v41;
        }
        v35 = (int *)((char *)v35 + 2);
        v39 += 2;
      }
      while (v35 < a1);
      v42 = v57;
      v43 = v57;
      a1 = v40;
    }
    v44 = (int *)&v59[2 * v42 - 2];
    v13 = v55;
    if (a2 != v44)
    {
      a1 = (int *)memmove(a1, a2, (char *)v44 - (char *)a2);
      v43 = v57;
    }
    v12 = v43 - v38;
LABEL_57:
    v56 = v12;
LABEL_58:
    ;
  }
  while (v12);
LABEL_61:
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v10, a4, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v10, (a3 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  return JSC::DFG::SpeculativeJIT::appendCall(v10, (uint64_t)operationPushWithScopeObject, v45, v46, v47, v48, v49, v50, v11);
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSCell *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int *v11;
  unsigned int v12;
  JSC::AssemblerBuffer *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint8x8_t v19;
  __int32 v20;
  uint8x8_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  __int16 *v37;
  int v38;
  char *v39;
  int *v40;
  int *v41;
  uint64_t v42;
  unsigned int v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  int *v58;
  int *v59;
  JSC::AssemblerBuffer *v60;
  unsigned int v61;
  unsigned int v62;
  __int16 v63;
  _BYTE v64[6];

  v10 = (uint64_t)a2;
  v11 = a1;
  if ((_DWORD)a5 == 1)
  {
    if (a6 == 2)
      goto LABEL_61;
    v12 = 0;
    goto LABEL_6;
  }
  v63 = a5 | 0x100;
  v12 = 1;
  v61 = 1;
  if (a6 != 2)
  {
LABEL_6:
    *(_WORD *)&v64[2 * v12++ - 2] = a6 | 0x200;
    v61 = v12;
  }
  v13 = (JSC::AssemblerBuffer *)(a2 + 14);
  do
  {
    v14 = 0;
    v15 = 0;
    v16 = v12;
    do
    {
      if ((v64[v14 - 1] & 0x40) != 0)
      {
LABEL_64:
        __break(1u);
        if (a1)
          WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_61;
      }
      v15 |= 1 << v64[v14 - 1];
      v14 += 2;
    }
    while (2 * v12 != v14);
    v17 = 0;
    do
    {
      v18 = v64[v17 - 2] & 0x7F;
      if (v18 >= 0x40)
        goto LABEL_64;
      v15 &= ~(1 << v18);
      v17 += 2;
    }
    while (2 * v12 != v17);
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v19.i16[0] = vaddlv_u8(v19);
    v20 = v19.i32[0];
    v21 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v15));
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.i32[0] + v20)
    {
      v22 = 0;
      if (v12 <= 1)
        v23 = 1;
      else
        v23 = v12;
      v24 = 2 * v23;
      while (1)
      {
        v25 = v64[v22 - 1];
        if ((v25 & 0x7Fu) >= 0x40)
          goto LABEL_64;
        if (((v15 >> (v25 & 0x7F)) & 1) != 0)
          break;
        v22 += 2;
        if (v24 == v22)
          goto LABEL_58;
      }
      v26 = v64[v22 - 2];
      if (v26 != v25)
      {
        v27 = (char)v26;
        if ((char)v26 == 63)
        {
          v28 = *(_DWORD *)(v10 + 200);
          v29 = *(_DWORD *)(v10 + 192);
          if (v25 == 31)
            goto LABEL_52;
          v31 = v25 & 0x1F | 0xD2800000;
        }
        else
        {
          v28 = *(_DWORD *)(v10 + 200);
          v29 = *(_DWORD *)(v10 + 192);
          v30 = (char)v25 == 31 || v27 == 31;
          if (!v30)
          {
            v31 = v25 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v31 = (char)v25 | (32 * v27) | 0x91000000;
        }
LABEL_53:
        if (v28 + 4 > v29)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v13, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v28 = *(_DWORD *)(v10 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v10 + 56) + v28) = v31;
        *(_DWORD *)(v10 + 200) += 4;
        v16 = v61;
      }
      a1 = (int *)memmove(&v64[v22 - 2], &v64[v22], 2 * v16 - v22 - 2);
      v12 = v61 - 1;
      goto LABEL_57;
    }
    v60 = v13;
    v32 = HIBYTE(v63);
    v33 = v63;
    JSC::MacroAssemblerARM64::swap(v10, (char)v63, SHIBYTE(v63), a4, a5, a6, a7, a8);
    memmove(&v63, v64, 2 * v61 - 2);
    v34 = v61 - 1;
    v30 = v61 == 1;
    v62 = v34;
    v35 = (int *)&v63;
    a1 = (int *)&v64[2 * v34 - 2];
    if (v30)
    {
      v42 = 0;
      v43 = 0;
      v38 = 0;
      a2 = a1;
    }
    else
    {
      v36 = 2 * v34;
      v37 = &v63;
      while (*(unsigned __int8 *)v37 != v32)
      {
        ++v37;
        v36 -= 2;
        if (!v36)
          goto LABEL_36;
      }
      *(_BYTE *)v37 = v33;
LABEL_36:
      v38 = 0;
      v39 = (char *)&v63;
      a2 = a1;
      v40 = a1;
      do
      {
        if (*(unsigned __int8 *)v35 == *((unsigned __int8 *)v35 + 1))
        {
          v41 = v35;
          if (v40 != (int *)&v64[2 * v62 - 2])
          {
            v59 = a1;
            if (v35 == a2)
            {
              v41 = v40;
            }
            else
            {
              v57 = v39 - (char *)a2;
              v58 = v40;
              memmove(v40, a2, v39 - (char *)a2);
              v41 = (int *)((char *)v58 + v57);
            }
            a1 = v59;
          }
          a2 = (int *)((char *)v35 + 2);
          ++v38;
          v40 = v41;
        }
        v35 = (int *)((char *)v35 + 2);
        v39 += 2;
      }
      while (v35 < a1);
      v42 = v62;
      v43 = v62;
      a1 = v40;
    }
    v44 = (int *)&v64[2 * v42 - 2];
    v13 = v60;
    if (a2 != v44)
    {
      a1 = (int *)memmove(a1, a2, (char *)v44 - (char *)a2);
      v43 = v62;
    }
    v12 = v43 - v38;
LABEL_57:
    v61 = v12;
LABEL_58:
    ;
  }
  while (v12);
LABEL_61:
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v10, a4, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v10, (a3 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v10, (uint64_t)operationPushWithScope, v45, v46, v47, v48, v49, v50, v11);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v10, 1, v51, v52, v53, v54, v55, v56);
}

uint64_t *JSC::DFG::SpeculativeJIT::cellResult(uint64_t *this, int a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  unsigned int v11;
  char *v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  int v16;

  v10 = this;
  if (!(_DWORD)a4)
    this = JSC::DFG::SpeculativeJIT::useChildren(this, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (a2 > 15)
    v11 = -1;
  else
    v11 = a2;
  v12 = (char *)v10 + 12 * v11;
  v13 = *((_DWORD *)a3 + 12);
  *((_DWORD *)v12 + 1194) = v13;
  *((_DWORD *)v12 + 1195) = 4;
  v14 = ~v13;
  if (v14 >= *((unsigned int *)v10 + 1001))
  {
    __break(0xC471u);
  }
  else
  {
    v15 = v10[499] + 24 * (int)v14;
    v16 = *((_DWORD *)a3 + 13);
    *(_QWORD *)v15 = a3;
    *(_DWORD *)(v15 + 8) = v16;
    *(_BYTE *)(v15 + 17) = a2;
    *(_DWORD *)(v15 + 12) = 6;
    *(_BYTE *)(v15 + 16) = 0;
  }
  return this;
}

uint64_t JSC::DFG::SpeculativeJIT::detectPeepHoleBranch(JSC::DFG::SpeculativeJIT *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 496);
  v2 = *(unsigned int *)(v1 + 220);
  v3 = v2 - 1;
  v4 = (*((_DWORD *)this + 997) + 1);
  if (v2 - 1 > v4)
  {
    if (v2 <= v4)
      v9 = (*((_DWORD *)this + 997) + 1);
    else
      v9 = *(unsigned int *)(v1 + 220);
    while (1)
    {
      if (v9 == v4)
      {
LABEL_18:
        __break(0xC471u);
        JUMPOUT(0x197B78A9CLL);
      }
      v10 = *(_QWORD *)(*(_QWORD *)(v1 + 208) + 8 * v4);
      if (*(_DWORD *)(v10 + 52))
      {
        if (*(_WORD *)(v10 + 18) != 23 || (*(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL) != 0)
          return 0xFFFFFFFFLL;
      }
      if (v3 <= ++v4)
        goto LABEL_2;
    }
  }
  do
  {
LABEL_2:
    if (v3 >= v2)
      goto LABEL_18;
    v5 = *(_QWORD *)(*(_QWORD *)(v1 + 208) + 8 * v3);
    v6 = *(unsigned __int16 *)(v5 + 18);
    --v3;
  }
  while ((v6 - 364) > 0xB);
  if (v6 != 365)
    return 0xFFFFFFFFLL;
  v7 = v2 - 1;
  if (*((_QWORD *)this + 497) == (*(_QWORD *)(v5 + 24) & 0xFF00FFFFFFFFFFFFLL))
    return v7;
  else
    return 0xFFFFFFFFLL;
}

JSC::DFG::GPRTemporary *JSC::DFG::GPRTemporary::GPRTemporary(JSC::DFG::GPRTemporary *this, JSC::DFG::SpeculativeJIT *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  char *v31;

  *(_QWORD *)this = a2;
  *((_BYTE *)this + 8) = -1;
  v9 = (char *)a2 + 4776;
  if (*((_DWORD *)a2 + 1196))
  {
    v10 = -1;
    v11 = 16;
  }
  else
  {
    v10 = *((_DWORD *)a2 + 1195);
    if (v10 == -1)
    {
      v11 = 0;
      v12 = (char *)a2 + 4784;
LABEL_4:
      v13 = 12 * v11;
      v14 = *(_DWORD *)&v9[v13];
      *(_QWORD *)&v9[v13] = 0xFFFFFFFF3FFFFFFFLL;
      goto LABEL_5;
    }
    v11 = 0;
  }
  if (!*((_DWORD *)a2 + 1199))
  {
    v16 = *((_DWORD *)a2 + 1198);
    if (v16 == -1)
    {
      v12 = (char *)a2 + 4796;
      v11 = 1;
      goto LABEL_4;
    }
    if (v16 < v10)
    {
      v11 = 1;
      v10 = *((_DWORD *)a2 + 1198);
    }
  }
  if (!*((_DWORD *)a2 + 1202))
  {
    v17 = *((_DWORD *)a2 + 1201);
    if (v17 == -1)
    {
      v12 = (char *)a2 + 4808;
      v11 = 2;
      goto LABEL_4;
    }
    if (v17 < v10)
    {
      v11 = 2;
      v10 = *((_DWORD *)a2 + 1201);
    }
  }
  if (!*((_DWORD *)a2 + 1205))
  {
    v18 = *((_DWORD *)a2 + 1204);
    if (v18 == -1)
    {
      v12 = (char *)a2 + 4820;
      v11 = 3;
      goto LABEL_4;
    }
    if (v18 < v10)
    {
      v11 = 3;
      v10 = *((_DWORD *)a2 + 1204);
    }
  }
  if (!*((_DWORD *)a2 + 1208))
  {
    v19 = *((_DWORD *)a2 + 1207);
    if (v19 == -1)
    {
      v12 = (char *)a2 + 4832;
      v11 = 4;
      goto LABEL_4;
    }
    if (v19 < v10)
    {
      v11 = 4;
      v10 = *((_DWORD *)a2 + 1207);
    }
  }
  if (!*((_DWORD *)a2 + 1211))
  {
    v20 = *((_DWORD *)a2 + 1210);
    if (v20 == -1)
    {
      v12 = (char *)a2 + 4844;
      v11 = 5;
      goto LABEL_4;
    }
    if (v20 < v10)
    {
      v11 = 5;
      v10 = *((_DWORD *)a2 + 1210);
    }
  }
  if (!*((_DWORD *)a2 + 1214))
  {
    v21 = *((_DWORD *)a2 + 1213);
    if (v21 == -1)
    {
      v12 = (char *)a2 + 4856;
      v11 = 6;
      goto LABEL_4;
    }
    if (v21 < v10)
    {
      v11 = 6;
      v10 = *((_DWORD *)a2 + 1213);
    }
  }
  if (!*((_DWORD *)a2 + 1217))
  {
    v22 = *((_DWORD *)a2 + 1216);
    if (v22 == -1)
    {
      v12 = (char *)a2 + 4868;
      v11 = 7;
      goto LABEL_4;
    }
    if (v22 < v10)
    {
      v11 = 7;
      v10 = *((_DWORD *)a2 + 1216);
    }
  }
  if (!*((_DWORD *)a2 + 1220))
  {
    v23 = *((_DWORD *)a2 + 1219);
    if (v23 == -1)
    {
      v12 = (char *)a2 + 4880;
      v11 = 8;
      goto LABEL_4;
    }
    if (v23 < v10)
    {
      v11 = 8;
      v10 = *((_DWORD *)a2 + 1219);
    }
  }
  if (!*((_DWORD *)a2 + 1223))
  {
    v24 = *((_DWORD *)a2 + 1222);
    if (v24 == -1)
    {
      v12 = (char *)a2 + 4892;
      v11 = 9;
      goto LABEL_4;
    }
    if (v24 < v10)
    {
      v11 = 9;
      v10 = *((_DWORD *)a2 + 1222);
    }
  }
  if (!*((_DWORD *)a2 + 1226))
  {
    v25 = *((_DWORD *)a2 + 1225);
    if (v25 == -1)
    {
      v12 = (char *)a2 + 4904;
      v11 = 10;
      goto LABEL_4;
    }
    if (v25 < v10)
    {
      v11 = 10;
      v10 = *((_DWORD *)a2 + 1225);
    }
  }
  if (!*((_DWORD *)a2 + 1229))
  {
    v26 = *((_DWORD *)a2 + 1228);
    if (v26 == -1)
    {
      v12 = (char *)a2 + 4916;
      v11 = 11;
      goto LABEL_4;
    }
    if (v26 < v10)
    {
      v11 = 11;
      v10 = *((_DWORD *)a2 + 1228);
    }
  }
  if (!*((_DWORD *)a2 + 1232))
  {
    v27 = *((_DWORD *)a2 + 1231);
    if (v27 == -1)
    {
      v12 = (char *)a2 + 4928;
      v11 = 12;
      goto LABEL_4;
    }
    if (v27 < v10)
    {
      v11 = 12;
      v10 = *((_DWORD *)a2 + 1231);
    }
  }
  if (!*((_DWORD *)a2 + 1235))
  {
    v28 = *((_DWORD *)a2 + 1234);
    if (v28 == -1)
    {
      v12 = (char *)a2 + 4940;
      v11 = 13;
      goto LABEL_4;
    }
    if (v28 < v10)
    {
      v11 = 13;
      v10 = *((_DWORD *)a2 + 1234);
    }
  }
  if (!*((_DWORD *)a2 + 1238))
  {
    v29 = *((_DWORD *)a2 + 1237);
    if (v29 == -1)
    {
      v12 = (char *)a2 + 4952;
      v11 = 14;
      goto LABEL_4;
    }
    if (v29 < v10)
    {
      v11 = 14;
      v10 = *((_DWORD *)a2 + 1237);
    }
  }
  if (!*((_DWORD *)a2 + 1241))
  {
    v30 = *((_DWORD *)a2 + 1240);
    if (v30 == -1)
    {
      v12 = (char *)a2 + 4964;
      v11 = 15;
      goto LABEL_4;
    }
    if (v30 < v10)
      v11 = 15;
  }
  v31 = &v9[12 * v11];
  v14 = *(_DWORD *)v31;
  *(_QWORD *)v31 = 0xFFFFFFFF3FFFFFFFLL;
  v12 = v31 + 8;
LABEL_5:
  *(_DWORD *)v12 = 1;
  if (v14 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)a2, v14, a3, a4, a5, a6, a7, a8);
  *((_BYTE *)this + 8) = v11;
  return this;
}

uint64_t JSC::DFG::GPRTemporary::GPRTemporary(uint64_t a1, JSC::DFG::SpeculativeJIT *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  JSC::DFG::SpeculativeJIT *v14;

  v8 = a3;
  *(_QWORD *)a1 = this;
  *(_BYTE *)(a1 + 8) = -1;
  if ((_DWORD)a3 == -1)
  {
    v14 = this;
    JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
    this = v14;
  }
  if (v8 > 15)
    v10 = -1;
  else
    v10 = v8;
  v11 = (char *)this + 12 * v10;
  ++*((_DWORD *)v11 + 1196);
  v12 = *((unsigned int *)v11 + 1194);
  if ((_DWORD)v12 != 0x3FFFFFFF)
  {
    *((_QWORD *)v11 + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v12, a3, a4, a5, a6, a7, a8);
  }
  *(_BYTE *)(a1 + 8) = v8;
  return a1;
}

uint64_t JSC::DFG::GPRTemporary::GPRTemporary(uint64_t result, JSC::DFG::SpeculativeJIT *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v13;
  char v14;

  *(_QWORD *)result = this;
  *(_BYTE *)(result + 8) = -1;
  v9 = *(_QWORD *)(a3 + 8);
  v10 = ~*(_DWORD *)((v9 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v10 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v10 + 8) == 1)
    {
      v13 = *(unsigned __int8 *)(a3 + 16);
      if (v13 == 255)
      {
        LOBYTE(v13) = JSC::DFG::SpeculativeJIT::fillJSValue(*(_QWORD *)a3, v9, a3, a4, a5, a6, a7, a8);
        *(_BYTE *)(a3 + 16) = v13;
      }
      if ((char)v13 > 15)
        v14 = -1;
      else
        v14 = v13;
      ++*((_DWORD *)this + 3 * v14 + 1196);
    }
    else
    {
      LOBYTE(v13) = JSC::DFG::SpeculativeJIT::allocate(this, v9, a3, a4, a5, a6, a7, a8);
    }
    *(_BYTE *)(v11 + 8) = v13;
    return v11;
  }
  return result;
}

uint64_t JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::JSValueOperand>(uint64_t result, JSC::DFG::SpeculativeJIT *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v13;
  char v14;

  *(_QWORD *)result = this;
  *(_BYTE *)(result + 8) = -1;
  v9 = *(_QWORD *)(a4 + 8);
  v10 = ~*(_DWORD *)((v9 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v10 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v10 + 8) == 1)
    {
      v13 = *(unsigned __int8 *)(a4 + 16);
      if (v13 == 255)
      {
        LOBYTE(v13) = JSC::DFG::SpeculativeJIT::fillJSValue(*(_QWORD *)a4, v9, a3, a4, a5, a6, a7, a8);
        *(_BYTE *)(a4 + 16) = v13;
      }
      if ((char)v13 > 15)
        v14 = -1;
      else
        v14 = v13;
      ++*((_DWORD *)this + 3 * v14 + 1196);
    }
    else
    {
      LOBYTE(v13) = JSC::DFG::SpeculativeJIT::allocate(this, v9, a3, a4, a5, a6, a7, a8);
    }
    *(_BYTE *)(v11 + 8) = v13;
    return v11;
  }
  return result;
}

uint64_t JSC::DFG::JSValueRegsTemporary::JSValueRegsTemporary(uint64_t result, JSC::DFG::SpeculativeJIT *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v13;
  char v14;
  uint64_t v15;
  int v16;

  *(_QWORD *)result = 0;
  *(_BYTE *)(result + 8) = -1;
  v9 = *(_QWORD *)(a3 + 8);
  v10 = ~*(_DWORD *)((v9 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v10 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v10 + 8) == 1)
    {
      v13 = *(unsigned __int8 *)(a3 + 16);
      if (v13 == 255)
      {
        LOBYTE(v13) = JSC::DFG::SpeculativeJIT::fillJSValue(*(_QWORD *)a3, v9, a3, a4, a5, a6, a7, a8);
        *(_BYTE *)(a3 + 16) = v13;
      }
      if ((char)v13 > 15)
        v14 = -1;
      else
        v14 = v13;
      ++*((_DWORD *)this + 3 * v14 + 1196);
    }
    else
    {
      LOBYTE(v13) = JSC::DFG::SpeculativeJIT::allocate(this, v9, a3, a4, a5, a6, a7, a8);
    }
    v15 = *(_QWORD *)v11;
    *(_QWORD *)v11 = this;
    v16 = *(char *)(v11 + 8);
    *(_BYTE *)(v11 + 8) = v13;
    if (v15 && v16 != -1)
    {
      if (v16 > 15)
        v16 = -1;
      --*(_DWORD *)(v15 + 12 * v16 + 4784);
    }
    return v11;
  }
  return result;
}

uint64_t JSC::DFG::FPRTemporary::FPRTemporary(uint64_t this, JSC::DFG::SpeculativeJIT *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  char v17;

  v8 = 0;
  *(_QWORD *)this = a2;
  *(_BYTE *)(this + 8) = -1;
  v9 = (_DWORD *)((char *)a2 + 4976);
  v10 = 0x17u;
  v11 = -1;
  while (*v9)
  {
LABEL_6:
    ++v8;
    v9 += 3;
    if (v8 == 23)
    {
      v8 = v10;
      v13 = (unsigned int *)((char *)a2 + 12 * v10 + 4968);
      v14 = *v13;
      *(_QWORD *)v13 = 0xFFFFFFFF3FFFFFFFLL;
      v9 = v13 + 2;
      goto LABEL_9;
    }
  }
  v12 = *(v9 - 1);
  if (v12 != -1)
  {
    if (v12 < v11)
    {
      v10 = v8;
      v11 = *(v9 - 1);
    }
    goto LABEL_6;
  }
  v14 = *(v9 - 2);
  *((_QWORD *)v9 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_9:
  *v9 = 1;
  v15 = JSC::FPRInfo::toRegister::registerForIndex[v8];
  if (v14 != 0x3FFFFFFF)
  {
    v17 = v15;
    v16 = this;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)a2, v14, a3, a4, a5, a6, a7, a8);
    v15 = v17;
    this = v16;
  }
  *(_BYTE *)(this + 8) = v15;
  return this;
}

uint64_t JSC::DFG::FPRTemporary::FPRTemporary(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  char v22;

  *(_QWORD *)result = a2;
  *(_BYTE *)(result + 8) = -1;
  v9 = *(_QWORD *)(a3 + 8);
  v10 = ~*(_DWORD *)((v9 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v10 >= *(unsigned int *)(a2 + 4004))
  {
    __break(0xC471u);
    return result;
  }
  v11 = result;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 3992) + 24 * (int)v10 + 8) == 1)
  {
    v13 = *(unsigned __int8 *)(a3 + 16);
    if (v13 == 255)
    {
      LOBYTE(v13) = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(*(_QWORD *)a3, v9, a3, a4, a5, a6, a7, a8);
      *(_BYTE *)(a3 + 16) = v13;
    }
    v14 = a2 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v13];
    ++*(_DWORD *)(v14 + 4976);
    goto LABEL_6;
  }
  v15 = 0;
  v16 = (_DWORD *)(a2 + 4976);
  v17 = 0x17u;
  v18 = -1;
  while (*v16)
  {
LABEL_12:
    ++v15;
    v16 += 3;
    if (v15 == 23)
    {
      v15 = v17;
      v20 = (unsigned int *)(a2 + 4968 + 12 * v17);
      v21 = *v20;
      *(_QWORD *)v20 = 0xFFFFFFFF3FFFFFFFLL;
      v16 = v20 + 2;
      goto LABEL_15;
    }
  }
  v19 = *(v16 - 1);
  if (v19 != -1)
  {
    if (v19 < v18)
    {
      v17 = v15;
      v18 = *(v16 - 1);
    }
    goto LABEL_12;
  }
  v21 = *(v16 - 2);
  *((_QWORD *)v16 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_15:
  *v16 = 1;
  LOBYTE(v13) = JSC::FPRInfo::toRegister::registerForIndex[v15];
  if (v21 != 0x3FFFFFFF)
  {
    v22 = JSC::FPRInfo::toRegister::registerForIndex[v15];
    JSC::DFG::SpeculativeJIT::spill(a2, v21, a3, a4, a5, a6, a7, a8);
    LOBYTE(v13) = v22;
  }
LABEL_6:
  *(_BYTE *)(v11 + 8) = v13;
  return v11;
}

uint64_t JSC::DFG::FPRTemporary::FPRTemporary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v20;
  unint64_t v21;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;

  v8 = a2;
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = -1;
  v9 = *(_QWORD *)(a3 + 8);
  v10 = ~*(_DWORD *)((v9 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  v11 = *(unsigned int *)(v8 + 4004);
  if (v10 >= v11)
    goto LABEL_34;
  v14 = *(_QWORD *)(v8 + 3992);
  v15 = *(_DWORD *)(v14 + 24 * (int)v10 + 8);
  if (v15 == 1)
  {
    v16 = *(unsigned __int8 *)(a3 + 16);
    if (v16 == 255)
    {
      LOBYTE(v16) = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(*(_QWORD *)a3, v9, a3, a4, a5, a6, a7, a8);
      *(_BYTE *)(a3 + 16) = v16;
    }
    v17 = v8 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v16];
    ++*(_DWORD *)(v17 + 4976);
    goto LABEL_6;
  }
  v20 = *(_QWORD *)(a4 + 8) & 0xFF00FFFFFFFFFFFFLL;
  v21 = ~*(_DWORD *)(v20 + 0x30);
  if (v21 >= v11)
  {
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x197B79658);
  }
  if (*(_DWORD *)(v14 + 24 * (int)v21 + 8) == 1)
  {
    v26 = *(unsigned __int8 *)(a4 + 16);
    if (v26 == 255)
    {
      LOBYTE(v26) = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(*(_QWORD *)a4, *(_QWORD *)(a4 + 8), a3, a4, a5, a6, a7, a8);
      *(_BYTE *)(a4 + 16) = v26;
    }
    goto LABEL_23;
  }
  if (v15 == 2 && (v9 & 0xFF00FFFFFFFFFFFFLL) == v20)
  {
    v23 = *(unsigned __int8 *)(a3 + 16);
    if (v23 == 255)
    {
      LOBYTE(v23) = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(*(_QWORD *)a3, v9, a3, a4, a5, a6, a7, a8);
      *(_BYTE *)(a3 + 16) = v23;
    }
    v24 = *(unsigned __int8 *)(a4 + 16);
    if (v24 == 255)
    {
      LOBYTE(v24) = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(*(_QWORD *)a4, *(_QWORD *)(a4 + 8), a3, a4, a5, a6, a7, a8);
      *(_BYTE *)(a4 + 16) = v24;
    }
    v25 = v23;
    v8 = *(_QWORD *)a1;
    if (v25 == v24)
    {
      v26 = *(unsigned __int8 *)(a3 + 16);
      if (v26 == 255)
      {
        LOBYTE(v26) = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(*(_QWORD *)a3, *(_QWORD *)(a3 + 8), a3, a4, a5, a6, a7, a8);
        *(_BYTE *)(a3 + 16) = v26;
      }
LABEL_23:
      v27 = v8 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v26];
      ++*(_DWORD *)(v27 + 4976);
      LOBYTE(v16) = v26;
      goto LABEL_6;
    }
  }
  v28 = 0;
  v29 = (_DWORD *)(v8 + 4976);
  v30 = 0x17u;
  v31 = -1;
  while (*v29)
  {
LABEL_29:
    ++v28;
    v29 += 3;
    if (v28 == 23)
    {
      v28 = v30;
      v33 = (unsigned int *)(v8 + 4968 + 12 * v30);
      v34 = *v33;
      *(_QWORD *)v33 = 0xFFFFFFFF3FFFFFFFLL;
      v29 = v33 + 2;
      goto LABEL_32;
    }
  }
  v32 = *(v29 - 1);
  if (v32 != -1)
  {
    if (v32 < v31)
    {
      v30 = v28;
      v31 = *(v29 - 1);
    }
    goto LABEL_29;
  }
  v34 = *(v29 - 2);
  *((_QWORD *)v29 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_32:
  *v29 = 1;
  LOBYTE(v16) = JSC::FPRInfo::toRegister::registerForIndex[v28];
  if (v34 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill(v8, v34, a3, a4, a5, a6, a7, a8);
LABEL_6:
  *(_BYTE *)(a1 + 8) = v16;
  return a1;
}

uint64_t JSC::DFG::SpeculativeJIT::compilePeepHoleDoubleBranch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;

  v8 = a5;
  v9 = a4;
  v12 = *(_QWORD *)(a1 + 3960);
  v13 = *(_DWORD *)(*(_QWORD *)(a1 + 3968) + 8) + 1;
  while (v13 < *(_DWORD *)(v12 + 60))
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v13++);
    if (v14)
      goto LABEL_4;
  }
  v14 = 0;
LABEL_4:
  if (v14 == a3)
  {
    v8 = 0;
    v15 = a3;
  }
  else
  {
    v15 = a4;
    v9 = a3;
  }
  v16 = *(_QWORD *)(a2 + 24);
  if (((v16 >> 50) & 0x3F) - 49 >= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x197B79980);
  }
  v17 = ~*(_DWORD *)((v16 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v17 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B79A10);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v17 + 12))
    v18 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(a1, *(_QWORD *)(a2 + 24), a3, a4, a5, a6, a7, a8);
  else
    v18 = -1;
  v19 = *(_QWORD *)(a2 + 32);
  if (((v19 >> 50) & 0x3F) - 49 >= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x197B799A0);
  }
  v20 = ~*(_DWORD *)((v19 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v20 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B79A18);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v20 + 12))
    v21 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(a1, *(_QWORD *)(a2 + 32), a3, a4, a5, a6, a7, a8);
  else
    v21 = -1;
  if (v18 == -1)
    v18 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(a1, v16, a3, a4, a5, a6, a7, a8);
  if (v21 == -1)
    v21 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(a1, v19, a3, a4, a5, a6, a7, a8);
  v22 = *(_DWORD *)(a1 + 200);
  if (v22 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v22 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = (32 * v18) | (v21 << 16) | 0x1E602000;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(a1, v8, a3, a4, a5, a6, a7, a8, (uint64_t)&v37);
  v28 = (_QWORD *)(a1 + 5264);
  v29 = v38;
  v39 = v37;
  v40 = v38;
  v41 = v9;
  v30 = *(unsigned int *)(a1 + 5276);
  if ((_DWORD)v30 == *(_DWORD *)(a1 + 5272))
  {
    v35 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v28, (void *)(v30 + 1), (unint64_t)&v39, v23, v24, v25, v26, v27);
    v36 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
    *(_DWORD *)v36 = *(_DWORD *)v35;
    *(_QWORD *)(v36 + 4) = *(_QWORD *)(v35 + 4);
    *(_QWORD *)(v36 + 16) = *(_QWORD *)(v35 + 16);
  }
  else
  {
    v31 = *v28 + 24 * v30;
    *(_DWORD *)v31 = v37;
    *(_QWORD *)(v31 + 4) = v29;
    *(_QWORD *)(v31 + 16) = v9;
  }
  ++*(_DWORD *)(a1 + 5276);
  result = JSC::DFG::SpeculativeJIT::jump(a1, v15, 0, v23, v24, v25, v26, v27);
  v33 = a1 + 4968 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v21];
  --*(_DWORD *)(v33 + 8);
  v34 = a1 + 4968 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v18];
  --*(_DWORD *)(v34 + 8);
  return result;
}

uint64_t JSC::DFG::SpeculateDoubleOperand::SpeculateDoubleOperand(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = -1;
  if (((a3 >> 50) & 0x3F) - 49 >= 3
    || (v8 = ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x30), v8 >= *(unsigned int *)(a2 + 4004)))
  {
    __break(0xC471u);
    JUMPOUT(0x197B79AECLL);
  }
  if (*(_BYTE *)(*(_QWORD *)(a2 + 3992) + 24 * (int)v8 + 12))
    *(_BYTE *)(a1 + 16) = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(a2, a3, a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t JSC::DFG::SpeculativeJIT::jump(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  JSC::AssemblerBuffer *v13;
  int i;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::AssemblerBuffer *v20;
  int v21;
  unint64_t v22;
  uint64_t v23;

  v9 = result;
  v10 = *(_QWORD *)(result + 3960);
  v11 = *(_DWORD *)(*(_QWORD *)(result + 3968) + 8) + 1;
  while (v11 < *(_DWORD *)(v10 + 60))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v11++);
    if (v12)
      goto LABEL_4;
  }
  v12 = 0;
LABEL_4:
  if ((_DWORD)a3 || v12 != a2)
  {
    v13 = (JSC::AssemblerBuffer *)(result + 56);
    for (i = *(_DWORD *)(v9 + 200); i < *(_DWORD *)(v9 + 52); *(_DWORD *)(v9 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(v9 + 192))
      {
        v20 = v13;
        JSC::AssemblerBuffer::outOfLineGrow(v13, a2, a3, a4, a5, a6, a7, a8);
        v13 = v20;
        i = *(_DWORD *)(v9 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v9 + 56) + i) = -721215457;
      i = *(_DWORD *)(v9 + 200) + 4;
    }
    v15 = i;
    if ((i + 4) > *(_DWORD *)(v9 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v13, a2, a3, a4, a5, a6, a7, a8);
      v15 = *(_DWORD *)(v9 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + v15) = 335544320;
    *(_DWORD *)(v9 + 200) += 4;
    v16 = 0xFF000F4500000000;
    if (!*(_BYTE *)(v9 + 328))
      v16 = 0xFF000F4100000000;
    result = v9 + 5264;
    v21 = i;
    v22 = v16;
    v23 = a2;
    v17 = *(unsigned int *)(v9 + 5276);
    if ((_DWORD)v17 == *(_DWORD *)(v9 + 5272))
    {
      result = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v17 + 1), (unint64_t)&v21, a4, a5, a6, a7, a8);
      v19 = *(_QWORD *)(v9 + 5264) + 24 * *(unsigned int *)(v9 + 5276);
      *(_DWORD *)v19 = *(_DWORD *)result;
      *(_QWORD *)(v19 + 4) = *(_QWORD *)(result + 4);
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(result + 16);
    }
    else
    {
      v18 = *(_QWORD *)result + 24 * v17;
      *(_DWORD *)v18 = i;
      *(_QWORD *)(v18 + 4) = v16;
      *(_QWORD *)(v18 + 16) = a2;
    }
    ++*(_DWORD *)(v9 + 5276);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compilePeepHoleObjectEquality(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v11;
  JSC::DFG::Node *v12;
  _BOOL4 v13;
  JSC::DFG::Node *v14;
  JSC::DFG::Node *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;
  int isWatchingMasqueradesAsUndefinedWatchpointSet;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t result;
  char v66;
  char v67;
  uint64_t v68;
  JSC::DFG::Node *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  JSC::DFG::Node *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int8x8_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int8x8_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int *v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int *v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  JSC::DFG::Node *v135;
  unint64_t v136;
  _BOOL4 v137;
  unint64_t v138;
  JSC::DFG::Node *v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  JSC::DFG::Node *v156;

  v10 = *((_QWORD *)this + 495);
  v11 = *(_DWORD *)(*((_QWORD *)this + 496) + 8) + 1;
  while (v11 < *(_DWORD *)(v10 + 60))
  {
    v12 = *(JSC::DFG::Node **)(*(_QWORD *)(v10 + 48) + 8 * v11++);
    if (v12)
      goto LABEL_4;
  }
  v12 = 0;
LABEL_4:
  v13 = v12 == a3;
  if (v12 == a3)
    v14 = a3;
  else
    v14 = (JSC::DFG::Node *)a4;
  if (v12 == a3)
    v15 = (JSC::DFG::Node *)a4;
  else
    v15 = a3;
  v16 = *((_QWORD *)a2 + 3);
  v17 = v16 & 0xFF00FFFFFFFFFFFFLL;
  v139 = v15;
  if ((v16 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_51;
  v18 = ~*(_DWORD *)((v16 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v18 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197B7A644);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v18 + 12))
    v19 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v16, (uint64_t)a3, a4, a5, a6, a7, a8);
  else
LABEL_51:
    v19 = -1;
  v20 = *((_QWORD *)a2 + 4);
  v138 = v20 & 0xFF00FFFFFFFFFFFFLL;
  v137 = v13;
  if ((v20 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_52;
  v21 = ~*(_DWORD *)((v20 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v21 >= *((unsigned int *)this + 1001))
    goto LABEL_133;
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v21 + 12))
    v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v20, (uint64_t)a3, a4, a5, a6, a7, a8);
  else
LABEL_52:
    v22 = -1;
  if (v19 == 0xFF)
    v19 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v16, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (v22 == 0xFF)
    v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v20, (uint64_t)a3, a4, a5, a6, a7, a8);
  isWatchingMasqueradesAsUndefinedWatchpointSet = JSC::DFG::Graph::isWatchingMasqueradesAsUndefinedWatchpointSet(*((JSC::DFG::Graph **)this + 495), *((JSC::DFG::Node **)this + 497), (uint64_t)a3, a4, a5, a6, a7, a8);
  v31 = *((_QWORD *)a2 + 3);
  v32 = *((_QWORD *)this + 688);
  v33 = *(unsigned int *)((v31 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  if (!isWatchingMasqueradesAsUndefinedWatchpointSet)
  {
    v78 = (_QWORD *)(v32 + 24);
    v79 = (_QWORD *)(v32 + 8);
    if ((v31 & 1) != 0)
      v80 = v78;
    else
      v80 = v79;
    v81 = *v80 + 32 * v33;
    v82 = (void *)*((unsigned int *)this + 1396);
    if ((_DWORD)v82 != *(_DWORD *)(v81 + 20))
    {
      if ((*(_QWORD *)(v81 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v81, v82, v25, v26, v27, v28, v29, v30);
      else
        *(_DWORD *)(v81 + 20) = (_DWORD)v82;
    }
    if ((*(_QWORD *)(v81 + 8) & 0xFFFFDFFFF0000008) != 0)
    {
      if (!*((_BYTE *)this + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197B7A61CLL);
      }
      v83 = *((_QWORD *)a2 + 3);
      *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
      JSC::MacroAssemblerARM64::load8((uint64_t)this, v19 | 0x500000000, *((char *)this + 304), v26, v27, v28, v29, v30);
      JSC::MacroAssemblerARM64::branch32((uint64_t)this, 3, 17, 23, v84, v85, v86, v87, (uint64_t)&v146);
      v154 = v146;
      v155 = v147;
      JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 1uLL, (JSC::DFG::Node *)(((unint64_t)v19 << 32) | 0x80000000), (JSC::DFG::Node *)(v83 & 0xFF00FFFFFFFFFFFFLL), &v154);
    }
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197B7A5DCLL);
    }
    v88 = *((_QWORD *)a2 + 3);
    *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
    JSC::MacroAssemblerARM64::load8((uint64_t)this, v19 | 0x600000000, *((char *)this + 304), v26, v27, v28, v29, v30);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, (uint64_t)this, 1, 17, v89, v90, v91, v92, (uint64_t)&v144, v93);
    v154 = v144;
    v155 = v145;
    JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 1uLL, (JSC::DFG::Node *)(((unint64_t)v19 << 32) | 0x80000000), (JSC::DFG::Node *)(v88 & 0xFF00FFFFFFFFFFFFLL), &v154);
    v100 = *((_QWORD *)a2 + 4);
    v101 = *((_QWORD *)this + 688);
    v102 = *(unsigned int *)((v100 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v103 = (_QWORD *)(v101 + 24);
    v104 = (_QWORD *)(v101 + 8);
    if ((v100 & 1) != 0)
      v105 = v103;
    else
      v105 = v104;
    v106 = *v105 + 32 * v102;
    v107 = (void *)*((unsigned int *)this + 1396);
    if ((_DWORD)v107 != *(_DWORD *)(v106 + 20))
    {
      if ((*(_QWORD *)(v106 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v106, v107, v94, v95, v96, v97, v98, v99);
      else
        *(_DWORD *)(v106 + 20) = (_DWORD)v107;
    }
    if ((*(_QWORD *)(v106 + 8) & 0xFFFFDFFFF0000008) != 0)
    {
      if (!*((_BYTE *)this + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197B7A63CLL);
      }
      v116 = *((_QWORD *)a2 + 4);
      *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
      JSC::MacroAssemblerARM64::load8((uint64_t)this, v22 | 0x500000000, *((char *)this + 304), v95, v96, v97, v98, v99);
      JSC::MacroAssemblerARM64::branch32((uint64_t)this, 3, 17, 23, v117, v118, v119, v120, (uint64_t)&v142);
      v154 = v142;
      v155 = v143;
      JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 1uLL, (JSC::DFG::Node *)(((unint64_t)v22 << 32) | 0x80000000), (JSC::DFG::Node *)(v116 & 0xFF00FFFFFFFFFFFFLL), &v154);
    }
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197B7A5FCLL);
    }
    v108 = *((_QWORD *)a2 + 4);
    v69 = (JSC::DFG::Node *)(((unint64_t)v22 << 32) | 0x80000000);
    *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
    JSC::MacroAssemblerARM64::load8((uint64_t)this, v22 | 0x600000000, *((char *)this + 304), v95, v96, v97, v98, v99);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, (uint64_t)this, 1, 17, v109, v110, v111, v112, (uint64_t)&v140, v113);
    v74 = (JSC::DFG::Node *)(v108 & 0xFF00FFFFFFFFFFFFLL);
    v154 = v140;
    v75 = v141;
    goto LABEL_50;
  }
  v135 = v14;
  v136 = v16 & 0xFF00FFFFFFFFFFFFLL;
  v34 = (uint64_t *)(v32 + 24);
  v35 = (uint64_t *)(v32 + 8);
  if ((v31 & 1) != 0)
    v36 = v34;
  else
    v36 = v35;
  v37 = *v36;
  v38 = *v36 + 32 * v33;
  v39 = *((_DWORD *)this + 1396);
  v40 = *(_DWORD *)(v38 + 20);
  if (v39 != v40)
  {
    if ((*(_QWORD *)(v38 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v40 ^ v39) >= 2)
      {
        v114 = *(_QWORD *)v38;
        if (*(_QWORD *)v38 != 4)
        {
          *(_QWORD *)v38 = v114 | 2;
          v121 = (unsigned int *)(v114 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v114 & 1) != 0)
          {
            v127 = 2 * *v121;
            while (v127 * 4)
            {
              v128 = *(_QWORD *)&v121[v127];
              if ((*(_BYTE *)(v128 + 19) & 0xC) == 0)
              {
                v129 = *(_QWORD *)(v128 + 96);
                v130 = (v129 & 1) != 0 ? (v129 >> 1) & 3 : *(unsigned __int8 *)(v129 + 4);
                v127 -= 2;
                if (v130 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v121, v24, v25, v26, v27, v28, v29, v30);
              goto LABEL_92;
            }
          }
          else if (v121)
          {
            if ((*((_BYTE *)v121 + 19) & 0xC) != 0
              || ((v122 = *((_QWORD *)v121 + 12), (v122 & 1) != 0)
                ? (v123 = (v122 >> 1) & 3)
                : (v123 = *(unsigned __int8 *)(v122 + 4)),
                  v123 == 2))
            {
LABEL_92:
              *(_QWORD *)v38 = 4;
            }
          }
        }
        *(_DWORD *)(v37 + 32 * v33 + 16) = -21020677;
      }
      if ((v39 & 1) != 0)
        *(_QWORD *)v38 &= ~2uLL;
    }
    *(_DWORD *)(v38 + 20) = v39;
  }
  if ((*(_QWORD *)(v38 + 8) & 0xFFFFDFFFF0000008) != 0)
  {
    if (*((_BYTE *)this + 212))
    {
      v41 = *((_QWORD *)a2 + 3);
      *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
      JSC::MacroAssemblerARM64::load8((uint64_t)this, v19 | 0x500000000, *((char *)this + 304), v26, v27, v28, v29, v30);
      JSC::MacroAssemblerARM64::branch32((uint64_t)this, 3, 17, 23, v42, v43, v44, v45, (uint64_t)&v150);
      v154 = v150;
      v155 = v151;
      JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 1uLL, (JSC::DFG::Node *)(((unint64_t)v19 << 32) | 0x80000000), (JSC::DFG::Node *)(v41 & 0xFF00FFFFFFFFFFFFLL), &v154);
      goto LABEL_30;
    }
LABEL_133:
    __break(0xC471u);
    JUMPOUT(0x197B7A58CLL);
  }
LABEL_30:
  v46 = *((_QWORD *)a2 + 4);
  v47 = *((_QWORD *)this + 688);
  v48 = *(unsigned int *)((v46 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v49 = (uint64_t *)(v47 + 24);
  v50 = (uint64_t *)(v47 + 8);
  if ((v46 & 1) != 0)
    v51 = v49;
  else
    v51 = v50;
  v52 = *v51;
  v53 = *v51 + 32 * v48;
  v54 = *((_DWORD *)this + 1396);
  v55 = *(_DWORD *)(v53 + 20);
  if (v54 != v55)
  {
    if ((*(_QWORD *)(v53 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v55 ^ v54) >= 2)
      {
        v115 = *(_QWORD *)v53;
        if (*(_QWORD *)v53 != 4)
        {
          *(_QWORD *)v53 = v115 | 2;
          v124 = (unsigned int *)(v115 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v115 & 1) != 0)
          {
            v131 = 2 * *v124;
            while (v131 * 4)
            {
              v132 = *(_QWORD *)&v124[v131];
              if ((*(_BYTE *)(v132 + 19) & 0xC) == 0)
              {
                v133 = *(_QWORD *)(v132 + 96);
                v134 = (v133 & 1) != 0 ? (v133 >> 1) & 3 : *(unsigned __int8 *)(v133 + 4);
                v131 -= 2;
                if (v134 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v124, v24, v25, v26, v27, v28, v29, v30);
              goto LABEL_99;
            }
          }
          else if (v124)
          {
            if ((*((_BYTE *)v124 + 19) & 0xC) != 0
              || ((v125 = *((_QWORD *)v124 + 12), (v125 & 1) != 0)
                ? (v126 = (v125 >> 1) & 3)
                : (v126 = *(unsigned __int8 *)(v125 + 4)),
                  v126 == 2))
            {
LABEL_99:
              *(_QWORD *)v53 = 4;
            }
          }
        }
        *(_DWORD *)(v52 + 32 * v48 + 16) = -21020677;
      }
      if ((v54 & 1) != 0)
        *(_QWORD *)v53 &= ~2uLL;
    }
    *(_DWORD *)(v53 + 20) = v54;
  }
  v14 = v135;
  v17 = v136;
  if ((*(_QWORD *)(v53 + 8) & 0xFFFFDFFFF0000008) != 0)
  {
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197B7A5BCLL);
    }
    v68 = *((_QWORD *)a2 + 4);
    v69 = (JSC::DFG::Node *)(((unint64_t)v22 << 32) | 0x80000000);
    *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
    JSC::MacroAssemblerARM64::load8((uint64_t)this, v22 | 0x500000000, *((char *)this + 304), v26, v27, v28, v29, v30);
    JSC::MacroAssemblerARM64::branch32((uint64_t)this, 3, 17, 23, v70, v71, v72, v73, (uint64_t)&v148);
    v74 = (JSC::DFG::Node *)(v68 & 0xFF00FFFFFFFFFFFFLL);
    v154 = v148;
    v75 = v149;
LABEL_50:
    v155 = v75;
    JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 1uLL, v69, v74, &v154);
  }
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, v137, (char)v19, (char)v22, v27, v28, v29, v30, (uint64_t)&v152);
  v61 = (_QWORD *)((char *)this + 5264);
  v62 = v153;
  v154 = v152;
  v155 = v153;
  v156 = v139;
  v63 = *((unsigned int *)this + 1319);
  if ((_DWORD)v63 == *((_DWORD *)this + 1318))
  {
    v76 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, (void *)(v63 + 1), (unint64_t)&v154, v56, v57, v58, v59, v60);
    v77 = *((_QWORD *)this + 658) + 24 * *((unsigned int *)this + 1319);
    *(_DWORD *)v77 = *(_DWORD *)v76;
    *(_QWORD *)(v77 + 4) = *(_QWORD *)(v76 + 4);
    *(_QWORD *)(v77 + 16) = *(_QWORD *)(v76 + 16);
  }
  else
  {
    v64 = *v61 + 24 * v63;
    *(_DWORD *)v64 = v152;
    *(_QWORD *)(v64 + 4) = v62;
    *(_QWORD *)(v64 + 16) = v139;
  }
  ++*((_DWORD *)this + 1319);
  result = JSC::DFG::SpeculativeJIT::jump((uint64_t)this, (uint64_t)v14, 0, v56, v57, v58, v59, v60);
  if (v138)
  {
    if ((char)v22 > 15)
      v66 = -1;
    else
      v66 = v22;
    --*((_DWORD *)this + 3 * v66 + 1196);
  }
  if (v17)
  {
    if ((char)v19 > 15)
      v67 = -1;
    else
      v67 = v19;
    --*((_DWORD *)this + 3 * v67 + 1196);
  }
  return result;
}

void JSC::AssemblyHelpers::branchIfNotObject(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(a1 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load8(a1, a2 | 0x500000000, *(char *)(a1 + 304), a3, a4, a5, a6, a7);
    JSC::MacroAssemblerARM64::branch32(a1, 3, 17, 23, v10, v11, v12, v13, a8);
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t JSC::DFG::SpeculativeJIT::branchPtr<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  JSC::MacroAssemblerARM64::branch64(a1, 1, a2, a3, a5, a6, a7, a8, (uint64_t)&v20);
  result = a1 + 5264;
  v16 = v21;
  v22 = v20;
  v23 = v21;
  v24 = a4;
  v17 = *(unsigned int *)(a1 + 5276);
  if ((_DWORD)v17 == *(_DWORD *)(a1 + 5272))
  {
    result = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v17 + 1), (unint64_t)&v22, v10, v11, v12, v13, v14);
    v19 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
    *(_DWORD *)v19 = *(_DWORD *)result;
    *(_QWORD *)(v19 + 4) = *(_QWORD *)(result + 4);
    *(_QWORD *)(v19 + 16) = *(_QWORD *)(result + 16);
  }
  else
  {
    v18 = *(_QWORD *)result + 24 * v17;
    *(_DWORD *)v18 = v20;
    *(_QWORD *)(v18 + 4) = v16;
    *(_QWORD *)(v18 + 16) = a4;
  }
  ++*(_DWORD *)(a1 + 5276);
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compilePeepHoleBooleanBranch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int *v56;
  unsigned int v57;
  char v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;

  v12 = *(_QWORD *)(a1 + 3960);
  v13 = *(_DWORD *)(*(_QWORD *)(a1 + 3968) + 8) + 1;
  while (v13 < *(_DWORD *)(v12 + 60))
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v13++);
    if (v14)
      goto LABEL_4;
  }
  v14 = 0;
LABEL_4:
  if (v14 == a3)
    v15 = a4;
  else
    v15 = a3;
  if (v14 == a3)
    v16 = a5 ^ 1u;
  else
    v16 = a5;
  v17 = *(_QWORD *)(a2 + 24);
  if (*(unsigned __int16 *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u
    && (v18 = **(_QWORD **)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x48), v18 >= 0xFFFE000000000000))
  {
    JSC::DFG::SpeculateBooleanOperand::SpeculateBooleanOperand((uint64_t)&v62, a1, *(_QWORD *)(a2 + 32), a4, a5, a6, a7, a8);
    v48 = v63;
    if (v63 == 255)
    {
      v48 = JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(v62, *((unint64_t *)&v62 + 1), v42, v43, v44, v45, v46, v47);
      LOBYTE(v63) = v48;
    }
    JSC::DFG::SpeculativeJIT::branch32<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Imm32,JSC::ARM64Registers::RegisterID>(a1, v16, v18, v48, v15, v45, v46, v47);
  }
  else
  {
    v19 = *(_QWORD *)(a2 + 32);
    v20 = v19 & 0xFF00FFFFFFFFFFFFLL;
    if (*(unsigned __int16 *)((v19 & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u
      || **(_QWORD **)((v19 & 0xFF00FFFFFFFFFFFFLL) + 0x48) < 0xFFFE000000000000)
    {
      v21 = ~*(_DWORD *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      v22 = *(unsigned int *)(a1 + 4004);
      if (v21 >= v22
        || (!*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v21 + 12)
          ? (v23 = -1)
          : (v23 = JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(a1, *(_QWORD *)(a2 + 24), a3, a4, a5, a6, a7, a8),
             v19 = *(_QWORD *)(a2 + 32),
             v22 = *(unsigned int *)(a1 + 4004),
             v20 = v19 & 0xFF00FFFFFFFFFFFFLL),
            v24 = ~*(_DWORD *)(v20 + 48),
            v24 >= v22))
      {
        __break(0xC471u);
        JUMPOUT(0x197B7AB54);
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v24 + 12))
        v25 = JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(a1, v19, a3, a4, a5, a6, a7, a8);
      else
        v25 = -1;
      if (v23 == -1)
        v23 = JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(a1, v17, a3, a4, a5, a6, a7, a8);
      if (v25 == -1)
        v25 = JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(a1, v19, a3, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::branch32(a1, v16, v23, v25, a5, a6, a7, a8, (uint64_t)&v60);
      v31 = (_QWORD *)(a1 + 5264);
      v32 = v61;
      LODWORD(v62) = v60;
      *(_QWORD *)((char *)&v62 + 4) = v61;
      v63 = v15;
      v33 = *(unsigned int *)(a1 + 5276);
      if ((_DWORD)v33 == *(_DWORD *)(a1 + 5272))
      {
        v40 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v31, (void *)(v33 + 1), (unint64_t)&v62, v26, v27, v28, v29, v30);
        v41 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
        *(_DWORD *)v41 = *(_DWORD *)v40;
        *(_QWORD *)(v41 + 4) = *(_QWORD *)(v40 + 4);
        *(_QWORD *)(v41 + 16) = *(_QWORD *)(v40 + 16);
      }
      else
      {
        v34 = *v31 + 24 * v33;
        *(_DWORD *)v34 = v60;
        *(_QWORD *)(v34 + 4) = v32;
        *(_QWORD *)(v34 + 16) = v15;
      }
      ++*(_DWORD *)(a1 + 5276);
      v35 = a1 + 4776;
      if (v25 > 15)
        v36 = -1;
      else
        v36 = v25;
      --*(_DWORD *)(v35 + 12 * v36 + 8);
      if (v23 > 15)
        v37 = -1;
      else
        v37 = v23;
      --*(_DWORD *)(v35 + 12 * v37 + 8);
      goto LABEL_33;
    }
    JSC::DFG::SpeculateBooleanOperand::SpeculateBooleanOperand((uint64_t)&v62, a1, *(_QWORD *)(a2 + 24), a4, a5, a6, a7, a8);
    v55 = *(unsigned __int16 *)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
    if (v55 == 355 || v55 == 348)
    {
      v56 = (unsigned int *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
      }
    }
    else
    {
      v56 = *(unsigned int **)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    }
    v57 = *v56;
    v58 = v63;
    if (v63 == 255)
    {
      v58 = JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(v62, *((unint64_t *)&v62 + 1), v49, v50, v51, v52, v53, v54);
      LOBYTE(v63) = v58;
    }
    JSC::DFG::SpeculativeJIT::branch32<JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Imm32>(a1, v16, v58, v57, v15, v52, v53, v54);
  }
  v59 = (char)v63;
  if ((char)v63 > 15)
    v59 = -1;
  --*(_DWORD *)(v62 + 12 * v59 + 4784);
LABEL_33:
  if (v14 == a3)
    v38 = a3;
  else
    v38 = a4;
  return JSC::DFG::SpeculativeJIT::jump(a1, v38, 0, v26, v27, v28, v29, v30);
}

uint64_t JSC::DFG::SpeculateBooleanOperand::SpeculateBooleanOperand(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_BYTE *)(result + 16) = -1;
  v8 = ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v8 >= *(unsigned int *)(a2 + 4004))
  {
    __break(0xC471u);
  }
  else
  {
    v9 = result;
    if (*(_BYTE *)(*(_QWORD *)(a2 + 3992) + 24 * (int)v8 + 12))
      *(_BYTE *)(result + 16) = JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(a2, a3, a3, a4, a5, a6, a7, a8);
    return v9;
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::branch32<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Imm32,JSC::ARM64Registers::RegisterID>(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  v10 = a2 - 2;
  if ((a2 - 2) <= 0xB && ((0xFC3u >> v10) & 1) != 0)
    a2 = dword_199123E40[v10];
  JSC::MacroAssemblerARM64::branch32(a1, a2, a4, a3, a5, a6, a7, a8, (uint64_t)&v21);
  result = a1 + 5264;
  v17 = v22;
  v23 = v21;
  v24 = v22;
  v25 = a5;
  v18 = *(unsigned int *)(a1 + 5276);
  if ((_DWORD)v18 == *(_DWORD *)(a1 + 5272))
  {
    result = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v18 + 1), (unint64_t)&v23, v11, v12, v13, v14, v15);
    v20 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
    *(_DWORD *)v20 = *(_DWORD *)result;
    *(_QWORD *)(v20 + 4) = *(_QWORD *)(result + 4);
    *(_QWORD *)(v20 + 16) = *(_QWORD *)(result + 16);
  }
  else
  {
    v19 = *(_QWORD *)result + 24 * v18;
    *(_DWORD *)v19 = v21;
    *(_QWORD *)(v19 + 4) = v17;
    *(_QWORD *)(v19 + 16) = a5;
  }
  ++*(_DWORD *)(a1 + 5276);
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::branch32<JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Imm32>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  JSC::MacroAssemblerARM64::branch32(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v20);
  result = a1 + 5264;
  v16 = v21;
  v22 = v20;
  v23 = v21;
  v24 = a5;
  v17 = *(unsigned int *)(a1 + 5276);
  if ((_DWORD)v17 == *(_DWORD *)(a1 + 5272))
  {
    result = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v17 + 1), (unint64_t)&v22, v10, v11, v12, v13, v14);
    v19 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
    *(_DWORD *)v19 = *(_DWORD *)result;
    *(_QWORD *)(v19 + 4) = *(_QWORD *)(result + 4);
    *(_QWORD *)(v19 + 16) = *(_QWORD *)(result + 16);
  }
  else
  {
    v18 = *(_QWORD *)result + 24 * v17;
    *(_DWORD *)v18 = v20;
    *(_QWORD *)(v18 + 4) = v16;
    *(_QWORD *)(v18 + 16) = a5;
  }
  ++*(_DWORD *)(a1 + 5276);
  return result;
}

void JSC::DFG::SpeculativeJIT::compileStringSlice(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int8x8_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int i;
  unsigned int v89;
  char v90;
  int *v91;
  int *v92;
  int v93;
  char *v94;
  int v95;
  int v96;
  int v97;
  unsigned int v98;
  unsigned int *v99;
  JSC::DFG::SpeculativeJIT *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  unsigned int v118;
  int *v119;
  int *v120;
  int v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int8x8_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int j;
  unsigned int v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  JSC::DFG::Node *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t v201;
  unsigned int v202;
  int v203;
  _BYTE *v204;
  WTF *v205;
  WTF *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  _BYTE *v211;
  WTF *v212;
  WTF *v213;
  uint64_t v214;
  unsigned int v215;
  int v216;
  _BYTE *v217;
  WTF *v218;
  WTF *v219;
  unsigned int v220;
  int v221;
  _BYTE *v222;
  _BYTE *v223;
  _BYTE *v224;
  unsigned int v225;
  int v226;
  _BYTE *v227;
  _BYTE *v228;
  _BYTE *v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  void *v239;
  JSC::DFG::Node *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  WTF *v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  WTF *v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  int v292;
  unsigned int v293;
  char *v294;
  unint64_t v295;
  uint64_t v296;
  int v297;
  WTF *v298;
  WTF *v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  uint64_t *v317;
  uint64_t *v318;
  JSC::DFG::SpeculativeJIT *v319;
  JSC::AssemblerBuffer *v320;
  _QWORD *v321;
  WTF *v322;
  WTF *v323;
  unint64_t v324;
  unsigned __int8 v325;
  unint64_t v326;
  char v327;
  unsigned __int8 v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  WTF *v332;
  unsigned int v333;
  unsigned int v334;
  _BYTE v335[24];
  uint64_t v336;
  uint64_t v337;
  int v338;
  uint64_t v339;
  unsigned int v340[2];
  char v341;
  __int16 v342;
  char v343;
  unsigned int v344[3];
  int v345;
  int v346;
  int v347;
  int v348;
  char v349;
  __int16 v350;
  char v351;
  unsigned int v352;
  JSC::ARM64LogicalImmediate *v353;
  unsigned int v354[3];
  WTF *v355;
  uint64_t v356;
  _BYTE v357[24];
  WTF *v358;
  uint64_t v359;
  _BYTE v360[28];
  int v361;
  uint64_t v362;
  uint64_t v363;
  char v364;
  uint64_t v365;
  unsigned __int8 v366;
  uint64_t v367;
  unsigned __int8 v368;
  JSC::DFG::SpeculativeJIT *v369;
  unint64_t v370;
  char v371;
  _BYTE v372[7];
  char v373;
  JSC::DFG::SpeculativeJIT *v374;
  unint64_t v375;
  char v376;
  _BYTE v377[7];
  WTF *v378;
  unsigned int v379;
  unsigned int v380;
  _BYTE v381[24];
  _BYTE *v382;
  unsigned int v383;
  unsigned int v384;
  _BYTE v385[24];
  _BYTE *v386;
  unsigned int v387;
  unsigned int v388;
  _BYTE v389[24];
  _BYTE *v390;
  unsigned int v391;
  unsigned int v392;
  _BYTE v393[32];

  v12 = *((_QWORD *)a2 + 3);
  v13 = v12 & 0xFF00FFFFFFFFFFFFLL;
  if ((v12 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v14 = ~*(_DWORD *)((v12 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197B7C104);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 12)
    || (v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        (_DWORD)v15 == -1))
  {
LABEL_5:
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v12, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 3), v15, a4, a5, a6, a7, a8);
  v21 = *((_QWORD *)a2 + 4);
  v374 = this;
  v375 = v21;
  v376 = -1;
  v22 = ~*(_DWORD *)((v21 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v22 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197B7C0FCLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v22 + 12))
  {
    v23 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v21, (uint64_t)v377, v16, v17, v18, v19, v20);
    v376 = v23;
    v328 = v23;
    if (v23 != -1)
      goto LABEL_9;
    v100 = v374;
    v21 = v375;
  }
  else
  {
    v100 = this;
  }
  v328 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v100, v21, (uint64_t)v377, v16, v17, v18, v19, v20);
  v376 = v328;
LABEL_9:
  v329 = v15;
  LOBYTE(v25) = 0;
  LOBYTE(v369) = 0;
  v373 = 0;
  v26 = *((_QWORD *)a2 + 5);
  v27 = v26 & 0xFF00FFFFFFFFFFFFLL;
  if ((v26 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_13;
  v369 = this;
  v370 = v26;
  v371 = -1;
  v28 = ~*(_DWORD *)((v26 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v28 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197B7C114);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v28 + 12))
  {
    v25 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v26, (uint64_t)v372, v16, v17, v18, v19, v20);
    v371 = v25;
    v373 = 1;
    if (v25 != -1)
      goto LABEL_13;
    v319 = v369;
    v26 = v370;
  }
  else
  {
    v373 = 1;
    v319 = this;
  }
  LOBYTE(v25) = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v319, v26, (uint64_t)v372, v16, v17, v18, v19, v20);
  v371 = v25;
LABEL_13:
  v325 = v25;
  v326 = v27;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v367, this, v24, v16, v17, v18, v19, v20);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v365, this, v29, v30, v31, v32, v33, v34);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v363, this, v35, v36, v37, v38, v39, v40);
  v41 = v368;
  v42 = (char)v368;
  v43 = (char)v366;
  v44 = v366;
  v45 = v364;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v329 | 0x800000000, v42, v46, v47, v48, v49, v50);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, v42, 1, v51, v52, v53, v54, (uint64_t)&v361, v55);
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v41 | 0x400000000, v43, v56, v57, v58, v59, v60);
  JSC::DFG::SpeculativeJIT::emitPopulateSliceIndex((uint64_t)this, *((_QWORD *)a2 + 4), v328 | 0x100, v43, v45, v61, v62, v63);
  v70 = *((_QWORD *)a2 + 5);
  v324 = v13;
  if ((v70 & 0xFF00FFFFFFFFFFFFLL) == 0)
  {
    if ((_DWORD)v43 == (_DWORD)v42)
      goto LABEL_16;
    if ((_DWORD)v43 == 63)
    {
      if ((_DWORD)v42 != 31)
      {
        v97 = v41 & 0x1F | 0xD2800000;
        goto LABEL_33;
      }
    }
    else if ((_DWORD)v42 != 31 && (_DWORD)v44 != 31)
    {
      v95 = v41 & 0xFFE0FFFF | ((v44 & 0x1F) << 16);
      v96 = -1442839584;
LABEL_32:
      v97 = v95 | v96;
LABEL_33:
      v99 = (unsigned int *)((char *)this + 200);
      v98 = *((_DWORD *)this + 50);
      if (v98 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v70, v64, v65, v66, v67, v68, v69);
        v98 = *v99;
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v98) = v97;
      *v99 += 4;
      goto LABEL_16;
    }
    v95 = v42 | (32 * v43);
    v96 = -1862270976;
    goto LABEL_32;
  }
  if (!v326)
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_205;
  }
  JSC::DFG::SpeculativeJIT::emitPopulateSliceIndex((uint64_t)this, v70, v325 | 0x100, v43, v42, v67, v68, v69);
LABEL_16:
  v358 = (WTF *)v360;
  v9 = 2;
  v359 = 2;
  v322 = (WTF *)v357;
  v355 = (WTF *)v357;
  v356 = 2;
  v8 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
  v327 = v45;
  LODWORD(v43) = (char)v45;
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 3, (char)v45, v42, v66, v67, v68, v69, (uint64_t)v354);
  JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v352, this, *(_QWORD *)(v8 + 41968), v71, v72, v73, v74, v75);
  v323 = (WTF *)v360;
  if (v352 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v353, v42, v76, v77, v78, v79, v80);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v352 << 35) + 0x380000001ALL, v42, v76, v77, v78, v79, v80);
  v320 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
  {
    if ((i + 4) > *((_DWORD *)this + 48))
    {
LABEL_205:
      JSC::AssemblerBuffer::outOfLineGrow(v320, v81, v82, v83, v84, v85, v86, v87);
      i = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
    i = *((_DWORD *)this + 50) + 4;
  }
  v89 = i;
  if ((i + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v320, v81, v82, v83, v84, v85, v86, v87);
    v89 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v89) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v90 = 69;
  else
    v90 = 65;
  v347 = i;
  v348 = 0;
  v349 = v90;
  v350 = 15;
  v351 = -1;
  if (i != -1)
  {
    if (HIDWORD(v359) == (_DWORD)v359)
    {
      v91 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v358, (void *)(HIDWORD(v359) + 1), (unint64_t)&v347, v83, v84, v85, v86, v87);
      v93 = *v91;
      v92 = v91 + 1;
      v94 = (char *)v358 + 12 * HIDWORD(v359);
      *(_DWORD *)v94 = v93;
    }
    else
    {
      v92 = &v348;
      v94 = (char *)v358 + 12 * HIDWORD(v359);
      *(_DWORD *)v94 = i;
    }
    *(_QWORD *)(v94 + 4) = *(_QWORD *)v92;
    ++HIDWORD(v359);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v354, (uint64_t)this, v82, v83, v84, v85, v86, v87);
  v108 = (v327 & 0x1F) << 16;
  if ((_DWORD)v42 == 31)
  {
    v109 = 1260413951;
  }
  else
  {
    v108 |= 32 * (v41 & 0x1F);
    v109 = v41 & 0x1F | 0x4B000000;
  }
  v110 = v108 | v109;
  v111 = *((_DWORD *)this + 50);
  if (v111 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v320, v101, v102, v103, v104, v105, v106, v107);
    v111 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v111) = v110;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, v42, 1, v104, v105, v106, v107, (uint64_t)&v345);
  v117 = v345;
  if (v345 != -1)
  {
    v118 = HIDWORD(v356);
    if (HIDWORD(v356) == (_DWORD)v356)
    {
      v119 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v355, (void *)(HIDWORD(v356) + 1), (unint64_t)&v345, v112, v113, v114, v115, v116);
      v121 = *v119;
      v120 = v119 + 1;
      v117 = v121;
      v118 = HIDWORD(v356);
    }
    else
    {
      v120 = &v346;
    }
    v122 = (char *)v355 + 12 * v118;
    *(_DWORD *)v122 = v117;
    *(_QWORD *)(v122 + 4) = *(_QWORD *)v120;
    ++HIDWORD(v356);
  }
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v329 | 0x800000000, (char)v44, v112, v113, v114, v115, v116);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v44 | 0x800000000, v42, v123, v124, v125, v126, v127);
  JSC::MacroAssemblerARM64::and64((uint64_t)this, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v43, v43);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    goto LABEL_216;
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v44 | 0x1000000000, *((char *)this + 304), v128, v129, v130, v131, v132);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)4, (uint64_t)this, 0, 17, v133, v134, v135, v136, (uint64_t)v344, v137);
  v138 = v41 | ((unint64_t)v45 << 8);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v138, 0x200000000uLL, v42, v139, v140, v141, v142);
  for (j = *((_DWORD *)this + 50); j < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = j)
  {
    if ((j + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v320, v143, v144, v145, v146, v147, v148, v149);
      j = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + j) = -721215457;
    j = *((_DWORD *)this + 50) + 4;
  }
  v151 = j;
  if ((j + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v320, v143, v144, v145, v146, v147, v148, v149);
    v151 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v151) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v152 = 69;
  else
    v152 = 65;
  v340[0] = j;
  v340[1] = 0;
  v341 = v152;
  v342 = 15;
  v343 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v344, (uint64_t)this, v144, v145, v146, v147, v148, v149);
  JSC::MacroAssemblerARM64::load16((uint64_t)this, v138 | 0x100000000, 0x200000000uLL, v42, v153, v154, v155, v156);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 8, v42, 255, v157, v158, v159, v160, (uint64_t)&v338);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v340, (uint64_t)this, v161, v162, v163, v164, v165, v166);
  v174 = *((_DWORD *)this + 50);
  if (v174 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v320, v167, v168, v169, v170, v171, v172, v173);
    v174 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v174) = v41 & 0x1F | (32 * (v41 & 0x1F)) | 0x531D7000;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::add64((uint64_t)this, v8 + 42216, v42, v42, v170, v171, v172, v173);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v41, v42, v175, v176, v177, v178, v179);
  v180 = v338;
  v181 = v339;
  v182 = WTF::fastMalloc((WTF *)0x98);
  v183 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v182, this);
  *(_QWORD *)v183 = off_1E35746F0;
  *(_DWORD *)(v183 + 48) = v180;
  *(_QWORD *)(v183 + 52) = v181;
  v191 = *((_DWORD *)this + 50);
  for (*(_DWORD *)(v183 + 60) = v191; v191 < *((_DWORD *)this + 13); *(_DWORD *)(v182 + 60) = v191)
  {
    if ((v191 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v320, v184, v185, v186, v187, v188, v189, v190);
      v191 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v191) = -721215457;
    v191 = *((_DWORD *)this + 50) + 4;
    *((_DWORD *)this + 50) = v191;
  }
  *((_DWORD *)this + 52) = 0;
  *(_QWORD *)v182 = off_1E3572E50;
  *(_QWORD *)(v182 + 64) = 0xFFFFFFFFLL;
  *(_WORD *)(v182 + 72) = 0;
  *(_BYTE *)(v182 + 74) = v42;
  *(_QWORD *)(v182 + 80) = v182 + 96;
  *(_QWORD *)(v182 + 88) = v9;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v182 + 80, v42, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v189, v190);
  *(_QWORD *)v182 = &off_1E3572E20;
  *(_QWORD *)(v182 + 128) = operationSingleCharacterString;
  *(_QWORD *)(v182 + 136) = v8;
  *(_BYTE *)(v182 + 144) = v42;
  v337 = v182;
  v198 = *((unsigned int *)this + 1417);
  if ((_DWORD)v198 == *((_DWORD *)this + 1416))
  {
    v200 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 5656, v198 + 1, (unint64_t)&v337);
    v198 = *((unsigned int *)this + 1417);
    v199 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v198);
    v182 = *v200;
  }
  else
  {
    v199 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v198);
    v200 = &v337;
  }
  *v200 = 0;
  *v199 = v182;
  *((_DWORD *)this + 1417) = v198 + 1;
  v201 = v337;
  v337 = 0;
  if (v201)
    (*(void (**)(uint64_t))(*(_QWORD *)v201 + 8))(v201);
  v202 = HIDWORD(v356);
  v332 = (WTF *)v335;
  v333 = 2;
  v334 = HIDWORD(v356);
  if (HIDWORD(v356) < 3)
  {
    v204 = v335;
  }
  else
  {
    if (HIDWORD(v356) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197B7C11CLL);
    }
    v203 = 12 * HIDWORD(v356);
    v204 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v356)));
    v333 = (v203 & 0xFFFFFFFC) / 0xC;
    v332 = (WTF *)v204;
    v202 = HIDWORD(v356);
  }
  if (v202)
  {
    v205 = v355;
    v206 = (WTF *)((char *)v355 + 12 * v202);
    do
    {
      *(_DWORD *)v204 = *(_DWORD *)v205;
      *(_QWORD *)(v204 + 4) = *(_QWORD *)((char *)v205 + 4);
      v205 = (WTF *)((char *)v205 + 12);
      v204 += 12;
    }
    while (v205 != v206);
  }
  v207 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v192, v193, v194, v195, v196, v197);
  v209 = v208;
  v210 = v334;
  v378 = (WTF *)v381;
  v379 = 2;
  v380 = v334;
  if (v334 < 3)
  {
    v211 = v381;
  }
  else
  {
    if (v334 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197B7C124);
    }
    v211 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v334));
    v379 = 12 * v334 / 0xC;
    v378 = (WTF *)v211;
    v210 = v334;
  }
  v321 = (_QWORD *)((char *)this + 5656);
  if (v210)
  {
    v212 = v332;
    v213 = (WTF *)((char *)v332 + 12 * v210);
    do
    {
      *(_DWORD *)v211 = *(_DWORD *)v212;
      *(_QWORD *)(v211 + 4) = *(_QWORD *)((char *)v212 + 4);
      v212 = (WTF *)((char *)v212 + 12);
      v211 += 12;
    }
    while (v212 != v213);
  }
  v214 = WTF::fastMalloc((WTF *)0xB8);
  v215 = v380;
  v382 = v385;
  v383 = 2;
  v384 = v380;
  if (v380 < 3)
  {
    v217 = v385;
  }
  else
  {
    if (v380 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197B7C12CLL);
    }
    v216 = 12 * v380;
    v217 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v380));
    v383 = (v216 & 0xFFFFFFFC) / 0xC;
    v382 = v217;
    v215 = v380;
  }
  if (v215)
  {
    v218 = v378;
    v219 = (WTF *)((char *)v378 + 12 * v215);
    do
    {
      *(_DWORD *)v217 = *(_DWORD *)v218;
      *(_QWORD *)(v217 + 4) = *(_QWORD *)((char *)v218 + 4);
      v218 = (WTF *)((char *)v218 + 12);
      v217 += 12;
    }
    while (v218 != v219);
  }
  v220 = v384;
  v386 = v389;
  v387 = 2;
  v388 = v384;
  if (v384 < 3)
  {
    v222 = v389;
  }
  else
  {
    if (v384 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197B7C134);
    }
    v221 = 12 * v384;
    v222 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v384));
    v387 = (v221 & 0xFFFFFFFC) / 0xC;
    v386 = v222;
    v220 = v384;
  }
  if (v220)
  {
    v223 = v382;
    v224 = &v382[12 * v220];
    do
    {
      *(_DWORD *)v222 = *(_DWORD *)v223;
      *(_QWORD *)(v222 + 4) = *(_QWORD *)(v223 + 4);
      v223 += 12;
      v222 += 12;
    }
    while (v223 != v224);
  }
  v225 = v388;
  v390 = v393;
  v391 = 2;
  v392 = v388;
  if (v388 >= 3)
  {
    if (v388 < 0x15555556)
    {
      v226 = 12 * v388;
      v227 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v388));
      v391 = (v226 & 0xFFFFFFFC) / 0xC;
      v390 = v227;
      v225 = v388;
      goto LABEL_94;
    }
    __break(0xC471u);
LABEL_216:
    JUMPOUT(0x197B7BF2CLL);
  }
  v227 = v393;
LABEL_94:
  if (v225)
  {
    v228 = v386;
    v229 = &v386[12 * v225];
    do
    {
      *(_DWORD *)v227 = *(_DWORD *)v228;
      *(_QWORD *)(v227 + 4) = *(_QWORD *)(v228 + 4);
      v228 += 12;
      v227 += 12;
    }
    while (v228 != v229);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v214, (uint64_t *)&v390, this);
  v237 = (unint64_t)v390;
  if (v393 != v390 && v390 != 0)
  {
    v390 = 0;
    v391 = 0;
    WTF::fastFree(v237, v230, v231, v232, v233, v234, v235, v236);
  }
  *(_QWORD *)v214 = off_1E3572EB0;
  *(_QWORD *)(v214 + 92) = 0xFFFFFFFFLL;
  *(_WORD *)(v214 + 100) = 0;
  *(_BYTE *)(v214 + 102) = v42;
  *(_QWORD *)(v214 + 104) = v214 + 120;
  *(_QWORD *)(v214 + 112) = v9;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v214 + 104, v42, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v235, v236);
  v246 = (unint64_t)v386;
  if (v389 != v386 && v386)
  {
    v386 = 0;
    v387 = 0;
    WTF::fastFree(v246, v239, (uint64_t)v240, v241, v242, v243, v244, v245);
  }
  *(_QWORD *)v214 = &off_1E3572E80;
  *(_QWORD *)(v214 + 152) = operationStringSubstr;
  *(_QWORD *)(v214 + 160) = v207;
  *(_QWORD *)(v214 + 168) = v209;
  *(_BYTE *)(v214 + 176) = v329;
  *(_BYTE *)(v214 + 177) = v327;
  *(_BYTE *)(v214 + 178) = v42;
  v336 = v214;
  v247 = (unint64_t)v382;
  if (v385 != v382 && v382)
  {
    v382 = 0;
    v383 = 0;
    WTF::fastFree(v247, v239, (uint64_t)v240, v241, v242, v243, v244, v245);
  }
  v248 = v378;
  if (v381 != (_BYTE *)v378 && v378)
  {
    v378 = 0;
    v379 = 0;
    WTF::fastFree((unint64_t)v248, v239, (uint64_t)v240, v241, v242, v243, v244, v245);
  }
  v249 = *((unsigned int *)this + 1417);
  if ((_DWORD)v249 == *((_DWORD *)this + 1416))
  {
    v251 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v321, v249 + 1, (unint64_t)&v336);
    v249 = *((unsigned int *)this + 1417);
    v250 = (_QWORD *)(*((_QWORD *)this + 707) + 8 * v249);
  }
  else
  {
    v250 = (_QWORD *)(*v321 + 8 * v249);
    v251 = &v336;
  }
  v252 = *v251;
  *v251 = 0;
  *v250 = v252;
  *((_DWORD *)this + 1417) = v249 + 1;
  v253 = v336;
  v336 = 0;
  if (v253)
    (*(void (**)(uint64_t))(*(_QWORD *)v253 + 8))(v253);
  v254 = v332;
  if (v335 != (_BYTE *)v332 && v332)
  {
    v332 = 0;
    v333 = 0;
    WTF::fastFree((unint64_t)v254, v239, (uint64_t)v240, v241, v242, v243, v244, v245);
  }
  v255 = v361;
  v256 = v362;
  v257 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v240, v241, v242, v243, v244, v245);
  v259 = v258;
  if (v326)
  {
    v260 = WTF::fastMalloc((WTF *)0xA0);
    v261 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v260, this);
    *(_QWORD *)v261 = off_1E35746F0;
    *(_DWORD *)(v261 + 48) = v255;
    *(_QWORD *)(v261 + 52) = v256;
    v269 = *((_DWORD *)this + 50);
    for (*(_DWORD *)(v261 + 60) = v269; v269 < *((_DWORD *)this + 13); *(_DWORD *)(v260 + 60) = v269)
    {
      if ((v269 + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v320, v262, v263, v264, v265, v266, v267, v268);
        v269 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v269) = -721215457;
      v269 = *((_DWORD *)this + 50) + 4;
      *((_DWORD *)this + 50) = v269;
    }
    *((_DWORD *)this + 52) = 0;
    *(_QWORD *)v260 = off_1E3572F10;
    *(_QWORD *)(v260 + 64) = 0xFFFFFFFFLL;
    *(_WORD *)(v260 + 72) = 0;
    *(_BYTE *)(v260 + 74) = v42;
    *(_QWORD *)(v260 + 80) = v260 + 96;
    *(_QWORD *)(v260 + 88) = v9;
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v260 + 80, v42, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v267, v268);
    *(_QWORD *)v260 = &off_1E3572EE0;
    *(_QWORD *)(v260 + 128) = operationStringSliceWithEnd;
    *(_QWORD *)(v260 + 136) = v257;
    *(_QWORD *)(v260 + 144) = v259;
    v276 = v329;
    *(_BYTE *)(v260 + 152) = v329;
    *(_BYTE *)(v260 + 153) = v328;
    *(_BYTE *)(v260 + 154) = v325;
    v331 = v260;
    v277 = *((unsigned int *)this + 1417);
    if ((_DWORD)v277 == *((_DWORD *)this + 1416))
    {
      v279 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v321, v277 + 1, (unint64_t)&v331);
      v277 = *((unsigned int *)this + 1417);
      v278 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v277);
      v260 = *v279;
    }
    else
    {
      v278 = (uint64_t *)(*v321 + 8 * v277);
      v279 = &v331;
    }
    *v279 = 0;
    *v278 = v260;
    *((_DWORD *)this + 1417) = v277 + 1;
    v280 = v331;
    v331 = 0;
    if (v280)
LABEL_123:
      (*(void (**)(uint64_t))(*(_QWORD *)v280 + 8))(v280);
  }
  else
  {
    v306 = WTF::fastMalloc((WTF *)0xA0);
    v307 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v306, this);
    *(_QWORD *)v307 = off_1E35746F0;
    *(_DWORD *)(v307 + 48) = v255;
    *(_QWORD *)(v307 + 52) = v256;
    v315 = *((_DWORD *)this + 50);
    for (*(_DWORD *)(v307 + 60) = v315; v315 < *((_DWORD *)this + 13); *(_DWORD *)(v306 + 60) = v315)
    {
      if ((v315 + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v320, v308, v309, v310, v311, v312, v313, v314);
        v315 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v315) = -721215457;
      v315 = *((_DWORD *)this + 50) + 4;
      *((_DWORD *)this + 50) = v315;
    }
    *((_DWORD *)this + 52) = 0;
    *(_QWORD *)v306 = off_1E3572F70;
    *(_QWORD *)(v306 + 64) = 0xFFFFFFFFLL;
    *(_WORD *)(v306 + 72) = 0;
    *(_BYTE *)(v306 + 74) = v42;
    *(_QWORD *)(v306 + 80) = v306 + 96;
    *(_QWORD *)(v306 + 88) = v9;
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v306 + 80, v42, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v313, v314);
    *(_QWORD *)v306 = &off_1E3572F40;
    *(_QWORD *)(v306 + 128) = operationStringSlice;
    *(_QWORD *)(v306 + 136) = v257;
    *(_QWORD *)(v306 + 144) = v259;
    v276 = v329;
    *(_BYTE *)(v306 + 152) = v329;
    *(_BYTE *)(v306 + 153) = v328;
    v330 = v306;
    v316 = *((unsigned int *)this + 1417);
    if ((_DWORD)v316 == *((_DWORD *)this + 1416))
    {
      v318 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v321, v316 + 1, (unint64_t)&v330);
      v316 = *((unsigned int *)this + 1417);
      v317 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v316);
      v306 = *v318;
    }
    else
    {
      v317 = (uint64_t *)(*v321 + 8 * v316);
      v318 = &v330;
    }
    *v318 = 0;
    *v317 = v306;
    *((_DWORD *)this + 1417) = v316 + 1;
    v280 = v330;
    v330 = 0;
    if (v280)
      goto LABEL_123;
  }
  if (HIDWORD(v359))
  {
    v281 = 0;
    v282 = 0;
    v283 = 12 * HIDWORD(v359);
    do
    {
      if (v282 >= HIDWORD(v359))
      {
        __break(0xC471u);
        JUMPOUT(0x197B7C0F4);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v358 + v281), (uint64_t)this, v270, v271, v272, v273, v274, v275);
      ++v282;
      v281 += 12;
    }
    while (v283 != v281);
  }
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v270, v271, v272, v273, v274, v275);
  v291 = (char *)this + 4776;
  v292 = *((_DWORD *)a2 + 12);
  if ((int)v42 > 15)
    v293 = -1;
  else
    v293 = v42;
  v294 = &v291[12 * v293];
  *(_DWORD *)v294 = v292;
  *((_DWORD *)v294 + 1) = 4;
  v295 = ~v292;
  if (v295 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197B7C10CLL);
  }
  v296 = *((_QWORD *)this + 499) + 24 * (int)v295;
  v297 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v296 = a2;
  *(_DWORD *)(v296 + 8) = v297;
  *(_BYTE *)(v296 + 17) = v42;
  *(_DWORD *)(v296 + 12) = 6;
  *(_BYTE *)(v296 + 16) = 0;
  v298 = v355;
  if (v322 != v355 && v355)
  {
    v355 = 0;
    LODWORD(v356) = 0;
    WTF::fastFree((unint64_t)v298, v284, v285, v286, v287, v288, v289, v290);
  }
  v299 = v358;
  if (v323 != v358 && v358)
  {
    v358 = 0;
    LODWORD(v359) = 0;
    WTF::fastFree((unint64_t)v299, v284, v285, v286, v287, v288, v289, v290);
  }
  if (v363)
  {
    v300 = v364;
    if (v364 != -1)
    {
      if (v364 > 15)
        v300 = -1;
      --*(_DWORD *)(v363 + 12 * v300 + 4784);
    }
  }
  if (v365)
  {
    v301 = (char)v366;
    if ((char)v366 != -1)
    {
      if ((char)v366 > 15)
        v301 = -1;
      --*(_DWORD *)(v365 + 12 * v301 + 4784);
    }
  }
  if (v367)
  {
    v302 = (char)v368;
    if ((char)v368 != -1)
    {
      if ((char)v368 > 15)
        v302 = -1;
      --*(_DWORD *)(v367 + 12 * v302 + 4784);
    }
  }
  if (v373)
  {
    v303 = v371;
    if (v371 > 15)
      v303 = -1;
    --*((_DWORD *)v369 + 3 * v303 + 1196);
  }
  v304 = v376;
  if (v376 > 15)
    v304 = -1;
  --*((_DWORD *)v374 + 3 * v304 + 1196);
  if (v324)
  {
    if (v276 > 15)
      v305 = -1;
    else
      v305 = v276;
    --*(_DWORD *)&v291[12 * v305 + 8];
  }
}

void JSC::DFG::SpeculativeJIT::speculateString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _BYTE v34[12];

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 5616);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((a2 & 1) != 0)
    v15 = v14;
  v16 = *v15;
  v17 = *v15 + 32 * v13;
  v18 = *(_DWORD *)(v11 + 88);
  v19 = *(_DWORD *)(v17 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v26 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 != 4)
        {
          *(_QWORD *)v17 = v26 | 2;
          v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v26 & 1) != 0)
          {
            v30 = 2 * *v27;
            while (v30 * 4)
            {
              v31 = *(_QWORD *)&v27[v30];
              if ((*(_BYTE *)(v31 + 19) & 0xC) == 0)
              {
                v32 = *(_QWORD *)(v31 + 96);
                v33 = (v32 & 1) != 0 ? (v32 >> 1) & 3 : *(unsigned __int8 *)(v32 + 4);
                v30 -= 2;
                if (v33 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v27, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_20;
            }
          }
          else if (v27)
          {
            if ((*((_BYTE *)v27 + 19) & 0xC) != 0
              || ((v28 = *((_QWORD *)v27 + 12), (v28 & 1) != 0)
                ? (v29 = (v28 >> 1) & 3)
                : (v29 = *(unsigned __int8 *)(v28 + 4)),
                  v29 == 2))
            {
LABEL_20:
              *(_QWORD *)v17 = 4;
            }
          }
        }
        *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v17 &= ~2uLL;
    }
    *(_DWORD *)(v17 + 20) = v18;
  }
  if ((*(_QWORD *)(v17 + 8) & 0x2C00CFFFFFF7) != 0)
  {
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v8 | 0x500000000, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 2, v20, v21, v22, v23, (uint64_t)v34);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v8 << 32) | 0x80000000), a2, 0xFFFFD3FF30000008, (uint64_t)v34, 1uLL, v24, v25);
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void JSC::DFG::SpeculativeJIT::emitPopulateSliceIndex(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int *v31;
  int *v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  _DWORD *v48;
  uint64_t *v49;
  int v50;
  char *v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  char v55;
  int *v56;
  int *v57;
  int v58;
  char *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  int *v79;
  int *v80;
  int v81;
  char *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  WTF *v88;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;
  unsigned int v98;
  unsigned int *v99;
  _QWORD *v100;
  int v101;
  unsigned int v102;
  int *v103;
  int *v104;
  int v105;
  char *v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  unsigned int *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  WTF *v115;
  char *v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  char v123;
  __int16 v124;
  char v125;
  int v126;
  int v127;
  unsigned int v128[3];
  uint64_t v129;
  unint64_t v130;
  char v131;
  _BYTE v132[7];
  char v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  WTF *v138;
  uint64_t v139;
  _BYTE v140[24];

  v10 = a3;
  v11 = a1;
  if (*(unsigned __int16 *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u
    || (v34 = **(_QWORD **)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48), v34 < 0xFFFE000000000000))
  {
    LOBYTE(v129) = 0;
    v133 = 0;
    if ((a3 & 0xFF00) != 0)
      goto LABEL_3;
    v129 = a1;
    v130 = a2;
    v131 = -1;
    v93 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v93 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      goto LABEL_137;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v93 + 12))
    {
      v94 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)a1, a2, (uint64_t)v132, a4, a5, a6, a7, a8);
      v10 = v94;
      v131 = v94;
      v133 = 1;
      if (v94 != -1)
        goto LABEL_3;
      a1 = v129;
      a2 = v130;
    }
    else
    {
      v133 = 1;
    }
    v10 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)a1, a2, (uint64_t)v132, a4, a5, a6, a7, a8);
    v131 = v10;
LABEL_3:
    v138 = (WTF *)v140;
    v139 = 2;
    JSC::MacroAssemblerARM64::branchTest32(v11, 5, v10, v10, a5, a6, a7, a8, (uint64_t)v128);
    if ((_DWORD)a4 == (_DWORD)a5)
      goto LABEL_11;
    if ((_DWORD)a4 == 63)
    {
      if ((_DWORD)a5 != 31)
      {
        v19 = a5 & 0x1F | 0xD2800000;
        goto LABEL_8;
      }
    }
    else if ((_DWORD)a4 != 31 && (_DWORD)a5 != 31)
    {
      v19 = a5 | ((a4 & 0x1F) << 16) | 0xAA0003E0;
LABEL_8:
      v21 = (unsigned int *)(v11 + 200);
      v20 = *(_DWORD *)(v11 + 200);
      if (v20 + 4 > *(_DWORD *)(v11 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 56), v12, v13, v14, v15, v16, v17, v18);
        v20 = *v21;
      }
      *(_DWORD *)(*(_QWORD *)(v11 + 56) + v20) = v19;
      *v21 += 4;
LABEL_11:
      JSC::MacroAssemblerARM64::branchAdd32(v11, 5, a5, v10, a5, v16, v17, v18, (uint64_t)&v126);
      v29 = v126;
      if (v126 != -1)
      {
        v30 = HIDWORD(v139);
        if (HIDWORD(v139) == (_DWORD)v139)
        {
          v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v138, (void *)(HIDWORD(v139) + 1), (unint64_t)&v126, v24, v25, v26, v27, v28);
          v33 = *v31;
          v32 = v31 + 1;
          v29 = v33;
          v30 = HIDWORD(v139);
        }
        else
        {
          v32 = &v127;
        }
        v51 = (char *)v138 + 12 * v30;
        *(_DWORD *)v51 = v29;
        *(_QWORD *)(v51 + 4) = *(_QWORD *)v32;
        ++HIDWORD(v139);
      }
      v52 = *(_DWORD *)(v11 + 200);
      if (v52 + 4 > *(_DWORD *)(v11 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 56), v22, v23, v24, v25, v26, v27, v28);
        v52 = *(_DWORD *)(v11 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v11 + 56) + v52) = a5 & 0x1F | 0x52800000;
      v53 = *(_DWORD *)(v11 + 200) + 4;
      for (*(_DWORD *)(v11 + 200) = v53; v53 < *(_DWORD *)(v11 + 52); *(_DWORD *)(v11 + 200) = v53)
      {
        if ((v53 + 4) > *(_DWORD *)(v11 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 56), v22, v23, v24, v25, v26, v27, v28);
          v53 = *(_DWORD *)(v11 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v11 + 56) + v53) = -721215457;
        v53 = *(_DWORD *)(v11 + 200) + 4;
      }
      v54 = v53;
      if ((v53 + 4) > *(_DWORD *)(v11 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 56), v22, v23, v24, v25, v26, v27, v28);
        v54 = *(_DWORD *)(v11 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v11 + 56) + v54) = 335544320;
      *(_DWORD *)(v11 + 200) += 4;
      if (*(_BYTE *)(v11 + 328))
        v55 = 69;
      else
        v55 = 65;
      v121 = v53;
      v122 = 0;
      v123 = v55;
      v124 = 15;
      v125 = -1;
      if (v53 != -1)
      {
        if (HIDWORD(v139) == (_DWORD)v139)
        {
          v56 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v138, (void *)(HIDWORD(v139) + 1), (unint64_t)&v121, v24, v25, v26, v27, v28);
          v58 = *v56;
          v57 = v56 + 1;
          v59 = (char *)v138 + 12 * HIDWORD(v139);
          *(_DWORD *)v59 = v58;
        }
        else
        {
          v57 = &v122;
          v59 = (char *)v138 + 12 * HIDWORD(v139);
          *(_DWORD *)v59 = v53;
        }
        *(_QWORD *)(v59 + 4) = *(_QWORD *)v57;
        ++HIDWORD(v139);
      }
      v60 = a5 & 0x1F;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v128, v11, v23, v24, v25, v26, v27, v28);
      if (v10 == a5)
      {
LABEL_43:
        JSC::MacroAssemblerARM64::branch32(v11, 9, a5, a4, v64, v65, v66, v67, (uint64_t)&v119);
        v77 = v119;
        if (v119 != -1)
        {
          v78 = HIDWORD(v139);
          if (HIDWORD(v139) == (_DWORD)v139)
          {
            v79 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v138, (void *)(HIDWORD(v139) + 1), (unint64_t)&v119, v72, v73, v74, v75, v76);
            v81 = *v79;
            v80 = v79 + 1;
            v77 = v81;
            v78 = HIDWORD(v139);
          }
          else
          {
            v80 = &v120;
          }
          v82 = (char *)v138 + 12 * v78;
          *(_DWORD *)v82 = v77;
          *(_QWORD *)(v82 + 4) = *(_QWORD *)v80;
          ++HIDWORD(v139);
        }
        if ((_DWORD)a4 == (_DWORD)a5)
          goto LABEL_56;
        if ((_DWORD)a4 == 63)
        {
          if ((_DWORD)a5 != 31)
          {
            v83 = v60 | 0xD2800000;
            goto LABEL_53;
          }
        }
        else if ((_DWORD)a4 != 31 && (_DWORD)a5 != 31)
        {
          v83 = a5 | ((a4 & 0x1F) << 16) | 0xAA0003E0;
LABEL_53:
          v84 = *(_DWORD *)(v11 + 200);
          if (v84 + 4 > *(_DWORD *)(v11 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 56), (uint64_t)v70, v71, v72, v73, v74, v75, v76);
            v84 = *(_DWORD *)(v11 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v11 + 56) + v84) = v83;
          *(_DWORD *)(v11 + 200) += 4;
LABEL_56:
          if (!HIDWORD(v139))
          {
LABEL_60:
            v88 = v138;
            if (v140 != (_BYTE *)v138 && v138 != 0)
            {
              v138 = 0;
              LODWORD(v139) = 0;
              WTF::fastFree((unint64_t)v88, v70, v71, v72, v73, v74, v75, v76);
            }
            if (v133)
            {
              v90 = v131;
              if (v131 > 15)
                v90 = -1;
              --*(_DWORD *)(v129 + 12 * v90 + 4784);
            }
            return;
          }
          v85 = 0;
          v86 = 0;
          v87 = 12 * HIDWORD(v139);
          while (v86 < HIDWORD(v139))
          {
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v138 + v85), v11, v71, v72, v73, v74, v75, v76);
            ++v86;
            v85 += 12;
            if (v87 == v85)
              goto LABEL_60;
          }
          __break(0xC471u);
LABEL_137:
          JUMPOUT(0x197B7CC5CLL);
        }
        v83 = a5 | (32 * a4) | 0x91000000;
        goto LABEL_53;
      }
      if (v10 == 63)
      {
        if ((_DWORD)a5 != 31)
        {
          v68 = v60 | 0xD2800000;
          goto LABEL_40;
        }
      }
      else if ((_DWORD)a5 != 31 && v10 != 31)
      {
        v68 = a5 | ((v10 & 0x1F) << 16) | 0xAA0003E0;
LABEL_40:
        v69 = *(_DWORD *)(v11 + 200);
        if (v69 + 4 > *(_DWORD *)(v11 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 56), v61, v62, v63, v64, v65, v66, v67);
          v69 = *(_DWORD *)(v11 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v11 + 56) + v69) = v68;
        *(_DWORD *)(v11 + 200) += 4;
        goto LABEL_43;
      }
      v68 = a5 | (32 * v10) | 0x91000000;
      goto LABEL_40;
    }
    v19 = a5 | (32 * a4) | 0x91000000;
    goto LABEL_8;
  }
  if ((_DWORD)v34)
  {
    v138 = (WTF *)v140;
    v139 = 2;
    if ((int)v34 >= 1)
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)v34, a5, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::branch32(v11, 9, a5, a4, v35, v36, v37, v38, (uint64_t)&v136);
      v46 = v136;
      if (v136 != -1)
      {
        v47 = HIDWORD(v139);
        if (HIDWORD(v139) == (_DWORD)v139)
        {
          v48 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v138, (void *)(HIDWORD(v139) + 1), (unint64_t)&v136, v41, v42, v43, v44, v45);
          v50 = *v48;
          v49 = (uint64_t *)(v48 + 1);
          v46 = v50;
          v47 = HIDWORD(v139);
        }
        else
        {
          v49 = &v137;
        }
        v106 = (char *)v138 + 12 * v47;
        *(_DWORD *)v106 = v46;
        *(_QWORD *)(v106 + 4) = *v49;
        ++HIDWORD(v139);
      }
      if ((_DWORD)a4 == (_DWORD)a5)
        goto LABEL_101;
      if ((_DWORD)a4 != 63)
      {
        if ((_DWORD)a4 != 31 && (_DWORD)a5 != 31)
        {
          v107 = a5 & 0x1F | ((a4 & 0x1F) << 16);
          v108 = -1442839584;
LABEL_97:
          v109 = v107 | v108;
LABEL_98:
          v111 = (unsigned int *)(v11 + 200);
          v110 = *(_DWORD *)(v11 + 200);
          if (v110 + 4 > *(_DWORD *)(v11 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 56), (uint64_t)v39, v40, v41, v42, v43, v44, v45);
            v110 = *v111;
          }
          *(_DWORD *)(*(_QWORD *)(v11 + 56) + v110) = v109;
          *v111 += 4;
LABEL_101:
          if (HIDWORD(v139))
          {
            v112 = 0;
            v113 = 0;
            v114 = 12 * HIDWORD(v139);
            do
            {
              if (v113 >= HIDWORD(v139))
              {
                __break(0xC471u);
                JUMPOUT(0x197B7CC64);
              }
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v138 + v112), v11, v40, v41, v42, v43, v44, v45);
              ++v113;
              v112 += 12;
            }
            while (v114 != v112);
          }
          v115 = v138;
          if (v140 != (_BYTE *)v138 && v138 != 0)
          {
            v138 = 0;
            LODWORD(v139) = 0;
            WTF::fastFree((unint64_t)v115, v39, v40, v41, v42, v43, v44, v45);
          }
          return;
        }
LABEL_130:
        v107 = a5 | (32 * a4);
        v108 = -1862270976;
        goto LABEL_97;
      }
      if ((_DWORD)a5 == 31)
        goto LABEL_130;
      v118 = -763363328;
LABEL_113:
      v109 = v118 & 0xFFFFFFE0 | a5 & 0x1F;
      goto LABEL_98;
    }
    if ((_DWORD)a4 == (_DWORD)a5)
    {
LABEL_87:
      JSC::MacroAssemblerARM64::branchAdd32(v11, 5, a5, v34, a5, a6, a7, a8, (uint64_t)&v134);
      v101 = v134;
      if (v134 != -1)
      {
        v102 = HIDWORD(v139);
        if (HIDWORD(v139) == (_DWORD)v139)
        {
          v103 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v138, (void *)(HIDWORD(v139) + 1), (unint64_t)&v134, v41, v42, v43, v44, v45);
          v105 = *v103;
          v104 = v103 + 1;
          v101 = v105;
          v102 = HIDWORD(v139);
        }
        else
        {
          v104 = &v135;
        }
        v117 = (char *)v138 + 12 * v102;
        *(_DWORD *)v117 = v101;
        *(_QWORD *)(v117 + 4) = *(_QWORD *)v104;
        ++HIDWORD(v139);
      }
      v118 = 1384120320;
      goto LABEL_113;
    }
    if ((_DWORD)a4 == 63)
    {
      if ((_DWORD)a5 != 31)
      {
        v97 = a5 & 0x1F | 0xD2800000;
        goto LABEL_84;
      }
    }
    else if ((_DWORD)a4 != 31 && (_DWORD)a5 != 31)
    {
      v95 = a5 & 0x1F | ((a4 & 0x1F) << 16);
      v96 = -1442839584;
LABEL_83:
      v97 = v95 | v96;
LABEL_84:
      v99 = (unsigned int *)(a1 + 200);
      v98 = *(_DWORD *)(a1 + 200);
      v100 = (_QWORD *)(a1 + 56);
      if (v98 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        v98 = *v99;
      }
      *(_DWORD *)(*v100 + v98) = v97;
      *v99 += 4;
      goto LABEL_87;
    }
    v95 = a5 | (32 * a4);
    v96 = -1862270976;
    goto LABEL_83;
  }
  v91 = a5 & 0x1F | 0x52800000;
  v92 = *(_DWORD *)(a1 + 200);
  if (v92 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v92 = *(_DWORD *)(v11 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v11 + 56) + v92) = v91;
  *(_DWORD *)(v11 + 200) += 4;
}

void JSC::MacroAssemblerARM64::branchTest32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;

  if (*(_BYTE *)(a1 + 212))
  {
    v10 = a4;
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load32(a1, a3, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)v10, a1, a2, 17, v13, v14, v15, v16, a9, v17);
  }
  else
  {
    __break(0xC471u);
  }
}

{
  char v9;
  int v10;
  unsigned int i;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;

  v9 = a3;
  v10 = a2;
  if (a2 <= 1 && (_DWORD)a3 == (_DWORD)a4)
  {
    if (*(_BYTE *)(a1 + 328))
    {
      for (i = *(_DWORD *)(a1 + 200); (signed int)i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
      {
        if (i + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          i = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
        i = *(_DWORD *)(a1 + 200) + 4;
      }
      *(_DWORD *)(a1 + 208) = 0;
    }
    else
    {
      i = *(_DWORD *)(a1 + 200);
    }
    if (v10)
      v14 = 889192448;
    else
      v14 = 872415232;
    v15 = v9 & 0x1F | v14;
    if (i + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = v15;
    v16 = *(_DWORD *)(a1 + 200);
    v17 = v16 + 4;
    *(_DWORD *)(a1 + 200) = v16 + 4;
    v18 = v16 + 8;
    v19 = v16 + 4;
    if (v18 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v19 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v19) = -721215457;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v20 = -121;
    else
      v20 = -125;
  }
  else
  {
    v21 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a4 & 0x1F) << 16) | 0x6A00001F;
    v22 = *(_DWORD *)(a1 + 200);
    if (v22 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v22 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = v21;
    v23 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v23;
    if (*(_BYTE *)(a1 + 328))
    {
      while ((signed int)v23 < *(_DWORD *)(a1 + 52))
      {
        if (v23 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          v23 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = -721215457;
        v23 = *(_DWORD *)(a1 + 200) + 4;
        *(_DWORD *)(a1 + 200) = v23;
      }
      *(_DWORD *)(a1 + 208) = 0;
    }
    if (v23 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v23 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = v10 | 0x54000000;
    v24 = *(_DWORD *)(a1 + 200);
    v17 = v24 + 4;
    *(_DWORD *)(a1 + 200) = v24 + 4;
    v25 = v24 + 8;
    v26 = v24 + 4;
    if (v25 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v26 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v26) = -721215457;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v20 = -122;
    else
      v20 = -126;
    v9 = -1;
  }
  *(_DWORD *)a9 = v17;
  *(_DWORD *)(a9 + 4) = 0;
  *(_BYTE *)(a9 + 8) = v20;
  *(_BYTE *)(a9 + 9) = v10;
  *(_BYTE *)(a9 + 10) = 0;
  *(_BYTE *)(a9 + 11) = v9;
}

void JSC::MacroAssemblerARM64::load8(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned int v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int *v18;
  JSC::AssemblerBuffer *v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;

  v8 = a4;
  v10 = a2;
  v12 = HIDWORD(a2);
  if (!HIDWORD(a2))
  {
    v15 = (unsigned __int16)JSC::MacroAssemblerARM64::tryFoldBaseAndOffsetPart(a1, a2, a3, a4, a5, a6, a7, a8);
    if (v15 >= 0x100)
    {
      if (BYTE4(a3) < 3u)
      {
        v25 = (32 * (char)v15) | v8 & 0x1F | 0x38601800;
        v27 = *(_DWORD *)(a1 + 200);
        v26 = (unsigned int *)(a1 + 200);
        v21 = v27;
        v22 = v25 | *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a3) << 56) >> 54)) | (((v10 >> 8) & 0x1F) << 16);
        v19 = (JSC::AssemblerBuffer *)(v26 - 36);
        v23 = v27 + 4;
        v24 = *(v26 - 2);
        v18 = v26;
        goto LABEL_8;
      }
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x197B7D070);
    }
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_15;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (int)a3, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  if (BYTE4(a3) >= 3u)
  {
    __break(0xC471u);
    JUMPOUT(0x197B7D0A0);
  }
  v16 = *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a3) << 56) >> 54)) | (((v10 >> 8) & 0x1F) << 16) | ((v12 & 7) << 10) | 0x8B200231;
  v18 = (unsigned int *)(a1 + 200);
  v17 = *(_DWORD *)(a1 + 200);
  v19 = (JSC::AssemblerBuffer *)(a1 + 56);
  if (v17 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v13, v14, a4, a5, a6, a7, a8);
    v17 = *v18;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v17) = v16;
  v20 = *(_DWORD *)(a1 + 200);
  v21 = v20 + 4;
  *(_DWORD *)(a1 + 200) = v20 + 4;
  v22 = (32 * (char)v10) | v8 & 0x1F | 0x38716800;
  v23 = v20 + 8;
  v24 = *(_DWORD *)(a1 + 192);
LABEL_8:
  if (v23 > v24)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v19, v13, v14, a4, a5, a6, a7, a8);
    v21 = *v18;
  }
  *(_DWORD *)(*(_QWORD *)v19 + v21) = v22;
  *v18 += 4;
}

void JSC::MacroAssemblerARM64::load16(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned int v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int *v18;
  JSC::AssemblerBuffer *v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;

  v8 = a4;
  v10 = a2;
  v12 = HIDWORD(a2);
  if (HIDWORD(a2) <= 1)
  {
    v15 = (unsigned __int16)JSC::MacroAssemblerARM64::tryFoldBaseAndOffsetPart(a1, a2, a3, a4, a5, a6, a7, a8);
    if (v15 >= 0x100)
    {
      if (BYTE4(a3) < 3u)
      {
        v25 = (32 * (char)v15) | v8 & 0x1F | 0x78600800;
        v27 = *(_DWORD *)(a1 + 200);
        v26 = (unsigned int *)(a1 + 200);
        v21 = v27;
        v22 = v25 | *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a3) << 56) >> 54)) | (((v10 >> 8) & 0x1F) << 16) | (((_DWORD)v12 == 1) << 12);
        v19 = (JSC::AssemblerBuffer *)(v26 - 36);
        v23 = v27 + 4;
        v24 = *(v26 - 2);
        v18 = v26;
        goto LABEL_10;
      }
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x197B7D290);
    }
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_15;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (int)a3, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  if (BYTE4(a3) >= 3u)
  {
    __break(0xC471u);
    JUMPOUT(0x197B7D2C0);
  }
  v16 = *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a3) << 56) >> 54)) | (((v10 >> 8) & 0x1F) << 16) | ((v12 & 7) << 10) | 0x8B200231;
  v18 = (unsigned int *)(a1 + 200);
  v17 = *(_DWORD *)(a1 + 200);
  v19 = (JSC::AssemblerBuffer *)(a1 + 56);
  if (v17 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v13, v14, a4, a5, a6, a7, a8);
    v17 = *v18;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v17) = v16;
  v20 = *(_DWORD *)(a1 + 200);
  v21 = v20 + 4;
  *(_DWORD *)(a1 + 200) = v20 + 4;
  v22 = (32 * (char)v10) | v8 & 0x1F | 0x78716800;
  v23 = v20 + 8;
  v24 = *(_DWORD *)(a1 + 192);
LABEL_10:
  if (v23 > v24)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v19, v13, v14, a4, a5, a6, a7, a8);
    v21 = *v18;
  }
  *(_DWORD *)(*(_QWORD *)v19 + v21) = v22;
  *v18 += 4;
}

void JSC::MacroAssemblerARM64::lshift32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = ((-65536 * v9) & 0x1F0000 | (32 * (v8 & 0x1F)) & 0x83E0 | ((v9 & 0x1F) << 10) | v8 & 0x1F) ^ 0x53007C00;
  a1[50] += 4;
}

{
  unsigned int v9;

  v9 = a1[50];
  if (v9 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v9 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v9) = 448864322;
  a1[50] += 4;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileStringSubstring(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::DFG::Node *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::AssemblerBuffer *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  JSC::AssemblerBuffer *v40;
  unsigned int v41;
  unint64_t v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  JSC::DFG::Node *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  JSC::AssemblerBuffer *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint8x8_t v68;
  __int32 v69;
  uint8x8_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  BOOL v78;
  unsigned int v79;
  char v80;
  unsigned __int8 v81;
  uint64_t v82;
  int v83;
  unint64_t v84;
  JSC::AssemblerBuffer *v85;
  char *v86;
  uint64_t v87;
  int v88;
  char *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *result;
  int v110;
  unint64_t v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint8x8_t v118;
  __int32 v119;
  uint8x8_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  unint64_t v151;
  uint64_t v152;
  int v153;
  unsigned int v154;
  char v155;
  char v156;
  uint64_t v157;
  unsigned __int8 *v158;
  uint64_t v159;
  _BYTE *v160;
  unsigned __int8 *v161;
  JSC::AssemblerBuffer *v162;
  unsigned __int8 *v163;
  uint64_t v164;
  int v165;
  char *v166;
  int v167;
  JSC::AssemblerBuffer *v168;
  int64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  JSC::AssemblerBuffer *v173;
  JSC::AssemblerBuffer *v174;
  JSC::AssemblerBuffer *v175;
  JSC::DFG::SpeculativeJIT *v176;
  unint64_t v177;
  char v178;
  _BYTE v179[7];
  JSC::DFG::SpeculativeJIT *v180;
  unint64_t v181;
  char v182;
  _BYTE v183[7];
  void *__dst;
  uint64_t v185;
  _WORD v186[4];

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_137;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197B7DF48);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_137:
    v13 = -1;
  v14 = *((_QWORD *)a2 + 4);
  v180 = this;
  v181 = v14;
  v182 = -1;
  v15 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_180;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12))
  {
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v14, (uint64_t)v183, a4, a5, a6, a7, a8);
    v182 = v16;
  }
  else
  {
    v16 = -1;
  }
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v176 = this;
    v177 = *((_QWORD *)a2 + 5);
    v178 = -1;
    v42 = ~*(_DWORD *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v42 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197B7DF58);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v42 + 12))
      v178 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v17, (uint64_t)v179, a4, a5, a6, a7, a8);
    if (v13 == -1)
      v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    v43 = v182;
    if (v182 == 255)
    {
      v43 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v180, v181, (uint64_t)v183, a4, a5, a6, a7, a8);
      v182 = v43;
    }
    v44 = v178;
    if (v178 == 255)
    {
      v44 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v177, (uint64_t)v179, a4, a5, a6, a7, a8);
      v178 = v44;
    }
    JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 3), v13, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v45, v46, v47, v48, v49, v50, v51);
    ++*((_DWORD *)this + 1196);
    v58 = *((unsigned int *)this + 1194);
    if ((_DWORD)v58 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v58, (uint64_t)v52, v53, v54, v55, v56, v57);
    }
    v32 = (JSC::AssemblerBuffer *)JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v52, v53, v54, v55, v56, v57);
    v60 = (uint64_t)v59;
    __dst = v186;
    v185 = 3;
    if (v13 == 1)
    {
      v41 = 0;
    }
    else
    {
      v186[0] = v13 | 0x100;
      v41 = 1;
      HIDWORD(v185) = 1;
    }
    v175 = v32;
    if (v43 != 2)
    {
      v186[v41++] = v43 | 0x200;
      HIDWORD(v185) = v41;
    }
    if (v44 == 3)
    {
      if (!v41)
      {
LABEL_84:
        if ((_DWORD)v175 == -1)
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v60, 0, v35, v36, v37, v38, v39);
        else
          JSC::MacroAssemblerARM64::load64((uint64_t)this, ((_QWORD)v175 << 35) + 0x380000001ALL, 0, v35, v36, v37, v38, v39);
        JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationStringSubstringWithEnd, v91, v92, v93, v94, v95, v96, (int *)&__dst);
        JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v97, v98, v99, v100, v101, v102);
        result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v103, v104, v105, v106, v107, v108);
        v110 = *((_DWORD *)a2 + 12);
        *((_DWORD *)this + 1194) = v110;
        *((_DWORD *)this + 1195) = 4;
        v111 = ~v110;
        if (v111 < *((unsigned int *)this + 1001))
        {
          v112 = *((_QWORD *)this + 499) + 24 * (int)v111;
          v113 = *((_DWORD *)a2 + 13);
          *(_QWORD *)v112 = a2;
          *(_DWORD *)(v112 + 8) = v113;
          *(_BYTE *)(v112 + 12) = 6;
          *(_DWORD *)(v112 + 13) = 0;
          *(_BYTE *)(v112 + 17) = 0;
          --*((_DWORD *)this + 1196);
          v114 = v178;
          if (v178 > 15)
            v114 = -1;
          --*((_DWORD *)v176 + 3 * v114 + 1196);
          goto LABEL_129;
        }
        __break(0xC471u);
LABEL_180:
        JUMPOUT(0x197B7DF40);
      }
    }
    else
    {
      v186[v41++] = v44 | 0x300;
      HIDWORD(v185) = v41;
    }
    v61 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
    goto LABEL_36;
  }
  if (v13 == -1)
  {
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    v16 = v182;
  }
  if (v16 == 0xFF)
  {
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v180, v181, (uint64_t)v183, a4, a5, a6, a7, a8);
    v182 = v16;
  }
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 3), v13, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v18, v19, v20, v21, v22, v23, v24);
  ++*((_DWORD *)this + 1196);
  v31 = *((unsigned int *)this + 1194);
  if ((_DWORD)v31 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v31, (uint64_t)v25, v26, v27, v28, v29, v30);
  }
  v32 = (JSC::AssemblerBuffer *)JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v25, v26, v27, v28, v29, v30);
  v40 = v32;
  v10 = (unint64_t)v33;
  __dst = v186;
  LODWORD(v185) = 2;
  if (v13 == 1)
  {
    if (v16 == 2)
      goto LABEL_125;
    v41 = 0;
  }
  else
  {
    v186[0] = v13 | 0x100;
    v41 = 1;
    HIDWORD(v185) = 1;
    if (v16 == 2)
      goto LABEL_93;
  }
  v186[v41++] = v16 | 0x200;
  HIDWORD(v185) = v41;
LABEL_93:
  v175 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  do
  {
    v115 = 0;
    v63 = 0;
    v64 = (char *)__dst;
    v65 = v41;
    do
    {
      if ((*((_BYTE *)__dst + v115 + 1) & 0x40) != 0)
      {
LABEL_152:
        __break(1u);
        while (1)
        {
          v63 += 2;
          v65 -= 2;
          if (!v65)
            break;
LABEL_67:
          if (*(unsigned __int8 *)v63 == (_DWORD)v64)
          {
            *(_BYTE *)v63 = v41;
            break;
          }
        }
        v83 = 0;
        v84 = v10;
        v59 = (char *)v32;
        v85 = v32;
        do
        {
          if (*(unsigned __int8 *)v10 == *(unsigned __int8 *)(v10 + 1))
          {
            v86 = (char *)v10;
            if (v85 != (JSC::AssemblerBuffer *)((char *)__dst + 2 * HIDWORD(v185)))
            {
              v172 = v11;
              v168 = v32;
              if ((char *)v10 == v59)
              {
                v86 = (char *)v85;
              }
              else
              {
                v170 = v84 - (_QWORD)v59;
                memmove(v85, v59, v84 - (_QWORD)v59);
                v86 = (char *)v85 + v170;
              }
              v32 = v168;
              v11 = v172;
            }
            v59 = (char *)(v10 + 2);
            ++v83;
            v85 = (JSC::AssemblerBuffer *)v86;
          }
          v10 += 2;
          v84 += 2;
        }
        while (v10 < (unint64_t)v32);
        v10 = (unint64_t)__dst;
        v87 = HIDWORD(v185);
        v88 = HIDWORD(v185);
        v32 = v85;
        while (1)
        {
          v89 = (char *)(v10 + 2 * v87);
          v61 = v173;
          if (v59 != v89)
          {
            v32 = (JSC::AssemblerBuffer *)memmove(v32, v59, v89 - v59);
            v88 = HIDWORD(v185);
          }
          v41 = v88 - v83;
          v60 = (uint64_t)v174;
LABEL_62:
          HIDWORD(v185) = v41;
LABEL_63:
          if (!v41)
            break;
LABEL_36:
          v62 = 0;
          v63 = 0;
          v64 = (char *)__dst;
          v65 = v41;
          do
          {
            if ((*((_BYTE *)__dst + v62 + 1) & 0x40) != 0)
              goto LABEL_152;
            v63 |= 1 << *((_BYTE *)__dst + v62 + 1);
            v62 += 2;
          }
          while (2 * v41 != v62);
          v66 = 0;
          do
          {
            v67 = *((_BYTE *)__dst + v66) & 0x7F;
            if (v67 >= 0x40)
              goto LABEL_152;
            v63 &= ~(1 << v67);
            v66 += 2;
          }
          while (2 * v41 != v66);
          v68 = (uint8x8_t)vcnt_s8((int8x8_t)v63);
          v68.i16[0] = vaddlv_u8(v68);
          v69 = v68.i32[0];
          v70 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v63));
          v70.i16[0] = vaddlv_u8(v70);
          if (v70.i32[0] + v69)
          {
            v10 = 0;
            if (v41 <= 1uLL)
              v71 = 1;
            else
              v71 = v41;
            v72 = 2 * v71;
            while (1)
            {
              v73 = *((unsigned __int8 *)__dst + v10 + 1);
              if ((v73 & 0x7Fu) >= 0x40)
                goto LABEL_152;
              if (((v63 >> (v73 & 0x7F)) & 1) != 0)
                break;
              v10 += 2;
              if (v72 == v10)
                goto LABEL_63;
            }
            v74 = *((unsigned __int8 *)__dst + v10);
            if (v74 != v73)
            {
              v75 = (char)v74;
              if ((char)v74 == 63)
              {
                v76 = *((_DWORD *)this + 50);
                v77 = *((_DWORD *)this + 48);
                if ((char)v73 == 31)
                  goto LABEL_78;
                v79 = v73 & 0x1F | 0xD2800000;
              }
              else
              {
                v76 = *((_DWORD *)this + 50);
                v77 = *((_DWORD *)this + 48);
                v78 = v73 == 31 || v75 == 31;
                if (!v78)
                {
                  v79 = v73 & 0xFFE0FFFF | ((v75 & 0x1F) << 16) | 0xAA0003E0;
                  goto LABEL_58;
                }
LABEL_78:
                v79 = (char)v73 | (32 * v75) | 0x91000000;
              }
LABEL_58:
              if (v76 + 4 > v77)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v61, (uint64_t)v59, v34, v35, v36, v37, v38, v39);
                v76 = *((_DWORD *)this + 50);
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v76) = v79;
              *((_DWORD *)this + 50) += 4;
              v64 = (char *)__dst;
              v65 = HIDWORD(v185);
            }
            v32 = (JSC::AssemblerBuffer *)memmove(&v64[v10], &v64[v10 + 2], 2 * v65 - v10 - 2);
            v41 = HIDWORD(v185) - 1;
            goto LABEL_62;
          }
          v173 = v61;
          v174 = (JSC::AssemblerBuffer *)v60;
          v80 = *(_BYTE *)__dst;
          v81 = *((_BYTE *)__dst + 1);
          JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, (char)v81, v35, v36, v37, v38, v39);
          memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v185) - 2);
          v82 = (HIDWORD(v185) - 1);
          v78 = HIDWORD(v185) == 1;
          HIDWORD(v185) = v82;
          v10 = (unint64_t)__dst;
          v32 = (JSC::AssemblerBuffer *)((char *)__dst + 2 * v82);
          if (!v78)
          {
            LOBYTE(v41) = v80;
            LODWORD(v64) = v81;
            v65 = 2 * v82;
            v63 = (unint64_t)__dst;
            goto LABEL_67;
          }
          v87 = 0;
          v88 = 0;
          v83 = 0;
          v59 = (char *)__dst + 2 * v82;
        }
        v90 = __dst;
        if (v186 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v185) = 0;
          WTF::fastFree((unint64_t)v90, v59, v34, v35, v36, v37, v38, v39);
        }
        goto LABEL_84;
      }
      v63 |= 1 << *((_BYTE *)__dst + v115 + 1);
      v115 += 2;
    }
    while (2 * v41 != v115);
    v116 = 0;
    do
    {
      v117 = *((_BYTE *)__dst + v116) & 0x7F;
      if (v117 >= 0x40)
        goto LABEL_152;
      v63 &= ~(1 << v117);
      v116 += 2;
    }
    while (2 * v41 != v116);
    v118 = (uint8x8_t)vcnt_s8((int8x8_t)v63);
    v118.i16[0] = vaddlv_u8(v118);
    v119 = v118.i32[0];
    v120 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v63));
    v120.i16[0] = vaddlv_u8(v120);
    if (v120.i32[0] + v119)
    {
      v121 = 0;
      if (v41 <= 1uLL)
        v122 = 1;
      else
        v122 = v41;
      v123 = 2 * v122;
      while (1)
      {
        v124 = *((unsigned __int8 *)__dst + v121 + 1);
        if ((v124 & 0x7Fu) >= 0x40)
          goto LABEL_152;
        if (((v63 >> (v124 & 0x7F)) & 1) != 0)
          break;
        v121 += 2;
        if (v123 == v121)
          goto LABEL_119;
      }
      v125 = *((unsigned __int8 *)__dst + v121);
      if (v125 != v124)
      {
        v126 = (char)v125;
        if ((char)v125 == 63)
        {
          v127 = *((_DWORD *)this + 50);
          v128 = *((_DWORD *)this + 48);
          if ((char)v124 == 31)
            goto LABEL_121;
          v130 = v124 & 0x1F | 0xD2800000;
        }
        else
        {
          v127 = *((_DWORD *)this + 50);
          v128 = *((_DWORD *)this + 48);
          if (v124 != 31 && v126 != 31)
          {
            v130 = v124 & 0xFFE0FFFF | ((v126 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_114;
          }
LABEL_121:
          v130 = (char)v124 | (32 * v126) | 0x91000000;
        }
LABEL_114:
        if (v127 + 4 > v128)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v175, (uint64_t)v33, v34, v35, v36, v37, v38, v39);
          v127 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v127) = v130;
        *((_DWORD *)this + 50) += 4;
        v64 = (char *)__dst;
        v65 = HIDWORD(v185);
      }
      v32 = (JSC::AssemblerBuffer *)memmove(&v64[v121], &v64[v121 + 2], 2 * v65 - v121 - 2);
      v41 = HIDWORD(v185) - 1;
    }
    else
    {
      v156 = *(_BYTE *)__dst;
      LODWORD(v174) = *((char *)__dst + 1);
      JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v174, v35, v36, v37, v38, v39);
      memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v185) - 2);
      v157 = (HIDWORD(v185) - 1);
      v78 = HIDWORD(v185) == 1;
      HIDWORD(v185) = v157;
      v158 = (unsigned __int8 *)__dst;
      v32 = (JSC::AssemblerBuffer *)((char *)__dst + 2 * v157);
      v171 = v11;
      if (v78)
      {
        v164 = 0;
        v165 = 0;
        v33 = (char *)__dst + 2 * v157;
      }
      else
      {
        v159 = 2 * v157;
        v160 = __dst;
        while (*v160 != v174)
        {
          v160 += 2;
          v159 -= 2;
          if (!v159)
            goto LABEL_143;
        }
        *v160 = v156;
LABEL_143:
        LODWORD(v157) = 0;
        v161 = v158;
        v33 = (char *)v32;
        v162 = v32;
        do
        {
          if (*v158 == v158[1])
          {
            v163 = v158;
            if (v162 != (JSC::AssemblerBuffer *)((char *)__dst + 2 * HIDWORD(v185)))
            {
              LODWORD(v173) = v157;
              v174 = v32;
              if (v158 == (unsigned __int8 *)v33)
              {
                v163 = (unsigned __int8 *)v162;
              }
              else
              {
                v169 = v161 - (unsigned __int8 *)v33;
                memmove(v162, v33, v161 - (unsigned __int8 *)v33);
                v163 = (unsigned __int8 *)v162 + v169;
              }
              v32 = v174;
              LODWORD(v157) = (_DWORD)v173;
            }
            v33 = (char *)(v158 + 2);
            LODWORD(v157) = v157 + 1;
            v162 = (JSC::AssemblerBuffer *)v163;
          }
          v158 += 2;
          v161 += 2;
        }
        while (v158 < (unsigned __int8 *)v32);
        v158 = (unsigned __int8 *)__dst;
        v164 = HIDWORD(v185);
        v165 = HIDWORD(v185);
        v32 = v162;
      }
      v166 = (char *)&v158[2 * v164];
      v11 = v171;
      if (v33 != v166)
      {
        v167 = v157;
        v32 = (JSC::AssemblerBuffer *)memmove(v32, v33, v166 - v33);
        LODWORD(v157) = v167;
        v165 = HIDWORD(v185);
      }
      v41 = v165 - v157;
    }
    HIDWORD(v185) = v41;
LABEL_119:
    ;
  }
  while (v41);
  v131 = __dst;
  if (v186 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v185) = 0;
    WTF::fastFree((unint64_t)v131, v33, v34, v35, v36, v37, v38, v39);
  }
LABEL_125:
  if ((_DWORD)v40 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v10, 0, v35, v36, v37, v38, v39);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((_QWORD)v40 << 35) + 0x380000001ALL, 0, v35, v36, v37, v38, v39);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationStringSubstring, v132, v133, v134, v135, v136, v137, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v138, v139, v140, v141, v142, v143);
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v144, v145, v146, v147, v148, v149);
  v150 = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 1194) = v150;
  *((_DWORD *)this + 1195) = 4;
  v151 = ~v150;
  if (v151 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197B7DF50);
  }
  v152 = *((_QWORD *)this + 499) + 24 * (int)v151;
  v153 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v152 = a2;
  *(_DWORD *)(v152 + 8) = v153;
  *(_BYTE *)(v152 + 12) = 6;
  *(_DWORD *)(v152 + 13) = 0;
  *(_BYTE *)(v152 + 17) = 0;
  --*((_DWORD *)this + 1196);
LABEL_129:
  v154 = v182;
  if (v182 > 15)
    v154 = -1;
  --*((_DWORD *)v180 + 3 * v154 + 1196);
  if (v11)
  {
    if (v13 > 15)
      v155 = -1;
    else
      v155 = v13;
    --*((_DWORD *)this + 3 * v155 + 1196);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileToLowerCase(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int8x8_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  _DWORD *v61;
  uint64_t *v62;
  int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int8x8_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  int *v78;
  int *v79;
  int v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int i;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int8x8_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  int *v113;
  int *v114;
  int v115;
  char *v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  unsigned int v126;
  _DWORD *v127;
  uint64_t *v128;
  int v129;
  char *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  char v134;
  JSC::DFG::Node *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  uint8x8_t v163;
  __int32 v164;
  uint8x8_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v174;
  int v175;
  int v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  int v203;
  unsigned int v204;
  uint64_t v205;
  unint64_t v206;
  unsigned int j;
  unsigned int v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  int v233;
  unsigned int v234;
  char *v235;
  unint64_t v236;
  uint64_t v237;
  int v238;
  WTF *v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  char v244;
  char v245;
  unsigned int v246;
  uint64_t v247;
  unsigned __int8 *v248;
  char *v249;
  uint64_t v250;
  _BYTE *v251;
  unsigned __int8 *v252;
  char *v253;
  unsigned __int8 *v254;
  uint64_t v255;
  unsigned int v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  char v262;
  char v263;
  uint64_t v264;
  unint64_t v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  int v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  BOOL v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  int64_t v278;
  int v279;
  char v280;
  char *v281;
  uint64_t v282;
  JSC::AssemblerBuffer *v283;
  unint64_t *v284;
  unint64_t v285;
  int v286;
  int v287;
  int v288;
  int v289;
  uint64_t v290;
  int v291;
  int v292;
  unsigned int v293[3];
  int v294;
  int v295;
  int v296;
  uint64_t v297;
  WTF *v298;
  uint64_t v299;
  _BYTE v300[24];
  uint64_t v301;
  unsigned __int8 v302;
  uint64_t v303;
  char v304;
  uint64_t v305;
  unsigned __int8 v306;
  uint64_t v307;
  unsigned __int8 v308;
  unint64_t v309;
  int v310;
  unsigned int v311;
  _WORD v312[4];
  unint64_t v313;
  unsigned int *v314;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_157;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197B7EF4CLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_157:
    v12 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v307, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v305, this, v13, v14, v15, v16, v17, v18);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v303, this, v19, v20, v21, v22, v23, v24);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v301, this, v25, v26, v27, v28, v29, v30);
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, v31, v32, v33, v34, v35, v36);
  v37 = v308;
  v38 = v306;
  v39 = v304;
  v40 = v302;
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 3), v12, v32, v33, v34, v35, v36);
  v298 = (WTF *)v300;
  v299 = 2;
  v283 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  v48 = *((_DWORD *)this + 50);
  if (v48 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v283, v41, v42, v43, v44, v45, v46, v47);
    v48 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v48) = v38 & 0x1F | 0xD2800000;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v12 | 0x800000000, (char)v37, v43, v44, v45, v46, v47);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, (char)v37, 1, v49, v50, v51, v52, (uint64_t)&v296, v53);
  v59 = v296;
  if (v296 != -1)
  {
    v60 = HIDWORD(v299);
    if (HIDWORD(v299) == (_DWORD)v299)
    {
      v61 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v298, (void *)(HIDWORD(v299) + 1), (unint64_t)&v296, v54, v55, v56, v57, v58);
      v63 = *v61;
      v62 = (uint64_t *)(v61 + 1);
      v59 = v63;
      v60 = HIDWORD(v299);
    }
    else
    {
      v62 = &v297;
    }
    v64 = (char *)v298 + 12 * v60;
    *(_DWORD *)v64 = v59;
    *(_QWORD *)(v64 + 4) = *v62;
    ++HIDWORD(v299);
  }
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    goto LABEL_238;
  }
  v285 = v10 & 0xFF00FFFFFFFFFFFFLL;
  v65 = (char)v40;
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v37 | 0x1000000000, *((char *)this + 304), v54, v55, v56, v57, v58);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)4, (uint64_t)this, 0, 17, v66, v67, v68, v69, (uint64_t)&v294, v70);
  v76 = v294;
  if (v294 != -1)
  {
    v77 = HIDWORD(v299);
    if (HIDWORD(v299) == (_DWORD)v299)
    {
      v78 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v298, (void *)(HIDWORD(v299) + 1), (unint64_t)&v294, v71, v72, v73, v74, v75);
      v80 = *v78;
      v79 = v78 + 1;
      v76 = v80;
      v77 = HIDWORD(v299);
    }
    else
    {
      v79 = &v295;
    }
    v81 = (char *)v298 + 12 * v77;
    *(_DWORD *)v81 = v76;
    *(_QWORD *)(v81 + 4) = *(_QWORD *)v79;
    ++HIDWORD(v299);
  }
  v286 = v40;
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v37 | 0x400000000, v65, v71, v72, v73, v74, v75);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v37 | 0x800000000, (char)v37, v82, v83, v84, v85, v86);
  for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
  {
    if ((i + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v283, v87, v88, v89, v90, v91, v92, v93);
      i = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
    i = *((_DWORD *)this + 50) + 4;
  }
  *((_DWORD *)this + 52) = 0;
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 2, (char)v38, v65, v90, v91, v92, v93, (uint64_t)v293);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v37 | (v38 << 8), 0x200000000uLL, v39, v95, v96, v97, v98);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFF80, (uint64_t)this, 1, v39, v99, v100, v101, v102, (uint64_t)&v291, v103);
  v111 = v291;
  if (v291 != -1)
  {
    v112 = HIDWORD(v299);
    if (HIDWORD(v299) == (_DWORD)v299)
    {
      v113 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v298, (void *)(HIDWORD(v299) + 1), (unint64_t)&v291, v106, v107, v108, v109, v110);
      v115 = *v113;
      v114 = v113 + 1;
      v111 = v115;
      v112 = HIDWORD(v299);
    }
    else
    {
      v114 = &v292;
    }
    v116 = (char *)v298 + 12 * v112;
    *(_DWORD *)v116 = v111;
    *(_QWORD *)(v116 + 4) = *(_QWORD *)v114;
    ++HIDWORD(v299);
  }
  v117 = *((_DWORD *)this + 50);
  if (v117 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v283, v104, v105, v106, v107, v108, v109, v110);
    v117 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v117) = v39 | (32 * v39) | 0x51010400;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 9, v39, 25, v107, v108, v109, v110, (uint64_t)&v289);
  v125 = v289;
  if (v289 != -1)
  {
    v126 = HIDWORD(v299);
    if (HIDWORD(v299) == (_DWORD)v299)
    {
      v127 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v298, (void *)(HIDWORD(v299) + 1), (unint64_t)&v289, v120, v121, v122, v123, v124);
      v129 = *v127;
      v128 = (uint64_t *)(v127 + 1);
      v125 = v129;
      v126 = HIDWORD(v299);
    }
    else
    {
      v128 = &v290;
    }
    v130 = (char *)v298 + 12 * v126;
    *(_DWORD *)v130 = v125;
    *(_QWORD *)(v130 + 4) = *v128;
    ++HIDWORD(v299);
  }
  v131 = *((_DWORD *)this + 50);
  if (v131 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v283, v118, v119, v120, v121, v122, v123, v124);
    v131 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v131) = (char)v38 | (32 * (char)v38) | 0x11000400;
  v132 = *((_DWORD *)this + 50) + 4;
  for (*((_DWORD *)this + 50) = v132; (signed int)v132 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v132)
  {
    if (v132 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v283, v118, v119, v120, v121, v122, v123, v124);
      v132 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v132) = -721215457;
    v132 = *((_DWORD *)this + 50) + 4;
  }
  v133 = v132;
  if (v132 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v283, v118, v119, v120, v121, v122, v123, v124);
    v133 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v133) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v134 = 69;
  else
    v134 = 65;
  v309 = v132;
  LOBYTE(v310) = v134;
  *(_WORD *)((char *)&v310 + 1) = 15;
  HIBYTE(v310) = -1;
  v288 = i;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v309, (unsigned int *)&v288, (uint64_t)this, v120, v121, v122, v123, v124);
  if (HIDWORD(v299))
  {
    v141 = 0;
    v142 = 0;
    v143 = 12 * HIDWORD(v299);
    do
    {
      if (v142 >= HIDWORD(v299))
      {
        __break(0xC471u);
        goto LABEL_234;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v298 + v141), (uint64_t)this, (uint64_t)v135, v136, v137, v138, v139, v140);
      ++v142;
      v141 += 12;
    }
    while (v143 != v141);
  }
  v144 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v135, v136, v137, v138, v139, v140);
  v146 = v145;
  v147 = 1;
  v284 = (unint64_t *)((char *)this + 5752);
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 1, (uint64_t)this + 5752, v65, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v148, v149);
  v309 = (unint64_t)v312;
  v310 = 2;
  if (v12 == 1)
  {
    if ((_DWORD)v38 == 2)
      goto LABEL_83;
    v147 = 0;
  }
  else
  {
    v312[0] = v12 | 0x100;
    v311 = 1;
    if ((char)v38 == 2)
      goto LABEL_51;
  }
  v312[v147++] = v38 | 0x200;
  v311 = v147;
  do
  {
LABEL_51:
    v157 = 0;
    v158 = 0;
    v159 = v309;
    v160 = v147;
    do
    {
      if ((*(_BYTE *)(v309 + v157 + 1) & 0x40) != 0)
        goto LABEL_234;
      v158 |= 1 << *(_BYTE *)(v309 + v157 + 1);
      v157 += 2;
    }
    while (2 * v147 != v157);
    v161 = 0;
    do
    {
      v162 = *(_BYTE *)(v309 + v161) & 0x7F;
      if (v162 >= 0x40)
        goto LABEL_234;
      v158 &= ~(1 << v162);
      v161 += 2;
    }
    while (2 * v147 != v161);
    v163 = (uint8x8_t)vcnt_s8((int8x8_t)v158);
    v163.i16[0] = vaddlv_u8(v163);
    v164 = v163.i32[0];
    v165 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v158));
    v165.i16[0] = vaddlv_u8(v165);
    if (v165.i32[0] + v164)
    {
      v166 = 0;
      if (v147 <= 1uLL)
        v167 = 1;
      else
        v167 = v147;
      v168 = 2 * v167;
      while (1)
      {
        v169 = *(unsigned __int8 *)(v309 + v166 + 1);
        if ((v169 & 0x7Fu) >= 0x40)
          goto LABEL_234;
        if (((v158 >> (v169 & 0x7F)) & 1) != 0)
          break;
        v166 += 2;
        if (v168 == v166)
        {
          v40 = v286;
          goto LABEL_76;
        }
      }
      v170 = *(unsigned __int8 *)(v309 + v166);
      if (v170 == v169)
      {
LABEL_74:
        memmove((void *)(v159 + v166), (const void *)(v159 + v166 + 2), 2 * v160 - v166 - 2);
        v147 = v311 - 1;
        v40 = v286;
        goto LABEL_75;
      }
      if ((char)v170 == 63)
      {
        v171 = *((_DWORD *)this + 50);
        v172 = *((_DWORD *)this + 48);
        if ((char)v169 != 31)
        {
          v175 = v169 & 0x1F;
          v176 = -763363328;
          goto LABEL_79;
        }
      }
      else
      {
        v171 = *((_DWORD *)this + 50);
        v172 = *((_DWORD *)this + 48);
        if (v169 != 31 && (char)v170 != 31)
        {
          v174 = v169 & 0xFFE0FFFF | ((v170 & 0x1F) << 16) | 0xAA0003E0;
LABEL_71:
          if (v171 + 4 > v172)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v283, (uint64_t)v150, v151, v152, v153, v154, v155, v156);
            v171 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v171) = v174;
          *((_DWORD *)this + 50) += 4;
          v159 = v309;
          v160 = v311;
          goto LABEL_74;
        }
      }
      v175 = (char)v169 | (32 * (char)v170);
      v176 = -1862270976;
LABEL_79:
      v174 = v175 | v176;
      goto LABEL_71;
    }
    v245 = *(_BYTE *)v309;
    v280 = *(_BYTE *)(v309 + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)v309, v280, v152, v153, v154, v155, v156);
    memmove((void *)v309, (const void *)(v309 + 2), 2 * v311 - 2);
    v246 = v311;
    v247 = v311 - 1;
    v311 = v247;
    v248 = (unsigned __int8 *)v309;
    v249 = (char *)(v309 + 2 * v247);
    v282 = v146;
    if (v246 == 1)
    {
      v255 = 0;
      v256 = 0;
      v150 = (char *)(v309 + 2 * v247);
    }
    else
    {
      v250 = 2 * v247;
      v251 = (_BYTE *)v309;
      while (*v251 != v280)
      {
        v251 += 2;
        v250 -= 2;
        if (!v250)
          goto LABEL_162;
      }
      *v251 = v245;
LABEL_162:
      LODWORD(v247) = 0;
      v252 = v248;
      v150 = v249;
      v253 = v249;
      do
      {
        if (*v248 == v248[1])
        {
          v254 = v248;
          if (v253 != (char *)(v309 + 2 * v311))
          {
            v279 = v247;
            v281 = v249;
            if (v248 == (unsigned __int8 *)v150)
            {
              v254 = (unsigned __int8 *)v253;
            }
            else
            {
              v278 = v252 - (unsigned __int8 *)v150;
              memmove(v253, v150, v252 - (unsigned __int8 *)v150);
              v254 = (unsigned __int8 *)&v253[v278];
            }
            v249 = v281;
            LODWORD(v247) = v279;
          }
          v150 = (char *)(v248 + 2);
          LODWORD(v247) = v247 + 1;
          v253 = (char *)v254;
        }
        v248 += 2;
        v252 += 2;
      }
      while (v248 < (unsigned __int8 *)v249);
      v248 = (unsigned __int8 *)v309;
      v255 = v311;
      v256 = v311;
      v249 = v253;
    }
    v257 = (char *)&v248[2 * v255];
    v40 = v286;
    v146 = v282;
    if (v150 != v257)
    {
      v276 = v247;
      memmove(v249, v150, v257 - v150);
      LODWORD(v247) = v276;
      v256 = v311;
    }
    v147 = v256 - v247;
LABEL_75:
    v311 = v147;
LABEL_76:
    ;
  }
  while (v147);
  v177 = v309;
  if (v312 != (_WORD *)v309 && v309)
  {
    v309 = 0;
    v310 = 0;
    WTF::fastFree(v177, v150, v151, v152, v153, v154, v155, v156);
  }
LABEL_83:
  if ((_DWORD)v144 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v146, 0, v152, v153, v154, v155, v156);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v144 << 35) + 0x380000001ALL, 0, v152, v153, v154, v155, v156);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationToLowerCase, v178, v179, v180, v181, v182, v183, &v287);
  v309 = 2;
  v314 = 0;
  v188 = *((_QWORD *)this + 495);
  v189 = *(_QWORD *)(*((_QWORD *)this + 497) + 8);
  if ((v189 & 1) != 0)
  {
    v272 = *(_QWORD *)(v189 & 0xFFFFFFFF8);
    if ((v189 & 2) != 0
      || ((v273 = *(unsigned int *)((v189 & 0xFFFFFFFF8) + 8), (_DWORD)v273 != 0x3FFFFFFF)
        ? (v274 = (_DWORD)v273 == -1)
        : (v274 = 1),
          v274))
    {
      v275 = 2;
    }
    else if (v273 >> 28)
    {
      v277 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v277 = v272;
      *(_DWORD *)(v277 + 8) = v273;
      v275 = 1;
      v272 = v277;
    }
    else
    {
      v275 = *(_QWORD *)(v189 & 0xFFFFFFFF8);
      v272 = v273 << 36;
    }
    v189 = v272 | v275;
  }
  v313 = v189;
  v197 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v188, &v313, (uint64_t *)&v309, &v314, v184, v185, v186, v187);
  if ((v313 & 1) != 0 && (v313 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v313 & 0xFFFFFFFF8, v190, v191, v192, v193, v194, v195, v196);
  if ((v197 & 1) == 0)
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v191, v192, v193, v194, v195, v196);
    LOBYTE(v198) = 0;
    goto LABEL_89;
  }
  v258 = *((unsigned int *)this + 1441);
  if ((_DWORD)v258)
  {
    v259 = 0;
    v260 = 16 * v258;
    v261 = (char *)(*((_QWORD *)this + 719) + 2);
    while (1)
    {
      v263 = *v261;
      v261 += 16;
      v262 = v263;
      if ((v263 & 0x40) != 0)
        goto LABEL_234;
      v259 |= 1 << v262;
      v260 -= 16;
      if (!v260)
        goto LABEL_175;
    }
  }
  v259 = 0;
LABEL_175:
  if ((v65 & 0x40) != 0)
  {
LABEL_234:
    __break(1u);
    goto LABEL_235;
  }
  LOBYTE(v198) = 1;
  v264 = v259 | (1 << v40);
  if ((v264 & 2) != 0)
  {
    v265 = (unsigned __int16)~(_WORD)v264 & 0xFFFE;
    if (v265)
    {
      v198 = __clz(__rbit64(v265));
      if (v198 != 1)
      {
        if (v198 == 31)
        {
          v267 = *((_DWORD *)this + 50);
          v268 = v267 + 4;
          v269 = *((_DWORD *)this + 48);
          v266 = -1862270913;
        }
        else
        {
          v266 = v198 | 0xAA0103E0;
          v267 = *((_DWORD *)this + 50);
          v268 = v267 + 4;
          v269 = *((_DWORD *)this + 48);
        }
        if (v268 > v269)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v283, (uint64_t)v190, v191, v192, v193, v194, v195, v196);
          v267 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v267) = v266;
        *((_DWORD *)this + 50) += 4;
      }
    }
    else
    {
      LOBYTE(v198) = -1;
    }
  }
LABEL_89:
  if ((v309 & 1) != 0 && (v309 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v309 & 0xFFFFFFFF8, v190, v191, v192, v193, v194, v195, v196);
  if (v40)
  {
    if (v40 == 31)
    {
      v200 = *((_DWORD *)this + 50);
      v201 = v200 + 4;
      v202 = *((_DWORD *)this + 48);
      v199 = -1862270945;
    }
    else
    {
      if (v40 == 255)
        v199 = -1442774017;
      else
        v199 = v40 | 0xAA0003E0;
      v200 = *((_DWORD *)this + 50);
      v201 = v200 + 4;
      v202 = *((_DWORD *)this + 48);
    }
    if (v201 > v202)
    {
      JSC::AssemblerBuffer::outOfLineGrow(v283, (uint64_t)v190, v191, v192, v193, v194, v195, v196);
      v200 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v200) = v199;
    *((_DWORD *)this + 50) += 4;
  }
  v203 = *((_DWORD *)this + 1441);
  if (v203)
  {
    v204 = v203 - 1;
    v205 = 16 * (v203 - 1);
    while (*((_DWORD *)this + 1441) > v204)
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl((uint64_t)this, *((_QWORD *)this + 719) + v205, v191, v192, v193, v194, v195, v196);
      v205 -= 16;
      if (--v204 == -1)
        goto LABEL_102;
    }
LABEL_235:
    __break(0xC471u);
    JUMPOUT(0x197B7EF44);
  }
LABEL_102:
  *((_BYTE *)this + 5768) = 0;
  if (*((_DWORD *)this + 1440))
  {
    if (*((_DWORD *)this + 1441))
      *((_DWORD *)this + 1441) = 0;
    v206 = *v284;
    if (*v284)
    {
      *((_QWORD *)this + 719) = 0;
      *((_DWORD *)this + 1440) = 0;
      WTF::fastFree(v206, v190, v191, v192, v193, v194, v195, v196);
    }
  }
  if (v197)
    JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, (char)v198, v191, v192, v193, v194, v195, v196);
  for (j = *((_DWORD *)this + 50); (signed int)j < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = j)
  {
    if (j + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v283, (uint64_t)v190, v191, v192, v193, v194, v195, v196);
      j = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + j) = -721215457;
    j = *((_DWORD *)this + 50) + 4;
  }
  v208 = j;
  if (j + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v283, (uint64_t)v190, v191, v192, v193, v194, v195, v196);
    v208 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v208) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v209 = 69;
  else
    v209 = 65;
  v309 = j;
  LOBYTE(v310) = v209;
  *(_WORD *)((char *)&v310 + 1) = 15;
  HIBYTE(v310) = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v293, (uint64_t)this, v191, v192, v193, v194, v195, v196);
  if (v12 != v65)
  {
    if (v12 == 63)
    {
      if ((_DWORD)v65 == 31)
        goto LABEL_188;
      v270 = v40 & 0x1F;
      v271 = -763363328;
    }
    else
    {
      if (v12 != 31 && (_DWORD)v65 != 31)
      {
        v217 = v40 & 0xFFE0FFFF | ((v12 & 0x1F) << 16) | 0xAA0003E0;
        goto LABEL_120;
      }
LABEL_188:
      v270 = v65 | (32 * v12);
      v271 = -1862270976;
    }
    v217 = v270 | v271;
LABEL_120:
    v218 = *((_DWORD *)this + 50);
    if (v218 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v283, v210, v211, v212, v213, v214, v215, v216);
      v218 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v218) = v217;
    *((_DWORD *)this + 50) += 4;
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v309, (uint64_t)this, v211, v212, v213, v214, v215, v216);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v219, v220, v221, v222, v223, v224);
  v232 = (char *)this + 4776;
  v233 = *((_DWORD *)a2 + 12);
  if ((int)v65 > 15)
    v234 = -1;
  else
    v234 = v65;
  v235 = &v232[12 * v234];
  *(_DWORD *)v235 = v233;
  *((_DWORD *)v235 + 1) = 4;
  v236 = ~v233;
  if (v236 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_238:
    JUMPOUT(0x197B7ECB0);
  }
  v237 = *((_QWORD *)this + 499) + 24 * (int)v236;
  v238 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v237 = a2;
  *(_DWORD *)(v237 + 8) = v238;
  *(_BYTE *)(v237 + 17) = v65;
  *(_DWORD *)(v237 + 12) = 6;
  *(_BYTE *)(v237 + 16) = 0;
  v239 = v298;
  if (v300 != (_BYTE *)v298 && v298)
  {
    v298 = 0;
    LODWORD(v299) = 0;
    WTF::fastFree((unint64_t)v239, v225, v226, v227, v228, v229, v230, v231);
  }
  if (v301)
  {
    v240 = (char)v302;
    if ((char)v302 != -1)
    {
      if ((char)v302 > 15)
        v240 = -1;
      --*(_DWORD *)(v301 + 12 * v240 + 4784);
    }
  }
  if (v303)
  {
    v241 = v304;
    if (v304 != -1)
    {
      if (v304 > 15)
        v241 = -1;
      --*(_DWORD *)(v303 + 12 * v241 + 4784);
    }
  }
  if (v305)
  {
    v242 = (char)v306;
    if ((char)v306 != -1)
    {
      if ((char)v306 > 15)
        v242 = -1;
      --*(_DWORD *)(v305 + 12 * v242 + 4784);
    }
  }
  if (v307)
  {
    v243 = (char)v308;
    if ((char)v308 != -1)
    {
      if ((char)v308 > 15)
        v243 = -1;
      --*(_DWORD *)(v307 + 12 * v243 + 4784);
    }
  }
  if (v285)
  {
    if (v12 > 15)
      v244 = -1;
    else
      v244 = v12;
    --*(_DWORD *)&v232[12 * v244 + 8];
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compilePeepHoleInt32Branch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  JSC::DFG::SpeculativeJIT *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v43;
  char v44;
  __int128 *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  char v56;
  _BYTE v57[7];
  JSC::DFG::SpeculativeJIT *v58;
  unint64_t v59;
  char v60;
  _BYTE v61[11];
  int v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;

  v8 = a4;
  v11 = a1;
  v12 = *(_QWORD *)(a1 + 3960);
  v13 = *(_DWORD *)(*(_QWORD *)(a1 + 3968) + 8) + 1;
  while (v13 < *(_DWORD *)(v12 + 60))
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v13++);
    if (v14)
      goto LABEL_4;
  }
  v14 = 0;
LABEL_4:
  if (v14 == a3)
    v15 = a4;
  else
    v15 = a3;
  if (v14 == a3)
    v16 = a5 ^ 1u;
  else
    v16 = a5;
  v17 = *(_QWORD *)(a2 + 24);
  if (*(unsigned __int16 *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u)
  {
    v38 = **(_QWORD **)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    if (v38 >= 0xFFFE000000000000)
    {
      v39 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)&v64 = a1;
      *((_QWORD *)&v64 + 1) = v39;
      LOBYTE(v65) = -1;
      v40 = ~*(_DWORD *)((v39 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v40 >= *(unsigned int *)(a1 + 4004))
      {
        __break(0xC471u);
        JUMPOUT(0x197B7F468);
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v40 + 12))
      {
        a4 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)a1, v39, (uint64_t)&v65 + 1, a4, a5, a6, a7, a8);
        LOBYTE(v65) = a4;
        if ((_DWORD)a4 != -1)
        {
LABEL_31:
          JSC::DFG::SpeculativeJIT::branch32<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Imm32,JSC::ARM64Registers::RegisterID>(v11, v16, v38, a4, v15, a6, a7, a8);
          v36 = (JSC::DFG::SpeculativeJIT *)v64;
          v37 = (char)v65;
          goto LABEL_32;
        }
        v39 = *((_QWORD *)&v64 + 1);
        a1 = v64;
      }
      a4 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)a1, v39, (uint64_t)&v65 + 1, a4, a5, a6, a7, a8);
      LOBYTE(v65) = a4;
      goto LABEL_31;
    }
  }
  v18 = *(_QWORD *)(a2 + 32);
  v19 = v18 & 0xFF00FFFFFFFFFFFFLL;
  v20 = *(unsigned __int16 *)((v18 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
  if (v20 <= 2 && **(_QWORD **)((v18 & 0xFF00FFFFFFFFFFFFLL) + 0x48) >= 0xFFFE000000000000)
  {
    v58 = (JSC::DFG::SpeculativeJIT *)a1;
    v59 = v17;
    v60 = -1;
    v43 = ~*(_DWORD *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v43 < *(unsigned int *)(a1 + 4004))
    {
      if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v43 + 12))
      {
        v44 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)a1, v17, (uint64_t)v61, a4, a5, a6, a7, a8);
        v60 = v44;
        v19 = *(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL;
        v20 = *(unsigned __int16 *)(v19 + 0x12);
      }
      else
      {
        v44 = -1;
      }
      if (v20 == 355 || v20 == 348)
      {
        v45 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
        {
          JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
          LODWORD(qword_1EE342DB8) = 0;
        }
      }
      else
      {
        v45 = *(__int128 **)(v19 + 72);
      }
      v46 = *(unsigned int *)v45;
      if (v44 == -1)
      {
        v44 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v58, v59, (uint64_t)v61, a4, a5, a6, a7, a8);
        v60 = v44;
      }
      JSC::MacroAssemblerARM64::branch32(v11, v16, v44, v46, a5, a6, a7, a8, (uint64_t)&v55);
      v47 = (_QWORD *)(v11 + 5264);
      v48 = *(_QWORD *)((char *)&v55 + 4);
      LODWORD(v64) = v55;
      *(_QWORD *)((char *)&v64 + 4) = *(_QWORD *)((char *)&v55 + 4);
      v65 = v15;
      v49 = *(unsigned int *)(v11 + 5276);
      if ((_DWORD)v49 == *(_DWORD *)(v11 + 5272))
      {
        v53 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, (void *)(v49 + 1), (unint64_t)&v64, v26, v27, v28, v29, v30);
        v54 = *(_QWORD *)(v11 + 5264) + 24 * *(unsigned int *)(v11 + 5276);
        *(_DWORD *)v54 = *(_DWORD *)v53;
        *(_QWORD *)(v54 + 4) = *(_QWORD *)(v53 + 4);
        *(_QWORD *)(v54 + 16) = *(_QWORD *)(v53 + 16);
      }
      else
      {
        v50 = *v47 + 24 * v49;
        *(_DWORD *)v50 = v55;
        *(_QWORD *)(v50 + 4) = v48;
        *(_QWORD *)(v50 + 16) = v15;
      }
      ++*(_DWORD *)(v11 + 5276);
      v36 = v58;
      v37 = v60;
      goto LABEL_32;
    }
LABEL_64:
    __break(0xC471u);
    JUMPOUT(0x197B7F458);
  }
  v58 = (JSC::DFG::SpeculativeJIT *)a1;
  v59 = v17;
  v60 = -1;
  v21 = ~*(_DWORD *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  v22 = *(unsigned int *)(a1 + 4004);
  if (v21 >= v22)
    goto LABEL_64;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v21 + 12))
  {
    v23 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)a1, v17, (uint64_t)v61, a4, a5, a6, a7, a8);
    v60 = v23;
    v18 = *(_QWORD *)(a2 + 32);
    v22 = *(unsigned int *)(v11 + 4004);
    v19 = v18 & 0xFF00FFFFFFFFFFFFLL;
  }
  else
  {
    v23 = -1;
  }
  *(_QWORD *)&v55 = v11;
  *((_QWORD *)&v55 + 1) = v18;
  v56 = -1;
  v24 = ~*(_DWORD *)(v19 + 48);
  if (v24 >= v22)
  {
    __break(0xC471u);
    JUMPOUT(0x197B7F460);
  }
  if (*(_BYTE *)(*(_QWORD *)(v11 + 3992) + 24 * (int)v24 + 12))
  {
    v25 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)v11, v18, (uint64_t)v57, a4, a5, a6, a7, a8);
    v56 = v25;
    v23 = v60;
  }
  else
  {
    v25 = -1;
  }
  if (v23 == -1)
  {
    v23 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v58, v59, (uint64_t)v61, a4, a5, a6, a7, a8);
    v60 = v23;
    v25 = v56;
  }
  if (v25 == -1)
  {
    v25 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)v55, *((unint64_t *)&v55 + 1), (uint64_t)v57, a4, a5, a6, a7, a8);
    v56 = v25;
  }
  JSC::MacroAssemblerARM64::branch32(v11, v16, v23, v25, a5, a6, a7, a8, (uint64_t)&v62);
  v31 = (_QWORD *)(v11 + 5264);
  v32 = v63;
  LODWORD(v64) = v62;
  *(_QWORD *)((char *)&v64 + 4) = v63;
  v65 = v15;
  v33 = *(unsigned int *)(v11 + 5276);
  if ((_DWORD)v33 == *(_DWORD *)(v11 + 5272))
  {
    v51 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v31, (void *)(v33 + 1), (unint64_t)&v64, v26, v27, v28, v29, v30);
    v52 = *(_QWORD *)(v11 + 5264) + 24 * *(unsigned int *)(v11 + 5276);
    *(_DWORD *)v52 = *(_DWORD *)v51;
    *(_QWORD *)(v52 + 4) = *(_QWORD *)(v51 + 4);
    *(_QWORD *)(v52 + 16) = *(_QWORD *)(v51 + 16);
  }
  else
  {
    v34 = *v31 + 24 * v33;
    *(_DWORD *)v34 = v62;
    *(_QWORD *)(v34 + 4) = v32;
    *(_QWORD *)(v34 + 16) = v15;
  }
  ++*(_DWORD *)(v11 + 5276);
  v35 = v56;
  if (v56 > 15)
    v35 = -1;
  --*(_DWORD *)(v55 + 12 * v35 + 4784);
  v36 = v58;
  v37 = v60;
LABEL_32:
  if (v37 > 15)
    v37 = -1;
  --*((_DWORD *)v36 + 3 * v37 + 1196);
  if (v14 == a3)
    v41 = a3;
  else
    v41 = v8;
  return JSC::DFG::SpeculativeJIT::jump(v11, v41, 0, v26, v27, v28, v29, v30);
}

uint64_t JSC::DFG::SpeculativeJIT::compilePeepHoleSymbolEquality(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  JSC::DFG::SpeculativeJIT *v42;
  uint64_t v43;
  uint64_t result;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;

  v11 = *((_QWORD *)a2 + 3);
  if ((v11 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_31;
  v12 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
    goto LABEL_36;
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), (uint64_t)a3, a4, a5, a6, a7, a8);
  else
LABEL_31:
    v13 = -1;
  v14 = *((_QWORD *)a2 + 4);
  v15 = v14 & 0xFF00FFFFFFFFFFFFLL;
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
  {
LABEL_32:
    v17 = -1;
    goto LABEL_9;
  }
  v16 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v16 >= *((unsigned int *)this + 1001))
  {
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x197B7F72CLL);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v16 + 12))
    goto LABEL_32;
  v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 4), (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_9:
  if (v13 == -1)
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v11, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (v17 == -1)
    v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v14, (uint64_t)a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::speculateSymbol((uint64_t)this, *((_QWORD *)a2 + 3), v13, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::speculateSymbol((uint64_t)this, *((_QWORD *)a2 + 4), v17, v18, v19, v20, v21, v22);
  v27 = (uint64_t *)*((_QWORD *)a3 + 9);
  v28 = *v27;
  v29 = v27[2];
  v30 = *((_QWORD *)this + 495);
  v31 = *(_DWORD *)(*((_QWORD *)this + 496) + 8) + 1;
  while (v31 < *(_DWORD *)(v30 + 60))
  {
    v32 = *(_QWORD *)(*(_QWORD *)(v30 + 48) + 8 * v31++);
    if (v32)
      goto LABEL_16;
  }
  v32 = 0;
LABEL_16:
  if (v28 == v32)
  {
    JSC::DFG::SpeculativeJIT::branchPtr<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)this, v13, v17, v29, v23, v24, v25, v26);
    v42 = this;
    v43 = v28;
  }
  else
  {
    JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, v13, v17, v23, v24, v25, v26, (uint64_t)&v49);
    v38 = (_QWORD *)((char *)this + 5264);
    v39 = v50;
    v51 = v49;
    v52 = v50;
    v53 = v28;
    v40 = *((unsigned int *)this + 1319);
    if ((_DWORD)v40 == *((_DWORD *)this + 1318))
    {
      v47 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, (void *)(v40 + 1), (unint64_t)&v51, v33, v34, v35, v36, v37);
      v48 = *((_QWORD *)this + 658) + 24 * *((unsigned int *)this + 1319);
      *(_DWORD *)v48 = *(_DWORD *)v47;
      *(_QWORD *)(v48 + 4) = *(_QWORD *)(v47 + 4);
      *(_QWORD *)(v48 + 16) = *(_QWORD *)(v47 + 16);
    }
    else
    {
      v41 = *v38 + 24 * v40;
      *(_DWORD *)v41 = v49;
      *(_QWORD *)(v41 + 4) = v39;
      *(_QWORD *)(v41 + 16) = v28;
    }
    ++*((_DWORD *)this + 1319);
    v42 = this;
    v43 = v29;
  }
  result = JSC::DFG::SpeculativeJIT::jump((uint64_t)v42, v43, 0, v33, v34, v35, v36, v37);
  if (v15)
  {
    if (v17 > 15)
      v45 = -1;
    else
      v45 = v17;
    --*((_DWORD *)this + 3 * v45 + 1196);
  }
  if ((v11 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v13 > 15)
      v46 = -1;
    else
      v46 = v13;
    --*((_DWORD *)this + 3 * v46 + 1196);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::genericJSValuePeepholeBranch(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  int *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  BOOL v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unsigned __int8 v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  int *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  void *v107;
  JSC::DFG::Node *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  unsigned __int8 *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _DWORD *v131;
  JSC::DFG::Node *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  JSC::DFG::Node *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int8x8_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  unsigned int v165;
  _DWORD *v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  uint8x8_t v174;
  __int32 v175;
  uint8x8_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  int8x8_t v207;
  int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int *v211;
  int v212;
  unsigned int v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  WTF *v227;
  char v228;
  char v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char v236;
  char v237;
  unsigned int v238;
  uint64_t v239;
  unsigned __int8 *v240;
  unsigned __int8 *v241;
  uint64_t v242;
  _BYTE *v243;
  unsigned __int8 *v244;
  char *v245;
  char *v246;
  uint64_t v247;
  unsigned int v248;
  unsigned __int8 *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  char v254;
  char v255;
  uint64_t v256;
  unint64_t v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int *v260;
  JSC::AssemblerBuffer *v261;
  unsigned int v262;
  unsigned int v263;
  uint64_t v264;
  uint64_t v265;
  BOOL v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  unsigned __int8 *v272;
  uint64_t v273;
  unint64_t *v274;
  _QWORD *v275;
  signed __int8 v276;
  unsigned int v277;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  JSC::DFG::Node *v282;
  JSC::DFG::Node *v283;
  int v284;
  int v285;
  int v286;
  int v287;
  uint64_t v288;
  WTF *v289;
  uint64_t v290;
  _BYTE v291[24];
  _BYTE v292[12];
  _BYTE v293[12];
  unsigned int v294;
  uint64_t v295;
  unint64_t v296;

  v11 = &v288;
  v12 = &v286;
  v13 = *(uint64_t **)(a3 + 72);
  v14 = *v13;
  v15 = v13[2];
  v16 = *(_QWORD *)(a1 + 3960);
  v17 = *(_DWORD *)(*(_QWORD *)(a1 + 3968) + 8) + 1;
  while (v17 < *(_DWORD *)(v16 + 60))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * v17++);
    if (v18)
      goto LABEL_4;
  }
  v18 = 0;
LABEL_4:
  v19 = v14 == v18;
  v20 = v14 != v18;
  if (v14 == v18)
    v21 = v14;
  else
    v21 = v15;
  if (v14 == v18)
    v14 = v15;
  v280 = v14;
  v281 = v21;
  if (v19)
    v22 = a4 ^ 1u;
  else
    v22 = a4;
  v23 = a2[3];
  v282 = (JSC::DFG::Node *)(v23 & 0xFF00FFFFFFFFFFFFLL);
  v277 = v20;
  if ((v23 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_76;
  v24 = ~*(_DWORD *)((v23 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v24 >= *(unsigned int *)(a1 + 4004))
    goto LABEL_256;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v24 + 12))
    v25 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, v23, a3, a4, a5, a6, a7, a8);
  else
LABEL_76:
    v25 = -1;
  v26 = a2[4];
  v283 = (JSC::DFG::Node *)(v26 & 0xFF00FFFFFFFFFFFFLL);
  v279 = a3;
  if ((v26 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_77;
  v27 = ~*(_DWORD *)((v26 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v27 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B80854);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v27 + 12))
    v28 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, v26, a3, a4, a5, a6, a7, a8);
  else
LABEL_77:
    v28 = -1;
  JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)a1, (uint64_t)a2, a2[3], a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)a1, v29, a2[4], v30, v31, v32, v33, v34);
  if (v25 == -1)
    v25 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, v23, v35, v36, v37, v38, v39, v40);
  if (v28 == -1)
    v28 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, v26, v35, v36, v37, v38, v39, v40);
  v289 = (WTF *)v291;
  v290 = 2;
  v41 = a2[3];
  v42 = *(_QWORD *)(a1 + 5504);
  v43 = *(unsigned int *)((v41 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v44 = (_QWORD *)(v42 + 24);
  v45 = (_QWORD *)(v42 + 8);
  if ((v41 & 1) != 0)
    v46 = v44;
  else
    v46 = v45;
  v47 = *v46 + 32 * v43;
  v48 = (void *)*(unsigned int *)(a1 + 5584);
  if ((_DWORD)v48 != *(_DWORD *)(v47 + 20))
  {
    if ((*(_QWORD *)(v47 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v47, v48, v35, v36, v37, v38, v39, v40);
    else
      *(_DWORD *)(v47 + 20) = (_DWORD)v48;
  }
  if ((*(_BYTE *)(v47 + 12) & 3) == 0)
    goto LABEL_71;
  v49 = a2[4];
  v50 = *(_QWORD *)(a1 + 5504);
  v51 = *(unsigned int *)((v49 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v52 = (_QWORD *)(v50 + 24);
  v53 = (_QWORD *)(v50 + 8);
  if ((v49 & 1) != 0)
    v54 = v52;
  else
    v54 = v53;
  v55 = *v54 + 32 * v51;
  v56 = *(unsigned int *)(a1 + 5584);
  if ((_DWORD)v56 != *(_DWORD *)(v55 + 20))
  {
    if ((*(_QWORD *)(v55 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v55, (void *)v56, v35, v36, v37, v38, v39, v40);
    else
      *(_DWORD *)(v55 + 20) = v56;
  }
  if ((*(_BYTE *)(v55 + 12) & 3) == 0)
  {
LABEL_71:
    ++*(_DWORD *)(a1 + 4784);
    v130 = *(unsigned int *)(a1 + 4776);
    if ((_DWORD)v130 != 0x3FFFFFFF)
    {
      *(_QWORD *)(a1 + 4776) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill(a1, v130, v35, v36, v37, v38, v39, v40);
    }
    v131 = (_DWORD *)(a1 + 4784);
    v132 = v282;
    JSC::DFG::SpeculativeJIT::use((uint64_t *)a1, v282, v35, v36, v37, v38, v39, v40);
    JSC::DFG::SpeculativeJIT::use((uint64_t *)a1, v283, v133, v134, v135, v136, v137, v138);
    JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)a1, v139, v140, v141, v142, v143, v144, v145);
    v152 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, (JSC::DFG::JITCompiler *)a2, v146, v147, v148, v149, v150, v151);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>((int *)v293, (int *)a1, a5, v152, v153, v25, v28, v154);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, v277, 0, v155, v156, v157, v158, (uint64_t)v292, v159);
    v160 = (_QWORD *)(a1 + 5264);
    v161 = *(_QWORD *)&v292[4];
    *(_DWORD *)v293 = *(_DWORD *)v292;
    *(_QWORD *)&v293[4] = *(_QWORD *)&v292[4];
    v295 = v280;
    v162 = *(unsigned int *)(a1 + 5276);
    if ((_DWORD)v162 == *(_DWORD *)(a1 + 5272))
    {
      v232 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v160, (void *)(v162 + 1), (unint64_t)v293, v89, v90, v91, v92, v93);
      v233 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
      *(_DWORD *)v233 = *(_DWORD *)v232;
      *(_QWORD *)(v233 + 4) = *(_QWORD *)(v232 + 4);
      *(_QWORD *)(v233 + 16) = *(_QWORD *)(v232 + 16);
    }
    else
    {
      v163 = *v160 + 24 * v162;
      *(_DWORD *)v163 = *(_DWORD *)v292;
      *(_QWORD *)(v163 + 4) = v161;
      *(_QWORD *)(v163 + 16) = v280;
    }
    ++*(_DWORD *)(a1 + 5276);
LABEL_149:
    --*v131;
    v58 = v28;
    goto LABEL_150;
  }
  v57 = ~*(_DWORD *)((v26 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v57 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B8085CLL);
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v57 + 8) == 1)
  {
    v58 = v28;
    if (v28 == -1)
      v58 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, v26, v35, v36, v37, v38, v39, v40);
    if (v58 > 15)
      v59 = -1;
    else
      v59 = v58;
    ++*(_DWORD *)(a1 + 12 * v59 + 4784);
    v276 = v58;
  }
  else
  {
    v276 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)a1, v56, v35, v36, v37, v38, v39, v40);
    v58 = v28;
  }
  JSC::DFG::SpeculativeJIT::use((uint64_t *)a1, v282, v35, v36, v37, v38, v39, v40);
  JSC::DFG::SpeculativeJIT::use((uint64_t *)a1, v283, v60, v61, v62, v63, v64, v65);
  v72 = a2[3];
  v73 = *(_QWORD *)(a1 + 5504);
  if ((v72 & 1) != 0)
    v74 = (_QWORD *)(v73 + 24);
  else
    v74 = (_QWORD *)(v73 + 8);
  v75 = *v74 + 32 * *(unsigned int *)((v72 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v76 = (void *)*(unsigned int *)(a1 + 5584);
  if ((_DWORD)v76 != *(_DWORD *)(v75 + 20))
  {
    if ((*(_QWORD *)(v75 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v75, v76, v66, v67, v68, v69, v70, v71);
    else
      *(_DWORD *)(v75 + 20) = (_DWORD)v76;
  }
  if ((*(_QWORD *)(v75 + 8) & 0xFFFFFFFCFFFFFFFFLL) != 0)
  {
    JSC::MacroAssemblerARM64::branch64(a1, 3, v25, 27, v68, v69, v70, v71, (uint64_t)&v287);
    v164 = v287;
    if (v287 != -1)
    {
      v165 = HIDWORD(v290);
      if (HIDWORD(v290) == (_DWORD)v290)
      {
        v166 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v289, (void *)(HIDWORD(v290) + 1), (unint64_t)&v287, v67, v68, v69, v70, v71);
        v11 = (uint64_t *)(v166 + 1);
        v164 = *v166;
        v165 = HIDWORD(v290);
      }
      v167 = (char *)v289 + 12 * v165;
      *(_DWORD *)v167 = v164;
      *(_QWORD *)(v167 + 4) = *v11;
      ++HIDWORD(v290);
    }
  }
  v77 = a2[4];
  v78 = *(_QWORD *)(a1 + 5504);
  if ((v77 & 1) != 0)
    v79 = (_QWORD *)(v78 + 24);
  else
    v79 = (_QWORD *)(v78 + 8);
  v80 = v276;
  v81 = *v79 + 32 * *(unsigned int *)((v77 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v82 = (void *)*(unsigned int *)(a1 + 5584);
  if ((_DWORD)v82 != *(_DWORD *)(v81 + 20))
  {
    if ((*(_QWORD *)(v81 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v81, v82, v66, v67, v68, v69, v70, v71);
    else
      *(_DWORD *)(v81 + 20) = (_DWORD)v82;
  }
  if ((*(_QWORD *)(v81 + 8) & 0xFFFFFFFCFFFFFFFFLL) != 0)
  {
    JSC::MacroAssemblerARM64::branch64(a1, 3, v28, 27, v68, v69, v70, v71, (uint64_t)&v285);
    v84 = v285;
    if (v285 != -1)
    {
      v85 = HIDWORD(v290);
      if (HIDWORD(v290) == (_DWORD)v290)
      {
        v86 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v289, (void *)(HIDWORD(v290) + 1), (unint64_t)&v285, v83, v68, v69, v70, v71);
        v12 = v86 + 1;
        v84 = *v86;
        v85 = HIDWORD(v290);
      }
      v87 = (char *)v289 + 12 * v85;
      *(_DWORD *)v87 = v84;
      *(_QWORD *)(v87 + 4) = *(_QWORD *)v12;
      ++HIDWORD(v290);
    }
  }
  JSC::MacroAssemblerARM64::branch32(a1, v22, v25, v28, v68, v69, v70, v71, (uint64_t)v292);
  v94 = *(_QWORD *)&v292[4];
  *(_DWORD *)v293 = *(_DWORD *)v292;
  *(_QWORD *)&v293[4] = *(_QWORD *)&v292[4];
  v295 = v280;
  v95 = *(unsigned int *)(a1 + 5276);
  if ((_DWORD)v95 == *(_DWORD *)(a1 + 5272))
  {
    v230 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 5264, (void *)(v95 + 1), (unint64_t)v293, v89, v90, v91, v92, v93);
    v231 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
    *(_DWORD *)v231 = *(_DWORD *)v230;
    *(_QWORD *)(v231 + 4) = *(_QWORD *)(v230 + 4);
    *(_QWORD *)(v231 + 16) = *(_QWORD *)(v230 + 16);
  }
  else
  {
    v96 = *(_QWORD *)(a1 + 5264) + 24 * v95;
    *(_DWORD *)v96 = *(_DWORD *)v292;
    *(_QWORD *)(v96 + 4) = v94;
    *(_QWORD *)(v96 + 16) = v280;
  }
  ++*(_DWORD *)(a1 + 5276);
  v97 = a2[3];
  v98 = *(_QWORD *)(a1 + 5504);
  if ((v97 & 1) != 0)
    v99 = (_QWORD *)(v98 + 24);
  else
    v99 = (_QWORD *)(v98 + 8);
  v100 = *v99 + 32 * *(unsigned int *)((v97 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v101 = (void *)*(unsigned int *)(a1 + 5584);
  if ((_DWORD)v101 != *(_DWORD *)(v100 + 20))
  {
    if ((*(_QWORD *)(v100 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v100, v101, v88, v89, v90, v91, v92, v93);
    else
      *(_DWORD *)(v100 + 20) = (_DWORD)v101;
  }
  v102 = v276;
  if ((*(_QWORD *)(v100 + 8) & 0xFFFFFFFCFFFFFFFFLL) == 0)
  {
    v103 = a2[4];
    v104 = *(_QWORD *)(a1 + 5504);
    if ((v103 & 1) != 0)
      v105 = (_QWORD *)(v104 + 24);
    else
      v105 = (_QWORD *)(v104 + 8);
    v106 = *v105 + 32 * *(unsigned int *)((v103 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v107 = (void *)*(unsigned int *)(a1 + 5584);
    if ((_DWORD)v107 != *(_DWORD *)(v106 + 20))
    {
      if ((*(_QWORD *)(v106 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v106, v107, v88, v89, v90, v91, v92, v93);
      else
        *(_DWORD *)(v106 + 20) = (_DWORD)v107;
    }
    if ((*(_QWORD *)(v106 + 8) & 0xFFFFFFFCFFFFFFFFLL) == 0)
      goto LABEL_144;
  }
  v275 = (_QWORD *)(a1 + 5264);
  JSC::DFG::SpeculativeJIT::jump(a1, v281, 1, v89, v90, v91, v92, v93);
  if (HIDWORD(v290))
  {
    v114 = 0;
    v115 = 0;
    v116 = 12 * HIDWORD(v290);
    do
    {
      if (v115 >= HIDWORD(v290))
      {
        __break(0xC471u);
        goto LABEL_252;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v289 + v114), a1, (uint64_t)v108, v109, v110, v111, v112, v113);
      ++v115;
      v114 += 12;
    }
    while (v116 != v114);
  }
  v117 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, (JSC::DFG::JITCompiler *)a2, v108, v109, v110, v111, v112, v113);
  v119 = v118;
  v120 = 1;
  v274 = (unint64_t *)(a1 + 5752);
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, 1, a1 + 5752, v102, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v121, v122);
  *(_QWORD *)v293 = &v295;
  *(_DWORD *)&v293[8] = 2;
  if (v25 == 1)
  {
    if (v28 == 2)
      goto LABEL_116;
    v273 = v119;
    v120 = 0;
  }
  else
  {
    v273 = v119;
    LOWORD(v295) = v25 | 0x100;
    v294 = 1;
    if (v28 == 2)
      goto LABEL_85;
  }
  *((_WORD *)&v295 + v120++) = v28 | 0x200;
  v294 = v120;
  do
  {
LABEL_85:
    v168 = 0;
    v169 = 0;
    v170 = *(_QWORD *)v293;
    v171 = v120;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)v293 + v168 + 1) & 0x40) != 0)
        goto LABEL_252;
      v169 |= 1 << *(_BYTE *)(*(_QWORD *)v293 + v168 + 1);
      v168 += 2;
    }
    while (2 * v120 != v168);
    v172 = 0;
    do
    {
      v173 = *(_BYTE *)(*(_QWORD *)v293 + v172) & 0x7F;
      if (v173 >= 0x40)
        goto LABEL_252;
      v169 &= ~(1 << v173);
      v172 += 2;
    }
    while (2 * v120 != v172);
    v174 = (uint8x8_t)vcnt_s8((int8x8_t)v169);
    v174.i16[0] = vaddlv_u8(v174);
    v175 = v174.i32[0];
    v176 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v169));
    v176.i16[0] = vaddlv_u8(v176);
    if (v176.i32[0] + v175)
    {
      v177 = 0;
      if (v120 <= 1uLL)
        v178 = 1;
      else
        v178 = v120;
      v179 = 2 * v178;
      while (1)
      {
        v180 = *(unsigned __int8 *)(*(_QWORD *)v293 + v177 + 1);
        if ((v180 & 0x7Fu) >= 0x40)
          goto LABEL_252;
        if (((v169 >> (v180 & 0x7F)) & 1) != 0)
          break;
        v177 += 2;
        if (v179 == v177)
          goto LABEL_110;
      }
      v181 = *(unsigned __int8 *)(*(_QWORD *)v293 + v177);
      if (v181 == v180)
        goto LABEL_108;
      if ((char)v181 == 63)
      {
        v182 = *(_DWORD *)(a1 + 200);
        v183 = *(_DWORD *)(a1 + 192);
        if ((char)v180 != 31)
        {
          v185 = v180 & 0x1F | 0xD2800000;
          goto LABEL_105;
        }
      }
      else
      {
        v182 = *(_DWORD *)(a1 + 200);
        v183 = *(_DWORD *)(a1 + 192);
        if (v180 != 31 && (char)v181 != 31)
        {
          v185 = v180 & 0xFFE0FFFF | ((v181 & 0x1F) << 16) | 0xAA0003E0;
LABEL_105:
          if (v182 + 4 > v183)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)v123, v124, v125, v126, v127, v128, v129);
            v182 = *(_DWORD *)(a1 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 56) + v182) = v185;
          *(_DWORD *)(a1 + 200) += 4;
          v170 = *(_QWORD *)v293;
          v171 = v294;
LABEL_108:
          memmove((void *)(v170 + v177), (const void *)(v170 + v177 + 2), 2 * v171 - v177 - 2);
          v120 = v294 - 1;
          goto LABEL_109;
        }
      }
      v185 = (char)v180 | (32 * (char)v181) | 0x91000000;
      goto LABEL_105;
    }
    v236 = **(_BYTE **)v293;
    v237 = *(_BYTE *)(*(_QWORD *)v293 + 1);
    JSC::MacroAssemblerARM64::swap(a1, (char)**(_BYTE **)v293, v237, v125, v126, v127, v128, v129);
    memmove(*(void **)v293, (const void *)(*(_QWORD *)v293 + 2), 2 * v294 - 2);
    v238 = v294;
    v239 = v294 - 1;
    v294 = v239;
    v240 = *(unsigned __int8 **)v293;
    v241 = (unsigned __int8 *)(*(_QWORD *)v293 + 2 * v239);
    if (v238 == 1)
    {
      v247 = 0;
      v248 = 0;
      v123 = (unsigned __int8 *)(*(_QWORD *)v293 + 2 * v239);
    }
    else
    {
      v242 = 2 * v239;
      v243 = *(_BYTE **)v293;
      while (*v243 != v237)
      {
        v243 += 2;
        v242 -= 2;
        if (!v242)
          goto LABEL_191;
      }
      *v243 = v236;
LABEL_191:
      LODWORD(v239) = 0;
      v244 = v240;
      v123 = v241;
      v245 = (char *)v241;
      do
      {
        if (*v240 == v240[1])
        {
          v246 = (char *)v240;
          if (v245 != (char *)(*(_QWORD *)v293 + 2 * v294))
          {
            v271 = v239;
            v272 = v241;
            if (v240 == v123)
            {
              v246 = v245;
            }
            else
            {
              v270 = v244 - v123;
              memmove(v245, v123, v244 - v123);
              v246 = &v245[v270];
            }
            v241 = v272;
            LODWORD(v239) = v271;
          }
          v123 = v240 + 2;
          LODWORD(v239) = v239 + 1;
          v245 = v246;
        }
        v240 += 2;
        v244 += 2;
      }
      while (v240 < v241);
      v240 = *(unsigned __int8 **)v293;
      v247 = v294;
      v248 = v294;
      v241 = (unsigned __int8 *)v245;
    }
    v249 = &v240[2 * v247];
    if (v123 != v249)
    {
      v268 = v239;
      memmove(v241, v123, v249 - v123);
      LODWORD(v239) = v268;
      v248 = v294;
    }
    v120 = v248 - v239;
LABEL_109:
    v294 = v120;
LABEL_110:
    ;
  }
  while (v120);
  v186 = *(_QWORD *)v293;
  v119 = v273;
  if (&v295 != *(uint64_t **)v293 && *(_QWORD *)v293)
  {
    memset(v293, 0, sizeof(v293));
    WTF::fastFree(v186, v123, v124, v125, v126, v127, v128, v129);
  }
LABEL_116:
  if ((_DWORD)v117 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v119, 0, v125, v126, v127, v128, v129);
  else
    JSC::MacroAssemblerARM64::load64(a1, (v117 << 35) + 0x380000001ALL, 0, v125, v126, v127, v128, v129);
  v80 = v276;
  JSC::DFG::SpeculativeJIT::appendCall(a1, a5, v187, v188, v189, v190, v191, v192, &v284);
  *(_QWORD *)v293 = 2;
  *(_QWORD *)v292 = 0;
  v197 = *(_QWORD *)(a1 + 3960);
  v198 = *(_QWORD *)(*(_QWORD *)(a1 + 3976) + 8);
  if ((v198 & 1) != 0)
  {
    v264 = *(_QWORD *)(v198 & 0xFFFFFFFF8);
    if ((v198 & 2) != 0
      || ((v265 = *(unsigned int *)((v198 & 0xFFFFFFFF8) + 8), (_DWORD)v265 != 0x3FFFFFFF)
        ? (v266 = (_DWORD)v265 == -1)
        : (v266 = 1),
          v266))
    {
      v267 = 2;
    }
    else
    {
      if (v265 >> 28)
      {
        v269 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v269 = v264;
        *(_DWORD *)(v269 + 8) = v265;
        v267 = 1;
        v264 = v269;
      }
      else
      {
        v267 = *(_QWORD *)(v198 & 0xFFFFFFFF8);
        v264 = v265 << 36;
      }
      v80 = v276;
    }
    v198 = v264 | v267;
  }
  v296 = v198;
  v206 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v197, &v296, (uint64_t *)v293, (unsigned int **)v292, v193, v194, v195, v196);
  if ((v296 & 1) != 0 && (v296 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v296 & 0xFFFFFFFF8, v199, v200, v201, v202, v203, v204, v205);
  if ((v206 & 1) == 0)
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a1, 1, v200, v201, v202, v203, v204, v205);
    LOBYTE(v208) = 0;
    goto LABEL_122;
  }
  v250 = *(unsigned int *)(a1 + 5764);
  if ((_DWORD)v250)
  {
    v251 = 0;
    v252 = 16 * v250;
    v253 = (char *)(*(_QWORD *)(a1 + 5752) + 2);
    while (1)
    {
      v255 = *v253;
      v253 += 16;
      v254 = v255;
      if ((v255 & 0x40) != 0)
        goto LABEL_252;
      v251 |= 1 << v254;
      v252 -= 16;
      if (!v252)
        goto LABEL_205;
    }
  }
  v251 = 0;
LABEL_205:
  if ((v80 & 0x40) != 0)
  {
LABEL_252:
    __break(1u);
    goto LABEL_256;
  }
  LOBYTE(v208) = 1;
  v256 = v251 | (1 << v80);
  if ((v256 & 2) != 0)
  {
    v257 = (unsigned __int16)~(_WORD)v256 & 0xFFFE;
    if (v257)
    {
      v208 = __clz(__rbit64(v257));
      if (v208 != 1)
      {
        if (v208 == 31)
        {
          v260 = (unsigned int *)(a1 + 200);
          v259 = *(_DWORD *)(a1 + 200);
          v261 = (JSC::AssemblerBuffer *)(a1 + 56);
          v262 = v259 + 4;
          v263 = *(_DWORD *)(a1 + 192);
          v258 = -1862270913;
        }
        else
        {
          v258 = v208 | 0xAA0103E0;
          v260 = (unsigned int *)(a1 + 200);
          v259 = *(_DWORD *)(a1 + 200);
          v261 = (JSC::AssemblerBuffer *)(a1 + 56);
          v262 = v259 + 4;
          v263 = *(_DWORD *)(a1 + 192);
        }
        if (v262 > v263)
        {
          v207 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v261, (uint64_t)v199, v200, v201, v202, v203, v204, v205).n128_u64[0];
          v259 = *v260;
        }
        *(_DWORD *)(*(_QWORD *)v261 + v259) = v258;
        *v260 += 4;
      }
    }
    else
    {
      LOBYTE(v208) = -1;
    }
  }
LABEL_122:
  if ((v293[0] & 1) != 0 && (*(_QWORD *)v293 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(*(_QWORD *)v293 & 0xFFFFFFFF8, v199, v200, v201, v202, v203, v204, v205);
  if (v80)
  {
    if (v80 == 31)
    {
      v209 = -1862270945;
    }
    else if (v80 == 255)
    {
      v209 = -1442774017;
    }
    else
    {
      v209 = v80 | 0xAA0003E0;
    }
    v211 = (unsigned int *)(a1 + 200);
    v210 = *(_DWORD *)(a1 + 200);
    if (v210 + 4 > *(_DWORD *)(a1 + 192))
    {
      v207 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)v199, v200, v201, v202, v203, v204, v205).n128_u64[0];
      v210 = *v211;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v210) = v209;
    *v211 += 4;
  }
  v212 = *(_DWORD *)(a1 + 5764);
  if (v212)
  {
    v213 = v212 - 1;
    v214 = 16 * (v212 - 1);
    while (*(_DWORD *)(a1 + 5764) > v213)
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl(a1, *(_QWORD *)(a1 + 5752) + v214, v200, v201, v202, v203, v204, v205);
      v214 -= 16;
      if (--v213 == -1)
        goto LABEL_134;
    }
LABEL_256:
    __break(0xC471u);
    JUMPOUT(0x197B8084CLL);
  }
LABEL_134:
  *(_BYTE *)(a1 + 5768) = 0;
  if (*(_DWORD *)(a1 + 5760))
  {
    if (*(_DWORD *)(a1 + 5764))
      *(_DWORD *)(a1 + 5764) = 0;
    v215 = *v274;
    if (*v274)
    {
      *(_QWORD *)(a1 + 5752) = 0;
      *(_DWORD *)(a1 + 5760) = 0;
      WTF::fastFree(v215, v199, v200, v201, v202, v203, v204, v205);
    }
  }
  if (v206)
    JSC::DFG::SpeculativeJIT::exceptionCheck(a1, (char)v208, v200, v201, v202, v203, v204, v205);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, v277, v102, v202, v203, v204, v205, (uint64_t)v292, v207);
  v216 = *(_QWORD *)&v292[4];
  *(_DWORD *)v293 = *(_DWORD *)v292;
  *(_QWORD *)&v293[4] = *(_QWORD *)&v292[4];
  v295 = v280;
  v217 = *(unsigned int *)(a1 + 5276);
  if ((_DWORD)v217 == *(_DWORD *)(a1 + 5272))
  {
    v234 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v275, (void *)(v217 + 1), (unint64_t)v293, v89, v90, v91, v92, v93);
    v235 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
    *(_DWORD *)v235 = *(_DWORD *)v234;
    *(_QWORD *)(v235 + 4) = *(_QWORD *)(v234 + 4);
    *(_QWORD *)(v235 + 16) = *(_QWORD *)(v234 + 16);
  }
  else
  {
    v218 = *v275 + 24 * v217;
    *(_DWORD *)v218 = *(_DWORD *)v292;
    *(_QWORD *)(v218 + 4) = v216;
    *(_QWORD *)(v218 + 16) = v280;
  }
  ++*(_DWORD *)(a1 + 5276);
LABEL_144:
  if (v80 != 0xFF)
  {
    if ((int)v102 > 15)
      v219 = -1;
    else
      v219 = v80;
    v131 = (_DWORD *)(a1 + 12 * v219 + 4784);
    v28 = v58;
    v132 = v282;
    goto LABEL_149;
  }
  v132 = v282;
LABEL_150:
  JSC::DFG::SpeculativeJIT::jump(a1, v281, 0, v89, v90, v91, v92, v93);
  *(_DWORD *)(a1 + 3988) = *(_DWORD *)(*(_QWORD *)(a1 + 3968) + 220) - 1;
  *(_QWORD *)(a1 + 3976) = v279;
  v227 = v289;
  if (v291 != (_BYTE *)v289 && v289)
  {
    v289 = 0;
    LODWORD(v290) = 0;
    WTF::fastFree((unint64_t)v227, v220, v221, v222, v223, v224, v225, v226);
  }
  if (v283)
  {
    if (v58 > 15)
      v228 = -1;
    else
      v228 = v58;
    --*(_DWORD *)(a1 + 12 * v228 + 4784);
  }
  if (v132)
  {
    if (v25 > 15)
      v229 = -1;
    else
      v229 = v25;
    --*(_DWORD *)(a1 + 12 * v229 + 4784);
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compileLoopHint(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t LoopHintExecutionCounter;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::DFG::Node *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::ARM64LogicalImmediate *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  JSC::RegisterAtOffsetList *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[2];
  char v97;

  if (HIBYTE(qword_1ECF4C75C))
  {
    v97 = 1;
    v96[0] = this;
    v96[1] = &v97;
    JSC::CodeOrigin::walkUpInlineStack<JSC::DFG::SpeculativeJIT::compileLoopHint(JSC::DFG::Node *)::$_0>(*(_QWORD *)a2, v96, a3, a4, a5, a6, a7, a8);
    if (v97)
    {
      v12 = *(_QWORD *)(*((_QWORD *)this + 495) + 40);
      v13 = *(_QWORD *)a2;
      v14 = *(_QWORD *)a2 & 0xFFFFFFFF8;
      if ((*(_QWORD *)a2 & 1) != 0)
        v14 = *(_QWORD *)(*(_QWORD *)a2 & 0xFFFFFFFF8);
      if (v14)
        v12 = *(_QWORD *)(v14 + 8);
      if ((v13 & 2) != 0)
      {
        LODWORD(v15) = -1;
      }
      else if ((v13 & 1) != 0)
      {
        LODWORD(v15) = *(_DWORD *)((*(_QWORD *)a2 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v15 = v13 >> 36;
      }
      LoopHintExecutionCounter = JSC::VM::getLoopHintExecutionCounter(*(_QWORD *)(*((_QWORD *)this + 44) + 16), **(_QWORD **)(*(_QWORD *)(v12 + 56) + 80) + (v15 >> 2), v11, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::pushToSave(this, 0, v17, v18, v19, v20, v21, v22);
      JSC::MacroAssemblerARM64::load64((uint64_t)this, LoopHintExecutionCounter, 0, v23, v24, v25, v26, v27);
      JSC::MacroAssemblerARM64::branch64((uint64_t)this, 3, 0, qword_1ECF4C768, v28, v29, v30, v31, (uint64_t)v96);
      JSC::MacroAssemblerARM64::popToRestore(this, 0, v32, v33, v34, v35, v36, v37);
      v44 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v38, v39, v40, v41, v42, v43);
      JSC::DFG::JITCompiler::loadLinkableConstant(this, v44, v45, 0, v46, v47, v48, v49);
      JSC::MacroAssemblerARM64::load64((uint64_t)this, 0x4000000000, 0, v50, v51, v52, v53, v54);
      v56 = JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(v55);
      JSC::AssemblyHelpers::emitRestoreCalleeSavesFor(this, (const JSC::RegisterAtOffsetList *)v56, v57, v58, v59, v60, v61, v62);
      JSC::AssemblyHelpers::emitFunctionEpilogue(this, v63, v64, v65, v66, v67, v68, v69);
      JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), 3596551104, v70, v71, v72, v73, v74, v75);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v96, (uint64_t)this, v76, v77, v78, v79, v80, v81);
      v89 = *((_DWORD *)this + 50);
      if (v89 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v82, v83, v84, v85, v86, v87, v88);
        v89 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v89) = -1862269952;
      *((_DWORD *)this + 50) += 4;
      JSC::MacroAssemblerARM64::store64((uint64_t)this, 0, LoopHintExecutionCounter, v84, v85, v86, v87, v88);
      JSC::MacroAssemblerARM64::popToRestore(this, 0, v90, v91, v92, v93, v94, v95);
    }
  }
  return JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, a4, a5, a6, a7, a8);
}

void JSC::CodeOrigin::walkUpInlineStack<JSC::DFG::SpeculativeJIT::compileLoopHint(JSC::DFG::Node *)::$_0>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;

  v9 = a1;
  if ((a1 & 1) != 0)
  {
    v29 = *(_QWORD *)(a1 & 0xFFFFFFFF8);
    if ((a1 & 2) != 0
      || ((v30 = *(_DWORD *)((a1 & 0xFFFFFFFF8) + 8), v30 != 0x3FFFFFFF) ? (v31 = v30 == -1) : (v31 = 1), v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v33 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v33 = v29;
      *(_DWORD *)(v33 + 8) = v30;
      v32 = 1;
      v29 = v33;
    }
    else
    {
      v32 = *(_QWORD *)(a1 & 0xFFFFFFFF8);
      v29 = 0;
    }
    v9 = v29 | v32;
  }
  while (1)
  {
    if ((v9 & 1) != 0)
    {
      v21 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      if ((v9 & 2) != 0
        || ((v22 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8), v22 != 0x3FFFFFFF) ? (v23 = v22 == -1) : (v23 = 1), v23))
      {
        v24 = 2;
      }
      else if (v22 >> 28)
      {
        v26 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
        v27 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8);
        v21 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v21 = v26;
        *(_DWORD *)(v21 + 8) = v27;
        v24 = 1;
      }
      else
      {
        v24 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
        v21 = 0;
      }
      v25 = v21 | v24;
      v10 = (_BYTE *)a2[1];
      v11 = *(_QWORD *)(*(_QWORD *)(*a2 + 3960) + 40);
      v12 = (_QWORD *)(v25 & 0xFFFFFFFF8);
      if ((v25 & 1) != 0)
      {
        v13 = 0;
        v14 = (_QWORD *)*v12;
        if (!*v12)
          goto LABEL_5;
        goto LABEL_34;
      }
    }
    else
    {
      v10 = (_BYTE *)a2[1];
      v11 = *(_QWORD *)(*(_QWORD *)(*a2 + 3960) + 40);
      v12 = (_QWORD *)(v9 & 0xFFFFFFFF8);
    }
    v13 = 1;
    v14 = v12;
    if (!v12)
      goto LABEL_5;
LABEL_34:
    v11 = v14[1];
LABEL_5:
    if ((*(_WORD *)(*(_QWORD *)(v11 + 56) + 28) & 1) != 0)
      *v10 = 0;
    if ((v13 & 1) == 0 && v12)
      WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
    v15 = (uint64_t *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 1) != 0)
      break;
    v16 = v9 & 0xFFFFFFFF8;
    if (!v15)
      return;
LABEL_10:
    v9 = *(_QWORD *)(v16 + 16);
    if ((v9 & 1) != 0)
    {
      v17 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      if ((v9 & 2) != 0
        || ((v18 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8), v18 != 0x3FFFFFFF) ? (v19 = v18 == -1) : (v19 = 1), v19))
      {
        v20 = 2;
      }
      else if (v18 >> 28)
      {
        v28 = v17;
        v17 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v17 = v28;
        *(_DWORD *)(v17 + 8) = v18;
        v20 = 1;
      }
      else
      {
        v20 = v17;
        v17 = 0;
      }
      v9 = v17 | v20;
    }
  }
  v16 = *v15;
  if (*v15)
  {
    if (v15)
      WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_10;
  }
  if (v15)
    WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::AssemblyHelpers::boxCell(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int *v12;
  _QWORD *v13;

  if (a3 == a2)
    return;
  if ((_DWORD)a2 == 63)
  {
    if (a3 != 31)
    {
      v10 = a3 & 0x1F | 0xD2800000;
      goto LABEL_7;
    }
    goto LABEL_13;
  }
  if ((_DWORD)a2 == 31 || a3 == 31)
  {
LABEL_13:
    v8 = (char)a3 | (32 * a2);
    v9 = -1862270976;
    goto LABEL_6;
  }
  v8 = a3 & 0x1F | ((a2 & 0x1F) << 16);
  v9 = -1442839584;
LABEL_6:
  v10 = v8 | v9;
LABEL_7:
  v12 = a1 + 50;
  v11 = a1[50];
  v13 = a1 + 14;
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = *v12;
  }
  *(_DWORD *)(*v13 + v11) = v10;
  *v12 += 4;
}

void JSC::AssemblyHelpers::emitFunctionEpilogue(JSC::AssemblyHelpers *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v9 = (JSC::AssemblyHelpers *)((char *)this + 56);
  v10 = *((_DWORD *)this + 50);
  if (v10 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblyHelpers *)((char *)this + 56), a2, a3, a4, a5, a6, a7, a8);
    v10 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v10) = -1862270017;
  v11 = *((_DWORD *)this + 50);
  v12 = v11 + 4;
  *((_DWORD *)this + 50) = v11 + 4;
  if ((v11 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v9, a2, a3, a4, a5, a6, a7, a8);
    v12 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v12) = -1463714819;
  *((_DWORD *)this + 50) += 4;
}

uint64_t JSC::DFG::SpeculativeJIT::compileCheckDetached(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x8_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  unsigned int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x197B80F10);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12)
    || (v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        v12 == -1))
  {
LABEL_5:
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  }
  if (!*((_BYTE *)this + 212))
    goto LABEL_13;
  v13 = *((_QWORD *)a2 + 3);
  *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v12 | 0x1000000000, *((char *)this + 272), a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 16, 0xFFFFFFFFLL, v14, v15, v16, v17, (uint64_t)&v26, v18);
  v28 = v26;
  v29 = v27;
  JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 7uLL, (JSC::DFG::Node *)(((unint64_t)v12 << 32) | 0x80000000), (JSC::DFG::Node *)(v13 & 0xFF00FFFFFFFFFFFFLL), &v28);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v19, v20, v21, v22, v23);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v12 > 15)
      v25 = -1;
    else
      v25 = v12;
    --*((_DWORD *)this + 3 * v25 + 1196);
  }
  return result;
}

double JSC::DFG::SpeculativeJIT::bail(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  double result;

  v10 = a1 + 5064;
  if (qword_1ECF4C32A | byte_1ECF4C323)
    WTF::dataLog<char [16]>("Bailing compilation.\n");
  *(_BYTE *)(v10 + 180) = 1;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(unsigned __int16 *)(a1 + 3984), 17, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a2, 16, v11, v12, v13, v14, v15);
  v23 = *(_DWORD *)(a1 + 200);
  if (v23 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v16, v17, v18, v19, v20, v21, v22);
    v23 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = -734491104;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_DWORD *)(a1 + 4004))
  {
    v24 = 0;
    v25 = 0;
    do
    {
      v26 = *(_QWORD *)(a1 + 3992) + v24;
      *(_QWORD *)v26 = 0;
      *(_QWORD *)(v26 + 8) = 0;
      *(_BYTE *)(v26 + 16) = 0;
      ++v25;
      v24 += 24;
    }
    while (v25 < *(unsigned int *)(a1 + 4004));
  }
  result = NAN;
  *(_OWORD *)(a1 + 4776) = xmmword_1991238D0;
  *(_OWORD *)(a1 + 4792) = xmmword_1991238E0;
  *(_OWORD *)(a1 + 4808) = xmmword_1991238F0;
  *(_OWORD *)(a1 + 4824) = xmmword_1991238D0;
  *(_OWORD *)(a1 + 4840) = xmmword_1991238E0;
  *(_OWORD *)(a1 + 4856) = xmmword_1991238F0;
  *(_OWORD *)(a1 + 4872) = xmmword_1991238D0;
  *(_OWORD *)(a1 + 4888) = xmmword_1991238E0;
  *(_OWORD *)(a1 + 4904) = xmmword_1991238F0;
  *(_OWORD *)(a1 + 4920) = xmmword_1991238D0;
  *(_OWORD *)(a1 + 4936) = xmmword_1991238E0;
  *(_OWORD *)(a1 + 4952) = xmmword_1991238F0;
  *(_OWORD *)(a1 + 4968) = xmmword_1991238D0;
  *(_OWORD *)(a1 + 4984) = xmmword_1991238E0;
  *(_OWORD *)(a1 + 5000) = xmmword_1991238F0;
  *(_OWORD *)(a1 + 5016) = xmmword_1991238D0;
  *(_OWORD *)(a1 + 5032) = xmmword_1991238E0;
  *(_OWORD *)(a1 + 5048) = xmmword_1991238F0;
  *(_OWORD *)v10 = xmmword_1991238D0;
  *(_OWORD *)(v10 + 16) = xmmword_1991238E0;
  *(_OWORD *)(v10 + 32) = xmmword_1991238F0;
  *(_OWORD *)(v10 + 48) = xmmword_1991238D0;
  *(_OWORD *)(v10 + 64) = xmmword_1991238E0;
  *(_OWORD *)(v10 + 80) = xmmword_1991238F0;
  *(_OWORD *)(v10 + 96) = xmmword_1991238D0;
  *(_OWORD *)(v10 + 112) = xmmword_1991238E0;
  *(_OWORD *)(v10 + 128) = xmmword_1991238F0;
  *(_OWORD *)(v10 + 144) = xmmword_1991238D0;
  *(_OWORD *)(v10 + 160) = xmmword_1991238E0;
  *(_DWORD *)(a1 + 5240) = 0;
  return result;
}

double JSC::DFG::SpeculativeJIT::compileCurrentBlock(JSC::DFG::SpeculativeJIT *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::AssemblerBuffer *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *casual;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  unsigned int v82;
  unint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  BOOL v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  char v98;
  int v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  BOOL v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unint64_t *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v135;
  uint64_t v136;
  unint64_t v138;
  uint64_t v139;
  int v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t *v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  int32x2_t *v154;
  unsigned int v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t *v178;
  JSC::DFG::SpeculativeJIT *v179;
  unsigned int v180;
  _QWORD *v181;
  _QWORD *v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t *v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t *v212;
  uint64_t v213;
  unint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  int v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  unint64_t v232;
  unsigned int v233;
  uint64_t v234;
  WTF::AtomStringImpl *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  WTF::StringImpl *v242;
  int v243;
  int v244;
  int v245;
  WTF::StringImpl *v246;
  JSC::JITSizeStatistics *v247;
  WTF::AtomStringImpl *v248;
  uint64_t v249;
  uint64_t v250;
  BOOL v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  BOOL v255;
  uint64_t v256;
  char v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  void *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  void *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  BOOL v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  unsigned int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v334;
  _QWORD *v335;
  WTF::StringImpl *v336;
  int v337;
  WTF::StringImpl *v338;
  __int128 v339;
  __int128 v340;
  uint64_t v341;

  v341 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)this + 496);
  if (!v8)
    return *(double *)&v80;
  v10 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  v11 = *((_DWORD *)this + 50);
  if (v11 < *((_DWORD *)this + 13))
  {
    do
    {
      if ((v11 + 4) > *((_DWORD *)this + 48))
      {
        *(_QWORD *)&v80 = JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8).n128_u64[0];
        v11 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v11) = -721215457;
      v11 = *((_DWORD *)this + 50) + 4;
      *((_DWORD *)this + 50) = v11;
    }
    while (v11 < *((_DWORD *)this + 13));
    v8 = *((_QWORD *)this + 496);
  }
  *((_DWORD *)this + 52) = 0;
  v12 = *(unsigned int *)(v8 + 8);
  if (*((_DWORD *)this + 101) <= v12)
  {
    __break(0xC471u);
    JUMPOUT(0x197B81790);
  }
  *(_DWORD *)(*((_QWORD *)this + 49) + 4 * v12) = v11;
  if (!*(_BYTE *)(v8 + 18))
  {
    v70 = *((_DWORD *)this + 50);
    if (v70 + 4 > *((_DWORD *)this + 48))
    {
      *(_QWORD *)&v80 = JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8).n128_u64[0];
      v70 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v70) = 1384127376;
    v71 = *((_DWORD *)this + 50);
    v72 = v71 + 4;
    *((_DWORD *)this + 50) = v71 + 4;
    if ((v71 + 8) > *((_DWORD *)this + 48))
    {
      *(_QWORD *)&v80 = JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8).n128_u64[0];
      v72 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v72) = -734491104;
    *((_DWORD *)this + 50) += 4;
    return *(double *)&v80;
  }
  if (*(_BYTE *)(v8 + 20))
  {
    JSC::MacroAssemblerARM64::add64((uint64_t)this, 16- ((8 * (*(_DWORD *)(*((_QWORD *)this + 495) + 856) + *(_DWORD *)(*((_QWORD *)this + 495) + 860)) + 24) & 0xFFFFFFF0), 29, 31, a5, a6, a7, a8);
    JSC::DFG::JITCompiler::compileSetupRegistersForEntry(this, v73, v74, v75, v76, v77, v78, v79);
  }
  v13 = (_QWORD *)((char *)this + 5632);
  LODWORD(v340) = 0;
  *(_QWORD *)((char *)&v340 + 4) = 0x3FFFFFFFLL;
  WORD6(v340) = 0;
  v14 = *((unsigned int *)this + 1411);
  if ((_DWORD)v14 == *((_DWORD *)this + 1410))
  {
    v62 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 5632, v14 + 1, (unint64_t)&v340, a4, a5, a6, a7, a8);
    v15 = (_QWORD *)(*((_QWORD *)this + 704) + 14 * *((unsigned int *)this + 1411));
    v16 = *v62;
    v17 = *(uint64_t *)((char *)v62 + 6);
  }
  else
  {
    v15 = (_QWORD *)(*v13 + 14 * v14);
    v16 = v340;
    v17 = *(_QWORD *)((char *)&v340 + 6);
  }
  *(_QWORD *)((char *)v15 + 6) = v17;
  *v15 = v16;
  ++*((_DWORD *)this + 1411);
  *((_QWORD *)this + 696) = 0;
  *((_BYTE *)this + 5576) = 0;
  *((_BYTE *)this + 5588) = 0;
  *((_BYTE *)this + 5578) = 0;
  v18 = *((_QWORD *)this + 496);
  v19 = (_DWORD *)*((_QWORD *)this + 688);
  v20 = v19 + 2;
  v21 = *(unsigned int *)(*(_QWORD *)v19 + 1044);
  v22 = v19[5];
  if (v22 < v21)
  {
    if (v19[4] < v21)
      WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v19 + 2), (void *)*(unsigned int *)(*(_QWORD *)v19 + 1044), a3, a4, a5, a6, a7, a8);
    if (*v20)
      bzero((void *)(*v20 + 32 * v19[5]), 32 * v21 - 32 * v19[5]);
  }
  else if ((_DWORD)v22 != (_DWORD)v21)
  {
    v23 = (_QWORD *)(*v20 + 32 * v21);
    v24 = 32 * v22 - 32 * v21;
    do
    {
      if ((*v23 & 1) != 0)
        WTF::fastFree(*v23 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
      v23 += 4;
      v24 -= 32;
    }
    while (v24);
  }
  v19[5] = v21;
  if (*(_DWORD *)(*(_QWORD *)v19 + 944) == 2)
  {
    v48 = v19 + 6;
    v49 = *(unsigned int *)(*(_QWORD *)v19 + 1044);
    v50 = v19[9];
    if (v50 < v49)
    {
      if (v19[8] < v49)
        WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v19 + 6), (void *)*(unsigned int *)(*(_QWORD *)v19 + 1044), a3, a4, a5, a6, a7, a8);
      if (*v48)
        bzero((void *)(*v48 + 32 * v19[9]), 32 * v49 - 32 * v19[9]);
    }
    else if ((_DWORD)v50 != (_DWORD)v49)
    {
      v51 = (_QWORD *)(*v48 + 32 * v49);
      v52 = 32 * v50 - 32 * v49;
      do
      {
        if ((*v51 & 1) != 0)
          WTF::fastFree(*v51 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
        v51 += 4;
        v52 -= 32;
      }
      while (v52);
    }
    v19[9] = v49;
  }
  if (*(_BYTE *)(v18 + 12))
    v25 = 2;
  else
    v25 = 3;
  *((_DWORD *)this + 1395) = v25;
  *((_DWORD *)this + 1396) = v25;
  *((_QWORD *)this + 696) = v18;
  v26 = *((unsigned int *)this + 1381);
  v27 = *((_QWORD *)this + 695);
  if (v27 < v26)
    v26 = *((_QWORD *)this + 695);
  if (v26 > 0x1F)
  {
    v30 = v26 & 0xFFFFFFE0;
    v31 = (char *)*((_QWORD *)this + 694);
    if (v30 < v26)
    {
      do
      {
        *(_DWORD *)&v31[(v30 >> 3) & 0x1FFFFFFFFFFFFFFCLL] &= ~(1 << v30);
        ++v30;
      }
      while (v26 != v30);
    }
    bzero(v31, (v26 >> 3) & 0x1FFFFFFC);
  }
  else if (v26)
  {
    v28 = 0;
    v29 = *((_QWORD *)this + 694);
    do
    {
      *(_DWORD *)(v29 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) &= ~(1 << v28);
      ++v28;
    }
    while (v26 != v28);
  }
  v32 = *((unsigned int *)this + 1381);
  if (v27 < v32)
  {
    v53 = v27 + 31;
    v54 = v32 + 31;
    if (((v32 + 31) ^ (v27 + 31)) < 0x20)
    {
LABEL_78:
      *((_QWORD *)this + 695) = v32;
      goto LABEL_30;
    }
    v55 = v54 >> 5;
    if (v54 >> 5 < v53 >> 5)
    {
      __break(0xC471u);
      goto LABEL_426;
    }
    v56 = v53 >> 5;
    v57 = 4 * v55;
    v58 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v58)
      goto LABEL_65;
    v59 = (unint64_t)(v57 + 15) >> 4;
    if (v32 <= 0xD00)
    {
      v60 = 23 * v59 + 7;
    }
    else if (v32 > 0x13880
           || (v60 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v59 + 626),
               *(_DWORD *)(v58 + 8052) <= v60))
    {
LABEL_65:
      casual = (char *)bmalloc_allocate_casual(v57, 1);
LABEL_75:
      memcpy(casual, *((const void **)this + 694), 4 * v56);
      bzero(&casual[4 * v56], 4 * (v55 - v56));
      v66 = *((_QWORD *)this + 694);
      if (v66)
        WTF::fastFree(v66, (void *)a2, a3, a4, a5, a6, a7, a8);
      *((_QWORD *)this + 694) = casual;
      goto LABEL_78;
    }
    v63 = v58 + 8 * v60;
    v64 = v63 + 8064;
    *(_BYTE *)(v63 + 8064) = 1;
    v65 = *(unsigned int *)(v63 + 8080);
    if ((_DWORD)v65)
    {
      *(_DWORD *)(v64 + 16) = v65 - *(_DWORD *)(v64 + 20);
      casual = (char *)(*(_QWORD *)(v64 + 8) - v65);
    }
    else
    {
      v67 = *(_QWORD *)(v64 + 40);
      v68 = *(_QWORD *)(v64 + 24);
      if (!v67)
      {
        if (*(_BYTE *)(v64 + 5) == 6)
        {
          v81 = *(unsigned int *)(v64 + 32);
          v82 = *(_DWORD *)(v64 + 36);
          if (v81 < v82)
          {
            *(_QWORD *)(v64 + 8 * v81 + 56) = 0;
            v83 = (unint64_t *)(8 * v60 + 8 * v81 + v58 + 8128);
            v84 = v82 - 1 - v81;
            while (v84)
            {
              v68 += 1024;
              v86 = *v83++;
              v85 = v86;
              LODWORD(v81) = v81 + 1;
              --v84;
              if (v86)
              {
                v67 = __rbit64(v85);
                *(_DWORD *)(v64 + 32) = v81;
                *(_QWORD *)(v64 + 24) = v68;
                goto LABEL_80;
              }
            }
            *(_DWORD *)(v64 + 32) = v82;
          }
        }
        *(_BYTE *)v64 = 0;
        goto LABEL_65;
      }
LABEL_80:
      v69 = __clz(v67);
      *(_QWORD *)(v64 + 40) = v67 & ~(0x8000000000000000 >> v69);
      casual = (char *)(v68 + 16 * v69);
    }
    *(_BYTE *)v64 = 0;
    goto LABEL_75;
  }
LABEL_30:
  if (*(_DWORD *)(*((_QWORD *)this + 687) + 944) == 2)
  {
    v34 = *(_QWORD *)(v18 + 200);
    v35 = *(unsigned int *)(v34 + 108);
    if ((_DWORD)v35)
    {
      v36 = *(_QWORD *)(v34 + 96) + 8;
      for (i = 40 * v35; i; i -= 40)
      {
        v38 = *(_QWORD *)(v36 - 8);
        if (v38)
        {
          v39 = v38 & 0xFFFFFFFFFFFFFFFELL;
          if ((v38 & 1) == 0)
          {
            v40 = (_QWORD *)(*((_QWORD *)this + 688) + 8);
LABEL_38:
            v41 = *v40 + 32 * *(unsigned int *)(v39 + 20);
            v42 = *(_QWORD *)v41;
            if (v36 != v41)
            {
              if ((v42 & 1) != 0)
                WTF::fastFree(v42 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
              v43 = *(_QWORD *)v36;
              if ((*(_QWORD *)v36 & 1) == 0 || v43 == 4)
              {
                v44 = v43 & 0xFFFFFFFFFFFFFFFDLL;
                v42 = v43 | 2;
                if ((*(_BYTE *)v41 & 2) == 0)
                  v42 = v44;
                *(_QWORD *)v41 = v42;
              }
              else
              {
                WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v41, (_QWORD *)v36);
                v42 = *(_QWORD *)v41;
              }
            }
            v45 = v42 & 0xFFFFFFFFFFFFFFFDLL;
            v46 = v42 | 2;
            if ((*(_BYTE *)v36 & 2) == 0)
              v46 = v45;
            *(_QWORD *)v41 = v46;
            v47 = *(_QWORD *)(v36 + 24);
            v80 = *(_OWORD *)(v36 + 8);
            *(_OWORD *)(v41 + 8) = v80;
            *(_QWORD *)(v41 + 24) = v47;
            *(_DWORD *)(v41 + 20) = v25;
            goto LABEL_48;
          }
          if (*(_WORD *)(v39 + 18) == 27)
          {
            v40 = (_QWORD *)(*((_QWORD *)this + 688) + 24);
            goto LABEL_38;
          }
        }
LABEL_48:
        v36 += 40;
      }
    }
  }
  *(_WORD *)(v18 + 15) = 1;
  *((_BYTE *)this + 5576) = 1;
  *((_BYTE *)this + 5588) = 0;
  *((_BYTE *)this + 5578) = *(_BYTE *)(v18 + 12);
  v33 = *(unsigned int *)(*((_QWORD *)this + 496) + 84);
  if ((_DWORD)v33)
  {
    while (1)
    {
      --v33;
      v89 = *((_QWORD *)this + 496);
      v90 = *(unsigned int *)(v89 + 88);
      if (v33 < v90)
      {
        v87 = v33 + 5;
        v88 = (v33 + 5) >> 31;
        a2 = *(_QWORD *)(*(_QWORD *)(v89 + 72) + 8 * v33);
        if (a2)
          goto LABEL_115;
LABEL_107:
        if (!v33)
          break;
      }
      else
      {
        v91 = *(unsigned int *)(v89 + 92) + v90;
        v92 = v33 - v91;
        v87 = v90 + ~(_DWORD)v33;
        v93 = v33 >= v91;
        if (v33 < v91)
          v88 = v87 >> 31;
        else
          v88 = 2;
        if (v93)
          v87 = v92;
        a2 = *(_QWORD *)(*(_QWORD *)(v89 + 72) + 8 * v33);
        if (!a2)
          goto LABEL_107;
LABEL_115:
        v94 = v88 << 32;
        v95 = *(_QWORD **)(a2 + 72);
        v96 = v95;
        do
        {
          v97 = v96;
          v96 = (_QWORD *)*v96;
        }
        while (v96);
        if (v97 != v95)
          *v95 = v97;
        if (!*(_DWORD *)(a2 + 52))
          goto LABEL_107;
        if (*((_BYTE *)v97 + 40) || !*((_BYTE *)v97 + 43))
          goto LABEL_122;
        if (*((_DWORD *)v97 + 14) == 1)
        {
          v98 = 4;
          goto LABEL_123;
        }
        v104 = v97;
        do
        {
          v105 = v104;
          v104 = (_QWORD *)*v104;
        }
        while (v104);
        if (v105 != v97)
          *v97 = v105;
        v106 = v105[2];
        if (!v106)
        {
LABEL_122:
          v98 = 16;
          goto LABEL_123;
        }
        if ((v106 & 0xFFFFFFFCFFFFFFFFLL) != 0)
        {
          if (*((_DWORD *)v97 + 7))
          {
            v107 = v97;
            do
            {
              v108 = v107;
              v107 = (_QWORD *)*v107;
            }
            while (v107);
            if (v108 != v97)
              *v97 = v108;
            v109 = v108[2];
            v110 = v109 && (v109 & 0xFFFFFFF0FFFFFFFFLL) == 0;
            if (v110)
            {
              v98 = 2;
              goto LABEL_123;
            }
          }
          if ((v106 & 0x2800FFFFFFF7) == 0 || (v106 & 0xFFFFD7FF00000008) != 0)
          {
            if (v106 == 0x10000000000)
              v98 = 5;
            else
              v98 = 16;
LABEL_123:
            if (!(_DWORD)v88)
              goto LABEL_124;
            goto LABEL_125;
          }
          v98 = 6;
          if (!(_DWORD)v88)
            goto LABEL_124;
        }
        else
        {
          v98 = 1;
          if (!(_DWORD)v88)
          {
LABEL_124:
            if (v87 <= 4)
            {
              JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 495), (JSC::DFG::Node *)a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x9CF, "void JSC::DFG::SpeculativeJIT::compileCurrentBlock()", "!operand.isArgument() || operand.virtualRegister().toArgument() >= 0");
              __break(0xC471u);
              JUMPOUT(0x197B82794);
            }
          }
        }
LABEL_125:
        v99 = *((_DWORD *)v97 + 8);
        BYTE12(v340) = 8;
        BYTE13(v340) = v98;
        LODWORD(v340) = v99;
        *(_QWORD *)((char *)&v340 + 4) = v94 | v87;
        v100 = *((unsigned int *)this + 1411);
        if ((_DWORD)v100 == *((_DWORD *)this + 1410))
        {
          v111 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 5632, v100 + 1, (unint64_t)&v340, a4, a5, a6, a7, a8);
          v101 = (_QWORD *)(*((_QWORD *)this + 704) + 14 * *((unsigned int *)this + 1411));
          v102 = *v111;
          v103 = *(uint64_t *)((char *)v111 + 6);
        }
        else
        {
          v101 = (_QWORD *)(*v13 + 14 * v100);
          v102 = v340;
          v103 = *(_QWORD *)((char *)&v340 + 6);
        }
        *(_QWORD *)((char *)v101 + 6) = v103;
        *v101 = v102;
        ++*((_DWORD *)this + 1411);
        if (!v33)
          break;
      }
    }
  }
  v112 = *((_QWORD *)this + 684);
  if ((v112 & 1) != 0 && (v112 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v112 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this + 684) = 2;
  v113 = *((_QWORD *)this + 685);
  if ((v113 & 1) != 0 && (v113 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v113 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this + 685) = 2;
  *((_WORD *)this + 2744) = 0;
  v114 = *((_QWORD *)this + 496);
  if (!(_BYTE)word_1ECF4C630)
    goto LABEL_158;
  v292 = *(unsigned int *)(v114 + 52);
  if ((_DWORD)v292)
  {
    if (*(_BYTE *)(v114 + 19))
      v293 = 1;
    else
      v293 = *(_BYTE *)(v114 + 20) != 0;
    LOBYTE(v338) = v293;
    *(_QWORD *)&v339 = &v338;
    v294 = *(_QWORD *)(v114 + 40);
    v295 = v294 + 8 * v292;
    do
    {
      v296 = *(unsigned int *)(*(_QWORD *)v294 + 220);
      if ((_DWORD)v296)
      {
        v297 = 8 * v296;
        while (1)
        {
          v298 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v294 + 208) - 8 + v297);
          v299 = *(unsigned __int16 *)(v298 + 18);
          if ((v299 - 364) < 0xC)
            break;
          if ((v299 - 28) < 2 || (v299 - 23) <= 2)
          {
            v297 -= 8;
            if (v297)
              continue;
          }
          goto LABEL_402;
        }
      }
      else
      {
LABEL_402:
        v298 = 0;
      }
      if (*(_WORD *)(v298 + 18) == 365)
        v298 = *(_QWORD *)(v298 + 24) & 0xFF00FFFFFFFFFFFFLL;
      JSC::DFG::clobberize<JSC::DFG::SpeculativeJIT::compileCurrentBlock(void)::$_1,JSC::DFG::SpeculativeJIT::compileCurrentBlock(void)::$_2,JSC::DFG::SpeculativeJIT::compileCurrentBlock(void)::$_3,JSC::DFG::SpeculativeJIT::compileCurrentBlock(void)::$_0>(*((_QWORD *)this + 495), (JSC::DFG::Node *)v298, (_BYTE **)&v339, a4, a5, a6, a7, a8);
      v294 += 8;
    }
    while (v294 != v295);
    if (!(_BYTE)v338)
    {
      JSC::MacroAssemblerARM64::branchTest8((uint64_t)this, 0, *(_QWORD *)(*((_QWORD *)this + 44) + 16) + 93120, -1, a5, a6, a7, a8, (uint64_t)&v340);
      JSC::MacroAssemblerARM64::breakpoint(this, 50289, v321, v322, v323, v324, v325, v326);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v340, (uint64_t)this, v327, v328, v329, v330, v331, v332);
      goto LABEL_410;
    }
  }
  else
  {
    LOBYTE(v338) = 1;
  }
  JSC::MacroAssemblerARM64::store8((uint64_t)this, 0, *(_QWORD *)(*((_QWORD *)this + 44) + 16) + 93120, a4, a5, a6, a7, a8);
LABEL_410:
  v114 = *((_QWORD *)this + 496);
LABEL_158:
  *((_DWORD *)this + 997) = 0;
  if (!*(_DWORD *)(v114 + 220))
    return *(double *)&v80;
  v115 = 0;
  v116 = (unint64_t *)((char *)this + 5472);
  while (1)
  {
    v117 = *(_QWORD *)(*(_QWORD *)(v114 + 208) + 8 * v115);
    *((_QWORD *)this + 497) = v117;
    if (!*((_BYTE *)this + 5576))
    {
      v179 = this;
      v180 = 161;
      goto LABEL_243;
    }
    *(_BYTE *)(*((_QWORD *)this + 702) + 81) = 0;
    v118 = *(_QWORD *)(v117 + 24);
    if ((*(_BYTE *)(v117 + 56) & 0x10) != 0)
    {
      if (*(_DWORD *)(v117 + 32) + (int)v118 > v118)
      {
        v162 = *((_QWORD *)this + 700);
        v163 = *(_QWORD *)(v117 + 24);
        do
        {
          if (v163 >= *(unsigned int *)(v162 + 164))
          {
            __break(0xC471u);
            JUMPOUT(0x197B828F4);
          }
          v164 = *(_QWORD *)(v162 + 152);
          v165 = *(_QWORD *)(v164 + 8 * v163);
          if ((v165 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v166 = (v165 >> 50) & 0x3F;
            if (v166 <= 0x34 && ((1 << v166) & 0x12400001800284) != 0)
            {
              v204 = v166 - 2;
              if (v204 >= 0x33)
              {
                __break(0xC471u);
                JUMPOUT(0x197B828ACLL);
              }
              a3 = qword_199123C88[v204];
              v205 = *((_QWORD *)this + 702);
              v206 = *(_QWORD *)(v205 + 8);
              v207 = *(unsigned int *)((v165 & 0xFF00FFFFFFFFFFFELL) + 0x14);
              v208 = (uint64_t *)(v206 + 24);
              v209 = (uint64_t *)(v206 + 8);
              if ((v165 & 1) != 0)
                v209 = v208;
              v210 = *v209;
              v211 = (_QWORD *)(*v209 + 32 * v207);
              v212 = v211 + 1;
              v213 = v211[1];
              if ((v213 & ~a3) != 0)
              {
                *(_QWORD *)(v164 + 8 * v163) = v165 & 0xFFFEFFFFFFFFFFFFLL;
                a2 = *(unsigned int *)(v205 + 88);
                if ((v213 & 0x2800FFFFFFF7) != 0)
                {
                  JSC::DFG::AbstractValue::fastForwardToAndFilterSlow((uint64_t)v211, (void *)a2, a3, a4, a5, a6, a7, a8);
                }
                else
                {
                  v334 = v210;
                  v335 = v211;
                  v289 = v210 + 32 * v207;
                  *(_DWORD *)(v289 + 20) = a2;
                  *v212 = v213 & a3;
                  if ((v213 & a3) == 0)
                  {
                    *v212 = 0;
                    *(_DWORD *)(v289 + 16) = 0;
                    if ((*v211 & 1) != 0)
                      WTF::fastFree(*v211 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
                    *v335 = 0;
                    *(_QWORD *)(v334 + 32 * v207 + 24) = 0;
                  }
                }
              }
              else
              {
                *(_QWORD *)(v164 + 8 * v163) = v165 | 0x1000000000000;
              }
            }
          }
          ++v163;
        }
        while (v163 < (*(_DWORD *)(v117 + 32) + *(_DWORD *)(v117 + 24)));
      }
    }
    else if ((v118 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v133 = (v118 >> 50) & 0x3F;
      if (v133 <= 0x34 && ((1 << v133) & 0x12400001800284) != 0)
      {
        v168 = v133 - 2;
        if (v168 >= 0x33)
          goto LABEL_417;
        a3 = qword_199123C88[v168];
        v169 = *((_QWORD *)this + 702);
        v170 = *(_QWORD *)(v169 + 8);
        v171 = *(unsigned int *)((v118 & 0xFF00FFFFFFFFFFFELL) + 0x14);
        v172 = (uint64_t *)(v170 + 24);
        v173 = (uint64_t *)(v170 + 8);
        if ((v118 & 1) != 0)
          v173 = v172;
        v174 = *v173;
        v175 = (_QWORD *)(*v173 + 32 * v171);
        v176 = v175 + 1;
        v177 = v175[1];
        if ((v177 & ~a3) != 0)
        {
          *(_QWORD *)(v117 + 24) = v118 & 0xFFFEFFFFFFFFFFFFLL;
          a2 = *(unsigned int *)(v169 + 88);
          if ((v177 & 0x2800FFFFFFF7) != 0)
          {
            JSC::DFG::AbstractValue::fastForwardToAndFilterSlow((uint64_t)v175, (void *)a2, a3, a4, a5, a6, a7, a8);
          }
          else
          {
            v286 = v174 + 32 * v171;
            *(_DWORD *)(v286 + 20) = a2;
            *v176 = v177 & a3;
            if ((v177 & a3) == 0)
            {
              *v176 = 0;
              *(_DWORD *)(v286 + 16) = 0;
              if ((*v175 & 1) != 0)
                WTF::fastFree(*v175 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
              *v175 = 0;
              *(_QWORD *)(v174 + 32 * v171 + 24) = 0;
            }
          }
        }
        else
        {
          *(_QWORD *)(v117 + 24) = v118 | 0x1000000000000;
        }
      }
      v135 = *(_QWORD *)(v117 + 32);
      if ((v135 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v136 = (v135 >> 50) & 0x3F;
        if (v136 <= 0x34 && ((1 << v136) & 0x12400001800284) != 0)
        {
          v184 = v136 - 2;
          if (v184 > 0x32)
            goto LABEL_417;
          a3 = qword_199123C88[v184];
          v185 = *((_QWORD *)this + 702);
          v186 = *(_QWORD *)(v185 + 8);
          v187 = *(unsigned int *)((v135 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v188 = (uint64_t *)(v186 + 8);
          v189 = (uint64_t *)(v186 + 24);
          if ((v135 & 1) == 0)
            v189 = v188;
          v190 = *v189;
          v191 = (_QWORD *)(*v189 + 32 * v187);
          v192 = v191 + 1;
          v193 = v191[1];
          if ((v193 & ~a3) != 0)
          {
            *(_QWORD *)(v117 + 32) = v135 & 0xFFFEFFFFFFFFFFFFLL;
            a2 = *(unsigned int *)(v185 + 88);
            if ((v193 & 0x2800FFFFFFF7) != 0)
            {
              JSC::DFG::AbstractValue::fastForwardToAndFilterSlow((uint64_t)v191, (void *)a2, a3, a4, a5, a6, a7, a8);
            }
            else
            {
              v287 = v190 + 32 * v187;
              *(_DWORD *)(v287 + 20) = a2;
              *v192 = v193 & a3;
              if ((v193 & a3) == 0)
              {
                *v192 = 0;
                *(_DWORD *)(v287 + 16) = 0;
                if ((*v191 & 1) != 0)
                  WTF::fastFree(*v191 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
                *v191 = 0;
                *(_QWORD *)(v190 + 32 * v187 + 24) = 0;
              }
            }
          }
          else
          {
            *(_QWORD *)(v117 + 32) = v135 | 0x1000000000000;
          }
        }
        v138 = *(_QWORD *)(v117 + 40);
        if ((v138 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v139 = (v138 >> 50) & 0x3F;
          if (v139 <= 0x34 && ((1 << v139) & 0x12400001800284) != 0)
          {
            v194 = v139 - 2;
            if (v194 > 0x32)
            {
LABEL_417:
              __break(0xC471u);
              JUMPOUT(0x197B8283CLL);
            }
            a3 = qword_199123C88[v194];
            v195 = *((_QWORD *)this + 702);
            v196 = *(_QWORD *)(v195 + 8);
            v197 = *(unsigned int *)((v138 & 0xFF00FFFFFFFFFFFELL) + 0x14);
            v198 = (uint64_t *)(v196 + 8);
            v199 = (uint64_t *)(v196 + 24);
            if ((v138 & 1) == 0)
              v199 = v198;
            v200 = *v199;
            v201 = (_QWORD *)(*v199 + 32 * v197);
            v202 = v201 + 1;
            v203 = v201[1];
            if ((v203 & ~a3) != 0)
            {
              *(_QWORD *)(v117 + 40) = v138 & 0xFFFEFFFFFFFFFFFFLL;
              a2 = *(unsigned int *)(v195 + 88);
              if ((v203 & 0x2800FFFFFFF7) != 0)
              {
                JSC::DFG::AbstractValue::fastForwardToAndFilterSlow((uint64_t)v201, (void *)a2, a3, a4, a5, a6, a7, a8);
              }
              else
              {
                v288 = v200 + 32 * v197;
                *(_DWORD *)(v288 + 20) = a2;
                *v202 = v203 & a3;
                if ((v203 & a3) == 0)
                {
                  *v202 = 0;
                  *(_DWORD *)(v288 + 16) = 0;
                  if ((*v201 & 1) != 0)
                    WTF::fastFree(*v201 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
                  *v201 = 0;
                  *(_QWORD *)(v200 + 32 * v197 + 24) = 0;
                }
              }
            }
            else
            {
              *(_QWORD *)(v117 + 40) = v138 | 0x1000000000000;
            }
          }
        }
      }
    }
    v119 = *((_QWORD *)this + 497);
    v120 = *((_QWORD *)this + 45);
    if (v120)
    {
      v215 = *((_DWORD *)this + 50);
      v218 = *(_QWORD *)(v120 + 56);
      v217 = (uint64_t *)(v120 + 56);
      v216 = v218;
      if (v218
        || (WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v217, 8u), (v216 = *v217) != 0))
      {
        v219 = *(_DWORD *)(v216 - 8);
      }
      else
      {
        v219 = 0;
      }
      v220 = (~(v119 << 32) + v119) ^ ((unint64_t)(~(v119 << 32) + v119) >> 22);
      v221 = 9 * ((v220 + ~(v220 << 13)) ^ ((v220 + ~(v220 << 13)) >> 8));
      v222 = (v221 ^ (v221 >> 15)) + ~((v221 ^ (v221 >> 15)) << 27);
      v223 = v219 & ((v222 >> 31) ^ v222);
      a3 = v216 + 16 * v223;
      v224 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
      {
        v225 = 0;
        v226 = 1;
        while (v224 != v119)
        {
          if (v224 == -1)
            v225 = a3;
          v223 = (v223 + v226) & v219;
          a3 = v216 + 16 * v223;
          v224 = *(_QWORD *)a3;
          ++v226;
          if (!*(_QWORD *)a3)
          {
            if (v225)
            {
              *(_QWORD *)v225 = 0;
              *(_DWORD *)(v225 + 8) = -1;
              --*(_DWORD *)(*v217 - 16);
              a3 = v225;
            }
            goto LABEL_293;
          }
        }
        goto LABEL_302;
      }
LABEL_293:
      *(_QWORD *)a3 = v119;
      *(_DWORD *)(a3 + 8) = v215;
      v227 = *v217;
      if (*v217)
        v228 = *(_DWORD *)(v227 - 12) + 1;
      else
        v228 = 1;
      *(_DWORD *)(v227 - 12) = v228;
      v229 = *v217;
      if (*v217)
        v230 = *(_DWORD *)(v229 - 12);
      else
        v230 = 0;
      v231 = (*(_DWORD *)(v229 - 16) + v230);
      v232 = *(unsigned int *)(v229 - 4);
      if (v232 > 0x400)
      {
        if (v232 > 2 * v231)
          goto LABEL_302;
      }
      else
      {
        if (3 * v232 > 4 * v231)
        {
LABEL_302:
          v119 = *((_QWORD *)this + 497);
          goto LABEL_164;
        }
        if (!(_DWORD)v232)
        {
          v233 = 8;
          goto LABEL_301;
        }
      }
      v233 = (_DWORD)v232 << (6 * *(_DWORD *)(v229 - 12) >= (2 * v232));
LABEL_301:
      WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v217, v233);
      goto LABEL_302;
    }
LABEL_164:
    v121 = (char *)this + 5472;
    if (v116 != (unint64_t *)v119)
    {
      v122 = *v116;
      if ((*v116 & 1) != 0 && (v122 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v122 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
      v123 = *(_QWORD *)v119;
      if ((*(_QWORD *)v119 & 1) != 0)
      {
        v249 = *(_QWORD *)(v123 & 0xFFFFFFFF8);
        if ((v123 & 2) != 0
          || ((v250 = *(unsigned int *)((v123 & 0xFFFFFFFF8) + 8), (_DWORD)v250 != 0x3FFFFFFF)
            ? (v251 = (_DWORD)v250 == -1)
            : (v251 = 1),
              v251))
        {
          v252 = 2;
        }
        else if (v250 >> 28)
        {
          v290 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v290 = v249;
          *(_DWORD *)(v290 + 8) = v250;
          v252 = 1;
          v249 = v290;
        }
        else
        {
          v252 = *(_QWORD *)(v123 & 0xFFFFFFFF8);
          v249 = v250 << 36;
        }
        v123 = v249 | v252;
      }
      *((_QWORD *)this + 684) = v123;
      v124 = *((_QWORD *)this + 685);
      if ((v124 & 1) != 0 && (v124 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v124 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
      v125 = *(_QWORD *)(v119 + 8);
      if ((v125 & 1) != 0)
      {
        v253 = *(_QWORD *)(v125 & 0xFFFFFFFF8);
        if ((v125 & 2) != 0
          || ((v254 = *(unsigned int *)((v125 & 0xFFFFFFFF8) + 8), (_DWORD)v254 != 0x3FFFFFFF)
            ? (v255 = (_DWORD)v254 == -1)
            : (v255 = 1),
              v255))
        {
          v256 = 2;
        }
        else if (v254 >> 28)
        {
          v291 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v291 = v253;
          *(_DWORD *)(v291 + 8) = v254;
          v256 = 1;
          v253 = v291;
        }
        else
        {
          v256 = *(_QWORD *)(v125 & 0xFFFFFFFF8);
          v253 = v254 << 36;
        }
        v125 = v253 | v256;
      }
      *((_QWORD *)this + 685) = v125;
      v121 = (char *)*((_QWORD *)this + 497);
    }
    *((_WORD *)this + 2744) = *(_WORD *)(v119 + 16);
    *((_WORD *)this + 1992) = *((_WORD *)v121 + 9);
    if (qword_1ECF4C32A | byte_1ECF4C323)
    {
      LODWORD(v340) = *((_DWORD *)v121 + 5);
      v214 = *(_QWORD *)v121;
      if ((v214 & 2) != 0)
      {
        LODWORD(v214) = -1;
      }
      else if ((v214 & 1) != 0)
      {
        LODWORD(v214) = *(_DWORD *)((v214 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v214 >>= 36;
      }
      LODWORD(v339) = v214 >> 2;
      LODWORD(v338) = *((_DWORD *)this + 50);
      WTF::dataLog<char [33],int,char [3],unsigned int,char [19],unsigned int,char [2]>(&v340, &v339, &v338);
    }
    if (byte_1ECF4C628
      && (JSC::DFG::mayExit(*((JSC::DFG **)this + 495), *((JSC::DFG::Graph **)this + 497), (JSC::DFG::Node *)a3)|| *(unsigned __int16 *)(*((_QWORD *)this + 497) + 18) - 364 <= 0xB))
    {
      JSC::AssemblyHelpers::jitReleaseAssertNoException(this, *(JSC::VM **)(*((_QWORD *)this + 44) + 16), v300, a4, a5, a6, a7, a8);
    }
    if (!*((_BYTE *)this + 3952))
      goto LABEL_205;
    v126 = *((_DWORD *)this + 50);
    v127 = *((unsigned int *)this + 987);
    if ((_DWORD)v127)
    {
      v128 = *((_QWORD *)this + 492) + 16 * (v127 - 1);
      if (*(_DWORD *)(v128 + 4) == v126)
        goto LABEL_205;
      *(_DWORD *)(v128 + 4) = v126;
      v129 = *(_QWORD *)(v128 + 8);
      v130 = *v116;
      if (v129 == *v116)
        goto LABEL_205;
      if ((v129 & 2) != 0)
      {
        if ((v130 & 2) != 0)
          goto LABEL_248;
        LODWORD(v131) = -1;
      }
      else
      {
        if ((v129 & 1) != 0)
          LODWORD(v131) = *(_DWORD *)((v129 & 0xFFFFFFFF8) + 8);
        else
          v131 = v129 >> 36;
        if ((v130 & 2) != 0)
        {
          if ((_DWORD)v131 != -1)
            goto LABEL_205;
LABEL_248:
          v257 = 0;
LABEL_249:
          v181 = (_QWORD *)(v129 & 0xFFFFFFFF8);
          if ((v129 & 1) != 0)
            v181 = (_QWORD *)*v181;
          v182 = (_QWORD *)(v130 & 0xFFFFFFFF8);
          if ((v130 & 1) != 0)
            v182 = (_QWORD *)*v182;
          v110 = v181 == v182;
          v183 = v257 ^ 1;
          if (v110)
            v183 = 1;
          if ((v183 & 1) != 0)
            goto LABEL_205;
          goto LABEL_202;
        }
      }
      if ((v130 & 1) != 0)
        LODWORD(v132) = *(_DWORD *)((v130 & 0xFFFFFFFF8) + 8);
      else
        v132 = v130 >> 36;
      if ((_DWORD)v131 == (_DWORD)v132)
      {
        v257 = 1;
        goto LABEL_249;
      }
    }
    else
    {
      v130 = *v116;
    }
LABEL_202:
    LODWORD(v340) = v126;
    DWORD1(v340) = v126;
    if ((v130 & 1) != 0)
    {
      v258 = *(_QWORD *)(v130 & 0xFFFFFFFF8);
      if ((v130 & 2) != 0
        || (v259 = *(unsigned int *)((v130 & 0xFFFFFFFF8) + 8), (_DWORD)v259 == 0x3FFFFFFF)
        || (_DWORD)v259 == -1)
      {
        v260 = 2;
      }
      else if (v259 >> 28)
      {
        v320 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v320 = v258;
        *(_DWORD *)(v320 + 8) = v259;
        LODWORD(v127) = *((_DWORD *)this + 987);
        v260 = 1;
        v258 = v320;
      }
      else
      {
        v260 = *(_QWORD *)(v130 & 0xFFFFFFFF8);
        v258 = v259 << 36;
      }
      v130 = v258 | v260;
    }
    *((_QWORD *)&v340 + 1) = v130;
    v141 = v127;
    if ((_DWORD)v127 != *((_DWORD *)this + 986))
    {
      v154 = (int32x2_t *)(*((_QWORD *)this + 492) + 16 * v127);
      *v154 = vdup_n_s32(v126);
      v154[1] = (int32x2_t)v130;
      *((_DWORD *)this + 987) = v141 + 1;
      v149 = *((_DWORD *)this + 997);
      if (!v149)
        goto LABEL_207;
      goto LABEL_206;
    }
    v142 = WTF::Vector<JSC::PCToCodeOriginMapBuilder::CodeRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 3936, v127 + 1, (unint64_t)&v340);
    v145 = *((unsigned int *)this + 987);
    v146 = *((_QWORD *)this + 492) + 16 * v145;
    *(_DWORD *)v146 = *(_DWORD *)v142;
    *(_DWORD *)(v146 + 4) = *(_DWORD *)(v142 + 4);
    v147 = *(_QWORD *)(v142 + 8);
    *(_QWORD *)(v142 + 8) = 0;
    *(_QWORD *)(v146 + 8) = v147;
    v148 = *((_QWORD *)&v340 + 1);
    *((_DWORD *)this + 987) = v145 + 1;
    if ((v148 & 1) != 0 && (v148 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v148 & 0xFFFFFFFF8, v143, v144, a4, a5, a6, a7, a8);
LABEL_205:
    v149 = *((_DWORD *)this + 997);
    if (!v149)
      goto LABEL_207;
LABEL_206:
    if ((_BYTE)word_1ECF4C630)
    {
      LOBYTE(v338) = 0;
      *(_QWORD *)&v339 = &v338;
      v301 = *((_QWORD *)this + 496);
      v302 = v149 - 1;
      if (*(_DWORD *)(v301 + 220) <= v302)
      {
        __break(0xC471u);
LABEL_426:
        JUMPOUT(0x197B816A8);
      }
      JSC::DFG::clobberize<JSC::DFG::SpeculativeJIT::compileCurrentBlock(void)::$_5,JSC::DFG::SpeculativeJIT::compileCurrentBlock(void)::$_6,JSC::DFG::SpeculativeJIT::compileCurrentBlock(void)::$_7,JSC::DFG::SpeculativeJIT::compileCurrentBlock(void)::$_4>(*((_QWORD *)this + 495), *(JSC::DFG::Node **)(*(_QWORD *)(v301 + 208) + 8 * v302), (_BYTE **)&v339, a4, a5, a6, a7, a8);
      if ((_BYTE)v338)
      {
        JSC::MacroAssemblerARM64::store8((uint64_t)this, 0, *(_QWORD *)(*((_QWORD *)this + 44) + 16) + 93120, v303, v304, v305, v306, v307);
      }
      else
      {
        JSC::MacroAssemblerARM64::branchTest8((uint64_t)this, 0, *(_QWORD *)(*((_QWORD *)this + 44) + 16) + 93120, -1, v304, v305, v306, v307, (uint64_t)&v340);
        JSC::MacroAssemblerARM64::breakpoint(this, 50289, v308, v309, v310, v311, v312, v313);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v340, (uint64_t)this, v314, v315, v316, v317, v318, v319);
      }
    }
LABEL_207:
    if (!BYTE4(qword_1ECF4C780))
    {
      JSC::DFG::SpeculativeJIT::compile(this, *((JSC::DFG::Node **)this + 497));
      goto LABEL_209;
    }
    v234 = *(unsigned __int16 *)(*((_QWORD *)this + 497) + 18);
    *(_QWORD *)&v340 = "DFG_fast_";
    *((_QWORD *)&v340 + 1) = 10;
    v339 = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * v234];
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v340, (uint64_t)&v339, (int **)&v338);
    v242 = v338;
    if (!v338)
    {
      __break(0xC471u);
      JUMPOUT(0x197B828FCLL);
    }
    v243 = *(_DWORD *)v338;
    *(_DWORD *)v338 += 4;
    v244 = *((_DWORD *)this + 50);
    v245 = v243 + 2;
    if (v245)
    {
      *(_DWORD *)v242 = v245;
      v338 = 0;
      v246 = v242;
LABEL_306:
      if (*(_DWORD *)v246 == 2)
      {
        WTF::StringImpl::~StringImpl(v246, v235, v236, v237, v238, v239, v240, v241);
        WTF::fastFree(v277, v278, v279, v280, v281, v282, v283, v284);
      }
      else
      {
        *(_DWORD *)v246 -= 2;
      }
      goto LABEL_308;
    }
    WTF::StringImpl::~StringImpl(v242, v235, v236, v237, v238, v239, v240, v241);
    WTF::fastFree(v261, v262, v263, v264, v265, v266, v267, v268);
    v246 = v338;
    v338 = 0;
    if (v246)
      goto LABEL_306;
LABEL_308:
    JSC::DFG::SpeculativeJIT::compile(this, *((JSC::DFG::Node **)this + 497));
    v247 = *(JSC::JITSizeStatistics **)(*(_QWORD *)(*((_QWORD *)this + 44) + 16) + 41440);
    v336 = v242;
    v337 = v244;
    JSC::JITSizeStatistics::markEnd(v247, (Marker *)&v336, this, *(JSC::JITPlan **)(*((_QWORD *)this + 495) + 24));
    v336 = 0;
    if (*(_DWORD *)v242 == 2)
    {
      WTF::StringImpl::~StringImpl(v242, v248, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v269, v270, v271, v272, v273, v274, v275, v276);
    }
    else
    {
      *(_DWORD *)v242 -= 2;
    }
LABEL_209:
    v150 = (uint64_t *)*((_QWORD *)this + 497);
    v151 = *((unsigned __int16 *)v150 + 9);
    if (v151 >= 3 && v151 != 355 && v151 != 348)
      goto LABEL_212;
    v155 = *((_DWORD *)v150 + 5);
    if (v155 >= 0xFFFFFFFE)
    {
      __break(0xC471u);
      JUMPOUT(0x197B82408);
    }
    if (v151 > 2)
    {
      v285 = *v150;
      v156 = (_QWORD *)(*v150 & 0xFFFFFFFF8);
      if ((v285 & 1) == 0)
        goto LABEL_222;
    }
    else
    {
      v156 = (_QWORD *)v150[9];
    }
    v156 = (_QWORD *)*v156;
LABEL_222:
    v157 = *((_QWORD *)this + 706);
    *(_QWORD *)&v340 = v156;
    BYTE12(v340) = (v151 < 3) | (2 * (v151 == 348)) | (4 * (v151 == 355));
    DWORD2(v340) = v155;
    v158 = *(unsigned int *)(v157 + 12);
    if ((_DWORD)v158 == *(_DWORD *)(v157 + 8))
    {
      v178 = (uint64_t *)WTF::Vector<JSC::DFG::MinifiedNode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v157, v158 + 1, (unint64_t)&v340);
      v159 = (_QWORD *)(*(_QWORD *)v157 + 13 * *(unsigned int *)(v157 + 12));
      v160 = *v178;
      v161 = *(uint64_t *)((char *)v178 + 5);
    }
    else
    {
      v159 = (_QWORD *)(*(_QWORD *)v157 + 13 * v158);
      v160 = v340;
      v161 = *(_QWORD *)((char *)&v340 + 5);
    }
    *(_QWORD *)((char *)v159 + 5) = v161;
    *v159 = v160;
    ++*(_DWORD *)(v157 + 12);
LABEL_212:
    if (!*((_BYTE *)this + 5244))
      break;
    v152 = *((unsigned int *)this + 997);
    v153 = *(_QWORD *)(*((_QWORD *)this + 702) + 72);
    if (*(_DWORD *)(v153 + 220) <= v152)
    {
      __break(0xC471u);
      JUMPOUT(0x197B828CCLL);
    }
    JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects((char *)this + 5592, v152, *(_QWORD *)(*(_QWORD *)(v153 + 208) + 8 * v152));
    v115 = *((_DWORD *)this + 997) + 1;
    *((_DWORD *)this + 997) = v115;
    v114 = *((_QWORD *)this + 496);
    if (*(_DWORD *)(v114 + 220) <= v115)
      return *(double *)&v80;
  }
  v179 = this;
  v180 = 162;
LABEL_243:
  *(double *)&v80 = JSC::DFG::SpeculativeJIT::bail((uint64_t)v179, v180, a3, a4, a5, a6, a7, a8);
  return *(double *)&v80;
}

void JSC::DFG::clobberize<JSC::DFG::SpeculativeJIT::compileCurrentBlock(void)::$_1,JSC::DFG::SpeculativeJIT::compileCurrentBlock(void)::$_2,JSC::DFG::SpeculativeJIT::compileCurrentBlock(void)::$_3,JSC::DFG::SpeculativeJIT::compileCurrentBlock(void)::$_0>(uint64_t a1, JSC::DFG::Node *this, _BYTE **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  unsigned int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  _DWORD *v21;
  _QWORD *v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  BOOL v51;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t *v95;
  unsigned int v96;
  int v97;
  BOOL v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  int v123;
  int v126;
  int v129;
  int v130;
  BOOL v131;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  BOOL v144;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  int v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  BOOL v155;
  uint64_t v157;
  int v158;
  unsigned int v159;
  BOOL v160;
  unsigned int v162;
  unsigned int *v163;
  unsigned int v164;
  unsigned int *v165;
  uint64_t v166;
  unsigned int v167;
  _DWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unsigned int *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  uint64_t v198;
  const char *v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t v209;
  __int128 v210;

  if (*(int *)(a1 + 952) <= 0 && JSC::DFG::Node::hasArrayMode(this))
  {
    v11 = *((unsigned __int16 *)this + 9);
    if (v11 > 0xC9)
    {
      if (v11 - 202 > 0x3E || ((1 << (v11 + 54)) & 0x400000000E002FEFLL) == 0)
      {
        v13 = v11 - 333;
        if (v13 > 0x3A || ((1 << v13) & 0x7A8000000000003) == 0)
        {
LABEL_39:
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:43), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:61), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:79), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2519:35)]", "Unhandled ArrayMode opcode.");
          __break(0xC471u);
          JUMPOUT(0x197B82B64);
        }
      }
      goto LABEL_16;
    }
    v14 = v11 - 101;
    if (v11 - 101 > 0x3E)
      goto LABEL_38;
    if (((1 << v14) & 0x7E0070000000000FLL) != 0)
      goto LABEL_16;
    if (((1 << v14) & 0x18000000000) == 0)
    {
LABEL_38:
      if (v11 - 92 >= 2)
        goto LABEL_39;
      goto LABEL_16;
    }
  }
  v15 = *((unsigned __int16 *)this + 9);
  switch(*((_WORD *)this + 9))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x43:
    case 0x45:
    case 0x47:
    case 0x48:
    case 0x4A:
    case 0x4B:
    case 0x5B:
    case 0x60:
    case 0x61:
    case 0x64:
    case 0x6D:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA9:
    case 0xAA:
    case 0xAB:
    case 0xAC:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB2:
    case 0xB3:
    case 0xB4:
    case 0xB5:
    case 0xB6:
    case 0xB7:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBE:
    case 0xBF:
    case 0xC0:
    case 0xD6:
    case 0xDA:
    case 0xDD:
    case 0xDE:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xEB:
    case 0xEC:
    case 0xEE:
    case 0xEF:
    case 0xF0:
    case 0x101:
    case 0x102:
    case 0x103:
    case 0x104:
    case 0x105:
    case 0x109:
    case 0x10C:
    case 0x10E:
    case 0x110:
    case 0x111:
    case 0x112:
    case 0x113:
    case 0x116:
    case 0x117:
    case 0x118:
    case 0x119:
    case 0x11A:
    case 0x11B:
    case 0x11C:
    case 0x11D:
    case 0x11E:
    case 0x11F:
    case 0x120:
    case 0x121:
    case 0x122:
    case 0x123:
    case 0x126:
    case 0x127:
    case 0x128:
    case 0x129:
    case 0x12A:
    case 0x12B:
    case 0x12C:
    case 0x12D:
    case 0x12E:
    case 0x12F:
    case 0x130:
    case 0x132:
    case 0x133:
    case 0x134:
    case 0x135:
    case 0x136:
    case 0x137:
    case 0x138:
    case 0x139:
    case 0x13A:
    case 0x144:
    case 0x148:
    case 0x149:
    case 0x14B:
    case 0x14C:
    case 0x153:
    case 0x154:
    case 0x157:
    case 0x158:
    case 0x159:
    case 0x15A:
    case 0x15B:
    case 0x15C:
    case 0x15D:
    case 0x15E:
    case 0x15F:
    case 0x160:
    case 0x161:
    case 0x162:
    case 0x163:
    case 0x164:
    case 0x165:
    case 0x166:
    case 0x167:
    case 0x168:
    case 0x169:
    case 0x16A:
    case 0x16B:
    case 0x16C:
    case 0x16D:
    case 0x16E:
    case 0x16F:
    case 0x170:
    case 0x171:
    case 0x172:
    case 0x173:
    case 0x174:
    case 0x175:
    case 0x176:
    case 0x177:
    case 0x178:
    case 0x179:
    case 0x17A:
    case 0x17B:
    case 0x17C:
    case 0x17D:
    case 0x17E:
    case 0x17F:
    case 0x183:
    case 0x188:
    case 0x189:
    case 0x18A:
    case 0x18B:
    case 0x18C:
    case 0x18D:
    case 0x18E:
    case 0x18F:
    case 0x190:
    case 0x191:
    case 0x192:
    case 0x193:
    case 0x194:
    case 0x196:
    case 0x197:
    case 0x198:
    case 0x19A:
    case 0x19C:
    case 0x19D:
    case 0x19E:
    case 0x19F:
    case 0x1A2:
    case 0x1A3:
    case 0x1A4:
    case 0x1A5:
    case 0x1A6:
    case 0x1A7:
    case 0x1A8:
    case 0x1A9:
    case 0x1AA:
    case 0x1AD:
    case 0x1AE:
    case 0x1AF:
    case 0x1B0:
      return;
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0x54:
    case 0x5E:
    case 0x5F:
    case 0x62:
    case 0x63:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x8E:
    case 0x8F:
    case 0xA7:
    case 0xA8:
    case 0xB0:
    case 0xB1:
    case 0xC3:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xD4:
    case 0xD5:
    case 0xD8:
    case 0xD9:
    case 0xDB:
    case 0xDC:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
    case 0x100:
    case 0x108:
    case 0x124:
    case 0x125:
    case 0x13B:
    case 0x13C:
    case 0x13D:
    case 0x140:
    case 0x141:
    case 0x147:
    case 0x14A:
    case 0x14D:
    case 0x14E:
    case 0x14F:
    case 0x150:
    case 0x151:
    case 0x152:
    case 0x155:
    case 0x156:
    case 0x181:
    case 0x184:
    case 0x185:
    case 0x186:
    case 0x187:
    case 0x19B:
      break;
    case 0xF:
      v53 = (_QWORD *)*((_QWORD *)this + 9);
      v102 = v53;
      do
      {
        v103 = v102;
        v102 = (_QWORD *)*v102;
      }
      while (v102);
      if (v103 != v53)
      {
        *v53 = v103;
        v53 = (_QWORD *)*((_QWORD *)this + 9);
      }
      v104 = v53;
      do
      {
        v55 = v104;
        v104 = (_QWORD *)*v104;
      }
      while (v104);
      goto LABEL_178;
    case 0x10:
      v53 = (_QWORD *)*((_QWORD *)this + 9);
      v99 = v53;
      do
      {
        v100 = v99;
        v99 = (_QWORD *)*v99;
      }
      while (v99);
      if (v100 != v53)
      {
        *v53 = v100;
        v53 = (_QWORD *)*((_QWORD *)this + 9);
      }
      v101 = v53;
      do
      {
        v55 = v101;
        v101 = (_QWORD *)*v101;
      }
      while (v101);
      goto LABEL_178;
    case 0x1C:
      v53 = (_QWORD *)*((_QWORD *)this + 9);
      v54 = v53;
      do
      {
        v55 = v54;
        v54 = (_QWORD *)*v54;
      }
      while (v54);
LABEL_178:
      if (v55 != v53)
        *v53 = v55;
      return;
    case 0x29:
      v96 = ((*((_QWORD *)this + 3) >> 50) & 0x3F) - 26;
      goto LABEL_222;
    case 0x2A:
    case 0x142:
    case 0x143:
      v27 = word_1ECF4C630;
      v28 = *((_BYTE *)this + 30);
      goto LABEL_52;
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x32:
    case 0x34:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
      v16 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      switch((_DWORD)v16)
      {
        case 0x1A:
          v17 = *((_QWORD *)this + 4) & 0xFC000000000000;
          v18 = 0x68000000000000;
          break;
        case 0x1C:
          v17 = *((_QWORD *)this + 4) & 0xFC000000000000;
          v18 = 0x70000000000000;
          break;
        case 0x1B:
          v17 = *((_QWORD *)this + 4) & 0xFC000000000000;
          v18 = 0x6C000000000000;
          break;
        default:
          goto LABEL_16;
      }
LABEL_121:
      if (v17 == v18)
        return;
      break;
    case 0x2C:
    case 0x2E:
    case 0x30:
    case 0x31:
    case 0x33:
    case 0x35:
      if ((*((_BYTE *)this + 30) & 0xFC) != 0)
        goto LABEL_35;
      break;
    case 0x3F:
      v97 = word_1ECF4C630;
      v98 = ((*((_QWORD *)this + 3) >> 50) & 0x3F) - 1 >= 2;
      goto LABEL_223;
    case 0x40:
    case 0x42:
    case 0x44:
      v33 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if (((*((_QWORD *)this + 3) >> 50) & 0x3F) > 0x30)
      {
        if ((_DWORD)v33 == 49 || (_DWORD)v33 == 52)
          return;
LABEL_88:
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:43), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:61), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:79), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2519:35)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x197B82EA0);
      }
      if ((_DWORD)v33)
      {
        if ((_DWORD)v33 == 1)
          return;
        goto LABEL_88;
      }
      break;
    case 0x41:
      v61 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      v57 = v61 > 0x34;
      v62 = (1 << v61) & 0x12000000000002;
      if (!v57 && v62 != 0)
        return;
      break;
    case 0x46:
      v48 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v48 != 1 && (_DWORD)v48 != 49)
        break;
      return;
    case 0x49:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x131:
      v24 = *((_QWORD *)this + 3) & 0xFC000000000000;
      v25 = word_1ECF4C630;
      v26 = 0xC4000000000000;
      goto LABEL_240;
    case 0x52:
    case 0x53:
      v35 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if (v35 > 0x34)
        goto LABEL_61;
      if (((1 << v35) & 0x1200001C000002) != 0)
        return;
      if (v35)
      {
LABEL_61:
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:43), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:61), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:79), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2519:35)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x197B82C98);
      }
      break;
    case 0x5C:
    case 0x5D:
      v39 = *((_DWORD *)this + 18);
      v40 = *((_DWORD *)this + 14) & 7;
      if (v40 >= 2 && v40 - 3 >= 3)
      {
        if (v40 == 7)
        {
          __break(0xC471u);
          JUMPOUT(0x197B83A48);
        }
        __break(0xC471u);
        JUMPOUT(0x197B83CD4);
      }
      switch(*((_DWORD *)this + 18))
      {
        case 0u:
        case 1u:
        case 2u:
        case 4u:
        case 0x17u:
        case 0x18u:
          goto LABEL_16;
        case 3u:
        case 6u:
          return;
        case 5u:
          v97 = word_1ECF4C630;
          v98 = __CFADD__(BYTE2(v39) - 5, 2);
          goto LABEL_223;
        case 7u:
          if (BYTE2(v39) > 3u || BYTE2(v39) == 2)
            goto LABEL_16;
          v188 = *((_DWORD *)this + 6);
          v189 = *(_DWORD *)(a1 + 164);
          if (v189 <= v188)
          {
            __break(0xC471u);
            JUMPOUT(0x197B83EE8);
          }
          if (v189 <= v188 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197B83B18);
          }
          return;
        case 8u:
          if (BYTE2(v39) > 3u || BYTE2(v39) == 2)
            goto LABEL_16;
          v190 = *((_DWORD *)this + 6);
          v191 = *(_DWORD *)(a1 + 164);
          if (v191 <= v190)
          {
            __break(0xC471u);
            JUMPOUT(0x197B83EF0);
          }
          if (v191 <= v190 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197B83B4CLL);
          }
          return;
        case 9u:
          if (BYTE2(v39) > 3u || BYTE2(v39) == 2)
            goto LABEL_16;
          v194 = *((_DWORD *)this + 6);
          v195 = *(_DWORD *)(a1 + 164);
          if (v195 <= v194)
          {
            __break(0xC471u);
            JUMPOUT(0x197B83EF8);
          }
          if (v195 <= v194 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197B83BC4);
          }
          return;
        case 0xAu:
        case 0xBu:
          if (BYTE2(v39) < 2u)
            return;
          goto LABEL_16;
        case 0xCu:
          if (BYTE2(v39) > 1u)
            goto LABEL_16;
          v192 = *((_DWORD *)this + 6);
          v193 = *(_DWORD *)(a1 + 164);
          if (v193 <= v192)
          {
            __break(0xC471u);
            JUMPOUT(0x197B83F00);
          }
          if (v193 <= v192 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197B83B78);
          }
          return;
        case 0xDu:
          v196 = *((_DWORD *)this + 6);
          v197 = *(_DWORD *)(a1 + 164);
          if (v197 <= v196)
          {
            __break(0xC471u);
            JUMPOUT(0x197B83ED8);
          }
          if (v197 <= v196 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197B83BE8);
          }
          return;
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          if ((v39 & 0x40000000) == 0)
          {
            v41 = *((_DWORD *)this + 6);
            v42 = *(_DWORD *)(a1 + 164);
            if (v42 <= v41)
            {
              __break(0xC471u);
              JUMPOUT(0x197B83EB0);
            }
            if (v42 <= v41 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197B82E38);
            }
          }
          return;
        case 0x19u:
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:43), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:61), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:79), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2519:35)]", "impossible array mode for get");
          __break(0xC471u);
          JUMPOUT(0x197B83DF8);
        default:
          __break(0xC471u);
          JUMPOUT(0x197B83DB0);
      }
      return;
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
      v29 = *((_DWORD *)this + 6);
      v30 = *(_DWORD *)(a1 + 164);
      if (v30 > v29)
      {
        if (v30 > v29 + 1)
        {
          if (v30 > v29 + 2)
          {
            v31 = *((_DWORD *)this + 18);
            v32 = *((_DWORD *)this + 14) & 7;
            if (v32 >= 2 && v32 - 3 >= 3)
            {
              if (v32 == 7)
              {
                __break(0xC471u);
                JUMPOUT(0x197B83950);
              }
              __break(0xC471u);
              JUMPOUT(0x197B83CB4);
            }
            switch(*((_DWORD *)this + 18))
            {
              case 0u:
              case 1u:
              case 2u:
              case 4u:
              case 5u:
              case 6u:
              case 0xCu:
              case 0xDu:
              case 0x17u:
              case 0x18u:
                goto LABEL_16;
              case 3u:
              case 0xEu:
              case 0xFu:
              case 0x10u:
              case 0x11u:
              case 0x12u:
              case 0x13u:
              case 0x14u:
              case 0x15u:
              case 0x16u:
                return;
              case 7u:
              case 8u:
              case 9u:
              case 0xAu:
                if (BYTE2(v31) - 5 < 0xFFFFFFFE)
                  return;
                goto LABEL_16;
              case 0xBu:
                if ((v31 & 0xFE0000) == 0)
                  return;
                goto LABEL_16;
              case 0x19u:
                JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:43), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:61), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:79), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2519:35)]", "impossible array mode for put");
                __break(0xC471u);
                JUMPOUT(0x197B83AACLL);
              default:
                __break(0xC471u);
                JUMPOUT(0x197B83AD8);
            }
          }
          __break(0xC471u);
          JUMPOUT(0x197B83E20);
        }
        __break(0xC471u);
        JUMPOUT(0x197B83E18);
      }
      __break(0xC471u);
      JUMPOUT(0x197B83E10);
    case 0x9C:
      v146 = *((_QWORD *)this + 9);
      v147 = *(unsigned int *)(v146 + 20);
      v148 = (v147 << 6) - 64;
      do
      {
        if (!v147)
          break;
        if (--v147 >= (unint64_t)*(unsigned int *)(v146 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x197B83EA0);
        }
        v149 = v148 - 64;
        v150 = JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)(*(_QWORD *)(v146 + 8) + v148));
        v148 = v149;
      }
      while (!v150);
      return;
    case 0x9D:
      JSC::DFG::MultiDeleteByOffsetData::writesStructures(*((_QWORD *)this + 9));
      return;
    case 0x9E:
      v123 = *((_DWORD *)this + 18);
      if ((v123 - 5) >= 9 && v123 != 3 && v123 != 25)
      {
        v126 = JSC::DFG::toTypedArrayType(v123);
        if (v126 == 12 || v126 == 0)
        {
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:43), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:61), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:79), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2519:35)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x197B834ECLL);
        }
      }
      return;
    case 0x9F:
      v105 = *((_DWORD *)this + 18);
      if (v105 != 25)
      {
        v207 = JSC::DFG::toTypedArrayType(v105);
        if (v207 == 12 || v207 == 0)
        {
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:43), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:61), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:79), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2519:35)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x197B83E98);
        }
      }
      if ((v105 & 0x40000000) != 0)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:43), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:61), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:79), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2519:35)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
        __break(0xC471u);
        JUMPOUT(0x197B832F8);
      }
      return;
    case 0xA0:
      v142 = *((unsigned __int8 *)this + 72);
      if (v142 != 25)
      {
        v143 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)this + 72));
        v144 = v143 == 12 || v143 == 0;
        if (v144 && v142 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:43), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:61), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:79), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2519:35)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x197B836F0);
        }
      }
      return;
    case 0xA1:
      if ((*((_DWORD *)this + 18) & 0xFE) != 0xA)
      {
        __break(0xC471u);
        JUMPOUT(0x197B83740);
      }
      return;
    case 0xA2:
      v49 = *((unsigned __int8 *)this + 72);
      if (v49 != 25)
      {
        v50 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)this + 72));
        v51 = v50 == 12 || v50 == 0;
        if (v51 && v49 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:43), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:61), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:79), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2519:35)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x197B82FCCLL);
        }
      }
      return;
    case 0xA3:
      v129 = *((unsigned __int8 *)this + 72);
      if (v129 != 25)
      {
        v130 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)this + 72));
        v131 = v130 == 12 || v130 == 0;
        if (v131 && v129 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:43), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:61), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:79), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2519:35)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x197B83580);
        }
      }
      return;
    case 0xC1:
      v56 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      v57 = v56 > 0x31;
      v58 = (1 << v56) & 0x2000000200002;
      if (v57 || v58 == 0)
        break;
      v60 = *((_QWORD *)this + 4);
      if ((v60 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
      v17 = v60 & 0xFC000000000000;
      v18 = 0x4000000000000;
      goto LABEL_121;
    case 0xC2:
      v96 = ((*((_QWORD *)this + 3) >> 50) & 0x3F) - 12;
LABEL_222:
      v97 = word_1ECF4C630;
      v98 = v96 >= 3;
LABEL_223:
      if (v98 && v97 != 0)
        goto LABEL_17;
      return;
    case 0xC4:
      v140 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v140 == 11)
        return;
      if ((_DWORD)v140)
      {
        __break(0xC471u);
        JUMPOUT(0x197B83628);
      }
      break;
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
      v19 = v15 - 202;
      if (v19 >= 0xAu || ((0x3EFu >> v19) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197B83C94);
      }
      v20 = dword_199123F48[(__int16)v19];
      v21 = (_DWORD *)((char *)this + 24);
      if ((*((_BYTE *)this + 56) & 0x10) != 0)
      {
        v162 = v20 + *v21;
        if (*(_DWORD *)(a1 + 164) <= v162)
        {
          __break(0xC471u);
          JUMPOUT(0x197B83EA8);
        }
        v22 = (_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v162);
      }
      else
      {
        v22 = &v21[2 * v20];
      }
      if ((*v22 & 0xFF00FFFFFFFFFFFFLL) == 0 && word_1ECF4C630 != 0)
        goto LABEL_17;
      return;
    case 0xCE:
      v95 = (uint64_t *)((char *)this + 24);
      if ((*((_BYTE *)this + 56) & 0x10) != 0)
      {
        v198 = *v95;
        if (*(_DWORD *)(a1 + 164) <= v198)
        {
          __break(0xC471u);
          JUMPOUT(0x197B83EE0);
        }
        v95 = (uint64_t *)(*(_QWORD *)(a1 + 152) + 8 * v198);
      }
      v24 = *v95 & 0xFC000000000000;
      v25 = word_1ECF4C630;
      v26 = 0x4000000000000;
      goto LABEL_240;
    case 0xD7:
      if (*((unsigned __int8 *)this + 72) - 7 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x197B83328);
      }
      return;
    case 0xDF:
    case 0xE0:
      if ((*((_QWORD *)this + 3) & 0xFC000000000000) != 0x54000000000000
        || (*((_QWORD *)this + 4) & 0xFC000000000000) != 0x40000000000000)
      {
        break;
      }
      v17 = *((_QWORD *)this + 5) & 0xFC000000000000;
      v18 = 0x54000000000000;
      goto LABEL_121;
    case 0xE1:
      v66 = *((_QWORD *)this + 5);
      goto LABEL_239;
    case 0xE6:
      v106 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if ((v106 - 1) < 2)
        return;
      if ((_DWORD)v106)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:43), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:61), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:79), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2519:35)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x197B83388);
      }
      break;
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
    case 0xED:
      if ((*((_BYTE *)this + 30) & 0xFC) != 0)
        return;
LABEL_35:
      v27 = word_1ECF4C630;
      v28 = *((_BYTE *)this + 38);
LABEL_52:
      if ((v28 & 0xFC) == 0 && v27 != 0)
        goto LABEL_17;
      return;
    case 0x106:
      v107 = *((_QWORD *)this + 4);
      v108 = v107;
      if ((v107 & 0x80000000) != 0)
      {
        JSC::DFG::Graph::freeze(a1, COERCE__INT64((double)v107) + 0x2000000000000, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      else
      {
        JSC::DFG::Graph::freeze(a1, v107 | 0xFFFE000000000000, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (!(_DWORD)v107)
          return;
      }
      v115 = *((unsigned __int16 *)this + 9);
      switch(v115)
      {
        case 267:
          goto LABEL_385;
        case 264:
          v116 = *((_DWORD *)this + 19);
          break;
        case 352:
LABEL_385:
          v116 = *((_DWORD *)this + 21);
          break;
        default:
          v116 = *((_DWORD *)this + 18);
          goto LABEL_194;
      }
      LOBYTE(v116) = v116 & 0xF;
LABEL_194:
      if (v116 <= 0x19u && ((1 << v116) & 0x2A003F0) != 0)
      {
        v117 = *(unsigned int *)(a1 + 428);
        if (v107 >= v117)
        {
          if ((_DWORD)v117)
          {
            v180 = *(unsigned int **)(a1 + 416);
            v181 = 4 * v117;
            do
            {
              v182 = *v180;
              if (v182 < v107)
              {
                if (*(_DWORD *)(a1 + 164) <= (v182 + *((_DWORD *)this + 6)))
                {
                  __break(0xC471u);
                  JUMPOUT(0x197B83E28);
                }
                if ((v182 & 0x80000000) != 0)
                  v183 = COERCE__INT64((double)v182) + 0x2000000000000;
                else
                  v183 = v182 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze(a1, v183, v109, v110, v111, v112, v113, v114);
              }
              ++v180;
              v181 -= 4;
            }
            while (v181);
          }
        }
        else
        {
          v118 = 0;
          do
          {
            if (*(_DWORD *)(a1 + 164) <= (v118 + *((_DWORD *)this + 6)))
            {
              __break(0xC471u);
              JUMPOUT(0x197B83E08);
            }
            if ((v118 & 0x80000000) != 0)
              v119 = COERCE__INT64((double)v118) + 0x2000000000000;
            else
              v119 = v118 | 0xFFFE000000000000;
            JSC::DFG::Graph::freeze(a1, v119, v109, v110, v111, v112, v113, v114);
            ++v118;
          }
          while (v108 != v118);
        }
      }
      return;
    case 0x107:
      if (*((_DWORD *)this + 8))
      {
        v134 = *((_QWORD *)this + 3);
        v135 = *(_DWORD *)(a1 + 164);
        v98 = v135 >= v134;
        LODWORD(v136) = v135 - v134;
        if (v98)
          v136 = v136;
        else
          v136 = 0;
        v137 = *((unsigned int *)this + 8) - 1;
        do
        {
          if (!v136)
          {
            __break(0xC471u);
            JUMPOUT(0x197B83E00);
          }
          v138 = *(unsigned __int16 *)((*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v134++) & 0xFF00FFFFFFFFFFFFLL)
                                     + 0x12);
          v139 = v138 == 350 || v137-- == 0;
          --v136;
        }
        while (!v139);
      }
      return;
    case 0x10A:
      v120 = *((unsigned int *)this + 20);
      if ((v120 & 0x80000000) != 0)
        v121 = COERCE__INT64((double)v120) + 0x2000000000000;
      else
        v121 = v120 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze(a1, v121, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    case 0x10B:
      v67 = (uint64_t *)*((_QWORD *)this + 9);
      v68 = *v67;
      v69 = *(unsigned int *)(*v67 + 8);
      if ((v69 & 0x80000000) != 0)
        v70 = COERCE__INT64((double)v69) + 0x2000000000000;
      else
        v70 = v69 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze(a1, v70, (uint64_t)a3, a4, a5, a6, a7, a8);
      v78 = *((unsigned __int16 *)this + 9);
      switch(v78)
      {
        case 267:
          goto LABEL_383;
        case 264:
          v79 = *((_DWORD *)this + 19);
          break;
        case 352:
LABEL_383:
          v79 = *((_DWORD *)this + 21);
          break;
        default:
          v79 = *((_DWORD *)this + 18);
          goto LABEL_142;
      }
      LOBYTE(v79) = v79 & 0xF;
LABEL_142:
      v57 = v79 > 0x19u;
      v80 = (1 << v79) & 0x2A003F0;
      if (!v57 && v80 != 0)
      {
        v82 = *(unsigned int *)(a1 + 428);
        if (v82 <= v69)
        {
          v210 = 0uLL;
          if ((_DWORD)v82)
          {
            v163 = 0;
            v164 = 0;
            v165 = *(unsigned int **)(a1 + 416);
            v166 = 4 * v82;
            do
            {
              v167 = *v165;
              LODWORD(v209) = v167;
              if (v167 < v69)
              {
                if (v164 == DWORD2(v210))
                {
                  v168 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v210, v164 + 1, (unint64_t)&v209);
                  v163 = (unsigned int *)v210;
                  *(_DWORD *)(v210 + 4 * HIDWORD(v210)) = *v168;
                }
                else
                {
                  v163[v164] = v167;
                }
                v164 = ++HIDWORD(v210);
              }
              ++v165;
              v166 -= 4;
            }
            while (v166);
            if (v164)
            {
              v169 = v68 + 16;
              v170 = 4 * v164;
              do
              {
                v171 = *v163;
                if ((v171 & 0x80000000) != 0)
                  v172 = COERCE__INT64((double)v171) + 0x2000000000000;
                else
                  v172 = v171 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze(a1, v172, v72, v73, v74, v75, v76, v77);
                if ((*(_BYTE *)(v68 + 4) & 0xE) == 6)
                  v179 = *(_QWORD *)(v169 + 8 * v171) + 0x2000000000000;
                else
                  v179 = *(_QWORD *)(v169 + 8 * v171);
                JSC::DFG::Graph::freeze(a1, v179, v173, v174, v175, v176, v177, v178);
                ++v163;
                v170 -= 4;
              }
              while (v170);
              v163 = (unsigned int *)v210;
            }
            if (v163)
            {
              *(_QWORD *)&v210 = 0;
              DWORD2(v210) = 0;
              WTF::fastFree((unint64_t)v163, v71, v72, v73, v74, v75, v76, v77);
            }
          }
        }
        else if ((_DWORD)v69)
        {
          v83 = 0;
          v84 = v68 + 16;
          do
          {
            if ((v83 & 0x80000000) != 0)
              v85 = COERCE__INT64((double)v83) + 0x2000000000000;
            else
              v85 = v83 | 0xFFFE000000000000;
            JSC::DFG::Graph::freeze(a1, v85, v72, v73, v74, v75, v76, v77);
            if ((*(_BYTE *)(v68 + 4) & 0xE) == 6)
              v92 = *(_QWORD *)(v84 + 8 * v83) + 0x2000000000000;
            else
              v92 = *(_QWORD *)(v84 + 8 * v83);
            JSC::DFG::Graph::freeze(a1, v92, v86, v87, v88, v89, v90, v91);
            ++v83;
          }
          while (v69 != v83);
        }
      }
      return;
    case 0x10D:
      v64 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v64 == 52 || (_DWORD)v64 == 1)
        return;
      if ((_DWORD)v64)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:43), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:61), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:79), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2519:35)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x197B830BCLL);
      }
      break;
    case 0x10F:
      v152 = *((_QWORD *)this + 3);
      v153 = v152 & 0xFF00FFFFFFFFFFFFLL;
      v154 = v152 & 0xFC000000000000;
      if (v153)
        v155 = v154 == 0x54000000000000;
      else
        v155 = 1;
      if (!v155 && word_1ECF4C630 != 0)
        goto LABEL_17;
      return;
    case 0x114:
      if ((JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint((JSC::DFG::Graph *)a1, this, (uint64_t)a3, a4, a5, a6, a7, a8) & 1) != 0)return;
      break;
    case 0x115:
      v151 = *(unsigned __int16 *)((*((_QWORD *)this + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v151 != 349 && v151 != 352)
        break;
      return;
    case 0x13E:
    case 0x145:
      v37 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if (v37 > 0x34)
        goto LABEL_73;
      if (((1 << v37) & 0x12026001400002) != 0)
        return;
      if (((1 << v37) & 0x101) == 0)
      {
LABEL_73:
        __break(0xC471u);
        JUMPOUT(0x197B82D80);
      }
      break;
    case 0x13F:
      v66 = *((_QWORD *)this + 3);
LABEL_239:
      v24 = v66 & 0xFC000000000000;
      v25 = word_1ECF4C630;
      v26 = 0x54000000000000;
      goto LABEL_240;
    case 0x146:
      v141 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v141 == 28)
        return;
      if ((_DWORD)v141)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:43), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:61), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:79), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2519:35)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x197B83684);
      }
      break;
    case 0x180:
    case 0x182:
      if ((_DWORD)v15 != 386 || (v38 = *((unsigned __int8 *)this + 80), v38 == 1))
      {
        v43 = BYTE2(*((_DWORD *)this + 18));
        switch(*((_DWORD *)this + 18))
        {
          case 3u:
            return;
          case 7u:
            if (v43 > 1)
              goto LABEL_16;
            v44 = *((_DWORD *)this + 6);
            v45 = *(_DWORD *)(a1 + 164);
            if (v45 <= v44)
            {
              __break(0xC471u);
              JUMPOUT(0x197B83EC0);
            }
            if (v45 <= v44 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197B82F0CLL);
            }
            return;
          case 8u:
            if (v43 > 1)
              goto LABEL_16;
            v184 = *((_DWORD *)this + 6);
            v185 = *(_DWORD *)(a1 + 164);
            if (v185 <= v184)
            {
              __break(0xC471u);
              JUMPOUT(0x197B83EC8);
            }
            if (v185 <= v184 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197B839DCLL);
            }
            return;
          case 9u:
            if (v43 > 1)
              goto LABEL_16;
            v186 = *((_DWORD *)this + 6);
            v187 = *(_DWORD *)(a1 + 164);
            if (v187 <= v186)
            {
              __break(0xC471u);
              JUMPOUT(0x197B83ED0);
            }
            if (v187 <= v186 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197B83A08);
            }
            return;
          case 0xAu:
            if (v43 >= 2)
              goto LABEL_16;
            break;
          default:
            goto LABEL_16;
        }
        return;
      }
      if (v38 != 2)
        break;
      if (*(_DWORD *)(a1 + 164) <= *((_QWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x197B83EB8);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * *((_QWORD *)this + 3)) & 0xFC000000000000;
      v25 = word_1ECF4C630;
      v26 = 0x20000000000000;
LABEL_240:
      if (v24 != v26 && v25 != 0)
        goto LABEL_17;
      return;
    case 0x195:
      v46 = *((_DWORD *)this + 6);
      v47 = *(_DWORD *)(a1 + 164);
      if (v47 <= v46)
      {
        __break(0xC471u);
        JUMPOUT(0x197B83E30);
      }
      if (v47 <= v46 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197B82F44);
      }
      return;
    case 0x199:
      v93 = *((_DWORD *)this + 6);
      v94 = *(_DWORD *)(a1 + 164);
      if (v94 <= v93)
      {
        __break(0xC471u);
        JUMPOUT(0x197B83E38);
      }
      if (v94 <= v93 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197B83E40);
      }
      if (v94 <= v93 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x197B831C8);
      }
      return;
    case 0x1A0:
      v157 = *(_QWORD *)(*((_QWORD *)this + 9) + 16);
      if (!v157)
        break;
      v122 = *(_DWORD *)(v157 + 24);
LABEL_295:
      v158 = (unsigned __int16)v122;
      if ((unsigned __int16)v122 != HIWORD(v122))
      {
        v159 = HIWORD(v122);
        v160 = !v158 && v159 == 0xFFFF;
        if (v160 && word_1ECF4C630 != 0)
          goto LABEL_17;
      }
      return;
    case 0x1A1:
      v122 = *(_DWORD *)(*((_QWORD *)this + 9) + 48);
      goto LABEL_295;
    case 0x1AB:
    case 0x1AC:
      if ((*((_BYTE *)this + 74) & 1) == 0)
      {
        v36 = *((_DWORD *)this + 14) & 7;
        if (v36 >= 2 && v36 - 3 >= 3)
        {
          if (v36 == 7)
          {
            __break(0xC471u);
            JUMPOUT(0x197B82D1CLL);
          }
          __break(0xC471u);
          JUMPOUT(0x197B83CF4);
        }
      }
      return;
    case 0x1B1:
      __break(0xC471u);
      JUMPOUT(0x197B83D14);
    default:
      v210 = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * v15];
      WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)&v210, &v209);
      if (v209)
        v199 = (const char *)(v209 + 16);
      else
        v199 = 0;
      JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:43), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:61), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2528:79), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2519:35)]", v199);
      WTF::CString::~CString((WTF::CString *)&v209, v200, v201, v202, v203, v204, v205, v206);
      __break(0xC471u);
      JUMPOUT(0x197B83D90);
  }
LABEL_16:
  if ((_BYTE)word_1ECF4C630)
LABEL_17:
    **a3 = 1;
}

void JSC::MacroAssemblerARM64::branchTest8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;

  if (a2 <= 1 && a4 == 0xFFFFFFFFLL)
  {
    v12 = -1;
  }
  else if (a2 <= 1)
  {
    v12 = a4;
  }
  else
  {
    v12 = (char)a4;
  }
  if (*(_BYTE *)(a1 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerHelpers::load8OnCondition<JSC::MacroAssemblerARM64,JSC::MacroAssemblerARM64::ResultCondition,void const*,JSC::ARM64Registers::RegisterID>(a1, a2, a3, *(char *)(a1 + 304), a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)v12, a1, a2, 17, v13, v14, v15, v16, a9, v17);
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::MacroAssemblerARM64::breakpoint(JSC::MacroAssemblerARM64 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v10;

  v8 = a2;
  v10 = *((_DWORD *)this + 50);
  if (v10 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::MacroAssemblerARM64 *)((char *)this + 56), a2, a3, a4, a5, a6, a7, a8);
    v10 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v10) = (32 * v8) | 0xD4200000;
  *((_DWORD *)this + 50) += 4;
}

void JSC::MacroAssemblerARM64::store8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  JSC::AssemblerBuffer *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;

  if (!(a2 << 24))
  {
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      v29 = *(_DWORD *)(a1 + 200);
      v24 = (unsigned int *)(a1 + 200);
      v23 = v29;
      v26 = (JSC::AssemblerBuffer *)(v24 - 36);
      v27 = v29 + 4;
      v28 = *(v24 - 2);
      v15 = 956301887;
      goto LABEL_7;
    }
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x197B84908);
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_12;
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(char)a2, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197B84928);
  }
  v15 = 956301872;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3, *(char *)(a1 + 304), v10, v11, v12, v13, v14);
  v25 = *(_DWORD *)(a1 + 200);
  v24 = (unsigned int *)(a1 + 200);
  v23 = v25;
  v26 = (JSC::AssemblerBuffer *)(v24 - 36);
  v27 = v25 + 4;
  v28 = *(v24 - 2);
LABEL_7:
  if (v27 > v28)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v26, v16, v17, v18, v19, v20, v21, v22);
    v23 = *v24;
  }
  *(_DWORD *)(*(_QWORD *)v26 + v23) = v15;
  *v24 += 4;
}

uint64_t *JSC::DFG::NodeOrigin::operator=(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;

  if (a1 != a2)
  {
    v10 = *a1;
    if ((*a1 & 1) != 0 && (v10 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v11 = *a2;
    if ((*a2 & 1) != 0)
    {
      v15 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      if ((v11 & 2) != 0
        || ((v16 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v16 != 0x3FFFFFFF)
          ? (v17 = (_DWORD)v16 == -1)
          : (v17 = 1),
            v17))
      {
        v18 = 2;
      }
      else if (v16 >> 28)
      {
        v23 = v15;
        v24 = v16;
        v15 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v15 = v23;
        *(_DWORD *)(v15 + 8) = v24;
        v18 = 1;
      }
      else
      {
        v18 = v15;
        v15 = v16 << 36;
      }
      v11 = v15 | v18;
    }
    *a1 = v11;
    v12 = a1[1];
    if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v13 = a2[1];
    if ((v13 & 1) != 0)
    {
      v19 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      if ((v13 & 2) != 0
        || ((v20 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v20 != 0x3FFFFFFF)
          ? (v21 = (_DWORD)v20 == -1)
          : (v21 = 1),
            v21))
      {
        v22 = 2;
      }
      else if (v20 >> 28)
      {
        v25 = v19;
        v26 = v20;
        v19 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v19 = v25;
        *(_DWORD *)(v19 + 8) = v26;
        v22 = 1;
      }
      else
      {
        v22 = v19;
        v19 = v20 << 36;
      }
      v13 = v19 | v22;
    }
    a1[1] = v13;
  }
  *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
  return a1;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v10 = *a1;
    if ((*a1 & 1) != 0 && (v10 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v11 = *a2;
    *a2 = 0;
    *a1 = v11;
    v12 = a1[1];
    if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v13 = a2[1];
    a2[1] = 0;
    a1[1] = v13;
  }
  *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
  return a1;
}

void JSC::DFG::clobberize<JSC::DFG::SpeculativeJIT::compileCurrentBlock(void)::$_5,JSC::DFG::SpeculativeJIT::compileCurrentBlock(void)::$_6,JSC::DFG::SpeculativeJIT::compileCurrentBlock(void)::$_7,JSC::DFG::SpeculativeJIT::compileCurrentBlock(void)::$_4>(uint64_t a1, JSC::DFG::Node *this, _BYTE **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  unsigned int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  _DWORD *v21;
  _QWORD *v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  BOOL v51;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t *v95;
  unsigned int v96;
  int v97;
  BOOL v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  int v123;
  int v126;
  int v129;
  int v130;
  BOOL v131;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  BOOL v144;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  int v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  BOOL v155;
  uint64_t v157;
  int v158;
  unsigned int v159;
  BOOL v160;
  unsigned int v162;
  unsigned int *v163;
  unsigned int v164;
  unsigned int *v165;
  uint64_t v166;
  unsigned int v167;
  _DWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unsigned int *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  uint64_t v198;
  const char *v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t v209;
  __int128 v210;

  if (*(int *)(a1 + 952) <= 0 && JSC::DFG::Node::hasArrayMode(this))
  {
    v11 = *((unsigned __int16 *)this + 9);
    if (v11 > 0xC9)
    {
      if (v11 - 202 > 0x3E || ((1 << (v11 + 54)) & 0x400000000E002FEFLL) == 0)
      {
        v13 = v11 - 333;
        if (v13 > 0x3A || ((1 << v13) & 0x7A8000000000003) == 0)
        {
LABEL_39:
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:66), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:84), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:102), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2567:39)]", "Unhandled ArrayMode opcode.");
          __break(0xC471u);
          JUMPOUT(0x197B84CECLL);
        }
      }
      goto LABEL_16;
    }
    v14 = v11 - 101;
    if (v11 - 101 > 0x3E)
      goto LABEL_38;
    if (((1 << v14) & 0x7E0070000000000FLL) != 0)
      goto LABEL_16;
    if (((1 << v14) & 0x18000000000) == 0)
    {
LABEL_38:
      if (v11 - 92 >= 2)
        goto LABEL_39;
      goto LABEL_16;
    }
  }
  v15 = *((unsigned __int16 *)this + 9);
  switch(*((_WORD *)this + 9))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x43:
    case 0x45:
    case 0x47:
    case 0x48:
    case 0x4A:
    case 0x4B:
    case 0x5B:
    case 0x60:
    case 0x61:
    case 0x64:
    case 0x6D:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA9:
    case 0xAA:
    case 0xAB:
    case 0xAC:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB2:
    case 0xB3:
    case 0xB4:
    case 0xB5:
    case 0xB6:
    case 0xB7:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBE:
    case 0xBF:
    case 0xC0:
    case 0xD6:
    case 0xDA:
    case 0xDD:
    case 0xDE:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xEB:
    case 0xEC:
    case 0xEE:
    case 0xEF:
    case 0xF0:
    case 0x101:
    case 0x102:
    case 0x103:
    case 0x104:
    case 0x105:
    case 0x109:
    case 0x10C:
    case 0x10E:
    case 0x110:
    case 0x111:
    case 0x112:
    case 0x113:
    case 0x116:
    case 0x117:
    case 0x118:
    case 0x119:
    case 0x11A:
    case 0x11B:
    case 0x11C:
    case 0x11D:
    case 0x11E:
    case 0x11F:
    case 0x120:
    case 0x121:
    case 0x122:
    case 0x123:
    case 0x126:
    case 0x127:
    case 0x128:
    case 0x129:
    case 0x12A:
    case 0x12B:
    case 0x12C:
    case 0x12D:
    case 0x12E:
    case 0x12F:
    case 0x130:
    case 0x132:
    case 0x133:
    case 0x134:
    case 0x135:
    case 0x136:
    case 0x137:
    case 0x138:
    case 0x139:
    case 0x13A:
    case 0x144:
    case 0x148:
    case 0x149:
    case 0x14B:
    case 0x14C:
    case 0x153:
    case 0x154:
    case 0x157:
    case 0x158:
    case 0x159:
    case 0x15A:
    case 0x15B:
    case 0x15C:
    case 0x15D:
    case 0x15E:
    case 0x15F:
    case 0x160:
    case 0x161:
    case 0x162:
    case 0x163:
    case 0x164:
    case 0x165:
    case 0x166:
    case 0x167:
    case 0x168:
    case 0x169:
    case 0x16A:
    case 0x16B:
    case 0x16C:
    case 0x16D:
    case 0x16E:
    case 0x16F:
    case 0x170:
    case 0x171:
    case 0x172:
    case 0x173:
    case 0x174:
    case 0x175:
    case 0x176:
    case 0x177:
    case 0x178:
    case 0x179:
    case 0x17A:
    case 0x17B:
    case 0x17C:
    case 0x17D:
    case 0x17E:
    case 0x17F:
    case 0x183:
    case 0x188:
    case 0x189:
    case 0x18A:
    case 0x18B:
    case 0x18C:
    case 0x18D:
    case 0x18E:
    case 0x18F:
    case 0x190:
    case 0x191:
    case 0x192:
    case 0x193:
    case 0x194:
    case 0x196:
    case 0x197:
    case 0x198:
    case 0x19A:
    case 0x19C:
    case 0x19D:
    case 0x19E:
    case 0x19F:
    case 0x1A2:
    case 0x1A3:
    case 0x1A4:
    case 0x1A5:
    case 0x1A6:
    case 0x1A7:
    case 0x1A8:
    case 0x1A9:
    case 0x1AA:
    case 0x1AD:
    case 0x1AE:
    case 0x1AF:
    case 0x1B0:
      return;
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0x54:
    case 0x5E:
    case 0x5F:
    case 0x62:
    case 0x63:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x8E:
    case 0x8F:
    case 0xA7:
    case 0xA8:
    case 0xB0:
    case 0xB1:
    case 0xC3:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xD4:
    case 0xD5:
    case 0xD8:
    case 0xD9:
    case 0xDB:
    case 0xDC:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
    case 0x100:
    case 0x108:
    case 0x124:
    case 0x125:
    case 0x13B:
    case 0x13C:
    case 0x13D:
    case 0x140:
    case 0x141:
    case 0x147:
    case 0x14A:
    case 0x14D:
    case 0x14E:
    case 0x14F:
    case 0x150:
    case 0x151:
    case 0x152:
    case 0x155:
    case 0x156:
    case 0x181:
    case 0x184:
    case 0x185:
    case 0x186:
    case 0x187:
    case 0x19B:
      break;
    case 0xF:
      v53 = (_QWORD *)*((_QWORD *)this + 9);
      v102 = v53;
      do
      {
        v103 = v102;
        v102 = (_QWORD *)*v102;
      }
      while (v102);
      if (v103 != v53)
      {
        *v53 = v103;
        v53 = (_QWORD *)*((_QWORD *)this + 9);
      }
      v104 = v53;
      do
      {
        v55 = v104;
        v104 = (_QWORD *)*v104;
      }
      while (v104);
      goto LABEL_178;
    case 0x10:
      v53 = (_QWORD *)*((_QWORD *)this + 9);
      v99 = v53;
      do
      {
        v100 = v99;
        v99 = (_QWORD *)*v99;
      }
      while (v99);
      if (v100 != v53)
      {
        *v53 = v100;
        v53 = (_QWORD *)*((_QWORD *)this + 9);
      }
      v101 = v53;
      do
      {
        v55 = v101;
        v101 = (_QWORD *)*v101;
      }
      while (v101);
      goto LABEL_178;
    case 0x1C:
      v53 = (_QWORD *)*((_QWORD *)this + 9);
      v54 = v53;
      do
      {
        v55 = v54;
        v54 = (_QWORD *)*v54;
      }
      while (v54);
LABEL_178:
      if (v55 != v53)
        *v53 = v55;
      return;
    case 0x29:
      v96 = ((*((_QWORD *)this + 3) >> 50) & 0x3F) - 26;
      goto LABEL_222;
    case 0x2A:
    case 0x142:
    case 0x143:
      v27 = word_1ECF4C630;
      v28 = *((_BYTE *)this + 30);
      goto LABEL_52;
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x32:
    case 0x34:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
      v16 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      switch((_DWORD)v16)
      {
        case 0x1A:
          v17 = *((_QWORD *)this + 4) & 0xFC000000000000;
          v18 = 0x68000000000000;
          break;
        case 0x1C:
          v17 = *((_QWORD *)this + 4) & 0xFC000000000000;
          v18 = 0x70000000000000;
          break;
        case 0x1B:
          v17 = *((_QWORD *)this + 4) & 0xFC000000000000;
          v18 = 0x6C000000000000;
          break;
        default:
          goto LABEL_16;
      }
LABEL_121:
      if (v17 == v18)
        return;
      break;
    case 0x2C:
    case 0x2E:
    case 0x30:
    case 0x31:
    case 0x33:
    case 0x35:
      if ((*((_BYTE *)this + 30) & 0xFC) != 0)
        goto LABEL_35;
      break;
    case 0x3F:
      v97 = word_1ECF4C630;
      v98 = ((*((_QWORD *)this + 3) >> 50) & 0x3F) - 1 >= 2;
      goto LABEL_223;
    case 0x40:
    case 0x42:
    case 0x44:
      v33 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if (((*((_QWORD *)this + 3) >> 50) & 0x3F) > 0x30)
      {
        if ((_DWORD)v33 == 49 || (_DWORD)v33 == 52)
          return;
LABEL_88:
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:66), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:84), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:102), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2567:39)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x197B85028);
      }
      if ((_DWORD)v33)
      {
        if ((_DWORD)v33 == 1)
          return;
        goto LABEL_88;
      }
      break;
    case 0x41:
      v61 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      v57 = v61 > 0x34;
      v62 = (1 << v61) & 0x12000000000002;
      if (!v57 && v62 != 0)
        return;
      break;
    case 0x46:
      v48 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v48 != 1 && (_DWORD)v48 != 49)
        break;
      return;
    case 0x49:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x131:
      v24 = *((_QWORD *)this + 3) & 0xFC000000000000;
      v25 = word_1ECF4C630;
      v26 = 0xC4000000000000;
      goto LABEL_240;
    case 0x52:
    case 0x53:
      v35 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if (v35 > 0x34)
        goto LABEL_61;
      if (((1 << v35) & 0x1200001C000002) != 0)
        return;
      if (v35)
      {
LABEL_61:
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:66), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:84), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:102), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2567:39)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x197B84E20);
      }
      break;
    case 0x5C:
    case 0x5D:
      v39 = *((_DWORD *)this + 18);
      v40 = *((_DWORD *)this + 14) & 7;
      if (v40 >= 2 && v40 - 3 >= 3)
      {
        if (v40 == 7)
        {
          __break(0xC471u);
          JUMPOUT(0x197B85BD0);
        }
        __break(0xC471u);
        JUMPOUT(0x197B85E5CLL);
      }
      switch(*((_DWORD *)this + 18))
      {
        case 0u:
        case 1u:
        case 2u:
        case 4u:
        case 0x17u:
        case 0x18u:
          goto LABEL_16;
        case 3u:
        case 6u:
          return;
        case 5u:
          v97 = word_1ECF4C630;
          v98 = __CFADD__(BYTE2(v39) - 5, 2);
          goto LABEL_223;
        case 7u:
          if (BYTE2(v39) > 3u || BYTE2(v39) == 2)
            goto LABEL_16;
          v188 = *((_DWORD *)this + 6);
          v189 = *(_DWORD *)(a1 + 164);
          if (v189 <= v188)
          {
            __break(0xC471u);
            JUMPOUT(0x197B86070);
          }
          if (v189 <= v188 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197B85CA0);
          }
          return;
        case 8u:
          if (BYTE2(v39) > 3u || BYTE2(v39) == 2)
            goto LABEL_16;
          v190 = *((_DWORD *)this + 6);
          v191 = *(_DWORD *)(a1 + 164);
          if (v191 <= v190)
          {
            __break(0xC471u);
            JUMPOUT(0x197B86078);
          }
          if (v191 <= v190 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197B85CD4);
          }
          return;
        case 9u:
          if (BYTE2(v39) > 3u || BYTE2(v39) == 2)
            goto LABEL_16;
          v194 = *((_DWORD *)this + 6);
          v195 = *(_DWORD *)(a1 + 164);
          if (v195 <= v194)
          {
            __break(0xC471u);
            JUMPOUT(0x197B86080);
          }
          if (v195 <= v194 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197B85D4CLL);
          }
          return;
        case 0xAu:
        case 0xBu:
          if (BYTE2(v39) < 2u)
            return;
          goto LABEL_16;
        case 0xCu:
          if (BYTE2(v39) > 1u)
            goto LABEL_16;
          v192 = *((_DWORD *)this + 6);
          v193 = *(_DWORD *)(a1 + 164);
          if (v193 <= v192)
          {
            __break(0xC471u);
            JUMPOUT(0x197B86088);
          }
          if (v193 <= v192 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197B85D00);
          }
          return;
        case 0xDu:
          v196 = *((_DWORD *)this + 6);
          v197 = *(_DWORD *)(a1 + 164);
          if (v197 <= v196)
          {
            __break(0xC471u);
            JUMPOUT(0x197B86060);
          }
          if (v197 <= v196 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197B85D70);
          }
          return;
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          if ((v39 & 0x40000000) == 0)
          {
            v41 = *((_DWORD *)this + 6);
            v42 = *(_DWORD *)(a1 + 164);
            if (v42 <= v41)
            {
              __break(0xC471u);
              JUMPOUT(0x197B86038);
            }
            if (v42 <= v41 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197B84FC0);
            }
          }
          return;
        case 0x19u:
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:66), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:84), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:102), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2567:39)]", "impossible array mode for get");
          __break(0xC471u);
          JUMPOUT(0x197B85F80);
        default:
          __break(0xC471u);
          JUMPOUT(0x197B85F38);
      }
      return;
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
      v29 = *((_DWORD *)this + 6);
      v30 = *(_DWORD *)(a1 + 164);
      if (v30 > v29)
      {
        if (v30 > v29 + 1)
        {
          if (v30 > v29 + 2)
          {
            v31 = *((_DWORD *)this + 18);
            v32 = *((_DWORD *)this + 14) & 7;
            if (v32 >= 2 && v32 - 3 >= 3)
            {
              if (v32 == 7)
              {
                __break(0xC471u);
                JUMPOUT(0x197B85AD8);
              }
              __break(0xC471u);
              JUMPOUT(0x197B85E3CLL);
            }
            switch(*((_DWORD *)this + 18))
            {
              case 0u:
              case 1u:
              case 2u:
              case 4u:
              case 5u:
              case 6u:
              case 0xCu:
              case 0xDu:
              case 0x17u:
              case 0x18u:
                goto LABEL_16;
              case 3u:
              case 0xEu:
              case 0xFu:
              case 0x10u:
              case 0x11u:
              case 0x12u:
              case 0x13u:
              case 0x14u:
              case 0x15u:
              case 0x16u:
                return;
              case 7u:
              case 8u:
              case 9u:
              case 0xAu:
                if (BYTE2(v31) - 5 < 0xFFFFFFFE)
                  return;
                goto LABEL_16;
              case 0xBu:
                if ((v31 & 0xFE0000) == 0)
                  return;
                goto LABEL_16;
              case 0x19u:
                JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:66), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:84), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:102), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2567:39)]", "impossible array mode for put");
                __break(0xC471u);
                JUMPOUT(0x197B85C34);
              default:
                __break(0xC471u);
                JUMPOUT(0x197B85C60);
            }
          }
          __break(0xC471u);
          JUMPOUT(0x197B85FA8);
        }
        __break(0xC471u);
        JUMPOUT(0x197B85FA0);
      }
      __break(0xC471u);
      JUMPOUT(0x197B85F98);
    case 0x9C:
      v146 = *((_QWORD *)this + 9);
      v147 = *(unsigned int *)(v146 + 20);
      v148 = (v147 << 6) - 64;
      do
      {
        if (!v147)
          break;
        if (--v147 >= (unint64_t)*(unsigned int *)(v146 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x197B86028);
        }
        v149 = v148 - 64;
        v150 = JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)(*(_QWORD *)(v146 + 8) + v148));
        v148 = v149;
      }
      while (!v150);
      return;
    case 0x9D:
      JSC::DFG::MultiDeleteByOffsetData::writesStructures(*((_QWORD *)this + 9));
      return;
    case 0x9E:
      v123 = *((_DWORD *)this + 18);
      if ((v123 - 5) >= 9 && v123 != 3 && v123 != 25)
      {
        v126 = JSC::DFG::toTypedArrayType(v123);
        if (v126 == 12 || v126 == 0)
        {
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:66), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:84), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:102), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2567:39)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x197B85674);
        }
      }
      return;
    case 0x9F:
      v105 = *((_DWORD *)this + 18);
      if (v105 != 25)
      {
        v207 = JSC::DFG::toTypedArrayType(v105);
        if (v207 == 12 || v207 == 0)
        {
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:66), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:84), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:102), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2567:39)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x197B86020);
        }
      }
      if ((v105 & 0x40000000) != 0)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:66), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:84), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:102), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2567:39)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
        __break(0xC471u);
        JUMPOUT(0x197B85480);
      }
      return;
    case 0xA0:
      v142 = *((unsigned __int8 *)this + 72);
      if (v142 != 25)
      {
        v143 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)this + 72));
        v144 = v143 == 12 || v143 == 0;
        if (v144 && v142 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:66), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:84), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:102), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2567:39)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x197B85878);
        }
      }
      return;
    case 0xA1:
      if ((*((_DWORD *)this + 18) & 0xFE) != 0xA)
      {
        __break(0xC471u);
        JUMPOUT(0x197B858C8);
      }
      return;
    case 0xA2:
      v49 = *((unsigned __int8 *)this + 72);
      if (v49 != 25)
      {
        v50 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)this + 72));
        v51 = v50 == 12 || v50 == 0;
        if (v51 && v49 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:66), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:84), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:102), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2567:39)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x197B85154);
        }
      }
      return;
    case 0xA3:
      v129 = *((unsigned __int8 *)this + 72);
      if (v129 != 25)
      {
        v130 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)this + 72));
        v131 = v130 == 12 || v130 == 0;
        if (v131 && v129 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:66), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:84), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:102), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2567:39)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x197B85708);
        }
      }
      return;
    case 0xC1:
      v56 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      v57 = v56 > 0x31;
      v58 = (1 << v56) & 0x2000000200002;
      if (v57 || v58 == 0)
        break;
      v60 = *((_QWORD *)this + 4);
      if ((v60 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
      v17 = v60 & 0xFC000000000000;
      v18 = 0x4000000000000;
      goto LABEL_121;
    case 0xC2:
      v96 = ((*((_QWORD *)this + 3) >> 50) & 0x3F) - 12;
LABEL_222:
      v97 = word_1ECF4C630;
      v98 = v96 >= 3;
LABEL_223:
      if (v98 && v97 != 0)
        goto LABEL_17;
      return;
    case 0xC4:
      v140 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v140 == 11)
        return;
      if ((_DWORD)v140)
      {
        __break(0xC471u);
        JUMPOUT(0x197B857B0);
      }
      break;
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
      v19 = v15 - 202;
      if (v19 >= 0xAu || ((0x3EFu >> v19) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197B85E1CLL);
      }
      v20 = dword_199123F48[(__int16)v19];
      v21 = (_DWORD *)((char *)this + 24);
      if ((*((_BYTE *)this + 56) & 0x10) != 0)
      {
        v162 = v20 + *v21;
        if (*(_DWORD *)(a1 + 164) <= v162)
        {
          __break(0xC471u);
          JUMPOUT(0x197B86030);
        }
        v22 = (_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v162);
      }
      else
      {
        v22 = &v21[2 * v20];
      }
      if ((*v22 & 0xFF00FFFFFFFFFFFFLL) == 0 && word_1ECF4C630 != 0)
        goto LABEL_17;
      return;
    case 0xCE:
      v95 = (uint64_t *)((char *)this + 24);
      if ((*((_BYTE *)this + 56) & 0x10) != 0)
      {
        v198 = *v95;
        if (*(_DWORD *)(a1 + 164) <= v198)
        {
          __break(0xC471u);
          JUMPOUT(0x197B86068);
        }
        v95 = (uint64_t *)(*(_QWORD *)(a1 + 152) + 8 * v198);
      }
      v24 = *v95 & 0xFC000000000000;
      v25 = word_1ECF4C630;
      v26 = 0x4000000000000;
      goto LABEL_240;
    case 0xD7:
      if (*((unsigned __int8 *)this + 72) - 7 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x197B854B0);
      }
      return;
    case 0xDF:
    case 0xE0:
      if ((*((_QWORD *)this + 3) & 0xFC000000000000) != 0x54000000000000
        || (*((_QWORD *)this + 4) & 0xFC000000000000) != 0x40000000000000)
      {
        break;
      }
      v17 = *((_QWORD *)this + 5) & 0xFC000000000000;
      v18 = 0x54000000000000;
      goto LABEL_121;
    case 0xE1:
      v66 = *((_QWORD *)this + 5);
      goto LABEL_239;
    case 0xE6:
      v106 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if ((v106 - 1) < 2)
        return;
      if ((_DWORD)v106)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:66), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:84), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:102), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2567:39)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x197B85510);
      }
      break;
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
    case 0xED:
      if ((*((_BYTE *)this + 30) & 0xFC) != 0)
        return;
LABEL_35:
      v27 = word_1ECF4C630;
      v28 = *((_BYTE *)this + 38);
LABEL_52:
      if ((v28 & 0xFC) == 0 && v27 != 0)
        goto LABEL_17;
      return;
    case 0x106:
      v107 = *((_QWORD *)this + 4);
      v108 = v107;
      if ((v107 & 0x80000000) != 0)
      {
        JSC::DFG::Graph::freeze(a1, COERCE__INT64((double)v107) + 0x2000000000000, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      else
      {
        JSC::DFG::Graph::freeze(a1, v107 | 0xFFFE000000000000, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (!(_DWORD)v107)
          return;
      }
      v115 = *((unsigned __int16 *)this + 9);
      switch(v115)
      {
        case 267:
          goto LABEL_385;
        case 264:
          v116 = *((_DWORD *)this + 19);
          break;
        case 352:
LABEL_385:
          v116 = *((_DWORD *)this + 21);
          break;
        default:
          v116 = *((_DWORD *)this + 18);
          goto LABEL_194;
      }
      LOBYTE(v116) = v116 & 0xF;
LABEL_194:
      if (v116 <= 0x19u && ((1 << v116) & 0x2A003F0) != 0)
      {
        v117 = *(unsigned int *)(a1 + 428);
        if (v107 >= v117)
        {
          if ((_DWORD)v117)
          {
            v180 = *(unsigned int **)(a1 + 416);
            v181 = 4 * v117;
            do
            {
              v182 = *v180;
              if (v182 < v107)
              {
                if (*(_DWORD *)(a1 + 164) <= (v182 + *((_DWORD *)this + 6)))
                {
                  __break(0xC471u);
                  JUMPOUT(0x197B85FB0);
                }
                if ((v182 & 0x80000000) != 0)
                  v183 = COERCE__INT64((double)v182) + 0x2000000000000;
                else
                  v183 = v182 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze(a1, v183, v109, v110, v111, v112, v113, v114);
              }
              ++v180;
              v181 -= 4;
            }
            while (v181);
          }
        }
        else
        {
          v118 = 0;
          do
          {
            if (*(_DWORD *)(a1 + 164) <= (v118 + *((_DWORD *)this + 6)))
            {
              __break(0xC471u);
              JUMPOUT(0x197B85F90);
            }
            if ((v118 & 0x80000000) != 0)
              v119 = COERCE__INT64((double)v118) + 0x2000000000000;
            else
              v119 = v118 | 0xFFFE000000000000;
            JSC::DFG::Graph::freeze(a1, v119, v109, v110, v111, v112, v113, v114);
            ++v118;
          }
          while (v108 != v118);
        }
      }
      return;
    case 0x107:
      if (*((_DWORD *)this + 8))
      {
        v134 = *((_QWORD *)this + 3);
        v135 = *(_DWORD *)(a1 + 164);
        v98 = v135 >= v134;
        LODWORD(v136) = v135 - v134;
        if (v98)
          v136 = v136;
        else
          v136 = 0;
        v137 = *((unsigned int *)this + 8) - 1;
        do
        {
          if (!v136)
          {
            __break(0xC471u);
            JUMPOUT(0x197B85F88);
          }
          v138 = *(unsigned __int16 *)((*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v134++) & 0xFF00FFFFFFFFFFFFLL)
                                     + 0x12);
          v139 = v138 == 350 || v137-- == 0;
          --v136;
        }
        while (!v139);
      }
      return;
    case 0x10A:
      v120 = *((unsigned int *)this + 20);
      if ((v120 & 0x80000000) != 0)
        v121 = COERCE__INT64((double)v120) + 0x2000000000000;
      else
        v121 = v120 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze(a1, v121, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    case 0x10B:
      v67 = (uint64_t *)*((_QWORD *)this + 9);
      v68 = *v67;
      v69 = *(unsigned int *)(*v67 + 8);
      if ((v69 & 0x80000000) != 0)
        v70 = COERCE__INT64((double)v69) + 0x2000000000000;
      else
        v70 = v69 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze(a1, v70, (uint64_t)a3, a4, a5, a6, a7, a8);
      v78 = *((unsigned __int16 *)this + 9);
      switch(v78)
      {
        case 267:
          goto LABEL_383;
        case 264:
          v79 = *((_DWORD *)this + 19);
          break;
        case 352:
LABEL_383:
          v79 = *((_DWORD *)this + 21);
          break;
        default:
          v79 = *((_DWORD *)this + 18);
          goto LABEL_142;
      }
      LOBYTE(v79) = v79 & 0xF;
LABEL_142:
      v57 = v79 > 0x19u;
      v80 = (1 << v79) & 0x2A003F0;
      if (!v57 && v80 != 0)
      {
        v82 = *(unsigned int *)(a1 + 428);
        if (v82 <= v69)
        {
          v210 = 0uLL;
          if ((_DWORD)v82)
          {
            v163 = 0;
            v164 = 0;
            v165 = *(unsigned int **)(a1 + 416);
            v166 = 4 * v82;
            do
            {
              v167 = *v165;
              LODWORD(v209) = v167;
              if (v167 < v69)
              {
                if (v164 == DWORD2(v210))
                {
                  v168 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v210, v164 + 1, (unint64_t)&v209);
                  v163 = (unsigned int *)v210;
                  *(_DWORD *)(v210 + 4 * HIDWORD(v210)) = *v168;
                }
                else
                {
                  v163[v164] = v167;
                }
                v164 = ++HIDWORD(v210);
              }
              ++v165;
              v166 -= 4;
            }
            while (v166);
            if (v164)
            {
              v169 = v68 + 16;
              v170 = 4 * v164;
              do
              {
                v171 = *v163;
                if ((v171 & 0x80000000) != 0)
                  v172 = COERCE__INT64((double)v171) + 0x2000000000000;
                else
                  v172 = v171 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze(a1, v172, v72, v73, v74, v75, v76, v77);
                if ((*(_BYTE *)(v68 + 4) & 0xE) == 6)
                  v179 = *(_QWORD *)(v169 + 8 * v171) + 0x2000000000000;
                else
                  v179 = *(_QWORD *)(v169 + 8 * v171);
                JSC::DFG::Graph::freeze(a1, v179, v173, v174, v175, v176, v177, v178);
                ++v163;
                v170 -= 4;
              }
              while (v170);
              v163 = (unsigned int *)v210;
            }
            if (v163)
            {
              *(_QWORD *)&v210 = 0;
              DWORD2(v210) = 0;
              WTF::fastFree((unint64_t)v163, v71, v72, v73, v74, v75, v76, v77);
            }
          }
        }
        else if ((_DWORD)v69)
        {
          v83 = 0;
          v84 = v68 + 16;
          do
          {
            if ((v83 & 0x80000000) != 0)
              v85 = COERCE__INT64((double)v83) + 0x2000000000000;
            else
              v85 = v83 | 0xFFFE000000000000;
            JSC::DFG::Graph::freeze(a1, v85, v72, v73, v74, v75, v76, v77);
            if ((*(_BYTE *)(v68 + 4) & 0xE) == 6)
              v92 = *(_QWORD *)(v84 + 8 * v83) + 0x2000000000000;
            else
              v92 = *(_QWORD *)(v84 + 8 * v83);
            JSC::DFG::Graph::freeze(a1, v92, v86, v87, v88, v89, v90, v91);
            ++v83;
          }
          while (v69 != v83);
        }
      }
      return;
    case 0x10D:
      v64 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v64 == 52 || (_DWORD)v64 == 1)
        return;
      if ((_DWORD)v64)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:66), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:84), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:102), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2567:39)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x197B85244);
      }
      break;
    case 0x10F:
      v152 = *((_QWORD *)this + 3);
      v153 = v152 & 0xFF00FFFFFFFFFFFFLL;
      v154 = v152 & 0xFC000000000000;
      if (v153)
        v155 = v154 == 0x54000000000000;
      else
        v155 = 1;
      if (!v155 && word_1ECF4C630 != 0)
        goto LABEL_17;
      return;
    case 0x114:
      if ((JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint((JSC::DFG::Graph *)a1, this, (uint64_t)a3, a4, a5, a6, a7, a8) & 1) != 0)return;
      break;
    case 0x115:
      v151 = *(unsigned __int16 *)((*((_QWORD *)this + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v151 != 349 && v151 != 352)
        break;
      return;
    case 0x13E:
    case 0x145:
      v37 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if (v37 > 0x34)
        goto LABEL_73;
      if (((1 << v37) & 0x12026001400002) != 0)
        return;
      if (((1 << v37) & 0x101) == 0)
      {
LABEL_73:
        __break(0xC471u);
        JUMPOUT(0x197B84F08);
      }
      break;
    case 0x13F:
      v66 = *((_QWORD *)this + 3);
LABEL_239:
      v24 = v66 & 0xFC000000000000;
      v25 = word_1ECF4C630;
      v26 = 0x54000000000000;
      goto LABEL_240;
    case 0x146:
      v141 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v141 == 28)
        return;
      if ((_DWORD)v141)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:66), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:84), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:102), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2567:39)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x197B8580CLL);
      }
      break;
    case 0x180:
    case 0x182:
      if ((_DWORD)v15 != 386 || (v38 = *((unsigned __int8 *)this + 80), v38 == 1))
      {
        v43 = BYTE2(*((_DWORD *)this + 18));
        switch(*((_DWORD *)this + 18))
        {
          case 3u:
            return;
          case 7u:
            if (v43 > 1)
              goto LABEL_16;
            v44 = *((_DWORD *)this + 6);
            v45 = *(_DWORD *)(a1 + 164);
            if (v45 <= v44)
            {
              __break(0xC471u);
              JUMPOUT(0x197B86048);
            }
            if (v45 <= v44 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197B85094);
            }
            return;
          case 8u:
            if (v43 > 1)
              goto LABEL_16;
            v184 = *((_DWORD *)this + 6);
            v185 = *(_DWORD *)(a1 + 164);
            if (v185 <= v184)
            {
              __break(0xC471u);
              JUMPOUT(0x197B86050);
            }
            if (v185 <= v184 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197B85B64);
            }
            return;
          case 9u:
            if (v43 > 1)
              goto LABEL_16;
            v186 = *((_DWORD *)this + 6);
            v187 = *(_DWORD *)(a1 + 164);
            if (v187 <= v186)
            {
              __break(0xC471u);
              JUMPOUT(0x197B86058);
            }
            if (v187 <= v186 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197B85B90);
            }
            return;
          case 0xAu:
            if (v43 >= 2)
              goto LABEL_16;
            break;
          default:
            goto LABEL_16;
        }
        return;
      }
      if (v38 != 2)
        break;
      if (*(_DWORD *)(a1 + 164) <= *((_QWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x197B86040);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * *((_QWORD *)this + 3)) & 0xFC000000000000;
      v25 = word_1ECF4C630;
      v26 = 0x20000000000000;
LABEL_240:
      if (v24 != v26 && v25 != 0)
        goto LABEL_17;
      return;
    case 0x195:
      v46 = *((_DWORD *)this + 6);
      v47 = *(_DWORD *)(a1 + 164);
      if (v47 <= v46)
      {
        __break(0xC471u);
        JUMPOUT(0x197B85FB8);
      }
      if (v47 <= v46 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197B850CCLL);
      }
      return;
    case 0x199:
      v93 = *((_DWORD *)this + 6);
      v94 = *(_DWORD *)(a1 + 164);
      if (v94 <= v93)
      {
        __break(0xC471u);
        JUMPOUT(0x197B85FC0);
      }
      if (v94 <= v93 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197B85FC8);
      }
      if (v94 <= v93 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x197B85350);
      }
      return;
    case 0x1A0:
      v157 = *(_QWORD *)(*((_QWORD *)this + 9) + 16);
      if (!v157)
        break;
      v122 = *(_DWORD *)(v157 + 24);
LABEL_295:
      v158 = (unsigned __int16)v122;
      if ((unsigned __int16)v122 != HIWORD(v122))
      {
        v159 = HIWORD(v122);
        v160 = !v158 && v159 == 0xFFFF;
        if (v160 && word_1ECF4C630 != 0)
          goto LABEL_17;
      }
      return;
    case 0x1A1:
      v122 = *(_DWORD *)(*((_QWORD *)this + 9) + 48);
      goto LABEL_295;
    case 0x1AB:
    case 0x1AC:
      if ((*((_BYTE *)this + 74) & 1) == 0)
      {
        v36 = *((_DWORD *)this + 14) & 7;
        if (v36 >= 2 && v36 - 3 >= 3)
        {
          if (v36 == 7)
          {
            __break(0xC471u);
            JUMPOUT(0x197B84EA4);
          }
          __break(0xC471u);
          JUMPOUT(0x197B85E7CLL);
        }
      }
      return;
    case 0x1B1:
      __break(0xC471u);
      JUMPOUT(0x197B85E9CLL);
    default:
      v210 = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * v15];
      WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)&v210, &v209);
      if (v209)
        v199 = (const char *)(v209 + 16);
      else
        v199 = 0;
      JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:66), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:84), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2571:102), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2567:39)]", v199);
      WTF::CString::~CString((WTF::CString *)&v209, v200, v201, v202, v203, v204, v205, v206);
      __break(0xC471u);
      JUMPOUT(0x197B85F18);
  }
LABEL_16:
  if ((_BYTE)word_1ECF4C630)
LABEL_17:
    **a3 = 1;
}

void JSC::DFG::SpeculativeJIT::checkArgumentTypes(JSC::DFG::SpeculativeJIT *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t i;
  JSC::DFG::Node *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  JSC::DFG::Node *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int8x8_t v62;
  unsigned int v63;
  int v64;
  _BYTE v65[12];
  int v66[3];
  uint64_t v67;
  char v68;
  _BYTE v69[12];

  v9 = *((_QWORD *)this + 684);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this + 684) = 0;
  v10 = *((_QWORD *)this + 685);
  if ((v10 & 1) != 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this + 685) = 0;
  *((_WORD *)this + 2744) = 1;
  v11 = *((_QWORD *)this + 495);
  if (!*(_DWORD *)(v11 + 60))
  {
    __break(0xC471u);
LABEL_70:
    JUMPOUT(0x197B86BECLL);
  }
  v12 = *(_QWORD *)(v11 + 440);
  if (v12)
  {
    v13 = **(_QWORD **)(v11 + 48);
    v14 = *(_DWORD *)(v12 - 8);
    v15 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
    v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
    v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
    v18 = v14 & ((v17 >> 31) ^ v17);
    v19 = (uint64_t *)(v12 + 88 * v18);
    v20 = *v19;
    if (*v19 != v13)
    {
      v64 = 1;
      while (v20)
      {
        v18 = (v18 + v64) & v14;
        v19 = (uint64_t *)(v12 + 88 * v18);
        v20 = *v19;
        ++v64;
        if (*v19 == v13)
          goto LABEL_6;
      }
      v19 = (uint64_t *)(v12 + 88 * *(unsigned int *)(v12 - 4));
    }
  }
  else
  {
    v19 = 0;
  }
LABEL_6:
  if (*(_DWORD *)(*((_QWORD *)this + 42) + 28))
  {
    for (i = 0; i < *(unsigned int *)(*((_QWORD *)this + 42) + 28); ++i)
    {
      if (i >= *((unsigned int *)v19 + 5))
      {
        __break(0xC471u);
        JUMPOUT(0x197B86CB4);
      }
      v22 = *(JSC::DFG::Node **)(v19[1] + 8 * i);
      if (v22)
      {
        v23 = (_QWORD *)*((_QWORD *)v22 + 9);
        v24 = v23;
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
        if (v25 != v23)
          *v23 = v25;
        if (!*((_BYTE *)v25 + 40) && *((_BYTE *)v25 + 43))
        {
          if (*((_DWORD *)v25 + 14) == 1)
            goto LABEL_51;
          v26 = v25;
          do
          {
            v27 = v26;
            v26 = (_QWORD *)*v26;
          }
          while (v26);
          if (v27 != v25)
            *v25 = v27;
          v28 = v27[2];
          if (v28)
          {
            if ((v28 & 0xFFFFFFFCFFFFFFFFLL) != 0)
            {
              v29 = v25[3];
              if (HIDWORD(v29))
              {
                v30 = v25;
                do
                {
                  v31 = v30;
                  v30 = (_QWORD *)*v30;
                }
                while (v30);
                if (v31 != v25)
                  *v25 = v31;
                v32 = v31[2];
                if (v32 && (v32 & 0xFFFFFFF0FFFFFFFFLL) == 0)
                {
LABEL_51:
                  __break(0xC471u);
                  goto LABEL_70;
                }
              }
              if ((v28 & 0x2800FFFFFFF7) == 0 || (v28 & 0xFFFFD7FF00000008) != 0)
              {
                if (v28 == 0x10000000000)
                {
                  v47 = v29 << 35;
                  v48 = ((unint64_t)v29 << 35) | 0x1D;
                  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v67, this, a3, a4, a5, a6, a7, a8);
                  JSC::MacroAssemblerARM64::load64((uint64_t)this, v48, v68, v49, v50, v51, v52, v53);
                  JSC::MacroAssemblerARM64::xor64((uint64_t)this, 6, v68, v68, v54, v55, v56, v57);
                  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, v68, 4294967294, v58, v59, v60, v61, (uint64_t)v66, v62);
                  JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 1uLL, (JSC::DFG::Node *)(HIDWORD(v47) | 0x1D00000000), v22, v66);
                  if (v67)
                  {
                    v63 = v68;
                    if (v68 != -1)
                    {
                      if (v68 > 15)
                        v63 = -1;
                      --*(_DWORD *)(v67 + 12 * v63 + 4784);
                    }
                  }
                }
                continue;
              }
              if (!*((_BYTE *)this + 212))
              {
                __break(0xC471u);
                JUMPOUT(0x197B86C4CLL);
              }
              v34 = (JSC::DFG::Node *)((8 * v29) | 0x1D00000000);
              *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
              JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v29 << 35) | 0x1D, *((char *)this + 272), a4, a5, a6, a7, a8);
              JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, 16, 28, v35, v36, v37, v38, (uint64_t)v65);
              v39 = (int *)v65;
            }
            else
            {
              if (!*((_BYTE *)this + 212))
              {
                __break(0xC471u);
                JUMPOUT(0x197B86C6CLL);
              }
              v40 = v25[3];
              v34 = (JSC::DFG::Node *)((8 * v40) | 0x1D00000000);
              *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
              JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v40 << 35) | 0x1D, *((char *)this + 304), a4, a5, a6, a7, a8);
              JSC::MacroAssemblerARM64::branch64((uint64_t)this, 3, 17, 27, v41, v42, v43, v44, (uint64_t)v69);
              v39 = (int *)v69;
            }
            JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 1uLL, v34, v22, v39);
          }
        }
      }
    }
  }
  v45 = *((_QWORD *)this + 684);
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this + 684) = 2;
  v46 = *((_QWORD *)this + 685);
  if ((v46 & 1) != 0 && (v46 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v46 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this + 685) = 2;
  *((_WORD *)this + 2744) = 0;
}

uint64_t *WTF::HashMap<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::find(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t *result;
  uint64_t v9;
  int v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  result = (uint64_t *)(v2 + 88 * v7);
  v9 = *result;
  if (*result != *a2)
  {
    v10 = 1;
    while (v9)
    {
      v7 = (v7 + v10) & v3;
      result = (uint64_t *)(v2 + 88 * v7);
      v9 = *result;
      ++v10;
      if (*result == *a2)
        return result;
    }
    return (uint64_t *)(v2 + 88 * *(unsigned int *)(v2 - 4));
  }
  return result;
}

void JSC::MacroAssemblerARM64::branchTest64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int8x8_t a10@<D0>)
{
  char v10;
  int v11;
  uint8x8_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  unsigned int j;
  uint64_t v22;
  int v23;
  unsigned int v24;
  JSC::AssemblerBuffer *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  char v34;
  char v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int i;

  v10 = a3;
  v11 = a2;
  if ((_DWORD)a4 != -1)
  {
    if (a2 <= 1)
    {
      a10.i32[0] = a4;
      v14 = (uint8x8_t)vcnt_s8(a10);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.i32[0] == 1)
      {
        v15 = __clz(__rbit32(a4));
        if (*(_BYTE *)(a1 + 328))
        {
          for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
          {
            if ((i + 4) > *(_DWORD *)(a1 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
              i = *(_DWORD *)(a1 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
            i = *(_DWORD *)(a1 + 200) + 4;
          }
          *(_DWORD *)(a1 + 208) = 0;
        }
        v16 = (v15 << 26) & 0x80000000;
        v17 = v15 << 19;
        v18 = v10 & 0x1F;
        if (v11)
        {
          v19 = v16 | v18;
          v20 = v17 | 0x37000000;
        }
        else
        {
          v19 = v17 & 0xF80000 | v18 | v16;
          v20 = 905969664;
        }
        v36 = v19 | v20;
        v37 = *(_DWORD *)(a1 + 200);
        if (v37 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          v37 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v37) = v36;
        v32 = *(_DWORD *)(a1 + 200) + 4;
        *(_DWORD *)(a1 + 200) = v32;
        v38 = v32;
        if ((v32 + 4) > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          v38 = *(_DWORD *)(a1 + 200);
        }
        v34 = 0;
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v38) = -721215457;
        *(_DWORD *)(a1 + 200) += 4;
        if (*(_BYTE *)(a1 + 328))
          v35 = -120;
        else
          v35 = -124;
        goto LABEL_51;
      }
    }
    v22 = (int)a4;
    v23 = JSC::ARM64LogicalImmediate::create64((int)a4);
    if (v23 != -1)
    {
      v24 = (32 * (v10 & 0x1F)) | (v23 << 10) | 0xF200001F;
      v25 = (JSC::AssemblerBuffer *)(a1 + 56);
      v26 = *(_DWORD *)(a1 + 200);
      if (v26 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        v26 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v26) = v24;
      v27 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v27;
      if (*(_BYTE *)(a1 + 328))
      {
        while ((signed int)v27 < *(_DWORD *)(a1 + 52))
        {
          if (v27 + 4 > *(_DWORD *)(a1 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
            v27 = *(_DWORD *)(a1 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = -721215457;
          v27 = *(_DWORD *)(a1 + 200) + 4;
          *(_DWORD *)(a1 + 200) = v27;
        }
        *(_DWORD *)(a1 + 208) = 0;
      }
      v28 = v11 | 0x54000000;
LABEL_23:
      if (v27 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v25, a2, a3, a4, a5, a6, a7, a8);
        v27 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = v28;
      v31 = *(_DWORD *)(a1 + 200);
      v32 = v31 + 4;
      *(_DWORD *)(a1 + 200) = v31 + 4;
      v33 = v31 + 4;
      if ((v31 + 8) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v25, a2, a3, a4, a5, a6, a7, a8);
        v33 = *(_DWORD *)(a1 + 200);
      }
      v15 = 0;
      v34 = 0;
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v33) = -721215457;
      *(_DWORD *)(a1 + 200) += 4;
      if (*(_BYTE *)(a1 + 328))
        v35 = -122;
      else
        v35 = -126;
      v10 = -1;
      goto LABEL_51;
    }
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197B87194);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v22, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
    v29 = (32 * (v10 & 0x1F)) | 0xEA10001F;
LABEL_19:
    v30 = *(_DWORD *)(a1 + 200);
    if (v30 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v30 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v30) = v29;
    v27 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v27;
    if (*(_BYTE *)(a1 + 328))
    {
      for (; (signed int)v27 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v27)
      {
        if (v27 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          v27 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = -721215457;
        v27 = *(_DWORD *)(a1 + 200) + 4;
      }
      *(_DWORD *)(a1 + 208) = 0;
    }
    v28 = v11 | 0x54000000;
    v25 = (JSC::AssemblerBuffer *)(a1 + 56);
    goto LABEL_23;
  }
  if (a2 > 1)
  {
    v29 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a3 & 0x1F) << 16) | 0xEA00001F;
    goto LABEL_19;
  }
  if (*(_BYTE *)(a1 + 328))
  {
    for (j = *(_DWORD *)(a1 + 200); (signed int)j < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = j)
    {
      if (j + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        j = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = -721215457;
      j = *(_DWORD *)(a1 + 200) + 4;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  else
  {
    j = *(_DWORD *)(a1 + 200);
  }
  if (v11)
    v39 = -1258291200;
  else
    v39 = -1275068416;
  v40 = v10 & 0x1F | v39;
  if (j + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    j = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = v40;
  v41 = *(_DWORD *)(a1 + 200);
  v32 = v41 + 4;
  *(_DWORD *)(a1 + 200) = v41 + 4;
  v42 = v41 + 8;
  v43 = v41 + 4;
  if (v42 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v43 = *(_DWORD *)(a1 + 200);
  }
  v15 = 0;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v43) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v35 = -121;
  else
    v35 = -125;
  v34 = 1;
LABEL_51:
  *(_DWORD *)a9 = v32;
  *(_DWORD *)(a9 + 4) = v15;
  *(_BYTE *)(a9 + 8) = v35;
  *(_BYTE *)(a9 + 9) = v11;
  *(_BYTE *)(a9 + 10) = v34;
  *(_BYTE *)(a9 + 11) = v10;
}

__int128 *JSC::DFG::SpeculativeJIT::linkBranches(__int128 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  unsigned __int8 v16;
  __int16 v17;
  unsigned __int8 v18;
  __int16 v19;
  unsigned __int8 v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  int v28;
  __int128 v29;
  uint64_t v30;

  v8 = *((unsigned int *)this + 1319);
  if ((_DWORD)v8)
  {
    v9 = (uint64_t)this;
    v10 = this + 2;
    v11 = 24 * v8;
    v12 = (unsigned __int8 *)(*((_QWORD *)this + 658) + 8);
    do
    {
      v13 = *(unsigned int *)(*((_QWORD *)v12 + 1) + 8);
      if (*(_DWORD *)(v9 + 404) <= v13)
      {
        __break(0xC471u);
        JUMPOUT(0x197B87498);
      }
      v14 = *(unsigned int *)(*(_QWORD *)(v9 + 392) + 4 * v13);
      v15 = *v12;
      switch(*v12)
      {
        case 0x83u:
        case 0x87u:
          v16 = v12[1];
          v17 = v12[2];
          v18 = v12[3];
          *(_QWORD *)&v29 = *((unsigned int *)v12 - 2);
          *((_QWORD *)&v29 + 1) = v14;
          BYTE3(v30) = v16 & 0xF;
          *(_WORD *)((char *)&v30 + 1) = v15;
          v19 = v17 << 6;
          goto LABEL_7;
        case 0x84u:
        case 0x88u:
          v20 = v12[1];
          v21 = *((_WORD *)v12 - 2);
          v18 = v12[3];
          *(_QWORD *)&v29 = *((unsigned int *)v12 - 2);
          *((_QWORD *)&v29 + 1) = v14;
          BYTE3(v30) = v20 & 0xF;
          *(_WORD *)((char *)&v30 + 1) = v15;
          v19 = v21 & 0x3F;
LABEL_7:
          WORD2(v30) = v19;
          LOBYTE(v30) = v18;
          break;
        default:
          v26 = *((unsigned int *)v12 - 2);
          v27 = v12[1];
          LOBYTE(v30) = -1;
          *(_QWORD *)&v29 = v26;
          *((_QWORD *)&v29 + 1) = v14;
          BYTE3(v30) = v27 & 0xF;
          *(_WORD *)((char *)&v30 + 1) = v15;
          WORD2(v30) = 0;
          break;
      }
      v22 = *(unsigned int *)(v9 + 44);
      if ((_DWORD)v22 == *(_DWORD *)(v9 + 40))
      {
        this = (__int128 *)WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v22 + 1, (unint64_t)&v29, a4, a5, a6, a7, a8);
        v23 = *(_QWORD *)(v9 + 32) + 24 * *(unsigned int *)(v9 + 44);
        *(_QWORD *)v23 = 0;
        *(_QWORD *)(v23 + 8) = 0;
        *(_BYTE *)(v23 + 16) = -1;
        v28 = (*(unsigned __int8 *)(v23 + 19) << 16) | 0xF0000;
        *(_WORD *)(v23 + 17) = 65;
        *(_BYTE *)(v23 + 19) = BYTE2(v28);
        *(_WORD *)(v23 + 20) &= 0xFC00u;
        v24 = *this;
        v25 = *((_QWORD *)this + 2);
      }
      else
      {
        v23 = *v10 + 24 * v22;
        v24 = v29;
        v25 = v30;
      }
      *(_QWORD *)(v23 + 16) = v25;
      *(_OWORD *)v23 = v24;
      ++*(_DWORD *)(v9 + 44);
      v12 += 24;
      v11 -= 24;
    }
    while (v11);
  }
  return this;
}

_QWORD *WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<JSC::DFG::SpeculativeJIT::linkOSREntries(JSC::LinkBuffer &)::$_0>(_QWORD *result, uint64_t *a2)
{
  int v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  *result = 0;
  result[1] = 0;
  v2 = *((_DWORD *)a2 + 3);
  if (v2)
  {
    v4 = result;
    result = (_QWORD *)WTF::fastMalloc((WTF *)*((unsigned int *)a2 + 3));
    *((_DWORD *)v4 + 2) = v2;
    *v4 = result;
    v5 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = *a2;
      while (1)
      {
        v8 = *(_QWORD *)(v7 + 8 * v6);
        if (v8)
        {
          v9 = *(_QWORD **)(v8 + 72);
          v10 = v9;
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
          if (v11 != v9)
            *v9 = v11;
          if (!*((_BYTE *)v11 + 40) && *((_BYTE *)v11 + 43))
          {
            if (*((_DWORD *)v11 + 14) == 1)
            {
              LOBYTE(v8) = 3;
              goto LABEL_35;
            }
            v12 = v11;
            do
            {
              v13 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
            if (v13 != v11)
              *v11 = v13;
            v14 = v13[2];
            if (v14)
            {
              if ((v14 & 0xFFFFFFFCFFFFFFFFLL) != 0)
              {
                if (!*((_DWORD *)v11 + 7))
                  goto LABEL_29;
                v15 = v11;
                do
                {
                  v16 = v15;
                  v15 = (_QWORD *)*v15;
                }
                while (v15);
                if (v16 != v11)
                  *v11 = v16;
                v17 = v16[2];
                if (v17 && (v17 & 0xFFFFFFF0FFFFFFFFLL) == 0)
                {
                  LOBYTE(v8) = 2;
                }
                else
                {
LABEL_29:
                  if ((v14 & 0x2800FFFFFFF7) == 0 || (v14 & 0xFFFFD7FF00000008) != 0)
                  {
                    if (v14 == 0x10000000000)
                      LOBYTE(v8) = 5;
                    else
                      LOBYTE(v8) = 6;
                  }
                  else
                  {
                    LOBYTE(v8) = 4;
                  }
                }
              }
              else
              {
                LOBYTE(v8) = 1;
              }
              goto LABEL_35;
            }
          }
          LOBYTE(v8) = 6;
        }
LABEL_35:
        *((_BYTE *)result + v6++) = v8;
        if (v6 == v5)
        {
          *((_DWORD *)v4 + 3) = v5;
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t WTF::dataLog<char [5],WTF::ValueInContext<JSC::DFG::OSREntryData,JSC::DumpContext>,char [2]>(JSC::DFG::OSREntryData **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    ");
  JSC::DFG::OSREntryData::dumpInContext(*a1, v4, a1[1]);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::DFG::SpeculativeJIT::compileCheckTraps(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  JSC::DFG::Node *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t result;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char v63;

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v62, this, a3, a4, a5, a6, a7, a8);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197B87964);
  }
  v15 = v63;
  v16 = *(_QWORD *)(*((_QWORD *)this + 44) + 16) + 80;
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v16, *((char *)this + 304), v10, v11, v12, v13, v14);
  v25 = *((_DWORD *)this + 50);
  if (v25 + 4 > *((_DWORD *)this + 48))
  {
    v24 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v17, v18, v19, v20, v21, v22, v23).n128_u64[0];
    v25 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v25) = -1203764687;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xF, (uint64_t)this, 1, 17, v20, v21, v22, v23, (uint64_t)&v60, v24);
  v26 = v60;
  v27 = v61;
  v34 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v28, v29, v30, v31, v32, v33);
  v36 = v35;
  v37 = WTF::fastMalloc((WTF *)0x98);
  v38 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v37, this);
  *(_QWORD *)v38 = off_1E35746F0;
  *(_DWORD *)(v38 + 48) = v26;
  *(_QWORD *)(v38 + 52) = v27;
  v46 = *((_DWORD *)this + 50);
  for (*(_DWORD *)(v38 + 60) = v46; v46 < *((_DWORD *)this + 13); *(_DWORD *)(v37 + 60) = v46)
  {
    if ((v46 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v39, v40, v41, v42, v43, v44, v45);
      v46 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v46) = -721215457;
    v46 = *((_DWORD *)this + 50) + 4;
    *((_DWORD *)this + 50) = v46;
  }
  *((_DWORD *)this + 52) = 0;
  *(_QWORD *)v37 = off_1E3572FD0;
  *(_QWORD *)(v37 + 64) = 0xFFFFFFFFLL;
  *(_WORD *)(v37 + 72) = 0;
  *(_BYTE *)(v37 + 74) = v15;
  *(_QWORD *)(v37 + 80) = v37 + 96;
  *(_QWORD *)(v37 + 88) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v37 + 80, v15, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v44, v45);
  *(_QWORD *)v37 = &off_1E3572FA0;
  *(_QWORD *)(v37 + 128) = operationHandleTraps;
  *(_QWORD *)(v37 + 136) = v34;
  *(_QWORD *)(v37 + 144) = v36;
  v59 = v37;
  v52 = (_QWORD *)((char *)this + 5656);
  v53 = *((unsigned int *)this + 1417);
  if ((_DWORD)v53 == *((_DWORD *)this + 1416))
  {
    v55 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v52, v53 + 1, (unint64_t)&v59);
    v53 = *((unsigned int *)this + 1417);
    v54 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v53);
    v37 = *v55;
  }
  else
  {
    v54 = (uint64_t *)(*v52 + 8 * v53);
    v55 = &v59;
  }
  *v55 = 0;
  *v54 = v37;
  *((_DWORD *)this + 1417) = v53 + 1;
  v56 = v59;
  v59 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v47, v48, v49, v50, v51);
  if (v62)
  {
    v58 = v63;
    if (v63 != -1)
    {
      if (v63 > 15)
        v58 = -1;
      --*(_DWORD *)(v62 + 12 * v58 + 4784);
    }
  }
  return result;
}

uint64_t JSC::DFG::SpeculateStrictInt32Operand::SpeculateStrictInt32Operand(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  char v10;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_BYTE *)(result + 16) = -1;
  v8 = ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v8 >= *(unsigned int *)(a2 + 4004))
  {
    __break(0xC471u);
  }
  else
  {
    v9 = result;
    if (*(_BYTE *)(*(_QWORD *)(a2 + 3992) + 24 * (int)v8 + 12))
    {
      JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(a2, a3, a3, a4, a5, a6, a7, a8);
      *(_BYTE *)(v9 + 16) = v10;
    }
    return v9;
  }
  return result;
}

uint64_t JSC::DFG::StorageOperand::StorageOperand(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;

  *(_BYTE *)(result + 16) = -1;
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  v8 = ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v8 >= *(unsigned int *)(a2 + 4004))
  {
    __break(0xC471u);
  }
  else
  {
    v9 = result;
    if (*(_BYTE *)(*(_QWORD *)(a2 + 3992) + 24 * (int)v8 + 12))
      *(_BYTE *)(result + 16) = JSC::DFG::SpeculativeJIT::fillStorage(a2, a3, a3, a4, a5, a6, a7, a8);
    return v9;
  }
  return result;
}

void JSC::MacroAssemblerARM64::add32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  int v20;
  int v21;

  v8 = a4;
  v9 = a3;
  if (a2 < 0x1000)
  {
    v11 = 0;
LABEL_3:
    v12 = a4 | (32 * a3) | v11 | ((a2 & 0xFFF) << 10);
LABEL_7:
    v15 = 285212672;
LABEL_8:
    v16 = v12 | v15;
    goto LABEL_9;
  }
  v13 = -(int)a2;
  if (-(int)a2 < 0x1000)
  {
    v14 = 0x40000000;
LABEL_6:
    v12 = a4 | (32 * a3) | v14 | (v13 << 10);
    goto LABEL_7;
  }
  if ((a2 & 0xFFF) == 0)
  {
    v21 = (int)a2 >> 12;
    if (!BYTE3(a2))
    {
      v11 = 0x400000;
      a2 = ((int)a2 >> 12);
      goto LABEL_3;
    }
    v13 = -v21;
    if (-v21 < 0x1000)
    {
      v14 = 1077936128;
      goto LABEL_6;
    }
  }
  if ((_DWORD)a3 == (_DWORD)a4)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197B87CC8);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a2, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
    if (v9 != 31)
    {
      v12 = v9 & 0x1F | (32 * (v9 & 0x1F));
      v15 = 185597952;
      goto LABEL_8;
    }
    v16 = 187720703;
  }
  else
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a2, a4, a4, a5, a6, a7, a8);
    if (v9 == 31)
    {
      v12 = v8 | ((v8 & 0x1F) << 16);
      v15 = 186672096;
      goto LABEL_8;
    }
    v20 = (v9 & 0x1F) << 16;
    if (v8 != 31)
    {
      v12 = v20 | (32 * (v8 & 0x1F));
      v15 = v8 & 0x1F | 0xB000000;
      goto LABEL_8;
    }
    v16 = v20 | 0xB2063FF;
  }
LABEL_9:
  v19 = *(_DWORD *)(a1 + 200);
  v18 = (unsigned int *)(a1 + 200);
  v17 = v19;
  if (v19 + 4 > *(v18 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v18 - 36), a2, a3, a4, a5, a6, a7, a8);
    v17 = *v18;
  }
  *(_DWORD *)(*((_QWORD *)v18 - 18) + v17) = v16;
  *v18 += 4;
}

void JSC::AssemblyHelpers::branchIfNaN(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v9;
  unsigned int v12;

  v9 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (32 * v9) | (v9 << 16) | 0x1E602000;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare((uint64_t)a1, 1, a3, a4, a5, a6, a7, a8, a9);
}

void JSC::MacroAssemblerARM64::storeDouble(uint64_t a1, int a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int *v19;
  JSC::AssemblerBuffer *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v9 = a3;
  v12 = HIDWORD(a3);
  if (HIDWORD(a3) == 3 || HIDWORD(a3) == 0)
  {
    v16 = (unsigned __int16)JSC::MacroAssemblerARM64::tryFoldBaseAndOffsetPart(a1, a3, a4, a4, a5, a6, a7, a8);
    if (v16 >= 0x100)
    {
      if (BYTE4(a4) < 3u)
      {
        v26 = a2 | (32 * (char)v16) | 0xFC200800;
        v28 = *(_DWORD *)(a1 + 200);
        v27 = (unsigned int *)(a1 + 200);
        v22 = v28;
        v23 = v26 | *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a4) << 56) >> 54)) | (((v9 >> 8) & 0x1F) << 16) | (((_DWORD)v12 != 0) << 12);
        v20 = (JSC::AssemblerBuffer *)(v27 - 36);
        v24 = v28 + 4;
        v25 = *(v27 - 2);
        v19 = v27;
        goto LABEL_14;
      }
LABEL_19:
      __break(0xC471u);
      JUMPOUT(0x197B87F54);
    }
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_19;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (int)a4, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  if (BYTE4(a4) >= 3u)
  {
    __break(0xC471u);
    JUMPOUT(0x197B87F84);
  }
  v17 = *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a4) << 56) >> 54)) | (((v9 >> 8) & 0x1F) << 16) | ((v12 & 7) << 10) | 0x8B200231;
  v19 = (unsigned int *)(a1 + 200);
  v18 = *(_DWORD *)(a1 + 200);
  v20 = (JSC::AssemblerBuffer *)(a1 + 56);
  if (v18 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v14, v15, a4, a5, a6, a7, a8);
    v18 = *v19;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = v17;
  v21 = *(_DWORD *)(a1 + 200);
  v22 = v21 + 4;
  *(_DWORD *)(a1 + 200) = v21 + 4;
  v23 = a2 | (32 * (char)v9) | 0xFC316800;
  v24 = v21 + 8;
  v25 = *(_DWORD *)(a1 + 192);
LABEL_14:
  if (v24 > v25)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v20, v14, v15, a4, a5, a6, a7, a8);
    v22 = *v19;
  }
  *(_DWORD *)(*(_QWORD *)v20 + v22) = v23;
  *v19 += 4;
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int,double),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID>(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, char a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  JSC::AssemblerBuffer *v27;
  JSC::AssemblerBuffer *v28;

  v17 = WTF::fastMalloc((WTF *)0xA0);
  v18 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v17, (JSC::DFG::SpeculativeJIT *)a4);
  *(_QWORD *)v18 = off_1E35746F0;
  *(_DWORD *)(v18 + 48) = a2;
  *(_QWORD *)(v18 + 52) = a3;
  v26 = *(_DWORD *)(a4 + 200);
  *(_DWORD *)(v18 + 60) = v26;
  if (v26 < *(_DWORD *)(a4 + 52))
  {
    v27 = (JSC::AssemblerBuffer *)(a4 + 56);
    do
    {
      if ((v26 + 4) > *(_DWORD *)(a4 + 192))
      {
        v28 = v27;
        JSC::AssemblerBuffer::outOfLineGrow(v27, v19, v20, v21, v22, v23, v24, v25);
        v27 = v28;
        v26 = *(_DWORD *)(a4 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a4 + 56) + v26) = -721215457;
      v26 = *(_DWORD *)(a4 + 200) + 4;
      *(_DWORD *)(a4 + 200) = v26;
      *(_DWORD *)(v17 + 60) = v26;
    }
    while (v26 < *(_DWORD *)(a4 + 52));
  }
  *(_DWORD *)(a4 + 208) = 0;
  *(_QWORD *)v17 = off_1E3573090;
  *(_QWORD *)(v17 + 64) = 0xFFFFFFFFLL;
  *(_WORD *)(v17 + 72) = 0;
  *(_DWORD *)(v17 + 76) = 0;
  *(_QWORD *)(v17 + 80) = v17 + 96;
  *(_QWORD *)(v17 + 88) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a4, 0, v17 + 80, 0xFFFFFFFFLL, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v24, v25);
  *(_QWORD *)v17 = &off_1E3573060;
  *(_QWORD *)(v17 + 128) = a5;
  *(_QWORD *)(v17 + 136) = a6;
  *(_QWORD *)(v17 + 144) = a7;
  *(_BYTE *)(v17 + 152) = a8;
  *(_BYTE *)(v17 + 153) = a9;
  *(_BYTE *)(v17 + 154) = a10;
  *a1 = v17;
}

void JSC::DFG::SpeculativeJIT::compilePutByVal(JSC::DFG::SpeculativeJIT *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  JSC::DFG::Node *v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  char v34;
  char v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  JSC::DFG::Node *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  JSC::DFG::Node *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  _BOOL4 v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  JSC::DFG::Node *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  _BYTE *v119;
  uint64_t (*v120)(uint64_t, _DWORD *, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t (*v121)(uint64_t, _DWORD *, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  char **v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  unsigned int v143;
  char v144;
  char *v145;
  char v146;
  char v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  char v165;
  unint64_t v166;
  unint64_t v167;
  char v168;
  char v169;
  unint64_t v170;
  unsigned __int8 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  JSC::DFG::Node *v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  char v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unsigned int v204;
  JSC::DFG::Node *v205;
  int v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  char v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  char v215;
  unsigned int v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  JSC::DFG::Node *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  _BYTE *v238;
  uint64_t (*v239)(JSC::JSGlobalObject *, WTF::AtomStringImpl *, JSC::JSRopeString *, const JSC::PropertyTable *, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t (*v240)(JSC::JSGlobalObject *, unint64_t, JSC::JSRopeString *, const JSC::PropertyTable *, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  char v250;
  char v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  char v269;
  char v270;
  unint64_t v271;
  unint64_t v272;
  int v273;
  unint64_t v274;
  char v275;
  unint64_t v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  uint64_t i;
  uint64_t v300;
  char *v301;
  uint64_t j;
  uint64_t v303;
  unsigned int v304;
  char v305;
  unsigned __int8 *v306;
  uint64_t v307;
  unsigned int *v308;
  unsigned int v309;
  unsigned int *v310;
  unsigned int v311;
  int v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  char v316;
  char v317;
  char v318;
  int v319;
  void *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  void *v333;
  void *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unsigned int v341;
  _DWORD *v342;
  uint64_t *v343;
  int v344;
  _DWORD *v345;
  uint64_t *v346;
  uint64_t v347;
  int v348;
  unint64_t v349;
  JSC::DFG::Node *v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  char v354;
  char v355;
  unsigned int v356;
  unint64_t v357;
  unint64_t v358;
  char v359;
  char v360;
  uint64_t v361;
  unsigned int v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t v367;
  uint64_t v368;
  unsigned int v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int v373;
  unint64_t v374;
  JSC::DFG::Node *v375;
  unint64_t v376;
  int v377;
  int v378;
  int v379;
  JSC::DFG::Node *v380;
  int v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  _BOOL4 v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  int v416;
  char v417;
  unsigned int v418;
  char *v419;
  char v420;
  BOOL v421;
  char v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  char v428;
  uint64_t v429;
  uint64_t v430;
  unsigned int v431;
  unint64_t v432;
  unint64_t v433;
  unint64_t v434;
  unint64_t v435;
  char v436;
  char v437;
  unint64_t v438;
  unint64_t v439;
  unsigned int v440;
  unint64_t v441;
  unint64_t v442;
  unsigned __int8 v443;
  uint64_t v444;
  _DWORD *v445;
  unsigned int v446;
  unsigned int v447;
  unsigned int v448;
  unsigned int *v449;
  unsigned int v450;
  int v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  int v458;
  char v459;
  char v460;
  char v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  _DWORD *v471;
  unsigned int v472;
  int v473;
  _BYTE *v474;
  uint64_t v475;
  uint64_t v476;
  void *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  WTF *v485;
  int v487;
  int v488;
  int v489;
  int v490;
  int v491;
  __int16 v492;
  int v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  __int128 v497;
  _QWORD *v498;
  uint64_t v499;
  _QWORD *v500;
  uint64_t *v501;
  uint64_t v502;
  void *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  char v511;
  char v512;
  char v513;
  char v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  unsigned int v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  char v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  unsigned int v549;
  int v550;
  int v551;
  unsigned int v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unsigned int v562;
  unsigned int v563;
  char *v564;
  char v565;
  char *v566;
  char v567;
  char v568;
  unint64_t v569;
  unint64_t v570;
  unint64_t v571;
  unint64_t v572;
  unint64_t v573;
  char v574;
  char v575;
  unint64_t v576;
  unint64_t v577;
  char v578;
  char v579;
  unsigned __int8 v580;
  unsigned __int16 *v581;
  int v582;
  int v583;
  uint64_t v584;
  int v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  int v595;
  unsigned int v596;
  _DWORD *v597;
  uint64_t *v598;
  int v599;
  char v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  unsigned __int8 v616;
  unsigned __int8 v617;
  unsigned __int8 v618;
  int v619;
  char v620;
  JSC::DFG::Node *v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  void *v629;
  void *v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  unsigned int v637;
  unsigned int v638;
  unsigned int v639;
  char v640;
  JSC::DFG::Node *v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  void *v647;
  void *v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  unint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  int8x8_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  unsigned int v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  int v691;
  unsigned int v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  JSC::DFG::Node *v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  void *v734;
  JSC::DFG::Node *v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  _BYTE *v741;
  uint64_t v742;
  uint64_t v743;
  int v744;
  unsigned __int8 *v745;
  JSC::DFG::Node *v746;
  int v747;
  JSC::DFG::Node *v748;
  JSC::DFG::Node *v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  unsigned int v753;
  int *v754;
  _BYTE *v755;
  _BYTE *v756;
  uint64_t v757;
  int v758;
  int v759;
  _BYTE *v760;
  uint64_t v761;
  int *v762;
  uint64_t v763;
  unsigned int v764;
  char v765;
  uint64_t v766;
  int v767;
  _BYTE *v768;
  uint64_t v769;
  uint64_t v770;
  unsigned int v771;
  int v772;
  _BYTE *v773;
  uint64_t v774;
  uint64_t v775;
  void *v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  unint64_t v783;
  unint64_t v785;
  unint64_t v786;
  unint64_t v787;
  _QWORD *v788;
  uint64_t v789;
  uint64_t *v790;
  uint64_t *v791;
  uint64_t v792;
  unint64_t v793;
  JSC::DFG::Node *v794;
  char v795;
  char v796;
  char v797;
  char v798;
  char v799;
  JSC::DFG::Node *v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  void *v806;
  void *v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  void *v811;
  uint64_t v812;
  uint64_t v813;
  unint64_t v814;
  char v815;
  JSC::AssemblerBuffer *v816;
  unsigned __int8 v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  char v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  BOOL v841;
  uint64_t v842;
  void *v843;
  uint64_t v844;
  WTF *v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  unsigned __int8 v849;
  int v850;
  char v851;
  unint64_t v852;
  uint64_t v853;
  uint64_t v854;
  int v855;
  JSC::DFG::Node *v856;
  JSC::DFG::Node *v857;
  JSC::DFG::Node *v858;
  JSC::DFG::Node *v859;
  unint64_t v860;
  JSC::DFG::Node *v861;
  JSC::DFG::Node *v862;
  JSC::DFG::Node *v863;
  JSC::DFG::Node *v864;
  JSC::DFG::Node *v865;
  unsigned int v866;
  JSC::DFG::Node *v867;
  JSC::DFG::Node *v868;
  JSC::DFG::Node *v869;
  char v870;
  JSC::DFG::Node *v871;
  JSC::DFG::Node *v872;
  JSC::DFG::Node *v873;
  char v874;
  char v875;
  unint64_t v876;
  char v877;
  char v878;
  JSC::DFG::Node *v880;
  _BYTE *v881;
  unsigned int v882;
  _BYTE v883[24];
  uint64_t v884;
  _DWORD v885[2];
  char v886;
  __int16 v887;
  char v888;
  int v889[3];
  int v890;
  uint64_t v891;
  int v892;
  uint64_t v893;
  __int128 v894;
  _BYTE v895[24];
  uint64_t v896;
  WTF *v897;
  unsigned int v898;
  unsigned int v899;
  _BYTE v900[28];
  int v901;
  uint64_t v902;
  WTF *v903;
  int v904;
  uint64_t v905;
  uint64_t v906;
  __int128 v907;
  _BYTE v908[4];
  int v909;
  int v910;
  int v911;
  int v912;
  int v913;
  __int16 v914;
  int v915;
  uint64_t v916;
  unint64_t v917;
  __int128 v918;
  _BYTE v919[4];
  int v920;
  int v921;
  int v922;
  int v923;
  int v924;
  __int16 v925;
  int v926;
  uint64_t v927;
  uint64_t v928;
  int *v929;
  uint64_t v930;
  int v931[6];
  __int128 v932;
  _BYTE v933[24];
  uint64_t v934;
  int v935;
  uint64_t v936;
  unsigned int v937[3];
  _BYTE v938[24];

  v9 = *(unsigned __int16 *)(a2 + 18);
  if (v9 == 146)
    v10 = *(_DWORD *)(a2 + 80);
  else
    v10 = *(_DWORD *)(a2 + 72);
  v11 = v10 > 0xDu || ((1 << v10) & 0x3020) == 0;
  if (v11)
    v12 = v10;
  else
    v12 = 4;
  v13 = *((_QWORD *)this + 495);
  v14 = *(_QWORD *)(a2 + 24);
  v15 = *(_DWORD *)(v13 + 164);
  if (v15 <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197B8BDC4);
  }
  v16 = v14 + 1;
  if (v15 <= (int)v14 + 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197B8BDCCLL);
  }
  v17 = *(_QWORD *)(a2 + 24);
  v18 = *(_QWORD *)(v13 + 152);
  v19 = *(_QWORD *)(v18 + 8 * v17);
  v20 = *(_QWORD *)(v18 + 8 * v16);
  v917 = v20;
  if (v15 <= (int)v14 + 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197B8BDD4);
  }
  if (v15 <= (int)v14 + 3)
  {
    __break(0xC471u);
    JUMPOUT(0x197B8BDDCLL);
  }
  v21 = *(_QWORD *)(v18 + 8 * (v14 + 2));
  switch((char)v12)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 12:
    case 13:
    case 25:
      JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v13, (JSC::DFG::Node *)a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0xB76, "void JSC::DFG::SpeculativeJIT::compilePutByVal(Node *)", "Bad array mode type");
      __break(0xC471u);
      JUMPOUT(0x197B8B5D0);
    case 4:
    case 23:
    case 24:
      if ((v9 - 101) >= 2)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v13, (JSC::DFG::Node *)a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0xB7D, "void JSC::DFG::SpeculativeJIT::compilePutByVal(Node *)", "node->op() == PutByVal || node->op() == PutByValDirect");
        __break(0xC471u);
        JUMPOUT(0x197B8BE88);
      }
      v199 = *(_QWORD *)(v13 + 1024);
      if (!v199)
        goto LABEL_220;
      v200 = *(_DWORD *)(v199 - 8);
      v201 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      v202 = 9 * ((v201 + ~(v201 << 13)) ^ ((v201 + ~(v201 << 13)) >> 8));
      v203 = (v202 ^ (v202 >> 15)) + ~((v202 ^ (v202 >> 15)) << 27);
      v204 = v200 & ((v203 >> 31) ^ v203);
      v205 = *(JSC::DFG::Node **)(v199 + 8 * v204);
      if (v205 == (JSC::DFG::Node *)a2)
        goto LABEL_137;
      v206 = 1;
      while (v205)
      {
        v204 = (v204 + v206) & v200;
        v205 = *(JSC::DFG::Node **)(v199 + 8 * v204);
        ++v206;
        if (v205 == (JSC::DFG::Node *)a2)
          goto LABEL_137;
      }
LABEL_220:
      if ((v19 & 0xF8000000000000) == 0x20000000000000)
      {
        v271 = v19 & 0xFF00FFFFFFFFFFFFLL;
        if ((v19 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_451;
        v272 = ~*(_DWORD *)((v19 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        if (v272 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197B8BE90);
        }
        if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v272 + 12))
          v273 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v19, a3, a4, a5, a6, a7, a8);
        else
LABEL_451:
          v273 = 255;
        if ((v20 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_452;
        v274 = ~*(_DWORD *)((v20 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        if (v274 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197B8BE98);
        }
        if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v274 + 12))
          v275 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v20, a3, a4, a5, a6, a7, a8);
        else
LABEL_452:
          v275 = -1;
        v863 = (JSC::DFG::Node *)(v21 & 0xFF00FFFFFFFFFFFFLL);
        if ((v21 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_453;
        v276 = ~*(_DWORD *)((v21 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        if (v276 < *((unsigned int *)this + 1001))
        {
          if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v276 + 12))
          {
            v876 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v21, a3, a4, a5, a6, a7, a8);
LABEL_233:
            if ((_BYTE)v273 == 0xFF)
              v273 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v19, a3, a4, a5, a6, a7, a8);
            if (v275 == -1)
              v275 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v20, a3, a4, a5, a6, a7, a8);
            if ((_BYTE)v876 == 0xFF)
              v876 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v21, a3, a4, a5, a6, a7, a8);
            v870 = v275;
            if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
            {
              v862 = 0;
              v277 = 255;
            }
            else
            {
              JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v918, this, a3, a4, a5, a6, a7, a8);
              v862 = (JSC::DFG::Node *)v918;
              v277 = BYTE8(v918);
            }
            LODWORD(v872) = v277;
            JSC::DFG::SpeculativeJIT::speculate(this, a2, v19, a4, a5, a6, a7, a8);
            JSC::DFG::SpeculativeJIT::speculate(this, v278, v917, v279, v280, v281, v282, v283);
            JSC::DFG::SpeculativeJIT::speculate(this, v284, v21, v285, v286, v287, v288, v289);
            v295 = a2;
            v296 = *(_QWORD *)a2;
            if ((*(_QWORD *)a2 & 1) != 0)
            {
              v836 = *(_QWORD *)(v296 & 0xFFFFFFFF8);
              if ((v296 & 2) != 0
                || (v837 = *(unsigned int *)((v296 & 0xFFFFFFFF8) + 8), (_DWORD)v837 == 0x3FFFFFFF)
                || (_DWORD)v837 == -1)
              {
                v838 = 2;
              }
              else if (v837 >> 28)
              {
                v846 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v846 = v836;
                *(_DWORD *)(v846 + 8) = v837;
                v838 = 1;
                v836 = v846;
              }
              else
              {
                v838 = *(_QWORD *)(v296 & 0xFFFFFFFF8);
                v836 = v837 << 36;
              }
              v296 = v836 | v838;
              v295 = a2;
            }
            *(_QWORD *)v938 = v296;
            v297 = JSC::DFG::SpeculativeJIT::recordCallSiteAndGenerateExceptionHandlingOSRExitIfNeeded(this, (const JSC::CodeOrigin *)v938, *((unsigned int *)this + 1411), v290, v291, v292, v293, v294);
            v298 = 0;
            v126 = (char *)this + 4776;
            for (i = 15; i != -1; --i)
            {
              if ((char)i <= 15)
                v300 = i;
              else
                v300 = 0xFFFFFFFFLL;
              if (*(_DWORD *)&v126[12 * v300 + 8] || *(_DWORD *)&v126[12 * v300] != 0x3FFFFFFF)
              {
                if ((i & 0x40) != 0)
                  goto LABEL_840;
                v298 |= 1 << i;
              }
            }
            v301 = (char *)this + 4968;
            for (j = 0x16u; j != -1; --j)
            {
              v303 = JSC::FPRInfo::toRegister::registerForIndex[j];
              v304 = JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v303];
              if (*(_DWORD *)&v301[12 * v304 + 8] || *(_DWORD *)&v301[12 * v304] != 0x3FFFFFFF)
              {
                v305 = v303 + 32;
                if ((v305 & 0x40) != 0)
                  goto LABEL_840;
                v298 |= 1 << v305;
              }
            }
            v856 = (JSC::DFG::Node *)(v20 & 0xFF00FFFFFFFFFFFFLL);
            *(_QWORD *)&v894 = v298 | 0xFF00FFFC0000;
            *((_QWORD *)&v894 + 1) = 0;
            LODWORD(v29) = *(unsigned __int16 *)(v295 + 18);
            if ((_DWORD)v29 == 6)
              goto LABEL_257;
            if (*(unsigned __int16 *)(v295 + 18) <= 0x74u)
            {
              if (((_DWORD)v29 - 101) < 4)
                goto LABEL_507;
            }
            else
            {
              v568 = (_BYTE)v29 - 117;
              if (((_DWORD)v29 - 117) <= 0x3C)
              {
                if (((1 << v568) & 0x100000000000201FLL) != 0)
                {
LABEL_507:
                  v306 = (unsigned __int8 *)(v295 + 80);
                  goto LABEL_258;
                }
                if (((1 << v568) & 0x4020) != 0)
                  goto LABEL_257;
              }
              if ((_DWORD)v29 == 391)
                goto LABEL_507;
              if ((_DWORD)v29 == 253)
              {
LABEL_257:
                v306 = (unsigned __int8 *)(v295 + 72);
LABEL_258:
                v32 = *v306;
                v852 = v271;
                v866 = v273;
                if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
                {
                  v307 = *((_QWORD *)this + 46);
                  if (v307)
                  {
                    v308 = (unsigned int *)(v307 + 8);
                    do
                      v309 = __ldaxr(v308);
                    while (__stlxr(v309 + 1, v308));
                  }
                  v42 = WTF::fastMalloc((WTF *)0x90);
                  *(_QWORD *)v42 = 2;
                  *(_DWORD *)(v42 + 96) = 0;
                  *(_OWORD *)(v42 + 12) = 0u;
                  *(_OWORD *)(v42 + 28) = 0u;
                  *(_DWORD *)(v42 + 44) = 0;
                  *(_QWORD *)(v42 + 64) = 0;
                  *(_QWORD *)(v42 + 72) = 0;
                  *(_QWORD *)(v42 + 56) = 0;
                  *(_QWORD *)(v42 + 104) = 0;
                  *(_QWORD *)(v42 + 112) = -1;
                  *(_WORD *)(v42 + 120) = -1;
                  *(_DWORD *)(v42 + 122) = 0x10000;
                  *(_BYTE *)(v42 + 126) = 0;
                  *(_BYTE *)(v42 + 127) = BYTE12(xmmword_1ECF4C260);
                  *(_BYTE *)(v42 + 128) = 0;
                  *(_WORD *)(v42 + 129) &= 0xFC00u;
                  *(_QWORD *)(v42 + 136) = 0;
                  *(_QWORD *)(v42 + 136) = *(_QWORD *)(v307 + 184);
                  *(_QWORD *)(v307 + 184) = v42;
                  v310 = (unsigned int *)(v307 + 8);
                  do
                    v311 = __ldaxr(v310);
                  while (__stlxr(v311 - 1, v310));
                  if (v311 == 1)
                  {
                    atomic_store(1u, (unsigned int *)(v307 + 8));
                    (*(void (**)(uint64_t))(*(_QWORD *)v307 + 32))(v307);
                  }
                  v312 = 0;
                  v313 = 0;
                }
                else
                {
                  v313 = *((_DWORD *)this + 968);
                  v42 = WTF::SegmentedVector<JSC::DFG::UnlinkedStructureStubInfo,8ul>::alloc<>((uint64_t)this + 3872);
                  v312 = 2;
                }
                v929 = (int *)v42;
                LODWORD(v930) = v312;
                v931[0] = v313;
                v125 = *((_QWORD *)this + 42);
                v314 = v296;
                v315 = v930;
                v860 = v296;
                if ((v296 & 1) != 0)
                {
                  v839 = *(_QWORD *)(v296 & 0xFFFFFFFF8);
                  if ((v860 & 2) != 0
                    || ((v840 = *(unsigned int *)((v860 & 0xFFFFFFFF8) + 8), (_DWORD)v840 != 0x3FFFFFFF)
                      ? (v841 = (_DWORD)v840 == -1)
                      : (v841 = 1),
                        v841))
                  {
                    v842 = 2;
                  }
                  else if (v840 >> 28)
                  {
                    v847 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v847 = v839;
                    *(_DWORD *)(v847 + 8) = v840;
                    v842 = 1;
                    v839 = v847;
                  }
                  else
                  {
                    v842 = *(_QWORD *)(v860 & 0xFFFFFFFF8);
                    v839 = v840 << 36;
                  }
                  v314 = v839 | v842;
                }
                v906 = v314;
                if (v32)
                  v316 = 13;
                else
                  v316 = 12;
                if (v32)
                  v317 = 11;
                else
                  v317 = 10;
                if ((_DWORD)v29 == 101)
                  v318 = v316;
                else
                  v318 = v317;
                v319 = v297;
                v122 = v866;
                v34 = v870;
                v123 = v876;
                BYTE1(v848) = (_BYTE)v872;
                LOBYTE(v848) = -1;
                JSC::JITPutByValGenerator::JITPutByValGenerator((uint64_t)&v907, v125, v42, v315, 0, &v906, v319, v318, (uint64_t)&v894, v866, 0, v870, 0, v876, v848);
                if ((v906 & 1) != 0 && (v906 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v906 & 0xFFFFFFFF8, v320, v321, v322, v323, v324, v325, v326);
                *(_QWORD *)&v918 = this;
                *((_QWORD *)&v918 + 1) = &v917;
                if ((_DWORD)v930 != -1)
                {
                  *(_QWORD *)&v932 = &v918;
                  ((void (*)(__int128 *, int **))off_1E35729D8[v930])(&v932, &v929);
                  *(_QWORD *)&v932 = v933;
                  *((_QWORD *)&v932 + 1) = 2;
                  if ((_DWORD)v29 == 101)
                  {
                    v333 = operationDirectPutByValSloppyOptimize;
                    v334 = operationDirectPutByValStrictOptimize;
                  }
                  else
                  {
                    v333 = operationPutByValSloppyOptimize;
                    v334 = operationPutByValStrictOptimize;
                  }
                  if (v32)
                    v335 = (uint64_t)v333;
                  else
                    v335 = (uint64_t)v334;
                  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
                  {
                    JSC::JITGetByValGenerator::generateFastPath((JSC::JITGetByValGenerator *)&v907, this, v327, v328, v329, v330, v331, v332);
                    v901 = v915;
                    v902 = v916;
                    v341 = HIDWORD(v932);
                    if (v915 != -1)
                    {
                      if (HIDWORD(v932) == DWORD2(v932))
                      {
                        v342 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v932, (void *)(HIDWORD(v932) + 1), (unint64_t)&v901, v336, v337, v338, v339, v340);
                        v344 = *v342;
                        v343 = (uint64_t *)(v342 + 1);
                        v345 = (_DWORD *)(v932 + 12 * HIDWORD(v932));
                        *v345 = v344;
                        v346 = (uint64_t *)(v345 + 1);
                      }
                      else
                      {
                        v471 = (_DWORD *)(v932 + 12 * HIDWORD(v932));
                        *v471 = v915;
                        v346 = (uint64_t *)(v471 + 1);
                        v343 = &v902;
                      }
                      *v346 = *v343;
                      v341 = ++HIDWORD(v932);
                    }
                    v472 = v341;
                    v897 = (WTF *)v900;
                    v898 = 2;
                    v899 = v341;
                    if (v341 < 3)
                    {
                      v474 = v900;
                    }
                    else
                    {
                      if (v341 >= 0x15555556)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197B8BF18);
                      }
                      v473 = 12 * v341;
                      v474 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v341));
                      v898 = (v473 & 0xFFFFFFFC) / 0xC;
                      v897 = (WTF *)v474;
                      v472 = HIDWORD(v932);
                      v341 = HIDWORD(v932);
                    }
                    if (v341)
                    {
                      v475 = v932;
                      v476 = v932 + 12 * v472;
                      do
                      {
                        *(_DWORD *)v474 = *(_DWORD *)v475;
                        *(_QWORD *)(v474 + 4) = *(_QWORD *)(v475 + 4);
                        v475 += 12;
                        v474 += 12;
                      }
                      while (v475 != v476);
                    }
                    JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>((uint64_t *)&v897, this, v335, 0, v866, v870, v876, *((uint64_t *)&v907 + 1), (uint64_t *)&v918);
                    v484 = v918;
                    *(_QWORD *)&v918 = 0;
                    v485 = v897;
                    if (v900 != (_BYTE *)v897 && v897 != 0)
                    {
                      v897 = 0;
                      v898 = 0;
                      WTF::fastFree((unint64_t)v485, v477, v478, v479, v480, v481, v482, v483);
                    }
                  }
                  else
                  {
                    JSC::JITInlineCacheGenerator::generateDFGDataICFastPath((uint64_t)&v907, (uint64_t)this, v931[0], (char)v872, v329, v330, v331, v332);
                    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v903, (uint64_t *)&v932);
                    JSC::DFG::slowPathICCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,decltype(nullptr)>((uint64_t *)&v903, this, v931[0], (char)v872, v872 | 0x3000000000, v335, 0, v866, (uint64_t *)&v918, v870, v876, (char)v872);
                    v484 = v918;
                    *(_QWORD *)&v918 = 0;
                    v845 = v903;
                    if (&v905 != (uint64_t *)v903 && v903)
                    {
                      v903 = 0;
                      v904 = 0;
                      WTF::fastFree((unint64_t)v845, v843, v844, v479, v480, v481, v482, v483);
                    }
                  }
                  v918 = v907;
                  v919[0] = v908[0];
                  v487 = v909;
                  v488 = v910;
                  v920 = v909;
                  v921 = v910;
                  v489 = v911;
                  v490 = v912;
                  v922 = v911;
                  v923 = v912;
                  v491 = v913;
                  v924 = v913;
                  v492 = v914;
                  v925 = v914;
                  v493 = v915;
                  v926 = v915;
                  v494 = v916;
                  v927 = v916;
                  v928 = v484;
                  v495 = *((unsigned int *)this + 453);
                  if ((_DWORD)v495 == *((_DWORD *)this + 452))
                  {
                    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPutByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::InlineCacheWrapper<JSC::JITPutByValGenerator>>((uint64_t)this + 1800, (unint64_t)&v918);
                  }
                  else
                  {
                    v496 = *((_QWORD *)this + 225) + (v495 << 6);
                    v497 = v907;
                    *(_BYTE *)(v496 + 16) = v908[0];
                    *(_OWORD *)v496 = v497;
                    *(_DWORD *)(v496 + 20) = v487;
                    *(_DWORD *)(v496 + 24) = v488;
                    *(_DWORD *)(v496 + 28) = v489;
                    *(_DWORD *)(v496 + 32) = v490;
                    *(_DWORD *)(v496 + 36) = v491;
                    *(_WORD *)(v496 + 40) = v492;
                    *(_DWORD *)(v496 + 44) = v493;
                    *(_QWORD *)(v496 + 48) = v494;
                    *(_QWORD *)(v496 + 56) = v484;
                    ++*((_DWORD *)this + 453);
                  }
                  v896 = v484;
                  v498 = (_QWORD *)((char *)this + 5656);
                  v499 = *((unsigned int *)this + 1417);
                  if ((_DWORD)v499 == *((_DWORD *)this + 1416))
                  {
                    v501 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v498, v499 + 1, (unint64_t)&v896);
                    v499 = *((unsigned int *)this + 1417);
                    v500 = (_QWORD *)(*((_QWORD *)this + 707) + 8 * v499);
                    v484 = *v501;
                  }
                  else
                  {
                    v500 = (_QWORD *)(*v498 + 8 * v499);
                    v501 = &v896;
                  }
                  *v501 = 0;
                  *v500 = v484;
                  *((_DWORD *)this + 1417) = v499 + 1;
                  v502 = v896;
                  v896 = 0;
                  if (v502)
                    (*(void (**)(uint64_t))(*(_QWORD *)v502 + 8))(v502);
                  JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, a2, 0, v479, v480, v481, v482, v483);
                  v510 = v932;
                  if (v933 != (_BYTE *)v932 && (_QWORD)v932)
                  {
                    *(_QWORD *)&v932 = 0;
                    DWORD2(v932) = 0;
                    WTF::fastFree(v510, v503, v504, v505, v506, v507, v508, v509);
                  }
                  if ((v860 & 1) != 0 && (v860 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v860 & 0xFFFFFFFF8, v503, v504, v505, v506, v507, v508, v509);
                  if (v862 && (_DWORD)v872 != 255)
                  {
                    if ((char)v872 > 15)
                      v511 = -1;
                    else
                      v511 = (char)v872;
                    --*((_DWORD *)v862 + 3 * v511 + 1196);
                  }
                  if (v863)
                  {
                    if ((char)v876 > 15)
                      v512 = -1;
                    else
                      v512 = v876;
                    --*(_DWORD *)&v126[12 * v512 + 8];
                  }
                  if (v856)
                  {
                    if (v870 > 15)
                      v513 = -1;
                    else
                      v513 = v870;
                    --*(_DWORD *)&v126[12 * v513 + 8];
                  }
                  if (!v852)
                    return;
                  if ((char)v866 > 15)
                    v514 = -1;
                  else
                    v514 = v866;
                  v148 = &v126[12 * v514];
LABEL_93:
                  --*((_DWORD *)v148 + 2);
                  return;
                }
                std::__throw_bad_variant_access[abi:sn180100]();
LABEL_812:
                v880 = v816;
                JSC::AssemblerBuffer::outOfLineGrow(v816, v128, v129, v130, v131, v132, v133, v134);
                v816 = v880;
                v135 = *((_DWORD *)this + 50);
                while (1)
                {
                  *(_DWORD *)(*((_QWORD *)this + 7) + v135) = v315;
                  v135 = *((_DWORD *)this + 50) + 4;
                  *((_DWORD *)this + 50) = v135;
                  *((_DWORD *)v126 + 15) = v135;
                  if (v135 >= *((_DWORD *)this + 13))
                    goto LABEL_64;
LABEL_741:
                  if ((v135 + 4) > *((_DWORD *)this + 48))
                    goto LABEL_812;
                }
              }
            }
            __break(0xC471u);
            JUMPOUT(0x197B8B680);
          }
LABEL_453:
          v876 = 255;
          goto LABEL_233;
        }
        __break(0xC471u);
        goto LABEL_840;
      }
LABEL_137:
      if ((v19 & 0xF8000000000000) != 0x20000000000000)
        goto LABEL_555;
      v207 = (v20 >> 50) & 0x3F;
      if ((_DWORD)v207 != 21)
      {
        if ((_DWORD)v207 == 25)
        {
          JSC::DFG::SpeculativeJIT::compilePutByValForCellWithSymbol(this, (JSC::DFG::Node *)a2, a3, a4, a5, a6, a7, a8);
          return;
        }
LABEL_555:
        JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v918, (uint64_t)this, v19, 0, a5, a6, a7, a8);
        JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v907, (uint64_t)this, v917, 0, v601, v602, v603, v604);
        JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v932, (uint64_t)this, v21, 0, v605, v606, v607, v608);
        v616 = v919[0];
        if (v919[0] == 255)
        {
          v616 = JSC::DFG::SpeculativeJIT::fillJSValue(v918, *((uint64_t *)&v918 + 1), v610, v611, v612, v613, v614, v615);
          v919[0] = v616;
        }
        v617 = v908[0];
        if (v908[0] == 255)
        {
          v617 = JSC::DFG::SpeculativeJIT::fillJSValue(v907, *((uint64_t *)&v907 + 1), v610, v611, v612, v613, v614, v615);
          v908[0] = v617;
        }
        v618 = v933[0];
        if (v933[0] == 255)
        {
          v618 = JSC::DFG::SpeculativeJIT::fillJSValue(v932, *((uint64_t *)&v932 + 1), v610, v611, v612, v613, v614, v615);
          v933[0] = v618;
        }
        JSC::DFG::SpeculativeJIT::flushRegisters(this, v609, v610, v611, v612, v613, v614, v615);
        v619 = *(unsigned __int16 *)(a2 + 18);
        v620 = JSC::DFG::Node::ecmaMode((JSC::DFG::Node *)a2);
        v628 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, (JSC::DFG::JITCompiler *)a2, v621, v622, v623, v624, v625, v626);
        if (v619 == 101)
        {
          v629 = operationDirectPutByValSloppyGeneric;
          v630 = operationDirectPutByValStrictGeneric;
        }
        else
        {
          v629 = operationPutByValSloppyGeneric;
          v630 = operationPutByValStrictGeneric;
        }
        if (v620)
          v631 = (uint64_t)v629;
        else
          v631 = (uint64_t)v630;
        JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v929, (unsigned __int8 *)this, v631, v628, v627, v616, v617, v618);
        JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, a2, 0, v632, v633, v634, v635, v636);
        if ((*((_QWORD *)&v932 + 1) & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v637 = v933[0];
          if (v933[0] > 15)
            v637 = -1;
          --*(_DWORD *)(v932 + 12 * v637 + 4784);
        }
        if ((*((_QWORD *)&v907 + 1) & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v638 = v908[0];
          if (v908[0] > 15)
            v638 = -1;
          --*(_DWORD *)(v907 + 12 * v638 + 4784);
        }
        if ((*((_QWORD *)&v918 + 1) & 0xFF00FFFFFFFFFFFFLL) == 0)
          return;
        v639 = v919[0];
        if (v919[0] > 15)
          v639 = -1;
        v252 = (char *)(v918 + 12 * v639);
LABEL_182:
        --*((_DWORD *)v252 + 1196);
        return;
      }
      v208 = *(_QWORD *)(v18 + 8 * v17);
      if ((v208 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v209 = ~*(_DWORD *)((v208 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        v210 = a2;
        if (v209 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197B8BF08);
        }
        if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v209 + 12))
        {
          v211 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v208, a3, a4, a5, a6, a7, a8);
          v13 = *((_QWORD *)this + 495);
          LODWORD(v14) = *(_DWORD *)(a2 + 24);
          v15 = *(_DWORD *)(v13 + 164);
          v16 = v14 + 1;
        }
        else
        {
          v211 = -1;
        }
      }
      else
      {
        v211 = -1;
        v210 = a2;
      }
      if (v15 <= v16)
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BEE8);
      }
      v212 = *(_QWORD *)(*(_QWORD *)(v13 + 152) + 8 * v16);
      v213 = v212 & 0xFF00FFFFFFFFFFFFLL;
      if ((v212 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_512;
      v214 = ~*(_DWORD *)((v212 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v214 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BF10);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v214 + 12))
      {
        v215 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v212, a3, a4, a5, a6, a7, a8);
        v13 = *((_QWORD *)this + 495);
        LODWORD(v14) = *(_DWORD *)(v210 + 24);
        v15 = *(_DWORD *)(v13 + 164);
      }
      else
      {
LABEL_512:
        v215 = -1;
      }
      v216 = v14 + 2;
      if (v15 <= v216)
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BEF0);
      }
      v217 = *(_QWORD *)(*(_QWORD *)(v13 + 152) + 8 * v216);
      v218 = v217 & 0xFF00FFFFFFFFFFFFLL;
      if ((v217 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_457;
      v219 = ~*(_DWORD *)((v217 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v219 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BEF8);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v219 + 12))
        v220 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v217, a3, a4, a5, a6, a7, a8);
      else
LABEL_457:
        v220 = -1;
      if (v211 == -1)
        v211 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v208, a3, a4, a5, a6, a7, a8);
      if (v215 == -1)
        v215 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v212, a3, a4, a5, a6, a7, a8);
      if (v220 == -1)
        v220 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v217, a3, a4, a5, a6, a7, a8);
      v221 = *((_QWORD *)this + 495);
      v222 = a2;
      v223 = *(_DWORD *)(a2 + 24) + 1;
      if (*(_DWORD *)(v221 + 164) <= v223)
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BF00);
      }
      JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *(_QWORD *)(*(_QWORD *)(v221 + 152) + 8 * v223), v215, a4, a5, a6, a7, a8);
      JSC::DFG::SpeculativeJIT::flushRegisters(this, v224, v225, v226, v227, v228, v229, v230);
      v237 = *(unsigned __int16 *)(a2 + 18);
      if (v237 == 6)
        goto LABEL_161;
      if (*(unsigned __int16 *)(a2 + 18) <= 0x74u)
      {
        v222 = a2;
        if ((v237 - 101) < 4)
          goto LABEL_550;
      }
      else
      {
        v600 = v237 - 117;
        v222 = a2;
        if ((v237 - 117) <= 0x3C)
        {
          if (((1 << v600) & 0x100000000000201FLL) != 0)
          {
LABEL_550:
            v238 = (_BYTE *)(v222 + 80);
            goto LABEL_162;
          }
          if (((1 << v600) & 0x4020) != 0)
            goto LABEL_161;
        }
        if (v237 == 391)
          goto LABEL_550;
        if (v237 == 253)
        {
LABEL_161:
          v238 = (_BYTE *)(v222 + 72);
LABEL_162:
          if (*v238)
          {
            v239 = operationPutByValCellStringSloppy;
            v240 = operationPutByValDirectCellStringSloppy;
          }
          else
          {
            v239 = operationPutByValCellStringStrict;
            v240 = operationPutByValDirectCellStringStrict;
          }
          if (v237 == 101)
            v241 = (uint64_t)v240;
          else
            v241 = (uint64_t)v239;
          v242 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, (JSC::DFG::JITCompiler *)a2, v231, v232, v233, v234, v235, v236);
          JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *,long long),JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>((int *)&v918, (unsigned __int8 *)this, v241, v242, v243, v211, v215, v220);
          JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, a2, 0, v244, v245, v246, v247, v248);
          if (v218)
          {
            if (v220 > 15)
              v249 = -1;
            else
              v249 = v220;
            --*((_DWORD *)this + 3 * v249 + 1196);
          }
          if (v213)
          {
            if (v215 > 15)
              v250 = -1;
            else
              v250 = v215;
            --*((_DWORD *)this + 3 * v250 + 1196);
          }
          if ((v208 & 0xFF00FFFFFFFFFFFFLL) == 0)
            return;
          if (v211 > 15)
            v251 = -1;
          else
            v251 = v211;
          v252 = (char *)this + 12 * v251;
          goto LABEL_182;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x197B8B74CLL);
    case 7:
      JSC::DFG::SpeculativeJIT::speculateInt32((uint64_t)this, v21, a3, a4, a5, a6, a7, a8);
      v13 = *((_QWORD *)this + 495);
      v14 = *(_QWORD *)(a2 + 24);
      v17 = v14;
      v15 = *(_DWORD *)(v13 + 164);
      goto LABEL_14;
    case 8:
      if (v9 == 264)
      {
        v347 = a2;
      }
      else
      {
        v347 = a2;
        if (v9 == 146)
        {
          v348 = *(_DWORD *)(a2 + 80);
LABEL_292:
          v349 = *(_QWORD *)(v18 + 8 * v17);
          v350 = (JSC::DFG::Node *)(v349 & 0xFF00FFFFFFFFFFFFLL);
          if ((v349 & 0xFF00FFFFFFFFFFFFLL) == 0)
            goto LABEL_503;
          v351 = ~*(_DWORD *)((v349 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
          if (v351 >= *((unsigned int *)this + 1001))
          {
            __break(0xC471u);
            JUMPOUT(0x197B8BEE0);
          }
          if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v351 + 12))
          {
            v877 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v349, a3, a4, a5, a6, a7, a8);
            v13 = *((_QWORD *)this + 495);
            LODWORD(v14) = *(_DWORD *)(v347 + 24);
            v15 = *(_DWORD *)(v13 + 164);
            v16 = v14 + 1;
          }
          else
          {
LABEL_503:
            v877 = -1;
          }
          if (v15 > v16)
          {
            v352 = *(_QWORD *)(*(_QWORD *)(v13 + 152) + 8 * v16);
            v353 = ~*(_DWORD *)((v352 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
            if (v353 >= *((unsigned int *)this + 1001))
            {
              __break(0xC471u);
              JUMPOUT(0x197B8BEB0);
            }
            if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v353 + 12))
            {
              JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v352, a3, a4, a5, a6, a7, a8);
              v355 = v354;
              v13 = *((_QWORD *)this + 495);
              LODWORD(v14) = *(_DWORD *)(v347 + 24);
              v15 = *(_DWORD *)(v13 + 164);
            }
            else
            {
              v355 = -1;
            }
            v356 = v14 + 2;
            if (v15 <= v356)
            {
              __break(0xC471u);
              JUMPOUT(0x197B8BEB8);
            }
            v357 = *(_QWORD *)(*(_QWORD *)(v13 + 152) + 8 * v356);
            if (((v357 >> 50) & 0x3F) - 49 >= 3)
            {
              __break(0xC471u);
              JUMPOUT(0x197B8BA78);
            }
            v358 = ~*(_DWORD *)((v357 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
            if (v358 >= *((unsigned int *)this + 1001))
            {
              __break(0xC471u);
              JUMPOUT(0x197B8BEC0);
            }
            v864 = (JSC::DFG::Node *)(v357 & 0xFF00FFFFFFFFFFFFLL);
            v867 = (JSC::DFG::Node *)(v352 & 0xFF00FFFFFFFFFFFFLL);
            if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v358 + 12))
              v359 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v357, a3, a4, a5, a6, a7, a8);
            else
              v359 = -1;
            if (v877 == -1)
              v877 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v349, a3, a4, a5, a6, a7, a8);
            if (v355 == -1)
            {
              JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v352, a3, a4, a5, a6, a7, a8);
              v355 = v360;
            }
            if (v359 == -1)
              v359 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v357, a3, a4, a5, a6, a7, a8);
            v361 = *((_QWORD *)this + 495);
            v362 = *(_DWORD *)(v347 + 24) + 2;
            if (*(_DWORD *)(v361 + 164) <= v362)
            {
              __break(0xC471u);
              JUMPOUT(0x197B8BEC8);
            }
            v363 = *(_QWORD *)(*(_QWORD *)(v361 + 152) + 8 * v362);
            v364 = *((_QWORD *)this + 702);
            v365 = *(_QWORD *)(v364 + 8);
            if ((v363 & 1) != 0)
              v366 = (_QWORD *)(v365 + 24);
            else
              v366 = (_QWORD *)(v365 + 8);
            v367 = *v366 + 32 * *(unsigned int *)((v363 & 0xFF00FFFFFFFFFFFELL) + 0x14);
            v368 = *(unsigned int *)(v364 + 88);
            if ((_DWORD)v368 != *(_DWORD *)(v367 + 20))
            {
              if ((*(_QWORD *)(v367 + 8) & 0x2800FFFFFFF7) != 0)
                JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v367, (void *)v368, a3, a4, a5, a6, a7, a8);
              else
                *(_DWORD *)(v367 + 20) = v368;
            }
            if ((*(_QWORD *)(v367 + 8) & 0xFFFFFFC0FFFFFFFFLL) != 0)
            {
              v369 = *((_DWORD *)this + 50);
              if (v369 + 4 > *((_DWORD *)this + 48))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v368, a3, a4, a5, a6, a7, a8);
                v369 = *((_DWORD *)this + 50);
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v369) = (32 * v359) | (v359 << 16) | 0x1E602000;
              *((_DWORD *)this + 50) += 4;
              JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare((uint64_t)this, 1, a3, a4, a5, a6, a7, a8, (uint64_t)&v907);
              JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)this, (void *)0xFF80000000, v363, 0x3F00000000uLL, (uint64_t)&v907, 1uLL, v370, v371);
            }
            if (*((_BYTE *)this + 5244))
            {
              v873 = v350;
              v372 = *((_QWORD *)this + 495);
              v373 = *(_DWORD *)(v347 + 24) + 3;
              if (*(_DWORD *)(v372 + 164) <= v373)
              {
                __break(0xC471u);
                JUMPOUT(0x197B8BED0);
              }
              v374 = *(_QWORD *)(*(_QWORD *)(v372 + 152) + 8 * v373);
              v375 = (JSC::DFG::Node *)(v374 & 0xFF00FFFFFFFFFFFFLL);
              v376 = ~*(_DWORD *)((v374 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
              if (v376 >= *((unsigned int *)this + 1001))
              {
                __break(0xC471u);
                JUMPOUT(0x197B8BED8);
              }
              if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v376 + 12)
                || (v377 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, v374, a3, a4, a5, a6, a7, a8), v377 == -1))
              {
                v377 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, v374, a3, a4, a5, a6, a7, a8);
              }
              v378 = *(unsigned __int16 *)(v347 + 18);
              if (v378 == 103)
              {
                v350 = v873;
                if (v355 == -1)
                {
                  JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v352, a3, a4, a5, a6, a7, a8);
                  v355 = v542;
                }
                v416 = v877;
                if (v359 == -1)
                  v359 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v357, a3, a4, a5, a6, a7, a8);
                JSC::MacroAssemblerARM64::storeDouble((uint64_t)this, v359, v377 | ((unint64_t)v355 << 8) | 0x300000000, 0x200000000uLL, a5, a6, a7, a8);
                JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, *((_QWORD *)this + 497), 0, v543, v544, v545, v546, v547);
              }
              else
              {
                v350 = v873;
                if (v378 == 146)
                  v379 = *(_DWORD *)(v347 + 80);
                else
                  v379 = *(_DWORD *)(v347 + 72);
                if ((v379 & 0xFE0000) != 0)
                {
                  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v918, this, a3, a4, a5, a6, a7, a8);
                  v380 = (JSC::DFG::Node *)v918;
                  v381 = BYTE8(v918);
                }
                else
                {
                  v380 = 0;
                  v381 = 255;
                }
                v857 = v380;
                if (BYTE2(v348) > 1u)
                {
                  if (!*((_BYTE *)this + 212))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197B8BC48);
                  }
                  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
                  JSC::MacroAssemblerARM64::load32((uint64_t)this, v377 | 0xFFFFFFF800000000, *((char *)this + 304), a4, a5, a6, a7, a8);
                  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 3, v355, 17, v515, v516, v517, v518, (uint64_t)&v918);
                  if (!*((_BYTE *)this + 212))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197B8BC68);
                  }
                  v382 = v377;
                  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
                  JSC::MacroAssemblerARM64::load32((uint64_t)this, v377 | 0xFFFFFFFC00000000, *((char *)this + 304), v519, v520, v521, v522, v523);
                  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 2, v355, 17, v524, v525, v526, v527, (uint64_t)&v932);
                  v391 = BYTE2(v348) - 3 < 2;
                  v853 = *(_QWORD *)((char *)&v932 + 4);
                  v850 = v932;
                  if (BYTE2(v348) - 3 >= 2)
                    JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0xFuLL, (JSC::DFG::Node *)0xFF80000000, 0, (int *)&v932);
                  v534 = (char)v381;
                  v535 = *((_DWORD *)this + 50);
                  if (v535 + 4 > *((_DWORD *)this + 48))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (char)v381, v528, v529, v530, v531, v532, v533);
                    v534 = (char)v381;
                    v535 = *((_DWORD *)this + 50);
                  }
                  *(_DWORD *)(*((_QWORD *)this + 7) + v535) = (char)v381 | (32 * v355) | 0x11000400;
                  *((_DWORD *)this + 50) += 4;
                  JSC::MacroAssemblerARM64::store32((uint64_t)this, v534, v377 | 0xFFFFFFF800000000, v529, v530, v531, v532, v533);
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v918, (uint64_t)this, v536, v537, v538, v539, v540, v541);
                  v350 = v873;
                }
                else
                {
                  if (!*((_BYTE *)this + 212))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197B8BB6CLL);
                  }
                  v853 = 0xFF000F4100000000;
                  v382 = v377;
                  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
                  JSC::MacroAssemblerARM64::load32((uint64_t)this, v377 | 0xFFFFFFF800000000, *((char *)this + 304), a4, a5, a6, a7, a8);
                  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 2, v355, 17, v383, v384, v385, v386, (uint64_t)&v918);
                  JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0xFuLL, (JSC::DFG::Node *)0xFF80000000, 0, (int *)&v918);
                  v391 = 0;
                  v850 = -1;
                }
                JSC::MacroAssemblerARM64::storeDouble((uint64_t)this, v359, v382 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v355 << 8) | 0x300000000, 0x200000000uLL, v387, v388, v389, v390);
                JSC::DFG::SpeculativeJIT::use((uint64_t *)this, v350, v392, v393, v394, v395, v396, v397);
                JSC::DFG::SpeculativeJIT::use((uint64_t *)this, v867, v398, v399, v400, v401, v402, v403);
                JSC::DFG::SpeculativeJIT::use((uint64_t *)this, v864, v404, v405, v406, v407, v408, v409);
                JSC::DFG::SpeculativeJIT::use((uint64_t *)this, v375, v410, v411, v412, v413, v414, v415);
                v416 = v877;
                if (v391)
                {
                  v640 = JSC::DFG::Node::ecmaMode((JSC::DFG::Node *)a2);
                  v647 = operationPutDoubleByValBeyondArrayBoundsStrict;
                  v648 = operationPutDoubleByValBeyondArrayBoundsSloppy;
                  if (*(_WORD *)(a2 + 18) == 101)
                  {
                    v647 = operationPutDoubleByValDirectBeyondArrayBoundsStrict;
                    v648 = operationPutDoubleByValDirectBeyondArrayBoundsSloppy;
                  }
                  if (v640)
                    v649 = (uint64_t)v648;
                  else
                    v649 = (uint64_t)v647;
                  v350 = v873;
                  v650 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, (JSC::DFG::JITCompiler *)a2, v641, v642, v643, v644, v645, v646);
                  JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int,double),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID>((uint64_t *)&v929, v850, v853, (uint64_t)this, v649, v650, v651, v877, v355, v359);
                  JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)this, (unint64_t)&v929);
                  v652 = (uint64_t)v929;
                  v929 = 0;
                  if (v652)
                    (*(void (**)(uint64_t))(*(_QWORD *)v652 + 8))(v652);
                }
                if (v857 && v381 != 255)
                {
                  if ((char)v381 > 15)
                    v417 = -1;
                  else
                    v417 = v381;
                  --*((_DWORD *)v857 + 3 * v417 + 1196);
                }
              }
              if (v377 != -1)
              {
                if (v377 > 15)
                  v418 = -1;
                else
                  v418 = v377;
                --*((_DWORD *)this + 3 * v418 + 1196);
              }
            }
            else
            {
              v416 = v877;
            }
            v419 = (char *)this + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v359];
            --*((_DWORD *)v419 + 1244);
            v145 = (char *)this + 4776;
            if (v355 > 15)
              v420 = -1;
            else
              v420 = v355;
            --*(_DWORD *)&v145[12 * v420 + 8];
            if (!v350)
              return;
            v421 = v416 <= 15;
LABEL_350:
            v147 = v877;
            if (!v421)
              v147 = -1;
            goto LABEL_92;
          }
LABEL_841:
          __break(0xC471u);
          JUMPOUT(0x197B8BEA8);
        }
      }
      v348 = *(_DWORD *)(v347 + 72);
      goto LABEL_292;
    case 9:
LABEL_14:
      if (v15 <= v14)
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BDE4);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v13 + 152) + 8 * v17);
      v23 = v22 & 0xFF00FFFFFFFFFFFFLL;
      if ((v22 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_288;
      v24 = ~*(_DWORD *)((v22 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v24 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BE1CLL);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v24 + 12))
      {
        v25 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v22, a3, a4, a5, a6, a7, a8);
        v13 = *((_QWORD *)this + 495);
        LODWORD(v14) = *(_DWORD *)(a2 + 24);
        v15 = *(_DWORD *)(v13 + 164);
      }
      else
      {
LABEL_288:
        v25 = -1;
      }
      if (v15 <= (int)v14 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BDECLL);
      }
      v26 = *(_QWORD *)(*(_QWORD *)(v13 + 152) + 8 * (v14 + 1));
      v27 = ~*(_DWORD *)((v26 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v27 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BDF4);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v27 + 12))
      {
        JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v26, a3, a4, a5, a6, a7, a8);
        LOBYTE(v29) = v28;
        v13 = *((_QWORD *)this + 495);
        LODWORD(v14) = *(_DWORD *)(a2 + 24);
        v15 = *(_DWORD *)(v13 + 164);
      }
      else
      {
        LOBYTE(v29) = -1;
      }
      v30 = v14 + 2;
      if (v15 <= v30)
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BDFCLL);
      }
      v31 = *(_QWORD *)(*(_QWORD *)(v13 + 152) + 8 * v30);
      v32 = 255;
      v876 = v31 & 0xFF00FFFFFFFFFFFFLL;
      v861 = (JSC::DFG::Node *)(v26 & 0xFF00FFFFFFFFFFFFLL);
      if ((v31 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_128;
      v33 = ~*(_DWORD *)((v31 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v33 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BE04);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v33 + 12))
        v34 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v31, a3, a4, a5, a6, a7, a8);
      else
LABEL_128:
        v34 = -1;
      if (v25 == -1)
        v25 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v22, a3, a4, a5, a6, a7, a8);
      if ((_BYTE)v29 == 0xFF)
      {
        JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v26, a3, a4, a5, a6, a7, a8);
        LOBYTE(v29) = v35;
      }
      if (v34 == -1)
        v34 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v31, a3, a4, a5, a6, a7, a8);
      v36 = v34;
      if (!*((_BYTE *)this + 5244))
      {
        v141 = v876;
LABEL_80:
        if (v141)
        {
          if (v36 > 15)
            v144 = -1;
          else
            v144 = v34;
          --*((_DWORD *)this + 3 * v144 + 1196);
        }
        v145 = (char *)this + 4776;
        if ((char)v29 > 15)
          v146 = -1;
        else
          v146 = (char)v29;
        --*(_DWORD *)&v145[12 * v146 + 8];
        if (!v23)
          return;
        if (v25 > 15)
          v147 = -1;
        else
          v147 = v25;
LABEL_92:
        v148 = &v145[12 * v147];
        goto LABEL_93;
      }
      v37 = *((_QWORD *)this + 495);
      v38 = *(_DWORD *)(a2 + 24) + 3;
      if (*(_DWORD *)(v37 + 164) <= v38)
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BE0CLL);
      }
      v870 = v25;
      v872 = (JSC::DFG::Node *)(v22 & 0xFF00FFFFFFFFFFFFLL);
      v39 = *(_QWORD *)(*(_QWORD *)(v37 + 152) + 8 * v38);
      v40 = (JSC::DFG::Node *)(v39 & 0xFF00FFFFFFFFFFFFLL);
      v41 = ~*(_DWORD *)((v39 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v41 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BE14);
      }
      if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v41 + 12)
        || (LODWORD(v42) = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, v39, a3, a4, a5, a6, a7, a8),
            (_DWORD)v42 == -1))
      {
        LODWORD(v42) = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, v39, a3, a4, a5, a6, a7, a8);
      }
      v43 = *(unsigned __int16 *)(a2 + 18);
      if (v43 == 103)
      {
        if ((_BYTE)v29 == 0xFF)
        {
          JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v26, a3, a4, a5, a6, a7, a8);
          LOBYTE(v29) = v422;
        }
        JSC::MacroAssemblerARM64::store64((uint64_t)this, v34, v42 | ((unint64_t)v29 << 8) | 0x300000000, 0x200000000uLL, a5, a6, a7, a8);
        JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, a2, 0, v423, v424, v425, v426, v427);
        goto LABEL_355;
      }
      if (v43 == 146)
        v44 = *(_DWORD *)(a2 + 80);
      else
        v44 = *(_DWORD *)(a2 + 72);
      if ((v44 & 0xFE0000) != 0)
      {
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v918, this, a3, a4, a5, a6, a7, a8);
        v45 = (JSC::DFG::Node *)v918;
        v32 = BYTE8(v918);
        v43 = *(unsigned __int16 *)(a2 + 18);
      }
      else
      {
        v45 = 0;
      }
      if (v43 == 146)
        v46 = *(_DWORD *)(a2 + 80);
      else
        v46 = *(_DWORD *)(a2 + 72);
      v47 = BYTE2(v46);
      LODWORD(v863) = v34;
      v860 = (unint64_t)v45;
      v866 = (char)v32;
      if (BYTE2(v46) <= 1u)
      {
        if (!*((_BYTE *)this + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x197B8B7E8);
        }
        v60 = v42;
        *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
        JSC::MacroAssemblerARM64::load32((uint64_t)this, v42 | 0xFFFFFFF800000000, *((char *)this + 304), a4, a5, a6, a7, a8);
        JSC::MacroAssemblerARM64::branch32((uint64_t)this, 2, (char)v29, 17, v195, v196, v197, v198, (uint64_t)&v918);
        JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0xFuLL, (JSC::DFG::Node *)0xFF80000000, 0, (int *)&v918);
        v73 = 0;
        v87 = 0xFF000F4100000000;
        v855 = -1;
      }
      else
      {
        if (!*((_BYTE *)this + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x197B8B6D4);
        }
        *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
        JSC::MacroAssemblerARM64::load32((uint64_t)this, v42 | 0xFFFFFFF800000000, *((char *)this + 304), a4, a5, a6, a7, a8);
        v48 = (char)v29;
        JSC::MacroAssemblerARM64::branch32((uint64_t)this, 3, v48, 17, v49, v50, v51, v52, (uint64_t)&v918);
        if (!*((_BYTE *)this + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x197B8B6F4);
        }
        v851 = (char)v29;
        v29 = v40;
        v58 = v34;
        v59 = v32;
        v60 = v42;
        *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
        JSC::MacroAssemblerARM64::load32((uint64_t)this, v42 | 0xFFFFFFFC00000000, *((char *)this + 304), v53, v54, v55, v56, v57);
        JSC::MacroAssemblerARM64::branch32((uint64_t)this, 2, v48, 17, v61, v62, v63, v64, (uint64_t)&v907);
        v855 = v907;
        v71 = *(_QWORD *)((char *)&v907 + 4);
        v72 = v47 - 3;
        v73 = (v47 - 3) < 2;
        if (v72 >= 2)
          JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0xFuLL, (JSC::DFG::Node *)0xFF80000000, 0, (int *)&v907);
        v74 = v866;
        v75 = v866 | (32 * v48) | 0x11000400;
        v76 = *((_DWORD *)this + 50);
        if (v76 + 4 > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v866, v65, v66, v67, v68, v69, v70);
          v74 = v866;
          v76 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v76) = v75;
        *((_DWORD *)this + 50) += 4;
        JSC::MacroAssemblerARM64::store32((uint64_t)this, v74, v42 | 0xFFFFFFF800000000, v66, v67, v68, v69, v70);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v918, (uint64_t)this, v77, v78, v79, v80, v81, v82);
        v87 = v71;
        v32 = v59;
        v34 = v58;
        v40 = v29;
        LOBYTE(v29) = v851;
      }
      JSC::MacroAssemblerARM64::store64((uint64_t)this, v36, v60 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v29 << 8) | 0x300000000, 0x200000000uLL, v83, v84, v85, v86);
      JSC::DFG::SpeculativeJIT::use((uint64_t *)this, v872, v88, v89, v90, v91, v92, v93);
      JSC::DFG::SpeculativeJIT::use((uint64_t *)this, v861, v94, v95, v96, v97, v98, v99);
      JSC::DFG::SpeculativeJIT::use((uint64_t *)this, (JSC::DFG::Node *)v876, v100, v101, v102, v103, v104, v105);
      JSC::DFG::SpeculativeJIT::use((uint64_t *)this, v40, v106, v107, v108, v109, v110, v111);
      if (!v73)
        goto LABEL_68;
      v118 = *(unsigned __int16 *)(a2 + 18);
      if (v118 == 6)
        goto LABEL_57;
      if (*(unsigned __int16 *)(a2 + 18) <= 0x74u)
      {
        if ((v118 - 101) < 4)
          goto LABEL_362;
      }
      else
      {
        v428 = v118 - 117;
        if ((v118 - 117) <= 0x3C)
        {
          if (((1 << v428) & 0x100000000000201FLL) != 0)
          {
LABEL_362:
            v119 = (_BYTE *)(a2 + 80);
LABEL_58:
            if (*v119)
            {
              v120 = operationPutByValBeyondArrayBoundsSloppy;
              v121 = (uint64_t (*)(uint64_t, _DWORD *, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))operationPutByValDirectBeyondArrayBoundsSloppy;
            }
            else
            {
              v120 = operationPutByValBeyondArrayBoundsStrict;
              v121 = (uint64_t (*)(uint64_t, _DWORD *, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))operationPutByValDirectBeyondArrayBoundsStrict;
            }
            if (v118 == 101)
              v122 = (unint64_t)v121;
            else
              v122 = (unint64_t)v120;
            v123 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, (JSC::DFG::JITCompiler *)a2, v112, v113, v114, v115, v116, v117);
            v125 = v124;
            v126 = (char *)WTF::fastMalloc((WTF *)0xA0);
            v127 = JSC::DFG::SlowPathGenerator::SlowPathGenerator((uint64_t)v126, this);
            *(_QWORD *)v127 = off_1E35746F0;
            *(_DWORD *)(v127 + 48) = v855;
            *(_QWORD *)(v127 + 52) = v87;
            v135 = *((_DWORD *)this + 50);
            *(_DWORD *)(v127 + 60) = v135;
            if (v135 < *((_DWORD *)this + 13))
            {
              v816 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
              LODWORD(v315) = -721215457;
              goto LABEL_741;
            }
LABEL_64:
            *((_DWORD *)this + 52) = 0;
            *(_QWORD *)v126 = off_1E3573030;
            *((_QWORD *)v126 + 8) = 0xFFFFFFFFLL;
            *((_WORD *)v126 + 36) = 0;
            *((_DWORD *)v126 + 19) = 0;
            *((_QWORD *)v126 + 10) = v126 + 96;
            *((_QWORD *)v126 + 11) = 2;
            JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, (uint64_t)(v126 + 80), 0xFFFFFFFFLL, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v133, v134);
            *(_QWORD *)v126 = &off_1E3573000;
            *((_QWORD *)v126 + 16) = v122;
            *((_QWORD *)v126 + 17) = v123;
            *((_QWORD *)v126 + 18) = v125;
            v126[152] = v870;
            v126[153] = (char)v29;
            v126[154] = v34;
            *(_QWORD *)&v932 = v126;
            v136 = (_QWORD *)((char *)this + 5656);
            v137 = *((unsigned int *)this + 1417);
            if ((_DWORD)v137 == *((_DWORD *)this + 1416))
            {
              v139 = (char **)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v136, v137 + 1, (unint64_t)&v932);
              v137 = *((unsigned int *)this + 1417);
              v138 = (_QWORD *)(*((_QWORD *)this + 707) + 8 * v137);
              v126 = *v139;
            }
            else
            {
              v138 = (_QWORD *)(*v136 + 8 * v137);
              v139 = (char **)&v932;
            }
            v36 = (int)v863;
            *v139 = 0;
            *v138 = v126;
            *((_DWORD *)this + 1417) = v137 + 1;
            v140 = v932;
            *(_QWORD *)&v932 = 0;
            if (v140)
              (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
LABEL_68:
            if (v860)
            {
              v141 = v876;
              if (v32 != 255)
              {
                if ((int)v866 > 15)
                  v142 = -1;
                else
                  v142 = v32;
                --*(_DWORD *)(v860 + 12 * v142 + 4784);
              }
              goto LABEL_74;
            }
LABEL_355:
            v141 = v876;
LABEL_74:
            if ((_DWORD)v42 != -1)
            {
              if ((int)v42 > 15)
                v143 = -1;
              else
                v143 = v42;
              --*((_DWORD *)this + 3 * v143 + 1196);
            }
            v23 = (unint64_t)v872;
            v25 = v870;
            goto LABEL_80;
          }
          if (((1 << v428) & 0x4020) != 0)
            goto LABEL_57;
        }
        if (v118 == 391)
          goto LABEL_362;
        if (v118 == 253)
        {
LABEL_57:
          v119 = (_BYTE *)(a2 + 72);
          goto LABEL_58;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x197B8B52CLL);
    case 10:
    case 11:
      v569 = *(_QWORD *)(v18 + 8 * (v14 + 3));
      v570 = v19 & 0xFF00FFFFFFFFFFFFLL;
      if ((v19 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_704;
      v571 = ~*(_DWORD *)((v19 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v571 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BF68);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v571 + 12))
        v875 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v19, a3, a4, a5, a6, a7, a8);
      else
LABEL_704:
        v875 = -1;
      v572 = ~*(_DWORD *)((v20 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      v573 = *((unsigned int *)this + 1001);
      if (v572 >= v573)
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BF70);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v572 + 12))
      {
        JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v20, a3, a4, a5, a6, a7, a8);
        v575 = v574;
        LODWORD(v573) = *((_DWORD *)this + 1001);
      }
      else
      {
        v575 = -1;
      }
      v871 = (JSC::DFG::Node *)(v21 & 0xFF00FFFFFFFFFFFFLL);
      if ((v21 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_691;
      v576 = ~*(_DWORD *)((v21 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v576 >= v573)
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BF78);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v576 + 12))
      {
        v878 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v21, a3, a4, a5, a6, a7, a8);
        LODWORD(v573) = *((_DWORD *)this + 1001);
      }
      else
      {
LABEL_691:
        v878 = -1;
      }
      v577 = ~*(_DWORD *)((v569 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v577 >= v573)
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BF80);
      }
      v858 = (JSC::DFG::Node *)(v569 & 0xFF00FFFFFFFFFFFFLL);
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v577 + 12))
        v578 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, v569, a3, a4, a5, a6, a7, a8);
      else
        v578 = -1;
      if (v875 == -1)
        v875 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v19, a3, a4, a5, a6, a7, a8);
      if (v575 == -1)
      {
        JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v20, a3, a4, a5, a6, a7, a8);
        v575 = v579;
      }
      if (v878 == -1)
        v878 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v21, a3, a4, a5, a6, a7, a8);
      v580 = v578;
      if (v578 == -1)
        v580 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, v569, a3, a4, a5, a6, a7, a8);
      v581 = (unsigned __int16 *)a2;
      v582 = *(unsigned __int16 *)(a2 + 18);
      v869 = (JSC::DFG::Node *)v570;
      if (v582 == 103)
      {
        v817 = v575;
        if (v575 == -1)
          JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v20, a3, a4, a5, a6, a7, a8);
        v575 = v817;
        JSC::MacroAssemblerARM64::store64((uint64_t)this, v878, v580 | ((unint64_t)v817 << 8) | 0x300000000, 0x200000010uLL, a5, a6, a7, a8);
        JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, a2, 0, v818, v819, v820, v821, v822);
        v705 = (JSC::DFG::Node *)v570;
        goto LABEL_754;
      }
      if (v582 == 146)
        v583 = *(_DWORD *)(a2 + 80);
      else
        v583 = *(_DWORD *)(a2 + 72);
      if ((v583 & 0xFE0000) != 0)
      {
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v918, this, a3, a4, a5, a6, a7, a8);
        v584 = v918;
        v585 = BYTE8(v918);
      }
      else
      {
        v584 = 0;
        v585 = 255;
      }
      v854 = v584;
      *(_QWORD *)&v894 = v895;
      *((_QWORD *)&v894 + 1) = 2;
      if (!*((_BYTE *)this + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BCA4);
      }
      v849 = v580;
      *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
      JSC::MacroAssemblerARM64::load32((uint64_t)this, v580 | 0xFFFFFFFC00000000, *((char *)this + 304), a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::branch32((uint64_t)this, 2, v575, 17, v586, v587, v588, v589, (uint64_t)v938);
      v595 = *(_DWORD *)v938;
      if (BYTE2(v12) - 3 > 1)
      {
        v892 = *(_DWORD *)v938;
        v893 = *(_QWORD *)&v938[4];
        JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0xFuLL, (JSC::DFG::Node *)0xFF80000000, 0, &v892);
        if (BYTE2(v12) <= 1u)
        {
          v654 = v580 | ((unint64_t)v575 << 8) | 0x300000000;
          JSC::AssemblyHelpers::branchIfEmpty((uint64_t)v889, (uint64_t)this, v654, 0x200000010uLL, v591, v592, v593, v594);
          JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0xDuLL, (JSC::DFG::Node *)0xFF80000000, 0, v889);
          v705 = (JSC::DFG::Node *)v570;
          v691 = (char)v585;
          goto LABEL_604;
        }
      }
      else
      {
        v890 = *(_DWORD *)v938;
        v891 = *(_QWORD *)&v938[4];
        if (*(_DWORD *)v938 != -1)
        {
          v596 = HIDWORD(v894);
          if (HIDWORD(v894) == DWORD2(v894))
          {
            v597 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v894, (void *)(HIDWORD(v894) + 1), (unint64_t)&v890, v590, v591, v592, v593, v594);
            v599 = *v597;
            v598 = (uint64_t *)(v597 + 1);
            v595 = v599;
            v596 = HIDWORD(v894);
          }
          else
          {
            v598 = &v891;
          }
          v653 = v894 + 12 * v596;
          *(_DWORD *)v653 = v595;
          *(_QWORD *)(v653 + 4) = *v598;
          ++HIDWORD(v894);
        }
      }
      if (!*((_BYTE *)this + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BCC4);
      }
      v654 = v580 | ((unint64_t)v575 << 8) | 0x300000000;
      *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
      JSC::MacroAssemblerARM64::load64((uint64_t)this, v654, 0x200000010uLL, *((char *)this + 272), v591, v592, v593, v594);
      JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, 16, 0xFFFFFFFFLL, v655, v656, v657, v658, (uint64_t)&v918, v659);
      if (v12 == 11)
      {
        JSC::ARM64Assembler::label((_DWORD *)this + 8, v660, v661, v662, v663, v664, v665, v666, (int *)&v907);
        JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), 335544320, v823, v824, v825, v826, v827, v828);
        if (*((_BYTE *)this + 328))
          v835 = 69;
        else
          v835 = 65;
        v885[0] = v907;
        v885[1] = 0;
        v886 = v835;
        v887 = 15;
        v888 = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v894, v885, v829, v830, v831, v832, v833, v834);
        v705 = (JSC::DFG::Node *)v570;
        v691 = (char)v585;
      }
      else
      {
        if (!*((_BYTE *)this + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x197B8BCE4);
        }
        *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
        JSC::MacroAssemblerARM64::load32((uint64_t)this, v580 | 0xC00000000, *((char *)this + 272), v662, v663, v664, v665, v666);
        v674 = *((_DWORD *)this + 50);
        if (v674 + 4 > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v667, v668, v669, v670, v671, v672, v673);
          v674 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v674) = 285214224;
        *((_DWORD *)this + 50) += 4;
        JSC::MacroAssemblerARM64::store32((uint64_t)this, 16, v580 | 0xC00000000, v669, v670, v671, v672, v673);
        if (!*((_BYTE *)this + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x197B8BD14);
        }
        *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
        JSC::MacroAssemblerARM64::load32((uint64_t)this, v580 | 0xFFFFFFF800000000, *((char *)this + 304), v675, v676, v677, v678, v679);
        JSC::MacroAssemblerARM64::branch32((uint64_t)this, 3, v575, 17, v680, v681, v682, v683, (uint64_t)&v907);
        v691 = (char)v585;
        v692 = *((_DWORD *)this + 50);
        if (v692 + 4 > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v684, v685, v686, v687, v688, v689, v690);
          v692 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v692) = (char)v585 | (32 * v575) | 0x11000400;
        *((_DWORD *)this + 50) += 4;
        JSC::MacroAssemblerARM64::store32((uint64_t)this, (char)v585, v580 | 0xFFFFFFF800000000, v686, v687, v688, v689, v690);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v907, (uint64_t)this, v693, v694, v695, v696, v697, v698);
        v705 = v869;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v918, (uint64_t)this, v699, v700, v701, v702, v703, v704);
      v581 = (unsigned __int16 *)a2;
LABEL_604:
      JSC::MacroAssemblerARM64::store64((uint64_t)this, v878, v654, 0x200000010uLL, v706, v707, v708, v709);
      JSC::DFG::SpeculativeJIT::use((uint64_t *)this, v705, v710, v711, v712, v713, v714, v715);
      JSC::DFG::SpeculativeJIT::use((uint64_t *)this, (JSC::DFG::Node *)(v20 & 0xFF00FFFFFFFFFFFFLL), v716, v717, v718, v719, v720, v721);
      JSC::DFG::SpeculativeJIT::use((uint64_t *)this, v871, v722, v723, v724, v725, v726, v727);
      JSC::DFG::SpeculativeJIT::use((uint64_t *)this, v858, v728, v729, v730, v731, v732, v733);
      if (!HIDWORD(v894))
        goto LABEL_666;
      v881 = v883;
      v882 = HIDWORD(v894);
      if (HIDWORD(v894) <= 2)
      {
        v742 = v894;
        v743 = v894 + 12 * HIDWORD(v894);
        v741 = v883;
      }
      else
      {
        if (HIDWORD(v894) >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197B8BF88);
        }
        v741 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v894)));
        v881 = v741;
        if (!HIDWORD(v894))
        {
LABEL_611:
          v744 = v581[9];
          if (v744 == 6)
          {
LABEL_612:
            v745 = (unsigned __int8 *)(v581 + 36);
LABEL_613:
            v746 = (JSC::DFG::Node *)operationPutByValBeyondArrayBoundsSloppy;
            v747 = *v745;
            v11 = v744 == 101;
            v748 = (JSC::DFG::Node *)operationPutByValBeyondArrayBoundsStrict;
            if (v11)
            {
              v746 = (JSC::DFG::Node *)operationPutByValDirectBeyondArrayBoundsSloppy;
              v748 = (JSC::DFG::Node *)operationPutByValDirectBeyondArrayBoundsStrict;
            }
            if (v747)
              v749 = v746;
            else
              v749 = v748;
            v750 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, (JSC::DFG::JITCompiler *)v581, v735, v736, v737, v738, v739, v740);
            v752 = v751;
            v753 = v882;
            v929 = v931;
            LODWORD(v930) = 2;
            HIDWORD(v930) = v882;
            if (v882 < 3)
            {
              v754 = v931;
            }
            else
            {
              if (v882 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x197B8BF90);
              }
              v754 = (int *)WTF::fastMalloc((WTF *)(12 * v882));
              LODWORD(v930) = 12 * v882 / 0xC;
              v929 = v754;
              v753 = v882;
            }
            v755 = v881;
            v756 = &v881[12 * v753];
            do
            {
              *v754 = *(_DWORD *)v755;
              *(_QWORD *)(v754 + 1) = *(_QWORD *)(v755 + 4);
              v755 += 12;
              v754 += 3;
            }
            while (v755 != v756);
            v757 = WTF::fastMalloc((WTF *)0xC0);
            v758 = HIDWORD(v930);
            *(_QWORD *)&v932 = v933;
            DWORD2(v932) = 2;
            HIDWORD(v932) = HIDWORD(v930);
            if (HIDWORD(v930) < 3)
            {
              v760 = v933;
            }
            else
            {
              if (HIDWORD(v930) >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x197B8BF98);
              }
              v759 = 12 * HIDWORD(v930);
              v760 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v930)));
              DWORD2(v932) = (v759 & 0xFFFFFFFC) / 0xC;
              *(_QWORD *)&v932 = v760;
              v758 = HIDWORD(v930);
            }
            v859 = v749;
            if (v758)
            {
              v761 = (uint64_t)v929;
              v762 = &v929[3 * v758];
              do
              {
                *(_DWORD *)v760 = *(_DWORD *)v761;
                *(_QWORD *)(v760 + 4) = *(_QWORD *)(v761 + 4);
                v761 += 12;
                v760 += 12;
              }
              while ((int *)v761 != v762);
            }
            v763 = v752;
            v764 = HIDWORD(v932);
            *(_QWORD *)&v907 = v908;
            DWORD2(v907) = 2;
            HIDWORD(v907) = HIDWORD(v932);
            if (HIDWORD(v932) < 3)
            {
              v765 = v575;
              v766 = v750;
              v768 = v908;
            }
            else
            {
              if (HIDWORD(v932) >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x197B8BFA0);
              }
              v765 = v575;
              v766 = v750;
              v767 = 12 * HIDWORD(v932);
              v768 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v932)));
              DWORD2(v907) = (v767 & 0xFFFFFFFC) / 0xC;
              *(_QWORD *)&v907 = v768;
              v764 = HIDWORD(v932);
            }
            if (v764)
            {
              v769 = v932;
              v770 = v932 + 12 * v764;
              do
              {
                *(_DWORD *)v768 = *(_DWORD *)v769;
                *(_QWORD *)(v768 + 4) = *(_QWORD *)(v769 + 4);
                v769 += 12;
                v768 += 12;
              }
              while (v769 != v770);
            }
            v771 = HIDWORD(v907);
            *(_QWORD *)&v918 = v919;
            DWORD2(v918) = 2;
            HIDWORD(v918) = HIDWORD(v907);
            if (HIDWORD(v907) < 3)
            {
              v773 = v919;
            }
            else
            {
              if (HIDWORD(v907) >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x197B8BFA8);
              }
              v772 = 12 * HIDWORD(v907);
              v773 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v907)));
              DWORD2(v918) = (v772 & 0xFFFFFFFC) / 0xC;
              *(_QWORD *)&v918 = v773;
              v771 = HIDWORD(v907);
            }
            if (v771)
            {
              v774 = v907;
              v775 = v907 + 12 * v771;
              do
              {
                *(_DWORD *)v773 = *(_DWORD *)v774;
                *(_QWORD *)(v773 + 4) = *(_QWORD *)(v774 + 4);
                v774 += 12;
                v773 += 12;
              }
              while (v774 != v775);
            }
            JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v757, (uint64_t *)&v918, this);
            v783 = v918;
            if (v919 != (_BYTE *)v918 && (_QWORD)v918 != 0)
            {
              *(_QWORD *)&v918 = 0;
              DWORD2(v918) = 0;
              WTF::fastFree(v783, v776, v777, v778, v779, v780, v781, v782);
            }
            *(_QWORD *)v757 = off_1E35730F0;
            *(_QWORD *)(v757 + 92) = 0xFFFFFFFFLL;
            *(_WORD *)(v757 + 100) = 0;
            *(_DWORD *)(v757 + 104) = 0;
            *(_QWORD *)(v757 + 112) = v757 + 128;
            *(_QWORD *)(v757 + 120) = 2;
            JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v757 + 112, 0xFFFFFFFFLL, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v781, v782);
            v785 = v907;
            if (v908 != (_BYTE *)v907 && (_QWORD)v907)
            {
              *(_QWORD *)&v907 = 0;
              DWORD2(v907) = 0;
              WTF::fastFree(v785, v734, (uint64_t)v735, v736, v737, v738, v739, v740);
            }
            *(_QWORD *)v757 = &off_1E35730C0;
            *(_QWORD *)(v757 + 160) = v859;
            *(_QWORD *)(v757 + 168) = v766;
            *(_QWORD *)(v757 + 176) = v763;
            *(_BYTE *)(v757 + 184) = v875;
            v575 = v765;
            *(_BYTE *)(v757 + 185) = v765;
            *(_BYTE *)(v757 + 186) = v878;
            v884 = v757;
            v786 = v932;
            if (v933 != (_BYTE *)v932 && (_QWORD)v932)
            {
              *(_QWORD *)&v932 = 0;
              DWORD2(v932) = 0;
              WTF::fastFree(v786, v734, (uint64_t)v735, v736, v737, v738, v739, v740);
            }
            v787 = (unint64_t)v929;
            if (v931 != v929 && v929)
            {
              v929 = 0;
              LODWORD(v930) = 0;
              WTF::fastFree(v787, v734, (uint64_t)v735, v736, v737, v738, v739, v740);
            }
            v788 = (_QWORD *)((char *)this + 5656);
            v789 = *((unsigned int *)this + 1417);
            v705 = v869;
            v691 = (char)v585;
            if ((_DWORD)v789 == *((_DWORD *)this + 1416))
            {
              v791 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v788, v789 + 1, (unint64_t)&v884);
              v789 = *((unsigned int *)this + 1417);
              v790 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v789);
              v757 = *v791;
            }
            else
            {
              v790 = (uint64_t *)(*v788 + 8 * v789);
              v791 = &v884;
            }
            *v791 = 0;
            *v790 = v757;
            *((_DWORD *)this + 1417) = v789 + 1;
            v792 = v884;
            v884 = 0;
            if (v792)
              (*(void (**)(uint64_t))(*(_QWORD *)v792 + 8))(v792);
            if (v883 != v881 && v881)
              WTF::fastFree((unint64_t)v881, v734, (uint64_t)v735, v736, v737, v738, v739, v740);
LABEL_666:
            v793 = v894;
            v580 = v849;
            if (v895 != (_BYTE *)v894 && (_QWORD)v894)
            {
              *(_QWORD *)&v894 = 0;
              DWORD2(v894) = 0;
              WTF::fastFree(v793, v734, (uint64_t)v735, v736, v737, v738, v739, v740);
            }
            if (v854)
            {
              v794 = v871;
              if (v585 != 255)
              {
                if (v691 > 15)
                  v795 = -1;
                else
                  v795 = v585;
                --*(_DWORD *)(v854 + 12 * v795 + 4784);
              }
              goto LABEL_675;
            }
LABEL_754:
            v794 = v871;
LABEL_675:
            if (v580 != 0xFF)
            {
              if ((char)v580 > 15)
                v796 = -1;
              else
                v796 = v580;
              --*((_DWORD *)this + 3 * v796 + 1196);
            }
            if (v794)
            {
              v797 = v878;
              if (v878 > 15)
                v797 = -1;
              --*((_DWORD *)this + 3 * v797 + 1196);
            }
            v145 = (char *)this + 4776;
            if (v575 > 15)
              v798 = -1;
            else
              v798 = v575;
            --*(_DWORD *)&v145[12 * v798 + 8];
            if (!v705)
              return;
            if (v875 > 15)
              v147 = -1;
            else
              v147 = v875;
            goto LABEL_92;
          }
          if (v581[9] <= 0x74u)
          {
            if ((v744 - 101) < 4)
              goto LABEL_713;
          }
          else
          {
            v815 = v744 - 117;
            if ((v744 - 117) <= 0x3C)
            {
              if (((1 << v815) & 0x100000000000201FLL) != 0)
              {
LABEL_713:
                v745 = (unsigned __int8 *)(v581 + 40);
                goto LABEL_613;
              }
              if (((1 << v815) & 0x4020) != 0)
                goto LABEL_612;
            }
            if (v744 == 391)
              goto LABEL_713;
            if (v744 == 253)
              goto LABEL_612;
          }
          __break(0xC471u);
          JUMPOUT(0x197B8BBC0);
        }
        v742 = v894;
        v743 = v894 + 12 * HIDWORD(v894);
      }
      do
      {
        *(_DWORD *)v741 = *(_DWORD *)v742;
        *(_QWORD *)(v741 + 4) = *(_QWORD *)(v742 + 4);
        v742 += 12;
        v741 += 12;
      }
      while (v742 != v743);
      goto LABEL_611;
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      v155 = JSC::DFG::toTypedArrayType(v12);
      if ((v155 - 1) <= 6)
      {
        v156 = *((_QWORD *)this + 495);
        v157 = *(_QWORD *)(a2 + 24);
        v158 = *(_DWORD *)(v156 + 164);
        if (v158 <= v157)
        {
          __break(0xC471u);
          JUMPOUT(0x197B8BE24);
        }
        if (v158 <= (int)v157 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197B8BE2CLL);
        }
        if (v158 <= (int)v157 + 2)
        {
          __break(0xC471u);
          JUMPOUT(0x197B8BE34);
        }
        if (v158 <= (int)v157 + 3)
        {
          __break(0xC471u);
          JUMPOUT(0x197B8BE3CLL);
        }
        v159 = *(_QWORD *)(v156 + 152);
        v160 = *(_QWORD *)(v159 + 8 * *(_QWORD *)(a2 + 24));
        v161 = *(_QWORD *)(v159 + 8 * (v157 + 1));
        v162 = *(_QWORD *)(v159 + 8 * (v157 + 2));
        v163 = *(_QWORD *)(v159 + 8 * (v157 + 3));
        if ((v160 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_364;
        v164 = ~*(_DWORD *)((v160 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        if (v164 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197B8BE54);
        }
        if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v164 + 12))
          v165 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v160, v149, v150, v151, v152, v153, v154);
        else
LABEL_364:
          v165 = -1;
        v166 = ~*(_DWORD *)((v161 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        v167 = *((unsigned int *)this + 1001);
        if (v166 >= v167)
        {
          __break(0xC471u);
          JUMPOUT(0x197B8BE44);
        }
        if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v166 + 12))
        {
          JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v161, v149, v150, v151, v152, v153, v154);
          v169 = v168;
          v167 = *((unsigned int *)this + 1001);
        }
        else
        {
          v169 = -1;
        }
        v170 = ~*(_DWORD *)((v163 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        if (v170 >= v167)
        {
          __break(0xC471u);
          JUMPOUT(0x197B8BE4CLL);
        }
        if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v170 + 12))
          v171 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, v163, v149, v150, v151, v152, v153, v154);
        else
          v171 = -1;
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v929, this, v149, v150, v151, v152, v153, v154);
        LOBYTE(v932) = 0;
        v933[0] = 0;
        if (v171 == 0xFF)
          v171 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, v163, v172, v173, v174, v175, v176, v177);
        v178 = (JSC::DFG::Node *)a2;
        if (v165 == -1)
          v165 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v160, v172, v173, v174, v175, v176, v177);
        if (v169 == -1)
        {
          JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v161, v172, v173, v174, v175, v176, v177);
          v169 = v179;
        }
        *(_QWORD *)&v894 = 0;
        BYTE8(v894) = -1;
        *(_QWORD *)&v918 = v919;
        *((_QWORD *)&v918 + 1) = 2;
        if (v155 == 3)
          v180 = *(_WORD *)((v162 & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 92
              || *(unsigned __int8 *)((v162 & 0xFF00FFFFFFFFFFFFLL) + 0x48) - 19 < 0xFFFFFFFE;
        else
          v180 = 0;
        if ((JSC::DFG::SpeculativeJIT::getIntTypedArrayStoreOperand(this, (uint64_t)&v894, v169, v162, (uint64_t)&v918, v180, v176, v177) & 1) == 0)goto LABEL_189;
        if (*(_WORD *)(a2 + 18) == 146)
          v187 = *(_DWORD *)(a2 + 80);
        else
          v187 = *(_DWORD *)(a2 + 72);
        if ((v187 & 0x40000000) == 0)
        {
          v188 = -1;
LABEL_124:
          v189 = BYTE8(v894);
          JSC::DFG::SpeculativeJIT::jumpForTypedArrayOutOfBounds((uint64_t)this, (uint64_t)v178, v165, v169, (char)v930, v188, v185, v186, (uint64_t)v938);
          if ((v155 - 4) > 3u)
            LOBYTE(v194) = 0;
          else
            v194 = qword_199123E20[(char)(v155 - 4)];
          v253 = 1 << v194;
          switch(v253)
          {
            case 4:
              JSC::MacroAssemblerARM64::store32((uint64_t)this, v189, v171 | ((unint64_t)v169 << 8) | 0x200000000, 0x200000000uLL, v190, v191, v192, v193);
              break;
            case 1:
              JSC::MacroAssemblerARM64::store8((uint64_t)this, v189, v171 | ((unint64_t)v169 << 8), 0x200000000uLL, v190, v191, v192, v193);
              break;
            case 2:
              JSC::MacroAssemblerARM64::store16((uint64_t)this, v189, v171 | ((unint64_t)v169 << 8) | 0x100000000, 0x200000000uLL, v190, v191, v192, v193);
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197B8BF60);
          }
          v935 = *(_DWORD *)v938;
          v936 = *(_QWORD *)&v938[4];
          JSC::DFG::SpeculativeJIT::jumpForTypedArrayIsDetachedIfOutOfBounds((uint64_t)v937, (uint64_t)this, (uint64_t)v178, v165, (uint64_t)&v935, v254, v255, v256);
          if (v937[0] != -1)
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v937, (uint64_t)this, v257, v182, v183, v184, v185, v186);
          if (HIDWORD(v918))
          {
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v907, (uint64_t *)&v918);
            v799 = JSC::DFG::Node::ecmaMode(v178);
            v806 = operationPutByValStrictGeneric;
            v807 = operationPutByValSloppyGeneric;
            if (*((_WORD *)v178 + 9) == 101)
            {
              v806 = operationDirectPutByValStrictGeneric;
              v807 = operationDirectPutByValSloppyGeneric;
            }
            if (v799)
              v808 = (uint64_t)v807;
            else
              v808 = (uint64_t)v806;
            v809 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, v178, v800, v801, v802, v803, v804, v805);
            JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v934, (uint64_t *)&v907, this, v808, v809, v810, v165, v169, v189);
            JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)this, (unint64_t)&v934);
            v813 = v934;
            v934 = 0;
            if (v813)
              (*(void (**)(uint64_t))(*(_QWORD *)v813 + 8))(v813);
            v814 = v907;
            if (v908 != (_BYTE *)v907 && (_QWORD)v907)
            {
              *(_QWORD *)&v907 = 0;
              DWORD2(v907) = 0;
              WTF::fastFree(v814, v811, v812, v182, v183, v184, v185, v186);
            }
          }
LABEL_189:
          JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)v178, 0, v182, v183, v184, v185, v186);
          v265 = v918;
          if (v919 != (_BYTE *)v918 && (_QWORD)v918)
          {
            *(_QWORD *)&v918 = 0;
            DWORD2(v918) = 0;
            WTF::fastFree(v265, v258, v259, v260, v261, v262, v263, v264);
          }
          if ((_QWORD)v894)
          {
            v266 = SBYTE8(v894);
            if (SBYTE8(v894) != -1)
            {
              if (SBYTE8(v894) > 15)
                v266 = -1;
              --*(_DWORD *)(v894 + 12 * v266 + 4784);
            }
          }
          if (v933[0])
          {
            if ((_QWORD)v932)
            {
              v267 = SBYTE8(v932);
              if (SBYTE8(v932) != -1)
              {
                if (SBYTE8(v932) > 15)
                  v267 = -1;
                --*(_DWORD *)(v932 + 12 * v267 + 4784);
              }
            }
          }
          if (v929)
          {
            v268 = (char)v930;
            if ((char)v930 != -1)
            {
              if ((char)v930 > 15)
                v268 = -1;
              --v929[3 * v268 + 1196];
            }
          }
          if (v171 != 0xFF)
          {
            if ((char)v171 > 15)
              v269 = -1;
            else
              v269 = v171;
            --*((_DWORD *)this + 3 * v269 + 1196);
          }
          v145 = (char *)this + 4776;
          if (v169 > 15)
            v270 = -1;
          else
            v270 = v169;
          --*(_DWORD *)&v145[12 * v270 + 8];
          if ((v160 & 0xFF00FFFFFFFFFFFFLL) == 0)
            return;
          if (v165 > 15)
            v147 = -1;
          else
            v147 = v165;
          goto LABEL_92;
        }
        *(_QWORD *)&v907 = this;
        std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v932, (JSC::DFG::SpeculativeJIT **)&v907, v181, v182, v183, v184, v185, v186);
        if (v933[0])
        {
          v188 = BYTE8(v932);
          v178 = (JSC::DFG::Node *)a2;
          goto LABEL_124;
        }
LABEL_840:
        __break(1u);
        goto LABEL_841;
      }
      v429 = *((_QWORD *)this + 495);
      v430 = *(_QWORD *)(a2 + 24);
      v431 = *(_DWORD *)(v429 + 164);
      if (v431 <= v430)
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BF20);
      }
      v432 = *(_QWORD *)(*(_QWORD *)(v429 + 152) + 8 * *(_QWORD *)(a2 + 24));
      if ((v432 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_578;
      v433 = ~*(_DWORD *)((v432 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v433 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BF58);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v433 + 12))
      {
        v877 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *(_QWORD *)(*(_QWORD *)(v429 + 152) + 8 * *(_QWORD *)(a2 + 24)), v149, v150, v151, v152, v153, v154);
        v429 = *((_QWORD *)this + 495);
        LODWORD(v430) = *(_DWORD *)(a2 + 24);
        v431 = *(_DWORD *)(v429 + 164);
      }
      else
      {
LABEL_578:
        v877 = -1;
      }
      if (v431 <= (int)v430 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BF28);
      }
      v434 = *(_QWORD *)(*(_QWORD *)(v429 + 152) + 8 * (v430 + 1));
      v435 = ~*(_DWORD *)((v434 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v435 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BF30);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v435 + 12))
      {
        JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v434, v149, v150, v151, v152, v153, v154);
        v437 = v436;
        v429 = *((_QWORD *)this + 495);
        LODWORD(v430) = *(_DWORD *)(a2 + 24);
        v431 = *(_DWORD *)(v429 + 164);
      }
      else
      {
        v437 = -1;
      }
      if (v431 <= (int)v430 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BF38);
      }
      v438 = *(_QWORD *)(*(_QWORD *)(v429 + 152) + 8 * (v430 + 2));
      if (((v438 >> 50) & 0x3F) - 49 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BBE0);
      }
      v439 = ~*(_DWORD *)((v438 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v439 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BF40);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v439 + 12))
      {
        v874 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v438, v149, v150, v151, v152, v153, v154);
        v429 = *((_QWORD *)this + 495);
        LODWORD(v430) = *(_DWORD *)(a2 + 24);
        v431 = *(_DWORD *)(v429 + 164);
      }
      else
      {
        v874 = -1;
      }
      v440 = v430 + 3;
      if (v431 <= v440)
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BF48);
      }
      v441 = *(_QWORD *)(*(_QWORD *)(v429 + 152) + 8 * v440);
      v442 = ~*(_DWORD *)((v441 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v442 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197B8BF50);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v442 + 12))
        v443 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, v441, v149, v150, v151, v152, v153, v154);
      else
        v443 = -1;
      v444 = 0;
      v445 = (_DWORD *)((char *)this + 4976);
      v446 = 0x17u;
      v447 = -1;
      break;
    default:
      return;
  }
  while (*v445)
  {
LABEL_388:
    ++v444;
    v445 += 3;
    if (v444 == 23)
    {
      v444 = v446;
      v449 = (unsigned int *)((char *)this + 12 * v446 + 4968);
      v450 = *v449;
      *(_QWORD *)v449 = 0xFFFFFFFF3FFFFFFFLL;
      v445 = v449 + 2;
      goto LABEL_391;
    }
  }
  v448 = *(v445 - 1);
  if (v448 != -1)
  {
    if (v448 < v447)
    {
      v446 = v444;
      v447 = *(v445 - 1);
    }
    goto LABEL_388;
  }
  v450 = *(v445 - 2);
  *((_QWORD *)v445 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_391:
  v865 = (JSC::DFG::SpeculativeJIT *)((char *)this + 4968);
  *v445 = 1;
  v451 = JSC::FPRInfo::toRegister::registerForIndex[v444];
  if (v450 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v450, v149, v150, v151, v152, v153, v154);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v907, this, v149, v150, v151, v152, v153, v154);
  LOBYTE(v918) = 0;
  v919[0] = 0;
  v868 = (JSC::DFG::Node *)(v432 & 0xFF00FFFFFFFFFFFFLL);
  if (*(_WORD *)(a2 + 18) == 146)
    v458 = *(_DWORD *)(a2 + 80);
  else
    v458 = *(_DWORD *)(a2 + 72);
  v459 = -1;
  if ((v458 & 0x40000000) != 0)
  {
    *(_QWORD *)&v932 = this;
    std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v918, (JSC::DFG::SpeculativeJIT **)&v932, v452, v453, v454, v455, v456, v457);
    if (v919[0])
    {
      v459 = BYTE8(v918);
      goto LABEL_396;
    }
    goto LABEL_840;
  }
LABEL_396:
  if (v874 == -1)
    v874 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v438, v452, v453, v454, v455, v456, v457);
  if (v877 == -1)
    v877 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v432, v452, v453, v454, v455, v456, v457);
  if (v437 == -1)
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v434, v452, v453, v454, v455, v456, v457);
    v437 = v460;
  }
  v461 = BYTE8(v907);
  if (v443 == 0xFF)
    v443 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, v441, v452, v453, v454, v455, v456, v457);
  v462 = v877;
  JSC::DFG::SpeculativeJIT::jumpForTypedArrayOutOfBounds((uint64_t)this, a2, v462, v437, v461, v459, v456, v457, (uint64_t)&v932);
  if ((v155 - 4) > 7u)
    LOBYTE(v470) = 0;
  else
    v470 = qword_199123EC8[(char)(v155 - 4)];
  v548 = 1 << v470;
  if (v548 == 4)
  {
    v549 = *((_DWORD *)this + 50);
    if (v549 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v463, v464, v465, v466, v467, v468, v469);
      v549 = *((_DWORD *)this + 50);
    }
    v550 = v451 | (32 * v874);
    *(_DWORD *)(*((_QWORD *)this + 7) + v549) = v550 | 0x1E604000;
    v551 = *((_DWORD *)this + 50);
    v552 = v551 + 4;
    *((_DWORD *)this + 50) = v551 + 4;
    if ((v551 + 8) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v463, v464, v465, v466, v467, v468, v469);
      v552 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v552) = v550 | 0x1E624000;
    *((_DWORD *)this + 50) += 4;
    JSC::MacroAssemblerARM64::storeFloat((uint64_t)this, v451, v443 | ((unint64_t)v437 << 8) | 0x200000000, 0x200000000uLL, v466, v467, v468, v469);
  }
  else
  {
    if (v548 != 8)
    {
      __break(0xC471u);
      JUMPOUT(0x197B8B8D4);
    }
    JSC::MacroAssemblerARM64::storeDouble((uint64_t)this, v874, v443 | ((unint64_t)v437 << 8) | 0x300000000, 0x200000000uLL, v466, v467, v468, v469);
  }
  LODWORD(v894) = v932;
  *(_QWORD *)((char *)&v894 + 4) = *(_QWORD *)((char *)&v932 + 4);
  JSC::DFG::SpeculativeJIT::jumpForTypedArrayIsDetachedIfOutOfBounds((uint64_t)&v929, (uint64_t)this, a2, v462, (uint64_t)&v894, v553, v554, v555);
  if ((_DWORD)v929 != -1)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v929, (uint64_t)this, v556, v557, v558, v559, v560, v561);
  JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, a2, 0, v557, v558, v559, v560, v561);
  if (v919[0])
  {
    if ((_QWORD)v918)
    {
      v562 = SBYTE8(v918);
      if (SBYTE8(v918) != -1)
      {
        if (SBYTE8(v918) > 15)
          v562 = -1;
        --*(_DWORD *)(v918 + 12 * v562 + 4784);
      }
    }
  }
  if ((_QWORD)v907)
  {
    v563 = SBYTE8(v907);
    if (SBYTE8(v907) != -1)
    {
      if (SBYTE8(v907) > 15)
        v563 = -1;
      --*(_DWORD *)(v907 + 12 * v563 + 4784);
    }
  }
  v564 = (char *)v865 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v451];
  --*((_DWORD *)v564 + 2);
  if (v443 != 0xFF)
  {
    if ((char)v443 > 15)
      v565 = -1;
    else
      v565 = v443;
    --*((_DWORD *)this + 3 * v565 + 1196);
  }
  v566 = (char *)v865 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v874];
  --*((_DWORD *)v566 + 2);
  v145 = (char *)this + 4776;
  if (v437 > 15)
    v567 = -1;
  else
    v567 = v437;
  --*(_DWORD *)&v145[12 * v567 + 8];
  if (v868)
  {
    v421 = (int)v462 <= 15;
    goto LABEL_350;
  }
}

BOOL WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::contains(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  _BOOL8 result;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = *(_QWORD *)(v2 + 8 * v7);
  if (v8 == *a2)
    return 1;
  v9 = 1;
  do
  {
    result = v8 != 0;
    if (!v8)
      break;
    v7 = (v7 + v9) & v3;
    v8 = *(_QWORD *)(v2 + 8 * v7);
    ++v9;
  }
  while (v8 != *a2);
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compilePutByValForCellWithSymbol(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  JSC::DFG::Node *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t result;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  unint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  unint64_t v72;
  unsigned __int8 v73;

  v8 = *((_QWORD *)this + 495);
  if (*(_DWORD *)(v8 + 164) <= *((_QWORD *)a2 + 3))
  {
    __break(0xC471u);
    goto LABEL_33;
  }
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v71, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * *((_QWORD *)a2 + 3)), a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 495);
  v17 = *((_DWORD *)a2 + 6) + 1;
  if (*(_DWORD *)(v16 + 164) <= v17)
  {
    __break(0xC471u);
    JUMPOUT(0x197B8C30CLL);
  }
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v68, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v16 + 152) + 8 * v17), v11, v12, v13, v14, v15);
  v22 = *((_QWORD *)this + 495);
  v23 = *((_DWORD *)a2 + 6) + 2;
  if (*(_DWORD *)(v22 + 164) <= v23)
  {
    __break(0xC471u);
    JUMPOUT(0x197B8C314);
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v65, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v22 + 152) + 8 * v23), 0, v18, v19, v20, v21);
  v30 = v73;
  if (v73 == 255)
  {
    v30 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v71, v72, v24, v25, v26, v27, v28, v29);
    v73 = v30;
  }
  v31 = v70;
  if (v70 == 255)
  {
    v31 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v68, v69, v24, v25, v26, v27, v28, v29);
    v70 = v31;
  }
  v32 = v67;
  if (v67 == 255)
  {
    v32 = JSC::DFG::SpeculativeJIT::fillJSValue(v65, v66, v24, v25, v26, v27, v28, v29);
    v67 = v32;
  }
  v33 = *((_QWORD *)this + 495);
  v34 = *((_DWORD *)a2 + 6) + 1;
  if (*(_DWORD *)(v33 + 164) <= v34)
  {
    __break(0xC471u);
LABEL_33:
    JUMPOUT(0x197B8C304);
  }
  v35 = (char)v31;
  JSC::DFG::SpeculativeJIT::speculateSymbol((uint64_t)this, *(_QWORD *)(*(_QWORD *)(v33 + 152) + 8 * v34), v35, v25, v26, v27, v28, v29);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v36, v37, v38, v39, v40, v41, v42);
  v43 = JSC::DFG::Node::ecmaMode(a2);
  v50 = operationPutByValCellSymbolStrict;
  v51 = operationPutByValCellSymbolSloppy;
  if (*((_WORD *)a2 + 9) == 101)
  {
    v50 = operationPutByValDirectCellSymbolStrict;
    v51 = operationPutByValDirectCellSymbolSloppy;
  }
  if (v43)
    v52 = (uint64_t)v51;
  else
    v52 = (uint64_t)v50;
  v53 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v44, v45, v46, v47, v48, v49);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *,long long),JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>(&v64, (unsigned __int8 *)this, v52, v53, v54, (char)v30, v35, v32);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v55, v56, v57, v58, v59);
  if ((v66 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v61 = (char)v67;
    if ((char)v67 > 15)
      v61 = -1;
    --*(_DWORD *)(v65 + 12 * v61 + 4784);
  }
  if ((v69 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v62 = (char)v70;
    if ((char)v70 > 15)
      v62 = -1;
    --*(_DWORD *)(v68 + 12 * v62 + 4784);
  }
  if ((v72 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v63 = (char)v73;
    if ((char)v73 > 15)
      v63 = -1;
    --*(_DWORD *)(v71 + 12 * v63 + 4784);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unsigned int v13;
  JSC::AssemblerBuffer *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  __int16 *v39;
  int v40;
  char *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  JSC::AssemblerBuffer *v62;
  unsigned int v63;
  unsigned int v64;
  __int16 v65;
  _BYTE v66[6];

  v11 = (uint64_t)a2;
  v63 = 0;
  if (a6 == 1)
  {
    v13 = 0;
  }
  else
  {
    v65 = a6 | 0x100;
    v13 = 1;
    v63 = 1;
  }
  if (a7 != 2)
  {
    *(_WORD *)&v66[2 * v13++ - 2] = a7 | 0x200;
    v63 = v13;
  }
  if (a8 == 3)
  {
    if (!v13)
      goto LABEL_62;
  }
  else
  {
    *(_WORD *)&v66[2 * v13++ - 2] = a8 | 0x300;
    v63 = v13;
  }
  v14 = (JSC::AssemblerBuffer *)(a2 + 56);
  do
  {
    v15 = 0;
    v16 = 0;
    v17 = v13;
    do
    {
      if ((v66[v15 - 1] & 0x40) != 0)
      {
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      v16 |= 1 << v66[v15 - 1];
      v15 += 2;
    }
    while (2 * v13 != v15);
    v18 = 0;
    do
    {
      v19 = v66[v18 - 2] & 0x7F;
      if (v19 >= 0x40)
        goto LABEL_65;
      v16 &= ~(1 << v19);
      v18 += 2;
    }
    while (2 * v13 != v18);
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v20.i16[0] = vaddlv_u8(v20);
    v21 = v20.i32[0];
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.i32[0] + v21)
    {
      v23 = 0;
      if (v13 <= 1)
        v24 = 1;
      else
        v24 = v13;
      v25 = 2 * v24;
      while (1)
      {
        v26 = v66[v23 - 1];
        if ((v26 & 0x7Fu) >= 0x40)
          goto LABEL_65;
        if (((v16 >> (v26 & 0x7F)) & 1) != 0)
          break;
        v23 += 2;
        if (v25 == v23)
          goto LABEL_58;
      }
      v27 = v66[v23 - 2];
      if (v27 != v26)
      {
        v28 = (char)v27;
        if ((char)v27 == 63)
        {
          v29 = *(_DWORD *)(v11 + 200);
          v30 = *(_DWORD *)(v11 + 192);
          if (v26 == 31)
            goto LABEL_52;
          v32 = v26 & 0x1F | 0xD2800000;
        }
        else
        {
          v29 = *(_DWORD *)(v11 + 200);
          v30 = *(_DWORD *)(v11 + 192);
          v31 = (char)v26 == 31 || v28 == 31;
          if (!v31)
          {
            v32 = v26 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v32 = (char)v26 | (32 * v28) | 0x91000000;
        }
LABEL_53:
        if (v29 + 4 > v30)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v29 = *(_DWORD *)(v11 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v11 + 56) + v29) = v32;
        *(_DWORD *)(v11 + 200) += 4;
        v17 = v63;
      }
      memmove(&v66[v23 - 2], &v66[v23], 2 * v17 - v23 - 2);
      v13 = v63 - 1;
      goto LABEL_57;
    }
    v62 = v14;
    v33 = HIBYTE(v65);
    v34 = v65;
    JSC::MacroAssemblerARM64::swap(v11, (char)v65, SHIBYTE(v65), a4, a5, a6, a7, a8);
    memmove(&v65, v66, 2 * v63 - 2);
    v35 = v63 - 1;
    v31 = v63 == 1;
    v64 = v35;
    v36 = (unsigned __int8 *)&v65;
    v37 = &v66[2 * v35 - 2];
    if (v31)
    {
      v44 = 0;
      v45 = 0;
      v40 = 0;
      a2 = v37;
    }
    else
    {
      v38 = 2 * v35;
      v39 = &v65;
      while (*(unsigned __int8 *)v39 != v33)
      {
        ++v39;
        v38 -= 2;
        if (!v38)
          goto LABEL_37;
      }
      *(_BYTE *)v39 = v34;
LABEL_37:
      v40 = 0;
      v41 = (char *)&v65;
      a2 = v37;
      v42 = v37;
      do
      {
        if (*v36 == v36[1])
        {
          v43 = v36;
          if (v42 != &v66[2 * v64 - 2])
          {
            v61 = v37;
            if (v36 == a2)
            {
              v43 = v42;
            }
            else
            {
              v59 = v41 - (char *)a2;
              v60 = v42;
              memmove(v42, a2, v41 - (char *)a2);
              v43 = &v60[v59];
            }
            v37 = v61;
          }
          a2 = v36 + 2;
          ++v40;
          v42 = v43;
        }
        v36 += 2;
        v41 += 2;
      }
      while (v36 < v37);
      v44 = v64;
      v45 = v64;
      v37 = v42;
    }
    v46 = &v66[2 * v44 - 2];
    v14 = v62;
    if (a2 != v46)
    {
      memmove(v37, a2, v46 - a2);
      v45 = v64;
    }
    v13 = v45 - v40;
LABEL_57:
    v63 = v13;
LABEL_58:
    ;
  }
  while (v13);
LABEL_62:
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v11, a5, 0, a4, a5, a6, a7, a8);
  else
LABEL_66:
    JSC::MacroAssemblerARM64::load64(v11, (a4 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v11, a3, v47, v48, v49, v50, v51, v52, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v11, 0, v53, v54, v55, v56, v57, v58);
}

void JSC::DFG::slowPathICCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,decltype(nullptr)>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, char a8@<W7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _DWORD *v16;
  char v17;
  char v18;
  uint64_t v19;
  int v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  int v33;
  WTF *v34;
  unsigned int v35;
  int v36;
  _QWORD v37[4];
  char v38;
  int v39;
  __int16 v40;
  uint64_t v41;
  char v42;
  _DWORD *v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48[3];

  v13 = *((unsigned int *)a1 + 3);
  v34 = (WTF *)v37;
  v35 = 2;
  v36 = v13;
  if (v13 < 3)
  {
    v22 = v37;
  }
  else
  {
    v33 = a3;
    v14 = a9;
    if (v13 >= 0x15555556)
    {
      __break(0xC471u);
      return;
    }
    v15 = a5;
    v16 = a2;
    v17 = a8;
    v18 = a4;
    v19 = a6;
    v20 = a7;
    v21 = 12 * v13;
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)(12 * v13));
    v35 = (v21 & 0xFFFFFFFC) / 0xC;
    v34 = (WTF *)v22;
    LODWORD(v13) = *((_DWORD *)a1 + 3);
    a9 = v14;
    a7 = v20;
    a6 = v19;
    a4 = v18;
    a8 = v17;
    a2 = v16;
    a5 = v15;
    a3 = v33;
  }
  if ((_DWORD)v13)
  {
    v23 = *a1;
    v24 = *a1 + 12 * v13;
    do
    {
      *(_DWORD *)v22 = *(_DWORD *)v23;
      *(_QWORD *)((char *)v22 + 4) = *(_QWORD *)(v23 + 4);
      v23 += 12;
      v22 = (_QWORD *)((char *)v22 + 12);
    }
    while (v23 != v24);
  }
  v48[0] = a3;
  v47 = a5;
  v46 = a8;
  v45 = a10;
  v44 = a11;
  v43 = a2;
  v42 = a4;
  v41 = a6;
  v40 = 0;
  v39 = a7;
  v38 = a12;
  v37[3] = 0;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,decltype(nullptr)>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::StructureStubInfoIndex &,JSC::ARM64Registers::RegisterID&,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address &,JSC::ExceptionOperationResult<void> (*&)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::NoResultTag&,JSC::JSValueRegs&,JSC::JSValueRegs&,JSC::JSValueRegs&,JSC::ARM64Registers::RegisterID&,decltype(nullptr) &>((uint64_t *)&v34, &v43, v48, &v42, &v47, &v41, (unsigned __int8 *)&v40 + 1, (char *)&v40, a9, &v39, &v46, &v45, &v44, &v38);
  v32 = v34;
  if (v37 != (_QWORD *)v34)
  {
    if (v34)
    {
      v34 = 0;
      v35 = 0;
      WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
    }
  }
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  char v30;
  WTF *v31;
  unsigned int v32;
  int v33;
  _QWORD v34[4];
  int v35;
  __int16 v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;

  v11 = *((unsigned int *)a1 + 3);
  v31 = (WTF *)v34;
  v32 = 2;
  v33 = v11;
  if (v11 < 3)
  {
    v19 = v34;
    if (!(_DWORD)v11)
      goto LABEL_8;
    goto LABEL_6;
  }
  v30 = a6;
  if (v11 >= 0x15555556)
  {
    __break(0xC471u);
    return;
  }
  v12 = a2;
  v13 = a3;
  v14 = a7;
  v15 = a8;
  v16 = a4;
  v17 = a9;
  v18 = 12 * v11;
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)(12 * v11));
  v32 = (v18 & 0xFFFFFFFC) / 0xC;
  v31 = (WTF *)v19;
  LODWORD(v11) = *((_DWORD *)a1 + 3);
  a9 = v17;
  a4 = v16;
  a8 = v15;
  a7 = v14;
  a3 = v13;
  a2 = v12;
  a6 = v30;
  if ((_DWORD)v11)
  {
LABEL_6:
    v20 = *a1;
    v21 = *a1 + 12 * v11;
    do
    {
      *(_DWORD *)v19 = *(_DWORD *)v20;
      *(_QWORD *)((char *)v19 + 4) = *(_QWORD *)(v20 + 4);
      v20 += 12;
      v19 = (_QWORD *)((char *)v19 + 12);
    }
    while (v20 != v21);
  }
LABEL_8:
  v42 = a5;
  v41 = a6;
  v40 = a7;
  v39 = a8;
  v37 = a3;
  v38 = a2;
  v36 = 0;
  v35 = a4;
  v34[3] = 0;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<void> (*&)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::NoResultTag&,JSC::JSValueRegs&,JSC::JSValueRegs&,JSC::JSValueRegs&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,decltype(nullptr) &>((uint64_t *)&v31, &v38, &v37, (unsigned __int8 *)&v36 + 1, (char *)&v36, &v35, &v42, &v41, a9, &v40, &v39);
  v29 = v31;
  if (v34 != (_QWORD *)v31)
  {
    if (v31)
    {
      v31 = 0;
      v32 = 0;
      WTF::fastFree((unint64_t)v29, v22, v23, v24, v25, v26, v27, v28);
    }
  }
}

uint64_t JSC::DFG::JITCompiler::addPutByVal(uint64_t result, __int128 *a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  char v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v14 = *a2;
  v15 = *((_BYTE *)a2 + 16);
  v3 = *((_DWORD *)a2 + 5);
  v4 = *((_DWORD *)a2 + 6);
  v16 = v3;
  v17 = v4;
  v5 = *((_DWORD *)a2 + 7);
  v6 = *((_DWORD *)a2 + 8);
  v18 = v5;
  v19 = v6;
  v7 = *((_DWORD *)a2 + 9);
  v20 = v7;
  v8 = *((_WORD *)a2 + 20);
  v21 = v8;
  v9 = *((_DWORD *)a2 + 11);
  v22 = v9;
  v10 = *((_QWORD *)a2 + 6);
  v23 = v10;
  v24 = a3;
  v11 = *(unsigned int *)(result + 1812);
  if ((_DWORD)v11 == *(_DWORD *)(result + 1808))
    return WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPutByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::InlineCacheWrapper<JSC::JITPutByValGenerator>>(result + 1800, (unint64_t)&v14);
  v12 = *(_QWORD *)(result + 1800) + (v11 << 6);
  v13 = *a2;
  *(_BYTE *)(v12 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)v12 = v13;
  *(_DWORD *)(v12 + 20) = v3;
  *(_DWORD *)(v12 + 24) = v4;
  *(_DWORD *)(v12 + 28) = v5;
  *(_DWORD *)(v12 + 32) = v6;
  *(_DWORD *)(v12 + 36) = v7;
  *(_WORD *)(v12 + 40) = v8;
  *(_DWORD *)(v12 + 44) = v9;
  *(_QWORD *)(v12 + 48) = v10;
  *(_QWORD *)(v12 + 56) = a3;
  ++*(_DWORD *)(result + 1812);
  return result;
}

void JSC::DFG::SpeculativeJIT::speculateInt32(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  _BYTE v30[7];

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v22 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v22 | 2;
          v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v22 & 1) != 0)
          {
            v26 = 2 * *v23;
            while (v26 * 4)
            {
              v27 = *(_QWORD *)&v23[v26];
              if ((*(_BYTE *)(v27 + 19) & 0xC) == 0)
              {
                v28 = *(_QWORD *)(v27 + 96);
                v29 = (v28 & 1) != 0 ? (v28 >> 1) & 3 : *(unsigned __int8 *)(v28 + 4);
                v26 -= 2;
                if (v29 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v23, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_27;
            }
          }
          else if (v23)
          {
            if ((*((_BYTE *)v23 + 19) & 0xC) != 0
              || ((v24 = *((_QWORD *)v23 + 12), (v24 & 1) != 0)
                ? (v25 = (v24 >> 1) & 3)
                : (v25 = *(unsigned __int8 *)(v24 + 4)),
                  v25 == 2))
            {
LABEL_27:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0xFFFFFFFCFFFFFFFFLL) != 0)
  {
    v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v19 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
    }
    else
    {
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12)
        || (v20 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)a1, a2, (uint64_t)v30, a4, a5, a6, a7, a8), v20 == -1))
      {
        v20 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)a1, a2, (uint64_t)v30, a4, a5, a6, a7, a8);
      }
      if (v20 > 15)
        v21 = -1;
      else
        v21 = v20;
      --*(_DWORD *)(a1 + 12 * v21 + 4784);
    }
  }
}

void JSC::AssemblyHelpers::branchIfEmpty(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int8x8_t v14;

  if (*(_BYTE *)(a2 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
    JSC::MacroAssemblerARM64::load64(a2, a3, a4, *(char *)(a2 + 272), a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branchTest64(a2, 0, 16, 0xFFFFFFFFLL, v10, v11, v12, v13, a1, v14);
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::MacroAssemblerARM64::add32(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;

  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_16;
  v11 = 285213200;
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load32(a1, a3, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
  if (a2 < 0x1000)
  {
LABEL_3:
    v19 = ((a2 & 0xFFF) << 10) | v11;
    goto LABEL_9;
  }
  v20 = 1358955024;
  v21 = -a2;
  if (-a2 < 0x1000)
    goto LABEL_5;
  if ((a2 & 0xFFF) == 0)
  {
    if (!HIBYTE(a2))
    {
      v11 = 289407504;
      a2 >>= 12;
      goto LABEL_3;
    }
    v21 = -(a2 >> 12);
    if (v21 < 0x1000)
    {
      v20 = 1363149328;
LABEL_5:
      v19 = v20 | (v21 << 10);
      goto LABEL_9;
    }
  }
  if (!*(_BYTE *)(a1 + 212))
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x197B8CF5CLL);
  }
  v19 = 185664016;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a2, *(char *)(a1 + 304), v14, v15, v16, v17, v18);
LABEL_9:
  v22 = *(_DWORD *)(a1 + 200);
  if (v22 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v12, v13, v14, v15, v16, v17, v18);
    v22 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = v19;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store32(a1, 16, a3, v14, v15, v16, v17, v18);
}

uint64_t *JSC::DFG::SpeculativeJIT::compileGetCharCodeAt(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int8x8_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  JSC::AssemblerBuffer *v63;
  int i;
  unsigned int v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  JSC::DFG::Node *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *result;
  int v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  unsigned int v94;
  char *v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  char v99;
  char v100;
  JSC::AssemblerBuffer *v101;
  unsigned int v102[2];
  char v103;
  __int16 v104;
  char v105;
  unsigned int v106[3];
  int v107[3];
  uint64_t v108;
  unsigned __int8 v109;

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_39;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197B8D3E4);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_39:
    v13 = -1;
  v14 = *((_QWORD *)a2 + 4);
  v15 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197B8D3ECLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12))
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
    v17 = v16;
  }
  else
  {
    v17 = -1;
  }
  if (v13 == -1)
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  if (v17 == -1)
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
    v17 = v18;
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v108, this, a3, a4, a5, a6, a7, a8);
  v19 = v109;
  v20 = (char)v109;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v13 | 0x800000000, v20, v21, v22, v23, v24, v25);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    goto LABEL_49;
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v19 | 0x400000000, *((char *)this + 304), v26, v27, v28, v29, v30);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 2, v17, 17, v31, v32, v33, v34, (uint64_t)v107);
  JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0x16uLL, (JSC::DFG::Node *)0xFF80000000, 0, v107);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197B8D378);
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v19 | 0x1000000000, *((char *)this + 304), v35, v36, v37, v38, v39);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)4, (uint64_t)this, 0, 17, v40, v41, v42, v43, (uint64_t)v106, v44);
  v45 = v19 | 0x800000000;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v19 | 0x800000000, v20, v46, v47, v48, v49, v50);
  v51 = v19 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v17 << 8);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v51, 0x200000000uLL, v20, v52, v53, v54, v55);
  v63 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
  {
    if ((i + 4) > *((_DWORD *)this + 48))
    {
      v101 = v63;
      JSC::AssemblerBuffer::outOfLineGrow(v63, v56, v57, v58, v59, v60, v61, v62);
      v63 = v101;
      i = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
    i = *((_DWORD *)this + 50) + 4;
  }
  v65 = i;
  if ((i + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v63, v56, v57, v58, v59, v60, v61, v62);
    v65 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v65) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v66 = 69;
  else
    v66 = 65;
  v102[0] = i;
  v102[1] = 0;
  v103 = v66;
  v104 = 15;
  v105 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v106, (uint64_t)this, v57, v58, v59, v60, v61, v62);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v45, v20, v67, v68, v69, v70, v71);
  JSC::MacroAssemblerARM64::load16((uint64_t)this, v51 | 0x100000000, 0x200000000uLL, v20, v72, v73, v74, v75);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v102, (uint64_t)this, v76, v77, v78, v79, v80, v81);
  v82 = (JSC::DFG::Node *)*((_QWORD *)this + 497);
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, v82, v83, v84, v85, v86, v87, v88);
  v90 = *((_DWORD *)v82 + 12);
  v91 = ~v90;
  if (v91 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_49:
    JUMPOUT(0x197B8D358);
  }
  v92 = *((_QWORD *)this + 499);
  v93 = (char *)this + 4776;
  if ((int)v20 > 15)
    v94 = -1;
  else
    v94 = v20;
  v95 = &v93[12 * v94];
  *(_DWORD *)v95 = v90;
  *((_DWORD *)v95 + 1) = 5;
  v96 = v92 + 24 * (int)v91;
  v97 = *((_DWORD *)v82 + 13);
  *(_QWORD *)v96 = v82;
  *(_DWORD *)(v96 + 8) = v97;
  *(_BYTE *)(v96 + 17) = v20;
  *(_DWORD *)(v96 + 12) = 1;
  *(_BYTE *)(v96 + 16) = 0;
  if (v108)
  {
    v98 = (char)v109;
    if ((char)v109 != -1)
    {
      if ((char)v109 > 15)
        v98 = -1;
      --*(_DWORD *)(v108 + 12 * v98 + 4784);
    }
  }
  if (v17 > 15)
    v99 = -1;
  else
    v99 = v17;
  --*(_DWORD *)&v93[12 * v99 + 8];
  if (v11)
  {
    if (v13 > 15)
      v100 = -1;
    else
      v100 = v13;
    --*(_DWORD *)&v93[12 * v100 + 8];
  }
  return result;
}

uint64_t *JSC::DFG::SpeculativeJIT::strictInt32Result(uint64_t *this, int a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;

  v8 = a4;
  v11 = this;
  if (!(_DWORD)a5)
    this = JSC::DFG::SpeculativeJIT::useChildren(this, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  v12 = *((_DWORD *)a3 + 12);
  v13 = ~v12;
  if (v13 >= *((unsigned int *)v11 + 1001))
    goto LABEL_15;
  v14 = v11[499];
  if (v8 == 1)
  {
    if (a2 > 15)
      v15 = -1;
    else
      v15 = a2;
    v16 = (char *)v11 + 12 * v15;
    *((_DWORD *)v16 + 1194) = v12;
    v17 = 5;
    goto LABEL_9;
  }
  if (v8 != 17)
  {
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x197B8D4D8);
  }
  if (a2 > 15)
    v20 = -1;
  else
    v20 = a2;
  v16 = (char *)v11 + 12 * v20;
  *((_DWORD *)v16 + 1194) = v12;
  v17 = 4;
LABEL_9:
  *((_DWORD *)v16 + 1195) = v17;
  v18 = *((_DWORD *)a3 + 13);
  v19 = v14 + 24 * (int)v13;
  *(_QWORD *)v19 = a3;
  *(_DWORD *)(v19 + 8) = v18;
  *(_BYTE *)(v19 + 12) = v8;
  *(_BYTE *)(v19 + 17) = a2;
  *(_DWORD *)(v19 + 13) = 0;
  return this;
}

void JSC::DFG::SpeculativeJIT::compileGetByValOnString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  char v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int8x8_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int i;
  unsigned int v74;
  char v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  int v133;
  int v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  int v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  unint64_t v152;
  uint64_t v153;
  char v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int j;
  unsigned int v168;
  char v169;
  int *v170;
  int *v171;
  int v172;
  _BYTE *v173;
  unsigned int v174;
  JSC::DFG::Node *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  JSC::AssemblerBuffer *v199;
  int v200;
  char v201;
  char v202;
  uint64_t v203;
  uint64_t v204[2];
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  int v211;
  int v212;
  char v213;
  __int16 v214;
  char v215;
  unsigned int v216;
  JSC::ARM64LogicalImmediate *v217;
  unsigned int v218[2];
  char v219;
  __int16 v220;
  char v221;
  unsigned int v222[3];
  int v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  char v227;
  _BYTE *v228;
  uint64_t v229;
  _BYTE v230[30];
  char v231;
  char v232[9];

  v11 = *(_QWORD *)(a1 + 3960);
  v12 = *(_DWORD *)(a2 + 56);
  v13 = (_QWORD *)(a2 + 24);
  v14 = (unint64_t *)(a2 + 24);
  if ((v12 & 0x10) != 0)
  {
    if (*(_DWORD *)(v11 + 164) <= *v13)
    {
      __break(0xC471u);
      JUMPOUT(0x197B8DFE0);
    }
    v14 = (unint64_t *)(*(_QWORD *)(v11 + 152) + 8 * *v13);
  }
  v15 = *v14;
  v16 = *v14 & 0xFF00FFFFFFFFFFFFLL;
  if (!v16)
    goto LABEL_79;
  v17 = ~*(_DWORD *)((*v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v17 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B8DFD0);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v17 + 12))
  {
    v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v15, a3, a4, a5, a6, a7, a8);
    v11 = *(_QWORD *)(a1 + 3960);
    v12 = *(_DWORD *)(a2 + 56);
  }
  else
  {
LABEL_79:
    v18 = -1;
  }
  if ((v12 & 0x10) != 0)
  {
    v174 = *(_DWORD *)v13 + 1;
    if (*(_DWORD *)(v11 + 164) <= v174)
    {
      __break(0xC471u);
LABEL_119:
      JUMPOUT(0x197B8DDC8);
    }
    v19 = (unint64_t *)(*(_QWORD *)(v11 + 152) + 8 * v174);
  }
  else
  {
    v19 = (unint64_t *)(a2 + 32);
  }
  v20 = *v19;
  v21 = ~*(_DWORD *)((*v19 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v21 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B8DFC8);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v21 + 12))
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(a1, v20, a3, a4, a5, a6, a7, a8);
    v23 = v22;
  }
  else
  {
    v23 = -1;
  }
  if (v18 == 0xFF)
    v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v15, a3, a4, a5, a6, a7, a8);
  v232[0] = v18;
  if (v23 == -1)
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(a1, v20, a3, a4, a5, a6, a7, a8);
    v23 = v24;
  }
  v231 = v23;
  v228 = v230;
  v229 = 2;
  if (*(_WORD *)(a2 + 18) == 146)
    v25 = *(_DWORD *)(a2 + 80);
  else
    v25 = *(_DWORD *)(a2 + 72);
  if (BYTE2(v25) - 3 >= 2)
    v26 = 6;
  else
    v26 = 16;
  v27 = (*(uint64_t (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), v26);
  v227 = v27;
  v28 = (char)v27;
  JSC::MacroAssemblerARM64::load64(a1, v18 | 0x800000000, v28, v29, v30, v31, v32, v33);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    goto LABEL_119;
  }
  v39 = v27;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load32(a1, v27 | 0x400000000, *(char *)(a1 + 304), v34, v35, v36, v37, v38);
  JSC::MacroAssemblerARM64::branch32(a1, 2, v23, 17, v40, v41, v42, v43, (uint64_t)&v225);
  v49 = *(unsigned __int16 *)(a2 + 18);
  if (v49 != 229)
  {
    v50 = v49 == 146 ? *(_DWORD *)(a2 + 80) : *(_DWORD *)(a2 + 72);
    if ((v50 & 0xFE0000) == 0)
    {
      v223 = v225;
      v224 = v226;
      JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0xFuLL, (JSC::DFG::Node *)0xFF80000000, 0, &v223);
    }
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197B8DDE8);
  }
  v200 = v23;
  v201 = v18;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load32(a1, v27 | 0x1000000000, *(char *)(a1 + 304), v44, v45, v46, v47, v48);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)4, a1, 0, 17, v51, v52, v53, v54, (uint64_t)v222, v55);
  JSC::MacroAssemblerARM64::load64(a1, v27 | 0x800000000, v28, v56, v57, v58, v59, v60);
  v61 = v27 | ((unint64_t)v23 << 8);
  JSC::MacroAssemblerARM64::load8(a1, v61, 0x200000000uLL, v28, v62, v63, v64, v65);
  v199 = (JSC::AssemblerBuffer *)(a1 + 56);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v199, v66, v67, v68, v69, v70, v71, v72);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v74 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v199, v66, v67, v68, v69, v70, v71, v72);
    v74 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v74) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v75 = 69;
  else
    v75 = 65;
  v218[0] = i;
  v218[1] = 0;
  v219 = v75;
  v220 = 15;
  v221 = -1;
  if (*(_WORD *)(a2 + 18) == 229)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v225, a1, v67, v68, v69, v70, v71, v72);
    JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v216, (JSC::DFG::JITCompiler *)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 16) + 41968), v156, v157, v158, v159, v160);
    if (v216 == 0xFFFFFFFFLL)
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (uint64_t)v217, v28, v161, v162, v163, v164, v165);
    else
      JSC::MacroAssemblerARM64::load64(a1, ((unint64_t)v216 << 35) + 0x380000001ALL, v28, v161, v162, v163, v164, v165);
    for (j = *(_DWORD *)(a1 + 200); j < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = j)
    {
      if ((j + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v199, v166, v67, v68, v69, v70, v71, v72);
        j = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = -721215457;
      j = *(_DWORD *)(a1 + 200) + 4;
    }
    v168 = j;
    if ((j + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v199, v166, v67, v68, v69, v70, v71, v72);
      v168 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v168) = 335544320;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v169 = 69;
    else
      v169 = 65;
    v211 = j;
    v212 = 0;
    v213 = v169;
    v214 = 15;
    v215 = -1;
    if (j != -1)
    {
      if (HIDWORD(v229) == (_DWORD)v229)
      {
        v170 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v228, (void *)(HIDWORD(v229) + 1), (unint64_t)&v211, v68, v69, v70, v71, v72);
        v172 = *v170;
        v171 = v170 + 1;
        v173 = &v228[12 * HIDWORD(v229)];
        *(_DWORD *)v173 = v172;
      }
      else
      {
        v171 = &v212;
        v173 = &v228[12 * HIDWORD(v229)];
        *(_DWORD *)v173 = j;
      }
      *(_QWORD *)(v173 + 4) = *(_QWORD *)v171;
      ++HIDWORD(v229);
    }
  }
  v202 = v23;
  v76 = v16;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v222, a1, v67, v68, v69, v70, v71, v72);
  JSC::MacroAssemblerARM64::load64(a1, v27 | 0x800000000, v28, v77, v78, v79, v80, v81);
  JSC::MacroAssemblerARM64::load16(a1, v61 | 0x100000000, 0x200000000uLL, v28, v82, v83, v84, v85);
  JSC::MacroAssemblerARM64::branch32(a1, 8, v28, 255, v86, v87, v88, v89, (uint64_t)&v209);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v218, a1, v90, v91, v92, v93, v94, v95);
  v103 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 16);
  v104 = *(_DWORD *)(a1 + 200);
  if (v104 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v199, v96, v97, v98, v99, v100, v101, v102);
    v104 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v104) = v27 & 0x1F | (32 * (v27 & 0x1F)) | 0x531D7000;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::add64(a1, v103 + 42216, v28, v28, v99, v100, v101, v102);
  JSC::MacroAssemblerARM64::load64(a1, v27, v28, v105, v106, v107, v108, v109);
  v110 = v209;
  v111 = v210;
  v112 = WTF::fastMalloc((WTF *)0x98);
  v113 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v112, (JSC::DFG::SpeculativeJIT *)a1);
  *(_QWORD *)v113 = off_1E35746F0;
  *(_DWORD *)(v113 + 48) = v110;
  *(_QWORD *)(v113 + 52) = v111;
  v121 = *(_DWORD *)(a1 + 200);
  for (*(_DWORD *)(v113 + 60) = v121; v121 < *(_DWORD *)(a1 + 52); *(_DWORD *)(v112 + 60) = v121)
  {
    if ((v121 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v199, v114, v115, v116, v117, v118, v119, v120);
      v121 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v121) = -721215457;
    v121 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v121;
  }
  *(_DWORD *)(a1 + 208) = 0;
  *(_QWORD *)v112 = off_1E3572E50;
  *(_QWORD *)(v112 + 64) = 0xFFFFFFFFLL;
  *(_WORD *)(v112 + 72) = 0;
  *(_BYTE *)(v112 + 74) = v27;
  *(_QWORD *)(v112 + 80) = v112 + 96;
  *(_QWORD *)(v112 + 88) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, 0, v112 + 80, v28, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v119, v120);
  *(_QWORD *)v112 = &off_1E3572E20;
  *(_QWORD *)(v112 + 128) = operationSingleCharacterString;
  *(_QWORD *)(v112 + 136) = v103;
  *(_BYTE *)(v112 + 144) = v27;
  v208 = v112;
  v128 = (_QWORD *)(a1 + 5656);
  v129 = *(unsigned int *)(a1 + 5668);
  if ((_DWORD)v129 == *(_DWORD *)(a1 + 5664))
  {
    v131 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v128, v129 + 1, (unint64_t)&v208);
    v129 = *(unsigned int *)(a1 + 5668);
    v130 = (uint64_t *)(*(_QWORD *)(a1 + 5656) + 8 * v129);
    v112 = *v131;
  }
  else
  {
    v130 = (uint64_t *)(*v128 + 8 * v129);
    v131 = &v208;
  }
  *v131 = 0;
  *v130 = v112;
  *(_DWORD *)(a1 + 5668) = v129 + 1;
  v132 = v208;
  v208 = 0;
  if (v132)
    (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
  v133 = *(unsigned __int16 *)(a2 + 18);
  if (v133 == 229
    || (v133 == 146 ? (v134 = *(_DWORD *)(a2 + 80)) : (v134 = *(_DWORD *)(a2 + 72)), BYTE2(v134) - 3 > 1))
  {
    if (HIDWORD(v229))
    {
      v135 = 0;
      v136 = 0;
      v137 = 12 * HIDWORD(v229);
      do
      {
        if (v136 >= HIDWORD(v229))
        {
          __break(0xC471u);
          JUMPOUT(0x197B8DFC0);
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v228[v135], a1, v122, v123, v124, v125, v126, v127);
        ++v136;
        v135 += 12;
      }
      while (v137 != v135);
    }
    v138 = *(_QWORD *)(a1 + 3976);
    if ((v27 & 0xFF00) == 0x1000)
    {
      JSC::DFG::SpeculativeJIT::jsValueResult(a1, v28, *(_QWORD *)(a1 + 3976), 16, 0, v125, v126, v127);
    }
    else
    {
      JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1, *(JSC::DFG::Node **)(a1 + 3976), v122, v123, v124, v125, v126, v127);
      if ((int)v28 > 15)
        v146 = -1;
      else
        v146 = v27;
      v147 = a1 + 12 * v146;
      v148 = *(_DWORD *)(v138 + 48);
      *(_DWORD *)(v147 + 4776) = v148;
      *(_DWORD *)(v147 + 4780) = 4;
      v149 = ~v148;
      if (v149 >= *(unsigned int *)(a1 + 4004))
      {
        __break(0xC471u);
        JUMPOUT(0x197B8DFD8);
      }
      v150 = *(_QWORD *)(a1 + 3992) + 24 * (int)v149;
      v151 = *(_DWORD *)(v138 + 52);
      *(_QWORD *)v150 = v138;
      *(_DWORD *)(v150 + 8) = v151;
      *(_BYTE *)(v150 + 17) = v27;
      *(_DWORD *)(v150 + 12) = 6;
      *(_BYTE *)(v150 + 16) = 0;
    }
  }
  else
  {
    if (JSC::DFG::Graph::isWatchingStringPrototypeChainIsSaneWatchpoint(*(JSC::DFG::Graph **)(a1 + 3960), (JSC::DFG::Node *)a2))
    {
      v205 = a1;
      v204[0] = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, (JSC::DFG::JITCompiler *)a2, v175, v176, v177, v178, v179, v180);
      v204[1] = v181;
      std::make_unique[abi:sn180100]<JSC::DFG::SaneStringGetByValSlowPathGenerator,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump &,JSC::DFG::SpeculativeJIT *,JSC::JSValueRegs &,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID &,JSC::ARM64Registers::RegisterID &>(&v206, &v225, &v205, &v227, v204, v232, &v231);
      v182 = v206;
      v206 = 0;
      v207 = v182;
      JSC::DFG::SpeculativeJIT::addSlowPathGenerator(a1, (unint64_t)&v207);
      v190 = v207;
      v207 = 0;
      if (v190)
        (*(void (**)(uint64_t))(*(_QWORD *)v190 + 8))(v190);
      std::unique_ptr<JSC::DFG::SaneStringGetByValSlowPathGenerator>::~unique_ptr[abi:sn180100]((unint64_t *)&v206, v183, v184, v185, v186, v187, v188, v189);
    }
    else
    {
      v194 = v225;
      v195 = v226;
      v196 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, (JSC::DFG::JITCompiler *)a2, v175, v176, v177, v178, v179, v180);
      JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *,int),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v203, v194, v195, a1, v39, v196, v197, v201, v202);
      JSC::DFG::SpeculativeJIT::addSlowPathGenerator(a1, (unint64_t)&v203);
      v198 = v203;
      v203 = 0;
      if (v198)
        (*(void (**)(uint64_t))(*(_QWORD *)v198 + 8))(v198);
    }
    JSC::DFG::SpeculativeJIT::jsValueResult(a1, v28, *(_QWORD *)(a1 + 3976), 16, 0, v191, v192, v193);
  }
  v152 = (unint64_t)v228;
  if (v230 != v228 && v228)
  {
    v228 = 0;
    LODWORD(v229) = 0;
    WTF::fastFree(v152, v139, v140, v141, v142, v143, v144, v145);
  }
  v153 = a1 + 4776;
  if (v200 > 15)
    v154 = -1;
  else
    v154 = v202;
  --*(_DWORD *)(v153 + 12 * v154 + 8);
  if (v76)
  {
    if (v201 > 15)
      v155 = -1;
    else
      v155 = v201;
    --*(_DWORD *)(v153 + 12 * v155 + 8);
  }
}

uint64_t JSC::DFG::Graph::isWatchingStringPrototypeChainIsSaneWatchpoint(JSC::DFG::Graph *this, JSC::DFG::Node *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;

  JSC::CodeOrigin::CodeOrigin(&v18, a2);
  v16 = JSC::DFG::Graph::globalObjectFor((uint64_t)this, &v18, v3, v4, v5, v6, v7, v8);
  if ((v18 & 1) != 0 && (v18 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v18 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  return JSC::DFG::Graph::isWatchingGlobalObjectWatchpoint<JSC::InlineWatchpointSet>((uint64_t)this, v16, (JSC::InlineWatchpointSet *)(v16 + 2320), 15, v12, v13, v14, v15);
}

unint64_t *std::unique_ptr<JSC::DFG::SaneStringGetByValSlowPathGenerator>::~unique_ptr[abi:sn180100](unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 96);
    if (v9 + 112 != v10 && v10 != 0)
    {
      *(_QWORD *)(v9 + 96) = 0;
      *(_DWORD *)(v9 + 104) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_QWORD *)v9 = off_1E3574838;
    v12 = *(_QWORD *)(v9 + 32);
    if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_QWORD *)(v9 + 24);
    if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *,int),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  JSC::AssemblerBuffer *v27;
  JSC::AssemblerBuffer *v28;

  v17 = WTF::fastMalloc((WTF *)0xA0);
  v18 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v17, (JSC::DFG::SpeculativeJIT *)a4);
  *(_QWORD *)v18 = off_1E35746F0;
  *(_DWORD *)(v18 + 48) = a2;
  *(_QWORD *)(v18 + 52) = a3;
  v26 = *(_DWORD *)(a4 + 200);
  *(_DWORD *)(v18 + 60) = v26;
  if (v26 < *(_DWORD *)(a4 + 52))
  {
    v27 = (JSC::AssemblerBuffer *)(a4 + 56);
    do
    {
      if ((v26 + 4) > *(_DWORD *)(a4 + 192))
      {
        v28 = v27;
        JSC::AssemblerBuffer::outOfLineGrow(v27, v19, v20, v21, v22, v23, v24, v25);
        v27 = v28;
        v26 = *(_DWORD *)(a4 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a4 + 56) + v26) = -721215457;
      v26 = *(_DWORD *)(a4 + 200) + 4;
      *(_DWORD *)(a4 + 200) = v26;
      *(_DWORD *)(v17 + 60) = v26;
    }
    while (v26 < *(_DWORD *)(a4 + 52));
  }
  *(_DWORD *)(a4 + 208) = 0;
  *(_QWORD *)v17 = off_1E3573150;
  *(_QWORD *)(v17 + 64) = 0xFFFFFFFFLL;
  *(_WORD *)(v17 + 72) = 0;
  *(_BYTE *)(v17 + 74) = a5;
  *(_QWORD *)(v17 + 80) = v17 + 96;
  *(_QWORD *)(v17 + 88) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a4, 0, v17 + 80, a5, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v24, v25);
  *(_QWORD *)v17 = &off_1E3573120;
  *(_QWORD *)(v17 + 128) = operationGetByValStringInt;
  *(_QWORD *)(v17 + 136) = a6;
  *(_QWORD *)(v17 + 144) = a7;
  *(_BYTE *)(v17 + 152) = a8;
  *(_BYTE *)(v17 + 153) = a9;
  *a1 = v17;
}

void JSC::DFG::SpeculativeJIT::compileFromCharCode(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  _DWORD *v34;
  uint64_t *v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int8x8_t v46;
  JSC::DFG::Node *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  int *v55;
  int *v56;
  int v57;
  char *v58;
  unsigned int v59;
  _BYTE *v60;
  WTF *v61;
  WTF *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  _BYTE *v67;
  WTF *v68;
  WTF *v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  _BYTE *v73;
  WTF *v74;
  WTF *v75;
  unsigned int v76;
  int v77;
  _BYTE *v78;
  WTF *v79;
  WTF *v80;
  unsigned int v81;
  int v82;
  _BYTE *v83;
  _BYTE *v84;
  _BYTE *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  WTF *v103;
  WTF *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  JSC::DFG::Node *v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  int v119;
  unsigned int v120;
  char *v121;
  unint64_t v122;
  uint64_t v123;
  int v124;
  WTF *v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int8 v136;
  JSC::DFG::Node *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  int v152;
  WTF *v153;
  unsigned int v154;
  _BYTE v155[24];
  uint64_t v156;
  int v157;
  int v158;
  int v159;
  uint64_t v160;
  WTF *v161;
  uint64_t v162;
  _BYTE v163[24];
  uint64_t v164;
  char v165;
  uint64_t v166;
  unsigned __int8 v167;
  WTF *v168;
  unsigned int v169;
  unsigned int v170;
  _BYTE v171[24];
  WTF *v172;
  unsigned int v173;
  unsigned int v174;
  _BYTE v175[24];
  _BYTE *v176;
  unsigned int v177;
  unsigned int v178;
  _BYTE v179[24];
  _BYTE *v180;
  uint64_t v181;
  _BYTE v182[32];

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFC000000000000) != 0)
  {
    v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v11 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
    }
    else
    {
      if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12)
        || (JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8), v13 = v12, (_DWORD)v12 == -1))
      {
        JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
        v13 = v14;
      }
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v166, this, a3, a4, a5, a6, a7, a8);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v164, this, v15, v16, v17, v18, v19, v20);
      v21 = v165;
      v22 = v167;
      v161 = (WTF *)v163;
      v162 = 2;
      JSC::MacroAssemblerARM64::branch32((uint64_t)this, 8, v13, 255, v23, v24, v25, v26, (uint64_t)&v159);
      v32 = v159;
      if (v159 != -1)
      {
        v33 = HIDWORD(v162);
        if (HIDWORD(v162) == (_DWORD)v162)
        {
          v34 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v161, (void *)(HIDWORD(v162) + 1), (unint64_t)&v159, v27, v28, v29, v30, v31);
          v36 = *v34;
          v35 = (uint64_t *)(v34 + 1);
          v32 = v36;
          v33 = HIDWORD(v162);
        }
        else
        {
          v35 = &v160;
        }
        v37 = (char *)v161 + 12 * v33;
        *(_DWORD *)v37 = v32;
        *(_QWORD *)(v37 + 4) = *v35;
        ++HIDWORD(v162);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)(*((_QWORD *)this + 44) + 16) + 42216, (char)v22, v27, v28, v29, v30, v31);
      JSC::MacroAssemblerARM64::load64((uint64_t)this, v22 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v13 << 8) | 0x300000000, 0x200000000uLL, v21, v38, v39, v40, v41);
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 0, v21, v42, v43, v44, v45, (uint64_t)&v157, v46);
      v53 = v157;
      v54 = HIDWORD(v162);
      v152 = v13;
      if (v157 != -1)
      {
        if (HIDWORD(v162) == (_DWORD)v162)
        {
          v55 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v161, (void *)(HIDWORD(v162) + 1), (unint64_t)&v157, v48, v49, v50, v51, v52);
          v57 = *v55;
          v56 = v55 + 1;
          v53 = v57;
          v54 = HIDWORD(v162);
        }
        else
        {
          v56 = &v158;
        }
        v58 = (char *)v161 + 12 * v54;
        *(_DWORD *)v58 = v53;
        *(_QWORD *)(v58 + 4) = *(_QWORD *)v56;
        v54 = ++HIDWORD(v162);
      }
      v59 = v54;
      v153 = (WTF *)v155;
      v154 = v54;
      if (v54 < 3)
      {
        v60 = v155;
      }
      else
      {
        if (v54 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197B8EB18);
        }
        v60 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v54));
        v153 = (WTF *)v60;
        v59 = HIDWORD(v162);
        v54 = HIDWORD(v162);
      }
      if (v54)
      {
        v61 = v161;
        v62 = (WTF *)((char *)v161 + 12 * v59);
        do
        {
          *(_DWORD *)v60 = *(_DWORD *)v61;
          *(_QWORD *)(v60 + 4) = *(_QWORD *)((char *)v61 + 4);
          v61 = (WTF *)((char *)v61 + 12);
          v60 += 12;
        }
        while (v61 != v62);
      }
      v63 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v47, v48, v49, v50, v51, v52);
      v65 = v64;
      v66 = v154;
      v168 = (WTF *)v171;
      v169 = 2;
      v170 = v154;
      if (v154 < 3)
      {
        v67 = v171;
      }
      else
      {
        if (v154 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197B8EB20);
        }
        v67 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v154));
        v169 = 12 * v154 / 0xC;
        v168 = (WTF *)v67;
        v66 = v154;
      }
      if (v66)
      {
        v68 = v153;
        v69 = (WTF *)((char *)v153 + 12 * v66);
        do
        {
          *(_DWORD *)v67 = *(_DWORD *)v68;
          *(_QWORD *)(v67 + 4) = *(_QWORD *)((char *)v68 + 4);
          v68 = (WTF *)((char *)v68 + 12);
          v67 += 12;
        }
        while (v68 != v69);
      }
      v70 = WTF::fastMalloc((WTF *)0xB8);
      v71 = v170;
      v172 = (WTF *)v175;
      v173 = 2;
      v174 = v170;
      if (v170 < 3)
      {
        v73 = v175;
      }
      else
      {
        if (v170 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197B8EB28);
        }
        v72 = 12 * v170;
        v73 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v170));
        v173 = (v72 & 0xFFFFFFFC) / 0xC;
        v172 = (WTF *)v73;
        v71 = v170;
      }
      if (v71)
      {
        v74 = v168;
        v75 = (WTF *)((char *)v168 + 12 * v71);
        do
        {
          *(_DWORD *)v73 = *(_DWORD *)v74;
          *(_QWORD *)(v73 + 4) = *(_QWORD *)((char *)v74 + 4);
          v74 = (WTF *)((char *)v74 + 12);
          v73 += 12;
        }
        while (v74 != v75);
      }
      v76 = v174;
      v176 = v179;
      v177 = 2;
      v178 = v174;
      if (v174 < 3)
      {
        v78 = v179;
      }
      else
      {
        if (v174 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197B8EB30);
        }
        v77 = 12 * v174;
        v78 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v174));
        v177 = (v77 & 0xFFFFFFFC) / 0xC;
        v176 = v78;
        v76 = v174;
      }
      if (v76)
      {
        v79 = v172;
        v80 = (WTF *)((char *)v172 + 12 * v76);
        do
        {
          *(_DWORD *)v78 = *(_DWORD *)v79;
          *(_QWORD *)(v78 + 4) = *(_QWORD *)((char *)v79 + 4);
          v79 = (WTF *)((char *)v79 + 12);
          v78 += 12;
        }
        while (v79 != v80);
      }
      v81 = v178;
      v180 = v182;
      LODWORD(v181) = 2;
      HIDWORD(v181) = v178;
      if (v178 < 3)
      {
        v83 = v182;
        goto LABEL_47;
      }
      if (v178 < 0x15555556)
      {
        v82 = 12 * v178;
        v83 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v178));
        LODWORD(v181) = (v82 & 0xFFFFFFFC) / 0xC;
        v180 = v83;
        v81 = v178;
LABEL_47:
        if (v81)
        {
          v84 = v176;
          v85 = &v176[12 * v81];
          do
          {
            *(_DWORD *)v83 = *(_DWORD *)v84;
            *(_QWORD *)(v83 + 4) = *(_QWORD *)(v84 + 4);
            v84 += 12;
            v83 += 12;
          }
          while (v84 != v85);
        }
        JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v70, (uint64_t *)&v180, this);
        v93 = (unint64_t)v180;
        if (v182 != v180 && v180 != 0)
        {
          v180 = 0;
          LODWORD(v181) = 0;
          WTF::fastFree(v93, v86, v87, v88, v89, v90, v91, v92);
        }
        *(_QWORD *)v70 = off_1E35731B0;
        *(_QWORD *)(v70 + 92) = 0xFFFFFFFFLL;
        *(_WORD *)(v70 + 100) = 0;
        *(_BYTE *)(v70 + 102) = v21;
        *(_QWORD *)(v70 + 104) = v70 + 120;
        *(_QWORD *)(v70 + 112) = 2;
        JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v70 + 104, v21, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v91, v92);
        v102 = (unint64_t)v176;
        if (v179 != v176 && v176)
        {
          v176 = 0;
          v177 = 0;
          WTF::fastFree(v102, v95, v96, v97, v98, v99, v100, v101);
        }
        *(_QWORD *)v70 = &off_1E3573180;
        *(_QWORD *)(v70 + 152) = operationStringFromCharCode;
        *(_QWORD *)(v70 + 160) = v63;
        *(_QWORD *)(v70 + 168) = v65;
        *(_BYTE *)(v70 + 176) = v152;
        v156 = v70;
        v103 = v172;
        if (v175 != (_BYTE *)v172 && v172)
        {
          v172 = 0;
          v173 = 0;
          WTF::fastFree((unint64_t)v103, v95, v96, v97, v98, v99, v100, v101);
        }
        v104 = v168;
        if (v171 != (_BYTE *)v168 && v168)
        {
          v168 = 0;
          v169 = 0;
          WTF::fastFree((unint64_t)v104, v95, v96, v97, v98, v99, v100, v101);
        }
        v105 = (_QWORD *)((char *)this + 5656);
        v106 = *((unsigned int *)this + 1417);
        if ((_DWORD)v106 == *((_DWORD *)this + 1416))
        {
          v108 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v105, v106 + 1, (unint64_t)&v156);
          v106 = *((unsigned int *)this + 1417);
          v107 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v106);
          v70 = *v108;
        }
        else
        {
          v107 = (uint64_t *)(*v105 + 8 * v106);
          v108 = &v156;
        }
        *v108 = 0;
        *v107 = v70;
        *((_DWORD *)this + 1417) = v106 + 1;
        v109 = v156;
        v156 = 0;
        if (v109)
          (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
        if (v155 != (_BYTE *)v153 && v153)
          WTF::fastFree((unint64_t)v153, v95, v96, v97, v98, v99, v100, v101);
        v110 = (JSC::DFG::Node *)*((_QWORD *)this + 497);
        JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, v110, v96, v97, v98, v99, v100, v101);
        v118 = (char *)this + 4776;
        v119 = *((_DWORD *)v110 + 12);
        if ((int)v21 > 15)
          v120 = -1;
        else
          v120 = v21;
        v121 = &v118[12 * v120];
        *(_DWORD *)v121 = v119;
        *((_DWORD *)v121 + 1) = 4;
        v122 = ~v119;
        if (v122 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197B8EB10);
        }
        v123 = *((_QWORD *)this + 499) + 24 * (int)v122;
        v124 = *((_DWORD *)v110 + 13);
        *(_QWORD *)v123 = v110;
        *(_DWORD *)(v123 + 8) = v124;
        *(_BYTE *)(v123 + 17) = v21;
        *(_DWORD *)(v123 + 12) = 6;
        *(_BYTE *)(v123 + 16) = 0;
        v125 = v161;
        if (v163 != (_BYTE *)v161 && v161)
        {
          v161 = 0;
          LODWORD(v162) = 0;
          WTF::fastFree((unint64_t)v125, v111, v112, v113, v114, v115, v116, v117);
        }
        if (v164)
        {
          v126 = v165;
          if (v165 != -1)
          {
            if (v165 > 15)
              v126 = -1;
            --*(_DWORD *)(v164 + 12 * v126 + 4784);
          }
        }
        if (v166)
        {
          v127 = (char)v167;
          if ((char)v167 != -1)
          {
            if ((char)v167 > 15)
              v127 = -1;
            --*(_DWORD *)(v166 + 12 * v127 + 4784);
          }
        }
        if (v152 > 15)
          v128 = -1;
        else
          v128 = v152;
        --*(_DWORD *)&v118[12 * v128 + 8];
        return;
      }
      __break(0xC471u);
    }
    JUMPOUT(0x197B8EB08);
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v180, (uint64_t)this, v10, 0, a5, a6, a7, a8);
  v136 = v182[0];
  if (v182[0] == 255)
  {
    v136 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v180, v181, v130, v131, v132, v133, v134, v135);
    v182[0] = v136;
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v129, v130, v131, v132, v133, v134, v135);
  ++*((_DWORD *)this + 1196);
  v143 = *((unsigned int *)this + 1194);
  if ((_DWORD)v143 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v143, (uint64_t)v137, v138, v139, v140, v141, v142);
  }
  v144 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v137, v138, v139, v140, v141, v142);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>((uint64_t)this, (unsigned __int8 *)operationStringFromCharCodeUntyped, 0, v144, v145, v136, v146, v147, (int *)&v176);
  JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v148, v149, v150);
  --*((_DWORD *)this + 1196);
  if ((v181 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v151 = v182[0];
    if (v182[0] > 15)
      v151 = -1;
    --*(_DWORD *)&v180[12 * v151 + 4784];
  }
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int *a9@<X8>)
{
  JSC::AssemblerBuffer *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint8x8_t v21;
  __int32 v22;
  uint8x8_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  unsigned __int8 v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned __int8 *v37;
  uint64_t v38;
  __int16 *v39;
  char *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  int64_t v57;
  unsigned __int8 *v58;
  char v59;
  int v60;
  unsigned __int8 *__src;
  JSC::AssemblerBuffer *v62;
  unsigned int v63;
  unsigned int v64;
  __int16 v65;
  _BYTE v66[6];

  v11 = (JSC::AssemblerBuffer *)a3;
  v12 = (uint64_t)a2;
  v13 = a1;
  if (a6 != 1)
  {
    v65 = a6 | 0x100;
    v63 = 1;
    v62 = (JSC::AssemblerBuffer *)(a1 + 56);
    v15 = 1;
    do
    {
      v16 = 0;
      v17 = 0;
      v18 = v15;
      do
      {
        if ((v66[v16 - 1] & 0x40) != 0)
        {
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }
        v17 |= 1 << v66[v16 - 1];
        v16 += 2;
      }
      while (2 * v15 != v16);
      v19 = 0;
      do
      {
        v20 = v66[v19 - 2] & 0x7F;
        if (v20 >= 0x40)
          goto LABEL_62;
        v17 &= ~(1 << v20);
        v19 += 2;
      }
      while (2 * v15 != v19);
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
      v21.i16[0] = vaddlv_u8(v21);
      v22 = v21.i32[0];
      v23 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v17));
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.i32[0] + v22)
      {
        v24 = 0;
        if (v15 <= 1)
          v25 = 1;
        else
          v25 = v15;
        v26 = 2 * v25;
        while (1)
        {
          v27 = v66[v24 - 1];
          if ((v27 & 0x7Fu) >= 0x40)
            goto LABEL_62;
          if (((v17 >> (v27 & 0x7F)) & 1) != 0)
            break;
          v24 += 2;
          if (v26 == v24)
            goto LABEL_33;
        }
        v28 = v66[v24 - 2];
        if (v28 != v27)
        {
          if ((char)v28 == 63)
          {
            if (v27 == 31)
              goto LABEL_27;
            v30 = v27 & 0x1F | 0xD2800000;
          }
          else
          {
            v29 = (char)v27 == 31 || (char)v28 == 31;
            if (!v29)
            {
              v30 = v27 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v30 = (char)v27 | (32 * (char)v28) | 0x91000000;
          }
LABEL_28:
          v31 = *(_DWORD *)(v13 + 200);
          if (v31 + 4 > *(_DWORD *)(v13 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v62, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v31 = *(_DWORD *)(v13 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v13 + 56) + v31) = v30;
          *(_DWORD *)(v13 + 200) += 4;
          v18 = v63;
        }
        memmove(&v66[v24 - 2], &v66[v24], 2 * v18 - v24 - 2);
        v15 = v63 - 1;
        goto LABEL_32;
      }
      v32 = HIBYTE(v65);
      v59 = v65;
      JSC::MacroAssemblerARM64::swap(v13, (char)v65, SHIBYTE(v65), a4, a5, a6, a7, a8);
      memmove(&v65, v66, 2 * v63 - 2);
      v33 = v63 - 1;
      v29 = v63 == 1;
      v64 = v33;
      v34 = (unsigned __int8 *)&v65;
      __src = &v66[2 * v33 - 2];
      if (v29)
      {
        v35 = 0;
        v36 = 0;
        v60 = 0;
        a2 = &v66[2 * v33 - 2];
      }
      else
      {
        v38 = 2 * v33;
        v39 = &v65;
        while (*(unsigned __int8 *)v39 != v32)
        {
          ++v39;
          v38 -= 2;
          if (!v38)
            goto LABEL_43;
        }
        *(_BYTE *)v39 = v59;
LABEL_43:
        v60 = 0;
        v40 = (char *)&v65;
        a2 = __src;
        v41 = __src;
        do
        {
          if (*v34 == v34[1])
          {
            v42 = v34;
            if (v41 != &v66[2 * v64 - 2])
            {
              if (v34 == a2)
              {
                v42 = v41;
              }
              else
              {
                v57 = v40 - (char *)a2;
                v58 = v41;
                memmove(v41, a2, v40 - (char *)a2);
                v42 = &v58[v57];
              }
            }
            a2 = v34 + 2;
            ++v60;
            v41 = v42;
          }
          v34 += 2;
          v40 += 2;
        }
        while (v34 < __src);
        v35 = v64;
        v36 = v64;
        __src = v41;
      }
      v37 = &v66[2 * v35 - 2];
      if (a2 != v37)
      {
        memmove(__src, a2, v37 - a2);
        v36 = v64;
      }
      v15 = v36 - v60;
LABEL_32:
      v63 = v15;
LABEL_33:
      ;
    }
    while (v15);
  }
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, a5, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v13, (a4 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v13, v12, v43, v44, v45, v46, v47, v48, a9);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v13, 1, v49, v50, v51, v52, v53, v54);
  if ((_BYTE)v11)
  {
    if (v11 == 31)
      LODWORD(v12) = -1862270945;
    else
      LODWORD(v12) = v11 & 0x1F | 0xAA0003E0;
    v56 = *(_DWORD *)(v13 + 200);
    v13 += 200;
    v55 = v56;
    v11 = (JSC::AssemblerBuffer *)(v13 - 144);
    if (v56 + 4 > *(_DWORD *)(v13 - 8))
    {
LABEL_63:
      JSC::AssemblerBuffer::outOfLineGrow(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v55 = *(_DWORD *)v13;
    }
    *(_DWORD *)(*(_QWORD *)v11 + v55) = v12;
    *(_DWORD *)v13 += 4;
  }
}

void JSC::DFG::SpeculativeJIT::compileValueToInt32(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  int v30;
  char *v31;
  WTF *v32;
  int v33;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  int v48;
  uint64_t v49;
  _DWORD *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  char v83;
  _DWORD *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  char v108;
  int *v109;
  int *v110;
  int v111;
  _DWORD *v112;
  _QWORD *v113;
  int *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  unsigned int v135;
  char *v136;
  uint64_t v137;
  int v138;
  WTF *v139;
  char *v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  int v168;
  JSC::DFG::Node *v169;
  uint64_t v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  signed __int8 v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  unint64_t v192;
  int v193;
  int v194;
  char v195;
  __int16 v196;
  char v197;
  int v198;
  int v199;
  char v200;
  __int16 v201;
  char v202;
  _BYTE v203[12];
  unsigned int v204[3];
  _BYTE v205[12];
  WTF *v206;
  unint64_t v207;
  unsigned __int8 v208;
  _BYTE v209[7];
  unsigned int v210[3];
  int v211;
  uint64_t v212;
  uint64_t v213;
  _BYTE v214[24];

  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if (((v10 >> 50) & 0x3F) > 0x30)
  {
    if ((_DWORD)v11 == 49)
    {
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v206, this, v10, a4, a5, a6, a7, a8);
      v18 = *((_QWORD *)a2 + 3);
      if (((v18 >> 50) & 0x3F) - 49 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x197B8FB68);
      }
      v19 = ~*(_DWORD *)((v18 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v19 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197B8FC80);
      }
      if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v19 + 12)
        || (v21 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, *((_QWORD *)a2 + 3), v12, v13, v14, v15, v16, v17), (_DWORD)v21 == -1))
      {
        v21 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v18, v12, v13, v14, v15, v16, v17);
      }
      v22 = (char)v207;
      if (JSC::MacroAssemblerARM64::s_jscvtCheckState == 2)
      {
        v23 = *((_DWORD *)this + 50);
        if (v23 + 4 > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v20, v12, v13, v14, v15, v16, v17);
          v23 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v23) = v22 | (32 * v21) | 0x1E7E0000;
        *((_DWORD *)this + 50) += 4;
      }
      else
      {
        if (!JSC::MacroAssemblerARM64::s_jscvtCheckState)
        {
          if (!JSC::MacroAssemblerARM64::s_lseCheckState)
            JSC::MacroAssemblerARM64::s_lseCheckState = 1;
          JSC::MacroAssemblerARM64::s_jscvtCheckState = 1;
        }
        JSC::MacroAssemblerARM64::branchTruncateDoubleToInt32((uint64_t)this, v21, (char)v207, 0, v14, v15, v16, v17, (uint64_t)v214);
        v211 = *(_DWORD *)v214;
        v212 = *(_QWORD *)&v214[4];
        JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,unsigned long long (*)(double),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID>(&v213, &v211, (uint64_t)this, v22, v21);
        JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)this, (unint64_t)&v213);
        v86 = v213;
        v213 = 0;
        if (v86)
          (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
      }
      JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v12, v13, v14, v15, v16, v17);
      v24 = *((_DWORD *)a2 + 12);
      v25 = ~v24;
      if (v25 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197B8FC88);
      }
      v26 = *((_QWORD *)this + 499);
      if ((int)v22 > 15)
        v27 = -1;
      else
        v27 = v22;
      v28 = (char *)this + 12 * v27;
      *((_DWORD *)v28 + 1194) = v24;
      *((_DWORD *)v28 + 1195) = 5;
      v29 = v26 + 24 * (int)v25;
      v30 = *((_DWORD *)a2 + 13);
      *(_QWORD *)v29 = a2;
      *(_DWORD *)(v29 + 8) = v30;
      *(_BYTE *)(v29 + 17) = v22;
      *(_DWORD *)(v29 + 12) = 1;
      *(_BYTE *)(v29 + 16) = 0;
      v31 = (char *)this + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(int)v21];
      --*((_DWORD *)v31 + 1244);
      v32 = v206;
      if (v206)
      {
        v33 = (char)v207;
        goto LABEL_18;
      }
    }
    else if ((_DWORD)v11 == 52)
    {
      JSC::DFG::SpeculateStrictInt52Operand::SpeculateStrictInt52Operand((uint64_t)&v206, (uint64_t)this, v10, a4, a5, a6, a7, a8);
      JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateStrictInt52Operand>((uint64_t)v214, this, (uint64_t)&v206, v152, v153, v154, v155, v156);
      v162 = v208;
      if (v208 == 255)
      {
        v162 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(v206, v207, 3, v157, v158, v159, v160, v161);
        v208 = v162;
      }
      v163 = v214[8];
      JSC::MacroAssemblerARM64::and64((uint64_t)this, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v162, v214[8]);
      v167 = (uint64_t *)this;
      v168 = v163;
      v169 = a2;
      v170 = 1;
LABEL_122:
      JSC::DFG::SpeculativeJIT::strictInt32Result(v167, v168, v169, v170, 0, v164, v165, v166);
      if (*(_QWORD *)v214)
      {
        v171 = v214[8];
        if (v214[8] != -1)
        {
          if (v214[8] > 15)
            v171 = -1;
          --*(_DWORD *)(*(_QWORD *)v214 + 12 * v171 + 4784);
        }
      }
      v32 = v206;
      v33 = (char)v208;
      goto LABEL_19;
    }
    return;
  }
  if ((_DWORD)v11 != 42 && (_DWORD)v11 != 4)
    return;
  v35 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v35 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197B8FC90);
  }
  v36 = *(unsigned __int8 *)(*((_QWORD *)this + 499) + 24 * (int)v35 + 12);
  if (v36 != 16)
  {
    switch(v36)
    {
      case 0:
      case 20:
      case 21:
      case 22:
      case 24:
        break;
      case 1:
      case 17:
        JSC::DFG::SpeculateInt32Operand::SpeculateInt32Operand((uint64_t)&v206, (uint64_t)this, v10, 1, a5, a6, a7, a8);
        JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateInt32Operand>((uint64_t)v214, this, (uint64_t)&v206, v172, v173, v174, v175, v176);
        v182 = v208;
        if (v208 == 255)
        {
          v182 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v206, v207, (uint64_t)v209, v177, v178, v179, v180, v181);
          v208 = v182;
        }
        JSC::MacroAssemblerARM64::move(this, v182, v214[8], v177, v178, v179, v180, v181);
        v183 = v214[8];
        v170 = JSC::DFG::SpeculateInt32Operand::format((JSC::DFG::SpeculateInt32Operand *)&v206, v184, v185, v186, v187, v188, v189, v190);
        v167 = (uint64_t *)this;
        v168 = v183;
        v169 = a2;
        goto LABEL_122;
      case 5:
      case 6:
        JSC::DFG::SpeculativeJIT::terminateSpeculativeExecution((uint64_t)this, 0x16uLL, 255, 0, a5, a6, a7, a8);
        if (*((_BYTE *)this + 5244))
        {
          __break(0xC471u);
          JUMPOUT(0x197B8FB08);
        }
        return;
      case 7:
        __break(0xC471u);
        JUMPOUT(0x197B8FB28);
      default:
        __break(0xC471u);
        JUMPOUT(0x197B8FB48);
    }
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)v214, this, v10, a4, a5, a6, a7, a8);
  v43 = *((_QWORD *)a2 + 3);
  if ((v43 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_34;
  v44 = ~*(_DWORD *)((v43 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v44 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197B8FC98);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v44 + 12)
    || (v45 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), v37, v38, v39, v40, v41, v42),
        (_DWORD)v45 == -1))
  {
LABEL_34:
    v45 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v43, v37, v38, v39, v40, v41, v42);
  }
  v192 = v43 & 0xFF00FFFFFFFFFFFFLL;
  v46 = 0;
  v47 = &v199;
  v48 = v214[8];
  v49 = v214[8];
  v50 = (_DWORD *)((char *)this + 4976);
  v51 = 0x17u;
  v52 = -1;
  while (*v50)
  {
LABEL_40:
    ++v46;
    v50 += 3;
    if (v46 == 23)
    {
      v46 = v51;
      v54 = (unsigned int *)((char *)this + 12 * v51 + 4968);
      v55 = *v54;
      *(_QWORD *)v54 = 0xFFFFFFFF3FFFFFFFLL;
      v50 = v54 + 2;
      goto LABEL_43;
    }
  }
  v53 = *(v50 - 1);
  if (v53 != -1)
  {
    if (v53 < v52)
    {
      v51 = v46;
      v52 = *(v50 - 1);
    }
    goto LABEL_40;
  }
  v55 = *(v50 - 2);
  *((_QWORD *)v50 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_43:
  v191 = (char *)this + 4968;
  *v50 = 1;
  v56 = JSC::FPRInfo::toRegister::registerForIndex[v46];
  if (v55 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v55, v37, v38, v39, v40, v41, v42);
  v57 = (int)v56;
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, v45, 27, v39, v40, v41, v42, (uint64_t)v210);
  v206 = (WTF *)&v208;
  v207 = 2;
  v64 = *((_QWORD *)a2 + 3);
  if ((v64 & 0xFC000000000000) == 0x10000000000000)
  {
    v144 = *((_QWORD *)this + 702);
    v145 = *(_QWORD *)(v144 + 8);
    v146 = (_QWORD *)(v145 + 24);
    v147 = (_QWORD *)(v145 + 8);
    if ((v64 & 1) != 0)
      v147 = v146;
    v148 = *v147 + 32 * *(unsigned int *)((v64 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v149 = (void *)*(unsigned int *)(v144 + 88);
    if ((_DWORD)v149 != *(_DWORD *)(v148 + 20))
    {
      if ((*(_QWORD *)(v148 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v148, v149, v58, v59, v60, v61, v62, v63);
      else
        *(_DWORD *)(v148 + 20) = (_DWORD)v149;
    }
    if ((*(_QWORD *)(v148 + 8) & 0xFFFFFF8CFFFFFFFFLL) != 0)
    {
      JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v45, 27, v60, v61, v62, v63, (uint64_t)v205);
      JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)this, (void *)(((unint64_t)v45 << 32) | 0x80000000), v64, 0x7300000000uLL, (uint64_t)v205, 1uLL, v150, v151);
    }
  }
  else
  {
    JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, v45, 27, v60, v61, v62, v63, (uint64_t)v204);
    v71 = *((_QWORD *)a2 + 3);
    v72 = *((_QWORD *)this + 702);
    v73 = *(_QWORD *)(v72 + 8);
    v74 = (_QWORD *)(v73 + 24);
    v75 = (_QWORD *)(v73 + 8);
    if ((v71 & 1) != 0)
      v75 = v74;
    v76 = *v75 + 32 * *(unsigned int *)((v71 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v77 = *(unsigned int *)(v72 + 88);
    if ((_DWORD)v77 != *(_DWORD *)(v76 + 20))
    {
      if ((*(_QWORD *)(v76 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v76, (void *)v77, v65, v66, v67, v68, v69, v70);
      else
        *(_DWORD *)(v76 + 20) = v77;
    }
    if ((*(_QWORD *)(v76 + 8) & 0x2C00FFFFFFF7) != 0)
    {
      JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v45, 28, v67, v68, v69, v70, (uint64_t)v203);
      JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)this, (void *)(((unint64_t)v45 << 32) | 0x80000000), v71, 0xFFFFD3FF00000008, (uint64_t)v203, 1uLL, v142, v143);
    }
    v78 = *((_DWORD *)this + 50);
    if (v78 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v77, v65, v66, v67, v68, v69, v70);
      v78 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v78) = (32 * v45) | 0xF1001C1F;
    v79 = *((_DWORD *)this + 50);
    v80 = v79 + 4;
    *((_DWORD *)this + 50) = v79 + 4;
    if ((v79 + 8) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v77, v65, v66, v67, v68, v69, v70);
      v80 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v80) = v48 | 0x1A9F17E0;
    v81 = *((_DWORD *)this + 50) + 4;
    for (*((_DWORD *)this + 50) = v81; v81 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v81)
    {
      if ((v81 + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v77, v65, v66, v67, v68, v69, v70);
        v81 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v81) = -721215457;
      v81 = *((_DWORD *)this + 50) + 4;
    }
    v82 = v81;
    if ((v81 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v77, v65, v66, v67, v68, v69, v70);
      v82 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v82) = 335544320;
    *((_DWORD *)this + 50) += 4;
    if (*((_BYTE *)this + 328))
      v83 = 69;
    else
      v83 = 65;
    v198 = v81;
    v199 = 0;
    v200 = v83;
    v201 = 15;
    v202 = -1;
    if (v81 != -1)
    {
      if (HIDWORD(v207) == (_DWORD)v207)
      {
        v84 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v206, (void *)(HIDWORD(v207) + 1), (unint64_t)&v198, v66, v67, v68, v69, v70);
        v47 = v84 + 1;
        v85 = (char *)v206 + 12 * HIDWORD(v207);
        *(_DWORD *)v85 = *v84;
      }
      else
      {
        v85 = (char *)v206 + 12 * HIDWORD(v207);
        *(_DWORD *)v85 = v81;
      }
      *(_QWORD *)(v85 + 4) = *(_QWORD *)v47;
      ++HIDWORD(v207);
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v204, (uint64_t)this, v65, v66, v67, v68, v69, v70);
  }
  JSC::AssemblyHelpers::unboxDoubleWithoutAssertions(this, v45, v49, (int)v56, 1, v61, v62, v63);
  if (JSC::MacroAssemblerARM64::s_jscvtCheckState == 2)
  {
    v94 = *((_DWORD *)this + 50);
    if (v94 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v87, v88, v89, v90, v91, v92, v93);
      v94 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v94) = v49 | (32 * v56) | 0x1E7E0000;
    v95 = *((_DWORD *)this + 50) + 4;
    *((_DWORD *)this + 50) = v95;
  }
  else
  {
    if (!JSC::MacroAssemblerARM64::s_jscvtCheckState)
    {
      if (!JSC::MacroAssemblerARM64::s_lseCheckState)
        JSC::MacroAssemblerARM64::s_lseCheckState = 1;
      JSC::MacroAssemblerARM64::s_jscvtCheckState = 1;
    }
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 1, (uint64_t)this + 5752, v49, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v92, v93);
    JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<unsigned long long (*)(double),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID>((int *)v204, (unsigned __int8 *)this, v49, v56, v96, v97, v98, v99);
    JSC::DFG::SpeculativeJIT::silentFillAllRegisters(this, v100, v101, v102, v103, v104, v105, v106);
    v95 = *((_DWORD *)this + 50);
  }
  for (; v95 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v95)
  {
    if ((v95 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v87, v88, v89, v90, v91, v92, v93);
      v95 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v95) = -721215457;
    v95 = *((_DWORD *)this + 50) + 4;
  }
  v107 = v95;
  if ((v95 + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v87, v88, v89, v90, v91, v92, v93);
    v107 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v107) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v108 = 69;
  else
    v108 = 65;
  v193 = v95;
  v194 = 0;
  v195 = v108;
  v196 = 15;
  v197 = -1;
  if (v95 != -1)
  {
    if (HIDWORD(v207) == (_DWORD)v207)
    {
      v109 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v206, (void *)(HIDWORD(v207) + 1), (unint64_t)&v193, v89, v90, v91, v92, v93);
      v111 = *v109;
      v110 = v109 + 1;
      v112 = (_DWORD *)((char *)v206 + 12 * HIDWORD(v207));
      *v112 = v111;
      v113 = v112 + 1;
    }
    else
    {
      v114 = (int *)((char *)v206 + 12 * HIDWORD(v207));
      *v114 = v95;
      v113 = v114 + 1;
      v110 = &v194;
    }
    *v113 = *(_QWORD *)v110;
    ++HIDWORD(v207);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v210, (uint64_t)this, v88, v89, v90, v91, v92, v93);
  JSC::MacroAssemblerARM64::and64((uint64_t)this, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v45, v49);
  if (HIDWORD(v207))
  {
    v121 = 0;
    v122 = 0;
    v123 = 12 * HIDWORD(v207);
    do
    {
      if (v122 >= HIDWORD(v207))
      {
        __break(0xC471u);
        JUMPOUT(0x197B8FC78);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v206 + v121), (uint64_t)this, v115, v116, v117, v118, v119, v120);
      ++v122;
      v121 += 12;
    }
    while (v123 != v121);
  }
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v115, v116, v117, v118, v119, v120);
  v131 = *((_DWORD *)a2 + 12);
  v132 = ~v131;
  if (v132 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197B8FCA0);
  }
  v133 = *((_QWORD *)this + 499);
  v134 = (char *)this + 4776;
  if ((int)v49 > 15)
    v135 = -1;
  else
    v135 = v49;
  v136 = &v134[12 * v135];
  *(_DWORD *)v136 = v131;
  *((_DWORD *)v136 + 1) = 5;
  v137 = v133 + 24 * (int)v132;
  v138 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v137 = a2;
  *(_DWORD *)(v137 + 8) = v138;
  *(_BYTE *)(v137 + 17) = v49;
  *(_DWORD *)(v137 + 12) = 1;
  *(_BYTE *)(v137 + 16) = 0;
  v139 = v206;
  if (&v208 != (unsigned __int8 *)v206 && v206)
  {
    v206 = 0;
    LODWORD(v207) = 0;
    WTF::fastFree((unint64_t)v139, v124, v125, v126, v127, v128, v129, v130);
  }
  v140 = &v191[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v57]];
  --*((_DWORD *)v140 + 2);
  if (v192)
  {
    if ((int)v45 > 15)
      v141 = -1;
    else
      v141 = v45;
    --*(_DWORD *)&v134[12 * v141 + 8];
  }
  v32 = *(WTF **)v214;
  if (*(_QWORD *)v214)
  {
    v33 = v214[8];
LABEL_18:
    if (v33 != -1)
    {
LABEL_19:
      if (v33 > 15)
        v33 = -1;
      --*((_DWORD *)v32 + 3 * v33 + 1196);
    }
  }
}

uint64_t JSC::DFG::SpeculateStrictInt52Operand::SpeculateStrictInt52Operand(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = -1;
  if ((a3 & 0xFC000000000000) != 0xD0000000000000
    || (v8 = ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x30), v8 >= *(unsigned int *)(a2 + 4004)))
  {
    __break(0xC471u);
    JUMPOUT(0x197B8FDA4);
  }
  if (*(_BYTE *)(*(_QWORD *)(a2 + 3992) + 24 * (int)v8 + 12))
    *(_BYTE *)(a1 + 16) = JSC::DFG::SpeculativeJIT::fillSpeculateInt52((JSC::DFG::SpeculativeJIT *)a2, a3, 3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::MacroAssemblerARM64::branchTruncateDoubleToInt32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v10;
  int v11;
  int v13;
  JSC::AssemblerBuffer *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;

  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197B8FF4CLL);
  }
  v10 = a4;
  v11 = a3;
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v13 = *(_BYTE *)(a1 + 272) & 0x1F | (32 * a2) | 0x9E780000;
  v14 = (JSC::AssemblerBuffer *)(a1 + 56);
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v13;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::and64(a1, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, 16, v11);
  v23 = *(_DWORD *)(a1 + 200);
  if (v23 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, v16, v17, v18, v19, v20, v21, v22);
    v23 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = -349126113;
  v24 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v24;
  if (*(_BYTE *)(a1 + 328))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, v16, v17, v18, v19, v20, v21, v22);
    v24 = *(_DWORD *)(a1 + 200);
  }
  if (v24 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, v16, v17, v18, v19, v20, v21, v22);
    v24 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v24) = (v10 != 1) | 0x54000000;
  v25 = *(_DWORD *)(a1 + 200);
  v26 = v25 + 4;
  *(_DWORD *)(a1 + 200) = v25 + 4;
  v27 = v25 + 8;
  v28 = v25 + 4;
  if (v27 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, v16, v17, v18, v19, v20, v21, v22);
    v28 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v29 = -122;
  else
    v29 = -126;
  *(_DWORD *)a9 = v26;
  *(_DWORD *)(a9 + 4) = 0;
  *(_BYTE *)(a9 + 8) = v29;
  *(_BYTE *)(a9 + 9) = v10 != 1;
  *(_WORD *)(a9 + 10) = -256;
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,unsigned long long (*)(double),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID>(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  JSC::AssemblerBuffer *v22;
  JSC::AssemblerBuffer *v23;

  v10 = WTF::fastMalloc((WTF *)0x90);
  v11 = *a2;
  v12 = *(_QWORD *)(a2 + 1);
  v13 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v10, (JSC::DFG::SpeculativeJIT *)a3);
  *(_QWORD *)v13 = off_1E35746F0;
  *(_DWORD *)(v13 + 48) = v11;
  *(_QWORD *)(v13 + 52) = v12;
  v21 = *(_DWORD *)(a3 + 200);
  *(_DWORD *)(v13 + 60) = v21;
  if (v21 < *(_DWORD *)(a3 + 52))
  {
    v22 = (JSC::AssemblerBuffer *)(a3 + 56);
    do
    {
      if ((v21 + 4) > *(_DWORD *)(a3 + 192))
      {
        v23 = v22;
        JSC::AssemblerBuffer::outOfLineGrow(v22, v14, v15, v16, v17, v18, v19, v20);
        v22 = v23;
        v21 = *(_DWORD *)(a3 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a3 + 56) + v21) = -721215457;
      v21 = *(_DWORD *)(a3 + 200) + 4;
      *(_DWORD *)(a3 + 200) = v21;
      *(_DWORD *)(v10 + 60) = v21;
    }
    while (v21 < *(_DWORD *)(a3 + 52));
  }
  *(_DWORD *)(a3 + 208) = 0;
  *(_QWORD *)v10 = off_1E3573210;
  *(_QWORD *)(v10 + 64) = 0xFFFFFFFFLL;
  *(_WORD *)(v10 + 72) = 256;
  *(_BYTE *)(v10 + 74) = a4;
  *(_QWORD *)(v10 + 80) = v10 + 96;
  *(_QWORD *)(v10 + 88) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a3, 0, v10 + 80, a4, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v19, v20);
  *(_QWORD *)v10 = &off_1E35731E0;
  *(_QWORD *)(v10 + 128) = operationToInt32;
  *(_BYTE *)(v10 + 136) = a5;
  *a1 = v10;
}

uint64_t JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateInt32Operand>(uint64_t result, JSC::DFG::SpeculativeJIT *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v13;
  char v14;

  *(_QWORD *)result = this;
  *(_BYTE *)(result + 8) = -1;
  v9 = *(_QWORD *)(a3 + 8);
  v10 = ~*(_DWORD *)((v9 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v10 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v10 + 8) == 1)
    {
      v13 = *(unsigned __int8 *)(a3 + 16);
      if (v13 == 255)
      {
        LOBYTE(v13) = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(*(JSC::DFG::SpeculativeJIT **)a3, v9, a3 + 17, a4, a5, a6, a7, a8);
        *(_BYTE *)(a3 + 16) = v13;
      }
      if ((char)v13 > 15)
        v14 = -1;
      else
        v14 = v13;
      ++*((_DWORD *)this + 3 * v14 + 1196);
    }
    else
    {
      LOBYTE(v13) = JSC::DFG::SpeculativeJIT::allocate(this, v9, a3, a4, a5, a6, a7, a8);
    }
    *(_BYTE *)(v11 + 8) = v13;
    return v11;
  }
  return result;
}

uint64_t JSC::DFG::SpeculateInt32Operand::format(JSC::DFG::SpeculateInt32Operand *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((unsigned __int8 *)this + 16) == 255)
    *((_BYTE *)this + 16) = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(*(JSC::DFG::SpeculativeJIT **)this, *((_QWORD *)this + 1), (uint64_t)this + 17, a4, a5, a6, a7, a8);
  return *((unsigned __int8 *)this + 17);
}

void JSC::MacroAssemblerARM64::compare64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  JSC::AssemblerBuffer *v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  _QWORD *v26;
  unsigned int *v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  int v40;

  v8 = a5;
  v9 = a3;
  v10 = a2;
  if ((_DWORD)a4)
  {
    if (a4 > 0xFFF)
    {
      v16 = -(int)a4;
      if (-(int)a4 > 0xFFF)
      {
        if ((a4 & 0xFFF) != 0)
        {
          v12 = 0;
          v13 = 0;
          v15 = 0;
          LOBYTE(v16) = 0;
          v14 = 0;
        }
        else
        {
          v31 = (int)a4 >> 12;
          v32 = BYTE3(a4);
          v33 = 0xC00000000;
          v34 = 1;
          if (-((int)a4 >> 12) > 0xFFF)
            v33 = 0;
          if (-v31 <= 0xFFF)
          {
            v35 = 0x100000000;
          }
          else
          {
            v34 = 0;
            v35 = 0;
          }
          if (-v31 <= 0xFFF)
            v36 = -v31;
          else
            LOBYTE(v36) = 0;
          if (-v31 <= 0xFFF)
            v37 = -((int)a4 >> 12) & 0xFFFFFF00;
          else
            v37 = 0;
          v15 = 0x100000000;
          v38 = v32 == 0;
          if (v32)
            v12 = v33;
          else
            v12 = 0xC00000000;
          if (v38)
            v13 = 0;
          else
            v13 = v34;
          if (v38)
          {
            LOBYTE(v16) = (int)a4 >> 12;
          }
          else
          {
            v15 = v35;
            LOBYTE(v16) = v36;
          }
          if (v38)
            v14 = v31 & 0xFFFFFF00;
          else
            v14 = v37;
        }
      }
      else
      {
        v12 = 0;
        v14 = v16 & 0xFFFFFF00;
        v15 = 0x100000000;
        v13 = 1;
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = a4 & 0xFFFFFF00;
      v15 = 0x100000000;
      LOBYTE(v16) = a4;
    }
    v17 = v12 | v14 | v16;
    v18 = v15 | v13;
    goto LABEL_16;
  }
  v17 = 0;
  v18 = 0x100000000;
  if ((int)a2 <= 0)
  {
    if (!(_DWORD)a2)
      goto LABEL_35;
    goto LABEL_16;
  }
  if ((_DWORD)a2 == 1)
  {
    v10 = 4096;
    goto LABEL_35;
  }
  if ((_DWORD)a2 == 10)
  {
    v10 = 20480;
    goto LABEL_35;
  }
  if ((_DWORD)a2 != 11)
  {
LABEL_16:
    if ((v18 & 0xFF00000000) != 0)
    {
      v19 = (JSC::AssemblerBuffer *)(a1 + 56);
      v20 = *(_DWORD *)(a1 + 200);
      if ((_BYTE)v18)
        v21 = -1325400033;
      else
        v21 = -251658209;
      if ((v17 & 0xFFFFFFFF00000000) == 0xC00000000)
        v21 |= 0x400000u;
      v23 = v21 | ((v17 & 0xFFF) << 10) | (32 * a3);
      if (v20 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v19, a2, a3, a4, a5, a6, a7, a8);
        v20 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v20) = v23;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197B904F8);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (int)a4, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
      if (v9 == 31)
      {
        v39 = *(_DWORD *)(a1 + 200);
        if (v39 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          v39 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v39) = -349150209;
      }
      else
      {
        v22 = *(_DWORD *)(a1 + 200);
        if (v22 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          v22 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = (32 * (v9 & 0x1F)) | 0xEB10001F;
      }
    }
    v24 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v24;
    v25 = v8 & 0x1F | ((v10 & 0xF) << 12);
    v26 = (_QWORD *)(a1 + 56);
    v27 = (unsigned int *)(a1 + 200);
    if (v24 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v24 = *v27;
    }
    goto LABEL_32;
  }
  v10 = 0x4000;
LABEL_35:
  v28 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a3 & 0x1F) << 16) | 0xEA00001F;
  v27 = (unsigned int *)(a1 + 200);
  v29 = *(_DWORD *)(a1 + 200);
  v26 = (_QWORD *)(a1 + 56);
  if (v29 + 4 > *(_DWORD *)(a1 + 192))
  {
    v40 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a3 & 0x1F) << 16) | 0xEA00001F;
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v28 = v40;
    v29 = *v27;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = v28;
  v30 = *(_DWORD *)(a1 + 200);
  v24 = v30 + 4;
  *(_DWORD *)(a1 + 200) = v30 + 4;
  if ((v30 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v24 = *v27;
  }
  v25 = v10 | v8 & 0x1F;
LABEL_32:
  *(_DWORD *)(*v26 + v24) = v25 ^ 0x1A9F17E0;
  *v27 += 4;
}

void JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<unsigned long long (*)(double),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v8;
  unsigned __int8 *v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint8x8_t v18;
  __int32 v19;
  uint8x8_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned __int8 v28;
  char v29;
  BOOL v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  __int16 *v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  char *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  int64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  __int16 v49;
  _BYTE v50[6];

  v8 = (JSC::AssemblerBuffer *)a3;
  v9 = a2;
  if ((_DWORD)a4)
  {
    v49 = a4;
    v47 = 1;
    v13 = 1;
LABEL_11:
    v14 = 0;
    v15 = 0;
    while (((v50[v14 - 1] + 32) & 0x40) == 0)
    {
      v15 |= 1 << (v50[v14 - 1] + 32);
      v14 += 2;
      if (2 * v13 == v14)
      {
        v16 = 0;
        while (1)
        {
          v17 = (v50[v16 - 2] + 32) & 0x7F;
          if (v17 >= 0x40)
            goto LABEL_52;
          v15 &= ~(1 << v17);
          v16 += 2;
          if (2 * v13 == v16)
          {
            v18 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
            v18.i16[0] = vaddlv_u8(v18);
            v19 = v18.i32[0];
            v20 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v15));
            v20.i16[0] = vaddlv_u8(v20);
            if (v20.i32[0] + v19)
            {
              v21 = 0;
              if (v13 <= 1)
                v22 = 1;
              else
                v22 = v13;
              v23 = 2 * v22;
              while (1)
              {
                v24 = (char)v50[v21 - 1];
                v25 = (v50[v21 - 1] + 32) & 0x7F;
                if (v25 >= 0x40)
                  goto LABEL_52;
                if (((v15 >> v25) & 1) != 0)
                {
                  v26 = (char)v50[v21 - 2];
                  v27 = *((_DWORD *)v9 + 50);
                  if (v27 + 4 > *((_DWORD *)v9 + 48))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                    v27 = *((_DWORD *)v9 + 50);
                  }
                  *(_DWORD *)(*((_QWORD *)v9 + 7) + v27) = v24 | (32 * v26) | 0x1E604000;
                  *((_DWORD *)v9 + 50) += 4;
                  memmove(&v50[v21 - 2], &v50[v21], 2 * v47 - v21 - 2);
                  v13 = v47 - 1;
                  goto LABEL_29;
                }
                v21 += 2;
                if (v23 == v21)
                  goto LABEL_30;
              }
            }
            v28 = HIBYTE(v49);
            v29 = v49;
            JSC::MacroAssemblerARM64::swapDouble(v9, (char)v49, SHIBYTE(v49), a4, a5, a6, a7, a8);
            memmove(&v49, v50, 2 * v47 - 2);
            v31 = v47 - 1;
            v30 = v47 == 1;
            v48 = v31;
            v32 = (unsigned __int8 *)&v49;
            v33 = &v50[2 * v31 - 2];
            if (v30)
            {
              v36 = 0;
              v37 = 0;
              v38 = 0;
              a2 = &v50[2 * v31 - 2];
            }
            else
            {
              v34 = 2 * v31;
              v35 = &v49;
              while (*(unsigned __int8 *)v35 != v28)
              {
                ++v35;
                v34 -= 2;
                if (!v34)
                  goto LABEL_39;
              }
              *(_BYTE *)v35 = v29;
LABEL_39:
              v38 = 0;
              v39 = (char *)&v49;
              a2 = v33;
              v40 = v33;
              v44 = v33;
              do
              {
                if (*v32 == v32[1])
                {
                  v41 = v32;
                  if (v40 != &v50[2 * v48 - 2])
                  {
                    if (v32 == a2)
                    {
                      v41 = v40;
                    }
                    else
                    {
                      v46 = v38;
                      v42 = v39 - (char *)a2;
                      v45 = v40;
                      memmove(v40, a2, v39 - (char *)a2);
                      v33 = v44;
                      v41 = &v45[v42];
                      v38 = v46;
                    }
                  }
                  a2 = v32 + 2;
                  ++v38;
                  v40 = v41;
                }
                v32 += 2;
                v39 += 2;
              }
              while (v32 < v33);
              v36 = v48;
              v37 = v48;
              v33 = v40;
            }
            v43 = &v50[2 * v36 - 2];
            if (a2 != v43)
            {
              memmove(v33, a2, v43 - a2);
              v37 = v48;
            }
            v13 = v37 - v38;
LABEL_29:
            v47 = v13;
LABEL_30:
            if (!v13)
              goto LABEL_2;
            goto LABEL_11;
          }
        }
      }
    }
LABEL_52:
    __break(1u);
LABEL_53:
    JSC::AssemblerBuffer::outOfLineGrow(v8, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v11 = *(_DWORD *)v9;
    goto LABEL_8;
  }
LABEL_2:
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v9, (uint64_t)operationToInt32, a3, a4, a5, a6, a7, a8, a1);
  switch((_DWORD)v8)
  {
    case 0:
      return;
    case 0x1F:
      LODWORD(a1) = -1862270945;
      break;
    case 0xFFFFFFFF:
      LODWORD(a1) = -1442774017;
      break;
    default:
      LODWORD(a1) = v8 & 0x1F | 0xAA0003E0;
      break;
  }
  v12 = *((_DWORD *)v9 + 50);
  v9 += 200;
  v11 = v12;
  v8 = (JSC::AssemblerBuffer *)(v9 - 144);
  if (v12 + 4 > *((_DWORD *)v9 - 2))
    goto LABEL_53;
LABEL_8:
  *(_DWORD *)(*(_QWORD *)v8 + v11) = (_DWORD)a1;
  *(_DWORD *)v9 += 4;
}

void JSC::DFG::SpeculativeJIT::silentFillAllRegisters(JSC::DFG::SpeculativeJIT *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;

  v9 = *((_DWORD *)this + 1441);
  if (v9)
  {
    v10 = v9 - 1;
    v11 = 16 * (v9 - 1);
    while (*((_DWORD *)this + 1441) > v10)
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl((uint64_t)this, *((_QWORD *)this + 719) + v11, a3, a4, a5, a6, a7, a8);
      v11 -= 16;
      if (--v10 == -1)
        goto LABEL_5;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_5:
    *((_BYTE *)this + 5768) = 0;
    if (*((_DWORD *)this + 1440))
    {
      if (*((_DWORD *)this + 1441))
        *((_DWORD *)this + 1441) = 0;
      v12 = *((_QWORD *)this + 719);
      if (v12)
      {
        *((_QWORD *)this + 719) = 0;
        *((_DWORD *)this + 1440) = 0;
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compileUInt32ToNumber(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57[3];
  uint64_t v58;
  int v59;
  JSC::DFG::SpeculativeJIT *v60;
  unint64_t v61;
  char v62;
  _BYTE v63[7];

  v10 = *((_DWORD *)a2 + 18);
  if (v10 >= 4)
  {
    JSC::DFG::SpeculateInt32Operand::SpeculateInt32Operand((uint64_t)&v60, (uint64_t)this, *((_QWORD *)a2 + 3), 0, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateInt32Operand>((uint64_t)&v58, this, (uint64_t)&v60, v42, v43, v44, v45, v46);
    v52 = v62;
    if (v62 == 255)
    {
      v52 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v60, v61, (uint64_t)v63, v47, v48, v49, v50, v51);
      v62 = v52;
    }
    JSC::MacroAssemblerARM64::and64((uint64_t)this, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v52, (char)v59);
    result = (uint64_t)JSC::DFG::SpeculativeJIT::strictInt52Result((uint64_t *)this, (char)v59, a2, 0, v53, v54, v55, v56);
  }
  else
  {
    if (v10 != 2)
    {
      result = 3535;
      __break(0xC471u);
      return result;
    }
    JSC::DFG::SpeculateInt32Operand::SpeculateInt32Operand((uint64_t)&v60, (uint64_t)this, *((_QWORD *)a2 + 3), 0, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v58, this, v11, v12, v13, v14, v15, v16);
    v22 = v62;
    if (v62 == 255)
    {
      v22 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v60, v61, (uint64_t)v63, v17, v18, v19, v20, v21);
      v62 = v22;
    }
    JSC::MacroAssemblerARM64::move(this, v22, (char)v59, v17, v18, v19, v20, v21);
    JSC::MacroAssemblerARM64::branchTest32((uint64_t)this, 4, (char)v59, (char)v59, v23, v24, v25, v26, (uint64_t)v57);
    JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, v57);
    v27 = (char)v59;
    v35 = JSC::DFG::SpeculateInt32Operand::format((JSC::DFG::SpeculateInt32Operand *)&v60, v28, v29, v30, v31, v32, v33, v34);
    result = (uint64_t)JSC::DFG::SpeculativeJIT::strictInt32Result((uint64_t *)this, v27, a2, v35, 0, v36, v37, v38);
  }
  if (v58)
  {
    v40 = (char)v59;
    if ((char)v59 != -1)
    {
      if ((char)v59 > 15)
        v40 = -1;
      --*(_DWORD *)(v58 + 12 * v40 + 4784);
    }
  }
  v41 = v62;
  if (v62 > 15)
    v41 = -1;
  --*((_DWORD *)v60 + 3 * v41 + 1196);
  return result;
}

uint64_t *JSC::DFG::SpeculativeJIT::strictInt52Result(uint64_t *this, int a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  int v16;

  v10 = this;
  if (!(_DWORD)a4)
    this = JSC::DFG::SpeculativeJIT::useChildren(this, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  v11 = *((_DWORD *)a3 + 12);
  v12 = ~v11;
  if (v12 >= *((unsigned int *)v10 + 1001))
  {
    __break(0xC471u);
  }
  else
  {
    v13 = v10[499] + 24 * (int)v12;
    if (a2 > 15)
      v14 = -1;
    else
      v14 = a2;
    v15 = (char *)v10 + 12 * v14;
    *((_DWORD *)v15 + 1194) = v11;
    *((_DWORD *)v15 + 1195) = 4;
    v16 = *((_DWORD *)a3 + 13);
    *(_QWORD *)v13 = a3;
    *(_DWORD *)(v13 + 8) = v16;
    *(_BYTE *)(v13 + 17) = a2;
    *(_DWORD *)(v13 + 12) = 3;
    *(_BYTE *)(v13 + 16) = 0;
  }
  return this;
}

void JSC::DFG::SpeculativeJIT::compileDoubleAsInt32(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  _BYTE v47[24];
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52[2];
  unsigned __int8 v53;

  JSC::DFG::SpeculateDoubleOperand::SpeculateDoubleOperand((uint64_t)v52, (uint64_t)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v50, this, v10, v11, v12, v13, v14, v15);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v48, this, v16, v17, v18, v19, v20, v21);
  v28 = v53;
  if (v53 == 255)
  {
    v28 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(v52[0], v52[1], v22, v23, v24, v25, v26, v27);
    v53 = v28;
  }
  v45 = (WTF *)v47;
  v46 = 2;
  v29 = *((_DWORD *)a2 + 18);
  if (v29 == 1)
  {
    __break(0xC471u);
  }
  else
  {
    v30 = v49;
    JSC::MacroAssemblerARM64::branchConvertDoubleToInt32((uint64_t)this, (char)v28, v49, (uint64_t)&v45, v51, (v29 - 3) < 0xFFFFFFFE, v26, v27);
    JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, (unsigned int *)&v45);
    JSC::DFG::SpeculativeJIT::strictInt32Result((uint64_t *)this, v30, a2, 1, 0, v31, v32, v33);
    v41 = v45;
    if (v47 != (_BYTE *)v45 && v45)
    {
      v45 = 0;
      LODWORD(v46) = 0;
      WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
    }
    if (v48)
    {
      v42 = v49;
      if (v49 != -1)
      {
        if (v49 > 15)
          v42 = -1;
        --*(_DWORD *)(v48 + 12 * v42 + 4784);
      }
    }
    if (v50)
    {
      v43 = v50 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v51];
      --*(_DWORD *)(v43 + 4976);
    }
    v44 = v52[0] + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v53];
    --*(_DWORD *)(v44 + 4976);
  }
}

void JSC::MacroAssemblerARM64::branchConvertDoubleToInt32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v11;
  int v13;
  int v14;
  JSC::AssemblerBuffer *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x8_t v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  int *v52;
  int *v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  char v58;
  __int16 v59;
  char v60;
  unsigned int v61[3];
  int v62;
  uint64_t v63;

  v8 = a6;
  v11 = a2;
  v13 = a3 & 0x1F;
  v14 = v13 | (32 * a2) | 0x1E600000;
  v15 = (JSC::AssemblerBuffer *)(a1 + 56);
  v16 = *(_DWORD *)(a1 + 200);
  if (v16 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v16 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v16) = v14;
  v17 = *(_DWORD *)(a1 + 200);
  v18 = v17 + 4;
  *(_DWORD *)(a1 + 200) = v17 + 4;
  v19 = (32 * v13) | 0x1E62001F;
  if ((v17 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, a2, a3, a4, a5, a6, a7, a8);
    v18 = *(_DWORD *)(a1 + 200);
  }
  v20 = 32 * v11;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = v19;
  v21 = *(_DWORD *)(a1 + 200);
  v22 = v21 + 4;
  *(_DWORD *)(a1 + 200) = v21 + 4;
  if ((v21 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, a2, a3, a4, a5, a6, a7, a8);
    v22 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = v20 | 0x1E7F2000;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(a1, 1, a3, a4, a5, a6, a7, a8, (uint64_t)&v62);
  v29 = v62;
  if (v62 != -1)
  {
    v30 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v30 == *(_DWORD *)(a4 + 8))
    {
      v31 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v30 + 1), (unint64_t)&v62, v23, v24, v25, v26, v27);
      v33 = *v31;
      v32 = (uint64_t *)(v31 + 1);
      v29 = v33;
      LODWORD(v30) = *(_DWORD *)(a4 + 12);
    }
    else
    {
      v32 = &v63;
    }
    v34 = *(_QWORD *)a4 + 12 * v30;
    *(_DWORD *)v34 = v29;
    *(_QWORD *)(v34 + 4) = *v32;
    ++*(_DWORD *)(a4 + 12);
  }
  if (v8)
  {
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 1, a3, v24, v25, v26, v27, (uint64_t)v61, v28);
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197B91118);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    v42 = *(_BYTE *)(a1 + 304);
    v43 = v20 | 0x9E660000 | v42 & 0x1F;
    v44 = *(_DWORD *)(a1 + 200);
    if (v44 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v15, v35, v36, v37, v38, v39, v40, v41);
      v44 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v44) = v43;
    v45 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v45;
    if (*(_BYTE *)(a1 + 328))
    {
      while ((signed int)v45 < *(_DWORD *)(a1 + 52))
      {
        if (v45 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v15, v35, v36, v37, v38, v39, v40, v41);
          v45 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v45) = -721215457;
        v45 = *(_DWORD *)(a1 + 200) + 4;
        *(_DWORD *)(a1 + 200) = v45;
      }
      *(_DWORD *)(a1 + 208) = 0;
    }
    if (v45 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v15, v35, v36, v37, v38, v39, v40, v41);
      v45 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v45) = v42 & 0x1F | 0xB7F80000;
    v46 = *(_DWORD *)(a1 + 200);
    v47 = v46 + 4;
    *(_DWORD *)(a1 + 200) = v46 + 4;
    v48 = v46 + 8;
    v49 = v46 + 4;
    if (v48 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v15, v35, v36, v37, v38, v39, v40, v41);
      v49 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v49) = -721215457;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v50 = -120;
    else
      v50 = -124;
    v56 = v47;
    v57 = 63;
    v58 = v50;
    v59 = 1;
    v60 = v42;
    if (v47 != -1)
    {
      v51 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v51 == *(_DWORD *)(a4 + 8))
      {
        v52 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v51 + 1), (unint64_t)&v56, v37, v38, v39, v40, v41);
        v54 = *v52;
        v53 = v52 + 1;
        v55 = *(_QWORD *)a4 + 12 * *(unsigned int *)(a4 + 12);
        *(_DWORD *)v55 = v54;
      }
      else
      {
        v53 = &v57;
        v55 = *(_QWORD *)a4 + 12 * v51;
        *(_DWORD *)v55 = v47;
      }
      *(_QWORD *)(v55 + 4) = *(_QWORD *)v53;
      ++*(_DWORD *)(a4 + 12);
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v61, a1, v36, v37, v38, v39, v40, v41);
  }
}

void JSC::DFG::SpeculativeJIT::compileDoubleRep(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::Node *v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  int *v28;
  _DWORD *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int i;
  unsigned int v73;
  char v74;
  int *v75;
  int *v76;
  int v77;
  _DWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  unsigned int v127;
  char *v128;
  unint64_t v129;
  uint64_t v130;
  int v131;
  unsigned int v132;
  int *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  unsigned int v153;
  char *v154;
  unint64_t v155;
  uint64_t v156;
  int v157;
  JSC::DFG::SpeculativeJIT *v158;
  unsigned int v159;
  char v160;
  char *v161;
  unint64_t v162;
  unint64_t v163;
  char v164;
  uint64_t v165;
  char *v166;
  _DWORD *v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  char *v171;
  unsigned int v172;
  int v173;
  unsigned int v174;
  int v175;
  unsigned int v176;
  char *v177;
  unint64_t v178;
  uint64_t v179;
  int v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int8x8_t v219;
  int v220;
  unsigned int v221;
  _DWORD *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  _QWORD *v228;
  uint64_t v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unsigned int v245;
  int v246;
  unsigned int v247;
  char v248;
  _DWORD *v249;
  char *v250;
  uint64_t v251;
  _DWORD *v252;
  uint64_t *v253;
  int v254;
  _DWORD *v255;
  uint64_t *v256;
  _DWORD *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int v270;
  int v271;
  unsigned int v272;
  char v273;
  int *v274;
  int *v275;
  int v276;
  _DWORD *v277;
  _QWORD *v278;
  int *v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int *v282;
  uint64_t v283;
  unsigned int v284;
  unsigned int *v285;
  uint64_t v286;
  unsigned int v287;
  unsigned int *v288;
  uint64_t v289;
  unsigned int v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unsigned int v302;
  JSC::AssemblerBuffer *v303;
  char v304;
  char *v305;
  char *v306;
  unint64_t v307;
  unint64_t v308;
  int v309;
  int v310;
  char v311;
  __int16 v312;
  char v313;
  _BYTE v314[12];
  int v315;
  int v316;
  char v317;
  __int16 v318;
  char v319;
  int v320;
  uint64_t v321;
  int v322;
  int v323;
  char v324;
  __int16 v325;
  char v326;
  int v327;
  uint64_t v328;
  _BYTE v329[12];
  int v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  unsigned int v334[3];
  unsigned int v335[3];
  unsigned int v336[3];
  JSC::DFG::SpeculativeJIT *v337;
  unint64_t v338;
  char v339;
  _BYTE v340[23];
  uint64_t v341;
  char v342;
  _BYTE v343[20];

  v8 = a2;
  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if (((v10 >> 50) & 0x3F) > 4)
  {
    switch((_DWORD)v11)
    {
      case 5:
        v307 = v10 & 0xFF00FFFFFFFFFFFFLL;
        if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_122;
        v80 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        if (v80 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197B92688);
        }
        if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v80 + 12))
          v25 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
        else
LABEL_122:
          v25 = -1;
        v81 = 0;
        v82 = (_DWORD *)((char *)this + 4976);
        v83 = 0x17u;
        v84 = -1;
        v305 = (char *)this + 4968;
        while (1)
        {
          if (!*v82)
          {
            v85 = *(v82 - 1);
            if (v85 == -1)
            {
              v87 = *(v82 - 2);
              *((_QWORD *)v82 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_55:
              *v82 = 1;
              v88 = JSC::FPRInfo::toRegister::registerForIndex[v81];
              if (v87 != 0x3FFFFFFF)
                JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v87, a3, a4, a5, a6, a7, a8);
              if (v25 == -1)
                v25 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
              JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v337, this, a3, a4, a5, a6, a7, a8);
              v42 = v25;
              JSC::AssemblyHelpers::unboxDoubleWithoutAssertions(this, v25, (char)v338, (char)v88, 1, v89, v90, v91);
              v99 = *((_DWORD *)this + 50);
              if (v99 + 4 > *((_DWORD *)this + 48))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v92, v93, v94, v95, v96, v97, v98);
                v99 = *((_DWORD *)this + 50);
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v99) = (v88 << 16) | (32 * v88) | 0x1E602000;
              *((_DWORD *)this + 50) += 4;
              JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare((uint64_t)this, 0, v93, v94, v95, v96, v97, v98, (uint64_t)&v341);
              v107 = *((_QWORD *)v8 + 3);
              v108 = *((_QWORD *)this + 702);
              v109 = *(_QWORD *)(v108 + 8);
              v110 = *(unsigned int *)((v107 & 0xFF00FFFFFFFFFFFELL) + 0x14);
              v111 = (uint64_t *)(v109 + 24);
              v112 = (uint64_t *)(v109 + 8);
              if ((v107 & 1) != 0)
                v112 = v111;
              v113 = *v112;
              v114 = *v112 + 32 * v110;
              v115 = *(_DWORD *)(v108 + 88);
              v116 = *(_DWORD *)(v114 + 20);
              if (v115 == v116)
              {
LABEL_64:
                if ((*(_QWORD *)(v114 + 8) & 0xFFFFFFCCFFFFFFFFLL) != 0)
                {
                  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 3, v25, 27, v103, v104, v105, v106, (uint64_t)v343);
                  JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)this, (void *)(((unint64_t)v25 << 32) | 0x80000000), v107, 0x3300000000uLL, (uint64_t)v343, 1uLL, v117, v118);
                }
                v119 = *((_DWORD *)this + 50);
                if (v119 + 4 > *((_DWORD *)this + 48))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v100, v101, v102, v103, v104, v105, v106);
                  v119 = *((_DWORD *)this + 50);
                }
                *(_DWORD *)(*((_QWORD *)this + 7) + v119) = v88 | (32 * (v25 & 0x1F)) | 0x1E620000;
                *((_DWORD *)this + 50) += 4;
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v341, (uint64_t)this, v101, v102, v103, v104, v105, v106);
                JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, v8, v120, v121, v122, v123, v124, v125);
                v126 = *((_DWORD *)v8 + 12);
                v127 = JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v88];
                v128 = &v305[12 * v127];
                *(_DWORD *)v128 = v126;
                *((_DWORD *)v128 + 1) = 6;
                v129 = ~v126;
                if (v129 >= *((unsigned int *)this + 1001))
                {
                  __break(0xC471u);
                  JUMPOUT(0x197B92690);
                }
                v130 = *((_QWORD *)this + 499) + 24 * (int)v129;
                v131 = *((_DWORD *)v8 + 13);
                *(_QWORD *)v130 = v8;
                *(_DWORD *)(v130 + 8) = v131;
                *(_BYTE *)(v130 + 17) = v88;
                *(_DWORD *)(v130 + 12) = 4;
                *(_BYTE *)(v130 + 16) = 0;
                if (v337)
                {
                  v132 = (char)v338;
                  if ((char)v338 != -1)
                  {
                    if ((char)v338 > 15)
                      v132 = -1;
                    --*((_DWORD *)v337 + 3 * v132 + 1196);
                  }
                }
                --*(_DWORD *)&v305[12 * v127 + 8];
                if (v307)
                  goto LABEL_94;
                return;
              }
              if ((*(_QWORD *)(v114 + 8) & 0x2800FFFFFFF7) == 0)
              {
LABEL_160:
                *(_DWORD *)(v114 + 20) = v115;
                goto LABEL_64;
              }
              if ((v116 ^ v115) >= 2)
              {
                v281 = *(_QWORD *)v114;
                if (*(_QWORD *)v114 == 4)
                  goto LABEL_198;
                *(_QWORD *)v114 = v281 | 2;
                v288 = (unsigned int *)(v281 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v281 & 1) != 0)
                {
                  v299 = 2 * *v288;
                  do
                  {
                    if (!(v299 * 4))
                      goto LABEL_198;
                    v300 = *(_QWORD *)&v288[v299];
                    if ((*(_BYTE *)(v300 + 19) & 0xC) != 0)
                      break;
                    v301 = *(_QWORD *)(v300 + 96);
                    v302 = (v301 & 1) != 0 ? (v301 >> 1) & 3 : *(unsigned __int8 *)(v301 + 4);
                    v299 -= 2;
                  }
                  while (v302 != 2);
                  WTF::fastFree((unint64_t)v288, v100, v101, v102, v103, v104, v105, v106);
LABEL_223:
                  *(_QWORD *)v114 = 4;
                }
                else if (v288)
                {
                  if ((*((_BYTE *)v288 + 19) & 0xC) != 0)
                    goto LABEL_223;
                  v289 = *((_QWORD *)v288 + 12);
                  v290 = (v289 & 1) != 0 ? (v289 >> 1) & 3 : *(unsigned __int8 *)(v289 + 4);
                  if (v290 == 2)
                    goto LABEL_223;
                }
LABEL_198:
                *(_DWORD *)(v113 + 32 * v110 + 16) = -21020677;
              }
              if ((v115 & 1) != 0)
                *(_QWORD *)v114 &= ~2uLL;
              goto LABEL_160;
            }
            if (v85 < v84)
            {
              v83 = v81;
              v84 = *(v82 - 1);
            }
          }
          ++v81;
          v82 += 3;
          if (v81 == 23)
          {
            v81 = v83;
            v86 = (unsigned int *)((char *)this + 12 * v83 + 4968);
            v87 = *v86;
            *(_QWORD *)v86 = 0xFFFFFFFF3FFFFFFFLL;
            v82 = v86 + 2;
            goto LABEL_55;
          }
        }
      case 0x2A:
        goto LABEL_3;
      case 0x34:
        JSC::DFG::SpeculateStrictInt52Operand::SpeculateStrictInt52Operand((uint64_t)&v337, (uint64_t)this, v10, a4, a5, a6, a7, a8);
        JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v341, this, v182, v183, v184, v185, v186, v187);
        v193 = v339;
        if (v339 == 255)
        {
          v193 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(v337, v338, 3, v188, v189, v190, v191, v192);
          v339 = v193;
        }
        v194 = v342;
        JSC::MacroAssemblerARM64::convertInt64ToDouble(this, v193, v342, v188, v189, v190, v191, v192);
        JSC::DFG::SpeculativeJIT::doubleResult((uint64_t *)this, v194, v8, 0, v195, v196, v197, v198);
        if (v341)
        {
          v199 = v341 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v342];
          --*(_DWORD *)(v199 + 4976);
        }
        v200 = v339;
        if (v339 > 15)
          v200 = -1;
        v161 = (char *)v337 + 12 * v200;
        goto LABEL_98;
    }
LABEL_269:
    __break(0xC471u);
    JUMPOUT(0x197B925E8);
  }
  if ((_DWORD)v11 != 4)
    goto LABEL_269;
LABEL_3:
  v12 = *((_QWORD *)this + 688);
  v13 = *(unsigned int *)((v10 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((v10 & 1) != 0)
    v15 = v14;
  v16 = *v15;
  v17 = *v15 + 32 * v13;
  v18 = *((_DWORD *)this + 1396);
  v19 = *(_DWORD *)(v17 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v251 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 != 4)
        {
          *(_QWORD *)v17 = v251 | 2;
          v282 = (unsigned int *)(v251 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v251 & 1) != 0)
          {
            v291 = 2 * *v282;
            while (v291 * 4)
            {
              v292 = *(_QWORD *)&v282[v291];
              if ((*(_BYTE *)(v292 + 19) & 0xC) == 0)
              {
                v293 = *(_QWORD *)(v292 + 96);
                v294 = (v293 & 1) != 0 ? (v293 >> 1) & 3 : *(unsigned __int8 *)(v293 + 4);
                v291 -= 2;
                if (v294 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v282, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_207;
            }
          }
          else if (v282)
          {
            if ((*((_BYTE *)v282 + 19) & 0xC) != 0
              || ((v283 = *((_QWORD *)v282 + 12), (v283 & 1) != 0)
                ? (v284 = (v283 >> 1) & 3)
                : (v284 = *(unsigned __int8 *)(v283 + 4)),
                  v284 == 2))
            {
LABEL_207:
              *(_QWORD *)v17 = 4;
            }
          }
        }
        *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v17 &= ~2uLL;
    }
    *(_DWORD *)(v17 + 20) = v18;
  }
  v20 = *(_QWORD *)(v17 + 8);
  if (v20)
    v21 = (v20 & 0xFFFFFFFCFFFFFFFFLL) == 0;
  else
    v21 = 0;
  if (v21)
  {
    v162 = *((_QWORD *)v8 + 3);
    v337 = this;
    v338 = v162;
    v339 = -1;
    v163 = ~*(_DWORD *)((v162 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v163 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197B92698);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v163 + 12))
    {
      v164 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v162, (uint64_t)v340, a4, a5, a6, a7, a8);
      v339 = v164;
    }
    else
    {
      v164 = -1;
    }
    v165 = 0;
    v166 = (char *)this + 4968;
    v167 = (_DWORD *)((char *)this + 4976);
    v168 = 0x17u;
    v169 = -1;
    while (1)
    {
      if (!*v167)
      {
        v170 = *(v167 - 1);
        if (v170 == -1)
        {
          v172 = *(v167 - 2);
          *((_QWORD *)v167 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_112:
          *v167 = 1;
          v173 = JSC::FPRInfo::toRegister::registerForIndex[v165];
          if (v172 != 0x3FFFFFFF)
          {
            JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v172, a3, a4, a5, a6, a7, a8);
            v164 = v339;
          }
          if (v164 == -1)
          {
            v164 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v337, v338, (uint64_t)v340, a4, a5, a6, a7, a8);
            v339 = v164;
          }
          v174 = *((_DWORD *)this + 50);
          if (v174 + 4 > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v162, a3, a4, a5, a6, a7, a8);
            v174 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v174) = v173 | (32 * (v164 & 0x1F)) | 0x1E620000;
          *((_DWORD *)this + 50) += 4;
          JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, v8, a3, a4, a5, a6, a7, a8);
          v175 = *((_DWORD *)v8 + 12);
          v176 = JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v173];
          v177 = &v166[12 * v176];
          *(_DWORD *)v177 = v175;
          *((_DWORD *)v177 + 1) = 6;
          v178 = ~v175;
          if (v178 < *((unsigned int *)this + 1001))
          {
            v179 = *((_QWORD *)this + 499) + 24 * (int)v178;
            v180 = *((_DWORD *)v8 + 13);
            *(_QWORD *)v179 = v8;
            *(_DWORD *)(v179 + 8) = v180;
            *(_BYTE *)(v179 + 17) = v173;
            *(_DWORD *)(v179 + 12) = 4;
            *(_BYTE *)(v179 + 16) = 0;
            --*(_DWORD *)&v166[12 * v176 + 8];
            v181 = v339;
            if (v339 > 15)
              v181 = -1;
            v161 = (char *)v337 + 12 * v181;
LABEL_98:
            --*((_DWORD *)v161 + 1196);
            return;
          }
          __break(0xC471u);
LABEL_277:
          JUMPOUT(0x197B924F0);
        }
        if (v170 < v169)
        {
          v168 = v165;
          v169 = *(v167 - 1);
        }
      }
      ++v165;
      v167 += 3;
      if (v165 == 23)
      {
        v165 = v168;
        v171 = &v166[12 * v168];
        v172 = *(_DWORD *)v171;
        *(_QWORD *)v171 = 0xFFFFFFFF3FFFFFFFLL;
        v167 = v171 + 8;
        goto LABEL_112;
      }
    }
  }
  v22 = *((_QWORD *)v8 + 3);
  v23 = v22 & 0xFF00FFFFFFFFFFFFLL;
  if ((v22 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_100;
  v24 = ~*(_DWORD *)((v22 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v24 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197B92678);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v24 + 12))
    v25 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)v8 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_100:
    v25 = -1;
  v26 = 0;
  v27 = &v331;
  v28 = &v323;
  v29 = (_DWORD *)((char *)this + 4976);
  v30 = 0x17u;
  v31 = -1;
  while (*v29)
  {
LABEL_19:
    ++v26;
    v29 += 3;
    if (v26 == 23)
    {
      v26 = v30;
      v33 = (unsigned int *)((char *)this + 12 * v30 + 4968);
      v34 = *v33;
      *(_QWORD *)v33 = 0xFFFFFFFF3FFFFFFFLL;
      v29 = v33 + 2;
      goto LABEL_22;
    }
  }
  v32 = *(v29 - 1);
  if (v32 != -1)
  {
    if (v32 < v31)
    {
      v30 = v26;
      v31 = *(v29 - 1);
    }
    goto LABEL_19;
  }
  v34 = *(v29 - 2);
  *((_QWORD *)v29 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_22:
  *v29 = 1;
  v35 = JSC::FPRInfo::toRegister::registerForIndex[v26];
  if (v34 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v34, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v341, this, a3, a4, a5, a6, a7, a8);
  if (v25 == -1)
    v25 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v22, v36, v37, v38, v39, v40, v41);
  v304 = v342;
  v337 = (JSC::DFG::SpeculativeJIT *)&v339;
  v338 = 2;
  v42 = v25;
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, v25, 27, v38, v39, v40, v41, (uint64_t)v336);
  v50 = *((_QWORD *)v8 + 3);
  v306 = (char *)this + 4968;
  v308 = v23;
  if ((v50 & 0xFC000000000000) == 0xA8000000000000)
  {
    JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, v25, 27, v46, v47, v48, v49, (uint64_t)v335);
    JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, v25, 10, v201, v202, v203, v204, (uint64_t)v334);
    v303 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
    v212 = *((_DWORD *)this + 50);
    if (v212 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v303, v205, v206, v207, v208, v209, v210, v211);
      v212 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v212) = v35 | 0x6F00E400;
    *((_DWORD *)this + 50) += 4;
    JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, v25, 2, v208, v209, v210, v211, (uint64_t)&v332);
    v220 = v332;
    v330 = v332;
    v331 = v333;
    if (v332 != -1)
    {
      v221 = HIDWORD(v338);
      if (HIDWORD(v338) == (_DWORD)v338)
      {
        v222 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v337, (void *)(HIDWORD(v338) + 1), (unint64_t)&v330, v214, v215, v216, v217, v218);
        v27 = (uint64_t *)(v222 + 1);
        v220 = *v222;
        v221 = HIDWORD(v338);
      }
      v223 = (char *)v337 + 12 * v221;
      *(_DWORD *)v223 = v220;
      *(_QWORD *)(v223 + 4) = *v27;
      ++HIDWORD(v338);
    }
    v224 = *((_QWORD *)v8 + 3);
    v225 = *((_QWORD *)this + 702);
    v226 = *(_QWORD *)(v225 + 8);
    v227 = (_QWORD *)(v226 + 24);
    v228 = (_QWORD *)(v226 + 8);
    if ((v224 & 1) != 0)
      v228 = v227;
    v229 = *v228 + 32 * *(unsigned int *)((v224 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v230 = (void *)*(unsigned int *)(v225 + 88);
    if ((_DWORD)v230 != *(_DWORD *)(v229 + 20))
    {
      if ((*(_QWORD *)(v229 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v229, v230, v213, v214, v215, v216, v217, v218);
      else
        *(_DWORD *)(v229 + 20) = (_DWORD)v230;
    }
    if ((*(_QWORD *)(v229 + 8) & 0x2C00FFFFFFF7) != 0)
    {
      JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v25, 4, v215, v216, v217, v218, (uint64_t)v329, v219);
      JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)this, (void *)(((unint64_t)v25 << 32) | 0x80000000), v224, 0xFFFFD3FF00000008, (uint64_t)v329, 1uLL, v231, v232);
    }
    JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, v25, 6, v215, v216, v217, v218, (uint64_t)&v327);
    if (*((_BYTE *)this + 212))
    {
      JSC::MacroAssemblerARM64::moveToCachedReg(this, (uint64_t)&JSC::DFG::SpeculativeJIT::compileDoubleRep(JSC::DFG::Node *)::one, (uint64_t)this + 296, v233, v234, v235, v236, v237);
      v245 = *((_DWORD *)this + 50);
      if (v245 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v303, v238, v239, v240, v241, v242, v243, v244);
        v245 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v245) = v35 | 0xFC7F6A20;
      v246 = *((_DWORD *)this + 50) + 4;
      for (*((_DWORD *)this + 50) = v246; v246 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v246)
      {
        if ((v246 + 4) > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v303, v238, v239, v240, v241, v242, v243, v244);
          v246 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v246) = -721215457;
        v246 = *((_DWORD *)this + 50) + 4;
      }
      v247 = v246;
      if ((v246 + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v303, v238, v239, v240, v241, v242, v243, v244);
        v247 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v247) = 335544320;
      *((_DWORD *)this + 50) += 4;
      if (*((_BYTE *)this + 328))
        v248 = 69;
      else
        v248 = 65;
      v322 = v246;
      v323 = 0;
      v324 = v248;
      v325 = 15;
      v326 = -1;
      if (v246 != -1)
      {
        if (HIDWORD(v338) == (_DWORD)v338)
        {
          v249 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v337, (void *)(HIDWORD(v338) + 1), (unint64_t)&v322, v240, v241, v242, v243, v244);
          v28 = v249 + 1;
          v250 = (char *)v337 + 12 * HIDWORD(v338);
          *(_DWORD *)v250 = *v249;
        }
        else
        {
          v250 = (char *)v337 + 12 * HIDWORD(v338);
          *(_DWORD *)v250 = v246;
        }
        *(_QWORD *)(v250 + 4) = *(_QWORD *)v28;
        ++HIDWORD(v338);
      }
      v320 = v327;
      v321 = v328;
      if (v327 != -1)
      {
        if (HIDWORD(v338) == (_DWORD)v338)
        {
          v252 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v337, (void *)(HIDWORD(v338) + 1), (unint64_t)&v320, v240, v241, v242, v243, v244);
          v254 = *v252;
          v253 = (uint64_t *)(v252 + 1);
          v255 = (_DWORD *)((char *)v337 + 12 * HIDWORD(v338));
          *v255 = v254;
          v256 = (uint64_t *)(v255 + 1);
        }
        else
        {
          v257 = (_DWORD *)((char *)v337 + 12 * HIDWORD(v338));
          *v257 = v327;
          v256 = (uint64_t *)(v257 + 1);
          v253 = &v321;
        }
        *v256 = *v253;
        ++HIDWORD(v338);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v334, (uint64_t)this, v239, v240, v241, v242, v243, v244);
      if ((_MergedGlobals_23 & 1) == 0)
      {
        qword_1ECF58500 = 0x7FF8000000000000;
        _MergedGlobals_23 = 1;
      }
      if (!*((_BYTE *)this + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197B9256CLL);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg(this, (uint64_t)&qword_1ECF58500, (uint64_t)this + 296, v258, v259, v260, v261, v262);
      v270 = *((_DWORD *)this + 50);
      if (v270 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v303, v263, v264, v265, v266, v267, v268, v269);
        v270 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v270) = v35 | 0xFC7F6A20;
      v271 = *((_DWORD *)this + 50) + 4;
      for (*((_DWORD *)this + 50) = v271; v271 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v271)
      {
        if ((v271 + 4) > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v303, v263, v264, v265, v266, v267, v268, v269);
          v271 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v271) = -721215457;
        v271 = *((_DWORD *)this + 50) + 4;
      }
      v272 = v271;
      if ((v271 + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v303, v263, v264, v265, v266, v267, v268, v269);
        v272 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v272) = 335544320;
      *((_DWORD *)this + 50) += 4;
      if (*((_BYTE *)this + 328))
        v273 = 69;
      else
        v273 = 65;
      v315 = v271;
      v316 = 0;
      v317 = v273;
      v318 = 15;
      v319 = -1;
      if (v271 != -1)
      {
        if (HIDWORD(v338) == (_DWORD)v338)
        {
          v274 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v337, (void *)(HIDWORD(v338) + 1), (unint64_t)&v315, v265, v266, v267, v268, v269);
          v276 = *v274;
          v275 = v274 + 1;
          v277 = (_DWORD *)((char *)v337 + 12 * HIDWORD(v338));
          *v277 = v276;
          v278 = v277 + 1;
        }
        else
        {
          v279 = (int *)((char *)v337 + 12 * HIDWORD(v338));
          *v279 = v271;
          v278 = v279 + 1;
          v275 = &v316;
        }
        *v278 = *(_QWORD *)v275;
        ++HIDWORD(v338);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v335, (uint64_t)this, v264, v265, v266, v267, v268, v269);
      goto LABEL_33;
    }
    __break(0xC471u);
    goto LABEL_277;
  }
  v51 = (uint64_t *)v8;
  v52 = *((_QWORD *)this + 702);
  v53 = *(_QWORD *)(v52 + 8);
  v54 = *(unsigned int *)((v50 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v55 = (uint64_t *)(v53 + 24);
  v56 = (uint64_t *)(v53 + 8);
  if ((v50 & 1) != 0)
    v57 = v55;
  else
    v57 = v56;
  v58 = *v57;
  v59 = *v57 + 32 * v54;
  v60 = *(_DWORD *)(v52 + 88);
  v61 = *(_DWORD *)(v59 + 20);
  if (v60 != v61)
  {
    if ((*(_QWORD *)(v59 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v61 ^ v60) >= 2)
      {
        v280 = *(_QWORD *)v59;
        if (*(_QWORD *)v59 != 4)
        {
          *(_QWORD *)v59 = v280 | 2;
          v285 = (unsigned int *)(v280 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v280 & 1) != 0)
          {
            v295 = 2 * *v285;
            while (v295 * 4)
            {
              v296 = *(_QWORD *)&v285[v295];
              if ((*(_BYTE *)(v296 + 19) & 0xC) == 0)
              {
                v297 = *(_QWORD *)(v296 + 96);
                v298 = (v297 & 1) != 0 ? (v297 >> 1) & 3 : *(unsigned __int8 *)(v297 + 4);
                v295 -= 2;
                if (v298 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v285, v43, v44, v45, v46, v47, v48, v49);
              goto LABEL_216;
            }
          }
          else if (v285)
          {
            if ((*((_BYTE *)v285 + 19) & 0xC) != 0
              || ((v286 = *((_QWORD *)v285 + 12), (v286 & 1) != 0)
                ? (v287 = (v286 >> 1) & 3)
                : (v287 = *(unsigned __int8 *)(v286 + 4)),
                  v287 == 2))
            {
LABEL_216:
              *(_QWORD *)v59 = 4;
            }
          }
        }
        *(_DWORD *)(v58 + 32 * v54 + 16) = -21020677;
      }
      if ((v60 & 1) != 0)
        *(_QWORD *)v59 &= ~2uLL;
    }
    *(_DWORD *)(v59 + 20) = v60;
  }
  v8 = (JSC::DFG::Node *)v51;
  if ((*(_QWORD *)(v59 + 8) & 0xFFFFFF8CFFFFFFFFLL) != 0)
  {
    v62 = v51[3];
    JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v25, 27, v46, v47, v48, v49, (uint64_t)v314);
    JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)this, (void *)(((unint64_t)v25 << 32) | 0x80000000), v62, 0x7300000000uLL, (uint64_t)v314, 1uLL, v63, v64);
  }
LABEL_33:
  JSC::AssemblyHelpers::unboxDoubleWithoutAssertions(this, v25, v304, (char)v35, 1, v47, v48, v49);
  for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
  {
    if ((i + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v65, v66, v67, v68, v69, v70, v71);
      i = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
    i = *((_DWORD *)this + 50) + 4;
  }
  v73 = i;
  if ((i + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v65, v66, v67, v68, v69, v70, v71);
    v73 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v73) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v74 = 69;
  else
    v74 = 65;
  v309 = i;
  v310 = 0;
  v311 = v74;
  v312 = 15;
  v313 = -1;
  if (i != -1)
  {
    if (HIDWORD(v338) == (_DWORD)v338)
    {
      v75 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v337, (void *)(HIDWORD(v338) + 1), (unint64_t)&v309, v67, v68, v69, v70, v71);
      v77 = *v75;
      v76 = v75 + 1;
      v78 = (_DWORD *)((char *)v337 + 12 * HIDWORD(v338));
      *v78 = v77;
      v79 = v78 + 1;
    }
    else
    {
      v133 = (int *)((char *)v337 + 12 * HIDWORD(v338));
      *v133 = i;
      v79 = v133 + 1;
      v76 = &v310;
    }
    *v79 = *(_QWORD *)v76;
    ++HIDWORD(v338);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v336, (uint64_t)this, v66, v67, v68, v69, v70, v71);
  v141 = *((_DWORD *)this + 50);
  if (v141 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v134, v135, v136, v137, v138, v139, v140);
    v141 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v141) = v35 | (32 * (v25 & 0x1F)) | 0x1E620000;
  *((_DWORD *)this + 50) += 4;
  if (HIDWORD(v338))
  {
    v142 = 0;
    v143 = 0;
    v144 = 12 * HIDWORD(v338);
    do
    {
      if (v143 >= HIDWORD(v338))
      {
        __break(0xC471u);
        JUMPOUT(0x197B92670);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v337 + v142), (uint64_t)this, v135, v136, v137, v138, v139, v140);
      ++v143;
      v142 += 12;
    }
    while (v144 != v142);
  }
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, v8, v135, v136, v137, v138, v139, v140);
  v152 = *((_DWORD *)v8 + 12);
  v153 = JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v35];
  v154 = &v306[12 * v153];
  *(_DWORD *)v154 = v152;
  *((_DWORD *)v154 + 1) = 6;
  v155 = ~v152;
  if (v155 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197B92680);
  }
  v156 = *((_QWORD *)this + 499) + 24 * (int)v155;
  v157 = *((_DWORD *)v8 + 13);
  *(_QWORD *)v156 = v8;
  *(_DWORD *)(v156 + 8) = v157;
  *(_BYTE *)(v156 + 17) = v35;
  *(_DWORD *)(v156 + 12) = 4;
  *(_BYTE *)(v156 + 16) = 0;
  v158 = v337;
  if (&v339 != (char *)v337 && v337)
  {
    v337 = 0;
    LODWORD(v338) = 0;
    WTF::fastFree((unint64_t)v158, v145, v146, v147, v148, v149, v150, v151);
  }
  if (v341)
  {
    v159 = v342;
    if (v342 != -1)
    {
      if (v342 > 15)
        v159 = -1;
      --*(_DWORD *)(v341 + 12 * v159 + 4784);
    }
  }
  --*(_DWORD *)&v306[12 * v153 + 8];
  if (v308)
  {
LABEL_94:
    if (v42 > 15)
      v160 = -1;
    else
      v160 = v25;
    v161 = (char *)this + 12 * v160;
    goto LABEL_98;
  }
}

uint64_t JSC::AssemblyHelpers::unboxDoubleWithoutAssertions(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int *v16;
  _QWORD *v17;
  unsigned int v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v10 = a2;
  if (!(_DWORD)a5)
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a1, 0xFFFE000000000000, a3, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::add64(a1, v10, a3, v21, v22, v23, v24, v25);
    goto LABEL_8;
  }
  if ((_DWORD)a2 == 31)
  {
    v20 = 992;
    LOBYTE(v10) = 27;
    goto LABEL_12;
  }
  if ((_DWORD)a3 == 31)
  {
    v20 = 864;
LABEL_12:
    v12 = v20 | a3 | ((v10 & 0x1F) << 16);
    v13 = -1960812544;
    goto LABEL_5;
  }
  v12 = a3 & 0x1F | ((a2 & 0x1F) << 16);
  v13 = -1962933408;
LABEL_5:
  v14 = v12 | v13;
  v16 = a1 + 50;
  v15 = a1[50];
  v17 = a1 + 14;
  if (v15 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v15 = *v16;
  }
  *(_DWORD *)(*v17 + v15) = v14;
  *v16 += 4;
LABEL_8:
  v18 = a1[50];
  if (v18 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v18 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v18) = a4 | (32 * (a3 & 0x1F)) | 0x9E670000;
  a1[50] += 4;
  return a4;
}

uint64_t *JSC::DFG::SpeculativeJIT::doubleResult(uint64_t *this, int a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  char *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;

  v10 = this;
  if (!(_DWORD)a4)
    this = JSC::DFG::SpeculativeJIT::useChildren(this, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  v11 = (char *)v10 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[a2];
  v12 = *((_DWORD *)a3 + 12);
  *((_DWORD *)v11 + 1242) = v12;
  *((_DWORD *)v11 + 1243) = 6;
  v13 = ~v12;
  if (v13 >= *((unsigned int *)v10 + 1001))
  {
    __break(0xC471u);
  }
  else
  {
    v14 = v10[499] + 24 * (int)v13;
    v15 = *((_DWORD *)a3 + 13);
    *(_QWORD *)v14 = a3;
    *(_DWORD *)(v14 + 8) = v15;
    *(_BYTE *)(v14 + 17) = a2;
    *(_DWORD *)(v14 + 12) = 4;
    *(_BYTE *)(v14 + 16) = 0;
  }
  return this;
}

void JSC::MacroAssemblerARM64::moveZeroToDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v10;

  v8 = a2;
  v10 = a1[50];
  if (v10 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v10 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v10) = v8 | 0x6F00E400;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::branch64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  JSC::AssemblerBuffer *v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  char v40;
  unsigned int v41;

  v9 = a3;
  v10 = a2;
  if (a4)
  {
    if ((unint64_t)a4 > 0xFFF)
    {
      v17 = -a4;
      if ((unint64_t)-a4 <= 0xFFF)
      {
        v13 = 0;
        v15 = v17 & 0xFFFFFF00;
        v16 = 0x100000000;
        v14 = 1;
      }
      else if ((a4 & 0xFFF) != 0)
      {
        v13 = 0;
        v14 = 0;
        v16 = 0;
        LOBYTE(v17) = 0;
        v15 = 0;
      }
      else
      {
        v20 = (unint64_t)a4 >> 24;
        v21 = -(a4 >> 12);
        v22 = v21 > 0xFFF;
        v23 = v21 & 0xFFFFFF00;
        v24 = 0xC00000000;
        v25 = 1;
        if (v22)
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
        }
        else
        {
          v26 = 0x100000000;
        }
        if (v22)
          LOBYTE(v27) = 0;
        else
          v27 = -(a4 >> 12);
        if (v22)
          v28 = 0;
        else
          v28 = v23;
        v16 = 0x100000000;
        v29 = v20 == 0;
        if (v20)
          v13 = v24;
        else
          v13 = 0xC00000000;
        if (v29)
          v14 = 0;
        else
          v14 = v25;
        if (v29)
        {
          v17 = a4 >> 12;
        }
        else
        {
          v16 = v26;
          LOBYTE(v17) = v27;
        }
        if (v29)
          v15 = (a4 >> 12) & 0xFFFFFF00;
        else
          v15 = v28;
      }
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = a4 & 0xFFFFFF00;
      v16 = 0x100000000;
      LOBYTE(v17) = a4;
    }
    v18 = v17 | v13 | v15;
    v19 = v16 | v14;
    goto LABEL_36;
  }
  v18 = 0;
  v19 = 0x100000000;
  if ((int)a2 <= 0)
  {
    if (!(_DWORD)a2)
      goto LABEL_60;
  }
  else
  {
    switch((_DWORD)a2)
    {
      case 1:
LABEL_60:
        JSC::MacroAssemblerARM64::branchTest64(a1, v10, a3, a3, a5, a6, a7, a8, a9);
        return;
      case 0xA:
        v10 = 5;
        goto LABEL_60;
      case 0xB:
        v10 = 4;
        goto LABEL_60;
    }
  }
LABEL_36:
  if ((v19 & 0xFF00000000) != 0)
  {
    v30 = (JSC::AssemblerBuffer *)(a1 + 56);
    v31 = *(_DWORD *)(a1 + 200);
    if ((_BYTE)v19)
      v32 = -1325400033;
    else
      v32 = -251658209;
    if ((v18 & 0xFFFFFFFF00000000) == 0xC00000000)
      v32 |= 0x400000u;
    v34 = v32 | ((v18 & 0xFFF) << 10) | (32 * a3);
    if (v31 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v30, a2, a3, a4, a5, a6, a7, a8);
      v31 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v31) = v34;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197B92BF4);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, a4, a1 + 264, a4, a5, a6, a7, a8);
    if (v9 == 31)
    {
      v41 = *(_DWORD *)(a1 + 200);
      if (v41 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        v41 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v41) = -349150209;
    }
    else
    {
      v33 = *(_DWORD *)(a1 + 200);
      if (v33 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        v33 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v33) = (32 * (v9 & 0x1F)) | 0xEB10001F;
    }
  }
  v35 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v35;
  if (*(_BYTE *)(a1 + 328))
  {
    for (; (signed int)v35 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v35)
    {
      if (v35 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        v35 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v35) = -721215457;
      v35 = *(_DWORD *)(a1 + 200) + 4;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  if (v35 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v35 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v35) = v10 | 0x54000000;
  v36 = *(_DWORD *)(a1 + 200);
  v37 = v36 + 4;
  *(_DWORD *)(a1 + 200) = v36 + 4;
  v38 = v36 + 8;
  v39 = v36 + 4;
  if (v38 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v39 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v39) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v40 = -122;
  else
    v40 = -126;
  *(_DWORD *)a9 = v37;
  *(_DWORD *)(a9 + 4) = 0;
  *(_BYTE *)(a9 + 8) = v40;
  *(_BYTE *)(a9 + 9) = v10;
  *(_WORD *)(a9 + 10) = -256;
}

{
  unsigned __int8 v9;
  _DWORD *v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;

  v9 = a2;
  if ((_DWORD)a4 == 31)
  {
    v22 = a3;
    if (!(_DWORD)a2 && (_DWORD)a3 != 31)
    {
      v12 = (_DWORD *)(a1 + 32);
      a4 = a3;
      goto LABEL_24;
    }
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      return;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    JSC::MacroAssemblerARM64::move((_DWORD *)a1, 31, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
    a4 = 16;
    a3 = v22;
  }
  v12 = (_DWORD *)(a1 + 32);
  if ((_DWORD)a3 == 31)
  {
LABEL_24:
    v13 = ((a4 & 0x1F) << 16) | 0xEB2063FF;
    goto LABEL_4;
  }
  v13 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a4 & 0x1F) << 16) | 0xEB00001F;
LABEL_4:
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v13;
  v15 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v15;
  if (*(_BYTE *)(a1 + 328))
  {
    for (; v15 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v15)
    {
      if ((v15 + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        v15 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = -721215457;
      v15 = *(_DWORD *)(a1 + 200) + 4;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  v16 = v12[42];
  if (v16 + 4 > v12[40])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 6), a2, a3, a4, a5, a6, a7, a8);
    v16 = v12[42];
  }
  *(_DWORD *)(*((_QWORD *)v12 + 3) + v16) = v9 | 0x54000000;
  v17 = v12[42];
  v18 = v17 + 4;
  v12[42] = v17 + 4;
  v19 = v17 + 8;
  v20 = v17 + 4;
  if (v19 > v12[40])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 6), a2, a3, a4, a5, a6, a7, a8);
    v20 = v12[42];
  }
  *(_DWORD *)(*((_QWORD *)v12 + 3) + v20) = -721215457;
  v12[42] += 4;
  if (*(_BYTE *)(a1 + 328))
    v21 = -122;
  else
    v21 = -126;
  *(_DWORD *)a9 = v18;
  *(_DWORD *)(a9 + 4) = 0;
  *(_BYTE *)(a9 + 8) = v21;
  *(_BYTE *)(a9 + 9) = v9;
  *(_WORD *)(a9 + 10) = -256;
}

{
  int v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  JSC::AssemblerBuffer *v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;

  v9 = a3;
  v10 = a2;
  if ((_DWORD)a4)
  {
    if (a4 > 0xFFF)
    {
      v17 = -(int)a4;
      if (-(int)a4 > 0xFFF)
      {
        if ((a4 & 0xFFF) != 0)
        {
          v13 = 0;
          v14 = 0;
          v16 = 0;
          LOBYTE(v17) = 0;
          v15 = 0;
        }
        else
        {
          v31 = (int)a4 >> 12;
          v32 = BYTE3(a4);
          v33 = 0xC00000000;
          v34 = 1;
          if (-((int)a4 >> 12) > 0xFFF)
            v33 = 0;
          if (-v31 <= 0xFFF)
          {
            v35 = 0x100000000;
          }
          else
          {
            v34 = 0;
            v35 = 0;
          }
          if (-v31 <= 0xFFF)
            v36 = -v31;
          else
            LOBYTE(v36) = 0;
          if (-v31 <= 0xFFF)
            v37 = -((int)a4 >> 12) & 0xFFFFFF00;
          else
            v37 = 0;
          v16 = 0x100000000;
          v38 = v32 == 0;
          if (v32)
            v13 = v33;
          else
            v13 = 0xC00000000;
          if (v38)
            v14 = 0;
          else
            v14 = v34;
          if (v38)
          {
            LOBYTE(v17) = (int)a4 >> 12;
          }
          else
          {
            v16 = v35;
            LOBYTE(v17) = v36;
          }
          if (v38)
            v15 = v31 & 0xFFFFFF00;
          else
            v15 = v37;
        }
      }
      else
      {
        v13 = 0;
        v15 = v17 & 0xFFFFFF00;
        v16 = 0x100000000;
        v14 = 1;
      }
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = a4 & 0xFFFFFF00;
      v16 = 0x100000000;
      LOBYTE(v17) = a4;
    }
    v18 = v13 | v15 | v17;
    v19 = v16 | v14;
    goto LABEL_16;
  }
  v18 = 0;
  v19 = 0x100000000;
  if ((int)a2 <= 0)
  {
    if (!(_DWORD)a2)
      goto LABEL_40;
  }
  else
  {
    switch((_DWORD)a2)
    {
      case 1:
LABEL_40:
        JSC::MacroAssemblerARM64::branchTest64(a1, v10, a3, a3, a5, a6, a7, a8, a9);
        return;
      case 0xA:
        v10 = 5;
        goto LABEL_40;
      case 0xB:
        v10 = 4;
        goto LABEL_40;
    }
  }
LABEL_16:
  if ((v19 & 0xFF00000000) != 0)
  {
    v20 = (JSC::AssemblerBuffer *)(a1 + 56);
    v21 = *(_DWORD *)(a1 + 200);
    if ((_BYTE)v19)
      v22 = -1325400033;
    else
      v22 = -251658209;
    if ((v18 & 0xFFFFFFFF00000000) == 0xC00000000)
      v22 |= 0x400000u;
    v24 = v22 | ((v18 & 0xFFF) << 10) | (32 * a3);
    if (v21 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v20, a2, a3, a4, a5, a6, a7, a8);
      v21 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v21) = v24;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197BB2124);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a4, a1 + 264, a4, a5, a6, a7, a8);
    if (v9 == 31)
    {
      v39 = *(_DWORD *)(a1 + 200);
      if (v39 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        v39 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v39) = -349150209;
    }
    else
    {
      v23 = *(_DWORD *)(a1 + 200);
      if (v23 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        v23 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = (32 * (v9 & 0x1F)) | 0xEB10001F;
    }
  }
  v25 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v25;
  if (*(_BYTE *)(a1 + 328))
  {
    for (; (signed int)v25 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v25)
    {
      if (v25 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        v25 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = -721215457;
      v25 = *(_DWORD *)(a1 + 200) + 4;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  if (v25 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v25 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = v10 | 0x54000000;
  v26 = *(_DWORD *)(a1 + 200);
  v27 = v26 + 4;
  *(_DWORD *)(a1 + 200) = v26 + 4;
  v28 = v26 + 8;
  v29 = v26 + 4;
  if (v28 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v29 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v30 = -122;
  else
    v30 = -126;
  *(_DWORD *)a9 = v27;
  *(_DWORD *)(a9 + 4) = 0;
  *(_BYTE *)(a9 + 8) = v30;
  *(_BYTE *)(a9 + 9) = v10;
  *(_WORD *)(a9 + 10) = -256;
}

void JSC::MacroAssemblerARM64::loadDouble(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197B92D08);
  }
  JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, a2, a1 + 296, a4, a5, a6, a7, a8);
  v17 = *(_DWORD *)(a1 + 200);
  if (v17 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v10, v11, v12, v13, v14, v15, v16);
    v17 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v17) = a3 | 0xFC7F6A20;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::convertInt64ToDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * (v9 & 0x1F)) | 0x9E620000;
  a1[50] += 4;
}

uint64_t JSC::DFG::SpeculativeJIT::compileValueRep(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  uint64_t result;
  unsigned int v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned __int8 v73;

  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if ((_DWORD)v11 != 49)
  {
    if ((_DWORD)v11 != 52)
      goto LABEL_70;
    if ((v10 & 0xFC000000000000) != 0xD0000000000000)
    {
      __break(0xC471u);
      JUMPOUT(0x197B931ECLL);
    }
    v46 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v46 >= *((unsigned int *)this + 1001))
    {
LABEL_70:
      __break(0xC471u);
      JUMPOUT(0x197B931BCLL);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v46 + 12))
    {
      v47 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(this, *((_QWORD *)a2 + 3), 3, a4, a5, a6, a7, a8);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v72, this, v48, v49, v50, v51, v52, v53);
      if ((_DWORD)v47 != -1)
        goto LABEL_39;
    }
    else
    {
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v72, this, a3, a4, a5, a6, a7, a8);
    }
    v47 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(this, v10, 3, v54, v55, v56, v57, v58);
LABEL_39:
    v59 = (char)v73;
    JSC::DFG::SpeculativeJIT::boxInt52(this, v47, (char)v73, 3, v55, v56, v57, v58);
    result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v59, (uint64_t)a2, 16, 0, v60, v61, v62);
    if (v72)
    {
      v63 = (char)v73;
      if ((char)v73 != -1)
      {
        if ((char)v73 > 15)
          v63 = -1;
        --*(_DWORD *)(v72 + 12 * v63 + 4784);
      }
    }
    if ((int)v47 > 15)
      v64 = -1;
    else
      v64 = v47;
    v43 = (char *)this + 12 * v64;
    v44 = 4784;
    goto LABEL_24;
  }
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197B931F4);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
  {
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v72, this, a3, a4, a5, a6, a7, a8);
    goto LABEL_5;
  }
  v13 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v72, this, v14, v15, v16, v17, v18, v19);
  if ((_DWORD)v13 == -1)
LABEL_5:
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v10, v21, v22, v23, v24, v25, v26);
  v27 = v73;
  v28 = *((_QWORD *)a2 + 3);
  v29 = *((_QWORD *)this + 688);
  v30 = *(unsigned int *)((v28 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v31 = (uint64_t *)(v29 + 24);
  v32 = (uint64_t *)(v29 + 8);
  if ((v28 & 1) != 0)
    v33 = v31;
  else
    v33 = v32;
  v34 = *v33;
  v35 = *v33 + 32 * v30;
  v36 = *((_DWORD *)this + 1396);
  v37 = *(_DWORD *)(v35 + 20);
  if (v36 != v37)
  {
    if ((*(_QWORD *)(v35 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v37 ^ v36) >= 2)
      {
        v45 = *(_QWORD *)v35;
        if (*(_QWORD *)v35 != 4)
        {
          *(_QWORD *)v35 = v45 | 2;
          v65 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v45 & 1) != 0)
          {
            v68 = 2 * *v65;
            while (v68 * 4)
            {
              v69 = *(_QWORD *)&v65[v68];
              if ((*(_BYTE *)(v69 + 19) & 0xC) == 0)
              {
                v70 = *(_QWORD *)(v69 + 96);
                v71 = (v70 & 1) != 0 ? (v70 >> 1) & 3 : *(unsigned __int8 *)(v70 + 4);
                v68 -= 2;
                if (v71 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v65, v20, v21, v22, v23, v24, v25, v26);
              goto LABEL_54;
            }
          }
          else if (v65)
          {
            if ((*((_BYTE *)v65 + 19) & 0xC) != 0
              || ((v66 = *((_QWORD *)v65 + 12), (v66 & 1) != 0)
                ? (v67 = (v66 >> 1) & 3)
                : (v67 = *(unsigned __int8 *)(v66 + 4)),
                  v67 == 2))
            {
LABEL_54:
              *(_QWORD *)v35 = 4;
            }
          }
        }
        *(_DWORD *)(v34 + 32 * v30 + 16) = -21020677;
      }
      if ((v36 & 1) != 0)
        *(_QWORD *)v35 &= ~2uLL;
    }
    *(_DWORD *)(v35 + 20) = v36;
  }
  if ((*(_BYTE *)(v35 + 12) & 0x80) != 0)
    JSC::AssemblyHelpers::purifyNaN((uint64_t)this, v13, v21, v22, v23, v24, v25, v26);
  v38 = *((_DWORD *)this + 50);
  if (v38 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v20, v21, v22, v23, v24, v25, v26);
    v38 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v38) = v27 & 0x1F | (32 * v13) | 0x9E660000;
  v39 = *((_DWORD *)this + 50);
  v40 = v39 + 4;
  *((_DWORD *)this + 50) = v39 + 4;
  if (v27 == 31)
  {
    if ((v39 + 8) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v20, v21, v22, v23, v24, v25, v26);
      v40 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v40) = -885300225;
    *((_DWORD *)this + 50) += 4;
  }
  else
  {
    JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v27 & 0x1F | (32 * (v27 & 0x1F)) | 0xCB1B0000, v21, v22, v23, v24, v25, v26);
  }
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, (char)v27, (uint64_t)a2, 16, 0, v24, v25, v26);
  if (v72)
  {
    v42 = (char)v73;
    if ((char)v73 != -1)
    {
      if ((char)v73 > 15)
        v42 = -1;
      --*(_DWORD *)(v72 + 12 * v42 + 4784);
    }
  }
  v43 = (char *)this + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(int)v13];
  v44 = 4976;
LABEL_24:
  --*(_DWORD *)&v43[v44];
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::jsValueResult(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[14];
  uint64_t v50;

  v8 = a4;
  v11 = result;
  v50 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a5)
    goto LABEL_8;
  v12 = *(_QWORD *)(a3 + 24);
  if ((*(_BYTE *)(a3 + 56) & 0x10) != 0)
  {
    v45 = *(_QWORD *)(a3 + 32);
    if ((int)v45 + (int)v12 <= v12)
      goto LABEL_8;
    v46 = *(_QWORD *)(a3 + 24);
    while (1)
    {
      v47 = *(_QWORD *)(v11 + 3960);
      if (v46 >= *(unsigned int *)(v47 + 164))
        goto LABEL_56;
      v48 = *(_QWORD *)(*(_QWORD *)(v47 + 152) + 8 * v46);
      if ((v48 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        result = JSC::DFG::SpeculativeJIT::use(v11, v48, a3, a4, a5, a6, a7, a8);
        v12 = *(_QWORD *)(a3 + 24);
        v45 = *(_QWORD *)(a3 + 32);
      }
      if (++v46 >= (v12 + v45))
        goto LABEL_8;
    }
  }
  v13 = v12 & 0xFF00FFFFFFFFFFFFLL;
  if (!v13)
    goto LABEL_8;
  if ((*(_BYTE *)(v13 + 56) & 7) == 0)
    goto LABEL_7;
  v14 = ~*(_DWORD *)(v13 + 48);
  if (v14 >= *(unsigned int *)(result + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B936A4);
  }
  v15 = *(_QWORD *)(result + 3992);
  v16 = (_DWORD *)(v15 + 24 * (int)v14);
  v17 = v16[2] - 1;
  v16[2] = v17;
  if (v17)
    goto LABEL_7;
  if (*(_BYTE *)(v15 + 24 * (int)v14 + 15))
  {
    v24 = *(_DWORD *)(*(_QWORD *)v16 + 20);
    if (v24 < 0xFFFFFFFE)
    {
      result += 5632;
      *(_QWORD *)&v49[4] = 0x3FFFFFFFLL;
      *(_DWORD *)v49 = v24;
      *(_WORD *)&v49[12] = 6;
      v25 = *(unsigned int *)(v11 + 5644);
      if ((_DWORD)v25 == *(_DWORD *)(v11 + 5640))
      {
        result = WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v25 + 1, (unint64_t)v49, a4, a5, a6, a7, a8);
        v26 = (_QWORD *)(*(_QWORD *)(v11 + 5632) + 14 * *(unsigned int *)(v11 + 5644));
        v27 = *(_QWORD *)result;
        v28 = *(_QWORD *)(result + 6);
      }
      else
      {
        v26 = (_QWORD *)(*(_QWORD *)result + 14 * v25);
        v27 = *(_QWORD *)v49;
        v28 = *(_QWORD *)&v49[6];
      }
      *(_QWORD *)((char *)v26 + 6) = v28;
      *v26 = v27;
      ++*(_DWORD *)(v11 + 5644);
      goto LABEL_18;
    }
LABEL_56:
    __break(0xC471u);
    JUMPOUT(0x197B93670);
  }
LABEL_18:
  if (*(_BYTE *)(v15 + 24 * (int)v14 + 12))
  {
    if (*(_BYTE *)(v15 + 24 * (int)v14 + 12) == 4)
    {
      v30 = v11
          + 12
          * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[*(char *)(v15
                                                                                               + 24 * (int)v14
                                                                                               + 17)];
      *(_DWORD *)(v30 + 4968) = 0x3FFFFFFF;
      v31 = 4972;
    }
    else
    {
      v29 = *(char *)(v15 + 24 * (int)v14 + 17);
      if (v29 > 15)
        v29 = -1;
      v30 = v11 + 12 * v29;
      *(_DWORD *)(v30 + 4776) = 0x3FFFFFFF;
      v31 = 4780;
    }
    *(_DWORD *)(v30 + v31) = -1;
  }
LABEL_7:
  if ((*(_QWORD *)(a3 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(a3 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) != 0)
    {
      v32 = ~*(_DWORD *)((*(_QWORD *)(a3 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v32 >= *(unsigned int *)(v11 + 4004))
      {
        __break(0xC471u);
        JUMPOUT(0x197B936ACLL);
      }
      v33 = *(_QWORD *)(v11 + 3992);
      v34 = (_DWORD *)(v33 + 24 * (int)v32);
      v35 = v34[2] - 1;
      v34[2] = v35;
      if (!v35)
      {
        if (*(_BYTE *)(v33 + 24 * (int)v32 + 15))
        {
          v37 = *(_DWORD *)(*(_QWORD *)v34 + 20);
          if (v37 >= 0xFFFFFFFE)
          {
            __break(0xC471u);
            JUMPOUT(0x197B93690);
          }
          result = v11 + 5632;
          *(_QWORD *)&v49[4] = 0x3FFFFFFFLL;
          *(_DWORD *)v49 = v37;
          *(_WORD *)&v49[12] = 6;
          v38 = *(unsigned int *)(v11 + 5644);
          if ((_DWORD)v38 == *(_DWORD *)(v11 + 5640))
          {
            result = WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v38 + 1, (unint64_t)v49, a4, a5, a6, a7, a8);
            v39 = (_QWORD *)(*(_QWORD *)(v11 + 5632) + 14 * *(unsigned int *)(v11 + 5644));
            v40 = *(_QWORD *)result;
            v41 = *(_QWORD *)(result + 6);
          }
          else
          {
            v39 = (_QWORD *)(*(_QWORD *)result + 14 * v38);
            v40 = *(_QWORD *)v49;
            v41 = *(_QWORD *)&v49[6];
          }
          *(_QWORD *)((char *)v39 + 6) = v41;
          *v39 = v40;
          ++*(_DWORD *)(v11 + 5644);
        }
        if (*(_BYTE *)(v33 + 24 * (int)v32 + 12))
        {
          if (*(_BYTE *)(v33 + 24 * (int)v32 + 12) == 4)
          {
            v43 = v11
                + 12
                * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[*(char *)(v33 + 24 * (int)v32 + 17)];
            *(_DWORD *)(v43 + 4968) = 0x3FFFFFFF;
            v44 = 4972;
          }
          else
          {
            v42 = *(char *)(v33 + 24 * (int)v32 + 17);
            if (v42 > 15)
              v42 = -1;
            v43 = v11 + 12 * v42;
            *(_DWORD *)(v43 + 4776) = 0x3FFFFFFF;
            v44 = 4780;
          }
          *(_DWORD *)(v43 + v44) = -1;
        }
      }
    }
    v36 = *(_QWORD *)(a3 + 40);
    if ((v36 & 0xFF00FFFFFFFFFFFFLL) != 0)
      result = JSC::DFG::SpeculativeJIT::use(v11, v36, a3, a4, a5, a6, a7, a8);
  }
LABEL_8:
  if (a2 > 15)
    v18 = -1;
  else
    v18 = a2;
  v19 = v11 + 12 * v18;
  v20 = *(_DWORD *)(a3 + 48);
  *(_DWORD *)(v19 + 4776) = v20;
  *(_DWORD *)(v19 + 4780) = 4;
  v21 = ~v20;
  if (v21 >= *(unsigned int *)(v11 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B9369CLL);
  }
  v22 = *(_QWORD *)(v11 + 3992) + 24 * (int)v21;
  v23 = *(_DWORD *)(a3 + 52);
  *(_QWORD *)v22 = a3;
  *(_DWORD *)(v22 + 8) = v23;
  *(_BYTE *)(v22 + 12) = v8;
  *(_BYTE *)(v22 + 17) = a2;
  *(_DWORD *)(v22 + 13) = 0;
  return result;
}

void JSC::DFG::SpeculativeJIT::jumpForTypedArrayOutOfBounds(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v9;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t FoldableView;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int8x8_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  BOOL v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int *v68;
  char v69;
  unsigned int *v70;
  uint64_t v71;
  unsigned int v72;
  unint64_t v73;
  unsigned int *v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  __int16 v90;
  __int16 v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned __int8 v103;
  unsigned int v104;
  unsigned int v105;
  int v107[3];
  _BYTE v108[16];

  v9 = *(unsigned __int16 *)(a2 + 18);
  if (v9 == 103)
  {
    *(_QWORD *)a9 = 0xFFFFFFFFLL;
    *(_DWORD *)(a9 + 8) = -16773311;
    return;
  }
  v104 = a4;
  v12 = *(_QWORD *)(a1 + 3960);
  v13 = (_QWORD *)(a2 + 24);
  v14 = (_QWORD *)(a2 + 24);
  if ((*(_BYTE *)(a2 + 56) & 0x10) != 0)
  {
    if (*(_DWORD *)(v12 + 164) <= *v13)
    {
      __break(0xC471u);
      JUMPOUT(0x197B93E3CLL);
    }
    v14 = (_QWORD *)(*(_QWORD *)(v12 + 152) + 8 * *v13);
  }
  v102 = a6;
  v103 = a3;
  v105 = a5;
  v15 = *(_QWORD *)(a1 + 5504);
  v16 = *(unsigned int *)((*v14 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v17 = (uint64_t *)(v15 + 24);
  v18 = (uint64_t *)(v15 + 8);
  if ((*v14 & 1) != 0)
    v19 = v17;
  else
    v19 = v18;
  v20 = *v19;
  v21 = *v19 + 32 * v16;
  v22 = *(_DWORD *)(a1 + 5584);
  v24 = (unsigned int *)(v21 + 20);
  v23 = *(_DWORD *)(v21 + 20);
  if (v22 != v23)
  {
    if ((*(_QWORD *)(v21 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v23 ^ v22) >= 2)
      {
        v66 = *(_QWORD *)v21;
        if (*(_QWORD *)v21 != 4)
        {
          *(_QWORD *)v21 = v66 | 2;
          v70 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v66 & 1) != 0)
          {
            v80 = 2 * *v70;
            while (v80 * 4)
            {
              v81 = *(_QWORD *)&v70[v80];
              if ((*(_BYTE *)(v81 + 19) & 0xC) == 0)
              {
                v82 = *(_QWORD *)(v81 + 96);
                v83 = (v82 & 1) != 0 ? (v82 >> 1) & 3 : *(unsigned __int8 *)(v82 + 4);
                v80 -= 2;
                if (v83 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v70, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_72;
            }
          }
          else if (v70)
          {
            if ((*((_BYTE *)v70 + 19) & 0xC) != 0
              || ((v71 = *((_QWORD *)v70 + 12), (v71 & 1) != 0)
                ? (v72 = (v71 >> 1) & 3)
                : (v72 = *(unsigned __int8 *)(v71 + 4)),
                  v72 == 2))
            {
LABEL_72:
              *(_QWORD *)v21 = 4;
            }
          }
        }
        *(_DWORD *)(v20 + 32 * v16 + 16) = -21020677;
      }
      if ((v22 & 1) != 0)
        *(_QWORD *)v21 &= ~2uLL;
      *v24 = v22;
      v9 = *(unsigned __int16 *)(a2 + 18);
    }
    else
    {
      *v24 = v22;
    }
  }
  if (v9 == 146)
    v25 = *(_DWORD *)(a2 + 80);
  else
    v25 = *(_DWORD *)(a2 + 72);
  FoldableView = JSC::DFG::Graph::tryGetFoldableView(v12, *(_QWORD *)(v21 + 24), v25, a4, a5, a6, a7, a8);
  if (FoldableView && (*(_BYTE *)(FoldableView + 40) & 6) == 0)
  {
    if ((*(_BYTE *)(FoldableView + 40) & 7u) > 2)
    {
      v108[0] = 0;
      v108[8] = 0;
      v84 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(FoldableView, (uint64_t)v108, v28, v29, v30, v31, v32, v33);
      if ((_BYTE)v27)
        v34 = v84;
      else
        v34 = 0;
    }
    else
    {
      v34 = *(_QWORD *)(FoldableView + 24);
    }
    if ((*(_BYTE *)(a2 + 56) & 0x10) == 0)
    {
      v35 = (_QWORD *)(a2 + 32);
      goto LABEL_15;
    }
    v64 = *(_QWORD *)(a1 + 3960);
    v65 = *(_DWORD *)v13 + 1;
    if (*(_DWORD *)(v64 + 164) > v65)
    {
      v35 = (_QWORD *)(*(_QWORD *)(v64 + 152) + 8 * v65);
LABEL_15:
      v36 = *v35 & 0xFF00FFFFFFFFFFFFLL;
      if (*(unsigned __int16 *)(v36 + 18) > 2u)
      {
LABEL_16:
        v37 = *(_DWORD *)(a1 + 200);
        if (v37 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)v27, v28, v29, v30, v31, v32, v33);
          v37 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v37) = v105 & 0x1F | (32 * (v104 & 0x1F)) | 0x93407C00;
        *(_DWORD *)(a1 + 200) += 4;
        JSC::MacroAssemblerARM64::branch64(a1, 2, v105, v34, v30, v31, v32, v33, a9);
        return;
      }
      v60 = **(_QWORD **)(v36 + 72);
      if ((unint64_t)v60 > 0xFFFDFFFFFFFFFFFFLL)
      {
        v63 = (int)v60;
      }
      else
      {
        *(_QWORD *)&v61 = v60 - 0x2000000000000;
        if ((unint64_t)v60 >> 49)
          v62 = (double)(uint64_t)v61 == v61;
        else
          v62 = 0;
        if (!v62)
          goto LABEL_16;
        v63 = (uint64_t)v61;
        if ((uint64_t)v61)
        {
          if ((v63 + 0x8000000000000) >> 52)
            goto LABEL_16;
        }
        else
        {
          if (v60 < 0x2000000000000)
            goto LABEL_16;
          v63 = 0;
        }
      }
      if (v63 < v34)
      {
        *(_QWORD *)a9 = 0xFFFFFFFFLL;
        *(_DWORD *)(a9 + 8) = -16773311;
        return;
      }
      goto LABEL_16;
    }
    __break(0xC471u);
LABEL_136:
    JUMPOUT(0x197B93CF4);
  }
  v38 = *(unsigned __int16 *)(a2 + 18);
  if (v38 == 146)
    v39 = *(_DWORD *)(a2 + 80);
  else
    v39 = *(_DWORD *)(a2 + 72);
  if ((v39 & 0x40000000) == 0)
  {
    v40 = *(_QWORD *)(a1 + 5504);
    v41 = *(unsigned int *)((*v14 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v42 = (uint64_t *)(v40 + 24);
    v43 = (uint64_t *)(v40 + 8);
    if ((*v14 & 1) != 0)
      v44 = v42;
    else
      v44 = v43;
    v45 = *v44;
    v46 = *v44 + 32 * v41;
    v47 = *(_DWORD *)(a1 + 5584);
    v48 = *(_DWORD *)(v46 + 20);
    if (v47 != v48)
    {
      if ((*(_QWORD *)(v46 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v48 ^ v47) >= 2)
        {
          v73 = *(_QWORD *)v46;
          if (*(_QWORD *)v46 != 4)
          {
            *(_QWORD *)v46 = v73 | 2;
            v74 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v73 & 1) != 0)
            {
              v85 = 2 * *v74;
              while (v85 * 4)
              {
                v86 = *(_QWORD *)&v74[v85];
                if ((*(_BYTE *)(v86 + 19) & 0xC) == 0)
                {
                  v87 = *(_QWORD *)(v86 + 96);
                  v88 = (v87 & 1) != 0 ? (v87 >> 1) & 3 : *(unsigned __int8 *)(v87 + 4);
                  v85 -= 2;
                  if (v88 != 2)
                    continue;
                }
                WTF::fastFree((unint64_t)v74, v27, v28, v29, v30, v31, v32, v33);
                goto LABEL_86;
              }
            }
            else if (v74)
            {
              if ((*((_BYTE *)v74 + 19) & 0xC) != 0
                || ((v75 = *((_QWORD *)v74 + 12), (v75 & 1) != 0)
                  ? (v76 = (v75 >> 1) & 3)
                  : (v76 = *(unsigned __int8 *)(v75 + 4)),
                    v76 == 2))
              {
LABEL_86:
                *(_QWORD *)v46 = 4;
              }
            }
          }
          *(_DWORD *)(v45 + 32 * v41 + 16) = -21020677;
        }
        if ((v47 & 1) != 0)
          *(_QWORD *)v46 &= ~2uLL;
      }
      *(_DWORD *)(v46 + 20) = v47;
    }
    v49 = *(_QWORD *)v46;
    if ((*(_QWORD *)v46 & 2) != 0)
      goto LABEL_27;
    if (v49 <= 4 && ((1 << v49) & 0x15) != 0)
      goto LABEL_27;
    v68 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v49 & 1) != 0)
    {
      v77 = *v68;
      if (!(_DWORD)v77)
        goto LABEL_29;
      v78 = (uint64_t *)(v68 + 2);
      v69 = 1;
      do
      {
        v79 = *v78++;
        if (*(_BYTE *)(16 * *(unsigned int *)(v79 + 76) + 0xF4))
          v69 = 0;
        --v77;
      }
      while (v77);
    }
    else
    {
      if (!v68)
        goto LABEL_29;
      v69 = *(_BYTE *)(16 * v68[19] + 0xF4) ^ 1;
    }
    if (!v69)
    {
LABEL_27:
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197B93D14);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v103 | 0x2800000000, *(char *)(a1 + 304), v29, v30, v31, v32, v33);
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)6, a1, 1, 17, v50, v51, v52, v53, (uint64_t)v107, v54);
      JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0x1DuLL, (JSC::DFG::Node *)(((unint64_t)v103 << 32) | 0x80000000), (JSC::DFG::Node *)a2, v107);
    }
LABEL_29:
    v55 = *(_DWORD *)(a1 + 200);
    if (v55 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)v27, v28, v29, v30, v31, v32, v33);
      v55 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v55) = v105 & 0x1F | (32 * (v104 & 0x1F)) | 0x93407C00;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load64(a1, v103 | 0x1800000000, *(char *)(a1 + 304), v29, v30, v31, v32, v33);
      JSC::MacroAssemblerARM64::branch64(a1, 2, v105, 17, v56, v57, v58, v59, a9);
      return;
    }
    __break(0xC471u);
    goto LABEL_136;
  }
  if (v38 == 264)
  {
    v89 = *(_DWORD *)(a2 + 72);
  }
  else if (v38 == 146)
  {
    LOBYTE(v89) = *(_BYTE *)(a2 + 80);
  }
  else
  {
    LOBYTE(v89) = *(_BYTE *)(a2 + 72);
  }
  if (v89 == 25)
  {
    v90 = 0;
    v91 = 0;
  }
  else
  {
    if (v38 == 146)
      v92 = *(_DWORD *)(a2 + 80);
    else
      v92 = *(_DWORD *)(a2 + 72);
    v90 = JSC::DFG::toTypedArrayType(v92);
    v91 = 256;
  }
  JSC::AssemblyHelpers::loadTypedArrayLength(a1, v103, v102, v105, v102, v91 | v90, v32, v33);
  JSC::MacroAssemblerARM64::signExtend32ToPtr((_DWORD *)a1, v104, v105, v93, v94, v95, v96, v97);
  JSC::MacroAssemblerARM64::branch64(a1, 2, v105, v102, v98, v99, v100, v101, a9);
}

unint64_t JSC::JSArrayBufferView::length(JSC::JSArrayBufferView *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;
  char v9;
  _BYTE v10[16];

  if ((*((_BYTE *)this + 40) & 7u) <= 2)
    return *((_QWORD *)this + 3);
  v10[0] = 0;
  v10[8] = 0;
  result = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)this, (uint64_t)v10, a3, a4, a5, a6, a7, a8);
  if (!v9)
    return 0;
  return result;
}

void JSC::DFG::SpeculativeJIT::jumpForTypedArrayIsDetachedIfOutOfBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v9;
  JSC::AssemblerBuffer *v13;
  int i;
  unsigned int v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x8_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  JSC::AssemblerBuffer *v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49[3];
  unsigned int v50;
  uint64_t v51;

  *(_QWORD *)a1 = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 8) = -16773311;
  if (*(_DWORD *)a5 != -1)
  {
    v9 = a4;
    v13 = (JSC::AssemblerBuffer *)(a2 + 56);
    for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(a2 + 192))
      {
        v44 = v13;
        JSC::AssemblerBuffer::outOfLineGrow(v13, a2, a3, a4, a5, a6, a7, a8);
        v13 = v44;
        i = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
      i = *(_DWORD *)(a2 + 200) + 4;
    }
    v15 = i;
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v13, a2, a3, a4, a5, a6, a7, a8);
      v15 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v15) = 335544320;
    *(_DWORD *)(a2 + 200) += 4;
    v16 = 0xFF000F4500000000;
    if (!*(_BYTE *)(a2 + 328))
      v16 = 0xFF000F4100000000;
    *(_DWORD *)a1 = i;
    *(_QWORD *)(a1 + 4) = v16;
    if (*(_WORD *)(a3 + 18) == 146)
      v17 = *(_DWORD *)(a3 + 80);
    else
      v17 = *(_DWORD *)(a3 + 72);
    if ((v17 & 0xFE0000) != 0)
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)a5, a2, a3, a4, a5, a6, a7, a8);
      if (*(_BYTE *)(a2 + 212))
      {
        *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
        JSC::MacroAssemblerARM64::load8(a2, v9 | 0x2800000000, *(char *)(a2 + 304), v18, v19, v20, v21, v22);
        JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x40, a2, 0, 17, v23, v24, v25, v26, (uint64_t)v49, v27);
        if (*(_BYTE *)(a2 + 212))
        {
          *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
          JSC::MacroAssemblerARM64::load64(a2, v9 | 0x1000000000, *(char *)(a2 + 272), v28, v29, v30, v31, v32);
          JSC::MacroAssemblerARM64::branchTest64(a2, 0, 16, 0xFFFFFFFFLL, v33, v34, v35, v36, (uint64_t)&v47, v37);
          v45 = v47;
          v46 = v48;
          JSC::DFG::SpeculativeJIT::speculationCheck(a2, 0x16uLL, (JSC::DFG::Node *)0xFF80000000, (JSC::DFG::Node *)a3, &v45);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v49, a2, v38, v39, v40, v41, v42, v43);
          return;
        }
        __break(0xC471u);
      }
      else
      {
        __break(0xC471u);
      }
      JUMPOUT(0x197B9432CLL);
    }
    v50 = *(_DWORD *)a5;
    v51 = *(_QWORD *)(a5 + 4);
    JSC::DFG::SpeculativeJIT::speculationCheck(a2, 0xFuLL, (JSC::DFG::Node *)0xFF80000000, 0, (int *)&v50);
  }
}

void JSC::DFG::SpeculativeJIT::loadFromIntTypedArray(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if ((a5 - 4) > 7u)
    LOBYTE(v8) = 0;
  else
    v8 = qword_199123EC8[(char)(a5 - 4)];
  v9 = 1 << v8;
  switch(v9)
  {
    case 4:
      JSC::MacroAssemblerARM64::load32(a1, a2 | ((unint64_t)a3 << 8) | 0x200000000, 0x200000000uLL, a4, a5, a6, a7, a8);
      break;
    case 2:
      if (a5 <= 0xA && ((1 << a5) & 0x752) != 0)
        JSC::MacroAssemblerARM64::load16SignedExtendTo32(a1, a2 | ((unint64_t)a3 << 8) | 0x100000000, 0x200000000uLL, a4, a5, a6, a7, a8);
      else
        JSC::MacroAssemblerARM64::load16(a1, a2 | ((unint64_t)a3 << 8) | 0x100000000, 0x200000000uLL, a4, a5, a6, a7, a8);
      break;
    case 1:
      if (a5 <= 0xA && ((1 << a5) & 0x752) != 0)
        JSC::MacroAssemblerARM64::load8SignedExtendTo32(a1, a2 | ((unint64_t)a3 << 8), 0x200000000uLL, a4, a5, a6, a7, a8);
      else
        JSC::MacroAssemblerARM64::load8(a1, a2 | ((unint64_t)a3 << 8), 0x200000000uLL, a4, a5, a6, a7, a8);
      break;
    default:
      __break(0xC471u);
      break;
  }
}

void JSC::MacroAssemblerARM64::load8SignedExtendTo32(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int *v19;
  JSC::AssemblerBuffer *v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int *v27;
  unsigned int v28;

  v8 = a4;
  v10 = a2;
  v12 = a2 >> 8;
  v13 = HIDWORD(a2);
  if (!HIDWORD(a2))
  {
    v16 = (unsigned __int16)JSC::MacroAssemblerARM64::tryFoldBaseAndOffsetPart(a1, a2, a3, a4, a5, a6, a7, a8);
    if (v16 >= 0x100)
    {
      if (BYTE4(a3) < 3u)
      {
        v26 = v8 & 0x1F | ((v12 & 0x1F) << 16) | (32 * (char)v16) | 0x38E01800;
        v28 = *(_DWORD *)(a1 + 200);
        v27 = (unsigned int *)(a1 + 200);
        v22 = v28;
        v23 = v26 | *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a3) << 56) >> 54));
        v20 = (JSC::AssemblerBuffer *)(v27 - 36);
        v24 = v28 + 4;
        v25 = *(v27 - 2);
        v19 = v27;
        goto LABEL_8;
      }
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x197B945E8);
    }
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_15;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (int)a3, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  if (BYTE4(a3) >= 3u)
  {
    __break(0xC471u);
    JUMPOUT(0x197B94618);
  }
  v17 = ((v13 & 7) << 10) | ((v12 & 0x1F) << 16) | 0x8B200231 | *(_DWORD *)((char *)&unk_199123E70
                                                                          + ((uint64_t)(HIDWORD(a3) << 56) >> 54));
  v19 = (unsigned int *)(a1 + 200);
  v18 = *(_DWORD *)(a1 + 200);
  v20 = (JSC::AssemblerBuffer *)(a1 + 56);
  if (v18 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v14, v15, a4, a5, a6, a7, a8);
    v18 = *v19;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = v17;
  v21 = *(_DWORD *)(a1 + 200);
  v22 = v21 + 4;
  *(_DWORD *)(a1 + 200) = v21 + 4;
  v23 = (32 * v10) | v8 & 0x1F | 0x38F16800;
  v24 = v21 + 8;
  v25 = *(_DWORD *)(a1 + 192);
LABEL_8:
  if (v24 > v25)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v20, v14, v15, a4, a5, a6, a7, a8);
    v22 = *v19;
  }
  *(_DWORD *)(*(_QWORD *)v20 + v22) = v23;
  *v19 += 4;
}

void JSC::MacroAssemblerARM64::load16SignedExtendTo32(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned int v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int *v18;
  JSC::AssemblerBuffer *v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;

  v8 = a4;
  v10 = a2;
  v12 = HIDWORD(a2);
  if (HIDWORD(a2) <= 1)
  {
    v15 = (unsigned __int16)JSC::MacroAssemblerARM64::tryFoldBaseAndOffsetPart(a1, a2, a3, a4, a5, a6, a7, a8);
    if (v15 >= 0x100)
    {
      if (BYTE4(a3) < 3u)
      {
        v25 = (32 * (char)v15) | v8 & 0x1F | 0x78E00800;
        v27 = *(_DWORD *)(a1 + 200);
        v26 = (unsigned int *)(a1 + 200);
        v21 = v27;
        v22 = v25 | *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a3) << 56) >> 54)) | (((v10 >> 8) & 0x1F) << 16) | (((_DWORD)v12 == 1) << 12);
        v19 = (JSC::AssemblerBuffer *)(v26 - 36);
        v23 = v27 + 4;
        v24 = *(v26 - 2);
        v18 = v26;
        goto LABEL_10;
      }
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x197B94808);
    }
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_15;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (int)a3, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  if (BYTE4(a3) >= 3u)
  {
    __break(0xC471u);
    JUMPOUT(0x197B94838);
  }
  v16 = *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a3) << 56) >> 54)) | (((v10 >> 8) & 0x1F) << 16) | ((v12 & 7) << 10) | 0x8B200231;
  v18 = (unsigned int *)(a1 + 200);
  v17 = *(_DWORD *)(a1 + 200);
  v19 = (JSC::AssemblerBuffer *)(a1 + 56);
  if (v17 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v13, v14, a4, a5, a6, a7, a8);
    v17 = *v18;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v17) = v16;
  v20 = *(_DWORD *)(a1 + 200);
  v21 = v20 + 4;
  *(_DWORD *)(a1 + 200) = v20 + 4;
  v22 = (32 * (char)v10) | v8 & 0x1F | 0x78F16800;
  v23 = v20 + 8;
  v24 = *(_DWORD *)(a1 + 192);
LABEL_10:
  if (v23 > v24)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v19, v13, v14, a4, a5, a6, a7, a8);
    v21 = *v18;
  }
  *(_DWORD *)(*(_QWORD *)v19 + v21) = v22;
  *v18 += 4;
}

void JSC::MacroAssemblerARM64::load32(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned int v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int *v18;
  JSC::AssemblerBuffer *v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;

  v8 = a4;
  v10 = a2;
  v12 = HIDWORD(a2);
  if ((a2 & 0xFFFFFFFD00000000) == 0)
  {
    v15 = (unsigned __int16)JSC::MacroAssemblerARM64::tryFoldBaseAndOffsetPart(a1, a2, a3, a4, a5, a6, a7, a8);
    if (v15 >= 0x100)
    {
      if (BYTE4(a3) < 3u)
      {
        v25 = (32 * (char)v15) | v8 & 0x1F | 0xB8600800;
        v27 = *(_DWORD *)(a1 + 200);
        v26 = (unsigned int *)(a1 + 200);
        v21 = v27;
        v22 = v25 | *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a3) << 56) >> 54)) | (((v10 >> 8) & 0x1F) << 16) | (((_DWORD)v12 != 0) << 12);
        v19 = (JSC::AssemblerBuffer *)(v26 - 36);
        v23 = v27 + 4;
        v24 = *(v26 - 2);
        v18 = v26;
        goto LABEL_8;
      }
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x197B94A28);
    }
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_15;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (int)a3, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  if (BYTE4(a3) >= 3u)
  {
    __break(0xC471u);
    JUMPOUT(0x197B94A58);
  }
  v16 = *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a3) << 56) >> 54)) | (((v10 >> 8) & 0x1F) << 16) | ((v12 & 7) << 10) | 0x8B200231;
  v18 = (unsigned int *)(a1 + 200);
  v17 = *(_DWORD *)(a1 + 200);
  v19 = (JSC::AssemblerBuffer *)(a1 + 56);
  if (v17 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v13, v14, a4, a5, a6, a7, a8);
    v17 = *v18;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v17) = v16;
  v20 = *(_DWORD *)(a1 + 200);
  v21 = v20 + 4;
  *(_DWORD *)(a1 + 200) = v20 + 4;
  v22 = (32 * (char)v10) | v8 & 0x1F | 0xB8716800;
  v23 = v20 + 8;
  v24 = *(_DWORD *)(a1 + 192);
LABEL_8:
  if (v23 > v24)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v19, v13, v14, a4, a5, a6, a7, a8);
    v21 = *v18;
  }
  *(_DWORD *)(*(_QWORD *)v19 + v21) = v22;
  *v18 += 4;
}

double JSC::DFG::SpeculativeJIT::setIntTypedArrayLoadResult(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int *a8)
{
  char v9;
  uint64_t v12;
  unsigned int v13;
  double result;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  char *v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  int v87;
  unint64_t v88;
  int v89;
  int v90[3];
  unsigned int v91[3];

  v9 = a3;
  v12 = (char)a3;
  if ((a4 - 6) > 2 || (_DWORD)a4 == 6 || (_DWORD)a4 == 8)
  {
    if ((a6 & 1) != 0)
    {
      v13 = *((_DWORD *)this + 50);
      if (v13 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)a2, a3, a4, a5, a6, a7, (uint64_t)a8);
        v13 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v13) = v12 & 0x1F | ((v12 & 0x1F) << 16) | 0xAA000360;
      goto LABEL_6;
    }
    JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, a3, a4, a5, a6, a7, (uint64_t)a8);
    v15 = *((_DWORD *)a2 + 12);
    v16 = ~v15;
    if (v16 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197B9503CLL);
    }
LABEL_10:
    v17 = *((_QWORD *)this + 499);
    v18 = v9;
    if ((int)v12 > 15)
      v18 = -1;
    v19 = (char *)this + 12 * v18;
    *((_DWORD *)v19 + 1194) = v15;
    *((_DWORD *)v19 + 1195) = 5;
    v20 = v17 + 24 * (int)v16;
    v21 = *((_DWORD *)a2 + 13);
    *(_QWORD *)v20 = a2;
    *(_DWORD *)(v20 + 8) = v21;
    *(_BYTE *)(v20 + 17) = v12;
    *(_QWORD *)&result = 0x100000001;
    goto LABEL_13;
  }
  v22 = a7;
  if ((a6 & 1) != 0)
  {
    v23 = *((_DWORD *)this + 50);
    if (v23 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)a2, a3, a4, a5, a6, a7, (uint64_t)a8);
      v23 = *((_DWORD *)this + 50);
    }
    v24 = v12 & 0x1F;
    *(_DWORD *)(*((_QWORD *)this + 7) + v23) = v22 | (32 * v24) | 0x1E620000;
    *((_DWORD *)this + 50) += 4;
    JSC::MacroAssemblerARM64::branchTest32((uint64_t)this, 5, v12, v12, a5, a6, a7, (uint64_t)a8, (uint64_t)v91);
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197B94FA4);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg(this, (uint64_t)&JSC::MacroAssembler::twoToThe32, (uint64_t)this + 296, v25, v26, v27, v28, v29);
    v37 = *((_DWORD *)this + 50);
    if (v37 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v30, v31, v32, v33, v34, v35, v36);
      v37 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v37) = -58758593;
    v38 = *((_DWORD *)this + 50);
    v39 = v38 + 4;
    *((_DWORD *)this + 50) = v38 + 4;
    if ((v38 + 8) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v30, v31, v32, v33, v34, v35, v36);
      v39 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v39) = v22 | (32 * v22) | 0x1E7F2800;
    *((_DWORD *)this + 50) += 4;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v91, (uint64_t)this, v31, v32, v33, v34, v35, v36);
    v41 = *((_DWORD *)this + 50);
    if (v41 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v40, a3, a4, a5, a6, a7, (uint64_t)a8);
      v41 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v41) = (32 * v22) | v24 | 0x9E660000;
    v42 = *((_DWORD *)this + 50);
    v43 = v42 + 4;
    *((_DWORD *)this + 50) = v42 + 4;
    if ((_DWORD)v12 == 31)
      v44 = -885300225;
    else
      v44 = v24 | (32 * v24) | 0xCB1B0000;
    if ((v42 + 8) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v40, a3, a4, a5, a6, a7, (uint64_t)a8);
      v43 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v43) = v44;
LABEL_6:
    *((_DWORD *)this + 50) += 4;
    if (*a8 != -1)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(a8, (uint64_t)this, a3, a4, a5, a6, a7, (uint64_t)a8);
    JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v12, (uint64_t)a2, 16, 0, a6, a7, (uint64_t)a8);
    return result;
  }
  v45 = *((_QWORD *)a2 + 8);
  if (v45 && (v45 & 0xFFFFFFFCFFFFFFFFLL) == 0 && (_DWORD)a5)
  {
    JSC::MacroAssemblerARM64::branchTest32((uint64_t)this, 4, (char)a3, v12, a5, a6, a7, (uint64_t)a8, (uint64_t)v90);
    JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, v90);
    JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v46, v47, v48, v49, v50, v51);
    v15 = *((_DWORD *)a2 + 12);
    v16 = ~v15;
    if (v16 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      goto LABEL_57;
    }
    goto LABEL_10;
  }
  if (!v45 || (v45 & 0xFFFFFFF0FFFFFFFFLL) != 0)
  {
    v64 = *((_DWORD *)this + 50);
    if (v64 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)a2, a3, a4, a5, a6, a7, (uint64_t)a8);
      v64 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v64) = v22 | (32 * (v12 & 0x1F)) | 0x1E620000;
    *((_DWORD *)this + 50) += 4;
    JSC::MacroAssemblerARM64::branchTest32((uint64_t)this, 5, v12, v12, a5, a6, a7, (uint64_t)a8, (uint64_t)v91);
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197B95014);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg(this, (uint64_t)&JSC::MacroAssembler::twoToThe32, (uint64_t)this + 296, v65, v66, v67, v68, v69);
    v77 = *((_DWORD *)this + 50);
    if (v77 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v70, v71, v72, v73, v74, v75, v76);
      v77 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v77) = -58758593;
    v78 = *((_DWORD *)this + 50);
    v79 = v78 + 4;
    *((_DWORD *)this + 50) = v78 + 4;
    if ((v78 + 8) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v70, v71, v72, v73, v74, v75, v76);
      v79 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v79) = v22 | (32 * v22) | 0x1E7F2800;
    *((_DWORD *)this + 50) += 4;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v91, (uint64_t)this, v71, v72, v73, v74, v75, v76);
    JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v80, v81, v82, v83, v84, v85);
    v86 = (char *)this + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v22];
    v87 = *((_DWORD *)a2 + 12);
    *((_DWORD *)v86 + 1242) = v87;
    *((_DWORD *)v86 + 1243) = 6;
    v88 = ~v87;
    if (v88 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
LABEL_57:
      JUMPOUT(0x197B94D84);
    }
    v20 = *((_QWORD *)this + 499) + 24 * (int)v88;
    v89 = *((_DWORD *)a2 + 13);
    *(_QWORD *)v20 = a2;
    *(_DWORD *)(v20 + 8) = v89;
    *(_BYTE *)(v20 + 17) = v22;
    *(_QWORD *)&result = 0x400000004;
LABEL_13:
    *(_DWORD *)(v20 + 12) = LODWORD(result);
    *(_BYTE *)(v20 + 16) = 0;
    return result;
  }
  JSC::MacroAssemblerARM64::and64((uint64_t)this, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a3, v12);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v52, v53, v54, v55, v56, v57);
  v58 = *((_DWORD *)a2 + 12);
  v59 = ~v58;
  if (v59 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197B95054);
  }
  v60 = *((_QWORD *)this + 499) + 24 * (int)v59;
  v61 = v9;
  if ((int)v12 > 15)
    v61 = -1;
  v62 = (char *)this + 12 * v61;
  *((_DWORD *)v62 + 1194) = v58;
  *((_DWORD *)v62 + 1195) = 4;
  v63 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v60 = a2;
  *(_DWORD *)(v60 + 8) = v63;
  *(_BYTE *)(v60 + 17) = v12;
  *(_QWORD *)&result = 0x300000003;
  *(_DWORD *)(v60 + 12) = 3;
  *(_BYTE *)(v60 + 16) = 0;
  return result;
}

void JSC::AssemblyHelpers::boxInt32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  if ((_DWORD)a4)
  {
    v11 = a1[50];
    if (v11 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v11 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 & 0x1F | ((v9 & 0x1F) << 16) | 0xAA000360;
    a1[50] += 4;
  }
  else
  {
    JSC::MacroAssemblerARM64::or64((uint64_t)a1, (JSC::ARM64LogicalImmediate *)0xFFFE000000000000, a2, (char)a3);
  }
}

void JSC::DFG::SpeculativeJIT::compileGetByValOnIntTypedArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int v37;
  int v38;
  char v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  signed __int8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  unsigned int v61;
  char v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  _DWORD *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  _BYTE v83[12];
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  char v88;

  v8 = *(_QWORD *)(a1 + 3960);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_DWORD *)(v8 + 164);
  if (v10 <= v9)
    goto LABEL_90;
  v15 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * *(_QWORD *)(a2 + 24));
  v16 = v15 & 0xFF00FFFFFFFFFFFFLL;
  if ((v15 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_67;
  v17 = ~*(_DWORD *)((v15 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v17 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B95738);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v17 + 12))
  {
    v78 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * *(_QWORD *)(a2 + 24)), a3, a4, a5, a6, a7, a8);
    v8 = *(_QWORD *)(a1 + 3960);
    LODWORD(v9) = *(_DWORD *)(a2 + 24);
    v10 = *(_DWORD *)(v8 + 164);
  }
  else
  {
LABEL_67:
    v78 = -1;
  }
  if (v10 <= (int)v9 + 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197B95740);
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * (v9 + 1));
  v19 = ~*(_DWORD *)((v18 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v19 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B95748);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12))
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(a1, v18, a3, a4, a5, a6, a7, a8);
    v21 = v20;
    v8 = *(_QWORD *)(a1 + 3960);
    LODWORD(v9) = *(_DWORD *)(a2 + 24);
    v10 = *(_DWORD *)(v8 + 164);
  }
  else
  {
    v21 = -1;
  }
  v22 = v9 + 2;
  if (v10 <= v22)
  {
    __break(0xC471u);
    JUMPOUT(0x197B95750);
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * v22);
  v24 = ~*(_DWORD *)((v23 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v24 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
LABEL_96:
    JUMPOUT(0x197B95730);
  }
  v75 = a4;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v24 + 12))
    v25 = JSC::DFG::SpeculativeJIT::fillStorage(a1, v23, a3, a4, a5, a6, a7, a8);
  else
    v25 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v87, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
  if (v78 == -1)
    v78 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v15, v26, v27, v28, v29, v30, v31);
  if (v21 == -1)
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(a1, v18, v26, v27, v28, v29, v30, v31);
    v21 = v32;
  }
  if (v25 == -1)
    v25 = JSC::DFG::SpeculativeJIT::fillStorage(a1, v23, v26, v27, v28, v29, v30, v31);
  v33 = v88;
  v34 = a3;
  if ((a3 - 6) > 2)
  {
    v35 = 0;
    v77 = -1;
    v36 = 1;
    goto LABEL_22;
  }
  v35 = 0;
  v77 = -1;
  v36 = 1;
  if ((_DWORD)v34 == 6 || (_DWORD)v34 == 8)
    goto LABEL_22;
  v66 = 0;
  v67 = (_DWORD *)(a1 + 4976);
  v68 = 0x17u;
  v69 = -1;
  while (*v67)
  {
LABEL_75:
    ++v66;
    v67 += 3;
    if (v66 == 23)
    {
      v66 = v68;
      v71 = (unsigned int *)(a1 + 4968 + 12 * v68);
      v72 = *v71;
      *(_QWORD *)v71 = 0xFFFFFFFF3FFFFFFFLL;
      v67 = v71 + 2;
      goto LABEL_79;
    }
  }
  v70 = *(v67 - 1);
  if (v70 != -1)
  {
    if (v70 < v69)
    {
      v68 = v66;
      v69 = *(v67 - 1);
    }
    goto LABEL_75;
  }
  v72 = *(v67 - 2);
  *((_QWORD *)v67 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_79:
  *v67 = 1;
  v77 = JSC::FPRInfo::toRegister::registerForIndex[v66];
  if (v72 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill(a1, v72, v26, v27, v28, v29, v30, v31);
  v36 = 0;
  v35 = a1;
LABEL_22:
  LOBYTE(v84) = 0;
  v86 = 0;
  v37 = *(unsigned __int16 *)(a2 + 18);
  if (v37 == 146)
    v38 = *(_DWORD *)(a2 + 80);
  else
    v38 = *(_DWORD *)(a2 + 72);
  if ((v38 & 0x40000000) == 0)
  {
    v39 = -1;
    goto LABEL_26;
  }
  *(_QWORD *)v83 = a1;
  std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v84, (JSC::DFG::SpeculativeJIT **)v83, v26, v27, v28, v29, v30, v31);
  if (!v86)
  {
    __break(1u);
LABEL_90:
    __break(0xC471u);
    goto LABEL_96;
  }
  v39 = v85;
  v37 = *(unsigned __int16 *)(a2 + 18);
LABEL_26:
  v74 = v35;
  v73 = v36;
  if (v37 == 146)
    v40 = *(_DWORD *)(a2 + 80);
  else
    v40 = *(_DWORD *)(a2 + 72);
  v41 = v16;
  if (BYTE2(v40) - 3 <= 1)
  {
    v42 = v75;
    v43 = v25;
    v44 = 16;
  }
  else
  {
    v42 = v75;
    v43 = v25;
    v44 = 1;
  }
  v45 = v34;
  v51 = (*(uint64_t (**)(_QWORD, uint64_t))v42)(*(_QWORD *)(v42 + 8), v44);
  if (*(_WORD *)(a2 + 18) == 146)
    v52 = *(_DWORD *)(a2 + 80);
  else
    v52 = *(_DWORD *)(a2 + 72);
  if (BYTE2(v52) - 3 <= 1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, 10, (char)v51, v46, v47, v48, v49, v50);
  v76 = v21;
  v53 = v21;
  JSC::DFG::SpeculativeJIT::jumpForTypedArrayOutOfBounds(a1, a2, v78, v53, v33, v39, v49, v50, (uint64_t)v83);
  if (*(_DWORD *)v83 != -1)
  {
    v57 = *(_WORD *)(a2 + 18) == 146 ? *(_DWORD *)(a2 + 80) : *(_DWORD *)(a2 + 72);
    if (BYTE2(v57) - 3 >= 2)
    {
      v81 = *(_DWORD *)v83;
      v82 = *(_QWORD *)&v83[4];
      JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0xFuLL, (JSC::DFG::Node *)0xFF80000000, 0, &v81);
      *(_DWORD *)v83 = -1;
      *(_QWORD *)&v83[4] = 0xFF000F4100000000;
    }
  }
  JSC::DFG::SpeculativeJIT::loadFromIntTypedArray(a1, v43, v53, (char)v51, v45, v54, v55, v56);
  v79 = *(_DWORD *)v83;
  v80 = *(_QWORD *)&v83[4];
  JSC::DFG::SpeculativeJIT::setIntTypedArrayLoadResult((JSC::DFG::SpeculativeJIT *)a1, (JSC::DFG::Node *)a2, v51, v45, 1, (v51 & 0xFF00) == 4096, v77, &v79);
  if (v86)
  {
    if (v84)
    {
      v58 = v85;
      if (v85 != -1)
      {
        if (v85 > 15)
          v58 = -1;
        --*(_DWORD *)(v84 + 12 * v58 + 4784);
      }
    }
  }
  v59 = v73;
  if (!v74)
    v59 = 1;
  if ((v59 & 1) == 0)
  {
    v60 = v74 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v77];
    --*(_DWORD *)(v60 + 4976);
  }
  if (v87)
  {
    v61 = v88;
    if (v88 != -1)
    {
      if (v88 > 15)
        v61 = -1;
      --*(_DWORD *)(v87 + 12 * v61 + 4784);
    }
  }
  if (v43 != -1)
  {
    if (v43 > 15)
      v62 = -1;
    else
      v62 = v43;
    --*(_DWORD *)(a1 + 12 * v62 + 4784);
  }
  v63 = a1 + 4776;
  v64 = v76;
  if ((int)v53 > 15)
    v64 = -1;
  --*(_DWORD *)(v63 + 12 * v64 + 8);
  if (v41)
  {
    v65 = v78;
    if (v78 > 15)
      v65 = -1;
    --*(_DWORD *)(v63 + 12 * v65 + 8);
  }
}

uint64_t JSC::DFG::SpeculativeJIT::getIntTypedArrayStoreOperand(JSC::DFG::SpeculativeJIT *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v11;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _DWORD *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  char *v72;
  unsigned int v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  int v91;
  unsigned __int8 v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  int v121;
  int v122;
  unsigned int v123;
  int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  unsigned int v138;
  _DWORD *v139;
  uint64_t *v140;
  int v141;
  char *v142;
  unsigned int v143;
  int v144;
  int v145;
  unsigned int v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  int v150;
  unsigned int v151;
  char v152;
  uint64_t v153;
  int *v154;
  int *v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  WTF *v161;
  unsigned int v163;
  char *v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  int v180;
  unsigned int v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  char *v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int *v201;
  unsigned int v202;
  int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int *v207;
  unsigned int v208;
  unsigned int v209;
  int v210;
  int v211;
  int v212;
  char v213;
  __int16 v214;
  char v215;
  int v216;
  uint64_t v217;
  WTF *v218;
  unint64_t v219;
  int v220;
  unint64_t v221;
  unsigned int v222[2];
  char v223;
  __int16 v224;
  char v225;
  uint64_t v226;
  char v227;
  uint64_t v228;
  char v229;

  v8 = a6;
  v11 = a3;
  if (*(unsigned __int16 *)((a4 & 0xFF00FFFFFFFFFFFFLL) + 0x12) >= 3u)
  {
    v14 = (a4 >> 50) & 0x3F;
    goto LABEL_56;
  }
  v14 = (a4 >> 50) & 0x3F;
  if (v14 >= 0x35)
  {
    __break(0xC471u);
    JUMPOUT(0x197B9678CLL);
  }
  v15 = **(_QWORD **)((a4 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
  v16 = qword_199123F70[v14];
  if (v15)
  {
    if (v15 >= 0xFFFE000000000000)
    {
      v19 = (**(_QWORD **)((a4 & 0xFF00FFFFFFFFFFFFLL) + 0x48) & 0xFFFFFFFELL) == 0;
      v17 = 0x200000000;
      v20 = 0x100000000;
      goto LABEL_15;
    }
    if (v15 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v15 & 0xFFFE000000000002) == 0)
      {
        if (qword_1ECF4C080 > v15)
          goto LABEL_230;
        v17 = 0;
        if (v15 >> 36 || (v15 & 0xFFFFFFFFFLL) == 0)
          goto LABEL_17;
        v18 = *(unsigned __int8 *)(v15 + 5);
        if (v18 != 2)
        {
          v17 = JSC::speculatedTypeMapping[v18];
          goto LABEL_17;
        }
        v32 = *(_QWORD *)(v15 + 8);
        if (v32)
          v33 = (*(_QWORD *)(v15 + 8) & 1) == 0;
        else
          v33 = 0;
        if (!v33)
        {
LABEL_50:
          v17 = 805306368;
          goto LABEL_17;
        }
        if (v32 < qword_1ECF4C080)
        {
LABEL_230:
          v17 = 0;
          goto LABEL_17;
        }
        v17 = 0;
        if (!(v32 >> 36) && (v32 & 0xFFFFFFFFFLL) != 0)
        {
          if ((*(_BYTE *)(v32 + 16) & 0x10) != 0)
          {
            v17 = 0x10000000;
            goto LABEL_17;
          }
          goto LABEL_50;
        }
LABEL_17:
        if ((v17 | v16) == v16)
        {
          if (v15 >> 49)
          {
            if (v15 <= 0xFFFDFFFFFFFFFFFFLL)
              *(_QWORD *)&v21 = v15 - 0x2000000000000;
            else
              v21 = (double)(int)v15;
            if ((_DWORD)a6)
            {
              v22 = 0.0;
              if (v21 > 0.0)
              {
                v22 = v21;
                if (v21 > 255.0)
                  v22 = 255.0;
              }
              v21 = nearbyint(v22);
            }
            JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v218, a1, a3, a4, a5, a6, a7, a8);
            v28 = (*(_QWORD *)&v21 >> 52) & 0x7FFLL;
            if ((v28 - 1023) <= 0x53)
            {
              v30 = *(_QWORD *)&v21 >> (51 - (*(_QWORD *)&v21 >> 52));
              if (v28 > 0x433)
                LODWORD(v30) = *(_QWORD *)&v21 << ((*(_QWORD *)&v21 >> 52) - 51);
              if (v28 >= 0x41F)
                v31 = v30;
              else
                v31 = (((1 << ((*(_QWORD *)&v21 >> 52) + 1)) - 1) & v30) + (1 << ((*(_QWORD *)&v21 >> 52) + 1));
              if (v21 >= 0.0)
                v29 = v31;
              else
                v29 = -v31;
            }
            else
            {
              v29 = 0;
            }
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)v29, (char)v219, v23, v24, v25, v26, v27);
            *(_QWORD *)a2 = v218;
            *(_BYTE *)(a2 + 8) = v219;
            return 1;
          }
          goto LABEL_55;
        }
        goto LABEL_56;
      }
      v19 = (v15 & 0xFFFFFFFFFFFFFFFELL) == 6;
      v17 = 0x20000000000;
      v20 = 0x10000000000;
LABEL_15:
      if (v19)
        v17 = v20;
      goto LABEL_17;
    }
    v34 = (uint64_t)COERCE_DOUBLE(v15 - 0x2000000000000);
    if ((double)v34 != COERCE_DOUBLE(v15 - 0x2000000000000))
    {
LABEL_49:
      v17 = 0x2000000000;
      goto LABEL_17;
    }
    if (v34)
    {
      if ((unint64_t)(v34 + 0x8000000000000) >> 52)
        goto LABEL_49;
    }
    else if ((uint64_t)v15 < 0x2000000000000)
    {
      goto LABEL_49;
    }
    v17 = 0x1000000000;
    goto LABEL_17;
  }
  if ((v16 | 0x40000000000) == v16)
  {
LABEL_55:
    JSC::DFG::SpeculativeJIT::terminateSpeculativeExecution((uint64_t)a1, 0x16uLL, 255, 0, a5, a6, a7, a8);
    return 0;
  }
LABEL_56:
  if ((_DWORD)v14 == 52)
  {
    if ((a4 & 0xFC000000000000) != 0xD0000000000000)
    {
      __break(0xC471u);
      JUMPOUT(0x197B96570);
    }
    v74 = ~*(_DWORD *)((a4 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v74 >= *((unsigned int *)a1 + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197B967CCLL);
    }
    if (*(_BYTE *)(*((_QWORD *)a1 + 499) + 24 * (int)v74 + 12))
    {
      v75 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(a1, a4, 3, a4, a5, a6, a7, a8);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v218, a1, v76, v77, v78, v79, v80, v81);
      v89 = v219;
      if (v75 != -1)
        goto LABEL_87;
    }
    else
    {
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v218, a1, a3, a4, a5, a6, a7, a8);
      v89 = v219;
    }
    v75 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(a1, a4, 3, v84, v85, v86, v87, v88);
LABEL_87:
    if (v89 == v75)
    {
LABEL_171:
      if (v8)
      {
        JSC::MacroAssemblerARM64::branch64((uint64_t)a1, 9, (char)v89, 255, v85, v86, v87, v88, (uint64_t)&v228);
        JSC::MacroAssemblerARM64::branch64((uint64_t)a1, 12, (char)v89, 255, v168, v169, v170, v171, (uint64_t)&v226);
        v179 = *((_DWORD *)a1 + 50);
        if (v179 + 4 > *((_DWORD *)a1 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), v172, v173, v174, v175, v176, v177, v178);
          v179 = *((_DWORD *)a1 + 50);
        }
        *(_DWORD *)(*((_QWORD *)a1 + 7) + v179) = v89 & 0x1F | 0x52800000;
        v180 = *((_DWORD *)a1 + 50) + 4;
        for (*((_DWORD *)a1 + 50) = v180; v180 < *((_DWORD *)a1 + 13); *((_DWORD *)a1 + 50) = v180)
        {
          if ((v180 + 4) > *((_DWORD *)a1 + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), v172, v173, v174, v175, v176, v177, v178);
            v180 = *((_DWORD *)a1 + 50);
          }
          *(_DWORD *)(*((_QWORD *)a1 + 7) + v180) = -721215457;
          v180 = *((_DWORD *)a1 + 50) + 4;
        }
        v181 = v180;
        if ((v180 + 4) > *((_DWORD *)a1 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), v172, v173, v174, v175, v176, v177, v178);
          v181 = *((_DWORD *)a1 + 50);
        }
        *(_DWORD *)(*((_QWORD *)a1 + 7) + v181) = 335544320;
        *((_DWORD *)a1 + 50) += 4;
        if (*((_BYTE *)a1 + 328))
          v182 = 69;
        else
          v182 = 65;
        v222[0] = v180;
        v222[1] = 0;
        v223 = v182;
        v224 = 15;
        v225 = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v226, (uint64_t)a1, v173, v174, v175, v176, v177, v178);
        v190 = *((_DWORD *)a1 + 50);
        if (v190 + 4 > *((_DWORD *)a1 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), v183, v184, v185, v186, v187, v188, v189);
          v190 = *((_DWORD *)a1 + 50);
        }
        *(_DWORD *)(*((_QWORD *)a1 + 7) + v190) = (char)v89 | 0x32001FE0;
        *((_DWORD *)a1 + 50) += 4;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v222, (uint64_t)a1, v184, v185, v186, v187, v188, v189);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v228, (uint64_t)a1, v191, v192, v193, v194, v195, v196);
      }
      *(_QWORD *)a2 = v218;
      *(_BYTE *)(a2 + 8) = v219;
      if (v75 > 15)
        v197 = -1;
      else
        v197 = v75;
      v198 = (char *)a1 + 12 * v197;
      goto LABEL_212;
    }
    if (v75 == 63)
    {
      if (v89 != 31)
      {
        v165 = v89 & 0x1F | 0xD2800000;
LABEL_168:
        v167 = (unsigned int *)((char *)a1 + 200);
        v166 = *((_DWORD *)a1 + 50);
        if (v166 + 4 > *((_DWORD *)a1 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), v82, v83, v84, v85, v86, v87, v88);
          v166 = *v167;
        }
        *(_DWORD *)(*((_QWORD *)a1 + 7) + v166) = v165;
        *v167 += 4;
        goto LABEL_171;
      }
    }
    else if (v89 != 31 && v75 != 31)
    {
      v90 = v89 & 0xFFE0FFFF | ((v75 & 0x1F) << 16);
      v91 = -1442839584;
LABEL_167:
      v165 = v90 | v91;
      goto LABEL_168;
    }
    v90 = (char)v89 | (32 * v75);
    v91 = -1862270976;
    goto LABEL_167;
  }
  if ((_DWORD)v14 != 49)
  {
    if ((_DWORD)v14 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197B967ACLL);
    }
    v218 = a1;
    v219 = a4;
    LOBYTE(v220) = -1;
    v36 = ~*(_DWORD *)((a4 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v36 >= *((unsigned int *)a1 + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197B967C4);
    }
    if (*(_BYTE *)(*((_QWORD *)a1 + 499) + 24 * (int)v36 + 12))
      LOBYTE(v220) = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(a1, a4, (uint64_t)&v220 + 1, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v228, a1, a3, a4, a5, a6, a7, a8);
    v44 = v229;
    v45 = v229;
    if (v8)
    {
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v226, a1, v38, v39, v40, v41, v42, v43);
      v53 = v220;
      if (v220 == 255)
      {
        v53 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v218, v219, (uint64_t)&v220 + 1, v48, v49, v50, v51, v52);
        LOBYTE(v220) = v53;
      }
      v54 = v227;
      if (v53 == v45)
        goto LABEL_194;
      if (v53 == 63)
      {
        if (v44 != 31)
        {
          v199 = v44 & 0x1F | 0xD2800000;
LABEL_191:
          v201 = (unsigned int *)((char *)a1 + 200);
          v200 = *((_DWORD *)a1 + 50);
          if (v200 + 4 > *((_DWORD *)a1 + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), v46, v47, v48, v49, v50, v51, v52);
            v200 = *v201;
          }
          *(_DWORD *)(*((_QWORD *)a1 + 7) + v200) = v199;
          *v201 += 4;
LABEL_194:
          v202 = *((_DWORD *)a1 + 50);
          if (v202 + 4 > *((_DWORD *)a1 + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), v46, v47, v48, v49, v50, v51, v52);
            v202 = *((_DWORD *)a1 + 50);
          }
          *(_DWORD *)(*((_QWORD *)a1 + 7) + v202) = 65569 * (v44 & 0x1F) + 178289664;
          v203 = *((_DWORD *)a1 + 50);
          v204 = v203 + 4;
          *((_DWORD *)a1 + 50) = v203 + 4;
          if ((v203 + 8) > *((_DWORD *)a1 + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), v46, v47, v48, v49, v50, v51, v52);
            v204 = *((_DWORD *)a1 + 50);
          }
          *(_DWORD *)(*((_QWORD *)a1 + 7) + v204) = v54 | 0x32001FE0;
          *((_DWORD *)a1 + 50) += 4;
          JSC::MacroAssemblerARM64::moveConditionally32(a1, 3, v45, v54, v45, v54, v45, v52);
          if (v226)
          {
            v205 = v227;
            if (v227 != -1)
            {
              if (v227 > 15)
                v205 = -1;
              --*(_DWORD *)(v226 + 12 * v205 + 4784);
            }
          }
LABEL_209:
          *(_QWORD *)a2 = v228;
          *(_BYTE *)(a2 + 8) = v229;
          v209 = (char)v220;
          if ((char)v220 > 15)
            v209 = -1;
          v198 = (char *)v218 + 12 * v209;
LABEL_212:
          --*((_DWORD *)v198 + 1196);
          return 1;
        }
      }
      else if ((_DWORD)v45 != 31 && v53 != 31)
      {
        v55 = v44 & 0xFFE0FFFF | ((v53 & 0x1F) << 16);
        v56 = -1442839584;
LABEL_190:
        v199 = v55 | v56;
        goto LABEL_191;
      }
      v55 = v45 | (32 * (char)v53);
      v56 = -1862270976;
      goto LABEL_190;
    }
    v92 = v220;
    if (v220 == 255)
    {
      v92 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v218, v219, (uint64_t)&v220 + 1, v39, v40, v41, v42, v43);
      LOBYTE(v220) = v92;
    }
    if (v44 == v92)
      goto LABEL_209;
    if (v92 == 63)
    {
      if ((_DWORD)v45 != 31)
      {
        v93 = v44 & 0x1F | 0xD2800000;
        goto LABEL_206;
      }
    }
    else if ((_DWORD)v45 != 31 && v92 != 31)
    {
      v93 = v44 & 0xFFE0FFFF | ((v92 & 0x1F) << 16) | 0xAA0003E0;
LABEL_206:
      v208 = *((_DWORD *)a1 + 50);
      v207 = (unsigned int *)((char *)a1 + 200);
      v206 = v208;
      if (v208 + 4 > *(v207 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v207 - 36), v37, v38, v39, v40, v41, v42, v43);
        v206 = *v207;
      }
      *(_DWORD *)(*((_QWORD *)v207 - 18) + v206) = v93;
      *v207 += 4;
      goto LABEL_209;
    }
    v93 = v45 | (32 * (char)v92) | 0x91000000;
    goto LABEL_206;
  }
  if (*(unsigned __int16 *)(*((_QWORD *)a1 + 497) + 18) - 202 <= 9)
  {
    __break(0xC471u);
    JUMPOUT(0x197B96550);
  }
  v57 = ~*(_DWORD *)((a4 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  v58 = *((unsigned int *)a1 + 1001);
  if (!(_DWORD)a6)
  {
    if (v57 >= v58)
    {
      __break(0xC471u);
      JUMPOUT(0x197B967DCLL);
    }
    if (*(_BYTE *)(*((_QWORD *)a1 + 499) + 24 * (int)v57 + 12))
    {
      v94 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)a1, a4, a3, a4, a5, a6, a7, a8);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v228, a1, v95, v96, v97, v98, v99, v100);
      if ((_DWORD)v94 != -1)
      {
LABEL_112:
        v111 = v229;
        v112 = *((_DWORD *)a1 + 50);
        if (v112 + 4 > *((_DWORD *)a1 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), v101, v102, v103, v104, v105, v106, v107);
          v112 = *((_DWORD *)a1 + 50);
        }
        *(_DWORD *)(*((_QWORD *)a1 + 7) + v112) = ((_DWORD)v94 << 16) | (32 * v94) | 0x1E602000;
        *((_DWORD *)a1 + 50) += 4;
        JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare((uint64_t)a1, 0, v102, v103, v104, v105, v106, v107, (uint64_t)&v226);
        v120 = *((_DWORD *)a1 + 50);
        if (v120 + 4 > *((_DWORD *)a1 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), v113, v114, v115, v116, v117, v118, v119);
          v120 = *((_DWORD *)a1 + 50);
        }
        v121 = v111 & 0x1F;
        *(_DWORD *)(*((_QWORD *)a1 + 7) + v120) = (65569 * v121) | 0xCA000000;
        v122 = *((_DWORD *)a1 + 50) + 4;
        for (*((_DWORD *)a1 + 50) = v122; v122 < *((_DWORD *)a1 + 13); *((_DWORD *)a1 + 50) = v122)
        {
          if ((v122 + 4) > *((_DWORD *)a1 + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), v113, v114, v115, v116, v117, v118, v119);
            v122 = *((_DWORD *)a1 + 50);
          }
          *(_DWORD *)(*((_QWORD *)a1 + 7) + v122) = -721215457;
          v122 = *((_DWORD *)a1 + 50) + 4;
        }
        v123 = v122;
        if ((v122 + 4) > *((_DWORD *)a1 + 48))
        {
          v210 = v122;
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), v113, v114, v115, v116, v117, v118, v119);
          v122 = v210;
          v123 = *((_DWORD *)a1 + 50);
        }
        *(_DWORD *)(*((_QWORD *)a1 + 7) + v123) = 335544320;
        *((_DWORD *)a1 + 50) += 4;
        v124 = *((unsigned __int8 *)a1 + 328);
        v218 = (WTF *)&v220;
        v219 = 2;
        if (v122 != -1)
        {
          v19 = v124 == 0;
          v125 = 0xFF000F4500000000;
          if (v19)
            v125 = 0xFF000F4100000000;
          v221 = v125;
          HIDWORD(v219) = 1;
          v220 = v122;
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v226, (uint64_t)a1, v114, v115, v116, v117, v118, v119);
        JSC::MacroAssemblerARM64::branchTruncateDoubleToInt32((uint64_t)a1, v94, (char)v111, 1, v126, v127, v128, v129, (uint64_t)&v216);
        v137 = v216;
        if (v216 != -1)
        {
          v138 = HIDWORD(v219);
          if (HIDWORD(v219) == (_DWORD)v219)
          {
            v139 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v218, (void *)(HIDWORD(v219) + 1), (unint64_t)&v216, v132, v133, v134, v135, v136);
            v141 = *v139;
            v140 = (uint64_t *)(v139 + 1);
            v137 = v141;
            v138 = HIDWORD(v219);
          }
          else
          {
            v140 = &v217;
          }
          v142 = (char *)v218 + 12 * v138;
          *(_DWORD *)v142 = v137;
          *(_QWORD *)(v142 + 4) = *v140;
          ++HIDWORD(v219);
        }
        v143 = *((_DWORD *)a1 + 50);
        if (v143 + 4 > *((_DWORD *)a1 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), (uint64_t)v130, v131, v132, v133, v134, v135, v136);
          v143 = *((_DWORD *)a1 + 50);
        }
        v144 = 32 * v94;
        *(_DWORD *)(*((_QWORD *)a1 + 7) + v143) = v11 & 0x1F | (32 * (v11 & 0x1F)) | 0xAA1B0000;
        v145 = *((_DWORD *)a1 + 50);
        v146 = v145 + 4;
        *((_DWORD *)a1 + 50) = v145 + 4;
        if ((v145 + 8) > *((_DWORD *)a1 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), (uint64_t)v130, v131, v132, v133, v134, v135, v136);
          v144 = 32 * v94;
          v146 = *((_DWORD *)a1 + 50);
        }
        *(_DWORD *)(*((_QWORD *)a1 + 7) + v146) = v144 | v121 | 0x9E660000;
        v147 = *((_DWORD *)a1 + 50);
        v148 = v147 + 4;
        *((_DWORD *)a1 + 50) = v147 + 4;
        if (v111 == 31)
          v149 = -885300225;
        else
          v149 = v121 | (32 * v121) | 0xCB1B0000;
        if ((v147 + 8) > *((_DWORD *)a1 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), (uint64_t)v130, v131, v132, v133, v134, v135, v136);
          v148 = *((_DWORD *)a1 + 50);
        }
        *(_DWORD *)(*((_QWORD *)a1 + 7) + v148) = v149;
        v150 = *((_DWORD *)a1 + 50) + 4;
        for (*((_DWORD *)a1 + 50) = v150; v150 < *((_DWORD *)a1 + 13); *((_DWORD *)a1 + 50) = v150)
        {
          if ((v150 + 4) > *((_DWORD *)a1 + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), (uint64_t)v130, v131, v132, v133, v134, v135, v136);
            v150 = *((_DWORD *)a1 + 50);
          }
          *(_DWORD *)(*((_QWORD *)a1 + 7) + v150) = -721215457;
          v150 = *((_DWORD *)a1 + 50) + 4;
        }
        v151 = v150;
        if ((v150 + 4) > *((_DWORD *)a1 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), (uint64_t)v130, v131, v132, v133, v134, v135, v136);
          v151 = *((_DWORD *)a1 + 50);
        }
        *(_DWORD *)(*((_QWORD *)a1 + 7) + v151) = 335544320;
        *((_DWORD *)a1 + 50) += 4;
        if (*((_BYTE *)a1 + 328))
          v152 = 69;
        else
          v152 = 65;
        v211 = v150;
        v212 = 0;
        v213 = v152;
        v214 = 15;
        v215 = -1;
        if (v150 != -1)
        {
          v153 = *(unsigned int *)(a5 + 12);
          if ((_DWORD)v153 == *(_DWORD *)(a5 + 8))
          {
            v154 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, (void *)(v153 + 1), (unint64_t)&v211, v132, v133, v134, v135, v136);
            v156 = *v154;
            v155 = v154 + 1;
            v157 = *(_QWORD *)a5 + 12 * *(unsigned int *)(a5 + 12);
            *(_DWORD *)v157 = v156;
          }
          else
          {
            v155 = &v212;
            v157 = *(_QWORD *)a5 + 12 * v153;
            *(_DWORD *)v157 = v150;
          }
          *(_QWORD *)(v157 + 4) = *(_QWORD *)v155;
          ++*(_DWORD *)(a5 + 12);
        }
        if (HIDWORD(v219))
        {
          v158 = 0;
          v159 = 0;
          v160 = 12 * HIDWORD(v219);
          do
          {
            if (v159 >= HIDWORD(v219))
            {
              __break(0xC471u);
              JUMPOUT(0x197B967BCLL);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v218 + v158), (uint64_t)a1, v131, v132, v133, v134, v135, v136);
            ++v159;
            v158 += 12;
          }
          while (v160 != v158);
        }
        *(_QWORD *)a2 = v228;
        *(_BYTE *)(a2 + 8) = v229;
        v228 = 0;
        v229 = -1;
        v161 = v218;
        if (&v220 != (int *)v218 && v218 != 0)
        {
          v218 = 0;
          LODWORD(v219) = 0;
          WTF::fastFree((unint64_t)v161, v130, v131, v132, v133, v134, v135, v136);
          if (v228)
          {
            v163 = v229;
            if (v229 != -1)
            {
              if (v229 > 15)
                v163 = -1;
              --*(_DWORD *)(v228 + 12 * v163 + 4784);
            }
          }
        }
        v164 = (char *)a1 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(int)v94];
        --*((_DWORD *)v164 + 1244);
        return 1;
      }
    }
    else
    {
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v228, a1, a3, a4, a5, a6, a7, a8);
    }
    v94 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)a1, a4, v102, v103, v104, v105, v106, v107);
    goto LABEL_112;
  }
  if (v57 >= v58)
  {
    __break(0xC471u);
    JUMPOUT(0x197B967D4);
  }
  if (*(_BYTE *)(*((_QWORD *)a1 + 499) + 24 * (int)v57 + 12))
    v59 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)a1, a4, a3, a4, a5, a6, a7, a8);
  else
    v59 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v218, a1, a3, a4, a5, a6, a7, a8);
  v66 = 0;
  v67 = (char *)a1 + 4968;
  v68 = (_DWORD *)((char *)a1 + 4976);
  v69 = 0x17u;
  v70 = -1;
  while (*v68)
  {
LABEL_80:
    ++v66;
    v68 += 3;
    if (v66 == 23)
    {
      v66 = v69;
      v72 = &v67[12 * v69];
      v73 = *(_DWORD *)v72;
      *(_QWORD *)v72 = 0xFFFFFFFF3FFFFFFFLL;
      v68 = v72 + 8;
      goto LABEL_104;
    }
  }
  v71 = *(v68 - 1);
  if (v71 != -1)
  {
    if (v71 < v70)
    {
      v69 = v66;
      v70 = *(v68 - 1);
    }
    goto LABEL_80;
  }
  v73 = *(v68 - 2);
  *((_QWORD *)v68 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_104:
  *v68 = 1;
  v108 = JSC::FPRInfo::toRegister::registerForIndex[v66];
  if (v73 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)a1, v73, v60, v61, v62, v63, v64, v65);
  if (v59 == -1)
    v59 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)a1, a4, v60, v61, v62, v63, v64, v65);
  JSC::DFG::compileClampDoubleToByte((uint64_t)a1, (char)v219, v59, v108, v62, v63, v64, v65);
  *(_QWORD *)a2 = v218;
  *(_BYTE *)(a2 + 8) = v219;
  v109 = &v67[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v108]];
  --*((_DWORD *)v109 + 2);
  v110 = &v67[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v59]];
  --*((_DWORD *)v110 + 2);
  return 1;
}

unsigned int *JSC::DFG::compileClampDoubleToByte(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v99[2];
  char v100;
  __int16 v101;
  char v102;
  unsigned int v103[2];
  char v104;
  __int16 v105;
  char v106;
  unsigned int v107[3];
  unsigned int v108[3];
  int v109;

  JSC::MacroAssemblerARM64::moveZeroToDouble((_DWORD *)a1, a4, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branchDouble((_DWORD *)a1, 13, a3, a4, v12, v13, v14, v15, (uint64_t)v108);
  JSC::MacroAssemblerARM64::loadDouble(a1, (uint64_t)&JSC::DFG::compileClampDoubleToByte(JSC::DFG::JITCompiler &,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)::byteMax, a4, v16, v17, v18, v19, v20);
  JSC::MacroAssemblerARM64::branchDouble((_DWORD *)a1, 12, a3, a4, v21, v22, v23, v24, (uint64_t)v107);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), a4 | (32 * (_DWORD)a3) | 0x1E644000, v25, v26, v27, v28, v29, v30);
  JSC::MacroAssemblerARM64::truncateDoubleToInt32((_DWORD *)a1, a4, a2, v31, v32, v33, v34, v35);
  JSC::ARM64Assembler::label((_DWORD *)(a1 + 32), v36, v37, v38, v39, v40, v41, v42, v99);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 335544320, v43, v44, v45, v46, v47, v48);
  if (*(_BYTE *)(a1 + 328))
    v55 = 69;
  else
    v55 = 65;
  v103[0] = v99[0];
  v103[1] = 0;
  v104 = v55;
  v105 = 15;
  v106 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v108, a1, v49, v50, v51, v52, v53, v54);
  JSC::MacroAssemblerARM64::xor64((_DWORD *)a1, a2, a2, v56, v57, v58, v59, v60);
  JSC::ARM64Assembler::label((_DWORD *)(a1 + 32), v61, v62, v63, v64, v65, v66, v67, &v109);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 335544320, v68, v69, v70, v71, v72, v73);
  if (*(_BYTE *)(a1 + 328))
    v80 = 69;
  else
    v80 = 65;
  v99[0] = v109;
  v99[1] = 0;
  v100 = v80;
  v101 = 15;
  v102 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v107, a1, v74, v75, v76, v77, v78, v79);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)0xFF, a2, v81, v82, v83, v84, v85);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v103, a1, v86, v87, v88, v89, v90, v91);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v99, a1, v92, v93, v94, v95, v96, v97);
}

uint64_t JSC::AssemblyHelpers::boxDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v10;
  JSC::AssemblerBuffer *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v8 = a4;
  v10 = a2;
  v12 = (JSC::AssemblerBuffer *)(a1 + 14);
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = a3 & 0x1F | (32 * v10) | 0x9E660000;
  v14 = a1[50];
  v15 = v14 + 4;
  a1[50] = v14 + 4;
  if (v8)
  {
    if ((_DWORD)a3 == 31)
    {
      if ((v14 + 8) > a1[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
        v15 = a1[50];
      }
      *(_DWORD *)(*((_QWORD *)a1 + 7) + v15) = -885300225;
      a1[50] += 4;
    }
    else
    {
      JSC::AssemblerBuffer::putInt(v12, a3 & 0x1F | (32 * (a3 & 0x1F)) | 0xCB1B0000, a3, a4, a5, a6, a7, a8);
    }
  }
  else
  {
    JSC::MacroAssemblerARM64::sub64((uint64_t)a1, a3, 0xFFFE000000000000, a3, a5, a6, a7, a8);
  }
  return a3;
}

uint64_t JSC::DFG::SpeculativeJIT::getIntTypedArrayStoreOperandForAtomics(JSC::DFG::SpeculativeJIT *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t IntTypedArrayStoreOperand;
  WTF *v16;
  WTF *v19;
  uint64_t v20;
  _BYTE v21[24];

  v19 = (WTF *)v21;
  v20 = 2;
  IntTypedArrayStoreOperand = JSC::DFG::SpeculativeJIT::getIntTypedArrayStoreOperand(a1, a2, a3, a4, (uint64_t)&v19, 0, a7, a8);
  v16 = v19;
  if (v21 != (_BYTE *)v19 && v19 != 0)
  {
    v19 = 0;
    LODWORD(v20) = 0;
    WTF::fastFree((unint64_t)v16, v8, v9, v10, v11, v12, v13, v14);
  }
  return IntTypedArrayStoreOperand;
}

void JSC::MacroAssemblerARM64::store8(uint64_t a1, char a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int *v18;
  JSC::AssemblerBuffer *v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;

  v9 = a3;
  v12 = HIDWORD(a3);
  if (!HIDWORD(a3))
  {
    v15 = (unsigned __int16)JSC::MacroAssemblerARM64::tryFoldBaseAndOffsetPart(a1, a3, a4, a4, a5, a6, a7, a8);
    if (v15 >= 0x100)
    {
      if (BYTE4(a4) < 3u)
      {
        v25 = (32 * (char)v15) | a2 & 0x1F | 0x38201800;
        v27 = *(_DWORD *)(a1 + 200);
        v26 = (unsigned int *)(a1 + 200);
        v21 = v27;
        v22 = v25 | *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a4) << 56) >> 54)) | (((v9 >> 8) & 0x1F) << 16);
        v19 = (JSC::AssemblerBuffer *)(v26 - 36);
        v23 = v27 + 4;
        v24 = *(v26 - 2);
        v18 = v26;
        goto LABEL_8;
      }
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x197B96CA4);
    }
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_15;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (int)a4, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  if (BYTE4(a4) >= 3u)
  {
    __break(0xC471u);
    JUMPOUT(0x197B96CD4);
  }
  v16 = *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a4) << 56) >> 54)) | (((v9 >> 8) & 0x1F) << 16) | ((v12 & 7) << 10) | 0x8B200231;
  v18 = (unsigned int *)(a1 + 200);
  v17 = *(_DWORD *)(a1 + 200);
  v19 = (JSC::AssemblerBuffer *)(a1 + 56);
  if (v17 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v13, v14, a4, a5, a6, a7, a8);
    v17 = *v18;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v17) = v16;
  v20 = *(_DWORD *)(a1 + 200);
  v21 = v20 + 4;
  *(_DWORD *)(a1 + 200) = v20 + 4;
  v22 = (32 * (char)v9) | a2 & 0x1F | 0x38316800;
  v23 = v20 + 8;
  v24 = *(_DWORD *)(a1 + 192);
LABEL_8:
  if (v23 > v24)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v19, v13, v14, a4, a5, a6, a7, a8);
    v21 = *v18;
  }
  *(_DWORD *)(*(_QWORD *)v19 + v21) = v22;
  *v18 += 4;
}

void JSC::MacroAssemblerARM64::store16(uint64_t a1, char a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int *v18;
  JSC::AssemblerBuffer *v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;

  v9 = a3;
  v12 = HIDWORD(a3);
  if (HIDWORD(a3) <= 1)
  {
    v15 = (unsigned __int16)JSC::MacroAssemblerARM64::tryFoldBaseAndOffsetPart(a1, a3, a4, a4, a5, a6, a7, a8);
    if (v15 >= 0x100)
    {
      if (BYTE4(a4) < 3u)
      {
        v25 = (32 * (char)v15) | a2 & 0x1F | 0x78200800;
        v27 = *(_DWORD *)(a1 + 200);
        v26 = (unsigned int *)(a1 + 200);
        v21 = v27;
        v22 = v25 | *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a4) << 56) >> 54)) | (((v9 >> 8) & 0x1F) << 16) | (((_DWORD)v12 == 1) << 12);
        v19 = (JSC::AssemblerBuffer *)(v26 - 36);
        v23 = v27 + 4;
        v24 = *(v26 - 2);
        v18 = v26;
        goto LABEL_10;
      }
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x197B96EC4);
    }
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_15;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (int)a4, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  if (BYTE4(a4) >= 3u)
  {
    __break(0xC471u);
    JUMPOUT(0x197B96EF4);
  }
  v16 = *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a4) << 56) >> 54)) | (((v9 >> 8) & 0x1F) << 16) | ((v12 & 7) << 10) | 0x8B200231;
  v18 = (unsigned int *)(a1 + 200);
  v17 = *(_DWORD *)(a1 + 200);
  v19 = (JSC::AssemblerBuffer *)(a1 + 56);
  if (v17 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v13, v14, a4, a5, a6, a7, a8);
    v17 = *v18;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v17) = v16;
  v20 = *(_DWORD *)(a1 + 200);
  v21 = v20 + 4;
  *(_DWORD *)(a1 + 200) = v20 + 4;
  v22 = (32 * (char)v9) | a2 & 0x1F | 0x78316800;
  v23 = v20 + 8;
  v24 = *(_DWORD *)(a1 + 192);
LABEL_10:
  if (v23 > v24)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v19, v13, v14, a4, a5, a6, a7, a8);
    v21 = *v18;
  }
  *(_DWORD *)(*(_QWORD *)v19 + v21) = v22;
  *v18 += 4;
}

void JSC::MacroAssemblerARM64::store32(uint64_t a1, char a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int *v18;
  JSC::AssemblerBuffer *v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;

  v9 = a3;
  v12 = HIDWORD(a3);
  if ((a3 & 0xFFFFFFFD00000000) == 0)
  {
    v15 = (unsigned __int16)JSC::MacroAssemblerARM64::tryFoldBaseAndOffsetPart(a1, a3, a4, a4, a5, a6, a7, a8);
    if (v15 >= 0x100)
    {
      if (BYTE4(a4) < 3u)
      {
        v25 = (32 * (char)v15) | a2 & 0x1F | 0xB8200800;
        v27 = *(_DWORD *)(a1 + 200);
        v26 = (unsigned int *)(a1 + 200);
        v21 = v27;
        v22 = v25 | *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a4) << 56) >> 54)) | (((v9 >> 8) & 0x1F) << 16) | (((_DWORD)v12 != 0) << 12);
        v19 = (JSC::AssemblerBuffer *)(v26 - 36);
        v23 = v27 + 4;
        v24 = *(v26 - 2);
        v18 = v26;
        goto LABEL_8;
      }
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x197B970E4);
    }
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_15;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (int)a4, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  if (BYTE4(a4) >= 3u)
  {
    __break(0xC471u);
    JUMPOUT(0x197B97114);
  }
  v16 = *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a4) << 56) >> 54)) | (((v9 >> 8) & 0x1F) << 16) | ((v12 & 7) << 10) | 0x8B200231;
  v18 = (unsigned int *)(a1 + 200);
  v17 = *(_DWORD *)(a1 + 200);
  v19 = (JSC::AssemblerBuffer *)(a1 + 56);
  if (v17 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v13, v14, a4, a5, a6, a7, a8);
    v17 = *v18;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v17) = v16;
  v20 = *(_DWORD *)(a1 + 200);
  v21 = v20 + 4;
  *(_DWORD *)(a1 + 200) = v20 + 4;
  v22 = (32 * (char)v9) | a2 & 0x1F | 0xB8316800;
  v23 = v20 + 8;
  v24 = *(_DWORD *)(a1 + 192);
LABEL_8:
  if (v23 > v24)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v19, v13, v14, a4, a5, a6, a7, a8);
    v21 = *v18;
  }
  *(_DWORD *)(*(_QWORD *)v19 + v21) = v22;
  *v18 += 4;
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(uint64_t *a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9)
{
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  _BYTE *v22;
  WTF *v23;
  WTF *v24;
  unsigned int v25;
  int v26;
  _BYTE *v27;
  WTF *v28;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  WTF *v39;
  WTF *v42;
  unsigned int v43;
  _BYTE v44[24];
  WTF *v45;
  unsigned int v46;
  unsigned int v47;
  _BYTE v48[24];
  WTF *v49;
  unsigned int v50;
  unsigned int v51;
  _BYTE v52[24];

  v15 = *((unsigned int *)a2 + 3);
  v42 = (WTF *)v44;
  v43 = v15;
  if (v15 < 3)
  {
    v16 = v44;
    if (!(_DWORD)v15)
      goto LABEL_8;
  }
  else
  {
    if (v15 >= 0x15555556)
      goto LABEL_36;
    v16 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v15));
    v42 = (WTF *)v16;
    LODWORD(v15) = *((_DWORD *)a2 + 3);
    if (!(_DWORD)v15)
      goto LABEL_8;
  }
  v17 = *a2;
  v18 = *a2 + 12 * v15;
  do
  {
    *(_DWORD *)v16 = *(_DWORD *)v17;
    *(_QWORD *)(v16 + 4) = *(_QWORD *)(v17 + 4);
    v17 += 12;
    v16 += 12;
  }
  while (v17 != v18);
LABEL_8:
  v19 = WTF::fastMalloc((WTF *)0xC0);
  v20 = v43;
  v45 = (WTF *)v48;
  v46 = 2;
  v47 = v43;
  if (v43 < 3)
  {
    v21 = a7;
    v22 = v48;
  }
  else
  {
    if (v43 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197B97424);
    }
    v21 = a7;
    v22 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v43));
    v46 = 12 * v43 / 0xC;
    v45 = (WTF *)v22;
    v20 = v43;
  }
  if (v20)
  {
    v23 = v42;
    v24 = (WTF *)((char *)v42 + 12 * v20);
    do
    {
      *(_DWORD *)v22 = *(_DWORD *)v23;
      *(_QWORD *)(v22 + 4) = *(_QWORD *)((char *)v23 + 4);
      v23 = (WTF *)((char *)v23 + 12);
      v22 += 12;
    }
    while (v23 != v24);
  }
  v25 = v47;
  v49 = (WTF *)v52;
  v50 = 2;
  v51 = v47;
  if (v47 < 3)
  {
    v27 = v52;
    if (!v47)
      goto LABEL_22;
LABEL_20:
    v28 = v45;
    v29 = (WTF *)((char *)v45 + 12 * v25);
    do
    {
      *(_DWORD *)v27 = *(_DWORD *)v28;
      *(_QWORD *)(v27 + 4) = *(_QWORD *)((char *)v28 + 4);
      v28 = (WTF *)((char *)v28 + 12);
      v27 += 12;
    }
    while (v28 != v29);
    goto LABEL_22;
  }
  if (v47 >= 0x15555556)
  {
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x197B9741CLL);
  }
  v26 = 12 * v47;
  v27 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v47));
  v50 = (v26 & 0xFFFFFFFC) / 0xC;
  v49 = (WTF *)v27;
  v25 = v47;
  if (v47)
    goto LABEL_20;
LABEL_22:
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::NoResultTag>::CallSlowPathGenerator(v19, (uint64_t *)&v49, a3, 0, 0, 0);
  v37 = v49;
  if (v52 != (_BYTE *)v49 && v49 != 0)
  {
    v49 = 0;
    v50 = 0;
    WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
  }
  *(_QWORD *)v19 = &off_1E3573240;
  *(_QWORD *)(v19 + 160) = a4;
  *(_QWORD *)(v19 + 168) = a5;
  *(_QWORD *)(v19 + 176) = a6;
  *(_BYTE *)(v19 + 184) = v21;
  *(_BYTE *)(v19 + 185) = a8;
  *(_BYTE *)(v19 + 186) = a9;
  *a1 = v19;
  v39 = v45;
  if (v48 != (_BYTE *)v45 && v45)
  {
    v45 = 0;
    v46 = 0;
    WTF::fastFree((unint64_t)v39, v30, v31, v32, v33, v34, v35, v36);
  }
  if (v44 != (_BYTE *)v42)
  {
    if (v42)
      WTF::fastFree((unint64_t)v42, v30, v31, v32, v33, v34, v35, v36);
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compileGetByValOnFloatTypedArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char v12;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  int v38;
  char v39;
  char v40;
  char v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t result;
  int v70;
  uint64_t v71;
  _DWORD *v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  char v79;
  uint64_t v80;
  char v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  int v98;
  uint64_t v99;
  _BYTE v100[12];
  uint64_t v101;
  char v102;
  char v103;
  uint64_t v104;
  char v105;

  v8 = *(_QWORD *)(a1 + 3960);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_DWORD *)(v8 + 164);
  if (v10 <= v9)
    goto LABEL_97;
  v12 = a3;
  v15 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * *(_QWORD *)(a2 + 24));
  if ((v15 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_81;
  v16 = ~*(_DWORD *)((v15 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v16 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B97B40);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v16 + 12))
  {
    v97 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * *(_QWORD *)(a2 + 24)), a3, a4, a5, a6, a7, a8);
    v8 = *(_QWORD *)(a1 + 3960);
    LODWORD(v9) = *(_DWORD *)(a2 + 24);
    v10 = *(_DWORD *)(v8 + 164);
  }
  else
  {
LABEL_81:
    v97 = -1;
  }
  if (v10 <= (int)v9 + 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197B97B48);
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * (v9 + 1));
  v18 = ~*(_DWORD *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v18 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B97B50);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v18 + 12))
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(a1, v17, a3, a4, a5, a6, a7, a8);
    v20 = v19;
    v8 = *(_QWORD *)(a1 + 3960);
    LODWORD(v9) = *(_DWORD *)(a2 + 24);
    v10 = *(_DWORD *)(v8 + 164);
  }
  else
  {
    v20 = -1;
  }
  v21 = v9 + 2;
  if (v10 <= v21)
  {
    __break(0xC471u);
    JUMPOUT(0x197B97B58);
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * v21);
  v23 = ~*(_DWORD *)((v22 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v23 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B97B60);
  }
  v96 = v12;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v23 + 12))
    v24 = JSC::DFG::SpeculativeJIT::fillStorage(a1, v22, a3, a4, a5, a6, a7, a8);
  else
    v24 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v104, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
  v31 = 0;
  v95 = a1 + 4968;
  v32 = (_DWORD *)(a1 + 4976);
  v33 = 0x17u;
  v34 = -1;
  while (*v32)
  {
LABEL_19:
    ++v31;
    v32 += 3;
    if (v31 == 23)
    {
      v31 = v33;
      v36 = (unsigned int *)(v95 + 12 * v33);
      v37 = *v36;
      *(_QWORD *)v36 = 0xFFFFFFFF3FFFFFFFLL;
      v32 = v36 + 2;
      goto LABEL_22;
    }
  }
  v35 = *(v32 - 1);
  if (v35 != -1)
  {
    if (v35 < v34)
    {
      v33 = v31;
      v34 = *(v32 - 1);
    }
    goto LABEL_19;
  }
  v37 = *(v32 - 2);
  *((_QWORD *)v32 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_22:
  *v32 = 1;
  v38 = JSC::FPRInfo::toRegister::registerForIndex[v31];
  if (v37 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill(a1, v37, v25, v26, v27, v28, v29, v30);
  v39 = -1;
  if (v97 == -1)
    v97 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v15, v25, v26, v27, v28, v29, v30);
  if (v20 == -1)
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(a1, v17, v25, v26, v27, v28, v29, v30);
    v20 = v40;
  }
  if (v24 == 0xFF)
    v24 = JSC::DFG::SpeculativeJIT::fillStorage(a1, v22, v25, v26, v27, v28, v29, v30);
  v41 = v105;
  LOBYTE(v101) = 0;
  v103 = 0;
  v42 = *(unsigned __int16 *)(a2 + 18);
  if (v42 == 146)
    v43 = *(_DWORD *)(a2 + 80);
  else
    v43 = *(_DWORD *)(a2 + 72);
  if ((v43 & 0x40000000) != 0)
  {
    *(_QWORD *)v100 = a1;
    std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v101, (JSC::DFG::SpeculativeJIT **)v100, v25, v26, v27, v28, v29, v30);
    if (v103)
    {
      v39 = v102;
      v42 = *(unsigned __int16 *)(a2 + 18);
      goto LABEL_33;
    }
    __break(1u);
LABEL_97:
    __break(0xC471u);
    JUMPOUT(0x197B97B38);
  }
LABEL_33:
  if (v42 == 146)
    v44 = *(_DWORD *)(a2 + 80);
  else
    v44 = *(_DWORD *)(a2 + 72);
  if (BYTE2(v44) - 3 <= 1)
    v45 = 16;
  else
    v45 = 4;
  v46 = (*(uint64_t (**)(_QWORD, uint64_t))a4)(*(_QWORD *)(a4 + 8), v45);
  v52 = v46;
  if (*(_WORD *)(a2 + 18) == 146)
    v53 = *(_DWORD *)(a2 + 80);
  else
    v53 = *(_DWORD *)(a2 + 72);
  if (BYTE2(v53) - 3 <= 1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, 10, (char)v46, v47, v48, v49, v50, v51);
  JSC::DFG::SpeculativeJIT::jumpForTypedArrayOutOfBounds(a1, a2, v97, v20, v41, v39, v50, v51, (uint64_t)v100);
  if (*(_DWORD *)v100 != -1)
  {
    v58 = *(_WORD *)(a2 + 18) == 146 ? *(_DWORD *)(a2 + 80) : *(_DWORD *)(a2 + 72);
    if (BYTE2(v58) - 3 >= 2)
    {
      v98 = *(_DWORD *)v100;
      v99 = *(_QWORD *)&v100[4];
      JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0xFuLL, (JSC::DFG::Node *)0xFF80000000, 0, &v98);
      *(_DWORD *)v100 = -1;
      *(_QWORD *)&v100[4] = 0xFF000F4100000000;
    }
  }
  if ((v96 - 4) > 7u)
    LOBYTE(v59) = 0;
  else
    v59 = qword_199123EC8[(char)(v96 - 4)];
  v60 = 1 << v59;
  if (v60 != 4)
  {
    if (v60 == 8)
    {
      JSC::MacroAssemblerARM64::loadDouble(a1, v24 | ((unint64_t)v20 << 8) | 0x300000000, 0x200000000uLL, (char)v38, v54, v55, v56, v57);
      goto LABEL_53;
    }
    goto LABEL_103;
  }
  JSC::MacroAssemblerARM64::loadFloat(a1, v24 | ((unint64_t)v20 << 8) | 0x200000000, 0x200000000uLL, (char)v38, v54, v55, v56, v57);
  v68 = *(_DWORD *)(a1 + 200);
  if (v68 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v61, v62, v63, v64, v65, v66, v67);
    v68 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v68) = v38 | (32 * v38) | 0x1E22C000;
  *(_DWORD *)(a1 + 200) += 4;
LABEL_53:
  if ((v52 & 0xFF00) != 0x1000)
  {
    result = (uint64_t)JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1, (JSC::DFG::Node *)a2, v62, v63, v64, v65, v66, v67);
    v70 = *(_DWORD *)(a2 + 48);
    v71 = a1 + 4968;
    v72 = (_DWORD *)(v95 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v38]);
    *v72 = v70;
    v72[1] = 6;
    v73 = ~v70;
    if (v73 < *(unsigned int *)(a1 + 4004))
    {
      v74 = *(_QWORD *)(a1 + 3992) + 24 * (int)v73;
      v75 = *(_DWORD *)(a2 + 52);
      *(_QWORD *)v74 = a2;
      *(_DWORD *)(v74 + 8) = v75;
      *(_BYTE *)(v74 + 17) = v38;
      *(_DWORD *)(v74 + 12) = 4;
      *(_BYTE *)(v74 + 16) = 0;
      goto LABEL_56;
    }
LABEL_103:
    __break(0xC471u);
    JUMPOUT(0x197B97AECLL);
  }
  v83 = (char)v38;
  JSC::AssemblyHelpers::purifyNaN(a1, v83, v62, v63, v64, v65, v66, v67);
  v84 = (char)v52;
  JSC::AssemblyHelpers::boxDouble((_DWORD *)a1, v83, v84, 1, v85, v86, v87, v88);
  if (*(_DWORD *)v100 != -1)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v100, a1, v89, v90, v91, v92, v93, v94);
  result = JSC::DFG::SpeculativeJIT::jsValueResult(a1, v84, a2, 16, 0, v92, v93, v94);
  v71 = a1 + 4968;
LABEL_56:
  if (v103)
  {
    if (v101)
    {
      v76 = v102;
      if (v102 != -1)
      {
        if (v102 > 15)
          v76 = -1;
        --*(_DWORD *)(v101 + 12 * v76 + 4784);
      }
    }
  }
  v77 = v71 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v38];
  --*(_DWORD *)(v77 + 8);
  if (v104)
  {
    v78 = v105;
    if (v105 != -1)
    {
      if (v105 > 15)
        v78 = -1;
      --*(_DWORD *)(v104 + 12 * v78 + 4784);
    }
  }
  if (v24 != 0xFF)
  {
    if ((char)v24 > 15)
      v79 = -1;
    else
      v79 = v24;
    --*(_DWORD *)(a1 + 12 * v79 + 4784);
  }
  v80 = a1 + 4776;
  if (v20 > 15)
    v81 = -1;
  else
    v81 = v20;
  --*(_DWORD *)(v80 + 12 * v81 + 8);
  if ((v15 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v82 = v97;
    if (v97 > 15)
      v82 = -1;
    --*(_DWORD *)(v80 + 12 * v82 + 8);
  }
  return result;
}

void JSC::MacroAssemblerARM64::loadFloat(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int *v18;
  JSC::AssemblerBuffer *v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;

  v8 = a4;
  v10 = a2;
  v12 = HIDWORD(a2);
  if ((a2 & 0xFFFFFFFD00000000) == 0)
  {
    v15 = (unsigned __int16)JSC::MacroAssemblerARM64::tryFoldBaseAndOffsetPart(a1, a2, a3, a4, a5, a6, a7, a8);
    if (v15 >= 0x100)
    {
      if (BYTE4(a3) < 3u)
      {
        v25 = v8 | (32 * (char)v15) | 0xBC600800;
        v27 = *(_DWORD *)(a1 + 200);
        v26 = (unsigned int *)(a1 + 200);
        v21 = v27;
        v22 = v25 | *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a3) << 56) >> 54)) | (((v10 >> 8) & 0x1F) << 16) | (((_DWORD)v12 != 0) << 12);
        v19 = (JSC::AssemblerBuffer *)(v26 - 36);
        v23 = v27 + 4;
        v24 = *(v26 - 2);
        v18 = v26;
        goto LABEL_8;
      }
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x197B97D38);
    }
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_15;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (int)a3, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  if (BYTE4(a3) >= 3u)
  {
    __break(0xC471u);
    JUMPOUT(0x197B97D68);
  }
  v16 = *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a3) << 56) >> 54)) | (((v10 >> 8) & 0x1F) << 16) | ((v12 & 7) << 10) | 0x8B200231;
  v18 = (unsigned int *)(a1 + 200);
  v17 = *(_DWORD *)(a1 + 200);
  v19 = (JSC::AssemblerBuffer *)(a1 + 56);
  if (v17 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v13, v14, a4, a5, a6, a7, a8);
    v17 = *v18;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v17) = v16;
  v20 = *(_DWORD *)(a1 + 200);
  v21 = v20 + 4;
  *(_DWORD *)(a1 + 200) = v20 + 4;
  v22 = v8 | (32 * (char)v10) | 0xBC716800;
  v23 = v20 + 8;
  v24 = *(_DWORD *)(a1 + 192);
LABEL_8:
  if (v23 > v24)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v19, v13, v14, a4, a5, a6, a7, a8);
    v21 = *v18;
  }
  *(_DWORD *)(*(_QWORD *)v19 + v21) = v22;
  *v18 += 4;
}

void JSC::MacroAssemblerARM64::convertFloatToDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0x1E22C000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::loadDouble(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v10;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int *v19;
  JSC::AssemblerBuffer *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v8 = a4;
  v10 = a2;
  v12 = HIDWORD(a2);
  if (HIDWORD(a2) == 3 || HIDWORD(a2) == 0)
  {
    v16 = (unsigned __int16)JSC::MacroAssemblerARM64::tryFoldBaseAndOffsetPart(a1, a2, a3, a4, a5, a6, a7, a8);
    if (v16 >= 0x100)
    {
      if (BYTE4(a3) < 3u)
      {
        v26 = v8 | (32 * (char)v16) | 0xFC600800;
        v28 = *(_DWORD *)(a1 + 200);
        v27 = (unsigned int *)(a1 + 200);
        v22 = v28;
        v23 = v26 | *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a3) << 56) >> 54)) | (((v10 >> 8) & 0x1F) << 16) | (((_DWORD)v12 != 0) << 12);
        v20 = (JSC::AssemblerBuffer *)(v27 - 36);
        v24 = v28 + 4;
        v25 = *(v27 - 2);
        v19 = v27;
        goto LABEL_14;
      }
LABEL_19:
      __break(0xC471u);
      JUMPOUT(0x197B97FD0);
    }
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_19;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (int)a3, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  if (BYTE4(a3) >= 3u)
  {
    __break(0xC471u);
    JUMPOUT(0x197B98000);
  }
  v17 = *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a3) << 56) >> 54)) | (((v10 >> 8) & 0x1F) << 16) | ((v12 & 7) << 10) | 0x8B200231;
  v19 = (unsigned int *)(a1 + 200);
  v18 = *(_DWORD *)(a1 + 200);
  v20 = (JSC::AssemblerBuffer *)(a1 + 56);
  if (v18 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v14, v15, a4, a5, a6, a7, a8);
    v18 = *v19;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = v17;
  v21 = *(_DWORD *)(a1 + 200);
  v22 = v21 + 4;
  *(_DWORD *)(a1 + 200) = v21 + 4;
  v23 = v8 | (32 * (char)v10) | 0xFC716800;
  v24 = v21 + 8;
  v25 = *(_DWORD *)(a1 + 192);
LABEL_14:
  if (v24 > v25)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v20, v14, v15, a4, a5, a6, a7, a8);
    v22 = *v19;
  }
  *(_DWORD *)(*(_QWORD *)v20 + v22) = v23;
  *v19 += 4;
}

void JSC::MacroAssemblerARM64::moveDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0x1E604000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::convertDoubleToFloat(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0x1E624000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::storeFloat(uint64_t a1, int a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int *v18;
  JSC::AssemblerBuffer *v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;

  v9 = a3;
  v12 = HIDWORD(a3);
  if ((a3 & 0xFFFFFFFD00000000) == 0)
  {
    v15 = (unsigned __int16)JSC::MacroAssemblerARM64::tryFoldBaseAndOffsetPart(a1, a3, a4, a4, a5, a6, a7, a8);
    if (v15 >= 0x100)
    {
      if (BYTE4(a4) < 3u)
      {
        v25 = a2 | (32 * (char)v15) | 0xBC200800;
        v27 = *(_DWORD *)(a1 + 200);
        v26 = (unsigned int *)(a1 + 200);
        v21 = v27;
        v22 = v25 | *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a4) << 56) >> 54)) | (((v9 >> 8) & 0x1F) << 16) | (((_DWORD)v12 != 0) << 12);
        v19 = (JSC::AssemblerBuffer *)(v26 - 36);
        v23 = v27 + 4;
        v24 = *(v26 - 2);
        v18 = v26;
        goto LABEL_8;
      }
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x197B982D8);
    }
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_15;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (int)a4, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  if (BYTE4(a4) >= 3u)
  {
    __break(0xC471u);
    JUMPOUT(0x197B98308);
  }
  v16 = *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a4) << 56) >> 54)) | (((v9 >> 8) & 0x1F) << 16) | ((v12 & 7) << 10) | 0x8B200231;
  v18 = (unsigned int *)(a1 + 200);
  v17 = *(_DWORD *)(a1 + 200);
  v19 = (JSC::AssemblerBuffer *)(a1 + 56);
  if (v17 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v13, v14, a4, a5, a6, a7, a8);
    v17 = *v18;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v17) = v16;
  v20 = *(_DWORD *)(a1 + 200);
  v21 = v20 + 4;
  *(_DWORD *)(a1 + 200) = v20 + 4;
  v22 = a2 | (32 * (char)v9) | 0xBC316800;
  v23 = v20 + 8;
  v24 = *(_DWORD *)(a1 + 192);
LABEL_8:
  if (v23 > v24)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v19, v13, v14, a4, a5, a6, a7, a8);
    v21 = *v18;
  }
  *(_DWORD *)(*(_QWORD *)v19 + v21) = v22;
  *v18 += 4;
}

uint64_t JSC::DFG::SpeculativeJIT::compileGetByValForObjectWithString(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  JSC::DFG::Node *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  JSC::DFG::Node *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  int v60;

  v8 = *(_QWORD *)(a1 + 3960);
  v9 = a2[3];
  v10 = *(_DWORD *)(v8 + 164);
  if (v10 <= v9)
    goto LABEL_38;
  v14 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * a2[3]);
  v15 = v14 & 0xFF00FFFFFFFFFFFFLL;
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_30;
  v16 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v16 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B985E4);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v16 + 12))
  {
    v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * a2[3]), a3, a4, a5, a6, a7, a8);
    v8 = *(_QWORD *)(a1 + 3960);
    LODWORD(v9) = *((_DWORD *)a2 + 6);
    v10 = *(_DWORD *)(v8 + 164);
  }
  else
  {
LABEL_30:
    v17 = -1;
  }
  v18 = v9 + 1;
  if (v10 <= v18)
  {
    __break(0xC471u);
    JUMPOUT(0x197B985ECLL);
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * v18);
  if ((v19 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_31;
  v20 = ~*(_DWORD *)((v19 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v20 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B985F4);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v20 + 12))
    v21 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v19, a3, a4, a5, a6, a7, a8);
  else
LABEL_31:
    v21 = -1;
  if (v17 == -1)
    v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v14, a3, a4, a5, a6, a7, a8);
  if (v21 == -1)
    v21 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v19, a3, a4, a5, a6, a7, a8);
  v22 = (*(uint64_t (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), 16);
  v28 = *(_QWORD *)(a1 + 3960);
  if (*(_DWORD *)(v28 + 164) <= a2[3])
  {
    __break(0xC471u);
    JUMPOUT(0x197B985FCLL);
  }
  v29 = v22;
  JSC::DFG::SpeculativeJIT::speculateObject(a1, *(_QWORD *)(*(_QWORD *)(v28 + 152) + 8 * a2[3]), v17, v23, v24, v25, v26, v27);
  v35 = *(_QWORD *)(a1 + 3960);
  v36 = *((_DWORD *)a2 + 6) + 1;
  if (*(_DWORD *)(v35 + 164) <= v36)
  {
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x197B985DCLL);
  }
  JSC::DFG::SpeculativeJIT::speculateString(a1, *(_QWORD *)(*(_QWORD *)(v35 + 152) + 8 * v36), v21, v30, v31, v32, v33, v34);
  if ((v29 & 0xFF0000) != 0)
  {
    JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)a1, v37, (uint64_t)v38, v39, v40, v41, v42, v43);
    v50 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, (JSC::DFG::JITCompiler *)a2, v44, v45, v46, v47, v48, v49);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v60, (unsigned __int8 *)a1, (uint64_t)operationGetByValObjectString, v29, v50, v51, v17, v21);
  }
  else
  {
    v58 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, (JSC::DFG::JITCompiler *)a2, v38, v39, v40, v41, v42, v43);
    JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v60, a1, (uint64_t)operationGetByValObjectString, v29, v58, v59, v17, v21);
  }
  result = JSC::DFG::SpeculativeJIT::jsValueResult(a1, (char)v29, (uint64_t)a2, 16, 0, v52, v53, v54);
  if ((v19 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v21 > 15)
      v56 = -1;
    else
      v56 = v21;
    --*(_DWORD *)(a1 + 12 * v56 + 4784);
  }
  if (v15)
  {
    if (v17 > 15)
      v57 = -1;
    else
      v57 = v17;
    --*(_DWORD *)(a1 + 12 * v57 + 4784);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(int *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint8x8_t v30;
  __int32 v31;
  uint8x8_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  char v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  _BYTE *v47;
  int v48;
  unsigned __int8 *v49;
  char *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned __int8 *v54;
  int v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int *v86;
  JSC::AssemblerBuffer *v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  int64_t v95;
  char *v96;
  int v97;
  char v98;
  char *v99;
  unint64_t *v100;
  void *__dst;
  int v102;
  unsigned int v103;
  _WORD v104[4];
  unint64_t v105;
  unsigned int *v106;

  v8 = a8;
  v9 = a7;
  v16 = 1;
  v100 = (unint64_t *)(a2 + 5752);
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, 1, a2 + 5752, a4, 0xFFFFFFFFLL, 0xFFFFFFFFLL, a7, a8);
  __dst = v104;
  v102 = 2;
  if (v9 == 1)
  {
    if (v8 == 2)
      goto LABEL_61;
    v16 = 0;
  }
  else
  {
    v104[0] = v9 | 0x100;
    v103 = 1;
    if (v8 == 2)
      goto LABEL_7;
  }
  v104[v16++] = v8 | 0x200;
  v103 = v16;
  do
  {
LABEL_7:
    v24 = 0;
    v25 = 0;
    v26 = (char *)__dst;
    v27 = v16;
    do
    {
      if ((*((_BYTE *)__dst + v24 + 1) & 0x40) != 0)
        goto LABEL_99;
      v25 |= 1 << *((_BYTE *)__dst + v24 + 1);
      v24 += 2;
    }
    while (2 * v16 != v24);
    v28 = 0;
    do
    {
      v29 = *((_BYTE *)__dst + v28) & 0x7F;
      if (v29 >= 0x40)
        goto LABEL_99;
      v25 &= ~(1 << v29);
      v28 += 2;
    }
    while (2 * v16 != v28);
    v30 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
    v30.i16[0] = vaddlv_u8(v30);
    v31 = v30.i32[0];
    v32 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v25));
    v32.i16[0] = vaddlv_u8(v32);
    if (v32.i32[0] + v31)
    {
      v33 = 0;
      if (v16 <= 1)
        v34 = 1;
      else
        v34 = v16;
      v35 = 2 * v34;
      while (1)
      {
        v36 = *((unsigned __int8 *)__dst + v33 + 1);
        if ((v36 & 0x7Fu) >= 0x40)
          goto LABEL_99;
        if (((v25 >> (v36 & 0x7F)) & 1) != 0)
          break;
        v33 += 2;
        if (v35 == v33)
          goto LABEL_57;
      }
      v37 = *((unsigned __int8 *)__dst + v33);
      if (v37 == v36)
      {
LABEL_55:
        memmove(&v26[v33], &v26[v33 + 2], 2 * v27 - v33 - 2);
        v16 = v103 - 1;
        goto LABEL_56;
      }
      if ((char)v37 == 63)
      {
        v38 = *(_DWORD *)(a2 + 200);
        v39 = *(_DWORD *)(a2 + 192);
        if (v36 != 31)
        {
          v41 = v36 & 0x1F | 0xD2800000;
          goto LABEL_52;
        }
      }
      else
      {
        v38 = *(_DWORD *)(a2 + 200);
        v39 = *(_DWORD *)(a2 + 192);
        v40 = (char)v36 == 31 || (char)v37 == 31;
        if (!v40)
        {
          v41 = v36 & 0xFFE0FFFF | ((v37 & 0x1F) << 16) | 0xAA0003E0;
LABEL_52:
          if (v38 + 4 > v39)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v17, v18, v19, v20, v21, v22, v23);
            v38 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = v41;
          *(_DWORD *)(a2 + 200) += 4;
          v26 = (char *)__dst;
          v27 = v103;
          goto LABEL_55;
        }
      }
      v41 = (char)v36 | (32 * (char)v37) | 0x91000000;
      goto LABEL_52;
    }
    v42 = *(_BYTE *)__dst;
    v98 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v98, v19, v20, v21, v22, v23);
    memmove(__dst, (char *)__dst + 2, 2 * v103 - 2);
    v43 = v103 - 1;
    v40 = v103 == 1;
    v103 = v43;
    v44 = (unsigned __int8 *)__dst;
    v45 = (unsigned __int8 *)__dst + 2 * v43;
    if (v40)
    {
      v52 = 0;
      v53 = 0;
      v48 = 0;
      v17 = v45;
    }
    else
    {
      v46 = 2 * v43;
      v47 = __dst;
      while (*v47 != v98)
      {
        v47 += 2;
        v46 -= 2;
        if (!v46)
          goto LABEL_35;
      }
      *v47 = v42;
LABEL_35:
      v48 = 0;
      v49 = v44;
      v17 = v45;
      v50 = (char *)v45;
      do
      {
        if (*v44 == v44[1])
        {
          v51 = v44;
          if (v50 != (char *)__dst + 2 * v103)
          {
            v97 = v48;
            v99 = (char *)v45;
            if (v44 == v17)
            {
              v51 = (unsigned __int8 *)v50;
            }
            else
            {
              v95 = v49 - v17;
              v96 = v50;
              memmove(v50, v17, v49 - v17);
              v51 = (unsigned __int8 *)&v96[v95];
            }
            v45 = (unsigned __int8 *)v99;
            v48 = v97;
          }
          v17 = v44 + 2;
          ++v48;
          v50 = (char *)v51;
        }
        v44 += 2;
        v49 += 2;
      }
      while (v44 < v45);
      v44 = (unsigned __int8 *)__dst;
      v52 = v103;
      v53 = v103;
      v45 = (unsigned __int8 *)v50;
    }
    v54 = &v44[2 * v52];
    if (v17 != v54)
    {
      v55 = v48;
      memmove(v45, v17, v54 - v17);
      v48 = v55;
      v53 = v103;
    }
    v16 = v53 - v48;
LABEL_56:
    v103 = v16;
LABEL_57:
    ;
  }
  while (v16);
  v56 = __dst;
  if (v104 != __dst && __dst)
  {
    __dst = 0;
    v102 = 0;
    WTF::fastFree((unint64_t)v56, v17, v18, v19, v20, v21, v22, v23);
  }
LABEL_61:
  if ((_DWORD)a5 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, a6, 0, v19, v20, v21, v22, v23);
  else
    JSC::MacroAssemblerARM64::load64(a2, (a5 << 35) + 0x380000001ALL, 0, v19, v20, v21, v22, v23);
  JSC::DFG::SpeculativeJIT::appendCall(a2, a3, v57, v58, v59, v60, v61, v62, a1);
  __dst = (void *)2;
  v106 = 0;
  a3 = *(_QWORD *)(a2 + 3960);
  v67 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v67 & 1) != 0)
  {
    v90 = *(_QWORD *)(v67 & 0xFFFFFFFF8);
    if ((v67 & 2) != 0
      || ((v91 = *(unsigned int *)((v67 & 0xFFFFFFFF8) + 8), (_DWORD)v91 != 0x3FFFFFFF)
        ? (v92 = (_DWORD)v91 == -1)
        : (v92 = 1),
          v92))
    {
      v93 = 2;
    }
    else if (v91 >> 28)
    {
      v94 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v94 = v90;
      *(_DWORD *)(v94 + 8) = v91;
      v93 = 1;
      v90 = v94;
    }
    else
    {
      v93 = *(_QWORD *)(v67 & 0xFFFFFFFF8);
      v90 = v91 << 36;
    }
    v67 = v90 | v93;
  }
  v105 = v67;
  LODWORD(a3) = JSC::DFG::Graph::willCatchExceptionInMachineFrame(a3, &v105, (uint64_t *)&__dst, &v106, v63, v64, v65, v66);
  if ((v105 & 1) != 0 && (v105 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v105 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  if ((a3 & 1) == 0)
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v18, v19, v20, v21, v22, v23);
    LOBYTE(v68) = 0;
    goto LABEL_67;
  }
  v76 = *(unsigned int *)(a2 + 5764);
  if ((_DWORD)v76)
  {
    v77 = 0;
    v78 = 16 * v76;
    v79 = (char *)(*(_QWORD *)(a2 + 5752) + 2);
    while (1)
    {
      v81 = *v79;
      v79 += 16;
      v80 = v81;
      if ((v81 & 0x40) != 0)
        goto LABEL_99;
      v77 |= 1 << v80;
      v78 -= 16;
      if (!v78)
        goto LABEL_93;
    }
  }
  v77 = 0;
LABEL_93:
  if ((a4 & 0x40) != 0)
  {
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
  LOBYTE(v68) = 1;
  v82 = v77 | (1 << a4);
  if ((v82 & 2) == 0)
    goto LABEL_67;
  v83 = (unsigned __int16)~(_WORD)v82 & 0xFFFE;
  if (!v83)
  {
LABEL_100:
    LOBYTE(v68) = -1;
    goto LABEL_67;
  }
  v68 = __clz(__rbit64(v83));
  if (v68 != 1)
  {
    if (v68 == 31)
    {
      v86 = (unsigned int *)(a2 + 200);
      v85 = *(_DWORD *)(a2 + 200);
      v87 = (JSC::AssemblerBuffer *)(a2 + 56);
      v88 = v85 + 4;
      v89 = *(_DWORD *)(a2 + 192);
      v84 = -1862270913;
    }
    else
    {
      v84 = v68 | 0xAA0103E0;
      v86 = (unsigned int *)(a2 + 200);
      v85 = *(_DWORD *)(a2 + 200);
      v87 = (JSC::AssemblerBuffer *)(a2 + 56);
      v88 = v85 + 4;
      v89 = *(_DWORD *)(a2 + 192);
    }
    if (v88 > v89)
    {
      JSC::AssemblerBuffer::outOfLineGrow(v87, (uint64_t)v17, v18, v19, v20, v21, v22, v23);
      v85 = *v86;
    }
    *(_DWORD *)(*(_QWORD *)v87 + v85) = v84;
    *v86 += 4;
  }
LABEL_67:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  if (a4)
  {
    if (a4 == 31)
      v69 = -1862270945;
    else
      v69 = a4 & 0x1F | 0xAA0003E0;
    v71 = (unsigned int *)(a2 + 200);
    v70 = *(_DWORD *)(a2 + 200);
    if (v70 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v17, v18, v19, v20, v21, v22, v23);
      v70 = *v71;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v70) = v69;
    *v71 += 4;
  }
  v72 = *(_DWORD *)(a2 + 5764);
  if (v72)
  {
    v73 = v72 - 1;
    v74 = 16 * (v72 - 1);
    while (*(_DWORD *)(a2 + 5764) > v73)
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a2 + 5752) + v74, v18, v19, v20, v21, v22, v23);
      v74 -= 16;
      if (--v73 == -1)
        goto LABEL_79;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_79:
    *(_BYTE *)(a2 + 5768) = 0;
    if (*(_DWORD *)(a2 + 5760))
    {
      if (*(_DWORD *)(a2 + 5764))
        *(_DWORD *)(a2 + 5764) = 0;
      v75 = *v100;
      if (*v100)
      {
        *(_QWORD *)(a2 + 5752) = 0;
        *(_DWORD *)(a2 + 5760) = 0;
        WTF::fastFree(v75, v17, v18, v19, v20, v21, v22, v23);
      }
    }
    if ((_DWORD)a3)
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v68, v18, v19, v20, v21, v22, v23);
  }
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  __int16 *v38;
  int v39;
  char *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned __int8 *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  int64_t v61;
  unsigned __int8 *v62;
  int v63;
  unsigned __int8 v64;
  unsigned __int8 *v65;
  JSC::AssemblerBuffer *v66;
  unsigned int v67;
  unsigned int v68;
  __int16 v69;
  _BYTE v70[6];

  v10 = (JSC::AssemblerBuffer *)a4;
  v11 = a3;
  v12 = (uint64_t)a2;
  if ((_DWORD)a7 == 1)
  {
    if ((_DWORD)a8 == 2)
      goto LABEL_61;
    v14 = 0;
    goto LABEL_6;
  }
  v69 = a7 | 0x100;
  v14 = 1;
  v67 = 1;
  if ((_DWORD)a8 != 2)
  {
LABEL_6:
    *(_WORD *)&v70[2 * v14++ - 2] = a8 | 0x200;
    v67 = v14;
  }
  v66 = (JSC::AssemblerBuffer *)(a2 + 56);
  do
  {
    v15 = 0;
    v16 = 0;
    v17 = v14;
    do
    {
      if ((v70[v15 - 1] & 0x40) != 0)
      {
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      v16 |= 1 << v70[v15 - 1];
      v15 += 2;
    }
    while (2 * v14 != v15);
    v18 = 0;
    do
    {
      v19 = v70[v18 - 2] & 0x7F;
      if (v19 >= 0x40)
        goto LABEL_70;
      v16 &= ~(1 << v19);
      v18 += 2;
    }
    while (2 * v14 != v18);
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v20.i16[0] = vaddlv_u8(v20);
    v21 = v20.i32[0];
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.i32[0] + v21)
    {
      v23 = 0;
      if (v14 <= 1)
        v24 = 1;
      else
        v24 = v14;
      v25 = 2 * v24;
      while (1)
      {
        v26 = v70[v23 - 1];
        if ((v26 & 0x7Fu) >= 0x40)
          goto LABEL_70;
        if (((v16 >> (v26 & 0x7F)) & 1) != 0)
          break;
        v23 += 2;
        if (v25 == v23)
          goto LABEL_58;
      }
      v27 = v70[v23 - 2];
      if (v27 != v26)
      {
        v28 = (char)v27;
        if ((char)v27 == 63)
        {
          v29 = *(_DWORD *)(v12 + 200);
          v30 = *(_DWORD *)(v12 + 192);
          if (v26 == 31)
            goto LABEL_52;
          v32 = v26 & 0x1F | 0xD2800000;
        }
        else
        {
          v29 = *(_DWORD *)(v12 + 200);
          v30 = *(_DWORD *)(v12 + 192);
          v31 = (char)v26 == 31 || v28 == 31;
          if (!v31)
          {
            v32 = v26 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v32 = (char)v26 | (32 * v28) | 0x91000000;
        }
LABEL_53:
        if (v29 + 4 > v30)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v66, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v29 = *(_DWORD *)(v12 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v12 + 56) + v29) = v32;
        *(_DWORD *)(v12 + 200) += 4;
        v17 = v67;
      }
      memmove(&v70[v23 - 2], &v70[v23], 2 * v17 - v23 - 2);
      v14 = v67 - 1;
      goto LABEL_57;
    }
    v33 = v69;
    v64 = HIBYTE(v69);
    JSC::MacroAssemblerARM64::swap(v12, (char)v69, SHIBYTE(v69), a4, a5, a6, a7, a8);
    memmove(&v69, v70, 2 * v67 - 2);
    v34 = v67 - 1;
    v31 = v67 == 1;
    v68 = v34;
    v35 = (unsigned __int8 *)&v69;
    v36 = &v70[2 * v34 - 2];
    if (v31)
    {
      v43 = 0;
      v44 = 0;
      v39 = 0;
      a2 = v36;
    }
    else
    {
      v37 = 2 * v34;
      v38 = &v69;
      while (*(unsigned __int8 *)v38 != v64)
      {
        ++v38;
        v37 -= 2;
        if (!v37)
          goto LABEL_36;
      }
      *(_BYTE *)v38 = v33;
LABEL_36:
      v39 = 0;
      v40 = (char *)&v69;
      a2 = v36;
      v41 = v36;
      do
      {
        if (*v35 == v35[1])
        {
          v42 = v35;
          if (v41 != &v70[2 * v68 - 2])
          {
            v63 = v39;
            v65 = v36;
            if (v35 == a2)
            {
              v42 = v41;
            }
            else
            {
              v61 = v40 - (char *)a2;
              v62 = v41;
              memmove(v41, a2, v40 - (char *)a2);
              v42 = &v62[v61];
            }
            v36 = v65;
            v39 = v63;
          }
          a2 = v35 + 2;
          ++v39;
          v41 = v42;
        }
        v35 += 2;
        v40 += 2;
      }
      while (v35 < v36);
      v43 = v68;
      v44 = v68;
      v36 = v41;
    }
    v45 = &v70[2 * v43 - 2];
    if (a2 != v45)
    {
      v46 = v39;
      memmove(v36, a2, v45 - a2);
      v39 = v46;
      v44 = v68;
    }
    v14 = v44 - v39;
LABEL_57:
    v67 = v14;
LABEL_58:
    ;
  }
  while (v14);
LABEL_61:
  if ((_DWORD)a5 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a6, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v12, (a5 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v12, v11, v47, v48, v49, v50, v51, v52, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v12, 1, v53, v54, v55, v56, v57, v58);
  if ((_BYTE)v10)
  {
    if (v10 == 31)
      LODWORD(v11) = -1862270945;
    else
      LODWORD(v11) = v10 & 0x1F | 0xAA0003E0;
    v60 = *(_DWORD *)(v12 + 200);
    v12 += 200;
    v59 = v60;
    v10 = (JSC::AssemblerBuffer *)(v12 - 144);
    if (v60 + 4 > *(_DWORD *)(v12 - 8))
    {
LABEL_71:
      JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v59 = *(_DWORD *)v12;
    }
    *(_DWORD *)(*(_QWORD *)v10 + v59) = v11;
    *(_DWORD *)v12 += 4;
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compileGetByValForObjectWithSymbol(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  JSC::DFG::Node *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  JSC::DFG::Node *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  int v60;

  v8 = *(_QWORD *)(a1 + 3960);
  v9 = a2[3];
  v10 = *(_DWORD *)(v8 + 164);
  if (v10 <= v9)
    goto LABEL_38;
  v14 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * a2[3]);
  v15 = v14 & 0xFF00FFFFFFFFFFFFLL;
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_30;
  v16 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v16 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B99488);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v16 + 12))
  {
    v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * a2[3]), a3, a4, a5, a6, a7, a8);
    v8 = *(_QWORD *)(a1 + 3960);
    LODWORD(v9) = *((_DWORD *)a2 + 6);
    v10 = *(_DWORD *)(v8 + 164);
  }
  else
  {
LABEL_30:
    v17 = -1;
  }
  v18 = v9 + 1;
  if (v10 <= v18)
  {
    __break(0xC471u);
    JUMPOUT(0x197B99490);
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * v18);
  if ((v19 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_31;
  v20 = ~*(_DWORD *)((v19 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v20 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197B99498);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v20 + 12))
    v21 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v19, a3, a4, a5, a6, a7, a8);
  else
LABEL_31:
    v21 = -1;
  if (v17 == -1)
    v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v14, a3, a4, a5, a6, a7, a8);
  if (v21 == -1)
    v21 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v19, a3, a4, a5, a6, a7, a8);
  v22 = (*(uint64_t (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), 16);
  v28 = *(_QWORD *)(a1 + 3960);
  if (*(_DWORD *)(v28 + 164) <= a2[3])
  {
    __break(0xC471u);
    JUMPOUT(0x197B994A0);
  }
  v29 = v22;
  JSC::DFG::SpeculativeJIT::speculateObject(a1, *(_QWORD *)(*(_QWORD *)(v28 + 152) + 8 * a2[3]), v17, v23, v24, v25, v26, v27);
  v35 = *(_QWORD *)(a1 + 3960);
  v36 = *((_DWORD *)a2 + 6) + 1;
  if (*(_DWORD *)(v35 + 164) <= v36)
  {
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x197B99480);
  }
  JSC::DFG::SpeculativeJIT::speculateSymbol(a1, *(_QWORD *)(*(_QWORD *)(v35 + 152) + 8 * v36), v21, v30, v31, v32, v33, v34);
  if ((v29 & 0xFF0000) != 0)
  {
    JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)a1, v37, (uint64_t)v38, v39, v40, v41, v42, v43);
    v50 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, (JSC::DFG::JITCompiler *)a2, v44, v45, v46, v47, v48, v49);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v60, (unsigned __int8 *)a1, (uint64_t)operationGetByValObjectSymbol, v29, v50, v51, v17, v21);
  }
  else
  {
    v58 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, (JSC::DFG::JITCompiler *)a2, v38, v39, v40, v41, v42, v43);
    JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v60, a1, (uint64_t)operationGetByValObjectSymbol, v29, v58, v59, v17, v21);
  }
  result = JSC::DFG::SpeculativeJIT::jsValueResult(a1, (char)v29, (uint64_t)a2, 16, 0, v52, v53, v54);
  if ((v19 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v21 > 15)
      v56 = -1;
    else
      v56 = v21;
    --*(_DWORD *)(a1 + 12 * v56 + 4784);
  }
  if (v15)
  {
    if (v17 > 15)
      v57 = -1;
    else
      v57 = v17;
    --*(_DWORD *)(a1 + 12 * v57 + 4784);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileGetPrivateName(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  char v26;
  char *v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;

  v10 = *((_QWORD *)this + 495);
  v11 = *((_DWORD *)a2 + 14);
  v12 = (_QWORD *)((char *)a2 + 24);
  v13 = (_QWORD *)((char *)a2 + 24);
  if ((v11 & 0x10) != 0)
  {
    if (*(_DWORD *)(v10 + 164) <= *v12)
    {
      __break(0xC471u);
      JUMPOUT(0x197B9984CLL);
    }
    v13 = (_QWORD *)(*(_QWORD *)(v10 + 152) + 8 * *v12);
  }
  v14 = (*v13 >> 50) & 0x3FLL;
  if ((_DWORD)v14 == 8)
  {
    v15 = (unint64_t *)((char *)a2 + 24);
    if ((v11 & 0x10) != 0)
    {
      if (*(_DWORD *)(v10 + 164) <= *v12)
      {
        __break(0xC471u);
        JUMPOUT(0x197B99854);
      }
      v15 = (unint64_t *)(*(_QWORD *)(v10 + 152) + 8 * *v12);
    }
    v16 = *v15;
    v17 = *v15 & 0xFF00FFFFFFFFFFFFLL;
    if (!v17)
      goto LABEL_30;
    v18 = ~*(_DWORD *)((*v15 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v18 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197B9983CLL);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v18 + 12))
    {
      v19 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v16, a3, a4, a5, a6, a7, a8);
      v10 = *((_QWORD *)this + 495);
      v11 = *((_DWORD *)a2 + 14);
    }
    else
    {
LABEL_30:
      v19 = -1;
    }
    if ((v11 & 0x10) != 0)
    {
      v28 = *(_DWORD *)v12 + 1;
      if (*(_DWORD *)(v10 + 164) <= v28)
      {
        __break(0xC471u);
        JUMPOUT(0x197B9985CLL);
      }
      v20 = (unint64_t *)(*(_QWORD *)(v10 + 152) + 8 * v28);
    }
    else
    {
      v20 = (unint64_t *)((char *)a2 + 32);
    }
    v21 = *v20;
    v22 = *v20 & 0xFF00FFFFFFFFFFFFLL;
    if (!v22)
      goto LABEL_31;
    v23 = ~*(_DWORD *)((*v20 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v23 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197B99844);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v23 + 12))
      v24 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v21, a3, a4, a5, a6, a7, a8);
    else
LABEL_31:
      v24 = -1;
    if (v19 == -1)
      v19 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v16, a3, a4, a5, a6, a7, a8);
    if (v24 == -1)
      v24 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v21, a3, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::compileGetPrivateNameByVal(this, (uint64_t)a2, v19, v24, a5, a6, a7, a8);
    if (v22)
    {
      if (v24 > 15)
        v25 = -1;
      else
        v25 = v24;
      --*((_DWORD *)this + 3 * v25 + 1196);
    }
    if (v17)
    {
      if (v19 > 15)
        v26 = -1;
      else
        v26 = v19;
      v27 = (char *)this + 12 * v26;
LABEL_28:
      --*((_DWORD *)v27 + 1196);
      return;
    }
    return;
  }
  if ((_DWORD)v14)
  {
    JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v10, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x117A, "void JSC::DFG::SpeculativeJIT::compileGetPrivateName(Node *)", "Bad use kind");
    __break(0xC471u);
    goto LABEL_66;
  }
  v29 = (uint64_t *)((char *)a2 + 24);
  if ((v11 & 0x10) != 0)
  {
    if (*(_DWORD *)(v10 + 164) <= *v12)
    {
      __break(0xC471u);
      JUMPOUT(0x197B99864);
    }
    v29 = (uint64_t *)(*(_QWORD *)(v10 + 152) + 8 * *v12);
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v51, (uint64_t)this, *v29, 0, a5, a6, a7, a8);
  if ((*((_BYTE *)a2 + 56) & 0x10) == 0)
  {
    v35 = (unint64_t *)((char *)a2 + 32);
    goto LABEL_42;
  }
  v46 = *((_QWORD *)this + 495);
  v47 = *(_DWORD *)v12 + 1;
  if (*(_DWORD *)(v46 + 164) <= v47)
  {
    __break(0xC471u);
LABEL_66:
    JUMPOUT(0x197B997F0);
  }
  v35 = (unint64_t *)(*(_QWORD *)(v46 + 152) + 8 * v47);
LABEL_42:
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v48, (uint64_t)this, *v35, v30, v31, v32, v33, v34);
  v42 = v53;
  if (v53 == 255)
  {
    v42 = JSC::DFG::SpeculativeJIT::fillJSValue(v51, v52, v36, v37, v38, v39, v40, v41);
    v53 = v42;
  }
  v43 = v50;
  if (v50 == 255)
  {
    v43 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v48, v49, v36, v37, v38, v39, v40, v41);
    v50 = v43;
  }
  JSC::DFG::SpeculativeJIT::compileGetPrivateNameByVal(this, (uint64_t)a2, v42, v43, v38, v39, v40, v41);
  if ((v49 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v44 = (char)v50;
    if ((char)v50 > 15)
      v44 = -1;
    --*(_DWORD *)(v48 + 12 * v44 + 4784);
  }
  if ((v52 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v45 = (char)v53;
    if ((char)v53 > 15)
      v45 = -1;
    v27 = (char *)(v51 + 12 * v45);
    goto LABEL_28;
  }
}

void JSC::DFG::SpeculativeJIT::compileGetPrivateNameByVal(JSC::DFG::SpeculativeJIT *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char *v30;
  uint64_t i;
  uint64_t v32;
  char *v33;
  uint64_t j;
  uint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unint64_t v78;
  _DWORD *v79;
  _QWORD *v80;
  unsigned int v81;
  int v82;
  _BYTE *v83;
  WTF *v84;
  WTF *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int *v95;
  _DWORD *v96;
  unsigned int v97;
  int v98;
  _BYTE *v99;
  WTF *v100;
  WTF *v101;
  char v102;
  char v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  _BYTE *v107;
  _BYTE *v108;
  _BYTE *v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  __int16 v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  WTF *v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  BOOL v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned __int8 v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD v160[6];
  uint64_t v161;
  __int128 v162;
  char v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  __int16 v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  _DWORD v173[3];
  WTF *v174;
  uint64_t v175;
  _BYTE v176[24];
  _QWORD v177[2];
  uint64_t v178;
  char v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  char v183;
  char v184;
  unsigned __int8 v185;
  _BYTE *v186;
  unsigned int v187;
  unsigned int v188;
  _BYTE v189[24];
  int v190;
  uint64_t v191;
  __int16 v192;
  WTF::StringImpl *(*v193)(uint64_t, uint64_t, uint64_t, const JSC::PropertyTable *, uint64_t, unint64_t, uint64_t, uint64_t);
  char *v194;
  uint64_t v195;
  char v196;
  unsigned __int8 v197;
  char v198;
  __int128 v199;
  _BYTE v200[4];
  int v201;
  uint64_t v202;
  uint64_t v203;
  __int16 v204;
  int v205;
  uint64_t v206;
  uint64_t v207;

  v157 = a3;
  v9 = (char *)a1;
  v185 = a4;
  v10 = *((_QWORD *)a1 + 495);
  if (*(_WORD *)(a2 + 18) != 142)
  {
    JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v10, (JSC::DFG::Node *)a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x1180, "void JSC::DFG::SpeculativeJIT::compileGetPrivateNameByVal(Node *, JSValueRegs, JSValueRegs)", "node->op() == GetPrivateName");
    __break(0xC471u);
    goto LABEL_157;
  }
  v11 = a2 + 24;
  if ((*(_BYTE *)(a2 + 56) & 0x10) != 0)
  {
    v138 = *(_DWORD *)v11 + 1;
    if (*(_DWORD *)(v10 + 164) <= v138)
    {
      __break(0xC471u);
      JUMPOUT(0x197B9A444);
    }
    v12 = (_QWORD *)(*(_QWORD *)(v10 + 152) + 8 * v138);
  }
  else
  {
    v12 = (_QWORD *)(a2 + 32);
  }
  if ((*v12 & 0xFC000000000000) == 0x64000000000000)
  {
    LOBYTE(v182) = 0;
    v184 = 0;
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v180, (JSC::DFG::SpeculativeJIT *)v9, a3, a4, a5, a6, a7, a8);
    v179 = -1;
    v19 = *((_QWORD *)v9 + 495);
    if (((*(_DWORD *)(*(_QWORD *)(v19 + 24) + 16) - 1) & 0xFFFFFFFD) == 0)
      goto LABEL_117;
  }
  else
  {
    v9 = "/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp";
    JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v10, (JSC::DFG::Node *)a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x1181, "void JSC::DFG::SpeculativeJIT::compileGetPrivateNameByVal(Node *, JSValueRegs, JSValueRegs)", "m_graph.child(node, 1).useKind() == SymbolUse");
    v13 = "void JSC::DFG::SpeculativeJIT::compileGetPrivateNameByVal(Node *, JSValueRegs, JSValueRegs)";
    v14 = 557;
    __break(0xC471u);
    do
    {
LABEL_116:
      __break(1u);
LABEL_117:
      *(_QWORD *)&v199 = v9;
      std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v182, (JSC::DFG::SpeculativeJIT **)&v199, (uint64_t)v13, v14, v15, v16, v17, v18);
    }
    while (!v184);
    v179 = v183;
    v19 = *((_QWORD *)v9 + 495);
  }
  v20 = v181;
  if ((*(_BYTE *)(a2 + 56) & 0x10) != 0)
  {
    v139 = *(_DWORD *)v11 + 1;
    if (*(_DWORD *)(v19 + 164) <= v139)
    {
      __break(0xC471u);
      JUMPOUT(0x197B9A44CLL);
    }
    v21 = (unint64_t *)(*(_QWORD *)(v19 + 152) + 8 * v139);
  }
  else
  {
    v21 = (unint64_t *)(a2 + 32);
  }
  JSC::DFG::SpeculativeJIT::speculateSymbol((uint64_t)v9, *v21, (uint64_t)v13, v14, v15, v16, v17, v18);
  v27 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v51 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
    if ((v27 & 2) != 0
      || ((v56 = *(unsigned int *)((v27 & 0xFFFFFFFF8) + 8), (_DWORD)v56 != 0x3FFFFFFF)
        ? (v147 = (_DWORD)v56 == -1)
        : (v147 = 1),
          v147))
    {
      v148 = 2;
    }
    else
    {
      if (v56 >> 28)
        goto LABEL_147;
      v148 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
      v51 = v56 << 36;
    }
    goto LABEL_128;
  }
  while (1)
  {
    v178 = v27;
    v28 = JSC::DFG::SpeculativeJIT::recordCallSiteAndGenerateExceptionHandlingOSRExitIfNeeded((JSC::DFG::SpeculativeJIT *)v9, (const JSC::CodeOrigin *)&v178, *((unsigned int *)v9 + 1411), v22, v23, v24, v25, v26);
    v29 = 0;
    v30 = v9 + 4776;
    for (i = 15; i != -1; --i)
    {
      if ((char)i <= 15)
        v32 = i;
      else
        v32 = 0xFFFFFFFFLL;
      if (*(_DWORD *)&v30[12 * v32 + 8] || *(_DWORD *)&v30[12 * v32] != 0x3FFFFFFF)
      {
        if ((i & 0x40) != 0)
          goto LABEL_116;
        v29 |= 1 << i;
      }
    }
    v33 = v9 + 4968;
    for (j = 0x16u; j != -1; --j)
    {
      v35 = JSC::FPRInfo::toRegister::registerForIndex[j];
      v36 = JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v35];
      if (*(_DWORD *)&v33[12 * v36 + 8] || *(_DWORD *)&v33[12 * v36] != 0x3FFFFFFF)
      {
        v37 = v35 + 32;
        if ((v37 & 0x40) != 0)
          goto LABEL_116;
        v29 |= 1 << v37;
      }
    }
    v177[0] = v29 | 0xFF00FFFC0000;
    v177[1] = 0;
    v174 = (WTF *)v176;
    v175 = 2;
    if ((*(_BYTE *)(a2 + 56) & 0x10) != 0)
    {
      v140 = *((_QWORD *)v9 + 495);
      if (*(_DWORD *)(v140 + 164) > *(_QWORD *)v11)
      {
        v11 = *(_QWORD *)(v140 + 152) + 8 * *(_QWORD *)v11;
        goto LABEL_24;
      }
      __break(0xC471u);
LABEL_157:
      JUMPOUT(0x197B9A254);
    }
LABEL_24:
    v38 = *((_QWORD *)v9 + 688);
    v39 = (_QWORD *)(v38 + 24);
    v40 = (_QWORD *)(v38 + 8);
    if ((*(_QWORD *)v11 & 1) != 0)
      v41 = v39;
    else
      v41 = v40;
    v42 = *v41 + 32 * *(unsigned int *)((*(_QWORD *)v11 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v43 = (void *)*((unsigned int *)v9 + 1396);
    if ((_DWORD)v43 != *(_DWORD *)(v42 + 20))
    {
      if ((*(_QWORD *)(v42 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v42, v43, (uint64_t)v13, v14, v15, v16, v17, v18);
      else
        *(_DWORD *)(v42 + 20) = (_DWORD)v43;
    }
    v44 = *(_QWORD *)(v42 + 8) & 0xFFFFD7FF00000008;
    if (v44)
    {
      JSC::AssemblyHelpers::branchIfNotCell((uint64_t)v9, v157, 1, v14, v15, v16, v17, v18, (uint64_t)v173);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v174, v173, v141, v142, v143, v144, v145, v146);
    }
    if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 44) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
    {
      v45 = *((_QWORD *)v9 + 46);
      if (v45)
      {
        v46 = (unsigned int *)(v45 + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 + 1, v46));
      }
      v11 = WTF::fastMalloc((WTF *)0x90);
      *(_QWORD *)v11 = 2;
      *(_DWORD *)(v11 + 96) = 0;
      *(_OWORD *)(v11 + 12) = 0u;
      *(_OWORD *)(v11 + 28) = 0u;
      *(_DWORD *)(v11 + 44) = 0;
      *(_QWORD *)(v11 + 64) = 0;
      *(_QWORD *)(v11 + 72) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_QWORD *)(v11 + 104) = 0;
      *(_QWORD *)(v11 + 112) = -1;
      *(_WORD *)(v11 + 120) = -1;
      *(_DWORD *)(v11 + 122) = 0x10000;
      *(_BYTE *)(v11 + 126) = 0;
      *(_BYTE *)(v11 + 127) = BYTE12(xmmword_1ECF4C260);
      *(_BYTE *)(v11 + 128) = 0;
      *(_WORD *)(v11 + 129) &= 0xFC00u;
      *(_QWORD *)(v11 + 136) = 0;
      *(_QWORD *)(v11 + 136) = *(_QWORD *)(v45 + 184);
      *(_QWORD *)(v45 + 184) = v11;
      v48 = (unsigned int *)(v45 + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (v49 == 1)
      {
        atomic_store(1u, (unsigned int *)(v45 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 32))(v45);
      }
      v50 = 0;
      v51 = 0;
    }
    else
    {
      v51 = *((unsigned int *)v9 + 968);
      v11 = WTF::SegmentedVector<JSC::DFG::UnlinkedStructureStubInfo,8ul>::alloc<>((uint64_t)(v9 + 3872));
      v50 = 2;
    }
    v170 = v11;
    LODWORD(v171) = v50;
    v172 = v51;
    v52 = *((_QWORD *)v9 + 42);
    v53 = v27;
    v54 = v171;
    if ((v27 & 1) != 0)
    {
      v51 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
      if ((v27 & 2) != 0
        || ((v149 = *(unsigned int *)((v27 & 0xFFFFFFFF8) + 8), (_DWORD)v149 != 0x3FFFFFFF)
          ? (v150 = (_DWORD)v149 == -1)
          : (v150 = 1),
            v150))
      {
        v151 = 2;
      }
      else if (v149 >> 28)
      {
        v156 = *((_QWORD *)v9 + 42);
        v153 = v171;
        v154 = WTF::fastMalloc((WTF *)0x10);
        v54 = v153;
        v52 = v156;
        *(_QWORD *)v154 = v51;
        *(_DWORD *)(v154 + 8) = v149;
        v151 = 1;
        v51 = v154;
      }
      else
      {
        v151 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
        v51 = v149 << 36;
      }
      v53 = v51 | v151;
    }
    v161 = v53;
    v55 = v28;
    LODWORD(v56) = v157;
    BYTE1(v155) = v179;
    LOBYTE(v155) = -1;
    JSC::JITGetByValGenerator::JITGetByValGenerator((uint64_t)&v162, v52, v11, v54, 0, &v161, v55, 27, (uint64_t)v177, v157, 0, v185, 0, v20, v155);
    if ((v161 & 1) != 0 && (v161 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v161 & 0xFFFFFFFF8, v57, v58, v59, v60, v61, v62, v63);
    if ((_DWORD)v171 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_147:
    v152 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v152 = v51;
    *(_DWORD *)(v152 + 8) = v56;
    v148 = 1;
    v51 = v152;
LABEL_128:
    v27 = v51 | v148;
  }
  *(_QWORD *)&v199 = v160;
  ((void (*)(__int128 *, uint64_t *))off_1E3572A20[v171])(&v199, &v170);
  v160[0] = v9;
  v160[1] = &v162;
  v160[2] = &v179;
  v160[3] = &v174;
  v160[4] = &v180;
  v160[5] = &v185;
  v70 = v172;
  if (v44)
  {
    if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 495) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
    {
      JSC::JITGetByValGenerator::generateFastPath((JSC::JITGetByValGenerator *)&v162, (JSC::CCallHelpers *)v9, v64, v65, v66, v67, v68, v69);
      v190 = v168;
      v76 = v169;
      v191 = v169;
      v77 = HIDWORD(v175);
      if (v168 != -1)
      {
        if (HIDWORD(v175) == (_DWORD)v175)
        {
          v78 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v174, (void *)(HIDWORD(v175) + 1), (unint64_t)&v190, v71, v72, v73, v74, v75);
          v79 = (_DWORD *)((char *)v174 + 12 * HIDWORD(v175));
          *v79 = *(_DWORD *)v78;
          v80 = v79 + 1;
          v76 = *(_QWORD *)(v78 + 4);
        }
        else
        {
          v96 = (_DWORD *)((char *)v174 + 12 * HIDWORD(v175));
          *v96 = v168;
          v80 = v96 + 1;
        }
        *v80 = v76;
        v77 = ++HIDWORD(v175);
      }
      v97 = v77;
      v186 = v189;
      v187 = 2;
      v188 = v77;
      if (v77 < 3)
      {
        v99 = v189;
      }
      else
      {
        if (v77 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197B9A42CLL);
        }
        v98 = 12 * v77;
        v99 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v77));
        v187 = (v98 & 0xFFFFFFFC) / 0xC;
        v186 = v99;
        v97 = HIDWORD(v175);
        v77 = HIDWORD(v175);
      }
      if (v77)
      {
        v100 = v174;
        v101 = (WTF *)((char *)v174 + 12 * v97);
        do
        {
          *(_DWORD *)v99 = *(_DWORD *)v100;
          *(_QWORD *)(v99 + 4) = *(_QWORD *)((char *)v100 + 4);
          v100 = (WTF *)((char *)v100 + 12);
          v99 += 12;
        }
        while (v100 != v101);
      }
      v102 = v181;
      v103 = v185;
      v104 = *((_QWORD *)&v162 + 1);
      v105 = v188;
      *(_QWORD *)&v199 = v200;
      DWORD2(v199) = 2;
      HIDWORD(v199) = v188;
      if (v188 < 3)
      {
        v107 = v200;
      }
      else
      {
        if (v188 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197B9A434);
        }
        v106 = 12 * v188;
        v107 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v188));
        DWORD2(v199) = (v106 & 0xFFFFFFFC) / 0xC;
        *(_QWORD *)&v199 = v107;
        v105 = v188;
      }
      if (v105)
      {
        v108 = v186;
        v109 = &v186[12 * v105];
        do
        {
          *(_DWORD *)v107 = *(_DWORD *)v108;
          *(_QWORD *)(v107 + 4) = *(_QWORD *)(v108 + 4);
          v108 += 12;
          v107 += 12;
        }
        while (v108 != v109);
      }
      v198 = v102;
      v197 = v157;
      v196 = v103;
      v194 = v9;
      v195 = v104;
      v193 = operationGetPrivateNameOptimize;
      v192 = 0;
      std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<long long> (*&)(long long,long long,JSC::StructureStubInfo *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::JSValueRegs&,JSC::CCallHelpers::CellValue&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&>(&v159, (uint64_t *)&v199, (_DWORD **)&v194, (uint64_t *)&v193, (unsigned __int8 *)&v192 + 1, (char *)&v192, &v198, (char *)&v197, &v196, &v195);
      v110 = v199;
      if (v200 != (_BYTE *)v199 && (_QWORD)v199)
      {
        *(_QWORD *)&v199 = 0;
        DWORD2(v199) = 0;
        WTF::fastFree(v110, v86, v87, v88, v89, v90, v91, v92);
      }
      v93 = (unint64_t)v186;
      if (v189 != v186 && v186)
      {
        v95 = &v187;
        v186 = 0;
LABEL_79:
        *v95 = 0;
        WTF::fastFree(v93, v86, v87, v88, v89, v90, v91, v92);
      }
    }
    else
    {
      JSC::JITInlineCacheGenerator::generateDFGDataICFastPath((uint64_t)&v162, (uint64_t)v9, v172, v179, v66, v67, v68, v69);
      v81 = HIDWORD(v175);
      *(_QWORD *)&v199 = v200;
      DWORD2(v199) = 2;
      HIDWORD(v199) = HIDWORD(v175);
      if (HIDWORD(v175) < 3)
      {
        v83 = v200;
      }
      else
      {
        if (HIDWORD(v175) >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197B9A43CLL);
        }
        v82 = 12 * HIDWORD(v175);
        v83 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v175)));
        DWORD2(v199) = (v82 & 0xFFFFFFFC) / 0xC;
        *(_QWORD *)&v199 = v83;
        v81 = HIDWORD(v175);
      }
      if (v81)
      {
        v84 = v174;
        v85 = (WTF *)((char *)v174 + 12 * v81);
        do
        {
          *(_DWORD *)v83 = *(_DWORD *)v84;
          *(_QWORD *)(v83 + 4) = *(_QWORD *)((char *)v84 + 4);
          v84 = (WTF *)((char *)v84 + 12);
          v83 += 12;
        }
        while (v84 != v85);
      }
      JSC::DFG::slowPathICCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>(&v159, (uint64_t *)&v199, v9, v70, v179, v179 | 0x3000000000, v181, v157, v185, v179);
      v93 = v199;
      if (v200 != (_BYTE *)v199 && (_QWORD)v199 != 0)
      {
        v95 = (unsigned int *)&v199 + 2;
        *(_QWORD *)&v199 = 0;
        goto LABEL_79;
      }
    }
  }
  else
  {
    JSC::DFG::SpeculativeJIT::compileGetPrivateNameByVal(JSC::DFG::Node *,JSC::JSValueRegs,JSC::JSValueRegs)::$_1::operator()<JSC::CCallHelpers::CellValue,JSC::StructureStubInfoIndex>(&v159, (uint64_t)v160, v157, v172, v66, v67, v68, v69);
  }
  v111 = v159;
  v199 = v162;
  v200[0] = v163;
  v112 = v164;
  v113 = v165;
  v201 = v164;
  v202 = v165;
  v114 = HIDWORD(v165);
  v115 = v166;
  v203 = v166;
  v116 = HIDWORD(v166);
  v117 = v167;
  v204 = v167;
  v118 = v168;
  v205 = v168;
  v119 = v169;
  v206 = v169;
  v207 = v159;
  v120 = *((unsigned int *)v9 + 249);
  if ((_DWORD)v120 == *((_DWORD *)v9 + 248))
  {
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITGetByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::InlineCacheWrapper<JSC::JITGetByValGenerator>>((uint64_t)(v9 + 984), (unint64_t)&v199);
  }
  else
  {
    v121 = *((_QWORD *)v9 + 123) + (v120 << 6);
    v122 = v162;
    *(_BYTE *)(v121 + 16) = v163;
    *(_OWORD *)v121 = v122;
    *(_DWORD *)(v121 + 20) = v112;
    *(_DWORD *)(v121 + 24) = v113;
    *(_DWORD *)(v121 + 28) = v114;
    *(_DWORD *)(v121 + 32) = v115;
    *(_DWORD *)(v121 + 36) = v116;
    *(_WORD *)(v121 + 40) = v117;
    *(_DWORD *)(v121 + 44) = v118;
    *(_QWORD *)(v121 + 48) = v119;
    *(_QWORD *)(v121 + 56) = v111;
    ++*((_DWORD *)v9 + 249);
  }
  v158 = v111;
  v123 = v9 + 5656;
  v124 = *((unsigned int *)v9 + 1417);
  if ((_DWORD)v124 == *((_DWORD *)v9 + 1416))
  {
    v126 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v123, v124 + 1, (unint64_t)&v158);
    v124 = *((unsigned int *)v9 + 1417);
    v125 = (uint64_t *)(*((_QWORD *)v9 + 707) + 8 * v124);
    v111 = *v126;
  }
  else
  {
    v125 = (uint64_t *)(*v123 + 8 * v124);
    v126 = &v158;
  }
  *v126 = 0;
  *v125 = v111;
  *((_DWORD *)v9 + 1417) = v124 + 1;
  v127 = v158;
  v158 = 0;
  if (v127)
    (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
  JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)v9, (char)v181, a2, 16, 0, v90, v91, v92);
  v135 = v174;
  if (v176 != (_BYTE *)v174 && v174)
  {
    v174 = 0;
    LODWORD(v175) = 0;
    WTF::fastFree((unint64_t)v135, v128, v129, v130, v131, v132, v133, v134);
  }
  if ((v27 & 1) != 0 && (v27 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v27 & 0xFFFFFFFF8, v128, v129, v130, v131, v132, v133, v134);
  if (v180)
  {
    v136 = (char)v181;
    if ((char)v181 != -1)
    {
      if ((char)v181 > 15)
        v136 = -1;
      --*(_DWORD *)(v180 + 12 * v136 + 4784);
    }
  }
  if (v184)
  {
    if (v182)
    {
      v137 = v183;
      if (v183 != -1)
      {
        if (v183 > 15)
          v137 = -1;
        --*(_DWORD *)(v182 + 12 * v137 + 4784);
      }
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculateSymbol(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 v26;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = (_QWORD *)(v11 + 24);
  v13 = (_QWORD *)(v11 + 8);
  if ((a2 & 1) != 0)
    v13 = v12;
  v14 = *v13 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v15 = (void *)*(unsigned int *)(v10 + 88);
  if ((_DWORD)v15 != *(_DWORD *)(v14 + 20))
  {
    if ((*(_QWORD *)(v14 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v14, v15, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v14 + 20) = (_DWORD)v15;
  }
  if ((*(_QWORD *)(v14 + 8) & 0xFFFFFFFFBFFFFFFFLL) != 0)
  {
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v24, a1, a2, a4, a5, a6, a7, a8);
    v22 = v26;
    if (v26 == 255)
    {
      v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v24, v25, v16, v17, v18, v19, v20, v21);
      v26 = v22;
    }
    JSC::DFG::SpeculativeJIT::speculateSymbol(a1, a2, (char)v22, v17, v18, v19, v20, v21);
    if ((v25 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v23 = (char)v26;
      if ((char)v26 > 15)
        v23 = -1;
      --*(_DWORD *)(v24 + 12 * v23 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::compileGetPrivateNameByVal(JSC::DFG::Node *,JSC::JSValueRegs,JSC::JSValueRegs)::$_1::operator()<JSC::CCallHelpers::CellValue,JSC::StructureStubInfoIndex>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  JSC::CCallHelpers *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  _QWORD *v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  _BYTE *v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  unsigned int v39;
  _BYTE *v40;
  WTF *v41;
  WTF *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned __int8 v57;
  unsigned int v58;
  _BYTE *v59;
  WTF *v60;
  WTF *v61;
  WTF *v62;
  WTF *v63;
  unsigned int v64;
  unsigned int v65;
  _BYTE v66[28];
  int v67;
  uint64_t v68;
  WTF *v69;
  unsigned int v70;
  unsigned int v71;
  _BYTE v72[24];
  WTF *v73;
  unsigned int v74;
  unsigned int v75;
  _BYTE v76[29];
  char v77;
  __int16 v78;
  WTF::StringImpl *(*v79)(uint64_t, uint64_t, uint64_t, const JSC::PropertyTable *, uint64_t, unint64_t, uint64_t, uint64_t);
  char v80;
  JSC::CCallHelpers *v81;
  unsigned __int8 v82;
  char v83;
  char v84;
  uint64_t v85;
  int v86[3];

  v8 = a3;
  v11 = *(JSC::CCallHelpers **)a2;
  if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 3960) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    JSC::JITGetByValGenerator::generateFastPath(*(JSC::JITGetByValGenerator **)(a2 + 8), *(JSC::CCallHelpers **)a2, a3, a4, a5, a6, a7, a8);
    v17 = *(_QWORD *)(a2 + 24);
    v18 = *(_QWORD *)(a2 + 8);
    v19 = *(_DWORD *)(v18 + 44);
    v67 = v19;
    v20 = *(_QWORD *)(v18 + 48);
    v68 = v20;
    if (v19 != -1)
    {
      v21 = *(unsigned int *)(v17 + 12);
      if ((_DWORD)v21 == *(_DWORD *)(v17 + 8))
      {
        v22 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17, (void *)(v21 + 1), (unint64_t)&v67, v12, v13, v14, v15, v16);
        v23 = (_DWORD *)(*(_QWORD *)v17 + 12 * *(unsigned int *)(v17 + 12));
        *v23 = *(_DWORD *)v22;
        v24 = v23 + 1;
        v20 = *(_QWORD *)(v22 + 4);
      }
      else
      {
        v30 = (_DWORD *)(*(_QWORD *)v17 + 12 * v21);
        *v30 = v19;
        v24 = v30 + 1;
      }
      *v24 = v20;
      ++*(_DWORD *)(v17 + 12);
      v17 = *(_QWORD *)(a2 + 24);
    }
    v31 = *(unsigned int *)(v17 + 12);
    v63 = (WTF *)v66;
    v64 = 2;
    v65 = v31;
    if (v31 < 3)
    {
      v33 = v66;
      if (!(_DWORD)v31)
        goto LABEL_18;
LABEL_16:
      v34 = *(_QWORD *)v17;
      v35 = *(_QWORD *)v17 + 12 * v31;
      do
      {
        *(_DWORD *)v33 = *(_DWORD *)v34;
        *(_QWORD *)(v33 + 4) = *(_QWORD *)(v34 + 4);
        v34 += 12;
        v33 += 12;
      }
      while (v34 != v35);
LABEL_18:
      v36 = *(_BYTE *)(*(_QWORD *)(a2 + 32) + 8);
      v37 = **(_BYTE **)(a2 + 40);
      v38 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
      v39 = v65;
      v73 = (WTF *)v76;
      v74 = 2;
      v75 = v65;
      if (v65 < 3)
      {
        v40 = v76;
        if (!v65)
          goto LABEL_24;
      }
      else
      {
        if (v65 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197B9AA64);
        }
        v40 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v65));
        v74 = 12 * v65 / 0xC;
        v73 = (WTF *)v40;
        v39 = v65;
      }
      v41 = v63;
      v42 = (WTF *)((char *)v63 + 12 * v39);
      do
      {
        *(_DWORD *)v40 = *(_DWORD *)v41;
        *(_QWORD *)(v40 + 4) = *(_QWORD *)((char *)v41 + 4);
        v41 = (WTF *)((char *)v41 + 12);
        v40 += 12;
      }
      while (v41 != v42);
LABEL_24:
      LOBYTE(v86[0]) = v36;
      v84 = v8;
      v83 = v37;
      v85 = v38;
      v81 = v11;
      v79 = operationGetPrivateNameOptimize;
      v82 = 0;
      v80 = 0;
      std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<long long> (*&)(long long,long long,JSC::StructureStubInfo *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::CCallHelpers::CellValue&,JSC::CCallHelpers::CellValue&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&>(a1, (uint64_t *)&v73, (_DWORD **)&v81, (uint64_t *)&v79, &v82, &v80, (char *)v86, &v84, &v83, &v85);
      v50 = v73;
      if (v76 != (_BYTE *)v73 && v73)
      {
        v73 = 0;
        v74 = 0;
        WTF::fastFree((unint64_t)v50, v43, v44, v45, v46, v47, v48, v49);
      }
      v51 = v63;
      if (v66 != (_BYTE *)v63 && v63)
      {
        v52 = &v64;
LABEL_46:
        *v52 = 0;
        WTF::fastFree((unint64_t)v51, v43, v44, v45, v46, v47, v48, v49);
        return;
      }
      return;
    }
    if (v31 < 0x15555556)
    {
      v32 = 12 * v31;
      v33 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v31));
      v64 = (v32 & 0xFFFFFFFC) / 0xC;
      v63 = (WTF *)v33;
      LODWORD(v31) = *(_DWORD *)(v17 + 12);
      if (!(_DWORD)v31)
        goto LABEL_18;
      goto LABEL_16;
    }
    __break(0xC471u);
LABEL_52:
    JUMPOUT(0x197B9AA5CLL);
  }
  v25 = a4;
  JSC::JITInlineCacheGenerator::generateDFGDataICFastPath(*(_QWORD *)(a2 + 8), *(_QWORD *)a2, a4, **(char **)(a2 + 16), a5, a6, a7, a8);
  v26 = *(uint64_t **)(a2 + 24);
  v27 = *((unsigned int *)v26 + 3);
  v69 = (WTF *)v72;
  v70 = 2;
  v71 = v27;
  if (v27 < 3)
  {
    v29 = v72;
    if (!(_DWORD)v27)
      goto LABEL_33;
    goto LABEL_31;
  }
  if (v27 >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x197B9AA6CLL);
  }
  v28 = 12 * v27;
  v29 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v27));
  v70 = (v28 & 0xFFFFFFFC) / 0xC;
  v69 = (WTF *)v29;
  LODWORD(v27) = *((_DWORD *)v26 + 3);
  if ((_DWORD)v27)
  {
LABEL_31:
    v53 = *v26;
    v54 = *v26 + 12 * v27;
    do
    {
      *(_DWORD *)v29 = *(_DWORD *)v53;
      *(_QWORD *)(v29 + 4) = *(_QWORD *)(v53 + 4);
      v53 += 12;
      v29 += 12;
    }
    while (v53 != v54);
  }
LABEL_33:
  v55 = **(unsigned __int8 **)(a2 + 16);
  v56 = *(_BYTE *)(*(_QWORD *)(a2 + 32) + 8);
  v57 = **(_BYTE **)(a2 + 40);
  v58 = v71;
  v73 = (WTF *)v76;
  v74 = 2;
  v75 = v71;
  if (v71 < 3)
  {
    v59 = v76;
  }
  else
  {
    if (v71 >= 0x15555556)
    {
      __break(0xC471u);
      goto LABEL_52;
    }
    v59 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v71));
    v74 = 12 * v71 / 0xC;
    v73 = (WTF *)v59;
    v58 = v71;
  }
  if (v58)
  {
    v60 = v69;
    v61 = (WTF *)((char *)v69 + 12 * v58);
    do
    {
      *(_DWORD *)v59 = *(_DWORD *)v60;
      *(_QWORD *)(v59 + 4) = *(_QWORD *)((char *)v60 + 4);
      v60 = (WTF *)((char *)v60 + 12);
      v59 += 12;
    }
    while (v60 != v61);
  }
  v86[0] = v25;
  v85 = v55 | 0x3000000000;
  v84 = v56;
  v83 = v8;
  v82 = v57;
  v81 = v11;
  v80 = v55;
  v79 = operationGetPrivateNameOptimize;
  v78 = 0;
  v77 = v55;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::StructureStubInfoIndex &,JSC::ARM64Registers::RegisterID&,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address &,JSC::ExceptionOperationResult<long long> (*&)(long long,long long,JSC::StructureStubInfo *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::CCallHelpers::CellValue&,JSC::CCallHelpers::CellValue&,JSC::ARM64Registers::RegisterID&>(a1, (uint64_t *)&v73, (_DWORD **)&v81, v86, &v80, &v85, (uint64_t *)&v79, (unsigned __int8 *)&v78 + 1, (char *)&v78, &v84, &v83, (char *)&v82, &v77);
  v62 = v73;
  if (v76 != (_BYTE *)v73 && v73)
  {
    v73 = 0;
    v74 = 0;
    WTF::fastFree((unint64_t)v62, v43, v44, v45, v46, v47, v48, v49);
  }
  v51 = v69;
  if (v72 != (_BYTE *)v69 && v69)
  {
    v52 = &v70;
    v69 = 0;
    goto LABEL_46;
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compileGetPrivateNameById(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  unint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  char v47;
  char v48;
  unint64_t v49;
  char v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unint64_t v97;
  char v98;
  char v99;
  unint64_t v100;
  _BYTE v101[12];
  uint64_t v102;
  char v103;
  char v104;
  uint64_t v105;
  char v106;
  char v107;
  int v108;
  unint64_t v109;
  uint64_t v110;

  v10 = *((_QWORD *)this + 495);
  v11 = *((_DWORD *)a2 + 14);
  v12 = (unint64_t *)((char *)a2 + 24);
  v13 = (_QWORD *)((char *)a2 + 24);
  if ((v11 & 0x10) != 0)
  {
    if (*(_DWORD *)(v10 + 164) <= *v12)
    {
      __break(0xC471u);
      JUMPOUT(0x197B9B2A8);
    }
    v13 = (_QWORD *)(*(_QWORD *)(v10 + 152) + 8 * *v12);
  }
  v14 = (*v13 >> 50) & 0x3FLL;
  if ((_DWORD)v14)
  {
    if ((_DWORD)v14 == 8)
    {
      LOBYTE(v105) = 0;
      v107 = 0;
      LOBYTE(v102) = 0;
      v104 = 0;
      if ((v11 & 0x10) != 0)
      {
        v77 = *v12;
        if (*(_DWORD *)(v10 + 164) <= v77)
        {
          __break(0xC471u);
          JUMPOUT(0x197B9B2B0);
        }
        v12 = (unint64_t *)(*(_QWORD *)(v10 + 152) + 8 * v77);
      }
      v15 = *v12;
      v16 = *v12 & 0xFF00FFFFFFFFFFFFLL;
      if (!v16)
        goto LABEL_84;
      v17 = ~*(_DWORD *)((*v12 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v17 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197B9B2A0);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v17 + 12))
        v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v15, a3, a4, a5, a6, a7, a8);
      else
LABEL_84:
        v18 = -1;
      v19 = ~*(_DWORD *)(v16 + 48);
      if (v19 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
      }
      else
      {
        if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v19 + 8) == 1)
        {
          if (v18 == -1)
            v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v15, a3, a4, a5, a6, a7, a8);
          if (v18 > 15)
            v25 = -1;
          else
            v25 = v18;
          ++*((_DWORD *)this + 3 * v25 + 1196);
          v20 = v18;
        }
        else
        {
          v20 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        }
        v26 = -1;
        v27 = -1;
        if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
        {
LABEL_26:
          v99 = v20;
          if (v18 == -1)
            v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v15, a3, a4, a5, a6, a7, a8);
          v34 = *(_QWORD *)a2;
          v97 = v16;
          if ((*(_QWORD *)a2 & 1) != 0)
          {
            v79 = *(_QWORD *)(v34 & 0xFFFFFFFF8);
            if ((v34 & 2) != 0
              || (v80 = *(unsigned int *)((v34 & 0xFFFFFFFF8) + 8), (_DWORD)v80 == 0x3FFFFFFF)
              || (_DWORD)v80 == -1)
            {
              v81 = 2;
            }
            else if (v80 >> 28)
            {
              v91 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v91 = v79;
              *(_DWORD *)(v91 + 8) = v80;
              v81 = 1;
              v79 = v91;
            }
            else
            {
              v81 = *(_QWORD *)(v34 & 0xFFFFFFFF8);
              v79 = v80 << 36;
            }
            v34 = v79 | v81;
            v36 = JSC::DFG::Node::cacheableIdentifier(a2);
            if ((v34 & 1) != 0)
            {
              v88 = *(_QWORD *)(v34 & 0xFFFFFFFF8);
              if ((v34 & 2) != 0
                || (v89 = *(unsigned int *)((v34 & 0xFFFFFFFF8) + 8), (_DWORD)v89 == 0x3FFFFFFF)
                || (_DWORD)v89 == -1)
              {
                v90 = 2;
              }
              else if (v89 >> 28)
              {
                v94 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v94 = v88;
                *(_DWORD *)(v94 + 8) = v89;
                v90 = 1;
                v88 = v94;
              }
              else
              {
                v90 = *(_QWORD *)(v34 & 0xFFFFFFFF8);
                v88 = v89 << 36;
              }
              v37 = 0;
              v38 = v88 | v90;
LABEL_31:
              *(_QWORD *)v101 = v38;
              v108 = -1;
              v109 = 0xFF000F4100000000;
              JSC::DFG::SpeculativeJIT::cachedGetById((uint64_t)this, v35, (JSC::CodeOrigin *)v101, v18, v99, v27, v26, v36, &v108, 0, 28);
              if ((v101[0] & 1) != 0 && (*(_QWORD *)v101 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(*(_QWORD *)v101 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
              if ((v37 & 1) == 0 && (v34 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v34 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
              result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v99, (uint64_t)a2, 16, 0, v43, v44, v45);
              if (v99 != -1)
              {
                if (v99 > 15)
                  v47 = -1;
                else
                  v47 = v99;
                --*((_DWORD *)this + 3 * v47 + 1196);
              }
              if (v97)
              {
                if (v18 > 15)
                  v48 = -1;
                else
                  v48 = v18;
LABEL_69:
                --*((_DWORD *)this + 3 * v48 + 1196);
                goto LABEL_70;
              }
              goto LABEL_70;
            }
          }
          else
          {
            v36 = JSC::DFG::Node::cacheableIdentifier(a2);
          }
          v37 = 1;
          v38 = v34;
          goto LABEL_31;
        }
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v105, this, a3, a4, a5, a6, a7, a8);
        v107 = 1;
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v102, this, v28, v29, v30, v31, v32, v33);
        v104 = 1;
        if (v107)
        {
          v27 = v106;
          v26 = v103;
          goto LABEL_26;
        }
      }
      goto LABEL_133;
    }
    JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v10, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x11ED, "void JSC::DFG::SpeculativeJIT::compileGetPrivateNameById(Node *)", "Bad use kind");
    __break(0xC471u);
LABEL_140:
    JUMPOUT(0x197B9B204);
  }
  LOBYTE(v105) = 0;
  v107 = 0;
  LOBYTE(v102) = 0;
  v104 = 0;
  if ((v11 & 0x10) != 0)
  {
    v78 = *v12;
    if (*(_DWORD *)(v10 + 164) <= v78)
    {
      __break(0xC471u);
      goto LABEL_140;
    }
    v12 = (unint64_t *)(*(_QWORD *)(v10 + 152) + 8 * v78);
  }
  v21 = *v12;
  v22 = *v12 & 0xFF00FFFFFFFFFFFFLL;
  if (!v22)
    goto LABEL_42;
  v23 = ~*(_DWORD *)((*v12 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v23 >= *((unsigned int *)this + 1001))
  {
LABEL_134:
    __break(0xC471u);
    JUMPOUT(0x197B9B290);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v23 + 12))
    v24 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v21, a3, a4, a5, a6, a7, a8);
  else
LABEL_42:
    v24 = -1;
  v49 = ~*(_DWORD *)(v22 + 48);
  if (v49 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197B9B298);
  }
  if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v49 + 8) == 1)
  {
    if (v24 == -1)
      v24 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v21, a3, a4, a5, a6, a7, a8);
    if (v24 > 15)
      v50 = -1;
    else
      v50 = v24;
    ++*((_DWORD *)this + 3 * v50 + 1196);
    v51 = v24;
  }
  else
  {
    v51 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  v52 = -1;
  v53 = -1;
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) == 0)
  {
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v105, this, a3, a4, a5, a6, a7, a8);
    v107 = 1;
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v102, this, v54, v55, v56, v57, v58, v59);
    v104 = 1;
    if (!v107)
    {
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    v53 = v106;
    v52 = v103;
  }
  v98 = v52;
  v100 = v22;
  if (v24 == -1)
    v24 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v21, a3, a4, a5, a6, a7, a8);
  v60 = 1;
  JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v24, 1, a4, a5, a6, a7, a8, (uint64_t)v101);
  v61 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v82 = *(_QWORD *)(v61 & 0xFFFFFFFF8);
    if ((v61 & 2) != 0
      || (v83 = *(unsigned int *)((v61 & 0xFFFFFFFF8) + 8), (_DWORD)v83 == 0x3FFFFFFF)
      || (_DWORD)v83 == -1)
    {
      v84 = 2;
    }
    else if (v83 >> 28)
    {
      v92 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v92 = v82;
      *(_DWORD *)(v92 + 8) = v83;
      v84 = 1;
      v82 = v92;
    }
    else
    {
      v84 = *(_QWORD *)(v61 & 0xFFFFFFFF8);
      v82 = v83 << 36;
    }
    v61 = v82 | v84;
    v60 = ((v82 | v84) & 1) == 0;
  }
  v63 = JSC::DFG::Node::cacheableIdentifier(a2);
  v64 = *(_DWORD *)v101;
  v65 = *(_QWORD *)&v101[4];
  v66 = v61;
  if (!v60)
  {
    v85 = *(_QWORD *)(v61 & 0xFFFFFFFF8);
    if ((v61 & 2) != 0
      || (v86 = *(unsigned int *)((v61 & 0xFFFFFFFF8) + 8), (_DWORD)v86 == 0x3FFFFFFF)
      || (_DWORD)v86 == -1)
    {
      v87 = 2;
    }
    else if (v86 >> 28)
    {
      v95 = *(_QWORD *)(v61 & 0xFFFFFFFF8);
      v96 = *(_DWORD *)((v61 & 0xFFFFFFFF8) + 8);
      v93 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v93 = v95;
      *(_DWORD *)(v93 + 8) = v96;
      v87 = 1;
      v85 = v93;
    }
    else
    {
      v87 = *(_QWORD *)(v61 & 0xFFFFFFFF8);
      v85 = v86 << 36;
    }
    v66 = v85 | v87;
  }
  v109 = v65;
  v110 = v66;
  v108 = v64;
  JSC::DFG::SpeculativeJIT::cachedGetById((uint64_t)this, v62, (JSC::CodeOrigin *)&v110, v24, v51, v53, v98, v63, &v108, 0, 28);
  if ((v110 & 1) != 0 && (v110 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v110 & 0xFFFFFFFF8, v67, v68, v69, v70, v71, v72, v73);
  if (!v60 && (v61 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v61 & 0xFFFFFFFF8, v67, v68, v69, v70, v71, v72, v73);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v51, (uint64_t)a2, 16, 0, v71, v72, v73);
  if (v51 != -1)
  {
    if (v51 > 15)
      v74 = -1;
    else
      v74 = v51;
    --*((_DWORD *)this + 3 * v74 + 1196);
  }
  if (v100)
  {
    if (v24 > 15)
      v48 = -1;
    else
      v48 = v24;
    goto LABEL_69;
  }
LABEL_70:
  if (v104)
  {
    if (v102)
    {
      v75 = v103;
      if (v103 != -1)
      {
        if (v103 > 15)
          v75 = -1;
        --*(_DWORD *)(v102 + 12 * v75 + 4784);
      }
    }
  }
  if (v107)
  {
    if (v105)
    {
      v76 = v106;
      if (v106 != -1)
      {
        if (v106 > 15)
          v76 = -1;
        --*(_DWORD *)(v105 + 12 * v76 + 4784);
      }
    }
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *,long long),JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unsigned int v13;
  JSC::AssemblerBuffer *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  __int16 *v39;
  int v40;
  char *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  JSC::AssemblerBuffer *v62;
  unsigned int v63;
  unsigned int v64;
  __int16 v65;
  _BYTE v66[6];

  v11 = (uint64_t)a2;
  v63 = 0;
  if ((_DWORD)a6 == 1)
  {
    v13 = 0;
  }
  else
  {
    v65 = a6 | 0x100;
    v13 = 1;
    v63 = 1;
  }
  if ((_DWORD)a7 != 2)
  {
    *(_WORD *)&v66[2 * v13++ - 2] = a7 | 0x200;
    v63 = v13;
  }
  if (a8 == 3)
  {
    if (!v13)
      goto LABEL_62;
  }
  else
  {
    *(_WORD *)&v66[2 * v13++ - 2] = a8 | 0x300;
    v63 = v13;
  }
  v14 = (JSC::AssemblerBuffer *)(a2 + 56);
  do
  {
    v15 = 0;
    v16 = 0;
    v17 = v13;
    do
    {
      if ((v66[v15 - 1] & 0x40) != 0)
      {
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      v16 |= 1 << v66[v15 - 1];
      v15 += 2;
    }
    while (2 * v13 != v15);
    v18 = 0;
    do
    {
      v19 = v66[v18 - 2] & 0x7F;
      if (v19 >= 0x40)
        goto LABEL_65;
      v16 &= ~(1 << v19);
      v18 += 2;
    }
    while (2 * v13 != v18);
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v20.i16[0] = vaddlv_u8(v20);
    v21 = v20.i32[0];
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.i32[0] + v21)
    {
      v23 = 0;
      if (v13 <= 1)
        v24 = 1;
      else
        v24 = v13;
      v25 = 2 * v24;
      while (1)
      {
        v26 = v66[v23 - 1];
        if ((v26 & 0x7Fu) >= 0x40)
          goto LABEL_65;
        if (((v16 >> (v26 & 0x7F)) & 1) != 0)
          break;
        v23 += 2;
        if (v25 == v23)
          goto LABEL_58;
      }
      v27 = v66[v23 - 2];
      if (v27 != v26)
      {
        v28 = (char)v27;
        if ((char)v27 == 63)
        {
          v29 = *(_DWORD *)(v11 + 200);
          v30 = *(_DWORD *)(v11 + 192);
          if (v26 == 31)
            goto LABEL_52;
          v32 = v26 & 0x1F | 0xD2800000;
        }
        else
        {
          v29 = *(_DWORD *)(v11 + 200);
          v30 = *(_DWORD *)(v11 + 192);
          v31 = (char)v26 == 31 || v28 == 31;
          if (!v31)
          {
            v32 = v26 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v32 = (char)v26 | (32 * v28) | 0x91000000;
        }
LABEL_53:
        if (v29 + 4 > v30)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v29 = *(_DWORD *)(v11 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v11 + 56) + v29) = v32;
        *(_DWORD *)(v11 + 200) += 4;
        v17 = v63;
      }
      memmove(&v66[v23 - 2], &v66[v23], 2 * v17 - v23 - 2);
      v13 = v63 - 1;
      goto LABEL_57;
    }
    v62 = v14;
    v33 = HIBYTE(v65);
    v34 = v65;
    JSC::MacroAssemblerARM64::swap(v11, (char)v65, SHIBYTE(v65), a4, a5, a6, a7, a8);
    memmove(&v65, v66, 2 * v63 - 2);
    v35 = v63 - 1;
    v31 = v63 == 1;
    v64 = v35;
    v36 = (unsigned __int8 *)&v65;
    v37 = &v66[2 * v35 - 2];
    if (v31)
    {
      v44 = 0;
      v45 = 0;
      v40 = 0;
      a2 = v37;
    }
    else
    {
      v38 = 2 * v35;
      v39 = &v65;
      while (*(unsigned __int8 *)v39 != v33)
      {
        ++v39;
        v38 -= 2;
        if (!v38)
          goto LABEL_37;
      }
      *(_BYTE *)v39 = v34;
LABEL_37:
      v40 = 0;
      v41 = (char *)&v65;
      a2 = v37;
      v42 = v37;
      do
      {
        if (*v36 == v36[1])
        {
          v43 = v36;
          if (v42 != &v66[2 * v64 - 2])
          {
            v61 = v37;
            if (v36 == a2)
            {
              v43 = v42;
            }
            else
            {
              v59 = v41 - (char *)a2;
              v60 = v42;
              memmove(v42, a2, v41 - (char *)a2);
              v43 = &v60[v59];
            }
            v37 = v61;
          }
          a2 = v36 + 2;
          ++v40;
          v42 = v43;
        }
        v36 += 2;
        v41 += 2;
      }
      while (v36 < v37);
      v44 = v64;
      v45 = v64;
      v37 = v42;
    }
    v46 = &v66[2 * v44 - 2];
    v14 = v62;
    if (a2 != v46)
    {
      memmove(v37, a2, v46 - a2);
      v45 = v64;
    }
    v13 = v45 - v40;
LABEL_57:
    v63 = v13;
LABEL_58:
    ;
  }
  while (v13);
LABEL_62:
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v11, a5, 0, a4, a5, a6, a7, a8);
  else
LABEL_66:
    JSC::MacroAssemblerARM64::load64(v11, (a4 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v11, a3, v47, v48, v49, v50, v51, v52, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v11, 0, v53, v54, v55, v56, v57, v58);
}

void JSC::DFG::SpeculativeJIT::compilePutPrivateName(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, int a10, char a11, int a12, char a13)
{
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF *v98;
  char v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 v119;
  unsigned __int8 v120;
  unsigned __int8 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  JSC::DFG::Node *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t *v145;
  uint64_t *v146;
  _DWORD *v147;
  int v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WTF *v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  WTF *v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  WTF *v165;
  unint64_t v166;
  _BYTE v167[24];
  uint64_t v168;
  __int128 v169;
  unsigned __int8 v170;
  int v171;
  uint64_t v172;
  _QWORD v173[2];
  unsigned int v174;
  _QWORD v175[2];
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  signed __int8 v179;
  uint64_t v180;
  unint64_t v181;
  unsigned __int8 v182;
  uint64_t v183;
  unint64_t v184;
  unsigned __int8 v185;
  JSC::DFG::JITCompiler *v186;

  v186 = a2;
  v15 = WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::contains((uint64_t *)(*((_QWORD *)this + 495) + 1024), &v186);
  v21 = *((_QWORD *)a2 + 3);
  if (!v15 && (v21 & 0xF8000000000000) == 0x20000000000000)
  {
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v183, (uint64_t)this, v21, v16, v17, v18, v19, v20);
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v180, (uint64_t)this, *((_QWORD *)a2 + 4), v22, v23, v24, v25, v26);
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v177, (uint64_t)this, *((_QWORD *)a2 + 5), 0, v27, v28, v29, v30);
    v37 = v185;
    if (v185 == 255)
    {
      v37 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v183, v184, v31, v32, v33, v34, v35, v36);
      v185 = v37;
    }
    v38 = v182;
    if (v182 == 255)
    {
      v38 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v180, v181, v31, v32, v33, v34, v35, v36);
      v182 = v38;
    }
    v39 = v179;
    if (v179 == 255)
    {
      v39 = JSC::DFG::SpeculativeJIT::fillJSValue(v177, v178, v31, v32, v33, v34, v35, v36);
      v179 = v39;
    }
    if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
    {
      v154 = 0;
      v40 = 255;
    }
    else
    {
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v169, this, v31, v32, v33, v34, v35, v36);
      v154 = v169;
      v40 = BYTE8(v169);
    }
    JSC::DFG::SpeculativeJIT::speculateSymbol((uint64_t)this, *((_QWORD *)a2 + 4), (char)v38, v32, v33, v34, v35, v36);
    JSC::CodeOrigin::CodeOrigin(&v176, v186);
    v46 = JSC::DFG::SpeculativeJIT::recordCallSiteAndGenerateExceptionHandlingOSRExitIfNeeded(this, (const JSC::CodeOrigin *)&v176, *((unsigned int *)this + 1411), v41, v42, v43, v44, v45);
    v175[0] = JSC::DFG::SpeculativeJIT::usedRegisters(this);
    v175[1] = v47;
    JSC::DFG::JITCompiler::addStructureStubInfo(this, (uint64_t)v173);
    v48 = *((_QWORD *)this + 42);
    v50 = v173[0];
    v49 = v173[1];
    JSC::CodeOrigin::CodeOrigin(&v168, (const JSC::CodeOrigin *)&v176);
    v51 = v46;
    v52 = v37;
    v53 = v38;
    v54 = v39;
    BYTE1(v153) = v40;
    LOBYTE(v153) = -1;
    if (*((_BYTE *)v186 + 80) == 2)
      v55 = 14;
    else
      v55 = 16;
    JSC::JITPutByValGenerator::JITPutByValGenerator((uint64_t)&v169, v48, v50, v49, 0, &v168, v51, v55, (uint64_t)v175, v52, SHIDWORD(v52), v53, SHIDWORD(v53), v39, v153);
    if ((v168 & 1) != 0 && (v168 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v168 & 0xFFFFFFFF8, v56, v57, v58, v59, v60, v61, v62);
    if (v49 == 0xFFFFFFFFLL)
    {
      v145 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
      JSC::DFG::slowPathICCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,decltype(nullptr)>(v145, v146, v147, v148, v149, v150, v151, v152, a9, a10, a11, a12, a13);
      return;
    }
    v165 = (WTF *)&v164;
    ((void (*)(WTF **, _QWORD *))off_1E3572AC8[v49])(&v165, v173);
    v165 = (WTF *)v167;
    v166 = 2;
    if (*((_BYTE *)v186 + 80) == 2)
      v69 = operationPutByValDefinePrivateFieldOptimize;
    else
      v69 = operationPutByValSetPrivateFieldOptimize;
    if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
    {
      JSC::JITGetByValGenerator::generateFastPath((JSC::JITGetByValGenerator *)&v169, this, v63, v64, v65, v66, v67, v68);
      v159 = v171;
      v160 = v172;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v165, &v159, v70, v71, v72, v73, v74, v75);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v156, (uint64_t *)&v165);
      JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>(&v164, (uint64_t *)&v156, this, (uint64_t)v69, v52, v53, v54, *((uint64_t *)&v169 + 1));
      v83 = v164;
      v84 = v156;
      if (&v158 != (uint64_t *)v156 && v156)
      {
        v156 = 0;
        v157 = 0;
LABEL_23:
        WTF::fastFree((unint64_t)v84, v76, v77, v78, v79, v80, v81, v82);
      }
    }
    else
    {
      JSC::JITInlineCacheGenerator::generateDFGDataICFastPath((uint64_t)&v169, (uint64_t)this, v174, (char)v40, v65, v66, v67, v68);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v161, (uint64_t *)&v165);
      JSC::DFG::slowPathICCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,decltype(nullptr)>(&v164, (uint64_t *)&v161, this, v174, v40, v40 | 0x3000000000, (uint64_t)v69, v52, v53, SHIDWORD(v53), v54, SHIDWORD(v54), v40);
      v83 = v164;
      v84 = v161;
      if (&v163 != (uint64_t *)v161 && v161)
      {
        v161 = 0;
        v162 = 0;
        goto LABEL_23;
      }
    }
    JSC::DFG::JITCompiler::addPutByVal((uint64_t)this, &v169, v83);
    v155 = v83;
    JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)this, (unint64_t)&v155);
    v90 = v155;
    v155 = 0;
    if (v90)
      (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
    JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)v186, 0, v85, v86, v87, v88, v89);
    v98 = v165;
    if (v167 != (_BYTE *)v165 && v165)
    {
      v165 = 0;
      LODWORD(v166) = 0;
      WTF::fastFree((unint64_t)v98, v91, v92, v93, v94, v95, v96, v97);
    }
    if ((v176 & 1) != 0 && (v176 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v176 & 0xFFFFFFFF8, v91, v92, v93, v94, v95, v96, v97);
    if (v154 && v40 != 255)
    {
      if ((char)v40 > 15)
        v99 = -1;
      else
        v99 = v40;
      --*(_DWORD *)(v154 + 12 * v99 + 4784);
    }
    if ((v178 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v100 = v179;
      if (v179 > 15)
        v100 = -1;
      --*(_DWORD *)(v177 + 12 * v100 + 4784);
    }
    if ((v181 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v101 = (char)v182;
      if ((char)v182 > 15)
        v101 = -1;
      --*(_DWORD *)(v180 + 12 * v101 + 4784);
    }
    if ((v184 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v102 = v183;
      v103 = (char)v185;
LABEL_46:
      if (v103 > 15)
        v103 = -1;
      --*(_DWORD *)(v102 + 12 * v103 + 4784);
      return;
    }
    return;
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v169, (uint64_t)this, v21, 0, v17, v18, v19, v20);
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v165, (uint64_t)this, *((_QWORD *)a2 + 4), v104, v105, v106, v107, v108);
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v183, (uint64_t)this, *((_QWORD *)a2 + 5), 0, v109, v110, v111, v112);
  v119 = v185;
  if (v185 == 255)
  {
    v119 = JSC::DFG::SpeculativeJIT::fillJSValue(v183, v184, v113, v114, v115, v116, v117, v118);
    v185 = v119;
  }
  v120 = v170;
  if (v170 == 255)
  {
    v120 = JSC::DFG::SpeculativeJIT::fillJSValue(v169, *((uint64_t *)&v169 + 1), v113, v114, v115, v116, v117, v118);
    v170 = v120;
  }
  v121 = v167[0];
  if (v167[0] == 255)
  {
    v121 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v165, v166, v113, v114, v115, v116, v117, v118);
    v167[0] = v121;
  }
  JSC::DFG::SpeculativeJIT::speculateSymbol((uint64_t)this, *((_QWORD *)a2 + 4), (char)v121, v114, v115, v116, v117, v118);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v122, v123, v124, v125, v126, v127, v128);
  if (*((_BYTE *)v186 + 80) == 2)
    v135 = operationPutByValDefinePrivateFieldGeneric;
  else
    v135 = operationPutByValSetPrivateFieldGeneric;
  v136 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, v186, v129, v130, v131, v132, v133, v134);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v180, (unsigned __int8 *)this, (uint64_t)v135, v136, v137, v120, v121, v119);
  JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)v186, 0, v138, v139, v140, v141, v142);
  if ((v184 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v143 = (char)v185;
    if ((char)v185 > 15)
      v143 = -1;
    --*(_DWORD *)(v183 + 12 * v143 + 4784);
  }
  if ((v166 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v144 = v167[0];
    if (v167[0] > 15)
      v144 = -1;
    --*((_DWORD *)v165 + 3 * v144 + 1196);
  }
  if ((*((_QWORD *)&v169 + 1) & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v102 = v169;
    v103 = (char)v170;
    goto LABEL_46;
  }
}

void JSC::DFG::slowPathICCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,decltype(nullptr)>(uint64_t *a1, uint64_t *a2, _DWORD *a3, int a4, char a5, uint64_t a6, uint64_t a7, char a8, char a9, int a10, char a11, int a12, char a13)
{
  uint64_t v19;
  char v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _BYTE *v26;
  WTF *v27;
  WTF *v28;
  unsigned int v29;
  int v30;
  _BYTE *v31;
  WTF *v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  WTF *v43;
  WTF *v45;
  unsigned int v46;
  _BYTE v47[24];
  WTF *v48;
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[24];
  WTF *v52;
  unsigned int v53;
  unsigned int v54;
  _BYTE v55[32];

  v19 = *((unsigned int *)a2 + 3);
  v45 = (WTF *)v47;
  v46 = v19;
  if (v19 < 3)
  {
    v20 = a5;
    v21 = v47;
    if (!(_DWORD)v19)
      goto LABEL_8;
  }
  else
  {
    if (v19 >= 0x15555556)
      goto LABEL_36;
    v20 = a5;
    v21 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v19));
    v45 = (WTF *)v21;
    LODWORD(v19) = *((_DWORD *)a2 + 3);
    if (!(_DWORD)v19)
      goto LABEL_8;
  }
  v22 = *a2;
  v23 = *a2 + 12 * v19;
  do
  {
    *(_DWORD *)v21 = *(_DWORD *)v22;
    *(_QWORD *)(v21 + 4) = *(_QWORD *)(v22 + 4);
    v22 += 12;
    v21 += 12;
  }
  while (v22 != v23);
LABEL_8:
  v24 = WTF::fastMalloc((WTF *)0xD0);
  v25 = v46;
  v48 = (WTF *)v51;
  v49 = 2;
  v50 = v46;
  if (v46 < 3)
  {
    v26 = v51;
  }
  else
  {
    if (v46 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197B9C044);
    }
    v26 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v46));
    v49 = 12 * v46 / 0xC;
    v48 = (WTF *)v26;
    v25 = v46;
  }
  if (v25)
  {
    v27 = v45;
    v28 = (WTF *)((char *)v45 + 12 * v25);
    do
    {
      *(_DWORD *)v26 = *(_DWORD *)v27;
      *(_QWORD *)(v26 + 4) = *(_QWORD *)((char *)v27 + 4);
      v27 = (WTF *)((char *)v27 + 12);
      v26 += 12;
    }
    while (v27 != v28);
  }
  v29 = v50;
  v52 = (WTF *)v55;
  v53 = 2;
  v54 = v50;
  if (v50 >= 3)
  {
    if (v50 < 0x15555556)
    {
      v30 = 12 * v50;
      v31 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v50));
      v53 = (v30 & 0xFFFFFFFC) / 0xC;
      v52 = (WTF *)v31;
      v29 = v50;
      goto LABEL_19;
    }
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x197B9C03CLL);
  }
  v31 = v55;
LABEL_19:
  if (v29)
  {
    v32 = v48;
    v33 = (WTF *)((char *)v48 + 12 * v29);
    do
    {
      *(_DWORD *)v31 = *(_DWORD *)v32;
      *(_QWORD *)(v31 + 4) = *(_QWORD *)((char *)v32 + 4);
      v32 = (WTF *)((char *)v32 + 12);
      v31 += 12;
    }
    while (v32 != v33);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag>::CallSlowPathGenerator(v24, (uint64_t *)&v52, a3, 0, 0, 0);
  v41 = v52;
  if (v55 != (_BYTE *)v52 && v52 != 0)
  {
    v52 = 0;
    v53 = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  *(_QWORD *)v24 = &off_1E3573270;
  *(_BYTE *)(v24 + 160) = v20;
  *(_QWORD *)(v24 + 164) = a6;
  *(_QWORD *)(v24 + 176) = a7;
  *(_BYTE *)(v24 + 184) = a8;
  *(_BYTE *)(v24 + 185) = a9;
  *(_BYTE *)(v24 + 186) = a11;
  *(_BYTE *)(v24 + 187) = a13;
  *(_QWORD *)(v24 + 192) = 0;
  *(_DWORD *)(v24 + 200) = a4;
  *a1 = v24;
  v43 = v48;
  if (v51 != (_BYTE *)v48 && v48)
  {
    v48 = 0;
    v49 = 0;
    WTF::fastFree((unint64_t)v43, v34, v35, v36, v37, v38, v39, v40);
  }
  if (v47 != (_BYTE *)v45)
  {
    if (v45)
      WTF::fastFree((unint64_t)v45, v34, v35, v36, v37, v38, v39, v40);
  }
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>(uint64_t *a1, uint64_t *a2, _DWORD *a3, uint64_t a4, char a5, char a6, char a7, uint64_t a8)
{
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char v20;
  _BYTE *v21;
  WTF *v22;
  WTF *v23;
  unsigned int v24;
  int v25;
  _BYTE *v26;
  WTF *v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  WTF *v38;
  WTF *v41;
  unsigned int v42;
  _BYTE v43[24];
  WTF *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[24];
  WTF *v48;
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[24];

  v14 = *((unsigned int *)a2 + 3);
  v41 = (WTF *)v43;
  v42 = v14;
  if (v14 < 3)
  {
    v15 = v43;
    if (!(_DWORD)v14)
      goto LABEL_8;
  }
  else
  {
    if (v14 >= 0x15555556)
      goto LABEL_36;
    v15 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v14));
    v41 = (WTF *)v15;
    LODWORD(v14) = *((_DWORD *)a2 + 3);
    if (!(_DWORD)v14)
      goto LABEL_8;
  }
  v16 = *a2;
  v17 = *a2 + 12 * v14;
  do
  {
    *(_DWORD *)v15 = *(_DWORD *)v16;
    *(_QWORD *)(v15 + 4) = *(_QWORD *)(v16 + 4);
    v16 += 12;
    v15 += 12;
  }
  while (v16 != v17);
LABEL_8:
  v18 = WTF::fastMalloc((WTF *)0xC0);
  v19 = v42;
  v44 = (WTF *)v47;
  v45 = 2;
  v46 = v42;
  if (v42 < 3)
  {
    v20 = a7;
    v21 = v47;
  }
  else
  {
    if (v42 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197B9C33CLL);
    }
    v20 = a7;
    v21 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v42));
    v45 = 12 * v42 / 0xC;
    v44 = (WTF *)v21;
    v19 = v42;
  }
  if (v19)
  {
    v22 = v41;
    v23 = (WTF *)((char *)v41 + 12 * v19);
    do
    {
      *(_DWORD *)v21 = *(_DWORD *)v22;
      *(_QWORD *)(v21 + 4) = *(_QWORD *)((char *)v22 + 4);
      v22 = (WTF *)((char *)v22 + 12);
      v21 += 12;
    }
    while (v22 != v23);
  }
  v24 = v46;
  v48 = (WTF *)v51;
  v49 = 2;
  v50 = v46;
  if (v46 < 3)
  {
    v26 = v51;
    if (!v46)
      goto LABEL_22;
LABEL_20:
    v27 = v44;
    v28 = (WTF *)((char *)v44 + 12 * v24);
    do
    {
      *(_DWORD *)v26 = *(_DWORD *)v27;
      *(_QWORD *)(v26 + 4) = *(_QWORD *)((char *)v27 + 4);
      v27 = (WTF *)((char *)v27 + 12);
      v26 += 12;
    }
    while (v27 != v28);
    goto LABEL_22;
  }
  if (v46 >= 0x15555556)
  {
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x197B9C334);
  }
  v25 = 12 * v46;
  v26 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v46));
  v49 = (v25 & 0xFFFFFFFC) / 0xC;
  v48 = (WTF *)v26;
  v24 = v46;
  if (v46)
    goto LABEL_20;
LABEL_22:
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag>::CallSlowPathGenerator(v18, (uint64_t *)&v48, a3, 0, 0, 0);
  v36 = v48;
  if (v51 != (_BYTE *)v48 && v48 != 0)
  {
    v48 = 0;
    v49 = 0;
    WTF::fastFree((unint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  }
  *(_QWORD *)v18 = &off_1E35732A0;
  *(_QWORD *)(v18 + 160) = a4;
  *(_BYTE *)(v18 + 168) = a5;
  *(_BYTE *)(v18 + 169) = a6;
  *(_BYTE *)(v18 + 170) = v20;
  *(_QWORD *)(v18 + 176) = a8;
  *(_QWORD *)(v18 + 184) = 0;
  *a1 = v18;
  v38 = v44;
  if (v47 != (_BYTE *)v44 && v44)
  {
    v44 = 0;
    v45 = 0;
    WTF::fastFree((unint64_t)v38, v29, v30, v31, v32, v33, v34, v35);
  }
  if (v43 != (_BYTE *)v41)
  {
    if (v41)
      WTF::fastFree((unint64_t)v41, v29, v30, v31, v32, v33, v34, v35);
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compilePutPrivateNameById(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  signed __int8 v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  char v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  char v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  unsigned int v45;
  char v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  char v66;
  char v67;

  LOBYTE(v65) = 0;
  v67 = 0;
  LOBYTE(v62) = 0;
  v64 = 0;
  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_65;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_82;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_65:
    v12 = -1;
  v13 = *((_QWORD *)a2 + 4);
  v55 = v13 & 0xFF00FFFFFFFFFFFFLL;
  v56 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_9;
  v14 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_81:
    __break(1u);
LABEL_82:
    JUMPOUT(0x197B9C754);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 12))
    v15 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  else
LABEL_9:
    v15 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v60, this, a3, a4, a5, a6, a7, a8);
  v22 = -1;
  v23 = -1;
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
    goto LABEL_27;
  if (v67)
  {
    if (v65)
    {
      v24 = v66;
      if (v66 != -1)
      {
        if (v66 > 15)
          v24 = -1;
        --*(_DWORD *)(v65 + 12 * v24 + 4784);
      }
    }
    v67 = 0;
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v65, this, v16, v17, v18, v19, v20, v21);
  v67 = 1;
  if (v64)
  {
    if (v62)
    {
      v31 = v63;
      if (v63 != -1)
      {
        if (v63 > 15)
          v31 = -1;
        --*(_DWORD *)(v62 + 12 * v31 + 4784);
      }
    }
    v64 = 0;
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v62, this, v25, v26, v27, v28, v29, v30);
  v64 = 1;
  if (!v67)
    goto LABEL_81;
  v23 = v66;
  v22 = v63;
LABEL_27:
  if (v15 == -1)
    v15 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v13, v16, v17, v18, v19, v20, v21);
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, v16, v17, v18, v19, v20, v21);
  v32 = v61;
  v33 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v50 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
    if ((v33 & 2) != 0
      || ((v51 = *(unsigned int *)((v33 & 0xFFFFFFFF8) + 8), (_DWORD)v51 != 0x3FFFFFFF)
        ? (v52 = (_DWORD)v51 == -1)
        : (v52 = 1),
          v52))
    {
      v53 = 2;
    }
    else if (v51 >> 28)
    {
      v54 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v54 = v50;
      *(_DWORD *)(v54 + 8) = v51;
      v53 = 1;
      v50 = v54;
    }
    else
    {
      v53 = v50;
      v50 = v51 << 36;
    }
    v33 = v50 | v53;
    v34 = ((v50 | v53) & 1) == 0;
  }
  else
  {
    v34 = 1;
  }
  v59 = v33;
  v35 = JSC::DFG::Node::cacheableIdentifier(a2);
  if (*((_BYTE *)a2 + 80) == 2)
    v36 = 15;
  else
    v36 = 17;
  v57 = 0xFFFFFFFFLL;
  v58 = -16773311;
  JSC::DFG::SpeculativeJIT::cachedPutById(this, (JSC::CodeOrigin *)&v59, v12, v15, v23, v32, v22, v35, v36, (int *)&v57, 0);
  if (!v34 && (v33 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v33 & 0xFFFFFFFF8, v37, v38, v39, v40, v41, v42, v43);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v39, v40, v41, v42, v43);
  if (v60)
  {
    v45 = v61;
    if (v61 != -1)
    {
      if (v61 > 15)
        v45 = -1;
      --*(_DWORD *)(v60 + 12 * v45 + 4784);
    }
  }
  if (v55)
  {
    if (v15 > 15)
      v46 = -1;
    else
      v46 = v15;
    --*((_DWORD *)this + 3 * v46 + 1196);
  }
  if (v56)
  {
    if (v12 > 15)
      v47 = -1;
    else
      v47 = v12;
    --*((_DWORD *)this + 3 * v47 + 1196);
  }
  if (v64)
  {
    if (v62)
    {
      v48 = v63;
      if (v63 != -1)
      {
        if (v63 > 15)
          v48 = -1;
        --*(_DWORD *)(v62 + 12 * v48 + 4784);
      }
    }
  }
  if (v67)
  {
    if (v65)
    {
      v49 = v66;
      if (v66 != -1)
      {
        if (v66 > 15)
          v49 = -1;
        --*(_DWORD *)(v65 + 12 * v49 + 4784);
      }
    }
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::cachedPutById(JSC::DFG::SpeculativeJIT *this, JSC::CodeOrigin *a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, int *a10, unsigned __int8 a11)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t i;
  uint64_t v24;
  char *v25;
  uint64_t j;
  uint64_t v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char v45;
  uint64_t (*v46)();
  uint64_t v47;
  unsigned int v48;
  char *v49;
  unsigned int v50;
  int v51;
  _BYTE *v52;
  WTF *v53;
  WTF *v54;
  uint64_t v55;
  unsigned int v56;
  _BYTE *v57;
  WTF *v58;
  WTF *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  WTF *v69;
  _BYTE *v70;
  WTF *v71;
  WTF *v72;
  _QWORD *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  __int16 v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  WTF *v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  uint64_t v105;
  WTF *v106;
  unsigned int v107;
  unsigned int v108;
  _BYTE v109[24];
  uint64_t v110;
  int v111;
  uint64_t v112;
  WTF *v113;
  int v114;
  int v115;
  _BYTE v116[24];
  WTF *v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  char v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  __int16 v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  __int16 v133;
  uint64_t (*v134)();
  _DWORD *v135;
  uint64_t v136;
  char v137;
  unsigned __int8 v138;
  __int128 v139;
  _BYTE v140[4];
  int v141;
  uint64_t v142;
  uint64_t v143;
  __int16 v144;
  int v145;
  uint64_t v146;
  uint64_t v147;

  v14 = a7;
  v104 = a4;
  v19 = 0;
  v20 = a11;
  v21 = a3;
  v22 = (char *)this + 4776;
  for (i = 15; i != -1; --i)
  {
    if ((char)i <= 15)
      v24 = i;
    else
      v24 = 0xFFFFFFFFLL;
    if (*(_DWORD *)&v22[12 * v24 + 8] || *(_DWORD *)&v22[12 * v24] != 0x3FFFFFFF)
    {
      if ((i & 0x40) != 0)
        goto LABEL_89;
      v19 |= 1 << i;
    }
  }
  v25 = (char *)this + 4968;
  for (j = 0x16u; j != -1; --j)
  {
    v27 = JSC::FPRInfo::toRegister::registerForIndex[j];
    v28 = JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v27];
    if (*(_DWORD *)&v25[12 * v28 + 8] || *(_DWORD *)&v25[12 * v28] != 0x3FFFFFFF)
    {
      v29 = v27 + 32;
      if ((v29 & 0x40) != 0)
        goto LABEL_89;
      v19 |= 1 << v29;
    }
  }
  v30 = v19 | 0xFF00FFFC0000;
  v130 = v30;
  v131 = 0;
  if (a11 == 1)
  {
    v20 = a3 & 0x7F;
    if (v20 >= 0x40)
      goto LABEL_89;
    v31 = a4 & 0x7F;
    if (v31 >= 0x40)
      goto LABEL_89;
    v20 = v30 & ~((1 << (a3 & 0x7F)) | (1 << v31));
    v130 = v20;
    if ((_DWORD)a5 != -1)
    {
      if ((a5 & 0x7Fu) >= 0x40)
        goto LABEL_89;
      v20 &= ~(1 << (a5 & 0x7F));
      v130 = v20;
    }
    if ((_DWORD)a6 != -1)
    {
      if ((a6 & 0x7Fu) >= 0x40)
        goto LABEL_89;
      v20 &= ~(1 << (a6 & 0x7F));
      v130 = v20;
      v131 = 0;
    }
    if ((_DWORD)a7 == -1)
      goto LABEL_30;
    if ((a7 & 0x7Fu) < 0x40)
    {
      v130 = v20 & ~(1 << (a7 & 0x7F));
      v131 = 0;
      goto LABEL_30;
    }
LABEL_89:
    __break(1u);
LABEL_90:
    v95 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
    if ((v20 & 2) != 0
      || ((v96 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v96 != 0x3FFFFFFF)
        ? (v97 = (_DWORD)v96 == -1)
        : (v97 = 1),
          v97))
    {
      v98 = 2;
    }
    else if (v96 >> 28)
    {
      v100 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v95 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v95 = v100;
      *(_DWORD *)(v95 + 8) = v96;
      v98 = 1;
    }
    else
    {
      v98 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v95 = v96 << 36;
    }
    v20 = v95 | v98;
    goto LABEL_40;
  }
LABEL_30:
  v103 = a8;
  v13 = JSC::DFG::SpeculativeJIT::recordCallSiteAndGenerateExceptionHandlingOSRExitIfNeeded(this, a2, *((unsigned int *)this + 1411), a4, a5, a6, a7, a8);
  v101 = v14;
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    v32 = *((_QWORD *)this + 46);
    if (v32)
    {
      v33 = (unsigned int *)(v32 + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 + 1, v33));
    }
    v12 = WTF::fastMalloc((WTF *)0x90);
    *(_QWORD *)v12 = 2;
    *(_DWORD *)(v12 + 96) = 0;
    *(_OWORD *)(v12 + 12) = 0u;
    *(_OWORD *)(v12 + 28) = 0u;
    *(_DWORD *)(v12 + 44) = 0;
    *(_QWORD *)(v12 + 64) = 0;
    *(_QWORD *)(v12 + 72) = 0;
    *(_QWORD *)(v12 + 56) = 0;
    *(_QWORD *)(v12 + 104) = 0;
    *(_QWORD *)(v12 + 112) = -1;
    *(_WORD *)(v12 + 120) = -1;
    *(_DWORD *)(v12 + 122) = 0x10000;
    *(_BYTE *)(v12 + 126) = 0;
    *(_BYTE *)(v12 + 127) = BYTE12(xmmword_1ECF4C260);
    *(_BYTE *)(v12 + 128) = 0;
    *(_WORD *)(v12 + 129) &= 0xFC00u;
    *(_QWORD *)(v12 + 136) = 0;
    *(_QWORD *)(v12 + 136) = *(_QWORD *)(v32 + 184);
    *(_QWORD *)(v32 + 184) = v12;
    v35 = (unsigned int *)(v32 + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (v36 == 1)
    {
      atomic_store(1u, (unsigned int *)(v32 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
    }
    v11 = 0;
    v102 = 0;
  }
  else
  {
    v102 = *((unsigned int *)this + 968);
    v12 = WTF::SegmentedVector<JSC::DFG::UnlinkedStructureStubInfo,8ul>::alloc<>((uint64_t)this + 3872);
    v11 = 2;
  }
  v14 = *((_QWORD *)this + 42);
  v20 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
    goto LABEL_90;
LABEL_40:
  v121 = v20;
  BYTE2(v99) = a9;
  BYTE1(v99) = a6;
  LOBYTE(v99) = a5;
  JSC::JITPutByIdGenerator::JITPutByIdGenerator((uint64_t)&v122, v14, v12, v11, 0, &v121, v13, (uint64_t)&v130, v103, v21, v104, v99);
  if ((v121 & 1) != 0 && (v121 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v121 & 0xFFFFFFFF8, v37, v38, v39, v40, v41, v42, v43);
  v117 = (WTF *)&v119;
  v118 = 2;
  v44 = *a10;
  if (*a10 != -1)
  {
    v120 = *(_QWORD *)(a10 + 1);
    HIDWORD(v118) = 1;
    v119 = v44;
  }
  v45 = a9 - 6;
  if ((a9 - 6) >= 0xC || ((0xA0Fu >> v45) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197B9D0B8);
  }
  v46 = off_1E3574858[v45];
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    JSC::JITByIdGenerator::generateFastCommon((JSC::JITByIdGenerator *)&v122, this, 40, v39, v40, v41, v42, v43);
    v111 = v128;
    v47 = v129;
    v112 = v129;
    v48 = HIDWORD(v118);
    if (v128 != -1)
    {
      v49 = (char *)v117 + 12 * HIDWORD(v118);
      *(_DWORD *)v49 = v128;
      *(_QWORD *)(v49 + 4) = v47;
      v48 = ++HIDWORD(v118);
    }
    v50 = v48;
    v106 = (WTF *)v109;
    v107 = 2;
    v108 = v48;
    if (v48 < 3)
    {
      v52 = v109;
      if (!v48)
        goto LABEL_56;
    }
    else
    {
      if (v48 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197B9D0E0);
      }
      v51 = 12 * v48;
      v52 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v48));
      v107 = (v51 & 0xFFFFFFFC) / 0xC;
      v106 = (WTF *)v52;
      v50 = HIDWORD(v118);
      if (!HIDWORD(v118))
      {
LABEL_56:
        v55 = *((_QWORD *)&v122 + 1);
        v56 = v108;
        *(_QWORD *)&v139 = v140;
        DWORD2(v139) = 2;
        HIDWORD(v139) = v108;
        if (v108 < 3)
        {
          v57 = v140;
          if (!v108)
            goto LABEL_62;
        }
        else
        {
          if (v108 >= 0x15555556)
          {
            __break(0xC471u);
            JUMPOUT(0x197B9D0E8);
          }
          v57 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v108));
          DWORD2(v139) = 12 * v108 / 0xC;
          *(_QWORD *)&v139 = v57;
          v56 = v108;
        }
        v58 = v106;
        v59 = (WTF *)((char *)v106 + 12 * v56);
        do
        {
          *(_DWORD *)v57 = *(_DWORD *)v58;
          *(_QWORD *)(v57 + 4) = *(_QWORD *)((char *)v58 + 4);
          v58 = (WTF *)((char *)v58 + 12);
          v57 += 12;
        }
        while (v58 != v59);
LABEL_62:
        v138 = v104;
        v137 = v21;
        v135 = this;
        v136 = v55;
        v134 = v46;
        v133 = 0;
        v132 = 0;
        std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag,JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<void> (*&)(long long,long long,JSC::StructureStubInfo *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::NoResultTag&,JSC::JSValueRegs&,JSC::CCallHelpers::CellValue&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&>(&v110, (uint64_t *)&v139, &v135, (uint64_t *)&v134, (unsigned __int8 *)&v133 + 1, (char *)&v133, &v132, (char *)&v138, &v137, &v136);
        v67 = v139;
        if (v140 != (_BYTE *)v139 && (_QWORD)v139)
        {
          *(_QWORD *)&v139 = 0;
          DWORD2(v139) = 0;
          WTF::fastFree(v67, v60, v61, v62, v63, v64, v65, v66);
        }
        v68 = v110;
        v69 = v106;
        if (v109 != (_BYTE *)v106 && v106)
        {
          v106 = 0;
          v107 = 0;
LABEL_76:
          WTF::fastFree((unint64_t)v69, v60, v61, v62, v63, v64, v65, v66);
          goto LABEL_77;
        }
        goto LABEL_77;
      }
    }
    v53 = v117;
    v54 = (WTF *)((char *)v117 + 12 * v50);
    do
    {
      *(_DWORD *)v52 = *(_DWORD *)v53;
      *(_QWORD *)(v52 + 4) = *(_QWORD *)((char *)v53 + 4);
      v53 = (WTF *)((char *)v53 + 12);
      v52 += 12;
    }
    while (v53 != v54);
    goto LABEL_56;
  }
  JSC::JITPutByIdGenerator::generateDFGDataICFastPath((uint64_t)&v122, (uint64_t)this, v102, v21, v104, a5, a6, v101);
  v113 = (WTF *)v116;
  v114 = 2;
  v115 = HIDWORD(v118);
  v70 = v116;
  if (HIDWORD(v118))
  {
    v71 = v117;
    v72 = (WTF *)((char *)v117 + 12 * HIDWORD(v118));
    do
    {
      *(_DWORD *)v70 = *(_DWORD *)v71;
      *(_QWORD *)(v70 + 4) = *(_QWORD *)((char *)v71 + 4);
      v71 = (WTF *)((char *)v71 + 12);
      v70 += 12;
    }
    while (v71 != v72);
  }
  JSC::DFG::slowPathICCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag,JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>((uint64_t *)&v139, (uint64_t *)&v113, this, v102, a5, a5 | 0x3000000000, (uint64_t)v46, v104, v21, SHIDWORD(v21), a5);
  v68 = v139;
  v69 = v113;
  if (v116 != (_BYTE *)v113 && v113 != 0)
  {
    v113 = 0;
    v114 = 0;
    goto LABEL_76;
  }
LABEL_77:
  v74 = (_QWORD *)((char *)this + 1528);
  v139 = v122;
  v140[0] = v123;
  v75 = v124;
  v76 = v125;
  v141 = v124;
  v142 = v125;
  v77 = HIDWORD(v125);
  v78 = v126;
  v143 = v126;
  v79 = HIDWORD(v126);
  v80 = v127;
  v144 = v127;
  v81 = v128;
  v145 = v128;
  v82 = v129;
  v146 = v129;
  v147 = v68;
  v83 = *((unsigned int *)this + 385);
  if ((_DWORD)v83 == *((_DWORD *)this + 384))
  {
    v92 = WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPutByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v74, v83 + 1, (unint64_t)&v139, v62, v63, v64, v65, v66);
    v93 = *((_QWORD *)this + 191) + ((unint64_t)*((unsigned int *)this + 385) << 6);
    v94 = *(_OWORD *)v92;
    *(_BYTE *)(v93 + 16) = *(_BYTE *)(v92 + 16);
    *(_OWORD *)v93 = v94;
    *(_DWORD *)(v93 + 20) = *(_DWORD *)(v92 + 20);
    *(_DWORD *)(v93 + 24) = *(_DWORD *)(v92 + 24);
    *(_DWORD *)(v93 + 28) = *(_DWORD *)(v92 + 28);
    *(_QWORD *)(v93 + 32) = *(_QWORD *)(v92 + 32);
    *(_WORD *)(v93 + 40) = *(_WORD *)(v92 + 40);
    *(_DWORD *)(v93 + 44) = *(_DWORD *)(v92 + 44);
    *(_QWORD *)(v93 + 48) = *(_QWORD *)(v92 + 48);
    *(_QWORD *)(v93 + 56) = *(_QWORD *)(v92 + 56);
  }
  else
  {
    v84 = v122;
    v85 = *v74 + (v83 << 6);
    *(_BYTE *)(v85 + 16) = v123;
    *(_OWORD *)v85 = v84;
    *(_DWORD *)(v85 + 20) = v75;
    *(_DWORD *)(v85 + 24) = v76;
    *(_DWORD *)(v85 + 28) = v77;
    *(_DWORD *)(v85 + 32) = v78;
    *(_DWORD *)(v85 + 36) = v79;
    *(_WORD *)(v85 + 40) = v80;
    *(_DWORD *)(v85 + 44) = v81;
    *(_QWORD *)(v85 + 48) = v82;
    *(_QWORD *)(v85 + 56) = v68;
  }
  ++*((_DWORD *)this + 385);
  v105 = v68;
  v86 = (_QWORD *)((char *)this + 5656);
  v87 = *((unsigned int *)this + 1417);
  if ((_DWORD)v87 == *((_DWORD *)this + 1416))
  {
    v89 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v86, v87 + 1, (unint64_t)&v105);
    v87 = *((unsigned int *)this + 1417);
    v88 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v87);
    v68 = *v89;
  }
  else
  {
    v88 = (uint64_t *)(*v86 + 8 * v87);
    v89 = &v105;
  }
  *v89 = 0;
  *v88 = v68;
  *((_DWORD *)this + 1417) = v87 + 1;
  v90 = v105;
  v105 = 0;
  if (v90)
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
  v91 = v117;
  if (&v119 != (int *)v117)
  {
    if (v117)
    {
      v117 = 0;
      LODWORD(v118) = 0;
      WTF::fastFree((unint64_t)v91, v60, v61, v62, v63, v64, v65, v66);
    }
  }
}

void JSC::DFG::SpeculativeJIT::compileCheckPrivateBrand(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t i;
  uint64_t v35;
  char *v36;
  uint64_t j;
  uint64_t v38;
  unsigned int v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  _DWORD *v82;
  char *v83;
  unsigned int v84;
  int v85;
  _BYTE *v86;
  WTF *v87;
  WTF *v88;
  uint64_t v89;
  unsigned int v90;
  _BYTE *v91;
  WTF *v92;
  WTF *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  WTF *v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF *v128;
  char v129;
  char v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  WTF *v140;
  BOOL v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  BOOL v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  WTF *v157;
  unsigned int v158;
  unsigned int v159;
  _BYTE v160[24];
  uint64_t v161;
  int v162;
  uint64_t v163;
  WTF *v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  char v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  _DWORD v178[3];
  WTF *v179;
  uint64_t v180;
  _BYTE v181[24];
  _QWORD v182[2];
  uint64_t v183;
  uint64_t v184;
  unsigned __int8 v185;
  char v186;
  int v187;
  __int16 v188;
  uint64_t (*v189)(JSC::JSCell *, uint64_t, uint64_t, JSC::Symbol *, uint64_t, uint64_t, uint64_t, uint64_t, double);
  _DWORD *v190;
  uint64_t v191;
  char v192;
  unsigned __int8 v193;
  __int128 v194;
  _BYTE v195[4];
  int v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t v201;

  LOBYTE(v184) = 0;
  v186 = 0;
  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_99;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_147;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_99:
    v13 = -1;
  v14 = *((_QWORD *)a2 + 4);
  v15 = v14 & 0xFF00FFFFFFFFFFFFLL;
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_101;
  v16 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v16 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_144;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v16 + 12))
    v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
  else
LABEL_101:
    v17 = -1;
  v155 = 255;
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
    goto LABEL_10;
  *(_QWORD *)&v194 = this;
  std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v184, (JSC::DFG::SpeculativeJIT **)&v194, a3, a4, a5, a6, a7, a8);
  if (!v186)
  {
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }
  v155 = v185;
LABEL_10:
  if (v13 == 0xFF)
    v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  if (v17 == -1)
    v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
  v18 = &v163;
  JSC::DFG::SpeculativeJIT::speculateSymbol((uint64_t)this, *((_QWORD *)a2 + 4), v17, a4, a5, a6, a7, a8);
  v24 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v61 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
    if ((v24 & 2) != 0
      || ((v24 = *(unsigned int *)((v24 & 0xFFFFFFFF8) + 8), (_DWORD)v24 != 0x3FFFFFFF)
        ? (v141 = (_DWORD)v24 == -1)
        : (v141 = 1),
          v141))
    {
      v142 = 2;
    }
    else
    {
      if (v24 >> 28)
        goto LABEL_138;
      v142 = v61;
      v61 = v24 << 36;
    }
    goto LABEL_119;
  }
  while (1)
  {
    v183 = v24;
    v31 = JSC::DFG::SpeculativeJIT::recordCallSiteAndGenerateExceptionHandlingOSRExitIfNeeded(this, (const JSC::CodeOrigin *)&v183, *((unsigned int *)this + 1411), v19, v20, v21, v22, v23);
    v32 = 0;
    v33 = (char *)this + 4776;
    for (i = 15; i != -1; --i)
    {
      if ((char)i <= 15)
        v35 = i;
      else
        v35 = 0xFFFFFFFFLL;
      if (*(_DWORD *)&v33[12 * v35 + 8] || *(_DWORD *)&v33[12 * v35] != 0x3FFFFFFF)
      {
        if ((i & 0x40) != 0)
          goto LABEL_144;
        v32 |= 1 << i;
      }
    }
    v36 = (char *)this + 4968;
    for (j = 0x16u; j != -1; --j)
    {
      v38 = JSC::FPRInfo::toRegister::registerForIndex[j];
      v39 = JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v38];
      if (*(_DWORD *)&v36[12 * v39 + 8] || *(_DWORD *)&v36[12 * v39] != 0x3FFFFFFF)
      {
        v40 = v38 + 32;
        if ((v40 & 0x40) != 0)
          goto LABEL_144;
        v32 |= 1 << v40;
      }
    }
    v154 = v11;
    v182[0] = v32 | 0xFF00FFFC0000;
    v182[1] = 0;
    v179 = (WTF *)v181;
    v180 = 2;
    v41 = *((_QWORD *)a2 + 3);
    v42 = *((_QWORD *)this + 702);
    v43 = *(_QWORD *)(v42 + 8);
    v44 = *(unsigned int *)((v41 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v45 = (_QWORD *)(v43 + 24);
    v46 = (_QWORD *)(v43 + 8);
    if ((v41 & 1) != 0)
      v47 = v45;
    else
      v47 = v46;
    v48 = *v47 + 32 * v44;
    v49 = (void *)*(unsigned int *)(v42 + 88);
    if ((_DWORD)v49 != *(_DWORD *)(v48 + 20))
    {
      if ((*(_QWORD *)(v48 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v48, v49, v25, v26, v27, v28, v29, v30);
      else
        *(_DWORD *)(v48 + 20) = (_DWORD)v49;
    }
    if ((*(_QWORD *)(v48 + 8) & 0xFFFFD7FF00000008) != 0)
    {
      JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v13, 1, v26, v27, v28, v29, v30, (uint64_t)v178);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v179, v178, v132, v133, v134, v135, v136, v137);
    }
    v153 = v15;
    if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
    {
      v50 = *((_QWORD *)this + 46);
      if (v50)
      {
        v51 = (unsigned int *)(v50 + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 + 1, v51));
      }
      v11 = WTF::fastMalloc((WTF *)0x90);
      *(_QWORD *)v11 = 2;
      *(_DWORD *)(v11 + 96) = 0;
      *(_OWORD *)(v11 + 12) = 0u;
      *(_OWORD *)(v11 + 28) = 0u;
      *(_DWORD *)(v11 + 44) = 0;
      *(_QWORD *)(v11 + 64) = 0;
      *(_QWORD *)(v11 + 72) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_QWORD *)(v11 + 104) = 0;
      *(_QWORD *)(v11 + 112) = -1;
      *(_WORD *)(v11 + 120) = -1;
      *(_DWORD *)(v11 + 122) = 0x10000;
      *(_BYTE *)(v11 + 126) = 0;
      *(_BYTE *)(v11 + 127) = BYTE12(xmmword_1ECF4C260);
      *(_BYTE *)(v11 + 128) = 0;
      *(_WORD *)(v11 + 129) &= 0xFC00u;
      *(_QWORD *)(v11 + 136) = 0;
      *(_QWORD *)(v11 + 136) = *(_QWORD *)(v50 + 184);
      *(_QWORD *)(v50 + 184) = v11;
      v53 = (unsigned int *)(v50 + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (v54 == 1)
      {
        atomic_store(1u, (unsigned int *)(v50 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 32))(v50);
      }
      v55 = 0;
      v56 = 0;
    }
    else
    {
      v56 = *((_DWORD *)this + 968);
      v11 = WTF::SegmentedVector<JSC::DFG::UnlinkedStructureStubInfo,8ul>::alloc<>((uint64_t)this + 3872);
      v55 = 2;
    }
    v175 = v11;
    LODWORD(v176) = v55;
    v177 = v56;
    v57 = *((_QWORD *)this + 42);
    v58 = v24;
    v59 = v176;
    if ((v24 & 1) != 0)
    {
      v143 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
      if ((v24 & 2) != 0
        || ((v144 = *(unsigned int *)((v24 & 0xFFFFFFFF8) + 8), (_DWORD)v144 != 0x3FFFFFFF)
          ? (v145 = (_DWORD)v144 == -1)
          : (v145 = 1),
            v145))
      {
        v146 = 2;
      }
      else if (v144 >> 28)
      {
        v151 = v176;
        v152 = *((_QWORD *)this + 42);
        v150 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
        v148 = WTF::fastMalloc((WTF *)0x10);
        v59 = v151;
        v57 = v152;
        *(_QWORD *)v148 = v150;
        *(_DWORD *)(v148 + 8) = v144;
        v146 = 1;
        v143 = v148;
      }
      else
      {
        v146 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
        v143 = v144 << 36;
      }
      v58 = v143 | v146;
    }
    v167 = v58;
    v60 = v31;
    v61 = v13;
    v15 = v17;
    LOBYTE(v149) = v155;
    JSC::JITPrivateBrandAccessGenerator::JITPrivateBrandAccessGenerator((uint64_t)&v168, v57, v11, v59, 0, &v167, v60, 29, (uint64_t)v182, v13, 0, v17, v149);
    if ((v167 & 1) != 0 && (v167 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v167 & 0xFFFFFFFF8, v62, v63, v64, v65, v66, v67, v68);
    if ((_DWORD)v176 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_138:
    v147 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v147 = v61;
    *(_DWORD *)(v147 + 8) = v24;
    v142 = 1;
    v61 = v147;
LABEL_119:
    v24 = v61 | v142;
  }
  *(_QWORD *)&v194 = &v191;
  ((void (*)(__int128 *, uint64_t *))off_1E3572AE0[v176])(&v194, &v175);
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    JSC::JITDelByValGenerator::generateFastPath((JSC::JITDelByValGenerator *)&v168, this, v69, v70, v71, v72, v73, v74);
    v80 = v173;
    v162 = v173;
    v163 = v174;
    v81 = HIDWORD(v180);
    if (v173 != -1)
    {
      if (HIDWORD(v180) == (_DWORD)v180)
      {
        v82 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v179, (void *)(HIDWORD(v180) + 1), (unint64_t)&v162, v75, v76, v77, v78, v79);
        v18 = (uint64_t *)(v82 + 1);
        v80 = *v82;
        v81 = HIDWORD(v180);
      }
      v83 = (char *)v179 + 12 * v81;
      *(_DWORD *)v83 = v80;
      *(_QWORD *)(v83 + 4) = *v18;
      v81 = ++HIDWORD(v180);
    }
    v84 = v81;
    v157 = (WTF *)v160;
    v158 = 2;
    v159 = v81;
    if (v81 < 3)
    {
      v86 = v160;
      goto LABEL_55;
    }
    if (v81 < 0x15555556)
    {
      v85 = 12 * v81;
      v86 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v81));
      v158 = (v85 & 0xFFFFFFFC) / 0xC;
      v157 = (WTF *)v86;
      v84 = HIDWORD(v180);
      v81 = HIDWORD(v180);
LABEL_55:
      if (v81)
      {
        v87 = v179;
        v88 = (WTF *)((char *)v179 + 12 * v84);
        do
        {
          *(_DWORD *)v86 = *(_DWORD *)v87;
          *(_QWORD *)(v86 + 4) = *(_QWORD *)((char *)v87 + 4);
          v87 = (WTF *)((char *)v87 + 12);
          v86 += 12;
        }
        while (v87 != v88);
      }
      v89 = *((_QWORD *)&v168 + 1);
      v90 = v159;
      *(_QWORD *)&v194 = v195;
      DWORD2(v194) = 2;
      HIDWORD(v194) = v159;
      if (v159 < 3)
      {
        v91 = v195;
        goto LABEL_61;
      }
      if (v159 < 0x15555556)
      {
        v91 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v159));
        DWORD2(v194) = 12 * v159 / 0xC;
        *(_QWORD *)&v194 = v91;
        v90 = v159;
LABEL_61:
        if (v90)
        {
          v92 = v157;
          v93 = (WTF *)((char *)v157 + 12 * v90);
          do
          {
            *(_DWORD *)v91 = *(_DWORD *)v92;
            *(_QWORD *)(v91 + 4) = *(_QWORD *)((char *)v92 + 4);
            v92 = (WTF *)((char *)v92 + 12);
            v91 += 12;
          }
          while (v92 != v93);
        }
        v193 = v13;
        v192 = v17;
        v190 = this;
        v191 = v89;
        v189 = operationCheckPrivateBrandOptimize;
        v188 = 0;
        v187 = 0;
        std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag,JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<void> (*&)(long long,long long,JSC::StructureStubInfo *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::NoResultTag&,JSC::JSValueRegs&,JSC::CCallHelpers::CellValue&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&>(&v161, (uint64_t *)&v194, &v190, (uint64_t *)&v189, (unsigned __int8 *)&v188 + 1, (char *)&v188, &v187, (char *)&v193, &v192, &v191);
        v101 = v194;
        if (v195 != (_BYTE *)v194 && (_QWORD)v194)
        {
          *(_QWORD *)&v194 = 0;
          DWORD2(v194) = 0;
          WTF::fastFree(v101, v94, v95, v96, v97, v98, v99, v100);
        }
        v102 = v161;
        v103 = v157;
        v105 = v153;
        v104 = v154;
        if (v160 != (_BYTE *)v157 && v157)
        {
          v157 = 0;
          v158 = 0;
          WTF::fastFree((unint64_t)v103, v94, v95, v96, v97, v98, v99, v100);
        }
        goto LABEL_70;
      }
      __break(0xC471u);
LABEL_147:
      JUMPOUT(0x197B9DB8CLL);
    }
LABEL_145:
    __break(0xC471u);
    JUMPOUT(0x197B9DB9CLL);
  }
  JSC::JITInlineCacheGenerator::generateDFGDataICFastPath((uint64_t)&v168, (uint64_t)this, v177, (char)v155, v71, v72, v73, v74);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v164, (uint64_t *)&v179);
  JSC::DFG::slowPathICCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag,JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>((uint64_t *)&v194, (uint64_t *)&v164, this, v177, v155, v155 | 0x3000000000, (uint64_t)operationCheckPrivateBrandOptimize, v13, v17, 0, v155);
  v102 = v194;
  v140 = v164;
  if (&v166 != (uint64_t *)v164 && v164)
  {
    v164 = 0;
    v165 = 0;
    WTF::fastFree((unint64_t)v140, v138, v139, v96, v97, v98, v99, v100);
  }
  v105 = v153;
  v104 = v154;
LABEL_70:
  v194 = v168;
  v195[0] = v169;
  v106 = v170;
  v107 = v171;
  v196 = v170;
  v197 = v171;
  v108 = HIDWORD(v171);
  v109 = v172;
  v198 = v172;
  v110 = HIDWORD(v172);
  v111 = v173;
  v199 = v173;
  v112 = v174;
  v200 = v174;
  v201 = v102;
  v113 = *((unsigned int *)this + 861);
  if ((_DWORD)v113 == *((_DWORD *)this + 860))
  {
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPrivateBrandAccessGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::InlineCacheWrapper<JSC::JITPrivateBrandAccessGenerator>>((uint64_t)this + 3432, (unint64_t)&v194);
  }
  else
  {
    v114 = *((_QWORD *)this + 429) + (v113 << 6);
    v115 = v168;
    *(_BYTE *)(v114 + 16) = v169;
    *(_OWORD *)v114 = v115;
    *(_DWORD *)(v114 + 20) = v106;
    *(_DWORD *)(v114 + 24) = v107;
    *(_DWORD *)(v114 + 28) = v108;
    *(_DWORD *)(v114 + 32) = v109;
    *(_DWORD *)(v114 + 36) = v110;
    *(_DWORD *)(v114 + 40) = v111;
    *(_QWORD *)(v114 + 44) = v112;
    *(_QWORD *)(v114 + 56) = v102;
    ++*((_DWORD *)this + 861);
  }
  v156 = v102;
  v116 = (_QWORD *)((char *)this + 5656);
  v117 = *((unsigned int *)this + 1417);
  if ((_DWORD)v117 == *((_DWORD *)this + 1416))
  {
    v119 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v116, v117 + 1, (unint64_t)&v156);
    v117 = *((unsigned int *)this + 1417);
    v118 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v117);
    v102 = *v119;
  }
  else
  {
    v118 = (uint64_t *)(*v116 + 8 * v117);
    v119 = &v156;
  }
  *v119 = 0;
  *v118 = v102;
  *((_DWORD *)this + 1417) = v117 + 1;
  v120 = v156;
  v156 = 0;
  if (v120)
    (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
  JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v96, v97, v98, v99, v100);
  v128 = v179;
  if (v181 != (_BYTE *)v179 && v179)
  {
    v179 = 0;
    LODWORD(v180) = 0;
    WTF::fastFree((unint64_t)v128, v121, v122, v123, v124, v125, v126, v127);
  }
  if ((v24 & 1) != 0 && (v24 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v24 & 0xFFFFFFFF8, v121, v122, v123, v124, v125, v126, v127);
  if (v105)
  {
    if (v17 > 15)
      v129 = -1;
    else
      v129 = v17;
    --*(_DWORD *)&v33[12 * v129 + 8];
  }
  if (v104)
  {
    if ((char)v13 > 15)
      v130 = -1;
    else
      v130 = v13;
    --*(_DWORD *)&v33[12 * v130 + 8];
  }
  if (v186)
  {
    if (v184)
    {
      v131 = (char)v185;
      if ((char)v185 != -1)
      {
        if ((char)v185 > 15)
          v131 = -1;
        --*(_DWORD *)(v184 + 12 * v131 + 4784);
      }
    }
  }
}

void JSC::DFG::slowPathICCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag,JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>(uint64_t *a1, uint64_t *a2, _DWORD *a3, int a4, char a5, uint64_t a6, uint64_t a7, char a8, char a9, int a10, char a11)
{
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _BYTE *v25;
  WTF *v26;
  WTF *v27;
  char v28;
  unsigned int v29;
  uint64_t *v30;
  int v31;
  int v32;
  _BYTE *v33;
  WTF *v34;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  WTF *v45;
  WTF *v46;
  unsigned int v47;
  _BYTE v48[24];
  WTF *v49;
  unsigned int v50;
  unsigned int v51;
  _BYTE v52[24];
  WTF *v53;
  unsigned int v54;
  unsigned int v55;
  _BYTE v56[24];

  v19 = *((unsigned int *)a2 + 3);
  v46 = (WTF *)v48;
  v47 = v19;
  if (v19 < 3)
  {
    v20 = v48;
  }
  else
  {
    if (v19 >= 0x15555556)
      goto LABEL_36;
    v20 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v19));
    v46 = (WTF *)v20;
    LODWORD(v19) = *((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v19)
  {
    v21 = *a2;
    v22 = *a2 + 12 * v19;
    do
    {
      *(_DWORD *)v20 = *(_DWORD *)v21;
      *(_QWORD *)(v20 + 4) = *(_QWORD *)(v21 + 4);
      v21 += 12;
      v20 += 12;
    }
    while (v21 != v22);
  }
  v23 = WTF::fastMalloc((WTF *)0xC0);
  v24 = v47;
  v49 = (WTF *)v52;
  v50 = 2;
  v51 = v47;
  if (v47 < 3)
  {
    v25 = v52;
  }
  else
  {
    if (v47 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197B9DEBCLL);
    }
    v25 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v47));
    v50 = 12 * v47 / 0xC;
    v49 = (WTF *)v25;
    v24 = v47;
  }
  if (v24)
  {
    v26 = v46;
    v27 = (WTF *)((char *)v46 + 12 * v24);
    do
    {
      *(_DWORD *)v25 = *(_DWORD *)v26;
      *(_QWORD *)(v25 + 4) = *(_QWORD *)((char *)v26 + 4);
      v26 = (WTF *)((char *)v26 + 12);
      v25 += 12;
    }
    while (v26 != v27);
  }
  v28 = a5;
  v29 = v51;
  v53 = (WTF *)v56;
  v54 = 2;
  v55 = v51;
  if (v51 >= 3)
  {
    if (v51 < 0x15555556)
    {
      v30 = a1;
      v31 = a4;
      v32 = 12 * v51;
      v33 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v51));
      v54 = (v32 & 0xFFFFFFFC) / 0xC;
      v53 = (WTF *)v33;
      v29 = v51;
      goto LABEL_19;
    }
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x197B9DEB4);
  }
  v30 = a1;
  v31 = a4;
  v33 = v56;
LABEL_19:
  if (v29)
  {
    v34 = v49;
    v35 = (WTF *)((char *)v49 + 12 * v29);
    do
    {
      *(_DWORD *)v33 = *(_DWORD *)v34;
      *(_QWORD *)(v33 + 4) = *(_QWORD *)((char *)v34 + 4);
      v34 = (WTF *)((char *)v34 + 12);
      v33 += 12;
    }
    while (v34 != v35);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag>::CallSlowPathGenerator(v23, (uint64_t *)&v53, a3, 0, 0, 0);
  v43 = v53;
  if (v56 != (_BYTE *)v53 && v53 != 0)
  {
    v53 = 0;
    v54 = 0;
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  }
  *(_QWORD *)v23 = &off_1E35732D0;
  *(_BYTE *)(v23 + 160) = v28;
  *(_QWORD *)(v23 + 164) = a6;
  *(_QWORD *)(v23 + 176) = a7;
  *(_BYTE *)(v23 + 184) = a8;
  *(_BYTE *)(v23 + 185) = a9;
  *(_BYTE *)(v23 + 186) = a11;
  *(_DWORD *)(v23 + 188) = v31;
  *v30 = v23;
  v45 = v49;
  if (v52 != (_BYTE *)v49 && v49)
  {
    v49 = 0;
    v50 = 0;
    WTF::fastFree((unint64_t)v45, v36, v37, v38, v39, v40, v41, v42);
  }
  if (v48 != (_BYTE *)v46)
  {
    if (v46)
      WTF::fastFree((unint64_t)v46, v36, v37, v38, v39, v40, v41, v42);
  }
}

void JSC::DFG::JITCompiler::addPrivateBrandAccess(uint64_t a1, __int128 *a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  char v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v13 = *a2;
  v14 = *((_BYTE *)a2 + 16);
  v3 = *((_DWORD *)a2 + 5);
  v4 = *((_DWORD *)a2 + 6);
  v15 = v3;
  v16 = v4;
  v5 = *((_DWORD *)a2 + 7);
  v6 = *((_DWORD *)a2 + 8);
  v17 = v5;
  v18 = v6;
  v7 = *((_DWORD *)a2 + 9);
  v8 = *((_DWORD *)a2 + 10);
  v19 = v7;
  v20 = v8;
  v9 = *(_QWORD *)((char *)a2 + 44);
  v21 = v9;
  v22 = a3;
  v10 = *(unsigned int *)(a1 + 3444);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 3440))
  {
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPrivateBrandAccessGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::InlineCacheWrapper<JSC::JITPrivateBrandAccessGenerator>>(a1 + 3432, (unint64_t)&v13);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 3432) + (v10 << 6);
    v12 = *a2;
    *(_BYTE *)(v11 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)v11 = v12;
    *(_DWORD *)(v11 + 20) = v3;
    *(_DWORD *)(v11 + 24) = v4;
    *(_DWORD *)(v11 + 28) = v5;
    *(_DWORD *)(v11 + 32) = v6;
    *(_DWORD *)(v11 + 36) = v7;
    *(_DWORD *)(v11 + 40) = v8;
    *(_QWORD *)(v11 + 44) = v9;
    *(_QWORD *)(v11 + 56) = a3;
    ++*(_DWORD *)(a1 + 3444);
  }
}

void JSC::DFG::SpeculativeJIT::compileSetPrivateBrand(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::Node *v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t i;
  uint64_t v30;
  char *v31;
  uint64_t j;
  uint64_t v33;
  unsigned int v34;
  char v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  _DWORD *v67;
  char *v68;
  unsigned int v69;
  int v70;
  _BYTE *v71;
  unsigned int v72;
  int v73;
  _BYTE *v74;
  WTF *v75;
  WTF *v76;
  uint64_t v77;
  unsigned int v78;
  _BYTE *v79;
  WTF *v80;
  WTF *v81;
  uint64_t v82;
  unsigned int v83;
  _BYTE *v84;
  _BYTE *v85;
  _BYTE *v86;
  unsigned int v87;
  _BYTE *v88;
  _BYTE *v89;
  _BYTE *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v100;
  unint64_t v101;
  WTF *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int *v105;
  WTF *v106;
  WTF *v107;
  unsigned int v108;
  int v109;
  _BYTE *v110;
  WTF *v111;
  WTF *v112;
  unsigned int v113;
  _BYTE *v114;
  _BYTE *v115;
  _BYTE *v116;
  unsigned int v117;
  char v118;
  _BYTE *v119;
  _BYTE *v120;
  _BYTE *v121;
  unint64_t v122;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF *v143;
  char v144;
  char v145;
  unsigned int v146;
  BOOL v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  JSC::DFG::Node *v160;
  uint64_t v161;
  unint64_t v162;
  WTF *v163;
  uint64_t v164;
  WTF *v165;
  unsigned int v166;
  unsigned int v167;
  _BYTE v168[28];
  int v169;
  uint64_t v170;
  WTF *v171;
  unsigned int v172;
  unsigned int v173;
  _BYTE v174[24];
  uint64_t v175;
  __int128 v176[2];
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  WTF *v182;
  uint64_t v183;
  _BYTE v184[24];
  _QWORD v185[2];
  uint64_t v186;
  uint64_t v187;
  unsigned __int8 v188;
  char v189;
  _BYTE *v190;
  unsigned int v191;
  unsigned int v192;
  _BYTE v193[24];
  _BYTE *v194;
  unsigned int v195;
  unsigned int v196;
  _BYTE v197[24];
  _BYTE *v198;
  unsigned int v199;
  unsigned int v200;
  _BYTE v201[32];

  v8 = a2;
  LOBYTE(v187) = 0;
  v189 = 0;
  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_135;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_202;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_135:
    v13 = 255;
  v14 = *((_QWORD *)v8 + 4);
  v162 = v14 & 0xFF00FFFFFFFFFFFFLL;
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_136;
  v15 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_193:
    __break(1u);
    goto LABEL_194;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12))
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
  else
LABEL_136:
    v16 = 255;
  v17 = 255;
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) == 0)
  {
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v187, this, a3, a4, a5, a6, a7, a8);
    v189 = 1;
    v17 = v188;
  }
  if ((_BYTE)v13 == 0xFF)
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  if ((_BYTE)v16 == 0xFF)
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
  v18 = &v170;
  v163 = (WTF *)v16;
  v19 = (char)v16;
  JSC::DFG::SpeculativeJIT::speculateSymbol((uint64_t)this, *((_QWORD *)v8 + 4), (char)v16, a4, a5, a6, a7, a8);
  v25 = *(_QWORD *)v8;
  if ((*(_QWORD *)v8 & 1) != 0)
  {
    LODWORD(v28) = (char)v16;
    v46 = v13;
    v41 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
    if ((v25 & 2) != 0
      || ((v13 = *(unsigned int *)((v25 & 0xFFFFFFFF8) + 8), (_DWORD)v13 != 0x3FFFFFFF)
        ? (v147 = (_DWORD)v13 == -1)
        : (v147 = 1),
          v147))
    {
      v148 = 2;
    }
    else
    {
      if (v13 >> 28)
        goto LABEL_189;
      v148 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
      v41 = v13 << 36;
    }
    goto LABEL_183;
  }
  while (1)
  {
    v186 = v25;
    v26 = JSC::DFG::SpeculativeJIT::recordCallSiteAndGenerateExceptionHandlingOSRExitIfNeeded(this, (const JSC::CodeOrigin *)&v186, *((unsigned int *)this + 1411), v20, v21, v22, v23, v24);
    v27 = 0;
    v28 = (char *)this + 4776;
    for (i = 15; i != -1; --i)
    {
      if ((char)i <= 15)
        v30 = i;
      else
        v30 = 0xFFFFFFFFLL;
      if (*(_DWORD *)&v28[12 * v30 + 8] || *(_DWORD *)&v28[12 * v30] != 0x3FFFFFFF)
      {
        if ((i & 0x40) != 0)
          goto LABEL_193;
        v27 |= 1 << i;
      }
    }
    v31 = (char *)this + 4968;
    for (j = 0x16u; j != -1; --j)
    {
      v33 = JSC::FPRInfo::toRegister::registerForIndex[j];
      v34 = JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v33];
      if (*(_DWORD *)&v31[12 * v34 + 8] || *(_DWORD *)&v31[12 * v34] != 0x3FFFFFFF)
      {
        v35 = v33 + 32;
        if ((v35 & 0x40) != 0)
          goto LABEL_193;
        v27 |= 1 << v35;
      }
    }
    v185[0] = v27 | 0xFF00FFFC0000;
    v185[1] = 0;
    v160 = v8;
    v182 = (WTF *)v184;
    v183 = 2;
    v161 = v11;
    v158 = v19;
    if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
    {
      v8 = (JSC::DFG::Node *)*((_QWORD *)this + 46);
      if (v8)
      {
        v36 = (unsigned int *)((char *)v8 + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 + 1, v36));
      }
      v11 = WTF::fastMalloc((WTF *)0x90);
      *(_QWORD *)v11 = 2;
      *(_DWORD *)(v11 + 96) = 0;
      *(_OWORD *)(v11 + 12) = 0u;
      *(_OWORD *)(v11 + 28) = 0u;
      *(_DWORD *)(v11 + 44) = 0;
      *(_QWORD *)(v11 + 64) = 0;
      *(_QWORD *)(v11 + 72) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_QWORD *)(v11 + 104) = 0;
      *(_QWORD *)(v11 + 112) = -1;
      *(_WORD *)(v11 + 120) = -1;
      *(_DWORD *)(v11 + 122) = 0x10000;
      *(_BYTE *)(v11 + 126) = 0;
      *(_BYTE *)(v11 + 127) = BYTE12(xmmword_1ECF4C260);
      *(_BYTE *)(v11 + 128) = 0;
      *(_WORD *)(v11 + 129) &= 0xFC00u;
      *(_QWORD *)(v11 + 136) = 0;
      *(_QWORD *)(v11 + 136) = *((_QWORD *)v8 + 23);
      *((_QWORD *)v8 + 23) = v11;
      v38 = (unsigned int *)((char *)v8 + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (v39 == 1)
      {
        atomic_store(1u, (unsigned int *)v8 + 2);
        (*(void (**)(JSC::DFG::Node *))(*(_QWORD *)v8 + 32))(v8);
      }
      v40 = 0;
      v41 = 0;
    }
    else
    {
      v41 = *((unsigned int *)this + 968);
      v11 = WTF::SegmentedVector<JSC::DFG::UnlinkedStructureStubInfo,8ul>::alloc<>((uint64_t)this + 3872);
      v40 = 2;
    }
    v179 = v11;
    LODWORD(v180) = v40;
    v181 = v41;
    v42 = *((_QWORD *)this + 42);
    v43 = v25;
    v44 = v180;
    if ((v25 & 1) != 0)
    {
      v8 = (JSC::DFG::Node *)v13;
      v41 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
      if ((v25 & 2) != 0
        || ((v149 = *(unsigned int *)((v25 & 0xFFFFFFFF8) + 8), (_DWORD)v149 != 0x3FFFFFFF)
          ? (v150 = (_DWORD)v149 == -1)
          : (v150 = 1),
            v150))
      {
        v151 = 2;
      }
      else if (v149 >> 28)
      {
        v156 = v180;
        v157 = *((_QWORD *)this + 42);
        v153 = WTF::fastMalloc((WTF *)0x10);
        v44 = v156;
        v42 = v157;
        *(_QWORD *)v153 = v41;
        *(_DWORD *)(v153 + 8) = v149;
        v151 = 1;
        v41 = v153;
      }
      else
      {
        v151 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
        v41 = v149 << 36;
      }
      v43 = v41 | v151;
      LODWORD(v13) = (_DWORD)v8;
    }
    v175 = v43;
    v45 = v26;
    v46 = (uint64_t)v163;
    LOBYTE(v154) = v17;
    JSC::JITPrivateBrandAccessGenerator::JITPrivateBrandAccessGenerator((uint64_t)v176, v42, v11, v44, 0, &v175, v45, 30, (uint64_t)v185, v13, 0, (char)v163, v154);
    if ((v175 & 1) != 0 && (v175 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v175 & 0xFFFFFFFF8, v47, v48, v49, v50, v51, v52, v53);
    if ((_DWORD)v180 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_189:
    v152 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v152 = v41;
    *(_DWORD *)(v152 + 8) = v13;
    v148 = 1;
    v41 = v152;
LABEL_183:
    v25 = v41 | v148;
    v13 = v46;
    v19 = (int)v28;
  }
  v198 = &v194;
  ((void (*)(_BYTE **, uint64_t *))off_1E3572AF8[v180])(&v198, &v179);
  v159 = v25;
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    JSC::JITDelByValGenerator::generateFastPath((JSC::JITDelByValGenerator *)v176, this, v54, v55, v56, v57, v58, v59);
    v65 = v177;
    v169 = v177;
    v170 = v178;
    v66 = HIDWORD(v183);
    if (v177 != -1)
    {
      if (HIDWORD(v183) == (_DWORD)v183)
      {
        v67 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v182, (void *)(HIDWORD(v183) + 1), (unint64_t)&v169, v60, v61, v62, v63, v64);
        v18 = (uint64_t *)(v67 + 1);
        v65 = *v67;
        v66 = HIDWORD(v183);
      }
      v68 = (char *)v182 + 12 * v66;
      *(_DWORD *)v68 = v65;
      *(_QWORD *)(v68 + 4) = *v18;
      v66 = ++HIDWORD(v183);
    }
    v69 = v66;
    v165 = (WTF *)v168;
    v166 = 2;
    v167 = v66;
    if (v66 < 3)
    {
      v71 = v168;
      if (!v66)
        goto LABEL_61;
LABEL_59:
      v75 = v182;
      v76 = (WTF *)((char *)v182 + 12 * v69);
      do
      {
        *(_DWORD *)v71 = *(_DWORD *)v75;
        *(_QWORD *)(v71 + 4) = *(_QWORD *)((char *)v75 + 4);
        v75 = (WTF *)((char *)v75 + 12);
        v71 += 12;
      }
      while (v75 != v76);
LABEL_61:
      v77 = *((_QWORD *)&v176[0] + 1);
      v78 = v167;
      v190 = v193;
      v191 = 2;
      v192 = v167;
      if (v167 < 3)
      {
        v79 = v193;
        if (!v167)
          goto LABEL_67;
      }
      else
      {
        if (v167 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197B9ED6CLL);
        }
        v79 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v167));
        v191 = 12 * v167 / 0xC;
        v190 = v79;
        v78 = v167;
      }
      v80 = v165;
      v81 = (WTF *)((char *)v165 + 12 * v78);
      do
      {
        *(_DWORD *)v79 = *(_DWORD *)v80;
        *(_QWORD *)(v79 + 4) = *(_QWORD *)((char *)v80 + 4);
        v80 = (WTF *)((char *)v80 + 12);
        v79 += 12;
      }
      while (v80 != v81);
LABEL_67:
      v82 = WTF::fastMalloc((WTF *)0xB8);
      v83 = v192;
      v194 = v197;
      v195 = 2;
      v196 = v192;
      if (v192 < 3)
      {
        v84 = v197;
      }
      else
      {
        if (v192 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197B9ED74);
        }
        LODWORD(v46) = 12 * v192;
        v84 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v192));
        v195 = (v46 & 0xFFFFFFFC) / 0xC;
        v194 = v84;
        v83 = v192;
        LOBYTE(v46) = (_BYTE)v163;
      }
      if (v83)
      {
        v85 = v190;
        v86 = &v190[12 * v83];
        do
        {
          *(_DWORD *)v84 = *(_DWORD *)v85;
          *(_QWORD *)(v84 + 4) = *(_QWORD *)(v85 + 4);
          v85 += 12;
          v84 += 12;
        }
        while (v85 != v86);
      }
      v87 = v196;
      v198 = v201;
      v199 = 2;
      v200 = v196;
      if (v196 < 3)
      {
        v88 = v201;
        if (!v196)
          goto LABEL_81;
      }
      else
      {
        if (v196 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197B9ED7CLL);
        }
        LODWORD(v46) = 12 * v196;
        v88 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v196));
        v199 = (v46 & 0xFFFFFFFC) / 0xC;
        v198 = v88;
        v87 = v196;
        LOBYTE(v46) = (_BYTE)v163;
        if (!v196)
          goto LABEL_81;
      }
      v89 = v194;
      v90 = &v194[12 * v87];
      do
      {
        *(_DWORD *)v88 = *(_DWORD *)v89;
        *(_QWORD *)(v88 + 4) = *(_QWORD *)(v89 + 4);
        v89 += 12;
        v88 += 12;
      }
      while (v89 != v90);
LABEL_81:
      JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag>::CallSlowPathGenerator(v82, (uint64_t *)&v198, this, 0, 0, 0);
      v98 = (unint64_t)v198;
      if (v201 != v198 && v198 != 0)
      {
        v198 = 0;
        v199 = 0;
        WTF::fastFree(v98, v91, v92, v93, v94, v95, v96, v97);
      }
      *(_QWORD *)v82 = &off_1E3573390;
      *(_QWORD *)(v82 + 160) = operationSetPrivateBrandOptimize;
      *(_BYTE *)(v82 + 168) = v13;
      *(_BYTE *)(v82 + 169) = v46;
      *(_QWORD *)(v82 + 176) = v77;
      v100 = (unint64_t)v194;
      if (v197 != v194 && v194)
      {
        v194 = 0;
        v195 = 0;
        WTF::fastFree(v100, v91, v92, v93, v94, v95, v96, v97);
      }
      v101 = (unint64_t)v190;
      v25 = v159;
      if (v193 != v190 && v190)
      {
        v190 = 0;
        v191 = 0;
        WTF::fastFree(v101, v91, v92, v93, v94, v95, v96, v97);
      }
      v102 = v165;
      v103 = v161;
      if (v168 != (_BYTE *)v165)
      {
        v104 = (uint64_t)v160;
        if (!v165)
          goto LABEL_137;
        v105 = &v166;
        v165 = 0;
        goto LABEL_133;
      }
      v104 = (uint64_t)v160;
      goto LABEL_137;
    }
    if (v66 < 0x15555556)
    {
      v70 = 12 * v66;
      v71 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v66));
      v166 = (v70 & 0xFFFFFFFC) / 0xC;
      v165 = (WTF *)v71;
      v69 = HIDWORD(v183);
      if (!HIDWORD(v183))
        goto LABEL_61;
      goto LABEL_59;
    }
LABEL_194:
    __break(0xC471u);
    JUMPOUT(0x197B9ED64);
  }
  JSC::JITInlineCacheGenerator::generateDFGDataICFastPath((uint64_t)v176, (uint64_t)this, v181, (char)v17, v56, v57, v58, v59);
  v72 = HIDWORD(v183);
  v171 = (WTF *)v174;
  v172 = 2;
  v173 = HIDWORD(v183);
  if (HIDWORD(v183) < 3)
  {
    v74 = v174;
    if (!HIDWORD(v183))
      goto LABEL_98;
    goto LABEL_96;
  }
  if (HIDWORD(v183) >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x197B9ED84);
  }
  v73 = 12 * HIDWORD(v183);
  v74 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v183)));
  v172 = (v73 & 0xFFFFFFFC) / 0xC;
  v171 = (WTF *)v74;
  v72 = HIDWORD(v183);
  if (HIDWORD(v183))
  {
LABEL_96:
    v106 = v182;
    v107 = (WTF *)((char *)v182 + 12 * v72);
    do
    {
      *(_DWORD *)v74 = *(_DWORD *)v106;
      *(_QWORD *)(v74 + 4) = *(_QWORD *)((char *)v106 + 4);
      v106 = (WTF *)((char *)v106 + 12);
      v74 += 12;
    }
    while (v106 != v107);
  }
LABEL_98:
  v155 = v181;
  v108 = v173;
  v190 = v193;
  v191 = 2;
  v192 = v173;
  if (v173 < 3)
  {
    v110 = v193;
  }
  else
  {
    if (v173 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197B9ED8CLL);
    }
    v109 = 12 * v173;
    v110 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v173));
    v191 = (v109 & 0xFFFFFFFC) / 0xC;
    v190 = v110;
    v108 = v173;
  }
  if (v108)
  {
    v111 = v171;
    v112 = (WTF *)((char *)v171 + 12 * v108);
    do
    {
      *(_DWORD *)v110 = *(_DWORD *)v111;
      *(_QWORD *)(v110 + 4) = *(_QWORD *)((char *)v111 + 4);
      v111 = (WTF *)((char *)v111 + 12);
      v110 += 12;
    }
    while (v111 != v112);
  }
  v82 = WTF::fastMalloc((WTF *)0xC0);
  v113 = v192;
  v194 = v197;
  v195 = 2;
  v196 = v192;
  if (v192 < 3)
  {
    v114 = v197;
  }
  else
  {
    if (v192 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197B9ED94);
    }
    LODWORD(v46) = 12 * v192;
    v114 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v192));
    v195 = (v46 & 0xFFFFFFFC) / 0xC;
    v194 = v114;
    v113 = v192;
    LOBYTE(v46) = (_BYTE)v163;
  }
  if (v113)
  {
    v115 = v190;
    v116 = &v190[12 * v113];
    do
    {
      *(_DWORD *)v114 = *(_DWORD *)v115;
      *(_QWORD *)(v114 + 4) = *(_QWORD *)(v115 + 4);
      v115 += 12;
      v114 += 12;
    }
    while (v115 != v116);
  }
  v117 = v196;
  v198 = v201;
  v199 = 2;
  v200 = v196;
  if (v196 >= 3)
  {
    if (v196 < 0x15555556)
    {
      v118 = v13;
      LODWORD(v46) = 12 * v196;
      v119 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v196));
      v199 = (v46 & 0xFFFFFFFC) / 0xC;
      v198 = v119;
      v117 = v196;
      LOBYTE(v46) = (_BYTE)v163;
      goto LABEL_116;
    }
    __break(0xC471u);
LABEL_202:
    JUMPOUT(0x197B9ED54);
  }
  v118 = v13;
  v119 = v201;
LABEL_116:
  if (v117)
  {
    v120 = v194;
    v121 = &v194[12 * v117];
    do
    {
      *(_DWORD *)v119 = *(_DWORD *)v120;
      *(_QWORD *)(v119 + 4) = *(_QWORD *)(v120 + 4);
      v120 += 12;
      v119 += 12;
    }
    while (v120 != v121);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag>::CallSlowPathGenerator(v82, (uint64_t *)&v198, this, 0, 0, 0);
  v122 = (unint64_t)v198;
  if (v201 != v198 && v198 != 0)
  {
    v198 = 0;
    v199 = 0;
    WTF::fastFree(v122, v91, v92, v93, v94, v95, v96, v97);
  }
  *(_QWORD *)v82 = &off_1E3573360;
  *(_BYTE *)(v82 + 160) = v17;
  *(_QWORD *)(v82 + 164) = v17 | 0x3000000000;
  *(_QWORD *)(v82 + 176) = operationSetPrivateBrandOptimize;
  LOBYTE(v13) = v118;
  *(_BYTE *)(v82 + 184) = v118;
  *(_BYTE *)(v82 + 185) = v46;
  *(_BYTE *)(v82 + 186) = v17;
  *(_DWORD *)(v82 + 188) = v155;
  v124 = (unint64_t)v194;
  if (v197 != v194 && v194)
  {
    v194 = 0;
    v195 = 0;
    WTF::fastFree(v124, v91, v92, v93, v94, v95, v96, v97);
  }
  v125 = (unint64_t)v190;
  v104 = (uint64_t)v160;
  if (v193 != v190 && v190)
  {
    v190 = 0;
    v191 = 0;
    WTF::fastFree(v125, v91, v92, v93, v94, v95, v96, v97);
  }
  v102 = v171;
  v103 = v161;
  if (v174 != (_BYTE *)v171 && v171)
  {
    v105 = &v172;
    v171 = 0;
LABEL_133:
    *v105 = 0;
    WTF::fastFree((unint64_t)v102, v91, v92, v93, v94, v95, v96, v97);
  }
LABEL_137:
  JSC::DFG::JITCompiler::addPrivateBrandAccess((uint64_t)this, v176, v82);
  v164 = v82;
  v131 = (_QWORD *)((char *)this + 5656);
  v132 = *((unsigned int *)this + 1417);
  if ((_DWORD)v132 == *((_DWORD *)this + 1416))
  {
    v134 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v131, v132 + 1, (unint64_t)&v164);
    v132 = *((unsigned int *)this + 1417);
    v133 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v132);
    v82 = *v134;
  }
  else
  {
    v133 = (uint64_t *)(*v131 + 8 * v132);
    v134 = &v164;
  }
  *v134 = 0;
  *v133 = v82;
  *((_DWORD *)this + 1417) = v132 + 1;
  v135 = v164;
  v164 = 0;
  if (v135)
    (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
  JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, v104, 0, v126, v127, v128, v129, v130);
  v143 = v182;
  if (v184 != (_BYTE *)v182 && v182)
  {
    v182 = 0;
    LODWORD(v183) = 0;
    WTF::fastFree((unint64_t)v143, v136, v137, v138, v139, v140, v141, v142);
  }
  if ((v25 & 1) != 0 && (v25 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v25 & 0xFFFFFFFF8, v136, v137, v138, v139, v140, v141, v142);
  if (v162)
  {
    if (v158 > 15)
      v144 = -1;
    else
      v144 = v46;
    --*(_DWORD *)&v28[12 * v144 + 8];
  }
  if (v103)
  {
    if ((char)v13 > 15)
      v145 = -1;
    else
      v145 = v13;
    --*(_DWORD *)&v28[12 * v145 + 8];
  }
  if (v189)
  {
    if (v187)
    {
      v146 = (char)v188;
      if ((char)v188 != -1)
      {
        if ((char)v188 > 15)
          v146 = -1;
        --*(_DWORD *)(v187 + 12 * v146 + 4784);
      }
    }
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compileCheckTypeInfoFlags(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x8_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unsigned int v26;
  int v27[3];

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x197B9EEF4);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12)
    || (v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        v13 == -1))
  {
LABEL_5:
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  }
  if (!*((_BYTE *)this + 212))
    goto LABEL_16;
  if (*((_DWORD *)a2 + 18) == -1)
    v14 = 0xFFFFFFFFLL;
  else
    v14 = *((_DWORD *)a2 + 18);
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v13 | 0x600000000, *((char *)this + 304), a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)v14, (uint64_t)this, 0, 17, v15, v16, v17, v18, (uint64_t)v27, v19);
  JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 8uLL, (JSC::DFG::Node *)0xFF80000000, 0, v27);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v20, v21, v22, v23, v24);
  if (v11)
  {
    if (v13 > 15)
      v26 = -1;
    else
      v26 = v13;
    --*((_DWORD *)this + 3 * v26 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileParseInt(JSC::DFG::Graph **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::SpeculativeJIT *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  JSC::DFG::Node *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  JSC::DFG::Node *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint8x8_t v87;
  __int32 v88;
  uint8x8_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  BOOL v98;
  unsigned int v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  _DWORD *v118;
  int v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  JSC::DFG::Node *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  unint64_t v144;
  uint64_t v145;
  JSC::DFG::Node *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  uint8x8_t v169;
  __int32 v170;
  uint8x8_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  unsigned int v175;
  int v176;
  unsigned int v177;
  void *v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  uint8x8_t v185;
  __int32 v186;
  uint8x8_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  int v192;
  int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v197;
  void *v198;
  char v199;
  char v200;
  uint64_t v201;
  unsigned __int8 *v202;
  char *v203;
  uint64_t v204;
  _BYTE *v205;
  unsigned __int8 *v206;
  char *v207;
  unsigned __int8 *v208;
  uint64_t v209;
  int v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unsigned __int8 v219;
  JSC::DFG::Node *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  char v235;
  uint64_t v236;
  unsigned __int8 *v237;
  char *v238;
  uint64_t v239;
  _BYTE *v240;
  unsigned __int8 *v241;
  char *v242;
  unsigned __int8 *v243;
  uint64_t v244;
  int v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char v254;
  JSC::DFG::Node *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char v277;
  JSC::DFG::Node *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unsigned int v292;
  char v293;
  char v294;
  uint64_t v295;
  unsigned __int8 *v296;
  char *v297;
  uint64_t v298;
  _BYTE *v299;
  uint64_t v300;
  int v301;
  int v302;
  unsigned __int8 *v303;
  char *v304;
  unsigned __int8 *v305;
  char *v306;
  int v307;
  int v308;
  int64_t v309;
  int64_t v310;
  char *v311;
  int v312;
  int v313;
  char *v314;
  char *v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  int64_t v319;
  int v320;
  JSC::DFG::SpeculativeJIT *v321;
  unint64_t v322;
  char v323;
  _BYTE v324[7];
  void *__dst;
  unint64_t v326;
  _WORD v327[4];

  v9 = (JSC::DFG::SpeculativeJIT *)this;
  v10 = *((_QWORD *)a2 + 4);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
  {
    v11 = *((_QWORD *)a2 + 3);
    v12 = (v11 >> 50) & 0x3F;
    switch((_DWORD)v12)
    {
      case 0x31:
        v13 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        if (v13 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197BA0204);
        }
        if (!*((_BYTE *)this[499] + 24 * (int)v13 + 12)
          || (v15 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8), v15 == -1))
        {
          v15 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)v9, v11, a3, a4, a5, a6, a7, a8);
        }
        JSC::DFG::SpeculativeJIT::flushRegisters(v9, v14, a3, a4, a5, a6, a7, a8);
        ++*((_DWORD *)v9 + 1196);
        v22 = *((unsigned int *)v9 + 1194);
        if ((_DWORD)v22 != 0x3FFFFFFF)
        {
          *((_QWORD *)v9 + 597) = 0xFFFFFFFF3FFFFFFFLL;
          JSC::DFG::SpeculativeJIT::spill((uint64_t)v9, v22, (uint64_t)v16, v17, v18, v19, v20, v21);
        }
        v30 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(v9, a2, v16, v17, v18, v19, v20, v21);
        v31 = (uint64_t)v23;
        __dst = v327;
        LODWORD(v326) = 1;
        if (v15)
        {
          v327[0] = v15;
          HIDWORD(v326) = 1;
          v163 = 1;
          do
          {
            v164 = 0;
            v165 = 0;
            v166 = v163;
            do
            {
              if (((*((_BYTE *)__dst + v164 + 1) + 32) & 0x40) != 0)
                goto LABEL_259;
              v165 |= 1 << (*((_BYTE *)__dst + v164 + 1) + 32);
              v164 += 2;
            }
            while (2 * v163 != v164);
            v167 = 0;
            do
            {
              v168 = (*((_BYTE *)__dst + v167) + 32) & 0x7F;
              if (v168 >= 0x40)
                goto LABEL_259;
              v165 &= ~(1 << v168);
              v167 += 2;
            }
            while (2 * v163 != v167);
            v169 = (uint8x8_t)vcnt_s8((int8x8_t)v165);
            v169.i16[0] = vaddlv_u8(v169);
            v170 = v169.i32[0];
            v171 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v165));
            v171.i16[0] = vaddlv_u8(v171);
            if (v171.i32[0] + v170)
            {
              v172 = 0;
              if (v163 <= 1uLL)
                v166 = 1;
              v173 = 2 * v166;
              while (1)
              {
                v174 = *((char *)__dst + v172 + 1);
                v175 = (*((_BYTE *)__dst + v172 + 1) + 32) & 0x7F;
                if (v175 >= 0x40)
                  goto LABEL_259;
                if (((v165 >> v175) & 1) != 0)
                  break;
                v172 += 2;
                if (v173 == v172)
                  goto LABEL_117;
              }
              v176 = *((char *)__dst + v172);
              v177 = *((_DWORD *)v9 + 50);
              if (v177 + 4 > *((_DWORD *)v9 + 48))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v9 + 56), (uint64_t)v23, v24, v25, v26, v27, v28, v29);
                v177 = *((_DWORD *)v9 + 50);
              }
              *(_DWORD *)(*((_QWORD *)v9 + 7) + v177) = v174 | (32 * v176) | 0x1E604000;
              *((_DWORD *)v9 + 50) += 4;
              memmove((char *)__dst + v172, (char *)__dst + v172 + 2, 2 * HIDWORD(v326) - v172 - 2);
              v163 = HIDWORD(v326) - 1;
            }
            else
            {
              v293 = *(_BYTE *)__dst;
              v294 = *((_BYTE *)__dst + 1);
              JSC::MacroAssemblerARM64::swapDouble(v9, *(char *)__dst, v294, v25, v26, v27, v28, v29);
              memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v326) - 2);
              v295 = (HIDWORD(v326) - 1);
              v98 = HIDWORD(v326) == 1;
              HIDWORD(v326) = v295;
              v296 = (unsigned __int8 *)__dst;
              v297 = (char *)__dst + 2 * v295;
              if (v98)
              {
                v300 = 0;
                v301 = 0;
                v302 = 0;
                v23 = (char *)__dst + 2 * v295;
              }
              else
              {
                v298 = 2 * v295;
                v299 = __dst;
                while (*v299 != v294)
                {
                  v299 += 2;
                  v298 -= 2;
                  if (!v298)
                    goto LABEL_221;
                }
                *v299 = v293;
LABEL_221:
                v302 = 0;
                v303 = v296;
                v23 = v297;
                v304 = v297;
                v311 = v297;
                do
                {
                  if (*v296 == v296[1])
                  {
                    v305 = v296;
                    if (v304 != (char *)__dst + 2 * HIDWORD(v326))
                    {
                      if (v296 == (unsigned __int8 *)v23)
                      {
                        v305 = (unsigned __int8 *)v304;
                      }
                      else
                      {
                        v314 = v304;
                        v319 = v303 - (unsigned __int8 *)v23;
                        memmove(v304, v23, v303 - (unsigned __int8 *)v23);
                        v297 = v311;
                        v305 = (unsigned __int8 *)&v314[v319];
                      }
                    }
                    v23 = (char *)(v296 + 2);
                    ++v302;
                    v304 = (char *)v305;
                  }
                  v296 += 2;
                  v303 += 2;
                }
                while (v296 < (unsigned __int8 *)v297);
                v296 = (unsigned __int8 *)__dst;
                v300 = HIDWORD(v326);
                v301 = HIDWORD(v326);
                v297 = v304;
              }
              v306 = (char *)&v296[2 * v300];
              if (v23 != v306)
              {
                memmove(v297, v23, v306 - v23);
                v301 = HIDWORD(v326);
              }
              v163 = v301 - v302;
            }
            HIDWORD(v326) = v163;
LABEL_117:
            ;
          }
          while (v163);
          v178 = __dst;
          if (v327 != __dst && __dst)
          {
            __dst = 0;
            LODWORD(v326) = 0;
            WTF::fastFree((unint64_t)v178, v23, v24, v25, v26, v27, v28, v29);
          }
        }
        if ((_DWORD)v30 == -1)
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v9, v31, 0, v25, v26, v27, v28, v29);
        else
          JSC::MacroAssemblerARM64::load64((uint64_t)v9, (v30 << 35) + 0x380000001ALL, 0, v25, v26, v27, v28, v29);
        JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v9, (uint64_t)operationParseIntDoubleNoRadix, v32, v33, v34, v35, v36, v37, (int *)&__dst);
        JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v9, 1, v38, v39, v40, v41, v42, v43);
        result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)v9, 0, (uint64_t)a2, 16, 0, v44, v45, v46);
        --*((_DWORD *)v9 + 1196);
        v48 = (char *)v9 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v15];
        --*((_DWORD *)v48 + 1244);
        return result;
      case 0x15:
        if ((v11 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_81;
        v120 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        if (v120 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197BA021CLL);
        }
        if (!*((_BYTE *)this[499] + 24 * (int)v120 + 12)
          || (v121 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8), (_DWORD)v121 == -1))
        {
LABEL_81:
          v121 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v9, v11, a3, a4, a5, a6, a7, a8);
        }
        JSC::DFG::SpeculativeJIT::speculateString((uint64_t)v9, *((_QWORD *)a2 + 3), v121, a4, a5, a6, a7, a8);
        JSC::DFG::SpeculativeJIT::flushRegisters(v9, v122, v123, v124, v125, v126, v127, v128);
        ++*((_DWORD *)v9 + 1196);
        v135 = *((unsigned int *)v9 + 1194);
        if ((_DWORD)v135 != 0x3FFFFFFF)
        {
          *((_QWORD *)v9 + 597) = 0xFFFFFFFF3FFFFFFFLL;
          JSC::DFG::SpeculativeJIT::spill((uint64_t)v9, v135, (uint64_t)v129, v130, v131, v132, v133, v134);
        }
        v136 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(v9, a2, v129, v130, v131, v132, v133, v134);
        JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>((uint64_t)v9, (unsigned __int8 *)operationParseIntStringNoRadix, 0, v136, v137, v121, v138, v139, (int *)&__dst);
        result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)v9, 0, (uint64_t)a2, 16, 0, v140, v141, v142);
        --*((_DWORD *)v9 + 1196);
        if ((v11 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          if ((int)v121 > 15)
            v143 = -1;
          else
            v143 = v121;
          --*((_DWORD *)v9 + 3 * v143 + 1196);
        }
        return result;
      case 0:
        JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&__dst, (uint64_t)this, *((_QWORD *)a2 + 3), 0, a5, a6, a7, a8);
        v219 = v327[0];
        if (LOBYTE(v327[0]) == 255)
        {
          v219 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)__dst, v326, v213, v214, v215, v216, v217, v218);
          LOBYTE(v327[0]) = v219;
        }
        JSC::DFG::SpeculativeJIT::flushRegisters(v9, v212, v213, v214, v215, v216, v217, v218);
        ++*((_DWORD *)v9 + 1196);
        v226 = *((unsigned int *)v9 + 1194);
        if ((_DWORD)v226 != 0x3FFFFFFF)
        {
          *((_QWORD *)v9 + 597) = 0xFFFFFFFF3FFFFFFFLL;
          JSC::DFG::SpeculativeJIT::spill((uint64_t)v9, v226, (uint64_t)v220, v221, v222, v223, v224, v225);
        }
        v227 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(v9, a2, v220, v221, v222, v223, v224, v225);
        JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>((uint64_t)v9, (unsigned __int8 *)operationParseIntGenericNoRadix, 0, v227, v228, v219, v229, v230, (int *)&v321);
        result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)v9, 0, (uint64_t)a2, 16, 0, v231, v232, v233);
        --*((_DWORD *)v9 + 1196);
        if ((v326 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v118 = __dst;
          v119 = SLOBYTE(v327[0]);
          goto LABEL_73;
        }
        return result;
    }
    JSC::DFG::Graph::logAssertionFailure(this[495], a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x1367, "void JSC::DFG::SpeculativeJIT::compileParseInt(Node *)", "Bad use kind");
    __break(0xC471u);
    goto LABEL_260;
  }
  v321 = (JSC::DFG::SpeculativeJIT *)this;
  v322 = v10;
  v323 = -1;
  v49 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v49 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BA020CLL);
  }
  if (*((_BYTE *)this[499] + 24 * (int)v49 + 12))
  {
    v51 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)this, v10, (uint64_t)v324, a4, a5, a6, a7, a8);
    v323 = v51;
    if ((_DWORD)v51 != -1)
      goto LABEL_17;
    this = (JSC::DFG::Graph **)v321;
    v10 = v322;
  }
  v51 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)this, v10, (uint64_t)v324, a4, a5, a6, a7, a8);
  v323 = v51;
LABEL_17:
  v52 = *((_QWORD *)a2 + 3);
  v53 = (v52 >> 50) & 0x3F;
  if ((_DWORD)v53 != 21)
  {
    if ((_DWORD)v53)
    {
      if ((_DWORD)v53 == 1)
      {
        JSC::DFG::SpeculateInt32Operand::SpeculateInt32Operand((uint64_t)&__dst, (uint64_t)v9, *((_QWORD *)a2 + 3), 0, a5, a6, a7, a8);
        v277 = v327[0];
        if (LOBYTE(v327[0]) == 255)
        {
          v277 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)__dst, v326, (uint64_t)v327 + 1, v272, v273, v274, v275, v276);
          LOBYTE(v327[0]) = v277;
        }
        JSC::DFG::SpeculativeJIT::flushRegisters(v9, v270, v271, v272, v273, v274, v275, v276);
        ++*((_DWORD *)v9 + 1196);
        v284 = *((unsigned int *)v9 + 1194);
        if ((_DWORD)v284 != 0x3FFFFFFF)
        {
          *((_QWORD *)v9 + 597) = 0xFFFFFFFF3FFFFFFFLL;
          JSC::DFG::SpeculativeJIT::spill((uint64_t)v9, v284, (uint64_t)v278, v279, v280, v281, v282, v283);
        }
        v285 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(v9, a2, v278, v279, v280, v281, v282, v283);
        JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,int,int),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v320, (int *)v9, v285, v286, v277, v51, v287, v288);
        result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)v9, 0, (uint64_t)a2, 16, 0, v289, v290, v291);
        --*((_DWORD *)v9 + 1196);
        v292 = SLOBYTE(v327[0]);
        if (SLOBYTE(v327[0]) > 15)
          v292 = -1;
        --*((_DWORD *)__dst + 3 * v292 + 1196);
      }
      else
      {
        if ((_DWORD)v53 != 49)
        {
          JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)v9 + 495), a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x1339, "void JSC::DFG::SpeculativeJIT::compileParseInt(Node *)", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x197B9FEC8);
        }
        JSC::DFG::SpeculateDoubleOperand::SpeculateDoubleOperand((uint64_t)&__dst, (uint64_t)v9, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
        v254 = v327[0];
        if (LOBYTE(v327[0]) == 255)
        {
          v254 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)__dst, v326, v248, v249, v250, v251, v252, v253);
          LOBYTE(v327[0]) = v254;
        }
        JSC::DFG::SpeculativeJIT::flushRegisters(v9, v247, v248, v249, v250, v251, v252, v253);
        ++*((_DWORD *)v9 + 1196);
        v261 = *((unsigned int *)v9 + 1194);
        if ((_DWORD)v261 != 0x3FFFFFFF)
        {
          *((_QWORD *)v9 + 597) = 0xFFFFFFFF3FFFFFFFLL;
          JSC::DFG::SpeculativeJIT::spill((uint64_t)v9, v261, (uint64_t)v255, v256, v257, v258, v259, v260);
        }
        v262 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(v9, a2, v255, v256, v257, v258, v259, v260);
        JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,double,int),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID>(&v320, (char *)v9, v262, v263, v254, v51, v264, v265);
        result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)v9, 0, (uint64_t)a2, 16, 0, v266, v267, v268);
        --*((_DWORD *)v9 + 1196);
        v269 = (char *)__dst
             + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[SLOBYTE(v327[0])];
        --*((_DWORD *)v269 + 1244);
      }
      goto LABEL_72;
    }
    v54 = v52 & 0xFF00FFFFFFFFFFFFLL;
    if ((v52 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_94;
    v144 = ~*(_DWORD *)((v52 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v144 >= *((unsigned int *)v9 + 1001))
    {
      __break(0xC471u);
LABEL_259:
      __break(1u);
LABEL_260:
      JUMPOUT(0x197B9FDB0);
    }
    if (!*(_BYTE *)(*((_QWORD *)v9 + 499) + 24 * (int)v144 + 12)
      || (LODWORD(v56) = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v9, *((_QWORD *)a2 + 3), v50, a4, a5, a6, a7, a8), (_DWORD)v56 == -1))
    {
LABEL_94:
      LODWORD(v56) = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v9, v52, v50, a4, a5, a6, a7, a8);
    }
    JSC::DFG::SpeculativeJIT::flushRegisters(v9, v145, v50, a4, a5, a6, a7, a8);
    ++*((_DWORD *)v9 + 1196);
    v152 = *((unsigned int *)v9 + 1194);
    if ((_DWORD)v152 != 0x3FFFFFFF)
    {
      *((_QWORD *)v9 + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)v9, v152, (uint64_t)v146, v147, v148, v149, v150, v151);
    }
    v160 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(v9, a2, v146, v147, v148, v149, v150, v151);
    v161 = (uint64_t)v153;
    __dst = v327;
    LODWORD(v326) = 2;
    if ((_DWORD)v56 == 1)
    {
      if ((_DWORD)v51 == 2)
      {
LABEL_156:
        if ((_DWORD)v160 == -1)
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v9, v161, 0, v155, v156, v157, v158, v159);
        else
          JSC::MacroAssemblerARM64::load64((uint64_t)v9, (v160 << 35) + 0x380000001ALL, 0, v155, v156, v157, v158, v159);
        v107 = operationParseIntGeneric;
        goto LABEL_67;
      }
      v162 = 0;
    }
    else
    {
      v327[0] = v56 | 0x100;
      v162 = 1;
      HIDWORD(v326) = 1;
      if ((_DWORD)v51 == 2)
        goto LABEL_125;
    }
    v327[v162++] = v51 | 0x200;
    HIDWORD(v326) = v162;
    while (1)
    {
LABEL_125:
      v179 = 0;
      v180 = 0;
      v181 = (char *)__dst;
      v182 = v162;
      do
      {
        if ((*((_BYTE *)__dst + v179 + 1) & 0x40) != 0)
          goto LABEL_259;
        v180 |= 1 << *((_BYTE *)__dst + v179 + 1);
        v179 += 2;
      }
      while (2 * v162 != v179);
      v183 = 0;
      do
      {
        v184 = *((_BYTE *)__dst + v183) & 0x7F;
        if (v184 >= 0x40)
          goto LABEL_259;
        v180 &= ~(1 << v184);
        v183 += 2;
      }
      while (2 * v162 != v183);
      v185 = (uint8x8_t)vcnt_s8((int8x8_t)v180);
      v185.i16[0] = vaddlv_u8(v185);
      v186 = v185.i32[0];
      v187 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v180));
      v187.i16[0] = vaddlv_u8(v187);
      if (!(v187.i32[0] + v186))
      {
        v318 = v161;
        v234 = *(_BYTE *)__dst;
        v235 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)v9, *(char *)__dst, v235, v155, v156, v157, v158, v159);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v326) - 2);
        v236 = (HIDWORD(v326) - 1);
        v98 = HIDWORD(v326) == 1;
        HIDWORD(v326) = v236;
        v237 = (unsigned __int8 *)__dst;
        v238 = (char *)__dst + 2 * v236;
        if (v98)
        {
          v244 = 0;
          v245 = 0;
          v153 = (char *)__dst + 2 * v236;
        }
        else
        {
          v239 = 2 * v236;
          v240 = __dst;
          while (*v240 != v235)
          {
            v240 += 2;
            v239 -= 2;
            if (!v239)
              goto LABEL_183;
          }
          *v240 = v234;
LABEL_183:
          LODWORD(v236) = 0;
          v241 = v237;
          v153 = v238;
          v242 = v238;
          do
          {
            if (*v237 == v237[1])
            {
              v243 = v237;
              if (v242 != (char *)__dst + 2 * HIDWORD(v326))
              {
                v313 = v236;
                v316 = v238;
                if (v237 == (unsigned __int8 *)v153)
                {
                  v243 = (unsigned __int8 *)v242;
                }
                else
                {
                  v310 = v241 - (unsigned __int8 *)v153;
                  memmove(v242, v153, v241 - (unsigned __int8 *)v153);
                  v243 = (unsigned __int8 *)&v242[v310];
                }
                v238 = v316;
                LODWORD(v236) = v313;
              }
              v153 = (char *)(v237 + 2);
              LODWORD(v236) = v236 + 1;
              v242 = (char *)v243;
            }
            v237 += 2;
            v241 += 2;
          }
          while (v237 < (unsigned __int8 *)v238);
          v237 = (unsigned __int8 *)__dst;
          v244 = HIDWORD(v326);
          v245 = HIDWORD(v326);
          v238 = v242;
        }
        v246 = (char *)&v237[2 * v244];
        if (v153 != v246)
        {
          v308 = v236;
          memmove(v238, v153, v246 - v153);
          LODWORD(v236) = v308;
          v245 = HIDWORD(v326);
        }
        v162 = v245 - v236;
        v161 = v318;
        goto LABEL_149;
      }
      v188 = 0;
      v189 = v162 <= 1uLL ? 1 : v162;
      v190 = 2 * v189;
      while (1)
      {
        v191 = *((unsigned __int8 *)__dst + v188 + 1);
        if ((v191 & 0x7Fu) >= 0x40)
          goto LABEL_259;
        if (((v180 >> (v191 & 0x7F)) & 1) != 0)
          break;
        v188 += 2;
        if (v190 == v188)
          goto LABEL_150;
      }
      v192 = *((unsigned __int8 *)__dst + v188);
      if (v192 != v191)
        break;
LABEL_148:
      memmove(&v181[v188], &v181[v188 + 2], 2 * v182 - v188 - 2);
      v162 = HIDWORD(v326) - 1;
LABEL_149:
      HIDWORD(v326) = v162;
LABEL_150:
      if (!v162)
      {
        v198 = __dst;
        if (v327 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v326) = 0;
          WTF::fastFree((unint64_t)v198, v153, v154, v155, v156, v157, v158, v159);
        }
        goto LABEL_156;
      }
    }
    v193 = (char)v192;
    if ((char)v192 == 63)
    {
      v194 = *((_DWORD *)v9 + 50);
      v195 = *((_DWORD *)v9 + 48);
      if ((char)v191 != 31)
      {
        v197 = v191 & 0x1F | 0xD2800000;
        goto LABEL_145;
      }
    }
    else
    {
      v194 = *((_DWORD *)v9 + 50);
      v195 = *((_DWORD *)v9 + 48);
      if (v191 != 31 && v193 != 31)
      {
        v197 = v191 & 0xFFE0FFFF | ((v193 & 0x1F) << 16) | 0xAA0003E0;
LABEL_145:
        if (v194 + 4 > v195)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v9 + 56), (uint64_t)v153, v154, v155, v156, v157, v158, v159);
          v194 = *((_DWORD *)v9 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v9 + 7) + v194) = v197;
        *((_DWORD *)v9 + 50) += 4;
        v181 = (char *)__dst;
        v182 = HIDWORD(v326);
        goto LABEL_148;
      }
    }
    v197 = (char)v191 | (32 * v193) | 0x91000000;
    goto LABEL_145;
  }
  v54 = v52 & 0xFF00FFFFFFFFFFFFLL;
  if ((v52 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_22;
  v55 = ~*(_DWORD *)((v52 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v55 >= *((unsigned int *)v9 + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BA0214);
  }
  if (!*(_BYTE *)(*((_QWORD *)v9 + 499) + 24 * (int)v55 + 12)
    || (v56 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v9, *((_QWORD *)a2 + 3), v50, a4, a5, a6, a7, a8),
        (_DWORD)v56 == -1))
  {
LABEL_22:
    v56 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v9, v52, v50, a4, a5, a6, a7, a8);
  }
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)v9, *((_QWORD *)a2 + 3), v56, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::flushRegisters(v9, v57, v58, v59, v60, v61, v62, v63);
  ++*((_DWORD *)v9 + 1196);
  v70 = *((unsigned int *)v9 + 1194);
  if ((_DWORD)v70 != 0x3FFFFFFF)
  {
    *((_QWORD *)v9 + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)v9, v70, (uint64_t)v64, v65, v66, v67, v68, v69);
  }
  v78 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(v9, a2, v64, v65, v66, v67, v68, v69);
  v79 = (uint64_t)v71;
  __dst = v327;
  LODWORD(v326) = 2;
  if ((_DWORD)v56 == 1)
  {
    if ((_DWORD)v51 == 2)
      goto LABEL_64;
    v80 = 0;
  }
  else
  {
    v327[0] = v56 | 0x100;
    v80 = 1;
    HIDWORD(v326) = 1;
    if ((_DWORD)v51 == 2)
      goto LABEL_33;
  }
  v327[v80++] = v51 | 0x200;
  HIDWORD(v326) = v80;
  do
  {
LABEL_33:
    v81 = 0;
    v82 = 0;
    v83 = (char *)__dst;
    v84 = v80;
    do
    {
      if ((*((_BYTE *)__dst + v81 + 1) & 0x40) != 0)
        goto LABEL_259;
      v82 |= 1 << *((_BYTE *)__dst + v81 + 1);
      v81 += 2;
    }
    while (2 * v80 != v81);
    v85 = 0;
    do
    {
      v86 = *((_BYTE *)__dst + v85) & 0x7F;
      if (v86 >= 0x40)
        goto LABEL_259;
      v82 &= ~(1 << v86);
      v85 += 2;
    }
    while (2 * v80 != v85);
    v87 = (uint8x8_t)vcnt_s8((int8x8_t)v82);
    v87.i16[0] = vaddlv_u8(v87);
    v88 = v87.i32[0];
    v89 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v82));
    v89.i16[0] = vaddlv_u8(v89);
    if (v89.i32[0] + v88)
    {
      v90 = 0;
      if (v80 <= 1uLL)
        v91 = 1;
      else
        v91 = v80;
      v92 = 2 * v91;
      while (1)
      {
        v93 = *((unsigned __int8 *)__dst + v90 + 1);
        if ((v93 & 0x7Fu) >= 0x40)
          goto LABEL_259;
        if (((v82 >> (v93 & 0x7F)) & 1) != 0)
          break;
        v90 += 2;
        if (v92 == v90)
          goto LABEL_58;
      }
      v94 = *((unsigned __int8 *)__dst + v90);
      if (v94 == v93)
        goto LABEL_56;
      v95 = (char)v94;
      if ((char)v94 == 63)
      {
        v96 = *((_DWORD *)v9 + 50);
        v97 = *((_DWORD *)v9 + 48);
        if ((char)v93 != 31)
        {
          v99 = v93 & 0x1F | 0xD2800000;
          goto LABEL_53;
        }
      }
      else
      {
        v96 = *((_DWORD *)v9 + 50);
        v97 = *((_DWORD *)v9 + 48);
        v98 = v93 == 31 || v95 == 31;
        if (!v98)
        {
          v99 = v93 & 0xFFE0FFFF | ((v95 & 0x1F) << 16) | 0xAA0003E0;
LABEL_53:
          if (v96 + 4 > v97)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v9 + 56), (uint64_t)v71, v72, v73, v74, v75, v76, v77);
            v96 = *((_DWORD *)v9 + 50);
          }
          *(_DWORD *)(*((_QWORD *)v9 + 7) + v96) = v99;
          *((_DWORD *)v9 + 50) += 4;
          v83 = (char *)__dst;
          v84 = HIDWORD(v326);
LABEL_56:
          memmove(&v83[v90], &v83[v90 + 2], 2 * v84 - v90 - 2);
          v80 = HIDWORD(v326) - 1;
          goto LABEL_57;
        }
      }
      v99 = (char)v93 | (32 * v95) | 0x91000000;
      goto LABEL_53;
    }
    v317 = v79;
    v199 = *(_BYTE *)__dst;
    v200 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)v9, *(char *)__dst, v200, v73, v74, v75, v76, v77);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v326) - 2);
    v201 = (HIDWORD(v326) - 1);
    v98 = HIDWORD(v326) == 1;
    HIDWORD(v326) = v201;
    v202 = (unsigned __int8 *)__dst;
    v203 = (char *)__dst + 2 * v201;
    if (v98)
    {
      v209 = 0;
      v210 = 0;
      v71 = (char *)__dst + 2 * v201;
    }
    else
    {
      v204 = 2 * v201;
      v205 = __dst;
      while (*v205 != v200)
      {
        v205 += 2;
        v204 -= 2;
        if (!v204)
          goto LABEL_163;
      }
      *v205 = v199;
LABEL_163:
      LODWORD(v201) = 0;
      v206 = v202;
      v71 = v203;
      v207 = v203;
      do
      {
        if (*v202 == v202[1])
        {
          v208 = v202;
          if (v207 != (char *)__dst + 2 * HIDWORD(v326))
          {
            v312 = v201;
            v315 = v203;
            if (v202 == (unsigned __int8 *)v71)
            {
              v208 = (unsigned __int8 *)v207;
            }
            else
            {
              v309 = v206 - (unsigned __int8 *)v71;
              memmove(v207, v71, v206 - (unsigned __int8 *)v71);
              v208 = (unsigned __int8 *)&v207[v309];
            }
            v203 = v315;
            LODWORD(v201) = v312;
          }
          v71 = (char *)(v202 + 2);
          LODWORD(v201) = v201 + 1;
          v207 = (char *)v208;
        }
        v202 += 2;
        v206 += 2;
      }
      while (v202 < (unsigned __int8 *)v203);
      v202 = (unsigned __int8 *)__dst;
      v209 = HIDWORD(v326);
      v210 = HIDWORD(v326);
      v203 = v207;
    }
    v211 = (char *)&v202[2 * v209];
    if (v71 != v211)
    {
      v307 = v201;
      memmove(v203, v71, v211 - v71);
      LODWORD(v201) = v307;
      v210 = HIDWORD(v326);
    }
    v80 = v210 - v201;
    v79 = v317;
LABEL_57:
    HIDWORD(v326) = v80;
LABEL_58:
    ;
  }
  while (v80);
  v100 = __dst;
  if (v327 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v326) = 0;
    WTF::fastFree((unint64_t)v100, v71, v72, v73, v74, v75, v76, v77);
  }
LABEL_64:
  if ((_DWORD)v78 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v9, v79, 0, v73, v74, v75, v76, v77);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)v9, (v78 << 35) + 0x380000001ALL, 0, v73, v74, v75, v76, v77);
  v107 = operationParseIntString;
LABEL_67:
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v9, (uint64_t)v107, v101, v102, v103, v104, v105, v106, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v9, 1, v108, v109, v110, v111, v112, v113);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)v9, 0, (uint64_t)a2, 16, 0, v114, v115, v116);
  --*((_DWORD *)v9 + 1196);
  if (v54)
  {
    if ((int)v56 > 15)
      v117 = -1;
    else
      v117 = v56;
    --*((_DWORD *)v9 + 3 * v117 + 1196);
  }
LABEL_72:
  v118 = v321;
  v119 = v323;
LABEL_73:
  if (v119 > 15)
    v119 = -1;
  --v118[3 * v119 + 1196];
  return result;
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,int,int),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int *v11;
  unsigned int v12;
  JSC::AssemblerBuffer *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint8x8_t v19;
  __int32 v20;
  uint8x8_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  __int16 *v37;
  int v38;
  char *v39;
  int *v40;
  int *v41;
  uint64_t v42;
  unsigned int v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  int *v58;
  int *v59;
  JSC::AssemblerBuffer *v60;
  unsigned int v61;
  unsigned int v62;
  __int16 v63;
  _BYTE v64[6];

  v10 = (uint64_t)a2;
  v11 = a1;
  if ((_DWORD)a5 == 1)
  {
    if ((_DWORD)a6 == 2)
      goto LABEL_61;
    v12 = 0;
    goto LABEL_6;
  }
  v63 = a5 | 0x100;
  v12 = 1;
  v61 = 1;
  if ((_DWORD)a6 != 2)
  {
LABEL_6:
    *(_WORD *)&v64[2 * v12++ - 2] = a6 | 0x200;
    v61 = v12;
  }
  v13 = (JSC::AssemblerBuffer *)(a2 + 14);
  do
  {
    v14 = 0;
    v15 = 0;
    v16 = v12;
    do
    {
      if ((v64[v14 - 1] & 0x40) != 0)
      {
LABEL_64:
        __break(1u);
        if (a1)
          WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_61;
      }
      v15 |= 1 << v64[v14 - 1];
      v14 += 2;
    }
    while (2 * v12 != v14);
    v17 = 0;
    do
    {
      v18 = v64[v17 - 2] & 0x7F;
      if (v18 >= 0x40)
        goto LABEL_64;
      v15 &= ~(1 << v18);
      v17 += 2;
    }
    while (2 * v12 != v17);
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v19.i16[0] = vaddlv_u8(v19);
    v20 = v19.i32[0];
    v21 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v15));
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.i32[0] + v20)
    {
      v22 = 0;
      if (v12 <= 1)
        v23 = 1;
      else
        v23 = v12;
      v24 = 2 * v23;
      while (1)
      {
        v25 = v64[v22 - 1];
        if ((v25 & 0x7Fu) >= 0x40)
          goto LABEL_64;
        if (((v15 >> (v25 & 0x7F)) & 1) != 0)
          break;
        v22 += 2;
        if (v24 == v22)
          goto LABEL_58;
      }
      v26 = v64[v22 - 2];
      if (v26 != v25)
      {
        v27 = (char)v26;
        if ((char)v26 == 63)
        {
          v28 = *(_DWORD *)(v10 + 200);
          v29 = *(_DWORD *)(v10 + 192);
          if (v25 == 31)
            goto LABEL_52;
          v31 = v25 & 0x1F | 0xD2800000;
        }
        else
        {
          v28 = *(_DWORD *)(v10 + 200);
          v29 = *(_DWORD *)(v10 + 192);
          v30 = (char)v25 == 31 || v27 == 31;
          if (!v30)
          {
            v31 = v25 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v31 = (char)v25 | (32 * v27) | 0x91000000;
        }
LABEL_53:
        if (v28 + 4 > v29)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v13, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v28 = *(_DWORD *)(v10 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v10 + 56) + v28) = v31;
        *(_DWORD *)(v10 + 200) += 4;
        v16 = v61;
      }
      a1 = (int *)memmove(&v64[v22 - 2], &v64[v22], 2 * v16 - v22 - 2);
      v12 = v61 - 1;
      goto LABEL_57;
    }
    v60 = v13;
    v32 = HIBYTE(v63);
    v33 = v63;
    JSC::MacroAssemblerARM64::swap(v10, (char)v63, SHIBYTE(v63), a4, a5, a6, a7, a8);
    memmove(&v63, v64, 2 * v61 - 2);
    v34 = v61 - 1;
    v30 = v61 == 1;
    v62 = v34;
    v35 = (int *)&v63;
    a1 = (int *)&v64[2 * v34 - 2];
    if (v30)
    {
      v42 = 0;
      v43 = 0;
      v38 = 0;
      a2 = a1;
    }
    else
    {
      v36 = 2 * v34;
      v37 = &v63;
      while (*(unsigned __int8 *)v37 != v32)
      {
        ++v37;
        v36 -= 2;
        if (!v36)
          goto LABEL_36;
      }
      *(_BYTE *)v37 = v33;
LABEL_36:
      v38 = 0;
      v39 = (char *)&v63;
      a2 = a1;
      v40 = a1;
      do
      {
        if (*(unsigned __int8 *)v35 == *((unsigned __int8 *)v35 + 1))
        {
          v41 = v35;
          if (v40 != (int *)&v64[2 * v62 - 2])
          {
            v59 = a1;
            if (v35 == a2)
            {
              v41 = v40;
            }
            else
            {
              v57 = v39 - (char *)a2;
              v58 = v40;
              memmove(v40, a2, v39 - (char *)a2);
              v41 = (int *)((char *)v58 + v57);
            }
            a1 = v59;
          }
          a2 = (int *)((char *)v35 + 2);
          ++v38;
          v40 = v41;
        }
        v35 = (int *)((char *)v35 + 2);
        v39 += 2;
      }
      while (v35 < a1);
      v42 = v62;
      v43 = v62;
      a1 = v40;
    }
    v44 = (int *)&v64[2 * v42 - 2];
    v13 = v60;
    if (a2 != v44)
    {
      a1 = (int *)memmove(a1, a2, (char *)v44 - (char *)a2);
      v43 = v62;
    }
    v12 = v43 - v38;
LABEL_57:
    v61 = v12;
LABEL_58:
    ;
  }
  while (v12);
LABEL_61:
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v10, a4, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v10, (a3 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v10, (uint64_t)operationParseIntInt32, v45, v46, v47, v48, v49, v50, v11);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v10, 1, v51, v52, v53, v54, v55, v56);
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,double,int),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID>(int *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char *v11;
  int *v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int8 v31;
  char v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  __int16 *v40;
  char *v41;
  char *v42;
  char *v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint8x8_t v62;
  __int32 v63;
  uint8x8_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  char v71;
  char v72;
  uint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  unsigned int v78;
  char *v79;
  char *v80;
  char *v81;
  unsigned __int8 *v82;
  int *v83;
  char *v84;
  char *v85;
  int v86;
  uint64_t v87;
  JSC::AssemblerBuffer *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  __int16 v93;
  _BYTE v94[6];

  v8 = a5;
  v11 = a2;
  v12 = a1;
  v13 = (char *)&v93;
  if ((_DWORD)a6 == 1)
    goto LABEL_54;
  v93 = a6 | 0x100;
  v89 = 1;
  v88 = (JSC::AssemblerBuffer *)(a2 + 56);
  v14 = 1;
  do
  {
    v15 = 0;
    v16 = 0;
    v17 = v14;
    do
    {
      if ((v94[v15 - 1] & 0x40) != 0)
        goto LABEL_100;
      v16 |= 1 << v94[v15 - 1];
      v15 += 2;
    }
    while (2 * v14 != v15);
    v18 = 0;
    do
    {
      v19 = v94[v18 - 2] & 0x7F;
      if (v19 >= 0x40)
        goto LABEL_100;
      v16 &= ~(1 << v19);
      v18 += 2;
    }
    while (2 * v14 != v18);
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v20.i16[0] = vaddlv_u8(v20);
    v21 = v20.i32[0];
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.i32[0] + v21)
    {
      v23 = 0;
      if (v14 <= 1)
        v24 = 1;
      else
        v24 = v14;
      v25 = 2 * v24;
      while (1)
      {
        v26 = v94[v23 - 1];
        if ((v26 & 0x7Fu) >= 0x40)
          goto LABEL_100;
        if (((v16 >> (v26 & 0x7F)) & 1) != 0)
          break;
        v23 += 2;
        if (v25 == v23)
          goto LABEL_33;
      }
      v27 = v94[v23 - 2];
      if (v27 == v26)
        goto LABEL_31;
      if ((char)v27 == 63)
      {
        if (v26 != 31)
        {
          v29 = v26 & 0x1F | 0xD2800000;
          goto LABEL_28;
        }
      }
      else
      {
        v28 = (char)v26 == 31 || (char)v27 == 31;
        if (!v28)
        {
          v29 = v26 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
LABEL_28:
          v30 = *((_DWORD *)v11 + 50);
          if (v30 + 4 > *((_DWORD *)v11 + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v88, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v30 = *((_DWORD *)v11 + 50);
          }
          *(_DWORD *)(*((_QWORD *)v11 + 7) + v30) = v29;
          *((_DWORD *)v11 + 50) += 4;
          v17 = v89;
LABEL_31:
          a1 = (int *)memmove(&v94[v23 - 2], &v94[v23], 2 * v17 - v23 - 2);
          v14 = v89 - 1;
          goto LABEL_32;
        }
      }
      v29 = (char)v26 | (32 * (char)v27) | 0x91000000;
      goto LABEL_28;
    }
    v84 = v13;
    v31 = HIBYTE(v93);
    v32 = v93;
    JSC::MacroAssemblerARM64::swap((uint64_t)v11, (char)v93, SHIBYTE(v93), a4, a5, a6, a7, a8);
    a1 = (int *)memmove(&v93, v94, 2 * v89 - 2);
    v33 = v89 - 1;
    v28 = v89 == 1;
    v90 = v33;
    v34 = (char *)&v93;
    v35 = &v94[2 * v33 - 2];
    if (v28)
    {
      v36 = 0;
      v37 = 0;
      v86 = 0;
      a2 = &v94[2 * v33 - 2];
    }
    else
    {
      v39 = 2 * v33;
      v40 = &v93;
      while (*(unsigned __int8 *)v40 != v31)
      {
        ++v40;
        v39 -= 2;
        if (!v39)
          goto LABEL_43;
      }
      *(_BYTE *)v40 = v32;
LABEL_43:
      v86 = 0;
      v41 = (char *)&v93;
      a2 = v35;
      v42 = v35;
      do
      {
        if (*v34 == v34[1])
        {
          v43 = v34;
          if (v42 != &v94[2 * v90 - 2])
          {
            if (v34 == a2)
            {
              v43 = v42;
            }
            else
            {
              v44 = v41 - a2;
              a1 = (int *)memmove(v42, a2, v41 - a2);
              v43 = &v42[v44];
            }
          }
          a2 = v34 + 2;
          ++v86;
          v42 = v43;
        }
        v34 += 2;
        v41 += 2;
      }
      while (v34 < v35);
      v36 = v90;
      v37 = v90;
      v35 = v42;
    }
    v38 = &v94[2 * v36 - 2];
    if (a2 != v38)
    {
      a1 = (int *)memmove(v35, a2, v38 - a2);
      v37 = v90;
    }
    v14 = v37 - v86;
    v13 = v84;
LABEL_32:
    v89 = v14;
LABEL_33:
    ;
  }
  while (v14);
  a1 = (int *)&v93;
  if (v13 != (char *)&v93)
    goto LABEL_101;
LABEL_54:
  while (v8)
  {
    v93 = v8;
    v91 = 1;
    v57 = 1;
LABEL_59:
    v58 = 0;
    v59 = 0;
    while (((v13[v58 + 1] + 32) & 0x40) == 0)
    {
      v59 |= 1 << (v13[v58 + 1] + 32);
      v58 += 2;
      if (2 * v57 == v58)
      {
        v60 = 0;
        while (1)
        {
          v61 = (v13[v60] + 32) & 0x7F;
          if (v61 >= 0x40)
            goto LABEL_100;
          v59 &= ~(1 << v61);
          v60 += 2;
          if (2 * v57 == v60)
          {
            v62 = (uint8x8_t)vcnt_s8((int8x8_t)v59);
            v62.i16[0] = vaddlv_u8(v62);
            v63 = v62.i32[0];
            v64 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v59));
            v64.i16[0] = vaddlv_u8(v64);
            if (v64.i32[0] + v63)
            {
              v65 = 0;
              if (v57 <= 1)
                v66 = 1;
              else
                v66 = v57;
              v67 = 2 * v66;
              while (1)
              {
                v68 = v13[v65 + 1];
                v69 = (v13[v65 + 1] + 32) & 0x7F;
                if (v69 >= 0x40)
                  goto LABEL_100;
                if (((v59 >> v69) & 1) != 0)
                {
                  v8 = v13[v65];
                  v70 = *((_DWORD *)v11 + 50);
                  if (v70 + 4 > *((_DWORD *)v11 + 48))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                    v70 = *((_DWORD *)v11 + 50);
                  }
                  *(_DWORD *)(*((_QWORD *)v11 + 7) + v70) = v68 | (32 * v8) | 0x1E604000;
                  *((_DWORD *)v11 + 50) += 4;
                  a1 = (int *)memmove(&v13[v65], &v13[v65 + 2], 2 * v91 - v65 - 2);
                  v57 = v91 - 1;
                  goto LABEL_77;
                }
                v65 += 2;
                if (v67 == v65)
                  goto LABEL_78;
              }
            }
            v71 = *v13;
            v72 = v13[1];
            JSC::MacroAssemblerARM64::swapDouble(v11, *v13, v72, a4, a5, a6, a7, a8);
            memmove(v13, v13 + 2, 2 * v91 - 2);
            v73 = v91 - 1;
            v28 = v91 == 1;
            v92 = v73;
            v74 = (unsigned __int8 *)v13;
            a1 = (int *)&v13[2 * v73];
            if (v28)
            {
              v77 = 0;
              v78 = 0;
              v8 = 0;
              a2 = &v13[2 * v73];
            }
            else
            {
              v75 = 2 * v73;
              v76 = v13;
              while (*v76 != v72)
              {
                v76 += 2;
                v75 -= 2;
                if (!v75)
                  goto LABEL_87;
              }
              *v76 = v71;
LABEL_87:
              v8 = 0;
              v79 = v13;
              a2 = (char *)a1;
              v80 = (char *)a1;
              v83 = a1;
              do
              {
                if (*v74 == v74[1])
                {
                  v81 = (char *)v74;
                  if (v80 != &v13[2 * v92])
                  {
                    if (v74 == (unsigned __int8 *)a2)
                    {
                      v81 = v80;
                    }
                    else
                    {
                      v85 = v80;
                      v87 = v79 - a2;
                      memmove(v80, a2, v79 - a2);
                      a1 = v83;
                      v81 = &v85[v87];
                    }
                  }
                  a2 = (char *)(v74 + 2);
                  ++v8;
                  v80 = v81;
                }
                v74 += 2;
                v79 += 2;
              }
              while (v74 < (unsigned __int8 *)a1);
              v74 = (unsigned __int8 *)v13;
              v77 = v92;
              v78 = v92;
              a1 = (int *)v80;
            }
            v82 = &v74[2 * v77];
            if (a2 != (char *)v82)
            {
              a1 = (int *)memmove(a1, a2, v82 - (unsigned __int8 *)a2);
              v78 = v92;
            }
            v57 = v78 - v8;
LABEL_77:
            v91 = v57;
LABEL_78:
            if (!v57)
              goto LABEL_55;
            goto LABEL_59;
          }
        }
      }
    }
LABEL_100:
    __break(1u);
LABEL_101:
    if (a1)
      WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_55:
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v11, a4, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)v11, (a3 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v11, (uint64_t)operationParseIntDouble, v45, v46, v47, v48, v49, v50, v12);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v11, 1, v51, v52, v53, v54, v55, v56);
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int *a9@<X8>)
{
  JSC::AssemblerBuffer *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint8x8_t v21;
  __int32 v22;
  uint8x8_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  unsigned __int8 v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned __int8 *v37;
  uint64_t v38;
  __int16 *v39;
  char *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  int64_t v57;
  unsigned __int8 *v58;
  char v59;
  int v60;
  unsigned __int8 *__src;
  JSC::AssemblerBuffer *v62;
  unsigned int v63;
  unsigned int v64;
  __int16 v65;
  _BYTE v66[6];

  v11 = (JSC::AssemblerBuffer *)a3;
  v12 = (uint64_t)a2;
  v13 = a1;
  if ((_DWORD)a6 != 1)
  {
    v65 = a6 | 0x100;
    v63 = 1;
    v62 = (JSC::AssemblerBuffer *)(a1 + 56);
    v15 = 1;
    do
    {
      v16 = 0;
      v17 = 0;
      v18 = v15;
      do
      {
        if ((v66[v16 - 1] & 0x40) != 0)
        {
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }
        v17 |= 1 << v66[v16 - 1];
        v16 += 2;
      }
      while (2 * v15 != v16);
      v19 = 0;
      do
      {
        v20 = v66[v19 - 2] & 0x7F;
        if (v20 >= 0x40)
          goto LABEL_62;
        v17 &= ~(1 << v20);
        v19 += 2;
      }
      while (2 * v15 != v19);
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
      v21.i16[0] = vaddlv_u8(v21);
      v22 = v21.i32[0];
      v23 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v17));
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.i32[0] + v22)
      {
        v24 = 0;
        if (v15 <= 1)
          v25 = 1;
        else
          v25 = v15;
        v26 = 2 * v25;
        while (1)
        {
          v27 = v66[v24 - 1];
          if ((v27 & 0x7Fu) >= 0x40)
            goto LABEL_62;
          if (((v17 >> (v27 & 0x7F)) & 1) != 0)
            break;
          v24 += 2;
          if (v26 == v24)
            goto LABEL_33;
        }
        v28 = v66[v24 - 2];
        if (v28 != v27)
        {
          if ((char)v28 == 63)
          {
            if (v27 == 31)
              goto LABEL_27;
            v30 = v27 & 0x1F | 0xD2800000;
          }
          else
          {
            v29 = (char)v27 == 31 || (char)v28 == 31;
            if (!v29)
            {
              v30 = v27 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v30 = (char)v27 | (32 * (char)v28) | 0x91000000;
          }
LABEL_28:
          v31 = *(_DWORD *)(v13 + 200);
          if (v31 + 4 > *(_DWORD *)(v13 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v62, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v31 = *(_DWORD *)(v13 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v13 + 56) + v31) = v30;
          *(_DWORD *)(v13 + 200) += 4;
          v18 = v63;
        }
        memmove(&v66[v24 - 2], &v66[v24], 2 * v18 - v24 - 2);
        v15 = v63 - 1;
        goto LABEL_32;
      }
      v32 = HIBYTE(v65);
      v59 = v65;
      JSC::MacroAssemblerARM64::swap(v13, (char)v65, SHIBYTE(v65), a4, a5, a6, a7, a8);
      memmove(&v65, v66, 2 * v63 - 2);
      v33 = v63 - 1;
      v29 = v63 == 1;
      v64 = v33;
      v34 = (unsigned __int8 *)&v65;
      __src = &v66[2 * v33 - 2];
      if (v29)
      {
        v35 = 0;
        v36 = 0;
        v60 = 0;
        a2 = &v66[2 * v33 - 2];
      }
      else
      {
        v38 = 2 * v33;
        v39 = &v65;
        while (*(unsigned __int8 *)v39 != v32)
        {
          ++v39;
          v38 -= 2;
          if (!v38)
            goto LABEL_43;
        }
        *(_BYTE *)v39 = v59;
LABEL_43:
        v60 = 0;
        v40 = (char *)&v65;
        a2 = __src;
        v41 = __src;
        do
        {
          if (*v34 == v34[1])
          {
            v42 = v34;
            if (v41 != &v66[2 * v64 - 2])
            {
              if (v34 == a2)
              {
                v42 = v41;
              }
              else
              {
                v57 = v40 - (char *)a2;
                v58 = v41;
                memmove(v41, a2, v40 - (char *)a2);
                v42 = &v58[v57];
              }
            }
            a2 = v34 + 2;
            ++v60;
            v41 = v42;
          }
          v34 += 2;
          v40 += 2;
        }
        while (v34 < __src);
        v35 = v64;
        v36 = v64;
        __src = v41;
      }
      v37 = &v66[2 * v35 - 2];
      if (a2 != v37)
      {
        memmove(__src, a2, v37 - a2);
        v36 = v64;
      }
      v15 = v36 - v60;
LABEL_32:
      v63 = v15;
LABEL_33:
      ;
    }
    while (v15);
  }
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, a5, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v13, (a4 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v13, v12, v43, v44, v45, v46, v47, v48, a9);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v13, 1, v49, v50, v51, v52, v53, v54);
  if ((_BYTE)v11)
  {
    if (v11 == 31)
      LODWORD(v12) = -1862270945;
    else
      LODWORD(v12) = v11 & 0x1F | 0xAA0003E0;
    v56 = *(_DWORD *)(v13 + 200);
    v13 += 200;
    v55 = v56;
    v11 = (JSC::AssemblerBuffer *)(v13 - 144);
    if (v56 + 4 > *(_DWORD *)(v13 - 8))
    {
LABEL_63:
      JSC::AssemblerBuffer::outOfLineGrow(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v55 = *(_DWORD *)v13;
    }
    *(_DWORD *)(*(_QWORD *)v11 + v55) = v12;
    *(_DWORD *)v13 += 4;
  }
}

void JSC::DFG::SpeculativeJIT::compileOverridesHasInstance(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  BOOL v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  WTF *v84;
  unsigned int v85[2];
  char v86;
  __int16 v87;
  char v88;
  _DWORD v89[3];
  uint64_t v90[2];
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int8 v95;
  uint64_t v96;
  unint64_t v97;
  unsigned __int8 v98;
  WTF *v99;
  uint64_t v100;
  _BYTE v101[28];
  unsigned int v102;

  v10 = *((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL;
  v12 = **((_QWORD **)a2 + 9);
  v99 = (WTF *)v101;
  v100 = 2;
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v96, (uint64_t)this, v10, a4, a5, a6, a7, a8);
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v93, (uint64_t)this, *((_QWORD *)a2 + 4), 0, v13, v14, v15, v16);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v91, this, v17, v18, v19, v20, v21, v22);
  v29 = v98;
  if (v98 == 255)
  {
    v29 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v96, v97, v23, v24, v25, v26, v27, v28);
    v98 = v29;
  }
  v30 = v92;
  if (*(unsigned __int16 *)(v11 + 18) > 2u
    || ((v31 = **(_QWORD **)(v11 + 72)) != 0 ? (v32 = (v31 & 0xFFFE000000000002) == 0) : (v32 = 0),
        v32 ? (v33 = v12 == v31) : (v33 = 0),
        !v33))
  {
    v34 = v95;
    if (v95 == 255)
    {
      v34 = JSC::DFG::SpeculativeJIT::fillJSValue(v93, v94, v23, v24, v25, v26, v27, v28);
      v95 = v34;
    }
    JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)v90, this, **((_QWORD **)a2 + 9), v24, v25, v26, v27, v28);
    JSC::DFG::JITCompiler::loadLinkableConstant(this, v90[0], (JSC::ARM64LogicalImmediate *)v90[1], v30, v35, v36, v37, v38);
    JSC::MacroAssemblerARM64::branch64((uint64_t)this, 1, (char)v34, v30, v39, v40, v41, v42, (uint64_t)v89);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v99, v89, v43, v44, v45, v46, v47, v48);
  }
  JSC::MacroAssemblerARM64::test8((uint64_t)this, v29 | 0x600000000, v30, v24, v25, v26, v27, v28);
  JSC::ARM64Assembler::label((_DWORD *)this + 8, v49, v50, v51, v52, v53, v54, v55, (int *)&v102);
  JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), 335544320, v56, v57, v58, v59, v60, v61);
  if (*((_BYTE *)this + 328))
    v68 = 69;
  else
    v68 = 65;
  v85[0] = v102;
  v85[1] = 0;
  v86 = v68;
  v87 = 15;
  v88 = -1;
  if (HIDWORD(v100))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v99, (uint64_t)this, v62, v63, v64, v65, v66, v67);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)1, v30, v69, v70, v71, v72, v73);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v85, (uint64_t)this, v62, v63, v64, v65, v66, v67);
  JSC::DFG::SpeculativeJIT::unblessedBooleanResult((uint64_t)this, v30, (uint64_t)a2, 0);
  if (v91)
  {
    v81 = v92;
    if (v92 != -1)
    {
      if (v92 > 15)
        v81 = -1;
      --*(_DWORD *)(v91 + 12 * v81 + 4784);
    }
  }
  if ((v94 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v82 = (char)v95;
    if ((char)v95 > 15)
      v82 = -1;
    --*(_DWORD *)(v93 + 12 * v82 + 4784);
  }
  if ((v97 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v83 = (char)v98;
    if ((char)v98 > 15)
      v83 = -1;
    --*(_DWORD *)(v96 + 12 * v83 + 4784);
  }
  v84 = v99;
  if (v101 != (_BYTE *)v99)
  {
    if (v99)
    {
      v99 = 0;
      LODWORD(v100) = 0;
      WTF::fastFree((unint64_t)v84, v74, v75, v76, v77, v78, v79, v80);
    }
  }
}

void JSC::MacroAssemblerARM64::test8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;

  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197BA14B4);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, a2, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::test32(a1, 17, (JSC::ARM64LogicalImmediate *)2, v10, v11, v12, v13, v14);
  v22 = *(_DWORD *)(a1 + 200);
  if (v22 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v15, v16, v17, v18, v19, v20, v21);
    v22 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = a3 & 0x1F | 0x1A9F17E0;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::DFG::SpeculativeJIT::compileInstanceOfForCells(uint64_t a1, uint64_t *a2, char a3, char a4, unsigned int a5, uint64_t a6, int *a7)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  uint64_t j;
  uint64_t v40;
  unsigned int v41;
  char v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  _DWORD *v68;
  char *v69;
  unsigned int v70;
  int v71;
  _BYTE *v72;
  unsigned int v73;
  int v74;
  _BYTE *v75;
  WTF *v76;
  WTF *v77;
  uint64_t v78;
  unsigned int v79;
  _BYTE *v80;
  WTF *v81;
  WTF *v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  _BYTE *v86;
  _BYTE *v87;
  _BYTE *v88;
  unsigned int v89;
  int v90;
  _BYTE *v91;
  char v92;
  _BYTE *v93;
  _BYTE *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v104;
  unint64_t v105;
  WTF *v106;
  unsigned int *v107;
  WTF *v108;
  WTF *v109;
  unsigned int v110;
  int v111;
  _BYTE *v112;
  WTF *v113;
  WTF *v114;
  unsigned int v115;
  int v116;
  _BYTE *v117;
  _BYTE *v118;
  _BYTE *v119;
  unsigned int v120;
  int v121;
  _BYTE *v122;
  _BYTE *v123;
  _BYTE *v124;
  unint64_t v125;
  unint64_t v127;
  unint64_t v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  WTF *v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  BOOL v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  BOOL v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  BOOL v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  uint64_t v179;
  WTF *v180;
  unsigned int v181;
  unsigned int v182;
  _BYTE v183[28];
  int v184;
  uint64_t v185;
  WTF *v186;
  unsigned int v187;
  unsigned int v188;
  _BYTE v189[24];
  WTF *v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  __int128 v195;
  char v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  _QWORD v202[2];
  __int128 v203;
  _BYTE v204[4];
  int v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  _BYTE *v211;
  unsigned int v212;
  unsigned int v213;
  _BYTE v214[24];
  _BYTE *v215;
  unsigned int v216;
  unsigned int v217;
  _BYTE v218[40];

  v10 = *a2;
  if ((*a2 & 1) == 0)
    goto LABEL_2;
  v148 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v149 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v149 != 0x3FFFFFFF)
      ? (v150 = (_DWORD)v149 == -1)
      : (v150 = 1),
        v150))
  {
    v151 = 2;
  }
  else if (v149 >> 28)
  {
    v168 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v168 = v148;
    *(_DWORD *)(v168 + 8) = v149;
    v151 = 1;
    v148 = v168;
  }
  else
  {
    v151 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v148 = v149 << 36;
  }
  v10 = v148 | v151;
  if (((v148 | v151) & 1) != 0)
  {
    v160 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v173 = v10;
    if ((v10 & 2) != 0
      || ((v161 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v161 != 0x3FFFFFFF)
        ? (v162 = (_DWORD)v161 == -1)
        : (v162 = 1),
          v162))
    {
      v163 = 2;
    }
    else if (v161 >> 28)
    {
      v169 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v169 = v160;
      *(_DWORD *)(v169 + 8) = v161;
      v163 = 1;
      v160 = v169;
    }
    else
    {
      v163 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
      v160 = v161 << 36;
    }
    v13 = v160 | v163;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 80);
    if ((v13 & 1) != 0)
    {
      v164 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      if ((v13 & 2) != 0
        || ((v165 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v165 != 0x3FFFFFFF)
          ? (v166 = (_DWORD)v165 == -1)
          : (v166 = 1),
            v166))
      {
        v167 = 2;
      }
      else if (v165 >> 28)
      {
        v170 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v170 = v164;
        *(_DWORD *)(v170 + 8) = v165;
        v167 = 1;
        v164 = v170;
      }
      else
      {
        v167 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
        v164 = v165 << 36;
      }
      v12 = 0;
      v174 = 0;
      v14 = v164 | v167;
    }
    else
    {
      v174 = 0;
      v12 = 1;
      v14 = v13;
    }
  }
  else
  {
LABEL_2:
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 80);
    v12 = 1;
    v13 = v10;
    v174 = 1;
    v173 = v10;
    v14 = v10;
  }
  *(_QWORD *)&v203 = v14;
  v22 = JSC::DFG::CodeOriginPool::addCodeOrigin(v11, (uint64_t *)&v203);
  if ((v203 & 1) != 0 && (v203 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v203 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  if ((v12 & 1) == 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  v23 = &v185;
  v24 = a2[4];
  v25 = *(_QWORD *)(a1 + 5504);
  v26 = *(unsigned int *)((v24 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v27 = (uint64_t *)(v25 + 24);
  v28 = (uint64_t *)(v25 + 8);
  if ((v24 & 1) != 0)
    v29 = v27;
  else
    v29 = v28;
  v30 = *v29;
  v31 = *v29 + 32 * v26;
  v32 = *(_DWORD *)(a1 + 5584);
  v33 = *(_DWORD *)(v31 + 20);
  if (v32 != v33)
  {
    if ((*(_QWORD *)(v31 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v33 ^ v32) >= 2)
      {
        v145 = *(_QWORD *)v31;
        if (*(_QWORD *)v31 != 4)
        {
          *(_QWORD *)v31 = v145 | 2;
          v146 = (unsigned int *)(v145 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v145 & 1) != 0)
          {
            v156 = 2 * *v146;
            while (v156 * 4)
            {
              v157 = *(_QWORD *)&v146[v156];
              if ((*(_BYTE *)(v157 + 19) & 0xC) == 0)
              {
                v158 = *(_QWORD *)(v157 + 96);
                v159 = (v158 & 1) != 0 ? (v158 >> 1) & 3 : *(unsigned __int8 *)(v158 + 4);
                v156 -= 2;
                if (v159 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v146, v15, v16, v17, v18, v19, v20, v21);
              goto LABEL_187;
            }
          }
          else if (v146)
          {
            if ((*((_BYTE *)v146 + 19) & 0xC) != 0)
              goto LABEL_187;
            v34 = *((_QWORD *)v146 + 12);
            if ((v34 & 1) != 0)
LABEL_155:
              v147 = (v34 >> 1) & 3;
            else
              v147 = *(unsigned __int8 *)(v34 + 4);
            if (v147 == 2)
LABEL_187:
              *(_QWORD *)v31 = 4;
          }
        }
        *(_DWORD *)(v30 + 32 * v26 + 16) = -21020677;
      }
      if ((v32 & 1) != 0)
        *(_QWORD *)v31 &= ~2uLL;
    }
    *(_DWORD *)(v31 + 20) = v32;
  }
  v34 = 0;
  v26 = *(_QWORD *)(v31 + 8) & 0x800F0000000;
  v35 = a1 + 4776;
  for (i = 15; i != -1; --i)
  {
    if ((char)i <= 15)
      v37 = i;
    else
      v37 = 0xFFFFFFFFLL;
    if (*(_DWORD *)(v35 + 12 * v37 + 8) || *(_DWORD *)(v35 + 12 * v37) != 0x3FFFFFFF)
    {
      if ((i & 0x40) != 0)
      {
LABEL_154:
        __break(1u);
        goto LABEL_155;
      }
      v34 |= 1 << i;
    }
  }
  v38 = a1 + 4968;
  for (j = 0x16u; j != -1; --j)
  {
    v40 = JSC::FPRInfo::toRegister::registerForIndex[j];
    v41 = JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v40];
    if (*(_DWORD *)(v38 + 12 * v41 + 8) || *(_DWORD *)(v38 + 12 * v41) != 0x3FFFFFFF)
    {
      v42 = v40 + 32;
      if ((v42 & 0x40) != 0)
        goto LABEL_154;
      v34 |= 1 << v42;
    }
  }
  v202[0] = v34 | 0xFF00FFFC0000;
  v202[1] = 0;
  if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    v43 = *(_QWORD *)(a1 + 368);
    if (v43)
    {
      v44 = (unsigned int *)(v43 + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 + 1, v44));
    }
    v46 = WTF::fastMalloc((WTF *)0x90);
    *(_QWORD *)v46 = 2;
    *(_DWORD *)(v46 + 96) = 0;
    *(_OWORD *)(v46 + 12) = 0u;
    *(_OWORD *)(v46 + 28) = 0u;
    *(_DWORD *)(v46 + 44) = 0;
    *(_QWORD *)(v46 + 64) = 0;
    *(_QWORD *)(v46 + 72) = 0;
    *(_QWORD *)(v46 + 56) = 0;
    *(_QWORD *)(v46 + 104) = 0;
    *(_QWORD *)(v46 + 112) = -1;
    *(_WORD *)(v46 + 120) = -1;
    *(_DWORD *)(v46 + 122) = 0x10000;
    *(_BYTE *)(v46 + 126) = 0;
    *(_BYTE *)(v46 + 127) = BYTE12(xmmword_1ECF4C260);
    *(_BYTE *)(v46 + 128) = 0;
    *(_WORD *)(v46 + 129) &= 0xFC00u;
    *(_QWORD *)(v46 + 136) = 0;
    *(_QWORD *)(v46 + 136) = *(_QWORD *)(v43 + 184);
    *(_QWORD *)(v43 + 184) = v46;
    v47 = (unsigned int *)(v43 + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (v48 == 1)
    {
      atomic_store(1u, (unsigned int *)(v43 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 32))(v43);
    }
    v49 = 0;
    v50 = 0;
  }
  else
  {
    v50 = *(_DWORD *)(a1 + 3872);
    v46 = WTF::SegmentedVector<JSC::DFG::UnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 3872);
    v49 = 2;
  }
  v51 = *(_QWORD *)(a1 + 336);
  v52 = *a2;
  if ((*a2 & 1) != 0)
  {
    v152 = *(_QWORD *)(v52 & 0xFFFFFFFF8);
    if ((v52 & 2) != 0
      || ((v153 = *(unsigned int *)((v52 & 0xFFFFFFFF8) + 8), (_DWORD)v153 != 0x3FFFFFFF)
        ? (v154 = (_DWORD)v153 == -1)
        : (v154 = 1),
          v154))
    {
      v155 = 2;
    }
    else if (v153 >> 28)
    {
      v172 = *(_QWORD *)(v52 & 0xFFFFFFFF8);
      v152 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v152 = v172;
      *(_DWORD *)(v152 + 8) = v153;
      v155 = 1;
    }
    else
    {
      v155 = *(_QWORD *)(v52 & 0xFFFFFFFF8);
      v152 = v153 << 36;
    }
    v52 = v152 | v155;
  }
  v194 = v52;
  BYTE4(v171) = v26 == 0;
  BYTE3(v171) = a6;
  BYTE2(v171) = a4;
  BYTE1(v171) = a3;
  LOBYTE(v171) = a5;
  JSC::JITInstanceOfGenerator::JITInstanceOfGenerator((uint64_t)&v195, v51, v46, v49, 0, &v194, v22, (uint64_t)v202, v171);
  if ((v194 & 1) != 0 && (v194 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v194 & 0xFFFFFFFF8, v53, v54, v55, v56, v57, v58, v59);
  v190 = (WTF *)&v192;
  v191 = 2;
  v60 = *a7;
  if (*a7 != -1)
  {
    v193 = *(_QWORD *)(a7 + 1);
    HIDWORD(v191) = 1;
    v192 = v60;
  }
  if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 3960) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    JSC::JITDelByValGenerator::generateFastPath((JSC::JITDelByValGenerator *)&v195, (JSC::CCallHelpers *)a1, v54, v55, v56, v57, v58, v59);
    v66 = v200;
    v184 = v200;
    v185 = v201;
    v67 = HIDWORD(v191);
    if (v200 != -1)
    {
      if (HIDWORD(v191) == (_DWORD)v191)
      {
        v68 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v190, (void *)(HIDWORD(v191) + 1), (unint64_t)&v184, v61, v62, v63, v64, v65);
        v23 = (uint64_t *)(v68 + 1);
        v66 = *v68;
        v67 = HIDWORD(v191);
      }
      v69 = (char *)v190 + 12 * v67;
      *(_DWORD *)v69 = v66;
      *(_QWORD *)(v69 + 4) = *v23;
      v67 = ++HIDWORD(v191);
    }
    v70 = v67;
    v180 = (WTF *)v183;
    v181 = 2;
    v182 = v67;
    if (v67 < 3)
    {
      v72 = v183;
      if (!v67)
        goto LABEL_55;
    }
    else
    {
      if (v67 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197BA2334);
      }
      v71 = 12 * v67;
      v72 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v67));
      v181 = (v71 & 0xFFFFFFFC) / 0xC;
      v180 = (WTF *)v72;
      v70 = HIDWORD(v191);
      if (!HIDWORD(v191))
      {
LABEL_55:
        v78 = *((_QWORD *)&v195 + 1);
        v79 = v182;
        v211 = v214;
        v212 = 2;
        v213 = v182;
        if (v182 < 3)
        {
          v80 = v214;
          if (!v182)
            goto LABEL_61;
        }
        else
        {
          if (v182 >= 0x15555556)
          {
            __break(0xC471u);
            JUMPOUT(0x197BA233CLL);
          }
          v80 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v182));
          v212 = 12 * v182 / 0xC;
          v211 = v80;
          v79 = v182;
        }
        v81 = v180;
        v82 = (WTF *)((char *)v180 + 12 * v79);
        do
        {
          *(_DWORD *)v80 = *(_DWORD *)v81;
          *(_QWORD *)(v80 + 4) = *(_QWORD *)((char *)v81 + 4);
          v81 = (WTF *)((char *)v81 + 12);
          v80 += 12;
        }
        while (v81 != v82);
LABEL_61:
        v83 = WTF::fastMalloc((WTF *)0xB0);
        v84 = v213;
        v215 = v218;
        v216 = 2;
        v217 = v213;
        if (v213 < 3)
        {
          v86 = v218;
          if (!v213)
            goto LABEL_68;
        }
        else
        {
          if (v213 >= 0x15555556)
          {
            __break(0xC471u);
            JUMPOUT(0x197BA2344);
          }
          v85 = 12 * v213;
          v86 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v213));
          v216 = (v85 & 0xFFFFFFFC) / 0xC;
          v215 = v86;
          v84 = v213;
          if (!v213)
          {
LABEL_68:
            v89 = v217;
            *(_QWORD *)&v203 = v204;
            DWORD2(v203) = 2;
            HIDWORD(v203) = v217;
            if (v217 < 3)
            {
              v91 = v204;
            }
            else
            {
              if (v217 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x197BA234CLL);
              }
              v90 = 12 * v217;
              v91 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v217));
              DWORD2(v203) = (v90 & 0xFFFFFFFC) / 0xC;
              *(_QWORD *)&v203 = v91;
              v89 = v217;
            }
            v92 = v174;
            if (v89)
            {
              v93 = v215;
              v94 = &v215[12 * v89];
              do
              {
                *(_DWORD *)v91 = *(_DWORD *)v93;
                *(_QWORD *)(v91 + 4) = *(_QWORD *)(v93 + 4);
                v93 += 12;
                v91 += 12;
              }
              while (v93 != v94);
            }
            JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(v83, (uint64_t *)&v203, (_DWORD *)a1, 0, 0, a5);
            v102 = v203;
            if (v204 != (_BYTE *)v203 && (_QWORD)v203 != 0)
            {
              *(_QWORD *)&v203 = 0;
              DWORD2(v203) = 0;
              WTF::fastFree(v102, v95, v96, v97, v98, v99, v100, v101);
            }
            *(_QWORD *)v83 = &off_1E35733F0;
            *(_QWORD *)(v83 + 152) = operationInstanceOfOptimize;
            *(_BYTE *)(v83 + 160) = a3;
            *(_BYTE *)(v83 + 161) = a4;
            *(_QWORD *)(v83 + 168) = v78;
            v104 = (unint64_t)v215;
            if (v218 != v215 && v215)
            {
              v215 = 0;
              v216 = 0;
              WTF::fastFree(v104, v95, v96, v97, v98, v99, v100, v101);
            }
            v105 = (unint64_t)v211;
            if (v214 != v211 && v211)
            {
              v211 = 0;
              v212 = 0;
              WTF::fastFree(v105, v95, v96, v97, v98, v99, v100, v101);
            }
            v106 = v180;
            if (v183 != (_BYTE *)v180 && v180)
            {
              v107 = &v181;
              v180 = 0;
LABEL_127:
              *v107 = 0;
              WTF::fastFree((unint64_t)v106, v95, v96, v97, v98, v99, v100, v101);
              goto LABEL_128;
            }
            goto LABEL_128;
          }
        }
        v87 = v211;
        v88 = &v211[12 * v84];
        do
        {
          *(_DWORD *)v86 = *(_DWORD *)v87;
          *(_QWORD *)(v86 + 4) = *(_QWORD *)(v87 + 4);
          v87 += 12;
          v86 += 12;
        }
        while (v87 != v88);
        goto LABEL_68;
      }
    }
    v76 = v190;
    v77 = (WTF *)((char *)v190 + 12 * v70);
    do
    {
      *(_DWORD *)v72 = *(_DWORD *)v76;
      *(_QWORD *)(v72 + 4) = *(_QWORD *)((char *)v76 + 4);
      v76 = (WTF *)((char *)v76 + 12);
      v72 += 12;
    }
    while (v76 != v77);
    goto LABEL_55;
  }
  JSC::JITInlineCacheGenerator::generateDFGDataICFastPath((uint64_t)&v195, a1, v50, a6, v56, v57, v58, v59);
  v73 = HIDWORD(v191);
  v186 = (WTF *)v189;
  v187 = 2;
  v188 = HIDWORD(v191);
  if (HIDWORD(v191) < 3)
  {
    v75 = v189;
    if (!HIDWORD(v191))
      goto LABEL_92;
    goto LABEL_90;
  }
  if (HIDWORD(v191) >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x197BA2354);
  }
  v74 = 12 * HIDWORD(v191);
  v75 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v191)));
  v187 = (v74 & 0xFFFFFFFC) / 0xC;
  v186 = (WTF *)v75;
  v73 = HIDWORD(v191);
  if (HIDWORD(v191))
  {
LABEL_90:
    v108 = v190;
    v109 = (WTF *)((char *)v190 + 12 * v73);
    do
    {
      *(_DWORD *)v75 = *(_DWORD *)v108;
      *(_QWORD *)(v75 + 4) = *(_QWORD *)((char *)v108 + 4);
      v108 = (WTF *)((char *)v108 + 12);
      v75 += 12;
    }
    while (v108 != v109);
  }
LABEL_92:
  v110 = v188;
  v211 = v214;
  v212 = 2;
  v213 = v188;
  if (v188 < 3)
  {
    v112 = v214;
    if (!v188)
      goto LABEL_99;
    goto LABEL_97;
  }
  if (v188 >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x197BA235CLL);
  }
  v111 = 12 * v188;
  v112 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v188));
  v212 = (v111 & 0xFFFFFFFC) / 0xC;
  v211 = v112;
  v110 = v188;
  if (v188)
  {
LABEL_97:
    v113 = v186;
    v114 = (WTF *)((char *)v186 + 12 * v110);
    do
    {
      *(_DWORD *)v112 = *(_DWORD *)v113;
      *(_QWORD *)(v112 + 4) = *(_QWORD *)((char *)v113 + 4);
      v113 = (WTF *)((char *)v113 + 12);
      v112 += 12;
    }
    while (v113 != v114);
  }
LABEL_99:
  v83 = WTF::fastMalloc((WTF *)0xB8);
  v115 = v213;
  v215 = v218;
  v216 = 2;
  v217 = v213;
  if (v213 < 3)
  {
    v117 = v218;
    if (!v213)
      goto LABEL_106;
    goto LABEL_104;
  }
  if (v213 >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x197BA2364);
  }
  v116 = 12 * v213;
  v117 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v213));
  v216 = (v116 & 0xFFFFFFFC) / 0xC;
  v215 = v117;
  v115 = v213;
  if (v213)
  {
LABEL_104:
    v118 = v211;
    v119 = &v211[12 * v115];
    do
    {
      *(_DWORD *)v117 = *(_DWORD *)v118;
      *(_QWORD *)(v117 + 4) = *(_QWORD *)(v118 + 4);
      v118 += 12;
      v117 += 12;
    }
    while (v118 != v119);
  }
LABEL_106:
  v120 = v217;
  *(_QWORD *)&v203 = v204;
  DWORD2(v203) = 2;
  HIDWORD(v203) = v217;
  if (v217 < 3)
  {
    v122 = v204;
  }
  else
  {
    if (v217 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BA236CLL);
    }
    v121 = 12 * v217;
    v122 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v217));
    DWORD2(v203) = (v121 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)&v203 = v122;
    v120 = v217;
  }
  v92 = v174;
  if (v120)
  {
    v123 = v215;
    v124 = &v215[12 * v120];
    do
    {
      *(_DWORD *)v122 = *(_DWORD *)v123;
      *(_QWORD *)(v122 + 4) = *(_QWORD *)(v123 + 4);
      v123 += 12;
      v122 += 12;
    }
    while (v123 != v124);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(v83, (uint64_t *)&v203, (_DWORD *)a1, 0, 0, a5);
  v125 = v203;
  if (v204 != (_BYTE *)v203 && (_QWORD)v203 != 0)
  {
    *(_QWORD *)&v203 = 0;
    DWORD2(v203) = 0;
    WTF::fastFree(v125, v95, v96, v97, v98, v99, v100, v101);
  }
  *(_QWORD *)v83 = &off_1E35733C0;
  *(_BYTE *)(v83 + 152) = a6;
  *(_QWORD *)(v83 + 156) = a6 | 0x3000000000;
  *(_QWORD *)(v83 + 168) = operationInstanceOfOptimize;
  *(_BYTE *)(v83 + 176) = a3;
  *(_BYTE *)(v83 + 177) = a4;
  *(_BYTE *)(v83 + 178) = a6;
  *(_DWORD *)(v83 + 180) = v50;
  v127 = (unint64_t)v215;
  if (v218 != v215 && v215)
  {
    v215 = 0;
    v216 = 0;
    WTF::fastFree(v127, v95, v96, v97, v98, v99, v100, v101);
  }
  v128 = (unint64_t)v211;
  if (v214 != v211 && v211)
  {
    v211 = 0;
    v212 = 0;
    WTF::fastFree(v128, v95, v96, v97, v98, v99, v100, v101);
  }
  v106 = v186;
  if (v189 != (_BYTE *)v186 && v186)
  {
    v107 = &v187;
    v186 = 0;
    goto LABEL_127;
  }
LABEL_128:
  v203 = v195;
  v204[0] = v196;
  v129 = v197;
  v130 = v198;
  v205 = v197;
  v206 = v198;
  v131 = HIDWORD(v198);
  v132 = v199;
  v207 = v199;
  v133 = HIDWORD(v199);
  v134 = v200;
  v208 = v200;
  v135 = v201;
  v209 = v201;
  v210 = v83;
  v136 = *(unsigned int *)(a1 + 3172);
  if ((_DWORD)v136 == *(_DWORD *)(a1 + 3168))
  {
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPrivateBrandAccessGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::InlineCacheWrapper<JSC::JITPrivateBrandAccessGenerator>>(a1 + 3160, (unint64_t)&v203);
  }
  else
  {
    v137 = *(_QWORD *)(a1 + 3160) + (v136 << 6);
    v138 = v195;
    *(_BYTE *)(v137 + 16) = v196;
    *(_OWORD *)v137 = v138;
    *(_DWORD *)(v137 + 20) = v129;
    *(_DWORD *)(v137 + 24) = v130;
    *(_DWORD *)(v137 + 28) = v131;
    *(_DWORD *)(v137 + 32) = v132;
    *(_DWORD *)(v137 + 36) = v133;
    *(_DWORD *)(v137 + 40) = v134;
    *(_QWORD *)(v137 + 44) = v135;
    *(_QWORD *)(v137 + 56) = v83;
    ++*(_DWORD *)(a1 + 3172);
  }
  v179 = v83;
  v139 = (_QWORD *)(a1 + 5656);
  v140 = *(unsigned int *)(a1 + 5668);
  if ((_DWORD)v140 == *(_DWORD *)(a1 + 5664))
  {
    v142 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v139, v140 + 1, (unint64_t)&v179);
    v140 = *(unsigned int *)(a1 + 5668);
    v141 = (uint64_t *)(*(_QWORD *)(a1 + 5656) + 8 * v140);
    v83 = *v142;
  }
  else
  {
    v141 = (uint64_t *)(*v139 + 8 * v140);
    v142 = &v179;
  }
  *v142 = 0;
  *v141 = v83;
  *(_DWORD *)(a1 + 5668) = v140 + 1;
  v143 = v179;
  v179 = 0;
  if (v143)
    (*(void (**)(uint64_t))(*(_QWORD *)v143 + 8))(v143);
  v144 = v190;
  if (&v192 != (int *)v190 && v190)
  {
    v190 = 0;
    LODWORD(v191) = 0;
    WTF::fastFree((unint64_t)v144, v95, v96, v97, v98, v99, v100, v101);
  }
  if ((v92 & 1) == 0 && (v173 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v173 & 0xFFFFFFFF8, v95, v96, v97, v98, v99, v100, v101);
}

uint64_t JSC::DFG::SpeculativeJIT::compileInstanceOf(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  unsigned int v30;
  char v31;
  BOOL v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  JSC::AssemblerBuffer *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  char v74;
  JSC::AssemblerBuffer *v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  unsigned int v81[2];
  char v82;
  __int16 v83;
  char v84;
  JSC::DFG::SpeculativeJIT *v85[2];
  uint64_t v86;
  int v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  char v92;

  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if ((_DWORD)v11 == 8)
  {
    v12 = *((_QWORD *)a2 + 4);
    if ((v12 & 0xFC000000000000) == 0x20000000000000)
    {
      LOBYTE(v90) = 0;
      v92 = 0;
      v13 = v10 & 0xFF00FFFFFFFFFFFFLL;
      if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_39;
      v14 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v14 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197BA2A04);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 12))
      {
        v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
        v12 = *((_QWORD *)a2 + 4);
      }
      else
      {
LABEL_39:
        v15 = -1;
      }
      if ((v12 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_40;
      v16 = ~*(_DWORD *)((v12 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v16 < *((unsigned int *)this + 1001))
      {
        if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v16 + 12))
        {
          v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v12, a3, a4, a5, a6, a7, a8);
LABEL_11:
          JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v88, this, a3, a4, a5, a6, a7, a8);
          v24 = -1;
          if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
            goto LABEL_12;
          v85[0] = this;
          std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v90, v85, v18, v19, v20, v21, v22, v23);
          if (v92)
          {
            v24 = v91;
LABEL_12:
            if (v15 == -1)
              v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, v18, v19, v20, v21, v22, v23);
            if (v17 == -1)
              v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v12, v18, v19, v20, v21, v22, v23);
            v25 = v89;
            v86 = 0xFFFFFFFFLL;
            v87 = -16773311;
            JSC::DFG::SpeculativeJIT::compileInstanceOfForCells((uint64_t)this, (uint64_t *)a2, v15, v17, v89, v24, (int *)&v86);
            result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v25, (uint64_t)a2, 21, 0, v26, v27, v28);
            if (v88)
            {
              v30 = v89;
              if (v89 != -1)
              {
                if (v89 > 15)
                  v30 = -1;
                --*(_DWORD *)(v88 + 12 * v30 + 4784);
              }
            }
            if ((v12 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              if (v17 > 15)
                v31 = -1;
              else
                v31 = v17;
              --*((_DWORD *)this + 3 * v31 + 1196);
            }
            if (v13)
            {
              v32 = v15 <= 15;
LABEL_28:
              if (v32)
                v33 = v15;
              else
                v33 = -1;
              --*((_DWORD *)this + 3 * v33 + 1196);
              goto LABEL_32;
            }
            goto LABEL_32;
          }
          goto LABEL_91;
        }
LABEL_40:
        v17 = -1;
        goto LABEL_11;
      }
      __break(0xC471u);
LABEL_91:
      __break(1u);
      goto LABEL_92;
    }
    goto LABEL_78;
  }
  if ((_DWORD)v11)
  {
LABEL_78:
    JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 495), a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x13CD, "void JSC::DFG::SpeculativeJIT::compileInstanceOf(Node *)", "node->child1().useKind() == UntypedUse");
    __break(0xC471u);
    goto LABEL_94;
  }
  v35 = *((_QWORD *)a2 + 4);
  if ((v35 & 0xFC000000000000) != 0)
  {
    JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 495), a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x13CE, "void JSC::DFG::SpeculativeJIT::compileInstanceOf(Node *)", "node->child2().useKind() == UntypedUse");
    __break(0xC471u);
    JUMPOUT(0x197BA2968);
  }
  LOBYTE(v90) = 0;
  v92 = 0;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_76;
  v36 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v36 >= *((unsigned int *)this + 1001))
  {
LABEL_92:
    __break(0xC471u);
    JUMPOUT(0x197BA2A14);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v36 + 12))
  {
    v15 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    v35 = *((_QWORD *)a2 + 4);
  }
  else
  {
LABEL_76:
    v15 = -1;
  }
  if ((v35 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_77;
  v37 = ~*(_DWORD *)((v35 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v37 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_94:
    JUMPOUT(0x197BA2900);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v37 + 12))
    v38 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v35, a3, a4, a5, a6, a7, a8);
  else
LABEL_77:
    v38 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v88, this, a3, a4, a5, a6, a7, a8);
  v45 = -1;
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 16) - 1) & 0xFFFFFFFD) == 0)
  {
    v85[0] = this;
    std::optional<JSC::DFG::GPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>((char *)&v90, v85, v39, v40, v41, v42, v43, v44);
    if (!v92)
      goto LABEL_91;
    v45 = v91;
  }
  if (v15 == -1)
    v15 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, v39, v40, v41, v42, v43, v44);
  if (v38 == -1)
    v38 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v35, v39, v40, v41, v42, v43, v44);
  v76 = v35 & 0xFF00FFFFFFFFFFFFLL;
  v46 = v89;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v15, 28, v41, v42, v43, v44, (uint64_t)v85);
  v54 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  v55 = *((_DWORD *)this + 50);
  if (v55 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v54, v47, v48, v49, v50, v51, v52, v53);
    v54 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
    v55 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v55) = v46 | 0x321F07E0;
  v56 = *((_DWORD *)this + 50) + 4;
  *((_DWORD *)this + 50) = v56;
  if (v56 < *((_DWORD *)this + 13))
  {
    v75 = v54;
    do
    {
      if ((v56 + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v75, v47, v48, v49, v50, v51, v52, v53);
        v56 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v56) = -721215457;
      v56 = *((_DWORD *)this + 50) + 4;
      *((_DWORD *)this + 50) = v56;
      v54 = v75;
    }
    while (v56 < *((_DWORD *)this + 13));
  }
  v57 = v56;
  if ((v56 + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v54, v47, v48, v49, v50, v51, v52, v53);
    v57 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v57) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v58 = 69;
  else
    v58 = 65;
  v81[0] = v56;
  v81[1] = 0;
  v82 = v58;
  v83 = 15;
  v84 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v85, (uint64_t)this, v48, v49, v50, v51, v52, v53);
  JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v38, 1, v59, v60, v61, v62, v63, (uint64_t)&v79);
  v77 = v79;
  v78 = v80;
  JSC::DFG::SpeculativeJIT::compileInstanceOfForCells((uint64_t)this, (uint64_t *)a2, v15, v38, v46, v45, &v77);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v81, (uint64_t)this, v64, v65, v66, v67, v68, v69);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v46, (uint64_t)a2, 21, 0, v70, v71, v72);
  if (v88)
  {
    v73 = v89;
    if (v89 != -1)
    {
      if (v89 > 15)
        v73 = -1;
      --*(_DWORD *)(v88 + 12 * v73 + 4784);
    }
  }
  if (v76)
  {
    if (v38 > 15)
      v74 = -1;
    else
      v74 = v38;
    --*((_DWORD *)this + 3 * v74 + 1196);
  }
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v32 = v15 <= 15;
    goto LABEL_28;
  }
LABEL_32:
  if (v92)
  {
    if (v90)
    {
      v34 = v91;
      if (v91 != -1)
      {
        if (v91 > 15)
          v34 = -1;
        --*(_DWORD *)(v90 + 12 * v34 + 4784);
      }
    }
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileValueBitNot(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  JSC::DFG::Node *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  JSC::DFG::Node *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  unsigned __int8 v70;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFC000000000000) == 0x6C000000000000)
  {
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v68, (uint64_t)this, v10, a4, a5, a6, a7, a8);
    v47 = v70;
    if (v70 == 255)
    {
      v47 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v68, v69, v41, v42, v43, v44, v45, v46);
      v70 = v47;
    }
    v48 = (char)v47;
    JSC::DFG::SpeculativeJIT::speculateHeapBigInt((uint64_t)this, *((_QWORD *)a2 + 3), v48, v42, v43, v44, v45, v46);
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v49, v50, v51, v52, v53, v54, v55);
    ++*((_DWORD *)this + 1196);
    v62 = *((unsigned int *)this + 1194);
    if ((_DWORD)v62 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v62, (uint64_t)v56, v57, v58, v59, v60, v61);
    }
    v63 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v56, v57, v58, v59, v60, v61);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>((uint64_t)this, (unsigned __int8 *)operationBitNotHeapBigInt, 0, v63, v64, v48, v65, v66, &v67);
  }
  else
  {
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v68, (uint64_t)this, v10, 1, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::speculate(this, v11, *((_QWORD *)a2 + 3), v12, v13, v14, v15, v16);
    v24 = v70;
    if (v70 == 255)
    {
      v24 = JSC::DFG::SpeculativeJIT::fillJSValue(v68, v69, v18, v19, v20, v21, v22, v23);
      v70 = v24;
    }
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v17, v18, v19, v20, v21, v22, v23);
    ++*((_DWORD *)this + 1196);
    v31 = *((unsigned int *)this + 1194);
    if ((_DWORD)v31 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v31, (uint64_t)v25, v26, v27, v28, v29, v30);
    }
    v32 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v25, v26, v27, v28, v29, v30);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>((uint64_t)this, (unsigned __int8 *)operationValueBitNot, 0, v32, v33, v24, v34, v35, &v67);
  }
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v36, v37, v38);
  --*((_DWORD *)this + 1196);
  if ((v69 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v40 = (char)v70;
    if ((char)v70 > 15)
      v40 = -1;
    --*(_DWORD *)(v68 + 12 * v40 + 4784);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::speculateHeapBigInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _BYTE v34[12];

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 5616);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((a2 & 1) != 0)
    v15 = v14;
  v16 = *v15;
  v17 = *v15 + 32 * v13;
  v18 = *(_DWORD *)(v11 + 88);
  v19 = *(_DWORD *)(v17 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v26 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 != 4)
        {
          *(_QWORD *)v17 = v26 | 2;
          v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v26 & 1) != 0)
          {
            v30 = 2 * *v27;
            while (v30 * 4)
            {
              v31 = *(_QWORD *)&v27[v30];
              if ((*(_BYTE *)(v31 + 19) & 0xC) == 0)
              {
                v32 = *(_QWORD *)(v31 + 96);
                v33 = (v32 & 1) != 0 ? (v32 >> 1) & 3 : *(unsigned __int8 *)(v32 + 4);
                v30 -= 2;
                if (v33 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v27, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_30;
            }
          }
          else if (v27)
          {
            if ((*((_BYTE *)v27 + 19) & 0xC) != 0
              || ((v28 = *((_QWORD *)v27 + 12), (v28 & 1) != 0)
                ? (v29 = (v28 >> 1) & 3)
                : (v29 = *(unsigned __int8 *)(v28 + 4)),
                  v29 == 2))
            {
LABEL_30:
              *(_QWORD *)v17 = 4;
            }
          }
        }
        *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v17 &= ~2uLL;
    }
    *(_DWORD *)(v17 + 20) = v18;
  }
  if ((*(_QWORD *)(v17 + 8) & 0x2400FFFFFFF7) != 0)
  {
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v8 | 0x500000000, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 3, v20, v21, v22, v23, (uint64_t)v34);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v8 << 32) | 0x80000000), a2, 0xFFFFDBFF00000008, (uint64_t)v34, 1uLL, v24, v25);
    }
    else
    {
      __break(0xC471u);
    }
  }
}

uint64_t *JSC::DFG::SpeculativeJIT::compileBitwiseNot(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  char v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t *result;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned __int8 v39;
  JSC::DFG::SpeculativeJIT *v40;
  unint64_t v41;
  char v42;
  _BYTE v43[7];

  v9 = *((_QWORD *)a2 + 3);
  v40 = this;
  v41 = v9;
  v42 = -1;
  v10 = ~*(_DWORD *)((v9 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v10 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_34;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v10 + 12))
    v42 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v9, (uint64_t)v43, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v38, this, a3, a4, a5, a6, a7, a8);
  v19 = v39;
  v20 = (char)v39;
  v21 = v42;
  if (v42 == 255)
  {
    v21 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v40, v41, (uint64_t)v43, v14, v15, v16, v17, v18);
    v42 = v21;
  }
  if (v21 != v20)
  {
    if (v21 == 63)
    {
      if (v20 != 31)
      {
        v24 = v19 & 0x1F | 0xD2800000;
        goto LABEL_12;
      }
    }
    else if (v20 != 31 && v21 != 31)
    {
      v22 = v19 & 0xFFE0FFFF | ((v21 & 0x1F) << 16);
      v23 = -1442839584;
LABEL_11:
      v24 = v22 | v23;
LABEL_12:
      v26 = (unsigned int *)((char *)this + 200);
      v25 = *((_DWORD *)this + 50);
      if (v25 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v12, v13, v14, v15, v16, v17, v18);
        v25 = *v26;
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v25) = v24;
      *v26 += 4;
      goto LABEL_15;
    }
    v22 = v20 | (32 * v21);
    v23 = -1862270976;
    goto LABEL_11;
  }
LABEL_15:
  v27 = *((_DWORD *)this + 50);
  if (v27 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v12, v13, v14, v15, v16, v17, v18);
    v27 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v27) = v19 & 0xFFE0FFFF | ((v19 & 0x1F) << 16) | 0x2A2003E0;
  *((_DWORD *)this + 50) += 4;
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v13, v14, v15, v16, v17, v18);
  v29 = *((_DWORD *)a2 + 12);
  v30 = ~v29;
  if (v30 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_34:
    JUMPOUT(0x197BA307CLL);
  }
  v31 = *((_QWORD *)this + 499);
  if (v20 > 15)
    v32 = -1;
  else
    v32 = v20;
  v33 = (char *)this + 12 * v32;
  *((_DWORD *)v33 + 1194) = v29;
  *((_DWORD *)v33 + 1195) = 5;
  v34 = v31 + 24 * (int)v30;
  v35 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v34 = a2;
  *(_DWORD *)(v34 + 8) = v35;
  *(_BYTE *)(v34 + 17) = v20;
  *(_DWORD *)(v34 + 12) = 1;
  *(_BYTE *)(v34 + 16) = 0;
  if (v38)
  {
    v36 = (char)v39;
    if ((char)v39 != -1)
    {
      if ((char)v39 > 15)
        v36 = -1;
      --*(_DWORD *)(v38 + 12 * v36 + 4784);
    }
  }
  v37 = v42;
  if (v42 > 15)
    v37 = -1;
  --*((_DWORD *)v40 + 3 * v37 + 1196);
  return result;
}

void JSC::DFG::SpeculativeJIT::compileValueBitwiseOp(JSC::DFG::Graph **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::DFG::Graph *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  JSC::DFG::Graph *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  JSC::AssemblerBuffer *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  _BOOL4 v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  JSC::DFG::Node *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  JSC::JSBigInt *(*v92)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  int v106;
  unsigned __int8 v107;
  unsigned __int8 v108;
  JSC::AssemblerBuffer *v109;
  char v110;
  uint64_t v111;
  JSC::DFG::Node *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int i;
  unsigned int v119;
  char v120;
  int *v121;
  int *v122;
  int v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  int v128;
  unsigned __int8 v129;
  uint64_t v130;
  unsigned int *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  WTF *v150;
  unsigned int v151;
  unsigned int v152;
  char v153;
  char v154;
  char v155;
  uint64_t v156;
  int v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned __int8 v182;
  unsigned __int8 v183;
  JSC::DFG::Node *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  unsigned int v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  JSC::DFG::Graph **v201;
  JSC::DFG::Graph **v202;
  int v203;
  unint64_t v204;
  char v205;
  unint64_t v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  char v212;
  __int16 v213;
  char v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  unint64_t v218;
  unsigned __int8 v219;
  _BYTE v220[20];
  char v221;
  char v222;
  unsigned __int8 v223;
  char v224;
  char v225;
  WTF *v226;
  uint64_t v227;
  _BYTE v228[24];
  _QWORD *v229;
  uint64_t v230;
  _QWORD v231[5];

  v231[3] = *MEMORY[0x1E0C80C00];
  v10 = *((unsigned __int16 *)a2 + 9);
  v11 = *((_QWORD *)a2 + 3);
  if ((v11 & 0xFC000000000000) == 0x6C000000000000
    && (*((_QWORD *)a2 + 4) & 0xFC000000000000) == 0x6C000000000000)
  {
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)v220, (uint64_t)this, v11, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v217, (uint64_t)this, *((_QWORD *)a2 + 4), v55, v56, v57, v58, v59);
    v66 = v220[16];
    if (v220[16] == 255)
    {
      v66 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(*(uint64_t *)v220, *(unint64_t *)&v220[8], v60, v61, v62, v63, v64, v65);
      v220[16] = v66;
    }
    v67 = v219;
    if (v219 == 255)
    {
      v67 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v217, v218, v60, v61, v62, v63, v64, v65);
      v219 = v67;
    }
    v68 = v66;
    JSC::DFG::SpeculativeJIT::speculateHeapBigInt((uint64_t)this, *((_QWORD *)a2 + 3), v68, v61, v62, v63, v64, v65);
    v69 = (char)v67;
    JSC::DFG::SpeculativeJIT::speculateHeapBigInt((uint64_t)this, *((_QWORD *)a2 + 4), v69, v70, v71, v72, v73, v74);
    JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)this, v75, v76, v77, v78, v79, v80, v81);
    ++*((_DWORD *)this + 1196);
    v88 = *((unsigned int *)this + 1194);
    if ((_DWORD)v88 != 0x3FFFFFFF)
    {
      this[597] = (JSC::DFG::Graph *)0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v88, (uint64_t)v82, v83, v84, v85, v86, v87);
    }
    switch(v10)
    {
      case '/':
        v89 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v82, v83, v84, v85, v86, v87);
        v91 = v200;
        v92 = operationBitXorHeapBigInt;
        break;
      case '-':
        v89 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v82, v83, v84, v85, v86, v87);
        v91 = v199;
        v92 = operationBitOrHeapBigInt;
        break;
      case '+':
        v89 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v82, v83, v84, v85, v86, v87);
        v91 = v90;
        v92 = operationBitAndHeapBigInt;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197BA3CA4);
    }
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&v215, (unsigned __int8 *)this, (uint64_t)v92, 0, v89, v91, v68, v69);
    goto LABEL_136;
  }
  if (v10 != 43)
  {
    if (v10 == 45)
    {
      JSC::DFG::SpeculativeJIT::emitUntypedOrAnyBigIntBitOp<JSC::JITBitOrGenerator,&(operationValueBitOr)>((uint64_t)this, (uint64_t)a2, v11, a4, a5, a6, a7, a8);
    }
    else
    {
      if (v10 != 47)
      {
        __break(0xC471u);
        JUMPOUT(0x197BA3AF4);
      }
      JSC::DFG::SpeculativeJIT::emitUntypedOrAnyBigIntBitOp<JSC::JITBitXorGenerator,&(operationValueBitXor)>((uint64_t)this, (uint64_t)a2, v11, a4, a5, a6, a7, a8);
    }
    return;
  }
  v12 = (v11 >> 50) & 0x3F;
  if (((v11 >> 50) & 0x3F) > 0x1A)
  {
    if ((_DWORD)v12 == 27)
    {
      v13 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
      v14 = 0x6C000000000000;
    }
    else
    {
      if ((_DWORD)v12 != 28)
        goto LABEL_30;
      v13 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
      v14 = 0x70000000000000;
    }
    goto LABEL_7;
  }
  if ((_DWORD)v12)
  {
    if ((_DWORD)v12 != 26)
      goto LABEL_30;
    v13 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
    v14 = 0x68000000000000;
LABEL_7:
    if (v13 == v14)
      goto LABEL_8;
LABEL_30:
    JSC::DFG::Graph::logAssertionFailure(this[495], a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x143B, "void JSC::DFG::SpeculativeJIT::emitUntypedOrAnyBigIntBitOp(Node *) [SnippetGenerator = JSC::JITBitAndGenerator, snippetSlowPathFunction = &JSC::DFG::operationValueBitAnd]", "node->isBinaryUseKind(UntypedUse) || node->isBinaryUseKind(AnyBigIntUse) || node->isBinaryUseKind(HeapBigIntUse) || node->isBinaryUseKind(BigInt32Use)");
    __break(0xC471u);
    goto LABEL_166;
  }
  if ((*((_BYTE *)a2 + 38) & 0xFC) != 0)
    goto LABEL_30;
LABEL_8:
  v15 = this[688];
  v16 = (_QWORD *)((char *)v15 + 24);
  v17 = (_QWORD *)((char *)v15 + 8);
  if ((v11 & 1) != 0)
    v17 = v16;
  v18 = *v17 + 32 * *(unsigned int *)((v11 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v19 = (void *)*((unsigned int *)this + 1396);
  if ((_DWORD)v19 != *(_DWORD *)(v18 + 20))
  {
    if ((*(_QWORD *)(v18 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v18, v19, v11, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v18 + 20) = (_DWORD)v19;
  }
  if (!*(_BYTE *)(v18 + 12))
    goto LABEL_129;
  v20 = *((_QWORD *)a2 + 4);
  v21 = this[688];
  v22 = *(unsigned int *)((v20 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v23 = (_QWORD *)((char *)v21 + 24);
  v24 = (_QWORD *)((char *)v21 + 8);
  if ((v20 & 1) != 0)
    v25 = v23;
  else
    v25 = v24;
  v26 = *v25 + 32 * v22;
  v27 = (void *)*((unsigned int *)this + 1396);
  if ((_DWORD)v27 != *(_DWORD *)(v26 + 20))
  {
    if ((*(_QWORD *)(v26 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v26, v27, v11, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v26 + 20) = (_DWORD)v27;
  }
  if (!*(_BYTE *)(v26 + 12))
  {
LABEL_129:
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v220, (uint64_t)this, *((_QWORD *)a2 + 3), 1, a5, a6, a7, a8);
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v217, (uint64_t)this, *((_QWORD *)a2 + 4), 1, v159, v160, v161, v162);
    JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)this, v163, *((_QWORD *)a2 + 3), v164, v165, v166, v167, v168);
    JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)this, v169, *((_QWORD *)a2 + 4), v170, v171, v172, v173, v174);
    v182 = v220[16];
    if (v220[16] == 255)
    {
      v182 = JSC::DFG::SpeculativeJIT::fillJSValue(*(uint64_t *)v220, *(uint64_t *)&v220[8], v176, v177, v178, v179, v180, v181);
      v220[16] = v182;
    }
    v183 = v219;
    if (v219 == 255)
    {
      v183 = JSC::DFG::SpeculativeJIT::fillJSValue(v217, v218, v176, v177, v178, v179, v180, v181);
      v219 = v183;
    }
    JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)this, v175, v176, v177, v178, v179, v180, v181);
    ++*((_DWORD *)this + 1196);
    v190 = *((unsigned int *)this + 1194);
    if ((_DWORD)v190 != 0x3FFFFFFF)
    {
      this[597] = (JSC::DFG::Graph *)0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v190, (uint64_t)v184, v185, v186, v187, v188, v189);
    }
    v191 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v184, v185, v186, v187, v188, v189);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v215, (unsigned __int8 *)this, (uint64_t)operationValueBitAnd, 0, v191, v192, v182, v183);
LABEL_136:
    JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v193, v194, v195);
    --*((_DWORD *)this + 1196);
    if ((v218 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v196 = (char)v219;
      if ((char)v219 > 15)
        v196 = -1;
      --*(_DWORD *)(v217 + 12 * v196 + 4784);
    }
    if ((*(_QWORD *)&v220[8] & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v197 = v220[16];
      if (v220[16] > 15)
        v197 = -1;
      v156 = *(_QWORD *)v220 + 12 * v197;
      goto LABEL_111;
    }
    return;
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v217, (JSC::DFG::SpeculativeJIT *)this, v11, a4, a5, a6, a7, a8);
  v28 = (JSC::AssemblerBuffer *)v218;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v215, (JSC::DFG::SpeculativeJIT *)this, v29, v30, v31, v32, v33, v34);
  v42 = v216;
  v43 = *((_QWORD *)a2 + 3);
  v206 = v43 & 0xFF00FFFFFFFFFFFFLL;
  if (*(unsigned __int16 *)((v43 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u
    && **(_QWORD **)((v43 & 0xFF00FFFFFFFFFFFFLL) + 0x48) >= 0xFFFE000000000000)
  {
    v203 = 0;
    v202 = 0;
    v44 = 0;
    v94 = **(_QWORD **)((v43 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v208 = 1;
    LOBYTE(v47) = -1;
    goto LABEL_51;
  }
  if (*(unsigned __int16 *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u)
  {
    v93 = **(_QWORD **)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v45 = v93 < 0xFFFE000000000000;
    if (v93 >= 0xFFFE000000000000)
      v44 = **(_QWORD **)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    else
      v44 = 0;
  }
  else
  {
    v44 = 0;
    v45 = 1;
  }
  if ((v43 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_47;
  v46 = ~*(_DWORD *)((v43 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v46 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BA3CACLL);
  }
  if (*((_BYTE *)this[499] + 24 * (int)v46 + 12))
  {
    v47 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v43, v36, v37, v38, v39, v40, v41);
    JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)this, v48, *((_QWORD *)a2 + 3), v49, v50, v51, v52, v53);
    if (v47 != -1)
      goto LABEL_49;
  }
  else
  {
LABEL_47:
    JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)this, v35, v43, v37, v38, v39, v40, v41);
  }
  LOBYTE(v47) = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v43, v54, v37, v38, v39, v40, v41);
LABEL_49:
  v208 = 0;
  v203 = 1;
  if (v45)
  {
    v94 = 0;
    v202 = this;
LABEL_51:
    v95 = *((_QWORD *)a2 + 4);
    v204 = v95;
    if ((v95 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_56;
    v96 = ~*(_DWORD *)((v95 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v96 < *((unsigned int *)this + 1001))
    {
      if (*((_BYTE *)this[499] + 24 * (int)v96 + 12))
      {
        v97 = *((_QWORD *)a2 + 4);
        v98 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v95, v95, v37, v38, v39, v40, v41);
        JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)this, v99, *((_QWORD *)a2 + 4), v100, v101, v102, v103, v104);
        if (v98 != -1)
        {
          v105 = v42;
          v106 = 0;
          v201 = this;
          v205 = v98;
          v107 = v98;
          goto LABEL_58;
        }
        goto LABEL_57;
      }
LABEL_56:
      v97 = *((_QWORD *)a2 + 4);
      JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)this, v35, v95, v37, v38, v39, v40, v41);
LABEL_57:
      v105 = v42;
      v108 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v97, v54, v37, v38, v39, v40, v41);
      v106 = 0;
      v201 = this;
      v205 = v108;
      v107 = v108;
      goto LABEL_58;
    }
    __break(0xC471u);
LABEL_166:
    JUMPOUT(0x197BA32F4);
  }
  v105 = v42;
  v94 = 0;
  v201 = 0;
  v202 = this;
  v107 = -1;
  v106 = 1;
LABEL_58:
  v220[0] = 126;
  v220[1] = v208;
  *(_QWORD *)&v220[2] = v94;
  v220[10] = 126;
  v207 = v106;
  v220[11] = v106;
  *(_QWORD *)&v220[12] = v44;
  v109 = v28;
  v221 = (char)v28;
  v110 = v47;
  v222 = v47;
  v223 = v107;
  v224 = v105;
  v225 = 0;
  v226 = (WTF *)v228;
  v227 = 2;
  v229 = v231;
  v230 = 2;
  JSC::JITBitAndGenerator::generateFastPath((JSC::JITBitAndGenerator *)v220, (JSC::CCallHelpers *)this, v54, v37, v38, v39, v40, v41);
  for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
  {
    if ((i + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v111, (uint64_t)v112, v113, v114, v115, v116, v117);
      i = *((_DWORD *)this + 50);
    }
    *(_DWORD *)((char *)this[7] + i) = -721215457;
    i = *((_DWORD *)this + 50) + 4;
  }
  v119 = i;
  if ((i + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v111, (uint64_t)v112, v113, v114, v115, v116, v117);
    v119 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)((char *)this[7] + v119) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v120 = 69;
  else
    v120 = 65;
  v210 = i;
  v211 = 0;
  v212 = v120;
  v213 = 15;
  v214 = -1;
  if (i != -1)
  {
    if (HIDWORD(v227) == (_DWORD)v227)
    {
      v121 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v226, (void *)(HIDWORD(v227) + 1), (unint64_t)&v210, v113, v114, v115, v116, v117);
      v123 = *v121;
      v122 = v121 + 1;
      v124 = (char *)v226 + 12 * HIDWORD(v227);
      *(_DWORD *)v124 = v123;
    }
    else
    {
      v122 = &v211;
      v124 = (char *)v226 + 12 * HIDWORD(v227);
      *(_DWORD *)v124 = i;
    }
    *(_QWORD *)(v124 + 4) = *(_QWORD *)v122;
    ++HIDWORD(v227);
  }
  v125 = HIDWORD(v230);
  if (HIDWORD(v230))
  {
    v126 = 0;
    v127 = 0;
    do
    {
      if (v127 >= HIDWORD(v230))
      {
        __break(0xC471u);
        JUMPOUT(0x197BA3C68);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v229 + v126), (uint64_t)this, (uint64_t)v112, v113, v114, v115, v116, v117);
      ++v127;
      v126 += 12;
    }
    while (v125 != v127);
  }
  v128 = (char)v109;
  if (v208)
  {
    v198 = *(unsigned __int16 *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
    if (v198 == 355 || v198 == 348)
    {
      v158 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
      }
    }
    else
    {
      v158 = *(uint64_t **)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    }
    v129 = v109;
  }
  else
  {
    if (!v207)
    {
      v129 = v110;
      goto LABEL_76;
    }
    v157 = *(unsigned __int16 *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
    if (v157 == 355 || v157 == 348)
    {
      v158 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
      }
    }
    else
    {
      v158 = *(uint64_t **)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    }
    v129 = v110;
    v107 = v109;
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *v158, (char)v109, v113, v114, v115, v116, v117);
LABEL_76:
  v130 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v112, v113, v114, v115, v116, v117);
  JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>(&v209, (uint64_t)this, (uint64_t)operationValueBitAnd, v109, v130, v131, v129, v107);
  v138 = HIDWORD(v227);
  if (HIDWORD(v227))
  {
    v139 = 0;
    v140 = 0;
    do
    {
      if (v140 >= HIDWORD(v227))
      {
        __break(0xC471u);
        JUMPOUT(0x197BA3C70);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v226 + v139), (uint64_t)this, v132, v133, v134, v135, v136, v137);
      ++v140;
      v139 += 12;
    }
    while (v138 != v140);
  }
  JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v128, (uint64_t)a2, 16, 0, v135, v136, v137);
  v148 = (unint64_t)v229;
  if (v231 != v229 && v229 != 0)
  {
    v229 = 0;
    LODWORD(v230) = 0;
    WTF::fastFree(v148, v141, v142, v143, v144, v145, v146, v147);
  }
  v150 = v226;
  if (v228 != (_BYTE *)v226 && v226)
  {
    v226 = 0;
    LODWORD(v227) = 0;
    WTF::fastFree((unint64_t)v150, v141, v142, v143, v144, v145, v146, v147);
  }
  if (v215)
  {
    v151 = v216;
    if (v216 != -1)
    {
      if (v216 > 15)
        v151 = -1;
      --*(_DWORD *)(v215 + 12 * v151 + 4784);
    }
  }
  if (v217)
  {
    v152 = (char)v218;
    if ((char)v218 != -1)
    {
      if ((char)v218 > 15)
        v152 = -1;
      --*(_DWORD *)(v217 + 12 * v152 + 4784);
    }
  }
  v153 = v207;
  if ((v204 & 0xFF00FFFFFFFFFFFFLL) == 0)
    v153 = 1;
  if ((v153 & 1) == 0)
  {
    if (v205 > 15)
      v154 = -1;
    else
      v154 = v205;
    --*((_DWORD *)v201 + 3 * v154 + 1196);
  }
  if (v206 && v203)
  {
    if (v110 > 15)
      v155 = -1;
    else
      v155 = v110;
    v156 = (uint64_t)v202 + 12 * v155;
LABEL_111:
    --*(_DWORD *)(v156 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::emitUntypedOrAnyBigIntBitOp<JSC::JITBitXorGenerator,&(operationValueBitXor)>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  JSC::DFG::Node *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  JSC::AssemblerBuffer *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  unsigned __int8 v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  JSC::DFG::Node *v123;
  uint64_t *v124;
  uint64_t v125;
  unsigned int *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  unint64_t v147;
  int v148;
  _DWORD v149[2];
  char v150;
  __int16 v151;
  char v152;
  uint64_t v153;
  unsigned __int8 v154;
  uint64_t v155;
  unsigned __int8 v156;
  uint64_t v157;
  uint64_t v158;
  unsigned __int8 v159;
  unsigned __int8 v160;
  uint64_t v161;
  uint64_t v162;
  signed __int8 v163;
  unsigned __int8 v164;
  _BYTE v165[20];
  char v166;
  unsigned __int8 v167;
  char v168;
  char v169;
  char v170;
  _QWORD v171[2];
  uint64_t v172;
  _QWORD v173[2];
  _QWORD v174[5];

  v174[3] = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a2 + 24);
  v12 = (v11 >> 50) & 0x3F;
  if (((v11 >> 50) & 0x3F) <= 0x1A)
  {
    if ((_DWORD)v12)
    {
      if ((_DWORD)v12 == 26)
      {
        v13 = *(_QWORD *)(a2 + 32) & 0xFC000000000000;
        v14 = 0x68000000000000;
        goto LABEL_5;
      }
    }
    else if ((*(_BYTE *)(a2 + 38) & 0xFC) == 0)
    {
      goto LABEL_6;
    }
LABEL_26:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), (JSC::DFG::Node *)a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x143B, "void JSC::DFG::SpeculativeJIT::emitUntypedOrAnyBigIntBitOp(Node *) [SnippetGenerator = JSC::JITBitXorGenerator, snippetSlowPathFunction = &JSC::DFG::operationValueBitXor]", "node->isBinaryUseKind(UntypedUse) || node->isBinaryUseKind(AnyBigIntUse) || node->isBinaryUseKind(HeapBigIntUse) || node->isBinaryUseKind(BigInt32Use)");
    __break(0xC471u);
    JUMPOUT(0x197BA3F24);
  }
  if ((_DWORD)v12 == 27)
  {
    v13 = *(_QWORD *)(a2 + 32) & 0xFC000000000000;
    v14 = 0x6C000000000000;
  }
  else
  {
    if ((_DWORD)v12 != 28)
      goto LABEL_26;
    v13 = *(_QWORD *)(a2 + 32) & 0xFC000000000000;
    v14 = 0x70000000000000;
  }
LABEL_5:
  if (v13 != v14)
    goto LABEL_26;
LABEL_6:
  if (JSC::DFG::SpeculativeJIT::isKnownNotNumber((JSC::DFG::SpeculativeJIT *)a1, v11 & 0xFF00FFFFFFFFFFFFLL, a3, a4, a5, a6, a7, a8)|| JSC::DFG::SpeculativeJIT::isKnownNotNumber((JSC::DFG::SpeculativeJIT *)a1, *(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL, v15, v16, v17, v18, v19, v20))
  {
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v165, a1, *(_QWORD *)(a2 + 24), 1, v17, v18, v19, v20);
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v161, a1, *(_QWORD *)(a2 + 32), 1, v23, v24, v25, v26);
    JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)a1, v27, *(_QWORD *)(a2 + 24), v28, v29, v30, v31, v32);
    JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)a1, v33, *(_QWORD *)(a2 + 32), v34, v35, v36, v37, v38);
    v46 = v165[16];
    if (v165[16] == 255)
    {
      v46 = JSC::DFG::SpeculativeJIT::fillJSValue(*(uint64_t *)v165, *(uint64_t *)&v165[8], v40, v41, v42, v43, v44, v45);
      v165[16] = v46;
    }
    v47 = v163;
    if (v163 == 255)
    {
      v47 = JSC::DFG::SpeculativeJIT::fillJSValue(v161, v162, v40, v41, v42, v43, v44, v45);
      v163 = v47;
    }
    JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)a1, v39, v40, v41, v42, v43, v44, v45);
    ++*(_DWORD *)(a1 + 4784);
    v54 = *(unsigned int *)(a1 + 4776);
    if ((_DWORD)v54 != 0x3FFFFFFF)
    {
      *(_QWORD *)(a1 + 4776) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill(a1, v54, (uint64_t)v48, v49, v50, v51, v52, v53);
    }
    v55 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, (JSC::DFG::JITCompiler *)a2, v48, v49, v50, v51, v52, v53);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v157, (unsigned __int8 *)a1, (uint64_t)operationValueBitXor, 0, v55, v56, v46, v47);
    JSC::DFG::SpeculativeJIT::jsValueResult(a1, 0, a2, 16, 0, v57, v58, v59);
    --*(_DWORD *)(a1 + 4784);
    if ((v162 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v60 = v163;
      if (v163 > 15)
        v60 = -1;
      --*(_DWORD *)(v161 + 12 * v60 + 4784);
    }
    if ((*(_QWORD *)&v165[8] & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v61 = *(_QWORD *)v165;
      v62 = v165[16];
LABEL_20:
      if (v62 > 15)
        v62 = -1;
      --*(_DWORD *)(v61 + 12 * v62 + 4784);
      return;
    }
    return;
  }
  LOBYTE(v161) = 0;
  v164 = 0;
  LOBYTE(v157) = 0;
  v160 = 0;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v155, (JSC::DFG::SpeculativeJIT *)a1, v21, v22, v17, v18, v19, v20);
  v63 = (JSC::AssemblerBuffer *)v156;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v153, (JSC::DFG::SpeculativeJIT *)a1, v64, v65, v66, v67, v68, v69);
  v75 = (unsigned int *)v154;
  v76 = *(_QWORD *)(a2 + 24);
  if (*(unsigned __int16 *)((v76 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u
    && **(_QWORD **)((v76 & 0xFF00FFFFFFFFFFFFLL) + 0x48) >= 0xFFFE000000000000)
  {
    v77 = 0;
    v88 = **(_QWORD **)((v76 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v89 = 1;
    v87 = -1;
    goto LABEL_37;
  }
  if (*(unsigned __int16 *)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u)
  {
    v147 = **(_QWORD **)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v8 = v147 < 0xFFFE000000000000;
    if (v147 >= 0xFFFE000000000000)
      v77 = **(_QWORD **)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    else
      v77 = 0;
  }
  else
  {
    v77 = 0;
    v8 = 1;
  }
  std::optional<JSC::DFG::JSValueOperand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,JSC::DFG::OperandSpeculationMode,void>((uint64_t)&v161, a1, v76, v70, v71, v72, v73, v74);
  JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)a1, v78, *(_QWORD *)(a2 + 24), v79, v80, v81, v82, v83);
  v86 = v164;
  if (!v164)
    goto LABEL_80;
  v87 = v163;
  if (v163 == 255)
  {
    v87 = JSC::DFG::SpeculativeJIT::fillJSValue(v161, v162, v84, v70, v71, v72, v73, v74);
    v163 = v87;
  }
  v88 = 0;
  v89 = 0;
  if (v8)
  {
LABEL_37:
    std::optional<JSC::DFG::JSValueOperand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,JSC::DFG::OperandSpeculationMode,void>((uint64_t)&v157, a1, *(_QWORD *)(a2 + 32), v70, v71, v72, v73, v74);
    JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)a1, v90, *(_QWORD *)(a2 + 32), v91, v92, v93, v94, v95);
    v86 = v160;
    if (v160)
    {
      LOBYTE(v8) = v159;
      if (v159 == 255)
      {
        LOBYTE(v8) = JSC::DFG::SpeculativeJIT::fillJSValue(v157, v158, v84, v70, v71, v72, v73, v74);
        v96 = 0;
        v159 = v8;
      }
      else
      {
        v96 = 0;
      }
      goto LABEL_42;
    }
LABEL_80:
    __break(1u);
LABEL_81:
    if (v85 != 348)
    {
      v124 = *(uint64_t **)(v86 + 72);
LABEL_49:
      v87 = v63;
      goto LABEL_50;
    }
LABEL_47:
    v124 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
    {
      JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
      LODWORD(qword_1EE342DB8) = 0;
    }
    goto LABEL_49;
  }
  LOBYTE(v8) = -1;
  v96 = 1;
LABEL_42:
  v165[0] = 126;
  v165[1] = v89;
  *(_QWORD *)&v165[2] = v88;
  v165[10] = 126;
  v165[11] = v96;
  *(_QWORD *)&v165[12] = v77;
  v166 = (char)v63;
  v167 = v87;
  v168 = v8;
  v169 = (char)v75;
  v170 = 0;
  v75 = (unsigned int *)v171;
  v171[0] = &v172;
  v171[1] = 2;
  v173[0] = v174;
  v173[1] = 2;
  JSC::JITBitXorGenerator::generateFastPath((JSC::JITBitXorGenerator *)v165, (JSC::CCallHelpers *)a1, v84, v70, v71, v72, v73, v74);
  JSC::ARM64Assembler::label((_DWORD *)(a1 + 32), v97, v98, v99, v100, v101, v102, v103, &v148);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 335544320, v104, v105, v106, v107, v108, v109);
  if (*(_BYTE *)(a1 + 328))
    v116 = 69;
  else
    v116 = 65;
  v149[0] = v148;
  v149[1] = 0;
  v150 = v116;
  v151 = 15;
  v152 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v171, v149, v110, v111, v112, v113, v114, v115);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)v173, a1, v117, v118, v119, v120, v121, v122);
  v77 = (char)v63;
  if (v89)
  {
    v86 = *(_QWORD *)(a2 + 24) & 0xFF00FFFFFFFFFFFFLL;
    v85 = *(unsigned __int16 *)(v86 + 0x12);
    if (v85 == 355)
      goto LABEL_47;
    goto LABEL_81;
  }
  if (!v96)
    goto LABEL_51;
  v146 = *(unsigned __int16 *)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
  if (v146 == 355 || v146 == 348)
  {
    v124 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
    {
      JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
      LODWORD(qword_1EE342DB8) = 0;
    }
  }
  else
  {
    v124 = *(uint64_t **)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
  }
  LOBYTE(v8) = (_BYTE)v63;
LABEL_50:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *v124, v77, v70, v71, v72, v73, v74);
LABEL_51:
  v125 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, (JSC::DFG::JITCompiler *)a2, v123, v70, v71, v72, v73, v74);
  JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>(&v148, a1, (uint64_t)operationValueBitXor, v63, v125, v126, v87, v8);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link(v75, a1, v127, v128, v129, v130, v131, v132);
  JSC::DFG::SpeculativeJIT::jsValueResult(a1, v77, a2, 16, 0, v133, v134, v135);
  JSC::JITRightShiftGenerator::~JITRightShiftGenerator((JSC::JITRightShiftGenerator *)v165, v136, v137, v138, v139, v140, v141, v142);
  if (v153)
  {
    v143 = (char)v154;
    if ((char)v154 != -1)
    {
      if ((char)v154 > 15)
        v143 = -1;
      --*(_DWORD *)(v153 + 12 * v143 + 4784);
    }
  }
  if (v155)
  {
    v144 = (char)v156;
    if ((char)v156 != -1)
    {
      if ((char)v156 > 15)
        v144 = -1;
      --*(_DWORD *)(v155 + 12 * v144 + 4784);
    }
  }
  if (v160 && (v158 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v145 = (char)v159;
    if ((char)v159 > 15)
      v145 = -1;
    --*(_DWORD *)(v157 + 12 * v145 + 4784);
  }
  if (v164 && (v162 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v61 = v161;
    v62 = v163;
    goto LABEL_20;
  }
}

void JSC::DFG::SpeculativeJIT::emitUntypedOrAnyBigIntBitOp<JSC::JITBitOrGenerator,&(operationValueBitOr)>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::AssemblerBuffer *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  JSC::DFG::Node *v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  int v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned __int8 v132;
  unsigned __int8 v133;
  JSC::DFG::Node *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t *v147;
  int v148;
  int v149;
  _DWORD v150[2];
  char v151;
  __int16 v152;
  char v153;
  uint64_t v154;
  unsigned __int8 v155;
  uint64_t v156;
  unsigned __int8 v157;
  uint64_t v158;
  uint64_t v159;
  signed __int8 v160;
  unsigned __int8 v161;
  uint64_t v162;
  uint64_t v163;
  signed __int8 v164;
  unsigned __int8 v165;
  _BYTE v166[20];
  char v167;
  unsigned __int8 v168;
  unsigned __int8 v169;
  char v170;
  char v171;
  _QWORD v172[2];
  uint64_t v173;
  _QWORD v174[2];
  _QWORD v175[5];

  v175[3] = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a2 + 24);
  v12 = (v11 >> 50) & 0x3F;
  if (((v11 >> 50) & 0x3F) <= 0x1A)
  {
    if ((_DWORD)v12)
    {
      if ((_DWORD)v12 == 26)
      {
        v13 = *(_QWORD *)(a2 + 32) & 0xFC000000000000;
        v14 = 0x68000000000000;
        goto LABEL_5;
      }
    }
    else if ((*(_BYTE *)(a2 + 38) & 0xFC) == 0)
    {
      goto LABEL_6;
    }
LABEL_48:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), (JSC::DFG::Node *)a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x143B, "void JSC::DFG::SpeculativeJIT::emitUntypedOrAnyBigIntBitOp(Node *) [SnippetGenerator = JSC::JITBitOrGenerator, snippetSlowPathFunction = &JSC::DFG::operationValueBitOr]", "node->isBinaryUseKind(UntypedUse) || node->isBinaryUseKind(AnyBigIntUse) || node->isBinaryUseKind(HeapBigIntUse) || node->isBinaryUseKind(BigInt32Use)");
    __break(0xC471u);
    JUMPOUT(0x197BA4784);
  }
  if ((_DWORD)v12 == 27)
  {
    v13 = *(_QWORD *)(a2 + 32) & 0xFC000000000000;
    v14 = 0x6C000000000000;
  }
  else
  {
    if ((_DWORD)v12 != 28)
      goto LABEL_48;
    v13 = *(_QWORD *)(a2 + 32) & 0xFC000000000000;
    v14 = 0x70000000000000;
  }
LABEL_5:
  if (v13 != v14)
    goto LABEL_48;
LABEL_6:
  if (!JSC::DFG::SpeculativeJIT::isKnownNotNumber((JSC::DFG::SpeculativeJIT *)a1, v11 & 0xFF00FFFFFFFFFFFFLL, a3, a4, a5, a6, a7, a8)&& !JSC::DFG::SpeculativeJIT::isKnownNotNumber((JSC::DFG::SpeculativeJIT *)a1, *(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL, v15, v16, v17, v18, v19, v20))
  {
    LOBYTE(v162) = 0;
    v165 = 0;
    LOBYTE(v158) = 0;
    v161 = 0;
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v156, (JSC::DFG::SpeculativeJIT *)a1, v21, v22, v17, v18, v19, v20);
    v23 = (JSC::AssemblerBuffer *)v157;
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v154, (JSC::DFG::SpeculativeJIT *)a1, v24, v25, v26, v27, v28, v29);
    v35 = (unsigned int *)v155;
    v36 = *(_QWORD *)(a2 + 24);
    if (*(unsigned __int16 *)((v36 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u
      && **(_QWORD **)((v36 & 0xFF00FFFFFFFFFFFFLL) + 0x48) >= 0xFFFE000000000000)
    {
      v37 = 0;
      v48 = **(_QWORD **)((v36 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
      v49 = 1;
      v8 = -1;
    }
    else
    {
      if (*(unsigned __int16 *)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u)
      {
        v108 = **(_QWORD **)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        v38 = v108 < 0xFFFE000000000000;
        if (v108 >= 0xFFFE000000000000)
          v37 = **(_QWORD **)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        else
          v37 = 0;
      }
      else
      {
        v37 = 0;
        v38 = 1;
      }
      std::optional<JSC::DFG::JSValueOperand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,JSC::DFG::OperandSpeculationMode,void>((uint64_t)&v162, a1, v36, v30, v31, v32, v33, v34);
      JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)a1, v39, *(_QWORD *)(a2 + 24), v40, v41, v42, v43, v44);
      v47 = v165;
      if (!v165)
        goto LABEL_80;
      v8 = v164;
      if (v164 == 255)
      {
        v8 = JSC::DFG::SpeculativeJIT::fillJSValue(v162, v163, v45, v30, v31, v32, v33, v34);
        v164 = v8;
      }
      v48 = 0;
      v49 = 0;
      if (!v38)
      {
        v56 = -1;
        v57 = 1;
LABEL_19:
        v166[0] = 126;
        v166[1] = v49;
        *(_QWORD *)&v166[2] = v48;
        v166[10] = 126;
        v166[11] = v57;
        *(_QWORD *)&v166[12] = v37;
        v167 = (char)v23;
        v168 = v8;
        v169 = v56;
        v170 = (char)v35;
        v171 = 0;
        v35 = (unsigned int *)v172;
        v172[0] = &v173;
        v172[1] = 2;
        v174[0] = v175;
        v174[1] = 2;
        JSC::JITBitOrGenerator::generateFastPath((JSC::JITBitOrGenerator *)v166, (JSC::CCallHelpers *)a1, v45, v30, v31, v32, v33, v34);
        JSC::ARM64Assembler::label((_DWORD *)(a1 + 32), v58, v59, v60, v61, v62, v63, v64, &v149);
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 335544320, v65, v66, v67, v68, v69, v70);
        if (*(_BYTE *)(a1 + 328))
          v77 = 69;
        else
          v77 = 65;
        v150[0] = v149;
        v150[1] = 0;
        v151 = v77;
        v152 = 15;
        v153 = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v172, v150, v71, v72, v73, v74, v75, v76);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)v174, a1, v78, v79, v80, v81, v82, v83);
        v37 = (char)v23;
        if (v49)
        {
          v148 = *(unsigned __int16 *)((*(_QWORD *)(a2 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
          if (v148 == 355 || v148 == 348)
          {
            v147 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
            {
              JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
              LODWORD(qword_1EE342DB8) = 0;
            }
          }
          else
          {
            v147 = *(uint64_t **)((*(_QWORD *)(a2 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
          }
          v8 = v23;
          goto LABEL_74;
        }
        if (!v57)
        {
LABEL_24:
          v85 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, (JSC::DFG::JITCompiler *)a2, v84, v30, v31, v32, v33, v34);
          JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>(&v149, a1, (uint64_t)operationValueBitOr, v23, v85, v86, v8, v56);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link(v35, a1, v87, v88, v89, v90, v91, v92);
          JSC::DFG::SpeculativeJIT::jsValueResult(a1, v37, a2, 16, 0, v93, v94, v95);
          JSC::JITRightShiftGenerator::~JITRightShiftGenerator((JSC::JITRightShiftGenerator *)v166, v96, v97, v98, v99, v100, v101, v102);
          if (v154)
          {
            v103 = (char)v155;
            if ((char)v155 != -1)
            {
              if ((char)v155 > 15)
                v103 = -1;
              --*(_DWORD *)(v154 + 12 * v103 + 4784);
            }
          }
          if (v156)
          {
            v104 = (char)v157;
            if ((char)v157 != -1)
            {
              if ((char)v157 > 15)
                v104 = -1;
              --*(_DWORD *)(v156 + 12 * v104 + 4784);
            }
          }
          if (v161 && (v159 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v105 = v160;
            if (v160 > 15)
              v105 = -1;
            --*(_DWORD *)(v158 + 12 * v105 + 4784);
          }
          if (v165 && (v163 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v106 = v162;
            v107 = v164;
LABEL_42:
            if (v107 > 15)
              v107 = -1;
            --*(_DWORD *)(v106 + 12 * v107 + 4784);
            return;
          }
          return;
        }
        v47 = *(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL;
        v46 = *(unsigned __int16 *)(v47 + 0x12);
        if (v46 == 355)
          goto LABEL_71;
        goto LABEL_81;
      }
    }
    std::optional<JSC::DFG::JSValueOperand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,JSC::DFG::OperandSpeculationMode,void>((uint64_t)&v158, a1, *(_QWORD *)(a2 + 32), v30, v31, v32, v33, v34);
    JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)a1, v50, *(_QWORD *)(a2 + 32), v51, v52, v53, v54, v55);
    v47 = v161;
    if (v161)
    {
      v56 = v160;
      if (v160 == 255)
      {
        v56 = JSC::DFG::SpeculativeJIT::fillJSValue(v158, v159, v45, v30, v31, v32, v33, v34);
        v57 = 0;
        v160 = v56;
      }
      else
      {
        v57 = 0;
      }
      goto LABEL_19;
    }
LABEL_80:
    __break(1u);
LABEL_81:
    if (v46 != 348)
    {
      v147 = *(uint64_t **)(v47 + 72);
LABEL_73:
      v56 = v23;
LABEL_74:
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *v147, v37, v30, v31, v32, v33, v34);
      goto LABEL_24;
    }
LABEL_71:
    v147 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
    {
      JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
      LODWORD(qword_1EE342DB8) = 0;
    }
    goto LABEL_73;
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v166, a1, *(_QWORD *)(a2 + 24), 1, v17, v18, v19, v20);
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v162, a1, *(_QWORD *)(a2 + 32), 1, v109, v110, v111, v112);
  JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)a1, v113, *(_QWORD *)(a2 + 24), v114, v115, v116, v117, v118);
  JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)a1, v119, *(_QWORD *)(a2 + 32), v120, v121, v122, v123, v124);
  v132 = v166[16];
  if (v166[16] == 255)
  {
    v132 = JSC::DFG::SpeculativeJIT::fillJSValue(*(uint64_t *)v166, *(uint64_t *)&v166[8], v126, v127, v128, v129, v130, v131);
    v166[16] = v132;
  }
  v133 = v164;
  if (v164 == 255)
  {
    v133 = JSC::DFG::SpeculativeJIT::fillJSValue(v162, v163, v126, v127, v128, v129, v130, v131);
    v164 = v133;
  }
  JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)a1, v125, v126, v127, v128, v129, v130, v131);
  ++*(_DWORD *)(a1 + 4784);
  v140 = *(unsigned int *)(a1 + 4776);
  if ((_DWORD)v140 != 0x3FFFFFFF)
  {
    *(_QWORD *)(a1 + 4776) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill(a1, v140, (uint64_t)v134, v135, v136, v137, v138, v139);
  }
  v141 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, (JSC::DFG::JITCompiler *)a2, v134, v135, v136, v137, v138, v139);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v158, (unsigned __int8 *)a1, (uint64_t)operationValueBitOr, 0, v141, v142, v132, v133);
  JSC::DFG::SpeculativeJIT::jsValueResult(a1, 0, a2, 16, 0, v143, v144, v145);
  --*(_DWORD *)(a1 + 4784);
  if ((v163 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v146 = v164;
    if (v164 > 15)
      v146 = -1;
    --*(_DWORD *)(v162 + 12 * v146 + 4784);
  }
  if ((*(_QWORD *)&v166[8] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v106 = *(_QWORD *)v166;
    v107 = v166[16];
    goto LABEL_42;
  }
}

uint64_t *JSC::DFG::SpeculativeJIT::compileBitwiseOp(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t *result;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  int v49;
  __int128 *v50;
  JSC::ARM64LogicalImmediate *v51;
  char v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  char v64;
  char *v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char v72;
  int v73;
  __int128 *v74;
  JSC::ARM64LogicalImmediate *v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  JSC::DFG::SpeculativeJIT *v85;
  unint64_t v86;
  char v87;
  _BYTE v88[7];
  JSC::DFG::SpeculativeJIT *v89;
  unint64_t v90;
  char v91;
  _BYTE v92[7];

  v10 = *((unsigned __int16 *)a2 + 9);
  v11 = *((_QWORD *)a2 + 3);
  if (*(unsigned __int16 *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u
    && **(_QWORD **)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x48) >= 0xFFFE000000000000)
  {
    v69 = *((_QWORD *)a2 + 4);
    v89 = this;
    v90 = v69;
    v91 = -1;
    v70 = ~*(_DWORD *)((v69 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    v71 = *((unsigned int *)this + 1001);
    if (v70 >= v71)
    {
      __break(0xC471u);
      JUMPOUT(0x197BA5210);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v70 + 12))
    {
      v47 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v69, (uint64_t)v92, a4, a5, a6, a7, a8);
      v91 = v47;
      v69 = v90;
      v71 = *((unsigned int *)this + 1001);
      v70 = ~*(_DWORD *)((v90 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    }
    else
    {
      v47 = -1;
    }
    if (v70 >= v71)
      goto LABEL_111;
    if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v70 + 8) == 1)
    {
      if (v47 == -1)
      {
        v47 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v89, v69, (uint64_t)v92, a4, a5, a6, a7, a8);
        v91 = v47;
      }
      v72 = v47 > 15 ? -1 : v47;
      ++*((_DWORD *)this + 3 * v72 + 1196);
    }
    else
    {
      v47 = JSC::DFG::SpeculativeJIT::allocate(this, v69, a3, a4, a5, a6, a7, a8);
    }
    v73 = *(unsigned __int16 *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
    if (v73 == 355 || v73 == 348)
    {
      v74 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
      }
    }
    else
    {
      v74 = *(__int128 **)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    }
    v75 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)v74;
    v76 = v91;
    if (v91 == 255)
    {
      v76 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v89, v90, (uint64_t)v92, a4, a5, a6, a7, a8);
      v91 = v76;
    }
    v53 = v47;
    switch(v10)
    {
      case ',':
        JSC::MacroAssemblerARM64::and32((uint64_t)this, v75, v76, v47);
        break;
      case '.':
        JSC::MacroAssemblerARM64::or32((uint64_t)this, v75, v76, v47);
        break;
      case '0':
        JSC::MacroAssemblerARM64::xor32((uint64_t)this, v75, v76, v47, a5, a6, a7, a8);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197BA51C4);
    }
    result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v77, v78, v79, v80, v81, v82);
    v60 = *((_DWORD *)a2 + 12);
    v61 = ~v60;
    if (v61 >= *((unsigned int *)this + 1001))
    {
LABEL_111:
      __break(0xC471u);
      JUMPOUT(0x197BA50A8);
    }
    goto LABEL_53;
  }
  v12 = *((_QWORD *)a2 + 4);
  v13 = v12 & 0xFF00FFFFFFFFFFFFLL;
  if (*(unsigned __int16 *)((v12 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u
    && **(_QWORD **)((v12 & 0xFF00FFFFFFFFFFFFLL) + 0x48) >= 0xFFFE000000000000)
  {
    v89 = this;
    v90 = v11;
    v91 = -1;
    v45 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    v46 = *((unsigned int *)this + 1001);
    if (v45 >= v46)
    {
      __break(0xC471u);
      JUMPOUT(0x197BA51F8);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v45 + 12))
    {
      v47 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v11, (uint64_t)v92, a4, a5, a6, a7, a8);
      v91 = v47;
      v11 = v90;
      v46 = *((unsigned int *)this + 1001);
      v45 = ~*(_DWORD *)((v90 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    }
    else
    {
      v47 = -1;
    }
    if (v45 >= v46)
    {
      __break(0xC471u);
      JUMPOUT(0x197BA5200);
    }
    if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v45 + 8) == 1)
    {
      if (v47 == -1)
      {
        v47 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v89, v11, (uint64_t)v92, a4, a5, a6, a7, a8);
        v91 = v47;
      }
      if (v47 > 15)
        v48 = -1;
      else
        v48 = v47;
      ++*((_DWORD *)this + 3 * v48 + 1196);
    }
    else
    {
      v47 = JSC::DFG::SpeculativeJIT::allocate(this, v11, a3, a4, a5, a6, a7, a8);
    }
    v49 = *(unsigned __int16 *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
    if (v49 == 355 || v49 == 348)
    {
      v50 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
      }
    }
    else
    {
      v50 = *(__int128 **)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    }
    v51 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)v50;
    v52 = v91;
    if (v91 == 255)
    {
      v52 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v89, v90, (uint64_t)v92, a4, a5, a6, a7, a8);
      v91 = v52;
    }
    v53 = v47;
    switch(v10)
    {
      case ',':
        JSC::MacroAssemblerARM64::and32((uint64_t)this, v51, v52, v47);
        break;
      case '.':
        JSC::MacroAssemblerARM64::or32((uint64_t)this, v51, v52, v47);
        break;
      case '0':
        JSC::MacroAssemblerARM64::xor32((uint64_t)this, v51, v52, v47, a5, a6, a7, a8);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197BA5180);
    }
    result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v54, v55, v56, v57, v58, v59);
    v60 = *((_DWORD *)a2 + 12);
    v61 = ~v60;
    if (v61 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BA5208);
    }
LABEL_53:
    v62 = *((_QWORD *)this + 499);
    v63 = (char *)this + 4776;
    if (v53 > 15)
      v64 = -1;
    else
      v64 = v47;
    v65 = &v63[12 * v64];
    *(_DWORD *)v65 = v60;
    *((_DWORD *)v65 + 1) = 5;
    v66 = v62 + 24 * (int)v61;
    v67 = *((_DWORD *)a2 + 13);
    *(_QWORD *)v66 = a2;
    *(_DWORD *)(v66 + 8) = v67;
    *(_BYTE *)(v66 + 17) = v47;
    *(_DWORD *)(v66 + 12) = 1;
    *(_BYTE *)(v66 + 16) = 0;
    if (v47 != -1)
      --*(_DWORD *)&v63[12 * v64 + 8];
    v68 = v91;
    if (v91 > 15)
      v68 = -1;
    v44 = (char *)v89 + 12 * v68;
    goto LABEL_32;
  }
  v89 = this;
  v90 = v11;
  v91 = -1;
  v14 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  v15 = *((unsigned int *)this + 1001);
  if (v14 >= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x197BA51E0);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 12))
  {
    v91 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v11, (uint64_t)v92, a4, a5, a6, a7, a8);
    v12 = *((_QWORD *)a2 + 4);
    v15 = *((unsigned int *)this + 1001);
    v13 = v12 & 0xFF00FFFFFFFFFFFFLL;
  }
  v85 = this;
  v86 = v12;
  v87 = -1;
  v16 = ~*(_DWORD *)(v13 + 48);
  if (v16 >= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x197BA51E8);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v16 + 12))
    v87 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v12, (uint64_t)v88, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateInt32Operand,JSC::DFG::SpeculateInt32Operand>((uint64_t)&v83, this, (uint64_t)&v89, (uint64_t)&v85, a5, a6, a7, a8);
  v24 = v91;
  if (v91 == 255)
  {
    v24 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v89, v90, (uint64_t)v92, v19, v20, v21, v22, v23);
    v91 = v24;
  }
  v25 = v87;
  if (v87 == 255)
  {
    v25 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v85, v86, (uint64_t)v88, v19, v20, v21, v22, v23);
    v87 = v25;
  }
  v26 = v84;
  switch(v10)
  {
    case '.':
      v28 = (unsigned int *)((char *)this + 200);
      v27 = *((_DWORD *)this + 50);
      v29 = v27 + 4;
      v30 = *((_DWORD *)this + 48);
      v31 = 704643072;
      break;
    case ',':
      v28 = (unsigned int *)((char *)this + 200);
      v27 = *((_DWORD *)this + 50);
      v29 = v27 + 4;
      v30 = *((_DWORD *)this + 48);
      v31 = 167772160;
      break;
    case '0':
      v28 = (unsigned int *)((char *)this + 200);
      v27 = *((_DWORD *)this + 50);
      v29 = v27 + 4;
      v30 = *((_DWORD *)this + 48);
      v31 = 1241513984;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197BA5140);
  }
  if (v29 > v30)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v28 - 36), v17, v18, v19, v20, v21, v22, v23);
    v27 = *v28;
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v27) = v31 | (unsigned __int16)(32 * (v24 & 0x1F)) | ((v25 & 0x1F) << 16) | v26 & 0x1F;
  *((_DWORD *)this + 50) += 4;
  v32 = v84;
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v18, v19, v20, v21, v22, v23);
  v34 = *((_DWORD *)a2 + 12);
  v35 = ~v34;
  if (v35 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BA51F0);
  }
  v36 = *((_QWORD *)this + 499);
  if (v32 > 15)
    v37 = -1;
  else
    v37 = v32;
  v38 = (char *)this + 12 * v37;
  *((_DWORD *)v38 + 1194) = v34;
  *((_DWORD *)v38 + 1195) = 5;
  v39 = v36 + 24 * (int)v35;
  v40 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v39 = a2;
  *(_DWORD *)(v39 + 8) = v40;
  *(_BYTE *)(v39 + 17) = v32;
  *(_DWORD *)(v39 + 12) = 1;
  *(_BYTE *)(v39 + 16) = 0;
  if (v83)
  {
    v41 = v84;
    if (v84 != -1)
    {
      if (v84 > 15)
        v41 = -1;
      --*(_DWORD *)(v83 + 12 * v41 + 4784);
    }
  }
  v42 = v87;
  if (v87 > 15)
    v42 = -1;
  --*((_DWORD *)v85 + 3 * v42 + 1196);
  v43 = v91;
  if (v91 > 15)
    v43 = -1;
  v44 = (char *)v89 + 12 * v43;
LABEL_32:
  --*((_DWORD *)v44 + 1196);
  return result;
}

void JSC::DFG::SpeculativeJIT::emitUntypedOrBigIntRightShiftBitOp(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v10;
  int v11;
  void *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL isKnownNotNumber;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::AssemblerBuffer *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::AssemblerBuffer *v45;
  _BOOL4 v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unsigned __int8 v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  JSC::DFG::Node *v78;
  uint64_t *v79;
  uint64_t v80;
  unsigned int *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 v130;
  unsigned __int8 v131;
  JSC::DFG::Node *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  int v145;
  JSC::AssemblerBuffer *v146;
  char v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  _DWORD v152[2];
  char v153;
  __int16 v154;
  char v155;
  uint64_t v156;
  unsigned __int8 v157;
  uint64_t v158;
  unsigned __int8 v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  signed __int8 v164;
  unsigned __int8 v165;
  uint64_t v166;
  uint64_t v167;
  unsigned __int8 v168;
  unsigned __int8 v169;
  _BYTE v170[20];
  char v171;
  char v172;
  unsigned __int8 v173;
  char v174;
  char v175;
  _QWORD v176[2];
  uint64_t v177;
  _QWORD v178[2];
  _DWORD v179[7];
  char v180;
  uint64_t v181;

  v8 = (uint64_t)a2;
  v181 = *MEMORY[0x1E0C80C00];
  v10 = (uint64_t *)((char *)a2 + 24);
  v11 = *((unsigned __int16 *)a2 + 9);
  if (v11 == 52)
    v12 = operationValueBitRShift;
  else
    v12 = operationValueBitURShift;
  v13 = v11 != 52;
  v14 = (uint64_t *)((char *)a2 + 32);
  if (JSC::DFG::SpeculativeJIT::isKnownNotNumber(this, *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL, a3, a4, a5, a6, a7, a8))
  {
    v23 = *v10;
  }
  else
  {
    isKnownNotNumber = JSC::DFG::SpeculativeJIT::isKnownNotNumber(this, *v14 & 0xFF00FFFFFFFFFFFFLL, v15, v16, v17, v18, v19, v20);
    v23 = *v10;
    if (!isKnownNotNumber)
    {
      v24 = (v23 >> 50) & 0x3F;
      if ((_DWORD)v24 == 28)
      {
        v105 = *v14 & 0xFC000000000000;
        v106 = 0x70000000000000;
      }
      else
      {
        if ((_DWORD)v24 != 26)
        {
LABEL_8:
          LOBYTE(v166) = 0;
          v169 = 0;
          LOBYTE(v162) = 0;
          v165 = 0;
          JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v160, this, v23, v22, v17, v18, v19, v20);
          v25 = v161;
          JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v158, this, v26, v27, v28, v29, v30, v31);
          v32 = (JSC::AssemblerBuffer *)v159;
          JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v156, this, v33, v34, v35, v36, v37, v38);
          v44 = v157;
          v149 = (uint64_t)v12;
          v150 = v8;
          v147 = v25;
          v148 = v13;
          v146 = v32;
          if (*(unsigned __int16 *)((*v10 & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u
            || **(_QWORD **)((*v10 & 0xFF00FFFFFFFFFFFFLL) + 0x48) < 0xFFFE000000000000)
          {
            if (*(unsigned __int16 *)((*v14 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u)
            {
              v104 = **(_QWORD **)((*v14 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
              v46 = v104 < 0xFFFE000000000000;
              if (v104 >= 0xFFFE000000000000)
                v45 = (JSC::AssemblerBuffer *)**(_QWORD **)((*v14 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
              else
                v45 = 0;
            }
            else
            {
              v45 = 0;
              v46 = 1;
            }
            *(_QWORD *)v170 = this;
            std::optional<JSC::DFG::JSValueOperand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,void>((uint64_t)&v166, (uint64_t *)v170, v10, v39, v40, v41, v42, v43);
            v49 = v169;
            if (!v169)
              goto LABEL_80;
            LOBYTE(v12) = v168;
            if (v168 == 255)
            {
              LOBYTE(v12) = JSC::DFG::SpeculativeJIT::fillJSValue(v166, v167, v47, v39, v40, v41, v42, v43);
              v168 = v12;
            }
            v13 = 0;
            v8 = 0;
            if (!v46)
            {
              v50 = -1;
              v51 = 1;
LABEL_16:
              v170[0] = 126;
              v170[1] = v8;
              *(_QWORD *)&v170[2] = v13;
              v170[10] = 126;
              v170[11] = v51;
              *(_QWORD *)&v170[12] = v45;
              v45 = v146;
              v171 = (char)v146;
              v172 = (char)v12;
              v173 = v50;
              v174 = v44;
              v175 = 0;
              v13 = (unint64_t)v176;
              v176[0] = &v177;
              v176[1] = 2;
              v178[0] = v179;
              v178[1] = 2;
              v179[6] = v148;
              v180 = v147;
              JSC::JITRightShiftGenerator::generateFastPath((JSC::JITRightShiftGenerator *)v170, this, v47, v39, v40, v41, v42, v43);
              JSC::ARM64Assembler::label((_DWORD *)this + 8, v52, v53, v54, v55, v56, v57, v58, &v151);
              JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), 335544320, v59, v60, v61, v62, v63, v64);
              if (*((_BYTE *)this + 328))
                v71 = 69;
              else
                v71 = 65;
              v152[0] = v151;
              v152[1] = 0;
              v153 = v71;
              v154 = 15;
              v155 = -1;
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v176, v152, v65, v66, v67, v68, v69, v70);
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)v178, (uint64_t)this, v72, v73, v74, v75, v76, v77);
              v44 = (char)v146;
              if ((_DWORD)v8)
              {
                v145 = *(unsigned __int16 *)((*v10 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                if (v145 == 355 || v145 == 348)
                {
                  v79 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
                  v8 = v150;
                  {
                    JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
                    LODWORD(qword_1EE342DB8) = 0;
                  }
                  LOBYTE(v12) = (_BYTE)v146;
                }
                else
                {
                  v79 = *(uint64_t **)((*v10 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                  LOBYTE(v12) = (_BYTE)v146;
                  v8 = v150;
                }
                goto LABEL_25;
              }
              if (!v51)
              {
                v8 = v150;
                goto LABEL_26;
              }
              v49 = *v14 & 0xFF00FFFFFFFFFFFFLL;
              v48 = *(unsigned __int16 *)(v49 + 0x12);
              v8 = v150;
              if (v48 == 355)
                goto LABEL_22;
              goto LABEL_81;
            }
          }
          else
          {
            v45 = 0;
            v13 = **(_QWORD **)((*v10 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
            v8 = 1;
            LOBYTE(v12) = -1;
          }
          *(_QWORD *)v170 = this;
          std::optional<JSC::DFG::JSValueOperand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,void>((uint64_t)&v162, (uint64_t *)v170, v10 + 1, v39, v40, v41, v42, v43);
          v49 = v165;
          if (v165)
          {
            v50 = v164;
            if (v164 == 255)
            {
              v50 = JSC::DFG::SpeculativeJIT::fillJSValue(v162, v163, v47, v39, v40, v41, v42, v43);
              v51 = 0;
              v164 = v50;
            }
            else
            {
              v51 = 0;
            }
            goto LABEL_16;
          }
LABEL_80:
          __break(1u);
LABEL_81:
          if (v48 != 348)
          {
            v79 = *(uint64_t **)(v49 + 72);
LABEL_24:
            v50 = v45;
LABEL_25:
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *v79, v44, v39, v40, v41, v42, v43);
LABEL_26:
            v80 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, (JSC::DFG::JITCompiler *)v8, v78, v39, v40, v41, v42, v43);
            JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>(&v151, (uint64_t)this, v149, v45, v80, v81, v12, v50);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)v13, (uint64_t)this, v82, v83, v84, v85, v86, v87);
            JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v44, v8, 16, 0, v88, v89, v90);
            JSC::JITRightShiftGenerator::~JITRightShiftGenerator((JSC::JITRightShiftGenerator *)v170, v91, v92, v93, v94, v95, v96, v97);
            if (v156)
            {
              v98 = (char)v157;
              if ((char)v157 != -1)
              {
                if ((char)v157 > 15)
                  v98 = -1;
                --*(_DWORD *)(v156 + 12 * v98 + 4784);
              }
            }
            if (v158)
            {
              v99 = (char)v159;
              if ((char)v159 != -1)
              {
                if ((char)v159 > 15)
                  v99 = -1;
                --*(_DWORD *)(v158 + 12 * v99 + 4784);
              }
            }
            if (v160)
            {
              v100 = v160 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v161];
              --*(_DWORD *)(v100 + 4976);
            }
            if (v165 && (v163 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v101 = v164;
              if (v164 > 15)
                v101 = -1;
              --*(_DWORD *)(v162 + 12 * v101 + 4784);
            }
            if (v169 && (v167 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v102 = v166;
              v103 = (char)v168;
LABEL_68:
              if (v103 > 15)
                v103 = -1;
              --*(_DWORD *)(v102 + 12 * v103 + 4784);
              return;
            }
            return;
          }
LABEL_22:
          v79 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
          {
            JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
            LODWORD(qword_1EE342DB8) = 0;
          }
          goto LABEL_24;
        }
        v105 = *v14 & 0xFC000000000000;
        v106 = 0x68000000000000;
      }
      if (v105 != v106)
        goto LABEL_8;
    }
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v170, (uint64_t)this, v23, 1, v17, v18, v19, v20);
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v166, (uint64_t)this, *v14, 1, v107, v108, v109, v110);
  JSC::DFG::SpeculativeJIT::speculate(this, v111, *v10, v112, v113, v114, v115, v116);
  JSC::DFG::SpeculativeJIT::speculate(this, v117, *v14, v118, v119, v120, v121, v122);
  v130 = v170[16];
  if (v170[16] == 255)
  {
    v130 = JSC::DFG::SpeculativeJIT::fillJSValue(*(uint64_t *)v170, *(uint64_t *)&v170[8], v124, v125, v126, v127, v128, v129);
    v170[16] = v130;
  }
  v131 = v168;
  if (v168 == 255)
  {
    v131 = JSC::DFG::SpeculativeJIT::fillJSValue(v166, v167, v124, v125, v126, v127, v128, v129);
    v168 = v131;
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v123, v124, v125, v126, v127, v128, v129);
  ++*((_DWORD *)this + 1196);
  v138 = *((unsigned int *)this + 1194);
  if ((_DWORD)v138 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v138, (uint64_t)v132, v133, v134, v135, v136, v137);
  }
  v139 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, (JSC::DFG::JITCompiler *)v8, v132, v133, v134, v135, v136, v137);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v162, (unsigned __int8 *)this, (uint64_t)v12, 0, v139, v140, v130, v131);
  JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, v8, 16, 0, v141, v142, v143);
  --*((_DWORD *)this + 1196);
  if ((v167 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v144 = (char)v168;
    if ((char)v168 > 15)
      v144 = -1;
    --*(_DWORD *)(v166 + 12 * v144 + 4784);
  }
  if ((*(_QWORD *)&v170[8] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v102 = *(_QWORD *)v170;
    v103 = v170[16];
    goto LABEL_68;
  }
}

BOOL JSC::DFG::SpeculativeJIT::isKnownNotNumber(JSC::DFG::SpeculativeJIT *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;

  v8 = *((_QWORD *)this + 688);
  v9 = (_QWORD *)(v8 + 24);
  v10 = (_QWORD *)(v8 + 8);
  if ((a2 & 1) != 0)
    v10 = v9;
  v11 = *v10 + 32 * *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFELL) + 20);
  v12 = (void *)*((unsigned int *)this + 1396);
  if ((_DWORD)v12 != *(_DWORD *)(v11 + 20))
  {
    if ((*(_QWORD *)(v11 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v11, v12, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v11 + 20) = (_DWORD)v12;
  }
  return *(_BYTE *)(v11 + 12) == 0;
}

