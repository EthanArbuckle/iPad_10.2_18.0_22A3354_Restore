uint64_t WTF::RunLoop::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

void WTF::RunLoop::deref(WTF::RunLoop *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = (unsigned int *)((char *)this + 8);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, (unsigned int *)this + 2);
    WTF::RunLoop::~RunLoop((CFRunLoopSourceRef *)this);
    WTF::fastFree(v4, v5, v6, v7, v8, v9, v10, v11);
  }
}

void WTF::RunLoop::DispatchTimer::~DispatchTimer(WTF::RunLoop::DispatchTimer *this)
{
  uint64_t v2;
  __CFRunLoopTimer *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = off_1E3572150;
  v3 = (__CFRunLoopTimer *)*((_QWORD *)this + 2);
  if (v3 && (CFRunLoopTimerInvalidate(v3), v4 = (const void *)*((_QWORD *)this + 2), *((_QWORD *)this + 2) = 0, v4))
  {
    CFRelease(v4);
    v5 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v5)
      CFRelease(v5);
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)(v6 + 8));
      WTF::RunLoop::~RunLoop((CFRunLoopSourceRef *)v6);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
  }
}

void WTF::RunLoop::DispatchTimer::~DispatchTimer(WTF::RunLoop::DispatchTimer *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  __CFRunLoopTimer *v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::RunLoop::DispatchTimer *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *(_QWORD *)this = off_1E3572150;
  v10 = (__CFRunLoopTimer *)*((_QWORD *)this + 2);
  if (v10
    && (CFRunLoopTimerInvalidate(v10), v11 = (const void *)*((_QWORD *)this + 2), *((_QWORD *)this + 2) = 0, v11))
  {
    CFRelease(v11);
    v12 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v12)
      CFRelease(v12);
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  v13 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v13)
    goto LABEL_12;
  v14 = (unsigned int *)(v13 + 8);
  do
  {
    v15 = __ldaxr(v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v14));
  if (!v16)
  {
    atomic_store(1u, (unsigned int *)(v13 + 8));
    WTF::RunLoop::~RunLoop((CFRunLoopSourceRef *)v13);
    WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    v17 = this;
  }
  else
  {
LABEL_12:
    v17 = this;
  }
  WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::RunLoop::DispatchTimer::fired(WTF::RunLoop::DispatchTimer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4));
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::RunLoop::runLoopHolder(void)::$_0 &&>>()
{
  uint64_t result;

  WTF::RunLoop::runLoopHolder(void)::runLoopHolder = 0;
  result = pthread_key_create((pthread_key_t *)&WTF::RunLoop::runLoopHolder(void)::runLoopHolder, (void (__cdecl *)(void *))WTF::ThreadSpecific<WTF::RunLoop::Holder,(WTF::CanBeGCThread)0>::destroy);
  if ((_DWORD)result)
    __break(0xC471u);
  return result;
}

void WTF::ThreadSpecific<WTF::RunLoop::Holder,(WTF::CanBeGCThread)0>::destroy(WTF::RunLoop **a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  pthread_setspecific(*(_QWORD *)a1[1], a1);
  WTF::RunLoop::threadWillExit(*a1, v2, v3, v4, v5, v6, v7, v8);
  v9 = (unsigned int *)*a1;
  *a1 = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      WTF::RunLoop::~RunLoop((CFRunLoopSourceRef *)v9);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
  }
  pthread_setspecific(*(_QWORD *)a1[1], 0);
  WTF::fastFree((unint64_t)a1, v13, v14, v15, v16, v17, v18, v19);
}

void WTF::Detail::CallableWrapper<WTF::RunLoop::create(WTF::ASCIILiteral,WTF::ThreadType,WTF::Thread::QOS)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v12;
  unsigned __int8 v13;
  int v14;
  void *v15;
  _QWORD v16[2];
  char v17;
  _QWORD v18[3];

  v2 = WTF::RunLoop::current((WTF::RunLoop *)a1);
  **(_QWORD **)(a1 + 8) = v2;
  v9 = *(_BYTE **)(a1 + 16);
  v10 = v9 + 1;
  if (__ldaxr(v9 + 1))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  v2 = WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v9 + 1));
LABEL_5:
  *v9 = 1;
  v12 = v9 + 2;
  v13 = atomic_load(v12);
  if ((v13 & 1) != 0)
  {
    v17 = 0;
    v16[0] = v12;
    v16[1] = &v17;
    v18[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    v18[1] = v18;
    v18[2] = v16;
    WTF::ParkingLot::unparkOneImpl((uint64_t)v12, (unint64_t)v18, v3, v4, v5, v6, v7, v8);
  }
  v14 = __ldxr(v10);
  if (v14 == 1)
  {
    if (!__stlxr(0, v10))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, v3, v4, v5, v6, v7, v8);
LABEL_12:
  v15 = (void *)MEMORY[0x19AEBB88C](v2);
  CFRunLoopRun();
  objc_autoreleasePoolPop(v15);
}

void WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacity(uint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *((unsigned int *)a1 + 6);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
  }
  else
  {
    v4 = a1[2];
    v5 = v2 + 1;
    v6 = WTF::fastMalloc((WTF *)(8 * (v2 + 1)));
    v14 = (_QWORD *)v6;
    *((_DWORD *)a1 + 6) = v5;
    a1[2] = v6;
    v15 = *a1;
    v16 = a1[1];
    if (*a1 <= v16)
    {
      if (*a1 != v16)
      {
        v21 = 8 * v15;
        v22 = (_QWORD *)(v6 + v21);
        v23 = (uint64_t *)(v4 + v21);
        v24 = 8 * v16 - v21;
        do
        {
          v25 = *v23;
          *v23 = 0;
          *v22 = v25;
          v26 = *v23;
          *v23 = 0;
          if (v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          ++v22;
          ++v23;
          v24 -= 8;
        }
        while (v24);
      }
    }
    else
    {
      if (v16)
      {
        v17 = 8 * v16;
        v18 = (uint64_t *)v4;
        do
        {
          v19 = *v18;
          *v18 = 0;
          *v14 = v19;
          v20 = *v18;
          *v18 = 0;
          if (v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          ++v14;
          ++v18;
          v17 -= 8;
        }
        while (v17);
        v5 = *((_DWORD *)a1 + 6);
        v15 = *a1;
        v14 = (_QWORD *)a1[2];
      }
      v27 = v5;
      v28 = v15 - v1 + v5;
      if (v15 != v1)
      {
        v29 = 8 * v15;
        v30 = (uint64_t *)(v4 + v29);
        v31 = &v14[v27];
        v32 = v29 - 8 * v1;
        do
        {
          v33 = *v30;
          *v30 = 0;
          *(_QWORD *)((char *)v31 + v32) = v33;
          v34 = *v30;
          *v30 = 0;
          if (v34)
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
          ++v30;
          v32 += 8;
        }
        while (v32);
      }
      *a1 = v28;
    }
    if (v4)
    {
      if (a1[2] == v4)
      {
        a1[2] = 0;
        *((_DWORD *)a1 + 6) = 0;
      }
      WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WTF::RunLoop::dispatchAfter(WTF::Seconds,WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = &off_1E35720E8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (!v3)
    return a1;
  v4 = (unsigned int *)(v3 + 24);
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
    return a1;
  atomic_store(1u, (unsigned int *)(v3 + 24));
  v8 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)v3);
  WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

void WTF::Detail::CallableWrapper<WTF::RunLoop::dispatchAfter(WTF::Seconds,WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)this = &off_1E35720E8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v10)
    goto LABEL_7;
  v11 = (unsigned int *)(v10 + 24);
  do
  {
    v12 = __ldaxr(v11);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v11));
  if (!v13)
  {
    atomic_store(1u, (unsigned int *)(v10 + 24));
    v15 = *(_QWORD *)(v10 + 32);
    *(_QWORD *)(v10 + 32) = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)v10);
    WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    v14 = this;
  }
  else
  {
LABEL_7:
    v14 = this;
  }
  WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<WTF::RunLoop::dispatchAfter(WTF::Seconds,WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __CFRunLoopTimer *v3;
  const void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  v3 = *(__CFRunLoopTimer **)(v2 + 16);
  if (v3)
  {
    CFRunLoopTimerInvalidate(v3);
    v4 = *(const void **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v4)
      CFRelease(v4);
  }
  v5 = (unsigned int *)(v2 + 24);
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, (unsigned int *)(v2 + 24));
    v8 = *(_QWORD *)(v2 + 32);
    *(_QWORD *)(v2 + 32) = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)v2);
    WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
  }
}

void WTF::RunLoop::performWork(WTF::RunLoop *this, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (void *)MEMORY[0x19AEBB88C](this, a2);
  WTF::RunLoop::performWork(this, v4, v5, v6, v7, v8, v9, v10);
  objc_autoreleasePoolPop(v3);
}

WTF::RunLoop *WTF::RunLoop::RunLoop(WTF::RunLoop *this)
{
  CFRunLoopRef Current;
  __CFRunLoopSource *v3;
  const void *v4;
  CFRunLoopSourceContext v6;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E3572110;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_BYTE *)this + 48) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_WORD *)this + 44) = 0;
  Current = CFRunLoopGetCurrent();
  *((_QWORD *)this + 12) = Current;
  if (Current)
    CFRetain(Current);
  *((_QWORD *)this + 13) = 0;
  v6.version = 0;
  memset(&v6.retain, 0, 56);
  v6.info = this;
  v6.perform = (void (__cdecl *)(void *))WTF::RunLoop::performWork;
  v3 = CFRunLoopSourceCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &v6);
  v4 = (const void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v3;
  if (v4)
  {
    CFRelease(v4);
    v3 = (__CFRunLoopSource *)*((_QWORD *)this + 13);
  }
  CFRunLoopAddSource(*((CFRunLoopRef *)this + 12), v3, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  return this;
}

void WTF::RunLoop::~RunLoop(CFRunLoopSourceRef *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFRunLoopSourceRef v9;
  CFRunLoopSourceRef v10;
  CFRunLoopSourceRef v11;
  CFRunLoopSourceRef v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __CFRunLoopSource *v20;
  CFRunLoopSourceRef v21;
  CFRunLoopSourceRef v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  __CFRunLoopSource *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  CFRunLoopSourceInvalidate(this[13]);
  v9 = this[13];
  this[13] = 0;
  if (v9)
    CFRelease(v9);
  v10 = this[12];
  this[12] = 0;
  if (v10)
    CFRelease(v10);
  v11 = this[7];
  v12 = this[8];
  v13 = (uint64_t *)this[9];
  if (v11 <= v12)
  {
    if (v11 == v12)
      goto LABEL_19;
    v16 = (uint64_t)v11;
    v17 = &v13[v16];
    v18 = 8 * (_QWORD)v12 - v16 * 8;
    do
    {
      v19 = *v17;
      *v17 = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      ++v17;
      v18 -= 8;
    }
    while (v18);
  }
  else
  {
    if (v12)
    {
      v14 = 8 * (_QWORD)v12;
      do
      {
        v15 = *v13;
        *v13 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        ++v13;
        v14 -= 8;
      }
      while (v14);
      v13 = (uint64_t *)this[9];
      v11 = this[7];
    }
    v20 = (__CFRunLoopSource *)*((unsigned int *)this + 20);
    if (v11 != v20)
    {
      v31 = (uint64_t)v11;
      v32 = &v13[v31];
      v33 = 8 * (_QWORD)v20 - v31 * 8;
      do
      {
        v34 = *v32;
        *v32 = 0;
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        ++v32;
        v33 -= 8;
      }
      while (v33);
    }
  }
  v13 = (uint64_t *)this[9];
LABEL_19:
  if (v13)
  {
    this[9] = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree((unint64_t)v13, v2, v3, v4, v5, v6, v7, v8);
  }
  v21 = this[2];
  v22 = this[3];
  v23 = (uint64_t *)this[4];
  if (v21 <= v22)
  {
    if (v21 == v22)
      goto LABEL_35;
    v26 = (uint64_t)v21;
    v27 = &v23[v26];
    v28 = 8 * (_QWORD)v22 - v26 * 8;
    do
    {
      v29 = *v27;
      *v27 = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      ++v27;
      v28 -= 8;
    }
    while (v28);
  }
  else
  {
    if (v22)
    {
      v24 = 8 * (_QWORD)v22;
      do
      {
        v25 = *v23;
        *v23 = 0;
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        ++v23;
        v24 -= 8;
      }
      while (v24);
      v23 = (uint64_t *)this[4];
      v21 = this[2];
    }
    v30 = (__CFRunLoopSource *)*((unsigned int *)this + 10);
    if (v21 != v30)
    {
      v35 = (uint64_t)v21;
      v36 = &v23[v35];
      v37 = 8 * (_QWORD)v30 - v35 * 8;
      do
      {
        v38 = *v36;
        *v36 = 0;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
        ++v36;
        v37 -= 8;
      }
      while (v37);
    }
  }
  v23 = (uint64_t *)this[4];
LABEL_35:
  if (v23)
  {
    this[4] = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree((unint64_t)v23, v2, v3, v4, v5, v6, v7, v8);
  }
}

{
  unint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  WTF::RunLoop::~RunLoop(this);
  WTF::fastFree(v1, v2, v3, v4, v5, v6, v7, v8);
}

void WTF::RunLoop::wakeUp(CFRunLoopSourceRef *this)
{
  CFRunLoopSourceSignal(this[13]);
  CFRunLoopWakeUp(this[12]);
}

uint64_t WTF::RunLoop::cycle(const __CFString *this, const __CFString *a2)
{
  CFRunLoopRunInMode(this, 0.05, 1u);
  return 0;
}

void WTF::RunLoop::run(WTF::RunLoop *this)
{
  void *v1;

  v1 = (void *)MEMORY[0x19AEBB88C](this);
  CFRunLoopRun();
  objc_autoreleasePoolPop(v1);
}

void WTF::RunLoop::stop(CFRunLoopRef *this)
{
  CFRunLoopStop(this[12]);
}

void WTF::RunLoop::dispatch(uint64_t *a1, void **a2)
{
  void *v3;
  const __CFAllocator *v4;
  CFAbsoluteTime Current;
  __CFRunLoopTimer *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFRunLoopTimerContext v14;

  v3 = *a2;
  *a2 = 0;
  v14.version = 0;
  memset(&v14.retain, 0, 24);
  v14.info = v3;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Current = CFAbsoluteTimeGetCurrent();
  v6 = CFRunLoopTimerCreate(v4, Current + 0.0, 0.0, 0, 0, (CFRunLoopTimerCallBack)WTF::RunLoop::dispatch(WTF::HashSet<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTableTraits> const&,WTF::Function<void ()(void)> &&)::$_0::__invoke, &v14);
  v7 = *a1;
  if (!*a1)
  {
    v10 = 0;
    v9 = 0;
    goto LABEL_10;
  }
  v8 = *(unsigned int *)(v7 - 4);
  v9 = v7 + 8 * v8;
  if (*(_DWORD *)(v7 - 12))
  {
    v10 = v7;
    if ((_DWORD)v8)
    {
      v11 = 8 * v8;
      v10 = v7;
      while ((unint64_t)(*(_QWORD *)v10 + 1) <= 1)
      {
        v10 += 8;
        v11 -= 8;
        if (!v11)
        {
          v10 = v9;
          if (v7)
            goto LABEL_11;
          goto LABEL_14;
        }
      }
    }
LABEL_10:
    if (v7)
      goto LABEL_11;
    goto LABEL_14;
  }
  v10 = v7 + 8 * v8;
  v9 = v10;
  if (v7)
  {
LABEL_11:
    v12 = v7 + 8 * *(unsigned int *)(v7 - 4);
    if (v12 == v10)
      goto LABEL_15;
    goto LABEL_19;
  }
LABEL_14:
  v12 = 0;
  if (!v10)
    goto LABEL_15;
  do
  {
LABEL_19:
    v13 = v10 + 8;
    CFRunLoopAddTimer(*(CFRunLoopRef *)(*(_QWORD *)v10 + 16), v6, *(CFRunLoopMode *)(*(_QWORD *)v10 + 24));
    v10 = v9;
    if (v13 != v9)
    {
      v10 = v13;
      while ((unint64_t)(*(_QWORD *)v10 + 1) <= 1)
      {
        v10 += 8;
        if (v10 == v9)
        {
          v10 = v9;
          break;
        }
      }
    }
  }
  while (v10 != v12);
LABEL_15:
  if (v6)
    CFRelease(v6);
}

_QWORD *WTF::RunLoop::TimerBase::TimerBase(_QWORD *this, WTF::RunLoop *a2)
{
  unsigned int *v2;
  unsigned int v3;

  *this = off_1E3572150;
  v2 = (unsigned int *)((char *)a2 + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  this[1] = a2;
  this[2] = 0;
  return this;
}

void WTF::RunLoop::TimerBase::~TimerBase(WTF::RunLoop::TimerBase *this)
{
  __CFRunLoopTimer *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)this = off_1E3572150;
  v2 = (__CFRunLoopTimer *)*((_QWORD *)this + 2);
  if (v2 && (CFRunLoopTimerInvalidate(v2), v3 = (const void *)*((_QWORD *)this + 2), *((_QWORD *)this + 2) = 0, v3))
  {
    CFRelease(v3);
    v4 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v4)
      CFRelease(v4);
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)(v5 + 8));
      WTF::RunLoop::~RunLoop((CFRunLoopSourceRef *)v5);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

void WTF::RunLoop::TimerBase::stop(WTF::RunLoop::TimerBase *this)
{
  __CFRunLoopTimer *v2;
  const void *v3;

  v2 = (__CFRunLoopTimer *)*((_QWORD *)this + 2);
  if (v2)
  {
    CFRunLoopTimerInvalidate(v2);
    v3 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v3)
      CFRelease(v3);
  }
}

double WTF::RunLoop::TimerBase::start(uint64_t a1, int a2, double a3)
{
  __CFRunLoopTimer *v6;
  const void *v7;
  double v8;
  const __CFAllocator *v9;
  CFAbsoluteTime Current;
  __CFRunLoopTimer *v11;
  const void *v12;
  double result;
  __CFRunLoopTimer *v14;
  CFAbsoluteTime v15;
  CFRunLoopTimerContext v16;

  v6 = *(__CFRunLoopTimer **)(a1 + 16);
  if (v6)
  {
    if ((a2 & 1) != 0)
      goto LABEL_5;
    if (!CFRunLoopTimerDoesRepeat(v6) && CFRunLoopTimerIsValid(*(CFRunLoopTimerRef *)(a1 + 16)))
    {
      v14 = *(__CFRunLoopTimer **)(a1 + 16);
      v15 = a3 + CFAbsoluteTimeGetCurrent();
      CFRunLoopTimerSetNextFireDate(v14, v15);
      return result;
    }
    v6 = *(__CFRunLoopTimer **)(a1 + 16);
    if (v6)
    {
LABEL_5:
      CFRunLoopTimerInvalidate(v6);
      v7 = *(const void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (v7)
        CFRelease(v7);
    }
  }
  v16.version = 0;
  memset(&v16.retain, 0, 24);
  v16.info = (void *)a1;
  if (a2)
    v8 = a3;
  else
    v8 = 0.0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Current = CFAbsoluteTimeGetCurrent();
  v11 = CFRunLoopTimerCreate(v9, a3 + Current, v8, 0, 0, (CFRunLoopTimerCallBack)WTF::RunLoop::TimerBase::start(WTF::Seconds,BOOL)::$_0::__invoke, &v16);
  v12 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  if (v12)
  {
    CFRelease(v12);
    v11 = *(__CFRunLoopTimer **)(a1 + 16);
  }
  CFRunLoopAddTimer(*(CFRunLoopRef *)(*(_QWORD *)(a1 + 8) + 96), v11, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  return result;
}

__CFRunLoopTimer *WTF::RunLoop::TimerBase::isActive(WTF::RunLoop::TimerBase *this)
{
  __CFRunLoopTimer *result;

  result = (__CFRunLoopTimer *)*((_QWORD *)this + 2);
  if (result)
    return (__CFRunLoopTimer *)(CFRunLoopTimerIsValid(result) != 0);
  return result;
}

double WTF::RunLoop::TimerBase::secondsUntilFire(WTF::RunLoop::TimerBase *this)
{
  __CFRunLoopTimer *v2;
  double v3;
  double NextFireDate;
  double v5;

  v2 = (__CFRunLoopTimer *)*((_QWORD *)this + 2);
  v3 = 0.0;
  if (v2 && CFRunLoopTimerIsValid(v2))
  {
    NextFireDate = CFRunLoopTimerGetNextFireDate(*((CFRunLoopTimerRef *)this + 2));
    v5 = NextFireDate - CFAbsoluteTimeGetCurrent();
    if (v5 >= 0.0)
      return v5;
    else
      return 0.0;
  }
  return v3;
}

void WTF::RunLoop::dispatch(WTF::HashSet<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTableTraits> const&,WTF::Function<void ()(void)> &&)::$_0::__invoke(__CFRunLoopTimer *a1, uint64_t a2)
{
  void *v4;

  v4 = (void *)MEMORY[0x19AEBB88C]();
  CFRunLoopTimerInvalidate(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  objc_autoreleasePoolPop(v4);
}

void WTF::RunLoop::TimerBase::start(WTF::Seconds,BOOL)::$_0::__invoke(__CFRunLoopTimer *a1, uint64_t a2)
{
  void *v4;

  v4 = (void *)MEMORY[0x19AEBB88C]();
  if (!CFRunLoopTimerDoesRepeat(a1))
    CFRunLoopTimerInvalidate(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  objc_autoreleasePoolPop(v4);
}

uint64_t *WTF::sdkAlignedBehaviors(WTF *this)
{
  int v1;
  int v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  if ((_MergedGlobals_13 & 1) != 0)
  {
    if (byte_1ECF582A4)
      return &qword_1ECF58298;
  }
  else
  {
    LOBYTE(qword_1ECF58298) = 0;
    byte_1ECF582A4 = 0;
    _MergedGlobals_13 = 1;
  }
  if (dyld_program_sdk_at_least())
    v1 = -1;
  else
    v1 = -524289;
  v2 = dyld_program_sdk_at_least();
  if (v2)
    v3 = -1;
  else
    v3 = -1073741889;
  if (v2)
    v4 = v1;
  else
    v4 = v1 & 0xFFBFEFFE;
  if (v2)
    v5 = 0x1FFFFFFF;
  else
    v5 = 536870879;
  if (!dyld_program_sdk_at_least())
    v5 &= 0x1FFFFFFEu;
  if (!dyld_program_sdk_at_least())
  {
    v3 &= 0xFFD3FFFF;
    v5 &= 0x1FFFFFBFu;
  }
  if (!dyld_program_sdk_at_least())
    v3 &= 0xFFFFEBFF;
  if (!dyld_program_sdk_at_least())
  {
    v3 &= ~0x80000000;
    v4 &= 0xFDFFFEFF;
    v5 &= 0x1FFFFFE7u;
  }
  if (!dyld_program_sdk_at_least())
  {
    v3 &= ~0x20000000u;
    v4 &= ~0x100000u;
  }
  if (!dyld_program_sdk_at_least())
  {
    v3 &= 0xFDEDFEFF;
    v4 &= 0x3FFFBFBBu;
    v5 &= 0x1FFFFEFBu;
  }
  if (!dyld_program_sdk_at_least())
    v4 &= ~0x20000000u;
  if (!dyld_program_sdk_at_least())
    v4 &= 0xFB7FFFFD;
  v6 = dyld_program_sdk_at_least();
  if (v6)
    v7 = v3;
  else
    v7 = v3 & 0xF7FFFFFF;
  if (v6)
    v8 = v4;
  else
    v8 = v4 & 0xF7FFFD7F;
  if (v6)
    v9 = v5;
  else
    v9 = v5 & 0x1FFFFD7F;
  if (!dyld_program_sdk_at_least())
    v9 &= ~2u;
  if (!dyld_program_sdk_at_least())
  {
    v7 &= 0xFBFFF776;
    v8 &= 0xEFFB7FF7;
  }
  if (!dyld_program_sdk_at_least())
  {
    v7 &= 0xFFFEDFFF;
    v8 &= 0xFFFDFFEF;
  }
  if (!dyld_program_sdk_at_least())
    v7 &= ~4u;
  if (!dyld_program_sdk_at_least())
  {
    v7 &= 0xFFBFBFDF;
    v8 &= ~0x2000u;
    v9 &= ~0x400u;
  }
  if (dyld_get_program_sdk_version() >> 10 < 0x401)
  {
    v7 &= 0xEFFF7DFF;
    v8 &= 0xFFDEF7FF;
    v9 &= 0xFFFFC7FF;
  }
  if (!dyld_program_sdk_at_least())
  {
    v7 &= ~0x800000u;
    v8 &= ~0x1000000u;
    v9 &= 0xFFF83FFF;
  }
  if (!dyld_program_sdk_at_least())
    v9 &= 0xFF77FFFF;
  if (dyld_get_program_sdk_version() < 0x110400)
    v9 &= 0xFF8FFFFF;
  v10 = dyld_program_sdk_at_least();
  LODWORD(v11) = v8 & 0xFFFFFFDF;
  LODWORD(v12) = v7 & 0xFEFFFFED;
  v13 = v9 & 0xE0FFFFFF;
  if (v10)
    v12 = v7;
  else
    v12 = v12;
  if (v10)
    v11 = v8;
  else
    v11 = v11;
  if (v10)
    v13 = v9;
  qword_1ECF58298 = v12 | (v11 << 32);
  dword_1ECF582A0 = v13;
  if (!byte_1ECF582A4)
    byte_1ECF582A4 = 1;
  return &qword_1ECF58298;
}

uint64_t WTF::setSDKAlignedBehaviors(uint64_t result, int a2)
{
  if ((_MergedGlobals_13 & 1) == 0)
  {
    _MergedGlobals_13 = 1;
    qword_1ECF58298 = result;
    dword_1ECF582A0 = a2;
    goto LABEL_5;
  }
  qword_1ECF58298 = result;
  dword_1ECF582A0 = a2;
  if (!byte_1ECF582A4)
LABEL_5:
    byte_1ECF582A4 = 1;
  return result;
}

void WTF::enableAllSDKAlignedBehaviors(WTF *this)
{
  if ((_MergedGlobals_13 & 1) == 0)
  {
    _MergedGlobals_13 = 1;
    qword_1ECF58298 = -1;
    dword_1ECF582A0 = 0x1FFFFFFF;
    goto LABEL_5;
  }
  qword_1ECF58298 = -1;
  dword_1ECF582A0 = 0x1FFFFFFF;
  if (!byte_1ECF582A4)
LABEL_5:
    byte_1ECF582A4 = 1;
}

void WTF::disableAllSDKAlignedBehaviors(WTF *this)
{
  if ((_MergedGlobals_13 & 1) == 0)
  {
    _MergedGlobals_13 = 1;
    qword_1ECF58298 = 0;
    dword_1ECF582A0 = 0;
    goto LABEL_5;
  }
  qword_1ECF58298 = 0;
  dword_1ECF582A0 = 0;
  if (!byte_1ECF582A4)
LABEL_5:
    byte_1ECF582A4 = 1;
}

uint64_t *WTF::linkedOnOrAfterSDKWithBehavior(WTF *a1)
{
  unsigned int v1;
  uint64_t *result;

  v1 = a1;
  result = WTF::sdkAlignedBehaviors(a1);
  if (v1 < 0x60)
    return (uint64_t *)((*(_DWORD *)&_MergedGlobals_13[4 * (v1 >> 5) + 8] >> v1) & 1);
  __break(1u);
  return result;
}

uint64_t WTF::processIsExtension(WTF *this)
{
  return WTF::processIsExtensionValue(void)::processIsExtension;
}

uint64_t WTF::setProcessIsExtension(uint64_t this)
{
  WTF::processIsExtensionValue(void)::processIsExtension = this;
  return this;
}

uint64_t WTF::safeStrerror@<X0>(WTF *this@<X0>, uint64_t *a2@<X8>)
{
  int v2;
  uint64_t v4;
  char *v5;
  uint64_t result;

  v2 = (int)this;
  v4 = WTF::fastMalloc((WTF *)0x411);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 1024;
  *a2 = v4;
  v5 = (char *)(v4 + 16);
  *(_BYTE *)(v4 + 1040) = 0;
  result = strerror_r(v2, (char *)(v4 + 16), 0x400uLL);
  if ((_DWORD)result)
    return snprintf(v5, 0x400uLL, "%s %d", "Unknown error", v2);
  return result;
}

BOOL WTF::SchedulePair::operator==(uint64_t a1, uint64_t a2)
{
  const void *v3;
  const void *v4;
  BOOL v5;

  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = *(const void **)(a1 + 24);
  v4 = *(const void **)(a2 + 24);
  if (v3)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    return v3 == v4;
  else
    return CFEqual(v3, v4) != 0;
}

WTF::SchedulePair *WTF::SchedulePair::SchedulePair(WTF::SchedulePair *this, NSRunLoop *a2, const __CFString *a3)
{
  NSRunLoop *v5;
  NSRunLoop *v6;
  NSRunLoop *v7;
  __CFRunLoop *v8;
  CFStringRef Copy;
  const void *v10;

  v5 = a2;
  *(_DWORD *)this = 1;
  v6 = v5;
  v7 = v6;
  *((_QWORD *)this + 1) = v6;
  if (v6)
    CFRetain(v6);

  v8 = -[NSRunLoop getCFRunLoop](v7, "getCFRunLoop");
  *((_QWORD *)this + 2) = v8;
  if (v8)
    CFRetain(v8);
  *((_QWORD *)this + 3) = 0;
  if (a3)
  {
    Copy = CFStringCreateCopy(0, a3);
    v10 = (const void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = Copy;
    if (v10)
      CFRelease(v10);
  }

  return this;
}

void sub_197AFFD30(_Unwind_Exception *a1)
{
  void *v1;
  _QWORD *v2;
  const void *v4;
  const void *v5;
  const void *v6;

  v4 = (const void *)v2[3];
  v2[3] = 0;
  if (v4)
  {
    CFRelease(v4);
    v5 = (const void *)v2[2];
    v2[2] = 0;
    if (!v5)
    {
LABEL_3:
      v6 = (const void *)v2[1];
      v2[1] = 0;
      if (!v6)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v5 = (const void *)v2[2];
    v2[2] = 0;
    if (!v5)
      goto LABEL_3;
  }
  CFRelease(v5);
  v6 = (const void *)v2[1];
  v2[1] = 0;
  if (!v6)
  {
LABEL_4:

    _Unwind_Resume(a1);
  }
LABEL_7:
  CFRelease(v6);

  _Unwind_Resume(a1);
}

double WTF::Seconds::operator+(double *a1, double a2)
{
  return a2 + *a1;
}

{
  return a2 + *a1;
}

{
  return a2 + *a1;
}

double WTF::Seconds::operator+(double *a1, double *a2)
{
  return *a1 + *a2;
}

double WTF::Seconds::operator-(double *a1, double a2)
{
  return *a1 - a2;
}

{
  return *a1 - a2;
}

{
  return *a1 - a2;
}

double WTF::Seconds::operator-(double *a1, double *a2)
{
  return *a1 - *a2;
}

uint64_t WTF::Seconds::dump(WTF::Seconds *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v4;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v4, "%lf", *(double *)this);
  WTF::PrintStream::printf(v4, "%s", " sec");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t WTF::operator<<(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v18;
  int v19;

  v10 = WTF::TextStream::operator<<(a1, a9, a2, a3, a4, a5, a6, a7, a8);
  v18 = "s";
  v19 = 1;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(v10, (uint64_t)&v18, v11, v12, v13, v14, v15, v16);
  return a1;
}

void WTF::sleep(WTF::MonotonicTime *a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  double v12;
  int v13;

  v11 = 0;
  if (__ldaxr((unsigned __int8 *)&v11 + 1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&v11 + 1))
  {
    goto LABEL_5;
  }
  a1 = (WTF::MonotonicTime *)WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&v11 + 1);
LABEL_5:
  if (fabs(a2) != INFINITY)
    a2 = a2 + WTF::MonotonicTime::now(a1);
  v12 = a2;
  v13 = 1;
  WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)&v11, (unsigned __int8 *)&v11 + 1, (WTF::TimeWithDynamicClockType *)&v12);
  v10 = __ldxr((unsigned __int8 *)&v11 + 1);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, (unsigned __int8 *)&v11 + 1))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&v11 + 1, 0, v4, v5, v6, v7, v8, v9);
}

CC_SHA1_CTX *WTF::SHA1::SHA1(CC_SHA1_CTX *this)
{
  CC_SHA1_Init(this);
  return this;
}

{
  CC_SHA1_Init(this);
  return this;
}

uint64_t WTF::SHA1::computeHash(CC_SHA1_CTX *c, unsigned __int8 *md)
{
  return CC_SHA1_Final(md, c);
}

void WTF::SHA1::addUTF8Bytes(CC_SHA1_CTX *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  int v10;
  const char *v11;
  unint64_t v13;
  BOOL v15;
  unint64_t v16;
  int8x8_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8x16_t *v20;
  unint64_t v21;
  int8x8_t v22;
  unint64_t v23;
  unsigned __int8 v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint16x4_t *v34;
  uint64_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t *v38;
  uint64_t v39;
  int8x16_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  unint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  uint8x8_t *v47;
  unint64_t v48;
  int8x16_t v49;
  int8x16_t v50;
  uint8x8_t v51;
  uint16x8_t v52;
  uint32x4_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  uint32x4_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  unint64_t v62;
  uint8x16_t *v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  uint8x16_t v70;
  uint16x8_t v71;
  uint32x4_t v72;
  int8x16_t v73;
  int8x16_t v74;
  uint16x8_t v75;
  uint32x4_t v76;
  int8x16_t v77;
  int8x16_t v78;
  uint32x4_t v79;
  int8x16_t v80;
  uint32x4_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  unsigned int v86;
  WTF *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t *v98;
  uint64_t v99;
  int8x16_t v100;
  uint64_t v101;
  unint64_t v102;
  unsigned __int16 *v103;
  uint64_t v104;
  int8x16_t v105;
  int8x16_t v106;
  uint16x4_t *v107;
  unint64_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  uint16x8_t v115;
  uint32x4_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  uint32x4_t v120;
  int8x16_t v121;
  int8x16_t v122;
  uint32x4_t v123;
  int8x16_t v124;
  int8x16_t v125;
  uint32x4_t v126;
  int8x16_t v127;
  int8x16_t v128;
  unsigned int v129;
  uint64_t v130;
  int *v131;
  uint64_t v132;
  unint64_t v133;
  unsigned __int128 *v134;
  unsigned __int128 v135;
  char *v136;
  unint64_t v137;
  unint64_t v138;
  BOOL v139;
  unint64_t v140;
  char *v141;
  const char *v142;
  char v143;
  WTF::AtomStringImpl *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int8x16_t *v159;
  int8x16_t *v160;
  unint64_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  int16x8_t *v166;
  int8x8_t *v167;
  unint64_t v168;
  int16x8_t v169;
  CC_LONG *v170;
  _QWORD v171[2];

  v10 = a3;
  v11 = (const char *)a2;
  v171[0] = a2;
  v171[1] = a3;
  v13 = a3;
  v15 = (a2 & 7) == 0 || (_DWORD)a3 == 0;
  if ((a3 & 0xFF00000000) != 0)
  {
    v16 = a2 + a3;
    if (v15)
    {
      v17 = 0;
      v18 = a2;
      v19 = v16 & 0xFFFFFFFFFFFFFFF8;
      if (a2 >= (v16 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_10:
        v20 = (uint8x16_t *)v18;
        goto LABEL_46;
      }
    }
    else
    {
      v18 = a2 + 1;
      v24 = *(_BYTE *)a2;
      if (((a2 + 1) & 7) != 0 && a3 != 1)
      {
        v24 |= *(_BYTE *)(a2 + 1);
        v18 = a2 + 2;
        if (((a2 + 2) & 7) != 0 && a3 != 2)
        {
          v24 |= *(_BYTE *)(a2 + 2);
          v18 = a2 + 3;
          if (((a2 + 3) & 7) != 0 && a3 != 3)
          {
            v24 |= *(_BYTE *)(a2 + 3);
            v18 = a2 + 4;
            if (((a2 + 4) & 7) != 0 && a3 != 4)
            {
              v24 |= *(_BYTE *)(a2 + 4);
              v18 = a2 + 5;
              if (((a2 + 5) & 7) != 0 && a3 != 5)
              {
                v24 |= *(_BYTE *)(a2 + 5);
                v18 = a2 + 6;
                if (((a2 + 6) & 7) != 0 && a3 != 6)
                {
                  v24 |= *(_BYTE *)(a2 + 6);
                  v18 = a2 + 7;
                  if (((a2 + 7) & 7) != 0 && a3 != 7)
                  {
                    v24 |= *(_BYTE *)(a2 + 7);
                    v18 = a2 + 8;
                  }
                }
              }
            }
          }
        }
      }
      v17 = (int8x8_t)v24;
      v19 = v16 & 0xFFFFFFFFFFFFFFF8;
      if (v18 >= (v16 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_10;
    }
    v25 = v18 + 8;
    if (v19 > v18 + 8)
      v25 = v19;
    v26 = v25 + ~v18;
    if (v26 >= 0x18)
    {
      v35 = (v26 >> 3) + 1;
      v20 = (uint8x16_t *)(v18 + 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL));
      v36 = 0uLL;
      v37 = (int8x16_t)(unint64_t)v17;
      v38 = (int8x16_t *)(v18 + 16);
      v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v37 = vorrq_s8(v38[-1], v37);
        v36 = vorrq_s8(*v38, v36);
        v38 += 2;
        v39 -= 4;
      }
      while (v39);
      v40 = vorrq_s8(v36, v37);
      *(_QWORD *)&a10 = vextq_s8(v40, v40, 8uLL).u64[0];
      v17 = vorr_s8(*(int8x8_t *)v40.i8, *(int8x8_t *)&a10);
      if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_46:
        if (v20 == (uint8x16_t *)v16)
          goto LABEL_61;
        v42 = a2 + a3 - (_QWORD)v20;
        if (v42 < 8)
        {
          v43 = (unsigned __int8 *)v20;
          goto LABEL_60;
        }
        if (v42 >= 0x10)
        {
          v44 = v42 & 0xFFFFFFFFFFFFFFF0;
          v60 = 0uLL;
          v61 = (int8x16_t)(unint64_t)v17;
          v62 = v42 & 0xFFFFFFFFFFFFFFF0;
          v63 = v20;
          v64 = 0uLL;
          v65 = 0uLL;
          v66 = 0uLL;
          v67 = 0uLL;
          v68 = 0uLL;
          v69 = 0uLL;
          do
          {
            v70 = *v63++;
            v71 = vmovl_u8(*(uint8x8_t *)v70.i8);
            v72 = vmovl_u16(*(uint16x4_t *)v71.i8);
            v73.i64[0] = v72.u32[0];
            v73.i64[1] = v72.u32[1];
            v74 = v73;
            v75 = vmovl_high_u8(v70);
            v76 = vmovl_high_u16(v75);
            v73.i64[0] = v76.u32[2];
            v73.i64[1] = v76.u32[3];
            v77 = v73;
            v73.i64[0] = v72.u32[2];
            v73.i64[1] = v72.u32[3];
            v78 = v73;
            v79 = vmovl_high_u16(v71);
            v73.i64[0] = v79.u32[0];
            v73.i64[1] = v79.u32[1];
            v80 = v73;
            v81 = vmovl_u16(*(uint16x4_t *)v75.i8);
            v73.i64[0] = v81.u32[0];
            v73.i64[1] = v81.u32[1];
            v82 = v73;
            v73.i64[0] = v76.u32[0];
            v73.i64[1] = v76.u32[1];
            v83 = v73;
            v73.i64[0] = v79.u32[2];
            v73.i64[1] = v79.u32[3];
            v84 = v73;
            v73.i64[0] = v81.u32[2];
            v73.i64[1] = v81.u32[3];
            v67 = vorrq_s8(v67, v73);
            v65 = vorrq_s8(v65, v84);
            v68 = vorrq_s8(v68, v83);
            v66 = vorrq_s8(v66, v82);
            v64 = vorrq_s8(v64, v80);
            v60 = vorrq_s8(v60, v78);
            v69 = vorrq_s8(v69, v77);
            v61 = vorrq_s8(v61, v74);
            v62 -= 16;
          }
          while (v62);
          v85 = vorrq_s8(vorrq_s8(vorrq_s8(v61, v66), vorrq_s8(v64, v68)), vorrq_s8(vorrq_s8(v60, v67), vorrq_s8(v65, v69)));
          *(_QWORD *)&a10 = vextq_s8(v85, v85, 8uLL).u64[0];
          v17 = vorr_s8(*(int8x8_t *)v85.i8, *(int8x8_t *)&a10);
          if (v42 == v44)
            goto LABEL_61;
          if ((v42 & 8) == 0)
          {
            v43 = &v20->u8[v44];
            do
            {
LABEL_60:
              v86 = *v43++;
              *(_QWORD *)&v17 |= v86;
            }
            while (v43 != (unsigned __int8 *)v16);
            goto LABEL_61;
          }
        }
        else
        {
          v44 = 0;
        }
        v43 = &v20->u8[v42 & 0xFFFFFFFFFFFFFFF8];
        v45 = 0uLL;
        v46 = (int8x16_t)(unint64_t)v17;
        v47 = (uint8x8_t *)&v20->i8[v44];
        v48 = v44 - (v42 & 0xFFFFFFFFFFFFFFF8);
        v49 = 0uLL;
        v50 = 0uLL;
        do
        {
          v51 = *v47++;
          v52 = vmovl_u8(v51);
          v53 = vmovl_u16(*(uint16x4_t *)v52.i8);
          v54.i64[0] = v53.u32[0];
          v54.i64[1] = v53.u32[1];
          v55 = v54;
          v54.i64[0] = v53.u32[2];
          v54.i64[1] = v53.u32[3];
          v56 = v54;
          v57 = vmovl_high_u16(v52);
          v54.i64[0] = v57.u32[0];
          v54.i64[1] = v57.u32[1];
          v58 = v54;
          v54.i64[0] = v57.u32[2];
          v54.i64[1] = v57.u32[3];
          v50 = vorrq_s8(v50, v54);
          v49 = vorrq_s8(v49, v58);
          v45 = vorrq_s8(v45, v56);
          v46 = vorrq_s8(v46, v55);
          v48 += 8;
        }
        while (v48);
        v59 = vorrq_s8(vorrq_s8(v46, v49), vorrq_s8(v45, v50));
        *(_QWORD *)&a10 = vextq_s8(v59, v59, 8uLL).u64[0];
        v17 = vorr_s8(*(int8x8_t *)v59.i8, *(int8x8_t *)&a10);
        if (v42 != (v42 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_60;
LABEL_61:
        if ((*(_QWORD *)&v17 & 0x8080808080808080) != 0)
          goto LABEL_62;
        goto LABEL_79;
      }
    }
    else
    {
      v20 = (uint8x16_t *)v18;
    }
    do
    {
      v41 = v20->i64[0];
      v20 = (uint8x16_t *)((char *)v20 + 8);
      *(_QWORD *)&v17 |= v41;
    }
    while ((unint64_t)v20 < v19);
    goto LABEL_46;
  }
  v21 = a2 + 2 * a3;
  if (v15)
  {
    v22 = 0;
    v23 = a2;
  }
  else
  {
    v22 = 0;
    v27 = 2 * a3 - 2;
    v28 = a2 + 2;
    v23 = a2;
    do
    {
      v29 = *(unsigned __int16 *)v23;
      v23 += 2;
      *(_QWORD *)&v22 |= v29;
      if ((v28 & 7) == 0)
        break;
      v30 = v27;
      v27 -= 2;
      v28 += 2;
    }
    while (v30);
  }
  v31 = v21 & 0xFFFFFFFFFFFFFFF8;
  if (v23 >= (v21 & 0xFFFFFFFFFFFFFFF8))
  {
    v34 = (uint16x4_t *)v23;
    goto LABEL_71;
  }
  v32 = v23 + 8;
  if (v31 > v23 + 8)
    v32 = v21 & 0xFFFFFFFFFFFFFFF8;
  v33 = v32 + ~v23;
  if (v33 < 0x18)
  {
    v34 = (uint16x4_t *)v23;
    do
    {
LABEL_70:
      v101 = (uint64_t)*v34++;
      *(_QWORD *)&v22 |= v101;
    }
    while ((unint64_t)v34 < v31);
    goto LABEL_71;
  }
  v95 = (v33 >> 3) + 1;
  v34 = (uint16x4_t *)(v23 + 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL));
  v96 = 0uLL;
  v97 = (int8x16_t)(unint64_t)v22;
  v98 = (int8x16_t *)(v23 + 16);
  v99 = v95 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v97 = vorrq_s8(v98[-1], v97);
    v96 = vorrq_s8(*v98, v96);
    v98 += 2;
    v99 -= 4;
  }
  while (v99);
  v100 = vorrq_s8(v96, v97);
  *(_QWORD *)&a10 = vextq_s8(v100, v100, 8uLL).u64[0];
  v22 = vorr_s8(*(int8x8_t *)v100.i8, *(int8x8_t *)&a10);
  if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_70;
LABEL_71:
  if (v34 == (uint16x4_t *)v21)
    goto LABEL_78;
  v102 = a2 + 2 * a3 - (_QWORD)v34 - 2;
  if (v102 < 0x1E)
  {
    v103 = (unsigned __int16 *)v34;
    do
    {
LABEL_77:
      v129 = *v103++;
      *(_QWORD *)&v22 |= v129;
    }
    while (v103 != (unsigned __int16 *)v21);
    goto LABEL_78;
  }
  v104 = (v102 >> 1) + 1;
  v105 = 0uLL;
  v106 = (int8x16_t)(unint64_t)v22;
  v103 = (unsigned __int16 *)v34 + (v104 & 0xFFFFFFFFFFFFFFF0);
  v107 = v34 + 2;
  v108 = v104 & 0xFFFFFFFFFFFFFFF0;
  v109 = 0uLL;
  v110 = 0uLL;
  v111 = 0uLL;
  v112 = 0uLL;
  v113 = 0uLL;
  v114 = 0uLL;
  do
  {
    v115 = *(uint16x8_t *)v107[-2].i8;
    v116 = vmovl_u16(*(uint16x4_t *)v115.i8);
    v117.i64[0] = v116.u32[0];
    v117.i64[1] = v116.u32[1];
    v118 = v117;
    v117.i64[0] = v116.u32[2];
    v117.i64[1] = v116.u32[3];
    v119 = v117;
    v120 = vmovl_high_u16(v115);
    v117.i64[0] = v120.u32[0];
    v117.i64[1] = v120.u32[1];
    v121 = v117;
    v117.i64[0] = v120.u32[2];
    v117.i64[1] = v120.u32[3];
    v122 = v117;
    v123 = vmovl_u16(*v107);
    v117.i64[0] = v123.u32[0];
    v117.i64[1] = v123.u32[1];
    v124 = v117;
    v117.i64[0] = v123.u32[2];
    v117.i64[1] = v123.u32[3];
    v125 = v117;
    v126 = vmovl_high_u16(*(uint16x8_t *)v107->i8);
    v117.i64[0] = v126.u32[0];
    v117.i64[1] = v126.u32[1];
    v127 = v117;
    v117.i64[0] = v126.u32[2];
    v117.i64[1] = v126.u32[3];
    v110 = vorrq_s8(v110, v122);
    v109 = vorrq_s8(v109, v121);
    v105 = vorrq_s8(v105, v119);
    v106 = vorrq_s8(v106, v118);
    v114 = vorrq_s8(v114, v117);
    v113 = vorrq_s8(v113, v127);
    v112 = vorrq_s8(v112, v125);
    v111 = vorrq_s8(v111, v124);
    v107 += 4;
    v108 -= 16;
  }
  while (v108);
  v128 = vorrq_s8(vorrq_s8(vorrq_s8(v111, v106), vorrq_s8(v113, v109)), vorrq_s8(vorrq_s8(v112, v105), vorrq_s8(v114, v110)));
  *(_QWORD *)&a10 = vextq_s8(v128, v128, 8uLL).u64[0];
  v22 = vorr_s8(*(int8x8_t *)v128.i8, *(int8x8_t *)&a10);
  if (v104 != (v104 & 0xFFFFFFFFFFFFFFF0))
    goto LABEL_77;
LABEL_78:
  if ((*(_QWORD *)&v22 & 0xFF80FF80FF80FF80) != 0)
  {
LABEL_62:
    WTF::StringView::utf8((uint64_t)v171, 0, a4, a5, a6, a7, a8, (WTF **)&v170, *(float *)&a10);
    v87 = (WTF *)v170;
    if (v170)
    {
      CC_SHA1_Update(a1, v170 + 4, v170[2]);
      if (*(_DWORD *)v87 == 1)
        WTF::fastFree((unint64_t)v87, v88, v89, v90, v91, v92, v93, v94);
      else
        --*(_DWORD *)v87;
    }
    else
    {
      CC_SHA1_Update(a1, 0, 0);
    }
    return;
  }
LABEL_79:
  if ((a3 & 0xFF00000000) != 0)
  {
    CC_SHA1_Update(a1, (const void *)a2, a3);
    return;
  }
  if ((_DWORD)a3)
  {
    if ((unint64_t)a3 >> 31)
    {
      __break(0xC471u);
      return;
    }
    v130 = WTF::fastCompactMalloc((WTF *)(a3 + 20));
    v131 = (int *)v130;
    v132 = v130 + 20;
    *(_DWORD *)v130 = 2;
    *(_DWORD *)(v130 + 4) = v10;
    *(_QWORD *)(v130 + 8) = v130 + 20;
    *(_DWORD *)(v130 + 16) = 4;
    if (v13 < 0x10)
    {
      v133 = v130 + 20;
      v136 = (char *)(v132 + v13);
      if (v132 == v132 + v13)
        goto LABEL_101;
LABEL_91:
      v137 = v13 + v132;
      v138 = v13 + v132 - v133;
      if (v138 < 8
        || (v133 < (unint64_t)&v11[2 * v138] ? (v139 = (unint64_t)v11 >= v137) : (v139 = 1), !v139))
      {
        v141 = (char *)v133;
        v142 = v11;
        goto LABEL_100;
      }
      if (v138 >= 0x20)
      {
        v140 = v138 & 0xFFFFFFFFFFFFFFE0;
        v159 = (int8x16_t *)(v11 + 32);
        v160 = (int8x16_t *)(v133 + 16);
        v161 = v138 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v163 = v159[-2];
          v162 = v159[-1];
          v165 = *v159;
          v164 = v159[1];
          v159 += 4;
          v160[-1] = vuzp1q_s8(v163, v162);
          *v160 = vuzp1q_s8(v165, v164);
          v160 += 2;
          v161 -= 32;
        }
        while (v161);
        if (v138 == v140)
          goto LABEL_101;
        if ((v138 & 0x18) == 0)
        {
          v142 = &v11[2 * v140];
          v141 = (char *)(v133 + v140);
          do
          {
LABEL_100:
            v143 = *v142;
            v142 += 2;
            *v141++ = v143;
          }
          while (v141 != v136);
          goto LABEL_101;
        }
      }
      else
      {
        v140 = 0;
      }
      v141 = (char *)(v133 + (v138 & 0xFFFFFFFFFFFFFFF8));
      v142 = &v11[2 * (v138 & 0xFFFFFFFFFFFFFFF8)];
      v166 = (int16x8_t *)&v11[2 * v140];
      v167 = (int8x8_t *)(v133 + v140);
      v168 = v140 - (v138 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v169 = *v166++;
        *v167++ = vmovn_s16(v169);
        v168 += 8;
      }
      while (v168);
      if (v138 == (v138 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_101;
      goto LABEL_100;
    }
    v133 = v132 + (v10 & 0xFFFFFFF0);
    v134 = (unsigned __int128 *)(v130 + 20);
    do
    {
      v135 = (unsigned __int128)vld2q_s8(v11);
      v11 += 32;
      *v134++ = v135;
    }
    while (v134 != (unsigned __int128 *)v133);
  }
  else
  {
    v132 = 0;
    v133 = 0;
    v131 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v136 = (char *)(v132 + v13);
  if (v133 != v132 + v13)
    goto LABEL_91;
LABEL_101:
  CC_SHA1_Update(a1, *((const void **)v131 + 1), v131[1]);
  if (*v131 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v131, v144, v145, v146, v147, v148, v149, v150);
    WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
  }
  else
  {
    *v131 -= 2;
  }
}

void WTF::SHA1::addUTF8Bytes(CC_SHA1_CTX *this, CFStringRef theString)
{
  const char *CStringPtr;
  unint64_t Length;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFIndex usedBufLen;
  UInt8 buffer[8];
  uint64_t v32;
  CFRange v33;

  v32 = *MEMORY[0x1E0C80C00];
  CStringPtr = CFStringGetCStringPtr(theString, 0x600u);
  Length = CFStringGetLength(theString);
  v6 = Length;
  if (CStringPtr)
  {
    CC_SHA1_Update(this, CStringPtr, Length);
    return;
  }
  if (Length <= 0x400)
  {
    usedBufLen = 0;
    v33.location = 0;
    v33.length = Length;
    CFStringGetBytes(theString, v33, 0x600u, 0, 0, buffer, 1024, &usedBufLen);
    if (v6 == usedBufLen)
    {
      CC_SHA1_Update(this, buffer, v6);
      return;
    }
  }
  WTF::String::String((WTF::StringImpl **)buffer, theString);
  if (*(_QWORD *)buffer)
  {
    WTF::SHA1::addUTF8Bytes(this, *(_QWORD *)(*(_QWORD *)buffer + 8), *(unsigned int *)(*(_QWORD *)buffer + 4) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)buffer + 16) >> 2) & 1) << 32), v7, v8, v9, v10, v11, v12, v13);
    v21 = *(WTF::StringImpl **)buffer;
    *(_QWORD *)buffer = 0;
    if (!v21)
      return;
  }
  else
  {
    WTF::SHA1::addUTF8Bytes(this, 0, 0x100000000, v7, v8, v9, v10, v11, v12, v13);
    v21 = *(WTF::StringImpl **)buffer;
    *(_QWORD *)buffer = 0;
    if (!v21)
      return;
  }
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
    WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
}

uint64_t WTF::SHA1::hexDigest@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  v4 = WTF::fastMalloc((WTF *)0x39);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 40;
  *a2 = v4;
  *(_BYTE *)(v4 + 56) = 0;
  snprintf((char *)(v4 + 16), 3uLL, "%02X", *a1);
  snprintf((char *)(v4 + 18), 3uLL, "%02X", a1[1]);
  snprintf((char *)(v4 + 20), 3uLL, "%02X", a1[2]);
  snprintf((char *)(v4 + 22), 3uLL, "%02X", a1[3]);
  snprintf((char *)(v4 + 24), 3uLL, "%02X", a1[4]);
  snprintf((char *)(v4 + 26), 3uLL, "%02X", a1[5]);
  snprintf((char *)(v4 + 28), 3uLL, "%02X", a1[6]);
  snprintf((char *)(v4 + 30), 3uLL, "%02X", a1[7]);
  snprintf((char *)(v4 + 32), 3uLL, "%02X", a1[8]);
  snprintf((char *)(v4 + 34), 3uLL, "%02X", a1[9]);
  snprintf((char *)(v4 + 36), 3uLL, "%02X", a1[10]);
  snprintf((char *)(v4 + 38), 3uLL, "%02X", a1[11]);
  snprintf((char *)(v4 + 40), 3uLL, "%02X", a1[12]);
  snprintf((char *)(v4 + 42), 3uLL, "%02X", a1[13]);
  snprintf((char *)(v4 + 44), 3uLL, "%02X", a1[14]);
  snprintf((char *)(v4 + 46), 3uLL, "%02X", a1[15]);
  snprintf((char *)(v4 + 48), 3uLL, "%02X", a1[16]);
  snprintf((char *)(v4 + 50), 3uLL, "%02X", a1[17]);
  snprintf((char *)(v4 + 52), 3uLL, "%02X", a1[18]);
  return snprintf((char *)(v4 + 54), 3uLL, "%02X", a1[19]);
}

uint64_t WTF::SHA1::computeHexDigest@<X0>(CC_SHA1_CTX *c@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 md[20];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  CC_SHA1_Final(md, c);
  return WTF::SHA1::hexDigest(md, a2);
}

uint64_t WTF::SignalHandlers::add(uint64_t result, int a2, uint64_t *a3)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (byte_1ECF4C090)
  {
    __break(0xC471u);
    JUMPOUT(0x197B00D14);
  }
  if (*(_BYTE *)(result + 10) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197B00D34);
  }
  v3 = result + a2;
  v6 = *(unsigned __int8 *)(v3 + 11);
  v4 = (_BYTE *)(v3 + 11);
  v5 = v6;
  v7 = 2;
  switch(a2)
  {
    case 0:
      goto LABEL_8;
    case 1:
      v7 = 8;
      goto LABEL_7;
    case 2:
      v7 = 64;
      goto LABEL_7;
    case 3:
      v7 = 4;
      goto LABEL_7;
    case 4:
LABEL_7:
      *(_DWORD *)(result + 4) |= v7;
LABEL_8:
      if (v5 >= 4)
      {
        __break(0xC471u);
        JUMPOUT(0x197B00D54);
      }
      v8 = result + 32 * a2 + 8 * v5;
      v9 = *a3;
      *a3 = 0;
      *(_QWORD *)(v8 + 24) = v9;
      ++*v4;
      if (byte_1ECF4C090)
      {
        __break(0xC471u);
        JUMPOUT(0x197B00D74);
      }
      return result;
    default:
      __break(0xC471u);
      JUMPOUT(0x197B00D94);
  }
}

uint64_t catch_mach_exception_raise_state(int a1, int a2, uint64_t a3, int a4, _DWORD *a5, void *__src, unsigned int a7, char *__dst, unsigned int *a9)
{
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;

  if (dword_1ECF4C0A0 != a1)
  {
    __break(0xC471u);
    JUMPOUT(0x197B00F2CLL);
  }
  v12 = 3u;
  switch(a2)
  {
    case 1:
      memcpy(__dst, __src, 4 * a7);
      if (*a5 != 1)
        goto LABEL_18;
      v20 = *(_QWORD *)(a3 + 8);
      if (v20 >> 36)
        return 5;
      v14 = 4u;
      v15 = byte_1ECF4C0AB[v14];
      if (!byte_1ECF4C0AB[v14])
        return 5;
      goto LABEL_11;
    case 2:
      goto LABEL_9;
    case 3:
      v12 = 1u;
      goto LABEL_9;
    case 6:
      v12 = 2u;
LABEL_9:
      memcpy(__dst, __src, 4 * a7);
      if (*a5 != 1)
      {
LABEL_18:
        __break(0xC471u);
        JUMPOUT(0x197B00F4CLL);
      }
      v20 = 0;
      v14 = v12;
      v15 = *((unsigned __int8 *)&g_config[21] + v12 + 3);
      if (!*((_BYTE *)&g_config[21] + v12 + 3))
        return 5;
LABEL_11:
      v16 = 0;
      v17 = __dst + 8;
      v18 = v15;
      do
      {
        v16 |= (*(unsigned int (**)(uint64_t, uint64_t, unint64_t *, char *))(*(_QWORD *)g_config[4 * v14 + 22 + v18]
                                                                                            + 16))(g_config[4 * v14 + 22 + v18], v14, &v20, v17) == 0;
        --v18;
      }
      while (v18 * 8);
      if (!v16)
        return 5;
      result = 0;
      *a9 = a7;
      return result;
    default:
      __break(0xC471u);
      JUMPOUT(0x197B00F6CLL);
  }
}

void WTF::registerThreadForMachExceptionHandling(WTF *this, WTF::Thread *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v13;
  WTF::WordLock *v14;
  unint64_t v15;
  WTF::WordLock *v16;
  char v17;
  WTF::WordLock ***v18;
  WTF::WordLock **v19;

  if (!byte_1ECF4C0AA)
  {
    __break(0xC471u);
    JUMPOUT(0x197B01138);
  }
  if (byte_1ECF4C0A8)
    v8 = dword_1ECF4C0A4 == 0;
  else
    v8 = 1;
  if (v8)
    return;
  v10 = atomic_load(&WTF::activeThreads(void)::initializeKey);
  if (v10 != -1)
  {
    v19 = &v16;
    v18 = &v19;
    std::__call_once(&WTF::activeThreads(void)::initializeKey, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::activeThreads(void)::$_0 &&>>);
  }
  v11 = (unint64_t *)(WTF::activeThreads(void)::activeThreads + 16);
  v16 = (WTF::WordLock *)(WTF::activeThreads(void)::activeThreads + 16);
  if (__ldaxr((unint64_t *)(WTF::activeThreads(void)::activeThreads + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1uLL, v11))
  {
    goto LABEL_12;
  }
  WTF::WordLock::lockSlow((WTF::WordLock *)v11);
LABEL_12:
  v13 = atomic_load(&WTF::activeThreads(void)::initializeKey);
  if (v13 != -1)
  {
    v19 = (WTF::WordLock **)&v17;
    v18 = &v19;
    std::__call_once(&WTF::activeThreads(void)::initializeKey, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::activeThreads(void)::$_0 &&>>);
  }
  if (!WTF::Thread::addToThreadGroup((uint64_t)this, (uint64_t)&v16, (_QWORD *)WTF::activeThreads(void)::activeThreads, a4, a5, a6, a7, a8))
  {
    if (byte_1ECF4C0A9)
    {
      if (thread_adopt_exception_handler())
        goto LABEL_26;
    }
    else if (thread_set_exception_ports(*((_DWORD *)this + 13), WTF::activeExceptions & dword_1ECF4C0A4, dword_1ECF4C0A0, -2147483646, 1))
    {
LABEL_26:
      __break(0xC471u);
      JUMPOUT(0x197B010BCLL);
    }
  }
  v14 = v16;
  if (v16)
  {
    v15 = __ldxr((unint64_t *)v16);
    if (v15 == 1)
    {
      if (!__stlxr(0, (unint64_t *)v16))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::WordLock::unlockSlow(v14);
  }
}

void WTF::activateSignalHandlersFor(int a1)
{
  unint64_t v2;
  unint64_t *v3;
  signed int v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *i;
  char v9;
  char **v10;
  char *v11;

  if (!byte_1ECF4C0AA)
  {
    __break(0xC471u);
    JUMPOUT(0x197B0134CLL);
  }
  if (byte_1ECF4C0A8)
  {
    v2 = atomic_load(&WTF::activeThreads(void)::initializeKey);
    if (v2 != -1)
    {
      v11 = &v9;
      v10 = &v11;
      std::__call_once(&WTF::activeThreads(void)::initializeKey, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::activeThreads(void)::$_0 &&>>);
    }
    v3 = (unint64_t *)(WTF::activeThreads(void)::activeThreads + 16);
    if (__ldaxr((unint64_t *)(WTF::activeThreads(void)::activeThreads + 16)))
    {
      __clrex();
    }
    else if (!__stxr(1uLL, v3))
    {
      goto LABEL_9;
    }
    WTF::WordLock::lockSlow((WTF::WordLock *)v3);
LABEL_9:
    v5 = a1 - 1;
    if ((a1 - 1) >= 4)
    {
      __break(0xC471u);
      JUMPOUT(0x197B0136CLL);
    }
    if ((dword_199123160[v5] & WTF::activeExceptions) == 0)
    {
      if (v5 >= 4)
      {
        __break(0xC471u);
        JUMPOUT(0x197B0138CLL);
      }
      WTF::activeExceptions |= dword_199123160[v5];
      v7 = atomic_load(&WTF::activeThreads(void)::initializeKey);
      if (v7 != -1)
      {
        v11 = &v9;
        v10 = &v11;
        std::__call_once(&WTF::activeThreads(void)::initializeKey, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::activeThreads(void)::$_0 &&>>);
      }
      for (i = *(_QWORD **)(WTF::activeThreads(void)::activeThreads + 32); i; i = (_QWORD *)i[2])
      {
        if (byte_1ECF4C0A9)
        {
          if (thread_adopt_exception_handler())
          {
LABEL_29:
            __break(0xC471u);
            JUMPOUT(0x197B0132CLL);
          }
        }
        else if (thread_set_exception_ports(*(_DWORD *)(*i + 52), WTF::activeExceptions & dword_1ECF4C0A4, dword_1ECF4C0A0, -2147483646, 1))
        {
          goto LABEL_29;
        }
      }
    }
    v6 = __ldxr(v3);
    if (v6 == 1)
    {
      if (!__stlxr(0, v3))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::WordLock::unlockSlow((WTF::WordLock *)v3);
  }
}

uint64_t WTF::addSignalHandler(int a1, uint64_t *a2)
{
  return WTF::SignalHandlers::add((uint64_t)&dword_1ECF4C0A0, a1, a2);
}

void WTF::SignalHandlers::finalize(WTF::SignalHandlers *this)
{
  mach_error_t v1;
  mach_error_t v2;
  NSObject *v3;
  NSObject *v4;
  sigset_t v5;
  sigset_t v6;
  sigset_t v7;
  sigset_t v8;
  sigset_t v9;
  int v10;
  sigset_t v11;
  sigaction handler;
  uint64_t (*v13)(uint64_t);
  void *v14;
  NSObject *v15;
  int *v16;
  mach_port_options_t options;

  if (byte_1ECF4C090)
  {
    __break(0xC471u);
    JUMPOUT(0x197B01728);
  }
  if (byte_1ECF4C0AA != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197B01748);
  }
  byte_1ECF4C0AA = 2;
  if (!byte_1ECF4C0A8)
    goto LABEL_77;
  if (byte_1ECF4C090)
  {
    __break(0xC471u);
    JUMPOUT(0x197B01788);
  }
  if (dword_1ECF4C0A0)
  {
    __break(0xC471u);
    JUMPOUT(0x197B017A8);
  }
  if (dword_1ECF4C0A4)
  {
    memset(&options.mpl, 0, 20);
    options.flags = 32784;
    if (mach_port_construct(*MEMORY[0x1E0C83DA0], &options, 0, (mach_port_name_t *)&dword_1ECF4C0A0))
    {
      __break(0xC471u);
      JUMPOUT(0x197B017E8);
    }
    v1 = task_register_hardened_exception_handler();
    if (v1)
    {
      v2 = v1;
      handler.__sigaction_u.__sa_handler = (void (__cdecl *)(int))mach_error_string(v1);
      WTF::dataLog<char [54],char *>((const char **)&handler);
      if (v2 == 53)
      WTF::dataLog<char [16]>("\n");
    }
    else
    {
      byte_1ECF4C0A9 = 1;
    }
    v3 = dispatch_source_create(MEMORY[0x1E0C80D98], dword_1ECF4C0A0, 0, 0);
    if (!v3)
    {
      __break(0xC471u);
      JUMPOUT(0x197B01808);
    }
    v4 = v3;
    handler.__sigaction_u.__sa_handler = (void (__cdecl *)(int))MEMORY[0x1E0C809B0];
    *(_QWORD *)&handler.sa_mask = 0x40000000;
    v13 = ___ZN3WTFL30initMachExceptionHandlerThreadEv_block_invoke;
    v14 = &__block_descriptor_tmp;
    v15 = v3;
    v16 = &dword_1ECF4C0A0;
    dispatch_source_set_event_handler(v3, &handler);
    dispatch_resume(v4);
  }
  if (byte_1ECF4C090)
  {
    __break(0xC471u);
    JUMPOUT(0x197B017C8);
  }
  if (!byte_1ECF4C0A8)
  {
LABEL_77:
    if (!byte_1ECF4C0AB
      || (handler.__sigaction_u.__sa_handler = (void (__cdecl *)(int))WTF::jscSignalHandler,
          handler.sa_mask = -1,
          byte_1ECF4C095)
      && (dword_1ECF4C098 <= 32 ? (v5 = ~(1 << (dword_1ECF4C098 - 1))) : (v5 = -1),
          handler.sa_mask = v5,
          handler.sa_flags = 64,
          !sigaction(31, &handler, &stru_1ECF4C178)))
    {
      if (!byte_1ECF4C0AC
        || (handler.__sigaction_u.__sa_handler = (void (__cdecl *)(int))WTF::jscSignalHandler,
            handler.sa_mask = -1,
            byte_1ECF4C095)
        && (dword_1ECF4C098 <= 32 ? (v6 = ~(1 << (dword_1ECF4C098 - 1))) : (v6 = -1),
            handler.sa_mask = v6,
            handler.sa_flags = 64,
            !sigaction(8, &handler, &stru_1ECF4C188)))
      {
        if (!byte_1ECF4C0AD
          || (handler.__sigaction_u.__sa_handler = (void (__cdecl *)(int))WTF::jscSignalHandler,
              handler.sa_mask = -1,
              byte_1ECF4C095)
          && (dword_1ECF4C098 <= 32 ? (v7 = ~(1 << (dword_1ECF4C098 - 1))) : (v7 = -1),
              handler.sa_mask = v7,
              handler.sa_flags = 64,
              !sigaction(5, &handler, &stru_1ECF4C198)))
        {
          if (!byte_1ECF4C0AE
            || (handler.__sigaction_u.__sa_handler = (void (__cdecl *)(int))WTF::jscSignalHandler,
                handler.sa_mask = -1,
                byte_1ECF4C095)
            && (dword_1ECF4C098 <= 32 ? (v8 = ~(1 << (dword_1ECF4C098 - 1))) : (v8 = -1),
                handler.sa_mask = v8,
                handler.sa_flags = 64,
                !sigaction(4, &handler, &stru_1ECF4C1A8)))
          {
            if (!byte_1ECF4C0AF
              || (handler.__sigaction_u.__sa_handler = (void (__cdecl *)(int))WTF::jscSignalHandler,
                  handler.sa_mask = -1,
                  byte_1ECF4C095)
              && (dword_1ECF4C098 <= 32 ? (v9 = ~(1 << (dword_1ECF4C098 - 1))) : (v9 = -1),
                  handler.sa_mask = v9,
                  handler.sa_flags = 64,
                  v10 = sigaction(11, &handler, &stru_1ECF4C1B8),
                  !(sigaction(10, &handler, &stru_1ECF4C1C8) | v10)))
            {
              if (!byte_1ECF4C0B0)
                goto LABEL_48;
              handler.__sigaction_u.__sa_handler = (void (__cdecl *)(int))WTF::jscSignalHandler;
              handler.sa_mask = -1;
              if (byte_1ECF4C095)
              {
                if (dword_1ECF4C098 <= 32)
                  v11 = ~(1 << (dword_1ECF4C098 - 1));
                else
                  v11 = -1;
                handler.sa_mask = v11;
                handler.sa_flags = 64;
                __break(0xC471u);
                JUMPOUT(0x197B0185CLL);
              }
            }
          }
        }
      }
    }
    __break(0xC471u);
    JUMPOUT(0x197B01708);
  }
LABEL_48:
  if (byte_1ECF4C090)
  {
    __break(0xC471u);
    JUMPOUT(0x197B01768);
  }
}

uint64_t WTF::jscSignalHandler(uint64_t this, uint64_t a2, __siginfo *a3, void *a4)
{
  uint64_t v4;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int16 *v14;
  int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t (*v18)(uint64_t, uint64_t, __siginfo *, void *);
  __int16 v19;
  uint64_t v20;
  int v21;
  sigaction v22;

  v4 = this;
  v21 = this;
  v7 = 1u;
  switch((int)this)
  {
    case 4:
      v7 = 3u;
      goto LABEL_7;
    case 5:
      v7 = 2u;
      goto LABEL_7;
    case 8:
      goto LABEL_7;
    case 10:
    case 11:
      v8 = *(_QWORD *)(a2 + 24);
      v7 = 4u;
      goto LABEL_8;
    case 31:
      v7 = 0u;
LABEL_7:
      v8 = 0;
LABEL_8:
      v20 = v8;
      v9 = a3->__pad[0];
      v19 = 0;
      v10 = v7;
      v11 = *((unsigned __int8 *)&g_config[21] + v7 + 3);
      if (!v11)
        goto LABEL_19;
      v12 = v9 + 16;
      v13 = v11;
      break;
    default:
      WTF::dataLog<char [45],int,char [8],char [2]>(&v21);
      goto LABEL_17;
  }
  do
  {
    this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, unint64_t))(*(_QWORD *)g_config[4 * v10 + 22 + v13]
                                                                                    + 16))(g_config[4 * v10 + 22 + v13], v10, &v20, v12);
    if (!(_DWORD)this)
    {
      v14 = (__int16 *)((char *)&v19 + 1);
LABEL_11:
      *(_BYTE *)v14 = 1;
      goto LABEL_12;
    }
    if ((_DWORD)this == 2)
    {
      v14 = &v19;
      goto LABEL_11;
    }
LABEL_12:
    --v13;
  }
  while (v13 * 8);
  if ((_BYTE)v19)
  {
LABEL_17:
    v22.__sigaction_u.__sa_handler = 0;
    *(_QWORD *)&v22.sa_mask = 0xFFFFFFFFLL;
    this = sigaction(v4, &v22, 0);
    if ((_DWORD)this == -1)
    {
      v15 = __error();
      return WTF::dataLog<char [63],int,char [46],int,char [2],char [2]>(&v21, v15);
    }
  }
  else
  {
LABEL_19:
    if ((_DWORD)v4 == 10)
      v16 = v10 + 1;
    else
      v16 = v10;
    v17 = &g_config[2 * v16 + 47];
    if ((_DWORD)v10)
    {
      if (HIBYTE(v19))
        return this;
      v18 = (uint64_t (*)(uint64_t, uint64_t, __siginfo *, void *))*v17;
      if (!v18)
        goto LABEL_17;
    }
    else
    {
      v18 = (uint64_t (*)(uint64_t, uint64_t, __siginfo *, void *))*v17;
      if (!v18)
        return this;
    }
    return v18(v4, a2, a3, a4);
  }
  return this;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::activeThreads(void)::$_0 &&>>()
{
  uint64_t v0;
  std::__shared_weak_count *v1;
  unint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;

  v0 = WTF::fastMalloc((WTF *)0x48);
  v1 = (std::__shared_weak_count *)v0;
  *(_QWORD *)(v0 + 8) = 0;
  v2 = (unint64_t *)(v0 + 8);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)v0 = &off_1E3572178;
  v3 = v0 + 24;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  do
    v4 = __ldxr(v2);
  while (__stxr(v4 + 1, v2));
  v5 = (unint64_t *)(v0 + 16);
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  *(_QWORD *)(v0 + 24) = v0 + 24;
  *(_QWORD *)(v0 + 32) = v0;
  do
    v7 = __ldaxr(v2);
  while (__stlxr(v7 - 1, v2));
  if (!v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
    std::__shared_weak_count::__release_weak(v1);
  }
  WTF::activeThreads(void)::activeThreads = v3;
  WTF::activeThreads(void)::activeThreads = (uint64_t)v1;
}

void std::__shared_ptr_emplace<WTF::ThreadGroup,WTF::FastAllocator<WTF::ThreadGroup>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3572178;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<WTF::ThreadGroup,WTF::FastAllocator<WTF::ThreadGroup>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3572178;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19AEBAEF0);
}

void std::__shared_ptr_emplace<WTF::ThreadGroup,WTF::FastAllocator<WTF::ThreadGroup>>::__on_zero_shared(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::ThreadGroup::~ThreadGroup((WTF::ThreadGroup *)(a1 + 24), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::dataLog<char [54],char *>(const char **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Failed to register hardened exception handler due to ");
  WTF::PrintStream::printf(v4, "%s", *a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t ___ZN3WTFL30initMachExceptionHandlerThreadEv_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = mach_msg_server_once((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x400u, **(_DWORD **)(a1 + 40), 0);
  if ((_DWORD)result)
  {
    result = 189;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::dataLog<char [45],int,char [8],char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "We somehow got called for an unknown signal ");
  WTF::PrintStream::printf(v4, "%d", *a1);
  WTF::PrintStream::printf(v4, "%s", ", help.");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [63],int,char [46],int,char [2],char [2]>(_DWORD *a1, _DWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "Unable to restore the default handler while processing signal ");
  WTF::PrintStream::printf(v6, "%d", *a1);
  WTF::PrintStream::printf(v6, "%s", " the process is probably deadlocked. (errno: ");
  WTF::PrintStream::printf(v6, "%d", *a2);
  WTF::PrintStream::printf(v6, "%s", ")");
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [88],char [2]>(const char *a1, const char *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", a1);
  WTF::PrintStream::printf(v6, "%s", a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::sixCharacterHashStringToInteger(unsigned __int8 *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;

  v1 = *a1;
  if (!*a1)
    goto LABEL_34;
  v2 = v1 - 65;
  v3 = v1 - 97;
  v4 = (char)v1 + 4;
  v5 = v1 - 71;
  if (v3 > 0x19)
    v5 = v4;
  if (v2 <= 0x19)
    v5 = v2;
  v6 = (char)a1[1];
  if (!a1[1])
    goto LABEL_34;
  v7 = v6 - 65;
  v8 = v6 + 4;
  if (a1[1] - 97 < 0x1A)
    v8 = a1[1] - 71;
  if (v7 < 0x1A)
    v8 = a1[1] - 65;
  v9 = (char)a1[2];
  if (!a1[2])
    goto LABEL_34;
  v10 = v9 - 65;
  v11 = v9 + 4;
  if (a1[2] - 97 < 0x1A)
    v11 = a1[2] - 71;
  if (v10 < 0x1A)
    v11 = a1[2] - 65;
  v12 = (char)a1[3];
  if (!a1[3])
    goto LABEL_34;
  v13 = v12 - 65;
  v14 = v12 + 4;
  if (a1[3] - 97 < 0x1A)
    v14 = a1[3] - 71;
  if (v13 < 0x1A)
    v14 = a1[3] - 65;
  v15 = (char)a1[4];
  if (a1[4]
    && ((v16 = a1[4], (v15 - 65) >= 0x1A)
      ? ((v16 - 97) >= 0x1A
       ? (v17 = v15 + 4)
       : (v17 = v16 - 71))
      : (v17 = v16 - 65),
        v18 = (char)a1[5],
        a1[5]))
  {
    v19 = a1[5];
    if ((v18 - 65) >= 0x1A)
    {
      if ((v19 - 97) >= 0x1A)
        v20 = v18 + 4;
      else
        v20 = v19 - 71;
    }
    else
    {
      v20 = v19 - 65;
    }
    return v20 + 62 * (v17 + 62 * (v14 + 62 * (v11 + 62 * (v8 + 62 * v5))));
  }
  else
  {
LABEL_34:
    result = 39;
    __break(0xC471u);
  }
  return result;
}

unint64_t WTF::integerToSixCharacterHashString(WTF *this)
{
  return ((unint64_t)WTF::integerToSixCharacterHashString::table[this % 0x3E] << 40) | ((unint64_t)WTF::integerToSixCharacterHashString::table[this / 0x3E - 62 * (((138547333 * (unint64_t)(this / 0x3E)) >> 32) >> 1)] << 32) | ((unint64_t)WTF::integerToSixCharacterHashString::table[(this / 0xF04 - 62 * ((69273667 * (unint64_t)(this / 0xF04)) >> 32))] << 24) | ((unint64_t)WTF::integerToSixCharacterHashString::table[(unsigned __int16)(this / 0x3A2F8 - 62 * ((unsigned __int16)((16913 * (this / 0x3A2F8)) >> 16) >> 4))] << 16) | ((unint64_t)WTF::integerToSixCharacterHashString::table[(unsigned __int16)(this / 0xE17810 - 62 * ((1058 * (this / 0xE17810)) >> 16))] << 8) | WTF::integerToSixCharacterHashString::table[this / 0x369B13E0uLL];
}

void *WTF::StackBounds::currentThreadStackBoundsInternal(WTF::StackBounds *this)
{
  int v1;
  _opaque_pthread_t *v2;
  void *stackaddr_np;
  rlimit v5;

  v1 = pthread_main_np();
  v2 = pthread_self();
  stackaddr_np = pthread_get_stackaddr_np(v2);
  if (v1)
    getrlimit(3, &v5);
  else
    pthread_get_stacksize_np(v2);
  return stackaddr_np;
}

uint64_t WTFGetBacktrace(void **a1, int *a2)
{
  uint64_t result;

  result = backtrace(a1, *a2);
  *a2 = result;
  return result;
}

uint64_t WTF::StackTrace::captureStackTrace@<X0>(WTF::StackTrace *this@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if ((unint64_t)this <= 1)
    v5 = 1;
  else
    v5 = (uint64_t)this;
  v6 = a2 + 2;
  v7 = a2 + 2 + v5;
  v8 = WTF::fastMalloc((WTF *)(8 * v7));
  v12 = v7;
  result = WTFGetBacktrace((void **)v8, &v12);
  v10 = v12 - v6;
  if (v12 < v6)
    v10 = 0;
  if (v6 >= v12)
    v11 = 0;
  else
    v11 = a2;
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v11;
  *a3 = v8;
  return result;
}

void WTF::StackTrace::toString(WTF::StackTrace *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  _QWORD v13[3];
  void (**v14)(WTF::StringPrintStream *__hidden);
  WTF *v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)this;
  v4 = (char *)this + 8 * *((_QWORD *)this + 1);
  v14 = off_1E3572250;
  v15 = (WTF *)v17;
  v16 = xmmword_199122F80;
  v17[0] = 0;
  v13[0] = v4 + 16;
  v13[1] = v3;
  v13[2] = &str_23;
  WTF::StackTracePrinter::dump((WTF::StackTracePrinter *)v13, (WTF::PrintStream *)&v14);
  v12 = v15;
  if (!v15)
  {
    *a2 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v15, v16, a2);
  v12 = v15;
  if (v15 != (WTF *)v17)
LABEL_5:
    WTF::fastFree((unint64_t)v12, v5, v6, v7, v8, v9, v10, v11);
}

char *WTF::StackTraceSymbolResolver::demangle@<X0>(WTF::StackTraceSymbolResolver *this@<X0>, uint64_t a2@<X8>)
{
  char *result;
  const char *dli_sname;
  int status;
  Dl_info v7;

  result = (char *)dladdr(this, &v7);
  if ((_DWORD)result && (dli_sname = v7.dli_sname) != 0)
  {
    status = 0;
    result = __cxa_demangle(v7.dli_sname, 0, 0, &status);
    *(_QWORD *)a2 = dli_sname;
    *(_QWORD *)(a2 + 8) = result;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return result;
}

void WTF::StackTracePrinter::dump(WTF::StackTracePrinter *this, WTF::PrintStream *a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char **v8;
  uint64_t v9;
  int v10;
  const char *dli_sname;
  BOOL v12;
  int v13;
  char *v14;
  uint64_t v15;
  const char *v16;
  int status;
  Dl_info v18;

  v5 = *(_QWORD *)this;
  v6 = *((_QWORD *)this + 1);
  v7 = backtrace_symbols(*(void *const **)this, v6);
  if (v7)
  {
    v8 = v7;
    if (v6)
    {
      v9 = 0;
      do
      {
        v10 = dladdr(*(const void **)(v5 + 8 * v9), &v18);
        dli_sname = v18.dli_sname;
        if (v10)
          v12 = v18.dli_sname == 0;
        else
          v12 = 1;
        if (v12)
        {
          v13 = 0;
        }
        else
        {
          status = 0;
          v14 = __cxa_demangle(v18.dli_sname, 0, 0, &status);
          v2 = v14;
          if (v14)
            dli_sname = v14;
          v13 = 1;
          if (strcmp(dli_sname, "<redacted>"))
            goto LABEL_15;
        }
        dli_sname = v8[v9];
LABEL_15:
        v15 = v9 + 1;
        v16 = (const char *)*((_QWORD *)this + 2);
        if (!v16)
          v16 = (const char *)&str_23;
        WTF::PrintStream::printf(a2, "%s%-3d %p %s\n", v16, v9 + 1, *(const void **)(v5 + 8 * v9), dli_sname);
        if (v13)
        {
          if (v2)
          {
            free(v2);
            v2 = 0;
          }
        }
        ++v9;
      }
      while (v6 != v15);
    }
    free(v8);
  }
}

void WTF::StringBuilder::reifyString(WTF::StringBuilder *this)
{
  size_t v1;
  uint64_t v3;
  _WORD *v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  _BYTE *v19;
  const void *v20;
  size_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *((unsigned int *)this + 4);
  if ((v1 & 0x80000000) != 0)
  {
    __break(0xC471u);
    return;
  }
  if (!*(_QWORD *)this)
  {
    if (!(_DWORD)v1)
    {
      WTF::StringImpl::s_emptyAtomString += 2;
      *(_QWORD *)this = &WTF::StringImpl::s_emptyAtomString;
      return;
    }
    v3 = *((_QWORD *)this + 1);
    if ((_DWORD)v1 == *(_DWORD *)(v3 + 4))
    {
      *(_DWORD *)v3 += 2;
      *(_QWORD *)this = v3;
      return;
    }
    if ((*(_DWORD *)(v3 + 16) & 4) != 0)
    {
      if (v1 <= 0xC)
      {
        v19 = *(_BYTE **)(v3 + 8);
        v12 = WTF::fastCompactMalloc((WTF *)(v1 + 20));
        v13 = (_BYTE *)(v12 + 20);
        *(_DWORD *)v12 = 2;
        *(_DWORD *)(v12 + 4) = v1;
        *(_QWORD *)(v12 + 8) = v12 + 20;
        *(_DWORD *)(v12 + 16) = 4;
        if ((_DWORD)v1 == 1)
        {
          *v13 = *v19;
          goto LABEL_23;
        }
        v20 = v19;
        v21 = v1;
LABEL_22:
        memcpy(v13, v20, v21);
LABEL_23:
        v22 = *(WTF::StringImpl **)this;
        *(_QWORD *)this = v12;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
          {
            WTF::StringImpl::~StringImpl(v22, v5, v6, v7, v8, v9, v10, v11);
            WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
          }
          else
          {
            *(_DWORD *)v22 -= 2;
          }
        }
        return;
      }
    }
    else if (v1 <= 6)
    {
      v4 = *(_WORD **)(v3 + 8);
      v12 = WTF::fastCompactMalloc((WTF *)(2 * v1 + 20));
      v13 = (_BYTE *)(v12 + 20);
      *(_DWORD *)v12 = 2;
      *(_DWORD *)(v12 + 4) = v1;
      *(_QWORD *)(v12 + 8) = v12 + 20;
      *(_DWORD *)(v12 + 16) = 0;
      if ((_DWORD)v1 == 1)
      {
        *(_WORD *)v13 = *v4;
        goto LABEL_23;
      }
      v20 = v4;
      v21 = 2 * v1;
      goto LABEL_22;
    }
    v14 = (_DWORD *)*((_QWORD *)this + 1);
    if ((*(_DWORD *)(v3 + 16) & 3) == 2)
      v14 = *(_DWORD **)(v3 + 24);
    v15 = WTF::fastCompactMalloc((WTF *)0x20);
    v12 = v15;
    v16 = *(_DWORD *)(v3 + 16);
    v17 = *(_QWORD *)(v3 + 8);
    *v14 += 2;
    v18 = 2;
    *(_DWORD *)v15 = 2;
    *(_DWORD *)(v15 + 4) = v1;
    *(_QWORD *)(v15 + 8) = v17;
    if ((v16 & 4) != 0)
      v18 = 6;
    *(_DWORD *)(v15 + 16) = v18;
    *(_QWORD *)(v15 + 24) = v14;
    goto LABEL_23;
  }
}

void WTF::StringBuilder::shrink(WTF::StringBuilder *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  int *v24;
  int v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;

  v8 = *((_DWORD *)this + 4);
  if ((v8 & 0x80000000) != 0)
    return;
  if (v8 > a2)
  {
    *((_DWORD *)this + 4) = (_DWORD)a2;
    if (*((_QWORD *)this + 1))
    {
      v11 = *(WTF::StringImpl **)this;
      *(_QWORD *)this = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
        {
          WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          v12 = *((_QWORD *)this + 1);
          if (*(_DWORD *)v12 == 2)
            return;
          goto LABEL_17;
        }
        *(_DWORD *)v11 -= 2;
      }
      v12 = *((_QWORD *)this + 1);
      if (*(_DWORD *)v12 == 2)
        return;
LABEL_17:
      v22 = *(_BYTE **)(v12 + 8);
      if ((*(_BYTE *)(v12 + 16) & 4) != 0)
        WTF::StringBuilder::allocateBuffer<unsigned char,unsigned char>((uint64_t)this, v22, a2, a4, a5, a6, a7, a8);
      else
        WTF::StringBuilder::allocateBuffer<char16_t,char16_t>((uint64_t)this, v22, (uint64_t)a2, a4, a5, a6, a7, a8);
      return;
    }
    if ((_DWORD)a2)
    {
      v13 = *(_QWORD *)this;
      if ((*(_DWORD *)(*(_QWORD *)this + 16) & 4) == 0)
      {
        if (a2 <= 6)
        {
          WTF::StringImpl::create(*(_WORD **)(v13 + 8), a2, (uint64_t *)&v37);
          goto LABEL_28;
        }
LABEL_22:
        v23 = *(_DWORD **)this;
        if ((*(_DWORD *)(*(_QWORD *)this + 16) & 3) == 2)
          v23 = *(_DWORD **)(v13 + 24);
        v24 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
        v25 = *(_DWORD *)(v13 + 16);
        v26 = *(_QWORD *)(v13 + 8);
        *v23 += 2;
        v27 = 2;
        *v24 = 2;
        v24[1] = (int)a2;
        *((_QWORD *)v24 + 1) = v26;
        if ((v25 & 4) != 0)
          v27 = 6;
        v24[4] = v27;
        *((_QWORD *)v24 + 3) = v23;
        v37 = v24;
        goto LABEL_28;
      }
      if (a2 > 0xC)
        goto LABEL_22;
      WTF::StringImpl::create(*(_BYTE **)(v13 + 8), a2, (uint64_t *)&v37);
    }
    else
    {
      WTF::StringImpl::s_emptyAtomString += 2;
      v37 = &WTF::StringImpl::s_emptyAtomString;
    }
LABEL_28:
    v28 = *(WTF::StringImpl **)this;
    *(_QWORD *)this = v37;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    return;
  }
  if (v8 < a2)
  {
    if (*((_BYTE *)this + 20))
      __break(0xC471u);
    else
      *((_DWORD *)this + 4) = -1;
  }
}

void WTF::StringBuilder::allocateBuffer<unsigned char,unsigned char>(uint64_t a1, _BYTE *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v11;
  _BYTE *v12;
  size_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;

  if (!a3)
  {
    v12 = 0;
    v11 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    v13 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v13)
      goto LABEL_13;
LABEL_10:
    if ((_DWORD)v13 == 1)
      *v12 = *a2;
    else
      memcpy(v12, a2, v13);
LABEL_13:
    v14 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v11;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::~StringImpl(v14, (WTF::AtomStringImpl *)a2, v13, a4, a5, a6, a7, a8);
        WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
        v15 = *(WTF::StringImpl **)a1;
        *(_QWORD *)a1 = 0;
        if (!v15)
          return;
LABEL_19:
        if (*(_DWORD *)v15 == 2)
        {
          WTF::StringImpl::~StringImpl(v15, (WTF::AtomStringImpl *)a2, v13, a4, a5, a6, a7, a8);
          WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
        }
        else
        {
          *(_DWORD *)v15 -= 2;
        }
        return;
      }
      *(_DWORD *)v14 -= 2;
    }
    v15 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (!v15)
      return;
    goto LABEL_19;
  }
  if ((a3 & 0x80000000) == 0)
  {
    WTF::tryFastCompactMalloc((WTF *)(a3 + 20), &v32);
    v11 = v32;
    if (v32)
    {
      v12 = v32 + 5;
      *v32 = 2;
      v11[1] = a3;
      *((_QWORD *)v11 + 1) = v11 + 5;
      v11[4] = 4;
      v13 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v13)
        goto LABEL_13;
      goto LABEL_10;
    }
  }
  if (*(_BYTE *)(a1 + 20))
    __break(0xC471u);
  else
    *(_DWORD *)(a1 + 16) = -1;
}

void WTF::StringBuilder::allocateBuffer<char16_t,char16_t>(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int *v11;
  _WORD *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;

  if (!(_DWORD)a3)
  {
    v12 = 0;
    v11 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    v13 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v13)
      goto LABEL_13;
LABEL_10:
    if ((_DWORD)v13 == 1)
      *v12 = *a2;
    else
      memcpy(v12, a2, 2 * v13);
LABEL_13:
    v14 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v11;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::~StringImpl(v14, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
        v15 = *(WTF::StringImpl **)a1;
        *(_QWORD *)a1 = 0;
        if (!v15)
          return;
LABEL_19:
        if (*(_DWORD *)v15 == 2)
        {
          WTF::StringImpl::~StringImpl(v15, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
        }
        else
        {
          *(_DWORD *)v15 -= 2;
        }
        return;
      }
      *(_DWORD *)v14 -= 2;
    }
    v15 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (!v15)
      return;
    goto LABEL_19;
  }
  v10 = a3;
  if (a3 <= 0x7FFFFFEF)
  {
    WTF::tryFastCompactMalloc((WTF *)(2 * a3 + 20), &v32);
    v11 = v32;
    if (v32)
    {
      v12 = v32 + 5;
      *v32 = 2;
      v11[1] = v10;
      *((_QWORD *)v11 + 1) = v11 + 5;
      v11[4] = 0;
      v13 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v13)
        goto LABEL_13;
      goto LABEL_10;
    }
  }
  if (*(_BYTE *)(a1 + 20))
    __break(0xC471u);
  else
    *(_DWORD *)(a1 + 16) = -1;
}

void WTF::StringBuilder::reallocateBuffer<unsigned char>(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  _BYTE *v30;
  int v31;
  int v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  WTF::StringImpl *v42;
  unsigned int v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  int v53;
  char v54;

  v8 = a2;
  v10 = *(WTF::StringImpl **)(a1 + 8);
  if (!v10)
    goto LABEL_11;
  v11 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (!v11)
    goto LABEL_5;
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
LABEL_5:
    if (*(_DWORD *)v10 == 2)
      goto LABEL_6;
    goto LABEL_11;
  }
  WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
  v10 = *(WTF::StringImpl **)(a1 + 8);
  if (*(_DWORD *)v10 == 2)
  {
LABEL_6:
    *(_QWORD *)(a1 + 8) = 0;
    if (v8)
    {
      if ((v8 & 0x80000000) == 0)
      {
        WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
        WTF::tryFastCompactRealloc(v12, v8 + 20, v13, v14, v15, v16, v17, v18, &v52);
        v19 = v52;
        if (v52)
        {
          v20 = 0;
          *v52 = 2;
          v19[1] = v8;
          *((_QWORD *)v19 + 1) = v19 + 5;
          v19[4] = 4;
          v52 = v19;
          v53 = 0;
        }
        else
        {
          LOBYTE(v52) = 0;
          v20 = 1;
          v53 = 1;
        }
LABEL_23:
        if (v20)
        {
          if (*(_BYTE *)(a1 + 20))
          {
            __break(0xC471u);
            return;
          }
          *(_DWORD *)(a1 + 16) = -1;
          v43 = 1;
LABEL_28:
          ((void (*)(char *, int **))*(&off_1E35721C0 + v43))(&v54, &v52);
          return;
        }
LABEL_24:
        v41 = v52;
        v52 = 0;
        v42 = *(WTF::StringImpl **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v41;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
          {
            WTF::StringImpl::~StringImpl(v42, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
            v43 = v53;
            if (v53 == -1)
              return;
          }
          else
          {
            v43 = 0;
            *(_DWORD *)v42 -= 2;
          }
        }
        else
        {
          v43 = 0;
        }
        goto LABEL_28;
      }
      LOBYTE(v52) = 0;
      v20 = 1;
      v53 = 1;
    }
    else
    {
      WTF::StringImpl::s_emptyAtomString += 2;
      v52 = &WTF::StringImpl::s_emptyAtomString;
      v31 = *(_DWORD *)v10;
      v53 = 0;
      v32 = v31 - 2;
      if (v32)
      {
        *(_DWORD *)v10 = v32;
        goto LABEL_24;
      }
      v20 = 0;
    }
    WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    goto LABEL_23;
  }
LABEL_11:
  if (*(_DWORD *)(a1 + 16))
  {
    v29 = *(WTF::StringImpl **)a1;
    if (!*(_QWORD *)a1)
      v29 = v10;
    v30 = (_BYTE *)*((_QWORD *)v29 + 1);
  }
  else
  {
    v30 = 0;
  }
  WTF::StringBuilder::allocateBuffer<unsigned char,unsigned char>(a1, v30, v8, a4, a5, a6, a7, a8);
}

void WTF::StringBuilder::reallocateBuffer<char16_t>(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _WORD *v29;
  int v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  WTF::StringImpl *v49;
  unsigned int v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  int v60;
  char v61;

  v10 = *(WTF::StringImpl **)(a1 + 8);
  if (!v10)
    goto LABEL_10;
  v11 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (!v11)
    goto LABEL_5;
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
LABEL_5:
    if (*(_DWORD *)v10 == 2)
      goto LABEL_6;
    goto LABEL_10;
  }
  WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
  v10 = *(WTF::StringImpl **)(a1 + 8);
  if (*(_DWORD *)v10 == 2)
  {
LABEL_6:
    *(_QWORD *)(a1 + 8) = 0;
    if ((_DWORD)a2)
    {
      if (a2 >= 0x7FFFFFF0)
      {
        LOBYTE(v59) = 0;
        v60 = 1;
        WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_28:
        if (*(_BYTE *)(a1 + 20))
        {
          __break(0xC471u);
          return;
        }
        *(_DWORD *)(a1 + 16) = -1;
        v50 = 1;
LABEL_25:
        ((void (*)(char *, int **))*(&off_1E35721C0 + v50))(&v61, &v59);
        return;
      }
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::tryFastCompactRealloc(v32, 2 * a2 + 20, v33, v34, v35, v36, v37, v38, &v59);
      v39 = v59;
      if (!v59)
      {
        LOBYTE(v59) = 0;
        v60 = 1;
        goto LABEL_28;
      }
      *v59 = 2;
      v39[1] = (int)a2;
      *((_QWORD *)v39 + 1) = v39 + 5;
      v39[4] = 0;
      v59 = v39;
      v60 = 0;
    }
    else
    {
      WTF::StringImpl::s_emptyAtomString += 2;
      v59 = &WTF::StringImpl::s_emptyAtomString;
      v30 = *(_DWORD *)v10;
      v60 = 0;
      v31 = v30 - 2;
      if (v31)
      {
        *(_DWORD *)v10 = v31;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
      }
    }
    v48 = v59;
    v59 = 0;
    v49 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v48;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
        v50 = v60;
        if (v60 == -1)
          return;
      }
      else
      {
        v50 = 0;
        *(_DWORD *)v49 -= 2;
      }
    }
    else
    {
      v50 = 0;
    }
    goto LABEL_25;
  }
LABEL_10:
  if (*(_DWORD *)(a1 + 16))
  {
    v28 = *(WTF::StringImpl **)a1;
    if (!*(_QWORD *)a1)
      v28 = v10;
    v29 = (_WORD *)*((_QWORD *)v28 + 1);
  }
  else
  {
    v29 = 0;
  }
  WTF::StringBuilder::allocateBuffer<char16_t,char16_t>(a1, v29, (uint64_t)a2, a4, a5, a6, a7, a8);
}

void WTF::StringBuilder::reserveCapacity(WTF::StringBuilder *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;

  v8 = *((_DWORD *)this + 4);
  if ((v8 & 0x80000000) == 0)
  {
    v10 = *((_QWORD *)this + 1);
    if (v10)
    {
      if (*(_DWORD *)(v10 + 4) < a2)
      {
        if ((*(_BYTE *)(v10 + 16) & 4) != 0)
          WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)this, a2, (uint64_t)a2, a4, a5, a6, a7, a8);
        else
          WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)this, a2, (uint64_t)a2, a4, a5, a6, a7, a8);
      }
    }
    else if (v8 < a2)
    {
      if (v8)
      {
        v11 = *(_QWORD *)this;
        if (*(_QWORD *)this)
        {
          v12 = *(_WORD **)(v11 + 8);
          if ((*(_BYTE *)(v11 + 16) & 4) == 0)
          {
            WTF::StringBuilder::allocateBuffer<char16_t,char16_t>((uint64_t)this, v12, (uint64_t)a2, a4, a5, a6, a7, a8);
            return;
          }
        }
        else
        {
          v12 = 0;
        }
      }
      else
      {
        v12 = 0;
      }
      WTF::StringBuilder::allocateBuffer<unsigned char,unsigned char>((uint64_t)this, v12, a2, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t WTF::StringBuilder::extendBufferForAppending<unsigned char>(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  WTF::StringImpl *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = a2;
  v10 = *(WTF::StringImpl **)(a1 + 8);
  if (v10)
  {
    v11 = *((_DWORD *)v10 + 1);
    if (v11 >= a2)
    {
      v15 = *(WTF::StringImpl **)a1;
      *(_QWORD *)a1 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
        {
          WTF::StringImpl::~StringImpl(v15, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
          v10 = *(WTF::StringImpl **)(a1 + 8);
        }
        else
        {
          *(_DWORD *)v15 -= 2;
        }
      }
      v16 = *(_DWORD *)(a1 + 16);
      v12 = (unsigned int *)(a1 + 16);
      goto LABEL_27;
    }
    v12 = (unsigned int *)(a1 + 16);
    if ((*(_DWORD *)(a1 + 16) & 0x80000000) != 0)
      return 0;
  }
  else
  {
    if (!(_DWORD)a2)
      return 0;
    v12 = (unsigned int *)(a1 + 16);
    v11 = *(_DWORD *)(a1 + 16);
    if ((v11 & 0x80000000) != 0)
      return 0;
  }
  v13 = 2 * v11;
  if (v13 >= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  if (v13 <= a2)
    v13 = a2;
  if (v13 <= 0x10)
    v14 = 16;
  else
    v14 = v13;
  if ((v10 || (v10 = *(WTF::StringImpl **)a1) != 0) && (*((_BYTE *)v10 + 16) & 4) == 0)
    WTF::StringBuilder::reallocateBuffer<char16_t>(a1, (WTF::AtomStringImpl *)v14, a3, a4, a5, a6, a7, a8);
  else
    WTF::StringBuilder::reallocateBuffer<unsigned char>(a1, (WTF::AtomStringImpl *)v14, a3, a4, a5, a6, a7, a8);
  v16 = *v12;
  if ((*v12 & 0x80000000) != 0)
    return 0;
  v10 = *(WTF::StringImpl **)(a1 + 8);
LABEL_27:
  v26 = *((_QWORD *)v10 + 1);
  *v12 = v8;
  return v26 + v16;
}

uint64_t WTF::StringBuilder::extendBufferForAppendingWithUpconvert(WTF::StringBuilder *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = a2;
  v10 = *((_QWORD *)this + 1);
  v11 = v10;
  if (v10 || (v11 = *(_QWORD *)this) != 0)
  {
    if ((*(_BYTE *)(v11 + 16) & 4) == 0)
      return WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)this, a2, a3, a4, a5, a6, a7, a8);
    v13 = *((_DWORD *)this + 4);
    if (v13)
    {
      v14 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
        v14 = *((_QWORD *)this + 1);
      v15 = *(WTF::AtomStringImpl **)(v14 + 8);
      if (!v10)
        goto LABEL_14;
    }
    else
    {
      v15 = 0;
      if (!v10)
      {
        v13 = 0;
        goto LABEL_18;
      }
    }
    v13 = *(_DWORD *)(v10 + 4);
  }
  else
  {
    v13 = *((_DWORD *)this + 4);
    if (v13)
    {
      v15 = (WTF::AtomStringImpl *)MEMORY[8];
LABEL_14:
      if (v13 < 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197B031ACLL);
      }
      goto LABEL_18;
    }
    v15 = 0;
  }
LABEL_18:
  v16 = 2 * v13;
  if (v16 >= 0x7FFFFFFF)
    v16 = 0x7FFFFFFF;
  if (v16 <= v8)
    v16 = v8;
  if (v16 <= 0x10)
    v17 = 16;
  else
    v17 = v16;
  WTF::StringBuilder::allocateBuffer<char16_t,unsigned char>((uint64_t)this, v15, v17, a4, a5, a6, a7, a8);
  v18 = *((unsigned int *)this + 4);
  if ((v18 & 0x80000000) != 0)
    return 0;
  v19 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  *((_DWORD *)this + 4) = v8;
  return v19 + 2 * v18;
}

void WTF::StringBuilder::allocateBuffer<char16_t,unsigned char>(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v10;
  int *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  char *v17;
  int8x16_t v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  _WORD *v28;
  unsigned __int8 *v29;
  __int16 v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint8x8_t *v49;
  uint16x8_t *v50;
  unint64_t v51;
  uint8x16_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint8x8_t *v55;
  uint16x8_t *v56;
  unint64_t v57;
  uint8x8_t v58;
  int *v59;
  int8x16x2_t v60;
  int8x16x2_t v61;
  int8x16x2_t v62;

  v8 = (unint64_t)a2;
  if (!(_DWORD)a3)
  {
    v12 = 0;
    v11 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    v13 = *(unsigned int *)(a1 + 16);
    v14 = 2 * v13;
    if (v13 < 0x40)
      goto LABEL_5;
    goto LABEL_10;
  }
  v10 = a3;
  if (a3 <= 0x7FFFFFEF)
  {
    WTF::tryFastCompactMalloc((WTF *)(2 * a3 + 20), &v59);
    v11 = v59;
    if (v59)
    {
      v12 = (char *)(v59 + 5);
      *v59 = 2;
      v11[1] = v10;
      *((_QWORD *)v11 + 1) = v11 + 5;
      v11[4] = 0;
      v13 = *(unsigned int *)(a1 + 16);
      v14 = (uint64_t)v11 + 2 * v13 + 20;
      if (v13 < 0x40)
      {
LABEL_5:
        v15 = (unint64_t)v12;
        goto LABEL_12;
      }
LABEL_10:
      v15 = (unint64_t)&v12[2 * (v13 & 0xFFFFFFC0)];
      v16 = 0uLL;
      v17 = v12;
      do
      {
        v60.val[0] = *(int8x16_t *)v8;
        v18 = *(int8x16_t *)(v8 + 16);
        v61.val[0] = *(int8x16_t *)(v8 + 32);
        v19 = *(_OWORD *)(v8 + 48);
        v8 += 64;
        v20 = v19;
        v61.val[1] = 0uLL;
        v62.val[0] = v18;
        v60.val[1] = 0uLL;
        v21 = v17;
        vst2q_s8(v21, v60);
        v21 += 32;
        v62.val[1] = 0uLL;
        vst2q_s8(v21, v62);
        v22 = v17 + 64;
        vst2q_s8(v22, v61);
        v23 = v17 + 96;
        vst2q_s8(v23, *(int8x16x2_t *)(&v16 - 1));
        v17 += 128;
      }
      while (v17 != (char *)v15);
LABEL_12:
      if (v15 == v14)
        goto LABEL_23;
      v24 = (unint64_t)&v12[2 * v13 - v15 - 2];
      if (v24 < 0xE
        || (v15 < v8 + (v24 >> 1) + 1 ? (v25 = v8 >= (v24 & 0xFFFFFFFFFFFFFFFELL) + v15 + 2) : (v25 = 1), !v25))
      {
        v28 = (_WORD *)v15;
        v29 = (unsigned __int8 *)v8;
        goto LABEL_22;
      }
      v26 = (v24 >> 1) + 1;
      if (v24 >= 0x3E)
      {
        v27 = v26 & 0xFFFFFFFFFFFFFFE0;
        v49 = (uint8x8_t *)(v8 + 16);
        v50 = (uint16x8_t *)(v15 + 32);
        v51 = v26 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v52 = *(uint8x16_t *)v49[-2].i8;
          v53 = vmovl_u8(*v49);
          v54 = vmovl_high_u8(*(uint8x16_t *)v49->i8);
          v50[-2] = vmovl_u8(*(uint8x8_t *)v52.i8);
          v50[-1] = vmovl_high_u8(v52);
          *v50 = v53;
          v50[1] = v54;
          v50 += 4;
          v49 += 4;
          v51 -= 32;
        }
        while (v51);
        if (v26 == v27)
          goto LABEL_23;
        if ((v26 & 0x18) == 0)
        {
          v29 = (unsigned __int8 *)(v8 + v27);
          v28 = (_WORD *)(v15 + 2 * v27);
          do
          {
LABEL_22:
            v30 = *v29++;
            *v28++ = v30;
          }
          while (v28 != (_WORD *)v14);
          goto LABEL_23;
        }
      }
      else
      {
        v27 = 0;
      }
      v28 = (_WORD *)(v15 + 2 * (v26 & 0xFFFFFFFFFFFFFFF8));
      v29 = (unsigned __int8 *)(v8 + (v26 & 0xFFFFFFFFFFFFFFF8));
      v55 = (uint8x8_t *)(v8 + v27);
      v56 = (uint16x8_t *)(v15 + 2 * v27);
      v57 = v27 - (v26 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v58 = *v55++;
        *v56++ = vmovl_u8(v58);
        v57 += 8;
      }
      while (v57);
      if (v26 != (v26 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_22;
LABEL_23:
      v31 = *(WTF::StringImpl **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v11;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
        {
          WTF::StringImpl::~StringImpl(v31, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
          v32 = *(WTF::StringImpl **)a1;
          *(_QWORD *)a1 = 0;
          if (!v32)
            return;
LABEL_29:
          if (*(_DWORD *)v32 == 2)
          {
            WTF::StringImpl::~StringImpl(v32, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
          }
          else
          {
            *(_DWORD *)v32 -= 2;
          }
          return;
        }
        *(_DWORD *)v31 -= 2;
      }
      v32 = *(WTF::StringImpl **)a1;
      *(_QWORD *)a1 = 0;
      if (!v32)
        return;
      goto LABEL_29;
    }
  }
  if (*(_BYTE *)(a1 + 20))
    __break(0xC471u);
  else
    *(_DWORD *)(a1 + 16) = -1;
}

uint64_t WTF::StringBuilder::extendBufferForAppending<char16_t>(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  WTF::StringImpl *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = a2;
  v10 = *(WTF::StringImpl **)(a1 + 8);
  if (v10)
  {
    v11 = *((_DWORD *)v10 + 1);
    if (v11 >= a2)
    {
      v15 = *(WTF::StringImpl **)a1;
      *(_QWORD *)a1 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
        {
          WTF::StringImpl::~StringImpl(v15, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
          v10 = *(WTF::StringImpl **)(a1 + 8);
        }
        else
        {
          *(_DWORD *)v15 -= 2;
        }
      }
      v16 = *(_DWORD *)(a1 + 16);
      v12 = (unsigned int *)(a1 + 16);
      goto LABEL_27;
    }
    v12 = (unsigned int *)(a1 + 16);
    if ((*(_DWORD *)(a1 + 16) & 0x80000000) != 0)
      return 0;
  }
  else
  {
    if (!(_DWORD)a2)
      return 0;
    v12 = (unsigned int *)(a1 + 16);
    v11 = *(_DWORD *)(a1 + 16);
    if ((v11 & 0x80000000) != 0)
      return 0;
  }
  v13 = 2 * v11;
  if (v13 >= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  if (v13 <= a2)
    v13 = a2;
  if (v13 <= 0x10)
    v14 = 16;
  else
    v14 = v13;
  if ((v10 || (v10 = *(WTF::StringImpl **)a1) != 0) && (*((_BYTE *)v10 + 16) & 4) == 0)
    WTF::StringBuilder::reallocateBuffer<char16_t>(a1, (WTF::AtomStringImpl *)v14, a3, a4, a5, a6, a7, a8);
  else
    WTF::StringBuilder::reallocateBuffer<unsigned char>(a1, (WTF::AtomStringImpl *)v14, a3, a4, a5, a6, a7, a8);
  v16 = *v12;
  if ((*v12 & 0x80000000) != 0)
    return 0;
  v10 = *(WTF::StringImpl **)(a1 + 8);
LABEL_27:
  v26 = *((_QWORD *)v10 + 1);
  *v12 = v8;
  return v26 + 2 * v16;
}

uint64_t WTF::StringBuilder::append(uint64_t result, _WORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  int8x16_t v17;

  if (a3)
  {
    v8 = *(unsigned int *)(result + 16);
    if ((v8 & 0x80000000) == 0)
    {
      if (a3 == 1)
      {
        v11 = (unsigned __int16)*a2;
        if (v11 <= 0xFF)
        {
          v12 = *(_QWORD *)(result + 8);
          if (v12)
          {
            if ((*(_BYTE *)(v12 + 16) & 4) != 0)
            {
              v17.i8[0] = *a2;
              if (v8 < *(_DWORD *)(v12 + 4) && !*(_QWORD *)result)
              {
                v13 = *(_QWORD *)(v12 + 8);
                *(_DWORD *)(result + 16) = v8 + 1;
                *(_BYTE *)(v13 + v8) = v11;
                return result;
              }
              return WTF::StringBuilder::append(result, &v17, 1uLL, a4, a5, a6, a7, a8);
            }
          }
          else if (!*(_QWORD *)result || (*(_BYTE *)(*(_QWORD *)result + 16) & 4) != 0)
          {
            v17.i8[0] = *a2;
            return WTF::StringBuilder::append(result, &v17, 1uLL, a4, a5, a6, a7, a8);
          }
        }
      }
      else if (a3 >= 0xFFFFFFFF)
      {
        result = 160;
        __break(0xC471u);
        return result;
      }
      v14 = __CFADD__((_DWORD)v8, (_DWORD)a3);
      v15 = v8 + a3;
      if (v14)
        v16 = 0xFFFFFFFFLL;
      else
        v16 = v15;
      result = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)result, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
      if (result)
      {
        if (a3 == 1)
          *(_WORD *)result = *a2;
        else
          return (uint64_t)memcpy((void *)result, a2, 2 * a3);
      }
    }
  }
  return result;
}

uint64_t WTF::StringBuilder::append(uint64_t result, int8x16_t *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _WORD *v14;
  unint64_t v15;
  __int128 v16;
  char *v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  char *v21;
  char *v22;
  char *v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  _WORD *v30;
  int8x16_t *v31;
  __int16 v32;
  uint8x8_t *v33;
  uint16x8_t *v34;
  unint64_t v35;
  uint8x16_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint8x8_t *v39;
  uint16x8_t *v40;
  unint64_t v41;
  uint8x8_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;
  int8x16x2_t v45;

  if (a3)
  {
    v8 = *(_DWORD *)(result + 16);
    if ((v8 & 0x80000000) == 0)
    {
      if (a3 >= 0xFFFFFFFF)
      {
        result = 169;
        __break(0xC471u);
        return result;
      }
      v11 = *(_QWORD *)(result + 8);
      if ((v11 || (v11 = *(_QWORD *)result) != 0) && (*(_BYTE *)(v11 + 16) & 4) == 0)
      {
        v27 = __CFADD__(v8, (_DWORD)a3);
        v12 = v8 + a3;
        if (v27)
          v13 = 0xFFFFFFFFLL;
        else
          v13 = v12;
        result = WTF::StringBuilder::extendBufferForAppending<char16_t>(result, (WTF::AtomStringImpl *)v13, a3, a4, a5, a6, a7, a8);
        if (result)
        {
          v14 = (_WORD *)(result + 2 * a3);
          if (a3 < 0x40)
          {
            v15 = result;
          }
          else
          {
            v15 = result + 2 * (a3 & 0x7FFFFFFFFFFFFFC0);
            v16 = 0uLL;
            v17 = (char *)result;
            do
            {
              v43.val[0] = *a2;
              v18 = a2[1];
              v44.val[0] = a2[2];
              v19 = a2[3];
              a2 += 4;
              v20 = v19;
              v44.val[1] = 0uLL;
              v45.val[0] = v18;
              v43.val[1] = 0uLL;
              v21 = v17;
              vst2q_s8(v21, v43);
              v21 += 32;
              v45.val[1] = 0uLL;
              vst2q_s8(v21, v45);
              v22 = v17 + 64;
              vst2q_s8(v22, v44);
              v23 = v17 + 96;
              vst2q_s8(v23, *(int8x16x2_t *)(&v16 - 1));
              v17 += 128;
            }
            while (v17 != (char *)v15);
          }
          if ((_WORD *)v15 != v14)
          {
            v26 = result + 2 * a3 - v15 - 2;
            if (v26 < 0xE
              || (v15 < (unint64_t)a2->u64 + (v26 >> 1) + 1
                ? (v27 = (unint64_t)a2 >= (v26 & 0xFFFFFFFFFFFFFFFELL) + v15 + 2)
                : (v27 = 1),
                  !v27))
            {
              v30 = (_WORD *)v15;
              v31 = a2;
              goto LABEL_33;
            }
            v28 = (v26 >> 1) + 1;
            if (v26 >= 0x3E)
            {
              v29 = v28 & 0xFFFFFFFFFFFFFFE0;
              v33 = (uint8x8_t *)&a2[1];
              v34 = (uint16x8_t *)(v15 + 32);
              v35 = v28 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v36 = *(uint8x16_t *)v33[-2].i8;
                v37 = vmovl_u8(*v33);
                v38 = vmovl_high_u8(*(uint8x16_t *)v33->i8);
                v34[-2] = vmovl_u8(*(uint8x8_t *)v36.i8);
                v34[-1] = vmovl_high_u8(v36);
                *v34 = v37;
                v34[1] = v38;
                v34 += 4;
                v33 += 4;
                v35 -= 32;
              }
              while (v35);
              if (v28 == v29)
                return result;
              if ((v28 & 0x18) == 0)
              {
                v31 = (int8x16_t *)((char *)a2 + v29);
                v30 = (_WORD *)(v15 + 2 * v29);
                do
                {
LABEL_33:
                  v32 = v31->u8[0];
                  v31 = (int8x16_t *)((char *)v31 + 1);
                  *v30++ = v32;
                }
                while (v30 != v14);
                return result;
              }
            }
            else
            {
              v29 = 0;
            }
            v30 = (_WORD *)(v15 + 2 * (v28 & 0xFFFFFFFFFFFFFFF8));
            v31 = (int8x16_t *)((char *)a2 + (v28 & 0xFFFFFFFFFFFFFFF8));
            v39 = (uint8x8_t *)&a2->i8[v29];
            v40 = (uint16x8_t *)(v15 + 2 * v29);
            v41 = v29 - (v28 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v42 = *v39++;
              *v40++ = vmovl_u8(v42);
              v41 += 8;
            }
            while (v41);
            if (v28 != (v28 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_33;
          }
        }
      }
      else
      {
        v27 = __CFADD__(v8, (_DWORD)a3);
        v24 = v8 + a3;
        if (v27)
          v25 = 0xFFFFFFFFLL;
        else
          v25 = v24;
        result = WTF::StringBuilder::extendBufferForAppending<unsigned char>(result, (WTF::AtomStringImpl *)v25, a3, a4, a5, a6, a7, a8);
        if (result)
        {
          if (a3 == 1)
            *(_BYTE *)result = a2->i8[0];
          else
            return (uint64_t)memcpy((void *)result, a2, a3);
        }
      }
    }
  }
  return result;
}

BOOL WTF::StringBuilder::shouldShrinkToFit(WTF::StringBuilder *this)
{
  unsigned int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 0x80000000) != 0)
    return 0;
  v2 = *((_QWORD *)this + 1);
  return v2 && *(_DWORD *)(v2 + 4) > v1 + (v1 >> 2);
}

void WTF::StringBuilder::shrinkToFit(WTF::StringBuilder *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v8;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = (WTF::AtomStringImpl *)*((unsigned int *)this + 4);
  if ((v8 & 0x80000000) == 0)
  {
    v10 = *((_QWORD *)this + 1);
    if (v10)
    {
      if (*(_DWORD *)(v10 + 4) > v8 + (v8 >> 2))
      {
        if ((*(_BYTE *)(v10 + 16) & 4) != 0)
          WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)this, v8, a3, a4, a5, a6, a7, a8);
        else
          WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)this, v8, a3, a4, a5, a6, a7, a8);
        v18 = *(WTF::StringImpl **)this;
        *(_QWORD *)this = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
          {
            WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
            WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
          }
          else
          {
            *(_DWORD *)v18 -= 2;
          }
        }
      }
    }
  }
}

BOOL WTF::StringBuilder::containsOnlyASCII(WTF::StringBuilder *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int8x8_t v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  unint64_t v15;
  int8x8_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint8x16_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint16x4_t *v28;
  uint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t *v32;
  uint64_t v33;
  int8x16_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unint64_t v38;
  uint64_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t *v42;
  uint64_t v43;
  int8x16_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int16 *v47;
  uint64_t v48;
  int8x16_t v49;
  int8x16_t v50;
  uint16x4_t *v51;
  unint64_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  uint16x8_t v59;
  uint32x4_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  uint32x4_t v64;
  int8x16_t v65;
  int8x16_t v66;
  uint32x4_t v67;
  int8x16_t v68;
  int8x16_t v69;
  uint32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  unsigned int v73;
  int8x16_t v75;
  int8x16_t v76;
  unint64_t v77;
  uint8x16_t *v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  uint8x16_t v85;
  uint16x8_t v86;
  uint32x4_t v87;
  int8x16_t v88;
  int8x16_t v89;
  uint16x8_t v90;
  uint32x4_t v91;
  int8x16_t v92;
  int8x16_t v93;
  uint32x4_t v94;
  int8x16_t v95;
  uint32x4_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  uint8x8_t *v103;
  unint64_t v104;
  int8x16_t v105;
  int8x16_t v106;
  uint8x8_t v107;
  uint16x8_t v108;
  uint32x4_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  uint32x4_t v113;
  int8x16_t v114;
  int8x16_t v115;
  unsigned int v116;

  v1 = *((_QWORD *)this + 1);
  v2 = v1;
  if ((v1 || (v2 = *(_QWORD *)this) != 0) && (*(_BYTE *)(v2 + 16) & 4) == 0)
  {
    v3 = *((unsigned int *)this + 4);
    if (!(_DWORD)v3)
    {
      v5 = 0;
      v4 = 0;
      v6 = 0;
      goto LABEL_49;
    }
    if ((v3 & 0x80000000) == 0)
    {
      if (*(_QWORD *)this)
        v1 = *(_QWORD *)this;
      v4 = *(_QWORD *)(v1 + 8);
      v5 = v4 + 2 * v3;
      if ((v4 & 7) == 0)
      {
        v6 = 0;
        v25 = v5 & 0xFFFFFFFFFFFFFFF8;
        if (v4 < (v5 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_50:
          v26 = v4 + 8;
          if (v25 > v4 + 8)
            v26 = v25;
          v27 = v26 + ~v4;
          if (v27 >= 0x18)
          {
            v39 = (v27 >> 3) + 1;
            v28 = (uint16x4_t *)(v4 + 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL));
            v40 = 0uLL;
            v41 = (int8x16_t)(unint64_t)v6;
            v42 = (int8x16_t *)(v4 + 16);
            v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v41 = vorrq_s8(v42[-1], v41);
              v40 = vorrq_s8(*v42, v40);
              v42 += 2;
              v43 -= 4;
            }
            while (v43);
            v44 = vorrq_s8(v40, v41);
            v6 = vorr_s8(*(int8x8_t *)v44.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL));
            if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_70:
              if (v28 == (uint16x4_t *)v5)
                return (*(_QWORD *)&v6 & 0xFF80FF80FF80FF80) == 0;
LABEL_74:
              v46 = v5 - (_QWORD)v28 - 2;
              if (v46 >= 0x1E)
              {
                v48 = (v46 >> 1) + 1;
                v49 = 0uLL;
                v50 = (int8x16_t)(unint64_t)v6;
                v47 = (unsigned __int16 *)v28 + (v48 & 0xFFFFFFFFFFFFFFF0);
                v51 = v28 + 2;
                v52 = v48 & 0xFFFFFFFFFFFFFFF0;
                v53 = 0uLL;
                v54 = 0uLL;
                v55 = 0uLL;
                v56 = 0uLL;
                v57 = 0uLL;
                v58 = 0uLL;
                do
                {
                  v59 = *(uint16x8_t *)v51[-2].i8;
                  v60 = vmovl_u16(*(uint16x4_t *)v59.i8);
                  v61.i64[0] = v60.u32[0];
                  v61.i64[1] = v60.u32[1];
                  v62 = v61;
                  v61.i64[0] = v60.u32[2];
                  v61.i64[1] = v60.u32[3];
                  v63 = v61;
                  v64 = vmovl_high_u16(v59);
                  v61.i64[0] = v64.u32[0];
                  v61.i64[1] = v64.u32[1];
                  v65 = v61;
                  v61.i64[0] = v64.u32[2];
                  v61.i64[1] = v64.u32[3];
                  v66 = v61;
                  v67 = vmovl_u16(*v51);
                  v61.i64[0] = v67.u32[0];
                  v61.i64[1] = v67.u32[1];
                  v68 = v61;
                  v61.i64[0] = v67.u32[2];
                  v61.i64[1] = v67.u32[3];
                  v69 = v61;
                  v70 = vmovl_high_u16(*(uint16x8_t *)v51->i8);
                  v61.i64[0] = v70.u32[0];
                  v61.i64[1] = v70.u32[1];
                  v71 = v61;
                  v61.i64[0] = v70.u32[2];
                  v61.i64[1] = v70.u32[3];
                  v54 = vorrq_s8(v54, v66);
                  v53 = vorrq_s8(v53, v65);
                  v49 = vorrq_s8(v49, v63);
                  v50 = vorrq_s8(v50, v62);
                  v58 = vorrq_s8(v58, v61);
                  v57 = vorrq_s8(v57, v71);
                  v56 = vorrq_s8(v56, v69);
                  v55 = vorrq_s8(v55, v68);
                  v51 += 4;
                  v52 -= 16;
                }
                while (v52);
                v72 = vorrq_s8(vorrq_s8(vorrq_s8(v55, v50), vorrq_s8(v57, v53)), vorrq_s8(vorrq_s8(v56, v49), vorrq_s8(v58, v54)));
                v6 = vorr_s8(*(int8x8_t *)v72.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL));
                if (v48 == (v48 & 0xFFFFFFFFFFFFFFF0))
                  return (*(_QWORD *)&v6 & 0xFF80FF80FF80FF80) == 0;
              }
              else
              {
                v47 = (unsigned __int16 *)v28;
              }
              do
              {
                v73 = *v47++;
                *(_QWORD *)&v6 |= v73;
              }
              while (v47 != (unsigned __int16 *)v5);
              return (*(_QWORD *)&v6 & 0xFF80FF80FF80FF80) == 0;
            }
          }
          else
          {
            v28 = (uint16x4_t *)v4;
          }
          do
          {
            v45 = (uint64_t)*v28++;
            *(_QWORD *)&v6 |= v45;
          }
          while ((unint64_t)v28 < v25);
          goto LABEL_70;
        }
LABEL_73:
        v28 = (uint16x4_t *)v4;
        if (v4 == v5)
          return (*(_QWORD *)&v6 & 0xFF80FF80FF80FF80) == 0;
        goto LABEL_74;
      }
      v6 = 0;
      v7 = 2 * v3 - 2;
      v8 = v4 + 2;
      do
      {
        v9 = *(unsigned __int16 *)v4;
        v4 += 2;
        *(_QWORD *)&v6 |= v9;
        if ((v8 & 7) == 0)
          break;
        v10 = v7;
        v7 -= 2;
        v8 += 2;
      }
      while (v10);
LABEL_49:
      v25 = v5 & 0xFFFFFFFFFFFFFFF8;
      if (v4 < (v5 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_50;
      goto LABEL_73;
    }
LABEL_91:
    __break(0xC471u);
    JUMPOUT(0x197B03F78);
  }
  v11 = *((unsigned int *)this + 4);
  if (!(_DWORD)v11)
  {
    v13 = 0;
    v12 = 0;
    v20 = 0;
    goto LABEL_61;
  }
  if ((v11 & 0x80000000) != 0)
    goto LABEL_91;
  if (*(_QWORD *)this)
    v1 = *(_QWORD *)this;
  v12 = *(_QWORD *)(v1 + 8);
  v13 = (unsigned __int8 *)(v12 + v11);
  if ((v12 & 7) == 0)
  {
    v20 = 0;
    v21 = (unint64_t)v13 & 0xFFFFFFFFFFFFFFF8;
    if (v12 >= ((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_61;
LABEL_44:
    v22 = v12 + 8;
    if (v21 > v12 + 8)
      v22 = v21;
    v23 = v22 + ~v12;
    if (v23 >= 0x18)
    {
      v29 = (v23 >> 3) + 1;
      v24 = (uint8x16_t *)(v12 + 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL));
      v30 = 0uLL;
      v31 = (int8x16_t)(unint64_t)v20;
      v32 = (int8x16_t *)(v12 + 16);
      v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v31 = vorrq_s8(v32[-1], v31);
        v30 = vorrq_s8(*v32, v30);
        v32 += 2;
        v33 -= 4;
      }
      while (v33);
      v34 = vorrq_s8(v30, v31);
      v20 = vorr_s8(*(int8x8_t *)v34.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL));
      if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_58:
        if (v24 != (uint8x16_t *)v13)
          goto LABEL_62;
        return (*(_QWORD *)&v20 & 0x8080808080808080) == 0;
      }
    }
    else
    {
      v24 = (uint8x16_t *)v12;
    }
    do
    {
      v35 = v24->i64[0];
      v24 = (uint8x16_t *)((char *)v24 + 8);
      *(_QWORD *)&v20 |= v35;
    }
    while ((unint64_t)v24 < v21);
    goto LABEL_58;
  }
  v15 = v12 + 1;
  v14 = *(_BYTE *)v12;
  if (((v12 + 1) & 7) != 0 && (_DWORD)v11 != 1)
  {
    v14 |= *(_BYTE *)(v12 + 1);
    v15 = v12 + 2;
    if (((v12 + 2) & 7) != 0 && (_DWORD)v11 != 2)
    {
      v14 |= *(_BYTE *)(v12 + 2);
      v15 = v12 + 3;
      if (((v12 + 3) & 7) != 0 && (_DWORD)v11 != 3)
      {
        v14 |= *(_BYTE *)(v12 + 3);
        v15 = v12 + 4;
        if (((v12 + 4) & 7) != 0 && (_DWORD)v11 != 4)
        {
          v14 |= *(_BYTE *)(v12 + 4);
          v15 = v12 + 5;
          if (((v12 + 5) & 7) != 0 && (_DWORD)v11 != 5)
          {
            v14 |= *(_BYTE *)(v12 + 5);
            v15 = v12 + 6;
            if (((v12 + 6) & 7) != 0 && (_DWORD)v11 != 6)
            {
              v14 |= *(_BYTE *)(v12 + 6);
              v15 = v12 + 7;
              if (((v12 + 7) & 7) != 0 && (_DWORD)v11 != 7)
              {
                v14 |= *(_BYTE *)(v12 + 7);
                v15 = v12 + 8;
              }
            }
          }
        }
      }
    }
  }
  v20 = (int8x8_t)v14;
  v12 = v15;
  v21 = (unint64_t)v13 & 0xFFFFFFFFFFFFFFF8;
  if (v12 < ((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_44;
LABEL_61:
  v24 = (uint8x16_t *)v12;
  if ((unsigned __int8 *)v12 != v13)
  {
LABEL_62:
    v36 = v13 - (unsigned __int8 *)v24;
    if ((unint64_t)(v13 - (unsigned __int8 *)v24) < 8)
    {
      v37 = (unsigned __int8 *)v24;
      goto LABEL_89;
    }
    if (v36 >= 0x10)
    {
      v38 = v36 & 0xFFFFFFFFFFFFFFF0;
      v75 = 0uLL;
      v76 = (int8x16_t)(unint64_t)v20;
      v77 = v36 & 0xFFFFFFFFFFFFFFF0;
      v78 = v24;
      v79 = 0uLL;
      v80 = 0uLL;
      v81 = 0uLL;
      v82 = 0uLL;
      v83 = 0uLL;
      v84 = 0uLL;
      do
      {
        v85 = *v78++;
        v86 = vmovl_u8(*(uint8x8_t *)v85.i8);
        v87 = vmovl_u16(*(uint16x4_t *)v86.i8);
        v88.i64[0] = v87.u32[0];
        v88.i64[1] = v87.u32[1];
        v89 = v88;
        v90 = vmovl_high_u8(v85);
        v91 = vmovl_high_u16(v90);
        v88.i64[0] = v91.u32[2];
        v88.i64[1] = v91.u32[3];
        v92 = v88;
        v88.i64[0] = v87.u32[2];
        v88.i64[1] = v87.u32[3];
        v93 = v88;
        v94 = vmovl_high_u16(v86);
        v88.i64[0] = v94.u32[0];
        v88.i64[1] = v94.u32[1];
        v95 = v88;
        v96 = vmovl_u16(*(uint16x4_t *)v90.i8);
        v88.i64[0] = v96.u32[0];
        v88.i64[1] = v96.u32[1];
        v97 = v88;
        v88.i64[0] = v91.u32[0];
        v88.i64[1] = v91.u32[1];
        v98 = v88;
        v88.i64[0] = v94.u32[2];
        v88.i64[1] = v94.u32[3];
        v99 = v88;
        v88.i64[0] = v96.u32[2];
        v88.i64[1] = v96.u32[3];
        v82 = vorrq_s8(v82, v88);
        v80 = vorrq_s8(v80, v99);
        v83 = vorrq_s8(v83, v98);
        v81 = vorrq_s8(v81, v97);
        v79 = vorrq_s8(v79, v95);
        v75 = vorrq_s8(v75, v93);
        v84 = vorrq_s8(v84, v92);
        v76 = vorrq_s8(v76, v89);
        v77 -= 16;
      }
      while (v77);
      v100 = vorrq_s8(vorrq_s8(vorrq_s8(v76, v81), vorrq_s8(v79, v83)), vorrq_s8(vorrq_s8(v75, v82), vorrq_s8(v80, v84)));
      v20 = vorr_s8(*(int8x8_t *)v100.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 8uLL));
      if (v36 == v38)
        return (*(_QWORD *)&v20 & 0x8080808080808080) == 0;
      if ((v36 & 8) == 0)
      {
        v37 = &v24->u8[v38];
        do
        {
LABEL_89:
          v116 = *v37++;
          *(_QWORD *)&v20 |= v116;
        }
        while (v37 != v13);
        return (*(_QWORD *)&v20 & 0x8080808080808080) == 0;
      }
    }
    else
    {
      v38 = 0;
    }
    v37 = &v24->u8[v36 & 0xFFFFFFFFFFFFFFF8];
    v101 = 0uLL;
    v102 = (int8x16_t)(unint64_t)v20;
    v103 = (uint8x8_t *)&v24->i8[v38];
    v104 = v38 - (v36 & 0xFFFFFFFFFFFFFFF8);
    v105 = 0uLL;
    v106 = 0uLL;
    do
    {
      v107 = *v103++;
      v108 = vmovl_u8(v107);
      v109 = vmovl_u16(*(uint16x4_t *)v108.i8);
      v110.i64[0] = v109.u32[0];
      v110.i64[1] = v109.u32[1];
      v111 = v110;
      v110.i64[0] = v109.u32[2];
      v110.i64[1] = v109.u32[3];
      v112 = v110;
      v113 = vmovl_high_u16(v108);
      v110.i64[0] = v113.u32[0];
      v110.i64[1] = v113.u32[1];
      v114 = v110;
      v110.i64[0] = v113.u32[2];
      v110.i64[1] = v113.u32[3];
      v106 = vorrq_s8(v106, v110);
      v105 = vorrq_s8(v105, v114);
      v101 = vorrq_s8(v101, v112);
      v102 = vorrq_s8(v102, v111);
      v104 += 8;
    }
    while (v104);
    v115 = vorrq_s8(vorrq_s8(v102, v105), vorrq_s8(v101, v106));
    v20 = vorr_s8(*(int8x8_t *)v115.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v115, v115, 8uLL));
    if (v36 == (v36 & 0xFFFFFFFFFFFFFFF8))
      return (*(_QWORD *)&v20 & 0x8080808080808080) == 0;
    goto LABEL_89;
  }
  return (*(_QWORD *)&v20 & 0x8080808080808080) == 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_10StringImplENS8_12RawPtrTraitsISA_EENS8_21DefaultRefDerefTraitsISA_EEEENS8_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void WTF::StringBuilder::appendQuotedJSONString(WTF::StringBuilder *this, const WTF::String *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  char *v18;
  _WORD *v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  __int16 v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  int v35;
  _WORD *v36;
  int v37;
  unsigned int v38;
  _WORD *v39;
  unsigned int v40;
  __int16 v41;
  __int16 v42;
  char *v43;
  unint64_t v44;
  WTF::StringBuilder *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  int v61;
  char v62;
  unsigned int v63;
  char v64;
  _BYTE *v65;

  v8 = *((_DWORD *)this + 4);
  if ((v8 & 0x80000000) != 0)
    return;
  v11 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v12 = *(_DWORD *)(v11 + 4);
    if (v12 > 0x2AAAAAAA)
    {
      if (*((_BYTE *)this + 20))
        __break(0xC471u);
      else
        *((_DWORD *)this + 4) = -1;
      return;
    }
    v13 = 6 * v12 + 2;
    v14 = *((_QWORD *)this + 1);
    v15 = v14;
    if (!v14)
    {
LABEL_7:
      v15 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
        goto LABEL_9;
    }
  }
  else
  {
    v13 = 2;
    v14 = *((_QWORD *)this + 1);
    v15 = v14;
    if (!v14)
      goto LABEL_7;
  }
  if ((*(_BYTE *)(v15 + 16) & 4) == 0)
    goto LABEL_11;
LABEL_9:
  if (v11 && (*(_BYTE *)(v11 + 16) & 4) == 0)
  {
LABEL_11:
    if (__CFADD__(v8, v13))
      v16 = 0xFFFFFFFFLL;
    else
      v16 = v8 + v13;
    v17 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(this, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
    if (v17)
    {
      v18 = (char *)&v17[v13];
      *v17 = 34;
      v19 = v17 + 1;
      v20 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        v21 = *(unsigned int *)(v20 + 4);
        if ((*(_BYTE *)(v20 + 16) & 4) != 0)
        {
          if ((_DWORD)v21)
          {
            v33 = *(unsigned __int8 **)(v20 + 8);
            do
            {
              while (1)
              {
                while (1)
                {
                  v34 = *v33;
                  v35 = WTF::escapedFormsForJSON[*v33];
                  if (WTF::escapedFormsForJSON[*v33])
                    break;
                  a3 = 1;
                  v36 = v19++;
                  *v36 = v34;
                  ++v33;
                  if (!--v21)
                    goto LABEL_92;
                }
                *v19 = 92;
                v19[1] = v35;
                if (v35 == 117)
                  break;
                v19 += 2;
                ++v33;
                if (!--v21)
                  goto LABEL_92;
              }
              *((_DWORD *)v19 + 1) = 3145776;
              if (v34 >= 0xA0)
                v37 = 87;
              else
                v37 = 48;
              v38 = v37 + (v34 >> 4);
              v39 = v19 + 5;
              v19[4] = v38;
              v40 = v34 & 0xF;
              if (v40 >= 0xA)
                v41 = 87;
              else
                v41 = 48;
              v42 = v41 + v40;
              a3 = 6;
              v19 += 6;
              *v39 = v42;
              ++v33;
              --v21;
            }
            while (v21);
          }
        }
        else if ((_DWORD)v21)
        {
          a3 = *(_QWORD *)(v20 + 8);
          do
          {
            a4 = *(unsigned __int16 *)a3;
            if (a4 > 0xFF)
            {
              a5 = (unsigned __int16)a4 & 0xF800;
              if ((_DWORD)a5 == 55296)
              {
                if (v21 < 2
                  || (a4 & 0x400) != 0
                  || (a5 = a3 + 2,
                      a6 = *(unsigned __int16 *)(a3 + 2),
                      a7 = (unsigned __int16)a6 & 0xFC00,
                      (_DWORD)a7 != 56320))
                {
                  a6 = *(_WORD *)a3;
                  a7 = a4 & 0xF0;
                  *(_DWORD *)v19 = 7667804;
                  if (a4 >> 8 >= 0xA0)
                    v23 = 87;
                  else
                    v23 = 48;
                  v19[2] = v23 + (a4 >> 12);
                  v24 = (a4 >> 8) & 0xF;
                  if (v24 >= 0xA)
                    a8 = 87;
                  else
                    a8 = 48;
                  v19[3] = a8 + v24;
                  if (a6 >= 0xA0)
                    v25 = 87;
                  else
                    v25 = 48;
                  v22 = v25 + (a7 >> 4);
                  goto LABEL_46;
                }
                *v19 = a4;
                v19[1] = a6;
                v19 += 2;
                --v21;
                a3 += 2;
              }
              else
              {
                *v19++ = a4;
              }
            }
            else
            {
              a5 = WTF::escapedFormsForJSON[a4];
              if (WTF::escapedFormsForJSON[a4])
              {
                *v19 = 92;
                v19[1] = a5;
                if ((_DWORD)a5 == 117)
                {
                  *((_DWORD *)v19 + 1) = 3145776;
                  if (a4 >= 0xA0u)
                    a6 = 87;
                  else
                    a6 = 48;
                  v22 = a6 + (a4 >> 4);
LABEL_46:
                  v19[4] = v22;
                  v26 = a4 & 0xF;
                  if (v26 >= 0xA)
                    a5 = 87;
                  else
                    a5 = 48;
                  a4 = a5 + v26;
                  v19[5] = a4;
                  v19 += 6;
                  goto LABEL_22;
                }
                v19 += 2;
              }
              else
              {
                *v19++ = a4;
              }
            }
LABEL_22:
            a3 += 2;
            --v21;
          }
          while (v21);
        }
      }
LABEL_92:
      *v19 = 34;
      v43 = (char *)(v19 + 1);
      if (v43 < v18)
      {
        v44 = *((_DWORD *)this + 4) - ((unint64_t)(v18 - v43) >> 1);
        v45 = this;
LABEL_94:
        WTF::StringBuilder::shrink(v45, (WTF::AtomStringImpl *)v44, a3, a4, a5, a6, a7, a8);
        return;
      }
    }
    return;
  }
  if (__CFADD__(v8, v13))
    v27 = -1;
  else
    v27 = v8 + v13;
  if (!v14 || (v8 = *(_DWORD *)(v14 + 4), v8 < v27))
  {
    v28 = 2 * v8;
    if (v28 >= 0x7FFFFFFF)
      v28 = 0x7FFFFFFF;
    if (v28 <= v27)
      v28 = v27;
    if (v28 <= 0x10)
      v29 = 16;
    else
      v29 = v28;
    if ((v14 || (v14 = *(_QWORD *)this) != 0) && (*(_BYTE *)(v14 + 16) & 4) == 0)
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)this, (WTF::AtomStringImpl *)v29, a3, a4, a5, a6, a7, a8);
    else
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)this, (WTF::AtomStringImpl *)v29, a3, a4, a5, a6, a7, a8);
    v30 = *((_DWORD *)this + 4);
    if ((v30 & 0x80000000) != 0)
      return;
    v31 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    *((_DWORD *)this + 4) = v27;
    if (!v31)
      return;
    goto LABEL_96;
  }
  v32 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
      v30 = *((_DWORD *)this + 4);
      v31 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
      *((_DWORD *)this + 4) = v27;
      if (!v31)
        return;
      goto LABEL_96;
    }
    *(_DWORD *)v32 -= 2;
  }
  v30 = *((_DWORD *)this + 4);
  v31 = *(_QWORD *)(v14 + 8);
  *((_DWORD *)this + 4) = v27;
  if (!v31)
    return;
LABEL_96:
  v54 = (_BYTE *)(v31 + v30);
  v55 = &v54[v13];
  *v54 = 34;
  v56 = v54 + 1;
  v57 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v58 = *(unsigned int *)(v57 + 4);
    if ((_DWORD)v58)
    {
      v59 = *(unsigned __int8 **)(v57 + 8);
      do
      {
        v60 = *v59;
        v61 = WTF::escapedFormsForJSON[*v59];
        if (WTF::escapedFormsForJSON[*v59])
        {
          *v56 = 92;
          v56[1] = v61;
          if (v61 == 117)
          {
            *((_WORD *)v56 + 1) = 12336;
            if (v60 >= 0xA0)
              v62 = 87;
            else
              v62 = 48;
            v56[4] = v62 + (v60 >> 4);
            v63 = v60 & 0xF;
            if (v63 >= 0xA)
              v64 = 87;
            else
              v64 = 48;
            v56[5] = v64 + v63;
            v56 += 6;
          }
          else
          {
            v56 += 2;
          }
        }
        else
        {
          *v56++ = v60;
        }
        ++v59;
        --v58;
      }
      while (v58);
    }
  }
  *v56 = 34;
  v65 = v56 + 1;
  if (v65 < v55)
  {
    v44 = (*((_DWORD *)this + 4) + (_DWORD)v65 - (_DWORD)v55);
    v45 = this;
    goto LABEL_94;
  }
}

WTF::String *WTF::String::String(WTF::StringImpl **this, CFStringRef theString)
{
  CFIndex Length;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFIndex v12;
  UInt8 *v13;
  WTF::StringImpl *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  _BYTE *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  UniChar *v32;
  int *v33;
  _WORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _WORD *v42;
  unint64_t v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  CFIndex usedBufLen;
  CFRange v64;
  CFRange v65;
  CFRange v66;

  *this = 0;
  if (theString)
  {
    Length = CFStringGetLength(theString);
    if (Length)
    {
      v12 = Length;
      if ((_DWORD)Length)
        v13 = (UInt8 *)WTF::fastMalloc((WTF *)Length);
      else
        v13 = 0;
      usedBufLen = 0;
      v64.location = 0;
      v64.length = v12;
      if (CFStringGetBytes(theString, v64, 0x201u, 0, 0, v13, v12, &usedBufLen) != v12 || usedBufLen != v12)
      {
        WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
        if ((_DWORD)v12)
        {
          v32 = (UniChar *)WTF::fastMalloc((WTF *)(2 * v12));
          v65.location = 0;
          v65.length = v12;
          CFStringGetCharacters(theString, v65, v32);
          v33 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
          *v33 = 2;
          v33[1] = v12;
          *((_QWORD *)v33 + 1) = 0;
          v33[4] = 1;
          v34 = (_WORD *)WTF::fastCompactMalloc((WTF *)(2 * v12));
          v42 = v34;
          if ((_DWORD)v12 == 1)
            *v34 = *v32;
          else
            memcpy(v34, v32, 2 * v12);
          *((_QWORD *)v33 + 1) = v42;
          WTF::fastFree((unint64_t)v32, v35, v36, v37, v38, v39, v40, v41);
        }
        else
        {
          v66.location = 0;
          v66.length = v12;
          CFStringGetCharacters(theString, v66, 0);
          v33 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
        }
        v53 = *this;
        *this = (WTF::StringImpl *)v33;
        if (v53)
        {
          if (*(_DWORD *)v53 == 2)
          {
            WTF::StringImpl::~StringImpl(v53, (WTF::AtomStringImpl *)v15, v16, v17, v18, v19, v20, v21);
            WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
          }
          else
          {
            *(_DWORD *)v53 -= 2;
          }
        }
        v43 = 0;
        goto LABEL_34;
      }
      if ((_DWORD)v12)
      {
        v22 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
        *v22 = 2;
        v22[1] = v12;
        *((_QWORD *)v22 + 1) = 0;
        v22[4] = 5;
        v23 = (_BYTE *)WTF::fastCompactMalloc((WTF *)v12);
        v31 = v23;
        if ((_DWORD)v12 == 1)
          *v23 = *v13;
        else
          memcpy(v23, v13, v12);
        *((_QWORD *)v22 + 1) = v31;
        WTF::fastFree((unint64_t)v13, v24, v25, v26, v27, v28, v29, v30);
        v13 = 0;
      }
      else
      {
        v22 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
      v44 = *this;
      *this = (WTF::StringImpl *)v22;
      if (v44)
      {
        if (*(_DWORD *)v44 != 2)
        {
          *(_DWORD *)v44 -= 2;
          v43 = (unint64_t)v13;
          goto LABEL_34;
        }
        WTF::StringImpl::~StringImpl(v44, (WTF::AtomStringImpl *)v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
      }
      v43 = (unint64_t)v13;
      goto LABEL_34;
    }
    WTF::StringImpl::s_emptyAtomString += 2;
    v14 = *this;
    *this = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::~StringImpl(v14, v5, v6, v7, v8, v9, v10, v11);
LABEL_34:
        WTF::fastFree(v43, v15, v16, v17, v18, v19, v20, v21);
        return (WTF::String *)this;
      }
      *(_DWORD *)v14 -= 2;
    }
  }
  return (WTF::String *)this;
}

CFStringRef WTF::String::createCFString@<X0>(WTF::StringImpl **this@<X0>, CFStringRef *a2@<X8>)
{
  WTF::StringImpl *v2;

  v2 = *this;
  if (v2)
    return WTF::StringImpl::createCFString(v2, a2);
  *a2 = &stru_1E35BF3F0;
  return (CFStringRef)CFRetain(&stru_1E35BF3F0);
}

CFStringRef WTF::makeCFArrayElement@<X0>(WTF::StringImpl **this@<X0>, CFStringRef *a2@<X8>)
{
  WTF::StringImpl *v3;

  v3 = *this;
  if (v3)
    return WTF::StringImpl::createCFString(v3, a2);
  *a2 = &stru_1E35BF3F0;
  return (CFStringRef)CFRetain(&stru_1E35BF3F0);
}

WTF::String *WTF::makeVectorElement@<X0>(const __CFString *a1@<X1>, WTF::String *a2@<X8>)
{
  WTF::String *result;

  result = a2;
  if (a1)
  {
    result = WTF::String::String((WTF::StringImpl **)a2, a1);
    *((_BYTE *)result + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *((_BYTE *)a2 + 8) = 0;
  }
  return result;
}

void WTF::makeNSArrayElement(WTF::StringImpl **this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  id v5;
  void *v6;
  CFTypeRef v7;
  CFTypeRef cf;

  WTF::String::createCFString(this, (CFStringRef *)&cf);
  v4 = (void *)cf;
  cf = 0;
  v5 = v4;
  v6 = v5;
  if (v5)
    CFRetain(v5);

  *a2 = v6;
  v7 = cf;
  cf = 0;
  if (v7)
    CFRelease(v7);
}

void sub_197B047D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  void *v10;

  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void WTF::makeVectorElement(const WTF::String *a1@<X1>, uint64_t a2@<X8>)
{
  char isKindOfClass;
  const WTF::String *v6;
  const WTF::String *theString;

  theString = a1;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v6 = theString;
  if ((isKindOfClass & 1) != 0)
  {
    WTF::String::String((WTF::StringImpl **)a2, (CFStringRef)theString);
    v6 = theString;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }

}

void sub_197B04874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t WTF::findFloatAlignedImpl(float32x4_t *this, const float *a2, int32x2_t a3)
{
  float32x4_t v3;
  uint16x4_t v4;
  float32x4_t v5;
  int8x16_t v6;
  unsigned int v7;

  v3 = (float32x4_t)vdupq_lane_s32(a3, 0);
  v4 = (uint16x4_t)vmovn_s32(vceqq_f32(*this, v3));
  if (v4)
  {
LABEL_4:
    v6 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16(v4), 0x1FuLL));
    v7 = vminvq_u32((uint32x4_t)vornq_s8(vandq_s8(v6, (int8x16_t)xmmword_199123270), v6));
    if ((unint64_t)a2 <= v7)
      return 0;
    else
      return (uint64_t)this + 4 * v7;
  }
  else
  {
    while ((unint64_t)a2 >= 5)
    {
      --a2;
      v5 = this[1];
      ++this;
      v4 = (uint16x4_t)vmovn_s32(vceqq_f32(v5, v3));
      if (v4)
        goto LABEL_4;
    }
    return 0;
  }
}

uint64_t WTF::findDoubleAlignedImpl(float64x2_t *this, const double *a2, double a3)
{
  float64x2_t v3;
  int8x8_t v4;
  float64x2_t v5;
  uint32x2_t v6;
  unsigned __int32 v7;

  v3 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a3, 0);
  v4 = (int8x8_t)vmovn_s64(vceqq_f64(*this, v3));
  if (v4)
  {
LABEL_4:
    v6 = (uint32x2_t)vorn_s8((int8x8_t)0x100000000, v4);
    v7 = vpmin_u32(v6, v6).u32[0];
    if ((unint64_t)a2 <= v7)
      return 0;
    else
      return (uint64_t)this + 8 * v7;
  }
  else
  {
    while ((unint64_t)a2 >= 3)
    {
      a2 = (const double *)((char *)a2 - 2);
      v5 = this[1];
      ++this;
      v4 = (int8x8_t)vmovn_s64(vceqq_f64(v5, v3));
      if (v4)
        goto LABEL_4;
    }
    return 0;
  }
}

char *WTF::find8NonASCIIAlignedImpl(int8x16_t *a1, unint64_t a2, double a3, float a4)
{
  int8x16_t v4;
  int8x16_t v5;
  uint8x16_t v6;

  v4 = vcltzq_s8(*a1);
  LOBYTE(a4) = vmaxvq_u8((uint8x16_t)v4);
  if (a4 == 0.0)
  {
    while (a2 >= 0x11)
    {
      a2 -= 16;
      v5 = a1[1];
      ++a1;
      v4 = vcltzq_s8(v5);
      LOBYTE(a4) = vmaxvq_u8((uint8x16_t)v4);
      if (a4 != 0.0)
        goto LABEL_4;
    }
    return 0;
  }
  else
  {
LABEL_4:
    v6 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_19911D0A0, v4);
    v6.i8[0] = vminvq_u8(v6);
    if (a2 <= v6.u32[0])
      return 0;
    else
      return (char *)a1 + v6.u32[0];
  }
}

char *WTF::find16NonASCIIAlignedImpl(uint16x8_t *a1, unint64_t a2)
{
  uint16x8_t v2;
  uint8x8_t v3;
  uint16x8_t v4;
  int8x16_t v5;
  uint16x8_t v6;

  v2.i64[0] = 0x7F007F007F007FLL;
  v2.i64[1] = 0x7F007F007F007FLL;
  v3 = (uint8x8_t)vmovn_s16((int16x8_t)vcgtq_u16(*a1, v2));
  if (v3)
  {
LABEL_4:
    v5 = (int8x16_t)vcltzq_s16(vshlq_n_s16((int16x8_t)vmovl_u8(v3), 0xFuLL));
    v6 = (uint16x8_t)vornq_s8(vandq_s8(v5, (int8x16_t)xmmword_199123280), v5);
    v6.i16[0] = vminvq_u16(v6);
    if (a2 <= v6.u32[0])
      return 0;
    else
      return (char *)a1 + 2 * v6.u32[0];
  }
  else
  {
    while (a2 >= 9)
    {
      a2 -= 8;
      v4 = a1[1];
      ++a1;
      v3 = (uint8x8_t)vmovn_s16((int16x8_t)vcgtq_u16(v4, v2));
      if (v3)
        goto LABEL_4;
    }
    return 0;
  }
}

void WTF::StringImpl::~StringImpl(WTF::StringImpl *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9 = *((_DWORD *)this + 4);
  if ((v9 & 0x10) != 0)
  {
    if (*((_DWORD *)this + 1))
      WTF::AtomStringImpl::remove(this, a2, a3, a4, a5, a6, a7, a8);
  }
  else if ((v9 & 0x20) != 0 && (*((_BYTE *)this + 36) & 2) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)this + 5);
    if (v10)
      WTF::SymbolRegistry::remove(v10, this, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_DWORD *)this + 4);
  v12 = v11 & 3;
  switch(v12)
  {
    case 3:
      (*(void (**)(_QWORD, WTF::StringImpl *, _QWORD, _QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), this, *((_QWORD *)this + 1), ((*((_DWORD *)this + 1) << ((v11 & 4) == 0)) + 32));
      v13 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      break;
    case 2:
      v14 = (WTF::StringImpl *)*((_QWORD *)this + 3);
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::~StringImpl(v14);
        WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
      }
      else
      {
        *(_DWORD *)v14 -= 2;
      }
      break;
    case 1:
      WTF::fastFree(*((_QWORD *)this + 1), a2, a3, a4, a5, a6, a7, a8);
      break;
  }
}

unint64_t WTF::StringImpl::sizeInBytes(WTF::StringImpl *this)
{
  return ((unint64_t)*((unsigned int *)this + 1) << ((*((_BYTE *)this + 16) & 4) == 0)) + 32;
}

void WTF::StringImpl::destroy(WTF::StringImpl *this, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::StringImpl::~StringImpl(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t WTF::StringImpl::createWithoutCopyingNonEmpty@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = WTF::fastCompactMalloc((WTF *)0x20);
  *(_DWORD *)result = 2;
  *(_DWORD *)(result + 4) = a2;
  *(_QWORD *)(result + 8) = a1;
  *(_DWORD *)(result + 16) = 0;
  *a3 = result;
  return result;
}

{
  uint64_t result;

  result = WTF::fastCompactMalloc((WTF *)0x20);
  *(_DWORD *)result = 2;
  *(_DWORD *)(result + 4) = a2;
  *(_QWORD *)(result + 8) = a1;
  *(_DWORD *)(result + 16) = 4;
  *a3 = result;
  return result;
}

unint64_t WTF::StringImpl::createUninitialized@<X0>(unint64_t this@<X0>, _QWORD *a2@<X1>, unint64_t *a3@<X8>)
{
  int v6;

  if (this)
  {
    v6 = this;
    if (this >> 31)
    {
      __break(0xC471u);
    }
    else
    {
      this = WTF::fastCompactMalloc((WTF *)(this + 20));
      *a2 = this + 20;
      *(_DWORD *)this = 2;
      *(_DWORD *)(this + 4) = v6;
      *(_QWORD *)(this + 8) = this + 20;
      *(_DWORD *)(this + 16) = 4;
      *a3 = this;
    }
  }
  else
  {
    *a2 = 0;
    this = (unint64_t)&WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    *a3 = (unint64_t)&WTF::StringImpl::s_emptyAtomString;
  }
  return this;
}

unint64_t WTF::StringImpl::createUninitialized@<X0>(unint64_t result@<X0>, _QWORD *a2@<X1>, unint64_t *a3@<X8>)
{
  int v5;

  if (result)
  {
    v5 = result;
    if (result >= 0x7FFFFFF0)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastCompactMalloc((WTF *)(2 * result + 20));
      *a2 = result + 20;
      *(_DWORD *)result = 2;
      *(_DWORD *)(result + 4) = v5;
      *(_QWORD *)(result + 8) = result + 20;
      *(_DWORD *)(result + 16) = 0;
      *a3 = result;
    }
  }
  else
  {
    *a2 = 0;
    result = (unint64_t)&WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    *a3 = (unint64_t)&WTF::StringImpl::s_emptyAtomString;
  }
  return result;
}

_WORD *WTF::StringImpl::create@<X0>(_WORD *result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _WORD *v5;
  uint64_t v6;

  if (a2)
  {
    if (a2 >= 0x7FFFFFF0)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = WTF::fastCompactMalloc((WTF *)(2 * a2 + 20));
      result = (_WORD *)(v6 + 20);
      *(_DWORD *)v6 = 2;
      *(_DWORD *)(v6 + 4) = a2;
      *(_QWORD *)(v6 + 8) = v6 + 20;
      *(_DWORD *)(v6 + 16) = 0;
      *a3 = v6;
      if (a2 == 1)
        *result = *v5;
      else
        return memcpy(result, v5, 2 * a2);
    }
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a3 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
  }
  return result;
}

_BYTE *WTF::StringImpl::create@<X0>(_BYTE *result@<X0>, size_t a2@<X1>, uint64_t *a3@<X8>)
{
  _BYTE *v5;
  uint64_t v6;

  if (a2)
  {
    if (a2 >> 31)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = WTF::fastCompactMalloc((WTF *)(a2 + 20));
      result = (_BYTE *)(v6 + 20);
      *(_DWORD *)v6 = 2;
      *(_DWORD *)(v6 + 4) = a2;
      *(_QWORD *)(v6 + 8) = v6 + 20;
      *(_DWORD *)(v6 + 16) = 4;
      *a3 = v6;
      if (a2 == 1)
        *result = *v5;
      else
        return memcpy(result, v5, a2);
    }
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a3 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
  }
  return result;
}

uint64_t WTF::StringImpl::createStaticStringImpl@<X0>(uint64_t result@<X0>, size_t a2@<X1>, uint64_t *a3@<X8>)
{
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;

  if (a2)
  {
    if (a2 >> 31)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = (_BYTE *)result;
      v6 = WTF::fastCompactMalloc((WTF *)(a2 + 20));
      v7 = (_BYTE *)(v6 + 20);
      *(_DWORD *)v6 = 2;
      *(_DWORD *)(v6 + 4) = a2;
      *(_QWORD *)(v6 + 8) = v6 + 20;
      *(_DWORD *)(v6 + 16) = 4;
      *a3 = v6;
      if (a2 == 1)
        *v7 = *v5;
      else
        memcpy(v7, v5, a2);
      result = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v6);
      *(_DWORD *)v6 |= 1u;
    }
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a3 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
  }
  return result;
}

void WTF::StringImpl::createStaticStringImpl(_WORD *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v4;

  if (a2)
  {
    WTF::StringImpl::create8BitIfPossible(a1, a2, a3);
    v4 = (WTF::StringImpl *)*a3;
    if (*((_DWORD *)v4 + 4) <= 0xFFu)
      WTF::StringImpl::hashSlowCase(v4);
    *(_DWORD *)v4 |= 1u;
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a3 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
  }
}

void WTF::StringImpl::create8BitIfPossible(_WORD *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (!a2)
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a3 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
    return;
  }
  if (a2 >> 31)
    goto LABEL_14;
  v6 = WTF::fastCompactMalloc((WTF *)(a2 + 20));
  v7 = (WTF::StringImpl *)v6;
  v8 = 0;
  *(_DWORD *)v6 = 2;
  *(_DWORD *)(v6 + 4) = a2;
  *(_QWORD *)(v6 + 8) = v6 + 20;
  *(_DWORD *)(v6 + 16) = 4;
  v9 = 2 * a2;
  while (1)
  {
    v10 = (unsigned __int16)a1[v8];
    if (v10 >= 0x100)
      break;
    *(_BYTE *)(v6 + v8++ + 20) = v10;
    v9 -= 2;
    if (!v9)
    {
      *a3 = v6;
      return;
    }
  }
  if (a2 >= 0x7FFFFFF0)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x197B0514CLL);
  }
  v18 = WTF::fastCompactMalloc((WTF *)(2 * a2 + 20));
  v19 = (_WORD *)(v18 + 20);
  *(_DWORD *)v18 = 2;
  *(_DWORD *)(v18 + 4) = a2;
  *(_QWORD *)(v18 + 8) = v18 + 20;
  *(_DWORD *)(v18 + 16) = 0;
  *a3 = v18;
  if (a2 == 1)
  {
    *v19 = *a1;
    v20 = *(_DWORD *)v7 - 2;
    if (*(_DWORD *)v7 != 2)
    {
LABEL_11:
      *(_DWORD *)v7 = v20;
      return;
    }
  }
  else
  {
    memcpy(v19, a1, 2 * a2);
    v20 = *(_DWORD *)v7 - 2;
    if (*(_DWORD *)v7 != 2)
      goto LABEL_11;
  }
  WTF::StringImpl::~StringImpl(v7, v11, v12, v13, v14, v15, v16, v17);
  WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
}

_QWORD *WTF::StringImpl::substring@<X0>(_QWORD *this@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *((unsigned int *)this + 1);
  if (v5 <= a2)
    goto LABEL_15;
  v6 = a3;
  if (v5 - a2 > a3 || (v6 = v5 - a2, a2))
  {
    v7 = v6;
    v8 = v5 - a2;
    if ((this[2] & 4) != 0)
    {
      if (v8 >= v6)
      {
        if (v6)
        {
          if ((v6 & 0x80000000) == 0)
          {
            v9 = (_BYTE *)(this[1] + a2);
            v11 = WTF::fastCompactMalloc((WTF *)(v6 + 20));
            this = (_QWORD *)(v11 + 20);
            *(_DWORD *)v11 = 2;
            *(_DWORD *)(v11 + 4) = v6;
            *(_QWORD *)(v11 + 8) = v11 + 20;
            *(_DWORD *)(v11 + 16) = 4;
            *a4 = v11;
            if (v6 == 1)
            {
              *(_BYTE *)this = *v9;
              return this;
            }
            return memcpy(this, v9, v7);
          }
LABEL_19:
          __break(0xC471u);
          JUMPOUT(0x197B052D8);
        }
LABEL_15:
        WTF::StringImpl::s_emptyAtomString += 2;
        *a4 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
        return this;
      }
    }
    else if (v8 >= v6)
    {
      if (v6)
      {
        if (v6 < 0x7FFFFFF0)
        {
          v9 = (_BYTE *)(this[1] + 2 * a2);
          v7 = 2 * v6;
          v10 = WTF::fastCompactMalloc((WTF *)(v7 + 20));
          this = (_QWORD *)(v10 + 20);
          *(_DWORD *)v10 = 2;
          *(_DWORD *)(v10 + 4) = v6;
          *(_QWORD *)(v10 + 8) = v10 + 20;
          *(_DWORD *)(v10 + 16) = 0;
          *a4 = v10;
          if (v6 == 1)
          {
            *(_WORD *)this = *(_WORD *)v9;
            return this;
          }
          return memcpy(this, v9, v7);
        }
        goto LABEL_19;
      }
      goto LABEL_15;
    }
    __break(1u);
    goto LABEL_19;
  }
  *(_DWORD *)this += 2;
  *a4 = (uint64_t)this;
  return this;
}

uint64_t WTF::StringImpl::characterStartingAt(WTF::StringImpl *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  int v8;
  BOOL v9;
  unsigned int v10;

  v2 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 16) & 4) != 0)
    return *(unsigned __int8 *)(v2 + a2);
  result = *(unsigned __int16 *)(v2 + 2 * a2);
  if ((result & 0xF800) == 0xD800)
  {
    v5 = a2 + 1;
    v6 = *((_DWORD *)this + 1);
    if ((result & 0xFC00) != 0xD800 || v5 >= v6)
    {
      return 0;
    }
    else
    {
      v8 = *(unsigned __int16 *)(v2 + 2 * v5);
      v9 = (v8 & 0xFC00) == 56320;
      v10 = v8 + ((_DWORD)result << 10) - 56613888;
      if (v9)
        return v10;
      else
        return 0;
    }
  }
  return result;
}

void WTF::StringImpl::convertToLowercaseWithoutLocale(WTF::StringImpl *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  unsigned __int16 *v6;
  char v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int32_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int32_t v26;
  int *v27;
  UChar *v28;
  int v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  UErrorCode pErrorCode;

  v4 = *((unsigned int *)this + 1);
  if ((*((_BYTE *)this + 16) & 4) == 0)
  {
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = (unsigned __int16 *)*((_QWORD *)this + 1);
      v7 = 1;
      v8 = *((unsigned int *)this + 1);
      do
      {
        v10 = *v6++;
        v9 = v10;
        if ((v10 - 65) <= 0x19)
          v7 = 0;
        v5 |= v9;
        --v8;
      }
      while (v8);
      if ((v7 & (v5 < 0x80)) == 0)
      {
        if (v5 <= 0x7F)
        {
          if (v4 <= 0x7FFFFFEF)
          {
            v11 = WTF::fastCompactMalloc((WTF *)(2 * v4 + 20));
            *(_DWORD *)v11 = 2;
            *(_DWORD *)(v11 + 4) = v4;
            *(_QWORD *)(v11 + 8) = v11 + 20;
            *(_DWORD *)(v11 + 16) = 0;
            *a2 = v11;
            v12 = *((unsigned int *)this + 1);
            if ((_DWORD)v12)
            {
              v13 = 0;
              v14 = 2 * v12;
              do
              {
                v15 = *(unsigned __int16 *)(*((_QWORD *)this + 1) + v13);
                *(_WORD *)(v11 + 20 + v13) = v15 | (32 * ((v15 - 65) < 0x1A));
                v13 += 2;
              }
              while (v14 != v13);
            }
            return;
          }
          __break(0xC471u);
LABEL_41:
          JUMPOUT(0x197B05664);
        }
        if ((v4 & 0x80000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x197B0566CLL);
        }
        if (v4 > 0x7FFFFFEF)
        {
          __break(0xC471u);
          JUMPOUT(0x197B05674);
        }
        v17 = WTF::fastCompactMalloc((WTF *)(2 * v4 + 20));
        *(_DWORD *)v17 = 2;
        *(_DWORD *)(v17 + 4) = v4;
        *(_QWORD *)(v17 + 8) = v17 + 20;
        *(_DWORD *)(v17 + 16) = 0;
        pErrorCode = U_ZERO_ERROR;
        v18 = u_strToLower((UChar *)(v17 + 20), v4, *((const UChar **)this + 1), *((_DWORD *)this + 1), "", &pErrorCode);
        v26 = v18;
        if (pErrorCode <= U_ZERO_ERROR && v18 == (_DWORD)v4)
        {
LABEL_34:
          *a2 = v17;
          return;
        }
        if (v18)
        {
          if (v18 > 0x7FFFFFEF)
          {
            __break(0xC471u);
            goto LABEL_41;
          }
          v27 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v18 + 20));
          v28 = (UChar *)(v27 + 5);
          *v27 = 2;
          v27[1] = v26;
          *((_QWORD *)v27 + 1) = v27 + 5;
          v27[4] = 0;
          v29 = *(_DWORD *)v17 - 2;
          if (*(_DWORD *)v17 != 2)
            goto LABEL_27;
        }
        else
        {
          v28 = 0;
          v27 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
          v29 = *(_DWORD *)v17 - 2;
          if (*(_DWORD *)v17 != 2)
          {
LABEL_27:
            *(_DWORD *)v17 = v29;
LABEL_30:
            pErrorCode = U_ZERO_ERROR;
            u_strToLower(v28, v26, *((const UChar **)this + 1), *((_DWORD *)this + 1), "", &pErrorCode);
            if (pErrorCode > U_ZERO_ERROR)
            {
              *(_DWORD *)this += 2;
              *a2 = (uint64_t)this;
              if (*v27 == 2)
              {
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v27, v38, v39, v40, v41, v42, v43, v44);
                WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
              }
              else
              {
                *v27 -= 2;
              }
              return;
            }
            v17 = (uint64_t)v27;
            goto LABEL_34;
          }
        }
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v17, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
        goto LABEL_30;
      }
    }
LABEL_19:
    *(_DWORD *)this += 2;
    *a2 = (uint64_t)this;
    return;
  }
  if (!(_DWORD)v4)
    goto LABEL_19;
  v16 = 0;
  while ((*(char *)(*((_QWORD *)this + 1) + v16) & 0x80000000) == 0
       && *(unsigned __int8 *)(*((_QWORD *)this + 1) + v16) - 65 >= 0x1A)
  {
    if (v4 == ++v16)
      goto LABEL_19;
  }
  WTF::StringImpl::convertToLowercaseWithoutLocaleStartingAtFailingIndex8Bit((uint64_t)this, v16, a2);
}

uint64_t WTF::StringImpl::convertToLowercaseWithoutLocaleStartingAtFailingIndex8Bit@<X0>(uint64_t this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(unsigned int *)(this + 4);
  if ((v3 & 0x80000000) != 0)
  {
    __break(0xC471u);
  }
  else
  {
    LODWORD(v4) = a2;
    v5 = this;
    this = WTF::fastCompactMalloc((WTF *)(v3 + 20));
    v7 = this + 20;
    *(_DWORD *)this = 2;
    *(_DWORD *)(this + 4) = v3;
    *(_QWORD *)(this + 8) = this + 20;
    *(_DWORD *)(this + 16) = 4;
    *a3 = this;
    if ((_DWORD)v4)
    {
      v8 = 0;
      do
      {
        *(_BYTE *)(v7 + v8) = *(_BYTE *)(*(_QWORD *)(v5 + 8) + v8);
        ++v8;
      }
      while (v4 != v8);
    }
    if (*(_DWORD *)(v5 + 4) > v4)
    {
      v4 = v4;
      do
      {
        while (1)
        {
          v9 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 8) + v4);
          if ((*(char *)(*(_QWORD *)(v5 + 8) + v4) & 0x80000000) == 0)
            break;
          this = MEMORY[0x19AEBC048](v9);
          *(_BYTE *)(v7 + v4++) = this;
          if (v4 >= *(unsigned int *)(v5 + 4))
            return this;
        }
        this = WTF::asciiCaseFoldTable[v9];
        *(_BYTE *)(v7 + v4++) = this;
      }
      while (v4 < *(unsigned int *)(v5 + 4));
    }
  }
  return this;
}

void WTF::StringImpl::convertToUppercaseWithoutLocale(WTF::StringImpl *this@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v9;
  int v12;
  unint64_t v13;
  WTF *v14;
  unint64_t v15;
  WTF *v16;
  WTF *v17;
  __int128 v18;
  char *v19;
  int8x16_t v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  char v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  int v39;
  WTF *v40;
  unint64_t v41;
  unint64_t v42;
  WTF *v43;
  WTF *v44;
  __int16 v45;
  int *v46;
  UChar *v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint16x8_t *v52;
  int8x16_t *v53;
  int8x16_t v54;
  int16x8_t v55;
  uint16x8_t v56;
  unint64_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int16x8_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int v66;
  __int16 v67;
  int32_t v68;
  int32_t v69;
  int *v70;
  UChar *v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t i;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF *v92;
  uint8x8_t *v93;
  uint16x8_t *v94;
  unint64_t v95;
  uint8x16_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  uint8x8_t *v99;
  uint16x8_t *v100;
  unint64_t v101;
  uint8x8_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  UErrorCode pErrorCode;
  WTF *v120;
  unint64_t v121;
  _BYTE v122[64];
  WTF *v123;
  unint64_t v124;
  int8x16x2_t v125;
  int8x16x2_t v126;
  int8x16x2_t v127;

  v9 = *((unsigned int *)this + 1);
  if ((v9 & 0x80000000) != 0)
  {
    __break(0xC471u);
    goto LABEL_107;
  }
  if ((*((_BYTE *)this + 16) & 4) == 0)
  {
LABEL_3:
    v12 = *((_DWORD *)this + 4);
    v13 = *((unsigned int *)this + 1);
    v14 = (WTF *)*((_QWORD *)this + 1);
    v120 = (WTF *)v122;
    v121 = 32;
    v123 = 0;
    v124 = 0;
    if ((v12 & 4) == 0)
    {
LABEL_39:
      v123 = v14;
      v124 = v13;
      if (!v13)
      {
        v47 = 0;
        v46 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
        if ((int)v9 < 1)
          goto LABEL_83;
LABEL_44:
        v48 = 0;
        v49 = 0;
        v50 = v9 - 1;
        if (v13 < v9 - 1)
          v50 = v13;
        if (v50 >= 0x10 && (unint64_t)((char *)v47 - (char *)v14) >= 0x20)
        {
          v51 = (v50 + 1) & 0xF;
          if (!v51)
            v51 = 16;
          v49 = v50 + 1 - v51;
          v52 = (uint16x8_t *)((char *)v14 + 16);
          v53 = (int8x16_t *)(v47 + 8);
          v54 = 0uLL;
          v55.i64[0] = 0x60006000600060;
          v55.i64[1] = 0x60006000600060;
          v56.i64[0] = 0x1A001A001A001ALL;
          v56.i64[1] = 0x1A001A001A001ALL;
          v57 = v49;
          v58 = 0uLL;
          v59 = 0uLL;
          v60 = 0uLL;
          do
          {
            v61 = (int16x8_t)v52[-1];
            v58 = vorrq_s8(v58, (int8x16_t)vmovl_high_u16((uint16x8_t)v61));
            v54 = vorrq_s8(v54, (int8x16_t)vmovl_u16(*(uint16x4_t *)v61.i8));
            v60 = vorrq_s8(v60, (int8x16_t)vmovl_high_u16(*v52));
            v59 = vorrq_s8(v59, (int8x16_t)vmovl_u16(*(uint16x4_t *)v52->i8));
            v62 = (int8x16_t)vcgtq_u16(v56, (uint16x8_t)vaddq_s16(v61, v55));
            v63 = (int8x16_t)vcgtq_u16(v56, (uint16x8_t)vaddq_s16(*(int16x8_t *)v52, v55));
            v64 = vandq_s8(vornq_s8((int8x16_t)(*(_OWORD *)&v63 & __PAIR128__(0xFFDFFFDFFFDFFFDFLL, 0xFFDFFFDFFFDFFFDFLL)), v63), *(int8x16_t *)v52);
            v53[-1] = vandq_s8(vornq_s8((int8x16_t)(*(_OWORD *)&v62 & __PAIR128__(0xFFDFFFDFFFDFFFDFLL, 0xFFDFFFDFFFDFFFDFLL)), v62), (int8x16_t)v61);
            *v53 = v64;
            v52 += 2;
            v53 += 2;
            v57 -= 16;
          }
          while (v57);
          v65 = vorrq_s8(vorrq_s8(v59, v54), vorrq_s8(v60, v58));
          *(int8x8_t *)v65.i8 = vorr_s8(*(int8x8_t *)v65.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL));
          v48 = v65.i32[0] | v65.i32[1];
        }
        do
        {
          if (v13 == v49)
            goto LABEL_103;
          v66 = *((unsigned __int16 *)v14 + v49);
          v48 |= v66;
          if ((v66 - 97) >= 0x1A)
            v67 = -1;
          else
            v67 = -33;
          v47[v49++] = v67 & v66;
        }
        while (v9 != v49);
        if (v48 < 0x80)
          goto LABEL_83;
        pErrorCode = U_ZERO_ERROR;
        v68 = u_strToUpper(v47, v9, (const UChar *)v14, v13, "", &pErrorCode);
        v69 = v68;
        if (pErrorCode <= U_ZERO_ERROR && v68 == (_DWORD)v9)
          goto LABEL_83;
        if (!v68)
        {
          v71 = 0;
          v70 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
          v72 = *v46 - 2;
          if (*v46 != 2)
            goto LABEL_64;
          goto LABEL_77;
        }
        if (v68 < 0x7FFFFFF0)
        {
          v70 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v68 + 20));
          v71 = (UChar *)(v70 + 5);
          *v70 = 2;
          v70[1] = v69;
          *((_QWORD *)v70 + 1) = v70 + 5;
          v70[4] = 0;
          v72 = *v46 - 2;
          if (*v46 != 2)
          {
LABEL_64:
            *v46 = v72;
LABEL_78:
            pErrorCode = U_ZERO_ERROR;
            u_strToUpper(v71, v69, (const UChar *)v14, v13, "", &pErrorCode);
            if (pErrorCode > U_ZERO_ERROR)
            {
              *(_DWORD *)this += 2;
              *a9 = this;
              if (*v70 == 2)
              {
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v70, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
                v92 = v120;
                if (v122 == (_BYTE *)v120)
                  return;
              }
              else
              {
                *v70 -= 2;
                v92 = v120;
                if (v122 == (_BYTE *)v120)
                  return;
              }
              goto LABEL_84;
            }
            v46 = v70;
LABEL_83:
            *a9 = v46;
            v92 = v120;
            if (v122 == (_BYTE *)v120)
              return;
LABEL_84:
            if (v92)
            {
              v120 = 0;
              LODWORD(v121) = 0;
              WTF::fastFree((unint64_t)v92, a2, a3, a4, a5, a6, a7, a8);
            }
            return;
          }
LABEL_77:
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v46, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
          goto LABEL_78;
        }
        __break(0xC471u);
LABEL_107:
        JUMPOUT(0x197B05E58);
      }
      if (v13 < 0x7FFFFFF0)
      {
        v46 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v13 + 20));
        v47 = (UChar *)(v46 + 5);
        *v46 = 2;
        v46[1] = v13;
        *((_QWORD *)v46 + 1) = v46 + 5;
        v46[4] = 0;
        if ((int)v9 < 1)
          goto LABEL_83;
        goto LABEL_44;
      }
      __break(0xC471u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(0xC471u);
      JUMPOUT(0x197B05E68);
    }
    if (v13 <= 0x20)
    {
      HIDWORD(v121) = v13;
      v16 = (WTF *)v122;
      v17 = (WTF *)v122;
    }
    else
    {
      if (v13 <= 0x29)
        v15 = 41;
      else
        v15 = v13;
      if (v15 >> 31)
        goto LABEL_104;
      v16 = (WTF *)WTF::fastMalloc((WTF *)(2 * v15));
      v120 = v16;
      v121 = __PAIR64__(v13, v15);
      if (v13 < 0x40)
      {
        v17 = v16;
        v40 = (WTF *)((char *)v16 + 2 * v13);
        if (v16 != v40)
          goto LABEL_33;
        goto LABEL_38;
      }
      v17 = (WTF *)((char *)v16 + 2 * (v13 & 0xFFFFFFC0));
      v18 = 0uLL;
      v19 = (char *)v16;
      do
      {
        v125.val[0] = *(int8x16_t *)v14;
        v20 = *((int8x16_t *)v14 + 1);
        v126.val[0] = (int8x16_t)*((_OWORD *)v14 + 2);
        v21 = *((_OWORD *)v14 + 3);
        v14 = (WTF *)((char *)v14 + 64);
        v22 = v21;
        v126.val[1] = 0uLL;
        v127.val[0] = v20;
        v125.val[1] = 0uLL;
        v23 = v19;
        vst2q_s8(v23, v125);
        v23 += 32;
        v127.val[1] = 0uLL;
        vst2q_s8(v23, v127);
        v24 = v19 + 64;
        vst2q_s8(v24, v126);
        v25 = v19 + 96;
        vst2q_s8(v25, *(int8x16x2_t *)(&v18 - 1));
        v19 += 128;
      }
      while (v19 != (char *)v17);
    }
    v40 = (WTF *)((char *)v16 + 2 * v13);
    if (v17 != v40)
    {
LABEL_33:
      v41 = v40 - v17 - 2;
      if (v41 < 0xE
        || (v42 = (WTF *)((char *)v16 + 2 * v13) - v17 - 2, v17 < (WTF *)((char *)v14 + (v42 >> 1) + 1))
        && v14 < (WTF *)((char *)v17 + (v42 & 0xFFFFFFFFFFFFFFFELL) + 2))
      {
        v43 = v17;
        v44 = v14;
        goto LABEL_37;
      }
      v73 = (v41 >> 1) + 1;
      if (v41 >= 0x3E)
      {
        v74 = v73 & 0xFFFFFFFFFFFFFFE0;
        v93 = (uint8x8_t *)((char *)v14 + 16);
        v94 = (uint16x8_t *)((char *)v17 + 32);
        v95 = v73 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v96 = *(uint8x16_t *)v93[-2].i8;
          v97 = vmovl_u8(*v93);
          v98 = vmovl_high_u8(*(uint8x16_t *)v93->i8);
          v94[-2] = vmovl_u8(*(uint8x8_t *)v96.i8);
          v94[-1] = vmovl_high_u8(v96);
          *v94 = v97;
          v94[1] = v98;
          v94 += 4;
          v93 += 4;
          v95 -= 32;
        }
        while (v95);
        if (v73 == v74)
          goto LABEL_38;
        if ((v73 & 0x18) == 0)
        {
          v44 = (WTF *)((char *)v14 + v74);
          v43 = (WTF *)((char *)v17 + 2 * v74);
          do
          {
LABEL_37:
            v45 = *(unsigned __int8 *)v44;
            v44 = (WTF *)((char *)v44 + 1);
            *(_WORD *)v43 = v45;
            v43 = (WTF *)((char *)v43 + 2);
          }
          while (v43 != v40);
          goto LABEL_38;
        }
      }
      else
      {
        v74 = 0;
      }
      v43 = (WTF *)((char *)v17 + 2 * (v73 & 0xFFFFFFFFFFFFFFF8));
      v44 = (WTF *)((char *)v14 + (v73 & 0xFFFFFFFFFFFFFFF8));
      v99 = (uint8x8_t *)((char *)v14 + v74);
      v100 = (uint16x8_t *)((char *)v17 + 2 * v74);
      v101 = v74 - (v73 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v102 = *v99++;
        *v100++ = vmovl_u8(v102);
        v101 += 8;
      }
      while (v101);
      if (v73 == (v73 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_38;
      goto LABEL_37;
    }
LABEL_38:
    v14 = v120;
    v13 = HIDWORD(v121);
    goto LABEL_39;
  }
  if (!(_DWORD)v9)
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a9 = &WTF::StringImpl::s_emptyAtomString;
    return;
  }
  v26 = WTF::fastCompactMalloc((WTF *)(v9 + 20));
  v27 = (WTF::StringImpl *)v26;
  v28 = 0;
  v29 = 0;
  *(_DWORD *)v26 = 2;
  *(_DWORD *)(v26 + 4) = v9;
  *(_QWORD *)(v26 + 8) = v26 + 20;
  *(_DWORD *)(v26 + 16) = 4;
  *a9 = v26;
  do
  {
    v30 = *(unsigned __int8 *)(*((_QWORD *)this + 1) + v28);
    v29 |= v30;
    if ((v30 - 97) >= 0x1A)
      v31 = -1;
    else
      v31 = -33;
    *(_BYTE *)(v26 + v28++ + 20) = v31 & v30;
  }
  while (v9 != v28);
  if (v29 >= 0x80)
  {
    v32 = 0;
    v33 = 0;
    while (1)
    {
      if (*(unsigned __int8 *)(*((_QWORD *)this + 1) + v32) == 223)
        ++v33;
      v34 = MEMORY[0x19AEBC054]();
      if ((v34 & 0xFF00) != 0)
        break;
      *((_BYTE *)v27 + v32++ + 20) = v34;
      if (v9 == v32)
      {
        if (!v33)
          return;
        v35 = *((_DWORD *)this + 1);
        v36 = (v35 + v33);
        if (v35 + v33)
        {
          if ((v36 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x197B05E70);
          }
          v37 = WTF::fastCompactMalloc((WTF *)(v36 + 20));
          v38 = (_BYTE *)(v37 + 20);
          *(_DWORD *)v37 = 2;
          *(_DWORD *)(v37 + 4) = v36;
          *(_QWORD *)(v37 + 8) = v37 + 20;
          *(_DWORD *)(v37 + 16) = 4;
          *a9 = v37;
          v39 = *(_DWORD *)v27 - 2;
          if (*(_DWORD *)v27 != 2)
          {
LABEL_29:
            *(_DWORD *)v27 = v39;
LABEL_71:
            for (i = 0; i != v9; ++i)
            {
              while (*(unsigned __int8 *)(*((_QWORD *)this + 1) + i) != 223)
              {
                *v38 = MEMORY[0x19AEBC054]();
                ++i;
                ++v38;
                if (v9 == i)
                  return;
              }
              v38[1] = 83;
              *v38 = 83;
              v38 += 2;
            }
            return;
          }
        }
        else
        {
          v38 = 0;
          WTF::StringImpl::s_emptyAtomString += 2;
          *a9 = &WTF::StringImpl::s_emptyAtomString;
          v39 = *(_DWORD *)v27 - 2;
          if (*(_DWORD *)v27 != 2)
            goto LABEL_29;
        }
        WTF::StringImpl::~StringImpl(v27, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
        goto LABEL_71;
      }
    }
    *a9 = 0;
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
    goto LABEL_3;
  }
}

void WTF::StringImpl::convertToLowercaseWithLocale(WTF **this@<X0>, const WTF::AtomString *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  unint64_t v13;
  int v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  __int128 v19;
  char *v20;
  int8x16_t v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  WTF *v28;
  unint64_t v29;
  unint64_t v30;
  WTF *v31;
  WTF *v32;
  __int16 v33;
  int *v34;
  UChar *v35;
  int32_t v36;
  int32_t v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int32_t v45;
  int *v47;
  UChar *v48;
  int v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint8x8_t *v70;
  uint16x8_t *v71;
  unint64_t v72;
  uint8x16_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  uint8x8_t *v76;
  uint16x8_t *v77;
  unint64_t v78;
  uint8x8_t v79;
  UErrorCode pErrorCode;
  WTF *v81;
  unint64_t v82;
  _BYTE v83[64];
  WTF *v84;
  unint64_t v85;
  int8x16x2_t v86;
  int8x16x2_t v87;
  int8x16x2_t v88;

  v5 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_80;
  v6 = *(_DWORD *)(v5 + 4);
  if (!v6)
    goto LABEL_80;
  v7 = *(_DWORD *)(v5 + 16);
  v8 = *(unsigned __int8 **)(v5 + 8);
  if ((v7 & 4) != 0)
  {
    v9 = *v8;
    if (v6 >= 2)
    {
      v10 = v8[1];
      v11 = v9 | 0x20;
      if (v11 == 97)
        goto LABEL_9;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  v9 = *(unsigned __int16 *)v8;
  if (v6 <= 1)
  {
LABEL_11:
    v10 = 0;
    v11 = v9 | 0x20;
    if (v11 == 97)
      goto LABEL_9;
    goto LABEL_12;
  }
  v10 = *((unsigned __int16 *)v8 + 1);
  v11 = v9 | 0x20;
  if (v11 == 97)
  {
LABEL_9:
    if ((v10 & 0xFFFFFFDF) != 0x5A)
      goto LABEL_65;
    goto LABEL_14;
  }
LABEL_12:
  if (v11 != 116 || (v10 & 0xFFFFFFDF) != 0x52)
    goto LABEL_65;
LABEL_14:
  if (v6 != 2)
  {
    if (v6 < 3 || ((v7 & 4) != 0 ? (v27 = v8[2]) : (v27 = *((unsigned __int16 *)v8 + 2)), v27 != 45))
    {
LABEL_65:
      if ((v7 & 4) != 0)
      {
        if (v6 < 2 || (*v8 & 0xDF) != 0x4C || (v8[1] & 0xDF) != 0x54)
          goto LABEL_80;
      }
      else if (v6 < 2 || (*(_WORD *)v8 & 0xFFDF) != 0x4C || (*((_WORD *)v8 + 1) & 0xFFDF) != 0x54)
      {
LABEL_80:
        WTF::StringImpl::convertToLowercaseWithoutLocale((WTF::StringImpl *)this, a3);
        return;
      }
      if (v6 != 2)
      {
        v67 = (v7 & 4) != 0 ? v8[2] : *((unsigned __int16 *)v8 + 2);
        if (v67 != 45)
          goto LABEL_80;
      }
      v12 = "lt";
      v13 = *((unsigned int *)this + 1);
      if ((v13 & 0x80000000) != 0)
        goto LABEL_79;
      goto LABEL_16;
    }
  }
  v12 = "tr";
  v13 = *((unsigned int *)this + 1);
  if ((v13 & 0x80000000) != 0)
  {
LABEL_79:
    __break(0xC471u);
    goto LABEL_94;
  }
LABEL_16:
  v14 = *((_DWORD *)this + 4);
  v15 = this[1];
  v81 = (WTF *)v83;
  v82 = 32;
  v84 = 0;
  v85 = 0;
  if ((v14 & 4) == 0)
    goto LABEL_36;
  if (v13 <= 0x20)
  {
    HIDWORD(v82) = v13;
    v17 = (WTF *)v83;
    v18 = (WTF *)v83;
  }
  else
  {
    if (v13 <= 0x29)
      v16 = 41;
    else
      v16 = v13;
    v17 = (WTF *)WTF::fastMalloc((WTF *)(2 * v16));
    v81 = v17;
    v82 = __PAIR64__(v13, v16);
    if (v13 < 0x40)
    {
      v18 = v17;
      v28 = (WTF *)((char *)v17 + 2 * v13);
      if (v17 != v28)
        goto LABEL_30;
      goto LABEL_35;
    }
    v18 = (WTF *)((char *)v17 + 2 * (v13 & 0xFFFFFFC0));
    v19 = 0uLL;
    v20 = (char *)v17;
    do
    {
      v86.val[0] = *(int8x16_t *)v15;
      v21 = *((int8x16_t *)v15 + 1);
      v87.val[0] = (int8x16_t)*((_OWORD *)v15 + 2);
      v22 = *((_OWORD *)v15 + 3);
      v15 = (WTF *)((char *)v15 + 64);
      v23 = v22;
      v87.val[1] = 0uLL;
      v88.val[0] = v21;
      v86.val[1] = 0uLL;
      v24 = v20;
      vst2q_s8(v24, v86);
      v24 += 32;
      v88.val[1] = 0uLL;
      vst2q_s8(v24, v88);
      v25 = v20 + 64;
      vst2q_s8(v25, v87);
      v26 = v20 + 96;
      vst2q_s8(v26, *(int8x16x2_t *)(&v19 - 1));
      v20 += 128;
    }
    while (v20 != (char *)v18);
  }
  v28 = (WTF *)((char *)v17 + 2 * v13);
  if (v18 != v28)
  {
LABEL_30:
    v29 = v28 - v18 - 2;
    if (v29 < 0xE
      || (v30 = (WTF *)((char *)v17 + 2 * v13) - v18 - 2, v18 < (WTF *)((char *)v15 + (v30 >> 1) + 1))
      && v15 < (WTF *)((char *)v18 + (v30 & 0xFFFFFFFFFFFFFFFELL) + 2))
    {
      v31 = v18;
      v32 = v15;
      goto LABEL_34;
    }
    v68 = (v29 >> 1) + 1;
    if (v29 >= 0x3E)
    {
      v69 = v68 & 0xFFFFFFFFFFFFFFE0;
      v70 = (uint8x8_t *)((char *)v15 + 16);
      v71 = (uint16x8_t *)((char *)v18 + 32);
      v72 = v68 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v73 = *(uint8x16_t *)v70[-2].i8;
        v74 = vmovl_u8(*v70);
        v75 = vmovl_high_u8(*(uint8x16_t *)v70->i8);
        v71[-2] = vmovl_u8(*(uint8x8_t *)v73.i8);
        v71[-1] = vmovl_high_u8(v73);
        *v71 = v74;
        v71[1] = v75;
        v71 += 4;
        v70 += 4;
        v72 -= 32;
      }
      while (v72);
      if (v68 == v69)
        goto LABEL_35;
      if ((v68 & 0x18) == 0)
      {
        v32 = (WTF *)((char *)v15 + v69);
        v31 = (WTF *)((char *)v18 + 2 * v69);
        do
        {
LABEL_34:
          v33 = *(unsigned __int8 *)v32;
          v32 = (WTF *)((char *)v32 + 1);
          *(_WORD *)v31 = v33;
          v31 = (WTF *)((char *)v31 + 2);
        }
        while (v31 != v28);
        goto LABEL_35;
      }
    }
    else
    {
      v69 = 0;
    }
    v31 = (WTF *)((char *)v18 + 2 * (v68 & 0xFFFFFFFFFFFFFFF8));
    v32 = (WTF *)((char *)v15 + (v68 & 0xFFFFFFFFFFFFFFF8));
    v76 = (uint8x8_t *)((char *)v15 + v69);
    v77 = (uint16x8_t *)((char *)v18 + 2 * v69);
    v78 = v69 - (v68 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v79 = *v76++;
      *v77++ = vmovl_u8(v79);
      v78 += 8;
    }
    while (v78);
    if (v68 == (v68 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_35;
    goto LABEL_34;
  }
LABEL_35:
  v15 = v81;
  v13 = HIDWORD(v82);
LABEL_36:
  v84 = v15;
  v85 = v13;
  if (v13)
  {
    if (v13 >= 0x7FFFFFF0)
    {
      __break(0xC471u);
      JUMPOUT(0x197B063BCLL);
    }
    v34 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v13 + 20));
    v35 = (UChar *)(v34 + 5);
    *v34 = 2;
    v34[1] = v13;
    *((_QWORD *)v34 + 1) = v34 + 5;
    v34[4] = 0;
    v36 = v13;
  }
  else
  {
    v36 = 0;
    v35 = 0;
    v34 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  pErrorCode = U_ZERO_ERROR;
  v37 = u_strToLower(v35, v36, (const UChar *)v15, v36, v12, &pErrorCode);
  v45 = v37;
  if (pErrorCode <= U_ZERO_ERROR && v13 == v37)
  {
LABEL_55:
    *a3 = (uint64_t)v34;
    v58 = v81;
    if (v83 == (_BYTE *)v81)
      return;
    goto LABEL_56;
  }
  if (v37)
  {
    if (v37 >= 0x7FFFFFF0)
    {
      __break(0xC471u);
LABEL_94:
      JUMPOUT(0x197B062E8);
    }
    v47 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v37 + 20));
    v48 = (UChar *)(v47 + 5);
    *v47 = 2;
    v47[1] = v45;
    *((_QWORD *)v47 + 1) = v47 + 5;
    v47[4] = 0;
    v49 = *v34 - 2;
    if (*v34 != 2)
      goto LABEL_47;
  }
  else
  {
    v48 = 0;
    v47 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    v49 = *v34 - 2;
    if (*v34 != 2)
    {
LABEL_47:
      *v34 = v49;
      goto LABEL_50;
    }
  }
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v34, v38, v39, v40, v41, v42, v43, v44);
  WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
LABEL_50:
  pErrorCode = U_ZERO_ERROR;
  u_strToLower(v48, v45, (const UChar *)v15, v36, v12, &pErrorCode);
  if (pErrorCode <= U_ZERO_ERROR)
  {
    v34 = v47;
    goto LABEL_55;
  }
  *(_DWORD *)this += 2;
  *a3 = (uint64_t)this;
  if (*v47 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v47, v38, v39, v40, v41, v42, v43, v44);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
    v58 = v81;
    if (v83 == (_BYTE *)v81)
      return;
  }
  else
  {
    *v47 -= 2;
    v58 = v81;
    if (v83 == (_BYTE *)v81)
      return;
  }
LABEL_56:
  if (v58)
  {
    v81 = 0;
    LODWORD(v82) = 0;
    WTF::fastFree((unint64_t)v58, v38, v39, v40, v41, v42, v43, v44);
  }
}

void WTF::StringImpl::convertToUppercaseWithLocale(WTF::StringImpl *this@<X0>, const WTF::AtomString *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>, float a10@<S2>)
{
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int16x8_t *v21;
  int16x8_t v22;
  int16x8_t *v23;
  int8x16_t v24;
  int16x8_t *v25;
  char *v26;
  int16x8_t v27;
  __int16 *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  const char *v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  unint64_t v39;
  int v40;
  WTF *v41;
  uint64_t v42;
  WTF *v43;
  WTF *v44;
  __int128 v45;
  char *v46;
  int8x16_t v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  char *v51;
  char *v52;
  WTF *v53;
  unint64_t v54;
  unint64_t v55;
  WTF *v56;
  WTF *v57;
  __int16 v58;
  int *v59;
  UChar *v60;
  int32_t v61;
  int32_t v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int32_t v70;
  int *v72;
  UChar *v73;
  int v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint8x8_t *v94;
  uint16x8_t *v95;
  unint64_t v96;
  uint8x16_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  uint8x8_t *v100;
  uint16x8_t *v101;
  unint64_t v102;
  uint8x8_t v103;
  UErrorCode pErrorCode;
  WTF *v105;
  unint64_t v106;
  _BYTE v107[64];
  WTF *v108;
  unint64_t v109;
  int8x16x2_t v110;
  int8x16x2_t v111;
  int8x16x2_t v112;

  v12 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_87;
  v13 = *(_DWORD *)(v12 + 4);
  if (!v13)
    goto LABEL_87;
  v14 = *(_DWORD *)(v12 + 16);
  v15 = *(unsigned __int8 **)(v12 + 8);
  if ((v14 & 4) != 0)
  {
    v16 = *v15;
    if (v13 >= 2)
    {
      v17 = v15[1];
      v18 = v16 | 0x20;
      if (v18 == 97)
        goto LABEL_9;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  v16 = *(unsigned __int16 *)v15;
  if (v13 <= 1)
  {
LABEL_11:
    v17 = 0;
    v18 = v16 | 0x20;
    if (v18 == 97)
      goto LABEL_9;
    goto LABEL_12;
  }
  v17 = *((unsigned __int16 *)v15 + 1);
  v18 = v16 | 0x20;
  if (v18 == 97)
  {
LABEL_9:
    if ((v17 & 0xFFFFFFDF) != 0x5A)
      goto LABEL_47;
    goto LABEL_14;
  }
LABEL_12:
  if (v18 != 116 || (v17 & 0xFFFFFFDF) != 0x52)
    goto LABEL_47;
LABEL_14:
  if (v13 != 2)
  {
    if (v13 < 3)
      goto LABEL_47;
    v30 = (v14 & 4) != 0 ? v15[2] : *((unsigned __int16 *)v15 + 2);
    if (v30 != 45)
      goto LABEL_47;
  }
  v19 = *((_QWORD *)this + 1);
  v20 = *((unsigned int *)this + 1);
  if ((*((_BYTE *)this + 16) & 4) != 0)
  {
    if (!(_DWORD)v20)
      goto LABEL_47;
    v31 = 16;
    if (v20 < 0x10)
      v31 = *((unsigned int *)this + 1);
    v32 = v31;
    v33 = (_BYTE *)*((_QWORD *)this + 1);
    do
    {
      if (*v33 == 105)
        goto LABEL_38;
      ++v33;
      --v32;
    }
    while (v32);
    if (v20 < 0x11)
      goto LABEL_47;
    v33 = memchr((void *)(v19 + v31), 105, v20 - v31);
    if (!v33)
      goto LABEL_47;
LABEL_38:
    v29 = (uint64_t)&v33[-v19];
  }
  else
  {
    if (!(_DWORD)v20)
      goto LABEL_47;
    v21 = (int16x8_t *)(v19 + 2 * v20);
    if (v20 <= 0x1F)
    {
      v35 = 2 * v20;
      v28 = (__int16 *)*((_QWORD *)this + 1);
      while (*v28 != 105)
      {
        ++v28;
        v35 -= 2;
        if (!v35)
          goto LABEL_47;
      }
    }
    else
    {
      v22.i64[0] = 0x69006900690069;
      v22.i64[1] = 0x69006900690069;
      v23 = (int16x8_t *)*((_QWORD *)this + 1);
      do
      {
        v24 = (int8x16_t)vceqq_s16(*v23, v22);
        LOWORD(a10) = vmaxvq_u16((uint16x8_t)v24);
        if (a10 != 0.0)
          goto LABEL_24;
        v25 = v23 + 1;
        v26 = &v23[1].i8[14];
        ++v23;
      }
      while (v26 < (char *)v21);
      if (v25 >= v21)
        goto LABEL_47;
      v27.i64[0] = 0x69006900690069;
      v27.i64[1] = 0x69006900690069;
      v24 = (int8x16_t)vceqq_s16(v21[-1], v27);
      v27.i16[0] = vmaxvq_u16((uint16x8_t)v24);
      if (!v27.i32[0])
        goto LABEL_47;
      v23 = v21 - 1;
LABEL_24:
      v28 = &v23->i16[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v24))];
    }
    if (v28 == (__int16 *)v21)
      goto LABEL_47;
    v29 = ((uint64_t)v28 - v19) >> 1;
  }
  if (v29 != -1)
  {
    v34 = "tr";
    goto LABEL_77;
  }
LABEL_47:
  if ((v14 & 4) != 0)
  {
    v37 = *v15;
    if (v13 < 2 || (v37 & 0xFFFFFFDF) != 0x45)
      goto LABEL_68;
    if ((v15[1] & 0xDF) != 0x4C)
      goto LABEL_61;
  }
  else
  {
    v36 = *(unsigned __int16 *)v15;
    if (v13 < 2 || (v36 & 0xFFFFFFDF) != 0x45)
    {
LABEL_63:
      if (v13 < 2 || (v36 & 0xFFFFFFDF) != 0x4C || (*((_WORD *)v15 + 1) & 0xFFDF) != 0x54)
      {
LABEL_87:
        WTF::StringImpl::convertToUppercaseWithoutLocale(this, a2, a3, a4, a5, a6, a7, a8, a9);
        return;
      }
      goto LABEL_71;
    }
    if ((*((_WORD *)v15 + 1) & 0xFFDF) != 0x4C)
      goto LABEL_61;
  }
  if (v13 == 2)
  {
LABEL_56:
    v34 = "el";
    goto LABEL_77;
  }
  if ((v14 & 4) != 0)
  {
    if (v15[2] == 45)
      goto LABEL_56;
  }
  else if (*((_WORD *)v15 + 2) == 45)
  {
    goto LABEL_56;
  }
LABEL_61:
  if ((v14 & 4) == 0)
  {
    v36 = *(unsigned __int16 *)v15;
    goto LABEL_63;
  }
  v37 = *v15;
LABEL_68:
  if (v13 < 2 || (v37 & 0xFFFFFFDF) != 0x4C || (v15[1] & 0xDF) != 0x54)
    goto LABEL_87;
LABEL_71:
  if (v13 != 2)
  {
    v38 = (v14 & 4) != 0 ? v15[2] : *((unsigned __int16 *)v15 + 2);
    if (v38 != 45)
      goto LABEL_87;
  }
  v34 = "lt";
LABEL_77:
  v39 = *((unsigned int *)this + 1);
  if ((v39 & 0x80000000) != 0)
  {
    __break(0xC471u);
    goto LABEL_137;
  }
  v40 = *((_DWORD *)this + 4);
  v41 = (WTF *)*((_QWORD *)this + 1);
  v105 = (WTF *)v107;
  v106 = 32;
  v108 = 0;
  v109 = 0;
  if ((v40 & 4) != 0)
  {
    if (v39 <= 0x20)
    {
      HIDWORD(v106) = v39;
      v43 = (WTF *)v107;
      v44 = (WTF *)v107;
    }
    else
    {
      if (v39 <= 0x29)
        v42 = 41;
      else
        v42 = v39;
      v43 = (WTF *)WTF::fastMalloc((WTF *)(2 * v42));
      v105 = v43;
      v106 = __PAIR64__(v39, v42);
      if (v39 < 0x40)
      {
        v44 = v43;
        v53 = (WTF *)((char *)v43 + 2 * v39);
        if (v43 != v53)
          goto LABEL_90;
        goto LABEL_95;
      }
      v44 = (WTF *)((char *)v43 + 2 * (v39 & 0xFFFFFFC0));
      v45 = 0uLL;
      v46 = (char *)v43;
      do
      {
        v110.val[0] = *(int8x16_t *)v41;
        v47 = *((int8x16_t *)v41 + 1);
        v111.val[0] = (int8x16_t)*((_OWORD *)v41 + 2);
        v48 = *((_OWORD *)v41 + 3);
        v41 = (WTF *)((char *)v41 + 64);
        v49 = v48;
        v111.val[1] = 0uLL;
        v112.val[0] = v47;
        v110.val[1] = 0uLL;
        v50 = v46;
        vst2q_s8(v50, v110);
        v50 += 32;
        v112.val[1] = 0uLL;
        vst2q_s8(v50, v112);
        v51 = v46 + 64;
        vst2q_s8(v51, v111);
        v52 = v46 + 96;
        vst2q_s8(v52, *(int8x16x2_t *)(&v45 - 1));
        v46 += 128;
      }
      while (v46 != (char *)v44);
    }
    v53 = (WTF *)((char *)v43 + 2 * v39);
    if (v44 != v53)
    {
LABEL_90:
      v54 = v53 - v44 - 2;
      if (v54 < 0xE
        || (v55 = (WTF *)((char *)v43 + 2 * v39) - v44 - 2, v44 < (WTF *)((char *)v41 + (v55 >> 1) + 1))
        && v41 < (WTF *)((char *)v44 + (v55 & 0xFFFFFFFFFFFFFFFELL) + 2))
      {
        v56 = v44;
        v57 = v41;
        goto LABEL_94;
      }
      v92 = (v54 >> 1) + 1;
      if (v54 >= 0x3E)
      {
        v93 = v92 & 0xFFFFFFFFFFFFFFE0;
        v94 = (uint8x8_t *)((char *)v41 + 16);
        v95 = (uint16x8_t *)((char *)v44 + 32);
        v96 = v92 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v97 = *(uint8x16_t *)v94[-2].i8;
          v98 = vmovl_u8(*v94);
          v99 = vmovl_high_u8(*(uint8x16_t *)v94->i8);
          v95[-2] = vmovl_u8(*(uint8x8_t *)v97.i8);
          v95[-1] = vmovl_high_u8(v97);
          *v95 = v98;
          v95[1] = v99;
          v95 += 4;
          v94 += 4;
          v96 -= 32;
        }
        while (v96);
        if (v92 == v93)
          goto LABEL_95;
        if ((v92 & 0x18) == 0)
        {
          v57 = (WTF *)((char *)v41 + v93);
          v56 = (WTF *)((char *)v44 + 2 * v93);
          do
          {
LABEL_94:
            v58 = *(unsigned __int8 *)v57;
            v57 = (WTF *)((char *)v57 + 1);
            *(_WORD *)v56 = v58;
            v56 = (WTF *)((char *)v56 + 2);
          }
          while (v56 != v53);
          goto LABEL_95;
        }
      }
      else
      {
        v93 = 0;
      }
      v56 = (WTF *)((char *)v44 + 2 * (v92 & 0xFFFFFFFFFFFFFFF8));
      v57 = (WTF *)((char *)v41 + (v92 & 0xFFFFFFFFFFFFFFF8));
      v100 = (uint8x8_t *)((char *)v41 + v93);
      v101 = (uint16x8_t *)((char *)v44 + 2 * v93);
      v102 = v93 - (v92 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v103 = *v100++;
        *v101++ = vmovl_u8(v103);
        v102 += 8;
      }
      while (v102);
      if (v92 == (v92 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_95;
      goto LABEL_94;
    }
LABEL_95:
    v41 = v105;
    v39 = HIDWORD(v106);
  }
  v108 = v41;
  v109 = v39;
  if (v39)
  {
    if (v39 >= 0x7FFFFFF0)
    {
      __break(0xC471u);
      JUMPOUT(0x197B06AB8);
    }
    v59 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v39 + 20));
    v60 = (UChar *)(v59 + 5);
    *v59 = 2;
    v59[1] = v39;
    *((_QWORD *)v59 + 1) = v59 + 5;
    v59[4] = 0;
    v61 = v39;
  }
  else
  {
    v61 = 0;
    v60 = 0;
    v59 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  pErrorCode = U_ZERO_ERROR;
  v62 = u_strToUpper(v60, v61, (const UChar *)v41, v61, v34, &pErrorCode);
  v70 = v62;
  if (pErrorCode <= U_ZERO_ERROR && v39 == v62)
  {
LABEL_115:
    *a9 = v59;
    v83 = v105;
    if (v107 == (_BYTE *)v105)
      return;
    goto LABEL_116;
  }
  if (!v62)
  {
    v73 = 0;
    v72 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    v74 = *v59 - 2;
    if (*v59 != 2)
      goto LABEL_107;
    goto LABEL_109;
  }
  if (v62 >= 0x7FFFFFF0)
  {
    __break(0xC471u);
LABEL_137:
    JUMPOUT(0x197B06AB0);
  }
  v72 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v62 + 20));
  v73 = (UChar *)(v72 + 5);
  *v72 = 2;
  v72[1] = v70;
  *((_QWORD *)v72 + 1) = v72 + 5;
  v72[4] = 0;
  v74 = *v59 - 2;
  if (*v59 != 2)
  {
LABEL_107:
    *v59 = v74;
    goto LABEL_110;
  }
LABEL_109:
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v59, v63, v64, v65, v66, v67, v68, v69);
  WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
LABEL_110:
  pErrorCode = U_ZERO_ERROR;
  u_strToUpper(v73, v70, (const UChar *)v41, v61, v34, &pErrorCode);
  if (pErrorCode <= U_ZERO_ERROR)
  {
    v59 = v72;
    goto LABEL_115;
  }
  *(_DWORD *)this += 2;
  *a9 = (int *)this;
  if (*v72 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v72, v63, v64, v65, v66, v67, v68, v69);
    WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
    v83 = v105;
    if (v107 == (_BYTE *)v105)
      return;
  }
  else
  {
    *v72 -= 2;
    v83 = v105;
    if (v107 == (_BYTE *)v105)
      return;
  }
LABEL_116:
  if (v83)
  {
    v105 = 0;
    LODWORD(v106) = 0;
    WTF::fastFree((unint64_t)v83, v63, v64, v65, v66, v67, v68, v69);
  }
}

void WTF::StringImpl::foldCase(WTF::StringImpl *this@<X0>, uint64_t *a2@<X8>)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  size_t v17;
  char v18;
  size_t v19;
  int v20;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  __int128 v25;
  char *v26;
  int8x16_t v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  WTF *v37;
  unint64_t v38;
  unint64_t v39;
  WTF *v40;
  WTF *v41;
  __int16 v42;
  uint64_t v43;
  int32_t v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int32_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint8x8_t *v80;
  uint16x8_t *v81;
  unint64_t v82;
  uint8x16_t v83;
  uint16x8_t v84;
  uint16x8_t v85;
  uint8x8_t *v86;
  uint16x8_t *v87;
  unint64_t v88;
  uint8x8_t v89;
  UErrorCode pErrorCode;
  WTF *v91;
  unint64_t v92;
  _BYTE v93[64];
  WTF *v94;
  unint64_t v95;
  int8x16x2_t v96;
  int8x16x2_t v97;
  int8x16x2_t v98;

  v4 = *((_DWORD *)this + 4);
  v5 = *((unsigned int *)this + 1);
  if ((v4 & 4) == 0)
  {
    if (!(_DWORD)v5)
      goto LABEL_19;
    v6 = 0;
    v7 = 0;
    v8 = (WTF *)*((_QWORD *)this + 1);
    v9 = 2 * v5;
    v10 = 1;
    do
    {
      v11 = *(unsigned __int16 *)((char *)v8 + v6);
      if ((v11 - 65) <= 0x19)
        v10 = 0;
      v7 |= v11;
      v6 += 2;
    }
    while (v9 != v6);
    if (v7 <= 0x7F)
    {
      if ((v10 & 1) == 0)
      {
        if (v5 <= 0x7FFFFFEF)
        {
          v12 = WTF::fastCompactMalloc((WTF *)(v9 + 20));
          *(_DWORD *)v12 = 2;
          *(_DWORD *)(v12 + 4) = v5;
          *(_QWORD *)(v12 + 8) = v12 + 20;
          *(_DWORD *)(v12 + 16) = 0;
          *a2 = v12;
          v13 = *((unsigned int *)this + 1);
          if ((_DWORD)v13)
          {
            v14 = 0;
            v15 = 2 * v13;
            do
            {
              v16 = *(unsigned __int16 *)(*((_QWORD *)this + 1) + v14);
              *(_WORD *)(v12 + 20 + v14) = v16 | (32 * ((v16 - 65) < 0x1A));
              v14 += 2;
            }
            while (v15 != v14);
          }
          return;
        }
LABEL_97:
        __break(0xC471u);
        JUMPOUT(0x197B0703CLL);
      }
LABEL_19:
      *(_DWORD *)this += 2;
      *a2 = (uint64_t)this;
      return;
    }
LABEL_32:
    if ((v5 & 0x80000000) != 0)
      goto LABEL_97;
    v91 = (WTF *)v93;
    v92 = 32;
    v94 = 0;
    v95 = 0;
    if ((v4 & 4) == 0)
    {
LABEL_62:
      v94 = v8;
      v95 = v5;
      if (v5 >= 0x7FFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x197B0704CLL);
      }
      v43 = WTF::fastCompactMalloc((WTF *)(2 * v5 + 20));
      *(_DWORD *)v43 = 2;
      *(_DWORD *)(v43 + 4) = v5;
      *(_QWORD *)(v43 + 8) = v43 + 20;
      *(_DWORD *)(v43 + 16) = 0;
      pErrorCode = U_ZERO_ERROR;
      v44 = u_strFoldCase((UChar *)(v43 + 20), v5, (const UChar *)v8, v5, 0, &pErrorCode);
      v52 = v44;
      if (pErrorCode > U_ZERO_ERROR || v5 != v44)
      {
        if (v44 > 0x7FFFFFEF)
        {
          __break(0xC471u);
          JUMPOUT(0x197B07054);
        }
        v60 = WTF::fastCompactMalloc((WTF *)(2 * v44 + 20));
        *(_DWORD *)v60 = 2;
        *(_DWORD *)(v60 + 4) = v52;
        *(_QWORD *)(v60 + 8) = v60 + 20;
        *(_DWORD *)(v60 + 16) = 0;
        if (*(_DWORD *)v43 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v43, v53, v54, v55, v56, v57, v58, v59);
          WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
        }
        else
        {
          *(_DWORD *)v43 -= 2;
        }
        pErrorCode = U_ZERO_ERROR;
        u_strFoldCase((UChar *)(v60 + 20), v52, (const UChar *)v8, v5, 0, &pErrorCode);
        if (pErrorCode > U_ZERO_ERROR)
        {
          *(_DWORD *)this += 2;
          *a2 = (uint64_t)this;
          if (*(_DWORD *)v60 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v60, v45, v46, v47, v48, v49, v50, v51);
            WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
            v69 = v91;
            if (v93 == (_BYTE *)v91)
              return;
          }
          else
          {
            *(_DWORD *)v60 -= 2;
            v69 = v91;
            if (v93 == (_BYTE *)v91)
              return;
          }
          goto LABEL_75;
        }
        v43 = v60;
      }
      *a2 = v43;
      v69 = v91;
      if (v93 == (_BYTE *)v91)
        return;
LABEL_75:
      if (v69)
      {
        v91 = 0;
        LODWORD(v92) = 0;
        WTF::fastFree((unint64_t)v69, v45, v46, v47, v48, v49, v50, v51);
      }
      return;
    }
    if (v5 <= 0x20)
    {
      HIDWORD(v92) = v5;
      v23 = (WTF *)v93;
      v24 = (WTF *)v93;
    }
    else
    {
      if (v5 <= 0x29)
        v22 = 41;
      else
        v22 = v5;
      v23 = (WTF *)WTF::fastMalloc((WTF *)(2 * v22));
      v91 = v23;
      v92 = __PAIR64__(v5, v22);
      if (v5 < 0x40)
      {
        v24 = v23;
        v37 = (WTF *)((char *)v23 + 2 * v5);
        if (v23 != v37)
          goto LABEL_56;
        goto LABEL_61;
      }
      v24 = (WTF *)((char *)v23 + 2 * (v5 & 0xFFFFFFC0));
      v25 = 0uLL;
      v26 = (char *)v23;
      do
      {
        v96.val[0] = *(int8x16_t *)v8;
        v27 = *((int8x16_t *)v8 + 1);
        v97.val[0] = (int8x16_t)*((_OWORD *)v8 + 2);
        v28 = *((_OWORD *)v8 + 3);
        v8 = (WTF *)((char *)v8 + 64);
        v29 = v28;
        v97.val[1] = 0uLL;
        v98.val[0] = v27;
        v96.val[1] = 0uLL;
        v30 = v26;
        vst2q_s8(v30, v96);
        v30 += 32;
        v98.val[1] = 0uLL;
        vst2q_s8(v30, v98);
        v31 = v26 + 64;
        vst2q_s8(v31, v97);
        v32 = v26 + 96;
        vst2q_s8(v32, *(int8x16x2_t *)(&v25 - 1));
        v26 += 128;
      }
      while (v26 != (char *)v24);
    }
    v37 = (WTF *)((char *)v23 + 2 * v5);
    if (v24 != v37)
    {
LABEL_56:
      v38 = v37 - v24 - 2;
      if (v38 < 0xE
        || (v39 = (WTF *)((char *)v23 + 2 * v5) - v24 - 2, v24 < (WTF *)((char *)v8 + (v39 >> 1) + 1))
        && v8 < (WTF *)((char *)v24 + (v39 & 0xFFFFFFFFFFFFFFFELL) + 2))
      {
        v40 = v24;
        v41 = v8;
        goto LABEL_60;
      }
      v78 = (v38 >> 1) + 1;
      if (v38 >= 0x3E)
      {
        v79 = v78 & 0xFFFFFFFFFFFFFFE0;
        v80 = (uint8x8_t *)((char *)v8 + 16);
        v81 = (uint16x8_t *)((char *)v24 + 32);
        v82 = v78 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v83 = *(uint8x16_t *)v80[-2].i8;
          v84 = vmovl_u8(*v80);
          v85 = vmovl_high_u8(*(uint8x16_t *)v80->i8);
          v81[-2] = vmovl_u8(*(uint8x8_t *)v83.i8);
          v81[-1] = vmovl_high_u8(v83);
          *v81 = v84;
          v81[1] = v85;
          v81 += 4;
          v80 += 4;
          v82 -= 32;
        }
        while (v82);
        if (v78 == v79)
          goto LABEL_61;
        if ((v78 & 0x18) == 0)
        {
          v41 = (WTF *)((char *)v8 + v79);
          v40 = (WTF *)((char *)v24 + 2 * v79);
          do
          {
LABEL_60:
            v42 = *(unsigned __int8 *)v41;
            v41 = (WTF *)((char *)v41 + 1);
            *(_WORD *)v40 = v42;
            v40 = (WTF *)((char *)v40 + 2);
          }
          while (v40 != v37);
          goto LABEL_61;
        }
      }
      else
      {
        v79 = 0;
      }
      v40 = (WTF *)((char *)v24 + 2 * (v78 & 0xFFFFFFFFFFFFFFF8));
      v41 = (WTF *)((char *)v8 + (v78 & 0xFFFFFFFFFFFFFFF8));
      v86 = (uint8x8_t *)((char *)v8 + v79);
      v87 = (uint16x8_t *)((char *)v24 + 2 * v79);
      v88 = v79 - (v78 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v89 = *v86++;
        *v87++ = vmovl_u8(v89);
        v88 += 8;
      }
      while (v88);
      if (v78 == (v78 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_61;
      goto LABEL_60;
    }
LABEL_61:
    v8 = v91;
    v5 = HIDWORD(v92);
    goto LABEL_62;
  }
  if (!(_DWORD)v5)
    goto LABEL_19;
  v17 = 0;
  v8 = (WTF *)*((_QWORD *)this + 1);
  while ((*((char *)v8 + v17) & 0x80000000) == 0 && *((unsigned __int8 *)v8 + v17) - 65 > 0x19)
  {
    if (v5 == ++v17)
      goto LABEL_19;
  }
  if (v5 > v17)
  {
    v18 = 0;
    v19 = v17;
    while (1)
    {
      v20 = *((unsigned __int8 *)v8 + v19);
      if (v20 == 223)
        v18 = 1;
      if (v20 == 181)
        break;
      ++v19;
      if (v20 == 223 || (_DWORD)v5 == (_DWORD)v19)
        goto LABEL_31;
    }
    v18 = 1;
LABEL_31:
    if ((v18 & 1) != 0)
      goto LABEL_32;
  }
  if ((v5 & 0x80000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197B07044);
  }
  v33 = WTF::fastCompactMalloc((WTF *)(v5 + 20));
  v34 = (_BYTE *)(v33 + 20);
  *(_DWORD *)v33 = 2;
  *(_DWORD *)(v33 + 4) = v5;
  *(_QWORD *)(v33 + 8) = v33 + 20;
  *(_DWORD *)(v33 + 16) = 4;
  *a2 = v33;
  if (!(_DWORD)v17)
    goto LABEL_46;
  v35 = (_BYTE *)*((_QWORD *)this + 1);
  if ((_DWORD)v17 == 1)
  {
    *v34 = *v35;
LABEL_46:
    if (*((_DWORD *)this + 1) > v17)
      goto LABEL_51;
    return;
  }
  memcpy((void *)(v33 + 20), v35, v17);
  if (*((_DWORD *)this + 1) > v17)
  {
    do
    {
LABEL_51:
      while (1)
      {
        v36 = *(unsigned __int8 *)(*((_QWORD *)this + 1) + v17);
        if ((*(char *)(*((_QWORD *)this + 1) + v17) & 0x80000000) == 0)
          break;
        v34[v17++] = MEMORY[0x19AEBBFDC](v36, 0);
        if (v17 >= *((unsigned int *)this + 1))
          return;
      }
      v34[v17++] = WTF::asciiCaseFoldTable[v36];
    }
    while (v17 < *((unsigned int *)this + 1));
  }
}

_BYTE *WTF::StringImpl::convertToASCIILowercase@<X0>(_BYTE *this@<X0>, uint64_t *a2@<X8>)
{
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  size_t v14;
  _BYTE *v15;
  int v16;
  int16x8_t *v17;
  unint64_t v18;
  int8x16_t *v19;
  int16x8_t v20;
  uint16x8_t v21;
  int8x16_t v22;
  int8x16_t v23;
  size_t v24;
  _WORD *v25;
  unsigned __int16 *v26;
  int v27;

  v3 = (_BYTE *)*((_QWORD *)this + 1);
  v4 = *((unsigned int *)this + 1);
  if ((this[16] & 4) != 0)
  {
    if (!(_DWORD)v4)
      goto LABEL_11;
    v9 = 0;
    while (v3[v9] - 65 >= 0x1A)
    {
      if (v4 == ++v9)
        goto LABEL_11;
    }
    v12 = WTF::fastCompactMalloc((WTF *)(v4 + 20));
    this = (_BYTE *)(v12 + 20);
    *(_DWORD *)v12 = 2;
    *(_DWORD *)(v12 + 4) = v4;
    *(_QWORD *)(v12 + 8) = v12 + 20;
    *(_DWORD *)(v12 + 16) = 4;
    *a2 = v12;
    if (v9)
    {
      if (v9 != 1)
      {
        this = memcpy(this, v3, v9);
        if (v4 <= v9)
          return this;
        goto LABEL_25;
      }
      *this = *v3;
    }
    if (v4 <= v9)
      return this;
LABEL_25:
    v13 = &v3[v9];
    v14 = v4 - v9;
    v15 = (_BYTE *)(v12 + v9 + 20);
    do
    {
      v16 = *v13++;
      *v15++ = WTF::asciiCaseFoldTable[v16];
      --v14;
    }
    while (v14);
    return this;
  }
  if (!(_DWORD)v4)
  {
LABEL_11:
    *(_DWORD *)this += 2;
    *a2 = (uint64_t)this;
    return this;
  }
  v5 = 0;
  v6 = 0;
  v7 = 2 * v4;
  v8 = *((unsigned int *)this + 1);
  while (*(unsigned __int16 *)&v3[v6] - 65 >= 0x1A)
  {
    --v8;
    v6 += 2;
    --v5;
    if (v7 == v6)
      goto LABEL_11;
  }
  if (v4 >= 0x7FFFFFF0)
  {
    __break(0xC471u);
    return this;
  }
  v10 = -v5;
  v11 = WTF::fastCompactMalloc((WTF *)(v7 + 20));
  this = (_BYTE *)(v11 + 20);
  *(_DWORD *)v11 = 2;
  *(_DWORD *)(v11 + 4) = v4;
  *(_QWORD *)(v11 + 8) = v11 + 20;
  *(_DWORD *)(v11 + 16) = 0;
  *a2 = v11;
  if (v5)
  {
    if (v10 != 1)
    {
      this = memcpy(this, v3, v6);
      if (v10 >= v4)
        return this;
      goto LABEL_29;
    }
    *(_WORD *)this = *(_WORD *)v3;
  }
  if (v10 >= v4)
    return this;
LABEL_29:
  if (v4 + v5 < 0x10)
    goto LABEL_34;
  if ((unint64_t)(v11 - (_QWORD)v3 + 20) < 0x20)
    goto LABEL_34;
  v17 = (int16x8_t *)&v3[v6 + 16];
  v10 = (v8 & 0xFFFFFFFFFFFFFFF0) - v5;
  v18 = (v4 + v5) & 0xFFFFFFFFFFFFFFF0;
  v19 = (int8x16_t *)(v11 + v6 + 36);
  v20.i64[0] = 0x40004000400040;
  v20.i64[1] = 0x40004000400040;
  v21.i64[0] = 0x1A001A001A001ALL;
  v21.i64[1] = 0x1A001A001A001ALL;
  v22.i64[0] = 0x20002000200020;
  v22.i64[1] = 0x20002000200020;
  do
  {
    v23 = vorrq_s8(vandq_s8((int8x16_t)vcgtq_u16(v21, (uint16x8_t)vaddq_s16(*v17, v20)), v22), *(int8x16_t *)v17);
    v19[-1] = vorrq_s8(vandq_s8((int8x16_t)vcgtq_u16(v21, (uint16x8_t)vaddq_s16(v17[-1], v20)), v22), (int8x16_t)v17[-1]);
    *v19 = v23;
    v17 += 2;
    v19 += 2;
    v18 -= 16;
  }
  while (v18);
  if (v4 + v5 != ((v4 + v5) & 0xFFFFFFFFFFFFFFF0))
  {
LABEL_34:
    v24 = v4 - v10;
    v25 = (_WORD *)(2 * v10 + v11 + 20);
    v26 = (unsigned __int16 *)&v3[2 * v10];
    do
    {
      v27 = *v26++;
      *v25++ = v27 | (32 * ((v27 - 65) < 0x1A));
      --v24;
    }
    while (v24);
  }
  return this;
}

_BYTE *WTF::StringImpl::convertToASCIIUppercase@<X0>(_BYTE *this@<X0>, uint64_t *a2@<X8>)
{
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  _BYTE *v17;
  unsigned __int8 *v18;
  char v19;
  int v20;
  char v21;
  int16x8_t *v22;
  unint64_t v23;
  int8x16_t *v24;
  int16x8_t v25;
  uint16x8_t v26;
  int16x8_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  unint64_t v31;
  _WORD *v32;
  unsigned __int16 *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  size_t v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  int8x16_t v41;
  uint8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  size_t v48;
  unint64_t v49;
  int8x8_t *v50;
  int8x8_t *v51;
  int8x8_t v52;
  int8x8_t v53;

  v3 = (_BYTE *)*((_QWORD *)this + 1);
  v4 = *((unsigned int *)this + 1);
  if ((this[16] & 4) != 0)
  {
    if (!(_DWORD)v4)
      goto LABEL_11;
    v9 = 0;
    v10 = *((unsigned int *)this + 1);
    while (v3[v9] - 97 >= 0x1A)
    {
      ++v9;
      --v10;
      if (v4 == v9)
        goto LABEL_11;
    }
    v13 = WTF::fastCompactMalloc((WTF *)(v4 + 20));
    this = (_BYTE *)(v13 + 20);
    *(_DWORD *)v13 = 2;
    *(_DWORD *)(v13 + 4) = v4;
    *(_QWORD *)(v13 + 8) = v13 + 20;
    *(_DWORD *)(v13 + 16) = 4;
    *a2 = v13;
    if (v9)
    {
      if (v9 != 1)
      {
        this = memcpy(this, v3, v9);
        v14 = v4 - v9;
        if (v4 <= v9)
          return this;
LABEL_25:
        if (v14 < 8 || (unint64_t)(v13 - (_QWORD)v3 + 20) < 0x20)
        {
          v15 = v9;
          goto LABEL_28;
        }
        v37 = v4 - v9;
        if (v14 >= 0x20)
        {
          v39 = 0;
          v38 = v14 & 0xFFFFFFFFFFFFFFE0;
          v40 = &v3[v9];
          v41.i64[0] = 0x9F9F9F9F9F9F9F9FLL;
          v41.i64[1] = 0x9F9F9F9F9F9F9F9FLL;
          v42.i64[0] = 0x1A1A1A1A1A1A1A1ALL;
          v42.i64[1] = 0x1A1A1A1A1A1A1A1ALL;
          v43.i64[0] = 0xDFDFDFDFDFDFDFDFLL;
          v43.i64[1] = 0xDFDFDFDFDFDFDFDFLL;
          do
          {
            v44 = *(int8x16_t *)&v40[v39];
            v45 = *(int8x16_t *)&v40[v39 + 16];
            v46 = (int8x16_t)vcgtq_u8(v42, (uint8x16_t)vaddq_s8(v44, v41));
            v47 = (int8x16_t)vcgtq_u8(v42, (uint8x16_t)vaddq_s8(v45, v41));
            v48 = v13 + v39 + v9;
            *(int8x16_t *)(v48 + 20) = vandq_s8(vornq_s8(vandq_s8(v46, v43), v46), v44);
            *(int8x16_t *)(v48 + 36) = vandq_s8(vornq_s8(vandq_s8(v47, v43), v47), v45);
            v39 += 32;
          }
          while ((v37 & 0xFFFFFFFFFFFFFFE0) != v39);
          if (v14 == v38)
            return this;
          if ((v14 & 0x18) == 0)
          {
            v15 = (v10 & 0xFFFFFFFFFFFFFFE0) + v9;
LABEL_28:
            v16 = v4 - v15;
            v17 = (_BYTE *)(v15 + v13 + 20);
            v18 = &v3[v15];
            do
            {
              v20 = *v18++;
              v19 = v20;
              if ((v20 - 97) >= 0x1A)
                v21 = -1;
              else
                v21 = -33;
              *v17++ = v21 & v19;
              --v16;
            }
            while (v16);
            return this;
          }
        }
        else
        {
          v38 = 0;
        }
        v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + v9;
        v49 = v38 - (v37 & 0xFFFFFFFFFFFFFFF8);
        v50 = (int8x8_t *)&v3[v38 + v9];
        v51 = (int8x8_t *)(v13 + v38 + v9 + 20);
        do
        {
          v52 = *v50++;
          v53 = (int8x8_t)vcgt_u8((uint8x8_t)0x1A1A1A1A1A1A1A1ALL, (uint8x8_t)vadd_s8(v52, (int8x8_t)0x9F9F9F9F9F9F9F9FLL));
          *v51++ = vand_s8(vorn_s8(vand_s8(v53, (int8x8_t)0xDFDFDFDFDFDFDFDFLL), v53), v52);
          v49 += 8;
        }
        while (v49);
        if (v14 == (v14 & 0xFFFFFFFFFFFFFFF8))
          return this;
        goto LABEL_28;
      }
      *this = *v3;
    }
    v14 = v4 - v9;
    if (v4 <= v9)
      return this;
    goto LABEL_25;
  }
  if (!(_DWORD)v4)
  {
LABEL_11:
    *(_DWORD *)this += 2;
    *a2 = (uint64_t)this;
    return this;
  }
  v5 = 0;
  v6 = 0;
  v7 = 2 * v4;
  v8 = *((unsigned int *)this + 1);
  while (*(unsigned __int16 *)&v3[v6] - 97 >= 0x1A)
  {
    --v8;
    v6 += 2;
    --v5;
    if (v7 == v6)
      goto LABEL_11;
  }
  if (v4 >= 0x7FFFFFF0)
  {
    __break(0xC471u);
    return this;
  }
  v11 = -v5;
  v12 = WTF::fastCompactMalloc((WTF *)(v7 + 20));
  this = (_BYTE *)(v12 + 20);
  *(_DWORD *)v12 = 2;
  *(_DWORD *)(v12 + 4) = v4;
  *(_QWORD *)(v12 + 8) = v12 + 20;
  *(_DWORD *)(v12 + 16) = 0;
  *a2 = v12;
  if (v5)
  {
    if (v11 != 1)
    {
      this = memcpy(this, v3, v6);
      if (v11 >= v4)
        return this;
      goto LABEL_35;
    }
    *(_WORD *)this = *(_WORD *)v3;
  }
  if (v11 >= v4)
    return this;
LABEL_35:
  if (v4 + v5 < 0x10)
    goto LABEL_40;
  if ((unint64_t)(v12 - (_QWORD)v3 + 20) < 0x20)
    goto LABEL_40;
  v22 = (int16x8_t *)&v3[v6 + 16];
  v11 = (v8 & 0xFFFFFFFFFFFFFFF0) - v5;
  v23 = (v4 + v5) & 0xFFFFFFFFFFFFFFF0;
  v24 = (int8x16_t *)(v12 + v6 + 36);
  v25.i64[0] = 0x60006000600060;
  v25.i64[1] = 0x60006000600060;
  v26.i64[0] = 0x1A001A001A001ALL;
  v26.i64[1] = 0x1A001A001A001ALL;
  do
  {
    v27 = v22[-1];
    v28 = (int8x16_t)vcgtq_u16(v26, (uint16x8_t)vaddq_s16(v27, v25));
    v29 = (int8x16_t)vcgtq_u16(v26, (uint16x8_t)vaddq_s16(*v22, v25));
    v30 = vandq_s8(vornq_s8((int8x16_t)(*(_OWORD *)&v29 & __PAIR128__(0xFFDFFFDFFFDFFFDFLL, 0xFFDFFFDFFFDFFFDFLL)), v29), *(int8x16_t *)v22);
    v24[-1] = vandq_s8(vornq_s8((int8x16_t)(*(_OWORD *)&v28 & __PAIR128__(0xFFDFFFDFFFDFFFDFLL, 0xFFDFFFDFFFDFFFDFLL)), v28), (int8x16_t)v27);
    *v24 = v30;
    v22 += 2;
    v24 += 2;
    v23 -= 16;
  }
  while (v23);
  if (v4 + v5 != ((v4 + v5) & 0xFFFFFFFFFFFFFFF0))
  {
LABEL_40:
    v31 = v4 - v11;
    v32 = (_WORD *)(2 * v11 + v12 + 20);
    v33 = (unsigned __int16 *)&v3[2 * v11];
    do
    {
      v35 = *v33++;
      v34 = v35;
      if ((v35 - 97) >= 0x1A)
        v36 = -1;
      else
        v36 = -33;
      *v32++ = v36 & v34;
      --v31;
    }
    while (v31);
  }
  return this;
}

uint64_t WTF::StringImpl::trimMatchedCharacters<BOOL (*)(char16_t)>@<X0>(uint64_t result@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  size_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = result;
  v5 = *(unsigned int *)(result + 4);
  if (!(_DWORD)v5)
    goto LABEL_17;
  v7 = 0;
  v8 = 0;
  v9 = (v5 - 1);
  while (1)
  {
    v10 = *(_QWORD *)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) == 0)
    {
      result = a2(*(unsigned __int16 *)(v10 + 2 * v8));
      if ((result & 1) == 0)
        break;
      goto LABEL_7;
    }
    result = a2(*(unsigned __int8 *)(v10 + v8));
    if ((result & 1) == 0)
      break;
LABEL_7:
    ++v8;
    v7 += 2;
    if (v5 == v8)
      goto LABEL_8;
  }
  if ((_DWORD)v5 != 1)
  {
    do
    {
      v11 = *(_QWORD *)(v3 + 8);
      if ((*(_BYTE *)(v3 + 16) & 4) != 0)
      {
        result = a2(*(unsigned __int8 *)(v11 + v9));
        if (!(_DWORD)result)
          break;
      }
      else
      {
        result = a2(*(unsigned __int16 *)(v11 + 2 * v9));
        if (!(_DWORD)result)
          break;
      }
      --v9;
    }
    while ((_DWORD)v9);
  }
  if (!(_DWORD)v8 && (_DWORD)v9 == *(_DWORD *)(v3 + 4) - 1)
  {
LABEL_17:
    *(_DWORD *)v3 += 2;
    *a3 = v3;
    return result;
  }
  v12 = *(_QWORD *)(v3 + 8);
  v13 = v9 + 1;
  v14 = v9 - v8 + 1;
  v15 = v14;
  if ((*(_BYTE *)(v3 + 16) & 4) == 0)
  {
    if (v13 != (_DWORD)v8)
    {
      if (v14 < 0x7FFFFFF0)
      {
        v16 = (_WORD *)(v12 + v7);
        v15 = 2 * v14;
        v17 = WTF::fastCompactMalloc((WTF *)(v15 + 20));
        result = v17 + 20;
        *(_DWORD *)v17 = 2;
        *(_DWORD *)(v17 + 4) = v14;
        *(_QWORD *)(v17 + 8) = v17 + 20;
        *(_DWORD *)(v17 + 16) = 0;
        *a3 = v17;
        if ((_DWORD)v9 == (_DWORD)v8)
        {
          *(_WORD *)result = *v16;
          return result;
        }
        return (uint64_t)memcpy((void *)result, v16, v15);
      }
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x197B078C0);
    }
LABEL_8:
    WTF::StringImpl::s_emptyAtomString += 2;
    *a3 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
    return result;
  }
  if (v13 == (_DWORD)v8)
    goto LABEL_8;
  if ((v14 & 0x80000000) != 0)
    goto LABEL_28;
  v16 = (_WORD *)(v12 + v8);
  v18 = WTF::fastCompactMalloc((WTF *)(v14 + 20));
  result = v18 + 20;
  *(_DWORD *)v18 = 2;
  *(_DWORD *)(v18 + 4) = v14;
  *(_QWORD *)(v18 + 8) = v18 + 20;
  *(_DWORD *)(v18 + 16) = 4;
  *a3 = v18;
  if ((_DWORD)v9 != (_DWORD)v8)
    return (uint64_t)memcpy((void *)result, v16, v15);
  *(_BYTE *)result = *(_BYTE *)v16;
  return result;
}

void WTF::StringImpl::simplifyWhiteSpace(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
    WTF::StringImpl::simplifyMatchedCharactersToSpace<unsigned char,BOOL (*)(char16_t)>(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  else
    WTF::StringImpl::simplifyMatchedCharactersToSpace<char16_t,BOOL (*)(char16_t)>(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void WTF::StringImpl::simplifyMatchedCharactersToSpace<unsigned char,BOOL (*)(char16_t)>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  WTF *v11;
  _BYTE *v13;
  uint64_t v14;
  unsigned int v15;
  char v16;
  unsigned __int8 *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  _BYTE *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;

  v11 = (WTF *)*(unsigned int *)(a1 + 4);
  if (!(_DWORD)v11)
  {
    v16 = 0;
    v13 = 0;
    goto LABEL_24;
  }
  v13 = (_BYTE *)WTF::fastMalloc(v11);
  v14 = *(unsigned int *)(a1 + 4);
  if (!(_DWORD)v14)
  {
    v16 = 0;
    goto LABEL_24;
  }
  v15 = 0;
  v16 = 0;
  v17 = *(unsigned __int8 **)(a1 + 8);
  do
  {
    v18 = v15;
    while ((a2(*v17) & 1) != 0)
    {
      v19 = *v17++;
      v16 |= v19 != 32;
      if (!--v14)
        goto LABEL_16;
    }
    v20 = 0;
    while ((a2(v17[v20]) & 1) == 0)
    {
      v13[v18 + v20] = v17[v20];
      if (v14 == ++v20)
      {
        v18 += v20;
        goto LABEL_16;
      }
    }
    v15 = v18 + v20 + 1;
    v13[v18 + v20] = 32;
    v17 += v20;
    v14 -= v20;
  }
  while (v14);
  v18 += v20 + 1;
LABEL_16:
  if (!v18)
  {
LABEL_24:
    if (*(_DWORD *)(a1 + 4) || (v16 & 1) != 0)
      goto LABEL_27;
LABEL_26:
    *(_DWORD *)a1 += 2;
    *a9 = a1;
    goto LABEL_28;
  }
  if (v13[v18 - 1] == 32)
    v21 = v18 - 1;
  else
    v21 = v18;
  if (!(((_DWORD)v21 != *(_DWORD *)(a1 + 4)) | v16 & 1))
    goto LABEL_26;
  if (!(_DWORD)v21)
  {
LABEL_27:
    WTF::StringImpl::s_emptyAtomString += 2;
    *a9 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
    goto LABEL_28;
  }
  v22 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_DWORD *)v22 = 2;
  *(_DWORD *)(v22 + 4) = v21;
  *(_QWORD *)(v22 + 8) = 0;
  *(_DWORD *)(v22 + 16) = 5;
  v23 = (_BYTE *)WTF::fastCompactMalloc((WTF *)v21);
  v31 = v23;
  if ((_DWORD)v21 == 1)
    *v23 = *v13;
  else
    memcpy(v23, v13, v21);
  *(_QWORD *)(v22 + 8) = v31;
  *a9 = v22;
  WTF::fastFree((unint64_t)v13, v24, v25, v26, v27, v28, v29, v30);
  v13 = 0;
LABEL_28:
  WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::StringImpl::simplifyMatchedCharactersToSpace<char16_t,BOOL (*)(char16_t)>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v11;
  _WORD *v13;
  uint64_t v14;
  unsigned int v15;
  char v16;
  unsigned __int16 *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  _WORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _WORD *v31;

  v11 = *(unsigned int *)(a1 + 4);
  if (!(_DWORD)v11)
  {
    v16 = 0;
    v13 = 0;
    goto LABEL_23;
  }
  v13 = (_WORD *)WTF::fastMalloc((WTF *)(2 * v11));
  v14 = *(unsigned int *)(a1 + 4);
  if (!(_DWORD)v14)
  {
    v16 = 0;
    goto LABEL_23;
  }
  v15 = 0;
  v16 = 0;
  v17 = *(unsigned __int16 **)(a1 + 8);
  do
  {
    v18 = v15;
    while ((a2(*v17) & 1) != 0)
    {
      v19 = *v17++;
      v16 |= v19 != 32;
      if (!--v14)
        goto LABEL_16;
    }
    v20 = 0;
    while ((a2(*v17) & 1) == 0)
    {
      v21 = *v17++;
      v13[v18 + v20++] = v21;
      if (v14 == v20)
      {
        v18 += v20;
        goto LABEL_16;
      }
    }
    v15 = v18 + v20 + 1;
    v13[v18 + v20] = 32;
    v14 -= v20;
  }
  while (v14);
  v18 += v20 + 1;
LABEL_16:
  if (!v18)
  {
LABEL_23:
    if (*(_DWORD *)(a1 + 4) || (v16 & 1) != 0)
      goto LABEL_26;
LABEL_25:
    *(_DWORD *)a1 += 2;
    *a9 = a1;
    goto LABEL_27;
  }
  if (v13[v18 - 1] == 32)
    --v18;
  if (!((v18 != *(_DWORD *)(a1 + 4)) | v16 & 1))
    goto LABEL_25;
  if (!v18)
  {
LABEL_26:
    WTF::StringImpl::s_emptyAtomString += 2;
    *a9 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
    goto LABEL_27;
  }
  v22 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_DWORD *)v22 = 2;
  *(_DWORD *)(v22 + 4) = v18;
  *(_QWORD *)(v22 + 8) = 0;
  *(_DWORD *)(v22 + 16) = 1;
  v23 = (_WORD *)WTF::fastCompactMalloc((WTF *)(2 * v18));
  v31 = v23;
  if (v18 == 1)
    *v23 = *v13;
  else
    memcpy(v23, v13, 2 * v18);
  *(_QWORD *)(v22 + 8) = v31;
  *a9 = v22;
  WTF::fastFree((unint64_t)v13, v24, v25, v26, v27, v28, v29, v30);
  v13 = 0;
LABEL_27:
  WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
}

unsigned __int16 *WTF::StringImpl::toDouble(WTF::StringImpl *this, BOOL *a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int16 *v9;
  unsigned __int16 *result;
  char *v11;
  unsigned __int16 *v12;
  BOOL v13;
  unint64_t v14;

  v3 = *((_QWORD *)this + 1);
  v4 = (char *)*((unsigned int *)this + 1);
  if ((*((_BYTE *)this + 16) & 4) != 0)
  {
    v7 = 0;
    if ((_DWORD)v4)
    {
      while (1)
      {
        v8 = *(unsigned __int8 *)(v3 + v7);
        if ((v8 - 9) >= 5 && v8 != 32)
          break;
        if (v4 == (char *)++v7)
        {
          v7 = *((unsigned int *)this + 1);
          break;
        }
      }
    }
    v12 = (unsigned __int16 *)(v3 + v7);
    v14 = 0;
    result = (unsigned __int16 *)fast_float::from_chars_advanced<double,char>((unsigned __int8 *)(v3 + v7), (unsigned __int8 *)&v4[v3], &v14, 0x2E00000005);
    if (result != v12)
    {
      if (!a2)
        return result;
      v11 = (char *)result + v7 - (_QWORD)v12;
      goto LABEL_24;
    }
LABEL_20:
    if (!a2)
      return result;
    v13 = 0;
    goto LABEL_25;
  }
  v5 = 0;
  if ((_DWORD)v4)
  {
    while (1)
    {
      v6 = *(unsigned __int16 *)(v3 + 2 * v5);
      if ((v6 - 9) >= 5 && v6 != 32)
        break;
      if (v4 == (char *)++v5)
      {
        v5 = *((unsigned int *)this + 1);
        break;
      }
    }
  }
  v9 = (unsigned __int16 *)(v3 + 2 * v5);
  v14 = 0;
  result = fast_float::from_chars_advanced<double,char16_t>(v9, (unsigned __int16 *)(v3 + 2 * (_QWORD)v4), (double *)&v14, 0x2E00000005);
  if (result == v9)
    goto LABEL_20;
  if (!a2)
    return result;
  v11 = (char *)(result - v9 + v5);
LABEL_24:
  v13 = v11 == v4;
LABEL_25:
  *a2 = v13;
  return result;
}

float WTF::StringImpl::toFloat(WTF::StringImpl *this, BOOL *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  double v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  BOOL v15;
  double v17;

  v3 = *((_QWORD *)this + 1);
  v4 = (unsigned __int8 *)*((unsigned int *)this + 1);
  if ((*((_BYTE *)this + 16) & 4) == 0)
  {
    v5 = 0;
    if ((_DWORD)v4)
    {
      while (1)
      {
        v6 = *(unsigned __int16 *)(v3 + 2 * v5);
        if ((v6 - 9) >= 5 && v6 != 32)
          break;
        if (v4 == (unsigned __int8 *)++v5)
        {
          v5 = *((unsigned int *)this + 1);
          break;
        }
      }
    }
    v9 = (unsigned __int16 *)(v3 + 2 * v5);
    v17 = 0.0;
    v10 = fast_float::from_chars_advanced<double,char16_t>(v9, (unsigned __int16 *)(v3 + 2 * (_QWORD)v4), &v17, 0x2E00000005);
    if (v10 != v9)
    {
      v11 = v17;
      if (a2)
      {
        v12 = (unsigned __int8 *)(v10 - v9 + v5);
LABEL_24:
        v15 = v12 == v4;
        goto LABEL_25;
      }
      return v11;
    }
LABEL_20:
    v11 = 0.0;
    if (a2)
    {
      v15 = 0;
LABEL_25:
      *a2 = v15;
      return v11;
    }
    return v11;
  }
  v7 = 0;
  if ((_DWORD)v4)
  {
    while (1)
    {
      v8 = *(unsigned __int8 *)(v3 + v7);
      if ((v8 - 9) >= 5 && v8 != 32)
        break;
      if (v4 == (unsigned __int8 *)++v7)
      {
        v7 = *((unsigned int *)this + 1);
        break;
      }
    }
  }
  v13 = (unsigned __int8 *)(v3 + v7);
  v17 = 0.0;
  v14 = fast_float::from_chars_advanced<double,char>((unsigned __int8 *)(v3 + v7), &v4[v3], (unint64_t *)&v17, 0x2E00000005);
  if (v14 == v13)
    goto LABEL_20;
  v11 = v17;
  if (a2)
  {
    v12 = &v14[v7 - (_QWORD)v13];
    goto LABEL_24;
  }
  return v11;
}

uint64_t WTF::StringImpl::find(uint64_t result, int8x16_t *a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint16x8_t *v20;
  int32x4_t v21;
  uint8x8_t *v22;
  int32x4_t v23;
  unint64_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint8x16_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  unint64_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  uint16x8_t *v49;
  uint64_t *v50;
  unint64_t v51;
  int32x4_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  unint64_t v55;
  unsigned __int8 *v56;
  unsigned __int16 *v57;
  int v58;
  int v59;
  BOOL v60;
  uint64_t v61;
  int16x8_t *v62;
  uint16x8_t v63;
  unsigned int v64;
  uint16x8_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  uint8x8_t *v77;
  int32x4_t v78;
  uint8x8_t *v79;
  int32x4_t v80;
  unint64_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  uint8x16_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  uint16x8_t v96;
  uint16x8_t v97;
  uint8x16_t v98;
  uint16x8_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  unint64_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  uint8x8_t *v107;
  uint8x8_t *v108;
  unint64_t v109;
  int32x4_t v110;
  uint8x8_t v111;
  uint16x8_t v112;
  uint8x8_t v113;
  uint16x8_t v114;
  unint64_t v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  int v118;
  int v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int v123;
  int8x16_t *v124;
  int v125;
  int v126;
  uint8x16_t v127;
  unsigned int v128;
  uint8x16_t v129;
  uint8x16_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v135;
  uint64_t v136;

  v4 = *(unsigned int *)(result + 4);
  v5 = v4 - a4;
  if (v4 < a4)
    return -1;
  v6 = v5 - a3;
  if (v5 < a3)
    return -1;
  v7 = *(_QWORD *)(result + 8);
  if ((*(_BYTE *)(result + 16) & 4) != 0)
  {
    v12 = v7 + a4;
    if (!a3)
    {
      v15 = 0;
      v14 = 0;
      goto LABEL_61;
    }
    if (a3 < 8)
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      goto LABEL_59;
    }
    if (a3 >= 0x20)
    {
      v74 = 0uLL;
      v13 = a3 & 0xFFFFFFFFFFFFFFE0;
      v75 = 0uLL;
      v76 = 0uLL;
      v77 = (uint8x8_t *)(a4 + v7 + 16);
      v78 = 0uLL;
      v79 = (uint8x8_t *)&a2[1];
      v80 = 0uLL;
      v81 = a3 & 0xFFFFFFFFFFFFFFE0;
      v82 = 0uLL;
      v83 = 0uLL;
      v84 = 0uLL;
      v85 = 0uLL;
      v86 = 0uLL;
      v87 = 0uLL;
      v88 = 0uLL;
      v89 = 0uLL;
      v90 = 0uLL;
      v91 = 0uLL;
      v92 = 0uLL;
      do
      {
        v93 = *(uint8x16_t *)v77[-2].i8;
        v94 = vmovl_u8(*(uint8x8_t *)v93.i8);
        v95 = vmovl_high_u8(v93);
        v96 = vmovl_u8(*v77);
        v97 = vmovl_high_u8(*(uint8x16_t *)v77->i8);
        v88 = (int32x4_t)vaddw_high_u16((uint32x4_t)v88, v95);
        v87 = (int32x4_t)vaddw_u16((uint32x4_t)v87, *(uint16x4_t *)v95.i8);
        v86 = (int32x4_t)vaddw_high_u16((uint32x4_t)v86, v94);
        v85 = (int32x4_t)vaddw_u16((uint32x4_t)v85, *(uint16x4_t *)v94.i8);
        v92 = (int32x4_t)vaddw_high_u16((uint32x4_t)v92, v97);
        v91 = (int32x4_t)vaddw_u16((uint32x4_t)v91, *(uint16x4_t *)v97.i8);
        v90 = (int32x4_t)vaddw_high_u16((uint32x4_t)v90, v96);
        v89 = (int32x4_t)vaddw_u16((uint32x4_t)v89, *(uint16x4_t *)v96.i8);
        v98 = *(uint8x16_t *)v79[-2].i8;
        v99 = vmovl_u8(*(uint8x8_t *)v98.i8);
        v100 = vmovl_high_u8(v98);
        v101 = vmovl_u8(*v79);
        v102 = vmovl_high_u8(*(uint8x16_t *)v79->i8);
        v78 = (int32x4_t)vaddw_high_u16((uint32x4_t)v78, v100);
        v76 = (int32x4_t)vaddw_u16((uint32x4_t)v76, *(uint16x4_t *)v100.i8);
        v75 = (int32x4_t)vaddw_high_u16((uint32x4_t)v75, v99);
        v74 = (int32x4_t)vaddw_u16((uint32x4_t)v74, *(uint16x4_t *)v99.i8);
        v84 = (int32x4_t)vaddw_high_u16((uint32x4_t)v84, v102);
        v83 = (int32x4_t)vaddw_u16((uint32x4_t)v83, *(uint16x4_t *)v102.i8);
        v77 += 4;
        v82 = (int32x4_t)vaddw_high_u16((uint32x4_t)v82, v101);
        v79 += 4;
        v80 = (int32x4_t)vaddw_u16((uint32x4_t)v80, *(uint16x4_t *)v101.i8);
        v81 -= 32;
      }
      while (v81);
      v15 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v89, v85), vaddq_s32(v91, v87)), vaddq_s32(vaddq_s32(v90, v86), vaddq_s32(v92, v88))));
      v14 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v80, v74), vaddq_s32(v83, v76)), vaddq_s32(vaddq_s32(v82, v75), vaddq_s32(v84, v78))));
      if (a3 == v13)
        goto LABEL_61;
      if ((a3 & 0x18) == 0)
      {
LABEL_59:
        v115 = a3 - v13;
        v116 = &a2->u8[v13];
        v117 = (unsigned __int8 *)(v7 + v13 + a4);
        do
        {
          v118 = *v117++;
          v15 += v118;
          v119 = *v116++;
          v14 += v119;
          --v115;
        }
        while (v115);
        goto LABEL_61;
      }
    }
    else
    {
      v14 = 0;
      v15 = 0;
      v13 = 0;
    }
    v103 = v13;
    v13 = a3 & 0xFFFFFFFFFFFFFFF8;
    v104 = (int32x4_t)v14;
    v105 = (int32x4_t)v15;
    v106 = 0uLL;
    v107 = (uint8x8_t *)(v7 + v103 + a4);
    v108 = (uint8x8_t *)&a2->i8[v103];
    v109 = v103 - (a3 & 0xFFFFFFFFFFFFFFF8);
    v110 = 0uLL;
    do
    {
      v111 = *v107++;
      v112 = vmovl_u8(v111);
      v110 = (int32x4_t)vaddw_high_u16((uint32x4_t)v110, v112);
      v105 = (int32x4_t)vaddw_u16((uint32x4_t)v105, *(uint16x4_t *)v112.i8);
      v113 = *v108++;
      v114 = vmovl_u8(v113);
      v106 = (int32x4_t)vaddw_high_u16((uint32x4_t)v106, v114);
      v104 = (int32x4_t)vaddw_u16((uint32x4_t)v104, *(uint16x4_t *)v114.i8);
      v109 += 8;
    }
    while (v109);
    v15 = vaddvq_s32(vaddq_s32(v105, v110));
    v14 = vaddvq_s32(vaddq_s32(v104, v106));
    if (a3 != v13)
      goto LABEL_59;
LABEL_61:
    v120 = 0;
    v121 = 32 - __clz(a3 - 1);
    result = a3;
    v60 = v5 >= a3;
    v122 = v5 - a3;
    if (!v60)
      v122 = 0;
    v123 = v121 - 1;
    if (v15 != v14)
    {
LABEL_85:
      while (v120 != v6)
      {
        if (v120 == v122)
          goto LABEL_118;
        v15 = v15 + *(unsigned __int8 *)(v12 + v120 + a3) - *(unsigned __int8 *)(v12 + v120);
        ++v120;
        if (v15 == v14)
          goto LABEL_64;
      }
      return -1;
    }
LABEL_64:
    v124 = (int8x16_t *)(v12 + v120);
    if ((_DWORD)a3 == 1)
    {
      if (!a3)
      {
LABEL_118:
        __break(1u);
        return result;
      }
      v125 = v124->u8[0];
      v126 = a2->u8[0];
LABEL_70:
      if (v125 != v126)
        goto LABEL_85;
    }
    else if ((_DWORD)a3)
    {
      switch(v123)
      {
        case 0u:
          v125 = v124->u16[0];
          v126 = a2->u16[0];
          goto LABEL_70;
        case 1u:
          if (v124->u16[0] != a2->u16[0])
            goto LABEL_85;
          v125 = *(unsigned __int16 *)((char *)&v124->u16[-1] + a3);
          v126 = *(unsigned __int16 *)((char *)&a2[-1].u16[7] + a3);
          goto LABEL_70;
        case 2u:
          if (v124->i32[0] != a2->i32[0])
            goto LABEL_85;
          v125 = *(__int32 *)((char *)&v124->i32[-1] + a3);
          v126 = *(__int32 *)((char *)&a2[-1].i32[3] + a3);
          goto LABEL_70;
        case 3u:
          if (v124->i64[0] == a2->i64[0]
            && *(uint64_t *)((char *)&v124->i64[-1] + a3) == *(uint64_t *)((char *)&a2[-1].i64[1]
                                                                                     + a3))
          {
            return v120 + a4;
          }
          goto LABEL_85;
        case 4u:
          v130 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)&v124[-1] + a3), *(int8x16_t *)((char *)a2 + a3 - 16)), vceqq_s8(*v124, *a2));
          v130.i8[0] = vminvq_u8(v130);
          if (!v130.i32[0])
            goto LABEL_85;
          return v120 + a4;
        default:
          v127 = (uint8x16_t)vceqq_s8(*v124, *a2);
          v127.i8[0] = vminvq_u8(v127);
          if (!v127.i32[0])
            goto LABEL_85;
          v128 = a3 & 0xF;
          if (a3 < 0x10)
            return v120 + a4;
          break;
      }
      do
      {
        v129 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v124 + v128), *(int8x16_t *)((char *)a2 + v128));
        v129.i8[0] = vminvq_u8(v129);
        if (!v129.i32[0])
          goto LABEL_85;
        v128 += 16;
      }
      while (v128 < a3);
    }
    return v120 + a4;
  }
  if (!a3)
  {
    v16 = 0;
    return v16 + a4;
  }
  v8 = (unsigned __int16 *)(v7 + 2 * a4);
  if (a3 >= 8)
  {
    if (a3 >= 0x20)
    {
      v17 = 0uLL;
      v9 = a3 & 0xFFFFFFFFFFFFFFE0;
      v18 = 0uLL;
      v19 = 0uLL;
      v20 = (uint16x8_t *)(v7 + 2 * a4 + 32);
      v21 = 0uLL;
      v22 = (uint8x8_t *)&a2[1];
      v23 = 0uLL;
      v24 = a3 & 0xFFFFFFFFFFFFFFE0;
      v25 = 0uLL;
      v26 = 0uLL;
      v27 = 0uLL;
      v28 = 0uLL;
      v29 = 0uLL;
      v30 = 0uLL;
      v31 = 0uLL;
      v32 = 0uLL;
      v33 = 0uLL;
      v34 = 0uLL;
      v35 = 0uLL;
      do
      {
        v37 = v20[-2];
        v36 = v20[-1];
        v39 = *v20;
        v38 = v20[1];
        v20 += 4;
        v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v37);
        v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v36.i8);
        v28 = (int32x4_t)vaddw_u16((uint32x4_t)v28, *(uint16x4_t *)v37.i8);
        v31 = (int32x4_t)vaddw_high_u16((uint32x4_t)v31, v36);
        v33 = (int32x4_t)vaddw_high_u16((uint32x4_t)v33, v39);
        v34 = (int32x4_t)vaddw_u16((uint32x4_t)v34, *(uint16x4_t *)v38.i8);
        v32 = (int32x4_t)vaddw_u16((uint32x4_t)v32, *(uint16x4_t *)v39.i8);
        v35 = (int32x4_t)vaddw_high_u16((uint32x4_t)v35, v38);
        v40 = *(uint8x16_t *)v22[-2].i8;
        v41 = vmovl_u8(*(uint8x8_t *)v40.i8);
        v42 = vmovl_high_u8(v40);
        v43 = vmovl_u8(*v22);
        v44 = vmovl_high_u8(*(uint8x16_t *)v22->i8);
        v21 = (int32x4_t)vaddw_high_u16((uint32x4_t)v21, v42);
        v19 = (int32x4_t)vaddw_u16((uint32x4_t)v19, *(uint16x4_t *)v42.i8);
        v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v41);
        v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v41.i8);
        v27 = (int32x4_t)vaddw_high_u16((uint32x4_t)v27, v44);
        v26 = (int32x4_t)vaddw_u16((uint32x4_t)v26, *(uint16x4_t *)v44.i8);
        v25 = (int32x4_t)vaddw_high_u16((uint32x4_t)v25, v43);
        v23 = (int32x4_t)vaddw_u16((uint32x4_t)v23, *(uint16x4_t *)v43.i8);
        v22 += 4;
        v24 -= 32;
      }
      while (v24);
      v11 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v32, v28), vaddq_s32(v34, v30)), vaddq_s32(vaddq_s32(v33, v29), vaddq_s32(v35, v31))));
      v10 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v23, v17), vaddq_s32(v26, v19)), vaddq_s32(vaddq_s32(v25, v18), vaddq_s32(v27, v21))));
      if (a3 == v9)
        goto LABEL_27;
      if ((a3 & 0x18) == 0)
        goto LABEL_25;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v9 = 0;
    }
    v45 = v9;
    v9 = a3 & 0xFFFFFFFFFFFFFFF8;
    v46 = 0uLL;
    v47 = (int32x4_t)v10;
    v48 = (int32x4_t)v11;
    v49 = (uint16x8_t *)(v7 + 2 * v45 + 2 * a4);
    v50 = (uint64_t *)((char *)a2->i64 + v45);
    v51 = v45 - (a3 & 0xFFFFFFFFFFFFFFF8);
    v52 = 0uLL;
    do
    {
      v53 = *v49++;
      v52 = (int32x4_t)vaddw_high_u16((uint32x4_t)v52, v53);
      v48 = (int32x4_t)vaddw_u16((uint32x4_t)v48, *(uint16x4_t *)v53.i8);
      v53.i64[0] = *v50++;
      v54 = vmovl_u8(*(uint8x8_t *)v53.i8);
      v46 = (int32x4_t)vaddw_high_u16((uint32x4_t)v46, v54);
      v47 = (int32x4_t)vaddw_u16((uint32x4_t)v47, *(uint16x4_t *)v54.i8);
      v51 += 8;
    }
    while (v51);
    v11 = vaddvq_s32(vaddq_s32(v48, v52));
    v10 = vaddvq_s32(vaddq_s32(v47, v46));
    if (a3 == v9)
      goto LABEL_27;
    goto LABEL_25;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
LABEL_25:
  v55 = a3 - v9;
  v56 = &a2->u8[v9];
  v57 = (unsigned __int16 *)(v7 + 2 * v9 + 2 * a4);
  do
  {
    v58 = *v57++;
    v11 += v58;
    v59 = *v56++;
    v10 += v59;
    --v55;
  }
  while (v55);
LABEL_27:
  if (a3 >= 8)
  {
    v16 = 0;
    v60 = v5 >= a3;
    v61 = v5 - a3;
    if (!v60)
      v61 = 0;
    if (v11 != v10)
    {
LABEL_35:
      while (v16 != v6)
      {
        if (v16 == v61)
          goto LABEL_118;
        v11 = v11 + v8[v16 + a3] - v8[v16];
        ++v16;
        if (v11 == v10)
          goto LABEL_31;
      }
      return -1;
    }
LABEL_31:
    v62 = (int16x8_t *)&v8[v16];
    v63 = (uint16x8_t)vceqq_s16(*v62, (int16x8_t)vmovl_u8(*(uint8x8_t *)a2->i8));
    v63.i16[0] = vminvq_u16(v63);
    v64 = a3 & 7;
    if (!v63.i32[0])
      goto LABEL_35;
    do
    {
      v65 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v62 + 2 * v64), (int16x8_t)vmovl_u8(*(uint8x8_t *)&a2->i8[v64]));
      v65.i16[0] = vminvq_u16(v65);
      if (!v65.i32[0])
        goto LABEL_35;
      v64 += 8;
    }
    while (v64 < a3);
    return v16 + a4;
  }
  if (a3 > 3)
  {
    v16 = 0;
    v66 = a3 & 3;
    v60 = v5 >= a3;
    v67 = v5 - a3;
    if (!v60)
      v67 = 0;
    v68 = v7 + 2 * a3 + 2 * a4;
    if (v11 != v10)
    {
LABEL_50:
      while (v6 != v16)
      {
        if (v67 == v16)
          goto LABEL_118;
        v69 = *v8++;
        v11 = v11 + *(unsigned __int16 *)(v68 + 2 * v16++) - v69;
        if (v11 == v10)
          goto LABEL_46;
      }
      return -1;
    }
LABEL_46:
    v70 = (a2->u32[0] | ((unint64_t)a2->u32[0] << 16)) & 0xFFFF0000FFFFLL;
    result = *(_QWORD *)v8;
    v71 = (*(unsigned int *)((char *)a2->u32 + v66) | ((unint64_t)*(unsigned int *)((char *)a2->u32 + v66) << 16)) & 0xFFFF0000FFFFLL;
    v72 = (v71 | (v71 << 8)) & 0xFF00FF00FF00FFLL;
    if (((v70 | (v70 << 8)) & 0xFF00FF00FF00FFLL) != *(_QWORD *)v8 || v72 != *(_QWORD *)&v8[v66])
      goto LABEL_50;
    return v16 + a4;
  }
  v60 = v5 >= a3;
  v131 = v5 - a3;
  if (!v60)
    v131 = 0;
  if (a3 >= 2)
  {
    v16 = 0;
    v132 = v7 + 2 * a3 + 2 * a4;
    if (v11 != v10)
      goto LABEL_101;
LABEL_97:
    result = (a2->u16[0] | (a2->u16[0] << 8)) & 0xFF00FF;
    if ((_DWORD)result != *(_DWORD *)v8
      || ((*(unsigned __int16 *)((char *)a2->u16 + (a3 & 1)) | (*(unsigned __int16 *)((char *)a2->u16 + (a3 & 1)) << 8)) & 0xFF00FF) != *(_DWORD *)&v8[a3 & 1])
    {
LABEL_101:
      while (v6 != v16)
      {
        if (v131 == v16)
          goto LABEL_118;
        v133 = *v8++;
        result = v133;
        v11 = v11 + *(unsigned __int16 *)(v132 + 2 * v16++) - v133;
        if (v11 == v10)
          goto LABEL_97;
      }
      return -1;
    }
    return v16 + a4;
  }
  if ((_DWORD)a3 == 1)
  {
    v16 = 0;
    v135 = v7 + 2 * a3 + 2 * a4;
    if (v11 != v10)
      goto LABEL_109;
LABEL_108:
    if (v8[v16] != a2->u8[0])
    {
LABEL_109:
      while (v6 != v16)
      {
        if (v131 == v16)
          goto LABEL_118;
        v11 = v11 + *(unsigned __int16 *)(v135 + 2 * v16) - v8[v16];
        ++v16;
        if (v11 == v10)
          goto LABEL_108;
      }
      return -1;
    }
    return v16 + a4;
  }
  if (v11 != v10)
  {
    v16 = 0;
    v136 = v7 + 2 * a3 + 2 * a4;
    while (v6 != v16)
    {
      if (v131 == v16)
        goto LABEL_118;
      v11 = v11 + *(unsigned __int16 *)(v136 + 2 * v16) - v8[v16];
      ++v16;
      if (v11 == v10)
        return v16 + a4;
    }
    return -1;
  }
  return a4;
}

unint64_t WTF::StringImpl::reverseFind(uint64_t a1, int8x16_t *a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  unint64_t v18;
  uint64_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  uint16x8_t *v23;
  int32x4_t v24;
  uint8x8_t *v25;
  int32x4_t v26;
  unint64_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint8x16_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  unint64_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  uint16x8_t *v52;
  uint64_t *v53;
  unint64_t v54;
  int32x4_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  int16x8_t *v63;
  uint16x8_t v64;
  unsigned int v65;
  uint16x8_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  uint8x8_t *v76;
  int32x4_t v77;
  uint8x8_t *v78;
  int32x4_t v79;
  unint64_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  uint8x16_t v92;
  uint16x8_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  uint16x8_t v96;
  uint8x16_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  unint64_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  uint8x8_t *v106;
  uint8x8_t *v107;
  unint64_t v108;
  int32x4_t v109;
  uint8x8_t v110;
  uint16x8_t v111;
  uint8x8_t v112;
  uint16x8_t v113;
  unint64_t v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  int v117;
  int v118;
  unsigned int v119;
  int8x16_t *v120;
  int v121;
  int v122;
  uint8x16_t v123;
  unsigned int v124;
  uint8x16_t v125;
  uint8x16_t v126;
  int *v127;
  int v128;
  int v129;

  v4 = *(unsigned int *)(a1 + 4);
  if (v4 < a3)
    return -1;
  v7 = *(_QWORD *)(a1 + 8);
  if (v4 - a3 >= a4)
    result = a4;
  else
    result = v4 - a3;
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
  {
    if (!a3)
    {
      v15 = 0;
      v14 = 0;
      goto LABEL_67;
    }
    v12 = v4 - result;
    if (v4 < result)
      v12 = 0;
    if (v12 <= a3 - 1)
      goto LABEL_109;
    if (a3 < 8)
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      goto LABEL_65;
    }
    if (a3 >= 0x20)
    {
      v73 = 0uLL;
      v13 = a3 & 0xFFFFFFFFFFFFFFE0;
      v74 = 0uLL;
      v75 = 0uLL;
      v76 = (uint8x8_t *)(result + v7 + 16);
      v77 = 0uLL;
      v78 = (uint8x8_t *)&a2[1];
      v79 = 0uLL;
      v80 = a3 & 0xFFFFFFFFFFFFFFE0;
      v81 = 0uLL;
      v82 = 0uLL;
      v83 = 0uLL;
      v84 = 0uLL;
      v85 = 0uLL;
      v86 = 0uLL;
      v87 = 0uLL;
      v88 = 0uLL;
      v89 = 0uLL;
      v90 = 0uLL;
      v91 = 0uLL;
      do
      {
        v92 = *(uint8x16_t *)v76[-2].i8;
        v93 = vmovl_u8(*(uint8x8_t *)v92.i8);
        v94 = vmovl_high_u8(v92);
        v95 = vmovl_u8(*v76);
        v96 = vmovl_high_u8(*(uint8x16_t *)v76->i8);
        v87 = (int32x4_t)vaddw_high_u16((uint32x4_t)v87, v94);
        v86 = (int32x4_t)vaddw_u16((uint32x4_t)v86, *(uint16x4_t *)v94.i8);
        v85 = (int32x4_t)vaddw_high_u16((uint32x4_t)v85, v93);
        v84 = (int32x4_t)vaddw_u16((uint32x4_t)v84, *(uint16x4_t *)v93.i8);
        v91 = (int32x4_t)vaddw_high_u16((uint32x4_t)v91, v96);
        v90 = (int32x4_t)vaddw_u16((uint32x4_t)v90, *(uint16x4_t *)v96.i8);
        v89 = (int32x4_t)vaddw_high_u16((uint32x4_t)v89, v95);
        v88 = (int32x4_t)vaddw_u16((uint32x4_t)v88, *(uint16x4_t *)v95.i8);
        v97 = *(uint8x16_t *)v78[-2].i8;
        v98 = vmovl_u8(*(uint8x8_t *)v97.i8);
        v99 = vmovl_high_u8(v97);
        v100 = vmovl_u8(*v78);
        v101 = vmovl_high_u8(*(uint8x16_t *)v78->i8);
        v77 = (int32x4_t)vaddw_high_u16((uint32x4_t)v77, v99);
        v75 = (int32x4_t)vaddw_u16((uint32x4_t)v75, *(uint16x4_t *)v99.i8);
        v74 = (int32x4_t)vaddw_high_u16((uint32x4_t)v74, v98);
        v73 = (int32x4_t)vaddw_u16((uint32x4_t)v73, *(uint16x4_t *)v98.i8);
        v83 = (int32x4_t)vaddw_high_u16((uint32x4_t)v83, v101);
        v82 = (int32x4_t)vaddw_u16((uint32x4_t)v82, *(uint16x4_t *)v101.i8);
        v76 += 4;
        v81 = (int32x4_t)vaddw_high_u16((uint32x4_t)v81, v100);
        v78 += 4;
        v79 = (int32x4_t)vaddw_u16((uint32x4_t)v79, *(uint16x4_t *)v100.i8);
        v80 -= 32;
      }
      while (v80);
      v15 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v88, v84), vaddq_s32(v90, v86)), vaddq_s32(vaddq_s32(v89, v85), vaddq_s32(v91, v87))));
      v14 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v79, v73), vaddq_s32(v82, v75)), vaddq_s32(vaddq_s32(v81, v74), vaddq_s32(v83, v77))));
      if (a3 == v13)
        goto LABEL_67;
      if ((a3 & 0x18) == 0)
      {
LABEL_65:
        v114 = a3 - v13;
        v115 = &a2->u8[v13];
        v116 = (unsigned __int8 *)(v7 + v13 + result);
        do
        {
          v117 = *v116++;
          v15 += v117;
          v118 = *v115++;
          v14 += v118;
          --v114;
        }
        while (v114);
        goto LABEL_67;
      }
    }
    else
    {
      v14 = 0;
      v15 = 0;
      v13 = 0;
    }
    v102 = v13;
    v13 = a3 & 0xFFFFFFFFFFFFFFF8;
    v103 = (int32x4_t)v14;
    v104 = (int32x4_t)v15;
    v105 = 0uLL;
    v106 = (uint8x8_t *)(v7 + v102 + result);
    v107 = (uint8x8_t *)&a2->i8[v102];
    v108 = v102 - (a3 & 0xFFFFFFFFFFFFFFF8);
    v109 = 0uLL;
    do
    {
      v110 = *v106++;
      v111 = vmovl_u8(v110);
      v109 = (int32x4_t)vaddw_high_u16((uint32x4_t)v109, v111);
      v104 = (int32x4_t)vaddw_u16((uint32x4_t)v104, *(uint16x4_t *)v111.i8);
      v112 = *v107++;
      v113 = vmovl_u8(v112);
      v105 = (int32x4_t)vaddw_high_u16((uint32x4_t)v105, v113);
      v103 = (int32x4_t)vaddw_u16((uint32x4_t)v103, *(uint16x4_t *)v113.i8);
      v108 += 8;
    }
    while (v108);
    v15 = vaddvq_s32(vaddq_s32(v104, v109));
    v14 = vaddvq_s32(vaddq_s32(v103, v105));
    if (a3 != v13)
      goto LABEL_65;
LABEL_67:
    v119 = 31 - __clz(a3 - 1);
    if (v15 != v14)
      goto LABEL_75;
LABEL_68:
    v120 = (int8x16_t *)(v7 + result);
    if ((_DWORD)a3 != 1)
    {
      if ((_DWORD)a3)
      {
        switch(v119)
        {
          case 0u:
            v121 = v120->u16[0];
            v122 = a2->u16[0];
            goto LABEL_74;
          case 1u:
            if (v120->u16[0] != a2->u16[0])
              goto LABEL_75;
            v121 = *(unsigned __int16 *)((char *)&v120->u16[-1] + a3);
            v122 = *(unsigned __int16 *)((char *)&a2[-1].u16[7] + a3);
            goto LABEL_74;
          case 2u:
            if (v120->i32[0] != a2->i32[0])
              goto LABEL_75;
            v121 = *(__int32 *)((char *)&v120->i32[-1] + a3);
            v122 = *(__int32 *)((char *)&a2[-1].i32[3] + a3);
            goto LABEL_74;
          case 3u:
            if (v120->i64[0] != a2->i64[0]
              || *(uint64_t *)((char *)&v120->i64[-1] + a3) != *(uint64_t *)((char *)&a2[-1].i64[1]
                                                                                       + a3))
            {
              goto LABEL_75;
            }
            return result;
          case 4u:
            v126 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)&v120[-1] + a3), *(int8x16_t *)((char *)a2 + a3 - 16)), vceqq_s8(*v120, *a2));
            v126.i8[0] = vminvq_u8(v126);
            if (!v126.i32[0])
              goto LABEL_75;
            return result;
          default:
            v123 = (uint8x16_t)vceqq_s8(*v120, *a2);
            v123.i8[0] = vminvq_u8(v123);
            if (!v123.i32[0])
              goto LABEL_75;
            v124 = a3 & 0xF;
            if (a3 < 0x10)
              return result;
            break;
        }
        do
        {
          v125 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v120 + v124), *(int8x16_t *)((char *)a2 + v124));
          v125.i8[0] = vminvq_u8(v125);
          if (!v125.i32[0])
            goto LABEL_75;
          v124 += 16;
        }
        while (v124 < a3);
      }
      return result;
    }
    if (a3)
    {
      v121 = v120->u8[0];
      v122 = a2->u8[0];
LABEL_74:
      if (v121 != v122)
      {
LABEL_75:
        while (result)
        {
          if (--result + a3 >= v4 || result >= v4)
            goto LABEL_109;
          v15 = v15 - *(unsigned __int8 *)(v7 + result + a3) + *(unsigned __int8 *)(v7 + result);
          if (v15 == v14)
            goto LABEL_68;
        }
        return -1;
      }
      return result;
    }
    goto LABEL_109;
  }
  if (!a3)
  {
    v11 = 0;
    v10 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    goto LABEL_95;
  }
  if (v4 >= result)
    v8 = v4 - result;
  else
    v8 = 0;
  if (v8 <= a3 - 1)
  {
LABEL_109:
    __break(1u);
    return result;
  }
  if (a3 < 8)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    goto LABEL_34;
  }
  if (a3 >= 0x20)
  {
    v20 = 0uLL;
    v9 = a3 & 0xFFFFFFFFFFFFFFE0;
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = (uint16x8_t *)(v7 + 2 * result + 32);
    v24 = 0uLL;
    v25 = (uint8x8_t *)&a2[1];
    v26 = 0uLL;
    v27 = a3 & 0xFFFFFFFFFFFFFFE0;
    v28 = 0uLL;
    v29 = 0uLL;
    v30 = 0uLL;
    v31 = 0uLL;
    v32 = 0uLL;
    v33 = 0uLL;
    v34 = 0uLL;
    v35 = 0uLL;
    v36 = 0uLL;
    v37 = 0uLL;
    v38 = 0uLL;
    do
    {
      v40 = v23[-2];
      v39 = v23[-1];
      v42 = *v23;
      v41 = v23[1];
      v23 += 4;
      v32 = (int32x4_t)vaddw_high_u16((uint32x4_t)v32, v40);
      v33 = (int32x4_t)vaddw_u16((uint32x4_t)v33, *(uint16x4_t *)v39.i8);
      v31 = (int32x4_t)vaddw_u16((uint32x4_t)v31, *(uint16x4_t *)v40.i8);
      v34 = (int32x4_t)vaddw_high_u16((uint32x4_t)v34, v39);
      v36 = (int32x4_t)vaddw_high_u16((uint32x4_t)v36, v42);
      v37 = (int32x4_t)vaddw_u16((uint32x4_t)v37, *(uint16x4_t *)v41.i8);
      v35 = (int32x4_t)vaddw_u16((uint32x4_t)v35, *(uint16x4_t *)v42.i8);
      v38 = (int32x4_t)vaddw_high_u16((uint32x4_t)v38, v41);
      v43 = *(uint8x16_t *)v25[-2].i8;
      v44 = vmovl_u8(*(uint8x8_t *)v43.i8);
      v45 = vmovl_high_u8(v43);
      v46 = vmovl_u8(*v25);
      v47 = vmovl_high_u8(*(uint8x16_t *)v25->i8);
      v24 = (int32x4_t)vaddw_high_u16((uint32x4_t)v24, v45);
      v22 = (int32x4_t)vaddw_u16((uint32x4_t)v22, *(uint16x4_t *)v45.i8);
      v21 = (int32x4_t)vaddw_high_u16((uint32x4_t)v21, v44);
      v20 = (int32x4_t)vaddw_u16((uint32x4_t)v20, *(uint16x4_t *)v44.i8);
      v30 = (int32x4_t)vaddw_high_u16((uint32x4_t)v30, v47);
      v29 = (int32x4_t)vaddw_u16((uint32x4_t)v29, *(uint16x4_t *)v47.i8);
      v28 = (int32x4_t)vaddw_high_u16((uint32x4_t)v28, v46);
      v26 = (int32x4_t)vaddw_u16((uint32x4_t)v26, *(uint16x4_t *)v46.i8);
      v25 += 4;
      v27 -= 32;
    }
    while (v27);
    v11 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v35, v31), vaddq_s32(v37, v33)), vaddq_s32(vaddq_s32(v36, v32), vaddq_s32(v38, v34))));
    v10 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v26, v20), vaddq_s32(v29, v22)), vaddq_s32(vaddq_s32(v28, v21), vaddq_s32(v30, v24))));
    if (a3 == v9)
      goto LABEL_36;
    if ((a3 & 0x18) == 0)
    {
LABEL_34:
      v58 = a3 - v9;
      v59 = &a2->u8[v9];
      v60 = (unsigned __int16 *)(v7 + 2 * (v9 + result));
      do
      {
        v61 = *v60++;
        v11 += v61;
        v62 = *v59++;
        v10 += v62;
        --v58;
      }
      while (v58);
      goto LABEL_36;
    }
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
  }
  v48 = v9;
  v9 = a3 & 0xFFFFFFFFFFFFFFF8;
  v49 = (int32x4_t)v10;
  v50 = (int32x4_t)v11;
  v51 = 0uLL;
  v52 = (uint16x8_t *)(v7 + 2 * (v48 + result));
  v53 = (uint64_t *)((char *)a2->i64 + v48);
  v54 = v48 - (a3 & 0xFFFFFFFFFFFFFFF8);
  v55 = 0uLL;
  do
  {
    v56 = *v52++;
    v55 = (int32x4_t)vaddw_high_u16((uint32x4_t)v55, v56);
    v50 = (int32x4_t)vaddw_u16((uint32x4_t)v50, *(uint16x4_t *)v56.i8);
    v56.i64[0] = *v53++;
    v57 = vmovl_u8(*(uint8x8_t *)v56.i8);
    v51 = (int32x4_t)vaddw_high_u16((uint32x4_t)v51, v57);
    v49 = (int32x4_t)vaddw_u16((uint32x4_t)v49, *(uint16x4_t *)v57.i8);
    v54 += 8;
  }
  while (v54);
  v11 = vaddvq_s32(vaddq_s32(v50, v55));
  v10 = vaddvq_s32(vaddq_s32(v49, v51));
  if (a3 != v9)
    goto LABEL_34;
LABEL_36:
  if (a3 >= 8)
  {
    if (v11 != v10)
      goto LABEL_42;
LABEL_38:
    v63 = (int16x8_t *)(v7 + 2 * result);
    v64 = (uint16x8_t)vceqq_s16(*v63, (int16x8_t)vmovl_u8(*(uint8x8_t *)a2->i8));
    v64.i16[0] = vminvq_u16(v64);
    v65 = a3 & 7;
    if (!v64.i32[0])
      goto LABEL_42;
    while (1)
    {
      v66 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v63 + 2 * v65), (int16x8_t)vmovl_u8(*(uint8x8_t *)&a2->i8[v65]));
      v66.i16[0] = vminvq_u16(v66);
      if (!v66.i32[0])
        break;
      v65 += 8;
      if (v65 >= a3)
        return result;
    }
LABEL_42:
    while (result)
    {
      if (--result + a3 >= v4 || result >= v4)
        goto LABEL_109;
      v11 = v11 - *(unsigned __int16 *)(v7 + 2 * (result + a3)) + *(unsigned __int16 *)(v7 + 2 * result);
      if (v11 == v10)
        goto LABEL_38;
    }
    return -1;
  }
  v17 = a3 == 1;
  v16 = a3 > 1;
  if (a3 < 4)
  {
    v18 = a3 & 1;
    v19 = 2 * v18;
    if (v11 != v10)
      goto LABEL_104;
LABEL_95:
    v127 = (int *)(v7 + 2 * result);
    if (v16)
    {
      v128 = *v127;
      v129 = *(int *)((char *)v127 + v19);
      if (((a2->u16[0] | (a2->u16[0] << 8)) & 0xFF00FF) != v128
        || ((*(unsigned __int16 *)((char *)a2->u16 + v18) | (*(unsigned __int16 *)((char *)a2->u16 + v18) << 8)) & 0xFF00FF) != v129)
      {
LABEL_104:
        while (result)
        {
          if (--result + a3 >= v4 || result >= v4)
            goto LABEL_109;
          v11 = v11 - *(unsigned __int16 *)(v7 + 2 * (result + a3)) + *(unsigned __int16 *)(v7 + 2 * result);
          if (v11 == v10)
            goto LABEL_95;
        }
        return -1;
      }
    }
    else if (v17 && *(_WORD *)v127 != a2->u8[0])
    {
      goto LABEL_104;
    }
    return result;
  }
  v67 = 2 * result;
  v68 = 2 * result + 2 * (a3 & 3);
  if (v11 != v10)
    goto LABEL_53;
LABEL_49:
  v69 = (a2->u32[0] | ((unint64_t)a2->u32[0] << 16)) & 0xFFFF0000FFFFLL;
  v70 = (*(unsigned int *)((char *)a2->u32 + (a3 & 3)) | ((unint64_t)*(unsigned int *)((char *)a2->u32 + (a3 & 3)) << 16)) & 0xFFFF0000FFFFLL;
  v71 = (v70 | (v70 << 8)) & 0xFF00FF00FF00FFLL;
  if (((v69 | (v69 << 8)) & 0xFF00FF00FF00FFLL) != *(_QWORD *)(v7 + v67) || v71 != *(_QWORD *)(v7 + v68))
  {
LABEL_53:
    while (result)
    {
      if (a3 - 1 + result >= v4 || result - 1 >= v4)
        goto LABEL_109;
      v11 = v11 - *(unsigned __int16 *)(v7 + 2 * a3 - 2 + 2 * result) + *(unsigned __int16 *)(v7 + 2 * result - 2);
      v68 -= 2;
      v67 -= 2;
      --result;
      if (v11 == v10)
        goto LABEL_49;
    }
    return -1;
  }
  return result;
}

uint64_t WTF::StringImpl::find(WTF::StringImpl *this, StringView a2, double a3, double a4, float a5)
{
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned __int16 *v9;
  int16x8_t v10;
  int16x8_t *v11;
  int8x16_t v12;
  int16x8_t *v13;
  char *v14;
  int16x8_t *v15;
  unint64_t v16;
  uint64_t result;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int16x8_t v31;
  int16x8_t *v32;
  char *v33;
  unsigned __int16 *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint32x4_t v46;
  uint32x4_t v47;
  uint16x8_t *v48;
  uint16x8_t *v49;
  unint64_t v50;
  uint32x4_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned __int16 *v61;
  unsigned __int16 *v62;
  int v63;
  int v64;
  unsigned int v65;
  int16x8_t *v66;
  BOOL v67;
  unint64_t v68;
  unsigned int v69;
  int16x8_t *v70;
  uint16x8_t v71;
  unsigned int v72;
  uint16x8_t v73;
  uint16x8_t v74;
  uint32x4_t v75;
  uint32x4_t v76;
  uint32x4_t v77;
  uint16x8_t *v78;
  uint32x4_t v79;
  uint8x8_t *v80;
  uint32x4_t v81;
  unint64_t v82;
  uint32x4_t v83;
  uint32x4_t v84;
  uint32x4_t v85;
  uint32x4_t v86;
  uint32x4_t v87;
  uint32x4_t v88;
  uint32x4_t v89;
  uint32x4_t v90;
  uint32x4_t v91;
  uint32x4_t v92;
  uint32x4_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  uint16x8_t v96;
  uint16x8_t v97;
  uint8x16_t v98;
  uint16x8_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint16x8_t *v103;
  uint64_t *v104;
  unint64_t v105;
  uint32x4_t v106;
  uint32x4_t v107;
  uint32x4_t v108;
  unint64_t v109;
  uint32x4_t v110;
  uint16x8_t v111;
  uint16x8_t v112;
  unint64_t v113;
  unsigned __int8 *v114;
  unsigned __int16 *v115;
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  int16x8_t *v121;
  uint16x8_t v122;
  unsigned int v123;
  uint16x8_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int32 v131;
  int v132;
  uint32x4_t v134;
  uint32x4_t v135;
  uint32x4_t v136;
  uint8x8_t *v137;
  uint32x4_t v138;
  uint8x8_t *v139;
  uint32x4_t v140;
  unint64_t v141;
  uint32x4_t v142;
  uint32x4_t v143;
  uint32x4_t v144;
  uint32x4_t v145;
  uint32x4_t v146;
  uint32x4_t v147;
  uint32x4_t v148;
  uint32x4_t v149;
  uint32x4_t v150;
  uint32x4_t v151;
  uint32x4_t v152;
  uint8x16_t v153;
  uint16x8_t v154;
  uint16x8_t v155;
  uint16x8_t v156;
  uint16x8_t v157;
  uint8x16_t v158;
  uint16x8_t v159;
  uint16x8_t v160;
  uint16x8_t v161;
  uint16x8_t v162;
  uint8x8_t *v163;
  uint8x8_t *v164;
  unint64_t v165;
  uint32x4_t v166;
  uint32x4_t v167;
  uint32x4_t v168;
  unint64_t v169;
  uint32x4_t v170;
  uint8x8_t v171;
  uint16x8_t v172;
  uint8x8_t v173;
  uint16x8_t v174;
  unint64_t v175;
  unsigned __int8 *v176;
  unsigned __int8 *v177;
  int v178;
  int v179;
  unsigned int v180;
  int8x16_t *v181;
  unint64_t v182;
  unsigned int v183;
  int8x16_t *v184;
  int v185;
  __int32 v186;
  uint8x16_t v187;
  unsigned int v188;
  uint8x16_t v189;
  uint8x16_t v190;
  uint32x4_t v191;
  uint32x4_t v192;
  uint32x4_t v193;
  uint8x8_t *v194;
  uint32x4_t v195;
  uint16x8_t *v196;
  uint32x4_t v197;
  unint64_t v198;
  uint32x4_t v199;
  uint32x4_t v200;
  uint32x4_t v201;
  uint32x4_t v202;
  uint32x4_t v203;
  uint32x4_t v204;
  uint32x4_t v205;
  uint32x4_t v206;
  uint32x4_t v207;
  uint32x4_t v208;
  uint32x4_t v209;
  uint8x16_t v210;
  uint16x8_t v211;
  uint16x8_t v212;
  uint16x8_t v213;
  uint16x8_t v214;
  uint16x8_t v215;
  uint16x8_t v216;
  uint16x8_t v217;
  uint16x8_t v218;
  uint8x8_t *v219;
  uint16x8_t *v220;
  unint64_t v221;
  uint32x4_t v222;
  uint32x4_t v223;
  uint32x4_t v224;
  unint64_t v225;
  uint32x4_t v226;
  uint8x8_t v227;
  uint16x8_t v228;
  uint16x8_t v229;
  unint64_t v230;
  unsigned __int16 *v231;
  unsigned __int8 *v232;
  int v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint8x8_t *v238;
  uint16x8_t v239;
  unsigned int v240;
  uint16x8_t v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  int v246;
  int v247;

  if (!a2.m_characters)
    return -1;
  v5 = a2.m_length - 1;
  if (a2.m_length == 1)
  {
    v6 = *((_QWORD *)this + 1);
    v7 = *((unsigned int *)this + 1);
    if ((*((_BYTE *)this + 16) & 4) == 0)
    {
      if (a2.m_is8Bit)
      {
        if ((_DWORD)v7)
        {
          v8 = *(unsigned __int8 *)a2.m_characters;
          v9 = (unsigned __int16 *)(v6 + 2 * v7);
          if (v7 <= 0x1F)
          {
            v38 = 2 * v7;
            v34 = (unsigned __int16 *)*((_QWORD *)this + 1);
            result = -1;
            while (*v34 != v8)
            {
              ++v34;
              v38 -= 2;
              if (!v38)
                return result;
            }
            goto LABEL_45;
          }
          v10 = vdupq_n_s16(v8);
          v11 = (int16x8_t *)*((_QWORD *)this + 1);
          while (1)
          {
            v12 = (int8x16_t)vceqq_s16(*v11, v10);
            LOWORD(a5) = vmaxvq_u16((uint16x8_t)v12);
            if (a5 != 0.0)
              break;
            v13 = v11 + 1;
            v14 = &v11[1].i8[14];
            ++v11;
            if (v14 >= (char *)v9)
            {
              if (v13 < (int16x8_t *)v9)
              {
                v15 = (int16x8_t *)(v9 - 8);
                v12 = (int8x16_t)vceqq_s16(*((int16x8_t *)v9 - 1), v10);
                v10.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                if (v10.i32[0])
                  goto LABEL_43;
              }
              return -1;
            }
          }
LABEL_44:
          v34 = (unsigned __int16 *)v11
              + vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v12));
LABEL_45:
          if (v34 == v9)
            return -1;
          else
            return ((uint64_t)v34 - v6) >> 1;
        }
      }
      else if ((_DWORD)v7)
      {
        v30 = *(unsigned __int16 *)a2.m_characters;
        v9 = (unsigned __int16 *)(v6 + 2 * v7);
        if (v7 <= 0x1F)
        {
          v45 = 2 * v7;
          v34 = (unsigned __int16 *)*((_QWORD *)this + 1);
          result = -1;
          while (*v34 != v30)
          {
            ++v34;
            v45 -= 2;
            if (!v45)
              return result;
          }
          goto LABEL_45;
        }
        v31 = vdupq_n_s16(v30);
        v11 = (int16x8_t *)*((_QWORD *)this + 1);
        while (1)
        {
          v12 = (int8x16_t)vceqq_s16(*v11, v31);
          LOWORD(a5) = vmaxvq_u16((uint16x8_t)v12);
          if (a5 != 0.0)
            goto LABEL_44;
          v32 = v11 + 1;
          v33 = &v11[1].i8[14];
          ++v11;
          if (v33 >= (char *)v9)
          {
            if (v32 < (int16x8_t *)v9)
            {
              v15 = (int16x8_t *)(v9 - 8);
              v12 = (int8x16_t)vceqq_s16(*((int16x8_t *)v9 - 1), v31);
              v31.i16[0] = vmaxvq_u16((uint16x8_t)v12);
              if (v31.i32[0])
              {
LABEL_43:
                v11 = v15;
                goto LABEL_44;
              }
            }
            return -1;
          }
        }
      }
      return -1;
    }
    if (a2.m_is8Bit)
    {
      if (!(_DWORD)v7)
        return -1;
      v18 = *(unsigned __int8 *)a2.m_characters;
      v19 = 16;
      if (v7 < 0x10)
        v19 = *((unsigned int *)this + 1);
      v20 = v19;
      v21 = (unsigned __int8 *)*((_QWORD *)this + 1);
      while (*v21 != v18)
      {
        ++v21;
        if (!--v20)
        {
          if (v7 >= 0x11)
          {
            v21 = (unsigned __int8 *)memchr((void *)(v6 + v19), v18, v7 - v19);
            if (v21)
              return (uint64_t)&v21[-v6];
          }
          return -1;
        }
      }
    }
    else
    {
      v35 = *(unsigned __int16 *)a2.m_characters;
      if (v35 > 0xFF || !(_DWORD)v7)
        return -1;
      v36 = 16;
      if (v7 < 0x10)
        v36 = *((unsigned int *)this + 1);
      v37 = v36;
      v21 = (unsigned __int8 *)*((_QWORD *)this + 1);
      while (*v21 != v35)
      {
        ++v21;
        if (!--v37)
        {
          if (v7 < 0x11)
            return -1;
          v21 = (unsigned __int8 *)memchr((void *)(v6 + v36), *(_WORD *)a2.m_characters, v7 - v36);
          if (!v21)
            return -1;
          return (uint64_t)&v21[-v6];
        }
      }
    }
    return (uint64_t)&v21[-v6];
  }
  v16 = *((unsigned int *)this + 1);
  if (v16 < a2.m_length)
    return -1;
  if (!a2.m_length)
    return 0;
  v22 = *((_QWORD *)this + 1);
  v23 = v16 - a2.m_length;
  if ((*((_BYTE *)this + 16) & 4) != 0)
  {
    if (a2.m_is8Bit)
    {
      if ((unint64_t)a2.m_length - 1 >= v16)
        goto LABEL_203;
      if (a2.m_length < 8uLL)
      {
        v27 = 0;
        v28 = 0;
        v29 = 0;
LABEL_144:
        v175 = a2.m_length - v27;
        v176 = (unsigned __int8 *)a2.m_characters + v27;
        v177 = (unsigned __int8 *)(v22 + v27);
        do
        {
          v178 = *v177++;
          v29 += v178;
          v179 = *v176++;
          v28 += v179;
          --v175;
        }
        while (v175);
LABEL_146:
        result = 0;
        v180 = 32 - __clz(v5);
        v181 = (int8x16_t *)((char *)a2.m_characters + a2.m_length);
        v67 = v16 >= a2.m_length;
        v182 = v16 - a2.m_length;
        if (!v67)
          v182 = 0;
        v183 = v180 - 1;
        if (v29 != v28)
        {
LABEL_166:
          while (result != v23)
          {
            if (result == v182)
              goto LABEL_203;
            v29 = v29 + *(unsigned __int8 *)(v22 + result + a2.m_length) - *(unsigned __int8 *)(v22 + result);
            ++result;
            if (v29 == v28)
              goto LABEL_149;
          }
          return -1;
        }
LABEL_149:
        v184 = (int8x16_t *)(v22 + result);
        switch(v183)
        {
          case 0u:
            v185 = v184->u16[0];
            v186 = *(unsigned __int16 *)a2.m_characters;
            goto LABEL_160;
          case 1u:
            if (v184->u16[0] != *(unsigned __int16 *)a2.m_characters)
              goto LABEL_166;
            v185 = *(unsigned __int16 *)((char *)&v184->u16[-1] + a2.m_length);
            v186 = v181[-1].u16[7];
            goto LABEL_160;
          case 2u:
            if (v184->i32[0] != *(_DWORD *)a2.m_characters)
              goto LABEL_166;
            v185 = *(__int32 *)((char *)&v184->i32[-1] + a2.m_length);
            v186 = v181[-1].i32[3];
LABEL_160:
            if (v185 == v186)
              return result;
            goto LABEL_166;
          case 3u:
            if (v184->i64[0] != *(_QWORD *)a2.m_characters
              || *(uint64_t *)((char *)&v184->i64[-1] + a2.m_length) != v181[-1].i64[1])
            {
              goto LABEL_166;
            }
            return result;
          case 4u:
            v190 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)&v184[-1] + a2.m_length), v181[-1]), vceqq_s8(*v184, *(int8x16_t *)a2.m_characters));
            v190.i8[0] = vminvq_u8(v190);
            if (!v190.i32[0])
              goto LABEL_166;
            return result;
          default:
            v187 = (uint8x16_t)vceqq_s8(*v184, *(int8x16_t *)a2.m_characters);
            v187.i8[0] = vminvq_u8(v187);
            if (!v187.i32[0])
              goto LABEL_166;
            v188 = a2.m_length & 0xF;
            if (a2.m_length < 0x10)
              return result;
            break;
        }
        do
        {
          v189 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v184 + v188), *(int8x16_t *)((char *)a2.m_characters + v188));
          v189.i8[0] = vminvq_u8(v189);
          if (!v189.i32[0])
            goto LABEL_166;
          v188 += 16;
        }
        while (v188 < a2.m_length);
        return result;
      }
      if (a2.m_length >= 0x20uLL)
      {
        v134 = 0uLL;
        v135 = 0uLL;
        v27 = a2.m_length - (unint64_t)(a2.m_length & 0x1F);
        v136 = 0uLL;
        v137 = (uint8x8_t *)(v22 + 16);
        v138 = 0uLL;
        v139 = (uint8x8_t *)((char *)a2.m_characters + 16);
        v140 = 0uLL;
        v141 = v27;
        v142 = 0uLL;
        v143 = 0uLL;
        v144 = 0uLL;
        v145 = 0uLL;
        v146 = 0uLL;
        v147 = 0uLL;
        v148 = 0uLL;
        v149 = 0uLL;
        v150 = 0uLL;
        v151 = 0uLL;
        v152 = 0uLL;
        do
        {
          v153 = *(uint8x16_t *)v137[-2].i8;
          v154 = vmovl_u8(*(uint8x8_t *)v153.i8);
          v155 = vmovl_high_u8(v153);
          v156 = vmovl_u8(*v137);
          v157 = vmovl_high_u8(*(uint8x16_t *)v137->i8);
          v148 = vaddw_high_u16(v148, v155);
          v147 = vaddw_u16(v147, *(uint16x4_t *)v155.i8);
          v146 = vaddw_high_u16(v146, v154);
          v145 = vaddw_u16(v145, *(uint16x4_t *)v154.i8);
          v152 = vaddw_high_u16(v152, v157);
          v151 = vaddw_u16(v151, *(uint16x4_t *)v157.i8);
          v150 = vaddw_high_u16(v150, v156);
          v149 = vaddw_u16(v149, *(uint16x4_t *)v156.i8);
          v158 = *(uint8x16_t *)v139[-2].i8;
          v159 = vmovl_u8(*(uint8x8_t *)v158.i8);
          v160 = vmovl_high_u8(v158);
          v161 = vmovl_u8(*v139);
          v162 = vmovl_high_u8(*(uint8x16_t *)v139->i8);
          v138 = vaddw_high_u16(v138, v160);
          v136 = vaddw_u16(v136, *(uint16x4_t *)v160.i8);
          v135 = vaddw_high_u16(v135, v159);
          v134 = vaddw_u16(v134, *(uint16x4_t *)v159.i8);
          v144 = vaddw_high_u16(v144, v162);
          v143 = vaddw_u16(v143, *(uint16x4_t *)v162.i8);
          v137 += 4;
          v142 = vaddw_high_u16(v142, v161);
          v139 += 4;
          v140 = vaddw_u16(v140, *(uint16x4_t *)v161.i8);
          v141 -= 32;
        }
        while (v141);
        v29 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v149, (int32x4_t)v145), vaddq_s32((int32x4_t)v151, (int32x4_t)v147)), vaddq_s32(vaddq_s32((int32x4_t)v150, (int32x4_t)v146), vaddq_s32((int32x4_t)v152, (int32x4_t)v148))));
        v28 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v140, (int32x4_t)v134), vaddq_s32((int32x4_t)v143, (int32x4_t)v136)), vaddq_s32(vaddq_s32((int32x4_t)v142, (int32x4_t)v135), vaddq_s32((int32x4_t)v144, (int32x4_t)v138))));
        if ((a2.m_length & 0x1F) == 0)
          goto LABEL_146;
        if ((a2.m_length & 0x1F) < 8uLL)
          goto LABEL_144;
      }
      else
      {
        v28 = 0;
        v29 = 0;
        v27 = 0;
      }
      v163 = (uint8x8_t *)(v22 + v27);
      v164 = (uint8x8_t *)((char *)a2.m_characters + v27);
      v165 = v27 + (a2.m_length & 7);
      v27 = a2.m_length - (unint64_t)(a2.m_length & 7);
      v166 = (uint32x4_t)v28;
      v167 = 0uLL;
      v168 = (uint32x4_t)v29;
      v169 = v165 - a2.m_length;
      v170 = 0uLL;
      do
      {
        v171 = *v163++;
        v172 = vmovl_u8(v171);
        v170 = vaddw_high_u16(v170, v172);
        v168 = vaddw_u16(v168, *(uint16x4_t *)v172.i8);
        v173 = *v164++;
        v174 = vmovl_u8(v173);
        v167 = vaddw_high_u16(v167, v174);
        v166 = vaddw_u16(v166, *(uint16x4_t *)v174.i8);
        v169 += 8;
      }
      while (v169);
      v29 = vaddvq_s32(vaddq_s32((int32x4_t)v168, (int32x4_t)v170));
      v28 = vaddvq_s32(vaddq_s32((int32x4_t)v166, (int32x4_t)v167));
      if ((a2.m_length & 7) == 0)
        goto LABEL_146;
      goto LABEL_144;
    }
    if ((unint64_t)a2.m_length - 1 >= v16)
      goto LABEL_203;
    if (a2.m_length < 8uLL)
    {
      v42 = 0;
      v43 = 0;
      v44 = 0;
LABEL_177:
      v230 = a2.m_length - v42;
      v231 = (unsigned __int16 *)((char *)a2.m_characters + 2 * v42);
      v232 = (unsigned __int8 *)(v22 + v42);
      do
      {
        v233 = *v232++;
        v44 += v233;
        v234 = *v231++;
        v43 += v234;
        --v230;
      }
      while (v230);
LABEL_179:
      result = 0;
      v235 = a2.m_length & 1;
      v236 = a2.m_length & 3;
      v67 = v16 >= a2.m_length;
      v237 = v16 - a2.m_length;
      if (!v67)
        v237 = 0;
      if (v44 != v43)
      {
LABEL_198:
        while (result != v23)
        {
          if (result == v237)
            goto LABEL_203;
          v44 = v44 + *(unsigned __int8 *)(v22 + result + a2.m_length) - *(unsigned __int8 *)(v22 + result);
          ++result;
          if (v44 == v43)
            goto LABEL_182;
        }
        return -1;
      }
LABEL_182:
      v238 = (uint8x8_t *)(v22 + result);
      if (a2.m_length < 8)
      {
        if (a2.m_length < 4)
        {
          v246 = (v238->u16[0] | (v238->u16[0] << 8)) & 0xFF00FF;
          v247 = (*(unsigned __int16 *)((char *)v238->u16 + v235) | (*(unsigned __int16 *)((char *)v238->u16 + v235) << 8)) & 0xFF00FF;
          if (v246 != *(_DWORD *)a2.m_characters || v247 != *(_DWORD *)((char *)a2.m_characters + 2 * v235))
            goto LABEL_198;
        }
        else
        {
          v242 = (v238->u32[0] | ((unint64_t)v238->u32[0] << 16)) & 0xFFFF0000FFFFLL;
          v243 = (*(unsigned int *)((char *)v238->u32 + v236) | ((unint64_t)*(unsigned int *)((char *)v238->u32 + v236) << 16)) & 0xFFFF0000FFFFLL;
          v244 = (v243 | (v243 << 8)) & 0xFF00FF00FF00FFLL;
          if (((v242 | (v242 << 8)) & 0xFF00FF00FF00FFLL) != *(_QWORD *)a2.m_characters
            || v244 != *(_QWORD *)((char *)a2.m_characters + 2 * v236))
          {
            goto LABEL_198;
          }
        }
      }
      else
      {
        v239 = (uint16x8_t)vceqq_s16(*(int16x8_t *)a2.m_characters, (int16x8_t)vmovl_u8(*v238));
        v239.i16[0] = vminvq_u16(v239);
        v240 = a2.m_length & 7;
        if (!v239.i32[0])
          goto LABEL_198;
        do
        {
          v241 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)a2.m_characters + 2 * v240), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v238 + v240)));
          v241.i16[0] = vminvq_u16(v241);
          if (!v241.i32[0])
            goto LABEL_198;
          v240 += 8;
        }
        while (v240 < a2.m_length);
      }
      return result;
    }
    if (a2.m_length >= 0x20uLL)
    {
      v191 = 0uLL;
      v192 = 0uLL;
      v42 = a2.m_length - (unint64_t)(a2.m_length & 0x1F);
      v193 = 0uLL;
      v194 = (uint8x8_t *)(v22 + 16);
      v195 = 0uLL;
      v196 = (uint16x8_t *)((char *)a2.m_characters + 32);
      v197 = 0uLL;
      v198 = v42;
      v199 = 0uLL;
      v200 = 0uLL;
      v201 = 0uLL;
      v202 = 0uLL;
      v203 = 0uLL;
      v204 = 0uLL;
      v205 = 0uLL;
      v206 = 0uLL;
      v207 = 0uLL;
      v208 = 0uLL;
      v209 = 0uLL;
      do
      {
        v210 = *(uint8x16_t *)v194[-2].i8;
        v211 = vmovl_u8(*(uint8x8_t *)v210.i8);
        v212 = vmovl_high_u8(v210);
        v213 = vmovl_u8(*v194);
        v214 = vmovl_high_u8(*(uint8x16_t *)v194->i8);
        v205 = vaddw_high_u16(v205, v212);
        v204 = vaddw_u16(v204, *(uint16x4_t *)v212.i8);
        v203 = vaddw_high_u16(v203, v211);
        v202 = vaddw_u16(v202, *(uint16x4_t *)v211.i8);
        v209 = vaddw_high_u16(v209, v214);
        v208 = vaddw_u16(v208, *(uint16x4_t *)v214.i8);
        v207 = vaddw_high_u16(v207, v213);
        v206 = vaddw_u16(v206, *(uint16x4_t *)v213.i8);
        v216 = v196[-2];
        v215 = v196[-1];
        v218 = *v196;
        v217 = v196[1];
        v196 += 4;
        v192 = vaddw_high_u16(v192, v216);
        v193 = vaddw_u16(v193, *(uint16x4_t *)v215.i8);
        v191 = vaddw_u16(v191, *(uint16x4_t *)v216.i8);
        v195 = vaddw_high_u16(v195, v215);
        v199 = vaddw_high_u16(v199, v218);
        v200 = vaddw_u16(v200, *(uint16x4_t *)v217.i8);
        v197 = vaddw_u16(v197, *(uint16x4_t *)v218.i8);
        v201 = vaddw_high_u16(v201, v217);
        v194 += 4;
        v198 -= 32;
      }
      while (v198);
      v44 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v206, (int32x4_t)v202), vaddq_s32((int32x4_t)v208, (int32x4_t)v204)), vaddq_s32(vaddq_s32((int32x4_t)v207, (int32x4_t)v203), vaddq_s32((int32x4_t)v209, (int32x4_t)v205))));
      v43 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v197, (int32x4_t)v191), vaddq_s32((int32x4_t)v200, (int32x4_t)v193)), vaddq_s32(vaddq_s32((int32x4_t)v199, (int32x4_t)v192), vaddq_s32((int32x4_t)v201, (int32x4_t)v195))));
      if ((a2.m_length & 0x1F) == 0)
        goto LABEL_179;
      if ((a2.m_length & 0x1F) < 8uLL)
        goto LABEL_177;
    }
    else
    {
      v43 = 0;
      v44 = 0;
      v42 = 0;
    }
    v219 = (uint8x8_t *)(v22 + v42);
    v220 = (uint16x8_t *)((char *)a2.m_characters + 2 * v42);
    v221 = v42 + (a2.m_length & 7);
    v42 = a2.m_length - (unint64_t)(a2.m_length & 7);
    v222 = (uint32x4_t)v43;
    v223 = 0uLL;
    v224 = (uint32x4_t)v44;
    v225 = v221 - a2.m_length;
    v226 = 0uLL;
    do
    {
      v227 = *v219++;
      v228 = vmovl_u8(v227);
      v226 = vaddw_high_u16(v226, v228);
      v224 = vaddw_u16(v224, *(uint16x4_t *)v228.i8);
      v229 = *v220++;
      v223 = vaddw_high_u16(v223, v229);
      v222 = vaddw_u16(v222, *(uint16x4_t *)v229.i8);
      v225 += 8;
    }
    while (v225);
    v44 = vaddvq_s32(vaddq_s32((int32x4_t)v224, (int32x4_t)v226));
    v43 = vaddvq_s32(vaddq_s32((int32x4_t)v222, (int32x4_t)v223));
    if ((a2.m_length & 7) == 0)
      goto LABEL_179;
    goto LABEL_177;
  }
  if (!a2.m_is8Bit)
  {
    if ((unint64_t)a2.m_length - 1 >= v16)
      goto LABEL_203;
    if (a2.m_length >= 0x10uLL)
    {
      v46 = 0uLL;
      v47 = 0uLL;
      v39 = a2.m_length - (unint64_t)(a2.m_length & 0xF);
      v48 = (uint16x8_t *)(v22 + 16);
      v49 = (uint16x8_t *)((char *)a2.m_characters + 16);
      v50 = v39;
      v51 = 0uLL;
      v52 = 0uLL;
      v53 = 0uLL;
      v54 = 0uLL;
      v55 = 0uLL;
      v56 = 0uLL;
      do
      {
        v57 = v48[-1];
        v54 = vaddw_high_u16(v54, v57);
        v53 = vaddw_u16(v53, *(uint16x4_t *)v57.i8);
        v56 = vaddw_high_u16(v56, *v48);
        v55 = vaddw_u16(v55, *(uint16x4_t *)v48->i8);
        v58 = v49[-1];
        v47 = vaddw_high_u16(v47, v58);
        v46 = vaddw_u16(v46, *(uint16x4_t *)v58.i8);
        v52 = vaddw_high_u16(v52, *v49);
        v51 = vaddw_u16(v51, *(uint16x4_t *)v49->i8);
        v48 += 2;
        v49 += 2;
        v50 -= 16;
      }
      while (v50);
      v41 = vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)v55, (int32x4_t)v53), vaddq_s32((int32x4_t)v56, (int32x4_t)v54)));
      v40 = vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)v51, (int32x4_t)v46), vaddq_s32((int32x4_t)v52, (int32x4_t)v47)));
      if ((a2.m_length & 0xF) == 0)
        goto LABEL_81;
    }
    else
    {
      v39 = 0;
      v40 = 0;
      v41 = 0;
    }
    v59 = a2.m_length - v39;
    v60 = 2 * v39;
    v61 = (unsigned __int16 *)((char *)a2.m_characters + 2 * v39);
    v62 = (unsigned __int16 *)(v22 + v60);
    do
    {
      v63 = *v62++;
      v41 += v63;
      v64 = *v61++;
      v40 += v64;
      --v59;
    }
    while (v59);
LABEL_81:
    result = 0;
    v65 = 32 - __clz(v5);
    v66 = (int16x8_t *)((char *)a2.m_characters + 2 * a2.m_length);
    v67 = v16 >= a2.m_length;
    v68 = v16 - a2.m_length;
    if (!v67)
      v68 = 0;
    v69 = v65 - 1;
    if (v41 != v40)
    {
LABEL_99:
      while (result != v23)
      {
        if (result == v68)
          goto LABEL_203;
        v41 = v41 + *(unsigned __int16 *)(v22 + 2 * (result + a2.m_length)) - *(unsigned __int16 *)(v22 + 2 * result);
        ++result;
        if (v41 == v40)
          goto LABEL_84;
      }
      return -1;
    }
LABEL_84:
    v70 = (int16x8_t *)(v22 + 2 * result);
    switch(v69)
    {
      case 0u:
        if (v70->i32[0] != *(_DWORD *)a2.m_characters)
          goto LABEL_99;
        break;
      case 1u:
        if (v70->i32[0] != *(_DWORD *)a2.m_characters
          || *(__int32 *)((char *)&v70->i32[-1] + 2 * a2.m_length) != v66[-1].i32[3])
        {
          goto LABEL_99;
        }
        break;
      case 2u:
        if (v70->i64[0] != *(_QWORD *)a2.m_characters
          || *(uint64_t *)((char *)&v70->i64[-1] + 2 * a2.m_length) != v66[-1].i64[1])
        {
          goto LABEL_99;
        }
        break;
      case 3u:
        v74 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)((char *)v70 + 2 * a2.m_length - 16), v66[-1]), (int8x16_t)vceqq_s16(*v70, *(int16x8_t *)a2.m_characters));
        v74.i16[0] = vminvq_u16(v74);
        if (!v74.i32[0])
          goto LABEL_99;
        break;
      default:
        v71 = (uint16x8_t)vceqq_s16(*v70, *(int16x8_t *)a2.m_characters);
        v71.i16[0] = vminvq_u16(v71);
        if (!v71.i32[0])
          goto LABEL_99;
        v72 = a2.m_length & 7;
        if (a2.m_length >= 8)
        {
          do
          {
            v73 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v70 + 2 * v72), *(int16x8_t *)((char *)a2.m_characters + 2 * v72));
            v73.i16[0] = vminvq_u16(v73);
            if (!v73.i32[0])
              goto LABEL_99;
            v72 += 8;
          }
          while (v72 < a2.m_length);
        }
        break;
    }
    return result;
  }
  if ((unint64_t)a2.m_length - 1 >= v16)
  {
LABEL_203:
    __break(1u);
    return 0;
  }
  if (a2.m_length >= 8uLL)
  {
    if (a2.m_length >= 0x20uLL)
    {
      v75 = 0uLL;
      v76 = 0uLL;
      v24 = a2.m_length - (unint64_t)(a2.m_length & 0x1F);
      v77 = 0uLL;
      v78 = (uint16x8_t *)(v22 + 32);
      v79 = 0uLL;
      v80 = (uint8x8_t *)((char *)a2.m_characters + 16);
      v81 = 0uLL;
      v82 = v24;
      v83 = 0uLL;
      v84 = 0uLL;
      v85 = 0uLL;
      v86 = 0uLL;
      v87 = 0uLL;
      v88 = 0uLL;
      v89 = 0uLL;
      v90 = 0uLL;
      v91 = 0uLL;
      v92 = 0uLL;
      v93 = 0uLL;
      do
      {
        v95 = v78[-2];
        v94 = v78[-1];
        v97 = *v78;
        v96 = v78[1];
        v78 += 4;
        v87 = vaddw_high_u16(v87, v95);
        v88 = vaddw_u16(v88, *(uint16x4_t *)v94.i8);
        v86 = vaddw_u16(v86, *(uint16x4_t *)v95.i8);
        v89 = vaddw_high_u16(v89, v94);
        v91 = vaddw_high_u16(v91, v97);
        v92 = vaddw_u16(v92, *(uint16x4_t *)v96.i8);
        v90 = vaddw_u16(v90, *(uint16x4_t *)v97.i8);
        v93 = vaddw_high_u16(v93, v96);
        v98 = *(uint8x16_t *)v80[-2].i8;
        v99 = vmovl_u8(*(uint8x8_t *)v98.i8);
        v100 = vmovl_high_u8(v98);
        v101 = vmovl_u8(*v80);
        v102 = vmovl_high_u8(*(uint8x16_t *)v80->i8);
        v79 = vaddw_high_u16(v79, v100);
        v77 = vaddw_u16(v77, *(uint16x4_t *)v100.i8);
        v76 = vaddw_high_u16(v76, v99);
        v75 = vaddw_u16(v75, *(uint16x4_t *)v99.i8);
        v85 = vaddw_high_u16(v85, v102);
        v84 = vaddw_u16(v84, *(uint16x4_t *)v102.i8);
        v83 = vaddw_high_u16(v83, v101);
        v81 = vaddw_u16(v81, *(uint16x4_t *)v101.i8);
        v80 += 4;
        v82 -= 32;
      }
      while (v82);
      v26 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v90, (int32x4_t)v86), vaddq_s32((int32x4_t)v92, (int32x4_t)v88)), vaddq_s32(vaddq_s32((int32x4_t)v91, (int32x4_t)v87), vaddq_s32((int32x4_t)v93, (int32x4_t)v89))));
      v25 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v81, (int32x4_t)v75), vaddq_s32((int32x4_t)v84, (int32x4_t)v77)), vaddq_s32(vaddq_s32((int32x4_t)v83, (int32x4_t)v76), vaddq_s32((int32x4_t)v85, (int32x4_t)v79))));
      if ((a2.m_length & 0x1F) == 0)
        goto LABEL_114;
      if ((a2.m_length & 0x1F) < 8uLL)
        goto LABEL_112;
    }
    else
    {
      v25 = 0;
      v26 = 0;
      v24 = 0;
    }
    v103 = (uint16x8_t *)(v22 + 2 * v24);
    v104 = (uint64_t *)((char *)a2.m_characters + v24);
    v105 = v24 + (a2.m_length & 7);
    v24 = a2.m_length - (unint64_t)(a2.m_length & 7);
    v106 = (uint32x4_t)v25;
    v107 = 0uLL;
    v108 = (uint32x4_t)v26;
    v109 = v105 - a2.m_length;
    v110 = 0uLL;
    do
    {
      v111 = *v103++;
      v110 = vaddw_high_u16(v110, v111);
      v108 = vaddw_u16(v108, *(uint16x4_t *)v111.i8);
      v111.i64[0] = *v104++;
      v112 = vmovl_u8(*(uint8x8_t *)v111.i8);
      v107 = vaddw_high_u16(v107, v112);
      v106 = vaddw_u16(v106, *(uint16x4_t *)v112.i8);
      v109 += 8;
    }
    while (v109);
    v26 = vaddvq_s32(vaddq_s32((int32x4_t)v108, (int32x4_t)v110));
    v25 = vaddvq_s32(vaddq_s32((int32x4_t)v106, (int32x4_t)v107));
    if ((a2.m_length & 7) == 0)
      goto LABEL_114;
    goto LABEL_112;
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
LABEL_112:
  v113 = a2.m_length - v24;
  v114 = (unsigned __int8 *)a2.m_characters + v24;
  v115 = (unsigned __int16 *)(v22 + 2 * v24);
  do
  {
    v116 = *v115++;
    v26 += v116;
    v117 = *v114++;
    v25 += v117;
    --v113;
  }
  while (v113);
LABEL_114:
  result = 0;
  v118 = a2.m_length & 1;
  v119 = a2.m_length & 3;
  v67 = v16 >= a2.m_length;
  v120 = v16 - a2.m_length;
  if (!v67)
    v120 = 0;
  if (v26 != v25)
  {
LABEL_133:
    while (result != v23)
    {
      if (result == v120)
        goto LABEL_203;
      v26 = v26 + *(unsigned __int16 *)(v22 + 2 * (result + a2.m_length)) - *(unsigned __int16 *)(v22 + 2 * result);
      ++result;
      if (v26 == v25)
        goto LABEL_117;
    }
    return -1;
  }
LABEL_117:
  v121 = (int16x8_t *)(v22 + 2 * result);
  if (a2.m_length < 8)
  {
    if (a2.m_length < 4)
    {
      v131 = v121->i32[0];
      v132 = *(__int32 *)((char *)v121->i32 + 2 * v118);
      if (((*(unsigned __int16 *)a2.m_characters | (*(unsigned __int16 *)a2.m_characters << 8)) & 0xFF00FF) != v131
        || ((*(unsigned __int16 *)((char *)a2.m_characters + v118) | (*(unsigned __int16 *)((char *)a2.m_characters
                                                                                          + v118) << 8)) & 0xFF00FF) != v132)
      {
        goto LABEL_133;
      }
    }
    else
    {
      v125 = (*(unsigned int *)a2.m_characters | ((unint64_t)*(unsigned int *)a2.m_characters << 16)) & 0xFFFF0000FFFFLL;
      v126 = v121->i64[0];
      v127 = (*(unsigned int *)((char *)a2.m_characters + v119) | ((unint64_t)*(unsigned int *)((char *)a2.m_characters + v119) << 16)) & 0xFFFF0000FFFFLL;
      v128 = (v127 | (v127 << 8)) & 0xFF00FF00FF00FFLL;
      v129 = *(uint64_t *)((char *)v121->i64 + 2 * v119);
      if (((v125 | (v125 << 8)) & 0xFF00FF00FF00FFLL) != v126 || v128 != v129)
        goto LABEL_133;
    }
  }
  else
  {
    v122 = (uint16x8_t)vceqq_s16(*v121, (int16x8_t)vmovl_u8(*(uint8x8_t *)a2.m_characters));
    v122.i16[0] = vminvq_u16(v122);
    v123 = a2.m_length & 7;
    if (!v122.i32[0])
      goto LABEL_133;
    do
    {
      v124 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v121 + 2 * v123), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a2.m_characters + v123)));
      v124.i16[0] = vminvq_u16(v124);
      if (!v124.i32[0])
        goto LABEL_133;
      v123 += 8;
    }
    while (v123 < a2.m_length);
  }
  return result;
}

uint64_t WTF::StringImpl::find(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, double a5, double a6, float a7)
{
  StringView v8;
  StringView v9;

  if (!a2)
    return -1;
  *(_QWORD *)&v9.m_length = a4;
  v9.m_characters = a3;
  *(_QWORD *)&v8.m_length = a2;
  LODWORD(v8.m_characters) = *(_DWORD *)(a1 + 4);
  HIDWORD(v8.m_characters) = (*(_DWORD *)(a1 + 16) >> 2) & 1;
  return WTF::findCommon(*(_QWORD *)(a1 + 8), v8, v9, a5, a6, a7);
}

uint64_t WTF::findCommon(uint64_t this, StringView a2, StringView a3, double a4, double a5, float a6)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t m_characters_low;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t m_length;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int16x8_t *v22;
  unint64_t v23;
  unint64_t v24;
  int16x8_t v25;
  int8x16_t v26;
  int16x8_t *v27;
  __int8 *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  uint8x8_t *v45;
  int32x4_t v46;
  uint8x8_t *v47;
  int32x4_t v48;
  unint64_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  uint8x16_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint8x16_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint64_t v70;
  uint8x8_t *v71;
  unint64_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  uint8x8_t *v76;
  unint64_t v77;
  int32x4_t v78;
  uint8x8_t v79;
  uint16x8_t v80;
  uint8x8_t v81;
  uint16x8_t v82;
  unint64_t v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unsigned int v91;
  uint64_t v92;
  BOOL v93;
  unint64_t v94;
  int v95;
  int v96;
  uint8x16_t v97;
  unsigned int v98;
  uint8x16_t v99;
  uint8x16_t v100;
  int32x4_t v101;
  int32x4_t v102;
  uint16x8_t *v103;
  uint16x8_t *v104;
  unint64_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  uint16x8_t v112;
  uint16x8_t v113;
  unint64_t v114;
  uint64_t v115;
  unsigned __int16 *v116;
  unsigned __int16 *v117;
  int v118;
  int v119;
  uint64_t v120;
  unint64_t v121;
  unsigned int v122;
  uint64_t v123;
  unint64_t v124;
  int v125;
  int v126;
  uint16x8_t v127;
  unsigned int v128;
  uint16x8_t v129;
  uint16x8_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  uint16x8_t *v135;
  int32x4_t v136;
  uint8x8_t *v137;
  int32x4_t v138;
  unint64_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  uint16x8_t v150;
  uint16x8_t v151;
  uint16x8_t v152;
  uint16x8_t v153;
  uint8x16_t v154;
  uint16x8_t v155;
  uint16x8_t v156;
  uint16x8_t v157;
  uint16x8_t v158;
  int32x4_t v159;
  int32x4_t v160;
  uint64_t v161;
  uint64_t *v162;
  unint64_t v163;
  int32x4_t v164;
  uint16x8_t *v165;
  unint64_t v166;
  int32x4_t v167;
  uint16x8_t v168;
  uint16x8_t v169;
  unint64_t v170;
  unsigned __int8 *v171;
  unsigned __int16 *v172;
  int v173;
  int v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  int16x8_t *v181;
  uint16x8_t v182;
  unsigned int v183;
  uint16x8_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int32 v191;
  int v192;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  uint8x8_t *v198;
  int32x4_t v199;
  uint16x8_t *v200;
  int32x4_t v201;
  unint64_t v202;
  int32x4_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int32x4_t v207;
  int32x4_t v208;
  int32x4_t v209;
  int32x4_t v210;
  int32x4_t v211;
  int32x4_t v212;
  uint8x16_t v213;
  uint16x8_t v214;
  uint16x8_t v215;
  uint16x8_t v216;
  uint16x8_t v217;
  uint16x8_t v218;
  uint16x8_t v219;
  uint16x8_t v220;
  uint16x8_t v221;
  uint64_t v222;
  uint16x8_t *v223;
  unint64_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int32x4_t v227;
  uint8x8_t *v228;
  unint64_t v229;
  int32x4_t v230;
  uint8x8_t v231;
  uint16x8_t v232;
  uint16x8_t v233;
  unint64_t v234;
  unsigned __int16 *v235;
  unsigned __int8 *v236;
  int v237;
  int v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint8x8_t *v243;
  uint16x8_t v244;
  unsigned int v245;
  uint16x8_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  int v251;
  int v252;

  v6 = this;
  v7 = LODWORD(a3.m_characters) - 1;
  if (LODWORD(a3.m_characters) != 1)
  {
    if (LODWORD(a2.m_characters) < a3.m_length)
      return -1;
    if (!LODWORD(a3.m_characters))
      return a3.m_length;
    if (LODWORD(a2.m_characters) - a3.m_length < LODWORD(a3.m_characters))
      return -1;
    m_length = a3.m_length;
    if (BYTE4(a2.m_characters))
    {
      if (BYTE4(a3.m_characters))
      {
        v18 = LODWORD(a2.m_characters) - (unint64_t)a3.m_length;
        if (LODWORD(a2.m_characters) >= (unint64_t)a3.m_length
          && v18 > (unint64_t)LODWORD(a3.m_characters) - 1)
        {
          if (LODWORD(a3.m_characters) < 8uLL)
          {
            v19 = 0;
            v20 = 0;
            v21 = 0;
LABEL_72:
            v83 = LODWORD(a3.m_characters) - v19;
            v84 = (unsigned __int8 *)(*(_QWORD *)&a2.m_length + v19);
            v85 = (unsigned __int8 *)(v6 + v19 + a3.m_length);
            do
            {
              v86 = *v85++;
              v21 += v86;
              v87 = *v84++;
              v20 += v87;
              --v83;
            }
            while (v83);
LABEL_74:
            v88 = 0;
            v89 = v6 + a3.m_length;
            v90 = v18 - LODWORD(a3.m_characters);
            v91 = 32 - __clz(v7);
            v92 = *(_QWORD *)&a2.m_length + LODWORD(a3.m_characters);
            v93 = v18 >= LODWORD(a3.m_characters);
            v94 = v90;
            if (!v93)
              v94 = 0;
            this = v91 - 1;
            if (v21 != v20)
            {
LABEL_94:
              while (v88 != v90)
              {
                if (v88 == v94)
                  goto LABEL_192;
                v21 = v21 + *(unsigned __int8 *)(v89 + v88 + LODWORD(a3.m_characters)) - *(unsigned __int8 *)(v89 + v88);
                ++v88;
                if (v21 == v20)
                  goto LABEL_77;
              }
              return -1;
            }
LABEL_77:
            *(_QWORD *)&a3.m_length = v89 + v88;
            switch((int)this)
            {
              case 0:
                v95 = (unsigned __int16)**(_WORD **)&a3.m_length;
                v96 = (unsigned __int16)**(_WORD **)&a2.m_length;
                goto LABEL_88;
              case 1:
                if (**(_WORD **)&a3.m_length != **(_WORD **)&a2.m_length)
                  goto LABEL_94;
                v95 = *(unsigned __int16 *)(*(_QWORD *)&a3.m_length + LODWORD(a3.m_characters) - 2);
                v96 = *(unsigned __int16 *)(v92 - 2);
                goto LABEL_88;
              case 2:
                if (**(_DWORD **)&a3.m_length != **(_DWORD **)&a2.m_length)
                  goto LABEL_94;
                v95 = *(_DWORD *)(*(_QWORD *)&a3.m_length + LODWORD(a3.m_characters) - 4);
                v96 = *(_DWORD *)(v92 - 4);
LABEL_88:
                if (v95 == v96)
                  return v88 + m_length;
                goto LABEL_94;
              case 3:
                if (**(_QWORD **)&a3.m_length == **(_QWORD **)&a2.m_length
                  && *(_QWORD *)(*(_QWORD *)&a3.m_length + LODWORD(a3.m_characters) - 8) == *(_QWORD *)(v92 - 8))
                {
                  return v88 + m_length;
                }
                goto LABEL_94;
              case 4:
                v100 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(*(_QWORD *)&a3.m_length + LODWORD(a3.m_characters) - 16), *(int8x16_t *)(v92 - 16)), vceqq_s8(**(int8x16_t **)&a3.m_length, **(int8x16_t **)&a2.m_length));
                v100.i8[0] = vminvq_u8(v100);
                if (!v100.i32[0])
                  goto LABEL_94;
                return v88 + m_length;
              default:
                v97 = (uint8x16_t)vceqq_s8(**(int8x16_t **)&a3.m_length, **(int8x16_t **)&a2.m_length);
                v97.i8[0] = vminvq_u8(v97);
                if (!v97.i32[0])
                  goto LABEL_94;
                v98 = (uint64_t)a3.m_characters & 0xF;
                if (LODWORD(a3.m_characters) < 0x10)
                  return v88 + m_length;
                break;
            }
            do
            {
              v99 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(*(_QWORD *)&a3.m_length + v98), *(int8x16_t *)(*(_QWORD *)&a2.m_length + v98));
              v99.i8[0] = vminvq_u8(v99);
              if (!v99.i32[0])
                goto LABEL_94;
              v98 += 16;
            }
            while (v98 < LODWORD(a3.m_characters));
            return v88 + m_length;
          }
          if (LODWORD(a3.m_characters) >= 0x20uLL)
          {
            v41 = 0uLL;
            v42 = 0uLL;
            v19 = LODWORD(a3.m_characters) - (unint64_t)((uint64_t)a3.m_characters & 0x1F);
            v43 = 0uLL;
            v44 = 0uLL;
            v45 = (uint8x8_t *)(a3.m_length + this + 16);
            v46 = 0uLL;
            v47 = (uint8x8_t *)(*(_QWORD *)&a2.m_length + 16);
            v48 = 0uLL;
            v49 = v19;
            v50 = 0uLL;
            v51 = 0uLL;
            v52 = 0uLL;
            v53 = 0uLL;
            v54 = 0uLL;
            v55 = 0uLL;
            v56 = 0uLL;
            v57 = 0uLL;
            v58 = 0uLL;
            v59 = 0uLL;
            do
            {
              v60 = *(uint8x16_t *)v45[-2].i8;
              v61 = vmovl_u8(*(uint8x8_t *)v60.i8);
              v62 = vmovl_high_u8(v60);
              v63 = vmovl_u8(*v45);
              v64 = vmovl_high_u8(*(uint8x16_t *)v45->i8);
              v55 = (int32x4_t)vaddw_high_u16((uint32x4_t)v55, v62);
              v54 = (int32x4_t)vaddw_u16((uint32x4_t)v54, *(uint16x4_t *)v62.i8);
              v53 = (int32x4_t)vaddw_high_u16((uint32x4_t)v53, v61);
              v52 = (int32x4_t)vaddw_u16((uint32x4_t)v52, *(uint16x4_t *)v61.i8);
              v59 = (int32x4_t)vaddw_high_u16((uint32x4_t)v59, v64);
              v58 = (int32x4_t)vaddw_u16((uint32x4_t)v58, *(uint16x4_t *)v64.i8);
              v57 = (int32x4_t)vaddw_high_u16((uint32x4_t)v57, v63);
              v56 = (int32x4_t)vaddw_u16((uint32x4_t)v56, *(uint16x4_t *)v63.i8);
              v65 = *(uint8x16_t *)v47[-2].i8;
              v66 = vmovl_u8(*(uint8x8_t *)v65.i8);
              v67 = vmovl_high_u8(v65);
              v68 = vmovl_u8(*v47);
              v69 = vmovl_high_u8(*(uint8x16_t *)v47->i8);
              v44 = (int32x4_t)vaddw_high_u16((uint32x4_t)v44, v67);
              v43 = (int32x4_t)vaddw_u16((uint32x4_t)v43, *(uint16x4_t *)v67.i8);
              v42 = (int32x4_t)vaddw_high_u16((uint32x4_t)v42, v66);
              v41 = (int32x4_t)vaddw_u16((uint32x4_t)v41, *(uint16x4_t *)v66.i8);
              v51 = (int32x4_t)vaddw_high_u16((uint32x4_t)v51, v69);
              v50 = (int32x4_t)vaddw_u16((uint32x4_t)v50, *(uint16x4_t *)v69.i8);
              v45 += 4;
              v48 = (int32x4_t)vaddw_high_u16((uint32x4_t)v48, v68);
              v47 += 4;
              v46 = (int32x4_t)vaddw_u16((uint32x4_t)v46, *(uint16x4_t *)v68.i8);
              v49 -= 32;
            }
            while (v49);
            v21 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v56, v52), vaddq_s32(v58, v54)), vaddq_s32(vaddq_s32(v57, v53), vaddq_s32(v59, v55))));
            v20 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v46, v41), vaddq_s32(v50, v43)), vaddq_s32(vaddq_s32(v48, v42), vaddq_s32(v51, v44))));
            if (((uint64_t)a3.m_characters & 0x1F) == 0)
              goto LABEL_74;
            if (((uint64_t)a3.m_characters & 0x1F) < 8uLL)
              goto LABEL_72;
          }
          else
          {
            v20 = 0;
            v21 = 0;
            v19 = 0;
          }
          v70 = this + v19;
          v71 = (uint8x8_t *)(*(_QWORD *)&a2.m_length + v19);
          v72 = v19 + ((uint64_t)a3.m_characters & 7);
          v19 = LODWORD(a3.m_characters) - (unint64_t)((uint64_t)a3.m_characters & 7);
          v73 = 0uLL;
          v74 = (int32x4_t)v20;
          v75 = (int32x4_t)v21;
          v76 = (uint8x8_t *)(v70 + a3.m_length);
          v77 = v72 - LODWORD(a3.m_characters);
          v78 = 0uLL;
          do
          {
            v79 = *v76++;
            v80 = vmovl_u8(v79);
            v78 = (int32x4_t)vaddw_high_u16((uint32x4_t)v78, v80);
            v75 = (int32x4_t)vaddw_u16((uint32x4_t)v75, *(uint16x4_t *)v80.i8);
            v81 = *v71++;
            v82 = vmovl_u8(v81);
            v73 = (int32x4_t)vaddw_high_u16((uint32x4_t)v73, v82);
            v74 = (int32x4_t)vaddw_u16((uint32x4_t)v74, *(uint16x4_t *)v82.i8);
            v77 += 8;
          }
          while (v77);
          v21 = vaddvq_s32(vaddq_s32(v75, v78));
          v20 = vaddvq_s32(vaddq_s32(v74, v73));
          if (((uint64_t)a3.m_characters & 7) == 0)
            goto LABEL_74;
          goto LABEL_72;
        }
LABEL_192:
        __break(1u);
        return this;
      }
      v33 = LODWORD(a2.m_characters) - (unint64_t)a3.m_length;
      if (LODWORD(a2.m_characters) < (unint64_t)a3.m_length
        || v33 <= (unint64_t)LODWORD(a3.m_characters) - 1)
      {
        goto LABEL_192;
      }
      if (LODWORD(a3.m_characters) < 8uLL)
      {
        v34 = 0;
        v35 = 0;
        v36 = 0;
LABEL_165:
        v234 = LODWORD(a3.m_characters) - v34;
        v235 = (unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v34);
        v236 = (unsigned __int8 *)(this + v34 + a3.m_length);
        do
        {
          v237 = *v236++;
          v36 += v237;
          v238 = *v235++;
          v35 += v238;
          --v234;
        }
        while (v234);
LABEL_167:
        v175 = 0;
        v239 = this + a3.m_length;
        v240 = v33 - LODWORD(a3.m_characters);
        v241 = (uint64_t)a3.m_characters & 1;
        this = (uint64_t)a3.m_characters & 3;
        v93 = v33 >= LODWORD(a3.m_characters);
        v242 = v240;
        if (!v93)
          v242 = 0;
        if (v36 != v35)
        {
LABEL_186:
          while (v175 != v240)
          {
            if (v175 == v242)
              goto LABEL_192;
            v36 = v36 + *(unsigned __int8 *)(v239 + v175 + LODWORD(a3.m_characters)) - *(unsigned __int8 *)(v239 + v175);
            ++v175;
            if (v36 == v35)
              goto LABEL_170;
          }
          return -1;
        }
LABEL_170:
        v243 = (uint8x8_t *)(v239 + v175);
        if (LODWORD(a3.m_characters) < 8)
        {
          if (LODWORD(a3.m_characters) < 4)
          {
            v251 = (v243->u16[0] | (v243->u16[0] << 8)) & 0xFF00FF;
            v252 = (*(unsigned __int16 *)((char *)v243->u16 + v241) | (*(unsigned __int16 *)((char *)v243->u16 + v241) << 8)) & 0xFF00FF;
            if (v251 != **(_DWORD **)&a2.m_length || v252 != *(_DWORD *)(*(_QWORD *)&a2.m_length + 2 * v241))
              goto LABEL_186;
          }
          else
          {
            v247 = (v243->u32[0] | ((unint64_t)v243->u32[0] << 16)) & 0xFFFF0000FFFFLL;
            v248 = (*(unsigned int *)((char *)v243->u32 + this) | ((unint64_t)*(unsigned int *)((char *)v243->u32 + this) << 16)) & 0xFFFF0000FFFFLL;
            v249 = (v248 | (v248 << 8)) & 0xFF00FF00FF00FFLL;
            if (((v247 | (v247 << 8)) & 0xFF00FF00FF00FFLL) != **(_QWORD **)&a2.m_length
              || v249 != *(_QWORD *)(*(_QWORD *)&a2.m_length + 2 * this))
            {
              goto LABEL_186;
            }
          }
        }
        else
        {
          v244 = (uint16x8_t)vceqq_s16(**(int16x8_t **)&a2.m_length, (int16x8_t)vmovl_u8(*v243));
          v244.i16[0] = vminvq_u16(v244);
          v245 = (uint64_t)a3.m_characters & 7;
          if (!v244.i32[0])
            goto LABEL_186;
          do
          {
            v246 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(*(_QWORD *)&a2.m_length + 2 * v245), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v243 + v245)));
            v246.i16[0] = vminvq_u16(v246);
            if (!v246.i32[0])
              goto LABEL_186;
            v245 += 8;
          }
          while (v245 < LODWORD(a3.m_characters));
        }
        return v175 + a3.m_length;
      }
      if (LODWORD(a3.m_characters) >= 0x20uLL)
      {
        v194 = 0uLL;
        v195 = 0uLL;
        v34 = LODWORD(a3.m_characters) - (unint64_t)((uint64_t)a3.m_characters & 0x1F);
        v196 = 0uLL;
        v197 = 0uLL;
        v198 = (uint8x8_t *)(a3.m_length + this + 16);
        v199 = 0uLL;
        v200 = (uint16x8_t *)(*(_QWORD *)&a2.m_length + 32);
        v201 = 0uLL;
        v202 = v34;
        v203 = 0uLL;
        v204 = 0uLL;
        v205 = 0uLL;
        v206 = 0uLL;
        v207 = 0uLL;
        v208 = 0uLL;
        v209 = 0uLL;
        v210 = 0uLL;
        v211 = 0uLL;
        v212 = 0uLL;
        do
        {
          v213 = *(uint8x16_t *)v198[-2].i8;
          v214 = vmovl_u8(*(uint8x8_t *)v213.i8);
          v215 = vmovl_high_u8(v213);
          v216 = vmovl_u8(*v198);
          v217 = vmovl_high_u8(*(uint8x16_t *)v198->i8);
          v208 = (int32x4_t)vaddw_high_u16((uint32x4_t)v208, v215);
          v207 = (int32x4_t)vaddw_u16((uint32x4_t)v207, *(uint16x4_t *)v215.i8);
          v206 = (int32x4_t)vaddw_high_u16((uint32x4_t)v206, v214);
          v205 = (int32x4_t)vaddw_u16((uint32x4_t)v205, *(uint16x4_t *)v214.i8);
          v212 = (int32x4_t)vaddw_high_u16((uint32x4_t)v212, v217);
          v211 = (int32x4_t)vaddw_u16((uint32x4_t)v211, *(uint16x4_t *)v217.i8);
          v210 = (int32x4_t)vaddw_high_u16((uint32x4_t)v210, v216);
          v209 = (int32x4_t)vaddw_u16((uint32x4_t)v209, *(uint16x4_t *)v216.i8);
          v219 = v200[-2];
          v218 = v200[-1];
          v221 = *v200;
          v220 = v200[1];
          v200 += 4;
          v195 = (int32x4_t)vaddw_high_u16((uint32x4_t)v195, v219);
          v196 = (int32x4_t)vaddw_u16((uint32x4_t)v196, *(uint16x4_t *)v218.i8);
          v194 = (int32x4_t)vaddw_u16((uint32x4_t)v194, *(uint16x4_t *)v219.i8);
          v197 = (int32x4_t)vaddw_high_u16((uint32x4_t)v197, v218);
          v201 = (int32x4_t)vaddw_high_u16((uint32x4_t)v201, v221);
          v203 = (int32x4_t)vaddw_u16((uint32x4_t)v203, *(uint16x4_t *)v220.i8);
          v199 = (int32x4_t)vaddw_u16((uint32x4_t)v199, *(uint16x4_t *)v221.i8);
          v204 = (int32x4_t)vaddw_high_u16((uint32x4_t)v204, v220);
          v198 += 4;
          v202 -= 32;
        }
        while (v202);
        v36 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v209, v205), vaddq_s32(v211, v207)), vaddq_s32(vaddq_s32(v210, v206), vaddq_s32(v212, v208))));
        v35 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v199, v194), vaddq_s32(v203, v196)), vaddq_s32(vaddq_s32(v201, v195), vaddq_s32(v204, v197))));
        if (((uint64_t)a3.m_characters & 0x1F) == 0)
          goto LABEL_167;
        if (((uint64_t)a3.m_characters & 0x1F) < 8uLL)
          goto LABEL_165;
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = 0;
      }
      v222 = this + v34;
      v223 = (uint16x8_t *)(*(_QWORD *)&a2.m_length + 2 * v34);
      v224 = v34 + ((uint64_t)a3.m_characters & 7);
      v34 = LODWORD(a3.m_characters) - (unint64_t)((uint64_t)a3.m_characters & 7);
      v225 = 0uLL;
      v226 = (int32x4_t)v35;
      v227 = (int32x4_t)v36;
      v228 = (uint8x8_t *)(v222 + a3.m_length);
      v229 = v224 - LODWORD(a3.m_characters);
      v230 = 0uLL;
      do
      {
        v231 = *v228++;
        v232 = vmovl_u8(v231);
        v230 = (int32x4_t)vaddw_high_u16((uint32x4_t)v230, v232);
        v227 = (int32x4_t)vaddw_u16((uint32x4_t)v227, *(uint16x4_t *)v232.i8);
        v233 = *v223++;
        v225 = (int32x4_t)vaddw_high_u16((uint32x4_t)v225, v233);
        v226 = (int32x4_t)vaddw_u16((uint32x4_t)v226, *(uint16x4_t *)v233.i8);
        v229 += 8;
      }
      while (v229);
      v36 = vaddvq_s32(vaddq_s32(v227, v230));
      v35 = vaddvq_s32(vaddq_s32(v226, v225));
      if (((uint64_t)a3.m_characters & 7) == 0)
        goto LABEL_167;
      goto LABEL_165;
    }
    if (BYTE4(a3.m_characters))
    {
      v29 = LODWORD(a2.m_characters) - (unint64_t)a3.m_length;
      if (LODWORD(a2.m_characters) < (unint64_t)a3.m_length
        || v29 <= (unint64_t)LODWORD(a3.m_characters) - 1)
      {
        goto LABEL_192;
      }
      if (LODWORD(a3.m_characters) < 8uLL)
      {
        v30 = 0;
        v31 = 0;
        v32 = 0;
LABEL_133:
        v170 = LODWORD(a3.m_characters) - v30;
        v171 = (unsigned __int8 *)(*(_QWORD *)&a2.m_length + v30);
        v172 = (unsigned __int16 *)(this + 2 * v30 + 2 * a3.m_length);
        do
        {
          v173 = *v172++;
          v32 += v173;
          v174 = *v171++;
          v31 += v174;
          --v170;
        }
        while (v170);
LABEL_135:
        v175 = 0;
        v176 = v29 - LODWORD(a3.m_characters);
        v177 = (uint64_t)a3.m_characters & 1;
        v178 = (uint64_t)a3.m_characters & 3;
        this = (uint64_t)a3.m_characters & 7;
        v93 = v29 >= LODWORD(a3.m_characters);
        v179 = v176;
        if (!v93)
          v179 = 0;
        v180 = v6 + 2 * a3.m_length;
        if (v32 != v31)
        {
LABEL_154:
          while (v175 != v176)
          {
            if (v175 == v179)
              goto LABEL_192;
            v32 = v32
                + *(unsigned __int16 *)(v180 + 2 * (v175 + LODWORD(a3.m_characters)))
                - *(unsigned __int16 *)(v180 + 2 * v175);
            ++v175;
            if (v32 == v31)
              goto LABEL_138;
          }
          return -1;
        }
LABEL_138:
        v181 = (int16x8_t *)(v180 + 2 * v175);
        if (LODWORD(a3.m_characters) < 8)
        {
          if (LODWORD(a3.m_characters) < 4)
          {
            v191 = v181->i32[0];
            v192 = *(__int32 *)((char *)v181->i32 + 2 * v177);
            if ((((unsigned __int16)**(_WORD **)&a2.m_length | ((unsigned __int16)**(_WORD **)&a2.m_length << 8)) & 0xFF00FF) != v191
              || ((*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + v177) | (*(unsigned __int16 *)(*(_QWORD *)&a2.m_length
                                                                                                + v177) << 8)) & 0xFF00FF) != v192)
            {
              goto LABEL_154;
            }
          }
          else
          {
            v185 = (**(_DWORD **)&a2.m_length | ((unint64_t)**(_DWORD **)&a2.m_length << 16)) & 0xFFFF0000FFFFLL;
            v186 = v181->i64[0];
            v187 = (*(unsigned int *)(*(_QWORD *)&a2.m_length + v178) | ((unint64_t)*(unsigned int *)(*(_QWORD *)&a2.m_length + v178) << 16)) & 0xFFFF0000FFFFLL;
            v188 = (v187 | (v187 << 8)) & 0xFF00FF00FF00FFLL;
            v189 = *(uint64_t *)((char *)v181->i64 + 2 * v178);
            if (((v185 | (v185 << 8)) & 0xFF00FF00FF00FFLL) != v186 || v188 != v189)
              goto LABEL_154;
          }
        }
        else
        {
          v182 = (uint16x8_t)vceqq_s16(*v181, (int16x8_t)vmovl_u8(**(uint8x8_t **)&a2.m_length));
          v182.i16[0] = vminvq_u16(v182);
          v183 = (uint64_t)a3.m_characters & 7;
          if (!v182.i32[0])
            goto LABEL_154;
          do
          {
            v184 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v181 + 2 * v183), (int16x8_t)vmovl_u8(*(uint8x8_t *)(*(_QWORD *)&a2.m_length + v183)));
            v184.i16[0] = vminvq_u16(v184);
            if (!v184.i32[0])
              goto LABEL_154;
            v183 += 8;
          }
          while (v183 < LODWORD(a3.m_characters));
        }
        return v175 + a3.m_length;
      }
      if (LODWORD(a3.m_characters) >= 0x20uLL)
      {
        v131 = 0uLL;
        v132 = 0uLL;
        v30 = LODWORD(a3.m_characters) - (unint64_t)((uint64_t)a3.m_characters & 0x1F);
        v133 = 0uLL;
        v134 = 0uLL;
        v135 = (uint16x8_t *)(this + 2 * a3.m_length + 32);
        v136 = 0uLL;
        v137 = (uint8x8_t *)(*(_QWORD *)&a2.m_length + 16);
        v138 = 0uLL;
        v139 = v30;
        v140 = 0uLL;
        v141 = 0uLL;
        v142 = 0uLL;
        v143 = 0uLL;
        v144 = 0uLL;
        v145 = 0uLL;
        v146 = 0uLL;
        v147 = 0uLL;
        v148 = 0uLL;
        v149 = 0uLL;
        do
        {
          v151 = v135[-2];
          v150 = v135[-1];
          v153 = *v135;
          v152 = v135[1];
          v135 += 4;
          v143 = (int32x4_t)vaddw_high_u16((uint32x4_t)v143, v151);
          v144 = (int32x4_t)vaddw_u16((uint32x4_t)v144, *(uint16x4_t *)v150.i8);
          v142 = (int32x4_t)vaddw_u16((uint32x4_t)v142, *(uint16x4_t *)v151.i8);
          v145 = (int32x4_t)vaddw_high_u16((uint32x4_t)v145, v150);
          v147 = (int32x4_t)vaddw_high_u16((uint32x4_t)v147, v153);
          v148 = (int32x4_t)vaddw_u16((uint32x4_t)v148, *(uint16x4_t *)v152.i8);
          v146 = (int32x4_t)vaddw_u16((uint32x4_t)v146, *(uint16x4_t *)v153.i8);
          v149 = (int32x4_t)vaddw_high_u16((uint32x4_t)v149, v152);
          v154 = *(uint8x16_t *)v137[-2].i8;
          v155 = vmovl_u8(*(uint8x8_t *)v154.i8);
          v156 = vmovl_high_u8(v154);
          v157 = vmovl_u8(*v137);
          v158 = vmovl_high_u8(*(uint8x16_t *)v137->i8);
          v134 = (int32x4_t)vaddw_high_u16((uint32x4_t)v134, v156);
          v133 = (int32x4_t)vaddw_u16((uint32x4_t)v133, *(uint16x4_t *)v156.i8);
          v132 = (int32x4_t)vaddw_high_u16((uint32x4_t)v132, v155);
          v131 = (int32x4_t)vaddw_u16((uint32x4_t)v131, *(uint16x4_t *)v155.i8);
          v141 = (int32x4_t)vaddw_high_u16((uint32x4_t)v141, v158);
          v140 = (int32x4_t)vaddw_u16((uint32x4_t)v140, *(uint16x4_t *)v158.i8);
          v138 = (int32x4_t)vaddw_high_u16((uint32x4_t)v138, v157);
          v136 = (int32x4_t)vaddw_u16((uint32x4_t)v136, *(uint16x4_t *)v157.i8);
          v137 += 4;
          v139 -= 32;
        }
        while (v139);
        v32 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v146, v142), vaddq_s32(v148, v144)), vaddq_s32(vaddq_s32(v147, v143), vaddq_s32(v149, v145))));
        v31 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v136, v131), vaddq_s32(v140, v133)), vaddq_s32(vaddq_s32(v138, v132), vaddq_s32(v141, v134))));
        if (((uint64_t)a3.m_characters & 0x1F) == 0)
          goto LABEL_135;
        if (((uint64_t)a3.m_characters & 0x1F) < 8uLL)
          goto LABEL_133;
      }
      else
      {
        v31 = 0;
        v32 = 0;
        v30 = 0;
      }
      v159 = (int32x4_t)v31;
      v160 = (int32x4_t)v32;
      v161 = 2 * v30;
      v162 = (uint64_t *)(*(_QWORD *)&a2.m_length + v30);
      v163 = v30 + ((uint64_t)a3.m_characters & 7);
      v30 = LODWORD(a3.m_characters) - (unint64_t)((uint64_t)a3.m_characters & 7);
      v164 = 0uLL;
      v165 = (uint16x8_t *)(this + v161 + 2 * a3.m_length);
      v166 = v163 - LODWORD(a3.m_characters);
      v167 = 0uLL;
      do
      {
        v168 = *v165++;
        v167 = (int32x4_t)vaddw_high_u16((uint32x4_t)v167, v168);
        v160 = (int32x4_t)vaddw_u16((uint32x4_t)v160, *(uint16x4_t *)v168.i8);
        v168.i64[0] = *v162++;
        v169 = vmovl_u8(*(uint8x8_t *)v168.i8);
        v164 = (int32x4_t)vaddw_high_u16((uint32x4_t)v164, v169);
        v159 = (int32x4_t)vaddw_u16((uint32x4_t)v159, *(uint16x4_t *)v169.i8);
        v166 += 8;
      }
      while (v166);
      v32 = vaddvq_s32(vaddq_s32(v160, v167));
      v31 = vaddvq_s32(vaddq_s32(v159, v164));
      if (((uint64_t)a3.m_characters & 7) == 0)
        goto LABEL_135;
      goto LABEL_133;
    }
    v37 = LODWORD(a2.m_characters) - (unint64_t)a3.m_length;
    if (LODWORD(a2.m_characters) < (unint64_t)a3.m_length
      || v37 <= (unint64_t)LODWORD(a3.m_characters) - 1)
    {
      goto LABEL_192;
    }
    if (LODWORD(a3.m_characters) >= 0x10uLL)
    {
      v38 = LODWORD(a3.m_characters) - (unint64_t)((uint64_t)a3.m_characters & 0xF);
      v101 = 0uLL;
      v102 = 0uLL;
      v103 = (uint16x8_t *)(this + 2 * a3.m_length + 16);
      v104 = (uint16x8_t *)(*(_QWORD *)&a2.m_length + 16);
      v105 = v38;
      v106 = 0uLL;
      v107 = 0uLL;
      v108 = 0uLL;
      v109 = 0uLL;
      v110 = 0uLL;
      v111 = 0uLL;
      do
      {
        v112 = v103[-1];
        v109 = (int32x4_t)vaddw_high_u16((uint32x4_t)v109, v112);
        v108 = (int32x4_t)vaddw_u16((uint32x4_t)v108, *(uint16x4_t *)v112.i8);
        v111 = (int32x4_t)vaddw_high_u16((uint32x4_t)v111, *v103);
        v110 = (int32x4_t)vaddw_u16((uint32x4_t)v110, *(uint16x4_t *)v103->i8);
        v113 = v104[-1];
        v102 = (int32x4_t)vaddw_high_u16((uint32x4_t)v102, v113);
        v101 = (int32x4_t)vaddw_u16((uint32x4_t)v101, *(uint16x4_t *)v113.i8);
        v107 = (int32x4_t)vaddw_high_u16((uint32x4_t)v107, *v104);
        v106 = (int32x4_t)vaddw_u16((uint32x4_t)v106, *(uint16x4_t *)v104->i8);
        v103 += 2;
        v104 += 2;
        v105 -= 16;
      }
      while (v105);
      v40 = vaddvq_s32(vaddq_s32(vaddq_s32(v110, v108), vaddq_s32(v111, v109)));
      v39 = vaddvq_s32(vaddq_s32(vaddq_s32(v106, v101), vaddq_s32(v107, v102)));
      if (((uint64_t)a3.m_characters & 0xF) == 0)
        goto LABEL_103;
    }
    else
    {
      v38 = 0;
      v39 = 0;
      v40 = 0;
    }
    v114 = LODWORD(a3.m_characters) - v38;
    v115 = 2 * v38;
    v116 = (unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v38);
    v117 = (unsigned __int16 *)(this + v115 + 2 * a3.m_length);
    do
    {
      v118 = *v117++;
      v40 += v118;
      v119 = *v116++;
      v39 += v119;
      --v114;
    }
    while (v114);
LABEL_103:
    v88 = 0;
    v120 = this + 2 * a3.m_length;
    v121 = v37 - LODWORD(a3.m_characters);
    v122 = 32 - __clz(v7);
    v123 = *(_QWORD *)&a2.m_length + 2 * LODWORD(a3.m_characters);
    v93 = v37 >= LODWORD(a3.m_characters);
    v124 = v121;
    if (!v93)
      v124 = 0;
    this = v122 - 1;
    if (v40 != v39)
    {
LABEL_121:
      while (v88 != v121)
      {
        if (v88 == v124)
          goto LABEL_192;
        v40 = v40
            + *(unsigned __int16 *)(v120 + 2 * (v88 + LODWORD(a3.m_characters)))
            - *(unsigned __int16 *)(v120 + 2 * v88);
        ++v88;
        if (v40 == v39)
          goto LABEL_106;
      }
      return -1;
    }
LABEL_106:
    *(_QWORD *)&a3.m_length = v120 + 2 * v88;
    switch((int)this)
    {
      case 0:
        v125 = **(_DWORD **)&a3.m_length;
        v126 = **(_DWORD **)&a2.m_length;
        goto LABEL_115;
      case 1:
        if (**(_DWORD **)&a3.m_length != **(_DWORD **)&a2.m_length)
          goto LABEL_121;
        v125 = *(_DWORD *)(*(_QWORD *)&a3.m_length + 2 * LODWORD(a3.m_characters) - 4);
        v126 = *(_DWORD *)(v123 - 4);
LABEL_115:
        if (v125 == v126)
          return v88 + m_length;
        goto LABEL_121;
      case 2:
        if (**(_QWORD **)&a3.m_length == **(_QWORD **)&a2.m_length
          && *(_QWORD *)(*(_QWORD *)&a3.m_length + 2 * LODWORD(a3.m_characters) - 8) == *(_QWORD *)(v123 - 8))
        {
          return v88 + m_length;
        }
        goto LABEL_121;
      case 3:
        v130 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)(*(_QWORD *)&a3.m_length + 2 * LODWORD(a3.m_characters) - 16), *(int16x8_t *)(v123 - 16)), (int8x16_t)vceqq_s16(**(int16x8_t **)&a3.m_length, **(int16x8_t **)&a2.m_length));
        v130.i16[0] = vminvq_u16(v130);
        if (!v130.i32[0])
          goto LABEL_121;
        return v88 + m_length;
      default:
        v127 = (uint16x8_t)vceqq_s16(**(int16x8_t **)&a3.m_length, **(int16x8_t **)&a2.m_length);
        v127.i16[0] = vminvq_u16(v127);
        if (!v127.i32[0])
          goto LABEL_121;
        v128 = (uint64_t)a3.m_characters & 7;
        if (LODWORD(a3.m_characters) < 8)
          return v88 + m_length;
        break;
    }
    do
    {
      v129 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(*(_QWORD *)&a3.m_length + 2 * v128), *(int16x8_t *)(*(_QWORD *)&a2.m_length + 2 * v128));
      v129.i16[0] = vminvq_u16(v129);
      if (!v129.i32[0])
        goto LABEL_121;
      v128 += 8;
    }
    while (v128 < LODWORD(a3.m_characters));
    return v88 + m_length;
  }
  if (BYTE4(a3.m_characters))
  {
    v8 = **(_BYTE **)&a2.m_length;
    m_characters_low = LODWORD(a2.m_characters);
    v10 = a3.m_length;
    if (BYTE4(a2.m_characters))
    {
LABEL_4:
      if (v8 <= 0xFF)
      {
        v11 = m_characters_low > v10;
        v12 = m_characters_low - v10;
        if (v11)
        {
          v13 = (unsigned __int8 *)(this + v10);
          v14 = 16;
          if (v12 < 0x10)
            v14 = v12;
          if (v14)
          {
            v15 = v14;
            v16 = v13;
            while (*v16 != v8)
            {
              ++v16;
              if (!--v15)
                goto LABEL_13;
            }
          }
          else
          {
LABEL_13:
            if (v12 < 0x11)
              return -1;
            v16 = (unsigned __int8 *)memchr(&v13[v14], v8, v12 - v14);
            if (!v16)
              return -1;
          }
          return (uint64_t)&v16[-v6];
        }
      }
      return -1;
    }
  }
  else
  {
    v8 = (unsigned __int16)**(_WORD **)&a2.m_length;
    m_characters_low = LODWORD(a2.m_characters);
    v10 = a3.m_length;
    if (BYTE4(a2.m_characters))
      goto LABEL_4;
  }
  if (m_characters_low <= v10)
    return -1;
  v22 = (int16x8_t *)(this + 2 * v10);
  v23 = this + 2 * m_characters_low;
  v24 = v23 - (_QWORD)v22;
  if ((uint64_t)(v23 - (_QWORD)v22) <= -2)
    goto LABEL_192;
  if (v24 <= 0x3E)
  {
    this = -1;
    while (v22->u16[0] != v8)
    {
      v22 = (int16x8_t *)((char *)v22 + 2);
      v24 -= 2;
      if (!v24)
        return this;
    }
  }
  else
  {
    v25 = vdupq_n_s16(v8);
    if ((unint64_t)&v22->u64[1] + 6 >= v23)
    {
      v27 = v22;
LABEL_45:
      if ((unint64_t)v27 >= v23)
        return -1;
      v22 = (int16x8_t *)(v23 - 16);
      v26 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v23 - 16), v25);
      v25.i16[0] = vmaxvq_u16((uint16x8_t)v26);
      if (!v25.i32[0])
        return -1;
    }
    else
    {
      while (1)
      {
        v26 = (int8x16_t)vceqq_s16(*v22, v25);
        LOWORD(a6) = vmaxvq_u16((uint16x8_t)v26);
        if (a6 != 0.0)
          break;
        v27 = v22 + 1;
        v28 = &v22[1].i8[14];
        ++v22;
        if ((unint64_t)v28 >= v23)
          goto LABEL_45;
      }
    }
    v22 = (int16x8_t *)((char *)v22
                      + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v26)));
  }
  if (v22 == (int16x8_t *)v23)
    return -1;
  else
    return ((uint64_t)v22->i64 - v6) >> 1;
}

uint64_t WTF::StringImpl::findIgnoringASCIICase(uint64_t a1, uint64_t a2, void *a3)
{
  StringView v4;
  StringView v5;

  if (!a2)
    return -1;
  v5.m_characters = a3;
  *(_QWORD *)&v4.m_length = a2;
  LODWORD(v4.m_characters) = *(_DWORD *)(a1 + 4);
  HIDWORD(v4.m_characters) = (*(_DWORD *)(a1 + 16) >> 2) & 1;
  *(_QWORD *)&v5.m_length = 0;
  return WTF::findIgnoringASCIICase(*(_QWORD *)(a1 + 8), v4, v5);
}

uint64_t WTF::findIgnoringASCIICase(uint64_t this, StringView a2, StringView a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t i;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t k;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  unint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t m;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;

  if (LODWORD(a3.m_characters))
  {
    v3 = -1;
    if (LODWORD(a2.m_characters) < a3.m_length || LODWORD(a2.m_characters) - a3.m_length < LODWORD(a3.m_characters))
    {
      return v3;
    }
    else
    {
      v4 = (uint64_t)a3.m_characters & 0xFF00000000;
      if (((uint64_t)a2.m_characters & 0xFF00000000) != 0)
      {
        v5 = LODWORD(a2.m_characters) - (unint64_t)a3.m_length;
        if (v4)
        {
          if (LODWORD(a2.m_characters) >= (unint64_t)a3.m_length)
          {
            v6 = 0;
            v7 = this + a3.m_length;
            for (i = v7; ; ++i)
            {
              v10 = v5 - v6;
              if (v5 < v6)
                break;
              if (v10 <= LODWORD(a3.m_characters))
              {
                this = 0;
                v13 = 0;
                while (v10 != v13)
                {
                  if (WTF::asciiCaseFoldTable[*(unsigned __int8 *)(i + v13)] == WTF::asciiCaseFoldTable[*(unsigned __int8 *)(*(_QWORD *)&a2.m_length + v13)])
                  {
                    this = ++v13 >= (unint64_t)LODWORD(a3.m_characters);
                    if (LODWORD(a3.m_characters) != v13)
                      continue;
                  }
                  if ((this & 1) != 0)
                    return v6 + a3.m_length;
                  goto LABEL_13;
                }
                break;
              }
              if (WTF::asciiCaseFoldTable[*(unsigned __int8 *)(v7 + v6)] == WTF::asciiCaseFoldTable[**(_BYTE **)&a2.m_length])
              {
                v11 = 1;
                while (LODWORD(a3.m_characters) != v11)
                {
                  v12 = WTF::asciiCaseFoldTable[*(unsigned __int8 *)(i + v11)];
                  this = WTF::asciiCaseFoldTable[*(unsigned __int8 *)(*(_QWORD *)&a2.m_length + v11++)];
                  if (v12 != (_DWORD)this)
                  {
                    if (v11 - 1 < (unint64_t)LODWORD(a3.m_characters))
                      goto LABEL_13;
                    return v6 + a3.m_length;
                  }
                }
                return v6 + a3.m_length;
              }
LABEL_13:
              ++v6;
              v3 = -1;
              if (v6 > v5 - LODWORD(a3.m_characters))
                return v3;
            }
          }
        }
        else if (LODWORD(a2.m_characters) >= (unint64_t)a3.m_length)
        {
          v6 = 0;
          v21 = this + a3.m_length;
          for (j = v21; ; ++j)
          {
            v23 = v5 - v6;
            if (v5 < v6)
              break;
            if (v23 <= LODWORD(a3.m_characters))
            {
              this = 0;
              v27 = 0;
              while (v23 != v27)
              {
                if ((*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v27) | (32
                                                                                * (*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v27)
                                                                                 - 65 < 0x1A))) == WTF::asciiCaseFoldTable[*(unsigned __int8 *)(j + v27)])
                {
                  this = ++v27 >= (unint64_t)LODWORD(a3.m_characters);
                  if (LODWORD(a3.m_characters) != v27)
                    continue;
                }
                if ((this & 1) != 0)
                  return v6 + a3.m_length;
                goto LABEL_48;
              }
              break;
            }
            v24 = (unsigned __int16)**(_WORD **)&a2.m_length;
            this = (v24 - 65) < 0x1A;
            if ((v24 | (32 * (_DWORD)this)) == WTF::asciiCaseFoldTable[*(unsigned __int8 *)(v21 + v6)])
            {
              v25 = 1;
              while (LODWORD(a3.m_characters) != v25)
              {
                v26 = WTF::asciiCaseFoldTable[*(unsigned __int8 *)(j + v25)];
                this = *(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v25) | (32
                                                                                 * (*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v25)
                                                                                                - 65 < 0x1A));
                ++v25;
                if ((_DWORD)this != v26)
                {
                  if (v25 - 1 < (unint64_t)LODWORD(a3.m_characters))
                    goto LABEL_48;
                  return v6 + a3.m_length;
                }
              }
              return v6 + a3.m_length;
            }
LABEL_48:
            ++v6;
            v3 = -1;
            if (v6 > v5 - LODWORD(a3.m_characters))
              return v3;
          }
        }
      }
      else
      {
        v14 = LODWORD(a2.m_characters) - (unint64_t)a3.m_length;
        if (v4)
        {
          if (LODWORD(a2.m_characters) >= (unint64_t)a3.m_length)
          {
            v6 = 0;
            v15 = this + 2 * a3.m_length;
            for (k = v15; ; k += 2)
            {
              v17 = v14 - v6;
              if (v14 < v6)
                break;
              if (v17 <= LODWORD(a3.m_characters))
              {
                this = 0;
                v20 = 0;
                while (v17 != v20)
                {
                  if ((*(unsigned __int16 *)(k + 2 * v20) | (32
                                                            * (*(unsigned __int16 *)(k + 2 * v20) - 65 < 0x1A))) == WTF::asciiCaseFoldTable[*(unsigned __int8 *)(*(_QWORD *)&a2.m_length + v20)])
                  {
                    this = ++v20 >= (unint64_t)LODWORD(a3.m_characters);
                    if (LODWORD(a3.m_characters) != v20)
                      continue;
                  }
                  if ((this & 1) != 0)
                    return v6 + a3.m_length;
                  goto LABEL_31;
                }
                break;
              }
              if ((*(unsigned __int16 *)(v15 + 2 * v6) | (32
                                                         * (*(unsigned __int16 *)(v15 + 2 * v6) - 65 < 0x1A))) == WTF::asciiCaseFoldTable[**(_BYTE **)&a2.m_length])
              {
                v18 = 1;
                while (LODWORD(a3.m_characters) != v18)
                {
                  v19 = *(unsigned __int16 *)(k + 2 * v18) | (32
                                                            * (*(unsigned __int16 *)(k + 2 * v18) - 65 < 0x1A));
                  this = WTF::asciiCaseFoldTable[*(unsigned __int8 *)(*(_QWORD *)&a2.m_length + v18++)];
                  if (v19 != (_DWORD)this)
                  {
                    if (v18 - 1 < (unint64_t)LODWORD(a3.m_characters))
                      goto LABEL_31;
                    return v6 + a3.m_length;
                  }
                }
                return v6 + a3.m_length;
              }
LABEL_31:
              ++v6;
              v3 = -1;
              if (v6 > v14 - LODWORD(a3.m_characters))
                return v3;
            }
          }
        }
        else if (LODWORD(a2.m_characters) >= (unint64_t)a3.m_length)
        {
          v6 = 0;
          v28 = this + 2 * a3.m_length;
          for (m = v28; ; m += 2)
          {
            v30 = v14 - v6;
            if (v14 < v6)
              break;
            if (v30 <= LODWORD(a3.m_characters))
            {
              v34 = 0;
              v35 = 0;
              while (v30 != v35)
              {
                this = *(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v35) | (32
                                                                                 * (*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v35)
                                                                                                - 65 < 0x1A));
                if ((*(unsigned __int16 *)(m + 2 * v35) | (32
                                                          * (*(unsigned __int16 *)(m + 2 * v35) - 65 < 0x1A))) == (_DWORD)this)
                {
                  v34 = ++v35 >= (unint64_t)LODWORD(a3.m_characters);
                  if (LODWORD(a3.m_characters) != v35)
                    continue;
                }
                if (v34)
                  return v6 + a3.m_length;
                goto LABEL_65;
              }
              break;
            }
            if ((*(unsigned __int16 *)(v28 + 2 * v6) | (32
                                                       * (*(unsigned __int16 *)(v28 + 2 * v6) - 65 < 0x1A))) == ((unsigned __int16)**(_WORD **)&a2.m_length | (32 * ((unsigned __int16)**(_WORD **)&a2.m_length - 65 < 0x1A))))
            {
              v31 = 1;
              while (LODWORD(a3.m_characters) != v31)
              {
                v32 = *(unsigned __int16 *)(m + 2 * v31) | (32
                                                          * (*(unsigned __int16 *)(m + 2 * v31) - 65 < 0x1A));
                v33 = *(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v31);
                this = (v33 - 65) < 0x1A;
                ++v31;
                if (v32 != (v33 | (32 * (_DWORD)this)))
                {
                  if (v31 - 1 < (unint64_t)LODWORD(a3.m_characters))
                    goto LABEL_65;
                  return v6 + a3.m_length;
                }
              }
              return v6 + a3.m_length;
            }
LABEL_65:
            ++v6;
            v3 = -1;
            if (v6 > v14 - LODWORD(a3.m_characters))
              return v3;
          }
        }
      }
      __break(1u);
    }
  }
  else if (LODWORD(a2.m_characters) >= a3.m_length)
  {
    return a3.m_length;
  }
  else
  {
    return LODWORD(a2.m_characters);
  }
  return this;
}

uint64_t WTF::StringImpl::findIgnoringASCIICase(WTF::StringImpl *this, StringView a2, uint64_t a3)
{
  StringView v4;
  StringView v5;

  if (!a2.m_characters)
    return -1;
  *(_QWORD *)&v5.m_length = a3;
  v5.m_characters = *(void **)&a2.m_length;
  *(_QWORD *)&v4.m_length = a2.m_characters;
  LODWORD(v4.m_characters) = *((_DWORD *)this + 1);
  HIDWORD(v4.m_characters) = (*((_DWORD *)this + 4) >> 2) & 1;
  return WTF::findIgnoringASCIICase(*((_QWORD *)this + 1), v4, v5);
}

uint64_t WTF::StringImpl::reverseFind(uint64_t result, unsigned int a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  v3 = *(_QWORD *)(result + 8);
  v4 = *(unsigned int *)(result + 4);
  if ((*(_BYTE *)(result + 16) & 4) != 0)
  {
    if (a2 > 0xFF || !(_DWORD)v4)
      return -1;
    v5 = v4 - 1;
    if (v4 > a3)
      v5 = a3;
    if (v5 >= v4)
      goto LABEL_31;
    v7 = *(unsigned __int8 *)(v3 + v5);
    if (v5 - 1 < v4)
    {
      if (v7 == a2)
        return v5;
      v10 = v3 - 1;
      while (v5)
      {
        result = v5 - 1;
        v11 = *(unsigned __int8 *)(v10 + v5--);
        if (v11 == a2)
          return result;
      }
      return -1;
    }
    if (v7 == a2)
      return v5;
    goto LABEL_29;
  }
  if (!(_DWORD)v4)
    return -1;
  v5 = v4 - 1;
  if (v4 > a3)
    v5 = a3;
  if (v5 < v4)
  {
    v6 = *(unsigned __int16 *)(v3 + 2 * v5);
    if (v5 - 1 < v4)
    {
      if (v6 == a2)
        return v5;
      v8 = v3 - 2;
      while (v5)
      {
        result = v5 - 1;
        v9 = *(unsigned __int16 *)(v8 + 2 * v5--);
        if (v9 == a2)
          return result;
      }
      return -1;
    }
    if (v6 == a2)
      return v5;
LABEL_29:
    if (!v5)
      return -1;
  }
LABEL_31:
  __break(1u);
  return result;
}

unint64_t WTF::StringImpl::reverseFind(unint64_t this, StringView a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int32x4_t v34;
  int32x4_t v35;
  uint16x8_t *v36;
  uint16x8_t *v37;
  unint64_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  unint64_t v47;
  unsigned __int16 *v48;
  unsigned __int16 *v49;
  int v50;
  int v51;
  unsigned int v52;
  int16x8_t *v53;
  unsigned int v54;
  int16x8_t *v55;
  uint16x8_t v56;
  unsigned int v57;
  uint16x8_t v58;
  uint16x8_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  uint16x8_t *v64;
  int32x4_t v65;
  uint8x8_t *v66;
  int32x4_t v67;
  unint64_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  uint16x8_t v81;
  uint16x8_t v82;
  uint8x16_t v83;
  uint16x8_t v84;
  uint16x8_t v85;
  uint16x8_t v86;
  uint16x8_t v87;
  unint64_t v88;
  uint64_t *v89;
  unint64_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  uint16x8_t *v94;
  unint64_t v95;
  int32x4_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  unint64_t v99;
  unsigned __int8 *v100;
  unsigned __int16 *v101;
  int v102;
  int v103;
  int16x8_t *v104;
  uint16x8_t v105;
  unsigned int v106;
  uint16x8_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int32 v114;
  int v115;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  uint8x8_t *v121;
  int32x4_t v122;
  uint8x8_t *v123;
  int32x4_t v124;
  unint64_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  uint8x16_t v136;
  uint16x8_t v137;
  uint16x8_t v138;
  uint16x8_t v139;
  uint16x8_t v140;
  uint8x16_t v141;
  uint16x8_t v142;
  uint16x8_t v143;
  uint16x8_t v144;
  uint16x8_t v145;
  uint64_t v146;
  uint8x8_t *v147;
  unint64_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  uint8x8_t *v152;
  unint64_t v153;
  int32x4_t v154;
  uint8x8_t v155;
  uint16x8_t v156;
  uint8x8_t v157;
  uint16x8_t v158;
  unint64_t v159;
  unsigned __int8 *v160;
  unsigned __int8 *v161;
  int v162;
  int v163;
  unsigned int v164;
  int8x16_t *v165;
  unsigned int v166;
  int8x16_t *v167;
  int v168;
  __int32 v169;
  uint8x16_t v170;
  unsigned int v171;
  uint8x16_t v172;
  uint8x16_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  uint8x8_t *v178;
  int32x4_t v179;
  uint16x8_t *v180;
  int32x4_t v181;
  unint64_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  uint8x16_t v193;
  uint16x8_t v194;
  uint16x8_t v195;
  uint16x8_t v196;
  uint16x8_t v197;
  uint16x8_t v198;
  uint16x8_t v199;
  uint16x8_t v200;
  uint16x8_t v201;
  uint64_t v202;
  uint16x8_t *v203;
  unint64_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int32x4_t v207;
  uint8x8_t *v208;
  unint64_t v209;
  int32x4_t v210;
  uint8x8_t v211;
  uint16x8_t v212;
  uint16x8_t v213;
  unint64_t v214;
  unsigned __int16 *v215;
  unsigned __int8 *v216;
  int v217;
  int v218;
  uint8x8_t *v219;
  uint16x8_t v220;
  unsigned int v221;
  uint16x8_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  int v227;
  int v228;

  if (!a2.m_characters)
    return -1;
  v3 = this;
  v4 = a2.m_length - 1;
  if (a2.m_length == 1)
  {
    v5 = *(_QWORD *)(this + 8);
    v6 = *(unsigned int *)(this + 4);
    if ((*(_BYTE *)(this + 16) & 4) != 0)
    {
      if (a2.m_is8Bit)
      {
        LOBYTE(v14) = *(_BYTE *)a2.m_characters;
      }
      else
      {
        v14 = *(unsigned __int16 *)a2.m_characters;
        if (v14 > 0xFF)
          return -1;
      }
      if (!(_DWORD)v6)
        return -1;
      v19 = v6 - 1;
      if (v6 > a3)
        v19 = a3;
      if (v19 >= v6)
        goto LABEL_195;
      v21 = *(unsigned __int8 *)(v5 + v19);
      if (v19 - 1 < v6)
      {
        if (v21 == v14)
          return v19;
        v24 = v5 - 1;
        while (v19)
        {
          this = v19 - 1;
          v25 = *(unsigned __int8 *)(v24 + v19--);
          if (v25 == v14)
            return this;
        }
        return -1;
      }
      if (v21 == v14)
        return v19;
    }
    else
    {
      if (a2.m_is8Bit)
      {
        v7 = *(unsigned __int8 *)a2.m_characters;
        if (!(_DWORD)v6)
          return -1;
      }
      else
      {
        v7 = *(unsigned __int16 *)a2.m_characters;
        if (!(_DWORD)v6)
          return -1;
      }
      v19 = v6 - 1;
      if (v6 > a3)
        v19 = a3;
      if (v19 >= v6)
        goto LABEL_195;
      v20 = *(unsigned __int16 *)(v5 + 2 * v19);
      if (v19 - 1 < v6)
      {
        if (v20 == v7)
          return v19;
        v22 = v5 - 2;
        while (v19)
        {
          this = v19 - 1;
          v23 = *(unsigned __int16 *)(v22 + 2 * v19--);
          if (v23 == v7)
            return this;
        }
        return -1;
      }
      if (v20 == v7)
        return v19;
    }
    if (!v19)
      return -1;
    goto LABEL_195;
  }
  if (!a2.m_length)
  {
    if (*(unsigned int *)(this + 4) >= a3)
      return a3;
    else
      return *(unsigned int *)(this + 4);
  }
  v8 = *(unsigned int *)(this + 4);
  if (v8 < a2.m_length)
    return -1;
  v9 = *(_QWORD *)(this + 8);
  if (v8 - a2.m_length >= a3)
    this = a3;
  else
    this = v8 - a2.m_length;
  if ((*(_BYTE *)(v3 + 16) & 4) == 0)
  {
    if (a2.m_is8Bit)
    {
      v10 = v8 - this;
      if (v8 < this)
        v10 = 0;
      if (v10 > (unint64_t)a2.m_length - 1)
      {
        if (a2.m_length < 8uLL)
        {
          v11 = 0;
          v12 = 0;
          v13 = 0;
LABEL_102:
          v99 = a2.m_length - v11;
          v100 = (unsigned __int8 *)a2.m_characters + v11;
          v101 = (unsigned __int16 *)(v9 + 2 * (v11 + this));
          do
          {
            v102 = *v101++;
            v13 += v102;
            v103 = *v100++;
            v12 += v103;
            --v99;
          }
          while (v99);
LABEL_104:
          if (v13 != v12)
            goto LABEL_121;
LABEL_105:
          v104 = (int16x8_t *)(v9 + 2 * this);
          if (a2.m_length >= 8)
          {
            v105 = (uint16x8_t)vceqq_s16(*v104, (int16x8_t)vmovl_u8(*(uint8x8_t *)a2.m_characters));
            v105.i16[0] = vminvq_u16(v105);
            v106 = a2.m_length & 7;
            if (!v105.i32[0])
              goto LABEL_121;
            do
            {
              v107 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v104 + 2 * v106), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a2.m_characters + v106)));
              v107.i16[0] = vminvq_u16(v107);
              if (!v107.i32[0])
                goto LABEL_121;
              v106 += 8;
            }
            while (v106 < a2.m_length);
            return this;
          }
          if (a2.m_length >= 4)
          {
            v108 = (*(unsigned int *)a2.m_characters | ((unint64_t)*(unsigned int *)a2.m_characters << 16)) & 0xFFFF0000FFFFLL;
            v109 = v104->i64[0];
            v110 = (*(unsigned int *)((char *)a2.m_characters + (a2.m_length & 3)) | ((unint64_t)*(unsigned int *)((char *)a2.m_characters + (a2.m_length & 3)) << 16)) & 0xFFFF0000FFFFLL;
            v111 = (v110 | (v110 << 8)) & 0xFF00FF00FF00FFLL;
            v112 = *(uint64_t *)((char *)v104->i64 + 2 * (a2.m_length & 3));
            if (((v108 | (v108 << 8)) & 0xFF00FF00FF00FFLL) != v109 || v111 != v112)
              goto LABEL_121;
            return this;
          }
          v114 = v104->i32[0];
          v115 = *(__int32 *)((char *)v104->i32 + 2 * (a2.m_length & 1));
          if (((*(unsigned __int16 *)a2.m_characters | (*(unsigned __int16 *)a2.m_characters << 8)) & 0xFF00FF) == v114
            && ((*(unsigned __int16 *)((char *)a2.m_characters + (a2.m_length & 1)) | (*(unsigned __int16 *)((char *)a2.m_characters + (a2.m_length & 1)) << 8)) & 0xFF00FF) == v115)
          {
            return this;
          }
LABEL_121:
          while (this)
          {
            if (--this + a2.m_length >= v8 || this >= v8)
              goto LABEL_195;
            v13 = v13 - *(unsigned __int16 *)(v9 + 2 * (this + a2.m_length)) + *(unsigned __int16 *)(v9 + 2 * this);
            if (v13 == v12)
              goto LABEL_105;
          }
          return -1;
        }
        if (a2.m_length >= 0x20uLL)
        {
          v60 = 0uLL;
          v61 = 0uLL;
          v11 = a2.m_length - (unint64_t)(a2.m_length & 0x1F);
          v62 = 0uLL;
          v63 = 0uLL;
          v64 = (uint16x8_t *)(v9 + 2 * this + 32);
          v65 = 0uLL;
          v66 = (uint8x8_t *)((char *)a2.m_characters + 16);
          v67 = 0uLL;
          v68 = v11;
          v69 = 0uLL;
          v70 = 0uLL;
          v71 = 0uLL;
          v72 = 0uLL;
          v73 = 0uLL;
          v74 = 0uLL;
          v75 = 0uLL;
          v76 = 0uLL;
          v77 = 0uLL;
          v78 = 0uLL;
          do
          {
            v80 = v64[-2];
            v79 = v64[-1];
            v82 = *v64;
            v81 = v64[1];
            v64 += 4;
            v72 = (int32x4_t)vaddw_high_u16((uint32x4_t)v72, v80);
            v73 = (int32x4_t)vaddw_u16((uint32x4_t)v73, *(uint16x4_t *)v79.i8);
            v71 = (int32x4_t)vaddw_u16((uint32x4_t)v71, *(uint16x4_t *)v80.i8);
            v74 = (int32x4_t)vaddw_high_u16((uint32x4_t)v74, v79);
            v76 = (int32x4_t)vaddw_high_u16((uint32x4_t)v76, v82);
            v77 = (int32x4_t)vaddw_u16((uint32x4_t)v77, *(uint16x4_t *)v81.i8);
            v75 = (int32x4_t)vaddw_u16((uint32x4_t)v75, *(uint16x4_t *)v82.i8);
            v78 = (int32x4_t)vaddw_high_u16((uint32x4_t)v78, v81);
            v83 = *(uint8x16_t *)v66[-2].i8;
            v84 = vmovl_u8(*(uint8x8_t *)v83.i8);
            v85 = vmovl_high_u8(v83);
            v86 = vmovl_u8(*v66);
            v87 = vmovl_high_u8(*(uint8x16_t *)v66->i8);
            v63 = (int32x4_t)vaddw_high_u16((uint32x4_t)v63, v85);
            v62 = (int32x4_t)vaddw_u16((uint32x4_t)v62, *(uint16x4_t *)v85.i8);
            v61 = (int32x4_t)vaddw_high_u16((uint32x4_t)v61, v84);
            v60 = (int32x4_t)vaddw_u16((uint32x4_t)v60, *(uint16x4_t *)v84.i8);
            v70 = (int32x4_t)vaddw_high_u16((uint32x4_t)v70, v87);
            v69 = (int32x4_t)vaddw_u16((uint32x4_t)v69, *(uint16x4_t *)v87.i8);
            v67 = (int32x4_t)vaddw_high_u16((uint32x4_t)v67, v86);
            v65 = (int32x4_t)vaddw_u16((uint32x4_t)v65, *(uint16x4_t *)v86.i8);
            v66 += 4;
            v68 -= 32;
          }
          while (v68);
          v13 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v75, v71), vaddq_s32(v77, v73)), vaddq_s32(vaddq_s32(v76, v72), vaddq_s32(v78, v74))));
          v12 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v65, v60), vaddq_s32(v69, v62)), vaddq_s32(vaddq_s32(v67, v61), vaddq_s32(v70, v63))));
          if ((a2.m_length & 0x1F) == 0)
            goto LABEL_104;
          if ((a2.m_length & 0x1F) < 8uLL)
            goto LABEL_102;
        }
        else
        {
          v12 = 0;
          v13 = 0;
          v11 = 0;
        }
        v88 = v11 + this;
        v89 = (uint64_t *)((char *)a2.m_characters + v11);
        v90 = v11 + (a2.m_length & 7);
        v11 = a2.m_length - (unint64_t)(a2.m_length & 7);
        v91 = 0uLL;
        v92 = (int32x4_t)v12;
        v93 = (int32x4_t)v13;
        v94 = (uint16x8_t *)(v9 + 2 * v88);
        v95 = v90 - a2.m_length;
        v96 = 0uLL;
        do
        {
          v97 = *v94++;
          v96 = (int32x4_t)vaddw_high_u16((uint32x4_t)v96, v97);
          v93 = (int32x4_t)vaddw_u16((uint32x4_t)v93, *(uint16x4_t *)v97.i8);
          v97.i64[0] = *v89++;
          v98 = vmovl_u8(*(uint8x8_t *)v97.i8);
          v91 = (int32x4_t)vaddw_high_u16((uint32x4_t)v91, v98);
          v92 = (int32x4_t)vaddw_u16((uint32x4_t)v92, *(uint16x4_t *)v98.i8);
          v95 += 8;
        }
        while (v95);
        v13 = vaddvq_s32(vaddq_s32(v93, v96));
        v12 = vaddvq_s32(vaddq_s32(v92, v91));
        if ((a2.m_length & 7) == 0)
          goto LABEL_104;
        goto LABEL_102;
      }
LABEL_195:
      __break(1u);
      return this;
    }
    v26 = v8 - this;
    if (v8 < this)
      v26 = 0;
    if (v26 <= (unint64_t)a2.m_length - 1)
      goto LABEL_195;
    if (a2.m_length >= 0x10uLL)
    {
      v27 = a2.m_length - (unint64_t)(a2.m_length & 0xF);
      v34 = 0uLL;
      v35 = 0uLL;
      v36 = (uint16x8_t *)(v9 + 2 * this + 16);
      v37 = (uint16x8_t *)((char *)a2.m_characters + 16);
      v38 = v27;
      v39 = 0uLL;
      v40 = 0uLL;
      v41 = 0uLL;
      v42 = 0uLL;
      v43 = 0uLL;
      v44 = 0uLL;
      do
      {
        v45 = v36[-1];
        v42 = (int32x4_t)vaddw_high_u16((uint32x4_t)v42, v45);
        v41 = (int32x4_t)vaddw_u16((uint32x4_t)v41, *(uint16x4_t *)v45.i8);
        v44 = (int32x4_t)vaddw_high_u16((uint32x4_t)v44, *v36);
        v43 = (int32x4_t)vaddw_u16((uint32x4_t)v43, *(uint16x4_t *)v36->i8);
        v46 = v37[-1];
        v35 = (int32x4_t)vaddw_high_u16((uint32x4_t)v35, v46);
        v34 = (int32x4_t)vaddw_u16((uint32x4_t)v34, *(uint16x4_t *)v46.i8);
        v40 = (int32x4_t)vaddw_high_u16((uint32x4_t)v40, *v37);
        v39 = (int32x4_t)vaddw_u16((uint32x4_t)v39, *(uint16x4_t *)v37->i8);
        v36 += 2;
        v37 += 2;
        v38 -= 16;
      }
      while (v38);
      v29 = vaddvq_s32(vaddq_s32(vaddq_s32(v43, v41), vaddq_s32(v44, v42)));
      v28 = vaddvq_s32(vaddq_s32(vaddq_s32(v39, v34), vaddq_s32(v40, v35)));
      if ((a2.m_length & 0xF) == 0)
        goto LABEL_72;
    }
    else
    {
      v27 = 0;
      v28 = 0;
      v29 = 0;
    }
    v47 = a2.m_length - v27;
    v48 = (unsigned __int16 *)((char *)a2.m_characters + 2 * v27);
    v49 = (unsigned __int16 *)(v9 + 2 * (v27 + this));
    do
    {
      v50 = *v49++;
      v29 += v50;
      v51 = *v48++;
      v28 += v51;
      --v47;
    }
    while (v47);
LABEL_72:
    v52 = 32 - __clz(v4);
    v53 = (int16x8_t *)((char *)a2.m_characters + 2 * a2.m_length);
    v54 = v52 - 1;
    if (v29 == v28)
    {
LABEL_73:
      v55 = (int16x8_t *)(v9 + 2 * this);
      switch(v54)
      {
        case 0u:
          if (v55->i32[0] != *(_DWORD *)a2.m_characters)
            goto LABEL_88;
          break;
        case 1u:
          if (v55->i32[0] != *(_DWORD *)a2.m_characters
            || *(__int32 *)((char *)&v55->i32[-1] + 2 * a2.m_length) != v53[-1].i32[3])
          {
            goto LABEL_88;
          }
          break;
        case 2u:
          if (v55->i64[0] != *(_QWORD *)a2.m_characters
            || *(uint64_t *)((char *)&v55->i64[-1] + 2 * a2.m_length) != v53[-1].i64[1])
          {
            goto LABEL_88;
          }
          break;
        case 3u:
          v59 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)((char *)v55 + 2 * a2.m_length - 16), v53[-1]), (int8x16_t)vceqq_s16(*v55, *(int16x8_t *)a2.m_characters));
          v59.i16[0] = vminvq_u16(v59);
          if (!v59.i32[0])
            goto LABEL_88;
          break;
        default:
          v56 = (uint16x8_t)vceqq_s16(*v55, *(int16x8_t *)a2.m_characters);
          v56.i16[0] = vminvq_u16(v56);
          if (!v56.i32[0])
            goto LABEL_88;
          v57 = a2.m_length & 7;
          if (a2.m_length >= 8)
          {
            do
            {
              v58 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v55 + 2 * v57), *(int16x8_t *)((char *)a2.m_characters + 2 * v57));
              v58.i16[0] = vminvq_u16(v58);
              if (!v58.i32[0])
                goto LABEL_88;
              v57 += 8;
            }
            while (v57 < a2.m_length);
          }
          break;
      }
      return this;
    }
LABEL_88:
    while (this)
    {
      if (--this + a2.m_length >= v8 || this >= v8)
        goto LABEL_195;
      v29 = v29 - *(unsigned __int16 *)(v9 + 2 * (this + a2.m_length)) + *(unsigned __int16 *)(v9 + 2 * this);
      if (v29 == v28)
        goto LABEL_73;
    }
    return -1;
  }
  if (a2.m_is8Bit)
  {
    v15 = v8 - this;
    if (v8 < this)
      v15 = 0;
    if (v15 <= (unint64_t)a2.m_length - 1)
      goto LABEL_195;
    if (a2.m_length < 8uLL)
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      goto LABEL_133;
    }
    if (a2.m_length >= 0x20uLL)
    {
      v117 = 0uLL;
      v118 = 0uLL;
      v16 = a2.m_length - (unint64_t)(a2.m_length & 0x1F);
      v119 = 0uLL;
      v120 = 0uLL;
      v121 = (uint8x8_t *)(this + v9 + 16);
      v122 = 0uLL;
      v123 = (uint8x8_t *)((char *)a2.m_characters + 16);
      v124 = 0uLL;
      v125 = v16;
      v126 = 0uLL;
      v127 = 0uLL;
      v128 = 0uLL;
      v129 = 0uLL;
      v130 = 0uLL;
      v131 = 0uLL;
      v132 = 0uLL;
      v133 = 0uLL;
      v134 = 0uLL;
      v135 = 0uLL;
      do
      {
        v136 = *(uint8x16_t *)v121[-2].i8;
        v137 = vmovl_u8(*(uint8x8_t *)v136.i8);
        v138 = vmovl_high_u8(v136);
        v139 = vmovl_u8(*v121);
        v140 = vmovl_high_u8(*(uint8x16_t *)v121->i8);
        v131 = (int32x4_t)vaddw_high_u16((uint32x4_t)v131, v138);
        v130 = (int32x4_t)vaddw_u16((uint32x4_t)v130, *(uint16x4_t *)v138.i8);
        v129 = (int32x4_t)vaddw_high_u16((uint32x4_t)v129, v137);
        v128 = (int32x4_t)vaddw_u16((uint32x4_t)v128, *(uint16x4_t *)v137.i8);
        v135 = (int32x4_t)vaddw_high_u16((uint32x4_t)v135, v140);
        v134 = (int32x4_t)vaddw_u16((uint32x4_t)v134, *(uint16x4_t *)v140.i8);
        v133 = (int32x4_t)vaddw_high_u16((uint32x4_t)v133, v139);
        v132 = (int32x4_t)vaddw_u16((uint32x4_t)v132, *(uint16x4_t *)v139.i8);
        v141 = *(uint8x16_t *)v123[-2].i8;
        v142 = vmovl_u8(*(uint8x8_t *)v141.i8);
        v143 = vmovl_high_u8(v141);
        v144 = vmovl_u8(*v123);
        v145 = vmovl_high_u8(*(uint8x16_t *)v123->i8);
        v120 = (int32x4_t)vaddw_high_u16((uint32x4_t)v120, v143);
        v119 = (int32x4_t)vaddw_u16((uint32x4_t)v119, *(uint16x4_t *)v143.i8);
        v118 = (int32x4_t)vaddw_high_u16((uint32x4_t)v118, v142);
        v117 = (int32x4_t)vaddw_u16((uint32x4_t)v117, *(uint16x4_t *)v142.i8);
        v127 = (int32x4_t)vaddw_high_u16((uint32x4_t)v127, v145);
        v126 = (int32x4_t)vaddw_u16((uint32x4_t)v126, *(uint16x4_t *)v145.i8);
        v121 += 4;
        v124 = (int32x4_t)vaddw_high_u16((uint32x4_t)v124, v144);
        v123 += 4;
        v122 = (int32x4_t)vaddw_u16((uint32x4_t)v122, *(uint16x4_t *)v144.i8);
        v125 -= 32;
      }
      while (v125);
      v18 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v132, v128), vaddq_s32(v134, v130)), vaddq_s32(vaddq_s32(v133, v129), vaddq_s32(v135, v131))));
      v17 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v122, v117), vaddq_s32(v126, v119)), vaddq_s32(vaddq_s32(v124, v118), vaddq_s32(v127, v120))));
      if ((a2.m_length & 0x1F) == 0)
        goto LABEL_135;
      if ((a2.m_length & 0x1F) < 8uLL)
      {
LABEL_133:
        v159 = a2.m_length - v16;
        v160 = (unsigned __int8 *)a2.m_characters + v16;
        v161 = (unsigned __int8 *)(v9 + v16 + this);
        do
        {
          v162 = *v161++;
          v18 += v162;
          v163 = *v160++;
          v17 += v163;
          --v159;
        }
        while (v159);
        goto LABEL_135;
      }
    }
    else
    {
      v17 = 0;
      v18 = 0;
      v16 = 0;
    }
    v146 = v9 + v16;
    v147 = (uint8x8_t *)((char *)a2.m_characters + v16);
    v148 = v16 + (a2.m_length & 7);
    v16 = a2.m_length - (unint64_t)(a2.m_length & 7);
    v149 = 0uLL;
    v150 = (int32x4_t)v17;
    v151 = (int32x4_t)v18;
    v152 = (uint8x8_t *)(v146 + this);
    v153 = v148 - a2.m_length;
    v154 = 0uLL;
    do
    {
      v155 = *v152++;
      v156 = vmovl_u8(v155);
      v154 = (int32x4_t)vaddw_high_u16((uint32x4_t)v154, v156);
      v151 = (int32x4_t)vaddw_u16((uint32x4_t)v151, *(uint16x4_t *)v156.i8);
      v157 = *v147++;
      v158 = vmovl_u8(v157);
      v149 = (int32x4_t)vaddw_high_u16((uint32x4_t)v149, v158);
      v150 = (int32x4_t)vaddw_u16((uint32x4_t)v150, *(uint16x4_t *)v158.i8);
      v153 += 8;
    }
    while (v153);
    v18 = vaddvq_s32(vaddq_s32(v151, v154));
    v17 = vaddvq_s32(vaddq_s32(v150, v149));
    if ((a2.m_length & 7) != 0)
      goto LABEL_133;
LABEL_135:
    v164 = 32 - __clz(v4);
    v165 = (int8x16_t *)((char *)a2.m_characters + a2.m_length);
    v166 = v164 - 1;
    if (v18 != v17)
      goto LABEL_153;
LABEL_136:
    v167 = (int8x16_t *)(v9 + this);
    switch(v166)
    {
      case 0u:
        v168 = v167->u16[0];
        v169 = *(unsigned __int16 *)a2.m_characters;
        goto LABEL_138;
      case 1u:
        if (v167->u16[0] != *(unsigned __int16 *)a2.m_characters)
          goto LABEL_153;
        v168 = *(unsigned __int16 *)((char *)&v167->u16[-1] + a2.m_length);
        v169 = v165[-1].u16[7];
        goto LABEL_138;
      case 2u:
        if (v167->i32[0] != *(_DWORD *)a2.m_characters)
          goto LABEL_153;
        v168 = *(__int32 *)((char *)&v167->i32[-1] + a2.m_length);
        v169 = v165[-1].i32[3];
LABEL_138:
        if (v168 == v169)
          return this;
        goto LABEL_153;
      case 3u:
        if (v167->i64[0] != *(_QWORD *)a2.m_characters
          || *(uint64_t *)((char *)&v167->i64[-1] + a2.m_length) != v165[-1].i64[1])
        {
          goto LABEL_153;
        }
        return this;
      case 4u:
        v173 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)&v167[-1] + a2.m_length), v165[-1]), vceqq_s8(*v167, *(int8x16_t *)a2.m_characters));
        v173.i8[0] = vminvq_u8(v173);
        if (!v173.i32[0])
          goto LABEL_153;
        return this;
      default:
        v170 = (uint8x16_t)vceqq_s8(*v167, *(int8x16_t *)a2.m_characters);
        v170.i8[0] = vminvq_u8(v170);
        if (!v170.i32[0])
          goto LABEL_153;
        v171 = a2.m_length & 0xF;
        if (a2.m_length < 0x10)
          return this;
        break;
    }
    while (1)
    {
      v172 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v167 + v171), *(int8x16_t *)((char *)a2.m_characters + v171));
      v172.i8[0] = vminvq_u8(v172);
      if (!v172.i32[0])
        break;
      v171 += 16;
      if (v171 >= a2.m_length)
        return this;
    }
LABEL_153:
    while (this)
    {
      if (--this + a2.m_length >= v8 || this >= v8)
        goto LABEL_195;
      v18 = v18 - *(unsigned __int8 *)(v9 + this + a2.m_length) + *(unsigned __int8 *)(v9 + this);
      if (v18 == v17)
        goto LABEL_136;
    }
    return -1;
  }
  v30 = v8 - this;
  if (v8 < this)
    v30 = 0;
  if (v30 <= (unint64_t)a2.m_length - 1)
    goto LABEL_195;
  if (a2.m_length < 8uLL)
  {
    v31 = 0;
    v32 = 0;
    v33 = 0;
    goto LABEL_165;
  }
  if (a2.m_length >= 0x20uLL)
  {
    v174 = 0uLL;
    v175 = 0uLL;
    v31 = a2.m_length - (unint64_t)(a2.m_length & 0x1F);
    v176 = 0uLL;
    v177 = 0uLL;
    v178 = (uint8x8_t *)(this + v9 + 16);
    v179 = 0uLL;
    v180 = (uint16x8_t *)((char *)a2.m_characters + 32);
    v181 = 0uLL;
    v182 = v31;
    v183 = 0uLL;
    v184 = 0uLL;
    v185 = 0uLL;
    v186 = 0uLL;
    v187 = 0uLL;
    v188 = 0uLL;
    v189 = 0uLL;
    v190 = 0uLL;
    v191 = 0uLL;
    v192 = 0uLL;
    do
    {
      v193 = *(uint8x16_t *)v178[-2].i8;
      v194 = vmovl_u8(*(uint8x8_t *)v193.i8);
      v195 = vmovl_high_u8(v193);
      v196 = vmovl_u8(*v178);
      v197 = vmovl_high_u8(*(uint8x16_t *)v178->i8);
      v188 = (int32x4_t)vaddw_high_u16((uint32x4_t)v188, v195);
      v187 = (int32x4_t)vaddw_u16((uint32x4_t)v187, *(uint16x4_t *)v195.i8);
      v186 = (int32x4_t)vaddw_high_u16((uint32x4_t)v186, v194);
      v185 = (int32x4_t)vaddw_u16((uint32x4_t)v185, *(uint16x4_t *)v194.i8);
      v192 = (int32x4_t)vaddw_high_u16((uint32x4_t)v192, v197);
      v191 = (int32x4_t)vaddw_u16((uint32x4_t)v191, *(uint16x4_t *)v197.i8);
      v190 = (int32x4_t)vaddw_high_u16((uint32x4_t)v190, v196);
      v189 = (int32x4_t)vaddw_u16((uint32x4_t)v189, *(uint16x4_t *)v196.i8);
      v199 = v180[-2];
      v198 = v180[-1];
      v201 = *v180;
      v200 = v180[1];
      v180 += 4;
      v175 = (int32x4_t)vaddw_high_u16((uint32x4_t)v175, v199);
      v176 = (int32x4_t)vaddw_u16((uint32x4_t)v176, *(uint16x4_t *)v198.i8);
      v174 = (int32x4_t)vaddw_u16((uint32x4_t)v174, *(uint16x4_t *)v199.i8);
      v177 = (int32x4_t)vaddw_high_u16((uint32x4_t)v177, v198);
      v181 = (int32x4_t)vaddw_high_u16((uint32x4_t)v181, v201);
      v183 = (int32x4_t)vaddw_u16((uint32x4_t)v183, *(uint16x4_t *)v200.i8);
      v179 = (int32x4_t)vaddw_u16((uint32x4_t)v179, *(uint16x4_t *)v201.i8);
      v184 = (int32x4_t)vaddw_high_u16((uint32x4_t)v184, v200);
      v178 += 4;
      v182 -= 32;
    }
    while (v182);
    v33 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v189, v185), vaddq_s32(v191, v187)), vaddq_s32(vaddq_s32(v190, v186), vaddq_s32(v192, v188))));
    v32 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v179, v174), vaddq_s32(v183, v176)), vaddq_s32(vaddq_s32(v181, v175), vaddq_s32(v184, v177))));
    if ((a2.m_length & 0x1F) == 0)
      goto LABEL_167;
    if ((a2.m_length & 0x1F) < 8uLL)
    {
LABEL_165:
      v214 = a2.m_length - v31;
      v215 = (unsigned __int16 *)((char *)a2.m_characters + 2 * v31);
      v216 = (unsigned __int8 *)(v9 + v31 + this);
      do
      {
        v217 = *v216++;
        v33 += v217;
        v218 = *v215++;
        v32 += v218;
        --v214;
      }
      while (v214);
      goto LABEL_167;
    }
  }
  else
  {
    v32 = 0;
    v33 = 0;
    v31 = 0;
  }
  v202 = v9 + v31;
  v203 = (uint16x8_t *)((char *)a2.m_characters + 2 * v31);
  v204 = v31 + (a2.m_length & 7);
  v31 = a2.m_length - (unint64_t)(a2.m_length & 7);
  v205 = 0uLL;
  v206 = (int32x4_t)v32;
  v207 = (int32x4_t)v33;
  v208 = (uint8x8_t *)(v202 + this);
  v209 = v204 - a2.m_length;
  v210 = 0uLL;
  do
  {
    v211 = *v208++;
    v212 = vmovl_u8(v211);
    v210 = (int32x4_t)vaddw_high_u16((uint32x4_t)v210, v212);
    v207 = (int32x4_t)vaddw_u16((uint32x4_t)v207, *(uint16x4_t *)v212.i8);
    v213 = *v203++;
    v205 = (int32x4_t)vaddw_high_u16((uint32x4_t)v205, v213);
    v206 = (int32x4_t)vaddw_u16((uint32x4_t)v206, *(uint16x4_t *)v213.i8);
    v209 += 8;
  }
  while (v209);
  v33 = vaddvq_s32(vaddq_s32(v207, v210));
  v32 = vaddvq_s32(vaddq_s32(v206, v205));
  if ((a2.m_length & 7) != 0)
    goto LABEL_165;
LABEL_167:
  if (v33 != v32)
    goto LABEL_184;
LABEL_168:
  v219 = (uint8x8_t *)(v9 + this);
  if (a2.m_length < 8)
  {
    if (a2.m_length < 4)
    {
      v227 = (v219->u16[0] | (v219->u16[0] << 8)) & 0xFF00FF;
      v228 = (*(unsigned __int16 *)((char *)v219->u16 + (a2.m_length & 1)) | (*(unsigned __int16 *)((char *)v219->u16
                                                                                                  + (a2.m_length & 1)) << 8)) & 0xFF00FF;
      if (v227 == *(_DWORD *)a2.m_characters && v228 == *(_DWORD *)((char *)a2.m_characters + 2 * (a2.m_length & 1)))
        return this;
LABEL_184:
      while (this)
      {
        if (--this + a2.m_length >= v8 || this >= v8)
          goto LABEL_195;
        v33 = v33 - *(unsigned __int8 *)(v9 + this + a2.m_length) + *(unsigned __int8 *)(v9 + this);
        if (v33 == v32)
          goto LABEL_168;
      }
      return -1;
    }
    v223 = (v219->u32[0] | ((unint64_t)v219->u32[0] << 16)) & 0xFFFF0000FFFFLL;
    v224 = (*(unsigned int *)((char *)v219->u32 + (a2.m_length & 3)) | ((unint64_t)*(unsigned int *)((char *)v219->u32 + (a2.m_length & 3)) << 16)) & 0xFFFF0000FFFFLL;
    v225 = (v224 | (v224 << 8)) & 0xFF00FF00FF00FFLL;
    if (((v223 | (v223 << 8)) & 0xFF00FF00FF00FFLL) != *(_QWORD *)a2.m_characters
      || v225 != *(_QWORD *)((char *)a2.m_characters + 2 * (a2.m_length & 3)))
    {
      goto LABEL_184;
    }
  }
  else
  {
    v220 = (uint16x8_t)vceqq_s16(*(int16x8_t *)a2.m_characters, (int16x8_t)vmovl_u8(*v219));
    v220.i16[0] = vminvq_u16(v220);
    v221 = a2.m_length & 7;
    if (!v220.i32[0])
      goto LABEL_184;
    do
    {
      v222 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)a2.m_characters + 2 * v221), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v219 + v221)));
      v222.i16[0] = vminvq_u16(v222);
      if (!v222.i32[0])
        goto LABEL_184;
      v221 += 8;
    }
    while (v221 < a2.m_length);
  }
  return this;
}

uint64_t WTF::StringImpl::startsWith(uint64_t a1, uint64_t a2, void *a3, StringView a4)
{
  StringView v5;

  if (!a2)
    return 1;
  a4.m_characters = a3;
  *(_QWORD *)&v5.m_length = a2;
  LODWORD(v5.m_characters) = *(_DWORD *)(a1 + 4);
  HIDWORD(v5.m_characters) = (*(_DWORD *)(a1 + 16) >> 2) & 1;
  return WTF::startsWith(*(int8x16_t **)(a1 + 8), v5, a4);
}

uint64_t WTF::startsWith(int8x16_t *this, StringView a2, StringView a3)
{
  uint64_t result;
  uint64_t v4;
  uint16x8_t v5;
  uint64_t v6;
  unsigned int v7;
  uint16x8_t v8;
  BOOL v9;
  uint16x8_t v10;
  unsigned int v11;
  uint16x8_t v12;
  BOOL v13;
  uint64_t m_characters_low;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint8x16_t v25;
  unsigned int v26;
  uint8x16_t v27;
  BOOL v28;
  uint8x16_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  unsigned int v32;
  uint16x8_t v33;
  BOOL v34;

  if (LODWORD(a3.m_characters) > LODWORD(a2.m_characters))
    return 0;
  v4 = (uint64_t)a3.m_characters & 0xFF00000000;
  if (((uint64_t)a2.m_characters & 0xFF00000000) != 0)
  {
    if (v4)
    {
      if (LODWORD(a3.m_characters))
      {
        if (LODWORD(a3.m_characters) == 1)
          return this->u8[0] == **(_BYTE **)&a2.m_length;
        m_characters_low = LODWORD(a3.m_characters);
        switch(31 - __clz(LODWORD(a3.m_characters) - 1))
        {
          case 0u:
            return this->u16[0] == (unsigned __int16)**(_WORD **)&a2.m_length;
          case 1u:
            if (this->u16[0] != (unsigned __int16)**(_WORD **)&a2.m_length)
              return 0;
            return *(unsigned __int16 *)((char *)&this->u16[-1] + LODWORD(a3.m_characters)) == *(unsigned __int16 *)(*(_QWORD *)&a2.m_length + LODWORD(a3.m_characters) - 2);
          case 2u:
            if (this->i32[0] != **(_DWORD **)&a2.m_length)
              return 0;
            goto LABEL_86;
          case 3u:
            if (this->i64[0] == **(_QWORD **)&a2.m_length)
              goto LABEL_89;
            return 0;
          case 4u:
            v29 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)&this[-1] + LODWORD(a3.m_characters)), *(int8x16_t *)(*(_QWORD *)&a2.m_length + LODWORD(a3.m_characters) - 16)), vceqq_s8(*this, **(int8x16_t **)&a2.m_length));
            v29.i8[0] = vminvq_u8(v29);
            return v29.i32[0] != 0;
          default:
            v25 = (uint8x16_t)vceqq_s8(*this, **(int8x16_t **)&a2.m_length);
            v25.i8[0] = vminvq_u8(v25);
            v6 = v25.u32[0];
            if (!v25.i32[0])
              return v6;
            if (LODWORD(a3.m_characters) < 0x10)
              return 1;
            v26 = (uint64_t)a3.m_characters & 0xF;
            do
            {
              v27 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)this + v26), *(int8x16_t *)(*(_QWORD *)&a2.m_length + v26));
              v27.i8[0] = vminvq_u8(v27);
              v6 = v27.i32[0] != 0;
              v26 += 16;
              if (v27.i32[0])
                v28 = v26 >= LODWORD(a3.m_characters);
              else
                v28 = 1;
            }
            while (!v28);
            break;
        }
        return v6;
      }
      return 1;
    }
    if (LODWORD(a3.m_characters) >= 8)
    {
      v10 = (uint16x8_t)vceqq_s16(**(int16x8_t **)&a2.m_length, (int16x8_t)vmovl_u8(*(uint8x8_t *)this->i8));
      v10.i16[0] = vminvq_u16(v10);
      v6 = v10.u32[0];
      if (v10.i32[0])
      {
        v11 = (uint64_t)a3.m_characters & 7;
        do
        {
          v12 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(*(_QWORD *)&a2.m_length + 2 * v11), (int16x8_t)vmovl_u8(*(uint8x8_t *)&this->i8[v11]));
          v12.i16[0] = vminvq_u16(v12);
          v6 = v12.i32[0] != 0;
          v11 += 8;
          if (v12.i32[0])
            v13 = v11 >= LODWORD(a3.m_characters);
          else
            v13 = 1;
        }
        while (!v13);
      }
      return v6;
    }
    if (LODWORD(a3.m_characters) < 4)
    {
      if (LODWORD(a3.m_characters) < 2)
      {
        if (LODWORD(a3.m_characters) == 1)
          return **(_WORD **)&a2.m_length == this->u8[0];
        return 1;
      }
      return ((this->u16[0] | (this->u16[0] << 8)) & 0xFF00FF) == **(_DWORD **)&a2.m_length
          && ((*(unsigned __int16 *)((char *)this->u16 + ((uint64_t)a3.m_characters & 1)) | (*(unsigned __int16 *)((char *)this->u16 + ((uint64_t)a3.m_characters & 1)) << 8)) & 0xFF00FF) == *(_DWORD *)(*(_QWORD *)&a2.m_length + 2 * ((uint64_t)a3.m_characters & 1));
    }
    else
    {
      v19 = (this->u32[0] | ((unint64_t)this->u32[0] << 16)) & 0xFFFF0000FFFFLL;
      v20 = (*(unsigned int *)((char *)this->u32 + ((uint64_t)a3.m_characters & 3)) | ((unint64_t)*(unsigned int *)((char *)this->u32 + ((uint64_t)a3.m_characters & 3)) << 16)) & 0xFFFF0000FFFFLL;
      v21 = (v20 | (v20 << 8)) & 0xFF00FF00FF00FFLL;
      return ((v19 | (v19 << 8)) & 0xFF00FF00FF00FFLL) == **(_QWORD **)&a2.m_length
          && v21 == *(_QWORD *)(*(_QWORD *)&a2.m_length + 2 * ((uint64_t)a3.m_characters & 3));
    }
  }
  else if (v4)
  {
    if (LODWORD(a3.m_characters) >= 8)
    {
      v5 = (uint16x8_t)vceqq_s16(*(int16x8_t *)this, (int16x8_t)vmovl_u8(**(uint8x8_t **)&a2.m_length));
      v5.i16[0] = vminvq_u16(v5);
      v6 = v5.u32[0];
      if (v5.i32[0])
      {
        v7 = (uint64_t)a3.m_characters & 7;
        do
        {
          v8 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)this + 2 * v7), (int16x8_t)vmovl_u8(*(uint8x8_t *)(*(_QWORD *)&a2.m_length + v7)));
          v8.i16[0] = vminvq_u16(v8);
          v6 = v8.i32[0] != 0;
          v7 += 8;
          if (v8.i32[0])
            v9 = v7 >= LODWORD(a3.m_characters);
          else
            v9 = 1;
        }
        while (!v9);
      }
      return v6;
    }
    if (LODWORD(a3.m_characters) < 4)
    {
      if (LODWORD(a3.m_characters) < 2)
      {
        if (LODWORD(a3.m_characters) == 1)
          return this->u16[0] == **(_BYTE **)&a2.m_length;
        return 1;
      }
      return (((unsigned __int16)**(_WORD **)&a2.m_length | ((unsigned __int16)**(_WORD **)&a2.m_length << 8)) & 0xFF00FF) == this->i32[0]
          && ((*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + ((uint64_t)a3.m_characters & 1)) | (*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + ((uint64_t)a3.m_characters & 1)) << 8)) & 0xFF00FF) == *(__int32 *)((char *)this->i32 + 2 * ((uint64_t)a3.m_characters & 1));
    }
    else
    {
      v15 = (**(_DWORD **)&a2.m_length | ((unint64_t)**(_DWORD **)&a2.m_length << 16)) & 0xFFFF0000FFFFLL;
      v16 = (*(unsigned int *)(*(_QWORD *)&a2.m_length + ((uint64_t)a3.m_characters & 3)) | ((unint64_t)*(unsigned int *)(*(_QWORD *)&a2.m_length + ((uint64_t)a3.m_characters & 3)) << 16)) & 0xFFFF0000FFFFLL;
      v17 = (v16 | (v16 << 8)) & 0xFF00FF00FF00FFLL;
      return ((v15 | (v15 << 8)) & 0xFF00FF00FF00FFLL) == this->i64[0]
          && v17 == *(uint64_t *)((char *)this->i64 + 2 * ((uint64_t)a3.m_characters & 3));
    }
  }
  else
  {
    if (!LODWORD(a3.m_characters))
      return 1;
    if (LODWORD(a3.m_characters) == 1)
    {
      return this->u16[0] == (unsigned __int16)**(_WORD **)&a2.m_length;
    }
    else
    {
      switch(31 - __clz(LODWORD(a3.m_characters) - 1))
      {
        case 0u:
          result = this->i32[0] == **(_DWORD **)&a2.m_length;
          break;
        case 1u:
          if (this->i32[0] != **(_DWORD **)&a2.m_length)
            return 0;
          m_characters_low = 2 * LODWORD(a3.m_characters);
LABEL_86:
          result = *(__int32 *)((char *)&this->i32[-1] + m_characters_low) == *(_DWORD *)(*(_QWORD *)&a2.m_length
                                                                                        + m_characters_low
                                                                                        - 4);
          break;
        case 2u:
          if (this->i64[0] != **(_QWORD **)&a2.m_length)
            return 0;
          m_characters_low = 2 * LODWORD(a3.m_characters);
LABEL_89:
          result = *(uint64_t *)((char *)&this->i64[-1] + m_characters_low) == *(_QWORD *)(*(_QWORD *)&a2.m_length
                                                                                        + m_characters_low
                                                                                        - 8);
          break;
        case 3u:
          v31 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)((char *)&this[-1] + 2 * LODWORD(a3.m_characters)), *(int16x8_t *)(*(_QWORD *)&a2.m_length + 2 * LODWORD(a3.m_characters) - 16)), (int8x16_t)vceqq_s16(*(int16x8_t *)this, **(int16x8_t **)&a2.m_length));
          v31.i16[0] = vminvq_u16(v31);
          result = v31.i32[0] != 0;
          break;
        default:
          v30 = (uint16x8_t)vceqq_s16(*(int16x8_t *)this, **(int16x8_t **)&a2.m_length);
          v30.i16[0] = vminvq_u16(v30);
          v6 = v30.u32[0];
          if (!v30.i32[0])
            return v6;
          if (LODWORD(a3.m_characters) < 8)
            return 1;
          v32 = (uint64_t)a3.m_characters & 7;
          do
          {
            v33 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)this + 2 * v32), *(int16x8_t *)(*(_QWORD *)&a2.m_length + 2 * v32));
            v33.i16[0] = vminvq_u16(v33);
            v6 = v33.i32[0] != 0;
            v32 += 8;
            if (v33.i32[0])
              v34 = v32 >= LODWORD(a3.m_characters);
            else
              v34 = 1;
          }
          while (!v34);
          return v6;
      }
    }
  }
  return result;
}

BOOL WTF::StringImpl::startsWithIgnoringASCIICase(uint64_t a1, uint64_t a2, void *a3, StringView a4)
{
  StringView v5;

  if (!a2)
    return 0;
  a4.m_characters = a3;
  *(_QWORD *)&v5.m_length = a2;
  LODWORD(v5.m_characters) = *(_DWORD *)(a1 + 4);
  HIDWORD(v5.m_characters) = (*(_DWORD *)(a1 + 16) >> 2) & 1;
  return WTF::startsWithIgnoringASCIICase(*(_QWORD *)(a1 + 8), v5, a4);
}

BOOL WTF::startsWithIgnoringASCIICase(_BOOL8 this, StringView a2, StringView a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (LODWORD(a3.m_characters) > LODWORD(a2.m_characters))
    return 0;
  v3 = (uint64_t)a3.m_characters & 0xFF00000000;
  if (((uint64_t)a2.m_characters & 0xFF00000000) == 0)
  {
    if (v3)
    {
      if (LODWORD(a3.m_characters))
      {
        if (LODWORD(a2.m_characters) > (unint64_t)LODWORD(a3.m_characters))
        {
          v4 = 0;
          v10 = 0;
          while (LODWORD(a2.m_characters) != v10)
          {
            if ((*(unsigned __int16 *)(this + 2 * v10) | (32
                                                         * (*(unsigned __int16 *)(this + 2 * v10) - 65 < 0x1A))) == WTF::asciiCaseFoldTable[*(unsigned __int8 *)(*(_QWORD *)&a2.m_length + v10)])
            {
              v4 = ++v10 >= (unint64_t)LODWORD(a3.m_characters);
              if (LODWORD(a3.m_characters) != v10)
                continue;
            }
            return v4;
          }
        }
        else
        {
          v4 = 0;
          v6 = 0;
          while (LODWORD(a2.m_characters) != v6)
          {
            if ((*(unsigned __int16 *)(this + 2 * v6) | (32
                                                        * (*(unsigned __int16 *)(this + 2 * v6) - 65 < 0x1A))) == WTF::asciiCaseFoldTable[*(unsigned __int8 *)(*(_QWORD *)&a2.m_length + v6)])
            {
              v4 = ++v6 >= (unint64_t)LODWORD(a3.m_characters);
              if (LODWORD(a3.m_characters) != v6)
                continue;
            }
            return v4;
          }
        }
        goto LABEL_55;
      }
    }
    else if (LODWORD(a3.m_characters))
    {
      if (LODWORD(a2.m_characters) > (unint64_t)LODWORD(a3.m_characters))
      {
        v4 = 0;
        v12 = 0;
        while (LODWORD(a2.m_characters) != v12)
        {
          if ((*(unsigned __int16 *)(this + 2 * v12) | (32
                                                       * (*(unsigned __int16 *)(this + 2 * v12) - 65 < 0x1A))) == (*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v12) | (32 * (*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v12) - 65 < 0x1A))))
          {
            v4 = ++v12 >= (unint64_t)LODWORD(a3.m_characters);
            if (LODWORD(a3.m_characters) != v12)
              continue;
          }
          return v4;
        }
      }
      else
      {
        v4 = 0;
        v8 = 0;
        while (LODWORD(a2.m_characters) != v8)
        {
          if ((*(unsigned __int16 *)(this + 2 * v8) | (32
                                                      * (*(unsigned __int16 *)(this + 2 * v8) - 65 < 0x1A))) == (*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v8) | (32 * (*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v8) - 65 < 0x1A))))
          {
            v4 = ++v8 >= (unint64_t)LODWORD(a3.m_characters);
            if (LODWORD(a3.m_characters) != v8)
              continue;
          }
          return v4;
        }
      }
      goto LABEL_55;
    }
    return 1;
  }
  if (!v3)
  {
    if (LODWORD(a3.m_characters))
    {
      if (LODWORD(a2.m_characters) > (unint64_t)LODWORD(a3.m_characters))
      {
        v4 = 0;
        v11 = 0;
        while (LODWORD(a2.m_characters) != v11)
        {
          if ((*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v11) | (32
                                                                          * (*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v11)
                                                                           - 65 < 0x1A))) == WTF::asciiCaseFoldTable[*(unsigned __int8 *)(this + v11)])
          {
            v4 = ++v11 >= (unint64_t)LODWORD(a3.m_characters);
            if (LODWORD(a3.m_characters) != v11)
              continue;
          }
          return v4;
        }
      }
      else
      {
        v4 = 0;
        v7 = 0;
        while (LODWORD(a2.m_characters) != v7)
        {
          if ((*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v7) | (32
                                                                         * (*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v7)
                                                                          - 65 < 0x1A))) == WTF::asciiCaseFoldTable[*(unsigned __int8 *)(this + v7)])
          {
            v4 = ++v7 >= (unint64_t)LODWORD(a3.m_characters);
            if (LODWORD(a3.m_characters) != v7)
              continue;
          }
          return v4;
        }
      }
      goto LABEL_55;
    }
    return 1;
  }
  if (!LODWORD(a3.m_characters))
    return 1;
  if (LODWORD(a2.m_characters) > (unint64_t)LODWORD(a3.m_characters))
  {
    v4 = 0;
    v9 = 0;
    while (LODWORD(a2.m_characters) != v9)
    {
      if (WTF::asciiCaseFoldTable[*(unsigned __int8 *)(this + v9)] == WTF::asciiCaseFoldTable[*(unsigned __int8 *)(*(_QWORD *)&a2.m_length + v9)])
      {
        v4 = ++v9 >= (unint64_t)LODWORD(a3.m_characters);
        if (LODWORD(a3.m_characters) != v9)
          continue;
      }
      return v4;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
    while (LODWORD(a2.m_characters) != v5)
    {
      if (WTF::asciiCaseFoldTable[*(unsigned __int8 *)(this + v5)] == WTF::asciiCaseFoldTable[*(unsigned __int8 *)(*(_QWORD *)&a2.m_length + v5)])
      {
        v4 = ++v5 >= (unint64_t)LODWORD(a3.m_characters);
        if (LODWORD(a3.m_characters) != v5)
          continue;
      }
      return v4;
    }
  }
LABEL_55:
  __break(1u);
  return this;
}

BOOL WTF::StringImpl::startsWith(uint64_t a1, int a2)
{
  unsigned __int8 *v2;

  if (!*(_DWORD *)(a1 + 4))
    return 0;
  v2 = *(unsigned __int8 **)(a1 + 8);
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
    return *v2 == a2;
  else
    return *(unsigned __int16 *)v2 == a2;
}

uint64_t WTF::StringImpl::startsWith(uint64_t result, int8x16_t *a2, unint64_t a3)
{
  int8x16_t *v3;
  uint16x8_t v4;
  unsigned int v5;
  uint16x8_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint8x16_t v15;
  uint8x16_t v16;
  unsigned int v17;
  uint8x16_t v18;
  BOOL v19;

  if (a3 > *(unsigned int *)(result + 4))
    return 0;
  v3 = *(int8x16_t **)(result + 8);
  if ((*(_BYTE *)(result + 16) & 4) != 0)
  {
    if ((_DWORD)a3)
    {
      if ((_DWORD)a3 == 1)
      {
        if (a3)
          return v3->u8[0] == a2->u8[0];
        else
          __break(1u);
      }
      else
      {
        switch(31 - __clz(a3 - 1))
        {
          case 0u:
            result = v3->u16[0] == a2->u16[0];
            break;
          case 1u:
            if (v3->u16[0] != a2->u16[0])
              return 0;
            result = *(unsigned __int16 *)((char *)&v3->u16[-1] + a3) == *(unsigned __int16 *)((char *)&a2->u16[-1] + a3);
            break;
          case 2u:
            if (v3->i32[0] != a2->i32[0])
              return 0;
            result = *(__int32 *)((char *)&v3->i32[-1] + a3) == *(__int32 *)((char *)&a2->i32[-1]
                                                                                         + a3);
            break;
          case 3u:
            if (v3->i64[0] != a2->i64[0])
              return 0;
            result = *(uint64_t *)((char *)&v3->i64[-1] + a3) == *(uint64_t *)((char *)&a2->i64[-1]
                                                                                         + a3);
            break;
          case 4u:
            v16 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)&v3[-1] + a3), *(int8x16_t *)((char *)&a2[-1] + a3)), vceqq_s8(*v3, *a2));
            v16.i8[0] = vminvq_u8(v16);
            result = v16.i32[0] != 0;
            break;
          default:
            v15 = (uint8x16_t)vceqq_s8(*v3, *a2);
            v15.i8[0] = vminvq_u8(v15);
            if (!v15.i32[0])
              return 0;
            if (a3 < 0x10)
              return 1;
            v17 = a3 & 0xF;
            do
            {
              v18 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v3 + v17), *(int8x16_t *)((char *)a2 + v17));
              v18.i8[0] = vminvq_u8(v18);
              result = v18.i32[0] != 0;
              v17 += 16;
              if (v18.i32[0])
                v19 = v17 >= a3;
              else
                v19 = 1;
            }
            while (!v19);
            break;
        }
      }
      return result;
    }
    return 1;
  }
  if (a3 < 8)
  {
    if (a3 >= 4)
    {
      v8 = (a2->u32[0] | ((unint64_t)a2->u32[0] << 16)) & 0xFFFF0000FFFFLL;
      v12 = ((v8 | (v8 << 8)) & 0xFF00FF00FF00FFLL) == v3->i64[0];
      v9 = (*(unsigned int *)((char *)a2->u32 + (a3 & 3)) | ((unint64_t)*(unsigned int *)((char *)a2->u32
                                                                                               + (a3 & 3)) << 16)) & 0xFFFF0000FFFFLL;
      v10 = (v9 | (v9 << 8)) & 0xFF00FF00FF00FFLL;
      v11 = *(uint64_t *)((char *)v3->i64 + 2 * (a3 & 3));
      return v12 && v10 == v11;
    }
    if (a3 >= 2)
    {
      v12 = ((a2->u16[0] | (a2->u16[0] << 8)) & 0xFF00FF) == v3->i32[0];
      v13 = *(__int32 *)((char *)v3->i32 + 2 * (a3 & 1));
      return v12
          && ((*(unsigned __int16 *)((char *)a2->u16 + (a3 & 1)) | (*(unsigned __int16 *)((char *)a2->u16 + (a3 & 1)) << 8)) & 0xFF00FF) == v13;
    }
    if ((_DWORD)a3 == 1)
      return v3->u16[0] == a2->u8[0];
    return 1;
  }
  v4 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v3, (int16x8_t)vmovl_u8(*(uint8x8_t *)a2->i8));
  v4.i16[0] = vminvq_u16(v4);
  if (!v4.i32[0])
    return 0;
  v5 = a3 & 7;
  do
  {
    v6 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v3 + 2 * v5), (int16x8_t)vmovl_u8(*(uint8x8_t *)&a2->i8[v5]));
    v6.i16[0] = vminvq_u16(v6);
    result = v6.i32[0] != 0;
    v5 += 8;
    if (v6.i32[0])
      v7 = v5 >= a3;
    else
      v7 = 1;
  }
  while (!v7);
  return result;
}

BOOL WTF::StringImpl::hasInfixStartingAt(WTF::StringImpl *this, StringView a2, unsigned int a3)
{
  unsigned int v3;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  int8x16_t *v8;
  uint16x8_t v9;
  unsigned int v10;
  uint16x8_t v11;
  BOOL v12;
  uint16x8_t v13;
  unsigned int v14;
  uint16x8_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t m_length;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v27;
  int v29;
  uint8x16_t v31;
  unsigned int v32;
  uint8x16_t v33;
  BOOL v34;
  uint8x16_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  unsigned int v38;
  uint16x8_t v39;
  BOOL v40;

  v3 = *((_DWORD *)this + 1);
  if (v3 < a3)
    return 0;
  if (v3 < a2.m_length || a2.m_length + a3 > v3)
    return 0;
  v6 = *(_QWORD *)&a2.m_length & 0xFF00000000;
  v7 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 16) & 4) != 0)
  {
    v8 = (int8x16_t *)(v7 + a3);
    if (v6)
    {
      if (!a2.m_length)
        return 1;
      if (a2.m_length == 1)
      {
        return v8->u8[0] == *(unsigned __int8 *)a2.m_characters;
      }
      else
      {
        m_length = a2.m_length;
        switch(31 - __clz(a2.m_length - 1))
        {
          case 0u:
            return v8->u16[0] == *(unsigned __int16 *)a2.m_characters;
          case 1u:
            if (v8->u16[0] != *(unsigned __int16 *)a2.m_characters)
              return 0;
            return *(unsigned __int16 *)((char *)&v8->u16[-1] + a2.m_length) == *(unsigned __int16 *)((char *)a2.m_characters + a2.m_length - 2);
          case 2u:
            if (v8->i32[0] != *(_DWORD *)a2.m_characters)
              return 0;
            return *(__int32 *)((char *)&v8->i32[-1] + m_length) == *(_DWORD *)((char *)a2.m_characters + m_length - 4);
          case 3u:
            if (v8->i64[0] != *(_QWORD *)a2.m_characters)
              return 0;
            return *(uint64_t *)((char *)&v8->i64[-1] + m_length) == *(_QWORD *)((char *)a2.m_characters + m_length - 8);
          case 4u:
            v35 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)&v8[-1] + a2.m_length), *(int8x16_t *)((char *)a2.m_characters + a2.m_length - 16)), vceqq_s8(*v8, *(int8x16_t *)a2.m_characters));
            v35.i8[0] = vminvq_u8(v35);
            return v35.i32[0] != 0;
          default:
            v31 = (uint8x16_t)vceqq_s8(*v8, *(int8x16_t *)a2.m_characters);
            v31.i8[0] = vminvq_u8(v31);
            if (!v31.i32[0])
              return 0;
            if (a2.m_length < 0x10)
              return 1;
            v32 = a2.m_length & 0xF;
            do
            {
              v33 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v8 + v32), *(int8x16_t *)((char *)a2.m_characters + v32));
              v33.i8[0] = vminvq_u8(v33);
              result = v33.i32[0] != 0;
              v32 += 16;
              if (v33.i32[0])
                v34 = v32 >= a2.m_length;
              else
                v34 = 1;
            }
            while (!v34);
            break;
        }
      }
    }
    else
    {
      if (a2.m_length < 8)
      {
        if (a2.m_length >= 4)
        {
          v23 = (v8->u32[0] | ((unint64_t)v8->u32[0] << 16)) & 0xFFFF0000FFFFLL;
          v24 = (*(unsigned int *)((char *)v8->u32 + (a2.m_length & 3)) | ((unint64_t)*(unsigned int *)((char *)v8->u32 + (a2.m_length & 3)) << 16)) & 0xFFFF0000FFFFLL;
          v25 = (v24 | (v24 << 8)) & 0xFF00FF00FF00FFLL;
          return ((v23 | (v23 << 8)) & 0xFF00FF00FF00FFLL) == *(_QWORD *)a2.m_characters
              && v25 == *(_QWORD *)((char *)a2.m_characters + 2 * (a2.m_length & 3));
        }
        if (a2.m_length >= 2)
        {
          v21 = ((v8->u16[0] | (v8->u16[0] << 8)) & 0xFF00FF) == *(_DWORD *)a2.m_characters;
          v29 = (*(unsigned __int16 *)((char *)v8->u16 + (a2.m_length & 1)) | (*(unsigned __int16 *)((char *)v8->u16 + (a2.m_length & 1)) << 8)) & 0xFF00FF;
          return v21 && v29 == *(_DWORD *)((char *)a2.m_characters + 2 * (a2.m_length & 1));
        }
        if (a2.m_length == 1)
          return *(_WORD *)a2.m_characters == v8->u8[0];
        return 1;
      }
      v13 = (uint16x8_t)vceqq_s16(*(int16x8_t *)a2.m_characters, (int16x8_t)vmovl_u8(*(uint8x8_t *)v8->i8));
      v13.i16[0] = vminvq_u16(v13);
      if (!v13.i32[0])
        return 0;
      v14 = a2.m_length & 7;
      do
      {
        v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)a2.m_characters + 2 * v14), (int16x8_t)vmovl_u8(*(uint8x8_t *)&v8->i8[v14]));
        v15.i16[0] = vminvq_u16(v15);
        result = v15.i32[0] != 0;
        v14 += 8;
        if (v15.i32[0])
          v16 = v14 >= a2.m_length;
        else
          v16 = 1;
      }
      while (!v16);
    }
  }
  else
  {
    v8 = (int8x16_t *)(v7 + 2 * a3);
    if (v6)
    {
      if (a2.m_length >= 8)
      {
        v9 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v8, (int16x8_t)vmovl_u8(*(uint8x8_t *)a2.m_characters));
        v9.i16[0] = vminvq_u16(v9);
        if (v9.i32[0])
        {
          v10 = a2.m_length & 7;
          do
          {
            v11 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v8 + 2 * v10), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a2.m_characters + v10)));
            v11.i16[0] = vminvq_u16(v11);
            result = v11.i32[0] != 0;
            v10 += 8;
            if (v11.i32[0])
              v12 = v10 >= a2.m_length;
            else
              v12 = 1;
          }
          while (!v12);
          return result;
        }
        return 0;
      }
      if (a2.m_length >= 4)
      {
        v17 = (*(unsigned int *)a2.m_characters | ((unint64_t)*(unsigned int *)a2.m_characters << 16)) & 0xFFFF0000FFFFLL;
        v21 = ((v17 | (v17 << 8)) & 0xFF00FF00FF00FFLL) == v8->i64[0];
        v18 = (*(unsigned int *)((char *)a2.m_characters + (a2.m_length & 3)) | ((unint64_t)*(unsigned int *)((char *)a2.m_characters + (a2.m_length & 3)) << 16)) & 0xFFFF0000FFFFLL;
        v19 = (v18 | (v18 << 8)) & 0xFF00FF00FF00FFLL;
        v20 = *(uint64_t *)((char *)v8->i64 + 2 * (a2.m_length & 3));
        return v21 && v19 == v20;
      }
      if (a2.m_length >= 2)
      {
        v21 = ((*(unsigned __int16 *)a2.m_characters | (*(unsigned __int16 *)a2.m_characters << 8)) & 0xFF00FF) == v8->i32[0];
        v27 = *(__int32 *)((char *)v8->i32 + 2 * (a2.m_length & 1));
        return v21
            && ((*(unsigned __int16 *)((char *)a2.m_characters + (a2.m_length & 1)) | (*(unsigned __int16 *)((char *)a2.m_characters + (a2.m_length & 1)) << 8)) & 0xFF00FF) == v27;
      }
      if (a2.m_length == 1)
        return v8->u16[0] == *(unsigned __int8 *)a2.m_characters;
      return 1;
    }
    if (!a2.m_length)
      return 1;
    if (a2.m_length == 1)
    {
      return v8->u16[0] == *(unsigned __int16 *)a2.m_characters;
    }
    else
    {
      switch(31 - __clz(a2.m_length - 1))
      {
        case 0u:
          result = v8->i32[0] == *(_DWORD *)a2.m_characters;
          break;
        case 1u:
          if (v8->i32[0] != *(_DWORD *)a2.m_characters)
            return 0;
          m_length = 2 * a2.m_length;
          return *(__int32 *)((char *)&v8->i32[-1] + m_length) == *(_DWORD *)((char *)a2.m_characters + m_length - 4);
        case 2u:
          if (v8->i64[0] != *(_QWORD *)a2.m_characters)
            return 0;
          m_length = 2 * a2.m_length;
          return *(uint64_t *)((char *)&v8->i64[-1] + m_length) == *(_QWORD *)((char *)a2.m_characters + m_length - 8);
        case 3u:
          v37 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)((char *)&v8[-1] + 2 * a2.m_length), *(int16x8_t *)((char *)a2.m_characters + 2 * a2.m_length - 16)), (int8x16_t)vceqq_s16(*(int16x8_t *)v8, *(int16x8_t *)a2.m_characters));
          v37.i16[0] = vminvq_u16(v37);
          result = v37.i32[0] != 0;
          break;
        default:
          v36 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v8, *(int16x8_t *)a2.m_characters);
          v36.i16[0] = vminvq_u16(v36);
          if (!v36.i32[0])
            return 0;
          if (a2.m_length < 8)
            return 1;
          v38 = a2.m_length & 7;
          do
          {
            v39 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v8 + 2 * v38), *(int16x8_t *)((char *)a2.m_characters + 2 * v38));
            v39.i16[0] = vminvq_u16(v39);
            result = v39.i32[0] != 0;
            v38 += 8;
            if (v39.i32[0])
              v40 = v38 >= a2.m_length;
            else
              v40 = 1;
          }
          while (!v40);
          break;
      }
    }
  }
  return result;
}

BOOL WTF::StringImpl::endsWith(uint64_t a1, uint64_t a2, void *a3, StringView a4)
{
  StringView v5;

  if (!a2)
    return 0;
  a4.m_characters = a3;
  *(_QWORD *)&v5.m_length = a2;
  LODWORD(v5.m_characters) = *(_DWORD *)(a1 + 4);
  HIDWORD(v5.m_characters) = (*(_DWORD *)(a1 + 16) >> 2) & 1;
  return WTF::endsWith(*(WTF **)(a1 + 8), v5, a4);
}

BOOL WTF::endsWith(WTF *this, StringView a2, StringView a3)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;
  int8x16_t *v6;
  uint16x8_t v7;
  unsigned int v8;
  uint16x8_t v9;
  BOOL v10;
  uint16x8_t v11;
  unsigned int v12;
  uint16x8_t v13;
  BOOL v14;
  uint64_t m_characters_low;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v25;
  int v27;
  uint8x16_t v29;
  unsigned int v30;
  uint8x16_t v31;
  BOOL v32;
  uint8x16_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  unsigned int v36;
  uint16x8_t v37;
  BOOL v38;

  if (LODWORD(a3.m_characters) > LODWORD(a2.m_characters))
    return 0;
  v4 = (LODWORD(a2.m_characters) - LODWORD(a3.m_characters));
  v5 = (uint64_t)a3.m_characters & 0xFF00000000;
  if (((uint64_t)a2.m_characters & 0xFF00000000) != 0)
  {
    v6 = (int8x16_t *)((char *)this + v4);
    if (v5)
    {
      if (LODWORD(a3.m_characters))
      {
        if (LODWORD(a3.m_characters) == 1)
          return v6->u8[0] == **(_BYTE **)&a2.m_length;
        m_characters_low = LODWORD(a3.m_characters);
        switch(31 - __clz(LODWORD(a3.m_characters) - 1))
        {
          case 0u:
            return v6->u16[0] == (unsigned __int16)**(_WORD **)&a2.m_length;
          case 1u:
            if (v6->u16[0] != (unsigned __int16)**(_WORD **)&a2.m_length)
              return 0;
            return *(unsigned __int16 *)((char *)&v6->u16[-1] + LODWORD(a3.m_characters)) == *(unsigned __int16 *)(*(_QWORD *)&a2.m_length + LODWORD(a3.m_characters) - 2);
          case 2u:
            if (v6->i32[0] != **(_DWORD **)&a2.m_length)
              return 0;
            goto LABEL_86;
          case 3u:
            if (v6->i64[0] == **(_QWORD **)&a2.m_length)
              goto LABEL_89;
            return 0;
          case 4u:
            v33 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)&v6[-1] + LODWORD(a3.m_characters)), *(int8x16_t *)(*(_QWORD *)&a2.m_length + LODWORD(a3.m_characters) - 16)), vceqq_s8(*v6, **(int8x16_t **)&a2.m_length));
            v33.i8[0] = vminvq_u8(v33);
            return v33.i32[0] != 0;
          default:
            v29 = (uint8x16_t)vceqq_s8(*v6, **(int8x16_t **)&a2.m_length);
            v29.i8[0] = vminvq_u8(v29);
            if (!v29.i32[0])
              return 0;
            if (LODWORD(a3.m_characters) < 0x10)
              return 1;
            v30 = (uint64_t)a3.m_characters & 0xF;
            do
            {
              v31 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v6 + v30), *(int8x16_t *)(*(_QWORD *)&a2.m_length + v30));
              v31.i8[0] = vminvq_u8(v31);
              result = v31.i32[0] != 0;
              v30 += 16;
              if (v31.i32[0])
                v32 = v30 >= LODWORD(a3.m_characters);
              else
                v32 = 1;
            }
            while (!v32);
            break;
        }
        return result;
      }
      return 1;
    }
    if (LODWORD(a3.m_characters) < 8)
    {
      if (LODWORD(a3.m_characters) >= 4)
      {
        v21 = (v6->u32[0] | ((unint64_t)v6->u32[0] << 16)) & 0xFFFF0000FFFFLL;
        v22 = (*(unsigned int *)((char *)v6->u32 + ((uint64_t)a3.m_characters & 3)) | ((unint64_t)*(unsigned int *)((char *)v6->u32 + ((uint64_t)a3.m_characters & 3)) << 16)) & 0xFFFF0000FFFFLL;
        v23 = (v22 | (v22 << 8)) & 0xFF00FF00FF00FFLL;
        return ((v21 | (v21 << 8)) & 0xFF00FF00FF00FFLL) == **(_QWORD **)&a2.m_length
            && v23 == *(_QWORD *)(*(_QWORD *)&a2.m_length + 2 * ((uint64_t)a3.m_characters & 3));
      }
      if (LODWORD(a3.m_characters) >= 2)
      {
        v20 = ((v6->u16[0] | (v6->u16[0] << 8)) & 0xFF00FF) == **(_DWORD **)&a2.m_length;
        v27 = (*(unsigned __int16 *)((char *)v6->u16 + ((uint64_t)a3.m_characters & 1)) | (*(unsigned __int16 *)((char *)v6->u16 + ((uint64_t)a3.m_characters & 1)) << 8)) & 0xFF00FF;
        return v20 && v27 == *(_DWORD *)(*(_QWORD *)&a2.m_length + 2 * ((uint64_t)a3.m_characters & 1));
      }
      if (LODWORD(a3.m_characters) == 1)
        return **(_WORD **)&a2.m_length == v6->u8[0];
      return 1;
    }
    v11 = (uint16x8_t)vceqq_s16(**(int16x8_t **)&a2.m_length, (int16x8_t)vmovl_u8(*(uint8x8_t *)v6->i8));
    v11.i16[0] = vminvq_u16(v11);
    if (v11.i32[0])
    {
      v12 = (uint64_t)a3.m_characters & 7;
      do
      {
        v13 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(*(_QWORD *)&a2.m_length + 2 * v12), (int16x8_t)vmovl_u8(*(uint8x8_t *)&v6->i8[v12]));
        v13.i16[0] = vminvq_u16(v13);
        result = v13.i32[0] != 0;
        v12 += 8;
        if (v13.i32[0])
          v14 = v12 >= LODWORD(a3.m_characters);
        else
          v14 = 1;
      }
      while (!v14);
      return result;
    }
    return 0;
  }
  v6 = (int8x16_t *)((char *)this + 2 * v4);
  if (v5)
  {
    if (LODWORD(a3.m_characters) < 8)
    {
      if (LODWORD(a3.m_characters) >= 4)
      {
        v16 = (**(_DWORD **)&a2.m_length | ((unint64_t)**(_DWORD **)&a2.m_length << 16)) & 0xFFFF0000FFFFLL;
        v20 = ((v16 | (v16 << 8)) & 0xFF00FF00FF00FFLL) == v6->i64[0];
        v17 = (*(unsigned int *)(*(_QWORD *)&a2.m_length + ((uint64_t)a3.m_characters & 3)) | ((unint64_t)*(unsigned int *)(*(_QWORD *)&a2.m_length + ((uint64_t)a3.m_characters & 3)) << 16)) & 0xFFFF0000FFFFLL;
        v18 = (v17 | (v17 << 8)) & 0xFF00FF00FF00FFLL;
        v19 = *(uint64_t *)((char *)v6->i64 + 2 * ((uint64_t)a3.m_characters & 3));
        return v20 && v18 == v19;
      }
      if (LODWORD(a3.m_characters) >= 2)
      {
        v20 = (((unsigned __int16)**(_WORD **)&a2.m_length | ((unsigned __int16)**(_WORD **)&a2.m_length << 8)) & 0xFF00FF) == v6->i32[0];
        v25 = *(__int32 *)((char *)v6->i32 + 2 * ((uint64_t)a3.m_characters & 1));
        return v20
            && ((*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + ((uint64_t)a3.m_characters & 1)) | (*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + ((uint64_t)a3.m_characters & 1)) << 8)) & 0xFF00FF) == v25;
      }
      if (LODWORD(a3.m_characters) == 1)
        return v6->u16[0] == **(_BYTE **)&a2.m_length;
      return 1;
    }
    v7 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v6, (int16x8_t)vmovl_u8(**(uint8x8_t **)&a2.m_length));
    v7.i16[0] = vminvq_u16(v7);
    if (v7.i32[0])
    {
      v8 = (uint64_t)a3.m_characters & 7;
      do
      {
        v9 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v6 + 2 * v8), (int16x8_t)vmovl_u8(*(uint8x8_t *)(*(_QWORD *)&a2.m_length + v8)));
        v9.i16[0] = vminvq_u16(v9);
        result = v9.i32[0] != 0;
        v8 += 8;
        if (v9.i32[0])
          v10 = v8 >= LODWORD(a3.m_characters);
        else
          v10 = 1;
      }
      while (!v10);
      return result;
    }
    return 0;
  }
  if (!LODWORD(a3.m_characters))
    return 1;
  if (LODWORD(a3.m_characters) == 1)
    return v6->u16[0] == (unsigned __int16)**(_WORD **)&a2.m_length;
  switch(31 - __clz(LODWORD(a3.m_characters) - 1))
  {
    case 0u:
      result = v6->i32[0] == **(_DWORD **)&a2.m_length;
      break;
    case 1u:
      if (v6->i32[0] != **(_DWORD **)&a2.m_length)
        return 0;
      m_characters_low = 2 * LODWORD(a3.m_characters);
LABEL_86:
      result = *(__int32 *)((char *)&v6->i32[-1] + m_characters_low) == *(_DWORD *)(*(_QWORD *)&a2.m_length
                                                                                  + m_characters_low
                                                                                  - 4);
      break;
    case 2u:
      if (v6->i64[0] != **(_QWORD **)&a2.m_length)
        return 0;
      m_characters_low = 2 * LODWORD(a3.m_characters);
LABEL_89:
      result = *(uint64_t *)((char *)&v6->i64[-1] + m_characters_low) == *(_QWORD *)(*(_QWORD *)&a2.m_length
                                                                                  + m_characters_low
                                                                                  - 8);
      break;
    case 3u:
      v35 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)((char *)&v6[-1] + 2 * LODWORD(a3.m_characters)), *(int16x8_t *)(*(_QWORD *)&a2.m_length + 2 * LODWORD(a3.m_characters) - 16)), (int8x16_t)vceqq_s16(*(int16x8_t *)v6, **(int16x8_t **)&a2.m_length));
      v35.i16[0] = vminvq_u16(v35);
      result = v35.i32[0] != 0;
      break;
    default:
      v34 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v6, **(int16x8_t **)&a2.m_length);
      v34.i16[0] = vminvq_u16(v34);
      if (!v34.i32[0])
        return 0;
      if (LODWORD(a3.m_characters) < 8)
        return 1;
      v36 = (uint64_t)a3.m_characters & 7;
      do
      {
        v37 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v6 + 2 * v36), *(int16x8_t *)(*(_QWORD *)&a2.m_length + 2 * v36));
        v37.i16[0] = vminvq_u16(v37);
        result = v37.i32[0] != 0;
        v36 += 8;
        if (v37.i32[0])
          v38 = v36 >= LODWORD(a3.m_characters);
        else
          v38 = 1;
      }
      while (!v38);
      break;
  }
  return result;
}

BOOL WTF::StringImpl::endsWithIgnoringASCIICase(uint64_t a1, uint64_t a2, void *a3, StringView a4)
{
  StringView v5;

  if (!a2)
    return 0;
  a4.m_characters = a3;
  *(_QWORD *)&v5.m_length = a2;
  LODWORD(v5.m_characters) = *(_DWORD *)(a1 + 4);
  HIDWORD(v5.m_characters) = (*(_DWORD *)(a1 + 16) >> 2) & 1;
  return WTF::endsWithIgnoringASCIICase(*(_QWORD *)(a1 + 8), v5, a4);
}

BOOL WTF::endsWithIgnoringASCIICase(_BOOL8 this, StringView a2, StringView a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (LODWORD(a3.m_characters) > LODWORD(a2.m_characters))
    return 0;
  v3 = (LODWORD(a2.m_characters) - LODWORD(a3.m_characters));
  v4 = (uint64_t)a3.m_characters & 0xFF00000000;
  if (((uint64_t)a2.m_characters & 0xFF00000000) != 0)
  {
    v5 = LODWORD(a2.m_characters) - v3;
    if (v4)
    {
      if (LODWORD(a2.m_characters) >= v3)
      {
        if (LODWORD(a3.m_characters))
        {
          v6 = this + v3;
          if (v5 > LODWORD(a3.m_characters))
          {
            v7 = 0;
            v16 = 0;
            while (v5 != v16)
            {
              if (WTF::asciiCaseFoldTable[*(unsigned __int8 *)(v6 + v16)] == WTF::asciiCaseFoldTable[*(unsigned __int8 *)(*(_QWORD *)&a2.m_length + v16)])
              {
                v7 = ++v16 >= (unint64_t)LODWORD(a3.m_characters);
                if (LODWORD(a3.m_characters) != v16)
                  continue;
              }
              return v7;
            }
          }
          else
          {
            v7 = 0;
            v8 = 0;
            while (v5 != v8)
            {
              if (WTF::asciiCaseFoldTable[*(unsigned __int8 *)(v6 + v8)] == WTF::asciiCaseFoldTable[*(unsigned __int8 *)(*(_QWORD *)&a2.m_length + v8)])
              {
                v7 = ++v8 >= (unint64_t)LODWORD(a3.m_characters);
                if (LODWORD(a3.m_characters) != v8)
                  continue;
              }
              return v7;
            }
          }
          goto LABEL_59;
        }
        return 1;
      }
    }
    else if (LODWORD(a2.m_characters) >= v3)
    {
      if (LODWORD(a3.m_characters))
      {
        v12 = this + v3;
        if (v5 > LODWORD(a3.m_characters))
        {
          v7 = 0;
          v18 = 0;
          while (v5 != v18)
          {
            if ((*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v18) | (32
                                                                            * (*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v18)
                                                                             - 65 < 0x1A))) == WTF::asciiCaseFoldTable[*(unsigned __int8 *)(v12 + v18)])
            {
              v7 = ++v18 >= (unint64_t)LODWORD(a3.m_characters);
              if (LODWORD(a3.m_characters) != v18)
                continue;
            }
            return v7;
          }
        }
        else
        {
          v7 = 0;
          v13 = 0;
          while (v5 != v13)
          {
            if ((*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v13) | (32
                                                                            * (*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v13)
                                                                             - 65 < 0x1A))) == WTF::asciiCaseFoldTable[*(unsigned __int8 *)(v12 + v13)])
            {
              v7 = ++v13 >= (unint64_t)LODWORD(a3.m_characters);
              if (LODWORD(a3.m_characters) != v13)
                continue;
            }
            return v7;
          }
        }
        goto LABEL_59;
      }
      return 1;
    }
  }
  else
  {
    v9 = LODWORD(a2.m_characters) - v3;
    if (v4)
    {
      if (LODWORD(a2.m_characters) >= v3)
      {
        if (LODWORD(a3.m_characters))
        {
          v10 = this + 2 * v3;
          if (v9 > LODWORD(a3.m_characters))
          {
            v7 = 0;
            v17 = 0;
            while (v9 != v17)
            {
              if ((*(unsigned __int16 *)(v10 + 2 * v17) | (32
                                                          * (*(unsigned __int16 *)(v10 + 2 * v17) - 65 < 0x1A))) == WTF::asciiCaseFoldTable[*(unsigned __int8 *)(*(_QWORD *)&a2.m_length + v17)])
              {
                v7 = ++v17 >= (unint64_t)LODWORD(a3.m_characters);
                if (LODWORD(a3.m_characters) != v17)
                  continue;
              }
              return v7;
            }
          }
          else
          {
            v7 = 0;
            v11 = 0;
            while (v9 != v11)
            {
              if ((*(unsigned __int16 *)(v10 + 2 * v11) | (32
                                                          * (*(unsigned __int16 *)(v10 + 2 * v11) - 65 < 0x1A))) == WTF::asciiCaseFoldTable[*(unsigned __int8 *)(*(_QWORD *)&a2.m_length + v11)])
              {
                v7 = ++v11 >= (unint64_t)LODWORD(a3.m_characters);
                if (LODWORD(a3.m_characters) != v11)
                  continue;
              }
              return v7;
            }
          }
          goto LABEL_59;
        }
        return 1;
      }
    }
    else if (LODWORD(a2.m_characters) >= v3)
    {
      if (LODWORD(a3.m_characters))
      {
        v14 = this + 2 * v3;
        if (v9 > LODWORD(a3.m_characters))
        {
          v7 = 0;
          v19 = 0;
          while (v9 != v19)
          {
            if ((*(unsigned __int16 *)(v14 + 2 * v19) | (32
                                                        * (*(unsigned __int16 *)(v14 + 2 * v19) - 65 < 0x1A))) == (*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v19) | (32 * (*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v19) - 65 < 0x1A))))
            {
              v7 = ++v19 >= (unint64_t)LODWORD(a3.m_characters);
              if (LODWORD(a3.m_characters) != v19)
                continue;
            }
            return v7;
          }
        }
        else
        {
          v7 = 0;
          v15 = 0;
          while (v9 != v15)
          {
            if ((*(unsigned __int16 *)(v14 + 2 * v15) | (32
                                                        * (*(unsigned __int16 *)(v14 + 2 * v15) - 65 < 0x1A))) == (*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v15) | (32 * (*(unsigned __int16 *)(*(_QWORD *)&a2.m_length + 2 * v15) - 65 < 0x1A))))
            {
              v7 = ++v15 >= (unint64_t)LODWORD(a3.m_characters);
              if (LODWORD(a3.m_characters) != v15)
                continue;
            }
            return v7;
          }
        }
        goto LABEL_59;
      }
      return 1;
    }
  }
LABEL_59:
  __break(1u);
  return this;
}

BOOL WTF::StringImpl::endsWith(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_DWORD *)(a1 + 4);
  if (!v2)
    return 0;
  v3 = (v2 - 1);
  v4 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
    return *(unsigned __int8 *)(v4 + v3) == a2;
  else
    return *(unsigned __int16 *)(v4 + 2 * v3) == a2;
}

uint64_t WTF::StringImpl::endsWith(uint64_t result, int8x16_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int16x8_t *v6;
  uint16x8_t v7;
  unsigned int v8;
  uint16x8_t v9;
  BOOL v10;
  int8x16_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint8x16_t v19;
  uint8x16_t v20;
  unsigned int v21;
  uint8x16_t v22;
  BOOL v23;

  v3 = *(unsigned int *)(result + 4);
  if (a3 > v3)
    return 0;
  v4 = (v3 - a3);
  v5 = *(_QWORD *)(result + 8);
  if ((*(_BYTE *)(result + 16) & 4) != 0)
  {
    if ((_DWORD)a3)
    {
      v11 = (int8x16_t *)(v5 + v4);
      if ((_DWORD)a3 == 1)
      {
        if (a3)
          return v11->u8[0] == a2->u8[0];
        else
          __break(1u);
      }
      else
      {
        switch(31 - __clz(a3 - 1))
        {
          case 0u:
            result = v11->u16[0] == a2->u16[0];
            break;
          case 1u:
            if (v11->u16[0] != a2->u16[0])
              return 0;
            result = *(unsigned __int16 *)((char *)&v11->u16[-1] + a3) == *(unsigned __int16 *)((char *)&a2->u16[-1] + a3);
            break;
          case 2u:
            if (v11->i32[0] != a2->i32[0])
              return 0;
            result = *(__int32 *)((char *)&v11->i32[-1] + a3) == *(__int32 *)((char *)&a2->i32[-1]
                                                                                          + a3);
            break;
          case 3u:
            if (v11->i64[0] != a2->i64[0])
              return 0;
            result = *(uint64_t *)((char *)&v11->i64[-1] + a3) == *(uint64_t *)((char *)&a2->i64[-1]
                                                                                          + a3);
            break;
          case 4u:
            v20 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)&v11[-1] + a3), *(int8x16_t *)((char *)&a2[-1] + a3)), vceqq_s8(*v11, *a2));
            v20.i8[0] = vminvq_u8(v20);
            result = v20.i32[0] != 0;
            break;
          default:
            v19 = (uint8x16_t)vceqq_s8(*v11, *a2);
            v19.i8[0] = vminvq_u8(v19);
            if (!v19.i32[0])
              return 0;
            if (a3 < 0x10)
              return 1;
            v21 = a3 & 0xF;
            do
            {
              v22 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v11 + v21), *(int8x16_t *)((char *)a2 + v21));
              v22.i8[0] = vminvq_u8(v22);
              result = v22.i32[0] != 0;
              v21 += 16;
              if (v22.i32[0])
                v23 = v21 >= a3;
              else
                v23 = 1;
            }
            while (!v23);
            break;
        }
      }
      return result;
    }
    return 1;
  }
  v6 = (int16x8_t *)(v5 + 2 * v4);
  if (a3 < 8)
  {
    if (a3 >= 4)
    {
      v12 = (a2->u32[0] | ((unint64_t)a2->u32[0] << 16)) & 0xFFFF0000FFFFLL;
      v16 = ((v12 | (v12 << 8)) & 0xFF00FF00FF00FFLL) == v6->i64[0];
      v13 = (*(unsigned int *)((char *)a2->u32 + (a3 & 3)) | ((unint64_t)*(unsigned int *)((char *)a2->u32
                                                                                                + (a3 & 3)) << 16)) & 0xFFFF0000FFFFLL;
      v14 = (v13 | (v13 << 8)) & 0xFF00FF00FF00FFLL;
      v15 = *(uint64_t *)((char *)v6->i64 + 2 * (a3 & 3));
      return v16 && v14 == v15;
    }
    if (a3 >= 2)
    {
      v16 = ((a2->u16[0] | (a2->u16[0] << 8)) & 0xFF00FF) == v6->i32[0];
      v17 = *(__int32 *)((char *)v6->i32 + 2 * (a3 & 1));
      return v16
          && ((*(unsigned __int16 *)((char *)a2->u16 + (a3 & 1)) | (*(unsigned __int16 *)((char *)a2->u16 + (a3 & 1)) << 8)) & 0xFF00FF) == v17;
    }
    if ((_DWORD)a3 == 1)
      return v6->u16[0] == a2->u8[0];
    return 1;
  }
  v7 = (uint16x8_t)vceqq_s16(*v6, (int16x8_t)vmovl_u8(*(uint8x8_t *)a2->i8));
  v7.i16[0] = vminvq_u16(v7);
  if (!v7.i32[0])
    return 0;
  v8 = a3 & 7;
  do
  {
    v9 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v6 + 2 * v8), (int16x8_t)vmovl_u8(*(uint8x8_t *)&a2->i8[v8]));
    v9.i16[0] = vminvq_u16(v9);
    result = v9.i32[0] != 0;
    v8 += 8;
    if (v9.i32[0])
      v10 = v8 >= a3;
    else
      v10 = 1;
  }
  while (!v10);
  return result;
}

BOOL WTF::StringImpl::hasInfixEndingAt(WTF::StringImpl *this, StringView a2, unint64_t a3)
{
  uint64_t m_length;
  uint64_t v4;
  unsigned int v5;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  int8x16_t *v10;
  uint16x8_t v11;
  unsigned int v12;
  uint16x8_t v13;
  BOOL v14;
  uint16x8_t v15;
  unsigned int v16;
  uint16x8_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v28;
  int v30;
  uint8x16_t v32;
  unsigned int v33;
  uint8x16_t v34;
  BOOL v35;
  uint8x16_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  unsigned int v39;
  uint16x8_t v40;
  BOOL v41;

  m_length = a2.m_length;
  if (a2.m_length > a3)
    return 0;
  v4 = (a3 - a2.m_length);
  v5 = *((_DWORD *)this + 1);
  if (v5 < v4)
    return 0;
  if (v5 < a2.m_length || v5 < a3)
    return 0;
  v8 = *(_QWORD *)&a2.m_length & 0xFF00000000;
  v9 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 16) & 4) != 0)
  {
    v10 = (int8x16_t *)(v9 + v4);
    if (v8)
    {
      if (!a2.m_length)
        return 1;
      if (a2.m_length == 1)
      {
        return v10->u8[0] == *(unsigned __int8 *)a2.m_characters;
      }
      else
      {
        switch(31 - __clz(a2.m_length - 1))
        {
          case 0u:
            return v10->u16[0] == *(unsigned __int16 *)a2.m_characters;
          case 1u:
            if (v10->u16[0] != *(unsigned __int16 *)a2.m_characters)
              return 0;
            return *(unsigned __int16 *)((char *)&v10->u16[-1] + a2.m_length) == *(unsigned __int16 *)((char *)a2.m_characters + a2.m_length - 2);
          case 2u:
            if (v10->i32[0] != *(_DWORD *)a2.m_characters)
              return 0;
            return *(__int32 *)((char *)&v10->i32[-1] + m_length) == *(_DWORD *)((char *)a2.m_characters + m_length - 4);
          case 3u:
            if (v10->i64[0] != *(_QWORD *)a2.m_characters)
              return 0;
            return *(uint64_t *)((char *)&v10->i64[-1] + m_length) == *(_QWORD *)((char *)a2.m_characters + m_length - 8);
          case 4u:
            v36 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)&v10[-1] + a2.m_length), *(int8x16_t *)((char *)a2.m_characters + a2.m_length - 16)), vceqq_s8(*v10, *(int8x16_t *)a2.m_characters));
            v36.i8[0] = vminvq_u8(v36);
            return v36.i32[0] != 0;
          default:
            v32 = (uint8x16_t)vceqq_s8(*v10, *(int8x16_t *)a2.m_characters);
            v32.i8[0] = vminvq_u8(v32);
            if (!v32.i32[0])
              return 0;
            if (a2.m_length < 0x10)
              return 1;
            v33 = a2.m_length & 0xF;
            do
            {
              v34 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v10 + v33), *(int8x16_t *)((char *)a2.m_characters + v33));
              v34.i8[0] = vminvq_u8(v34);
              result = v34.i32[0] != 0;
              v33 += 16;
              if (v34.i32[0])
                v35 = v33 >= a2.m_length;
              else
                v35 = 1;
            }
            while (!v35);
            break;
        }
      }
    }
    else
    {
      if (a2.m_length < 8)
      {
        if (a2.m_length >= 4)
        {
          v24 = (v10->u32[0] | ((unint64_t)v10->u32[0] << 16)) & 0xFFFF0000FFFFLL;
          v25 = (*(unsigned int *)((char *)v10->u32 + (a2.m_length & 3)) | ((unint64_t)*(unsigned int *)((char *)v10->u32 + (a2.m_length & 3)) << 16)) & 0xFFFF0000FFFFLL;
          v26 = (v25 | (v25 << 8)) & 0xFF00FF00FF00FFLL;
          return ((v24 | (v24 << 8)) & 0xFF00FF00FF00FFLL) == *(_QWORD *)a2.m_characters
              && v26 == *(_QWORD *)((char *)a2.m_characters + 2 * (a2.m_length & 3));
        }
        if (a2.m_length >= 2)
        {
          v23 = ((v10->u16[0] | (v10->u16[0] << 8)) & 0xFF00FF) == *(_DWORD *)a2.m_characters;
          v30 = (*(unsigned __int16 *)((char *)v10->u16 + (a2.m_length & 1)) | (*(unsigned __int16 *)((char *)v10->u16 + (a2.m_length & 1)) << 8)) & 0xFF00FF;
          return v23 && v30 == *(_DWORD *)((char *)a2.m_characters + 2 * (a2.m_length & 1));
        }
        if (a2.m_length == 1)
          return *(_WORD *)a2.m_characters == v10->u8[0];
        return 1;
      }
      v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)a2.m_characters, (int16x8_t)vmovl_u8(*(uint8x8_t *)v10->i8));
      v15.i16[0] = vminvq_u16(v15);
      if (!v15.i32[0])
        return 0;
      v16 = a2.m_length & 7;
      do
      {
        v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)a2.m_characters + 2 * v16), (int16x8_t)vmovl_u8(*(uint8x8_t *)&v10->i8[v16]));
        v17.i16[0] = vminvq_u16(v17);
        result = v17.i32[0] != 0;
        v16 += 8;
        if (v17.i32[0])
          v18 = v16 >= a2.m_length;
        else
          v18 = 1;
      }
      while (!v18);
    }
  }
  else
  {
    v10 = (int8x16_t *)(v9 + 2 * v4);
    if (v8)
    {
      if (a2.m_length >= 8)
      {
        v11 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v10, (int16x8_t)vmovl_u8(*(uint8x8_t *)a2.m_characters));
        v11.i16[0] = vminvq_u16(v11);
        if (v11.i32[0])
        {
          v12 = a2.m_length & 7;
          do
          {
            v13 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v10 + 2 * v12), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a2.m_characters + v12)));
            v13.i16[0] = vminvq_u16(v13);
            result = v13.i32[0] != 0;
            v12 += 8;
            if (v13.i32[0])
              v14 = v12 >= a2.m_length;
            else
              v14 = 1;
          }
          while (!v14);
          return result;
        }
        return 0;
      }
      if (a2.m_length >= 4)
      {
        v19 = (*(unsigned int *)a2.m_characters | ((unint64_t)*(unsigned int *)a2.m_characters << 16)) & 0xFFFF0000FFFFLL;
        v23 = ((v19 | (v19 << 8)) & 0xFF00FF00FF00FFLL) == v10->i64[0];
        v20 = (*(unsigned int *)((char *)a2.m_characters + (a2.m_length & 3)) | ((unint64_t)*(unsigned int *)((char *)a2.m_characters + (a2.m_length & 3)) << 16)) & 0xFFFF0000FFFFLL;
        v21 = (v20 | (v20 << 8)) & 0xFF00FF00FF00FFLL;
        v22 = *(uint64_t *)((char *)v10->i64 + 2 * (a2.m_length & 3));
        return v23 && v21 == v22;
      }
      if (a2.m_length >= 2)
      {
        v23 = ((*(unsigned __int16 *)a2.m_characters | (*(unsigned __int16 *)a2.m_characters << 8)) & 0xFF00FF) == v10->i32[0];
        v28 = *(__int32 *)((char *)v10->i32 + 2 * (a2.m_length & 1));
        return v23
            && ((*(unsigned __int16 *)((char *)a2.m_characters + (a2.m_length & 1)) | (*(unsigned __int16 *)((char *)a2.m_characters + (a2.m_length & 1)) << 8)) & 0xFF00FF) == v28;
      }
      if (a2.m_length == 1)
        return v10->u16[0] == *(unsigned __int8 *)a2.m_characters;
      return 1;
    }
    if (!a2.m_length)
      return 1;
    if (a2.m_length == 1)
    {
      return v10->u16[0] == *(unsigned __int16 *)a2.m_characters;
    }
    else
    {
      switch(31 - __clz(a2.m_length - 1))
      {
        case 0u:
          result = v10->i32[0] == *(_DWORD *)a2.m_characters;
          break;
        case 1u:
          if (v10->i32[0] != *(_DWORD *)a2.m_characters)
            return 0;
          m_length = 2 * a2.m_length;
          return *(__int32 *)((char *)&v10->i32[-1] + m_length) == *(_DWORD *)((char *)a2.m_characters + m_length - 4);
        case 2u:
          if (v10->i64[0] != *(_QWORD *)a2.m_characters)
            return 0;
          m_length = 2 * a2.m_length;
          return *(uint64_t *)((char *)&v10->i64[-1] + m_length) == *(_QWORD *)((char *)a2.m_characters + m_length - 8);
        case 3u:
          v38 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)((char *)&v10[-1] + 2 * a2.m_length), *(int16x8_t *)((char *)a2.m_characters + 2 * a2.m_length - 16)), (int8x16_t)vceqq_s16(*(int16x8_t *)v10, *(int16x8_t *)a2.m_characters));
          v38.i16[0] = vminvq_u16(v38);
          result = v38.i32[0] != 0;
          break;
        default:
          v37 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v10, *(int16x8_t *)a2.m_characters);
          v37.i16[0] = vminvq_u16(v37);
          if (!v37.i32[0])
            return 0;
          if (a2.m_length < 8)
            return 1;
          v39 = a2.m_length & 7;
          do
          {
            v40 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v10 + 2 * v39), *(int16x8_t *)((char *)a2.m_characters + 2 * v39));
            v40.i16[0] = vminvq_u16(v40);
            result = v40.i32[0] != 0;
            v39 += 8;
            if (v40.i32[0])
              v41 = v39 >= a2.m_length;
            else
              v41 = 1;
          }
          while (!v41);
          break;
      }
    }
  }
  return result;
}

uint64_t WTF::StringImpl::replace@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  uint8x8_t *v15;
  unsigned __int8 *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  int8x16_t *v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  size_t v28;
  size_t v29;
  int8x16_t v30;
  int8x16_t v31;
  size_t v32;
  uint64_t v33;
  int8x16_t *v34;
  int8x16_t v35;
  uint8x8_t *v36;
  _BYTE *v37;
  uint64_t v38;
  size_t v39;
  size_t i;
  char v41;
  int v42;
  uint64_t v43;
  int16x8_t *v44;
  int16x8_t v45;
  int8x16_t v46;
  int8x16_t *v47;
  unint64_t v48;
  int8x16_t v49;
  uint64_t v50;
  _WORD *v51;
  unsigned __int16 *v52;
  __int16 v53;
  int v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  int16x8_t v57;
  int8x16_t v58;
  uint64_t v59;
  int8x16_t *v60;
  uint8x8_t *v61;
  uint64_t v62;
  uint8x16_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int8x16_t *v68;
  uint8x8_t *v69;
  uint64_t v70;
  uint8x8_t v71;
  int16x8_t v72;
  __int16 v73;
  int v74;

  if (a2 == a3)
    goto LABEL_2;
  if ((*(_BYTE *)(result + 16) & 4) == 0)
  {
    v7 = *(unsigned int *)(result + 4);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = 0;
      v10 = *(_WORD **)(result + 8);
      v11 = *(unsigned int *)(result + 4);
      while ((unsigned __int16)v10[v9] != a2)
      {
        ++v9;
        --v11;
        v8 -= 2;
        if (v7 == v9)
          goto LABEL_2;
      }
      if (v7 <= 0x7FFFFFEF)
      {
        v18 = WTF::fastCompactMalloc((WTF *)(2 * v7 + 20));
        result = v18 + 20;
        *(_DWORD *)v18 = 2;
        *(_DWORD *)(v18 + 4) = v7;
        *(_QWORD *)(v18 + 8) = v18 + 20;
        *(_DWORD *)(v18 + 16) = 0;
        *a4 = v18;
        if (v7 >= v9)
        {
          if ((_DWORD)v9)
          {
            if ((_DWORD)v9 == 1)
              *(_WORD *)result = *v10;
            else
              result = (uint64_t)memcpy((void *)result, v10, -v8);
          }
          if ((_DWORD)v7 != (_DWORD)v9)
          {
            v43 = v7 - v9;
            if ((unint64_t)(v7 - v9) < 0x10)
              goto LABEL_57;
            if ((unint64_t)(v18 - (_QWORD)v10 + 20) < 0x20)
              goto LABEL_57;
            v44 = (int16x8_t *)&v10[v8 / 0xFFFFFFFFFFFFFFFELL + 8];
            v45 = vdupq_n_s16(a2);
            v9 += v11 & 0xFFFFFFFFFFFFFFF0;
            v46 = (int8x16_t)vdupq_n_s16(a3);
            v47 = (int8x16_t *)(v18 - v8 + 36);
            v48 = v43 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v49 = vbslq_s8((int8x16_t)vceqq_s16(*v44, v45), v46, *(int8x16_t *)v44);
              v47[-1] = vbslq_s8((int8x16_t)vceqq_s16(v44[-1], v45), v46, (int8x16_t)v44[-1]);
              *v47 = v49;
              v44 += 2;
              v47 += 2;
              v48 -= 16;
            }
            while (v48);
            if (v43 != (v43 & 0xFFFFFFFFFFFFFFF0))
            {
LABEL_57:
              v50 = v7 - v9;
              v51 = (_WORD *)(2 * v9 + v18 + 20);
              v52 = &v10[v9];
              do
              {
                v54 = *v52++;
                v53 = v54;
                if (v54 == a2)
                  v53 = a3;
                *v51++ = v53;
                --v50;
              }
              while (v50);
            }
          }
          return result;
        }
        goto LABEL_83;
      }
      goto LABEL_84;
    }
LABEL_2:
    *(_DWORD *)result += 2;
    *a4 = result;
    return result;
  }
  if (a2 > 0xFF)
    goto LABEL_2;
  v12 = *(unsigned int *)(result + 4);
  if (!(_DWORD)v12)
    goto LABEL_2;
  v13 = 0;
  v14 = 0;
  v15 = *(uint8x8_t **)(result + 8);
  v16 = (unsigned __int8 *)v15;
  v17 = v12 - 1;
  while (v15->u8[v14] != a2)
  {
    ++v14;
    --v17;
    --v13;
    if (v12 == v14)
      goto LABEL_2;
  }
  if (a3 <= 0xFF)
  {
    if ((v12 & 0x80000000) != 0)
    {
      __break(0xC471u);
    }
    else
    {
      v19 = WTF::fastCompactMalloc((WTF *)(v12 + 20));
      *(_DWORD *)v19 = 2;
      *(_DWORD *)(v19 + 4) = v12;
      *(_QWORD *)(v19 + 8) = v19 + 20;
      *(_DWORD *)(v19 + 16) = 4;
      *a4 = v19;
      result = (uint64_t)memcpy((void *)(v19 + 20), v15, v14);
      if ((_DWORD)v12 == (_DWORD)v14)
        return result;
      v20 = ~v14 + v12;
      v21 = v12 - v14;
      if (v12 < v14)
        v21 = 0;
      if (v20 >= v21)
        v20 = v21;
      v22 = v20 + 1;
      v23 = v14;
      if (v22 >= 0x11)
      {
        v23 = v14;
        if ((unint64_t)(v19 - (_QWORD)v15 + 20) >= 0x10)
        {
          v24 = (int8x16_t *)((char *)v15 + v14);
          v25 = ~v14 + v12;
          v26 = v22 & 0xF;
          v27 = 16;
          if (v26)
            v27 = v26;
          if (v14 <= v12)
            v28 = v12;
          else
            v28 = v14;
          v29 = v28 + v13;
          if (v17 < v28 + v13)
            v29 = v17;
          v23 = v29 - v27 + v14 + 1;
          v30 = vdupq_n_s8(a2);
          v31 = vdupq_n_s8(a3);
          v32 = v28 - v14;
          if (v25 >= v32)
            v25 = v32;
          v33 = v25 - v27 + 1;
          v34 = (int8x16_t *)(v19 + v14 + 20);
          do
          {
            v35 = *v24++;
            *v34++ = vbslq_s8(vceqq_s8(v35, v30), v31, v35);
            v33 -= 16;
          }
          while (v33);
        }
      }
      v36 = (uint8x8_t *)((char *)v15 + v23);
      v37 = (_BYTE *)(v23 + v19 + 20);
      v38 = v12 - v23;
      if (v14 <= v12)
        v39 = v12;
      else
        v39 = v14;
      for (i = v39 - v23; i; --i)
      {
        v42 = v36->u8[0];
        v36 = (uint8x8_t *)((char *)v36 + 1);
        v41 = v42;
        if (v42 == a2)
          v41 = a3;
        *v37++ = v41;
        if (!--v38)
          return result;
      }
    }
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  if (v12 > 0x7FFFFFEF)
  {
LABEL_84:
    __break(0xC471u);
    JUMPOUT(0x197B0E604);
  }
  result = WTF::fastCompactMalloc((WTF *)(2 * v12 + 20));
  v55 = (unsigned __int8 *)(result + 20);
  *(_DWORD *)result = 2;
  *(_DWORD *)(result + 4) = v12;
  *(_QWORD *)(result + 8) = result + 20;
  *(_DWORD *)(result + 16) = 0;
  *a4 = result;
  v56 = (unsigned __int8 *)v15 + v12;
  if (v12 >= 8 && (v55 >= v56 || (unint64_t)v15 >= result + 2 * v12 + 20))
  {
    v57 = vdupq_n_s16(a2);
    v58 = (int8x16_t)vdupq_n_s16(a3);
    if (v12 < 0x20)
    {
      v59 = 0;
LABEL_72:
      v16 = (unsigned __int8 *)v15 + (v12 & 0xFFFFFFF8);
      v55 += 2 * (v12 & 0xFFFFFFF8);
      v68 = (int8x16_t *)(result + 2 * v59 + 20);
      v69 = (uint8x8_t *)((char *)v15 + v59);
      v70 = v59 - (v12 & 0xFFFFFFF8);
      do
      {
        v71 = *v69++;
        v72 = (int16x8_t)vmovl_u8(v71);
        *v68++ = vbslq_s8((int8x16_t)vceqq_s16(v57, v72), v58, (int8x16_t)v72);
        v70 += 8;
      }
      while (v70);
      if ((v12 & 0x7FFFFFF8) == v12)
        return result;
      goto LABEL_77;
    }
    v59 = v12 & 0x7FFFFFE0;
    v60 = (int8x16_t *)(result + 52);
    v61 = v15 + 2;
    v62 = v12 & 0xFFFFFFE0;
    do
    {
      v63 = *(uint8x16_t *)v61[-2].i8;
      v64 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v63.i8);
      v65 = (int16x8_t)vmovl_high_u8(v63);
      v66 = (int16x8_t)vmovl_u8(*v61);
      v67 = (int16x8_t)vmovl_high_u8(*(uint8x16_t *)v61->i8);
      v60[-2] = vbslq_s8((int8x16_t)vceqq_s16(v57, v64), v58, (int8x16_t)v64);
      v60[-1] = vbslq_s8((int8x16_t)vceqq_s16(v57, v65), v58, (int8x16_t)v65);
      *v60 = vbslq_s8((int8x16_t)vceqq_s16(v57, v66), v58, (int8x16_t)v66);
      v60[1] = vbslq_s8((int8x16_t)vceqq_s16(v57, v67), v58, (int8x16_t)v67);
      v60 += 4;
      v61 += 4;
      v62 -= 32;
    }
    while (v62);
    if (v59 == v12)
      return result;
    if ((v12 & 0x18) != 0)
      goto LABEL_72;
    v55 += 2 * v59;
    v16 = (unsigned __int8 *)v15 + v59;
  }
  do
  {
LABEL_77:
    v74 = *v16++;
    v73 = v74;
    if (v74 == a2)
      v73 = a3;
    *(_WORD *)v55 = v73;
    v55 += 2;
  }
  while (v16 != v56);
  return result;
}

int *WTF::StringImpl::replace@<X0>(int *result@<X0>, size_t a2@<X1>, size_t a3@<X2>, int8x16_t *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  int *v6;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  int v13;
  int8x16_t *v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  _WORD *v19;
  int v20;
  int8x16_t *v21;
  _WORD *v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  _BYTE *v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  _WORD *v38;
  int8x16_t *v39;
  __int16 v40;
  uint16x8_t *v41;
  uint16x8_t *v42;
  uint16x8_t *v43;
  __int128 v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  char *v48;
  char *i8;
  char *v50;
  unint64_t v51;
  uint16x8_t *v52;
  int8x16_t *v53;
  __int16 v54;
  _BYTE *v55;
  uint64_t v56;
  size_t v57;
  _WORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint8x8_t *v61;
  uint16x8_t *v62;
  unint64_t v63;
  uint8x16_t v64;
  uint16x8_t v65;
  uint16x8_t v66;
  uint8x8_t *v67;
  uint16x8_t *v68;
  unint64_t v69;
  uint8x8_t v70;
  uint8x8_t *v71;
  uint16x8_t *v72;
  unint64_t v73;
  uint8x16_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  uint8x8_t *v77;
  uint16x8_t *v78;
  unint64_t v79;
  uint8x8_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int *v85;
  int *v86;
  __int128 v87;
  int8x16_t v88;
  __int128 v89;
  __int128 v90;
  char *v91;
  char *v92;
  char *v93;
  unint64_t v94;
  int *v95;
  unsigned __int8 *v96;
  __int16 v97;
  uint64_t v98;
  unint64_t v99;
  uint8x8_t *v100;
  uint16x8_t *v101;
  unint64_t v102;
  uint8x16_t v103;
  uint16x8_t v104;
  uint16x8_t v105;
  uint8x8_t *v106;
  uint16x8_t *v107;
  unint64_t v108;
  uint8x8_t v109;
  int8x16x2_t v110;
  int8x16x2_t v111;
  int8x16x2_t v112;
  int8x16x2_t v113;
  int8x16x2_t v114;
  int8x16x2_t v115;
  int8x16x2_t v116;
  int8x16x2_t v117;
  int8x16x2_t v118;

  v6 = result;
  v8 = result[1];
  if (v8 >= a2)
    v9 = a2;
  else
    v9 = result[1];
  if (v8 - v9 >= a3)
    v10 = a3;
  else
    v10 = v8 - v9;
  v11 = a5;
  if (!(v10 | a5))
  {
    *result += 2;
    *a6 = result;
    return result;
  }
  v12 = v8 - v10;
  if (v8 - v10 >= 0x7FFFFFFF - (unint64_t)a5)
    goto LABEL_121;
  v13 = a5;
  v14 = a4;
  v15 = BYTE4(a5);
  v16 = result[4];
  if ((v16 & 4) == 0 || a4 && !BYTE4(a5))
  {
    v17 = v12 + a5;
    if (v17)
    {
      if (v17 >= 0x7FFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x197B0ECFCLL);
      }
      v18 = WTF::fastCompactMalloc((WTF *)(2 * v17 + 20));
      v19 = (_WORD *)(v18 + 20);
      *(_DWORD *)v18 = 2;
      *(_DWORD *)(v18 + 4) = v17;
      *(_QWORD *)(v18 + 8) = v18 + 20;
      *(_DWORD *)(v18 + 16) = 0;
      v20 = v6[4];
      *a6 = v18;
      v21 = (int8x16_t *)*((_QWORD *)v6 + 1);
      if ((v20 & 4) == 0)
        goto LABEL_15;
    }
    else
    {
      v19 = 0;
      WTF::StringImpl::s_emptyAtomString += 2;
      *a6 = &WTF::StringImpl::s_emptyAtomString;
      v21 = (int8x16_t *)*((_QWORD *)result + 1);
      if ((v16 & 4) == 0)
      {
LABEL_15:
        if ((_DWORD)v9)
        {
          if ((_DWORD)v9 == 1)
            *v19 = v21->i16[0];
          else
            memcpy(v19, v21, 2 * v9);
        }
LABEL_43:
        if (!v14)
          goto LABEL_89;
        v41 = (uint16x8_t *)&v19[v9];
        if (v15)
        {
          v42 = (uint16x8_t *)((char *)v41 + 2 * v11);
          if (v11 >= 0x40)
          {
            v43 = (uint16x8_t *)((char *)v41 + 2 * (v13 & 0xFFFFFFC0));
            v44 = 0uLL;
            do
            {
              v111.val[0] = *v14;
              v45 = v14[1];
              v114.val[0] = v14[2];
              v46 = v14[3];
              v14 += 4;
              v47 = v46;
              v114.val[1] = 0uLL;
              v117.val[0] = v45;
              v111.val[1] = 0uLL;
              v48 = (char *)v41;
              vst2q_s8(v48, v111);
              v48 += 32;
              v117.val[1] = 0uLL;
              vst2q_s8(v48, v117);
              i8 = v41[4].i8;
              vst2q_s8(i8, v114);
              v50 = v41[6].i8;
              vst2q_s8(v50, *(int8x16x2_t *)(&v44 - 1));
              v41 += 8;
            }
            while (v41 != v43);
            v41 = v43;
          }
          if (v41 != v42)
          {
            v51 = (char *)&v19[v9 + v11] - (char *)v41 - 2;
            if (v51 < 0xE
              || v41 < (uint16x8_t *)&v14->i8[(v51 >> 1) + 1]
              && v14 < (int8x16_t *)((char *)&v41->i16[1] + (v51 & 0xFFFFFFFFFFFFFFFELL)))
            {
              v52 = v41;
              v53 = v14;
              goto LABEL_54;
            }
            v59 = (v51 >> 1) + 1;
            if (v51 >= 0x3E)
            {
              v60 = v59 & 0xFFFFFFFFFFFFFFE0;
              v71 = (uint8x8_t *)&v14[1];
              v72 = v41 + 2;
              v73 = v59 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v74 = *(uint8x16_t *)v71[-2].i8;
                v75 = vmovl_u8(*v71);
                v76 = vmovl_high_u8(*(uint8x16_t *)v71->i8);
                v72[-2] = vmovl_u8(*(uint8x8_t *)v74.i8);
                v72[-1] = vmovl_high_u8(v74);
                *v72 = v75;
                v72[1] = v76;
                v72 += 4;
                v71 += 4;
                v73 -= 32;
              }
              while (v73);
              if (v59 == v60)
                goto LABEL_89;
              if ((v59 & 0x18) == 0)
              {
                v53 = (int8x16_t *)((char *)v14 + v60);
                v52 = (uint16x8_t *)((char *)v41 + 2 * v60);
                do
                {
LABEL_54:
                  v54 = v53->u8[0];
                  v53 = (int8x16_t *)((char *)v53 + 1);
                  v52->i16[0] = v54;
                  v52 = (uint16x8_t *)((char *)v52 + 2);
                }
                while (v52 != v42);
                goto LABEL_89;
              }
            }
            else
            {
              v60 = 0;
            }
            v52 = (uint16x8_t *)((char *)v41 + 2 * (v59 & 0xFFFFFFFFFFFFFFF8));
            v53 = (int8x16_t *)((char *)v14 + (v59 & 0xFFFFFFFFFFFFFFF8));
            v77 = (uint8x8_t *)&v14->i8[v60];
            v78 = (uint16x8_t *)((char *)v41 + 2 * v60);
            v79 = v60 - (v59 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v80 = *v77++;
              *v78++ = vmovl_u8(v80);
              v79 += 8;
            }
            while (v79);
            if (v59 != (v59 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_54;
          }
        }
        else if (v13)
        {
          if (v13 == 1)
            v41->i16[0] = v14->i16[0];
          else
            memcpy(v41, v14, 2 * v11);
        }
LABEL_89:
        result = (int *)&v19[v9 + v11];
        v81 = *((_QWORD *)v6 + 1);
        v82 = v6[1];
        v83 = v82 - (v10 + v9);
        if ((v6[4] & 4) == 0)
        {
          if (v83)
          {
            v58 = (_WORD *)(v81 + 2 * v9 + 2 * v10);
            if (v83 == 1)
            {
              *(_WORD *)result = *v58;
              return result;
            }
            v57 = 2 * v83;
            return (int *)memcpy(result, v58, v57);
          }
          return result;
        }
        v84 = v81 + v9 + v10;
        v85 = (int *)((char *)result + 2 * v83);
        if (v83 >= 0x40)
        {
          v86 = (int *)((char *)result + 2 * (v83 & 0x7FFFFFFFFFFFFFC0));
          v87 = 0uLL;
          do
          {
            v112.val[0] = *(int8x16_t *)v84;
            v88 = *(int8x16_t *)(v84 + 16);
            v115.val[0] = *(int8x16_t *)(v84 + 32);
            v89 = *(_OWORD *)(v84 + 48);
            v84 += 64;
            v90 = v89;
            v115.val[1] = 0uLL;
            v118.val[0] = v88;
            v112.val[1] = 0uLL;
            v91 = (char *)result;
            vst2q_s8(v91, v112);
            v91 += 32;
            v118.val[1] = 0uLL;
            vst2q_s8(v91, v118);
            v92 = (char *)(result + 16);
            vst2q_s8(v92, v115);
            v93 = (char *)(result + 24);
            vst2q_s8(v93, *(int8x16x2_t *)(&v87 - 1));
            result += 32;
          }
          while (result != v86);
          result = v86;
        }
        if (result == v85)
          return result;
        v94 = (char *)&v19[v11 + v82] - ((char *)result + 2 * v10) - 2;
        if (v94 < 0xE
          || (unint64_t)result < v84 + (v94 >> 1) + 1
          && v84 < (unint64_t)result + (v94 & 0xFFFFFFFFFFFFFFFELL) + 2)
        {
          v95 = result;
          v96 = (unsigned __int8 *)v84;
          goto LABEL_102;
        }
        v98 = (v94 >> 1) + 1;
        if (v94 >= 0x3E)
        {
          v99 = v98 & 0xFFFFFFFFFFFFFFE0;
          v100 = (uint8x8_t *)(v84 + 16);
          v101 = (uint16x8_t *)(result + 8);
          v102 = v98 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v103 = *(uint8x16_t *)v100[-2].i8;
            v104 = vmovl_u8(*v100);
            v105 = vmovl_high_u8(*(uint8x16_t *)v100->i8);
            v101[-2] = vmovl_u8(*(uint8x8_t *)v103.i8);
            v101[-1] = vmovl_high_u8(v103);
            *v101 = v104;
            v101[1] = v105;
            v101 += 4;
            v100 += 4;
            v102 -= 32;
          }
          while (v102);
          if (v98 == v99)
            return result;
          if ((v98 & 0x18) == 0)
          {
            v96 = (unsigned __int8 *)(v84 + v99);
            v95 = (int *)((char *)result + 2 * v99);
            goto LABEL_102;
          }
        }
        else
        {
          v99 = 0;
        }
        v95 = (int *)((char *)result + 2 * (v98 & 0xFFFFFFFFFFFFFFF8));
        v96 = (unsigned __int8 *)(v84 + (v98 & 0xFFFFFFFFFFFFFFF8));
        v106 = (uint8x8_t *)(v84 + v99);
        v107 = (uint16x8_t *)((char *)result + 2 * v99);
        v108 = v99 - (v98 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v109 = *v106++;
          *v107++ = vmovl_u8(v109);
          v108 += 8;
        }
        while (v108);
        if (v98 == (v98 & 0xFFFFFFFFFFFFFFF8))
          return result;
        do
        {
LABEL_102:
          v97 = *v96++;
          *(_WORD *)v95 = v97;
          v95 = (int *)((char *)v95 + 2);
        }
        while (v95 != v85);
        return result;
      }
    }
    v22 = &v19[v9];
    if (v9 < 0x40)
    {
      v23 = (unint64_t)v19;
      if (v19 == v22)
        goto LABEL_43;
    }
    else
    {
      v23 = (unint64_t)&v19[v9 & 0xFFFFFFC0];
      v24 = 0uLL;
      v25 = (char *)v19;
      do
      {
        v110.val[0] = *v21;
        v26 = v21[1];
        v113.val[0] = v21[2];
        v27 = v21[3];
        v21 += 4;
        v28 = v27;
        v113.val[1] = 0uLL;
        v116.val[0] = v26;
        v110.val[1] = 0uLL;
        v29 = v25;
        vst2q_s8(v29, v110);
        v29 += 32;
        v116.val[1] = 0uLL;
        vst2q_s8(v29, v116);
        v30 = v25 + 64;
        vst2q_s8(v30, v113);
        v31 = v25 + 96;
        vst2q_s8(v31, *(int8x16x2_t *)(&v24 - 1));
        v25 += 128;
      }
      while (v25 != (char *)v23);
      if ((_WORD *)v23 == v22)
        goto LABEL_43;
    }
    v34 = (unint64_t)&v19[v9 - 1] - v23;
    if (v34 < 0xE
      || (v23 < (unint64_t)v21->u64 + (v34 >> 1) + 1
        ? (v35 = (unint64_t)v21 >= (v34 & 0xFFFFFFFFFFFFFFFELL) + v23 + 2)
        : (v35 = 1),
          !v35))
    {
      v38 = (_WORD *)v23;
      v39 = v21;
      goto LABEL_40;
    }
    v36 = (v34 >> 1) + 1;
    if (v34 >= 0x3E)
    {
      v37 = v36 & 0xFFFFFFFFFFFFFFE0;
      v61 = (uint8x8_t *)&v21[1];
      v62 = (uint16x8_t *)(v23 + 32);
      v63 = v36 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v64 = *(uint8x16_t *)v61[-2].i8;
        v65 = vmovl_u8(*v61);
        v66 = vmovl_high_u8(*(uint8x16_t *)v61->i8);
        v62[-2] = vmovl_u8(*(uint8x8_t *)v64.i8);
        v62[-1] = vmovl_high_u8(v64);
        *v62 = v65;
        v62[1] = v66;
        v62 += 4;
        v61 += 4;
        v63 -= 32;
      }
      while (v63);
      if (v36 == v37)
        goto LABEL_43;
      if ((v36 & 0x18) == 0)
      {
        v39 = (int8x16_t *)((char *)v21 + v37);
        v38 = (_WORD *)(v23 + 2 * v37);
        goto LABEL_40;
      }
    }
    else
    {
      v37 = 0;
    }
    v38 = (_WORD *)(v23 + 2 * (v36 & 0xFFFFFFFFFFFFFFF8));
    v39 = (int8x16_t *)((char *)v21 + (v36 & 0xFFFFFFFFFFFFFFF8));
    v67 = (uint8x8_t *)&v21->i8[v37];
    v68 = (uint16x8_t *)(v23 + 2 * v37);
    v69 = v37 - (v36 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v70 = *v67++;
      *v68++ = vmovl_u8(v70);
      v69 += 8;
    }
    while (v69);
    if (v36 == (v36 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_43;
    do
    {
LABEL_40:
      v40 = v39->u8[0];
      v39 = (int8x16_t *)((char *)v39 + 1);
      *v38++ = v40;
    }
    while (v38 != v22);
    goto LABEL_43;
  }
  v32 = v12 + a5;
  if (!v32)
  {
    v33 = 0;
    result = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    *a6 = &WTF::StringImpl::s_emptyAtomString;
    if (!(_DWORD)v9)
      goto LABEL_63;
    goto LABEL_60;
  }
  if (v32 >> 31)
  {
LABEL_121:
    __break(0xC471u);
    JUMPOUT(0x197B0ECF4);
  }
  result = (int *)WTF::fastCompactMalloc((WTF *)(v32 + 20));
  v33 = result + 5;
  *result = 2;
  result[1] = v32;
  *((_QWORD *)result + 1) = result + 5;
  result[4] = 4;
  *a6 = result;
  if (!(_DWORD)v9)
    goto LABEL_63;
LABEL_60:
  v55 = (_BYTE *)*((_QWORD *)v6 + 1);
  if ((_DWORD)v9 == 1)
    *v33 = *v55;
  else
    result = (int *)memcpy(v33, v55, v9);
LABEL_63:
  if (v14 && v13)
  {
    result = (int *)&v33[v9];
    if (v13 == 1)
      *(_BYTE *)result = v14->i8[0];
    else
      result = (int *)memcpy(result, v14, v11);
  }
  v56 = v6[1];
  v57 = v56 - (v10 + v9);
  if (v56 != v10 + v9)
  {
    result = (int *)&v33[v9 + v11];
    v58 = (_WORD *)(*((_QWORD *)v6 + 1) + v9 + v10);
    if (v57 == 1)
    {
      *(_BYTE *)result = *(_BYTE *)v58;
      return result;
    }
    return (int *)memcpy(result, v58, v57);
  }
  return result;
}

char *WTF::StringImpl::replace@<X0>(char *result@<X0>, unsigned int a2@<W1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>, double a6@<D0>, double a7@<D1>, float a8@<S2>)
{
  uint64_t v8;
  int v10;
  unint64_t v12;
  double v13;
  double v14;
  float v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int *v22;
  int *v23;
  int *v24;
  int *v25;
  double v26;
  double v27;
  float v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  _WORD *v33;
  _WORD *v34;
  char *v35;
  _WORD *v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  __int128 v40;
  char *v41;
  char *v42;
  char *v43;
  int8x16_t v44;
  char *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  int8x16_t v50;
  __int128 v51;
  int8x16_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  __int16 v60;
  char *v61;
  _WORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint8x8_t *v65;
  uint16x8_t *v66;
  unint64_t v67;
  uint8x16_t v68;
  uint16x8_t v69;
  uint8x8_t *v70;
  uint16x8_t *v71;
  unint64_t v72;
  uint8x8_t v73;
  uint64_t v74;
  _WORD *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _WORD *v79;
  unint64_t v80;
  __int128 v81;
  int8x16_t v82;
  __int128 v83;
  __int128 v84;
  char *v85;
  char *v86;
  char *v87;
  unint64_t v88;
  _WORD *v89;
  unsigned __int8 *v90;
  __int16 v91;
  uint64_t v92;
  unint64_t v93;
  uint8x8_t *v94;
  uint16x8_t *v95;
  unint64_t v96;
  uint8x16_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  uint8x8_t *v100;
  uint16x8_t *v101;
  unint64_t v102;
  uint8x8_t v103;
  __int128 v104;
  int8x16_t v105;
  int8x16x2_t v107;
  int8x16x2_t v108;
  int8x16x2_t v109;
  int8x16x2_t v110;

  v8 = (uint64_t)result;
  if (!a3)
    goto LABEL_14;
  v10 = a4;
  v12 = a4;
  if ((a4 & 0xFF00000000) != 0)
    return WTF::StringImpl::replace((uint64_t)result, a2, a3, a4, a5, a6, a7, a8);
  result = (char *)WTF::StringImpl::find((uint64_t)result, a2, 0, a6, a7, a8);
  if (result == (char *)-1)
    goto LABEL_14;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  do
  {
    ++v19;
    result = (char *)WTF::StringImpl::find(v8, a2, (unint64_t)(result + 1), v13, v14, v15);
    v18 += 1 - v12;
    v17 += 1 - v10;
    v16 += v12;
  }
  while (result != (char *)-1);
  if (!v19)
  {
LABEL_14:
    *(_DWORD *)v8 += 2;
    *a5 = v8;
    return result;
  }
  if (v12 && v19 > 0x7FFFFFFF / v12)
  {
    __break(0xC471u);
    JUMPOUT(0x197B0F3BCLL);
  }
  v20 = *(unsigned int *)(v8 + 4);
  if (v20 - v19 >= 0x7FFFFFFF - v16)
    goto LABEL_94;
  v21 = v20 - v18;
  if ((*(_BYTE *)(v8 + 16) & 4) != 0)
  {
    if (v20 == v18)
    {
      v24 = 0;
      v25 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_34;
    }
    if (v21 <= 0x7FFFFFEF)
    {
      v25 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v21 + 20));
      *v25 = 2;
      v25[1] = v20 - v17;
      v24 = v25 + 5;
      *((_QWORD *)v25 + 1) = v25 + 5;
      v25[4] = 0;
LABEL_34:
      *a5 = v25;
      result = (char *)WTF::StringImpl::find(v8, a2, 0, v13, v14, v15);
      if (result != (char *)-1)
      {
        v41 = result;
        v42 = 0;
        v43 = 0;
        v44 = 0uLL;
        while (1)
        {
          v45 = (char *)(v41 - v42);
          v46 = (char *)v24 + 2 * (_QWORD)v43;
          v47 = &v42[*(_QWORD *)(v8 + 8)];
          if ((unint64_t)(v41 - v42) >= 0x40)
            break;
          v48 = (unint64_t)v24 + 2 * (_QWORD)v43;
          v56 = &v46[2 * (_QWORD)v45];
          if ((char *)v48 != v56)
            goto LABEL_44;
LABEL_49:
          v104 = v40;
          v105 = v44;
          v61 = &v43[(_QWORD)v45];
          if (v10)
          {
            v62 = (_WORD *)v24 + (_QWORD)v61;
            if (v10 == 1)
              *v62 = *(_WORD *)a3;
            else
              memcpy(v62, a3, 2 * v12);
          }
          v43 = &v61[v12];
          v42 = v41 + 1;
          result = (char *)WTF::StringImpl::find(v8, a2, (unint64_t)(v41 + 1), *(double *)v37.i64, *(double *)v38.i64, *(float *)v39.i32);
          v41 = result;
          v40 = v104;
          v44 = v105;
          if (result == (char *)-1)
            goto LABEL_68;
        }
        v48 = (unint64_t)&v46[2 * ((unint64_t)v45 & 0x7FFFFFFFFFFFFFC0)];
        v49 = (char *)v24 + 2 * (_QWORD)v43;
        do
        {
          v37 = *(uint16x8_t *)v47;
          v50 = *((int8x16_t *)v47 + 1);
          v39 = *((uint16x8_t *)v47 + 2);
          v51 = *((_OWORD *)v47 + 3);
          v47 += 64;
          v40 = v51;
          v52 = v44;
          v108.val[0] = v50;
          v38 = (uint16x8_t)v44;
          v53 = v49;
          vst2q_s8(v53, *(int8x16x2_t *)v37.i8);
          v53 += 32;
          v108.val[1] = v44;
          vst2q_s8(v53, v108);
          v54 = v49 + 64;
          vst2q_s8(v54, *(int8x16x2_t *)v39.i8);
          v55 = v49 + 96;
          vst2q_s8(v55, *(int8x16x2_t *)&v40);
          v49 += 128;
        }
        while (v49 != (char *)v48);
        v56 = &v46[2 * (_QWORD)v45];
        if ((char *)v48 == v56)
          goto LABEL_49;
LABEL_44:
        v57 = (unint64_t)v24 + 2 * (_QWORD)v43 + 2 * (_QWORD)v41 - v48 + -2 * (_QWORD)v42 - 2;
        if (v57 < 0xE
          || v48 < (unint64_t)&v47[(v57 >> 1) + 1]
          && (unint64_t)v47 < v48 + (v57 & 0xFFFFFFFFFFFFFFFELL) + 2)
        {
          v58 = (char *)v48;
          v59 = v47;
          goto LABEL_48;
        }
        v63 = (v57 >> 1) + 1;
        if (v57 >= 0x3E)
        {
          v64 = v63 & 0xFFFFFFFFFFFFFFE0;
          v65 = (uint8x8_t *)(v47 + 16);
          v66 = (uint16x8_t *)(v48 + 32);
          v67 = v63 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v68 = *(uint8x16_t *)v65[-2].i8;
            v39 = vmovl_u8(*(uint8x8_t *)v68.i8);
            v37 = vmovl_high_u8(v68);
            v69 = vmovl_u8(*v65);
            v38 = vmovl_high_u8(*(uint8x16_t *)v65->i8);
            v66[-2] = v39;
            v66[-1] = v37;
            *v66 = v69;
            v66[1] = v38;
            v66 += 4;
            v65 += 4;
            v67 -= 32;
          }
          while (v67);
          if (v63 == v64)
            goto LABEL_49;
          if ((v63 & 0x18) == 0)
          {
            v59 = &v47[v64];
            v58 = (char *)(v48 + 2 * v64);
            do
            {
LABEL_48:
              v60 = *v59++;
              *(_WORD *)v58 = v60;
              v58 += 2;
            }
            while (v58 != v56);
            goto LABEL_49;
          }
        }
        else
        {
          v64 = 0;
        }
        v58 = (char *)(v48 + 2 * (v63 & 0xFFFFFFFFFFFFFFF8));
        v59 = &v47[v63 & 0xFFFFFFFFFFFFFFF8];
        v70 = (uint8x8_t *)&v47[v64];
        v71 = (uint16x8_t *)(v48 + 2 * v64);
        v72 = v64 - (v63 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v73 = *v70++;
          v37 = vmovl_u8(v73);
          *v71++ = v37;
          v72 += 8;
        }
        while (v72);
        if (v63 == (v63 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_49;
        goto LABEL_48;
      }
      v43 = 0;
      v42 = 0;
LABEL_68:
      v76 = *(unsigned int *)(v8 + 4);
      v77 = (unint64_t)v24 + 2 * (_QWORD)v43;
      v78 = (unint64_t)&v42[*(_QWORD *)(v8 + 8)];
      v79 = (_WORD *)(v77 + 2 * (v76 - (_QWORD)v42));
      if ((unint64_t)(v76 - (_QWORD)v42) >= 0x40)
      {
        v80 = v77 + 2 * ((v76 - (_QWORD)v42) & 0x7FFFFFFFFFFFFFC0);
        v81 = 0uLL;
        do
        {
          v107.val[0] = *(int8x16_t *)v78;
          v82 = *(int8x16_t *)(v78 + 16);
          v109.val[0] = *(int8x16_t *)(v78 + 32);
          v83 = *(_OWORD *)(v78 + 48);
          v78 += 64;
          v84 = v83;
          v109.val[1] = 0uLL;
          v110.val[0] = v82;
          v107.val[1] = 0uLL;
          v85 = (char *)v77;
          vst2q_s8(v85, v107);
          v85 += 32;
          v110.val[1] = 0uLL;
          vst2q_s8(v85, v110);
          v86 = (char *)(v77 + 64);
          vst2q_s8(v86, v109);
          v87 = (char *)(v77 + 96);
          vst2q_s8(v87, *(int8x16x2_t *)(&v81 - 1));
          v77 += 128;
        }
        while (v77 != v80);
        v77 = v80;
      }
      if ((_WORD *)v77 == v79)
        return result;
      v88 = (unint64_t)v24 + 2 * (_QWORD)&v43[v76] - v77 + -2 * (_QWORD)v42 - 2;
      if (v88 < 0xE || v77 < v78 + (v88 >> 1) + 1 && v78 < (v88 & 0xFFFFFFFFFFFFFFFELL) + v77 + 2)
      {
        v89 = (_WORD *)v77;
        v90 = (unsigned __int8 *)v78;
        goto LABEL_77;
      }
      v92 = (v88 >> 1) + 1;
      if (v88 >= 0x3E)
      {
        v93 = v92 & 0xFFFFFFFFFFFFFFE0;
        v94 = (uint8x8_t *)(v78 + 16);
        v95 = (uint16x8_t *)(v77 + 32);
        v96 = v92 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v97 = *(uint8x16_t *)v94[-2].i8;
          v98 = vmovl_u8(*v94);
          v99 = vmovl_high_u8(*(uint8x16_t *)v94->i8);
          v95[-2] = vmovl_u8(*(uint8x8_t *)v97.i8);
          v95[-1] = vmovl_high_u8(v97);
          *v95 = v98;
          v95[1] = v99;
          v95 += 4;
          v94 += 4;
          v96 -= 32;
        }
        while (v96);
        if (v92 == v93)
          return result;
        if ((v92 & 0x18) == 0)
        {
          v90 = (unsigned __int8 *)(v78 + v93);
          v89 = (_WORD *)(v77 + 2 * v93);
          goto LABEL_77;
        }
      }
      else
      {
        v93 = 0;
      }
      v89 = (_WORD *)(v77 + 2 * (v92 & 0xFFFFFFFFFFFFFFF8));
      v90 = (unsigned __int8 *)(v78 + (v92 & 0xFFFFFFFFFFFFFFF8));
      v100 = (uint8x8_t *)(v78 + v93);
      v101 = (uint16x8_t *)(v77 + 2 * v93);
      v102 = v93 - (v92 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v103 = *v100++;
        *v101++ = vmovl_u8(v103);
        v102 += 8;
      }
      while (v102);
      if (v92 == (v92 & 0xFFFFFFFFFFFFFFF8))
        return result;
      do
      {
LABEL_77:
        v91 = *v90++;
        *v89++ = v91;
      }
      while (v89 != v79);
      return result;
    }
LABEL_94:
    __break(0xC471u);
    JUMPOUT(0x197B0F3B4);
  }
  if (v20 == v18)
  {
    v22 = 0;
    v23 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  else
  {
    if (v21 > 0x7FFFFFEF)
    {
      __break(0xC471u);
      JUMPOUT(0x197B0F3C4);
    }
    v23 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v21 + 20));
    *v23 = 2;
    v23[1] = v20 - v17;
    v22 = v23 + 5;
    *((_QWORD *)v23 + 1) = v23 + 5;
    v23[4] = 0;
  }
  *a5 = v23;
  result = (char *)WTF::StringImpl::find(v8, a2, 0, v13, v14, v15);
  if (result != (char *)-1)
  {
    v29 = result;
    v30 = 0;
    v31 = 0;
    while (1)
    {
      v32 = (char *)(v29 - v30);
      if (v29 == v30)
        goto LABEL_27;
      v33 = (_WORD *)v22 + (_QWORD)v31;
      v34 = (_WORD *)(*(_QWORD *)(v8 + 8) + 2 * (_QWORD)v30);
      if (v32 == (char *)1)
        break;
      memcpy(v33, v34, 2 * (_QWORD)v32);
      v35 = &v31[(_QWORD)v32];
      if (v10)
      {
LABEL_30:
        v36 = (_WORD *)v22 + (_QWORD)v35;
        if (v10 == 1)
          *v36 = *(_WORD *)a3;
        else
          memcpy(v36, a3, 2 * v12);
      }
LABEL_23:
      v31 = &v35[v12];
      v30 = v29 + 1;
      result = (char *)WTF::StringImpl::find(v8, a2, (unint64_t)(v29 + 1), v26, v27, v28);
      v29 = result;
      if (result == (char *)-1)
        goto LABEL_64;
    }
    *v33 = *v34;
LABEL_27:
    v35 = &v31[(_QWORD)v32];
    if (v10)
      goto LABEL_30;
    goto LABEL_23;
  }
  v31 = 0;
  v30 = 0;
LABEL_64:
  v74 = *(unsigned int *)(v8 + 4) - (_QWORD)v30;
  if (v74)
  {
    result = (char *)v22 + 2 * (_QWORD)v31;
    v75 = (_WORD *)(*(_QWORD *)(v8 + 8) + 2 * (_QWORD)v30);
    if (v74 == 1)
      *(_WORD *)result = *v75;
    else
      return (char *)memcpy(result, v75, 2 * v74);
  }
  return result;
}

char *WTF::StringImpl::replace@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _BYTE *a3@<X2>, size_t a4@<X3>, _QWORD *a5@<X8>, double a6@<D0>, double a7@<D1>, float a8@<S2>)
{
  char *result;
  double v14;
  double v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  int *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  double v29;
  double v30;
  float v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  __int128 v41;
  char *v42;
  char *v43;
  size_t v44;
  int8x16_t v45;
  int64_t v46;
  _WORD *v47;
  _WORD *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  _OWORD *v52;
  char *v53;
  int8x16_t v54;
  __int128 v55;
  __int128 v56;
  int8x16_t v57;
  char *v58;
  char *v59;
  char *v60;
  _WORD *v61;
  unint64_t v62;
  BOOL v63;
  uint64_t v64;
  unint64_t v65;
  _WORD *v66;
  unsigned __int8 *v67;
  __int16 v68;
  uint8x8_t *v69;
  uint16x8_t *v70;
  unint64_t v71;
  uint8x16_t v72;
  uint16x8_t v73;
  uint8x8_t *v74;
  uint16x8_t *v75;
  unint64_t v76;
  uint8x8_t v77;
  double v78;
  double v79;
  float v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  double v88;
  double v89;
  float v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  size_t v95;
  __int128 v96;
  __int128 v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16x2_t v100;

  result = (char *)WTF::StringImpl::find(a1, a2, 0, a6, a7, a8);
  if (result == (char *)-1)
    goto LABEL_12;
  v17 = 0;
  v18 = 0;
  do
  {
    ++v18;
    result = (char *)WTF::StringImpl::find(a1, a2, (unint64_t)(result + 1), v14, v15, v16);
    --v17;
  }
  while (result != (char *)-1);
  if (!v17)
  {
LABEL_12:
    *(_DWORD *)a1 += 2;
    *a5 = a1;
    return result;
  }
  v19 = -v17;
  if (a4 && v19 > 0x7FFFFFFF / a4)
  {
    __break(0xC471u);
    JUMPOUT(0x197B0F9CCLL);
  }
  v20 = *(unsigned int *)(a1 + 4);
  if (v20 + v17 >= 0x7FFFFFFF - v19 * a4)
    goto LABEL_87;
  v21 = v20 + a4 * v18;
  v22 = v21 + v17;
  if ((*(_BYTE *)(a1 + 16) & 4) == 0)
  {
    if (v22)
    {
      if (v22 >= 0x7FFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x197B0F9D4);
      }
      v23 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v22 + 20));
      *v23 = 2;
      v23[1] = v20 + a4 * v18 + v17;
      v24 = v23 + 5;
      *((_QWORD *)v23 + 1) = v23 + 5;
      v23[4] = 0;
    }
    else
    {
      v24 = 0;
      v23 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    *a5 = v23;
    result = (char *)WTF::StringImpl::find(a1, a2, 0, v14, v15, v16);
    if (result != (char *)-1)
    {
      v42 = result;
      v43 = 0;
      v44 = 0;
      v45 = 0uLL;
      while (1)
      {
        v46 = v42 - v43;
        if (v42 == v43)
          goto LABEL_32;
        v47 = (_WORD *)v24 + v44;
        v48 = (_WORD *)(*(_QWORD *)(a1 + 8) + 2 * (_QWORD)v43);
        if (v46 == 1)
          break;
        v97 = v41;
        v99 = v45;
        memcpy(v47, v48, 2 * v46);
        v41 = v97;
        v45 = v99;
        v49 = (char *)(v46 + v44);
        v50 = (unint64_t)v24 + 2 * v46 + 2 * v44;
        if (a4 >= 0x40)
        {
LABEL_33:
          v51 = v50 + 2 * (a4 & 0xFFFFFFFFFFFFFFC0);
          v52 = a3;
          v53 = (char *)v50;
          do
          {
            v38 = *(uint16x8_t *)v52;
            v54 = *((int8x16_t *)v52 + 1);
            v40 = *((uint16x8_t *)v52 + 2);
            v55 = v52[3];
            v52 += 4;
            v56 = v55;
            v57 = v45;
            v100.val[0] = v54;
            v39 = (uint16x8_t)v45;
            v58 = v53;
            vst2q_s8(v58, *(int8x16x2_t *)v38.i8);
            v58 += 32;
            v100.val[1] = v45;
            vst2q_s8(v58, v100);
            v59 = v53 + 64;
            vst2q_s8(v59, *(int8x16x2_t *)v40.i8);
            v60 = v53 + 96;
            vst2q_s8(v60, *(int8x16x2_t *)(&v45 - 1));
            v53 += 128;
          }
          while (v53 != (char *)v51);
          v96 = v56;
          v98 = v45;
          v61 = (_WORD *)(v50 + 2 * a4);
          if ((_WORD *)v51 == v61)
            goto LABEL_28;
LABEL_39:
          v62 = (unint64_t)v24 + 2 * a4 + 2 * (_QWORD)v49 - v51 - 2;
          if (v62 < 0xE
            || (v51 < (unint64_t)v52 + (v62 >> 1) + 1
              ? (v63 = (unint64_t)v52 >= v51 + (v62 & 0xFFFFFFFFFFFFFFFELL) + 2)
              : (v63 = 1),
                !v63))
          {
            v66 = (_WORD *)v51;
            v67 = (unsigned __int8 *)v52;
            goto LABEL_48;
          }
          v64 = (v62 >> 1) + 1;
          if (v62 >= 0x3E)
          {
            v65 = v64 & 0xFFFFFFFFFFFFFFE0;
            v69 = (uint8x8_t *)(v52 + 1);
            v70 = (uint16x8_t *)(v51 + 32);
            v71 = v64 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v72 = *(uint8x16_t *)v69[-2].i8;
              v40 = vmovl_u8(*(uint8x8_t *)v72.i8);
              v38 = vmovl_high_u8(v72);
              v73 = vmovl_u8(*v69);
              v39 = vmovl_high_u8(*(uint8x16_t *)v69->i8);
              v70[-2] = v40;
              v70[-1] = v38;
              *v70 = v73;
              v70[1] = v39;
              v70 += 4;
              v69 += 4;
              v71 -= 32;
            }
            while (v71);
            if (v64 == v65)
              goto LABEL_28;
            if ((v64 & 0x18) == 0)
            {
              v67 = (unsigned __int8 *)v52 + v65;
              v66 = (_WORD *)(v51 + 2 * v65);
              do
              {
LABEL_48:
                v68 = *v67++;
                *v66++ = v68;
              }
              while (v66 != v61);
              goto LABEL_28;
            }
          }
          else
          {
            v65 = 0;
          }
          v66 = (_WORD *)(v51 + 2 * (v64 & 0xFFFFFFFFFFFFFFF8));
          v67 = (unsigned __int8 *)v52 + (v64 & 0xFFFFFFFFFFFFFFF8);
          v74 = (uint8x8_t *)((char *)v52 + v65);
          v75 = (uint16x8_t *)(v51 + 2 * v65);
          v76 = v65 - (v64 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v77 = *v74++;
            v38 = vmovl_u8(v77);
            *v75++ = v38;
            v76 += 8;
          }
          while (v76);
          if (v64 == (v64 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_28;
          goto LABEL_48;
        }
LABEL_38:
        v52 = a3;
        v51 = v50;
        v96 = v41;
        v98 = v45;
        v61 = (_WORD *)(v50 + 2 * a4);
        if ((_WORD *)v51 != v61)
          goto LABEL_39;
LABEL_28:
        v44 = (size_t)&v49[a4];
        v43 = v42 + 1;
        result = (char *)WTF::StringImpl::find(a1, a2, (unint64_t)(v42 + 1), *(double *)v38.i64, *(double *)v39.i64, *(float *)v40.i32);
        v42 = result;
        v41 = v96;
        v45 = v98;
        if (result == (char *)-1)
          goto LABEL_68;
      }
      *v47 = *v48;
LABEL_32:
      v49 = (char *)(v46 + v44);
      v50 = (unint64_t)v24 + 2 * v46 + 2 * v44;
      if (a4 >= 0x40)
        goto LABEL_33;
      goto LABEL_38;
    }
    v44 = 0;
    v43 = 0;
LABEL_68:
    v85 = *(unsigned int *)(a1 + 4) - (_QWORD)v43;
    if (v85)
    {
      result = (char *)v24 + 2 * v44;
      v86 = (char *)(*(_QWORD *)(a1 + 8) + 2 * (_QWORD)v43);
      if (v85 == 1)
      {
        *(_WORD *)result = *(_WORD *)v86;
        return result;
      }
      v95 = 2 * v85;
      return (char *)memcpy(result, v86, v95);
    }
    return result;
  }
  if (!v22)
  {
    v26 = 0;
    WTF::StringImpl::s_emptyAtomString += 2;
    *a5 = &WTF::StringImpl::s_emptyAtomString;
    v27 = a1;
    v28 = a2;
    if (a4 != 1)
      goto LABEL_17;
LABEL_60:
    result = (char *)WTF::StringImpl::find(v27, v28, 0, v14, v15, v16);
    if (result == (char *)-1)
      goto LABEL_78;
    v81 = result;
    v33 = 0;
    v34 = 0;
    do
    {
      v82 = (char *)(v81 - v33);
      if (v81 != v33)
      {
        v83 = (char *)(v26 + v34);
        v84 = &v33[*(_QWORD *)(a1 + 8)];
        if (v82 == (char *)1)
          *v83 = *v84;
        else
          memcpy(v83, v84, v81 - v33);
      }
      v82[v34 + v26] = *a3;
      v34 += (uint64_t)(v82 + 1);
      v33 = v81 + 1;
      result = (char *)WTF::StringImpl::find(a1, a2, (unint64_t)(v81 + 1), v78, v79, v80);
      v81 = result;
    }
    while (result != (char *)-1);
    goto LABEL_79;
  }
  if (v22 >> 31)
  {
LABEL_87:
    __break(0xC471u);
    JUMPOUT(0x197B0F9C4);
  }
  v25 = WTF::fastCompactMalloc((WTF *)(v21 + v17 + 20));
  v26 = v25 + 20;
  *(_DWORD *)v25 = 2;
  *(_DWORD *)(v25 + 4) = v20 + a4 * v18 + v17;
  *(_QWORD *)(v25 + 8) = v25 + 20;
  *(_DWORD *)(v25 + 16) = 4;
  *a5 = v25;
  v27 = a1;
  v28 = a2;
  if (a4 == 1)
    goto LABEL_60;
LABEL_17:
  if (!a4)
  {
    result = (char *)WTF::StringImpl::find(v27, v28, 0, v14, v15, v16);
    if (result != (char *)-1)
    {
      v32 = result;
      v33 = 0;
      v34 = 0;
      do
      {
        v35 = (char *)(v32 - v33);
        if (v32 != v33)
        {
          v36 = (char *)(v26 + v34);
          v37 = &v33[*(_QWORD *)(a1 + 8)];
          if (v35 == (char *)1)
            *v36 = *v37;
          else
            memcpy(v36, v37, v32 - v33);
        }
        v34 += (uint64_t)v35;
        v33 = v32 + 1;
        result = (char *)WTF::StringImpl::find(a1, a2, (unint64_t)(v32 + 1), v29, v30, v31);
        v32 = result;
      }
      while (result != (char *)-1);
      goto LABEL_79;
    }
LABEL_78:
    v34 = 0;
    v33 = 0;
    goto LABEL_79;
  }
  result = (char *)WTF::StringImpl::find(v27, v28, 0, v14, v15, v16);
  if (result == (char *)-1)
    goto LABEL_78;
  v87 = result;
  v33 = 0;
  v34 = 0;
  do
  {
    v91 = (char *)(v87 - v33);
    if (v87 != v33)
    {
      v92 = (char *)(v26 + v34);
      v93 = &v33[*(_QWORD *)(a1 + 8)];
      if (v91 == (char *)1)
        *v92 = *v93;
      else
        memcpy(v92, v93, v87 - v33);
    }
    memcpy(&v91[v34 + v26], a3, a4);
    v34 += (uint64_t)&v91[a4];
    v33 = v87 + 1;
    result = (char *)WTF::StringImpl::find(a1, a2, (unint64_t)(v87 + 1), v88, v89, v90);
    v87 = result;
  }
  while (result != (char *)-1);
LABEL_79:
  v94 = (char *)*(unsigned int *)(a1 + 4);
  v95 = v94 - v33;
  if (v94 != v33)
  {
    result = (char *)(v26 + v34);
    v86 = &v33[*(_QWORD *)(a1 + 8)];
    if (v95 == 1)
    {
      *result = *v86;
      return result;
    }
    return (char *)memcpy(result, v86, v95);
  }
  return result;
}

uint64_t WTF::StringImpl::find(uint64_t result, unsigned int a2, unint64_t a3, double a4, double a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  int16x8_t *v8;
  unint64_t v9;
  unint64_t v10;
  int16x8_t v11;
  int8x16_t v12;
  int16x8_t *v13;
  __int8 *v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;

  v6 = *(_QWORD *)(result + 8);
  v7 = *(unsigned int *)(result + 4);
  if ((*(_BYTE *)(result + 16) & 4) != 0)
  {
    if (a2 <= 0xFF)
    {
      v15 = v7 > a3;
      v16 = v7 - a3;
      if (v15)
      {
        v17 = 16;
        if (v16 < 0x10)
          v17 = v16;
        if (v17)
        {
          v18 = v17;
          v19 = (unsigned __int8 *)(v6 + a3);
          while (*v19 != a2)
          {
            ++v19;
            if (!--v18)
              goto LABEL_26;
          }
        }
        else
        {
LABEL_26:
          if (v16 < 0x11)
            return -1;
          v19 = (unsigned __int8 *)memchr((void *)(v6 + a3 + v17), a2, v16 - v17);
          if (!v19)
            return -1;
        }
        return (uint64_t)&v19[-v6];
      }
    }
    return -1;
  }
  if (v7 <= a3)
    return -1;
  v8 = (int16x8_t *)(v6 + 2 * a3);
  v9 = v6 + 2 * v7;
  v10 = v9 - (_QWORD)v8;
  if ((uint64_t)(v9 - (_QWORD)v8) <= -2)
  {
    __break(1u);
    return result;
  }
  if (v10 <= 0x3E)
  {
    while (v8->u16[0] != a2)
    {
      v8 = (int16x8_t *)((char *)v8 + 2);
      v10 -= 2;
      if (!v10)
        return -1;
    }
    goto LABEL_11;
  }
  v11 = vdupq_n_s16(a2);
  if ((unint64_t)&v8->u64[1] + 6 >= v9)
  {
    if ((unint64_t)v8 >= v9)
      return -1;
LABEL_9:
    v8 = (int16x8_t *)(v9 - 16);
    v12 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v9 - 16), v11);
    v11.i16[0] = vmaxvq_u16((uint16x8_t)v12);
    if (v11.i32[0])
      goto LABEL_10;
    return -1;
  }
  while (1)
  {
    v12 = (int8x16_t)vceqq_s16(*v8, v11);
    LOWORD(a6) = vmaxvq_u16((uint16x8_t)v12);
    if (a6 != 0.0)
      break;
    v13 = v8 + 1;
    v14 = &v8[1].i8[14];
    ++v8;
    if ((unint64_t)v14 >= v9)
    {
      if ((unint64_t)v13 >= v9)
        return -1;
      goto LABEL_9;
    }
  }
LABEL_10:
  v8 = (int16x8_t *)((char *)v8
                   + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v12)));
LABEL_11:
  if (v8 == (int16x8_t *)v9)
    return -1;
  else
    return ((uint64_t)v8->i64 - v6) >> 1;
}

uint16x8_t *WTF::StringImpl::replace@<X0>(uint16x8_t *result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X4>, int **a6@<X8>, double a7@<D0>, double a8@<D1>, float a9@<S2>)
{
  uint16x8_t *v9;
  double v15;
  double v16;
  float v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int *v26;
  int *v27;
  int *v28;
  unsigned int v29;
  uint64_t Common;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x16_t v38;
  int v39;
  uint64_t v40;
  _WORD *v41;
  _WORD *v42;
  _OWORD *v43;
  unint64_t v44;
  char *v45;
  int8x16_t v46;
  __int128 v47;
  int8x16_t v48;
  char *v49;
  char *v50;
  char *v51;
  _WORD *v52;
  unint64_t v53;
  _WORD *v54;
  unsigned __int8 *v55;
  __int16 v56;
  uint64_t v57;
  _WORD *v58;
  unint64_t v59;
  _OWORD *v60;
  char *v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  char *v65;
  char *v66;
  char *v67;
  _WORD *v68;
  unint64_t v69;
  BOOL v70;
  uint64_t v71;
  unint64_t v72;
  _WORD *v73;
  unsigned __int8 *v74;
  __int16 v75;
  uint64_t v76;
  unint64_t v77;
  uint8x8_t *v78;
  uint16x8_t *v79;
  unint64_t v80;
  uint8x16_t v81;
  uint16x8_t v82;
  uint8x8_t *v83;
  uint16x8_t *v84;
  unint64_t v85;
  uint8x8_t v86;
  uint8x8_t *v87;
  uint16x8_t *v88;
  unint64_t v89;
  uint8x16_t v90;
  uint16x8_t v91;
  uint8x8_t *v92;
  uint16x8_t *v93;
  unint64_t v94;
  uint8x8_t v95;
  int v96;
  double v97;
  double v98;
  float v99;
  uint16x8_t *v100;
  char *v101;
  uint64_t v102;
  int v103;
  char *v104;
  char *v105;
  uint64_t v106;
  _BYTE *v107;
  int v108;
  size_t v109;
  uint64_t v110;
  uint64_t v111;
  __int8 *v112;
  unint64_t v113;
  char *v114;
  char *v115;
  __int128 v116;
  int8x16_t v117;
  __int128 v118;
  __int128 v119;
  char *v120;
  char *i8;
  char *v122;
  unint64_t v123;
  char *v124;
  unsigned __int8 *v125;
  __int16 v126;
  unsigned int v127;
  uint64_t v128;
  unint64_t v129;
  uint8x8_t *v130;
  uint16x8_t *v131;
  unint64_t v132;
  uint8x16_t v133;
  uint16x8_t v134;
  uint16x8_t v135;
  uint8x8_t *v136;
  uint16x8_t *v137;
  unint64_t v138;
  uint8x8_t v139;
  char v140;
  _BYTE *__src;
  int *v142;
  __int128 v143;
  __int128 v144;
  int8x16_t v145;
  int8x16_t v146;
  StringView v147;
  StringView v148;
  StringView v149;
  StringView v150;
  StringView v151;
  StringView v152;
  StringView v153;
  StringView v154;
  StringView v155;
  StringView v156;
  StringView v157;
  StringView v158;
  int8x16x2_t v159;
  int8x16x2_t v160;
  int8x16x2_t v161;
  int8x16x2_t v162;
  int8x16x2_t v163;
  int8x16x2_t v164;

  v9 = result;
  if (!a2)
    goto LABEL_15;
  if (!a4)
    goto LABEL_15;
  if (!(_DWORD)a3)
    goto LABEL_15;
  LODWORD(v147.m_characters) = result->i32[1];
  HIDWORD(v147.m_characters) = ((unsigned __int32)result[1].i32[0] >> 2) & 1;
  *(_QWORD *)&v147.m_length = a2;
  v153.m_characters = a3;
  *(_QWORD *)&v153.m_length = 0;
  result = (uint16x8_t *)WTF::findCommon(result->i64[1], v147, v153, a7, a8, a9);
  if (result == (uint16x8_t *)-1)
    goto LABEL_15;
  __src = a4;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  do
  {
    *(_QWORD *)&v154.m_length = ((_DWORD)result + (_DWORD)a3);
    LODWORD(v148.m_characters) = v9->i32[1];
    HIDWORD(v148.m_characters) = ((unsigned __int32)v9[1].i32[0] >> 2) & 1;
    *(_QWORD *)&v148.m_length = a2;
    v154.m_characters = a3;
    result = (uint16x8_t *)WTF::findCommon(v9->i64[1], v148, v154, v15, v16, v17);
    --v21;
    v20 += (_DWORD)a3 - a5;
    v19 += (int)a3;
    v18 += a5;
  }
  while (result != (uint16x8_t *)-1);
  if (!v21)
  {
LABEL_15:
    v9->i32[0] += 2;
    *a6 = (int *)v9;
    return result;
  }
  v22 = v9->i32[1];
  if ((_DWORD)a5 && -v21 > 0x7FFFFFFF / a5)
  {
    __break(0xC471u);
    JUMPOUT(0x197B104BCLL);
  }
  if (v22 - v19 > (v18 ^ 0x7FFFFFFFu))
  {
    __break(0xC471u);
    JUMPOUT(0x197B104B4);
  }
  v23 = (v22 - v20);
  v24 = v9[1].u32[0];
  v25 = a5 & 0xFF00000000;
  if ((v24 & 4) != 0 && v25)
  {
    if (v22 == v20)
    {
      v26 = 0;
      v27 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      if ((v23 & 0x80000000) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197B104CCLL);
      }
      v27 = (int *)WTF::fastCompactMalloc((WTF *)(v23 + 20));
      v26 = v27 + 5;
      *v27 = 2;
      v27[1] = v23;
      *((_QWORD *)v27 + 1) = v27 + 5;
      v27[4] = 4;
      v24 = v9[1].u32[0];
      v22 = v9->i32[1];
    }
    *a6 = v27;
    LODWORD(v151.m_characters) = v22;
    HIDWORD(v151.m_characters) = (v24 >> 2) & 1;
    *(_QWORD *)&v151.m_length = a2;
    v157.m_characters = a3;
    *(_QWORD *)&v157.m_length = 0;
    result = (uint16x8_t *)WTF::findCommon(v9->i64[1], v151, v157, v15, v16, v17);
    if (result == (uint16x8_t *)-1)
    {
      v102 = 0;
      v101 = 0;
      v127 = v9->u32[1];
      v109 = v127;
      if (!v127)
        return result;
      goto LABEL_117;
    }
    v100 = result;
    v101 = 0;
    LODWORD(v102) = 0;
    while (1)
    {
      v103 = (_DWORD)v100 - (_DWORD)v101;
      if ((_DWORD)v100 == (_DWORD)v101)
        goto LABEL_93;
      v104 = (char *)v26 + v102;
      v105 = &v101[v9->i64[1]];
      if (v103 == 1)
        break;
      memcpy(v104, v105, ((_DWORD)v100 - (_DWORD)v101));
      v106 = (v102 + v103);
      if ((_DWORD)a5)
      {
LABEL_96:
        v107 = (char *)v26 + v106;
        if ((_DWORD)a5 == 1)
          *v107 = *__src;
        else
          memcpy(v107, __src, a5);
      }
LABEL_89:
      v102 = (v106 + a5);
      v101 = &v100->i8[a3];
      LODWORD(v152.m_characters) = v9->i32[1];
      HIDWORD(v152.m_characters) = ((unsigned __int32)v9[1].i32[0] >> 2) & 1;
      *(_QWORD *)&v152.m_length = a2;
      v158.m_characters = a3;
      *(_QWORD *)&v158.m_length = v101;
      result = (uint16x8_t *)WTF::findCommon(v9->i64[1], v152, v158, v97, v98, v99);
      v100 = result;
      if (result == (uint16x8_t *)-1)
      {
        v108 = v9->i32[1];
        v109 = (v108 - (_DWORD)v101);
        if (v108 == (_DWORD)v101)
          return result;
LABEL_117:
        result = (uint16x8_t *)((char *)v26 + v102);
        v112 = &v101[v9->i64[1]];
        if ((_DWORD)v109 == 1)
        {
          result->i8[0] = *v112;
          return result;
        }
        return (uint16x8_t *)memcpy(result, v112, v109);
      }
    }
    *v104 = *v105;
LABEL_93:
    v106 = (v102 + v103);
    if ((_DWORD)a5)
      goto LABEL_96;
    goto LABEL_89;
  }
  if (v22 == v20)
  {
    v142 = 0;
    v28 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    v29 = v24;
  }
  else
  {
    if (v23 >= 0x7FFFFFF0)
    {
      __break(0xC471u);
      JUMPOUT(0x197B104C4);
    }
    v28 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v23 + 20));
    *v28 = 2;
    v28[1] = v23;
    v142 = v28 + 5;
    *((_QWORD *)v28 + 1) = v28 + 5;
    v28[4] = 0;
    v29 = v9[1].u32[0];
    v22 = v9->i32[1];
  }
  v140 = v24;
  *a6 = v28;
  LODWORD(v149.m_characters) = v22;
  HIDWORD(v149.m_characters) = (v29 >> 2) & 1;
  *(_QWORD *)&v149.m_length = a2;
  v155.m_characters = a3;
  *(_QWORD *)&v155.m_length = 0;
  Common = WTF::findCommon(v9->i64[1], v149, v155, v15, v16, v17);
  if (Common != -1)
  {
    v35 = Common;
    v36 = 0;
    LODWORD(v37) = 0;
    v38 = 0uLL;
    while (1)
    {
      v39 = v35 - v36;
      v40 = v9->i64[1];
      v41 = (_WORD *)v142 + v37;
      if ((v140 & 4) != 0)
      {
        v43 = (_OWORD *)(v40 + v36);
        if ((v35 - v36) < 0x40uLL)
        {
          v44 = (unint64_t)v142 + 2 * v37;
          v52 = &v41[v39];
          if (v41 == v52)
            goto LABEL_42;
        }
        else
        {
          v44 = (unint64_t)&v41[v39 & 0xFFFFFFC0];
          v45 = (char *)v142 + 2 * v37;
          do
          {
            v31 = *(uint16x8_t *)v43;
            v46 = *((int8x16_t *)v43 + 1);
            v33 = *((uint16x8_t *)v43 + 2);
            v47 = v43[3];
            v43 += 4;
            v34 = v47;
            v48 = v38;
            v160.val[0] = v46;
            v32 = (uint16x8_t)v38;
            v49 = v45;
            vst2q_s8(v49, *(int8x16x2_t *)v31.i8);
            v49 += 32;
            v160.val[1] = v38;
            vst2q_s8(v49, v160);
            v50 = v45 + 64;
            vst2q_s8(v50, *(int8x16x2_t *)v33.i8);
            v51 = v45 + 96;
            vst2q_s8(v51, *(int8x16x2_t *)&v34);
            v45 += 128;
          }
          while (v45 != (char *)v44);
          v52 = &v41[v39];
          if ((_WORD *)v44 == v52)
            goto LABEL_42;
        }
        v53 = (unint64_t)v142 + 2 * v37 + 2 * (v35 - v36) - v44 - 2;
        if (v53 < 0xE
          || v44 < (unint64_t)v43 + (v53 >> 1) + 1
          && (unint64_t)v43 < v44 + (v53 & 0xFFFFFFFFFFFFFFFELL) + 2)
        {
          v54 = (_WORD *)v44;
          v55 = (unsigned __int8 *)v43;
          goto LABEL_39;
        }
        v76 = (v53 >> 1) + 1;
        if (v53 >= 0x3E)
        {
          v77 = v76 & 0xFFFFFFFFFFFFFFE0;
          v87 = (uint8x8_t *)(v43 + 1);
          v88 = (uint16x8_t *)(v44 + 32);
          v89 = v76 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v90 = *(uint8x16_t *)v87[-2].i8;
            v33 = vmovl_u8(*(uint8x8_t *)v90.i8);
            v31 = vmovl_high_u8(v90);
            v91 = vmovl_u8(*v87);
            v32 = vmovl_high_u8(*(uint8x16_t *)v87->i8);
            v88[-2] = v33;
            v88[-1] = v31;
            *v88 = v91;
            v88[1] = v32;
            v88 += 4;
            v87 += 4;
            v89 -= 32;
          }
          while (v89);
          if (v76 == v77)
            goto LABEL_42;
          if ((v76 & 0x18) == 0)
          {
            v55 = (unsigned __int8 *)v43 + v77;
            v54 = (_WORD *)(v44 + 2 * v77);
            do
            {
LABEL_39:
              v56 = *v55++;
              *v54++ = v56;
            }
            while (v54 != v52);
            goto LABEL_42;
          }
        }
        else
        {
          v77 = 0;
        }
        v54 = (_WORD *)(v44 + 2 * (v76 & 0xFFFFFFFFFFFFFFF8));
        v55 = (unsigned __int8 *)v43 + (v76 & 0xFFFFFFFFFFFFFFF8);
        v92 = (uint8x8_t *)((char *)v43 + v77);
        v93 = (uint16x8_t *)(v44 + 2 * v77);
        v94 = v77 - (v76 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v95 = *v92++;
          v31 = vmovl_u8(v95);
          *v93++ = v31;
          v94 += 8;
        }
        while (v94);
        if (v76 != (v76 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_39;
      }
      else if (v39)
      {
        v42 = (_WORD *)(v40 + 2 * v36);
        if (v39 == 1)
        {
          *v41 = *v42;
        }
        else
        {
          v143 = v34;
          v145 = v38;
          memcpy(v41, v42, 2 * (v35 - v36));
          v34 = v143;
          v38 = v145;
        }
      }
LABEL_42:
      v57 = (v37 + v39);
      v58 = (_WORD *)v142 + v57;
      v144 = v34;
      v146 = v38;
      if (!v25)
      {
        if ((_DWORD)a5)
        {
          if ((_DWORD)a5 == 1)
            *v58 = *(_WORD *)__src;
          else
            memcpy(v58, __src, 2 * a5);
        }
        goto LABEL_24;
      }
      if (a5 >= 0x40uLL)
      {
        v59 = (unint64_t)&v58[a5 & 0xFFFFFFC0];
        v60 = __src;
        v61 = (char *)v142 + 2 * v57;
        do
        {
          v31 = *(uint16x8_t *)v60;
          v62 = *((int8x16_t *)v60 + 1);
          v33 = *((uint16x8_t *)v60 + 2);
          v63 = *((int8x16_t *)v60 + 3);
          v60 += 4;
          v161.val[0] = v63;
          v64 = v38;
          v163.val[0] = v62;
          v32 = (uint16x8_t)v38;
          v65 = v61;
          vst2q_s8(v65, *(int8x16x2_t *)v31.i8);
          v65 += 32;
          v161.val[1] = v38;
          v163.val[1] = v38;
          vst2q_s8(v65, v163);
          v66 = v61 + 64;
          vst2q_s8(v66, *(int8x16x2_t *)v33.i8);
          v67 = v61 + 96;
          v61 += 128;
          vst2q_s8(v67, v161);
        }
        while (v61 != (char *)v59);
        v68 = &v58[a5];
        if ((_WORD *)v59 == v68)
          goto LABEL_24;
LABEL_52:
        v69 = (unint64_t)v142 + 2 * a5 + 2 * v57 - v59 - 2;
        if (v69 < 0xE
          || (v59 < (unint64_t)v60 + (v69 >> 1) + 1
            ? (v70 = (unint64_t)v60 >= v59 + (v69 & 0xFFFFFFFFFFFFFFFELL) + 2)
            : (v70 = 1),
              !v70))
        {
          v73 = (_WORD *)v59;
          v74 = (unsigned __int8 *)v60;
          goto LABEL_61;
        }
        v71 = (v69 >> 1) + 1;
        if (v69 >= 0x3E)
        {
          v72 = v71 & 0xFFFFFFFFFFFFFFE0;
          v78 = (uint8x8_t *)(v60 + 1);
          v79 = (uint16x8_t *)(v59 + 32);
          v80 = v71 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v81 = *(uint8x16_t *)v78[-2].i8;
            v33 = vmovl_u8(*(uint8x8_t *)v81.i8);
            v31 = vmovl_high_u8(v81);
            v82 = vmovl_u8(*v78);
            v32 = vmovl_high_u8(*(uint8x16_t *)v78->i8);
            v79[-2] = v33;
            v79[-1] = v31;
            *v79 = v82;
            v79[1] = v32;
            v79 += 4;
            v78 += 4;
            v80 -= 32;
          }
          while (v80);
          if (v71 == v72)
            goto LABEL_24;
          if ((v71 & 0x18) == 0)
          {
            v74 = (unsigned __int8 *)v60 + v72;
            v73 = (_WORD *)(v59 + 2 * v72);
            do
            {
LABEL_61:
              v75 = *v74++;
              *v73++ = v75;
            }
            while (v73 != v68);
            goto LABEL_24;
          }
        }
        else
        {
          v72 = 0;
        }
        v73 = (_WORD *)(v59 + 2 * (v71 & 0xFFFFFFFFFFFFFFF8));
        v74 = (unsigned __int8 *)v60 + (v71 & 0xFFFFFFFFFFFFFFF8);
        v83 = (uint8x8_t *)((char *)v60 + v72);
        v84 = (uint16x8_t *)(v59 + 2 * v72);
        v85 = v72 - (v71 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v86 = *v83++;
          v31 = vmovl_u8(v86);
          *v84++ = v31;
          v85 += 8;
        }
        while (v85);
        if (v71 == (v71 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_24;
        goto LABEL_61;
      }
      v60 = __src;
      v59 = (unint64_t)v142 + 2 * v57;
      v68 = &v58[a5];
      if (v58 != v68)
        goto LABEL_52;
LABEL_24:
      v37 = (v57 + a5);
      v36 = v35 + a3;
      LODWORD(v150.m_characters) = v9->i32[1];
      HIDWORD(v150.m_characters) = ((unsigned __int32)v9[1].i32[0] >> 2) & 1;
      *(_QWORD *)&v150.m_length = a2;
      v156.m_characters = a3;
      *(_QWORD *)&v156.m_length = v36;
      v35 = WTF::findCommon(v9->i64[1], v150, v156, *(double *)v31.i64, *(double *)v32.i64, *(float *)v33.i32);
      v34 = v144;
      v38 = v146;
      if (v35 == -1)
      {
        v96 = v36;
        goto LABEL_101;
      }
    }
  }
  v37 = 0;
  v36 = 0;
  v96 = 0;
LABEL_101:
  v110 = (v9->i32[1] - v96);
  result = (uint16x8_t *)((char *)v142 + 2 * v37);
  v111 = v9->i64[1];
  if ((v140 & 4) == 0)
  {
    if (!(_DWORD)v110)
      return result;
    v112 = (__int8 *)(v111 + 2 * v36);
    if ((_DWORD)v110 == 1)
    {
      result->i16[0] = *(_WORD *)v112;
      return result;
    }
    v109 = 2 * v110;
    return (uint16x8_t *)memcpy(result, v112, v109);
  }
  v113 = v111 + v36;
  v114 = &result->i8[2 * v110];
  if (v110 >= 0x40)
  {
    v115 = &result->i8[2 * (v110 & 0xFFFFFFC0)];
    v116 = 0uLL;
    do
    {
      v159.val[0] = *(int8x16_t *)v113;
      v117 = *(int8x16_t *)(v113 + 16);
      v162.val[0] = *(int8x16_t *)(v113 + 32);
      v118 = *(_OWORD *)(v113 + 48);
      v113 += 64;
      v119 = v118;
      v162.val[1] = 0uLL;
      v164.val[0] = v117;
      v159.val[1] = 0uLL;
      v120 = (char *)result;
      vst2q_s8(v120, v159);
      v120 += 32;
      v164.val[1] = 0uLL;
      vst2q_s8(v120, v164);
      i8 = result[4].i8;
      vst2q_s8(i8, v162);
      v122 = result[6].i8;
      vst2q_s8(v122, *(int8x16x2_t *)(&v116 - 1));
      result += 8;
    }
    while (result != (uint16x8_t *)v115);
    result = (uint16x8_t *)v115;
  }
  if (result != (uint16x8_t *)v114)
  {
    v123 = (char *)v142 + 2 * v37 + 2 * v110 - (char *)result - 2;
    if (v123 < 0xE
      || (unint64_t)result < v113 + (v123 >> 1) + 1
      && v113 < (unint64_t)result->u64 + (v123 & 0xFFFFFFFFFFFFFFFELL) + 2)
    {
      v124 = (char *)result;
      v125 = (unsigned __int8 *)v113;
      goto LABEL_114;
    }
    v128 = (v123 >> 1) + 1;
    if (v123 >= 0x3E)
    {
      v129 = v128 & 0xFFFFFFFFFFFFFFE0;
      v130 = (uint8x8_t *)(v113 + 16);
      v131 = result + 2;
      v132 = v128 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v133 = *(uint8x16_t *)v130[-2].i8;
        v134 = vmovl_u8(*v130);
        v135 = vmovl_high_u8(*(uint8x16_t *)v130->i8);
        v131[-2] = vmovl_u8(*(uint8x8_t *)v133.i8);
        v131[-1] = vmovl_high_u8(v133);
        *v131 = v134;
        v131[1] = v135;
        v131 += 4;
        v130 += 4;
        v132 -= 32;
      }
      while (v132);
      if (v128 == v129)
        return result;
      if ((v128 & 0x18) == 0)
      {
        v125 = (unsigned __int8 *)(v113 + v129);
        v124 = &result->i8[2 * v129];
        do
        {
LABEL_114:
          v126 = *v125++;
          *(_WORD *)v124 = v126;
          v124 += 2;
        }
        while (v124 != v114);
        return result;
      }
    }
    else
    {
      v129 = 0;
    }
    v124 = &result->i8[2 * (v128 & 0xFFFFFFFFFFFFFFF8)];
    v125 = (unsigned __int8 *)(v113 + (v128 & 0xFFFFFFFFFFFFFFF8));
    v136 = (uint8x8_t *)(v113 + v129);
    v137 = (uint16x8_t *)((char *)result + 2 * v129);
    v138 = v129 - (v128 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v139 = *v136++;
      *v137++ = vmovl_u8(v139);
      v138 += 8;
    }
    while (v138);
    if (v128 != (v128 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_114;
  }
  return result;
}

BOOL WTF::equal(WTF *this, const WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  _BOOL8 result;

  if (this == a2)
    return 1;
  result = 0;
  if (this)
  {
    if (a2)
      return WTF::equal(this, a2, a3);
  }
  return result;
}

{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  int16x8_t *v9;
  int16x8_t *v10;
  _BOOL8 result;
  uint8x8_t *v12;
  unsigned int v13;
  int16x8_t *v14;
  uint16x8_t v15;
  unsigned int v16;
  uint16x8_t v17;
  BOOL v18;
  int16x8_t *v19;
  unsigned int v20;
  uint8x8_t *v21;
  uint16x8_t v22;
  unsigned int v23;
  uint16x8_t v24;
  BOOL v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v36;
  __int32 v37;
  int v38;
  int v39;
  int v41;
  uint16x8_t v43;
  unsigned int v44;
  uint16x8_t v45;
  BOOL v46;
  uint16x8_t v47;
  uint8x16_t v48;
  uint8x16_t v49;
  unsigned int v50;
  uint8x16_t v51;
  BOOL v52;

  v3 = *((_DWORD *)this + 4);
  v4 = *((_DWORD *)a2 + 4);
  if (v4 >= 0x100 && v3 >= 0x100 && (v4 ^ v3) > 0xFF)
    return 0;
  v5 = *((unsigned int *)this + 1);
  if ((_DWORD)v5 != *((_DWORD *)a2 + 1))
    return 0;
  if (!(_DWORD)v5)
    return 1;
  v6 = (unsigned __int16 *)*((_QWORD *)this + 1);
  v7 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  if ((v3 & 4) == 0)
  {
    if ((v4 & 4) != 0)
    {
      if (*v6 == *v7)
      {
        v19 = (int16x8_t *)(v6 + 1);
        v20 = v5 - 1;
        v21 = (uint8x8_t *)(v7 + 1);
        if (v20 < 8)
        {
          if (v20 >= 4)
          {
            v32 = (v21->u32[0] | ((unint64_t)v21->u32[0] << 16)) & 0xFFFF0000FFFFLL;
            v33 = (*(unsigned int *)((char *)v21->u32 + (v20 & 3)) | ((unint64_t)*(unsigned int *)((char *)v21->u32 + (v20 & 3)) << 16)) & 0xFFFF0000FFFFLL;
            v34 = (v33 | (v33 << 8)) & 0xFF00FF00FF00FFLL;
            return ((v32 | (v32 << 8)) & 0xFF00FF00FF00FFLL) == v19->i64[0]
                && v34 == *(uint64_t *)((char *)v19->i64 + 2 * (v20 & 3));
          }
          if (v20 >= 2)
          {
            v31 = ((v21->u16[0] | (v21->u16[0] << 8)) & 0xFF00FF) == v19->i32[0];
            v41 = (*(unsigned __int16 *)((char *)v21->u16 + (v20 & 1)) | (*(unsigned __int16 *)((char *)v21->u16
                                                                                              + (v20 & 1)) << 8)) & 0xFF00FF;
            return v31 && v41 == *(__int32 *)((char *)v19->i32 + 2 * (v20 & 1));
          }
          if (v20 == 1)
            return v19->u16[0] == v21->u8[0];
          return 1;
        }
        v22 = (uint16x8_t)vceqq_s16(*v19, (int16x8_t)vmovl_u8(*v21));
        v22.i16[0] = vminvq_u16(v22);
        if (v22.i32[0])
        {
          v23 = v20 & 7;
          do
          {
            v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v19 + 2 * v23), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v21 + v23)));
            v24.i16[0] = vminvq_u16(v24);
            result = v24.i32[0] != 0;
            v23 += 8;
            if (v24.i32[0])
              v25 = v23 >= v20;
            else
              v25 = 1;
          }
          while (!v25);
          return result;
        }
      }
    }
    else if (*v6 == *(unsigned __int16 *)v7)
    {
      v8 = v5 - 1;
      if ((_DWORD)v5 != 1)
      {
        v9 = (int16x8_t *)(v6 + 1);
        v10 = (int16x8_t *)(v7 + 2);
        if ((_DWORD)v5 == 2)
          return v9->u16[0] == v10->u16[0];
        switch(31 - __clz(v5 - 2))
        {
          case 0u:
            result = v9->i32[0] == v10->i32[0];
            break;
          case 1u:
            if (v9->i32[0] != v10->i32[0])
              return 0;
            v5 *= 2;
            return *(_DWORD *)((char *)v6 + v5 - 4) == *(_DWORD *)&v7[v5 - 4];
          case 2u:
            if (v9->i64[0] != v10->i64[0])
              return 0;
            v5 *= 2;
            return *(_QWORD *)((char *)v6 + v5 - 8) == *(_QWORD *)&v7[v5 - 8];
          case 3u:
            v47 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v6[v5 - 8], *(int16x8_t *)&v7[2 * v5 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v6 + 1), *(int16x8_t *)(v7 + 2)));
            v47.i16[0] = vminvq_u16(v47);
            result = v47.i32[0] != 0;
            break;
          default:
            v43 = (uint16x8_t)vceqq_s16(*v9, *v10);
            v43.i16[0] = vminvq_u16(v43);
            if (!v43.i32[0])
              return 0;
            if (v8 < 8)
              return 1;
            v44 = v8 & 7;
            do
            {
              v45 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v9 + 2 * v44), *(int16x8_t *)((char *)v10 + 2 * v44));
              v45.i16[0] = vminvq_u16(v45);
              result = v45.i32[0] != 0;
              v44 += 8;
              if (v45.i32[0])
                v46 = v44 >= v8;
              else
                v46 = 1;
            }
            while (!v46);
            break;
        }
        return result;
      }
      return 1;
    }
    return 0;
  }
  if ((v4 & 4) == 0)
  {
    if (*(_WORD *)v7 == *(unsigned __int8 *)v6)
    {
      v12 = (uint8x8_t *)((char *)v6 + 1);
      v13 = v5 - 1;
      v14 = (int16x8_t *)(v7 + 2);
      if (v13 < 8)
      {
        if (v13 >= 4)
        {
          v27 = (v12->u32[0] | ((unint64_t)v12->u32[0] << 16)) & 0xFFFF0000FFFFLL;
          v31 = ((v27 | (v27 << 8)) & 0xFF00FF00FF00FFLL) == v14->i64[0];
          v28 = (*(unsigned int *)((char *)v12->u32 + (v13 & 3)) | ((unint64_t)*(unsigned int *)((char *)v12->u32 + (v13 & 3)) << 16)) & 0xFFFF0000FFFFLL;
          v29 = (v28 | (v28 << 8)) & 0xFF00FF00FF00FFLL;
          v30 = *(uint64_t *)((char *)v14->i64 + 2 * (v13 & 3));
          return v31 && v29 == v30;
        }
        if (v13 >= 2)
        {
          v36 = (v12->u16[0] | (v12->u16[0] << 8)) & 0xFF00FF;
          v37 = v14->i32[0];
          v38 = (*(unsigned __int16 *)((char *)v12->u16 + (v13 & 1)) | (*(unsigned __int16 *)((char *)v12->u16
                                                                                            + (v13 & 1)) << 8)) & 0xFF00FF;
          v39 = *(__int32 *)((char *)v14->i32 + 2 * (v13 & 1));
          return v36 == v37 && v38 == v39;
        }
        if (v13 == 1)
          return v14->u16[0] == v12->u8[0];
        return 1;
      }
      v15 = (uint16x8_t)vceqq_s16(*v14, (int16x8_t)vmovl_u8(*v12));
      v15.i16[0] = vminvq_u16(v15);
      if (v15.i32[0])
      {
        v16 = v13 & 7;
        do
        {
          v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v14 + 2 * v16), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v12 + v16)));
          v17.i16[0] = vminvq_u16(v17);
          result = v17.i32[0] != 0;
          v16 += 8;
          if (v17.i32[0])
            v18 = v16 >= v13;
          else
            v18 = 1;
        }
        while (!v18);
        return result;
      }
    }
    return 0;
  }
  if (*(unsigned __int8 *)v6 != *v7)
    return 0;
  v26 = v5 - 1;
  if ((_DWORD)v5 == 1)
    return 1;
  v9 = (int16x8_t *)((char *)v6 + 1);
  v10 = (int16x8_t *)(v7 + 1);
  if ((_DWORD)v5 == 2)
    return v9->u8[0] == v10->u8[0];
  switch(31 - __clz(v5 - 2))
  {
    case 0u:
      return v9->u16[0] == v10->u16[0];
    case 1u:
      if (v9->u16[0] != v10->u16[0])
        return 0;
      return *(unsigned __int16 *)((char *)v6 + v5 - 2) == *(unsigned __int16 *)&v7[v5 - 2];
    case 2u:
      if (v9->i32[0] != v10->i32[0])
        return 0;
      return *(_DWORD *)((char *)v6 + v5 - 4) == *(_DWORD *)&v7[v5 - 4];
    case 3u:
      if (v9->i64[0] != v10->i64[0])
        return 0;
      return *(_QWORD *)((char *)v6 + v5 - 8) == *(_QWORD *)&v7[v5 - 8];
    case 4u:
      v49 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)v6 + v5 - 16), *(int8x16_t *)&v7[v5 - 16]), vceqq_s8(*(int8x16_t *)((char *)v6 + 1), *(int8x16_t *)(v7 + 1)));
      v49.i8[0] = vminvq_u8(v49);
      return v49.i32[0] != 0;
    default:
      v48 = (uint8x16_t)vceqq_s8(*(int8x16_t *)v9, *(int8x16_t *)v10);
      v48.i8[0] = vminvq_u8(v48);
      if (!v48.i32[0])
        return 0;
      if (v26 < 0x10)
        return 1;
      v50 = v26 & 0xF;
      do
      {
        v51 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v9 + v50), *(int8x16_t *)((char *)v10 + v50));
        v51.i8[0] = vminvq_u8(v51);
        result = v51.i32[0] != 0;
        v50 += 16;
        if (v51.i32[0])
          v52 = v50 >= v26;
        else
          v52 = 1;
      }
      while (!v52);
      break;
  }
  return result;
}

BOOL WTF::equalInternal<unsigned char>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  unsigned __int16 *v5;
  int v6;
  int16x8_t *v7;
  unsigned int v8;
  uint8x8_t *v9;
  uint16x8_t v10;
  unsigned int v11;
  uint16x8_t v12;
  BOOL v13;
  unsigned int v14;
  int8x16_t *v15;
  int8x16_t *v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int32 v24;
  uint64_t v25;
  int v26;
  int v27;
  uint8x16_t v28;
  uint8x16_t v29;
  unsigned int v30;
  uint8x16_t v31;
  BOOL v32;

  result = (a1 | a2) == 0;
  if (!a1 || !a2)
    return result;
  if (a3 != *(_DWORD *)(a1 + 4))
    return 0;
  if (!a3)
    return 1;
  v5 = *(unsigned __int16 **)(a1 + 8);
  v6 = *(unsigned __int8 *)a2;
  if ((*(_BYTE *)(a1 + 16) & 4) == 0)
  {
    if (*v5 != v6)
      return 0;
    v7 = (int16x8_t *)(v5 + 1);
    v8 = a3 - 1;
    v9 = (uint8x8_t *)(a2 + 1);
    if ((a3 - 1) >= 8)
    {
      v10 = (uint16x8_t)vceqq_s16(*v7, (int16x8_t)vmovl_u8(*v9));
      v10.i16[0] = vminvq_u16(v10);
      if (v10.i32[0])
      {
        v11 = v8 & 7;
        do
        {
          v12 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v7 + 2 * v11), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v9 + v11)));
          v12.i16[0] = vminvq_u16(v12);
          result = v12.i32[0] != 0;
          v11 += 8;
          if (v12.i32[0])
            v13 = v11 >= v8;
          else
            v13 = 1;
        }
        while (!v13);
        return result;
      }
      return 0;
    }
    if (v8 >= 4)
    {
      v18 = (v9->u32[0] | ((unint64_t)v9->u32[0] << 16)) & 0xFFFF0000FFFFLL;
      v17 = ((v18 | (v18 << 8)) & 0xFF00FF00FF00FFLL) == v7->i64[0];
      v19 = v8 & 3;
      v20 = (*(unsigned int *)((char *)v9->u32 + v19) | ((unint64_t)*(unsigned int *)((char *)v9->u32 + v19) << 16)) & 0xFFFF0000FFFFLL;
      v21 = (v20 | (v20 << 8)) & 0xFF00FF00FF00FFLL;
      v22 = *(uint64_t *)((char *)v7->i64 + 2 * v19);
      return v17 && v21 == v22;
    }
    if (v8 >= 2)
    {
      v23 = (v9->u16[0] | (v9->u16[0] << 8)) & 0xFF00FF;
      v24 = v7->i32[0];
      v25 = v8 & 1;
      v26 = (*(unsigned __int16 *)((char *)v9->u16 + v25) | (*(unsigned __int16 *)((char *)v9->u16 + v25) << 8)) & 0xFF00FF;
      v27 = *(__int32 *)((char *)v7->i32 + 2 * v25);
      return v23 == v24 && v26 == v27;
    }
    if ((_DWORD)a3 == 2)
      return v7->u16[0] == v9->u8[0];
    return 1;
  }
  if (*(unsigned __int8 *)v5 != v6)
    return 0;
  v14 = a3 - 1;
  if ((_DWORD)a3 == 1)
    return 1;
  v15 = (int8x16_t *)((char *)v5 + 1);
  v16 = (int8x16_t *)(a2 + 1);
  if ((_DWORD)a3 == 2)
  {
    if (a3 == 1)
    {
      __break(1u);
      return result;
    }
    return v15->u8[0] == v16->u8[0];
  }
  switch(31 - __clz(a3 - 2))
  {
    case 0u:
      return v15->u16[0] == v16->u16[0];
    case 1u:
      if (v15->u16[0] != v16->u16[0])
        return 0;
      return *(unsigned __int16 *)((char *)&v15->u16[-1] + (a3 - 1)) == *(unsigned __int16 *)((char *)&v16->u16[-1] + (a3 - 1));
    case 2u:
      if (v15->i32[0] != v16->i32[0])
        return 0;
      return *(__int32 *)((char *)&v15->i32[-1] + (a3 - 1)) == *(__int32 *)((char *)&v16->i32[-1]
                                                                                        + (a3 - 1));
    case 3u:
      if (v15->i64[0] != v16->i64[0])
        return 0;
      return *(uint64_t *)((char *)&v15->i64[-1] + (a3 - 1)) == *(uint64_t *)((char *)&v16->i64[-1]
                                                                                        + (a3 - 1));
    case 4u:
      v29 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)&v15[-1] + (a3 - 1)), *(int8x16_t *)((char *)&v16[-1] + (a3 - 1))), vceqq_s8(*v15, *v16));
      v29.i8[0] = vminvq_u8(v29);
      return v29.i32[0] != 0;
    default:
      v28 = (uint8x16_t)vceqq_s8(*v15, *v16);
      v28.i8[0] = vminvq_u8(v28);
      if (!v28.i32[0])
        return 0;
      if (v14 < 0x10)
        return 1;
      v30 = v14 & 0xF;
      do
      {
        v31 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v15 + v30), *(int8x16_t *)((char *)v16 + v30));
        v31.i8[0] = vminvq_u8(v31);
        result = v31.i32[0] != 0;
        v30 += 16;
        if (v31.i32[0])
          v32 = v30 >= v14;
        else
          v32 = 1;
      }
      while (!v32);
      break;
  }
  return result;
}

BOOL WTF::equalInternal<char16_t>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  unsigned __int8 *v5;
  int v6;
  unsigned int v7;
  int16x8_t *v8;
  int16x8_t *v9;
  uint8x8_t *v10;
  unsigned int v11;
  int16x8_t *v12;
  uint16x8_t v13;
  unsigned int v14;
  uint16x8_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  __int32 v24;
  uint64_t v25;
  int v26;
  int v27;
  uint16x8_t v29;
  uint16x8_t v30;
  unsigned int v31;
  uint16x8_t v32;
  BOOL v33;

  result = (a1 | a2) == 0;
  if (!a1 || !a2)
    return result;
  if (a3 != *(_DWORD *)(a1 + 4))
    return 0;
  if (!a3)
    return 1;
  v5 = *(unsigned __int8 **)(a1 + 8);
  v6 = *(unsigned __int16 *)a2;
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
  {
    if (v6 != *v5)
      return 0;
    v10 = (uint8x8_t *)(v5 + 1);
    v11 = a3 - 1;
    v12 = (int16x8_t *)(a2 + 2);
    if ((a3 - 1) >= 8)
    {
      v13 = (uint16x8_t)vceqq_s16(*v12, (int16x8_t)vmovl_u8(*v10));
      v13.i16[0] = vminvq_u16(v13);
      if (v13.i32[0])
      {
        v14 = v11 & 7;
        do
        {
          v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v12 + 2 * v14), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v10 + v14)));
          v15.i16[0] = vminvq_u16(v15);
          result = v15.i32[0] != 0;
          v14 += 8;
          if (v15.i32[0])
            v16 = v14 >= v11;
          else
            v16 = 1;
        }
        while (!v16);
        return result;
      }
      return 0;
    }
    if (v11 >= 4)
    {
      v17 = (v10->u32[0] | ((unint64_t)v10->u32[0] << 16)) & 0xFFFF0000FFFFLL;
      v22 = ((v17 | (v17 << 8)) & 0xFF00FF00FF00FFLL) == v12->i64[0];
      v18 = v11 & 3;
      v19 = (*(unsigned int *)((char *)v10->u32 + v18) | ((unint64_t)*(unsigned int *)((char *)v10->u32 + v18) << 16)) & 0xFFFF0000FFFFLL;
      v20 = (v19 | (v19 << 8)) & 0xFF00FF00FF00FFLL;
      v21 = *(uint64_t *)((char *)v12->i64 + 2 * v18);
      return v22 && v20 == v21;
    }
    if (v11 >= 2)
    {
      v23 = (v10->u16[0] | (v10->u16[0] << 8)) & 0xFF00FF;
      v24 = v12->i32[0];
      v25 = v11 & 1;
      v26 = (*(unsigned __int16 *)((char *)v10->u16 + v25) | (*(unsigned __int16 *)((char *)v10->u16 + v25) << 8)) & 0xFF00FF;
      v27 = *(__int32 *)((char *)v12->i32 + 2 * v25);
      return v23 == v24 && v26 == v27;
    }
    if ((_DWORD)a3 == 2)
      return v12->u16[0] == v10->u8[0];
    return 1;
  }
  if (*(unsigned __int16 *)v5 != v6)
    return 0;
  v7 = a3 - 1;
  if ((_DWORD)a3 == 1)
    return 1;
  v8 = (int16x8_t *)(v5 + 2);
  v9 = (int16x8_t *)(a2 + 2);
  if ((_DWORD)a3 == 2)
  {
    if (a3 == 1)
      __break(1u);
    else
      return v8->u16[0] == v9->u16[0];
  }
  else
  {
    switch(31 - __clz(a3 - 2))
    {
      case 0u:
        result = v8->i32[0] == v9->i32[0];
        break;
      case 1u:
        if (v8->i32[0] != v9->i32[0])
          return 0;
        result = *(__int32 *)((char *)&v8->i32[-1] + 2 * (a3 - 1)) == *(__int32 *)((char *)&v9->i32[-1]
                                                                                               + 2
                                                                                               * (a3 - 1));
        break;
      case 2u:
        if (v8->i64[0] != v9->i64[0])
          return 0;
        result = *(uint64_t *)((char *)&v8->i64[-1] + 2 * (a3 - 1)) == *(uint64_t *)((char *)&v9->i64[-1]
                                                                                               + 2
                                                                                               * (a3 - 1));
        break;
      case 3u:
        v30 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)((char *)v8 + 2 * (a3 - 1) - 16), *(int16x8_t *)((char *)v9 + 2 * (a3 - 1) - 16)), (int8x16_t)vceqq_s16(*v8, *v9));
        v30.i16[0] = vminvq_u16(v30);
        result = v30.i32[0] != 0;
        break;
      default:
        v29 = (uint16x8_t)vceqq_s16(*v8, *v9);
        v29.i16[0] = vminvq_u16(v29);
        if (!v29.i32[0])
          return 0;
        if (v7 < 8)
          return 1;
        v31 = v7 & 7;
        do
        {
          v32 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v8 + 2 * v31), *(int16x8_t *)((char *)v9 + 2 * v31));
          v32.i16[0] = vminvq_u16(v32);
          result = v32.i32[0] != 0;
          v31 += 8;
          if (v32.i32[0])
            v33 = v31 >= v7;
          else
            v33 = 1;
        }
        while (!v33);
        break;
    }
  }
  return result;
}

BOOL WTF::equal(unint64_t this, unint64_t a2, const unsigned __int8 *a3)
{
  _BOOL8 result;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;

  result = (this | a2) == 0;
  if (this && a2)
  {
    v5 = *(unsigned int *)(this + 4);
    v6 = *(unsigned __int8 **)(this + 8);
    if ((*(_BYTE *)(this + 16) & 4) != 0)
    {
      if ((_DWORD)v5)
      {
        v11 = *(unsigned int *)(this + 4);
        v12 = (unsigned __int8 *)a2;
        while (1)
        {
          v14 = *v12++;
          v13 = v14;
          if (!v14 || *v6 != v13)
            break;
          ++v6;
          if (!--v11)
            return *(_BYTE *)(a2 + v5) == 0;
        }
        return 0;
      }
    }
    else if ((_DWORD)v5)
    {
      v7 = *(unsigned int *)(this + 4);
      v8 = (unsigned __int8 *)a2;
      while (1)
      {
        v10 = *v8++;
        v9 = v10;
        if (!v10 || *(unsigned __int16 *)v6 != v9)
          break;
        v6 += 2;
        if (!--v7)
          return *(_BYTE *)(a2 + v5) == 0;
      }
      return 0;
    }
    return *(_BYTE *)(a2 + v5) == 0;
  }
  return result;
}

BOOL WTF::equalIgnoringNullity(WTF *this, WTF::StringImpl *a2, WTF::StringImpl *a3)
{
  BOOL v3;
  char v4;

  if (this || !a2)
  {
    v3 = this != 0;
    if (this)
    {
      if (!a2)
      {
        v3 = 1;
        if (!*((_DWORD *)this + 1))
          return 1;
      }
    }
  }
  else
  {
    if (!*((_DWORD *)a2 + 1))
      return 1;
    v3 = 0;
  }
  if (this == a2)
    return 1;
  v4 = !v3;
  if (!a2)
    v4 = 1;
  return (v4 & 1) == 0 && WTF::equal(this, a2, a3);
}

BOOL WTF::equalIgnoringASCIICase(WTF *this, const WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  _BOOL8 result;

  if (this == a2)
    return 1;
  result = 0;
  if (this)
  {
    if (a2)
      return WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl,WTF::StringImpl>((uint64_t)this, (uint64_t)a2);
  }
  return result;
}

uint64_t WTF::StringImpl::defaultWritingDirection(WTF::StringImpl *this)
{
  char *v1;
  char *v2;
  unsigned int v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;

  if (!this)
    return 0;
  v1 = (char *)*((_QWORD *)this + 1);
  v2 = ((*((unsigned int *)this + 1) | ((unint64_t)((*((_DWORD *)this + 4) >> 2) & 1) << 32)) & 0x100000000) != 0
     ? &v1[*((unsigned int *)this + 1)]
     : &v1[2 * *((unsigned int *)this + 1)];
  if (v1 == v2)
    return 0;
  if (((*((unsigned int *)this + 1) | ((unint64_t)((*((_DWORD *)this + 4) >> 2) & 1) << 32)) & 0x100000000) != 0)
  {
    while (1)
    {
      v3 = MEMORY[0x19AEBBFB8](*v1);
      if (!v3)
        break;
      if (v3 == 1 || v3 == 13)
        return 0x100000001;
      if (++v1 == v2)
        return 0;
    }
  }
  else
  {
    while (1)
    {
      v7 = *(unsigned __int16 *)v1;
      if ((v7 & 0xF800) == 0xD800 && v2 - v1 != 2 && (v7 & 0x400) == 0)
      {
        v8 = *((unsigned __int16 *)v1 + 1);
        v9 = v8 & 0xFC00;
        v10 = v8 + ((_DWORD)v7 << 10) - 56613888;
        if (v9 == 56320)
          v7 = v10;
        else
          v7 = *(unsigned __int16 *)v1;
      }
      v3 = MEMORY[0x19AEBBFB8](v7);
      if (!v3)
        break;
      if (v3 == 1 || v3 == 13)
        return 0x100000001;
      if (v2 - v1 == 2)
      {
        v6 = 1;
      }
      else
      {
        v6 = 1;
        if ((*(_WORD *)v1 & 0xFC00) == 0xD800)
        {
          if ((*((_WORD *)v1 + 1) & 0xFC00) == 0xDC00)
            v6 = 2;
          else
            v6 = 1;
        }
      }
      v1 += 2 * v6;
      if (v1 == v2)
        return 0;
    }
  }
  return v3 | 0x100000000;
}

void WTF::StringImpl::adopt(unsigned int *a1@<X0>, uint64_t *a2@<X8>)
{
  size_t v3;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;

  v3 = *a1;
  if ((_DWORD)v3)
  {
    v5 = WTF::fastCompactMalloc((WTF *)0x20);
    v6 = (_BYTE *)*((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = 0;
    *(_DWORD *)v5 = 2;
    *(_DWORD *)(v5 + 4) = v3;
    *(_QWORD *)(v5 + 8) = 0;
    *(_DWORD *)(v5 + 16) = 5;
    v7 = (_BYTE *)WTF::fastCompactMalloc((WTF *)v3);
    v15 = v7;
    if ((_DWORD)v3 == 1)
      *v7 = *v6;
    else
      memcpy(v7, v6, v3);
    *(_QWORD *)(v5 + 8) = v15;
    *a2 = v5;
    WTF::fastFree((unint64_t)v6, v8, v9, v10, v11, v12, v13, v14);
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a2 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
  }
}

{
  uint64_t v3;
  uint64_t v5;
  _WORD *v6;
  _WORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;

  v3 = *a1;
  if ((_DWORD)v3)
  {
    v5 = WTF::fastCompactMalloc((WTF *)0x20);
    v6 = (_WORD *)*((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = 0;
    *(_DWORD *)v5 = 2;
    *(_DWORD *)(v5 + 4) = v3;
    *(_QWORD *)(v5 + 8) = 0;
    *(_DWORD *)(v5 + 16) = 1;
    v7 = (_WORD *)WTF::fastCompactMalloc((WTF *)(2 * v3));
    v15 = v7;
    if ((_DWORD)v3 == 1)
      *v7 = *v6;
    else
      memcpy(v7, v6, 2 * v3);
    *(_QWORD *)(v5 + 8) = v15;
    *a2 = v5;
    WTF::fastFree((unint64_t)v6, v8, v9, v10, v11, v12, v13, v14);
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a2 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
  }
}

void WTF::StringImpl::utf8ForCharacters(char *__src@<X0>, size_t a2@<X1>, uint64_t a3@<X8>, float a4@<S1>)
{
  size_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  int8x16_t *v11;
  unint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint8x16_t v15;
  char *v16;
  size_t v17;
  size_t v18;
  unint64_t v19;
  WTF *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unsigned int v24;
  BOOL v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  unsigned int v39;
  _BYTE v40[1024];
  unint64_t v41;

  if (!a2)
  {
    v7 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)a3 = v7;
    *(_BYTE *)(v7 + 16) = 0;
    goto LABEL_5;
  }
  v6 = a2 >> 30;
  if (a2 >> 30)
  {
    *(_BYTE *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 1;
    return;
  }
  v9 = 16 - (__src & 0xF);
  if (a2 >= v9)
    v10 = 16 - (__src & 0xF);
  else
    v10 = a2;
  do
  {
    if (__src[v6] < 0)
    {
      v16 = &__src[v6];
      goto LABEL_19;
    }
    ++v6;
  }
  while (v10 != v6);
  if (a2 <= v9)
    goto LABEL_37;
  v11 = (int8x16_t *)&__src[v10];
  v12 = a2 - v10;
  v13 = vcltzq_s8(*v11);
  LOBYTE(a4) = vmaxvq_u8((uint8x16_t)v13);
  if (a4 != 0.0)
  {
LABEL_16:
    v15 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_19911D0A0, v13);
    v15.i8[0] = vminvq_u8(v15);
    if (v12 <= v15.u32[0])
      goto LABEL_37;
    v16 = &v11->i8[v15.u32[0]];
LABEL_19:
    v17 = v16 - __src;
    v18 = a2 - (v16 - __src);
    v19 = v16 - __src + 2 * v18;
    v38 = (WTF *)v40;
    v39 = (_DWORD)v16 - (_DWORD)__src + 2 * v18;
    v20 = (WTF *)v40;
    if (v19 >= 0x401)
    {
      if (HIDWORD(v19))
      {
        __break(0xC471u);
        goto LABEL_44;
      }
      v20 = (WTF *)WTF::fastMalloc((WTF *)v19);
      v38 = v20;
    }
    memcpy(v20, __src, v17);
    if (a2 >= v17)
    {
      v21 = v39 - v17;
      if (v39 >= v17)
      {
        v22 = (unsigned __int8 *)&__src[v17];
        v41 = 0;
        while (1)
        {
          v23 = v41;
          if (!v18)
            break;
          if (v41 == v21)
            goto LABEL_31;
          v24 = *v22++;
          --v18;
          if (WTF::Unicode::append<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)v38 + v17, v21, &v41, v24))
          {
            v23 = v41;
            break;
          }
        }
        v25 = v21 >= v23;
        v21 = v23;
        if (v25)
        {
LABEL_31:
          v26 = v21 + v17;
          if (v21 + v17 <= v39)
          {
            *(_QWORD *)a3 = 0;
            if (!v38)
              goto LABEL_5;
            if (v26 >= 0xFFFFFFFFFFFFFFF0)
            {
              __break(0xC471u);
              goto LABEL_47;
            }
            if (v26 == -17)
            {
              __break(0xC471u);
              JUMPOUT(0x197B1172CLL);
            }
            v27 = WTF::fastMalloc((WTF *)(v26 + 17));
            *(_DWORD *)v27 = 1;
            *(_QWORD *)(v27 + 8) = v26;
            *(_QWORD *)a3 = v27;
            v28 = v27 + 16;
            memcpy((void *)(v27 + 16), v38, v26);
            *(_BYTE *)(v28 + v26) = 0;
            *(_DWORD *)(a3 + 8) = 0;
            if (v40 != (_BYTE *)v38)
              WTF::fastFree((unint64_t)v38, v29, v30, v31, v32, v33, v34, v35);
            return;
          }
        }
      }
    }
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  while (v12 >= 0x11)
  {
    v12 -= 16;
    v14 = v11[1];
    ++v11;
    v13 = vcltzq_s8(v14);
    LOBYTE(a4) = vmaxvq_u8((uint8x16_t)v13);
    if (a4 != 0.0)
      goto LABEL_16;
  }
LABEL_37:
  *(_QWORD *)a3 = 0;
  if (__src)
  {
    if (a2 < 0xFFFFFFFFFFFFFFF0)
    {
      if (a2 != -17)
      {
        v36 = WTF::fastMalloc((WTF *)(a2 + 17));
        *(_DWORD *)v36 = 1;
        *(_QWORD *)(v36 + 8) = a2;
        *(_QWORD *)a3 = v36;
        v37 = v36 + 16;
        memcpy((void *)(v36 + 16), __src, a2);
        *(_BYTE *)(v37 + a2) = 0;
        goto LABEL_5;
      }
      __break(0xC471u);
LABEL_47:
      JUMPOUT(0x197B11724);
    }
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x197B1173CLL);
  }
LABEL_5:
  *(_DWORD *)(a3 + 8) = 0;
}

void WTF::StringImpl::utf8ForCharacters(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v11;
  int v12;
  WTF *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  unsigned int v26;
  _BYTE v27[1024];
  unint64_t v28[5];

  if (!a2)
  {
    v11 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)a9 = v11;
    *(_BYTE *)(v11 + 16) = 0;
    *(_DWORD *)(a9 + 8) = 0;
    return;
  }
  if (a2 >= 0x2AAAAAAB)
  {
    *(_BYTE *)a9 = 0;
    *(_DWORD *)(a9 + 8) = 1;
    return;
  }
  v12 = a3;
  v25 = (WTF *)v27;
  v26 = 3 * a2;
  v14 = (WTF *)v27;
  if (a2 >= 0x156)
  {
    v14 = (WTF *)WTF::fastMalloc((WTF *)(3 * a2));
    v25 = v14;
  }
  if (!v12 || v12 == 2)
  {
    WTF::Unicode::convertReplacingInvalidSequences(a1, a2, (uint64_t)v14, v26, (uint64_t)v28);
    v20 = LOBYTE(v28[0]);
    v21 = v28[2];
  }
  else
  {
    if (v12 != 1)
    {
      v21 = 0;
      goto LABEL_36;
    }
    v15 = 0;
    v28[0] = 0;
    while (1)
    {
      if (v15 >= a2)
      {
        v20 = 0;
        goto LABEL_30;
      }
      v16 = v15 + 1;
      a4 = *(unsigned __int16 *)(a1 + 2 * v15);
      if (v15 + 1 == a2 || (a4 & 0xFC00) != 0xD800)
      {
        ++v15;
      }
      else
      {
        if (a2 <= v16)
          goto LABEL_43;
        v17 = *(unsigned __int16 *)(a1 + 2 * v16);
        v18 = (v17 & 0xFC00) == 56320;
        v19 = v17 + ((_DWORD)a4 << 10) - 56613888;
        if (v18)
          v15 += 2;
        else
          ++v15;
        a4 = v18 ? v19 : a4;
      }
      if (a4 >> 11 == 27)
        break;
      if (v28[0] == v26
        || WTF::Unicode::append<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)v14, v26, v28, a4))
      {
        v20 = 2;
        goto LABEL_30;
      }
    }
    v20 = 1;
LABEL_30:
    v21 = v28[0];
    if (v28[0] > v26)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
  }
  if (v20 != 1)
  {
    if (v21 <= v26)
    {
      v14 = v25;
      *(_QWORD *)a9 = 0;
      if (!v25)
      {
        *(_DWORD *)(a9 + 8) = 0;
        v22 = 0;
        if (!v27)
          return;
        goto LABEL_40;
      }
LABEL_36:
      if (v21 <= 0xFFFFFFFFFFFFFFEELL)
      {
        v23 = WTF::fastMalloc((WTF *)(v21 + 17));
        *(_DWORD *)v23 = 1;
        *(_QWORD *)(v23 + 8) = v21;
        *(_QWORD *)a9 = v23;
        v24 = v23 + 16;
        memcpy((void *)(v23 + 16), v14, v21);
        *(_BYTE *)(v24 + v21) = 0;
        *(_DWORD *)(a9 + 8) = 0;
        v22 = (unint64_t)v25;
        if (v27 == (_BYTE *)v25)
          return;
        goto LABEL_40;
      }
LABEL_44:
      __break(0xC471u);
      JUMPOUT(0x197B119CCLL);
    }
    goto LABEL_43;
  }
  *(_BYTE *)a9 = 1;
  *(_DWORD *)(a9 + 8) = 1;
  v22 = (unint64_t)v25;
  if (v27 == (_BYTE *)v25)
    return;
LABEL_40:
  if (v22)
    WTF::fastFree(v22, (void *)a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::StringImpl::utf8ForCharactersIntoBuffer@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18[4];

  v6 = result;
  if (!a3 || a3 == 2)
  {
    result = WTF::Unicode::convertReplacingInvalidSequences(result, a2, *(_QWORD *)a4, *(unsigned int *)(a4 + 12), (uint64_t)v18);
    v16 = LOBYTE(v18[0]);
    v17 = v18[2];
LABEL_26:
    if (v16 == 1)
    {
      *(_BYTE *)a5 = 1;
LABEL_29:
      *(_DWORD *)(a5 + 8) = v16;
      return result;
    }
LABEL_28:
    v16 = 0;
    *(_QWORD *)a5 = v17;
    goto LABEL_29;
  }
  if (a3 != 1)
  {
    v17 = 0;
    goto LABEL_28;
  }
  v8 = 0;
  v9 = *(_QWORD *)a4;
  v10 = *(unsigned int *)(a4 + 12);
  v18[0] = 0;
  while (1)
  {
    if (v8 >= a2)
    {
      v16 = 0;
      goto LABEL_25;
    }
    v11 = v8 + 1;
    v12 = *(unsigned __int16 *)(v6 + 2 * v8);
    if (v8 + 1 != a2 && (v12 & 0xFC00) == 0xD800)
      break;
    ++v8;
    if (v12 >> 11 == 27)
      goto LABEL_24;
LABEL_18:
    if (v18[0] != v10)
    {
      result = WTF::Unicode::append<(WTF::Unicode::Replacement)0,char8_t>(v9, v10, v18, v12);
      if (!(_DWORD)result)
        continue;
    }
    v16 = 2;
    goto LABEL_25;
  }
  if (a2 <= v11)
    goto LABEL_30;
  v13 = *(unsigned __int16 *)(v6 + 2 * v11);
  v14 = (v13 & 0xFC00) == 56320;
  v15 = v13 + (v12 << 10) - 56613888;
  if (v14)
    v8 += 2;
  else
    ++v8;
  if (v14)
    v12 = v15;
  if (v12 >> 11 != 27)
    goto LABEL_18;
LABEL_24:
  v16 = 1;
LABEL_25:
  v17 = v18[0];
  if (v18[0] <= v10)
    goto LABEL_26;
LABEL_30:
  __break(1u);
  return result;
}

void WTF::StringImpl::tryGetUTF8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, float a9@<S1>)
{
  char *v11;
  size_t v12;

  v11 = *(char **)(a1 + 8);
  v12 = *(unsigned int *)(a1 + 4);
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
    WTF::StringImpl::utf8ForCharacters(v11, v12, a8, a9);
  else
    WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::StringImpl::utf8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, WTF **a8@<X8>, float a9@<S1>)
{
  char *v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  int v22;
  WTF *v23;
  int v24;

  v12 = *(char **)(a1 + 8);
  v13 = *(unsigned int *)(a1 + 4);
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
    WTF::StringImpl::utf8ForCharacters(v12, v13, (uint64_t)&v23, a9);
  else
    WTF::StringImpl::utf8ForCharacters((uint64_t)v12, v13, a2, a3, a4, a5, a6, a7, (uint64_t)&v23);
  if (v24)
  {
    __break(0xC471u);
    JUMPOUT(0x197B11C14);
  }
  v21 = v23;
  if (v23)
  {
    v22 = (*(_DWORD *)v23)++;
    *a8 = v21;
    if (v22)
      *(_DWORD *)v21 = v22;
    else
      WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
  }
  else
  {
    *a8 = 0;
  }
}

uint64_t WTF::StringImpl::hashSlowCase(WTF::StringImpl *this)
{
  unsigned int v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;

  v1 = -1640531527;
  v2 = *((_DWORD *)this + 4);
  v3 = *((_QWORD *)this + 1);
  v4 = *((unsigned int *)this + 1);
  if ((v2 & 4) != 0)
  {
    if (v4 >= 2)
    {
      v9 = 0;
      do
      {
        v10 = (*(unsigned __int8 *)(v3 + v9 + 1) << 11) ^ ((v1 + *(unsigned __int8 *)(v3 + v9)) << 16) ^ (v1 + *(unsigned __int8 *)(v3 + v9));
        v1 = v10 + (v10 >> 11);
        v11 = v9 + 3;
        v9 += 2;
      }
      while (v11 < v4);
    }
    if ((v4 & 1) != 0)
    {
      v8 = *(unsigned __int8 *)(v4 + v3 - 1);
      goto LABEL_12;
    }
  }
  else
  {
    if (v4 >= 2)
    {
      v5 = 0;
      do
      {
        v6 = (*(unsigned __int16 *)(v3 + 2 * v5 + 2) << 11) ^ ((v1 + *(unsigned __int16 *)(v3 + 2 * v5)) << 16) ^ (v1 + *(unsigned __int16 *)(v3 + 2 * v5));
        v1 = v6 + (v6 >> 11);
        v7 = v5 + 3;
        v5 += 2;
      }
      while (v7 < v4);
    }
    if ((v4 & 1) != 0)
    {
      v8 = *(unsigned __int16 *)(v3 + 2 * v4 - 2);
LABEL_12:
      v1 = ((v1 + v8) ^ ((v1 + v8) << 11)) + (((v1 + v8) ^ ((v1 + v8) << 11)) >> 17);
    }
  }
  v12 = (v1 ^ (8 * v1)) + ((v1 ^ (8 * v1)) >> 5);
  v13 = (v12 ^ (4 * v12)) + ((v12 ^ (4 * v12)) >> 15);
  v14 = v13 ^ (v13 << 10);
  if ((v14 & 0xFFFFFF) != 0)
    v15 = v14 << 8;
  else
    v15 = 0x80000000;
  v16 = v15 | v2;
  *((_DWORD *)this + 4) = v16;
  return v16 >> 8;
}

uint64_t WTF::StringImpl::concurrentHash(WTF::StringImpl *this)
{
  unsigned int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v1 = -1640531527;
  v2 = *((_QWORD *)this + 1);
  v3 = *((unsigned int *)this + 1);
  if ((*((_BYTE *)this + 16) & 4) != 0)
  {
    if (v3 >= 2)
    {
      v8 = 0;
      do
      {
        v9 = (*(unsigned __int8 *)(v2 + v8 + 1) << 11) ^ ((v1 + *(unsigned __int8 *)(v2 + v8)) << 16) ^ (v1 + *(unsigned __int8 *)(v2 + v8));
        v1 = v9 + (v9 >> 11);
        v10 = v8 + 3;
        v8 += 2;
      }
      while (v10 < v3);
    }
    if ((v3 & 1) != 0)
    {
      v7 = *(unsigned __int8 *)(v3 + v2 - 1);
      goto LABEL_12;
    }
  }
  else
  {
    if (v3 >= 2)
    {
      v4 = 0;
      do
      {
        v5 = (*(unsigned __int16 *)(v2 + 2 * v4 + 2) << 11) ^ ((v1 + *(unsigned __int16 *)(v2 + 2 * v4)) << 16) ^ (v1 + *(unsigned __int16 *)(v2 + 2 * v4));
        v1 = v5 + (v5 >> 11);
        v6 = v4 + 3;
        v4 += 2;
      }
      while (v6 < v3);
    }
    if ((v3 & 1) != 0)
    {
      v7 = *(unsigned __int16 *)(v2 + 2 * v3 - 2);
LABEL_12:
      v1 = ((v1 + v7) ^ ((v1 + v7) << 11)) + (((v1 + v7) ^ ((v1 + v7) << 11)) >> 17);
    }
  }
  v11 = (v1 ^ (8 * v1)) + ((v1 ^ (8 * v1)) >> 5);
  v12 = (v11 ^ (4 * v11)) + ((v11 ^ (4 * v11)) >> 15);
  v13 = (v12 ^ (v12 << 10)) & 0xFFFFFF;
  if (v13)
    return v13;
  else
    return 0x800000;
}

uint64_t WTF::equalIgnoringNullity(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  BOOL v6;
  unsigned int v7;
  int16x8_t *v8;
  int16x8_t *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  uint16x8_t v16;
  uint16x8_t v17;
  unsigned int v18;
  uint16x8_t v19;
  BOOL v20;

  if (!a3)
    return a2 == 0;
  v3 = *(unsigned int *)(a3 + 4);
  if (a2 != v3)
    return 0;
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if (a2)
    {
      v10 = *(unsigned __int8 **)(a3 + 8);
      v11 = 2 * a2 - 2;
      do
      {
        v13 = *(unsigned __int16 *)result;
        result += 2;
        v12 = v13;
        v14 = *v10++;
        v6 = v12 == v14;
        v5 = v12 == v14;
        v15 = !v6 || v11 == 0;
        v11 -= 2;
      }
      while (!v15);
      return v5;
    }
    return 1;
  }
  v4 = *(unsigned __int16 **)(a3 + 8);
  v5 = (_DWORD)v3 == (_DWORD)a2 && v4 == (unsigned __int16 *)result;
  v6 = v4 != (unsigned __int16 *)result && (_DWORD)v3 == (_DWORD)a2;
  if (!v6)
    return v5;
  if (!(_DWORD)v3)
    return 1;
  if (*(unsigned __int16 *)result != *v4)
    return 0;
  v7 = a2 - 1;
  if ((_DWORD)a2 == 1)
    return 1;
  v8 = (int16x8_t *)(result + 2);
  v9 = (int16x8_t *)(v4 + 1);
  if ((_DWORD)a2 == 2)
  {
    if (a2 == 1)
      __break(1u);
    else
      return v8->u16[0] == v9->u16[0];
  }
  else
  {
    switch(31 - __clz(a2 - 2))
    {
      case 0u:
        result = v8->i32[0] == v9->i32[0];
        break;
      case 1u:
        if (v8->i32[0] != v9->i32[0])
          return 0;
        result = *(_DWORD *)(result + 2 * a2 - 4) == *(_DWORD *)&v4[a2 - 2];
        break;
      case 2u:
        if (v8->i64[0] != v9->i64[0])
          return 0;
        result = *(_QWORD *)(result + 2 * a2 - 8) == *(_QWORD *)&v4[a2 - 4];
        break;
      case 3u:
        v17 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)(result + 2 * a2 - 16), *(int16x8_t *)&v4[a2 - 8]), (int8x16_t)vceqq_s16(*(int16x8_t *)(result + 2), *(int16x8_t *)(v4 + 1)));
        v17.i16[0] = vminvq_u16(v17);
        result = v17.i32[0] != 0;
        break;
      default:
        v16 = (uint16x8_t)vceqq_s16(*v8, *v9);
        v16.i16[0] = vminvq_u16(v16);
        v5 = v16.u32[0];
        if (!v16.i32[0])
          return v5;
        if (v7 < 8)
          return 1;
        v18 = v7 & 7;
        do
        {
          v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v8 + 2 * v18), *(int16x8_t *)((char *)v9 + 2 * v18));
          v19.i16[0] = vminvq_u16(v19);
          v5 = v19.i32[0] != 0;
          v18 += 8;
          if (v19.i32[0])
            v20 = v18 >= v7;
          else
            v20 = 1;
        }
        while (!v20);
        return v5;
    }
  }
  return result;
}

BOOL WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl,WTF::StringImpl>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;

  v2 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 4))
    return 0;
  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(unsigned __int8 **)(a1 + 8);
  v5 = *(unsigned __int8 **)(a2 + 8);
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
  {
    if ((v3 & 4) != 0)
    {
      if (!(_DWORD)v2)
        return 1;
      if (WTF::asciiCaseFoldTable[*v4] != WTF::asciiCaseFoldTable[*v5])
        return 0;
      v17 = 1;
      do
      {
        v12 = v17;
        if (v2 == v17)
          break;
        v18 = WTF::asciiCaseFoldTable[v4[v17]];
        v19 = WTF::asciiCaseFoldTable[v5[v17++]];
      }
      while (v18 == v19);
    }
    else
    {
      if (!(_DWORD)v2)
        return 1;
      if ((*(unsigned __int16 *)v5 | (32 * (*(unsigned __int16 *)v5 - 65 < 0x1A))) != WTF::asciiCaseFoldTable[*v4])
        return 0;
      v11 = 1;
      do
      {
        v12 = v11;
        if (v2 == v11)
          break;
        v13 = WTF::asciiCaseFoldTable[v4[v11]];
        v14 = *(unsigned __int16 *)&v5[2 * v11] | (32 * (*(unsigned __int16 *)&v5[2 * v11] - 65 < 0x1A));
        ++v11;
      }
      while (v14 == v13);
    }
    return v12 >= v2;
  }
  if ((v3 & 4) != 0)
  {
    if (!(_DWORD)v2)
      return 1;
    if ((*(unsigned __int16 *)v4 | (32 * (*(unsigned __int16 *)v4 - 65 < 0x1A))) != WTF::asciiCaseFoldTable[*v5])
      return 0;
    v15 = 1;
    do
    {
      v12 = v15;
      if (v2 == v15)
        break;
      v16 = *(unsigned __int16 *)&v4[2 * v15] | (32 * (*(unsigned __int16 *)&v4[2 * v15] - 65 < 0x1A));
      ++v15;
    }
    while (v16 == WTF::asciiCaseFoldTable[v5[v12]]);
    return v12 >= v2;
  }
  if (!(_DWORD)v2)
    return 1;
  if ((*(unsigned __int16 *)v4 | (32 * (*(unsigned __int16 *)v4 - 65 < 0x1A))) != (*(unsigned __int16 *)v5 | (32 * (*(unsigned __int16 *)v5 - 65 < 0x1A))))
    return 0;
  v6 = 1;
  do
  {
    v7 = v6;
    if (v2 == v6)
      break;
    v8 = *(unsigned __int16 *)&v4[2 * v6] | (32 * (*(unsigned __int16 *)&v4[2 * v6] - 65 < 0x1A));
    v9 = *(unsigned __int16 *)&v5[2 * v6] | (32 * (*(unsigned __int16 *)&v5[2 * v6] - 65 < 0x1A));
    ++v6;
  }
  while (v8 == v9);
  return v7 >= v2;
}

CFStringRef WTF::StringImpl::createCFString@<X0>(WTF::StringImpl *this@<X0>, CFStringRef *a2@<X8>)
{
  _opaque_pthread_t *v4;
  const __CFAllocator *v5;
  const UInt8 *v6;
  CFIndex v7;
  CFStringRef result;
  const UInt8 *v9;
  CFIndex v10;
  CFAllocatorContext v11;

  if (*((_DWORD *)this + 1)
    && ((v4 = pthread_self(), pthread_equal(v4, (pthread_t)WTF::s_webThreadPthread)) || pthread_main_np())
    && (!WebCoreWebThreadIsLockedOrDisabled || (WebCoreWebThreadIsLockedOrDisabled() & 1) != 0))
  {
    {
      v5 = (const __CFAllocator *)WTF::StringWrapperCFAllocator::allocator(void)::allocator;
    }
    else
    {
      *(_OWORD *)&v11.copyDescription = xmmword_1E35721F0;
      *(_OWORD *)&v11.reallocate = *(_OWORD *)&off_1E3572200;
      v11.preferredSize = (CFAllocatorPreferredSizeCallBack)WTF::StringWrapperCFAllocator::preferredSize;
      *(_OWORD *)&v11.version = __const__ZZN3WTF24StringWrapperCFAllocatorL9allocatorEvENK3__0clEv_context;
      *(_OWORD *)&v11.retain = *(_OWORD *)&off_1E35721E0;
      v5 = CFAllocatorCreate(0, &v11);
      WTF::StringWrapperCFAllocator::allocator(void)::allocator = (uint64_t)v5;
    }
    WTF::StringWrapperCFAllocator::currentString = (uint64_t)this;
    v6 = (const UInt8 *)*((_QWORD *)this + 1);
    v7 = *((unsigned int *)this + 1);
    if ((*((_BYTE *)this + 16) & 4) != 0)
      result = CFStringCreateWithBytesNoCopy(v5, v6, v7, 0x201u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    else
      result = CFStringCreateWithCharactersNoCopy(v5, (const UniChar *)v6, v7, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    *a2 = result;
    WTF::StringWrapperCFAllocator::currentString = 0;
  }
  else
  {
    v9 = (const UInt8 *)*((_QWORD *)this + 1);
    v10 = *((unsigned int *)this + 1);
    if ((*((_BYTE *)this + 16) & 4) != 0)
      result = CFStringCreateWithBytes(0, v9, v10, 0x201u, 0);
    else
      result = CFStringCreateWithCharacters(0, (const UniChar *)v9, v10);
    *a2 = result;
  }
  return result;
}

const __CFString *WTF::StringWrapperCFAllocator::copyDescription(WTF::StringWrapperCFAllocator *this, const void *a2)
{
  return CFSTR("WTF::String-based allocator");
}

_QWORD *WTF::StringWrapperCFAllocator::allocate(WTF::StringWrapperCFAllocator *this, uint64_t a2, unint64_t a3, void *a4)
{
  _opaque_pthread_t *v5;
  _DWORD *v6;
  _QWORD *v7;
  _QWORD *v9;

  v5 = pthread_self();
  if ((pthread_equal(v5, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
    && (!WebCoreWebThreadIsLockedOrDisabled || WebCoreWebThreadIsLockedOrDisabled()))
  {
    v6 = (_DWORD *)WTF::StringWrapperCFAllocator::currentString;
    if (WTF::StringWrapperCFAllocator::currentString)
    {
      WTF::StringWrapperCFAllocator::currentString = 0;
      *v6 += 2;
    }
    v7 = (_QWORD *)WTF::fastMalloc((WTF::StringWrapperCFAllocator *)((char *)this + 8));
    *v7 = v6;
    return v7 + 1;
  }
  else
  {
    v9 = (_QWORD *)WTF::fastMalloc((WTF::StringWrapperCFAllocator *)((char *)this + 8));
    *v9 = 0;
    return v9 + 1;
  }
}

uint64_t WTF::StringWrapperCFAllocator::reallocate(WTF::StringWrapperCFAllocator *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (uint64_t)WTF::fastRealloc((unint64_t)this - 8, (unint64_t)a2 + 8, a3, a4, a5, a6, a7, a8) + 8;
}

void WTF::StringWrapperCFAllocator::deallocate(WTF::StringWrapperCFAllocator *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  _QWORD *v9;
  _opaque_pthread_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v8 = (char *)this - 8;
  if (!*((_QWORD *)this - 1))
  {
    WTF::fastFree((unint64_t)this - 8, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = off_1E3572228;
  v9[1] = v8;
  v18 = v9;
  v10 = pthread_self();
  if ((pthread_equal(v10, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
    && (!WebCoreWebThreadIsLockedOrDisabled || WebCoreWebThreadIsLockedOrDisabled()))
  {
    (*(void (**)(_QWORD *))(*v9 + 16))(v9);
LABEL_12:
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    return;
  }
  if (WTF::s_webRunLoop)
    v17 = WTF::s_webRunLoop;
  else
    v17 = WTF::s_mainRunLoop;
  WTF::RunLoop::dispatch(v17, (uint64_t *)&v18, v11, v12, v13, v14, v15, v16);
  v9 = v18;
  if (v18)
    goto LABEL_12;
}

void WTF::Detail::CallableWrapper<WTF::StringWrapperCFAllocator::deallocate(void *,void *)::$_0,void>::call(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl **v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *(WTF::StringImpl ***)(a1 + 8);
  if (*(_DWORD *)*v9 == 2)
  {
    WTF::StringImpl::~StringImpl(*v9, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    v9 = *(WTF::StringImpl ***)(a1 + 8);
  }
  else
  {
    *(_DWORD *)*v9 -= 2;
  }
  WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
}

id WTF::StringImpl::operator NSString *(WTF::StringImpl *a1)
{
  id v2;

  WTF::StringImpl::createCFString(a1, (CFStringRef *)&v2);
  return v2;
}

double WTF::StringPrintStream::StringPrintStream(WTF::StringPrintStream *this)
{
  double result;

  *((_BYTE *)this + 32) = 0;
  *(_QWORD *)this = off_1E3572250;
  *((_QWORD *)this + 1) = (char *)this + 32;
  result = 0.0;
  *((_OWORD *)this + 1) = xmmword_199122F80;
  return result;
}

{
  double result;

  *((_BYTE *)this + 32) = 0;
  *(_QWORD *)this = off_1E3572250;
  *((_QWORD *)this + 1) = (char *)this + 32;
  result = 0.0;
  *((_OWORD *)this + 1) = xmmword_199122F80;
  return result;
}

void WTF::StringPrintStream::~StringPrintStream(WTF::StringPrintStream *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringPrintStream *v9;

  v9 = (WTF::StringPrintStream *)*((_QWORD *)this + 1);
  if (v9 != (WTF::StringPrintStream *)((char *)this + 32))
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
}

{
  WTF::StringPrintStream *v9;

  v9 = (WTF::StringPrintStream *)*((_QWORD *)this + 1);
  if (v9 != (WTF::StringPrintStream *)((char *)this + 32))
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
}

{
  WTF::StringPrintStream *v9;

  v9 = (WTF::StringPrintStream *)*((_QWORD *)this + 1);
  if (v9 != (WTF::StringPrintStream *)((char *)this + 32))
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::StringPrintStream::vprintf(WTF::StringPrintStream *this, const char *__format, va_list a3)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringPrintStream *v16;

  result = vsnprintf((char *)(*((_QWORD *)this + 1) + *((_QWORD *)this + 2)), *((_QWORD *)this + 3) - *((_QWORD *)this + 2), __format, a3);
  v6 = *((_QWORD *)this + 2);
  v7 = v6 + (int)result + 1;
  if (v7 > *((_QWORD *)this + 3))
  {
    *((_QWORD *)this + 3) = 2 * v7;
    v8 = (void *)WTF::fastMalloc((WTF *)(2 * v7));
    memcpy(v8, *((const void **)this + 1), *((_QWORD *)this + 2) + 1);
    v16 = (WTF::StringPrintStream *)*((_QWORD *)this + 1);
    if (v16 != (WTF::StringPrintStream *)((char *)this + 32))
      WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
    *((_QWORD *)this + 1) = v8;
    result = vsnprintf((char *)v8 + *((_QWORD *)this + 2), *((_QWORD *)this + 3) - *((_QWORD *)this + 2), __format, a3);
    v6 = *((_QWORD *)this + 2);
  }
  *((_QWORD *)this + 2) = v6 + (int)result;
  return result;
}

_QWORD *WTF::StringPrintStream::toCString@<X0>(_QWORD *this@<X0>, uint64_t *a2@<X8>)
{
  size_t v2;
  const void *v3;
  uint64_t v5;
  uint64_t v6;

  v3 = (const void *)this[1];
  v2 = this[2];
  *a2 = 0;
  if (v3)
  {
    if (v2 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x197B12788);
    }
    v5 = WTF::fastMalloc((WTF *)(v2 + 17));
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = v2;
    *a2 = v5;
    v6 = v5 + 16;
    this = memcpy((void *)(v5 + 16), v3, v2);
    *(_BYTE *)(v6 + v2) = 0;
  }
  return this;
}

uint64_t WTF::StringPrintStream::reset(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  **(_BYTE **)(this + 8) = 0;
  return this;
}

void WTF::StringPrintStream::tryToString(WTF::StringPrintStream *this@<X0>, uint64_t a2@<X8>)
{
  size_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *((_QWORD *)this + 2);
  if (v3 >> 31)
  {
    *(_BYTE *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 1;
  }
  else
  {
    v4 = *((_QWORD *)this + 1);
    if (v4)
    {
      WTF::fromUTF8Impl<false>(v4, v3, &v6);
      v5 = v6;
    }
    else
    {
      v5 = 0;
    }
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 8) = 0;
  }
}

void WTF::StringPrintStream::toString(WTF::StringPrintStream *this@<X0>, uint64_t *a2@<X8>)
{
  if (*((_QWORD *)this + 1))
    WTF::fromUTF8Impl<false>(*((_QWORD *)this + 1), *((_QWORD *)this + 2), a2);
  else
    *a2 = 0;
}

void WTF::StringPrintStream::toStringWithLatin1Fallback(WTF::StringPrintStream *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::String::fromUTF8WithLatin1Fallback(*((_BYTE **)this + 1), *((_QWORD *)this + 2), a2);
}

BOOL WTF::StringView::containsIgnoringASCIICase(WTF::StringView *this, StringView a2)
{
  StringView v3;
  StringView v4;

  v4.m_characters = *(void **)&a2.m_length;
  *(_QWORD *)&v3.m_length = a2.m_characters;
  v3.m_characters = (void *)*((_QWORD *)this + 1);
  *(_QWORD *)&v4.m_length = 0;
  return WTF::findIgnoringASCIICase(*(_QWORD *)this, v3, v4) != -1;
}

uint64_t WTF::StringView::findIgnoringASCIICase(uint64_t a1, uint64_t a2, void *a3)
{
  StringView v4;
  StringView v5;

  v5.m_characters = a3;
  *(_QWORD *)&v4.m_length = a2;
  v4.m_characters = *(void **)(a1 + 8);
  *(_QWORD *)&v5.m_length = 0;
  return WTF::findIgnoringASCIICase(*(_QWORD *)a1, v4, v5);
}

BOOL WTF::StringView::containsIgnoringASCIICase(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  StringView v5;
  StringView v6;

  *(_QWORD *)&v6.m_length = a4;
  v6.m_characters = a3;
  *(_QWORD *)&v5.m_length = a2;
  v5.m_characters = *(void **)(a1 + 8);
  return WTF::findIgnoringASCIICase(*(_QWORD *)a1, v5, v6) != -1;
}

uint64_t WTF::StringView::findIgnoringASCIICase(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  StringView v5;
  StringView v6;

  *(_QWORD *)&v6.m_length = a4;
  v6.m_characters = a3;
  *(_QWORD *)&v5.m_length = a2;
  v5.m_characters = *(void **)(a1 + 8);
  return WTF::findIgnoringASCIICase(*(_QWORD *)a1, v5, v6);
}

BOOL WTF::StringView::startsWith(unsigned __int8 **a1, int a2)
{
  unsigned __int8 *v2;

  if (!*((_DWORD *)a1 + 2))
    return 0;
  v2 = *a1;
  if (*((_BYTE *)a1 + 12))
    return *v2 == a2;
  else
    return *(unsigned __int16 *)v2 == a2;
}

uint64_t WTF::StringView::startsWith(uint64_t a1, uint64_t a2, void *a3, StringView a4)
{
  StringView v5;

  a4.m_characters = a3;
  *(_QWORD *)&v5.m_length = a2;
  v5.m_characters = *(void **)(a1 + 8);
  return WTF::startsWith(*(int8x16_t **)a1, v5, a4);
}

BOOL WTF::StringView::startsWithIgnoringASCIICase(uint64_t a1, uint64_t a2, void *a3, StringView a4)
{
  StringView v5;

  a4.m_characters = a3;
  *(_QWORD *)&v5.m_length = a2;
  v5.m_characters = *(void **)(a1 + 8);
  return WTF::startsWithIgnoringASCIICase(*(_QWORD *)a1, v5, a4);
}

BOOL WTF::StringView::endsWith(uint64_t *a1, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_DWORD *)a1 + 2);
  if (!v2)
    return 0;
  v3 = (v2 - 1);
  v4 = *a1;
  if (*((_BYTE *)a1 + 12))
    return *(unsigned __int8 *)(v4 + v3) == a2;
  else
    return *(unsigned __int16 *)(v4 + 2 * v3) == a2;
}

BOOL WTF::StringView::endsWith(uint64_t a1, uint64_t a2, void *a3, StringView a4)
{
  StringView v5;

  a4.m_characters = a3;
  *(_QWORD *)&v5.m_length = a2;
  v5.m_characters = *(void **)(a1 + 8);
  return WTF::endsWith(*(WTF **)a1, v5, a4);
}

BOOL WTF::StringView::endsWithIgnoringASCIICase(uint64_t a1, uint64_t a2, void *a3, StringView a4)
{
  StringView v5;

  a4.m_characters = a3;
  *(_QWORD *)&v5.m_length = a2;
  v5.m_characters = *(void **)(a1 + 8);
  return WTF::endsWithIgnoringASCIICase(*(_QWORD *)a1, v5, a4);
}

void WTF::StringView::tryGetUTF8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, float a9@<S1>)
{
  char *v11;
  size_t v13;
  uint64_t v14;

  v11 = *(char **)a1;
  if (v11)
  {
    v13 = *(unsigned int *)(a1 + 8);
    if (*(_BYTE *)(a1 + 12))
      WTF::StringImpl::utf8ForCharacters(v11, v13, a8, a9);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v13, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    *(_QWORD *)a8 = v14;
    *(_DWORD *)(a8 + 8) = 0;
  }
}

void WTF::StringView::utf8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, WTF **a8@<X8>, float a9@<S1>)
{
  char *v11;
  size_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  int v23;
  WTF *v24;
  int v25;

  v11 = *(char **)a1;
  if (v11)
  {
    v13 = *(unsigned int *)(a1 + 8);
    if (*(_BYTE *)(a1 + 12))
    {
      WTF::StringImpl::utf8ForCharacters(v11, v13, (uint64_t)&v24, a9);
      if (v25)
        goto LABEL_11;
    }
    else
    {
      WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v13, a2, a3, a4, a5, a6, a7, (uint64_t)&v24);
      if (v25)
      {
LABEL_11:
        __break(0xC471u);
        JUMPOUT(0x197B12AF4);
      }
    }
  }
  else
  {
    v21 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v21 = 1;
    *(_QWORD *)(v21 + 8) = 0;
    v24 = (WTF *)v21;
    *(_BYTE *)(v21 + 16) = 0;
    v25 = 0;
  }
  v22 = v24;
  if (v24)
  {
    v23 = (*(_DWORD *)v24)++;
    *a8 = v22;
    v24 = 0;
    if (v23)
      *(_DWORD *)v22 = v23;
    else
      WTF::fastFree((unint64_t)v22, v14, v15, v16, v17, v18, v19, v20);
  }
  else
  {
    *a8 = 0;
  }
}

uint64_t WTF::StringView::find(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, double a5, double a6, float a7)
{
  StringView v8;
  StringView v9;

  *(_QWORD *)&v9.m_length = a4;
  v9.m_characters = a3;
  *(_QWORD *)&v8.m_length = a2;
  v8.m_characters = *(void **)(a1 + 8);
  return WTF::findCommon(*(_QWORD *)a1, v8, v9, a5, a6, a7);
}

uint64_t WTF::StringView::find(uint64_t a1, uint64_t a2, unint64_t a3, StringView a4, double a5, double a6, float a7)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  int m_characters;
  int v14;
  int (*v15)(uint64_t, uint64_t, int, int);
  unint64_t v16;
  int8x8_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint16x4_t *v26;
  uint64_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t *v30;
  uint64_t v31;
  int8x16_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int16 *v35;
  uint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  uint16x4_t *v39;
  unint64_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  uint16x8_t v47;
  uint32x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  uint32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  uint32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  uint32x4_t v58;
  int8x16_t v59;
  int8x16_t v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t m_characters_low;
  int (*v65)(uint64_t, uint64_t, int, int);
  int v66;
  StringView v67;

  v8 = *(_DWORD *)(a1 + 8);
  if (v8 < a4.m_length)
    return -1;
  if (!LODWORD(a4.m_characters))
    return a4.m_length;
  if ((v8 & 0x80000000) == 0 && ((uint64_t)a4.m_characters & 0x80000000) == 0)
  {
    v11 = (uint64_t)a4.m_characters & 0xFF00000000;
    v12 = *(_QWORD *)a1;
    if (SLODWORD(a4.m_characters) <= 250)
      m_characters = 250;
    else
      m_characters = (int)a4.m_characters;
    v14 = m_characters - 250;
    if (!*(_BYTE *)(a1 + 12))
    {
      if (v11)
      {
        v62 = a2;
        v63 = a3;
        m_characters_low = LODWORD(a4.m_characters);
        v66 = v14;
        if (LODWORD(a4.m_characters) > 6)
        {
          v15 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<unsigned char,char16_t>::initialSearch;
        }
        else if (LODWORD(a4.m_characters) == 1)
        {
          v15 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<unsigned char,char16_t>::singleCharSearch;
        }
        else
        {
          v15 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<unsigned char,char16_t>::linearSearch;
        }
      }
      else
      {
        v62 = a2;
        v63 = a3;
        m_characters_low = LODWORD(a4.m_characters);
        v66 = v14;
        if (LODWORD(a4.m_characters) > 6)
        {
          v15 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<char16_t,char16_t>::initialSearch;
        }
        else if (LODWORD(a4.m_characters) == 1)
        {
          v15 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<char16_t,char16_t>::singleCharSearch;
        }
        else
        {
          v15 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<char16_t,char16_t>::linearSearch;
        }
      }
      goto LABEL_57;
    }
    if (v11)
    {
      v62 = a2;
      v63 = a3;
      m_characters_low = LODWORD(a4.m_characters);
      v66 = v14;
      if (LODWORD(a4.m_characters) > 6)
      {
        v15 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::initialSearch;
      }
      else if (LODWORD(a4.m_characters) == 1)
      {
        v15 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::singleCharSearch;
      }
      else
      {
        v15 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::linearSearch;
      }
LABEL_57:
      v65 = v15;
      return v15((uint64_t)&v62, v12, v8, a4.m_length);
    }
    v62 = a2;
    v63 = a3;
    m_characters_low = LODWORD(a4.m_characters);
    v16 = a3 + 2 * LODWORD(a4.m_characters);
    v66 = v14;
    if ((a3 & 7) != 0)
    {
      v17 = 0;
      v18 = 2 * LODWORD(a4.m_characters) - 2;
      v19 = a3 + 2;
      v20 = a3;
      do
      {
        v21 = *(unsigned __int16 *)v20;
        v20 += 2;
        *(_QWORD *)&v17 |= v21;
        if ((v19 & 7) == 0)
          break;
        v22 = v18;
        v18 -= 2;
        v19 += 2;
      }
      while (v22);
      v23 = v16 & 0xFFFFFFFFFFFFFFF8;
      if (v20 < (v16 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_24;
    }
    else
    {
      v17 = 0;
      v20 = a3;
      v23 = v16 & 0xFFFFFFFFFFFFFFF8;
      if (a3 < (v16 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_24:
        v24 = v20 + 8;
        if (v23 > v20 + 8)
          v24 = v23;
        v25 = v24 + ~v20;
        if (v25 >= 0x18)
        {
          v27 = (v25 >> 3) + 1;
          v26 = (uint16x4_t *)(v20 + 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL));
          v28 = 0uLL;
          v29 = (int8x16_t)(unint64_t)v17;
          v30 = (int8x16_t *)(v20 + 16);
          v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v29 = vorrq_s8(v30[-1], v29);
            v28 = vorrq_s8(*v30, v28);
            v30 += 2;
            v31 -= 4;
          }
          while (v31);
          v32 = vorrq_s8(v28, v29);
          v17 = vorr_s8(*(int8x8_t *)v32.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
          if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_42:
            if (v26 != (uint16x4_t *)v16)
            {
              v34 = a3 + 2 * LODWORD(a4.m_characters) - (_QWORD)v26 - 2;
              if (v34 >= 0x1E)
              {
                v36 = (v34 >> 1) + 1;
                v37 = 0uLL;
                v38 = (int8x16_t)(unint64_t)v17;
                v35 = (unsigned __int16 *)v26 + (v36 & 0xFFFFFFFFFFFFFFF0);
                v39 = v26 + 2;
                v40 = v36 & 0xFFFFFFFFFFFFFFF0;
                v41 = 0uLL;
                v42 = 0uLL;
                v43 = 0uLL;
                v44 = 0uLL;
                v45 = 0uLL;
                v46 = 0uLL;
                do
                {
                  v47 = *(uint16x8_t *)v39[-2].i8;
                  v48 = vmovl_u16(*(uint16x4_t *)v47.i8);
                  v49.i64[0] = v48.u32[0];
                  v49.i64[1] = v48.u32[1];
                  v50 = v49;
                  v49.i64[0] = v48.u32[2];
                  v49.i64[1] = v48.u32[3];
                  v51 = v49;
                  v52 = vmovl_high_u16(v47);
                  v49.i64[0] = v52.u32[0];
                  v49.i64[1] = v52.u32[1];
                  v53 = v49;
                  v49.i64[0] = v52.u32[2];
                  v49.i64[1] = v52.u32[3];
                  v54 = v49;
                  v55 = vmovl_u16(*v39);
                  v49.i64[0] = v55.u32[0];
                  v49.i64[1] = v55.u32[1];
                  v56 = v49;
                  v49.i64[0] = v55.u32[2];
                  v49.i64[1] = v55.u32[3];
                  v57 = v49;
                  v58 = vmovl_high_u16(*(uint16x8_t *)v39->i8);
                  v49.i64[0] = v58.u32[0];
                  v49.i64[1] = v58.u32[1];
                  v59 = v49;
                  v49.i64[0] = v58.u32[2];
                  v49.i64[1] = v58.u32[3];
                  v42 = vorrq_s8(v42, v54);
                  v41 = vorrq_s8(v41, v53);
                  v37 = vorrq_s8(v37, v51);
                  v38 = vorrq_s8(v38, v50);
                  v46 = vorrq_s8(v46, v49);
                  v45 = vorrq_s8(v45, v59);
                  v44 = vorrq_s8(v44, v57);
                  v43 = vorrq_s8(v43, v56);
                  v39 += 4;
                  v40 -= 16;
                }
                while (v40);
                v60 = vorrq_s8(vorrq_s8(vorrq_s8(v43, v38), vorrq_s8(v45, v41)), vorrq_s8(vorrq_s8(v44, v37), vorrq_s8(v46, v42)));
                v17 = vorr_s8(*(int8x8_t *)v60.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL));
                if (v36 == (v36 & 0xFFFFFFFFFFFFFFF0))
                  goto LABEL_49;
              }
              else
              {
                v35 = (unsigned __int16 *)v26;
              }
              do
              {
                v61 = *v35++;
                *(_QWORD *)&v17 |= v61;
              }
              while (v35 != (unsigned __int16 *)v16);
            }
LABEL_49:
            if ((*(_QWORD *)&v17 & 0xFF00FF00FF00FF00) != 0)
            {
              v15 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<char16_t,unsigned char>::failSearch;
            }
            else if (SLODWORD(a4.m_characters) > 6)
            {
              v15 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<char16_t,unsigned char>::initialSearch;
            }
            else if (LODWORD(a4.m_characters) == 1)
            {
              v15 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<char16_t,unsigned char>::singleCharSearch;
            }
            else
            {
              v15 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<char16_t,unsigned char>::linearSearch;
            }
            goto LABEL_57;
          }
        }
        else
        {
          v26 = (uint16x4_t *)v20;
        }
        do
        {
          v33 = (uint64_t)*v26++;
          *(_QWORD *)&v17 |= v33;
        }
        while ((unint64_t)v26 < v23);
        goto LABEL_42;
      }
    }
    v26 = (uint16x4_t *)v20;
    goto LABEL_42;
  }
  v67.m_characters = *(void **)(a1 + 8);
  *(_QWORD *)&v67.m_length = a3;
  return WTF::findCommon(*(_QWORD *)a1, v67, a4, a5, a6, a7);
}

uint64_t WTF::StringView::find(uint64_t result, uint8x8_t *a2, unint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  uint8x8_t *v21;
  int32x4_t v22;
  uint8x8_t *v23;
  int32x4_t v24;
  unint64_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  uint8x16_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint8x16_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  unint64_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  uint8x8_t *v51;
  uint8x8_t *v52;
  unint64_t v53;
  int32x4_t v54;
  uint8x8_t v55;
  uint16x8_t v56;
  uint8x8_t v57;
  uint16x8_t v58;
  unint64_t v59;
  uint8x8_t *v60;
  unsigned __int8 *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  BOOL v67;
  unint64_t v68;
  unsigned int v69;
  int8x16_t *v70;
  int v71;
  int v72;
  uint8x16_t v73;
  unsigned int v74;
  uint8x16_t v75;
  uint8x16_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  uint16x8_t *v80;
  int32x4_t v81;
  uint8x8_t *v82;
  int32x4_t v83;
  unint64_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  uint16x8_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  uint8x16_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint16x8_t v103;
  uint16x8_t v104;
  unint64_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  uint16x8_t *v109;
  uint64_t *v110;
  unint64_t v111;
  int32x4_t v112;
  uint16x8_t v113;
  uint16x8_t v114;
  unint64_t v115;
  uint8x8_t *v116;
  unsigned __int16 *v117;
  int v118;
  unsigned int v119;
  unint64_t v120;
  int16x8_t *v121;
  uint16x8_t v122;
  unsigned int v123;
  uint16x8_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unsigned int v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v137;
  uint64_t v138;

  v4 = *(unsigned int *)(result + 8);
  if (v4 < a4 || a3 > v4 - a4)
    return -1;
  v6 = a4;
  v7 = *(_QWORD *)result;
  v8 = v4 - a4;
  v9 = v8 - a3;
  if (!*(_BYTE *)(result + 12))
  {
    if (!a3)
    {
      v17 = 0;
      return v17 + v6;
    }
    if (v8 <= a3 - 1)
      goto LABEL_123;
    v13 = (_DWORD *)(v7 + 2 * a4);
    if (a3 < 8)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      goto LABEL_68;
    }
    if (a3 >= 0x20)
    {
      v77 = 0uLL;
      v14 = a3 & 0xFFFFFFFFFFFFFFE0;
      v78 = 0uLL;
      v79 = 0uLL;
      v80 = (uint16x8_t *)(v7 + 2 * a4 + 32);
      v81 = 0uLL;
      v82 = a2 + 2;
      v83 = 0uLL;
      v84 = a3 & 0xFFFFFFFFFFFFFFE0;
      v85 = 0uLL;
      v86 = 0uLL;
      v87 = 0uLL;
      v88 = 0uLL;
      v89 = 0uLL;
      v90 = 0uLL;
      v91 = 0uLL;
      v92 = 0uLL;
      v93 = 0uLL;
      v94 = 0uLL;
      v95 = 0uLL;
      do
      {
        v97 = v80[-2];
        v96 = v80[-1];
        v99 = *v80;
        v98 = v80[1];
        v80 += 4;
        v89 = (int32x4_t)vaddw_high_u16((uint32x4_t)v89, v97);
        v90 = (int32x4_t)vaddw_u16((uint32x4_t)v90, *(uint16x4_t *)v96.i8);
        v88 = (int32x4_t)vaddw_u16((uint32x4_t)v88, *(uint16x4_t *)v97.i8);
        v91 = (int32x4_t)vaddw_high_u16((uint32x4_t)v91, v96);
        v93 = (int32x4_t)vaddw_high_u16((uint32x4_t)v93, v99);
        v94 = (int32x4_t)vaddw_u16((uint32x4_t)v94, *(uint16x4_t *)v98.i8);
        v92 = (int32x4_t)vaddw_u16((uint32x4_t)v92, *(uint16x4_t *)v99.i8);
        v95 = (int32x4_t)vaddw_high_u16((uint32x4_t)v95, v98);
        v100 = *(uint8x16_t *)v82[-2].i8;
        v101 = vmovl_u8(*(uint8x8_t *)v100.i8);
        v102 = vmovl_high_u8(v100);
        v103 = vmovl_u8(*v82);
        v104 = vmovl_high_u8(*(uint8x16_t *)v82->i8);
        v81 = (int32x4_t)vaddw_high_u16((uint32x4_t)v81, v102);
        v79 = (int32x4_t)vaddw_u16((uint32x4_t)v79, *(uint16x4_t *)v102.i8);
        v78 = (int32x4_t)vaddw_high_u16((uint32x4_t)v78, v101);
        v77 = (int32x4_t)vaddw_u16((uint32x4_t)v77, *(uint16x4_t *)v101.i8);
        v87 = (int32x4_t)vaddw_high_u16((uint32x4_t)v87, v104);
        v86 = (int32x4_t)vaddw_u16((uint32x4_t)v86, *(uint16x4_t *)v104.i8);
        v85 = (int32x4_t)vaddw_high_u16((uint32x4_t)v85, v103);
        v83 = (int32x4_t)vaddw_u16((uint32x4_t)v83, *(uint16x4_t *)v103.i8);
        v82 += 4;
        v84 -= 32;
      }
      while (v84);
      v16 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v92, v88), vaddq_s32(v94, v90)), vaddq_s32(vaddq_s32(v93, v89), vaddq_s32(v95, v91))));
      v15 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v83, v77), vaddq_s32(v86, v79)), vaddq_s32(vaddq_s32(v85, v78), vaddq_s32(v87, v81))));
      if (a3 == v14)
        goto LABEL_70;
      if ((a3 & 0x18) == 0)
      {
LABEL_68:
        v115 = a3 - v14;
        v116 = (uint8x8_t *)((char *)a2 + v14);
        v117 = (unsigned __int16 *)(v7 + 2 * v14 + 2 * a4);
        do
        {
          v118 = *v117++;
          v16 += v118;
          v119 = v116->u8[0];
          v116 = (uint8x8_t *)((char *)v116 + 1);
          result = v119;
          v15 += v119;
          --v115;
        }
        while (v115);
        goto LABEL_70;
      }
    }
    else
    {
      v15 = 0;
      v16 = 0;
      v14 = 0;
    }
    v105 = v14;
    v14 = a3 & 0xFFFFFFFFFFFFFFF8;
    v106 = 0uLL;
    v107 = (int32x4_t)v15;
    v108 = (int32x4_t)v16;
    v109 = (uint16x8_t *)(v7 + 2 * v105 + 2 * a4);
    v110 = (uint64_t *)((char *)a2 + v105);
    v111 = v105 - (a3 & 0xFFFFFFFFFFFFFFF8);
    v112 = 0uLL;
    do
    {
      v113 = *v109++;
      v112 = (int32x4_t)vaddw_high_u16((uint32x4_t)v112, v113);
      v108 = (int32x4_t)vaddw_u16((uint32x4_t)v108, *(uint16x4_t *)v113.i8);
      v113.i64[0] = *v110++;
      v114 = vmovl_u8(*(uint8x8_t *)v113.i8);
      v106 = (int32x4_t)vaddw_high_u16((uint32x4_t)v106, v114);
      v107 = (int32x4_t)vaddw_u16((uint32x4_t)v107, *(uint16x4_t *)v114.i8);
      v111 += 8;
    }
    while (v111);
    v16 = vaddvq_s32(vaddq_s32(v108, v112));
    v15 = vaddvq_s32(vaddq_s32(v107, v106));
    if (a3 != v14)
      goto LABEL_68;
LABEL_70:
    if (a3 < 8)
    {
      if (a3 <= 3)
      {
        v67 = v8 >= a3;
        v133 = v8 - a3;
        if (!v67)
          v133 = 0;
        if (a3 < 2)
        {
          if ((_DWORD)a3 != 1)
          {
            if (v16 == v15)
              return a4;
            v17 = 0;
            v138 = v7 + 2 * a3 + 2 * a4;
            while (v9 != v17)
            {
              if (v133 == v17)
                goto LABEL_123;
              v16 = v16 + *(unsigned __int16 *)(v138 + 2 * v17) - *((unsigned __int16 *)v13 + v17);
              ++v17;
              if (v16 == v15)
                return v17 + v6;
            }
            return -1;
          }
          v17 = 0;
          v137 = v7 + 2 * a3 + 2 * a4;
          if (v16 != v15)
            goto LABEL_114;
LABEL_113:
          if (*((_WORD *)v13 + v17) != a2->u8[0])
          {
LABEL_114:
            while (v9 != v17)
            {
              if (v133 == v17)
                goto LABEL_123;
              v16 = v16 + *(unsigned __int16 *)(v137 + 2 * v17) - *((unsigned __int16 *)v13 + v17);
              ++v17;
              if (v16 == v15)
                goto LABEL_113;
            }
            return -1;
          }
        }
        else
        {
          v17 = 0;
          v134 = v7 + 2 * a3 + 2 * a4;
          result = 2 * (a3 & 1);
          if (v16 != v15)
            goto LABEL_106;
LABEL_102:
          if (((a2->u16[0] | (a2->u16[0] << 8)) & 0xFF00FF) != *v13
            || ((*(unsigned __int16 *)((char *)a2->u16 + (a3 & 1)) | (*(unsigned __int16 *)((char *)a2->u16 + (a3 & 1)) << 8)) & 0xFF00FF) != *(_DWORD *)((char *)v13 + 2 * (a3 & 1)))
          {
LABEL_106:
            while (v9 != v17)
            {
              if (v133 == v17)
                goto LABEL_123;
              v135 = *(unsigned __int16 *)v13;
              v13 = (_DWORD *)((char *)v13 + 2);
              v16 = v16 + *(unsigned __int16 *)(v134 + 2 * v17++) - v135;
              if (v16 == v15)
                goto LABEL_102;
            }
            return -1;
          }
        }
      }
      else
      {
        v17 = 0;
        v125 = a3 & 3;
        v67 = v8 >= a3;
        v126 = v8 - a3;
        if (!v67)
          v126 = 0;
        v127 = v7 + 2 * a3 + 2 * a4;
        if (v16 != v15)
        {
LABEL_93:
          while (v9 != v17)
          {
            if (v126 == v17)
              goto LABEL_123;
            v128 = *(unsigned __int16 *)v13;
            v13 = (_DWORD *)((char *)v13 + 2);
            result = v128;
            v16 = v16 + *(unsigned __int16 *)(v127 + 2 * v17++) - v128;
            if (v16 == v15)
              goto LABEL_89;
          }
          return -1;
        }
LABEL_89:
        v129 = (a2->u32[0] | ((unint64_t)a2->u32[0] << 16)) & 0xFFFF0000FFFFLL;
        result = (v129 | (v129 << 8)) & 0xFF00FF00FF00FFLL;
        v130 = (*(unsigned int *)((char *)a2->u32 + v125) | ((unint64_t)*(unsigned int *)((char *)a2->u32 + v125) << 16)) & 0xFFFF0000FFFFLL;
        v131 = (v130 | (v130 << 8)) & 0xFF00FF00FF00FFLL;
        if (result != *(_QWORD *)v13 || v131 != *(_QWORD *)((char *)v13 + 2 * v125))
          goto LABEL_93;
      }
    }
    else
    {
      v17 = 0;
      v67 = v8 >= a3;
      v120 = v8 - a3;
      if (!v67)
        v120 = 0;
      if (v16 != v15)
      {
LABEL_78:
        while (v17 != v9)
        {
          if (v17 == v120)
            goto LABEL_123;
          v16 = v16 + *((unsigned __int16 *)v13 + v17 + a3) - *((unsigned __int16 *)v13 + v17);
          ++v17;
          if (v16 == v15)
            goto LABEL_74;
        }
        return -1;
      }
LABEL_74:
      v121 = (int16x8_t *)((char *)v13 + 2 * v17);
      v122 = (uint16x8_t)vceqq_s16(*v121, (int16x8_t)vmovl_u8(*a2));
      v122.i16[0] = vminvq_u16(v122);
      result = v122.u32[0];
      v123 = a3 & 7;
      if (!v122.i32[0])
        goto LABEL_78;
      do
      {
        v124 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v121 + 2 * v123), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a2 + v123)));
        v124.i16[0] = vminvq_u16(v124);
        result = v124.u32[0];
        if (!v124.i32[0])
          goto LABEL_78;
        v123 += 8;
      }
      while (v123 < a3);
    }
    return v17 + v6;
  }
  if (!a3)
  {
    v12 = 0;
    v11 = 0;
LABEL_32:
    v64 = 0;
    v65 = v7 + a4;
    result = (uint64_t)&a2[-2];
    v66 = 32 - __clz(a3 - 1);
    v67 = v8 >= a3;
    v68 = v8 - a3;
    if (!v67)
      v68 = 0;
    v69 = v66 - 1;
    if (v12 == v11)
    {
LABEL_35:
      v70 = (int8x16_t *)(v65 + v64);
      if ((_DWORD)a3 != 1)
      {
        if ((_DWORD)a3)
        {
          switch(v69)
          {
            case 0u:
              v71 = v70->u16[0];
              v72 = a2->u16[0];
              goto LABEL_41;
            case 1u:
              if (v70->u16[0] != a2->u16[0])
                goto LABEL_56;
              v71 = *(unsigned __int16 *)((char *)&v70->u16[-1] + a3);
              v72 = *(unsigned __int16 *)((char *)&a2[-1].u16[3] + a3);
              goto LABEL_41;
            case 2u:
              if (v70->i32[0] != a2->i32[0])
                goto LABEL_56;
              v71 = *(__int32 *)((char *)&v70->i32[-1] + a3);
              v72 = *(__int32 *)((char *)&a2[-1].i32[1] + a3);
              goto LABEL_41;
            case 3u:
              if (v70->i64[0] == *a2
                && *(uint64_t *)((char *)&v70->i64[-1] + a3) == *(_QWORD *)((char *)&a2[-1]
                                                                                       + a3))
              {
                return v64 + a4;
              }
              goto LABEL_56;
            case 4u:
              v76 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)&v70[-1] + a3), *(int8x16_t *)(result + a3)), vceqq_s8(*v70, *(int8x16_t *)a2->i8));
              v76.i8[0] = vminvq_u8(v76);
              if (!v76.i32[0])
                goto LABEL_56;
              return v64 + a4;
            default:
              v73 = (uint8x16_t)vceqq_s8(*v70, *(int8x16_t *)a2->i8);
              v73.i8[0] = vminvq_u8(v73);
              if (!v73.i32[0])
                goto LABEL_56;
              v74 = a3 & 0xF;
              if (a3 < 0x10)
                return v64 + a4;
              break;
          }
          do
          {
            v75 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v70 + v74), *(int8x16_t *)&a2->i8[v74]);
            v75.i8[0] = vminvq_u8(v75);
            if (!v75.i32[0])
              goto LABEL_56;
            v74 += 16;
          }
          while (v74 < a3);
        }
        return v64 + a4;
      }
      if (a3)
      {
        v71 = v70->u8[0];
        v72 = a2->u8[0];
LABEL_41:
        if (v71 != v72)
          goto LABEL_56;
        return v64 + a4;
      }
      goto LABEL_123;
    }
LABEL_56:
    while (v64 != v9)
    {
      if (v64 == v68)
        goto LABEL_123;
      v12 = v12 + *(unsigned __int8 *)(v65 + v64 + a3) - *(unsigned __int8 *)(v65 + v64);
      ++v64;
      if (v12 == v11)
        goto LABEL_35;
    }
    return -1;
  }
  if (v8 > a3 - 1)
  {
    if (a3 < 8)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
LABEL_30:
      v59 = a3 - v10;
      v60 = (uint8x8_t *)((char *)a2 + v10);
      v61 = (unsigned __int8 *)(v7 + v10 + a4);
      do
      {
        v62 = *v61++;
        v12 += v62;
        v63 = v60->u8[0];
        v60 = (uint8x8_t *)((char *)v60 + 1);
        v11 += v63;
        --v59;
      }
      while (v59);
      goto LABEL_32;
    }
    if (a3 >= 0x20)
    {
      v18 = 0uLL;
      v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      v19 = 0uLL;
      v20 = 0uLL;
      v21 = (uint8x8_t *)(a4 + v7 + 16);
      v22 = 0uLL;
      v23 = a2 + 2;
      v24 = 0uLL;
      v25 = a3 & 0xFFFFFFFFFFFFFFE0;
      v26 = 0uLL;
      v27 = 0uLL;
      v28 = 0uLL;
      v29 = 0uLL;
      v30 = 0uLL;
      v31 = 0uLL;
      v32 = 0uLL;
      v33 = 0uLL;
      v34 = 0uLL;
      v35 = 0uLL;
      v36 = 0uLL;
      do
      {
        v37 = *(uint8x16_t *)v21[-2].i8;
        v38 = vmovl_u8(*(uint8x8_t *)v37.i8);
        v39 = vmovl_high_u8(v37);
        v40 = vmovl_u8(*v21);
        v41 = vmovl_high_u8(*(uint8x16_t *)v21->i8);
        v32 = (int32x4_t)vaddw_high_u16((uint32x4_t)v32, v39);
        v31 = (int32x4_t)vaddw_u16((uint32x4_t)v31, *(uint16x4_t *)v39.i8);
        v30 = (int32x4_t)vaddw_high_u16((uint32x4_t)v30, v38);
        v29 = (int32x4_t)vaddw_u16((uint32x4_t)v29, *(uint16x4_t *)v38.i8);
        v36 = (int32x4_t)vaddw_high_u16((uint32x4_t)v36, v41);
        v35 = (int32x4_t)vaddw_u16((uint32x4_t)v35, *(uint16x4_t *)v41.i8);
        v34 = (int32x4_t)vaddw_high_u16((uint32x4_t)v34, v40);
        v33 = (int32x4_t)vaddw_u16((uint32x4_t)v33, *(uint16x4_t *)v40.i8);
        v42 = *(uint8x16_t *)v23[-2].i8;
        v43 = vmovl_u8(*(uint8x8_t *)v42.i8);
        v44 = vmovl_high_u8(v42);
        v45 = vmovl_u8(*v23);
        v46 = vmovl_high_u8(*(uint8x16_t *)v23->i8);
        v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v44);
        v20 = (int32x4_t)vaddw_u16((uint32x4_t)v20, *(uint16x4_t *)v44.i8);
        v19 = (int32x4_t)vaddw_high_u16((uint32x4_t)v19, v43);
        v18 = (int32x4_t)vaddw_u16((uint32x4_t)v18, *(uint16x4_t *)v43.i8);
        v28 = (int32x4_t)vaddw_high_u16((uint32x4_t)v28, v46);
        v27 = (int32x4_t)vaddw_u16((uint32x4_t)v27, *(uint16x4_t *)v46.i8);
        v21 += 4;
        v26 = (int32x4_t)vaddw_high_u16((uint32x4_t)v26, v45);
        v23 += 4;
        v24 = (int32x4_t)vaddw_u16((uint32x4_t)v24, *(uint16x4_t *)v45.i8);
        v25 -= 32;
      }
      while (v25);
      v12 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v33, v29), vaddq_s32(v35, v31)), vaddq_s32(vaddq_s32(v34, v30), vaddq_s32(v36, v32))));
      v11 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v24, v18), vaddq_s32(v27, v20)), vaddq_s32(vaddq_s32(v26, v19), vaddq_s32(v28, v22))));
      if (a3 == v10)
        goto LABEL_32;
      if ((a3 & 0x18) == 0)
        goto LABEL_30;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      v10 = 0;
    }
    v47 = v10;
    v10 = a3 & 0xFFFFFFFFFFFFFFF8;
    v48 = (int32x4_t)v11;
    v49 = (int32x4_t)v12;
    v50 = 0uLL;
    v51 = (uint8x8_t *)(v7 + v47 + a4);
    v52 = (uint8x8_t *)((char *)a2 + v47);
    v53 = v47 - (a3 & 0xFFFFFFFFFFFFFFF8);
    v54 = 0uLL;
    do
    {
      v55 = *v51++;
      v56 = vmovl_u8(v55);
      v54 = (int32x4_t)vaddw_high_u16((uint32x4_t)v54, v56);
      v49 = (int32x4_t)vaddw_u16((uint32x4_t)v49, *(uint16x4_t *)v56.i8);
      v57 = *v52++;
      v58 = vmovl_u8(v57);
      v50 = (int32x4_t)vaddw_high_u16((uint32x4_t)v50, v58);
      v48 = (int32x4_t)vaddw_u16((uint32x4_t)v48, *(uint16x4_t *)v58.i8);
      v53 += 8;
    }
    while (v53);
    v12 = vaddvq_s32(vaddq_s32(v49, v54));
    v11 = vaddvq_s32(vaddq_s32(v48, v50));
    if (a3 == v10)
      goto LABEL_32;
    goto LABEL_30;
  }
LABEL_123:
  __break(1u);
  return result;
}

unint64_t WTF::StringView::reverseFind(uint64_t *a1, uint8x8_t *a2, unint64_t a3, unsigned int a4)
{
  unint64_t v4;
  unint64_t result;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  unint64_t v18;
  uint64_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  uint8x8_t *v23;
  int32x4_t v24;
  uint8x8_t *v25;
  int32x4_t v26;
  unint64_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  uint8x16_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint8x16_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  unint64_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  uint8x8_t *v53;
  uint8x8_t *v54;
  unint64_t v55;
  int32x4_t v56;
  uint8x8_t v57;
  uint16x8_t v58;
  uint8x8_t v59;
  uint16x8_t v60;
  unint64_t v61;
  uint8x8_t *v62;
  unsigned __int8 *v63;
  int v64;
  int v65;
  unsigned int v66;
  int8x16_t *v67;
  int v68;
  int v69;
  uint8x16_t v70;
  unsigned int v71;
  uint8x16_t v72;
  uint8x16_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  uint16x8_t *v77;
  int32x4_t v78;
  uint8x8_t *v79;
  int32x4_t v80;
  unint64_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  uint16x8_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  uint16x8_t v96;
  uint8x16_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  unint64_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  uint16x8_t *v106;
  uint64_t *v107;
  unint64_t v108;
  int32x4_t v109;
  uint16x8_t v110;
  uint16x8_t v111;
  unint64_t v112;
  uint8x8_t *v113;
  unsigned __int16 *v114;
  int v115;
  int v116;
  int16x8_t *v117;
  uint16x8_t v118;
  unsigned int v119;
  uint16x8_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  int *v127;
  int v128;
  int v129;

  v4 = *((unsigned int *)a1 + 2);
  if (v4 < a3)
    return -1;
  v6 = *((unsigned __int8 *)a1 + 12);
  v7 = *a1;
  if (v4 - a3 >= a4)
    result = a4;
  else
    result = v4 - a3;
  if (!v6)
  {
    if (!a3)
    {
      v15 = 0;
      v14 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      goto LABEL_95;
    }
    if (v4 >= result)
      v12 = v4 - result;
    else
      v12 = 0;
    if (v12 <= a3 - 1)
      goto LABEL_109;
    if (a3 < 8)
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
LABEL_70:
      v112 = a3 - v13;
      v113 = (uint8x8_t *)((char *)a2 + v13);
      v114 = (unsigned __int16 *)(v7 + 2 * (v13 + result));
      do
      {
        v115 = *v114++;
        v15 += v115;
        v116 = v113->u8[0];
        v113 = (uint8x8_t *)((char *)v113 + 1);
        v14 += v116;
        --v112;
      }
      while (v112);
LABEL_72:
      if (a3 >= 8)
      {
        if (v15 != v14)
          goto LABEL_78;
LABEL_74:
        v117 = (int16x8_t *)(v7 + 2 * result);
        v118 = (uint16x8_t)vceqq_s16(*v117, (int16x8_t)vmovl_u8(*a2));
        v118.i16[0] = vminvq_u16(v118);
        v119 = a3 & 7;
        if (!v118.i32[0])
          goto LABEL_78;
        while (1)
        {
          v120 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v117 + 2 * v119), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a2 + v119)));
          v120.i16[0] = vminvq_u16(v120);
          if (!v120.i32[0])
            break;
          v119 += 8;
          if (v119 >= a3)
            return result;
        }
LABEL_78:
        while (result)
        {
          if (--result + a3 >= v4 || result >= v4)
            goto LABEL_109;
          v15 = v15 - *(unsigned __int16 *)(v7 + 2 * (result + a3)) + *(unsigned __int16 *)(v7 + 2 * result);
          if (v15 == v14)
            goto LABEL_74;
        }
        return -1;
      }
      v17 = a3 == 1;
      v16 = a3 > 1;
      if (a3 >= 4)
      {
        v121 = 2 * result;
        v122 = 2 * result + 2 * (a3 & 3);
        if (v15 != v14)
          goto LABEL_89;
LABEL_85:
        v123 = (a2->u32[0] | ((unint64_t)a2->u32[0] << 16)) & 0xFFFF0000FFFFLL;
        v124 = (*(unsigned int *)((char *)a2->u32 + (a3 & 3)) | ((unint64_t)*(unsigned int *)((char *)a2->u32 + (a3 & 3)) << 16)) & 0xFFFF0000FFFFLL;
        v125 = (v124 | (v124 << 8)) & 0xFF00FF00FF00FFLL;
        if (((v123 | (v123 << 8)) & 0xFF00FF00FF00FFLL) != *(_QWORD *)(v7 + v121) || v125 != *(_QWORD *)(v7 + v122))
        {
LABEL_89:
          while (result)
          {
            if (a3 - 1 + result >= v4 || result - 1 >= v4)
              goto LABEL_109;
            v15 = v15 - *(unsigned __int16 *)(v7 + 2 * a3 - 2 + 2 * result) + *(unsigned __int16 *)(v7 + 2 * result - 2);
            v122 -= 2;
            v121 -= 2;
            --result;
            if (v15 == v14)
              goto LABEL_85;
          }
          return -1;
        }
        return result;
      }
      v18 = a3 & 1;
      v19 = 2 * v18;
      if (v15 != v14)
        goto LABEL_104;
LABEL_95:
      v127 = (int *)(v7 + 2 * result);
      if (v16)
      {
        v128 = *v127;
        v129 = *(int *)((char *)v127 + v19);
        if (((a2->u16[0] | (a2->u16[0] << 8)) & 0xFF00FF) != v128
          || ((*(unsigned __int16 *)((char *)a2->u16 + v18) | (*(unsigned __int16 *)((char *)a2->u16 + v18) << 8)) & 0xFF00FF) != v129)
        {
LABEL_104:
          while (result)
          {
            if (--result + a3 >= v4 || result >= v4)
              goto LABEL_109;
            v15 = v15 - *(unsigned __int16 *)(v7 + 2 * (result + a3)) + *(unsigned __int16 *)(v7 + 2 * result);
            if (v15 == v14)
              goto LABEL_95;
          }
          return -1;
        }
      }
      else if (v17 && *(_WORD *)v127 != a2->u8[0])
      {
        goto LABEL_104;
      }
      return result;
    }
    if (a3 >= 0x20)
    {
      v74 = 0uLL;
      v13 = a3 & 0xFFFFFFFFFFFFFFE0;
      v75 = 0uLL;
      v76 = 0uLL;
      v77 = (uint16x8_t *)(v7 + 2 * result + 32);
      v78 = 0uLL;
      v79 = a2 + 2;
      v80 = 0uLL;
      v81 = a3 & 0xFFFFFFFFFFFFFFE0;
      v82 = 0uLL;
      v83 = 0uLL;
      v84 = 0uLL;
      v85 = 0uLL;
      v86 = 0uLL;
      v87 = 0uLL;
      v88 = 0uLL;
      v89 = 0uLL;
      v90 = 0uLL;
      v91 = 0uLL;
      v92 = 0uLL;
      do
      {
        v94 = v77[-2];
        v93 = v77[-1];
        v96 = *v77;
        v95 = v77[1];
        v77 += 4;
        v86 = (int32x4_t)vaddw_high_u16((uint32x4_t)v86, v94);
        v87 = (int32x4_t)vaddw_u16((uint32x4_t)v87, *(uint16x4_t *)v93.i8);
        v85 = (int32x4_t)vaddw_u16((uint32x4_t)v85, *(uint16x4_t *)v94.i8);
        v88 = (int32x4_t)vaddw_high_u16((uint32x4_t)v88, v93);
        v90 = (int32x4_t)vaddw_high_u16((uint32x4_t)v90, v96);
        v91 = (int32x4_t)vaddw_u16((uint32x4_t)v91, *(uint16x4_t *)v95.i8);
        v89 = (int32x4_t)vaddw_u16((uint32x4_t)v89, *(uint16x4_t *)v96.i8);
        v92 = (int32x4_t)vaddw_high_u16((uint32x4_t)v92, v95);
        v97 = *(uint8x16_t *)v79[-2].i8;
        v98 = vmovl_u8(*(uint8x8_t *)v97.i8);
        v99 = vmovl_high_u8(v97);
        v100 = vmovl_u8(*v79);
        v101 = vmovl_high_u8(*(uint8x16_t *)v79->i8);
        v78 = (int32x4_t)vaddw_high_u16((uint32x4_t)v78, v99);
        v76 = (int32x4_t)vaddw_u16((uint32x4_t)v76, *(uint16x4_t *)v99.i8);
        v75 = (int32x4_t)vaddw_high_u16((uint32x4_t)v75, v98);
        v74 = (int32x4_t)vaddw_u16((uint32x4_t)v74, *(uint16x4_t *)v98.i8);
        v84 = (int32x4_t)vaddw_high_u16((uint32x4_t)v84, v101);
        v83 = (int32x4_t)vaddw_u16((uint32x4_t)v83, *(uint16x4_t *)v101.i8);
        v82 = (int32x4_t)vaddw_high_u16((uint32x4_t)v82, v100);
        v80 = (int32x4_t)vaddw_u16((uint32x4_t)v80, *(uint16x4_t *)v100.i8);
        v79 += 4;
        v81 -= 32;
      }
      while (v81);
      v15 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v89, v85), vaddq_s32(v91, v87)), vaddq_s32(vaddq_s32(v90, v86), vaddq_s32(v92, v88))));
      v14 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v80, v74), vaddq_s32(v83, v76)), vaddq_s32(vaddq_s32(v82, v75), vaddq_s32(v84, v78))));
      if (a3 == v13)
        goto LABEL_72;
      if ((a3 & 0x18) == 0)
        goto LABEL_70;
    }
    else
    {
      v14 = 0;
      v15 = 0;
      v13 = 0;
    }
    v102 = v13;
    v13 = a3 & 0xFFFFFFFFFFFFFFF8;
    v103 = (int32x4_t)v14;
    v104 = (int32x4_t)v15;
    v105 = 0uLL;
    v106 = (uint16x8_t *)(v7 + 2 * (v102 + result));
    v107 = (uint64_t *)((char *)a2 + v102);
    v108 = v102 - (a3 & 0xFFFFFFFFFFFFFFF8);
    v109 = 0uLL;
    do
    {
      v110 = *v106++;
      v109 = (int32x4_t)vaddw_high_u16((uint32x4_t)v109, v110);
      v104 = (int32x4_t)vaddw_u16((uint32x4_t)v104, *(uint16x4_t *)v110.i8);
      v110.i64[0] = *v107++;
      v111 = vmovl_u8(*(uint8x8_t *)v110.i8);
      v105 = (int32x4_t)vaddw_high_u16((uint32x4_t)v105, v111);
      v103 = (int32x4_t)vaddw_u16((uint32x4_t)v103, *(uint16x4_t *)v111.i8);
      v108 += 8;
    }
    while (v108);
    v15 = vaddvq_s32(vaddq_s32(v104, v109));
    v14 = vaddvq_s32(vaddq_s32(v103, v105));
    if (a3 == v13)
      goto LABEL_72;
    goto LABEL_70;
  }
  if (!a3)
  {
    v11 = 0;
    v10 = 0;
    goto LABEL_36;
  }
  v8 = v4 - result;
  if (v4 < result)
    v8 = 0;
  if (v8 <= a3 - 1)
    goto LABEL_109;
  if (a3 < 8)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    goto LABEL_34;
  }
  if (a3 >= 0x20)
  {
    v20 = 0uLL;
    v9 = a3 & 0xFFFFFFFFFFFFFFE0;
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = (uint8x8_t *)(result + v7 + 16);
    v24 = 0uLL;
    v25 = a2 + 2;
    v26 = 0uLL;
    v27 = a3 & 0xFFFFFFFFFFFFFFE0;
    v28 = 0uLL;
    v29 = 0uLL;
    v30 = 0uLL;
    v31 = 0uLL;
    v32 = 0uLL;
    v33 = 0uLL;
    v34 = 0uLL;
    v35 = 0uLL;
    v36 = 0uLL;
    v37 = 0uLL;
    v38 = 0uLL;
    do
    {
      v39 = *(uint8x16_t *)v23[-2].i8;
      v40 = vmovl_u8(*(uint8x8_t *)v39.i8);
      v41 = vmovl_high_u8(v39);
      v42 = vmovl_u8(*v23);
      v43 = vmovl_high_u8(*(uint8x16_t *)v23->i8);
      v34 = (int32x4_t)vaddw_high_u16((uint32x4_t)v34, v41);
      v33 = (int32x4_t)vaddw_u16((uint32x4_t)v33, *(uint16x4_t *)v41.i8);
      v32 = (int32x4_t)vaddw_high_u16((uint32x4_t)v32, v40);
      v31 = (int32x4_t)vaddw_u16((uint32x4_t)v31, *(uint16x4_t *)v40.i8);
      v38 = (int32x4_t)vaddw_high_u16((uint32x4_t)v38, v43);
      v37 = (int32x4_t)vaddw_u16((uint32x4_t)v37, *(uint16x4_t *)v43.i8);
      v36 = (int32x4_t)vaddw_high_u16((uint32x4_t)v36, v42);
      v35 = (int32x4_t)vaddw_u16((uint32x4_t)v35, *(uint16x4_t *)v42.i8);
      v44 = *(uint8x16_t *)v25[-2].i8;
      v45 = vmovl_u8(*(uint8x8_t *)v44.i8);
      v46 = vmovl_high_u8(v44);
      v47 = vmovl_u8(*v25);
      v48 = vmovl_high_u8(*(uint8x16_t *)v25->i8);
      v24 = (int32x4_t)vaddw_high_u16((uint32x4_t)v24, v46);
      v22 = (int32x4_t)vaddw_u16((uint32x4_t)v22, *(uint16x4_t *)v46.i8);
      v21 = (int32x4_t)vaddw_high_u16((uint32x4_t)v21, v45);
      v20 = (int32x4_t)vaddw_u16((uint32x4_t)v20, *(uint16x4_t *)v45.i8);
      v30 = (int32x4_t)vaddw_high_u16((uint32x4_t)v30, v48);
      v29 = (int32x4_t)vaddw_u16((uint32x4_t)v29, *(uint16x4_t *)v48.i8);
      v23 += 4;
      v28 = (int32x4_t)vaddw_high_u16((uint32x4_t)v28, v47);
      v25 += 4;
      v26 = (int32x4_t)vaddw_u16((uint32x4_t)v26, *(uint16x4_t *)v47.i8);
      v27 -= 32;
    }
    while (v27);
    v11 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v35, v31), vaddq_s32(v37, v33)), vaddq_s32(vaddq_s32(v36, v32), vaddq_s32(v38, v34))));
    v10 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v26, v20), vaddq_s32(v29, v22)), vaddq_s32(vaddq_s32(v28, v21), vaddq_s32(v30, v24))));
    if (a3 == v9)
      goto LABEL_36;
    if ((a3 & 0x18) == 0)
    {
LABEL_34:
      v61 = a3 - v9;
      v62 = (uint8x8_t *)((char *)a2 + v9);
      v63 = (unsigned __int8 *)(v7 + v9 + result);
      do
      {
        v64 = *v63++;
        v11 += v64;
        v65 = v62->u8[0];
        v62 = (uint8x8_t *)((char *)v62 + 1);
        v10 += v65;
        --v61;
      }
      while (v61);
      goto LABEL_36;
    }
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
  }
  v49 = v9;
  v9 = a3 & 0xFFFFFFFFFFFFFFF8;
  v50 = (int32x4_t)v10;
  v51 = (int32x4_t)v11;
  v52 = 0uLL;
  v53 = (uint8x8_t *)(v7 + v49 + result);
  v54 = (uint8x8_t *)((char *)a2 + v49);
  v55 = v49 - (a3 & 0xFFFFFFFFFFFFFFF8);
  v56 = 0uLL;
  do
  {
    v57 = *v53++;
    v58 = vmovl_u8(v57);
    v56 = (int32x4_t)vaddw_high_u16((uint32x4_t)v56, v58);
    v51 = (int32x4_t)vaddw_u16((uint32x4_t)v51, *(uint16x4_t *)v58.i8);
    v59 = *v54++;
    v60 = vmovl_u8(v59);
    v52 = (int32x4_t)vaddw_high_u16((uint32x4_t)v52, v60);
    v50 = (int32x4_t)vaddw_u16((uint32x4_t)v50, *(uint16x4_t *)v60.i8);
    v55 += 8;
  }
  while (v55);
  v11 = vaddvq_s32(vaddq_s32(v51, v56));
  v10 = vaddvq_s32(vaddq_s32(v50, v52));
  if (a3 != v9)
    goto LABEL_34;
LABEL_36:
  v66 = 31 - __clz(a3 - 1);
  if (v11 != v10)
    goto LABEL_44;
LABEL_37:
  v67 = (int8x16_t *)(v7 + result);
  if ((_DWORD)a3 != 1)
  {
    if ((_DWORD)a3)
    {
      switch(v66)
      {
        case 0u:
          v68 = v67->u16[0];
          v69 = a2->u16[0];
          goto LABEL_43;
        case 1u:
          if (v67->u16[0] != a2->u16[0])
            goto LABEL_44;
          v68 = *(unsigned __int16 *)((char *)&v67->u16[-1] + a3);
          v69 = *(unsigned __int16 *)((char *)&a2[-1].u16[3] + a3);
          goto LABEL_43;
        case 2u:
          if (v67->i32[0] != a2->i32[0])
            goto LABEL_44;
          v68 = *(__int32 *)((char *)&v67->i32[-1] + a3);
          v69 = *(__int32 *)((char *)&a2[-1].i32[1] + a3);
          goto LABEL_43;
        case 3u:
          if (v67->i64[0] != *a2
            || *(uint64_t *)((char *)&v67->i64[-1] + a3) != *(_QWORD *)((char *)&a2[-1] + a3))
          {
            goto LABEL_44;
          }
          return result;
        case 4u:
          v73 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)&v67[-1] + a3), *(int8x16_t *)&a2[-2].i8[a3]), vceqq_s8(*v67, *(int8x16_t *)a2->i8));
          v73.i8[0] = vminvq_u8(v73);
          if (!v73.i32[0])
            goto LABEL_44;
          return result;
        default:
          v70 = (uint8x16_t)vceqq_s8(*v67, *(int8x16_t *)a2->i8);
          v70.i8[0] = vminvq_u8(v70);
          if (!v70.i32[0])
            goto LABEL_44;
          v71 = a3 & 0xF;
          if (a3 < 0x10)
            return result;
          break;
      }
      do
      {
        v72 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v67 + v71), *(int8x16_t *)&a2->i8[v71]);
        v72.i8[0] = vminvq_u8(v72);
        if (!v72.i32[0])
          goto LABEL_44;
        v71 += 16;
      }
      while (v71 < a3);
    }
    return result;
  }
  if (!a3)
  {
LABEL_109:
    __break(1u);
    return result;
  }
  v68 = v67->u8[0];
  v69 = a2->u8[0];
LABEL_43:
  if (v68 != v69)
  {
LABEL_44:
    while (result)
    {
      if (--result + a3 >= v4 || result >= v4)
        goto LABEL_109;
      v11 = v11 - *(unsigned __int8 *)(v7 + result + a3) + *(unsigned __int8 *)(v7 + result);
      if (v11 == v10)
        goto LABEL_37;
    }
    return -1;
  }
  return result;
}

uint64_t WTF::StringView::SplitResult::Iterator::findNextSubstring(WTF::StringView::SplitResult::Iterator *this, double a2, double a3, float a4)
{
  unint64_t v5;
  double v6;
  double v7;
  float v8;
  uint64_t result;
  unint64_t v10;
  int v12;

  v5 = WTF::StringView::find(*(_QWORD *)this, *(unsigned __int16 *)(*(_QWORD *)this + 16), *((_DWORD *)this + 2), a2, a3, a4);
  result = *(_QWORD *)this;
  if (v5 == -1)
  {
LABEL_7:
    v12 = *(_DWORD *)(result + 8) - *((_DWORD *)this + 2);
    *((_DWORD *)this + 3) = v12;
    if (!v12 && !*(_BYTE *)(result + 18))
      *((_BYTE *)this + 16) = 1;
  }
  else
  {
    while (1)
    {
      v10 = *((unsigned int *)this + 2);
      if (*(_BYTE *)(result + 18) || v5 > v10)
        break;
      *((_DWORD *)this + 2) = v10 + 1;
      v5 = WTF::StringView::find(result, *(unsigned __int16 *)(result + 16), (int)v10 + 1, v6, v7, v8);
      result = *(_QWORD *)this;
      if (v5 == -1)
        goto LABEL_7;
    }
    *((_DWORD *)this + 3) = v5 - v10;
  }
  return result;
}

uint64_t WTF::StringView::find(uint64_t result, unsigned int a2, unsigned int a3, double a4, double a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int16x8_t *v12;
  unint64_t v13;
  unint64_t v14;
  int16x8_t v15;
  int8x16_t v16;
  int16x8_t *v17;
  __int8 *v18;

  v6 = *(_QWORD *)result;
  v7 = *(unsigned int *)(result + 8);
  if (*(_BYTE *)(result + 12))
  {
    if (a2 <= 0xFF && v7 > a3)
    {
      v8 = v7 - a3;
      v9 = 16;
      if (v8 < 0x10)
        v9 = v8;
      if (v9)
      {
        v10 = v9;
        v11 = (unsigned __int8 *)(v6 + a3);
        while (*v11 != a2)
        {
          ++v11;
          if (!--v10)
            goto LABEL_10;
        }
        return (uint64_t)&v11[-v6];
      }
LABEL_10:
      if (v8 < 0x11)
        return -1;
      v11 = (unsigned __int8 *)memchr((void *)(v6 + a3 + v9), a2, v8 - v9);
      if (v11)
        return (uint64_t)&v11[-v6];
    }
    return -1;
  }
  if (v7 <= a3)
    return -1;
  v12 = (int16x8_t *)(v6 + 2 * a3);
  v13 = v6 + 2 * v7;
  v14 = v13 - (_QWORD)v12;
  if ((uint64_t)(v13 - (_QWORD)v12) <= -2)
  {
    __break(1u);
    return result;
  }
  if (v14 <= 0x3E)
  {
    while (v12->u16[0] != a2)
    {
      v12 = (int16x8_t *)((char *)v12 + 2);
      v14 -= 2;
      if (!v14)
        return -1;
    }
    goto LABEL_21;
  }
  v15 = vdupq_n_s16(a2);
  if ((unint64_t)&v12->u64[1] + 6 >= v13)
  {
    if ((unint64_t)v12 >= v13)
      return -1;
LABEL_19:
    v12 = (int16x8_t *)(v13 - 16);
    v16 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v13 - 16), v15);
    v15.i16[0] = vmaxvq_u16((uint16x8_t)v16);
    if (v15.i32[0])
      goto LABEL_20;
    return -1;
  }
  while (1)
  {
    v16 = (int8x16_t)vceqq_s16(*v12, v15);
    LOWORD(a6) = vmaxvq_u16((uint16x8_t)v16);
    if (a6 != 0.0)
      break;
    v17 = v12 + 1;
    v18 = &v12[1].i8[14];
    ++v12;
    if ((unint64_t)v18 >= v13)
    {
      if ((unint64_t)v17 >= v13)
        return -1;
      goto LABEL_19;
    }
  }
LABEL_20:
  v12 = (int16x8_t *)((char *)v12
                    + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v16)));
LABEL_21:
  if (v12 == (int16x8_t *)v13)
    return -1;
  else
    return ((uint64_t)v12->i64 - v6) >> 1;
}

uint64_t WTF::StringView::SplitResult::Iterator::operator++(uint64_t a1, double a2, double a3, float a4)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v10;

  LODWORD(v5) = *(_DWORD *)(a1 + 8) + *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)a1;
  if (v5 < *(_DWORD *)(v6 + 8))
  {
    while (1)
    {
      *(_DWORD *)(a1 + 8) = v5 + 1;
      v7 = WTF::StringView::find(v6, *(unsigned __int16 *)(v6 + 16), (int)v5 + 1, a2, a3, a4);
      v6 = *(_QWORD *)a1;
      if (v7 == -1)
        break;
      v5 = *(unsigned int *)(a1 + 8);
      if (*(_BYTE *)(v6 + 18))
        v8 = 1;
      else
        v8 = v7 > v5;
      if (v8)
      {
        *(_DWORD *)(a1 + 12) = v7 - v5;
        return a1;
      }
    }
    v10 = *(_DWORD *)(v6 + 8) - *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 12) = v10;
    if (!v10 && !*(_BYTE *)(v6 + 18))
      goto LABEL_14;
    return a1;
  }
  if (*(_BYTE *)(a1 + 16))
    return a1;
LABEL_14:
  *(_BYTE *)(a1 + 16) = 1;
  return a1;
}

uint64_t *WTF::StringView::GraphemeClusters::Iterator::Iterator(uint64_t *a1, const void *a2, uint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;

  if (a2)
  {
    WTF::NonSharedCharacterBreakIterator::NonSharedCharacterBreakIterator(&v14, a2, a3);
    v8 = v14;
    v14 = 0;
  }
  else
  {
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)0x28);
  v10 = v9;
  *(_QWORD *)v9 = a2;
  *(_QWORD *)(v9 + 8) = a3;
  *(_BYTE *)(v9 + 16) = 0;
  *(_BYTE *)(v9 + 24) = 0;
  if (a2)
  {
    *(_QWORD *)(v9 + 16) = v8;
    *(_BYTE *)(v9 + 24) = 1;
    *(_DWORD *)(v9 + 32) = a4;
    if ((_DWORD)a3 != a4)
      a4 = ubrk_following();
    *(_DWORD *)(v10 + 36) = a4;
    *a1 = v10;
    v11 = v14;
    if (v14)
    {
      do
        v12 = __ldxr(&WTF::nonSharedCharacterBreakIterator);
      while (__stlxr(v11, &WTF::nonSharedCharacterBreakIterator));
      if (v12)
        ubrk_close();
    }
  }
  else
  {
    *(_DWORD *)(v9 + 32) = a4;
    *(_DWORD *)(v9 + 36) = 0;
    *a1 = v9;
  }
  return a1;
}

{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;

  if (a2)
  {
    WTF::NonSharedCharacterBreakIterator::NonSharedCharacterBreakIterator(&v14, a2, a3);
    v8 = v14;
    v14 = 0;
  }
  else
  {
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)0x28);
  v10 = v9;
  *(_QWORD *)v9 = a2;
  *(_QWORD *)(v9 + 8) = a3;
  *(_BYTE *)(v9 + 16) = 0;
  *(_BYTE *)(v9 + 24) = 0;
  if (a2)
  {
    *(_QWORD *)(v9 + 16) = v8;
    *(_BYTE *)(v9 + 24) = 1;
    *(_DWORD *)(v9 + 32) = a4;
    if ((_DWORD)a3 != a4)
      a4 = ubrk_following();
    *(_DWORD *)(v10 + 36) = a4;
    *a1 = v10;
    v11 = v14;
    if (v14)
    {
      do
        v12 = __ldxr(&WTF::nonSharedCharacterBreakIterator);
      while (__stlxr(v11, &WTF::nonSharedCharacterBreakIterator));
      if (v12)
        ubrk_close();
    }
  }
  else
  {
    *(_DWORD *)(v9 + 32) = a4;
    *(_DWORD *)(v9 + 36) = 0;
    *a1 = v9;
  }
  return a1;
}

void WTF::StringView::GraphemeClusters::Iterator::~Iterator(WTF::StringView::GraphemeClusters::Iterator *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v8 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_BYTE *)(v8 + 24))
    {
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        do
          v10 = __ldxr(&WTF::nonSharedCharacterBreakIterator);
        while (__stlxr(v9, &WTF::nonSharedCharacterBreakIterator));
        if (v10)
          ubrk_close();
      }
    }
    WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v8 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_BYTE *)(v8 + 24))
    {
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        do
          v10 = __ldxr(&WTF::nonSharedCharacterBreakIterator);
        while (__stlxr(v9, &WTF::nonSharedCharacterBreakIterator));
        if (v10)
          ubrk_close();
      }
    }
    WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
  }
}

_QWORD *WTF::StringView::GraphemeClusters::Iterator::Iterator(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

uint64_t *WTF::StringView::GraphemeClusters::Iterator::operator++(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;

  v1 = result;
  v2 = *result;
  v3 = *(_DWORD *)(*result + 36);
  *(_DWORD *)(v2 + 32) = v3;
  if (*(_BYTE *)(v2 + 24))
  {
    if (v3 != *(_DWORD *)(v2 + 8))
      v3 = ubrk_following();
    *(_DWORD *)(v2 + 36) = v3;
    return v1;
  }
  else
  {
    *(_DWORD *)(v2 + 36) = 0;
  }
  return result;
}

uint64_t *WTF::StringView::GraphemeClusters::Iterator::operator*(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;

  v1 = *result;
  v2 = *(unsigned int *)(*result + 32);
  v3 = *(unsigned int *)(*result + 8);
  if (v3 <= v2)
    return (uint64_t *)&str_25;
  v4 = *(_DWORD *)(v1 + 36) - v2;
  if ((int)v3 - (int)v2 <= v4)
  {
    v4 = v3 - v2;
    if (!(_DWORD)v2)
      return *(uint64_t **)v1;
  }
  v5 = v3 - v2;
  if (*(_BYTE *)(v1 + 12))
  {
    if (v5 >= v4)
      return (uint64_t *)(*(_QWORD *)v1 + v2);
  }
  else if (v5 >= v4)
  {
    return (uint64_t *)(*(_QWORD *)v1 + 2 * v2);
  }
  __break(1u);
  return result;
}

BOOL WTF::StringView::GraphemeClusters::Iterator::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(*(_QWORD *)a1 + 32) == *(_DWORD *)(*(_QWORD *)a2 + 32);
}

void WTF::StringView::convertToASCIILowercase(int16x8_t **this@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  int16x8_t *v10;
  int16x8_t *v11;
  size_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  _WORD *v32;
  int v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  int v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _WORD *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int8x16_t *v58;
  int16x8_t *v59;
  int16x8_t v60;
  uint16x8_t v61;
  int8x16_t v62;
  unint64_t v63;
  int8x16_t v64;
  int v65;

  v10 = *this;
  v11 = *this;
  v12 = *((unsigned int *)this + 2);
  if (*((_BYTE *)this + 12))
  {
    if (v11)
    {
      if ((_DWORD)v12)
      {
        if ((v12 & 0x80000000) == 0)
        {
          v20 = WTF::fastCompactMalloc((WTF *)(v12 + 20));
          v21 = (_BYTE *)(v20 + 20);
          *(_DWORD *)v20 = 2;
          *(_DWORD *)(v20 + 4) = v12;
          *(_QWORD *)(v20 + 8) = v20 + 20;
          *(_DWORD *)(v20 + 16) = 4;
          if ((_DWORD)v12 == 1)
            *v21 = v11->i8[0];
          else
            memcpy(v21, v11, v12);
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v13, v14, v15, v16, v17, v18, v19);
          WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
          v42 = WTF::fastCompactMalloc((WTF *)(v12 + 20));
          v43 = (_BYTE *)(v42 + 20);
          *(_DWORD *)v42 = 2;
          *(_DWORD *)(v42 + 4) = v12;
          *(_QWORD *)(v42 + 8) = v42 + 20;
          *(_DWORD *)(v42 + 16) = 4;
          *a9 = v42;
          do
          {
            v44 = v11->u8[0];
            v11 = (int16x8_t *)((char *)v11 + 1);
            *v43++ = WTF::asciiCaseFoldTable[v44];
            --v12;
          }
          while (v12);
          return;
        }
LABEL_31:
        __break(0xC471u);
        JUMPOUT(0x197B14924);
      }
      v33 = WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      if (!v33)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
LABEL_30:
        WTF::StringImpl::s_emptyAtomString += 2;
        *a9 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
        return;
      }
LABEL_20:
      WTF::StringImpl::s_emptyAtomString = v33;
      goto LABEL_30;
    }
LABEL_12:
    *a9 = 0;
    return;
  }
  if (!v11)
    goto LABEL_12;
  v30 = 2 * v12;
  if ((_DWORD)v12)
  {
    if (v12 >= 0x7FFFFFF0)
      goto LABEL_31;
    v31 = (int *)WTF::fastCompactMalloc((WTF *)(v30 + 20));
    v32 = v31 + 5;
    *v31 = 2;
    v31[1] = v12;
    *((_QWORD *)v31 + 1) = v31 + 5;
    v31[4] = 0;
    if ((_DWORD)v12 == 1)
      *v32 = v11->i16[0];
    else
      memcpy(v32, v11, 2 * v12);
  }
  else
  {
    v31 = &WTF::StringImpl::s_emptyAtomString;
    v33 = WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    if (v33)
      goto LABEL_20;
  }
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v31, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
  if (!(_DWORD)v12)
    goto LABEL_30;
  v53 = WTF::fastCompactMalloc((WTF *)(v30 + 20));
  v54 = (_WORD *)(v53 + 20);
  *(_DWORD *)v53 = 2;
  *(_DWORD *)(v53 + 4) = v12;
  *(_QWORD *)(v53 + 8) = v53 + 20;
  *(_DWORD *)(v53 + 16) = 0;
  *a9 = v53;
  v55 = (v12 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v55 < 0xF)
    goto LABEL_35;
  if ((unint64_t)(v53 - (_QWORD)v10 + 20) < 0x20)
    goto LABEL_35;
  v56 = v55 + 1;
  v57 = 2 * (v56 & 0xFFFFFFFFFFFFFFF0);
  v11 = (int16x8_t *)((char *)v10 + v57);
  v54 = (_WORD *)((char *)v54 + v57);
  v58 = (int8x16_t *)(v53 + 36);
  v59 = v10 + 1;
  v60.i64[0] = 0x40004000400040;
  v60.i64[1] = 0x40004000400040;
  v61.i64[0] = 0x1A001A001A001ALL;
  v61.i64[1] = 0x1A001A001A001ALL;
  v62.i64[0] = 0x20002000200020;
  v62.i64[1] = 0x20002000200020;
  v63 = v56 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v64 = vorrq_s8(vandq_s8((int8x16_t)vcgtq_u16(v61, (uint16x8_t)vaddq_s16(*v59, v60)), v62), *(int8x16_t *)v59);
    v58[-1] = vorrq_s8(vandq_s8((int8x16_t)vcgtq_u16(v61, (uint16x8_t)vaddq_s16(v59[-1], v60)), v62), (int8x16_t)v59[-1]);
    *v58 = v64;
    v58 += 2;
    v59 += 2;
    v63 -= 16;
  }
  while (v63);
  if (v56 != (v56 & 0xFFFFFFFFFFFFFFF0))
  {
LABEL_35:
    do
    {
      v65 = v11->u16[0];
      v11 = (int16x8_t *)((char *)v11 + 2);
      *v54++ = v65 | (32 * ((v65 - 65) < 0x1A));
    }
    while (v11 != (int16x8_t *)&v10->i8[v30]);
  }
}

void WTF::StringView::convertToASCIIUppercase(int8x16_t **this@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  int8x16_t *v10;
  int8x16_t *v11;
  size_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  _WORD *v32;
  int v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _WORD *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int8x16_t *v58;
  int16x8_t *v59;
  int16x8_t v60;
  uint16x8_t v61;
  unint64_t v62;
  int16x8_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int8x16_t *v70;
  int8x16_t *v71;
  int8x16_t v72;
  uint8x16_t v73;
  int8x16_t v74;
  uint64_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x8_t *v80;
  int8x8_t *v81;
  uint64_t v82;
  int8x8_t v83;
  int8x8_t v84;
  char v85;
  int v86;
  char v87;

  v10 = *this;
  v11 = *this;
  v12 = *((unsigned int *)this + 2);
  if (*((_BYTE *)this + 12))
  {
    if (v11)
    {
      if ((_DWORD)v12)
      {
        if ((v12 & 0x80000000) == 0)
        {
          v20 = WTF::fastCompactMalloc((WTF *)(v12 + 20));
          v21 = (_BYTE *)(v20 + 20);
          *(_DWORD *)v20 = 2;
          *(_DWORD *)(v20 + 4) = v12;
          *(_QWORD *)(v20 + 8) = v20 + 20;
          *(_DWORD *)(v20 + 16) = 4;
          if ((_DWORD)v12 == 1)
            *v21 = v11->i8[0];
          else
            memcpy(v21, v11, v12);
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v13, v14, v15, v16, v17, v18, v19);
          WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
          v42 = WTF::fastCompactMalloc((WTF *)(v12 + 20));
          v43 = (_BYTE *)(v42 + 20);
          *(_DWORD *)v42 = 2;
          *(_DWORD *)(v42 + 4) = v12;
          *(_QWORD *)(v42 + 8) = v42 + 20;
          *(_DWORD *)(v42 + 16) = 4;
          *a9 = v42;
          if (v12 >= 8 && (unint64_t)(v42 - (_QWORD)v10 + 20) >= 0x20)
          {
            if (v12 < 0x20)
            {
              v44 = 0;
LABEL_39:
              v43 += v12 & 0xFFFFFFF8;
              v11 = (int8x16_t *)((char *)v10 + (v12 & 0xFFFFFFF8));
              v80 = (int8x8_t *)&v10->i8[v44];
              v81 = (int8x8_t *)(v44 + v42 + 20);
              v82 = v44 - (v12 & 0xFFFFFFF8);
              do
              {
                v83 = *v80++;
                v84 = (int8x8_t)vcgt_u8((uint8x8_t)0x1A1A1A1A1A1A1A1ALL, (uint8x8_t)vadd_s8(v83, (int8x8_t)0x9F9F9F9F9F9F9F9FLL));
                *v81++ = vand_s8(vorn_s8(vand_s8(v84, (int8x8_t)0xDFDFDFDFDFDFDFDFLL), v84), v83);
                v82 += 8;
              }
              while (v82);
              if ((v12 & 0xFFFFFFF8) == v12)
                return;
              goto LABEL_44;
            }
            v44 = v12 & 0xFFFFFFE0;
            v70 = v10 + 1;
            v71 = (int8x16_t *)(v42 + 36);
            v72.i64[0] = 0x9F9F9F9F9F9F9F9FLL;
            v72.i64[1] = 0x9F9F9F9F9F9F9F9FLL;
            v73.i64[0] = 0x1A1A1A1A1A1A1A1ALL;
            v73.i64[1] = 0x1A1A1A1A1A1A1A1ALL;
            v74.i64[0] = 0xDFDFDFDFDFDFDFDFLL;
            v74.i64[1] = 0xDFDFDFDFDFDFDFDFLL;
            v75 = v44;
            do
            {
              v76 = v70[-1];
              v77 = (int8x16_t)vcgtq_u8(v73, (uint8x16_t)vaddq_s8(v76, v72));
              v78 = (int8x16_t)vcgtq_u8(v73, (uint8x16_t)vaddq_s8(*v70, v72));
              v79 = vandq_s8(vornq_s8(vandq_s8(v78, v74), v78), *v70);
              v71[-1] = vandq_s8(vornq_s8(vandq_s8(v77, v74), v77), v76);
              *v71 = v79;
              v70 += 2;
              v71 += 2;
              v75 -= 32;
            }
            while (v75);
            if (v44 == v12)
              return;
            if ((v12 & 0x18) != 0)
              goto LABEL_39;
            v11 = (int8x16_t *)((char *)v10 + v44);
            v43 += v44;
          }
          do
          {
LABEL_44:
            v86 = v11->u8[0];
            v11 = (int8x16_t *)((char *)v11 + 1);
            v85 = v86;
            if ((v86 - 97) >= 0x1A)
              v87 = -1;
            else
              v87 = -33;
            *v43++ = v87 & v85;
          }
          while (v11 != (int8x16_t *)&v10->i8[v12]);
          return;
        }
LABEL_49:
        __break(0xC471u);
        JUMPOUT(0x197B14D14);
      }
      v33 = WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      if (!v33)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
LABEL_34:
        WTF::StringImpl::s_emptyAtomString += 2;
        *a9 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
        return;
      }
LABEL_21:
      WTF::StringImpl::s_emptyAtomString = v33;
      goto LABEL_34;
    }
LABEL_12:
    *a9 = 0;
    return;
  }
  if (!v11)
    goto LABEL_12;
  v30 = 2 * v12;
  if ((_DWORD)v12)
  {
    if (v12 >= 0x7FFFFFF0)
      goto LABEL_49;
    v31 = (int *)WTF::fastCompactMalloc((WTF *)(v30 + 20));
    v32 = v31 + 5;
    *v31 = 2;
    v31[1] = v12;
    *((_QWORD *)v31 + 1) = v31 + 5;
    v31[4] = 0;
    if ((_DWORD)v12 == 1)
      *v32 = v11->i16[0];
    else
      memcpy(v32, v11, 2 * v12);
  }
  else
  {
    v31 = &WTF::StringImpl::s_emptyAtomString;
    v33 = WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    if (v33)
      goto LABEL_21;
  }
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v31, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
  if (!(_DWORD)v12)
    goto LABEL_34;
  v53 = WTF::fastCompactMalloc((WTF *)(v30 + 20));
  v54 = (_WORD *)(v53 + 20);
  *(_DWORD *)v53 = 2;
  *(_DWORD *)(v53 + 4) = v12;
  *(_QWORD *)(v53 + 8) = v53 + 20;
  *(_DWORD *)(v53 + 16) = 0;
  *a9 = v53;
  v55 = (v12 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v55 < 0xF)
    goto LABEL_53;
  if ((unint64_t)(v53 - (_QWORD)v10 + 20) < 0x20)
    goto LABEL_53;
  v56 = v55 + 1;
  v57 = 2 * (v56 & 0xFFFFFFFFFFFFFFF0);
  v11 = (int8x16_t *)((char *)v10 + v57);
  v54 = (_WORD *)((char *)v54 + v57);
  v58 = (int8x16_t *)(v53 + 36);
  v59 = (int16x8_t *)&v10[1];
  v60.i64[0] = 0x60006000600060;
  v60.i64[1] = 0x60006000600060;
  v61.i64[0] = 0x1A001A001A001ALL;
  v61.i64[1] = 0x1A001A001A001ALL;
  v62 = v56 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v63 = v59[-1];
    v64 = (int8x16_t)vcgtq_u16(v61, (uint16x8_t)vaddq_s16(v63, v60));
    v65 = (int8x16_t)vcgtq_u16(v61, (uint16x8_t)vaddq_s16(*v59, v60));
    v66 = vandq_s8(vornq_s8((int8x16_t)(*(_OWORD *)&v65 & __PAIR128__(0xFFDFFFDFFFDFFFDFLL, 0xFFDFFFDFFFDFFFDFLL)), v65), *(int8x16_t *)v59);
    v58[-1] = vandq_s8(vornq_s8((int8x16_t)(*(_OWORD *)&v64 & __PAIR128__(0xFFDFFFDFFFDFFFDFLL, 0xFFDFFFDFFFDFFFDFLL)), v64), (int8x16_t)v63);
    *v58 = v66;
    v58 += 2;
    v59 += 2;
    v62 -= 16;
  }
  while (v62);
  if (v56 != (v56 & 0xFFFFFFFFFFFFFFF0))
  {
LABEL_53:
    do
    {
      v68 = v11->u16[0];
      v11 = (int8x16_t *)((char *)v11 + 2);
      v67 = v68;
      if ((v68 - 97) >= 0x1A)
        v69 = -1;
      else
        v69 = -33;
      *v54++ = v69 & v67;
    }
    while (v11 != (int8x16_t *)&v10->i8[v30]);
  }
}

void WTF::StringView::convertToASCIILowercaseAtom(WTF::StringView *this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, WTF *a8@<X8>)
{
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  int v17;
  uint64_t v18;
  int v19;
  char v20;

  v10 = *((unsigned __int8 *)this + 12);
  v11 = *(_QWORD *)this;
  v12 = *((unsigned int *)this + 2);
  if (v10)
  {
    if ((_DWORD)v12)
    {
      v13 = *((unsigned int *)this + 2);
      v14 = (unsigned __int8 *)v11;
      while (*v14 - 65 > 0x19)
      {
        ++v14;
        if (!--v13)
          goto LABEL_6;
      }
      v17 = 1;
      v18 = v11;
      v19 = v12;
      v20 = 1;
      WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIICaseConverter,void>>(a8, &v17, a2, a3, a4, a5, a6, a7);
      if (!*(_QWORD *)a8)
        goto LABEL_16;
    }
    else
    {
LABEL_6:
      WTF::AtomStringImpl::add(v11, v12, a3, a4, a5, a6, a7, a8);
    }
  }
  else if ((_DWORD)v12)
  {
    v15 = 2 * v12;
    v16 = (unsigned __int16 *)v11;
    while (*v16 - 65 > 0x19)
    {
      ++v16;
      v15 -= 2;
      if (!v15)
        goto LABEL_11;
    }
    v17 = 1;
    v18 = v11;
    v20 = 0;
    v19 = v12;
    WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIICaseConverter,void>>(a8, &v17, a2, a3, a4, a5, a6, a7);
    if (!*(_QWORD *)a8)
    {
LABEL_16:
      __break(0xC471u);
      JUMPOUT(0x197B14DECLL);
    }
  }
  else
  {
LABEL_11:
    WTF::AtomStringImpl::add(v11, v12, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t WTF::StringView::getCharactersWithASCIICase(uint64_t result, int a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  unsigned __int8 *v6;
  unsigned int v7;

  v3 = *(unsigned int *)(result + 8);
  if (a2 == 1)
    v4 = (uint64_t (*)(_QWORD))WTF::toASCIILower<unsigned char>;
  else
    v4 = (uint64_t (*)(_QWORD))WTF::toASCIIUpper<unsigned char>;
  if ((_DWORD)v3)
  {
    v6 = *(unsigned __int8 **)result;
    do
    {
      v7 = *v6++;
      result = v4(v7);
      *a3++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t WTF::StringView::getCharactersWithASCIICase(uint64_t result, int a2, _WORD *a3)
{
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  unsigned int v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  unsigned int v10;

  v4 = *(unsigned __int16 **)result;
  v5 = *(unsigned int *)(result + 8);
  if (*(_BYTE *)(result + 12))
  {
    if (a2 == 1)
      v6 = (uint64_t (*)(_QWORD))WTF::toASCIILower<unsigned char>;
    else
      v6 = (uint64_t (*)(_QWORD))WTF::toASCIIUpper<unsigned char>;
    if ((_DWORD)v5)
    {
      do
      {
        v7 = *(unsigned __int8 *)v4;
        v4 = (unsigned __int16 *)((char *)v4 + 1);
        result = v6(v7);
        *a3++ = result;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    if (a2 == 1)
      v8 = (uint64_t (*)(_QWORD))WTF::toASCIILower<char16_t>;
    else
      v8 = (uint64_t (*)(_QWORD))WTF::toASCIIUpper<char16_t>;
    if ((_DWORD)v5)
    {
      v9 = 2 * v5;
      do
      {
        v10 = *v4++;
        result = v8(v10);
        *a3++ = result;
        v9 -= 2;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t WTF::normalizedNFC@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, int **a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  int *v6;
  int v7;

  v3 = a2;
  v4 = result;
  if ((a2 & 0xFF00000000) != 0)
  {
    *a3 = 0;
LABEL_11:
    a3[1] = (int *)v4;
    a3[2] = (int *)v3;
    return result;
  }
  unorm2_getNFCInstance();
  result = unorm2_isNormalized();
  if ((_DWORD)result)
  {
    v6 = 0;
LABEL_10:
    *a3 = v6;
    goto LABEL_11;
  }
  result = unorm2_normalize();
  v7 = result;
  if (!(_DWORD)result)
  {
    v6 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_9;
  }
  if (result < 0x7FFFFFF0)
  {
    v6 = (int *)WTF::fastCompactMalloc((WTF *)(2 * result + 20));
    *v6 = 2;
    v6[1] = v7;
    *((_QWORD *)v6 + 1) = v6 + 5;
    v6[4] = 0;
LABEL_9:
    result = unorm2_normalize();
    v4 = *((_QWORD *)v6 + 1);
    v3 = v6[1] | ((unint64_t)((v6[4] >> 2) & 1) << 32);
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

void WTF::normalizedNFC(WTF::StringImpl **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23[3];

  if (*this)
  {
    WTF::normalizedNFC(*((_QWORD *)*this + 1), *((unsigned int *)*this + 1) | ((unint64_t)((*((_DWORD *)*this + 4) >> 2) & 1) << 32), (int **)v23);
    v12 = v23[0];
    if (v23[0])
      goto LABEL_3;
  }
  else
  {
    WTF::normalizedNFC(0, 0x100000000uLL, (int **)v23);
    v12 = v23[0];
    if (v23[0])
    {
LABEL_3:
      v13 = *(_DWORD *)v12;
      *(_DWORD *)v12 += 2;
      *a2 = v12;
      if (v13)
      {
        *(_DWORD *)v12 = v13;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v12, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
      }
      return;
    }
  }
  v14 = *this;
  if (*this)
    *(_DWORD *)v14 += 2;
  *a2 = v14;
}

BOOL WTF::equalRespectingNullity(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  int8x16_t *v4;
  unsigned int v5;
  unsigned int v6;
  int8x16_t *v7;
  uint64_t v8;
  _BOOL8 result;
  int16x8_t *v10;
  unsigned int v11;
  uint8x8_t *v12;
  uint16x8_t v13;
  unsigned int v14;
  uint16x8_t v15;
  BOOL v16;
  uint8x8_t *v17;
  unsigned int v18;
  int16x8_t *v19;
  uint16x8_t v20;
  unsigned int v21;
  uint16x8_t v22;
  BOOL v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v37;
  __int32 v38;
  uint64_t v39;
  int v40;
  int v41;
  int v43;
  __int32 v44;
  uint64_t v45;
  int v46;
  int v47;
  uint8x16_t v49;
  unsigned int v50;
  uint8x16_t v51;
  BOOL v52;
  uint8x16_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  unsigned int v56;
  uint16x8_t v57;
  BOOL v58;

  if (a1 == a3)
    return (_DWORD)a2 == (_DWORD)a4;
  if (!(_DWORD)a2)
  {
    if ((_DWORD)a4)
      return 0;
    else
      return (a1 != 0) ^ (a3 == 0);
  }
  if ((_DWORD)a2 != (_DWORD)a4)
    return 0;
  v7 = (int8x16_t *)(a4 & 0xFF00000000);
  v8 = a4;
  if ((a2 & 0xFF00000000) != 0)
  {
    if (v7)
    {
      if ((_DWORD)a4)
      {
        if (*a1 == *a3)
        {
          v5 = a4 - 1;
          if ((_DWORD)a4 != 1)
          {
            v4 = (int8x16_t *)(a1 + 1);
            v7 = (int8x16_t *)(a3 + 1);
            v6 = a4 - 2;
            if ((_DWORD)a4 == 2)
              return v4->u8[0] == v7->u8[0];
            goto LABEL_44;
          }
          return 1;
        }
        return 0;
      }
    }
    else if ((_DWORD)a4)
    {
      if (*(_WORD *)a3 == *a1)
      {
        v17 = (uint8x8_t *)(a1 + 1);
        v18 = a4 - 1;
        v19 = (int16x8_t *)(a3 + 2);
        if ((a4 - 1) < 8)
        {
          if (v18 >= 4)
          {
            v31 = (v17->u32[0] | ((unint64_t)v17->u32[0] << 16)) & 0xFFFF0000FFFFLL;
            v30 = ((v31 | (v31 << 8)) & 0xFF00FF00FF00FFLL) == v19->i64[0];
            v32 = v18 & 3;
            v33 = (*(unsigned int *)((char *)v17->u32 + v32) | ((unint64_t)*(unsigned int *)((char *)v17->u32
                                                                                                  + v32) << 16)) & 0xFFFF0000FFFFLL;
            v34 = (v33 | (v33 << 8)) & 0xFF00FF00FF00FFLL;
            v35 = *(uint64_t *)((char *)v19->i64 + 2 * v32);
            return v30 && v34 == v35;
          }
          if (v18 >= 2)
          {
            v43 = (v17->u16[0] | (v17->u16[0] << 8)) & 0xFF00FF;
            v44 = v19->i32[0];
            v45 = v18 & 1;
            v46 = (*(unsigned __int16 *)((char *)v17->u16 + v45) | (*(unsigned __int16 *)((char *)v17->u16 + v45) << 8)) & 0xFF00FF;
            v47 = *(__int32 *)((char *)v19->i32 + 2 * v45);
            return v43 == v44 && v46 == v47;
          }
          if ((_DWORD)a4 == 2)
            return v19->u16[0] == v17->u8[0];
          return 1;
        }
        v20 = (uint16x8_t)vceqq_s16(*v19, (int16x8_t)vmovl_u8(*v17));
        v20.i16[0] = vminvq_u16(v20);
        if (v20.i32[0])
        {
          v21 = v18 & 7;
          do
          {
            v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v19 + 2 * v21), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v17 + v21)));
            v22.i16[0] = vminvq_u16(v22);
            result = v22.i32[0] != 0;
            v21 += 8;
            if (v22.i32[0])
              v23 = v21 >= v18;
            else
              v23 = 1;
          }
          while (!v23);
          return result;
        }
      }
      return 0;
    }
    goto LABEL_43;
  }
  if (v7)
  {
    if ((_DWORD)a4)
    {
      if (*(_WORD *)a1 == *a3)
      {
        v10 = (int16x8_t *)(a1 + 2);
        v11 = a4 - 1;
        v12 = (uint8x8_t *)(a3 + 1);
        if ((a4 - 1) < 8)
        {
          if (v11 >= 4)
          {
            v25 = (v12->u32[0] | ((unint64_t)v12->u32[0] << 16)) & 0xFFFF0000FFFFLL;
            v30 = ((v25 | (v25 << 8)) & 0xFF00FF00FF00FFLL) == v10->i64[0];
            v26 = v11 & 3;
            v27 = (*(unsigned int *)((char *)v12->u32 + v26) | ((unint64_t)*(unsigned int *)((char *)v12->u32
                                                                                                  + v26) << 16)) & 0xFFFF0000FFFFLL;
            v28 = (v27 | (v27 << 8)) & 0xFF00FF00FF00FFLL;
            v29 = *(uint64_t *)((char *)v10->i64 + 2 * v26);
            return v30 && v28 == v29;
          }
          if (v11 >= 2)
          {
            v37 = (v12->u16[0] | (v12->u16[0] << 8)) & 0xFF00FF;
            v38 = v10->i32[0];
            v39 = v11 & 1;
            v40 = (*(unsigned __int16 *)((char *)v12->u16 + v39) | (*(unsigned __int16 *)((char *)v12->u16 + v39) << 8)) & 0xFF00FF;
            v41 = *(__int32 *)((char *)v10->i32 + 2 * v39);
            return v37 == v38 && v40 == v41;
          }
          if ((_DWORD)a4 == 2)
            return v10->u16[0] == v12->u8[0];
          return 1;
        }
        v13 = (uint16x8_t)vceqq_s16(*v10, (int16x8_t)vmovl_u8(*v12));
        v13.i16[0] = vminvq_u16(v13);
        if (v13.i32[0])
        {
          v14 = v11 & 7;
          do
          {
            v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v10 + 2 * v14), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v12 + v14)));
            v15.i16[0] = vminvq_u16(v15);
            result = v15.i32[0] != 0;
            v14 += 8;
            if (v15.i32[0])
              v16 = v14 >= v11;
            else
              v16 = 1;
          }
          while (!v16);
          return result;
        }
      }
      return 0;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    switch(31 - __clz(v6))
    {
      case 0u:
        return v4->u16[0] == v7->u16[0];
      case 1u:
        if (v4->u16[0] != v7->u16[0])
          return 0;
        return *(unsigned __int16 *)&a1[a4 - 2] == *(unsigned __int16 *)&a3[a4 - 2];
      case 2u:
        if (v4->i32[0] != v7->i32[0])
          return 0;
        goto LABEL_101;
      case 3u:
        if (v4->i64[0] == v7->i64[0])
          goto LABEL_104;
        return 0;
      case 4u:
        v53 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)&a1[a4 - 16], *(int8x16_t *)&a3[a4 - 16]), vceqq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a3 + 1)));
        v53.i8[0] = vminvq_u8(v53);
        return v53.i32[0] != 0;
      default:
        v49 = (uint8x16_t)vceqq_s8(*v4, *v7);
        v49.i8[0] = vminvq_u8(v49);
        if (!v49.i32[0])
          return 0;
        if (v5 < 0x10)
          return 1;
        v50 = v5 & 0xF;
        do
        {
          v51 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v4 + v50), *(int8x16_t *)((char *)v7 + v50));
          v51.i8[0] = vminvq_u8(v51);
          result = v51.i32[0] != 0;
          v50 += 16;
          if (v51.i32[0])
            v52 = v50 >= v5;
          else
            v52 = 1;
        }
        while (!v52);
        break;
    }
    return result;
  }
  if (!(_DWORD)a4)
    goto LABEL_43;
  if (*(unsigned __int16 *)a1 != *(unsigned __int16 *)a3)
    return 0;
  v24 = a4 - 1;
  if ((_DWORD)a4 == 1)
    return 1;
  v4 = (int8x16_t *)(a1 + 2);
  v7 = (int8x16_t *)(a3 + 2);
  if ((_DWORD)a4 == 2)
    return v4->u16[0] == v7->u16[0];
  switch(31 - __clz(a4 - 2))
  {
    case 0u:
      result = v4->i32[0] == v7->i32[0];
      break;
    case 1u:
      if (v4->i32[0] != v7->i32[0])
        return 0;
      v8 = 2 * a4;
LABEL_101:
      result = *(_DWORD *)&a1[v8 - 4] == *(_DWORD *)&a3[v8 - 4];
      break;
    case 2u:
      if (v4->i64[0] != v7->i64[0])
        return 0;
      v8 = 2 * a4;
LABEL_104:
      result = *(_QWORD *)&a1[v8 - 8] == *(_QWORD *)&a3[v8 - 8];
      break;
    case 3u:
      v55 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&a1[2 * a4 - 16], *(int16x8_t *)&a3[2 * a4 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(a1 + 2), *(int16x8_t *)(a3 + 2)));
      v55.i16[0] = vminvq_u16(v55);
      result = v55.i32[0] != 0;
      break;
    default:
      v54 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v4, *(int16x8_t *)v7);
      v54.i16[0] = vminvq_u16(v54);
      if (!v54.i32[0])
        return 0;
      if (v24 < 8)
        return 1;
      v56 = v24 & 7;
      do
      {
        v57 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v4 + 2 * v56), *(int16x8_t *)((char *)v7 + 2 * v56));
        v57.i16[0] = vminvq_u16(v57);
        result = v57.i32[0] != 0;
        v56 += 8;
        if (v57.i32[0])
          v58 = v56 >= v24;
        else
          v58 = 1;
      }
      while (!v58);
      break;
  }
  return result;
}

uint64_t WTF::StringView::reverseFind(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;

  if (!*(_QWORD *)a1)
    return -1;
  v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= a4)
    return a4;
  else
    return v4;
}

_WORD *WTF::makeStringByReplacingAll@<X0>(_WORD *result@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, int **a5@<X8>)
{
  unsigned int v7;
  uint8x8_t *v8;
  int **v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  unint64_t v19;
  size_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int8x16_t *v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  size_t v28;
  unint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  size_t v32;
  uint64_t v33;
  int8x16_t *v34;
  int8x16_t v35;
  size_t v36;
  int v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  int16x8_t v42;
  int8x16_t v43;
  unint64_t v44;
  int8x16_t v45;
  char *v46;
  int v47;
  int16x8_t v48;
  int8x16_t v49;
  unint64_t v50;
  int8x16_t *v51;
  uint8x8_t *v52;
  unint64_t v53;
  uint8x16_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  unint64_t v59;
  uint64_t v60;
  uint8x8_t *v61;
  unint64_t v62;
  uint8x8_t v63;
  int16x8_t v64;
  __int16 v65;
  int v66;

  v7 = a2;
  v8 = (uint8x8_t *)result;
  v9 = a5;
  if ((a2 & 0xFF00000000) == 0)
  {
    v14 = a2;
    if (!(_DWORD)a2)
      goto LABEL_23;
    v15 = 0;
    v16 = 0;
    v17 = a2;
    while ((unsigned __int16)result[v16] != a3)
    {
      ++v16;
      --v17;
      v15 -= 2;
      if (a2 == v16)
      {
        v9 = a5;
        if (result)
        {
          if (a2 > 0x7FFFFFEFuLL)
          {
            __break(0xC471u);
            JUMPOUT(0x197B15C18);
          }
          v18 = (int *)WTF::fastCompactMalloc((WTF *)(2 * a2 + 20));
          result = v18 + 5;
          *v18 = 2;
          v18[1] = v7;
          *((_QWORD *)v18 + 1) = v18 + 5;
          v18[4] = 0;
          if (v14 == 1)
            *result = v8->i16[0];
          else
            result = memcpy(result, v8, 2 * v14);
          goto LABEL_89;
        }
LABEL_25:
        v18 = 0;
        goto LABEL_89;
      }
    }
    if (a2 > 0x7FFFFFEFuLL)
    {
      __break(0xC471u);
      JUMPOUT(0x197B15C10);
    }
    v19 = a2 - v16;
    v18 = (int *)WTF::fastCompactMalloc((WTF *)(2 * a2 + 20));
    result = v18 + 5;
    *v18 = 2;
    v18[1] = v7;
    *((_QWORD *)v18 + 1) = v18 + 5;
    v18[4] = 0;
    if (v16)
    {
      if (v16 != 1)
      {
        result = memcpy(result, v8, -v15);
        if (v19 < 0x10)
          goto LABEL_31;
        goto LABEL_64;
      }
      *result = v8->i16[0];
    }
    if (v19 < 0x10)
    {
LABEL_31:
      v9 = a5;
      do
      {
LABEL_70:
        v47 = v8->u16[v16];
        if (v47 == a3)
          LOWORD(v47) = a4;
        *((_WORD *)v18 + v16++ + 10) = v47;
      }
      while (v14 != v16);
      goto LABEL_89;
    }
LABEL_64:
    if ((unint64_t)((char *)v18 - (char *)v8 + 20) >= 0x20)
    {
      v41 = -v15;
      v16 += v17 & 0xFFFFFFFFFFFFFFF0;
      v42 = vdupq_n_s16(a3);
      v43 = (int8x16_t)vdupq_n_s16(a4);
      v44 = v19 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v45 = vbslq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v8[2].i8[v41], v42), v43, *(int8x16_t *)&v8[2].i8[v41]);
        v46 = (char *)v18 + v41;
        *(int8x16_t *)(v46 + 20) = vbslq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v8->i8[v41], v42), v43, *(int8x16_t *)&v8->i8[v41]);
        *(int8x16_t *)(v46 + 36) = v45;
        v41 += 32;
        v44 -= 16;
      }
      while (v44);
      v9 = a5;
      if (v19 == (v19 & 0xFFFFFFFFFFFFFFF0))
        goto LABEL_89;
    }
    else
    {
      v9 = a5;
    }
    goto LABEL_70;
  }
  v10 = a2;
  if (a3 >= 0x100)
  {
    if (!result)
      goto LABEL_25;
    if ((_DWORD)a2)
    {
      if ((unint64_t)a2 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x197B15C08);
      }
      goto LABEL_21;
    }
LABEL_24:
    v18 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_89;
  }
  if (!(_DWORD)a2)
  {
LABEL_23:
    if (!result)
      goto LABEL_25;
    goto LABEL_24;
  }
  v11 = 0;
  v12 = 0;
  v13 = a2 - 1;
  do
  {
    if (*((unsigned __int8 *)result + v12) == a3)
    {
      if (a4 <= 0xFF)
      {
        if ((unint64_t)a2 >> 31)
        {
          __break(0xC471u);
        }
        else
        {
          v18 = (int *)WTF::fastCompactMalloc((WTF *)(a2 + 20));
          *v18 = 2;
          v18[1] = v7;
          *((_QWORD *)v18 + 1) = v18 + 5;
          v18[4] = 4;
          result = memcpy(v18 + 5, v8, v12);
          v20 = ~v12 + v10;
          v21 = v10 - v12;
          if (v10 < v12)
            v21 = 0;
          if (v20 >= v21)
            v20 = v21;
          v22 = v20 + 1;
          v23 = v12;
          if (v22 >= 0x11)
          {
            v23 = v12;
            if ((unint64_t)((char *)v18 - (char *)v8 + 20) >= 0x10)
            {
              v24 = (int8x16_t *)((char *)v8 + v12);
              v25 = ~v12 + v10;
              v26 = v22 & 0xF;
              v27 = 16;
              if (v26)
                v27 = v26;
              if (v12 <= v10)
                v28 = v7;
              else
                v28 = v12;
              v29 = v28 + v11;
              if (v13 < v28 + v11)
                v29 = v13;
              v23 = v29 - v27 + v12 + 1;
              v30 = vdupq_n_s8(a3);
              v31 = vdupq_n_s8(a4);
              v32 = v28 - v12;
              if (v25 >= v32)
                v25 = v32;
              v33 = ~v25 + v27;
              v34 = (int8x16_t *)((char *)v18 + v12 + 20);
              do
              {
                v35 = *v24++;
                *v34++ = vbslq_s8(vceqq_s8(v35, v30), v31, v35);
                v33 += 16;
              }
              while (v33);
            }
          }
          if (v12 <= v10)
            v36 = v7;
          else
            v36 = v12;
          while (v36 != v23)
          {
            v37 = v8->u8[v23];
            if (v37 == a3)
              LOBYTE(v37) = a4;
            *((_BYTE *)v18 + v23++ + 20) = v37;
            if (v10 == v23)
              goto LABEL_89;
          }
        }
        __break(1u);
LABEL_95:
        __break(0xC471u);
        JUMPOUT(0x197B15744);
      }
      if (a2 > 0x7FFFFFEFuLL)
        goto LABEL_95;
      result = (_WORD *)WTF::fastCompactMalloc((WTF *)(2 * a2 + 20));
      v18 = (int *)result;
      v38 = (unsigned __int8 *)(result + 10);
      *(_DWORD *)result = 2;
      *((_DWORD *)result + 1) = v7;
      *((_QWORD *)result + 1) = result + 10;
      *((_DWORD *)result + 4) = 0;
      v39 = (unsigned __int8 *)v8 + v10;
      if (v10 < 8)
      {
        v40 = (unsigned __int8 *)v8;
        goto LABEL_86;
      }
      if (v38 >= v39 || (v40 = (unsigned __int8 *)v8, &result[v10 + 10] <= (_WORD *)v8))
      {
        v48 = vdupq_n_s16(a3);
        v49 = (int8x16_t)vdupq_n_s16(a4);
        if (v10 < 0x20)
        {
          v50 = 0;
LABEL_83:
          v59 = v10 - (v7 & 7);
          v40 = (unsigned __int8 *)v8 + v59;
          v38 += 2 * v59;
          v60 = 2 * v50 + 20;
          v61 = (uint8x8_t *)((char *)v8 + v50);
          v62 = v50 + (v7 & 7) - v10;
          do
          {
            v63 = *v61++;
            v64 = (int16x8_t)vmovl_u8(v63);
            *(int8x16_t *)((char *)result + v60) = vbslq_s8((int8x16_t)vceqq_s16(v48, v64), v49, (int8x16_t)v64);
            v60 += 16;
            v62 += 8;
          }
          while (v62);
          if ((v7 & 7) == 0)
            goto LABEL_89;
          goto LABEL_86;
        }
        v50 = v10 - (v7 & 0x1F);
        v51 = (int8x16_t *)(result + 26);
        v52 = v8 + 2;
        v53 = v50;
        do
        {
          v54 = *(uint8x16_t *)v52[-2].i8;
          v55 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v54.i8);
          v56 = (int16x8_t)vmovl_high_u8(v54);
          v57 = (int16x8_t)vmovl_u8(*v52);
          v58 = (int16x8_t)vmovl_high_u8(*(uint8x16_t *)v52->i8);
          v51[-2] = vbslq_s8((int8x16_t)vceqq_s16(v48, v55), v49, (int8x16_t)v55);
          v51[-1] = vbslq_s8((int8x16_t)vceqq_s16(v48, v56), v49, (int8x16_t)v56);
          *v51 = vbslq_s8((int8x16_t)vceqq_s16(v48, v57), v49, (int8x16_t)v57);
          v51[1] = vbslq_s8((int8x16_t)vceqq_s16(v48, v58), v49, (int8x16_t)v58);
          v51 += 4;
          v52 += 4;
          v53 -= 32;
        }
        while (v53);
        if ((v7 & 0x1F) == 0)
          goto LABEL_89;
        if ((v7 & 0x1F) >= 8uLL)
          goto LABEL_83;
        v38 += 2 * v50;
        v40 = (unsigned __int8 *)v8 + v50;
      }
      do
      {
LABEL_86:
        v66 = *v40++;
        v65 = v66;
        if (v66 == a3)
          v65 = a4;
        *(_WORD *)v38 = v65;
        v38 += 2;
      }
      while (v40 != v39);
      goto LABEL_89;
    }
    ++v12;
    --v13;
    --v11;
  }
  while (a2 != v12);
  if (!result)
    goto LABEL_25;
  if ((unint64_t)a2 >> 31)
    goto LABEL_95;
LABEL_21:
  v18 = (int *)WTF::fastCompactMalloc((WTF *)(a2 + 20));
  result = v18 + 5;
  *v18 = 2;
  v18[1] = v7;
  *((_QWORD *)v18 + 1) = v18 + 5;
  v18[4] = 4;
  if (v10 == 1)
    *(_BYTE *)result = v8->i8[0];
  else
    result = memcpy(result, v8, v7);
LABEL_89:
  *v9 = v18;
  return result;
}

uint64_t WTF::codePointCompare(unsigned __int16 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v4 = a4 & 0xFF00000000;
  if (a4 >= (unint64_t)a2)
    v5 = a2;
  else
    v5 = a4;
  if ((a2 & 0xFF00000000) == 0)
  {
    if (v4)
    {
      if (v5)
      {
        while (1)
        {
          v9 = *a1;
          v10 = *a3;
          v8 = v9 > v10;
          if (v9 != v10)
            goto LABEL_28;
          ++a1;
          ++a3;
          if (!--v5)
            goto LABEL_22;
        }
      }
    }
    else if (v5)
    {
      while (1)
      {
        v13 = *a1;
        v14 = *(unsigned __int16 *)a3;
        v8 = v13 > v14;
        if (v13 != v14)
          goto LABEL_28;
        ++a1;
        a3 += 2;
        if (!--v5)
          goto LABEL_22;
      }
    }
    goto LABEL_22;
  }
  if (v4)
  {
    if (v5)
    {
      while (1)
      {
        v6 = *(unsigned __int8 *)a1;
        v7 = *a3;
        v8 = v6 > v7;
        if (v6 != v7)
          break;
        a1 = (unsigned __int16 *)((char *)a1 + 1);
        ++a3;
        if (!--v5)
          goto LABEL_22;
      }
LABEL_28:
      if (v8)
        return 1;
      else
        return 0xFFFFFFFFLL;
    }
    goto LABEL_22;
  }
  if (!v5)
  {
LABEL_22:
    if (a4 < (unint64_t)a2)
      v15 = 1;
    else
      v15 = -1;
    if (a2 == (unint64_t)a4)
      return 0;
    else
      return v15;
  }
  while (1)
  {
    v11 = *(unsigned __int8 *)a1;
    v12 = *(unsigned __int16 *)a3;
    if (v12 != v11)
      break;
    a1 = (unsigned __int16 *)((char *)a1 + 1);
    a3 += 2;
    if (!--v5)
      goto LABEL_22;
  }
  if (v12 < v11)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

void WTF::makeStringBySimplifyingNewLinesSlowCase(WTF *this@<X0>, size_t __n@<X1>, int **a3@<X8>)
{
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  int *v8;
  void *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int v23;
  _WORD *v24;
  int *v25;
  _WORD *v26;
  int *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;

  v3 = __n;
  v5 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v10 = 0;
    goto LABEL_19;
  }
  if ((*(_BYTE *)(v5 + 16) & 4) == 0)
  {
    v6 = *(unsigned int *)(v5 + 4);
    v7 = *(unsigned __int16 **)(v5 + 8);
    if ((_DWORD)v6)
    {
      if (v6 >= 0x7FFFFFF0)
      {
        __break(0xC471u);
        goto LABEL_59;
      }
      v8 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v6 + 20));
      v9 = v8 + 5;
      *v8 = 2;
      v8[1] = v6;
      *((_QWORD *)v8 + 1) = v8 + 5;
      v8[4] = 0;
    }
    else
    {
      v9 = 0;
      v8 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    *a3 = v8;
    memcpy(v9, v7, 2 * v3);
    if (v6 > v3)
    {
      v20 = v3;
      while (v6 > v3)
      {
        v23 = v7[v3];
        if (v23 == 13)
        {
          *((_WORD *)v9 + v20) = 10;
          if (v3 + 1 < v6 && v7[v3 + 1] == 10)
            ++v3;
        }
        else
        {
          *((_WORD *)v9 + v20) = v23;
        }
        ++v20;
        if (++v3 >= v6)
          goto LABEL_32;
      }
      goto LABEL_58;
    }
    v20 = v3;
LABEL_32:
    if (v20 < v6)
    {
      if (v20)
        goto LABEL_34;
      goto LABEL_41;
    }
    return;
  }
  v11 = *(unsigned int *)(v5 + 4);
  v10 = *(unsigned __int8 **)(v5 + 8);
  if (!(_DWORD)v11)
  {
LABEL_19:
    WTF::StringImpl::s_emptyAtomString += 2;
    *a3 = &WTF::StringImpl::s_emptyAtomString;
    memcpy(0, v10, __n);
    return;
  }
  if ((v11 & 0x80000000) != 0)
  {
    __break(0xC471u);
LABEL_58:
    __break(1u);
LABEL_59:
    JUMPOUT(0x197B16094);
  }
  v8 = (int *)WTF::fastCompactMalloc((WTF *)(v11 + 20));
  v12 = v8 + 5;
  *v8 = 2;
  v8[1] = v11;
  *((_QWORD *)v8 + 1) = v8 + 5;
  v8[4] = 4;
  *a3 = v8;
  memcpy(v8 + 5, v10, v3);
  if (v11 > v3)
  {
    v20 = v3;
    while (v11 > v3)
    {
      v21 = v10[v3];
      if (v21 == 13)
      {
        *((_BYTE *)v12 + v20) = 10;
        v22 = v3 + 1;
        if (v22 < v11 && v10[v22] == 10)
          ++v3;
      }
      else
      {
        *((_BYTE *)v12 + v20) = v21;
      }
      ++v20;
      if (++v3 >= v11)
        goto LABEL_39;
    }
    goto LABEL_58;
  }
  v20 = v3;
LABEL_39:
  if (v20 < v11)
  {
    if (v20)
    {
LABEL_34:
      if ((v8[4] & 4) != 0)
      {
        if (v20 <= 0xC)
        {
          v40 = (_BYTE *)*((_QWORD *)v8 + 1);
          v25 = (int *)WTF::fastCompactMalloc((WTF *)(v20 + 20));
          v41 = v25 + 5;
          *v25 = 2;
          v25[1] = v20;
          *((_QWORD *)v25 + 1) = v25 + 5;
          v25[4] = 4;
          if (v20 == 1)
            *v41 = *v40;
          else
            memcpy(v41, v40, v20);
          goto LABEL_48;
        }
      }
      else if (v20 <= 6)
      {
        v24 = (_WORD *)*((_QWORD *)v8 + 1);
        v25 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v20 + 20));
        v26 = v25 + 5;
        *v25 = 2;
        v25[1] = v20;
        *((_QWORD *)v25 + 1) = v25 + 5;
        v25[4] = 0;
        if (v20 == 1)
          *v26 = *v24;
        else
          memcpy(v26, v24, 2 * v20);
        goto LABEL_48;
      }
      v27 = v8;
      if ((v8[4] & 3) == 2)
        v27 = (int *)*((_QWORD *)v8 + 3);
      v28 = WTF::fastCompactMalloc((WTF *)0x20);
      v25 = (int *)v28;
      v29 = v8[4];
      v30 = *((_QWORD *)v8 + 1);
      *v27 += 2;
      v31 = 2;
      *(_DWORD *)v28 = 2;
      *(_DWORD *)(v28 + 4) = v20;
      *(_QWORD *)(v28 + 8) = v30;
      if ((v29 & 4) != 0)
        v31 = 6;
      *(_DWORD *)(v28 + 16) = v31;
      *(_QWORD *)(v28 + 24) = v27;
      goto LABEL_48;
    }
LABEL_41:
    v25 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
LABEL_48:
    *a3 = v25;
    if (*v8 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *v8 -= 2;
    }
  }
}

uint64_t WTF::StringView::underlyingStringIsValidImpl(WTF::StringView *this)
{
  return 1;
}

uint64_t WTF::toASCIILower<unsigned char>(int a1)
{
  return WTF::asciiCaseFoldTable[a1];
}

uint64_t WTF::toASCIILower<char16_t>(int a1)
{
  return a1 | (32 * ((a1 - 65) < 0x1A));
}

uint64_t WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::singleCharSearch(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  void *v11;

  v4 = *(_QWORD *)(result + 16);
  if (!v4)
  {
    __break(1u);
    return result;
  }
  v6 = **(unsigned __int8 **)(result + 8);
  v7 = a3 - (int)v4 - a4 + 1;
  v8 = 16;
  if (v7 < 0x10)
    v8 = a3 - (int)v4 - a4 + 1;
  if (v8)
  {
    v9 = v8;
    v10 = (unsigned __int8 *)(a2 + a4);
    while (*v10 != v6)
    {
      ++v10;
      if (!--v9)
        goto LABEL_8;
    }
    goto LABEL_10;
  }
LABEL_8:
  if (v7 < 0x11)
  {
    v10 = 0;
LABEL_10:
    if (v10)
      return ((_DWORD)v10 - a2);
    else
      return 0xFFFFFFFFLL;
  }
  v11 = memchr((void *)(a2 + a4 + v8), v6, v7 - v8);
  if (v11)
    return ((_DWORD)v11 - a2);
  else
    return 0xFFFFFFFFLL;
}

uint64_t WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::linearSearch(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v16;

  v4 = *(_QWORD *)(result + 16);
  v5 = a3 - v4;
  if (v4)
  {
    v7 = *(unsigned __int8 **)(result + 8);
    v8 = (int)v4 - 1;
    while (v5 >= (int)a4)
    {
      v9 = *v7;
      v10 = v5 - (int)a4 + 1;
      v11 = v10 >= 0x10 ? 16 : v5 - (int)a4 + 1;
      if (v11)
      {
        v12 = v11;
        v13 = (unsigned __int8 *)(a2 + (int)a4);
        while (*v13 != v9)
        {
          ++v13;
          if (!--v12)
            goto LABEL_11;
        }
      }
      else
      {
LABEL_11:
        if (v10 < 0x11)
          return 0xFFFFFFFFLL;
        v13 = (unsigned __int8 *)memchr((void *)(a2 + (int)a4 + v11), v9, v10 - v11);
      }
      result = v13 ? ((_DWORD)v13 - a2) : 0xFFFFFFFFLL;
      if ((_DWORD)result == -1)
        break;
      v14 = 0;
      a4 = (int)result + 1;
      do
      {
        v15 = v7[v14 + 1];
        v16 = *(unsigned __int8 *)(a2 + a4 + v14++);
      }
      while (v15 == v16 && v14 < v8);
      if (v15 == v16)
        return result;
    }
    return 0xFFFFFFFFLL;
  }
  if (v5 < (int)a4)
    return 0xFFFFFFFFLL;
  __break(1u);
  return result;
}

uint64_t WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::initialSearch(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int32x4_t *v20;
  int v21;
  int32x4_t v22;
  int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;

  v5 = *(_QWORD *)(result + 16);
  v6 = a3 - v5;
  if (a3 - (int)v5 >= (int)a4)
  {
    v7 = a4;
    v9 = result;
    v10 = *(unsigned __int8 **)(result + 8);
    v11 = 4 * v5;
    if (v5)
    {
      v12 = -10 - v11;
      if ((int)v5 <= 2)
        v13 = 2;
      else
        v13 = v5;
      while (v12 < 0)
      {
        v14 = *v10;
        v15 = v6 - (int)v7 + 1;
        if (v15 >= 0x10)
          v16 = 16;
        else
          v16 = v6 - (int)v7 + 1;
        if (v16)
        {
          v17 = v16;
          v18 = (unsigned __int8 *)(a2 + (int)v7);
          while (*v18 != v14)
          {
            ++v18;
            if (!--v17)
              goto LABEL_16;
          }
        }
        else
        {
LABEL_16:
          if (v15 < 0x11)
            return 0xFFFFFFFFLL;
          v18 = (unsigned __int8 *)memchr((void *)(a2 + (int)v7 + v16), v14, v15 - v16);
        }
        if (v18)
          result = ((_DWORD)v18 - a2);
        else
          result = 0xFFFFFFFFLL;
        if ((_DWORD)result == -1)
          return result;
        v19 = 1;
        while (v10[v19] == *(unsigned __int8 *)(a2 + (int)result + v19))
        {
          if (v13 == ++v19)
          {
            LODWORD(v19) = v13;
            break;
          }
        }
        if ((_DWORD)v19 == (_DWORD)v5)
          return result;
        v12 += 1 + v19;
        v7 = (result + 1);
        if ((int)result >= v6)
          return 0xFFFFFFFFLL;
      }
    }
    else if (v11 > -10)
    {
      __break(1u);
      return result;
    }
    v20 = *(int32x4_t **)v9;
    v21 = *(_DWORD *)(v9 + 32);
    if (v21)
    {
      v22 = vdupq_n_s32(v21 - 1);
      *v20 = v22;
      v20[1] = v22;
      v20[2] = v22;
      v20[3] = v22;
      v20[4] = v22;
      v20[5] = v22;
      v20[6] = v22;
      v20[7] = v22;
      v20[8] = v22;
      v20[9] = v22;
      v20[10] = v22;
      v20[11] = v22;
      v20[12] = v22;
      v20[13] = v22;
      v20[14] = v22;
      v20[15] = v22;
      v20[16] = v22;
      v20[17] = v22;
      v20[18] = v22;
      v20[19] = v22;
      v20[20] = v22;
      v20[21] = v22;
      v20[22] = v22;
      v20[23] = v22;
      v20[24] = v22;
      v20[25] = v22;
      v20[26] = v22;
      v20[27] = v22;
      v20[28] = v22;
      v20[29] = v22;
      v20[30] = v22;
      v20[31] = v22;
      v20[32] = v22;
      v20[33] = v22;
      v20[34] = v22;
      v20[35] = v22;
      v20[36] = v22;
      v20[37] = v22;
      v20[38] = v22;
      v20[39] = v22;
      v20[40] = v22;
      v20[41] = v22;
      v20[42] = v22;
      v20[43] = v22;
      v20[44] = v22;
      v20[45] = v22;
      v20[46] = v22;
      v20[47] = v22;
      v20[48] = v22;
      v20[49] = v22;
      v20[50] = v22;
      v20[51] = v22;
      v20[52] = v22;
      v20[53] = v22;
      v20[54] = v22;
      v20[55] = v22;
      v20[56] = v22;
      v20[57] = v22;
      v20[58] = v22;
      v20[59] = v22;
      v20[60] = v22;
      v20[61] = v22;
      v20[62] = v22;
      v20[63] = v22;
      v23 = v5 - 1;
      if (v21 >= (int)v5 - 1)
        goto LABEL_36;
    }
    else
    {
      memset(*(void **)v9, 255, 0x400uLL);
      v10 = *(unsigned __int8 **)(v9 + 8);
      v23 = v5 - 1;
      if ((int)v5 - 1 <= 0)
      {
LABEL_36:
        *(_QWORD *)(v9 + 24) = WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::boyerMooreHorspoolSearch;
        return WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::boyerMooreHorspoolSearch(v9, a2, a3, v7);
      }
    }
    v24 = v23 - (uint64_t)v21;
    v25 = &v10[v21];
    do
    {
      v26 = *v25++;
      v20->i32[v26] = v21++;
      --v24;
    }
    while (v24);
    goto LABEL_36;
  }
  return 0xFFFFFFFFLL;
}

uint64_t WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::boyerMooreHorspoolSearch(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;

  v4 = a4;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)a1;
  v10 = (int)v8 - 1;
  v11 = *(unsigned __int8 *)(v7 + v10);
  v12 = a3 - v8;
  if ((int)v8 < 2)
  {
    if (v12 >= (int)a4)
    {
      result = a4;
      while (1)
      {
        v31 = *(unsigned __int8 *)(a2 + (int)result + (uint64_t)(int)v10);
        if (v11 == (_DWORD)v31)
          break;
        result = (v10 - *(_DWORD *)(v9 + 4 * v31) + result);
        if ((int)result > v12)
          return 0xFFFFFFFFLL;
      }
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    v14 = *(_DWORD *)(v9 + 4 * *(unsigned __int8 *)(v7 + v10));
    v15 = v10 - v14;
    v16 = -(int)v8;
    v17 = (int)v8 - 2;
    v18 = v14 + 1;
    while (2)
    {
      if ((int)v4 > v12)
        return 0xFFFFFFFFLL;
      while (1)
      {
        v19 = *(unsigned __int8 *)(a2 + (int)v4 + (uint64_t)(int)v10);
        if (v11 == (_DWORD)v19)
          break;
        v20 = v10 - *(_DWORD *)(v9 + 4 * v19);
        v4 = (v20 + v4);
        v16 = v16 - v20 + 1;
        if ((int)v4 > v12)
          return 0xFFFFFFFFLL;
      }
      v21 = v17;
      while (*(unsigned __int8 *)(v7 + v21) == *(unsigned __int8 *)(a2 + (int)v4 + v21))
      {
        v22 = v21-- <= 0;
        if (v22)
          return v4;
      }
      v4 = (v4 + v15);
      v16 = v18 + v16 - v21;
      if (v16 <= 0)
        continue;
      break;
    }
    WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::populateBoyerMooreTable(a1);
    *(_QWORD *)(a1 + 24) = WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::boyerMooreSearch;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = a3 - v23;
    if (a3 - (int)v23 < (int)v4)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      v25 = *(_QWORD *)a1;
      v26 = *(_QWORD *)(a1 + 8);
      v27 = (int)v23 - 1;
      v28 = *(unsigned __int8 *)(v26 + v27);
      if ((int)v23 <= 0)
      {
        while (1)
        {
          v32 = *(unsigned __int8 *)(a2 + (int)v4 + (int)v27);
          if ((_DWORD)v28 == (_DWORD)v32)
            break;
          v4 = (v27 - *(_DWORD *)(v25 + 4 * v32) + v4);
          result = 0xFFFFFFFFLL;
          if ((int)v4 > v24)
            return result;
        }
        return v4;
      }
      v29 = *(int *)(a1 + 32);
      do
      {
        while (1)
        {
          while (1)
          {
            v33 = *(unsigned __int8 *)(a2 + (int)v4 + (uint64_t)(int)v27);
            if ((_DWORD)v28 == (_DWORD)v33)
              break;
            v4 = (v27 - *(_DWORD *)(v25 + 4 * v33) + v4);
            result = 0xFFFFFFFFLL;
            if ((int)v4 > v24)
              return result;
          }
          v34 = v27;
          while (1)
          {
            v35 = *(unsigned __int8 *)(a2 + (int)v4 + v34);
            if (*(unsigned __int8 *)(v26 + v34) != (_DWORD)v35)
              break;
            v22 = v34-- <= 0;
            if (v22)
              return v4;
          }
          if ((int)v29 <= (int)v34)
            break;
          v4 = (v27 - *(_DWORD *)(v25 + 4 * v28) + v4);
          result = 0xFFFFFFFFLL;
          if ((int)v4 > v24)
            return result;
        }
        v36 = *(_DWORD *)(v25 - 4 * v29 + 1024 + 4 * (v34 + 1));
        v37 = v34 - *(_DWORD *)(v25 + 4 * v35);
        if (v36 > v37)
          v37 = v36;
        v4 = (v37 + v4);
        result = 0xFFFFFFFFLL;
      }
      while ((int)v4 <= v24);
    }
  }
  return result;
}

uint64_t WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::populateBoyerMooreTable(uint64_t result)
{
  uint64_t v1;
  int v2;
  int32x4_t *v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int32x4_t v12;
  int32x4_t *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int i;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_DWORD *)(result + 32);
  v3 = *(int32x4_t **)result;
  v4 = (_DWORD *)(*(_QWORD *)result + 1024);
  v5 = 4 * v2;
  v6 = &v4[v5 / 0xFFFFFFFFFFFFFFFCLL];
  v7 = *(_QWORD *)result - v5 + 2024;
  v8 = v1 - v2;
  if ((int)v1 <= v2)
  {
    v28 = (int)v1;
    v6[v28] = 1;
    *(_DWORD *)(v7 + v28 * 4) = v1 + 1;
  }
  else
  {
    v9 = *(_QWORD *)(result + 8);
    v10 = (int)v1 - (uint64_t)v2;
    v11 = v2;
    if (v10 < 8)
      goto LABEL_6;
    v11 = (v10 & 0xFFFFFFFFFFFFFFF8) + v2;
    v12 = vdupq_n_s32(v8);
    v13 = v3 + 65;
    v14 = v10 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v13[-1] = v12;
      *v13 = v12;
      v13 += 2;
      v14 -= 8;
    }
    while (v14);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_6:
      v15 = (int)v1 - v11;
      v16 = (unsigned int *)&v3[64] + v11 - v2;
      do
      {
        *v16++ = v8;
        --v15;
      }
      while (v15);
    }
    v17 = (int)v1;
    v6[v17] = 1;
    v18 = v1 + 1;
    *(_DWORD *)(v7 + v17 * 4) = v1 + 1;
    result = *(unsigned __int8 *)(v9 + (((v1 << 32) - 0x100000000) >> 32));
    v19 = (uint64_t)v3[126].i64 - 4 * v2;
    LODWORD(v20) = v1;
    v21 = v1 + 1;
    do
    {
      v22 = (int)v20 - 1;
      if (v21 <= (int)v1)
      {
        v27 = *(unsigned __int8 *)(v9 + v22);
        v23 = v21;
        do
        {
          if (v27 == *(unsigned __int8 *)(v23 + v9 - 1))
            break;
          if (v6[v23] == v8)
            v6[v23] = v23 - v20;
          v23 = *(_DWORD *)(v7 + 4 * v23);
        }
        while (v23 <= (int)v1);
      }
      else
      {
        v23 = v21;
      }
      v21 = v23 - 1;
      *(_DWORD *)(v7 + 4 * v22) = v23 - 1;
      if ((int)v22 > v2 && v21 == (_DWORD)v1)
      {
        v24 = 2 - v20;
        v20 = (int)v20;
        do
        {
          if (*(unsigned __int8 *)(v9 - 2 + v20) == (_DWORD)result)
          {
            LODWORD(v22) = -v24;
            v21 = v23 - 2;
            *(_DWORD *)(v19 + 4 * v20) = v23 - 2;
            goto LABEL_10;
          }
          if (v6[(int)v1] == v8)
            v6[(int)v1] = v1 + v24 - 1;
          *(_DWORD *)(v19 + 4 * v20) = v1;
          ++v24;
          v25 = v20 - 1;
          v26 = v20 - 2;
          --v20;
        }
        while (v26 > v2);
        LODWORD(v22) = v25 - 1;
        v21 = v1;
      }
LABEL_10:
      LODWORD(v20) = v22;
    }
    while ((int)v22 > v2);
    if (v21 < (int)v1)
    {
      for (i = v2; v18 != i; ++i)
      {
        if (*v4 == v8)
        {
          *v4 = v21 - v2;
          if (i == v21)
LABEL_34:
            v21 = *(_DWORD *)(v7 + 4 * v21);
        }
        else if (i == v21)
        {
          goto LABEL_34;
        }
        ++v4;
      }
    }
  }
  return result;
}

uint64_t WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::boyerMooreSearch(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  int v17;
  uint64_t v18;

  v4 = a1[2];
  v5 = a3 - v4;
  if (a3 - (int)v4 < (int)a4)
    return 0xFFFFFFFFLL;
  v7 = *a1;
  v8 = a1[1];
  v9 = (int)v4 - 1;
  v10 = *(unsigned __int8 *)(v8 + v9);
  if ((int)v4 > 0)
  {
    v11 = *((int *)a1 + 8);
    do
    {
      while (1)
      {
        while (1)
        {
          v12 = *(unsigned __int8 *)(a2 + (int)a4 + (uint64_t)(int)v9);
          if ((_DWORD)v10 == (_DWORD)v12)
            break;
          a4 = (v9 - *(_DWORD *)(v7 + 4 * v12) + a4);
          if ((int)a4 > v5)
            return 0xFFFFFFFFLL;
        }
        v13 = v9;
        while (1)
        {
          v14 = *(unsigned __int8 *)(a2 + (int)a4 + v13);
          if (*(unsigned __int8 *)(v8 + v13) != (_DWORD)v14)
            break;
          if (v13-- <= 0)
            return a4;
        }
        if ((int)v11 <= (int)v13)
          break;
        a4 = (v9 - *(_DWORD *)(v7 + 4 * v10) + a4);
        if ((int)a4 > v5)
          return 0xFFFFFFFFLL;
      }
      v16 = *(_DWORD *)(v7 - 4 * v11 + 1024 + 4 * (v13 + 1));
      v17 = v13 - *(_DWORD *)(v7 + 4 * v14);
      if (v16 > v17)
        v17 = v16;
      a4 = (v17 + a4);
    }
    while ((int)a4 <= v5);
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    v18 = *(unsigned __int8 *)(a2 + (int)a4 + (int)v9);
    if ((_DWORD)v10 == (_DWORD)v18)
      break;
    a4 = (v9 - *(_DWORD *)(v7 + 4 * v18) + a4);
    if ((int)a4 > v5)
      return 0xFFFFFFFFLL;
  }
  return a4;
}

uint64_t WTF::AdaptiveStringSearcher<char16_t,unsigned char>::failSearch()
{
  return 0xFFFFFFFFLL;
}

uint64_t WTF::AdaptiveStringSearcher<char16_t,unsigned char>::singleCharSearch(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  void *v11;

  v4 = *(_QWORD *)(result + 16);
  if (!v4)
  {
    __break(1u);
    return result;
  }
  v5 = **(unsigned __int16 **)(result + 8);
  if (v5 > 0xFF)
    return 0xFFFFFFFFLL;
  v6 = a2;
  v7 = a3 - (int)v4 - a4 + 1;
  v8 = 16;
  if (v7 < 0x10)
    v8 = a3 - (int)v4 - a4 + 1;
  if (v8)
  {
    v9 = v8;
    v10 = (unsigned __int8 *)(a2 + a4);
    while (*v10 != v5)
    {
      ++v10;
      if (!--v9)
        goto LABEL_10;
    }
    goto LABEL_12;
  }
LABEL_10:
  if (v7 < 0x11)
  {
    v10 = 0;
LABEL_12:
    if (v10)
      return ((_DWORD)v10 - a2);
    else
      return 0xFFFFFFFFLL;
  }
  v11 = memchr((void *)(a2 + a4 + v8), v5, v7 - v8);
  if (v11)
    return ((_DWORD)v11 - v6);
  else
    return 0xFFFFFFFFLL;
}

uint64_t WTF::AdaptiveStringSearcher<char16_t,unsigned char>::linearSearch(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  _WORD *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v16;

  v4 = *(_QWORD *)(result + 16);
  v5 = a3 - v4;
  if (v4)
  {
    v7 = *(_WORD **)(result + 8);
    v8 = (int)v4 - 1;
    while (v5 >= (int)a4)
    {
      v9 = (unsigned __int16)*v7;
      if (v9 >= 0x100)
        break;
      v10 = v5 - (int)a4 + 1;
      if (v10 >= 0x10)
        v11 = 16;
      else
        v11 = v5 - (int)a4 + 1;
      if (v11)
      {
        v12 = v11;
        v13 = (unsigned __int8 *)(a2 + (int)a4);
        while (*v13 != v9)
        {
          ++v13;
          if (!--v12)
            goto LABEL_12;
        }
      }
      else
      {
LABEL_12:
        if (v10 < 0x11)
          return 0xFFFFFFFFLL;
        v13 = (unsigned __int8 *)memchr((void *)(a2 + (int)a4 + v11), *v7, v10 - v11);
        if (!v13)
          return 0xFFFFFFFFLL;
      }
      result = ((_DWORD)v13 - a2);
      if ((_DWORD)result == -1)
        return 0xFFFFFFFFLL;
      v14 = 0;
      a4 = (int)result + 1;
      do
      {
        v15 = (unsigned __int16)v7[v14 + 1];
        v16 = *(unsigned __int8 *)(a2 + a4 + v14++);
      }
      while (v15 == v16 && v14 < v8);
      if (v15 == v16)
        return result;
    }
    return 0xFFFFFFFFLL;
  }
  if (v5 < (int)a4)
    return 0xFFFFFFFFLL;
  __break(1u);
  return result;
}

uint64_t WTF::AdaptiveStringSearcher<char16_t,unsigned char>::initialSearch(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  _WORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int32x4_t *v20;
  int v21;
  int32x4_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unint64_t v27;
  int v28;

  v5 = *(_QWORD *)(result + 16);
  v6 = a3 - v5;
  if (a3 - (int)v5 >= (int)a4)
  {
    v7 = a4;
    v9 = result;
    v10 = *(_WORD **)(result + 8);
    v11 = 4 * v5;
    if (v5)
    {
      v12 = -10 - v11;
      if ((int)v5 <= 2)
        v13 = 2;
      else
        v13 = v5;
      while (v12 < 0)
      {
        v14 = (unsigned __int16)*v10;
        if (v14 >= 0x100)
          return 0xFFFFFFFFLL;
        v15 = v6 - (int)v7 + 1;
        if (v15 >= 0x10)
          v16 = 16;
        else
          v16 = v6 - (int)v7 + 1;
        if (v16)
        {
          v17 = v16;
          v18 = (unsigned __int8 *)(a2 + (int)v7);
          while (*v18 != v14)
          {
            ++v18;
            if (!--v17)
              goto LABEL_17;
          }
        }
        else
        {
LABEL_17:
          if (v15 < 0x11)
            return 0xFFFFFFFFLL;
          v18 = (unsigned __int8 *)memchr((void *)(a2 + (int)v7 + v16), *v10, v15 - v16);
          if (!v18)
            return 0xFFFFFFFFLL;
        }
        result = (uint64_t)&v18[-a2];
        if ((_DWORD)result == -1)
          return 0xFFFFFFFFLL;
        v19 = 1;
        while (v10[v19] == *(unsigned __int8 *)(a2 + (int)result + v19))
        {
          if (v13 == ++v19)
          {
            LODWORD(v19) = v13;
            break;
          }
        }
        if ((_DWORD)v19 == (_DWORD)v5)
          return result;
        v12 += 1 + v19;
        v7 = (result + 1);
        if ((int)result >= v6)
          return 0xFFFFFFFFLL;
      }
    }
    else if (v11 > -10)
    {
      __break(1u);
      return result;
    }
    v20 = *(int32x4_t **)v9;
    v21 = *(_DWORD *)(v9 + 32);
    if (v21)
    {
      v22 = vdupq_n_s32(v21 - 1);
      *v20 = v22;
      v20[1] = v22;
      v20[2] = v22;
      v20[3] = v22;
      v20[4] = v22;
      v20[5] = v22;
      v20[6] = v22;
      v20[7] = v22;
      v20[8] = v22;
      v20[9] = v22;
      v20[10] = v22;
      v20[11] = v22;
      v20[12] = v22;
      v20[13] = v22;
      v20[14] = v22;
      v20[15] = v22;
      v20[16] = v22;
      v20[17] = v22;
      v20[18] = v22;
      v20[19] = v22;
      v20[20] = v22;
      v20[21] = v22;
      v20[22] = v22;
      v20[23] = v22;
      v20[24] = v22;
      v20[25] = v22;
      v20[26] = v22;
      v20[27] = v22;
      v20[28] = v22;
      v20[29] = v22;
      v20[30] = v22;
      v20[31] = v22;
      v20[32] = v22;
      v20[33] = v22;
      v20[34] = v22;
      v20[35] = v22;
      v20[36] = v22;
      v20[37] = v22;
      v20[38] = v22;
      v20[39] = v22;
      v20[40] = v22;
      v20[41] = v22;
      v20[42] = v22;
      v20[43] = v22;
      v20[44] = v22;
      v20[45] = v22;
      v20[46] = v22;
      v20[47] = v22;
      v20[48] = v22;
      v20[49] = v22;
      v20[50] = v22;
      v20[51] = v22;
      v20[52] = v22;
      v20[53] = v22;
      v20[54] = v22;
      v20[55] = v22;
      v20[56] = v22;
      v20[57] = v22;
      v20[58] = v22;
      v20[59] = v22;
      v20[60] = v22;
      v20[61] = v22;
      v20[62] = v22;
      v20[63] = v22;
      v23 = v5 - 1;
      if (v21 >= (int)v5 - 1)
        goto LABEL_37;
    }
    else
    {
      memset(*(void **)v9, 255, 0x400uLL);
      v10 = *(_WORD **)(v9 + 8);
      v23 = v5 - 1;
      if ((int)v5 - 1 <= 0)
      {
LABEL_37:
        *(_QWORD *)(v9 + 24) = WTF::AdaptiveStringSearcher<char16_t,unsigned char>::boyerMooreHorspoolSearch;
        return WTF::AdaptiveStringSearcher<char16_t,unsigned char>::boyerMooreHorspoolSearch(v9, a2, a3, v7);
      }
    }
    v24 = v23 - (uint64_t)v21;
    v25 = v21;
    if (v24 < 2)
      goto LABEL_41;
    v25 = (v24 & 0xFFFFFFFFFFFFFFFELL) + v21;
    v26 = (unsigned __int8 *)&v10[v21 + 1];
    v27 = v24 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v20->i32[*(v26 - 2)] = v21;
      v28 = *v26;
      v26 += 4;
      v20->i32[v28] = v21 + 1;
      v21 += 2;
      v27 -= 2;
    }
    while (v27);
    if (v24 != (v24 & 0xFFFFFFFFFFFFFFFELL))
    {
LABEL_41:
      do
      {
        v20->i32[LOBYTE(v10[v25])] = v25;
        ++v25;
      }
      while (v23 != v25);
    }
    goto LABEL_37;
  }
  return 0xFFFFFFFFLL;
}

uint64_t WTF::AdaptiveStringSearcher<char16_t,unsigned char>::boyerMooreHorspoolSearch(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v4 = a4;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)a1;
  v10 = (int)v8 - 1;
  v11 = *(unsigned __int16 *)(v7 + 2 * (int)v10);
  v12 = a3 - v8;
  if ((int)v8 < 2)
  {
    if (v12 >= (int)a4)
    {
      while (1)
      {
        v32 = *(unsigned __int8 *)(a2 + (int)v10 + (uint64_t)(int)v4);
        if (v11 == (_DWORD)v32)
          break;
        v4 = (v10 - *(_DWORD *)(v9 + 4 * v32) + v4);
        if ((int)v4 > v12)
          return 0xFFFFFFFFLL;
      }
      return v4;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    v14 = *(_DWORD *)(v9 + 4 * *(_WORD *)(v7 + 2 * (int)v10));
    v15 = v10 - v14;
    v16 = -(int)v8;
    v17 = (int)v8 - 2;
    v18 = v14 + 1;
    while ((int)v4 <= v12)
    {
      while (1)
      {
        v19 = *(unsigned __int8 *)(a2 + (int)v4 + v10);
        if (v11 == (_DWORD)v19)
          break;
        v20 = v10 - *(_DWORD *)(v9 + 4 * v19);
        v4 = (v20 + v4);
        v16 = v16 - v20 + 1;
        if ((int)v4 > v12)
          return 0xFFFFFFFFLL;
      }
      v21 = v17;
      while (*(_WORD *)(v7 + 2 * v21) == *(unsigned __int8 *)(a2 + (int)v4 + v21))
      {
        v22 = v21-- <= 0;
        if (v22)
          return v4;
      }
      v4 = (v4 + v15);
      v16 = v18 + v16 - v21;
      if (v16 > 0)
      {
        WTF::AdaptiveStringSearcher<char16_t,unsigned char>::populateBoyerMooreTable(a1);
        *(_QWORD *)(a1 + 24) = WTF::AdaptiveStringSearcher<char16_t,unsigned char>::boyerMooreSearch;
        v23 = *(_QWORD *)(a1 + 16);
        v24 = a3 - v23;
        if (a3 - (int)v23 < (int)v4)
          return 0xFFFFFFFFLL;
        v25 = *(_QWORD *)a1;
        v26 = *(_QWORD *)(a1 + 8);
        v27 = (int)v23 - 1;
        v28 = (int)v27;
        v29 = *(unsigned __int16 *)(v26 + 2 * (int)v27);
        if ((int)v23 > 0)
        {
          v30 = *(int *)(a1 + 32);
          do
          {
            while (1)
            {
              while (1)
              {
                v33 = *(unsigned __int8 *)(a2 + (int)v4 + v28);
                if (v29 == (_DWORD)v33)
                  break;
                v4 = (v28 - *(_DWORD *)(v25 + 4 * v33) + v4);
                result = 0xFFFFFFFFLL;
                if ((int)v4 > v24)
                  return result;
              }
              v34 = v28;
              while (1)
              {
                v35 = *(unsigned __int8 *)(a2 + (int)v4 + v34);
                if (*(unsigned __int16 *)(v26 + 2 * v34) != (_DWORD)v35)
                  break;
                v22 = v34-- <= 0;
                if (v22)
                  return v4;
              }
              if ((int)v30 <= (int)v34)
                break;
              v4 = (v28 - *(_DWORD *)(v25 + 4 * v29) + v4);
              result = 0xFFFFFFFFLL;
              if ((int)v4 > v24)
                return result;
            }
            v36 = *(_DWORD *)(v25 - 4 * v30 + 1024 + 4 * (v34 + 1));
            v37 = v34 - *(_DWORD *)(v25 + 4 * v35);
            if (v36 > v37)
              v37 = v36;
            v4 = (v37 + v4);
            result = 0xFFFFFFFFLL;
          }
          while ((int)v4 <= v24);
          return result;
        }
        result = 0xFFFFFFFFLL;
        while (1)
        {
          v38 = *(unsigned __int8 *)(a2 + v27 + (int)v4);
          if (v29 == (_DWORD)v38)
            break;
          v4 = (v27 - *(_DWORD *)(v25 + 4 * v38) + v4);
          if ((int)v4 > v24)
            return result;
        }
        return v4;
      }
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t WTF::AdaptiveStringSearcher<char16_t,unsigned char>::populateBoyerMooreTable(uint64_t result)
{
  uint64_t v1;
  int v2;
  int32x4_t *v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int32x4_t v12;
  int32x4_t *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int i;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_DWORD *)(result + 32);
  v3 = *(int32x4_t **)result;
  v4 = (_DWORD *)(*(_QWORD *)result + 1024);
  v5 = 4 * v2;
  v6 = &v4[v5 / 0xFFFFFFFFFFFFFFFCLL];
  v7 = *(_QWORD *)result - v5 + 2024;
  v8 = v1 - v2;
  if ((int)v1 <= v2)
  {
    v27 = (int)v1;
    v6[v27] = 1;
    *(_DWORD *)(v7 + v27 * 4) = v1 + 1;
  }
  else
  {
    v9 = *(_QWORD *)(result + 8);
    v10 = (int)v1 - (uint64_t)v2;
    v11 = v2;
    if (v10 < 8)
      goto LABEL_6;
    v11 = (v10 & 0xFFFFFFFFFFFFFFF8) + v2;
    v12 = vdupq_n_s32(v8);
    v13 = v3 + 65;
    v14 = v10 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v13[-1] = v12;
      *v13 = v12;
      v13 += 2;
      v14 -= 8;
    }
    while (v14);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_6:
      v15 = (int)v1 - v11;
      v16 = (unsigned int *)&v3[64] + v11 - v2;
      do
      {
        *v16++ = v8;
        --v15;
      }
      while (v15);
    }
    v17 = (int)v1;
    v6[v17] = 1;
    v18 = v1 + 1;
    *(_DWORD *)(v7 + v17 * 4) = v1 + 1;
    v19 = (uint64_t)v3->i64 - 4 * v2;
    v20 = *(unsigned __int16 *)(v9 + (((v1 << 32) - 0x100000000) >> 31));
    v21 = v19 + 2016;
    LODWORD(v22) = v1;
    LODWORD(result) = v1 + 1;
    do
    {
      v23 = v22 - 1;
      if ((int)result <= (int)v1)
      {
        v26 = *(unsigned __int16 *)(v9 + 2 * v23);
        do
        {
          if (v26 == *(unsigned __int16 *)(v9 + 2 * (int)result - 2))
            break;
          if (v6[(int)result] == v8)
            v6[(int)result] = result - v22;
          LODWORD(result) = *(_DWORD *)(v7 + 4 * (int)result);
        }
        while ((int)result <= (int)v1);
      }
      *(_DWORD *)(v7 + 4 * v23) = result - 1;
      if (v23 > v2 && (_DWORD)result - 1 == (_DWORD)v1)
      {
        v24 = v18 - v22;
        v22 = (int)v22;
        do
        {
          if (*(unsigned __int16 *)(v9 - 4 + 2 * v22) == v20)
          {
            --v23;
            result = (result - 2);
            *(_DWORD *)(v21 + 4 * v22) = result;
            goto LABEL_10;
          }
          if (v6[(int)v1] == v8)
            v6[(int)v1] = v24;
          *(_DWORD *)(v21 + 4 * v22) = v1;
          ++v24;
          --v23;
          v25 = v22 - 2;
          --v22;
        }
        while (v25 > v2);
        result = v1;
      }
      else
      {
        result = (result - 1);
      }
LABEL_10:
      LODWORD(v22) = v23;
    }
    while (v23 > v2);
    if ((int)result < (int)v1)
    {
      for (i = v2; v18 != i; ++i)
      {
        if (*v4 == v8)
        {
          *v4 = result - v2;
          if (i == (_DWORD)result)
            goto LABEL_34;
        }
        else if (i == (_DWORD)result)
        {
LABEL_34:
          result = *(unsigned int *)(v7 + 4 * (int)result);
        }
        ++v4;
      }
    }
  }
  return result;
}

uint64_t WTF::AdaptiveStringSearcher<char16_t,unsigned char>::boyerMooreSearch(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  int v18;
  uint64_t v19;

  v4 = a1[2];
  v5 = a3 - v4;
  if (a3 - (int)v4 < (int)a4)
    return 0xFFFFFFFFLL;
  v7 = *a1;
  v8 = a1[1];
  v9 = (int)v4 - 1;
  v10 = (int)v9;
  v11 = *(unsigned __int16 *)(v8 + 2 * (int)v9);
  if ((int)v4 > 0)
  {
    v12 = *((int *)a1 + 8);
    do
    {
      while (1)
      {
        while (1)
        {
          v13 = *(unsigned __int8 *)(a2 + (int)a4 + v10);
          if (v11 == (_DWORD)v13)
            break;
          a4 = (v10 - *(_DWORD *)(v7 + 4 * v13) + a4);
          if ((int)a4 > v5)
            return 0xFFFFFFFFLL;
        }
        v14 = v10;
        while (1)
        {
          v15 = *(unsigned __int8 *)(a2 + (int)a4 + v14);
          if (*(unsigned __int16 *)(v8 + 2 * v14) != (_DWORD)v15)
            break;
          if (v14-- <= 0)
            return a4;
        }
        if ((int)v12 <= (int)v14)
          break;
        a4 = (v10 - *(_DWORD *)(v7 + 4 * v11) + a4);
        if ((int)a4 > v5)
          return 0xFFFFFFFFLL;
      }
      v17 = *(_DWORD *)(v7 - 4 * v12 + 1024 + 4 * (v14 + 1));
      v18 = v14 - *(_DWORD *)(v7 + 4 * v15);
      if (v17 > v18)
        v18 = v17;
      a4 = (v18 + a4);
    }
    while ((int)a4 <= v5);
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    v19 = *(unsigned __int8 *)(a2 + v9 + (int)a4);
    if (v11 == (_DWORD)v19)
      break;
    a4 = (v9 - *(_DWORD *)(v7 + 4 * v19) + a4);
    if ((int)a4 > v5)
      return 0xFFFFFFFFLL;
  }
  return a4;
}

uint64_t WTF::AdaptiveStringSearcher<unsigned char,char16_t>::singleCharSearch(uint64_t result, uint64_t a2, int a3, int a4, double a5, double a6, float a7)
{
  uint64_t v7;
  int v8;
  unsigned int v9;
  int16x8_t *v10;
  uint64_t v11;
  int16x8_t *v12;
  int16x8_t v13;
  int8x16_t v14;
  int16x8_t *v15;
  char *v16;
  uint64_t v17;
  int16x8_t *v18;

  v7 = *(_QWORD *)(result + 16);
  if (v7 && (v8 = a3 - v7 - a4 + 1, v8 >= 0))
  {
    v9 = **(unsigned __int8 **)(result + 8);
    v10 = (int16x8_t *)(a2 + 2 * a4);
    v11 = v8;
    v12 = (int16x8_t *)((char *)v10 + 2 * v8);
    if (v11 < 0x20)
    {
      if ((_DWORD)v11)
      {
        v17 = 2 * v11;
        while (v10->u16[0] != v9)
        {
          v10 = (int16x8_t *)((char *)v10 + 2);
          v17 -= 2;
          if (!v17)
            goto LABEL_15;
        }
      }
      else
      {
LABEL_15:
        v10 = v12;
      }
    }
    else
    {
      v13 = vdupq_n_s16(v9);
      do
      {
        v14 = (int8x16_t)vceqq_s16(*v10, v13);
        LOWORD(a7) = vmaxvq_u16((uint16x8_t)v14);
        if (a7 != 0.0)
          goto LABEL_10;
        v15 = v10 + 1;
        v16 = &v10[1].i8[14];
        ++v10;
      }
      while (v16 < (char *)v12);
      if (v15 >= v12)
        goto LABEL_15;
      v14 = (int8x16_t)vceqq_s16(v12[-1], v13);
      v13.i16[0] = vmaxvq_u16((uint16x8_t)v14);
      v10 = v12;
      if (v13.i32[0])
      {
        v10 = v12 - 1;
LABEL_10:
        v10 = (int16x8_t *)((char *)v10
                          + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v14)));
      }
    }
    if (v10 == v12)
      v18 = 0;
    else
      v18 = v10;
    if (v18)
      return (((unint64_t)v18 - a2) >> 1);
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WTF::AdaptiveStringSearcher<unsigned char,char16_t>::linearSearch(uint64_t result, uint64_t a2, int a3, int a4, double a5, double a6, double a7, float a8)
{
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int16x8_t *v14;
  uint64_t v15;
  int16x8_t *v16;
  int16x8_t v17;
  int8x16_t v18;
  int16x8_t *v19;
  char *v20;
  uint64_t v21;
  int16x8_t *v22;
  uint64_t v23;
  int v24;
  int v25;

  v8 = *(_QWORD *)(result + 16);
  v9 = a3 - v8;
  if (v8)
  {
    v10 = *(unsigned __int8 **)(result + 8);
    v11 = (int)v8 - 1;
    while (v9 >= a4)
    {
      v12 = v9 - a4 + 1;
      if (v12 < 0)
        goto LABEL_34;
      v13 = *v10;
      v14 = (int16x8_t *)(a2 + 2 * a4);
      v15 = v12;
      v16 = (int16x8_t *)((char *)v14 + 2 * v12);
      if (v15 < 0x20)
      {
        if ((_DWORD)v15)
        {
          v21 = 2 * v15;
          while (v14->u16[0] != v13)
          {
            v14 = (int16x8_t *)((char *)v14 + 2);
            v21 -= 2;
            if (!v21)
              goto LABEL_17;
          }
        }
        else
        {
LABEL_17:
          v14 = v16;
        }
      }
      else
      {
        v17 = vdupq_n_s16(v13);
        do
        {
          v18 = (int8x16_t)vceqq_s16(*v14, v17);
          LOWORD(a8) = vmaxvq_u16((uint16x8_t)v18);
          if (a8 != 0.0)
            goto LABEL_12;
          v19 = v14 + 1;
          v20 = &v14[1].i8[14];
          ++v14;
        }
        while (v20 < (char *)v16);
        if (v19 >= v16)
          goto LABEL_17;
        v18 = (int8x16_t)vceqq_s16(v16[-1], v17);
        v17.i16[0] = vmaxvq_u16((uint16x8_t)v18);
        v14 = v16;
        if (v17.i32[0])
        {
          v14 = v16 - 1;
LABEL_12:
          v14 = (int16x8_t *)((char *)v14
                            + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v18)));
        }
      }
      if (v14 == v16)
        v22 = 0;
      else
        v22 = v14;
      if (v22)
        result = (((unint64_t)v22 - a2) >> 1);
      else
        result = 0xFFFFFFFFLL;
      if ((_DWORD)result != -1)
      {
        v23 = 0;
        a4 = result + 1;
        do
        {
          v24 = v10[v23 + 1];
          v25 = *(unsigned __int16 *)(a2 + 2 * a4 + 2 * v23++);
        }
        while (v25 == v24 && v23 < v11);
        if (v25 != v24)
          continue;
      }
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  if (v9 < a4)
    return 0xFFFFFFFFLL;
LABEL_34:
  __break(1u);
  return result;
}

uint64_t WTF::AdaptiveStringSearcher<unsigned char,char16_t>::initialSearch(uint64_t result, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7, float a8)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int16x8_t *v20;
  uint64_t v21;
  int16x8_t *v22;
  int16x8_t v23;
  int8x16_t v24;
  int16x8_t *v25;
  char *v26;
  uint64_t v27;
  int16x8_t *v28;
  int v29;
  uint64_t v30;
  int32x4_t *v31;
  int v32;
  int32x4_t v33;
  int v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;

  v9 = *(_QWORD *)(result + 16);
  v10 = a3 - v9;
  if (a3 - (int)v9 >= (int)a4)
  {
    v11 = a4;
    v13 = result;
    v14 = *(unsigned __int8 **)(result + 8);
    v15 = 4 * v9;
    if (v9)
    {
      v16 = -10 - v15;
      if ((int)v9 <= 2)
        v17 = 2;
      else
        v17 = v9;
      while (v16 < 0)
      {
        v18 = v10 - v11 + 1;
        if (v18 < 0)
          goto LABEL_45;
        v19 = *v14;
        v20 = (int16x8_t *)(a2 + 2 * (int)v11);
        v21 = v18;
        v22 = (int16x8_t *)((char *)v20 + 2 * v18);
        if (v21 < 0x20)
        {
          if ((_DWORD)v21)
          {
            v27 = 2 * v21;
            while (v20->u16[0] != v19)
            {
              v20 = (int16x8_t *)((char *)v20 + 2);
              v27 -= 2;
              if (!v27)
                goto LABEL_22;
            }
          }
          else
          {
LABEL_22:
            v20 = v22;
          }
        }
        else
        {
          v23 = vdupq_n_s16(v19);
          do
          {
            v24 = (int8x16_t)vceqq_s16(*v20, v23);
            LOWORD(a8) = vmaxvq_u16((uint16x8_t)v24);
            if (a8 != 0.0)
              goto LABEL_17;
            v25 = v20 + 1;
            v26 = &v20[1].i8[14];
            ++v20;
          }
          while (v26 < (char *)v22);
          if (v25 >= v22)
            goto LABEL_22;
          v24 = (int8x16_t)vceqq_s16(v22[-1], v23);
          v23.i16[0] = vmaxvq_u16((uint16x8_t)v24);
          v20 = v22;
          if (v23.i32[0])
          {
            v20 = v22 - 1;
LABEL_17:
            v20 = (int16x8_t *)((char *)v20
                              + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v24)));
          }
        }
        if (v20 == v22)
          v28 = 0;
        else
          v28 = v20;
        if (v28)
          result = (((unint64_t)v28 - a2) >> 1);
        else
          result = 0xFFFFFFFFLL;
        if ((_DWORD)result == -1)
          return result;
        v29 = v16 + 1;
        v30 = 1;
        while (*(_WORD *)(a2 + 2 * (int)result + 2 * v30) == v14[v30])
        {
          if (v17 == ++v30)
          {
            LODWORD(v30) = v17;
            break;
          }
        }
        if ((_DWORD)v30 == (_DWORD)v9)
          return result;
        v16 = v29 + v30;
        v11 = (result + 1);
        if ((int)result >= v10)
          return 0xFFFFFFFFLL;
      }
    }
    else if (v15 > -10)
    {
LABEL_45:
      __break(1u);
      return result;
    }
    v31 = *(int32x4_t **)v13;
    v32 = *(_DWORD *)(v13 + 32);
    if (v32)
    {
      v33 = vdupq_n_s32(v32 - 1);
      *v31 = v33;
      v31[1] = v33;
      v31[2] = v33;
      v31[3] = v33;
      v31[4] = v33;
      v31[5] = v33;
      v31[6] = v33;
      v31[7] = v33;
      v31[8] = v33;
      v31[9] = v33;
      v31[10] = v33;
      v31[11] = v33;
      v31[12] = v33;
      v31[13] = v33;
      v31[14] = v33;
      v31[15] = v33;
      v31[16] = v33;
      v31[17] = v33;
      v31[18] = v33;
      v31[19] = v33;
      v31[20] = v33;
      v31[21] = v33;
      v31[22] = v33;
      v31[23] = v33;
      v31[24] = v33;
      v31[25] = v33;
      v31[26] = v33;
      v31[27] = v33;
      v31[28] = v33;
      v31[29] = v33;
      v31[30] = v33;
      v31[31] = v33;
      v31[32] = v33;
      v31[33] = v33;
      v31[34] = v33;
      v31[35] = v33;
      v31[36] = v33;
      v31[37] = v33;
      v31[38] = v33;
      v31[39] = v33;
      v31[40] = v33;
      v31[41] = v33;
      v31[42] = v33;
      v31[43] = v33;
      v31[44] = v33;
      v31[45] = v33;
      v31[46] = v33;
      v31[47] = v33;
      v31[48] = v33;
      v31[49] = v33;
      v31[50] = v33;
      v31[51] = v33;
      v31[52] = v33;
      v31[53] = v33;
      v31[54] = v33;
      v31[55] = v33;
      v31[56] = v33;
      v31[57] = v33;
      v31[58] = v33;
      v31[59] = v33;
      v31[60] = v33;
      v31[61] = v33;
      v31[62] = v33;
      v31[63] = v33;
      v34 = v9 - 1;
      if (v32 >= (int)v9 - 1)
        goto LABEL_44;
    }
    else
    {
      memset(*(void **)v13, 255, 0x400uLL);
      v14 = *(unsigned __int8 **)(v13 + 8);
      v34 = v9 - 1;
      if ((int)v9 - 1 <= 0)
      {
LABEL_44:
        *(_QWORD *)(v13 + 24) = WTF::AdaptiveStringSearcher<unsigned char,char16_t>::boyerMooreHorspoolSearch;
        return WTF::AdaptiveStringSearcher<unsigned char,char16_t>::boyerMooreHorspoolSearch((uint64_t *)v13, a2, a3, v11);
      }
    }
    v35 = v34 - (uint64_t)v32;
    v36 = &v14[v32];
    do
    {
      v37 = *v36++;
      v31->i32[v37] = v32++;
      --v35;
    }
    while (v35);
    goto LABEL_44;
  }
  return 0xFFFFFFFFLL;
}

uint64_t WTF::AdaptiveStringSearcher<unsigned char,char16_t>::boyerMooreHorspoolSearch(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v25;

  v4 = a4;
  v7 = a1[1];
  v8 = a1[2];
  v9 = *a1;
  v10 = (int)v8 - 1;
  v11 = *(unsigned __int8 *)(v7 + v10);
  v12 = a3 - v8;
  if ((int)v8 >= 2)
  {
    v14 = *(_DWORD *)(v9 + 4 * *(unsigned __int8 *)(v7 + v10));
    v15 = v10 - v14;
    v16 = -(int)v8;
    v17 = (int)v8 - 2;
    v18 = v14 + 1;
    while ((int)v4 <= v12)
    {
      v21 = *(unsigned __int16 *)(a2 + 2 * ((int)v4 + (int)v10));
      if ((_DWORD)v21 == v11)
      {
        v22 = v17;
        while (*(_WORD *)(a2 + 2 * (int)v4 + 2 * v22) == *(unsigned __int8 *)(v7 + v22))
        {
          if (v22-- <= 0)
            return v4;
        }
        v4 = (v4 + v15);
        v16 = v18 + v16 - v22;
        if (v16 > 0)
        {
          WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::populateBoyerMooreTable((uint64_t)a1);
          a1[3] = (uint64_t)WTF::AdaptiveStringSearcher<unsigned char,char16_t>::boyerMooreSearch;
          return WTF::AdaptiveStringSearcher<unsigned char,char16_t>::boyerMooreSearch(a1, a2, a3, v4);
        }
      }
      else
      {
        if (v21 <= 0xFF)
          v19 = *(_DWORD *)(v9 + 4 * v21);
        else
          v19 = -1;
        v20 = v10 - v19;
        v4 = (v20 + v4);
        v16 = v16 - v20 + 1;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (v12 < (int)a4)
    return 0xFFFFFFFFLL;
  while (1)
  {
    v25 = *(unsigned __int16 *)(a2 + 2 * ((int)v4 + (int)v10));
    if ((_DWORD)v25 == v11)
      break;
    if (v25 <= 0xFF)
    {
      v4 = (v10 - *(_DWORD *)(v9 + 4 * v25) + v4);
      if ((int)v4 > v12)
        return 0xFFFFFFFFLL;
    }
    else
    {
      v4 = (v8 + v4);
      if ((int)v4 > v12)
        return 0xFFFFFFFFLL;
    }
  }
  return v4;
}

uint64_t WTF::AdaptiveStringSearcher<unsigned char,char16_t>::boyerMooreSearch(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;

  v4 = a1[2];
  v5 = a3 - v4;
  if (a3 - (int)v4 < (int)a4)
    return 0xFFFFFFFFLL;
  v7 = *a1;
  v8 = a1[1];
  v9 = v4 - 1;
  v10 = *(unsigned __int8 *)(v8 + (int)v4 - 1);
  if ((int)v4 > 0)
  {
    v11 = *((int *)a1 + 8);
    v12 = v8 - 1;
    do
    {
      while (1)
      {
        while (1)
        {
          v13 = *(unsigned __int16 *)(a2 + 2 * ((int)a4 + v9));
          if ((_DWORD)v13 == (_DWORD)v10)
            break;
          if (v13 <= 0xFF)
          {
            a4 = (v9 - *(_DWORD *)(v7 + 4 * v13) + a4);
            if ((int)a4 > v5)
              return 0xFFFFFFFFLL;
          }
          else
          {
            a4 = (v4 + a4);
            if ((int)a4 > v5)
              return 0xFFFFFFFFLL;
          }
        }
        v14 = v4 - 1;
        v15 = (int)v4;
        while (1)
        {
          v16 = *(unsigned __int16 *)(a2 - 2 + 2 * (int)a4 + 2 * v15);
          if ((_DWORD)v16 != *(unsigned __int8 *)(v12 + v15))
            break;
          --v15;
          --v14;
          if (v15 + 1 <= 1)
            return a4;
        }
        if ((int)v11 <= v14)
          break;
        a4 = (v9 - *(_DWORD *)(v7 + 4 * v10) + a4);
        if ((int)a4 > v5)
          return 0xFFFFFFFFLL;
      }
      if (v16 <= 0xFF)
        v17 = *(_DWORD *)(v7 + 4 * v16);
      else
        v17 = -1;
      v18 = *(_DWORD *)(v7 - 4 * v11 + 1024 + 4 * v15);
      v19 = v14 - v17;
      if (v18 > v19)
        v19 = v18;
      a4 = (v19 + a4);
    }
    while ((int)a4 <= v5);
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    v20 = *(unsigned __int16 *)(a2 + 2 * ((int)a4 + v9));
    if ((_DWORD)v20 == (_DWORD)v10)
      break;
    if (v20 <= 0xFF)
    {
      a4 = (v9 - *(_DWORD *)(v7 + 4 * v20) + a4);
      if ((int)a4 > v5)
        return 0xFFFFFFFFLL;
    }
    else
    {
      a4 = (v4 + a4);
      if ((int)a4 > v5)
        return 0xFFFFFFFFLL;
    }
  }
  return a4;
}

uint64_t WTF::AdaptiveStringSearcher<char16_t,char16_t>::singleCharSearch(uint64_t result, uint64_t a2, int a3, int a4, double a5, double a6, float a7)
{
  uint64_t v7;
  int v8;
  unsigned int v9;
  int16x8_t *v10;
  uint64_t v11;
  int16x8_t *v12;
  int16x8_t v13;
  int8x16_t v14;
  int16x8_t *v15;
  char *v16;
  uint64_t v17;
  int16x8_t *v18;

  v7 = *(_QWORD *)(result + 16);
  if (v7 && (v8 = a3 - v7 - a4 + 1, v8 >= 0))
  {
    v9 = **(unsigned __int16 **)(result + 8);
    v10 = (int16x8_t *)(a2 + 2 * a4);
    v11 = v8;
    v12 = (int16x8_t *)((char *)v10 + 2 * v8);
    if (v11 < 0x20)
    {
      if ((_DWORD)v11)
      {
        v17 = 2 * v11;
        while (v9 != v10->u16[0])
        {
          v10 = (int16x8_t *)((char *)v10 + 2);
          v17 -= 2;
          if (!v17)
            goto LABEL_15;
        }
      }
      else
      {
LABEL_15:
        v10 = v12;
      }
    }
    else
    {
      v13 = vdupq_n_s16(v9);
      do
      {
        v14 = (int8x16_t)vceqq_s16(*v10, v13);
        LOWORD(a7) = vmaxvq_u16((uint16x8_t)v14);
        if (a7 != 0.0)
          goto LABEL_10;
        v15 = v10 + 1;
        v16 = &v10[1].i8[14];
        ++v10;
      }
      while (v16 < (char *)v12);
      if (v15 >= v12)
        goto LABEL_15;
      v14 = (int8x16_t)vceqq_s16(v12[-1], v13);
      v13.i16[0] = vmaxvq_u16((uint16x8_t)v14);
      v10 = v12;
      if (v13.i32[0])
      {
        v10 = v12 - 1;
LABEL_10:
        v10 = (int16x8_t *)((char *)v10
                          + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v14)));
      }
    }
    if (v10 == v12)
      v18 = 0;
    else
      v18 = v10;
    if (v18)
      return (((unint64_t)v18 - a2) >> 1);
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WTF::AdaptiveStringSearcher<char16_t,char16_t>::linearSearch(uint64_t result, uint64_t a2, int a3, int a4, double a5, double a6, double a7, float a8)
{
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int16x8_t *v14;
  uint64_t v15;
  int16x8_t *v16;
  int16x8_t v17;
  int8x16_t v18;
  int16x8_t *v19;
  char *v20;
  uint64_t v21;
  int16x8_t *v22;
  uint64_t v23;
  int v24;
  int v25;

  v8 = *(_QWORD *)(result + 16);
  v9 = a3 - v8;
  if (v8)
  {
    v10 = *(unsigned __int16 **)(result + 8);
    v11 = (int)v8 - 1;
    while (v9 >= a4)
    {
      v12 = v9 - a4 + 1;
      if (v12 < 0)
        goto LABEL_34;
      v13 = *v10;
      v14 = (int16x8_t *)(a2 + 2 * a4);
      v15 = v12;
      v16 = (int16x8_t *)((char *)v14 + 2 * v12);
      if (v15 < 0x20)
      {
        if ((_DWORD)v15)
        {
          v21 = 2 * v15;
          while (v13 != v14->u16[0])
          {
            v14 = (int16x8_t *)((char *)v14 + 2);
            v21 -= 2;
            if (!v21)
              goto LABEL_17;
          }
        }
        else
        {
LABEL_17:
          v14 = v16;
        }
      }
      else
      {
        v17 = vdupq_n_s16(v13);
        do
        {
          v18 = (int8x16_t)vceqq_s16(*v14, v17);
          LOWORD(a8) = vmaxvq_u16((uint16x8_t)v18);
          if (a8 != 0.0)
            goto LABEL_12;
          v19 = v14 + 1;
          v20 = &v14[1].i8[14];
          ++v14;
        }
        while (v20 < (char *)v16);
        if (v19 >= v16)
          goto LABEL_17;
        v18 = (int8x16_t)vceqq_s16(v16[-1], v17);
        v17.i16[0] = vmaxvq_u16((uint16x8_t)v18);
        v14 = v16;
        if (v17.i32[0])
        {
          v14 = v16 - 1;
LABEL_12:
          v14 = (int16x8_t *)((char *)v14
                            + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v18)));
        }
      }
      if (v14 == v16)
        v22 = 0;
      else
        v22 = v14;
      if (v22)
        result = (((unint64_t)v22 - a2) >> 1);
      else
        result = 0xFFFFFFFFLL;
      if ((_DWORD)result != -1)
      {
        v23 = 0;
        a4 = result + 1;
        do
        {
          v24 = v10[v23 + 1];
          v25 = *(unsigned __int16 *)(a2 + 2 * a4 + 2 * v23++);
        }
        while (v24 == v25 && v23 < v11);
        if (v24 != v25)
          continue;
      }
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  if (v9 < a4)
    return 0xFFFFFFFFLL;
LABEL_34:
  __break(1u);
  return result;
}

uint64_t WTF::AdaptiveStringSearcher<char16_t,char16_t>::initialSearch(uint64_t result, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7, float a8)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  unsigned __int16 *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int16x8_t *v20;
  uint64_t v21;
  int16x8_t *v22;
  int16x8_t v23;
  int8x16_t v24;
  int16x8_t *v25;
  char *v26;
  uint64_t v27;
  int16x8_t *v28;
  int v29;
  uint64_t v30;
  int32x4_t *v31;
  int v32;
  int32x4_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  unint64_t v38;
  int v39;

  v9 = *(_QWORD *)(result + 16);
  v10 = a3 - v9;
  if (a3 - (int)v9 >= (int)a4)
  {
    v11 = a4;
    v13 = result;
    v14 = *(unsigned __int16 **)(result + 8);
    v15 = 4 * v9;
    if (v9)
    {
      v16 = -10 - v15;
      if ((int)v9 <= 2)
        v17 = 2;
      else
        v17 = v9;
      while (v16 < 0)
      {
        v18 = v10 - v11 + 1;
        if (v18 < 0)
          goto LABEL_48;
        v19 = *v14;
        v20 = (int16x8_t *)(a2 + 2 * (int)v11);
        v21 = v18;
        v22 = (int16x8_t *)((char *)v20 + 2 * v18);
        if (v21 < 0x20)
        {
          if ((_DWORD)v21)
          {
            v27 = 2 * v21;
            while (v19 != v20->u16[0])
            {
              v20 = (int16x8_t *)((char *)v20 + 2);
              v27 -= 2;
              if (!v27)
                goto LABEL_22;
            }
          }
          else
          {
LABEL_22:
            v20 = v22;
          }
        }
        else
        {
          v23 = vdupq_n_s16(v19);
          do
          {
            v24 = (int8x16_t)vceqq_s16(*v20, v23);
            LOWORD(a8) = vmaxvq_u16((uint16x8_t)v24);
            if (a8 != 0.0)
              goto LABEL_17;
            v25 = v20 + 1;
            v26 = &v20[1].i8[14];
            ++v20;
          }
          while (v26 < (char *)v22);
          if (v25 >= v22)
            goto LABEL_22;
          v24 = (int8x16_t)vceqq_s16(v22[-1], v23);
          v23.i16[0] = vmaxvq_u16((uint16x8_t)v24);
          v20 = v22;
          if (v23.i32[0])
          {
            v20 = v22 - 1;
LABEL_17:
            v20 = (int16x8_t *)((char *)v20
                              + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v24)));
          }
        }
        if (v20 == v22)
          v28 = 0;
        else
          v28 = v20;
        if (v28)
          result = (((unint64_t)v28 - a2) >> 1);
        else
          result = 0xFFFFFFFFLL;
        if ((_DWORD)result == -1)
          return result;
        v29 = v16 + 1;
        v30 = 1;
        while (v14[v30] == *(unsigned __int16 *)(a2 + 2 * (int)result + 2 * v30))
        {
          if (v17 == ++v30)
          {
            LODWORD(v30) = v17;
            break;
          }
        }
        if ((_DWORD)v30 == (_DWORD)v9)
          return result;
        v16 = v29 + v30;
        v11 = (result + 1);
        if ((int)result >= v10)
          return 0xFFFFFFFFLL;
      }
    }
    else if (v15 > -10)
    {
LABEL_48:
      __break(1u);
      return result;
    }
    v31 = *(int32x4_t **)v13;
    v32 = *(_DWORD *)(v13 + 32);
    if (v32)
    {
      v33 = vdupq_n_s32(v32 - 1);
      *v31 = v33;
      v31[1] = v33;
      v31[2] = v33;
      v31[3] = v33;
      v31[4] = v33;
      v31[5] = v33;
      v31[6] = v33;
      v31[7] = v33;
      v31[8] = v33;
      v31[9] = v33;
      v31[10] = v33;
      v31[11] = v33;
      v31[12] = v33;
      v31[13] = v33;
      v31[14] = v33;
      v31[15] = v33;
      v31[16] = v33;
      v31[17] = v33;
      v31[18] = v33;
      v31[19] = v33;
      v31[20] = v33;
      v31[21] = v33;
      v31[22] = v33;
      v31[23] = v33;
      v31[24] = v33;
      v31[25] = v33;
      v31[26] = v33;
      v31[27] = v33;
      v31[28] = v33;
      v31[29] = v33;
      v31[30] = v33;
      v31[31] = v33;
      v31[32] = v33;
      v31[33] = v33;
      v31[34] = v33;
      v31[35] = v33;
      v31[36] = v33;
      v31[37] = v33;
      v31[38] = v33;
      v31[39] = v33;
      v31[40] = v33;
      v31[41] = v33;
      v31[42] = v33;
      v31[43] = v33;
      v31[44] = v33;
      v31[45] = v33;
      v31[46] = v33;
      v31[47] = v33;
      v31[48] = v33;
      v31[49] = v33;
      v31[50] = v33;
      v31[51] = v33;
      v31[52] = v33;
      v31[53] = v33;
      v31[54] = v33;
      v31[55] = v33;
      v31[56] = v33;
      v31[57] = v33;
      v31[58] = v33;
      v31[59] = v33;
      v31[60] = v33;
      v31[61] = v33;
      v31[62] = v33;
      v31[63] = v33;
      v34 = v9 - 1;
      if (v32 >= (int)v9 - 1)
        goto LABEL_47;
    }
    else
    {
      memset(*(void **)v13, 255, 0x400uLL);
      v14 = *(unsigned __int16 **)(v13 + 8);
      v34 = v9 - 1;
      if ((int)v9 - 1 <= 0)
      {
LABEL_47:
        *(_QWORD *)(v13 + 24) = WTF::AdaptiveStringSearcher<char16_t,char16_t>::boyerMooreHorspoolSearch;
        return WTF::AdaptiveStringSearcher<char16_t,char16_t>::boyerMooreHorspoolSearch(v13, a2, a3, v11);
      }
    }
    v35 = v34 - (uint64_t)v32;
    v36 = v32;
    if (v35 < 2)
      goto LABEL_51;
    v36 = (v35 & 0xFFFFFFFFFFFFFFFELL) + v32;
    v37 = &v14[v32 + 1];
    v38 = v35 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v31->i32[*((unsigned __int8 *)v37 - 2)] = v32;
      v39 = *(unsigned __int8 *)v37;
      v37 += 2;
      v31->i32[v39] = v32 + 1;
      v32 += 2;
      v38 -= 2;
    }
    while (v38);
    if (v35 != (v35 & 0xFFFFFFFFFFFFFFFELL))
    {
LABEL_51:
      do
      {
        v31->i32[LOBYTE(v14[v36])] = v36;
        ++v36;
      }
      while (v34 != v36);
    }
    goto LABEL_47;
  }
  return 0xFFFFFFFFLL;
}

uint64_t WTF::AdaptiveStringSearcher<char16_t,char16_t>::boyerMooreHorspoolSearch(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  int v32;
  int v33;

  v4 = a4;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)a1;
  v10 = v8 - 1;
  v11 = *(unsigned __int16 *)(v7 + 2 * ((int)v8 - 1));
  v12 = a3 - v8;
  if ((int)v8 < 2)
  {
    if (v12 >= (int)a4)
    {
      while (v11 != *(unsigned __int16 *)(a2 + 2 * ((int)v4 + v10)))
      {
        v4 = (v10 - *(_DWORD *)(v9 + 4 * *(_WORD *)(a2 + 2 * ((int)v4 + v10))) + v4);
        if ((int)v4 > v12)
          return 0xFFFFFFFFLL;
      }
      return v4;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    v14 = *(_DWORD *)(v9 + 4 * *(_WORD *)(v7 + 2 * ((int)v8 - 1)));
    v15 = v10 - v14;
    v16 = -(int)v8;
    v17 = (int)v8 - 2;
    v18 = v14 + 1;
    while ((int)v4 <= v12)
    {
      while (v11 != *(unsigned __int16 *)(a2 + 2 * ((int)v4 + v10)))
      {
        v19 = v10 - *(_DWORD *)(v9 + 4 * *(_WORD *)(a2 + 2 * ((int)v4 + v10)));
        v4 = (v19 + v4);
        v16 = v16 - v19 + 1;
        if ((int)v4 > v12)
          return 0xFFFFFFFFLL;
      }
      v20 = v17;
      while (*(unsigned __int16 *)(v7 + 2 * v20) == *(unsigned __int16 *)(a2 + 2 * (int)v4 + 2 * v20))
      {
        v21 = v20-- <= 0;
        if (v21)
          return v4;
      }
      v4 = (v4 + v15);
      v16 = v18 + v16 - v20;
      if (v16 > 0)
      {
        WTF::AdaptiveStringSearcher<char16_t,unsigned char>::populateBoyerMooreTable(a1);
        *(_QWORD *)(a1 + 24) = WTF::AdaptiveStringSearcher<char16_t,char16_t>::boyerMooreSearch;
        v22 = *(_QWORD *)(a1 + 16);
        v23 = a3 - v22;
        if (a3 - (int)v22 < (int)v4)
          return 0xFFFFFFFFLL;
        v24 = *(_QWORD *)a1;
        v25 = *(_QWORD *)(a1 + 8);
        v26 = v22 - 1;
        v27 = *(unsigned __int16 *)(v25 + 2 * ((int)v22 - 1));
        if ((int)v22 > 0)
        {
          v28 = *(int *)(a1 + 32);
          v29 = v25 - 2;
          do
          {
            while (1)
            {
              while (v27 != *(unsigned __int16 *)(a2 + 2 * ((int)v4 + v26)))
              {
                v4 = (v26
                                  - *(_DWORD *)(v24 + 4 * *(_WORD *)(a2 + 2 * ((int)v4 + v26)))
                                  + v4);
                result = 0xFFFFFFFFLL;
                if ((int)v4 > v23)
                  return result;
              }
              v31 = (int)v22;
              while (*(unsigned __int16 *)(v29 + 2 * v31) == *(unsigned __int16 *)(a2 - 2 + 2 * (int)v4 + 2 * v31))
              {
                v21 = v31-- <= 1;
                if (v21)
                  return v4;
              }
              if ((int)v28 <= (int)v31 - 1)
                break;
              v4 = (v26 - *(_DWORD *)(v24 + 4 * v27) + v4);
              result = 0xFFFFFFFFLL;
              if ((int)v4 > v23)
                return result;
            }
            v32 = *(_DWORD *)(v24 - 4 * v28 + 1024 + 4 * v31);
            v33 = ~*(_DWORD *)(v24 + 4 * *(_WORD *)(a2 - 2 + 2 * (int)v4 + 2 * v31)) + v31;
            if (v32 > v33)
              v33 = v32;
            v4 = (v33 + v4);
            result = 0xFFFFFFFFLL;
          }
          while ((int)v4 <= v23);
          return result;
        }
        result = 0xFFFFFFFFLL;
        while (v27 != *(unsigned __int16 *)(a2 + 2 * ((int)v4 + v26)))
        {
          v4 = (v26 - *(_DWORD *)(v24 + 4 * *(_WORD *)(a2 + 2 * ((int)v4 + v26))) + v4);
          if ((int)v4 > v23)
            return result;
        }
        return v4;
      }
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t WTF::AdaptiveStringSearcher<char16_t,char16_t>::boyerMooreSearch(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;

  v4 = a1[2];
  v5 = a3 - v4;
  if (a3 - (int)v4 < (int)a4)
    return 0xFFFFFFFFLL;
  v7 = *a1;
  v8 = a1[1];
  v9 = v4 - 1;
  v10 = *(unsigned __int16 *)(v8 + 2 * ((int)v4 - 1));
  if ((int)v4 > 0)
  {
    v11 = *((int *)a1 + 8);
    v12 = v8 - 2;
    do
    {
      while (1)
      {
        while (v10 != *(unsigned __int16 *)(a2 + 2 * ((int)a4 + v9)))
        {
          a4 = (v9 - *(_DWORD *)(v7 + 4 * *(_WORD *)(a2 + 2 * ((int)a4 + v9))) + a4);
          if ((int)a4 > v5)
            return 0xFFFFFFFFLL;
        }
        v13 = (int)v4;
        while (*(unsigned __int16 *)(v12 + 2 * v13) == *(unsigned __int16 *)(a2 - 2 + 2 * (int)a4 + 2 * v13))
        {
          if (v13-- <= 1)
            return a4;
        }
        if ((int)v11 <= (int)v13 - 1)
          break;
        a4 = (v9 - *(_DWORD *)(v7 + 4 * v10) + a4);
        if ((int)a4 > v5)
          return 0xFFFFFFFFLL;
      }
      v15 = *(_DWORD *)(v7 - 4 * v11 + 1024 + 4 * v13);
      v16 = ~*(_DWORD *)(v7 + 4 * *(_WORD *)(a2 - 2 + 2 * (int)a4 + 2 * v13)) + v13;
      if (v15 > v16)
        v16 = v15;
      a4 = (v16 + a4);
    }
    while ((int)a4 <= v5);
    return 0xFFFFFFFFLL;
  }
  while (v10 != *(unsigned __int16 *)(a2 + 2 * ((int)a4 + v9)))
  {
    a4 = (v9 - *(_DWORD *)(v7 + 4 * *(_WORD *)(a2 + 2 * ((int)a4 + v9))) + a4);
    if ((int)a4 > v5)
      return 0xFFFFFFFFLL;
  }
  return a4;
}

uint64_t WTF::toASCIIUpper<unsigned char>(unsigned int a1)
{
  int v1;

  if (a1 - 97 >= 0x1A)
    v1 = 255;
  else
    v1 = 223;
  return v1 & a1;
}

uint64_t WTF::toASCIIUpper<char16_t>(unsigned int a1)
{
  int v1;

  if (a1 - 97 >= 0x1A)
    v1 = 0xFFFF;
  else
    v1 = 65503;
  return v1 & a1;
}

void WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIICaseConverter,void>>(WTF *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t (*v11)(_QWORD);
  unsigned __int8 *v12;
  WTF::AtomStringImpl **v13;
  uint64_t v14;
  unsigned int v15;
  WTF::AtomStringImpl *v16;
  const WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD);
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t (*v29)(_QWORD);
  unsigned __int16 *v30;
  uint64_t v31;
  WTF::AtomStringImpl **v32;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(_QWORD);
  uint64_t i;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(_QWORD);
  uint64_t v49;
  uint64_t v50;
  WTF::AtomStringImpl *v51[17];

  v51[16] = *(WTF::AtomStringImpl **)MEMORY[0x1E0C80C00];
  v9 = a2[4];
  if ((v9 & 0x80000000) != 0)
    goto LABEL_39;
  if (v9 > 0x3F)
  {
    if (*((_BYTE *)a2 + 20))
    {
      WTF::tryFastCompactMalloc((WTF *)(v9 + 20), v51);
      v23 = v51[0];
      if (v51[0])
      {
        *(_DWORD *)v51[0] = 2;
        *((_DWORD *)v23 + 1) = v9;
        *((_QWORD *)v23 + 1) = (char *)v23 + 20;
        *((_DWORD *)v23 + 4) = 4;
        v24 = a2[4];
        if (*a2 == 1)
          v25 = (uint64_t (*)(_QWORD))WTF::toASCIILower<unsigned char>;
        else
          v25 = (uint64_t (*)(_QWORD))WTF::toASCIIUpper<unsigned char>;
        if ((_DWORD)v24)
        {
          v26 = 0;
          v27 = *((_QWORD *)a2 + 1);
          do
          {
            *((_BYTE *)v23 + v26 + 20) = v25(*(unsigned __int8 *)(v27 + v26));
            ++v26;
          }
          while (v24 != v26);
        }
        goto LABEL_19;
      }
    }
    else if (v9 <= 0x7FFFFFEF)
    {
      WTF::tryFastCompactMalloc((WTF *)(2 * v9 + 20), v51);
      v23 = v51[0];
      if (v51[0])
      {
        *(_DWORD *)v51[0] = 2;
        *((_DWORD *)v23 + 1) = v9;
        *((_QWORD *)v23 + 1) = (char *)v23 + 20;
        *((_DWORD *)v23 + 4) = 0;
        v34 = *a2;
        v35 = *((unsigned __int8 *)a2 + 20);
        v36 = *((_QWORD *)a2 + 1);
        v37 = a2[4];
        if (v35)
        {
          if (v34 == 1)
            v38 = (uint64_t (*)(_QWORD))WTF::toASCIILower<unsigned char>;
          else
            v38 = (uint64_t (*)(_QWORD))WTF::toASCIIUpper<unsigned char>;
          if ((_DWORD)v37)
          {
            for (i = 0; i != v37; ++i)
              *((_WORD *)v23 + i + 10) = v38(*(unsigned __int8 *)(v36 + i));
          }
        }
        else
        {
          if (v34 == 1)
            v48 = (uint64_t (*)(_QWORD))WTF::toASCIILower<char16_t>;
          else
            v48 = (uint64_t (*)(_QWORD))WTF::toASCIIUpper<char16_t>;
          if ((_DWORD)v37)
          {
            v49 = 0;
            v50 = 2 * v37;
            do
            {
              *(_WORD *)((char *)v23 + v49 + 20) = v48(*(unsigned __int16 *)(v36 + v49));
              v49 += 2;
            }
            while (v50 != v49);
          }
        }
LABEL_19:
        if ((*((_BYTE *)v23 + 16) & 0x10) != 0)
        {
          v28 = *(_DWORD *)v23;
          *(_DWORD *)v23 += 2;
          *(_QWORD *)a1 = v23;
          if (v28)
            goto LABEL_21;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v23, v17, v18, v19, v20, v21, v22, a1);
          v28 = *(_DWORD *)v23 - 2;
          if (*(_DWORD *)v23 != 2)
          {
LABEL_21:
            *(_DWORD *)v23 = v28;
            return;
          }
        }
        WTF::StringImpl::~StringImpl(v23, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
        return;
      }
    }
LABEL_39:
    *(_QWORD *)a1 = 0;
    return;
  }
  if (*((_BYTE *)a2 + 20))
  {
    if (*a2 == 1)
      v11 = (uint64_t (*)(_QWORD))WTF::toASCIILower<unsigned char>;
    else
      v11 = (uint64_t (*)(_QWORD))WTF::toASCIIUpper<unsigned char>;
    if ((_DWORD)v9)
    {
      v12 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      v13 = v51;
      v14 = a2[4];
      do
      {
        v15 = *v12++;
        *(_BYTE *)v13 = v11(v15);
        v13 = (WTF::AtomStringImpl **)((char *)v13 + 1);
        --v14;
      }
      while (v14);
    }
    WTF::AtomStringImpl::add((uint64_t)v51, v9, a4, a5, a6, a7, a8, a1);
  }
  else
  {
    if (*a2 == 1)
      v29 = (uint64_t (*)(_QWORD))WTF::toASCIILower<char16_t>;
    else
      v29 = (uint64_t (*)(_QWORD))WTF::toASCIIUpper<char16_t>;
    if ((_DWORD)v9)
    {
      v30 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
      v31 = 2 * v9;
      v32 = v51;
      do
      {
        v33 = *v30++;
        *(_WORD *)v32 = v29(v33);
        v32 = (WTF::AtomStringImpl **)((char *)v32 + 2);
        v31 -= 2;
      }
      while (v31);
    }
    WTF::AtomStringImpl::add((uint64_t)v51, v9, a4, a5, a6, a7, a8, a1);
  }
}

CFStringRef WTF::StringView::createCFString@<X0>(const UInt8 **this@<X0>, CFStringRef *a2@<X8>)
{
  int v3;
  const UInt8 *v4;
  CFIndex v5;
  const __CFAllocator *v6;
  CFStringRef result;

  v3 = *((unsigned __int8 *)this + 12);
  v4 = *this;
  v5 = *((unsigned int *)this + 2);
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v3)
    result = CFStringCreateWithBytes(v6, v4, v5, 0x201u, 0);
  else
    result = CFStringCreateWithCharacters(v6, (const UniChar *)v4, v5);
  *a2 = result;
  return result;
}

CFStringRef WTF::StringView::createCFStringWithoutCopying@<X0>(const UInt8 **this@<X0>, CFStringRef *a2@<X8>)
{
  int v3;
  const UInt8 *v4;
  CFIndex v5;
  const __CFAllocator *v6;
  CFStringRef result;

  v3 = *((unsigned __int8 *)this + 12);
  v4 = *this;
  v5 = *((unsigned int *)this + 2);
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v3)
    result = CFStringCreateWithBytesNoCopy(v6, v4, v5, 0x201u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  else
    result = CFStringCreateWithCharactersNoCopy(v6, (const UniChar *)v4, v5, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  *a2 = result;
  return result;
}

void WTF::StringView::createNSString(WTF::StringView *this@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;

  v3 = *((unsigned __int8 *)this + 12);
  v4 = *(_QWORD *)this;
  v5 = *((unsigned int *)this + 2);
  v6 = objc_alloc(MEMORY[0x1E0CB3940]);
  if (v3)
  {
    v7 = (id)objc_msgSend(v6, "initWithBytes:length:encoding:", v4, v5, 5);
    *a2 = v7;
    if (v7)
      goto LABEL_5;
  }
  else
  {
    v7 = (id)objc_msgSend(v6, "initWithCharacters:length:", v4, v5);
    *a2 = v7;
    if (v7)
    {
LABEL_5:
      v8 = v7;
      CFRetain(v7);
      v7 = v8;
    }
  }
  v9 = v7;

}

void sub_197B18A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WTF::StringView::createNSStringWithoutCopying(WTF::StringView *this@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;

  v3 = *((unsigned __int8 *)this + 12);
  v4 = *(_QWORD *)this;
  v5 = *((unsigned int *)this + 2);
  v6 = objc_alloc(MEMORY[0x1E0CB3940]);
  if (v3)
  {
    v7 = (id)objc_msgSend(v6, "initWithBytesNoCopy:length:encoding:freeWhenDone:", v4, v5, 5, 0);
    *a2 = v7;
    if (v7)
      goto LABEL_5;
  }
  else
  {
    v7 = (id)objc_msgSend(v6, "initWithCharactersNoCopy:length:freeWhenDone:", v4, v5, 0);
    *a2 = v7;
    if (v7)
    {
LABEL_5:
      v8 = v7;
      CFRetain(v7);
      v7 = v8;
    }
  }
  v9 = v7;

}

void sub_197B18AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

double WTF::double_conversion::Strtod(_OWORD *a1, int a2, int a3)
{
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  double v40;
  uint64_t v41;
  int v42;
  int v43;
  double v44;
  double v45;
  double v47;
  _OWORD v48[48];
  uint64_t v49;
  char v50;
  uint64_t v51;

  v3 = a1;
  v51 = *MEMORY[0x1E0C80C00];
  if (a2 < 1)
  {
LABEL_5:
    v5 = 0;
  }
  else
  {
    v4 = 0;
    while (*((_BYTE *)a1 + v4) == 48)
    {
      if (a2 == ++v4)
        goto LABEL_5;
    }
    v3 = (_OWORD *)((char *)a1 + v4);
    v5 = (a2 - v4);
  }
  v6 = 0;
  v7 = (char *)v3 - 1;
  v8 = -1;
  v9 = 779;
  do
  {
    if ((int)v5 + v6 <= 0)
    {
      v12 = 0;
      v11 = v5 + a3;
      goto LABEL_14;
    }
    v10 = v7[v5];
    ++v8;
    --v7;
    ++v9;
    --v6;
  }
  while (v10 == 48);
  v11 = v8 + a3;
  v12 = v5 - v8;
  if ((v5 - v8) <= 0x30C)
  {
LABEL_14:
    v14 = v12;
    goto LABEL_18;
  }
  if ((unint64_t)((char *)v48 - (char *)v3) >= 0x20)
  {
    v15 = v3[1];
    v48[0] = *v3;
    v48[1] = v15;
    v16 = v3[3];
    v48[2] = v3[2];
    v48[3] = v16;
    v17 = v3[5];
    v48[4] = v3[4];
    v48[5] = v17;
    v18 = v3[7];
    v48[6] = v3[6];
    v48[7] = v18;
    v19 = v3[9];
    v48[8] = v3[8];
    v48[9] = v19;
    v20 = v3[11];
    v48[10] = v3[10];
    v48[11] = v20;
    v21 = v3[13];
    v48[12] = v3[12];
    v48[13] = v21;
    v22 = v3[15];
    v48[14] = v3[14];
    v48[15] = v22;
    v23 = v3[17];
    v48[16] = v3[16];
    v48[17] = v23;
    v24 = v3[19];
    v48[18] = v3[18];
    v48[19] = v24;
    v25 = v3[21];
    v48[20] = v3[20];
    v48[21] = v25;
    v26 = v3[23];
    v48[22] = v3[22];
    v48[23] = v26;
    v27 = v3[25];
    v48[24] = v3[24];
    v48[25] = v27;
    v28 = v3[27];
    v48[26] = v3[26];
    v48[27] = v28;
    v29 = v3[29];
    v48[28] = v3[28];
    v48[29] = v29;
    v30 = v3[31];
    v48[30] = v3[30];
    v48[31] = v30;
    v31 = v3[33];
    v48[32] = v3[32];
    v48[33] = v31;
    v32 = v3[35];
    v48[34] = v3[34];
    v48[35] = v32;
    v33 = v3[37];
    v48[36] = v3[36];
    v48[37] = v33;
    v34 = v3[39];
    v48[38] = v3[38];
    v48[39] = v34;
    v35 = v3[41];
    v48[40] = v3[40];
    v48[41] = v35;
    v36 = v3[43];
    v48[42] = v3[42];
    v48[43] = v36;
    v37 = v3[45];
    v48[44] = v3[44];
    v48[45] = v37;
    v38 = v3[47];
    v48[46] = v3[46];
    v48[47] = v38;
    v13 = 776;
    v49 = *((_QWORD *)v3 + 96);
  }
  else
  {
    v13 = 0;
  }
  do
  {
    *((_BYTE *)v48 + v13) = *((_BYTE *)v3 + v13);
    ++v13;
  }
  while (v13 != 779);
  v50 = 49;
  v11 += v5 - v9;
  v3 = v48;
  v14 = 780;
LABEL_18:
  v47 = 0.0;
  v39 = WTF::double_conversion::ComputeGuess((uint64_t)v3, v14, v11, &v47);
  v40 = v47;
  if ((v39 & 1) == 0)
  {
    v41 = 2 * (*(_QWORD *)&v47 & 0xFFFFFFFFFFFFFLL);
    if ((*(_QWORD *)&v47 & 0x7FF0000000000000) != 0)
    {
      v41 = (2 * (*(_QWORD *)&v47 & 0xFFFFFFFFFFFFFLL)) | 0x20000000000000;
      v42 = ((*(_QWORD *)&v47 >> 52) & 0x7FF) - 1076;
    }
    else
    {
      v42 = -1075;
    }
    v43 = WTF::double_conversion::CompareBufferWithDiyFp((uint64_t)v3, v14, v11, v41 | 1, v42);
    if ((v43 & 0x80000000) == 0)
    {
      *(_QWORD *)&v44 = *(_QWORD *)&v40 + 1;
      *(_QWORD *)&v45 = *(_QWORD *)&v40 - 1;
      if ((*(_QWORD *)&v40 & 0x7FFFFFFFFFFFFFFFLL) == 0)
        v45 = 0.0;
      if (v40 < 0.0)
        v44 = v45;
      if (v43)
      {
        if (v40 == INFINITY)
          return INFINITY;
        else
          return v44;
      }
      else
      {
        if (v40 == INFINITY)
          v44 = INFINITY;
        if ((LOBYTE(v40) & 1) != 0)
          return v44;
      }
    }
  }
  return v40;
}

uint64_t WTF::double_conversion::ComputeGuess(uint64_t a1, int a2, unsigned int a3, double *a4)
{
  int v4;
  uint64_t v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t i;
  unint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  double v52;
  _BOOL4 v53;
  int v54;
  BOOL v55;
  uint64_t v56;
  _BOOL4 v57;
  unint64_t v58;
  _BOOL4 v60;

  if (!a2)
    goto LABEL_45;
  v4 = a2 + a3;
  if ((int)(a2 + a3) >= 310)
  {
    *a4 = INFINITY;
    return 1;
  }
  if (v4 <= -324)
    goto LABEL_45;
  if (a2 >= 16)
    goto LABEL_28;
  if (a3 >= 0xFFFFFFEA)
  {
    if (a2 < 1)
    {
      v8 = 0.0;
    }
    else
    {
      v6 = 0;
      v7 = 0;
      do
      {
        v7 = *(char *)(a1 + v6) + 10 * v7 - 48;
        if (v6 + 1 >= a2)
          break;
        ++v6;
      }
      while (v7 < 0x1999999999999999);
      v8 = (double)v7;
    }
    *a4 = v8 / WTF::double_conversion::exact_powers_of_ten[-a3];
    return 1;
  }
  if (a3 <= 0x16)
  {
    if (a2 < 1)
    {
      v11 = 0.0;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v10 = *(char *)(a1 + v9) + 10 * v10 - 48;
        if (v9 + 1 >= a2)
          break;
        ++v9;
      }
      while (v10 < 0x1999999999999999);
      v11 = (double)v10;
    }
    *a4 = v11 * WTF::double_conversion::exact_powers_of_ten[a3];
    return 1;
  }
  if ((a3 & 0x80000000) != 0 || (v12 = 15 - a2, (int)(a3 - v12) > 22))
  {
    if (a2 < 1)
    {
      LODWORD(v16) = 0;
      v17 = 0;
      goto LABEL_37;
    }
LABEL_28:
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = *(char *)(a1 + v16++);
      v17 = v18 + 10 * v17 - 48;
    }
    while (v16 < a2 && v17 < 0x1999999999999999);
    if ((_DWORD)v16 == a2)
    {
      v19 = 0;
      v20 = v17 >> 54;
      if (v17 >> 54)
      {
LABEL_33:
        LODWORD(v20) = 0;
        goto LABEL_42;
      }
LABEL_40:
      v21 = v17;
      do
      {
        v17 = v21 << 10;
        LODWORD(v20) = v20 - 10;
        v22 = v21 >> 44;
        v21 <<= 10;
      }
      while (!v22);
LABEL_42:
      while ((v17 & 0x8000000000000000) == 0)
      {
        v17 *= 2;
        LODWORD(v20) = v20 - 1;
      }
      if ((int)a3 <= -349)
      {
LABEL_45:
        *a4 = 0.0;
        return 1;
      }
      v23 = v19 << -(char)v20;
      v24 = (char *)&WTF::double_conversion::kCachedPowers + 16 * ((a3 + 348) >> 3);
      v25 = *(_QWORD *)v24;
      v26 = *((__int16 *)v24 + 4);
      v27 = a3 - *((__int16 *)v24 + 5);
      if (v27)
      {
        v28 = v27 - 1;
        if ((v27 - 1) >= 7)
          abort();
        v17 = qword_1991233F8[v28] * HIDWORD(v17)
            + ((qword_1991233F8[v28] * (unint64_t)v17) >> 32)
            + ((((qword_1991233F8[v28] * v17) & 0x80000000uLL) + 0x80000000) >> 32);
        LODWORD(v20) = dword_1991233D8[v28] + v20;
        if (19 - a2 < v27)
          v23 += 4;
      }
      v29 = ((HIDWORD(v17) * (unint64_t)v25) >> 32)
          + HIDWORD(v17) * (unint64_t)HIDWORD(v25)
          + ((v17 * (unint64_t)HIDWORD(v25)) >> 32)
          + ((((v17 * (unint64_t)v25) >> 32)
            + (HIDWORD(v17) * v25)
            + (v17 * HIDWORD(v25))
            + 0x80000000) >> 32);
      v30 = v26 + v20 + 64;
      if (v23)
        v31 = 9;
      else
        v31 = 8;
      if (v29 >> 54)
      {
        v32 = v30;
        v33 = v29;
      }
      else
      {
        v32 = v30;
        do
        {
          v33 = v29 << 10;
          v32 -= 10;
          v34 = v29 >> 44;
          v29 <<= 10;
        }
        while (!v34);
      }
      for (i = v31 + v23; (v33 & 0x8000000000000000) == 0; --v32)
        v33 *= 2;
      v36 = i << (v30 - v32);
      v37 = v32 + 1138;
      if (v32 < -1137)
        v37 = 0;
      if (v32 > -1086)
        v37 = 53;
      v38 = 64 - v37;
      v39 = v33 >> (4 - v37);
      v40 = (v36 >> (4 - v37)) + 9;
      v41 = v37 <= 3;
      if (v37 <= 3)
        v42 = 4 - v37 + v32;
      else
        v42 = v32;
      if (v41)
        v38 = 60;
      else
        v39 = v33;
      if (v41)
        v43 = v40;
      else
        v43 = v36;
      v44 = 8 * (v39 & ~(-1 << v38));
      v45 = 8 << (v38 - 1);
      v46 = v39 >> v38;
      v47 = v38 + v42;
      if (v44 < v45 + v43)
        v48 = v46;
      else
        v48 = v46 + 1;
      if (v48 >> 53)
      {
        do
        {
          v49 = v48 >> 1;
          ++v47;
          v50 = v48 >> 54;
          v48 >>= 1;
        }
        while (v50);
        if (v47 > 971)
          goto LABEL_79;
      }
      else
      {
        v49 = v48;
        if (v47 > 971)
        {
LABEL_79:
          v51 = 0x7FF0000000000000;
          goto LABEL_92;
        }
      }
      v52 = 0.0;
      if (v47 < -1074)
      {
LABEL_93:
        *a4 = v52;
        v60 = v45 - v43 >= v44 || v44 >= v45 + v43;
        return v52 == INFINITY || v60;
      }
      v53 = (v49 & 0x10000000000000) == 0;
      if (v47 != -1074 && (v49 & 0x10000000000000) == 0)
      {
        do
        {
          v54 = v47;
          v56 = v49 & 0x8000000000000;
          v55 = (v49 & 0x8000000000000) == 0;
          v49 *= 2;
          --v47;
          v53 = v55;
        }
        while (v54 >= -1072 && !v56);
      }
      v57 = v47 == -1074;
      v58 = (unint64_t)(v47 + 1075) << 52;
      if (v57 && v53)
        v58 = 0;
      v51 = v58 & 0xFFF0000000000000 | v49 & 0xFFFFFFFFFFFFFLL;
LABEL_92:
      v52 = *(double *)&v51;
      goto LABEL_93;
    }
LABEL_37:
    if (*(char *)(a1 + (int)v16) > 52)
      ++v17;
    a3 = v4 - v16;
    v19 = 4;
    v20 = v17 >> 54;
    if (v17 >> 54)
      goto LABEL_33;
    goto LABEL_40;
  }
  if (a2 < 1)
  {
    v15 = 0.0;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v14 = *(char *)(a1 + v13) + 10 * v14 - 48;
      if (v13 + 1 >= a2)
        break;
      ++v13;
    }
    while (v14 < 0x1999999999999999);
    v15 = (double)v14;
  }
  *a4 = v15
      * WTF::double_conversion::exact_powers_of_ten[v12]
      * WTF::double_conversion::exact_powers_of_ten[(int)(a3 - v12)];
  return 1;
}

uint64_t WTF::double_conversion::CompareBufferWithDiyFp(uint64_t a1, int a2, int a3, unint64_t a4, int a5)
{
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  char v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  BOOL v29;
  BOOL v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  _OWORD v34[32];
  _DWORD *v35;
  int v36;
  uint64_t v37;
  _OWORD v38[32];
  _OWORD *v39;
  int v40;
  uint64_t v41;

  v39 = v38;
  v40 = 128;
  v41 = 0;
  memset(v38, 0, sizeof(v38));
  v35 = v34;
  v36 = 128;
  v37 = 0;
  memset(v34, 0, sizeof(v34));
  WTF::double_conversion::Bignum::AssignDecimalString((WTF::double_conversion::Bignum *)v38, a1, a2);
  if ((int)v37 >= 1)
  {
    v8 = 0;
    v9 = v35;
    do
      v9[v8++] = 0;
    while (v8 < (int)v37);
  }
  v37 = 0;
  if (a4)
  {
    v10 = v35;
    *v35 = a4 & 0xFFFFFFF;
    v10[1] = (a4 >> 28) & 0xFFFFFFF;
    v10[2] = HIBYTE(a4);
    LODWORD(v37) = 3;
    if (!v10[2])
    {
      LODWORD(v37) = 2;
      if (!v10[1])
      {
        LODWORD(v37) = 1;
        if (!*v10)
          v37 = 0;
      }
    }
  }
  if (a3 < 0)
  {
    LODWORD(result) = WTF::double_conversion::Bignum::MultiplyByPowerOfTen((uint64_t)v34, -a3);
    if (a5 >= 1)
    {
LABEL_11:
      if (!(_DWORD)v37)
        goto LABEL_25;
      HIDWORD(v37) += a5 / 0x1Cu;
      if ((int)v37 < 128)
      {
        if ((int)v37 < 1)
          goto LABEL_25;
        v12 = 0;
        v13 = 0;
        v14 = &v37;
        v15 = a5 % 0x1Cu;
        v16 = v35;
        do
        {
          v17 = v16[v12];
          v18 = (v17 << v15) + v13;
          v13 = v17 >> (28 - v15);
          v16[v12++] = v18 & 0xFFFFFFF;
          v19 = (int)v37;
        }
        while (v12 < (int)v37);
        goto LABEL_23;
      }
LABEL_50:
      abort();
    }
  }
  else
  {
    LODWORD(result) = WTF::double_conversion::Bignum::MultiplyByPowerOfTen((uint64_t)v38, a3);
    if (a5 >= 1)
      goto LABEL_11;
  }
  if (!(_DWORD)v41)
    goto LABEL_25;
  HIDWORD(v41) += -a5 / 0x1Cu;
  if ((int)v41 >= 128)
    goto LABEL_50;
  if ((int)v41 < 1)
    goto LABEL_25;
  v20 = 0;
  v13 = 0;
  v14 = &v41;
  v21 = -a5 % 0x1Cu;
  v16 = v39;
  do
  {
    v22 = v16[v20];
    v23 = (v22 << v21) + v13;
    v13 = v22 >> (28 - v21);
    v16[v20++] = v23 & 0xFFFFFFF;
    v19 = (int)v41;
  }
  while (v20 < (int)v41);
LABEL_23:
  if (v13)
  {
    v16[v19] = v13;
    ++*(_DWORD *)v14;
  }
LABEL_25:
  v24 = SHIDWORD(v41) + (uint64_t)(int)v41;
  v25 = SHIDWORD(v37) + (uint64_t)(int)v37;
  if ((int)v24 < (int)v25)
    return 0xFFFFFFFFLL;
  if ((int)v24 > (int)v25)
    return 1;
  if (SHIDWORD(v41) >= SHIDWORD(v37))
    v26 = HIDWORD(v37);
  else
    v26 = HIDWORD(v41);
  v27 = SHIDWORD(v41) + (uint64_t)(int)v41;
  v28 = (unsigned int *)v39 + (int)v41 - 1;
  while (v27 > v26)
  {
    v32 = 0;
    if (v27 > SHIDWORD(v41) && v27 <= v24)
      v32 = *v28;
    v33 = 0;
    if (v27 > SHIDWORD(v37) && v27 <= v25)
      v33 = v35[v27 - 1 - SHIDWORD(v37)];
    --v28;
    --v27;
    v29 = v32 >= v33;
    v30 = v32 == v33;
    if (v32 > v33)
      v31 = 1;
    else
      v31 = result;
    if (v29)
      result = v31;
    else
      result = 0xFFFFFFFFLL;
    if (!v30)
      return result;
  }
  return 0;
}

uint64_t WTF::double_conversion::Strtof(_OWORD *a1, int a2, int a3)
{
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t result;
  float v40;
  uint64_t v41;
  double v42;
  double v43;
  float v44;
  float v45;
  uint64_t v46;
  double v47;
  int v48;
  int v49;
  double v50;
  _OWORD v51[48];
  uint64_t v52;
  char v53;
  uint64_t v54;

  v3 = a1;
  v54 = *MEMORY[0x1E0C80C00];
  if (a2 < 1)
  {
LABEL_5:
    v5 = 0;
  }
  else
  {
    v4 = 0;
    while (*((_BYTE *)a1 + v4) == 48)
    {
      if (a2 == ++v4)
        goto LABEL_5;
    }
    v3 = (_OWORD *)((char *)a1 + v4);
    v5 = (a2 - v4);
  }
  v6 = 0;
  v7 = (char *)v3 - 1;
  v8 = -1;
  v9 = 779;
  do
  {
    if ((int)v5 + v6 <= 0)
    {
      v12 = 0;
      v11 = v5 + a3;
      goto LABEL_14;
    }
    v10 = v7[v5];
    ++v8;
    --v7;
    ++v9;
    --v6;
  }
  while (v10 == 48);
  v11 = v8 + a3;
  v12 = v5 - v8;
  if ((v5 - v8) <= 0x30C)
  {
LABEL_14:
    v14 = v12;
    goto LABEL_18;
  }
  if ((unint64_t)((char *)v51 - (char *)v3) >= 0x20)
  {
    v15 = v3[1];
    v51[0] = *v3;
    v51[1] = v15;
    v16 = v3[3];
    v51[2] = v3[2];
    v51[3] = v16;
    v17 = v3[5];
    v51[4] = v3[4];
    v51[5] = v17;
    v18 = v3[7];
    v51[6] = v3[6];
    v51[7] = v18;
    v19 = v3[9];
    v51[8] = v3[8];
    v51[9] = v19;
    v20 = v3[11];
    v51[10] = v3[10];
    v51[11] = v20;
    v21 = v3[13];
    v51[12] = v3[12];
    v51[13] = v21;
    v22 = v3[15];
    v51[14] = v3[14];
    v51[15] = v22;
    v23 = v3[17];
    v51[16] = v3[16];
    v51[17] = v23;
    v24 = v3[19];
    v51[18] = v3[18];
    v51[19] = v24;
    v25 = v3[21];
    v51[20] = v3[20];
    v51[21] = v25;
    v26 = v3[23];
    v51[22] = v3[22];
    v51[23] = v26;
    v27 = v3[25];
    v51[24] = v3[24];
    v51[25] = v27;
    v28 = v3[27];
    v51[26] = v3[26];
    v51[27] = v28;
    v29 = v3[29];
    v51[28] = v3[28];
    v51[29] = v29;
    v30 = v3[31];
    v51[30] = v3[30];
    v51[31] = v30;
    v31 = v3[33];
    v51[32] = v3[32];
    v51[33] = v31;
    v32 = v3[35];
    v51[34] = v3[34];
    v51[35] = v32;
    v33 = v3[37];
    v51[36] = v3[36];
    v51[37] = v33;
    v34 = v3[39];
    v51[38] = v3[38];
    v51[39] = v34;
    v35 = v3[41];
    v51[40] = v3[40];
    v51[41] = v35;
    v36 = v3[43];
    v51[42] = v3[42];
    v51[43] = v36;
    v37 = v3[45];
    v51[44] = v3[44];
    v51[45] = v37;
    v38 = v3[47];
    v51[46] = v3[46];
    v51[47] = v38;
    v13 = 776;
    v52 = *((_QWORD *)v3 + 96);
  }
  else
  {
    v13 = 0;
  }
  do
  {
    *((_BYTE *)v51 + v13) = *((_BYTE *)v3 + v13);
    ++v13;
  }
  while (v13 != 779);
  v53 = 49;
  v11 += v5 - v9;
  v3 = v51;
  v14 = 780;
LABEL_18:
  v50 = 0.0;
  result = WTF::double_conversion::ComputeGuess((uint64_t)v3, v14, v11, &v50);
  if (v50 >= 3.40282347e38)
  {
    if (v50 >= 3.40282357e38)
    {
      if (v50 != INFINITY)
        goto LABEL_25;
      return result;
    }
    if (v50 == 3.4028e38)
      return result;
LABEL_25:
    if (v50 == INFINITY)
    {
      v41 = -1;
      v42 = INFINITY;
    }
    else if ((*(_QWORD *)&v50 & 0x8000000000000000) != 0)
    {
      if ((*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      {
        *(_QWORD *)&v42 = *(_QWORD *)&v50 - 1;
        if (v50 == -INFINITY)
        {
          v43 = -INFINITY;
          goto LABEL_37;
        }
      }
      else
      {
        v42 = 0.0;
      }
      v41 = 1;
    }
    else
    {
      *(_QWORD *)&v42 = *(_QWORD *)&v50 + 1;
      if (v50 == 0.0)
      {
        v43 = -0.0;
        goto LABEL_37;
      }
      v41 = -1;
    }
    *(_QWORD *)&v43 = v41 + *(_QWORD *)&v50;
    if (COERCE_DOUBLE(v41 + *(_QWORD *)&v50) >= 3.40282347e38)
    {
      if (v43 >= 3.40282357e38)
      {
        v44 = INFINITY;
        if (v42 >= 3.40282347e38)
          goto LABEL_44;
      }
      else
      {
        v44 = 3.4028e38;
        if (v42 >= 3.40282347e38)
          goto LABEL_44;
      }
LABEL_38:
      v45 = v42;
      if ((result & 1) != 0)
        goto LABEL_59;
      goto LABEL_48;
    }
LABEL_37:
    v44 = v43;
    if (v42 < 3.40282347e38)
      goto LABEL_38;
LABEL_44:
    if (v42 >= 3.40282357e38)
    {
      v45 = INFINITY;
      if ((result & 1) != 0)
        goto LABEL_59;
    }
    else
    {
      v45 = 3.4028e38;
      if ((result & 1) != 0)
        goto LABEL_59;
    }
LABEL_48:
    if (v42 == INFINITY)
    {
LABEL_49:
      v45 = INFINITY;
      goto LABEL_59;
    }
    if ((*(_QWORD *)&v42 & 0x8000000000000000) != 0)
    {
      if ((*(_QWORD *)&v42 & 0x7FFFFFFFFFFFFFFFLL) == 0)
      {
        v47 = 0.0;
        goto LABEL_58;
      }
      v46 = -1;
    }
    else
    {
      v46 = 1;
    }
    *(_QWORD *)&v47 = v46 + *(_QWORD *)&v42;
    if (v47 >= 3.40282347e38)
    {
      if (v47 >= 3.40282357e38)
        goto LABEL_49;
      v45 = 3.4028e38;
LABEL_59:
      if (v44 != v45)
      {
        if (v44 == 0.0)
        {
          return WTF::double_conversion::CompareBufferWithDiyFp((uint64_t)v3, v14, v11, 0x10000000000000uLL, -202);
        }
        else
        {
          if ((LODWORD(v44) & 0x7F800000) != 0)
            v48 = (2 * (LODWORD(v44) & 0x7FFFFF)) | 0x1000000;
          else
            v48 = 2 * (LODWORD(v44) & 0x7FFFFF);
          if ((LODWORD(v44) & 0x7F800000) != 0)
            v49 = (LODWORD(v44) >> 23) - 151;
          else
            v49 = -150;
          return WTF::double_conversion::CompareBufferWithDiyFp((uint64_t)v3, v14, v11, v48 | 1u, v49);
        }
      }
      return result;
    }
LABEL_58:
    v45 = v47;
    goto LABEL_59;
  }
  v40 = v50;
  if (v50 != v40)
    goto LABEL_25;
  return result;
}

void WTF::SuspendableWorkQueue::create(const char *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v10;

  v10 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)v10 = off_1E35726F8;
  *(_QWORD *)(v10 + 16) = 0;
  *(_DWORD *)(v10 + 24) = 0;
  WTF::WorkQueueBase::platformInitialize(v10, a1, a2, 0, a3);
  *(_QWORD *)v10 = off_1E3572290;
  *(_QWORD *)(v10 + 32) = &unk_1E35722E0;
  *(_WORD *)(v10 + 40) = 0;
  *(_BYTE *)(v10 + 42) = 0;
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  *(_BYTE *)(v10 + 72) = a4;
  *a5 = v10;
}

uint64_t WTF::SuspendableWorkQueue::SuspendableWorkQueue(uint64_t a1, const char *a2, uint64_t a3, int a4, char a5)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E35726F8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  WTF::WorkQueueBase::platformInitialize(a1, a2, a3, 0, a4);
  *(_QWORD *)a1 = off_1E3572290;
  *(_QWORD *)(a1 + 32) = &unk_1E35722E0;
  *(_WORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 42) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 72) = a5;
  return a1;
}

{
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E35726F8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  WTF::WorkQueueBase::platformInitialize(a1, a2, a3, 0, a4);
  *(_QWORD *)a1 = off_1E3572290;
  *(_QWORD *)(a1 + 32) = &unk_1E35722E0;
  *(_WORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 42) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 72) = a5;
  return a1;
}

const char *WTF::SuspendableWorkQueue::stateString(int a1)
{
  const char *v1;
  const char *v2;

  v1 = "WillSuspend";
  v2 = "Running";
  if (a1)
    v2 = 0;
  if (a1 != 1)
    v1 = v2;
  if (a1 == 2)
    return "Suspended";
  else
    return v1;
}

void WTF::SuspendableWorkQueue::suspend(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  unsigned __int8 *v11;
  NSObject *v13;
  int v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  NSObject *v24;
  _QWORD *v25;
  unsigned int *v26;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v8 = (uint64_t *)a3;
  v33 = *MEMORY[0x1E0C80C00];
  v11 = (unsigned __int8 *)(a1 + 40);
  if (__ldaxr((unsigned __int8 *)(a1 + 40)))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 40);
    goto LABEL_5;
  }
  if (__stxr(1u, v11))
    goto LABEL_4;
LABEL_5:
  if (*(_BYTE *)(a1 + 72))
  {
    v13 = qword_1ECF2C3E0;
    if (os_log_type_enabled((os_log_t)qword_1ECF2C3E0, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(unsigned __int8 *)(a1 + 42);
      if (v14 == 2)
      {
        v15 = "Suspended";
      }
      else if (v14 == 1)
      {
        v15 = "WillSuspend";
      }
      else if (*(_BYTE *)(a1 + 42))
      {
        v15 = 0;
      }
      else
      {
        v15 = "Running";
      }
      v29 = 134218242;
      v30 = a1;
      v31 = 2082;
      v32 = v15;
      _os_log_impl(&dword_197AA9000, v13, OS_LOG_TYPE_DEFAULT, "%p - SuspendableWorkQueue::suspend current state %{public}s", (uint8_t *)&v29, 0x16u);
    }
  }
  if (*(_BYTE *)(a1 + 42) == 2)
  {
    v16 = *v8;
    *v8 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  else
  {
    v17 = *a2;
    *a2 = 0;
    v18 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v17;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = (_QWORD *)(a1 + 56);
    v20 = *(unsigned int *)(a1 + 68);
    if ((_DWORD)v20 == *(_DWORD *)(a1 + 64))
    {
      v8 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)v8);
      v20 = *(unsigned int *)(a1 + 68);
      v21 = (_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v20);
    }
    else
    {
      v21 = (_QWORD *)(*v19 + 8 * v20);
    }
    v22 = *v8;
    *v8 = 0;
    *v21 = v22;
    *(_DWORD *)(a1 + 68) = v20 + 1;
    if (*(_BYTE *)(a1 + 42) != 1)
    {
      *(_BYTE *)(a1 + 42) = 1;
      v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v23 = off_1E3572320;
      v23[1] = a1;
      v24 = *(NSObject **)(a1 + 16);
      v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      v26 = (unsigned int *)(a1 + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
      *v25 = a1;
      v25[1] = v23;
    }
  }
  v28 = __ldxr(v11);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, v11))
LABEL_30:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, a3, a4, a5, a6, a7, a8);
}

void WTF::SuspendableWorkQueue::resume(WTF::SuspendableWorkQueue *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  NSObject *v11;
  int v12;
  const char *v13;
  unsigned __int8 v14;
  int v15;
  _QWORD v16[2];
  char v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v9 = (unsigned __int8 *)this + 40;
  if (__ldaxr((unsigned __int8 *)this + 40))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 40);
    goto LABEL_5;
  }
  if (__stxr(1u, v9))
    goto LABEL_4;
LABEL_5:
  if (*((_BYTE *)this + 72))
  {
    v11 = qword_1ECF2C3E0;
    if (os_log_type_enabled((os_log_t)qword_1ECF2C3E0, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *((unsigned __int8 *)this + 42);
      if (v12 == 2)
      {
        v13 = "Suspended";
      }
      else if (v12 == 1)
      {
        v13 = "WillSuspend";
      }
      else if (*((_BYTE *)this + 42))
      {
        v13 = 0;
      }
      else
      {
        v13 = "Running";
      }
      *(_DWORD *)buf = 134218242;
      *(_QWORD *)&buf[4] = this;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v13;
      _os_log_impl(&dword_197AA9000, v11, OS_LOG_TYPE_DEFAULT, "%p - SuspendableWorkQueue::resume current state %{public}s", buf, 0x16u);
    }
  }
  if (*((_BYTE *)this + 42))
  {
    if (*((_BYTE *)this + 42) == 2)
    {
      v14 = atomic_load((unsigned __int8 *)this + 41);
      if ((v14 & 1) != 0)
      {
        v17 = 0;
        v16[0] = (char *)this + 41;
        v16[1] = &v17;
        *(_QWORD *)buf = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = v16;
        WTF::ParkingLot::unparkOneImpl((uint64_t)this + 41, (unint64_t)buf, a3, a4, a5, a6, a7, a8);
      }
    }
    *((_BYTE *)this + 42) = 0;
  }
  v15 = __ldxr(v9);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, v9))
LABEL_24:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
}

void WTF::SuspendableWorkQueue::dispatch(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  NSObject *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;

  v2 = *a2;
  if (*a2)
  {
    *a2 = 0;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v4 = &off_1E3572348;
    v4[1] = a1;
    v4[2] = v2;
    v5 = *(NSObject **)(a1 + 16);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v7 = (unsigned int *)(a1 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    *v6 = a1;
    v6[1] = v4;
  }
  else
  {
    __break(0xC471u);
  }
}

void `non-virtual thunk to'WTF::SuspendableWorkQueue::dispatch(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  NSObject *v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;

  v2 = *a2;
  if (*a2)
  {
    v4 = a1 - 32;
    *a2 = 0;
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v5 = &off_1E3572348;
    v5[1] = v4;
    v5[2] = v2;
    v6 = *(NSObject **)(a1 - 16);
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v8 = (unsigned int *)(a1 - 24);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    *v7 = v4;
    v7[1] = v5;
  }
  else
  {
    __break(0xC471u);
  }
}

void WTF::SuspendableWorkQueue::dispatchAfter(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v3;
  _QWORD *v6;
  _QWORD *v7;
  double v8;
  double v9;
  int64_t v10;
  dispatch_time_t v11;
  NSObject *v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int v15;

  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v7 = v6;
    *v6 = &off_1E3572370;
    v6[1] = a1;
    v8 = a3 * 1000.0 * 1000.0 * 1000.0;
    v9 = -9.22337204e18;
    if (v8 > -9.22337204e18)
      v9 = a3 * 1000.0 * 1000.0 * 1000.0;
    v6[2] = v3;
    if (v8 >= 9.22337204e18)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = (uint64_t)v9;
    v11 = dispatch_time(0, v10);
    v12 = *(NSObject **)(a1 + 16);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v14 = (unsigned int *)(a1 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    *v13 = a1;
    v13[1] = v7;
  }
  else
  {
    __break(0xC471u);
  }
}

void WTF::SuspendableWorkQueue::dispatchSync(uint64_t a1, uint64_t *a2)
{
  _opaque_pthread_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v13;
  NSObject *v14;
  _QWORD *v15;
  uint64_t v16;

  v4 = pthread_self();
  if (!pthread_equal(v4, (pthread_t)WTF::s_webThreadPthread) && !pthread_main_np()
    || WebCoreWebThreadIsLockedOrDisabled && !WebCoreWebThreadIsLockedOrDisabled())
  {
    goto LABEL_15;
  }
  v11 = (unsigned __int8 *)(a1 + 40);
  if (__ldaxr((unsigned __int8 *)(a1 + 40)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_9;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 40);
LABEL_9:
  if (!*(_BYTE *)(a1 + 42))
  {
    v13 = __ldxr(v11);
    if (v13 == 1)
    {
      if (!__stlxr(0, v11))
        goto LABEL_15;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 40), 0, v5, v6, v7, v8, v9, v10);
LABEL_15:
    v14 = *(NSObject **)(a1 + 16);
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    v16 = *a2;
    *a2 = 0;
    *v15 = v16;
    dispatch_sync_f(v14, v15, (dispatch_function_t)WTF::dispatchWorkItem<WTF::Function<void ()(void)>>);
    return;
  }
  __break(0xC471u);
}

uint64_t WTF::SuspendableWorkQueue::invokeAllSuspensionCompletionHandlers(uint64_t this)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_DWORD *)(this + 68);
  if (v1)
  {
    v2 = *(_QWORD *)(this + 56);
    v3 = *(_DWORD *)(this + 64);
    *(_QWORD *)(this + 56) = 0;
    *(_QWORD *)(this + 64) = 0;
    v4 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v4 = &off_1E3572398;
    *(_QWORD *)(v4 + 8) = v2;
    *(_DWORD *)(v4 + 16) = v3;
    *(_DWORD *)(v4 + 20) = v1;
    v12 = v4;
    if (WTF::s_webRunLoop)
      v11 = WTF::s_webRunLoop;
    else
      v11 = WTF::s_mainRunLoop;
    WTF::RunLoop::dispatch(v11, &v12, v5, v6, v7, v8, v9, v10);
    this = v12;
    if (v12)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  return this;
}

void WTF::SuspendableWorkQueue::suspendIfNeeded(WTF::SuspendableWorkQueue *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  int v12;
  NSObject *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  int v27;
  NSObject *v28;
  _BYTE v30[24];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v9 = (unsigned __int8 *)this + 40;
  if (__ldaxr((unsigned __int8 *)this + 40))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 40);
LABEL_5:
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  v12 = *((unsigned __int8 *)this + 42);
  if (v12 == 1)
  {
    if (*((_BYTE *)this + 72))
    {
      v13 = qword_1ECF2C3E0;
      if (os_log_type_enabled((os_log_t)qword_1ECF2C3E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v30 = 134217984;
        *(_QWORD *)&v30[4] = this;
        _os_log_impl(&dword_197AA9000, v13, OS_LOG_TYPE_DEFAULT, "%p - SuspendableWorkQueue::suspendIfNeeded set state to Suspended, will begin suspension", v30, 0xCu);
      }
    }
    *((_BYTE *)this + 42) = 2;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    v14 = *((_DWORD *)this + 17);
    if (v14)
    {
      v15 = *((_QWORD *)this + 7);
      v16 = *((_DWORD *)this + 16);
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
      v17 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v17 = &off_1E3572398;
      *(_QWORD *)(v17 + 8) = v15;
      *(_DWORD *)(v17 + 16) = v16;
      *(_DWORD *)(v17 + 20) = v14;
      *(_QWORD *)v30 = v17;
      v24 = WTF::s_webRunLoop ? WTF::s_webRunLoop : WTF::s_mainRunLoop;
      WTF::RunLoop::dispatch(v24, (uint64_t *)v30, v18, v19, v20, v21, v22, v23);
      if (*(_QWORD *)v30)
        (*(void (**)(_QWORD))(**(_QWORD **)v30 + 8))(*(_QWORD *)v30);
    }
    while (*((_BYTE *)this + 42) == 2)
    {
      *(_QWORD *)v30 = 0x7FF0000000000000;
      *(_DWORD *)&v30[8] = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)this + 41, v9, (WTF::TimeWithDynamicClockType *)v30);
    }
    if (*((_BYTE *)this + 72))
    {
      v25 = qword_1ECF2C3E0;
      if (os_log_type_enabled((os_log_t)qword_1ECF2C3E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v30 = 134217984;
        *(_QWORD *)&v30[4] = this;
        _os_log_impl(&dword_197AA9000, v25, OS_LOG_TYPE_DEFAULT, "%p - SuspendableWorkQueue::suspendIfNeeded end suspension", v30, 0xCu);
      }
    }
  }
  else if (v12 == 2 && *((_BYTE *)this + 72) != 0)
  {
    v28 = qword_1ECF2C3E0;
    if (os_log_type_enabled((os_log_t)qword_1ECF2C3E0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v30 = 134217984;
      *(_QWORD *)&v30[4] = this;
      _os_log_error_impl(&dword_197AA9000, v28, OS_LOG_TYPE_ERROR, "%p - SuspendableWorkQueue::suspendIfNeeded current state Suspended", v30, 0xCu);
    }
  }
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v27 = __ldxr(v9);
  if (v27 == 1)
  {
    if (!__stlxr(0, v9))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
}

void WTF::SuspendableWorkQueue::~SuspendableWorkQueue(WTF::SuspendableWorkQueue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;

  v9 = *((unsigned int *)this + 17);
  if ((_DWORD)v9)
  {
    v10 = (uint64_t *)*((_QWORD *)this + 7);
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v13 = *((_QWORD *)this + 7);
  if (v13)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *(_QWORD *)this = off_1E35726F8;
  v15 = (void *)*((_QWORD *)this + 2);
  if (v15)
    os_release(v15);
}

{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;

  v9 = *((unsigned int *)this + 17);
  if ((_DWORD)v9)
  {
    v10 = (uint64_t *)*((_QWORD *)this + 7);
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v13 = *((_QWORD *)this + 7);
  if (v13)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *(_QWORD *)this = off_1E35726F8;
  v15 = (void *)*((_QWORD *)this + 2);
  if (v15)
    os_release(v15);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void `non-virtual thunk to'WTF::SuspendableWorkQueue::~SuspendableWorkQueue(WTF::SuspendableWorkQueue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;

  v9 = *((unsigned int *)this + 9);
  if ((_DWORD)v9)
  {
    v10 = (uint64_t *)*((_QWORD *)this + 3);
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v13 = *((_QWORD *)this + 3);
  if (v13)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *((_QWORD *)this - 4) = off_1E35726F8;
  v15 = (void *)*((_QWORD *)this - 2);
  if (v15)
    os_release(v15);
}

{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;

  v9 = *((unsigned int *)this + 9);
  if ((_DWORD)v9)
  {
    v10 = (uint64_t *)*((_QWORD *)this + 3);
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v13 = *((_QWORD *)this + 3);
  if (v13)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *((_QWORD *)this - 4) = off_1E35726F8;
  v15 = (char *)this - 32;
  v16 = (void *)*((_QWORD *)v15 + 2);
  if (v16)
    os_release(v16);
  WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if (v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v41 = *(_QWORD *)a1;
        return v41 + 8 * ((uint64_t)(v3 - v5) >> 3);
      }
      if (!(v10 >> 29))
      {
        v18 = WTF::fastMalloc((WTF *)(8 * v10));
        v19 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v18;
        v20 = 8 * v6;
        do
        {
          v21 = *(_QWORD *)(v5 + v19);
          *(_QWORD *)(v5 + v19) = 0;
          *(_QWORD *)(v18 + v19) = v21;
          v22 = *(_QWORD *)(v5 + v19);
          *(_QWORD *)(v5 + v19) = 0;
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v19 += 8;
        }
        while (v20 != v19);
        v41 = *(_QWORD *)a1;
        if (v5)
        {
          if (v41 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v11, v12, v13, v14, v15, v16, v17);
          v41 = *(_QWORD *)a1;
        }
        return v41 + 8 * ((uint64_t)(v3 - v5) >> 3);
      }
LABEL_39:
      __break(0xC471u);
      JUMPOUT(0x197B1ABE4);
    }
  }
  v23 = *(unsigned int *)(a1 + 8);
  v24 = v23 + (v23 >> 2);
  if (v24 >= 0x10)
    v25 = v24 + 1;
  else
    v25 = 16;
  if (v25 <= a2)
    v26 = a2;
  else
    v26 = v25;
  if (v26 > v23)
  {
    if (v26 >> 29)
      goto LABEL_39;
    v27 = *(unsigned int *)(a1 + 12);
    v28 = WTF::fastMalloc((WTF *)(8 * v26));
    *(_DWORD *)(a1 + 8) = v26;
    *(_QWORD *)a1 = v28;
    if ((_DWORD)v27)
    {
      v36 = (_QWORD *)v28;
      v37 = 8 * v27;
      v38 = (uint64_t *)v5;
      do
      {
        v39 = *v38;
        *v38 = 0;
        *v36 = v39;
        v40 = *v38;
        *v38 = 0;
        if (v40)
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
        ++v36;
        ++v38;
        v37 -= 8;
      }
      while (v37);
    }
    if (v5)
    {
      if (*(_QWORD *)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v29, v30, v31, v32, v33, v34, v35);
    }
  }
  return v3;
}

void WTF::Detail::CallableWrapper<WTF::SuspendableWorkQueue::suspend(WTF::Function<void ()(void)> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::SuspendableWorkQueue::suspendIfNeeded(*(WTF::SuspendableWorkQueue **)(a1 + 8), a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::SuspendableWorkQueue::dispatch(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3572348;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void WTF::Detail::CallableWrapper<WTF::SuspendableWorkQueue::dispatch(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  *(_QWORD *)this = &off_1E3572348;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::Detail::CallableWrapper<WTF::SuspendableWorkQueue::dispatch(WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::SuspendableWorkQueue::suspendIfNeeded(*(WTF::SuspendableWorkQueue **)(a1 + 8), a2, a3, a4, a5, a6, a7, a8);
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::SuspendableWorkQueue::dispatchAfter(WTF::Seconds,WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3572370;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void WTF::Detail::CallableWrapper<WTF::SuspendableWorkQueue::dispatchAfter(WTF::Seconds,WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  *(_QWORD *)this = &off_1E3572370;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::Detail::CallableWrapper<WTF::SuspendableWorkQueue::dispatchAfter(WTF::Seconds,WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::SuspendableWorkQueue::suspendIfNeeded(*(WTF::SuspendableWorkQueue **)(a1 + 8), a2, a3, a4, a5, a6, a7, a8);
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t WTF::Detail::CallableWrapper<WTF::SuspendableWorkQueue::invokeAllSuspensionCompletionHandlers(void)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  *(_QWORD *)a1 = &off_1E3572398;
  v9 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v9)
  {
    v10 = *(uint64_t **)(a1 + 8);
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::Detail::CallableWrapper<WTF::SuspendableWorkQueue::invokeAllSuspensionCompletionHandlers(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  *(_QWORD *)this = &off_1E3572398;
  v9 = *((unsigned int *)this + 5);
  if ((_DWORD)v9)
  {
    v10 = (uint64_t *)*((_QWORD *)this + 1);
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v13 = *((_QWORD *)this + 1);
  if (v13)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::Detail::CallableWrapper<WTF::SuspendableWorkQueue::invokeAllSuspensionCompletionHandlers(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 20);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)(result + 8);
    v3 = 8 * v1;
    do
    {
      v4 = *v2;
      if (*v2)
      {
        *v2 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      }
      ++v2;
      v3 -= 8;
    }
    while (v3);
  }
  return result;
}

uint64_t WTF::SymbolImpl::nextHashForSymbol(WTF::SymbolImpl *this)
{
  uint64_t result;

  result = (WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol + 256) | 0x80000000;
  WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol = (WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol
                                                                 + 256) | 0x80000000;
  return result;
}

uint64_t WTF::SymbolImpl::create@<X0>(WTF::SymbolImpl *this@<X0>, _QWORD *a2@<X8>)
{
  int v5;
  WTF::SymbolImpl *v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  unsigned int v11;

  v5 = *((_DWORD *)this + 4);
  v6 = this;
  if ((v5 & 3) == 2)
    v6 = (WTF::SymbolImpl *)*((_QWORD *)this + 3);
  v7 = v5 & 4;
  result = WTF::fastCompactMalloc((WTF *)0x30);
  v9 = *((_QWORD *)this + 1);
  v10 = *((_DWORD *)this + 1);
  *(_DWORD *)v6 += 2;
  *(_DWORD *)result = 2;
  *(_DWORD *)(result + 4) = v10;
  *(_QWORD *)(result + 8) = v9;
  *(_DWORD *)(result + 16) = v7 | 0x22;
  *(_QWORD *)(result + 24) = v6;
  v11 = (WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol + 256) | 0x80000000;
  *(_QWORD *)(result + 32) = v11;
  WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol = v11;
  *a2 = result;
  return result;
}

uint64_t WTF::SymbolImpl::createNullSymbol@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v4;
  int v5;

  result = WTF::fastCompactMalloc((WTF *)0x30);
  v4 = off_1ECF2C428;
  v5 = dword_1ECF2C424;
  *(_DWORD *)result = 2;
  *(_DWORD *)(result + 4) = v5;
  *(_QWORD *)(result + 8) = v4;
  *(_DWORD *)(result + 16) = 38;
  *(_QWORD *)(result + 24) = &WTF::StringImpl::s_emptyAtomString;
  WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol = (WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol
                                                                 + 256) | 0x80000000;
  *(_DWORD *)(result + 32) = WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol;
  *(_DWORD *)(result + 36) = 1;
  *a1 = result;
  return result;
}

uint64_t WTF::PrivateSymbolImpl::create@<X0>(WTF::PrivateSymbolImpl *this@<X0>, _QWORD *a2@<X8>)
{
  int v5;
  WTF::PrivateSymbolImpl *v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  unsigned int v11;

  v5 = *((_DWORD *)this + 4);
  v6 = this;
  if ((v5 & 3) == 2)
    v6 = (WTF::PrivateSymbolImpl *)*((_QWORD *)this + 3);
  v7 = v5 & 4;
  result = WTF::fastCompactMalloc((WTF *)0x30);
  v9 = *((_QWORD *)this + 1);
  v10 = *((_DWORD *)this + 1);
  *(_DWORD *)v6 += 2;
  *(_DWORD *)result = 2;
  *(_DWORD *)(result + 4) = v10;
  *(_QWORD *)(result + 8) = v9;
  *(_DWORD *)(result + 16) = v7 | 0x22;
  *(_QWORD *)(result + 24) = v6;
  v11 = (WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol + 256) | 0x80000000;
  *(_DWORD *)(result + 32) = v11;
  *(_DWORD *)(result + 36) = 4;
  WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol = v11;
  *a2 = result;
  return result;
}

uint64_t WTF::SymbolRegistry::SymbolRegistry(uint64_t result, char a2)
{
  *(_QWORD *)result = 0;
  *(_BYTE *)(result + 8) = a2;
  return result;
}

{
  *(_QWORD *)result = 0;
  *(_BYTE *)(result + 8) = a2;
  return result;
}

void WTF::SymbolRegistry::~SymbolRegistry(WTF::StringImpl ***this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = *this;
  if (!*this)
  {
    v11 = 0;
    v10 = 0;
    goto LABEL_10;
  }
  v9 = *((unsigned int *)v8 - 1);
  v10 = &v8[v9];
  if (*((_DWORD *)v8 - 3))
  {
    v11 = *this;
    if ((_DWORD)v9)
    {
      v12 = 8 * v9;
      v11 = *this;
      while ((unint64_t)*v11 + 1 <= 1)
      {
        ++v11;
        v12 -= 8;
        if (!v12)
        {
          v11 = v10;
          if (v8)
            goto LABEL_11;
          goto LABEL_14;
        }
      }
    }
LABEL_10:
    if (v8)
      goto LABEL_11;
LABEL_14:
    v13 = 0;
    if (!v11)
      goto LABEL_23;
    goto LABEL_17;
  }
  v11 = &v8[v9];
  v10 = v11;
  if (!v8)
    goto LABEL_14;
LABEL_11:
  v13 = &v8[*((unsigned int *)v8 - 1)];
  if (v13 == v11)
    goto LABEL_23;
  do
  {
LABEL_17:
    v14 = v11 + 1;
    *((_QWORD *)*v11 + 5) = 0;
    v11 = v10;
    if (v14 != v10)
    {
      v11 = v14;
      while ((unint64_t)*v11 + 1 <= 1)
      {
        if (++v11 == v10)
        {
          v11 = v10;
          break;
        }
      }
    }
  }
  while (v11 != v13);
  v8 = *this;
LABEL_23:
  if (v8)
  {
    v15 = *((unsigned int *)v8 - 1);
    if ((_DWORD)v15)
    {
      v16 = v8;
      do
      {
        v17 = *v16;
        if (*v16 != (WTF::StringImpl *)-1)
        {
          *v16 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
            {
              WTF::StringImpl::~StringImpl(v17, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
            }
            else
            {
              *(_DWORD *)v17 -= 2;
            }
          }
        }
        ++v16;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree((unint64_t)(v8 - 2), a2, a3, a4, a5, a6, a7, a8);
  }
}

void WTF::SymbolRegistry::symbolForKey(WTF::SymbolRegistry *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, WTF::StringImpl **a9@<X8>)
{
  WTF::StringImpl *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  int v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl **v59;
  char v60;

  v12 = *a2;
  if (*a2)
    *(_DWORD *)v12 += 2;
  v58 = v12;
  WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::add((uint64_t *)this, (WTF::AtomStringImpl *)&v58, a3, a4, a5, a6, a7, a8, (uint64_t)&v59);
  v20 = v58;
  v58 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
      if (v60)
        goto LABEL_7;
LABEL_12:
      v33 = *v59;
      *(_DWORD *)*v59 += 2;
      goto LABEL_20;
    }
    *(_DWORD *)v20 -= 2;
  }
  if (!v60)
    goto LABEL_12;
LABEL_7:
  v21 = *a2;
  v22 = *((_DWORD *)*a2 + 4);
  v23 = v22 & 3;
  v24 = *a2;
  if (*((_BYTE *)this + 8) == 1)
  {
    if (v23 == 2)
      v24 = (WTF::StringImpl *)*((_QWORD *)v21 + 3);
    v25 = v22 & 4;
    v33 = (WTF::StringImpl *)WTF::fastCompactMalloc((WTF *)0x30);
    v34 = *((_QWORD *)v21 + 1);
    v35 = *((_DWORD *)v21 + 1);
    *(_DWORD *)v24 += 2;
    *(_DWORD *)v33 = 2;
    *((_DWORD *)v33 + 1) = v35;
    *((_QWORD *)v33 + 1) = v34;
    *((_DWORD *)v33 + 4) = v25 | 0x22;
    *((_QWORD *)v33 + 3) = v24;
    v36 = (WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol + 256) | 0x80000000;
    *((_DWORD *)v33 + 8) = v36;
    *((_DWORD *)v33 + 9) = 6;
  }
  else
  {
    if (v23 == 2)
      v24 = (WTF::StringImpl *)*((_QWORD *)v21 + 3);
    v45 = v22 & 4;
    v33 = (WTF::StringImpl *)WTF::fastCompactMalloc((WTF *)0x30);
    v46 = *((_QWORD *)v21 + 1);
    v47 = *((_DWORD *)v21 + 1);
    *(_DWORD *)v24 += 2;
    *(_DWORD *)v33 = 2;
    *((_DWORD *)v33 + 1) = v47;
    *((_QWORD *)v33 + 1) = v46;
    *((_DWORD *)v33 + 4) = v45 | 0x22;
    *((_QWORD *)v33 + 3) = v24;
    v36 = (WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol + 256) | 0x80000000;
    *((_DWORD *)v33 + 8) = v36;
    *((_DWORD *)v33 + 9) = 2;
  }
  *((_QWORD *)v33 + 5) = this;
  WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol = v36;
  v48 = v59;
  *(_DWORD *)v33 += 2;
  v49 = *v48;
  *v48 = v33;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v26, v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
LABEL_20:
  *a9 = v33;
}

void WTF::SymbolRegistry::remove(uint64_t *a1, WTF::StringImpl *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int i;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl **v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;

  v8 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v8 - 8);
    v12 = *((_DWORD *)this + 4);
    v13 = v12 < 0x100 ? WTF::StringImpl::hashSlowCase(this) : v12 >> 8;
    for (i = 0; ; v13 = i + v15)
    {
      v15 = v13 & v11;
      v16 = *(WTF::StringImpl **)(v8 + 8 * v15);
      if (v16 != (WTF::StringImpl *)-1)
      {
        if (!v16)
          return;
        if (v16 == this)
          break;
      }
      ++i;
    }
    v17 = (WTF::StringImpl **)(v8 + 8 * v15);
    v18 = (WTF::StringImpl **)*a1;
    if (!*a1 || (v18 += *((unsigned int *)v18 - 1), v18 != v17))
    {
      if (v18 != v17)
      {
        v19 = *v17;
        *v17 = (WTF::StringImpl *)-1;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
          {
            WTF::StringImpl::~StringImpl(v19);
            WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
            ++*(_DWORD *)(*a1 - 16);
            v20 = *a1;
            if (*a1)
            {
LABEL_19:
              --*(_DWORD *)(v20 - 12);
              v21 = *a1;
              if (!*a1)
                return;
LABEL_23:
              v30 = 6 * *(_DWORD *)(v21 - 12);
              v31 = *(_DWORD *)(v21 - 4);
              if (v30 < v31 && v31 >= 9)
                WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::rehash(a1, v31 >> 1, 0, a4, a5, a6, a7, a8);
              return;
            }
LABEL_22:
            *(_DWORD *)(v20 - 12) = -1;
            v21 = *a1;
            if (!*a1)
              return;
            goto LABEL_23;
          }
          *(_DWORD *)v19 -= 2;
        }
        ++*(_DWORD *)(*a1 - 16);
        v20 = *a1;
        if (*a1)
          goto LABEL_19;
        goto LABEL_22;
      }
    }
  }
}

void WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::add(uint64_t *a1@<X0>, WTF::AtomStringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  int i;
  unsigned int v19;
  WTF::StringImpl **v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v12 = *a1;
  if (!*a1)
  {
    WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::rehash(a1, 8uLL, 0, a4, a5, a6, a7, a8);
    v12 = *a1;
    if (!*a1)
    {
      v13 = 0;
      v14 = *(WTF::StringImpl **)a2;
      v15 = *(_DWORD *)(*(_QWORD *)a2 + 16);
      if (v15 >= 0x100)
        goto LABEL_4;
LABEL_6:
      v16 = WTF::StringImpl::hashSlowCase(v14);
      goto LABEL_7;
    }
  }
  v13 = *(_DWORD *)(v12 - 8);
  v14 = *(WTF::StringImpl **)a2;
  v15 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if (v15 < 0x100)
    goto LABEL_6;
LABEL_4:
  v16 = v15 >> 8;
LABEL_7:
  v17 = 0;
  for (i = 1; ; ++i)
  {
    v19 = v16 & v13;
    v20 = (WTF::StringImpl **)(v12 + 8 * (v16 & v13));
    v21 = *v20;
    if (*v20 == (WTF::StringImpl *)-1)
    {
      v17 = (WTF::StringImpl **)(v12 + 8 * v19);
      goto LABEL_9;
    }
    if (!v21)
    {
      if (v17)
      {
        *v17 = 0;
        --*(_DWORD *)(*a1 - 16);
        v20 = v17;
      }
      v24 = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = 0;
      v25 = *v20;
      *v20 = v24;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
        {
          WTF::StringImpl::~StringImpl(v25, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
          v26 = *a1;
          if (*a1)
          {
LABEL_21:
            ++*(_DWORD *)(v26 - 12);
            v27 = *a1;
            if (*a1)
              goto LABEL_22;
            goto LABEL_31;
          }
LABEL_30:
          *(_DWORD *)(v26 - 12) = 1;
          v27 = *a1;
          if (*a1)
          {
LABEL_22:
            v28 = (*(_DWORD *)(v27 - 16) + *(_DWORD *)(v27 - 12));
            v29 = *(unsigned int *)(v27 - 4);
            if (v29 <= 0x400)
              goto LABEL_23;
            goto LABEL_32;
          }
LABEL_31:
          v28 = *(unsigned int *)(v27 - 16);
          v29 = *(unsigned int *)(v27 - 4);
          if (v29 <= 0x400)
          {
LABEL_23:
            if (3 * v29 > 4 * v28)
            {
LABEL_35:
              v31 = v27 + 8 * v29;
              v30 = 1;
              goto LABEL_36;
            }
            if (!(_DWORD)v29)
            {
              v20 = WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::rehash(a1, 8uLL, (uint64_t)v20, a4, a5, a6, a7, a8);
              v27 = *a1;
              if (!*a1)
              {
LABEL_26:
                v29 = 0;
                goto LABEL_35;
              }
LABEL_34:
              v29 = *(unsigned int *)(v27 - 4);
              goto LABEL_35;
            }
LABEL_33:
            v20 = WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::rehash(a1, ((_DWORD)v29 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v29))), (uint64_t)v20, a4, a5, a6, a7, a8);
            v27 = *a1;
            if (!*a1)
              goto LABEL_26;
            goto LABEL_34;
          }
LABEL_32:
          if (v29 > 2 * v28)
            goto LABEL_35;
          goto LABEL_33;
        }
        *(_DWORD *)v25 -= 2;
      }
      v26 = *a1;
      if (*a1)
        goto LABEL_21;
      goto LABEL_30;
    }
    if (WTF::equal(v21, *(const WTF::StringImpl **)a2, a3))
      break;
LABEL_9:
    v16 = i + v19;
  }
  v22 = *a1;
  if (*a1)
    v23 = *(unsigned int *)(v22 - 4);
  else
    v23 = 0;
  v30 = 0;
  v31 = v22 + 8 * v23;
LABEL_36:
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v31;
  *(_BYTE *)(a9 + 16) = v30;
}

WTF::StringImpl **WTF::HashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl **result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = (WTF::StringImpl **)(v11 + 8 * v22);
      v25 = *v24;
      if (*v24 != (WTF::StringImpl *)-1)
      {
        if (v25)
        {
          v26 = *a1;
          if (*a1)
          {
            v27 = *(_DWORD *)(v26 - 8);
            v28 = *((_DWORD *)v25 + 4);
            if (v28 >= 0x100)
              goto LABEL_12;
LABEL_14:
            v29 = WTF::StringImpl::hashSlowCase(v25);
          }
          else
          {
            v27 = 0;
            v28 = *((_DWORD *)v25 + 4);
            if (v28 < 0x100)
              goto LABEL_14;
LABEL_12:
            v29 = v28 >> 8;
          }
          v30 = 0;
          do
          {
            v31 = v29 & v27;
            v29 = ++v30 + v31;
          }
          while (*(_QWORD *)(v26 + 8 * v31));
          v32 = (WTF::StringImpl **)(v26 + 8 * v31);
          *v32 = 0;
          v33 = *v24;
          *v24 = 0;
          *v32 = v33;
          v34 = *v24;
          *v24 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
            {
              WTF::StringImpl::~StringImpl(v34);
              WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
            }
            else
            {
              *(_DWORD *)v34 -= 2;
            }
          }
          if (v24 == (WTF::StringImpl **)a3)
            v23 = v32;
          goto LABEL_7;
        }
        *v24 = 0;
      }
LABEL_7:
      if (++v22 == v12)
        goto LABEL_25;
    }
  }
  v23 = 0;
  result = 0;
  if (v11)
  {
LABEL_25:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v23;
  }
  return result;
}

uint64_t WTFSignpostLogHandle()
{
  if (WTFSignpostLogHandle::once != -1)
    dispatch_once(&WTFSignpostLogHandle::once, &__block_literal_global_1);
  return WTFSignpostLogHandle::handle;
}

uint64_t WTFSignpostHandleIndirectLog(NSObject *a1, int a2, char *a3)
{
  uint64_t result;
  BOOL v8;
  int v9;
  os_signpost_id_t v10;
  os_signpost_id_t v11;
  uint64_t v12;
  char *v13;
  const char *v14;
  const char *v15;
  NSObject *v16;
  os_signpost_type_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (WTFSignpostLogHandle::once == -1)
  {
    result = 0;
    if (!a3)
      return result;
  }
  else
  {
    dispatch_once(&WTFSignpostLogHandle::once, &__block_literal_global_1);
    result = 0;
    if (!a3)
      return result;
  }
  if (WTFSignpostLogHandle::handle == a1)
  {
    v20 = 0;
    v21 = 0;
    v19 = 0;
    v18 = 0;
    v8 = sscanf(a3, "type=%d name=%d p=%lu ts=%llu %n", (char *)&v21 + 4, &v21, &v20, &v19, &v18) != 4
      || HIDWORD(v21) > 2
      || v21 > 7;
    v9 = v8;
    if (!v8)
    {
      v20 ^= a2;
      v10 = os_signpost_id_make_with_pointer(a1, (const void *)v20);
      v11 = v10;
      v12 = v19;
      v13 = &a3[v18];
      if (HIDWORD(v21))
      {
        if (HIDWORD(v21) == 2)
        {
          switch((int)v21)
          {
            case 0:
              if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
              {
                *(_DWORD *)buf = 67109634;
                v23 = a2;
                v24 = 2082;
                v25 = v13;
                v26 = 2048;
                v27 = v12;
                v14 = "DataTask";
                v15 = "pid: %d | %{public}s %{signpost.description:end_time}llu";
                goto LABEL_75;
              }
              break;
            case 1:
              if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
              {
                *(_DWORD *)buf = 67109634;
                v23 = a2;
                v24 = 2082;
                v25 = v13;
                v26 = 2048;
                v27 = v12;
                v14 = "NavigationAndPaintTiming";
                v15 = "pid: %d | %{public}s %{signpost.description:end_time}llu";
                goto LABEL_75;
              }
              break;
            case 2:
              if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
              {
                *(_DWORD *)buf = 67109634;
                v23 = a2;
                v24 = 2082;
                v25 = v13;
                v26 = 2048;
                v27 = v12;
                v14 = "ExecuteScriptElement";
                v15 = "pid: %d | %{public}s %{signpost.description:end_time}llu";
                goto LABEL_75;
              }
              break;
            case 3:
              if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
              {
                *(_DWORD *)buf = 67109634;
                v23 = a2;
                v24 = 2082;
                v25 = v13;
                v26 = 2048;
                v27 = v12;
                v14 = "RegisterImportMap";
                v15 = "pid: %d | %{public}s %{signpost.description:end_time}llu";
                goto LABEL_75;
              }
              break;
            case 4:
              if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
              {
                *(_DWORD *)buf = 67109634;
                v23 = a2;
                v24 = 2082;
                v25 = v13;
                v26 = 2048;
                v27 = v12;
                v14 = "JSCJITCompiler";
                v15 = "pid: %d | %{public}s %{signpost.description:end_time}llu";
                goto LABEL_75;
              }
              break;
            case 5:
              if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
              {
                *(_DWORD *)buf = 67109634;
                v23 = a2;
                v24 = 2082;
                v25 = v13;
                v26 = 2048;
                v27 = v12;
                v14 = "JSCJSGlobalObject";
                v15 = "pid: %d | %{public}s %{signpost.description:end_time}llu";
                goto LABEL_75;
              }
              break;
            case 6:
              if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
              {
                *(_DWORD *)buf = 67109634;
                v23 = a2;
                v24 = 2082;
                v25 = v13;
                v26 = 2048;
                v27 = v12;
                v14 = "IPCConnection";
                v15 = "pid: %d | %{public}s %{signpost.description:end_time}llu";
                goto LABEL_75;
              }
              break;
            case 7:
              if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
              {
                *(_DWORD *)buf = 67109634;
                v23 = a2;
                v24 = 2082;
                v25 = v13;
                v26 = 2048;
                v27 = v12;
                v14 = "StreamClientConnection";
                v15 = "pid: %d | %{public}s %{signpost.description:end_time}llu";
LABEL_75:
                v16 = a1;
                v17 = OS_SIGNPOST_INTERVAL_END;
                goto LABEL_98;
              }
              break;
            default:
              return v9 ^ 1u;
          }
        }
        else if (HIDWORD(v21) == 1)
        {
          switch((int)v21)
          {
            case 0:
              if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
              {
                *(_DWORD *)buf = 67109634;
                v23 = a2;
                v24 = 2082;
                v25 = v13;
                v26 = 2048;
                v27 = v12;
                v14 = "DataTask";
                v15 = "pid: %d | %{public}s %{signpost.description:begin_time}llu";
                goto LABEL_53;
              }
              break;
            case 1:
              if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
              {
                *(_DWORD *)buf = 67109634;
                v23 = a2;
                v24 = 2082;
                v25 = v13;
                v26 = 2048;
                v27 = v12;
                v14 = "NavigationAndPaintTiming";
                v15 = "pid: %d | %{public}s %{signpost.description:begin_time}llu";
                goto LABEL_53;
              }
              break;
            case 2:
              if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
              {
                *(_DWORD *)buf = 67109634;
                v23 = a2;
                v24 = 2082;
                v25 = v13;
                v26 = 2048;
                v27 = v12;
                v14 = "ExecuteScriptElement";
                v15 = "pid: %d | %{public}s %{signpost.description:begin_time}llu";
                goto LABEL_53;
              }
              break;
            case 3:
              if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
              {
                *(_DWORD *)buf = 67109634;
                v23 = a2;
                v24 = 2082;
                v25 = v13;
                v26 = 2048;
                v27 = v12;
                v14 = "RegisterImportMap";
                v15 = "pid: %d | %{public}s %{signpost.description:begin_time}llu";
                goto LABEL_53;
              }
              break;
            case 4:
              if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
              {
                *(_DWORD *)buf = 67109634;
                v23 = a2;
                v24 = 2082;
                v25 = v13;
                v26 = 2048;
                v27 = v12;
                v14 = "JSCJITCompiler";
                v15 = "pid: %d | %{public}s %{signpost.description:begin_time}llu";
                goto LABEL_53;
              }
              break;
            case 5:
              if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
              {
                *(_DWORD *)buf = 67109634;
                v23 = a2;
                v24 = 2082;
                v25 = v13;
                v26 = 2048;
                v27 = v12;
                v14 = "JSCJSGlobalObject";
                v15 = "pid: %d | %{public}s %{signpost.description:begin_time}llu";
                goto LABEL_53;
              }
              break;
            case 6:
              if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
              {
                *(_DWORD *)buf = 67109634;
                v23 = a2;
                v24 = 2082;
                v25 = v13;
                v26 = 2048;
                v27 = v12;
                v14 = "IPCConnection";
                v15 = "pid: %d | %{public}s %{signpost.description:begin_time}llu";
                goto LABEL_53;
              }
              break;
            case 7:
              if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
              {
                *(_DWORD *)buf = 67109634;
                v23 = a2;
                v24 = 2082;
                v25 = v13;
                v26 = 2048;
                v27 = v12;
                v14 = "StreamClientConnection";
                v15 = "pid: %d | %{public}s %{signpost.description:begin_time}llu";
LABEL_53:
                v16 = a1;
                v17 = OS_SIGNPOST_INTERVAL_BEGIN;
                goto LABEL_98;
              }
              break;
            default:
              return v9 ^ 1u;
          }
        }
      }
      else
      {
        switch((int)v21)
        {
          case 0:
            if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
            {
              *(_DWORD *)buf = 67109634;
              v23 = a2;
              v24 = 2082;
              v25 = v13;
              v26 = 2048;
              v27 = v12;
              v14 = "DataTask";
              v15 = "pid: %d | %{public}s %{signpost.description:event_time}llu";
              goto LABEL_97;
            }
            break;
          case 1:
            if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
            {
              *(_DWORD *)buf = 67109634;
              v23 = a2;
              v24 = 2082;
              v25 = v13;
              v26 = 2048;
              v27 = v12;
              v14 = "NavigationAndPaintTiming";
              v15 = "pid: %d | %{public}s %{signpost.description:event_time}llu";
              goto LABEL_97;
            }
            break;
          case 2:
            if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
            {
              *(_DWORD *)buf = 67109634;
              v23 = a2;
              v24 = 2082;
              v25 = v13;
              v26 = 2048;
              v27 = v12;
              v14 = "ExecuteScriptElement";
              v15 = "pid: %d | %{public}s %{signpost.description:event_time}llu";
              goto LABEL_97;
            }
            break;
          case 3:
            if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
            {
              *(_DWORD *)buf = 67109634;
              v23 = a2;
              v24 = 2082;
              v25 = v13;
              v26 = 2048;
              v27 = v12;
              v14 = "RegisterImportMap";
              v15 = "pid: %d | %{public}s %{signpost.description:event_time}llu";
              goto LABEL_97;
            }
            break;
          case 4:
            if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
            {
              *(_DWORD *)buf = 67109634;
              v23 = a2;
              v24 = 2082;
              v25 = v13;
              v26 = 2048;
              v27 = v12;
              v14 = "JSCJITCompiler";
              v15 = "pid: %d | %{public}s %{signpost.description:event_time}llu";
              goto LABEL_97;
            }
            break;
          case 5:
            if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
            {
              *(_DWORD *)buf = 67109634;
              v23 = a2;
              v24 = 2082;
              v25 = v13;
              v26 = 2048;
              v27 = v12;
              v14 = "JSCJSGlobalObject";
              v15 = "pid: %d | %{public}s %{signpost.description:event_time}llu";
              goto LABEL_97;
            }
            break;
          case 6:
            if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
            {
              *(_DWORD *)buf = 67109634;
              v23 = a2;
              v24 = 2082;
              v25 = v13;
              v26 = 2048;
              v27 = v12;
              v14 = "IPCConnection";
              v15 = "pid: %d | %{public}s %{signpost.description:event_time}llu";
              goto LABEL_97;
            }
            break;
          case 7:
            if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(a1))
            {
              *(_DWORD *)buf = 67109634;
              v23 = a2;
              v24 = 2082;
              v25 = v13;
              v26 = 2048;
              v27 = v12;
              v14 = "StreamClientConnection";
              v15 = "pid: %d | %{public}s %{signpost.description:event_time}llu";
LABEL_97:
              v16 = a1;
              v17 = OS_SIGNPOST_EVENT;
LABEL_98:
              _os_signpost_emit_with_name_impl(&dword_197AA9000, v16, v17, v11, v14, v15, buf, 0x1Cu);
            }
            break;
          default:
            return v9 ^ 1u;
        }
      }
    }
    return v9 ^ 1u;
  }
  return result;
}

uint64_t WTFCurrentContinuousTime(double a1)
{
  uint64_t v2;
  unint64_t v3;

  if (a1 == 0.0)
    return mach_continuous_time();
  if (machTimebaseInfo(void)::once != -1)
    dispatch_once(&machTimebaseInfo(void)::once, &__block_literal_global_5);
  v2 = mach_continuous_time();
  LODWORD(v3) = dword_1EE342B1C;
  return (unint64_t)((a1 + (double)(v2 * machTimebaseInfo(void)::info)
                                / ((double)v3
                                 * 1000000000.0))
                          * 1000000000.0
                          * (double)v3
                          / (double)machTimebaseInfo(void)::info);
}

uint64_t ___ZL16machTimebaseInfov_block_invoke()
{
  return mach_timebase_info((mach_timebase_info_t)&machTimebaseInfo(void)::info);
}

uint64_t *WTF::TextBreakIteratorCache::singleton(WTF::TextBreakIteratorCache *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WTF::TextBreakIteratorCache::singleton(void)::onceKey);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WTF::TextBreakIteratorCache::singleton(void)::onceKey, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::TextBreakIteratorCache::singleton(void)::$_0 &&>>);
  }
  return &WTF::TextBreakIteratorCache::singleton(void)::cache;
}

uint64_t WTF::wordBreakIterator(WTF *a1, uint64_t a2)
{
  WTF *v3;
  uint64_t result;
  uint64_t v6;

  v3 = a1;
  if ((_MergedGlobals_14 & 1) != 0)
  {
    result = qword_1ECF582B0;
    if (!qword_1ECF582B0)
      return result;
  }
  else
  {
    v6 = a2;
    WTF::currentTextBreakLocaleID(a1);
    result = ubrk_open();
    v3 = a1;
    a2 = v6;
    qword_1ECF582B0 = result;
    _MergedGlobals_14 = 1;
    if (!result)
      return result;
  }
  return WTF::setTextForIterator(result, v3, a2);
}

uint64_t WTF::setTextForIterator(uint64_t a1, const void *a2, uint64_t a3)
{
  int64_t v5;
  UText *v6;
  UText *v7;
  const UChar *pExtra;
  UErrorCode status;
  UText ut;
  uint64_t v12;

  if ((a3 & 0xFF00000000) == 0)
  {
    ut.magic = 0;
    ubrk_setText();
    return a1;
  }
  *(_OWORD *)&ut.magic = xmmword_199123440;
  memset(&ut.chunkNativeLimit, 0, 48);
  memset(&ut.context, 0, 72);
  ut.extraSize = 32;
  ut.pExtra = &v12;
  status = U_ZERO_ERROR;
  if (a2)
  {
    v5 = a3;
    if (!((unint64_t)a3 >> 31))
    {
      v6 = utext_setup(&ut, 32, &status);
      if (status < U_ILLEGAL_ARGUMENT_ERROR)
      {
        v7 = v6;
        v6->context = a2;
        v6->a = v5;
        pExtra = (const UChar *)v6->pExtra;
        v6->chunkContents = pExtra;
        v6->pFuncs = (const UTextFuncs *)&WTF::uTextLatin1Funcs;
        *(_OWORD *)pExtra = 0u;
        *((_OWORD *)pExtra + 1) = 0u;
        ubrk_setUText();
        utext_close(v7);
        return a1;
      }
    }
  }
  return 0;
}

uint64_t WTF::sentenceBreakIterator(WTF *a1, uint64_t a2)
{
  WTF *v3;
  uint64_t result;
  uint64_t v6;

  v3 = a1;
  if ((byte_1ECF582A9 & 1) != 0)
  {
    result = qword_1ECF582B8;
    if (!qword_1ECF582B8)
      return result;
  }
  else
  {
    v6 = a2;
    WTF::currentTextBreakLocaleID(a1);
    result = ubrk_open();
    v3 = a1;
    a2 = v6;
    qword_1ECF582B8 = result;
    byte_1ECF582A9 = 1;
    if (!result)
      return result;
  }
  return WTF::setTextForIterator(result, v3, a2);
}

_QWORD *WTF::NonSharedCharacterBreakIterator::NonSharedCharacterBreakIterator(_QWORD *a1, const void *a2, uint64_t a3)
{
  unint64_t v6;
  CFStringRef v8;
  CFStringRef theString;

  do
    v6 = __ldaxr(&WTF::nonSharedCharacterBreakIterator);
  while (__stxr(0, &WTF::nonSharedCharacterBreakIterator));
  if (!v6)
  {
    {
      WTF::textBreakLocale((WTF *)&theString);
      v8 = theString;
      if (theString)
      {
        if (!CFStringGetCString(theString, &WTF::currentTextBreakLocaleID(void)::buffer, 33, 0x600u))
          WTF::currentTextBreakLocaleID(void)::buffer = 0;
        CFRelease(v8);
      }
      else
      {
        WTF::currentTextBreakLocaleID(void)::buffer = 0;
      }
    }
    v6 = ubrk_open();
  }
  *a1 = v6;
  if (v6)
    *a1 = WTF::setTextForIterator(v6, a2, a3);
  return a1;
}

{
  unint64_t v6;
  CFStringRef v8;
  CFStringRef theString;

  do
    v6 = __ldaxr(&WTF::nonSharedCharacterBreakIterator);
  while (__stxr(0, &WTF::nonSharedCharacterBreakIterator));
  if (!v6)
  {
    {
      WTF::textBreakLocale((WTF *)&theString);
      v8 = theString;
      if (theString)
      {
        if (!CFStringGetCString(theString, &WTF::currentTextBreakLocaleID(void)::buffer, 33, 0x600u))
          WTF::currentTextBreakLocaleID(void)::buffer = 0;
        CFRelease(v8);
      }
      else
      {
        WTF::currentTextBreakLocaleID(void)::buffer = 0;
      }
    }
    v6 = ubrk_open();
  }
  *a1 = v6;
  if (v6)
    *a1 = WTF::setTextForIterator(v6, a2, a3);
  return a1;
}

void WTF::NonSharedCharacterBreakIterator::~NonSharedCharacterBreakIterator(WTF::NonSharedCharacterBreakIterator *this)
{
  unint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    do
      v2 = __ldxr(&WTF::nonSharedCharacterBreakIterator);
    while (__stlxr(v1, &WTF::nonSharedCharacterBreakIterator));
    if (v2)
      ubrk_close();
  }
}

{
  unint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    do
      v2 = __ldxr(&WTF::nonSharedCharacterBreakIterator);
    while (__stlxr(v1, &WTF::nonSharedCharacterBreakIterator));
    if (v2)
      ubrk_close();
  }
}

BOOL WTF::isWordTextBreak(WTF *this, UBreakIterator *a2)
{
  return ubrk_getRuleStatus() != 0;
}

uint64_t WTF::numGraphemeClusters(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  CFStringRef v13;
  CFStringRef theString;

  v2 = a2;
  if (!(_DWORD)a2)
    return v2;
  if ((a2 & 0xFF00000000) == 0)
  {
    do
      v8 = __ldaxr(&WTF::nonSharedCharacterBreakIterator);
    while (__stxr(0, &WTF::nonSharedCharacterBreakIterator));
    if (!v8)
    {
      {
        WTF::textBreakLocale((WTF *)&theString);
        v13 = theString;
        if (theString)
        {
          if (!CFStringGetCString(theString, &WTF::currentTextBreakLocaleID(void)::buffer, 33, 0x600u))
            WTF::currentTextBreakLocaleID(void)::buffer = 0;
          CFRelease(v13);
        }
        else
        {
          WTF::currentTextBreakLocaleID(void)::buffer = 0;
        }
      }
      v8 = ubrk_open();
    }
    if (v8)
    {
      v9 = WTF::setTextForIterator(v8, a1, v2);
      if (v9)
      {
        v10 = v9;
        LODWORD(v2) = -1;
        do
          v2 = (v2 + 1);
        while (ubrk_next() != -1);
        do
          v11 = __ldxr(&WTF::nonSharedCharacterBreakIterator);
        while (__stlxr(v10, &WTF::nonSharedCharacterBreakIterator));
        if (v11)
          ubrk_close();
      }
    }
    return v2;
  }
  if (a2 < 2)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a2 - 1;
    v6 = a1 + 1;
    do
    {
      while (*(v6 - 1) == 13)
      {
        v7 = *v6++;
        v4 += v7 == 10;
        if (!--v5)
          return (a2 - v4);
      }
      ++v6;
      --v5;
    }
    while (v5);
  }
  return (a2 - v4);
}

uint64_t WTF::numCodeUnitsInGraphemeClusters(const void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  CFStringRef v16;
  CFStringRef theString;

  v3 = a2;
  if (a2 <= a3)
    return v3;
  v4 = a3;
  if ((a2 & 0xFF00000000) == 0)
  {
    do
      v12 = __ldaxr(&WTF::nonSharedCharacterBreakIterator);
    while (__stxr(0, &WTF::nonSharedCharacterBreakIterator));
    if (!v12)
    {
      {
LABEL_31:
        WTF::textBreakLocale((WTF *)&theString);
        v16 = theString;
        if (theString)
        {
          if (!CFStringGetCString(theString, &WTF::currentTextBreakLocaleID(void)::buffer, 33, 0x600u))
            WTF::currentTextBreakLocaleID(void)::buffer = 0;
          CFRelease(v16);
        }
        else
        {
          WTF::currentTextBreakLocaleID(void)::buffer = 0;
        }
      }
      v12 = ubrk_open();
    }
    if (v12)
    {
      v13 = WTF::setTextForIterator(v12, a1, v3);
      if (v13)
      {
        v14 = v13;
        if (v4)
        {
          while (ubrk_next() != -1)
          {
            if (!--v4)
              goto LABEL_25;
          }
        }
        else
        {
LABEL_25:
          v3 = ubrk_current();
        }
        do
          v15 = __ldxr(&WTF::nonSharedCharacterBreakIterator);
        while (__stlxr(v14, &WTF::nonSharedCharacterBreakIterator));
        if (v15)
        {
          ubrk_close();
          return v3;
        }
      }
    }
    return v3;
  }
  if (a3)
  {
    v6 = 0;
    v7 = 1;
    v8 = 1;
    while (1)
    {
      if (a2 <= (unint64_t)v6)
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      v9 = v7;
      if (*((_BYTE *)a1 + v6) == 13)
      {
        if (a2 <= (unint64_t)v8)
          goto LABEL_30;
        v10 = v6 + (*((_BYTE *)a1 + v8) == 10);
        v6 = v10 + 1;
        if (v7 >= a3)
        {
LABEL_12:
          if (v9 >= a3)
            return v6;
          else
            return v6 + 1;
        }
      }
      else
      {
        v10 = v6++;
        if (v7 >= a3)
          goto LABEL_12;
      }
      v8 = v10 + 2;
      ++v7;
      if (v8 >= a2)
        goto LABEL_12;
    }
  }
  return 0;
}

double std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::TextBreakIteratorCache::singleton(void)::$_0 &&>>()
{
  double result;

  xmmword_1EE342BB8 = 0u;
  unk_1EE342BC8 = 0u;
  xmmword_1EE342B98 = 0u;
  unk_1EE342BA8 = 0u;
  xmmword_1EE342B78 = 0u;
  unk_1EE342B88 = 0u;
  xmmword_1EE342B58 = 0u;
  unk_1EE342B68 = 0u;
  xmmword_1EE342B48 = 0u;
  xmmword_1EE342B38 = 0u;
  WTF::TextBreakIteratorCache::singleton(void)::cache = (uint64_t)&xmmword_1EE342B38;
  *(_QWORD *)&result = 2;
  qword_1EE342B30 = 2;
  return result;
}

uint64_t WTF::TextBreakIterator::TextBreakIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, char a7, _DWORD **a8)
{
  _DWORD *v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _DWORD **v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD **v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD **v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD **v39;
  uint64_t *v40;

  v14 = a6;
  v15 = a2;
  v17 = BYTE4(a3);
  v16 = a3;
  v18 = a4;
  v19 = a5;
  v20 = a7;
  v21 = a8;
  v22 = a2;
  v24 = BYTE4(a3);
  v23 = a3;
  v25 = a4;
  v26 = a5;
  v27 = a8;
  v28 = a2;
  v30 = BYTE4(a3);
  v29 = a3;
  v31 = a4;
  v32 = a5;
  v33 = a8;
  v34 = a2;
  v36 = BYTE4(a3);
  v35 = a3;
  v37 = a4;
  v38 = a5;
  v39 = a8;
  if (HIDWORD(a6) == 0xFFFFFFFF)
  {
    v13 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::TextBreakIterator::TextBreakIterator(v13);
  }
  else
  {
    v40 = &v15;
    ((void (*)(uint64_t **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNS6_17TextBreakIterator24mapModeToBackingIteratorENS6_10StringViewENS_4spanIKDsLm18446744073709551615EEENS_7variantIJNS8_8LineModeENS8_9CaretModeENS8_10DeleteModeENS8_13CharacterModeEEEENS8_15ContentAnalysisERKNS6_10AtomStringEE3__0JZNS8_24mapModeToBackingIteratorES9_SC_SI_SJ_SM_E3__1ZNS8_24mapModeToBackingIteratorES9_SC_SI_SJ_SM_E3__2ZNS8_24mapModeToBackingIteratorES9_SC_SI_SJ_SM_E3__3EEEEEJRNS0_6__implIJSE_SF_SG_SH_EEEEEEDcOT_DpOT0____fmatrix[HIDWORD(a6)])(&v40, &v14);
    *(_QWORD *)(a1 + 56) = a6;
    *(_BYTE *)(a1 + 64) = 1;
    v11 = *a8;
    if (*a8)
      *v11 += 2;
    *(_QWORD *)(a1 + 72) = v11;
    return a1;
  }
}

{
  _DWORD *v11;
  WTF *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _DWORD **v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD **v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD **v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD **v39;
  uint64_t *v40;

  v14 = a6;
  v15 = a2;
  v17 = BYTE4(a3);
  v16 = a3;
  v18 = a4;
  v19 = a5;
  v20 = a7;
  v21 = a8;
  v22 = a2;
  v24 = BYTE4(a3);
  v23 = a3;
  v25 = a4;
  v26 = a5;
  v27 = a8;
  v28 = a2;
  v30 = BYTE4(a3);
  v29 = a3;
  v31 = a4;
  v32 = a5;
  v33 = a8;
  v34 = a2;
  v36 = BYTE4(a3);
  v35 = a3;
  v37 = a4;
  v38 = a5;
  v39 = a8;
  if (HIDWORD(a6) == 0xFFFFFFFF)
  {
    v13 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::currentSearchLocaleID(v13);
  }
  else
  {
    v40 = &v15;
    ((void (*)(uint64_t **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNS6_17TextBreakIterator24mapModeToBackingIteratorENS6_10StringViewENS_4spanIKDsLm18446744073709551615EEENS_7variantIJNS8_8LineModeENS8_9CaretModeENS8_10DeleteModeENS8_13CharacterModeEEEENS8_15ContentAnalysisERKNS6_10AtomStringEE3__0JZNS8_24mapModeToBackingIteratorES9_SC_SI_SJ_SM_E3__1ZNS8_24mapModeToBackingIteratorES9_SC_SI_SJ_SM_E3__2ZNS8_24mapModeToBackingIteratorES9_SC_SI_SJ_SM_E3__3EEEEEJRNS0_6__implIJSE_SF_SG_SH_EEEEEEDcOT_DpOT0____fmatrix[HIDWORD(a6)])(&v40, &v14);
    *(_QWORD *)(a1 + 56) = a6;
    *(_BYTE *)(a1 + 64) = 1;
    v11 = *a8;
    if (*a8)
      *v11 += 2;
    *(_QWORD *)(a1 + 72) = v11;
    return a1;
  }
}

char *WTF::currentSearchLocaleID(WTF *this)
{
  CFStringRef v2;
  CFStringRef theString;

  if ((_MergedGlobals_15 & 1) != 0)
    return &byte_1ECF582C1;
  WTF::topLanguagePreference((WTF *)&theString);
  v2 = theString;
  if (theString)
  {
    if (!CFStringGetCString(theString, &byte_1ECF582C1, 33, 0x600u))
      byte_1ECF582C1 = 0;
    CFRelease(v2);
  }
  else
  {
    byte_1ECF582C1 = 0;
  }
  _MergedGlobals_15 = 1;
  return &byte_1ECF582C1;
}

void WTF::topLanguagePreference(WTF *this)
{
  const __CFArray *v2;
  const __CFArray *v3;
  const void *ValueAtIndex;

  v2 = CFLocaleCopyPreferredLanguages();
  if (v2)
  {
    v3 = v2;
    if (CFArrayGetCount(v2))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v3, 0);
      *(_QWORD *)this = ValueAtIndex;
      if (ValueAtIndex)
        CFRetain(ValueAtIndex);
      CFRelease(v3);
    }
    else
    {
      *(_QWORD *)this = 0;
      CFRelease(v3);
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

char *WTF::currentTextBreakLocaleID(WTF *this)
{
  CFStringRef v2;
  CFStringRef theString;

    return &WTF::currentTextBreakLocaleID(void)::buffer;
  WTF::textBreakLocale((WTF *)&theString);
  v2 = theString;
  if (theString)
  {
    if (!CFStringGetCString(theString, &WTF::currentTextBreakLocaleID(void)::buffer, 33, 0x600u))
      WTF::currentTextBreakLocaleID(void)::buffer = 0;
    CFRelease(v2);
  }
  else
  {
    WTF::currentTextBreakLocaleID(void)::buffer = 0;
  }
  return &WTF::currentTextBreakLocaleID(void)::buffer;
}

void WTF::textBreakLocale(WTF *this)
{
  const __CFString *v2;
  const __CFString *v3;
  CFTypeID v4;
  CFLocaleIdentifier CanonicalLanguageIdentifierFromString;
  const __CFArray *v6;
  const void *ValueAtIndex;

  v2 = (const __CFString *)CFPreferencesCopyValue(CFSTR("AppleTextBreakLocale"), (CFStringRef)*MEMORY[0x1E0C9B228], (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (!v2)
    goto LABEL_7;
  v3 = v2;
  v4 = CFGetTypeID(v2);
  if (v4 != CFStringGetTypeID())
  {
    CFRelease(v3);
LABEL_7:
    v6 = CFLocaleCopyPreferredLanguages();
    if (!v6)
    {
      *(_QWORD *)this = 0;
      return;
    }
    v3 = (const __CFString *)v6;
    if (!CFArrayGetCount(v6))
    {
      *(_QWORD *)this = 0;
      CFRelease(v3);
      return;
    }
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v3, 0);
    *(_QWORD *)this = ValueAtIndex;
    if (ValueAtIndex)
    {
      CFRetain(ValueAtIndex);
      CFRelease(v3);
      return;
    }
    goto LABEL_4;
  }
  CanonicalLanguageIdentifierFromString = CFLocaleCreateCanonicalLanguageIdentifierFromString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3);
  *(_QWORD *)this = CanonicalLanguageIdentifierFromString;
  if (!CanonicalLanguageIdentifierFromString)
  {
    *(_QWORD *)this = v3;
    return;
  }
LABEL_4:
  CFRelease(v3);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::TextBreakIterator::mapModeToBackingIterator(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode>,WTF::TextBreakIterator::ContentAnalysis,WTF::AtomString const&)::$_0,WTF::TextBreakIterator::mapModeToBackingIterator(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode>,WTF::TextBreakIterator::ContentAnalysis,WTF::AtomString const&)::$_1,WTF::TextBreakIterator::mapModeToBackingIterator(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode>,WTF::TextBreakIterator::ContentAnalysis,WTF::AtomString const&)::$_2,WTF::TextBreakIterator::mapModeToBackingIterator(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode>,WTF::TextBreakIterator::ContentAnalysis,WTF::AtomString const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode> &>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, float a9@<S1>)
{
  uint64_t v10;
  uint64_t v11;
  const UInt8 *v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  const __CFAllocator *v16;
  const UInt8 *v17;
  unint64_t v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  _DWORD *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CFStringTokenizerRef v37;
  const __CFAllocator *v38;
  CFStringRef v39;
  uint64_t v40;
  uint64_t v41;
  UText *v42;
  UText *v43;
  const UTextFuncs *v44;
  int v45;
  UText *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  const __CFLocale *v56;
  CFLocaleIdentifier v57;
  const void *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  UErrorCode status[2];
  UText ut;
  uint64_t v63;
  CFRange v64;
  CFRange v65;

  v10 = *a1;
  if (!(*(unsigned __int8 *)(*a1 + 32) | *a2))
  {
    v12 = *(const UInt8 **)v10;
    v11 = *(_QWORD *)(v10 + 8);
    v13 = *(unsigned int *)(v10 + 24);
    v14 = *(WTF::StringImpl ***)(v10 + 40);
    v15 = v11;
    if (*(_DWORD *)(v10 + 24))
    {
      WTF::createContextualizedCFString((uint64_t)v12, v11, *(_QWORD *)(v10 + 16), v13, (WTFContextualizedNSString **)&ut);
      v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    }
    else
    {
      v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v38 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if ((v11 & 0xFF00000000) != 0)
        v39 = CFStringCreateWithBytesNoCopy(v38, v12, v11, 0x201u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
      else
        v39 = CFStringCreateWithCharactersNoCopy(v38, (const UniChar *)v12, v11, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
      *(_QWORD *)&ut.magic = v39;
    }
    WTF::String::createCFString(v14, (CFStringRef *)status);
    v56 = CFLocaleCreate(v16, *(CFLocaleIdentifier *)status);
    v57 = *(CFLocaleIdentifier *)status;
    *(_QWORD *)status = 0;
    if (v57)
      CFRelease(v57);
    v64.location = 0;
    v64.length = v13 + v15;
    v37 = CFStringTokenizerCreate(v16, *(CFStringRef *)&ut.magic, v64, 3uLL, v56);
    if (!v37)
    {
      v65.location = 0;
      v65.length = v13 + v15;
      v37 = CFStringTokenizerCreate(v16, *(CFStringRef *)&ut.magic, v65, 3uLL, 0);
    }
    if (v56)
      CFRelease(v56);
    v58 = *(const void **)&ut.magic;
    *(_QWORD *)&ut.magic = 0;
    if (v58)
      CFRelease(v58);
    *(_QWORD *)(a8 + 16) = v15;
    *(_QWORD *)(a8 + 24) = v13;
    v55 = 1;
    *(_DWORD *)(a8 + 40) = 1;
    goto LABEL_42;
  }
  v17 = *(const UInt8 **)v10;
  v18 = *(_QWORD *)(v10 + 8);
  v20 = *(const void **)(v10 + 16);
  v19 = *(_QWORD *)(v10 + 24);
  v21 = *(_QWORD *)(v10 + 40);
  v60 = *a2;
  *(_QWORD *)status = &ut;
  *(_QWORD *)&ut.magic = v21;
  *(_QWORD *)&ut.providerProperties = v21;
  std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::TextBreakIteratorICU::TextBreakIteratorICU(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIteratorICU::LineMode,WTF::TextBreakIteratorICU::CharacterMode>,WTF::AtomString const&)::{lambda(WTF::TextBreakIteratorICU::LineMode)#2},WTF::TextBreakIteratorICU::(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIteratorICU::LineMode,WTF::TextBreakIteratorICU::CharacterMode>,WTF::AtomString const&)::{lambda(WTF::TextBreakIteratorICU::CharacterMode)#2}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIteratorICU::LineMode,WTF::TextBreakIteratorICU::CharacterMode> &>((uint64_t ***)status, &v60, a3, a4, a5, a6, a7, &v59, a9);
  WTF::String::utf8((uint64_t *)&v59, 0, v22, v23, v24, v25, v26, &ut, v27);
  v28 = *(_DWORD **)&ut.magic;
  v29 = ubrk_open();
  v37 = (CFStringTokenizerRef)v29;
  if (v28)
  {
    if (*v28 == 1)
    {
      WTF::fastFree((unint64_t)v28, v30, v31, v32, v33, v34, v35, v36);
      if (v37)
        goto LABEL_15;
      goto LABEL_13;
    }
    --*v28;
  }
  if (v29)
    goto LABEL_15;
LABEL_13:
  v40 = ubrk_open();
  if (!v40)
  {
    __break(0xC471u);
    JUMPOUT(0x197B1D5F4);
  }
  v37 = (CFStringTokenizerRef)v40;
LABEL_15:
  *(_OWORD *)&ut.magic = xmmword_199123440;
  memset(&ut.chunkNativeLimit, 0, 48);
  memset(&ut.context, 0, 72);
  ut.extraSize = 32;
  ut.pExtra = &v63;
  v41 = (v18 >> 31) & 1;
  if (!v17)
    LOBYTE(v41) = 1;
  status[0] = U_ZERO_ERROR;
  if ((v18 & 0xFF00000000) != 0)
  {
    if ((v41 & 1) == 0)
    {
      v42 = utext_setup(&ut, 32, status);
      if (status[0] < U_ILLEGAL_ARGUMENT_ERROR)
      {
        v43 = v42;
        v44 = (const UTextFuncs *)&WTF::textLatin1ContextAwareFuncs;
LABEL_25:
        v43->pFuncs = v44;
        v43->providerProperties = 4;
        v43->context = v17;
        v43->p = v17;
        v43->a = v18;
        v43->q = v20;
        v43->b = v19;
        ubrk_setUText();
        utext_close(v43);
        v45 = v19;
        goto LABEL_26;
      }
    }
    goto LABEL_22;
  }
  if ((v41 & 1) != 0)
  {
LABEL_22:
    v45 = 0;
    goto LABEL_26;
  }
  v46 = utext_setup(&ut, 0, status);
  v45 = 0;
  if (status[0] <= U_ZERO_ERROR)
  {
    v43 = v46;
    v44 = (const UTextFuncs *)&WTF::textUTF16ContextAwareFuncs;
    goto LABEL_25;
  }
LABEL_26:
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, (WTF::AtomStringImpl *)v30, v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  v55 = 0;
  *(_DWORD *)(a8 + 16) = v45;
LABEL_42:
  *(_QWORD *)(a8 + 8) = v37;
  *(_DWORD *)(a8 + 48) = v55;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::TextBreakIterator::mapModeToBackingIterator(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode>,WTF::TextBreakIterator::ContentAnalysis,WTF::AtomString const&)::$_0,WTF::TextBreakIterator::mapModeToBackingIterator(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode>,WTF::TextBreakIterator::ContentAnalysis,WTF::AtomString const&)::$_1,WTF::TextBreakIterator::mapModeToBackingIterator(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode>,WTF::TextBreakIterator::ContentAnalysis,WTF::AtomString const&)::$_2,WTF::TextBreakIterator::mapModeToBackingIterator(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode>,WTF::TextBreakIterator::ContentAnalysis,WTF::AtomString const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode> &>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const UInt8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v3 = *(const UInt8 **)(*(_QWORD *)a1 + 48);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v6 = *(unsigned int *)(*(_QWORD *)a1 + 72);
  *((_QWORD *)&v10 + 1) = 0;
  v11 = 0;
  v9 = 0;
  WTF::TextBreakIteratorCFCharacterCluster::setText((uint64_t)&v9, v3, v4, v5, v6);
  *(_QWORD *)&v10 = 2;
  v7 = v9;
  *(_QWORD *)(a2 + 32) = v11;
  result = *(double *)&v10;
  *(_OWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 48) = 1;
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::TextBreakIterator::mapModeToBackingIterator(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode>,WTF::TextBreakIterator::ContentAnalysis,WTF::AtomString const&)::$_0,WTF::TextBreakIterator::mapModeToBackingIterator(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode>,WTF::TextBreakIterator::ContentAnalysis,WTF::AtomString const&)::$_1,WTF::TextBreakIterator::mapModeToBackingIterator(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode>,WTF::TextBreakIterator::ContentAnalysis,WTF::AtomString const&)::$_2,WTF::TextBreakIterator::mapModeToBackingIterator(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode>,WTF::TextBreakIterator::ContentAnalysis,WTF::AtomString const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode> &>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const UInt8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v3 = *(const UInt8 **)(*(_QWORD *)a1 + 88);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  v6 = *(unsigned int *)(*(_QWORD *)a1 + 112);
  *((_QWORD *)&v10 + 1) = 0;
  v11 = 0;
  v9 = 0;
  WTF::TextBreakIteratorCFCharacterCluster::setText((uint64_t)&v9, v3, v4, v5, v6);
  *(_QWORD *)&v10 = 4;
  v7 = v9;
  *(_QWORD *)(a2 + 32) = v11;
  result = *(double *)&v10;
  *(_OWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 48) = 1;
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::TextBreakIterator::mapModeToBackingIterator(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode>,WTF::TextBreakIterator::ContentAnalysis,WTF::AtomString const&)::$_0,WTF::TextBreakIterator::mapModeToBackingIterator(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode>,WTF::TextBreakIterator::ContentAnalysis,WTF::AtomString const&)::$_1,WTF::TextBreakIterator::mapModeToBackingIterator(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode>,WTF::TextBreakIterator::ContentAnalysis,WTF::AtomString const&)::$_2,WTF::TextBreakIterator::mapModeToBackingIterator(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode>,WTF::TextBreakIterator::ContentAnalysis,WTF::AtomString const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode> &>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const UInt8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v3 = *(const UInt8 **)(*(_QWORD *)a1 + 128);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 136);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 144);
  v6 = *(unsigned int *)(*(_QWORD *)a1 + 152);
  *((_QWORD *)&v10 + 1) = 0;
  v11 = 0;
  v9 = 0;
  WTF::TextBreakIteratorCFCharacterCluster::setText((uint64_t)&v9, v3, v4, v5, v6);
  *(_QWORD *)&v10 = 2;
  v7 = v9;
  *(_QWORD *)(a2 + 32) = v11;
  result = *(double *)&v10;
  *(_OWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 48) = 1;
  return result;
}

void WTF::TextBreakIteratorCFCharacterCluster::setText(uint64_t a1, const UInt8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  uint64_t v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef v10;
  uint64_t v11;
  const __CFAllocator *v12;
  CFStringRef v13;
  const void *v14;
  CFStringRef v15;
  CFTypeRef cf;

  v5 = a3;
  v7 = a5;
  if ((_DWORD)a5)
  {
    WTF::createContextualizedCFString((uint64_t)a2, a3, a4, a5, (WTFContextualizedNSString **)&cf);
    v8 = cf;
    cf = 0;
    v9 = *(const void **)a1;
    *(_QWORD *)a1 = v8;
    if (v9)
    {
      CFRelease(v9);
      v10 = cf;
      cf = 0;
      if (v10)
        CFRelease(v10);
    }
    v11 = v5;
    goto LABEL_6;
  }
  v11 = a3;
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if ((a3 & 0xFF00000000) != 0)
  {
    v13 = CFStringCreateWithBytesNoCopy(v12, a2, a3, 0x201u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    v14 = *(const void **)a1;
    *(_QWORD *)a1 = v13;
    if (!v14)
      goto LABEL_6;
  }
  else
  {
    v15 = CFStringCreateWithCharactersNoCopy(v12, (const UniChar *)a2, a3, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    v14 = *(const void **)a1;
    *(_QWORD *)a1 = v15;
    if (!v14)
    {
LABEL_6:
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 24) = v7;
      return;
    }
  }
  CFRelease(v14);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::TextBreakIteratorICU::TextBreakIteratorICU(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIteratorICU::LineMode,WTF::TextBreakIteratorICU::CharacterMode>,WTF::AtomString const&)::{lambda(WTF::TextBreakIteratorICU::LineMode)#2},WTF::TextBreakIteratorICU::(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIteratorICU::LineMode,WTF::TextBreakIteratorICU::CharacterMode>,WTF::AtomString const&)::{lambda(WTF::TextBreakIteratorICU::CharacterMode)#2}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIteratorICU::LineMode,WTF::TextBreakIteratorICU::CharacterMode> &>(uint64_t ***a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>, float a9@<S1>)
{
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  size_t v20;
  void *v21;
  _DWORD *v22;
  WTF *v23;
  _DWORD *v24;
  int v25;
  BOOL v26;
  WTF *v27;

  v10 = **a1;
  if (*a2)
  {
    WTF::String::utf8(**a1, 0, a3, a4, a5, a6, a7, &v27, a9);
    v18 = v27;
    if (v27 && (v19 = *((_QWORD *)v27 + 1)) != 0)
    {
      v20 = v19 + 11;
      if (v19 == -11)
      {
        v21 = 0;
        memcpy(0, (char *)v27 + 16, 0xFFFFFFFFFFFFFFF5);
      }
      else
      {
        if (HIDWORD(v20))
        {
          __break(0xC471u);
LABEL_30:
          __break(1u);
          __break(0xC471u);
          return;
        }
        v21 = (void *)WTF::fastMalloc((WTF *)v20);
        bzero(v21, v20);
        memcpy(v21, (char *)v18 + 16, *((_QWORD *)v18 + 1));
      }
      v25 = uloc_setKeywordValue();
      if (v25 != -1)
      {
        v26 = v20 >= v25;
        v20 = v25;
        if (!v26)
          goto LABEL_30;
      }
      if (!v21)
      {
        *a8 = 0;
        v23 = v27;
        if (!v27)
          return;
        goto LABEL_23;
      }
      if (v20)
      {
        WTF::AtomStringImpl::add((uint64_t)v21, v20, a8);
      }
      else
      {
        WTF::StringImpl::s_emptyAtomString += 2;
        *a8 = &WTF::StringImpl::s_emptyAtomString;
      }
      WTF::fastFree((unint64_t)v21, v11, v12, v13, v14, v15, v16, v17);
      v23 = v27;
      if (v27)
      {
LABEL_23:
        if (*(_DWORD *)v23 == 1)
          WTF::fastFree((unint64_t)v23, v11, v12, v13, v14, v15, v16, v17);
        else
          --*(_DWORD *)v23;
      }
    }
    else
    {
      v22 = (_DWORD *)*v10;
      if (*v10)
        *v22 += 2;
      *a8 = v22;
      v23 = v27;
      if (v27)
        goto LABEL_23;
    }
  }
  else
  {
    v24 = (_DWORD *)*v10;
    if (*v10)
      *v24 += 2;
    *a8 = v24;
  }
}

uint64_t WTF::TextStream::operator<<(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v9;
  const char *v11;
  int v12;

  v9 = "0";
  if (a2)
    v9 = "1";
  v11 = v9;
  v12 = 1;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(a1, (uint64_t)&v11, a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t WTF::TextStream::operator<<(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v10;
  char *v12;
  int v13;

  if (__s)
  {
    v10 = strlen(__s);
    v12 = __s;
    if (v10 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x197B1DBF4);
    }
  }
  else
  {
    LODWORD(v10) = 0;
    v12 = 0;
  }
  v13 = v10;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(a1, (uint64_t)&v12, a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t WTF::TextStream::operator<<(uint64_t result, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int8x16_t v13;

  v8 = result;
  v13.i8[0] = a2;
  v9 = *(_QWORD *)(result + 8);
  if (v9 && (v10 = *(unsigned int *)(result + 16), v10 < *(_DWORD *)(v9 + 4)) && !*(_QWORD *)result)
  {
    v11 = *(_DWORD *)(v9 + 16);
    v12 = *(_QWORD *)(v9 + 8);
    *(_DWORD *)(result + 16) = v10 + 1;
    if ((v11 & 4) != 0)
      *(_BYTE *)(v12 + v10) = a2;
    else
      *(_WORD *)(v12 + 2 * v10) = a2;
  }
  else
  {
    WTF::StringBuilder::append(result, &v13, 1uLL, a4, a5, a6, a7, a8);
    return v8;
  }
  return result;
}

uint64_t WTF::TextStream::operator<<(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;

  v10 = a2;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>>(a1, &v10, a3, a4, a5, a6, a7, a8);
  return a1;
}

{
  unsigned int v10;

  v10 = a2;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned int,void>>(a1, &v10, a3, a4, a5, a6, a7, a8);
  return a1;
}

WTF::StringBuilder *WTF::TextStream::operator<<(WTF::StringBuilder *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v10;
  int v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint16x8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint16x8_t *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint16x8_t *v42;
  unint64_t v43;
  uint8x8_t *v44;
  uint8x16_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  unint64_t v48;
  _BYTE *v49;
  uint16x8_t *v50;
  uint16x8_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint8x8_t *v54;
  uint8x16_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint16x8_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint8x8_t *v62;
  uint8x8_t v63;
  _BYTE v65[25];
  uint64_t v66;
  uint64_t v67;

  v8 = a2;
  v66 = *MEMORY[0x1E0C80C00];
  v10 = *((_DWORD *)this + 4);
  if ((a2 & 0x8000000000000000) != 0)
  {
    v14 = -(uint64_t)a2;
    v11 = 1;
    do
    {
      ++v11;
      v15 = v14 >= 0xA;
      v14 /= 0xAuLL;
    }
    while (v15);
  }
  else
  {
    v11 = 0;
    v12 = a2;
    do
    {
      ++v11;
      v13 = v12 > 9;
      v12 /= 0xAuLL;
    }
    while (v13);
  }
  v15 = __CFADD__(v10, v11);
  v16 = v10 + v11;
  if (v15)
    v17 = 0xFFFFFFFFLL;
  else
    v17 = v16;
  v18 = *((_QWORD *)this + 1);
  if (!v18 && (v18 = *(_QWORD *)this) == 0 || (*(_BYTE *)(v18 + 16) & 4) != 0)
  {
    v29 = (void *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)this, (WTF::AtomStringImpl *)v17, a3, a4, a5, a6, a7, a8);
    if (v29)
    {
      v30 = 0;
      if ((v8 & 0x8000000000000000) != 0)
      {
        v31 = -(uint64_t)v8;
        do
        {
          v65[v30-- + 24] = (v31 % 0xA) | 0x30;
          v13 = v31 > 9;
          v31 /= 0xAuLL;
        }
        while (v13);
        v32 = v30 + 24;
        v33 = &v65[v30 + 24];
        *v33 = 45;
        if (v30 + 26 <= 26)
        {
          if (v32 <= 24)
            v32 = 24;
          memcpy(v29, v33, v32 - v30 - 23);
        }
      }
      else
      {
        do
        {
          v65[v30-- + 24] = (v8 % 0xA) | 0x30;
          v13 = v8 > 9;
          v8 /= 0xAuLL;
        }
        while (v13);
        if (v30 + 26 <= 25)
          memcpy(v29, &v65[v30 + 25], -v30);
      }
    }
    return this;
  }
  v19 = (uint16x8_t *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(this, (WTF::AtomStringImpl *)v17, a3, a4, a5, a6, a7, a8);
  if (!v19)
    return this;
  if ((v8 & 0x8000000000000000) != 0)
  {
    v34 = 0;
    v35 = -(uint64_t)v8;
    do
    {
      v65[v34-- + 24] = (v35 % 0xA) | 0x30;
      v13 = v35 > 9;
      v35 /= 0xAuLL;
    }
    while (v13);
    v65[v34 + 24] = 45;
    if (v34 + 26 > 26)
      return this;
    v36 = v34 + 24;
    v37 = 24;
    if (v34 + 24 > 24)
      v37 = v34 + 24;
    v38 = v37 - v34 - 23;
    if (v38 >= 8)
    {
      v39 = -23 - v34;
      if (v38 >= 0x20)
      {
        v40 = v38 & 0xFFFFFFFFFFFFFFE0;
        v51 = v19 + 2;
        v52 = v34 + 24;
        if (v34 + 24 <= 24)
          v52 = 24;
        v53 = (v52 + v39) & 0xFFFFFFFFFFFFFFE0;
        v54 = (uint8x8_t *)((char *)&v67 + v34 + 7);
        do
        {
          v55 = *(uint8x16_t *)v54[-2].i8;
          v56 = vmovl_u8(*v54);
          v57 = vmovl_high_u8(*(uint8x16_t *)v54->i8);
          v51[-2] = vmovl_u8(*(uint8x8_t *)v55.i8);
          v51[-1] = vmovl_high_u8(v55);
          *v51 = v56;
          v51[1] = v57;
          v51 += 4;
          v54 += 4;
          v53 -= 32;
        }
        while (v53);
        if (v38 == v40)
          return this;
        if ((v38 & 0x18) == 0)
        {
          v19 = (uint16x8_t *)((char *)v19 + 2 * v40);
          v36 += v40;
          goto LABEL_65;
        }
      }
      else
      {
        v40 = 0;
      }
      v36 += v38 & 0xFFFFFFFFFFFFFFF8;
      v58 = (uint16x8_t *)((char *)v19 + 2 * v40);
      v59 = v34 + 24;
      v13 = v34 + 24 <= 24;
      v60 = 24;
      if (!v13)
        v60 = v59;
      v61 = v40 - ((v60 + v39) & 0xFFFFFFFFFFFFFFF8);
      v62 = (uint8x8_t *)&v65[v40 + v59];
      do
      {
        v63 = *v62++;
        *v58++ = vmovl_u8(v63);
        v61 += 8;
      }
      while (v61);
      v19 = (uint16x8_t *)((char *)v19 + 2 * (v38 & 0xFFFFFFFFFFFFFFF8));
      if (v38 == (v38 & 0xFFFFFFFFFFFFFFF8))
        return this;
    }
    do
    {
LABEL_65:
      v19->i16[0] = v65[v36];
      v19 = (uint16x8_t *)((char *)v19 + 2);
      v13 = v36++ < 24;
    }
    while (v13);
    return this;
  }
  v20 = 0;
  v21 = 25;
  v22 = 1;
  do
  {
    v23 = v21;
    v24 = v20;
    v25 = v22;
    v65[--v21] = (v8 % 0xA) | 0x30;
    ++v20;
    ++v22;
    v13 = v8 > 9;
    v8 /= 0xAuLL;
  }
  while (v13);
  if (v23 <= 25)
  {
    v26 = v24 + 1;
    if ((unint64_t)(v24 + 1) < 8)
    {
      v27 = v21;
      v28 = v19;
      goto LABEL_62;
    }
    if (v26 >= 0x20)
    {
      v41 = v26 & 0xFFFFFFFFFFFFFFE0;
      v42 = v19 + 2;
      v43 = v25 & 0xFFFFFFFFFFFFFFE0;
      v44 = (uint8x8_t *)&v65[-v24 + 40];
      do
      {
        v45 = *(uint8x16_t *)v44[-2].i8;
        v46 = vmovl_u8(*v44);
        v47 = vmovl_high_u8(*(uint8x16_t *)v44->i8);
        v42[-2] = vmovl_u8(*(uint8x8_t *)v45.i8);
        v42[-1] = vmovl_high_u8(v45);
        *v42 = v46;
        v42[1] = v47;
        v42 += 4;
        v44 += 4;
        v43 -= 32;
      }
      while (v43);
      if (v26 == v41)
        return this;
      if ((v26 & 0x18) == 0)
      {
        v28 = (uint16x8_t *)((char *)v19 + 2 * v41);
        v27 = v21 + v41;
        do
        {
LABEL_62:
          v28->i16[0] = v65[v27];
          v28 = (uint16x8_t *)((char *)v28 + 2);
          ++v27;
        }
        while (v27 != 25);
        return this;
      }
    }
    else
    {
      v41 = 0;
    }
    v27 = v21 + (v26 & 0xFFFFFFFFFFFFFFF8);
    v28 = (uint16x8_t *)((char *)v19 + 2 * (v26 & 0xFFFFFFFFFFFFFFF8));
    v48 = v41 - (v25 & 0xFFFFFFFFFFFFFFF8);
    v49 = &v65[v41];
    v50 = (uint16x8_t *)((char *)v19 + 2 * v41);
    do
    {
      *v50++ = vmovl_u8(*(uint8x8_t *)&v49[v21]);
      v49 += 8;
      v48 += 8;
    }
    while (v48);
    if (v26 != (v26 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_62;
  }
  return this;
}

{
  unint64_t v8;
  int v10;
  int v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint16x8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint16x8_t *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint16x8_t *v42;
  unint64_t v43;
  uint8x8_t *v44;
  uint8x16_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  unint64_t v48;
  _BYTE *v49;
  uint16x8_t *v50;
  uint16x8_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint8x8_t *v54;
  uint8x16_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint16x8_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint8x8_t *v62;
  uint8x8_t v63;
  _BYTE v65[25];
  uint64_t v66;
  uint64_t v67;

  v8 = a2;
  v66 = *MEMORY[0x1E0C80C00];
  v10 = *((_DWORD *)this + 4);
  if ((a2 & 0x8000000000000000) != 0)
  {
    v14 = -(uint64_t)a2;
    v11 = 1;
    do
    {
      ++v11;
      v15 = v14 >= 0xA;
      v14 /= 0xAuLL;
    }
    while (v15);
  }
  else
  {
    v11 = 0;
    v12 = a2;
    do
    {
      ++v11;
      v13 = v12 > 9;
      v12 /= 0xAuLL;
    }
    while (v13);
  }
  v15 = __CFADD__(v10, v11);
  v16 = v10 + v11;
  if (v15)
    v17 = 0xFFFFFFFFLL;
  else
    v17 = v16;
  v18 = *((_QWORD *)this + 1);
  if (!v18 && (v18 = *(_QWORD *)this) == 0 || (*(_BYTE *)(v18 + 16) & 4) != 0)
  {
    v29 = (void *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)this, (WTF::AtomStringImpl *)v17, a3, a4, a5, a6, a7, a8);
    if (v29)
    {
      v30 = 0;
      if ((v8 & 0x8000000000000000) != 0)
      {
        v31 = -(uint64_t)v8;
        do
        {
          v65[v30-- + 24] = (v31 % 0xA) | 0x30;
          v13 = v31 > 9;
          v31 /= 0xAuLL;
        }
        while (v13);
        v32 = v30 + 24;
        v33 = &v65[v30 + 24];
        *v33 = 45;
        if (v30 + 26 <= 26)
        {
          if (v32 <= 24)
            v32 = 24;
          memcpy(v29, v33, v32 - v30 - 23);
        }
      }
      else
      {
        do
        {
          v65[v30-- + 24] = (v8 % 0xA) | 0x30;
          v13 = v8 > 9;
          v8 /= 0xAuLL;
        }
        while (v13);
        if (v30 + 26 <= 25)
          memcpy(v29, &v65[v30 + 25], -v30);
      }
    }
    return this;
  }
  v19 = (uint16x8_t *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(this, (WTF::AtomStringImpl *)v17, a3, a4, a5, a6, a7, a8);
  if (!v19)
    return this;
  if ((v8 & 0x8000000000000000) != 0)
  {
    v34 = 0;
    v35 = -(uint64_t)v8;
    do
    {
      v65[v34-- + 24] = (v35 % 0xA) | 0x30;
      v13 = v35 > 9;
      v35 /= 0xAuLL;
    }
    while (v13);
    v65[v34 + 24] = 45;
    if (v34 + 26 > 26)
      return this;
    v36 = v34 + 24;
    v37 = 24;
    if (v34 + 24 > 24)
      v37 = v34 + 24;
    v38 = v37 - v34 - 23;
    if (v38 >= 8)
    {
      v39 = -23 - v34;
      if (v38 >= 0x20)
      {
        v40 = v38 & 0xFFFFFFFFFFFFFFE0;
        v51 = v19 + 2;
        v52 = v34 + 24;
        if (v34 + 24 <= 24)
          v52 = 24;
        v53 = (v52 + v39) & 0xFFFFFFFFFFFFFFE0;
        v54 = (uint8x8_t *)((char *)&v67 + v34 + 7);
        do
        {
          v55 = *(uint8x16_t *)v54[-2].i8;
          v56 = vmovl_u8(*v54);
          v57 = vmovl_high_u8(*(uint8x16_t *)v54->i8);
          v51[-2] = vmovl_u8(*(uint8x8_t *)v55.i8);
          v51[-1] = vmovl_high_u8(v55);
          *v51 = v56;
          v51[1] = v57;
          v51 += 4;
          v54 += 4;
          v53 -= 32;
        }
        while (v53);
        if (v38 == v40)
          return this;
        if ((v38 & 0x18) == 0)
        {
          v19 = (uint16x8_t *)((char *)v19 + 2 * v40);
          v36 += v40;
          goto LABEL_65;
        }
      }
      else
      {
        v40 = 0;
      }
      v36 += v38 & 0xFFFFFFFFFFFFFFF8;
      v58 = (uint16x8_t *)((char *)v19 + 2 * v40);
      v59 = v34 + 24;
      v13 = v34 + 24 <= 24;
      v60 = 24;
      if (!v13)
        v60 = v59;
      v61 = v40 - ((v60 + v39) & 0xFFFFFFFFFFFFFFF8);
      v62 = (uint8x8_t *)&v65[v40 + v59];
      do
      {
        v63 = *v62++;
        *v58++ = vmovl_u8(v63);
        v61 += 8;
      }
      while (v61);
      v19 = (uint16x8_t *)((char *)v19 + 2 * (v38 & 0xFFFFFFFFFFFFFFF8));
      if (v38 == (v38 & 0xFFFFFFFFFFFFFFF8))
        return this;
    }
    do
    {
LABEL_65:
      v19->i16[0] = v65[v36];
      v19 = (uint16x8_t *)((char *)v19 + 2);
      v13 = v36++ < 24;
    }
    while (v13);
    return this;
  }
  v20 = 0;
  v21 = 25;
  v22 = 1;
  do
  {
    v23 = v21;
    v24 = v20;
    v25 = v22;
    v65[--v21] = (v8 % 0xA) | 0x30;
    ++v20;
    ++v22;
    v13 = v8 > 9;
    v8 /= 0xAuLL;
  }
  while (v13);
  if (v23 <= 25)
  {
    v26 = v24 + 1;
    if ((unint64_t)(v24 + 1) < 8)
    {
      v27 = v21;
      v28 = v19;
      goto LABEL_62;
    }
    if (v26 >= 0x20)
    {
      v41 = v26 & 0xFFFFFFFFFFFFFFE0;
      v42 = v19 + 2;
      v43 = v25 & 0xFFFFFFFFFFFFFFE0;
      v44 = (uint8x8_t *)&v65[-v24 + 40];
      do
      {
        v45 = *(uint8x16_t *)v44[-2].i8;
        v46 = vmovl_u8(*v44);
        v47 = vmovl_high_u8(*(uint8x16_t *)v44->i8);
        v42[-2] = vmovl_u8(*(uint8x8_t *)v45.i8);
        v42[-1] = vmovl_high_u8(v45);
        *v42 = v46;
        v42[1] = v47;
        v42 += 4;
        v44 += 4;
        v43 -= 32;
      }
      while (v43);
      if (v26 == v41)
        return this;
      if ((v26 & 0x18) == 0)
      {
        v28 = (uint16x8_t *)((char *)v19 + 2 * v41);
        v27 = v21 + v41;
        do
        {
LABEL_62:
          v28->i16[0] = v65[v27];
          v28 = (uint16x8_t *)((char *)v28 + 2);
          ++v27;
        }
        while (v27 != 25);
        return this;
      }
    }
    else
    {
      v41 = 0;
    }
    v27 = v21 + (v26 & 0xFFFFFFFFFFFFFFF8);
    v28 = (uint16x8_t *)((char *)v19 + 2 * (v26 & 0xFFFFFFFFFFFFFFF8));
    v48 = v41 - (v25 & 0xFFFFFFFFFFFFFFF8);
    v49 = &v65[v41];
    v50 = (uint16x8_t *)((char *)v19 + 2 * v41);
    do
    {
      *v50++ = vmovl_u8(*(uint8x8_t *)&v49[v21]);
      v49 += 8;
      v48 += 8;
    }
    while (v48);
    if (v26 != (v26 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_62;
  }
  return this;
}

uint64_t WTF::TextStream::operator<<(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;

  v10 = a2;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned long,void>>(a1, &v10, a3, a4, a5, a6, a7, a8);
  return a1;
}

{
  unint64_t v10;

  v10 = a2;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned long,void>>(a1, &v10, a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t WTF::TextStream::operator<<(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  int v20;
  int v21;
  char __s[4];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    v11 = a2;
    if (vabdd_f64(a2, (double)(int)a2) <= 0.0001)
    {
      *(_DWORD *)__s = (int)a2;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>>(a1, (unsigned int *)__s, a4, a5, a6, a7, a8, a9);
      return a1;
    }
  }
  else
  {
    v11 = a2;
  }
  v19 = __s;
  v20 = 124;
  v21 = 0;
  WTF::double_conversion::DoubleToStringConverter::ToFixed((uint64_t)&WTF::double_conversion::DoubleToStringConverter::EcmaScriptConverter(void)::converter, 2, (uint64_t)&v19, v11);
  v19[v21] = 0;
  v23 = strlen(__s);
  v19 = __s;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::FormattedNumber,void>>(a1, (unint64_t *)&v19, v12, v13, v14, v15, v16, v17);
  return a1;
}

uint64_t WTF::TextStream::operator<<(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v17;
  int v18;
  int v19;
  char __s[4];
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v9 = *a2;
  if (vabdd_f64(*a2, (double)(int)*a2) <= 0.0001)
  {
    *(_DWORD *)__s = (int)*a2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>>(a1, (unsigned int *)__s, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v17 = __s;
    v18 = 124;
    v19 = 0;
    WTF::double_conversion::DoubleToStringConverter::ToFixed((uint64_t)&WTF::double_conversion::DoubleToStringConverter::EcmaScriptConverter(void)::converter, 2, (uint64_t)&v17, v9);
    v17[v19] = 0;
    v21 = strlen(__s);
    v17 = __s;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::FormattedNumber,void>>(a1, (unint64_t *)&v17, v10, v11, v12, v13, v14, v15);
  }
  return a1;
}

uint64_t WTF::TextStream::operator<<(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v17;
  int v18;
  int v19;
  char __s[4];
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 28) & 2) != 0 && vabdd_f64(a2, (double)(int)a2) <= 0.0001)
  {
    *(_DWORD *)__s = (int)a2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>>(a1, (unsigned int *)__s, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    v17 = __s;
    v18 = 124;
    v19 = 0;
    WTF::double_conversion::DoubleToStringConverter::ToFixed((uint64_t)&WTF::double_conversion::DoubleToStringConverter::EcmaScriptConverter(void)::converter, 2, (uint64_t)&v17, a2);
    v17[v19] = 0;
    v21 = strlen(__s);
    v17 = __s;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::FormattedNumber,void>>(a1, (unint64_t *)&v17, v10, v11, v12, v13, v14, v15);
  }
  return a1;
}

uint64_t WTF::TextStream::operator<<(uint64_t a1, const void *a2)
{
  size_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  int v12;
  char __str[100];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x63uLL, "%p", a2);
  v3 = strlen(__str);
  v11 = __str;
  if (v3 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x197B1EA14);
  }
  v12 = v3;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(a1, (uint64_t)&v11, v4, v5, v6, v7, v8, v9);
  return a1;
}

WTF::StringImpl **WTF::TextStream::operator<<(WTF::StringImpl **a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringBuilder::append(a1, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::StringBuilder::append(WTF::StringImpl **this, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v10;
  int8x16_t *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!*((_DWORD *)this + 4) && !this[1])
  {
    v13 = *a2;
    if (*a2)
      *(_DWORD *)v13 += 2;
    v14 = *this;
    *this = v13;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::~StringImpl(v14, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
        v15 = *a2;
        if (!*a2)
          goto LABEL_15;
        goto LABEL_14;
      }
      *(_DWORD *)v14 -= 2;
    }
    v15 = *a2;
    if (!*a2)
    {
LABEL_15:
      *((_DWORD *)this + 4) = (_DWORD)v15;
      return;
    }
LABEL_14:
    LODWORD(v15) = *((_DWORD *)v15 + 1);
    goto LABEL_15;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = (int8x16_t *)*((_QWORD *)v10 + 1);
    v12 = *((unsigned int *)v10 + 1);
    if ((*((_BYTE *)v10 + 16) & 4) == 0)
    {
      WTF::StringBuilder::append((uint64_t)this, v11, v12, a4, a5, a6, a7, a8);
      return;
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  WTF::StringBuilder::append((uint64_t)this, v11, v12, a4, a5, a6, a7, a8);
}

uint64_t WTF::TextStream::operator<<(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  int8x16_t *v11;
  unint64_t v12;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!*(_DWORD *)(a1 + 16) && !*(_QWORD *)(a1 + 8))
  {
    v14 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v14 += 2;
    v15 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = v14;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl(v15, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
        v16 = *(_DWORD **)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_15;
        goto LABEL_14;
      }
      *(_DWORD *)v15 -= 2;
    }
    v16 = *(_DWORD **)a2;
    if (!*(_QWORD *)a2)
    {
LABEL_15:
      *(_DWORD *)(a1 + 16) = (_DWORD)v16;
      return a1;
    }
LABEL_14:
    LODWORD(v16) = v16[1];
    goto LABEL_15;
  }
  v10 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
  {
    v11 = (int8x16_t *)*((_QWORD *)v10 + 1);
    v12 = v10[1];
    if ((v10[4] & 4) == 0)
    {
      WTF::StringBuilder::append(a1, v11, v12, a4, a5, a6, a7, a8);
      return a1;
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  WTF::StringBuilder::append(a1, v11, v12, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t WTF::TextStream::operator<<(uint64_t a1, int8x16_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v9;

  if (a3)
    v9 = a3 - 1;
  else
    v9 = 0;
  WTF::StringBuilder::append(a1, a2, v9, a4, a5, a6, a7, a8);
  return a1;
}

{
  if ((a3 & 0xFF00000000) != 0)
    WTF::StringBuilder::append(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    WTF::StringBuilder::append(a1, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t WTF::TextStream::operator<<(uint64_t result, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8;
  uint64_t v9;
  int *v10;
  _BYTE *v11;
  int v12;
  int v13;
  int8x16_t *v14;
  unint64_t v15;
  int v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  __int128 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v35 = *(_OWORD *)a2;
  v8 = *((unsigned int *)a2 + 4);
  v36 = v8;
  if ((v8 & 0x80000000) == 0)
  {
    v9 = result;
    if (!(_DWORD)v8)
    {
      v10 = &WTF::StringImpl::s_emptyAtomString;
      v12 = WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      v13 = v12 + 4;
      if (*(_DWORD *)(result + 16))
        goto LABEL_11;
      goto LABEL_10;
    }
    result = WTF::tryFastCompactMalloc((WTF *)(v8 + 20), &v34);
    v10 = v34;
    if (v34)
    {
      v11 = v34 + 5;
      *v34 = 2;
      v10[1] = v8;
      *((_QWORD *)v10 + 1) = v10 + 5;
      v10[4] = 4;
      a2 = (char *)&v36 - v8;
      if ((_DWORD)v8 == 1)
        *v11 = *a2;
      else
        memcpy(v11, a2, v8);
      v13 = 4;
      if (*(_DWORD *)(v9 + 16))
        goto LABEL_11;
LABEL_10:
      if (!*(_QWORD *)(v9 + 8))
      {
        *v10 = v13;
        v17 = *(WTF::StringImpl **)v9;
        *(_QWORD *)v9 = v10;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
          {
            WTF::StringImpl::~StringImpl(v17, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
            *(_DWORD *)(v9 + 16) = v10[1];
            v16 = *v10 - 2;
            if (*v10 == 2)
              goto LABEL_21;
            goto LABEL_15;
          }
          *(_DWORD *)v17 -= 2;
        }
        *(_DWORD *)(v9 + 16) = v10[1];
        v16 = *v10 - 2;
        if (*v10 != 2)
          goto LABEL_15;
LABEL_21:
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
        return v9;
      }
LABEL_11:
      v14 = (int8x16_t *)*((_QWORD *)v10 + 1);
      v15 = v10[1];
      if ((v10[4] & 4) == 0)
      {
        WTF::StringBuilder::append(v9, v14, v15, a4, a5, a6, a7, a8);
        v16 = *v10 - 2;
        if (*v10 == 2)
          goto LABEL_21;
LABEL_15:
        *v10 = v16;
        return v9;
      }
      WTF::StringBuilder::append(v9, v14, v15, a4, a5, a6, a7, a8);
      v16 = *v10 - 2;
      if (*v10 != 2)
        goto LABEL_15;
      goto LABEL_21;
    }
  }
  __break(0xC471u);
  return result;
}

void WTF::TextStream::release(WTF::StringImpl **this@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, WTF::StringImpl **a9@<X8>)
{
  WTF::StringImpl *v11;
  WTF::AtomStringImpl *v12;
  WTF::StringImpl *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v11 = *this;
  if (v11)
    goto LABEL_13;
  v12 = (WTF::AtomStringImpl *)*((unsigned int *)this + 4);
  if ((v12 & 0x80000000) == 0)
  {
    v13 = this[1];
    if (v13)
    {
      if (*((_DWORD *)v13 + 1) > v12 + (v12 >> 2))
      {
        if ((*((_BYTE *)v13 + 16) & 4) != 0)
          WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)this, v12, a3, a4, a5, a6, a7, a8);
        else
          WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)this, v12, a3, a4, a5, a6, a7, a8);
        v21 = *this;
        *this = this[1];
        this[1] = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
          {
            WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
            WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
          }
          else
          {
            *(_DWORD *)v21 -= 2;
          }
        }
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)this);
  v11 = *this;
  if (*this)
  {
LABEL_13:
    v30 = *(_DWORD *)v11;
    *(_DWORD *)v11 += 2;
    *a9 = v11;
    *this = 0;
    if (v30)
    {
      *(_DWORD *)v11 = v30;
      v31 = this[1];
      this[1] = 0;
      if (!v31)
        goto LABEL_19;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      v31 = this[1];
      this[1] = 0;
      if (!v31)
      {
LABEL_19:
        *((_DWORD *)this + 4) = 0;
        return;
      }
    }
  }
  else
  {
    *a9 = 0;
    v31 = this[1];
    *this = 0;
    this[1] = 0;
    if (!v31)
      goto LABEL_19;
  }
  if (*(_DWORD *)v31 != 2)
  {
    *(_DWORD *)v31 -= 2;
    goto LABEL_19;
  }
  WTF::StringImpl::~StringImpl(v31, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
  *((_DWORD *)this + 4) = 0;
}

char *WTF::TextStream::startGroup(WTF::TextStream *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char *result;
  const char *v17;
  int v18;

  if (*((_BYTE *)this + 29))
  {
    v17 = "\n";
    v18 = 1;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>((uint64_t)this, (uint64_t)&v17, a3, a4, a5, a6, a7, a8);
    if (*((_BYTE *)this + 29))
    {
      v15 = *((_DWORD *)this + 6);
      if (v15 >= 1)
      {
        do
        {
          v17 = "  ";
          v18 = 2;
          WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>((uint64_t)this, (uint64_t)&v17, v9, v10, v11, v12, v13, v14);
          --v15;
        }
        while (v15);
      }
    }
    v17 = "(";
    v18 = 1;
    result = WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>((uint64_t)this, (uint64_t)&v17, v9, v10, v11, v12, v13, v14);
    ++*((_DWORD *)this + 6);
  }
  else
  {
    v17 = " (";
    v18 = 2;
    return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>((uint64_t)this, (uint64_t)&v17, a3, a4, a5, a6, a7, a8);
  }
  return result;
}

char *WTF::TextStream::writeIndent(char *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  const char *v10;
  int v11;

  if (this[29])
  {
    v8 = (uint64_t)this;
    v9 = *((_DWORD *)this + 6);
    if (v9 >= 1)
    {
      do
      {
        v10 = "  ";
        v11 = 2;
        this = WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(v8, (uint64_t)&v10, a3, a4, a5, a6, a7, a8);
        --v9;
      }
      while (v9);
    }
  }
  return this;
}

char *WTF::TextStream::endGroup(WTF::TextStream *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *result;
  const char *v10;
  int v11;

  v10 = ")";
  v11 = 1;
  result = WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>((uint64_t)this, (uint64_t)&v10, a3, a4, a5, a6, a7, a8);
  if (*((_BYTE *)this + 29))
    --*((_DWORD *)this + 6);
  return result;
}

char *WTF::TextStream::nextLine(WTF::TextStream *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const char *v17;
  int v18;

  if (*((_BYTE *)this + 29))
  {
    v17 = "\n";
    v18 = 1;
    result = WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>((uint64_t)this, (uint64_t)&v17, a3, a4, a5, a6, a7, a8);
    if (*((_BYTE *)this + 29))
    {
      v16 = *((_DWORD *)this + 6);
      if (v16 >= 1)
      {
        do
        {
          v17 = "  ";
          v18 = 2;
          result = WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>((uint64_t)this, (uint64_t)&v17, v10, v11, v12, v13, v14, v15);
          --v16;
        }
        while (v16);
      }
    }
  }
  else
  {
    v17 = " ";
    v18 = 1;
    return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>((uint64_t)this, (uint64_t)&v17, a3, a4, a5, a6, a7, a8);
  }
  return result;
}

char *WTF::writeIndent(char *this, WTF::TextStream *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  const char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  if ((int)a2 >= 1)
  {
    v14 = v8;
    v15 = v9;
    v10 = (int)a2;
    v11 = (uint64_t)this;
    do
    {
      v12 = "  ";
      v13 = 2;
      this = WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(v11, (uint64_t)&v12, a3, a4, a5, a6, a7, a8);
      --v10;
    }
    while (v10);
  }
  return this;
}

uint16x8_t *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint16x8_t *result;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint16x8_t *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint16x8_t *v43;
  unint64_t v44;
  uint8x8_t *v45;
  uint8x16_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  unint64_t v49;
  _BYTE *v50;
  uint16x8_t *v51;
  uint16x8_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint8x8_t *v55;
  uint8x16_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint16x8_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint8x8_t *v63;
  uint8x8_t v64;
  _BYTE v65[13];
  uint64_t v66;
  uint64_t v67;

  v66 = *MEMORY[0x1E0C80C00];
  v9 = *(_DWORD *)(a1 + 16);
  v10 = *a2;
  if ((*a2 & 0x80000000) != 0)
  {
    v13 = -v10;
    v11 = 1;
    do
    {
      ++v11;
      v14 = v13 >= 0xA;
      v13 /= 0xAu;
    }
    while (v14);
  }
  else
  {
    v11 = 0;
    do
    {
      ++v11;
      v12 = v10 > 9;
      v10 /= 0xAu;
    }
    while (v12);
  }
  v14 = __CFADD__(v9, v11);
  v15 = v9 + v11;
  if (v14)
    v16 = 0xFFFFFFFFLL;
  else
    v16 = v15;
  v17 = *(_QWORD *)(a1 + 8);
  if (!v17 && (v17 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v17 + 16) & 4) != 0)
  {
    result = (uint16x8_t *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
    if (result)
    {
      v29 = *a2;
      if ((*a2 & 0x80000000) != 0)
      {
        v31 = 0;
        v32 = -v29;
        do
        {
          v65[v31-- + 12] = (v32 % 0xA) | 0x30;
          v12 = v32 > 9;
          v32 /= 0xAu;
        }
        while (v12);
        v33 = v31 + 12;
        v34 = &v65[v31 + 12];
        *v34 = 45;
        if (v31 + 14 <= 14)
        {
          if (v33 <= 12)
            v33 = 12;
          return (uint16x8_t *)memcpy(result, v34, v33 - v31 - 11);
        }
      }
      else
      {
        v30 = 0;
        do
        {
          v65[v30-- + 12] = (v29 % 0xA) | 0x30;
          v12 = v29 > 9;
          v29 /= 0xAu;
        }
        while (v12);
        if (v30 + 14 <= 13)
          return (uint16x8_t *)memcpy(result, &v65[v30 + 13], -v30);
      }
    }
    return result;
  }
  result = (uint16x8_t *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
  if (!result)
    return result;
  v19 = *a2;
  if ((*a2 & 0x80000000) != 0)
  {
    v35 = 0;
    v36 = -v19;
    do
    {
      v65[v35-- + 12] = (v36 % 0xA) | 0x30;
      v12 = v36 > 9;
      v36 /= 0xAu;
    }
    while (v12);
    v65[v35 + 12] = 45;
    if (v35 + 14 > 14)
      return result;
    v37 = v35 + 12;
    v38 = 12;
    if (v35 + 12 > 12)
      v38 = v35 + 12;
    v39 = v38 - v35 - 11;
    if (v39 >= 8)
    {
      v40 = -11 - v35;
      if (v39 >= 0x20)
      {
        v41 = v39 & 0xFFFFFFFFFFFFFFE0;
        v52 = result + 2;
        v53 = v35 + 12;
        if (v35 + 12 <= 12)
          v53 = 12;
        v54 = (v53 + v40) & 0xFFFFFFFFFFFFFFE0;
        v55 = (uint8x8_t *)((char *)&v67 + v35 + 7);
        do
        {
          v56 = *(uint8x16_t *)v55[-2].i8;
          v57 = vmovl_u8(*v55);
          v58 = vmovl_high_u8(*(uint8x16_t *)v55->i8);
          v52[-2] = vmovl_u8(*(uint8x8_t *)v56.i8);
          v52[-1] = vmovl_high_u8(v56);
          *v52 = v57;
          v52[1] = v58;
          v52 += 4;
          v55 += 4;
          v54 -= 32;
        }
        while (v54);
        if (v39 == v41)
          return result;
        if ((v39 & 0x18) == 0)
        {
          result = (uint16x8_t *)((char *)result + 2 * v41);
          v37 += v41;
          goto LABEL_66;
        }
      }
      else
      {
        v41 = 0;
      }
      v37 += v39 & 0xFFFFFFFFFFFFFFF8;
      v59 = (uint16x8_t *)((char *)result + 2 * v41);
      v60 = v35 + 12;
      v12 = v35 + 12 <= 12;
      v61 = 12;
      if (!v12)
        v61 = v60;
      v62 = v41 - ((v61 + v40) & 0xFFFFFFFFFFFFFFF8);
      v63 = (uint8x8_t *)&v65[v41 + v60];
      do
      {
        v64 = *v63++;
        *v59++ = vmovl_u8(v64);
        v62 += 8;
      }
      while (v62);
      result = (uint16x8_t *)((char *)result + 2 * (v39 & 0xFFFFFFFFFFFFFFF8));
      if (v39 == (v39 & 0xFFFFFFFFFFFFFFF8))
        return result;
    }
    do
    {
LABEL_66:
      result->i16[0] = v65[v37];
      result = (uint16x8_t *)((char *)result + 2);
      v12 = v37++ < 12;
    }
    while (v12);
    return result;
  }
  v20 = 0;
  v21 = 13;
  v22 = 1;
  do
  {
    v23 = v21;
    v24 = v20;
    v25 = v22;
    v65[--v21] = (v19 % 0xA) | 0x30;
    ++v20;
    ++v22;
    v12 = v19 > 9;
    v19 /= 0xAu;
  }
  while (v12);
  if (v23 <= 13)
  {
    v26 = v24 + 1;
    if ((unint64_t)(v24 + 1) < 8)
    {
      v27 = v21;
      v28 = result;
      goto LABEL_63;
    }
    if (v26 >= 0x20)
    {
      v42 = v26 & 0xFFFFFFFFFFFFFFE0;
      v43 = result + 2;
      v44 = v25 & 0xFFFFFFFFFFFFFFE0;
      v45 = (uint8x8_t *)&v65[-v24 + 28];
      do
      {
        v46 = *(uint8x16_t *)v45[-2].i8;
        v47 = vmovl_u8(*v45);
        v48 = vmovl_high_u8(*(uint8x16_t *)v45->i8);
        v43[-2] = vmovl_u8(*(uint8x8_t *)v46.i8);
        v43[-1] = vmovl_high_u8(v46);
        *v43 = v47;
        v43[1] = v48;
        v43 += 4;
        v45 += 4;
        v44 -= 32;
      }
      while (v44);
      if (v26 == v42)
        return result;
      if ((v26 & 0x18) == 0)
      {
        v28 = (uint16x8_t *)((char *)result + 2 * v42);
        v27 = v21 + v42;
        do
        {
LABEL_63:
          v28->i16[0] = v65[v27];
          v28 = (uint16x8_t *)((char *)v28 + 2);
          ++v27;
        }
        while (v27 != 13);
        return result;
      }
    }
    else
    {
      v42 = 0;
    }
    v27 = v21 + (v26 & 0xFFFFFFFFFFFFFFF8);
    v28 = (uint16x8_t *)((char *)result + 2 * (v26 & 0xFFFFFFFFFFFFFFF8));
    v49 = v42 - (v25 & 0xFFFFFFFFFFFFFFF8);
    v50 = &v65[v42];
    v51 = (uint16x8_t *)((char *)result + 2 * v42);
    do
    {
      *v51++ = vmovl_u8(*(uint8x8_t *)&v50[v21]);
      v50 += 8;
      v49 += 8;
    }
    while (v49);
    if (v26 != (v26 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_63;
  }
  return result;
}

uint16x8_t *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned int,void>>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint16x8_t *result;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint16x8_t *v30;
  unint64_t v31;
  uint8x8_t *v32;
  uint8x16_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  unint64_t v36;
  _BYTE *v37;
  uint16x8_t *v38;
  _BYTE v39[13];
  uint64_t v40;

  v9 = 0;
  v40 = *MEMORY[0x1E0C80C00];
  v10 = *(_DWORD *)(a1 + 16);
  v11 = *a2;
  v12 = -1;
  do
  {
    ++v9;
    --v12;
    v13 = v11 > 9;
    v11 /= 0xAu;
  }
  while (v13);
  if (v10 >= v12)
    v10 = v12;
  v14 = (WTF::AtomStringImpl *)(v10 + v9);
  v15 = *(_QWORD *)(a1 + 8);
  if ((v15 || (v15 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v15 + 16) & 4) == 0)
  {
    result = (uint16x8_t *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, v14, a3, a4, a5, a6, a7, a8);
    if (result)
    {
      v17 = 0;
      v18 = 13;
      v19 = *a2;
      v20 = 1;
      do
      {
        v21 = v18;
        v22 = v17;
        v23 = v20;
        v39[--v18] = (v19 % 0xA) | 0x30;
        ++v17;
        ++v20;
        v13 = v19 > 9;
        v19 /= 0xAu;
      }
      while (v13);
      if (v21 <= 13)
      {
        v24 = v22 + 1;
        if ((unint64_t)(v22 + 1) < 8)
        {
          v25 = v18;
          v26 = (char *)result;
          goto LABEL_30;
        }
        if (v24 >= 0x20)
        {
          v29 = v24 & 0xFFFFFFFFFFFFFFE0;
          v30 = result + 2;
          v31 = v23 & 0xFFFFFFFFFFFFFFE0;
          v32 = (uint8x8_t *)&v39[-v22 + 28];
          do
          {
            v33 = *(uint8x16_t *)v32[-2].i8;
            v34 = vmovl_u8(*v32);
            v35 = vmovl_high_u8(*(uint8x16_t *)v32->i8);
            v30[-2] = vmovl_u8(*(uint8x8_t *)v33.i8);
            v30[-1] = vmovl_high_u8(v33);
            *v30 = v34;
            v30[1] = v35;
            v30 += 4;
            v32 += 4;
            v31 -= 32;
          }
          while (v31);
          if (v24 == v29)
            return result;
          if ((v24 & 0x18) == 0)
          {
            v26 = &result->i8[2 * v29];
            v25 = v18 + v29;
            do
            {
LABEL_30:
              *(_WORD *)v26 = v39[v25];
              v26 += 2;
              ++v25;
            }
            while (v25 != 13);
            return result;
          }
        }
        else
        {
          v29 = 0;
        }
        v25 = v18 + (v24 & 0xFFFFFFFFFFFFFFF8);
        v26 = &result->i8[2 * (v24 & 0xFFFFFFFFFFFFFFF8)];
        v36 = v29 - (v23 & 0xFFFFFFFFFFFFFFF8);
        v37 = &v39[v29];
        v38 = (uint16x8_t *)((char *)result + 2 * v29);
        do
        {
          *v38++ = vmovl_u8(*(uint8x8_t *)&v37[v18]);
          v37 += 8;
          v36 += 8;
        }
        while (v36);
        if (v24 != (v24 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_30;
      }
    }
  }
  else
  {
    result = (uint16x8_t *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, v14, a3, a4, a5, a6, a7, a8);
    if (result)
    {
      v27 = 0;
      v28 = *a2;
      do
      {
        v39[v27-- + 12] = (v28 % 0xA) | 0x30;
        v13 = v28 > 9;
        v28 /= 0xAu;
      }
      while (v13);
      if (v27 + 14 <= 13)
        return (uint16x8_t *)memcpy(result, &v39[v27 + 13], -v27);
    }
  }
  return result;
}

uint16x8_t *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned long,void>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  BOOL v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint16x8_t *result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint16x8_t *v30;
  unint64_t v31;
  uint8x8_t *v32;
  uint8x16_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  unint64_t v36;
  _BYTE *v37;
  uint16x8_t *v38;
  _BYTE v39[25];
  uint64_t v40;

  v9 = 0;
  v40 = *MEMORY[0x1E0C80C00];
  v10 = *(_DWORD *)(a1 + 16);
  v11 = *a2;
  v12 = -1;
  do
  {
    ++v9;
    --v12;
    v13 = v11 > 9;
    v11 /= 0xAuLL;
  }
  while (v13);
  if (v10 >= v12)
    v10 = v12;
  v14 = (WTF::AtomStringImpl *)(v10 + v9);
  v15 = *(_QWORD *)(a1 + 8);
  if ((v15 || (v15 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v15 + 16) & 4) == 0)
  {
    result = (uint16x8_t *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, v14, a3, a4, a5, a6, a7, a8);
    if (result)
    {
      v17 = 0;
      v18 = 25;
      v19 = *a2;
      v20 = 1;
      do
      {
        v21 = v18;
        v22 = v17;
        v23 = v20;
        v39[--v18] = (v19 % 0xA) | 0x30;
        ++v17;
        ++v20;
        v13 = v19 > 9;
        v19 /= 0xAuLL;
      }
      while (v13);
      if (v21 <= 25)
      {
        v24 = v22 + 1;
        if ((unint64_t)(v22 + 1) < 8)
        {
          v25 = v18;
          v26 = (char *)result;
          goto LABEL_30;
        }
        if (v24 >= 0x20)
        {
          v29 = v24 & 0xFFFFFFFFFFFFFFE0;
          v30 = result + 2;
          v31 = v23 & 0xFFFFFFFFFFFFFFE0;
          v32 = (uint8x8_t *)&v39[-v22 + 40];
          do
          {
            v33 = *(uint8x16_t *)v32[-2].i8;
            v34 = vmovl_u8(*v32);
            v35 = vmovl_high_u8(*(uint8x16_t *)v32->i8);
            v30[-2] = vmovl_u8(*(uint8x8_t *)v33.i8);
            v30[-1] = vmovl_high_u8(v33);
            *v30 = v34;
            v30[1] = v35;
            v30 += 4;
            v32 += 4;
            v31 -= 32;
          }
          while (v31);
          if (v24 == v29)
            return result;
          if ((v24 & 0x18) == 0)
          {
            v26 = &result->i8[2 * v29];
            v25 = v18 + v29;
            do
            {
LABEL_30:
              *(_WORD *)v26 = v39[v25];
              v26 += 2;
              ++v25;
            }
            while (v25 != 25);
            return result;
          }
        }
        else
        {
          v29 = 0;
        }
        v25 = v18 + (v24 & 0xFFFFFFFFFFFFFFF8);
        v26 = &result->i8[2 * (v24 & 0xFFFFFFFFFFFFFFF8)];
        v36 = v29 - (v23 & 0xFFFFFFFFFFFFFFF8);
        v37 = &v39[v29];
        v38 = (uint16x8_t *)((char *)result + 2 * v29);
        do
        {
          *v38++ = vmovl_u8(*(uint8x8_t *)&v37[v18]);
          v37 += 8;
          v36 += 8;
        }
        while (v36);
        if (v24 != (v24 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_30;
      }
    }
  }
  else
  {
    result = (uint16x8_t *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, v14, a3, a4, a5, a6, a7, a8);
    if (result)
    {
      v27 = 0;
      v28 = *a2;
      do
      {
        v39[v27-- + 24] = (v28 % 0xA) | 0x30;
        v13 = v28 > 9;
        v28 /= 0xAuLL;
      }
      while (v13);
      if (v27 + 26 <= 25)
        return (uint16x8_t *)memcpy(result, &v39[v27 + 25], -v27);
    }
  }
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::FormattedNumber,void>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char *result;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  __int128 v19;
  char *v20;
  int8x16_t v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  size_t v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unsigned __int8 *v34;
  __int16 v35;
  uint8x8_t *v36;
  uint16x8_t *v37;
  unint64_t v38;
  uint8x16_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint8x8_t *v42;
  uint16x8_t *v43;
  unint64_t v44;
  uint8x8_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;

  v9 = *(_DWORD *)(a1 + 16);
  v10 = *(_DWORD *)(*a2 + 124);
  v30 = __CFADD__(v9, v10);
  v11 = v9 + v10;
  if (v30)
    v12 = 0xFFFFFFFFLL;
  else
    v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if ((v13 || (v13 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v13 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v12, a3, a4, a5, a6, a7, a8);
    if (!result)
      return result;
    v15 = *a2;
    v16 = *(unsigned int *)(*a2 + 124);
    v17 = &result[2 * v16];
    if (v16 < 0x40)
    {
      v18 = (unint64_t)result;
      if (result == v17)
        return result;
    }
    else
    {
      v18 = (unint64_t)&result[2 * (v16 & 0xFFFFFFC0)];
      v19 = 0uLL;
      v20 = result;
      do
      {
        v46.val[0] = *(int8x16_t *)v15;
        v21 = *(int8x16_t *)(v15 + 16);
        v47.val[0] = *(int8x16_t *)(v15 + 32);
        v22 = *(_OWORD *)(v15 + 48);
        v15 += 64;
        v23 = v22;
        v47.val[1] = 0uLL;
        v48.val[0] = v21;
        v46.val[1] = 0uLL;
        v24 = v20;
        vst2q_s8(v24, v46);
        v24 += 32;
        v48.val[1] = 0uLL;
        vst2q_s8(v24, v48);
        v25 = v20 + 64;
        vst2q_s8(v25, v47);
        v26 = v20 + 96;
        vst2q_s8(v26, *(int8x16x2_t *)(&v19 - 1));
        v20 += 128;
      }
      while (v20 != (char *)v18);
      if ((char *)v18 == v17)
        return result;
    }
    v29 = (unint64_t)&result[2 * v16 - v18 - 2];
    if (v29 < 0xE
      || (v18 < v15 + (v29 >> 1) + 1 ? (v30 = v15 >= (v29 & 0xFFFFFFFFFFFFFFFELL) + v18 + 2) : (v30 = 1), !v30))
    {
      v33 = (char *)v18;
      v34 = (unsigned __int8 *)v15;
      goto LABEL_27;
    }
    v31 = (v29 >> 1) + 1;
    if (v29 >= 0x3E)
    {
      v32 = v31 & 0xFFFFFFFFFFFFFFE0;
      v36 = (uint8x8_t *)(v15 + 16);
      v37 = (uint16x8_t *)(v18 + 32);
      v38 = v31 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v39 = *(uint8x16_t *)v36[-2].i8;
        v40 = vmovl_u8(*v36);
        v41 = vmovl_high_u8(*(uint8x16_t *)v36->i8);
        v37[-2] = vmovl_u8(*(uint8x8_t *)v39.i8);
        v37[-1] = vmovl_high_u8(v39);
        *v37 = v40;
        v37[1] = v41;
        v37 += 4;
        v36 += 4;
        v38 -= 32;
      }
      while (v38);
      if (v31 == v32)
        return result;
      if ((v31 & 0x18) == 0)
      {
        v34 = (unsigned __int8 *)(v15 + v32);
        v33 = (char *)(v18 + 2 * v32);
        goto LABEL_27;
      }
    }
    else
    {
      v32 = 0;
    }
    v33 = (char *)(v18 + 2 * (v31 & 0xFFFFFFFFFFFFFFF8));
    v34 = (unsigned __int8 *)(v15 + (v31 & 0xFFFFFFFFFFFFFFF8));
    v42 = (uint8x8_t *)(v15 + v32);
    v43 = (uint16x8_t *)(v18 + 2 * v32);
    v44 = v32 - (v31 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v45 = *v42++;
      *v43++ = vmovl_u8(v45);
      v44 += 8;
    }
    while (v44);
    if (v31 == (v31 & 0xFFFFFFFFFFFFFFF8))
      return result;
    do
    {
LABEL_27:
      v35 = *v34++;
      *(_WORD *)v33 = v35;
      v33 += 2;
    }
    while (v33 != v17);
    return result;
  }
  result = (char *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v12, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    v27 = (char *)*a2;
    v28 = *(unsigned int *)(*a2 + 124);
    if ((_DWORD)v28)
    {
      if ((_DWORD)v28 == 1)
        *result = *v27;
      else
        return (char *)memcpy(result, v27, v28);
    }
  }
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char *result;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  __int128 v19;
  char *v20;
  int8x16_t v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unsigned __int8 *v34;
  __int16 v35;
  uint8x8_t *v36;
  uint16x8_t *v37;
  unint64_t v38;
  uint8x16_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint8x8_t *v42;
  uint16x8_t *v43;
  unint64_t v44;
  uint8x8_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;

  v9 = *(_DWORD *)(a1 + 16);
  v10 = *(_DWORD *)(a2 + 8);
  v30 = __CFADD__(v9, v10);
  v11 = v9 + v10;
  if (v30)
    v12 = 0xFFFFFFFFLL;
  else
    v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if ((v13 || (v13 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v13 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v12, a3, a4, a5, a6, a7, a8);
    if (!result)
      return result;
    v15 = *(_QWORD *)a2;
    v16 = *(_QWORD *)(a2 + 8);
    v17 = &result[2 * v16];
    if ((v16 & 0xFFFFFFC0) != 0)
    {
      v18 = (unint64_t)&result[2 * (*(_QWORD *)(a2 + 8) & 0xFFFFFFC0)];
      v19 = 0uLL;
      v20 = result;
      do
      {
        v46.val[0] = *(int8x16_t *)v15;
        v21 = *(int8x16_t *)(v15 + 16);
        v47.val[0] = *(int8x16_t *)(v15 + 32);
        v22 = *(_OWORD *)(v15 + 48);
        v15 += 64;
        v23 = v22;
        v47.val[1] = 0uLL;
        v48.val[0] = v21;
        v46.val[1] = 0uLL;
        v24 = v20;
        vst2q_s8(v24, v46);
        v24 += 32;
        v48.val[1] = 0uLL;
        vst2q_s8(v24, v48);
        v25 = v20 + 64;
        vst2q_s8(v25, v47);
        v26 = v20 + 96;
        vst2q_s8(v26, *(int8x16x2_t *)(&v19 - 1));
        v20 += 128;
      }
      while (v20 != (char *)v18);
      if ((char *)v18 == v17)
        return result;
    }
    else
    {
      v18 = (unint64_t)result;
      if (result == v17)
        return result;
    }
    v29 = (unint64_t)&result[2 * v16 - v18 - 2];
    if (v29 < 0xE
      || (v18 < v15 + (v29 >> 1) + 1 ? (v30 = v15 >= (v29 & 0xFFFFFFFFFFFFFFFELL) + v18 + 2) : (v30 = 1), !v30))
    {
      v33 = (char *)v18;
      v34 = (unsigned __int8 *)v15;
      goto LABEL_28;
    }
    v31 = (v29 >> 1) + 1;
    if (v29 >= 0x3E)
    {
      v32 = v31 & 0xFFFFFFFFFFFFFFE0;
      v36 = (uint8x8_t *)(v15 + 16);
      v37 = (uint16x8_t *)(v18 + 32);
      v38 = v31 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v39 = *(uint8x16_t *)v36[-2].i8;
        v40 = vmovl_u8(*v36);
        v41 = vmovl_high_u8(*(uint8x16_t *)v36->i8);
        v37[-2] = vmovl_u8(*(uint8x8_t *)v39.i8);
        v37[-1] = vmovl_high_u8(v39);
        *v37 = v40;
        v37[1] = v41;
        v37 += 4;
        v36 += 4;
        v38 -= 32;
      }
      while (v38);
      if (v31 == v32)
        return result;
      if ((v31 & 0x18) == 0)
      {
        v34 = (unsigned __int8 *)(v15 + v32);
        v33 = (char *)(v18 + 2 * v32);
        goto LABEL_28;
      }
    }
    else
    {
      v32 = 0;
    }
    v33 = (char *)(v18 + 2 * (v31 & 0xFFFFFFFFFFFFFFF8));
    v34 = (unsigned __int8 *)(v15 + (v31 & 0xFFFFFFFFFFFFFFF8));
    v42 = (uint8x8_t *)(v15 + v32);
    v43 = (uint16x8_t *)(v18 + 2 * v32);
    v44 = v32 - (v31 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v45 = *v42++;
      *v43++ = vmovl_u8(v45);
      v44 += 8;
    }
    while (v44);
    if (v31 == (v31 & 0xFFFFFFFFFFFFFFF8))
      return result;
    do
    {
LABEL_28:
      v35 = *v34++;
      *(_WORD *)v33 = v35;
      v33 += 2;
    }
    while (v33 != v17);
    return result;
  }
  result = (char *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v12, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    v27 = *(_QWORD *)(a2 + 8);
    if ((_DWORD)v27)
    {
      v28 = *(char **)a2;
      if ((_DWORD)v27 == 1)
        *result = *v28;
      else
        return (char *)memcpy(result, v28, *(_QWORD *)(a2 + 8));
    }
  }
  return result;
}

WTF::StringBuilder *WTF::TextStream::operator<<(WTF::StringBuilder *a1, void *a2)
{
  objc_class *v3;
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char **v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  void (*v53)(uint64_t, void *, void *);
  void *v54;
  char *v55;
  WTF::StringBuilder *v56;
  char v57;
  const char *v58;
  int v59;

  v3 = a2;
  if (object_isClass(v3))
  {
    NSStringFromClass(v3);
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v51 = (const char *)v4;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<NSString * {__strong},void>>(a1, (CFStringRef *)&v51, v5, v6, v7, v8, v9, v10);
    goto LABEL_13;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v4 = v3;
    v51 = "[";
    LODWORD(v52) = 1;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>((uint64_t)a1, (uint64_t)&v51, v11, v12, v13, v14, v15, v16);
    for (i = 0; i < -[__CFString count](v4, "count"); ++i)
    {
      -[__CFString objectAtIndexedSubscript:](v4, "objectAtIndexedSubscript:", i);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      WTF::TextStream::operator<<(a1, v24);
      if (i < -[__CFString count](v4, "count") - 1)
      {
        v51 = ", ";
        LODWORD(v52) = 2;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>((uint64_t)a1, (uint64_t)&v51, v25, v26, v27, v28, v29, v30);
      }

    }
    v51 = "]";
    LODWORD(v52) = 1;
    v37 = &v51;
    goto LABEL_12;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v4 = v3;
    v51 = "{";
    LODWORD(v52) = 1;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>((uint64_t)a1, (uint64_t)&v51, v31, v32, v33, v34, v35, v36);
    v57 = 0;
    v51 = (const char *)MEMORY[0x1E0C809B0];
    v52 = 3321888768;
    v53 = ___ZZN3WTF10TextStreamlsEP11objc_objectENK3__1clEP12NSDictionary_block_invoke;
    v54 = &__block_descriptor_48_ea8_32c79_ZTSKZZN3WTF10TextStreamlsEP11objc_objectENK3__1clEP12NSDictionaryEUlS2_S2_PbE__e15_v32__0_8_16_B24l;
    v55 = &v57;
    v56 = a1;
    -[__CFString enumerateKeysAndObjectsUsingBlock:](v4, "enumerateKeysAndObjectsUsingBlock:", &v51);
    v58 = "}";
    v59 = 1;
    v37 = &v58;
LABEL_12:
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>((uint64_t)a1, (uint64_t)v37, v18, v19, v20, v21, v22, v23);
    goto LABEL_13;
  }
  if (!-[objc_class conformsToProtocol:](v3, "conformsToProtocol:", &unk_1EE346580))
  {
    v51 = "(id)";
    LODWORD(v52) = 4;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>((uint64_t)a1, (uint64_t)&v51, v39, v40, v41, v42, v43, v44);
    goto LABEL_14;
  }
  -[objc_class description](v3, "description");
  v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v51 = (const char *)v4;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<NSString * {__strong},void>>(a1, (CFStringRef *)&v51, v45, v46, v47, v48, v49, v50);
LABEL_13:

LABEL_14:
  return a1;
}

void sub_197B2017C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_197B20190(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_197B201A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_197B201B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_197B201C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_197B201D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_197B201E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_197B201FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_197B20210(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t WTF::operator<<(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v74;
  int v75;

  v74 = "{{";
  v75 = 2;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(a1, (uint64_t)&v74, a7, a8, a9, a10, a11, a12);
  v24 = WTF::TextStream::operator<<(a1, a2, v17, v18, v19, v20, v21, v22, v23);
  v74 = ", ";
  v75 = 2;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(v24, (uint64_t)&v74, v25, v26, v27, v28, v29, v30);
  v38 = WTF::TextStream::operator<<(a1, a3, v31, v32, v33, v34, v35, v36, v37);
  v74 = "}, {";
  v75 = 4;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(v38, (uint64_t)&v74, v39, v40, v41, v42, v43, v44);
  v52 = WTF::TextStream::operator<<(a1, a4, v45, v46, v47, v48, v49, v50, v51);
  v74 = ", ";
  v75 = 2;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(v52, (uint64_t)&v74, v53, v54, v55, v56, v57, v58);
  v66 = WTF::TextStream::operator<<(a1, a5, v59, v60, v61, v62, v63, v64, v65);
  v74 = "}}";
  v75 = 2;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(v66, (uint64_t)&v74, v67, v68, v69, v70, v71, v72);
  return a1;
}

uint64_t WTF::operator<<(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v42;
  int v43;

  v42 = "{";
  v43 = 1;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(a1, (uint64_t)&v42, a5, a6, a7, a8, a9, a10);
  v20 = WTF::TextStream::operator<<(a1, a2, v13, v14, v15, v16, v17, v18, v19);
  v42 = ", ";
  v43 = 2;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(v20, (uint64_t)&v42, v21, v22, v23, v24, v25, v26);
  v34 = WTF::TextStream::operator<<(a1, a3, v27, v28, v29, v30, v31, v32, v33);
  v42 = "}";
  v43 = 1;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(v34, (uint64_t)&v42, v35, v36, v37, v38, v39, v40);
  return a1;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v42;
  int v43;

  v42 = "{";
  v43 = 1;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(a1, (uint64_t)&v42, a5, a6, a7, a8, a9, a10);
  v20 = WTF::TextStream::operator<<(a1, a2, v13, v14, v15, v16, v17, v18, v19);
  v42 = ", ";
  v43 = 2;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(v20, (uint64_t)&v42, v21, v22, v23, v24, v25, v26);
  v34 = WTF::TextStream::operator<<(a1, a3, v27, v28, v29, v30, v31, v32, v33);
  v42 = "}";
  v43 = 1;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(v34, (uint64_t)&v42, v35, v36, v37, v38, v39, v40);
  return a1;
}

void ___ZZN3WTF10TextStreamlsEP11objc_objectENK3__1clEP12NSDictionary_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  const char *v23;
  int v24;

  v5 = a2;
  v6 = a3;
  v22 = v5;
  v13 = v6;
  v14 = *(_BYTE **)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  if (*v14)
  {
    v23 = ", ";
    v24 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(v15, (uint64_t)&v23, v7, v8, v9, v10, v11, v12);
    v14 = *(_BYTE **)(a1 + 32);
  }
  *v14 = 1;
  WTF::TextStream::operator<<(v15, v22);
  v23 = ": ";
  v24 = 2;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(v15, (uint64_t)&v23, v16, v17, v18, v19, v20, v21);
  WTF::TextStream::operator<<(v15, v13);

}

void sub_197B20534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c79_ZTSKZZN3WTF10TextStreamlsEP11objc_objectENK3__1clEP12NSDictionaryEUlS2_S2_PbE_(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[2] = result;
  return result;
}

void WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<NSString * {__strong},void>>(WTF::StringBuilder *this, CFStringRef *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  const __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *v15;
  void *v16;
  const char *CStringPtr;
  CFIndex Length;
  uint64_t v19;
  const __CFString *v20;
  UniChar *v21;
  CFRange v22;

  v10 = *((_DWORD *)this + 4);
  v11 = *a2;
  if (*a2)
    LODWORD(v11) = CFStringGetLength(v11);
  if (__CFADD__(v10, (_DWORD)v11))
    v12 = 0xFFFFFFFFLL;
  else
    v12 = (v10 + (_DWORD)v11);
  v13 = *((_QWORD *)this + 1);
  if ((v13 || (v13 = *(_QWORD *)this) != 0) && (*(_BYTE *)(v13 + 16) & 4) == 0
    || *a2 && !CFStringGetCStringPtr(*a2, 0x201u))
  {
    v19 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(this, (WTF::AtomStringImpl *)v12, a3, a4, a5, a6, a7, a8);
    if (v19)
    {
      v20 = *a2;
      if (v20)
      {
        v21 = (UniChar *)v19;
        v22.length = CFStringGetLength(v20);
        v22.location = 0;
        CFStringGetCharacters(v20, v22, v21);
      }
    }
  }
  else
  {
    v14 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)this, (WTF::AtomStringImpl *)v12, a3, a4, a5, a6, a7, a8);
    if (v14)
    {
      v15 = *a2;
      if (v15)
      {
        v16 = (void *)v14;
        CStringPtr = CFStringGetCStringPtr(v15, 0x201u);
        Length = CFStringGetLength(v15);
        memcpy(v16, CStringPtr, Length);
      }
    }
  }
}

void WTF::ThreadGroup::~ThreadGroup(WTF::ThreadGroup *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  _QWORD *i;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v15;
  unint64_t v16;
  unsigned int **v17;
  unsigned int **v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  WTF::ThreadGroup *v32;

  v9 = (unint64_t *)((char *)this + 16);
  if (__ldaxr((unint64_t *)this + 2))
  {
    __clrex();
  }
  else if (!__stxr(1uLL, v9))
  {
    goto LABEL_5;
  }
  WTF::WordLock::lockSlow((WTF::ThreadGroup *)((char *)this + 16));
LABEL_5:
  for (i = (_QWORD *)*((_QWORD *)this + 4); i; i = (_QWORD *)i[2])
  {
    v12 = *i;
    v13 = (unint64_t *)(*i + 8);
    if (__ldaxr(v13))
    {
      __clrex();
    }
    else if (!__stxr(1uLL, v13))
    {
      goto LABEL_14;
    }
    WTF::WordLock::lockSlow((WTF::WordLock *)v13);
LABEL_14:
    if ((*(_BYTE *)(v12 + 5) & 1) == 0)
    {
      v32 = this;
      WTF::HashMap<WTF::ThreadGroup *,std::weak_ptr<WTF::ThreadGroup>,WTF::DefaultHash<WTF::ThreadGroup *>,WTF::HashTraits<WTF::ThreadGroup *>,WTF::HashTraits<std::weak_ptr<WTF::ThreadGroup>>,WTF::HashTableTraits>::remove((uint64_t *)(v12 + 32), &v32);
    }
    v15 = __ldxr(v13);
    if (v15 == 1)
    {
      if (!__stlxr(0, v13))
        continue;
    }
    else
    {
      __clrex();
    }
    WTF::WordLock::unlockSlow((WTF::WordLock *)v13);
  }
  v16 = __ldxr(v9);
  if (v16 == 1)
  {
    if (!__stlxr(0, v9))
    {
      v17 = (unsigned int **)*((_QWORD *)this + 4);
      if (!v17)
        goto LABEL_31;
      goto LABEL_27;
    }
  }
  else
  {
    __clrex();
  }
  WTF::WordLock::unlockSlow((WTF::WordLock *)v9);
  v17 = (unsigned int **)*((_QWORD *)this + 4);
  if (!v17)
    goto LABEL_31;
  do
  {
LABEL_27:
    v18 = v17;
    v17 = (unsigned int **)v17[2];
    v19 = *v18;
    *v18 = 0;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::Thread::~Thread((WTF::Thread *)v19, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
    }
    WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
  }
  while (v17);
LABEL_31:
  v30 = *((_QWORD *)this + 3);
  if (v30)
    WTF::fastFree(v30 - 16, a2, a3, a4, a5, a6, a7, a8);
  v31 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v31)
    std::__shared_weak_count::__release_weak(v31);
}

uint64_t *WTF::ThreadGroup::add(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return WTF::Thread::addToThreadGroup(a3, a2, a1, a4, a5, a6, a7, a8);
}

uint64_t *WTF::ThreadGroup::add(WTF::ThreadGroup *this, WTF::Thread *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::WordLock *v10;
  uint64_t *v12;
  WTF::WordLock *v13;
  unint64_t v14;
  WTF::WordLock *v16;

  v10 = (WTF::ThreadGroup *)((char *)this + 16);
  v16 = v10;
  if (__ldaxr((unint64_t *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1uLL, (unint64_t *)v10))
  {
    goto LABEL_5;
  }
  WTF::WordLock::lockSlow(v10);
LABEL_5:
  v12 = WTF::Thread::addToThreadGroup((uint64_t)a2, (uint64_t)&v16, this, a4, a5, a6, a7, a8);
  v13 = v16;
  if (!v16)
    return v12;
  v14 = __ldxr((unint64_t *)v16);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unint64_t *)v16))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::WordLock::unlockSlow(v13);
  return v12;
}

uint64_t *WTF::ThreadGroup::addCurrentThread(WTF::ThreadGroup *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t *v10;
  uint64_t *v13;
  WTF::WordLock *v14;
  unint64_t v15;
  WTF::WordLock *v17;

  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9)
  {
    v9 = WTF::Thread::initializeCurrentTLS(this);
    v10 = (unint64_t *)((char *)this + 16);
    v17 = (WTF::ThreadGroup *)((char *)this + 16);
    if (__ldaxr((unint64_t *)this + 2))
      goto LABEL_3;
LABEL_5:
    if (!__stxr(1uLL, v10))
      goto LABEL_7;
    goto LABEL_6;
  }
  v10 = (unint64_t *)((char *)this + 16);
  v17 = (WTF::ThreadGroup *)((char *)this + 16);
  if (!__ldaxr((unint64_t *)this + 2))
    goto LABEL_5;
LABEL_3:
  __clrex();
LABEL_6:
  WTF::WordLock::lockSlow((WTF::WordLock *)v10);
LABEL_7:
  v13 = WTF::Thread::addToThreadGroup(v9, (uint64_t)&v17, this, a4, a5, a6, a7, a8);
  v14 = v17;
  if (!v17)
    return v13;
  v15 = __ldxr((unint64_t *)v17);
  if (v15 == 1)
  {
    if (!__stlxr(0, (unint64_t *)v17))
      return v13;
  }
  else
  {
    __clrex();
  }
  WTF::WordLock::unlockSlow(v14);
  return v13;
}

uint64_t WTF::ThreadSuspendLocker::ThreadSuspendLocker(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;

  v1 = this;
  v2 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (!__ldaxr((unsigned int *)&pas_thread_suspend_lock))
  {
    if (!__stxr(v2, (unsigned int *)&pas_thread_suspend_lock))
      return this;
  }
  __clrex();
  os_unfair_lock_lock((os_unfair_lock_t)&pas_thread_suspend_lock);
  return v1;
}

{
  uint64_t v1;
  unsigned int v2;

  v1 = this;
  v2 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (!__ldaxr((unsigned int *)&pas_thread_suspend_lock))
  {
    if (!__stxr(v2, (unsigned int *)&pas_thread_suspend_lock))
      return this;
  }
  __clrex();
  os_unfair_lock_lock((os_unfair_lock_t)&pas_thread_suspend_lock);
  return v1;
}

void WTF::ThreadSuspendLocker::~ThreadSuspendLocker(WTF::ThreadSuspendLocker *this)
{
  int v1;
  unsigned int v2;

  v1 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (1)
  {
    v2 = __ldxr((unsigned int *)&pas_thread_suspend_lock);
    if (v2 != v1)
      break;
    if (!__stlxr(0, (unsigned int *)&pas_thread_suspend_lock))
      return;
  }
  __clrex();
  os_unfair_lock_unlock((os_unfair_lock_t)&pas_thread_suspend_lock);
}

{
  int v1;
  unsigned int v2;

  v1 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (1)
  {
    v2 = __ldxr((unsigned int *)&pas_thread_suspend_lock);
    if (v2 != v1)
      break;
    if (!__stlxr(0, (unsigned int *)&pas_thread_suspend_lock))
      return;
  }
  __clrex();
  os_unfair_lock_unlock((os_unfair_lock_t)&pas_thread_suspend_lock);
}

void *WTF::ThreadLike::currentSequence(WTF::ThreadLike *this)
{
  void *result;
  uint64_t v2;

  result = dispatch_get_specific(&WTF::ThreadLike::s_uid);
  if (!(_DWORD)result)
  {
    v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (v2)
      return (void *)*(unsigned int *)(v2 + 48);
    else
      return (void *)*(unsigned int *)(WTF::Thread::initializeCurrentTLS(0) + 48);
  }
  return result;
}

uint64_t *WTF::Thread::allThreads(WTF::Thread *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&qword_1ECF582F8);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&qword_1ECF582F8, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::allThreads(void)::$_0 &&>>);
  }
  return &qword_1ECF582F0;
}

void *WTF::Thread::allThreadsLock(WTF::Thread *this)
{
  return &_MergedGlobals_16;
}

void WTF::Thread::initializeInThread(WTF::Thread *this)
{
  char *stackaddr_np;
  int v3;
  _opaque_pthread_t *v4;
  rlim_t rlim_cur;
  _opaque_pthread_t *v6;
  unint64_t v7;
  char v8;
  rlimit *v9;
  rlimit v10;

  stackaddr_np = (char *)*((_QWORD *)this + 2);
  if (!stackaddr_np)
  {
    v3 = pthread_main_np();
    v4 = pthread_self();
    stackaddr_np = (char *)pthread_get_stackaddr_np(v4);
    if (v3)
    {
      getrlimit(3, &v10);
      if (v10.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
        rlim_cur = 0x800000;
      else
        rlim_cur = v10.rlim_cur;
    }
    else
    {
      rlim_cur = pthread_get_stacksize_np(v4);
    }
    *((_QWORD *)this + 2) = stackaddr_np;
    *((_QWORD *)this + 3) = &stackaddr_np[-rlim_cur];
  }
  *((_QWORD *)this + 10) = stackaddr_np;
  *((_QWORD *)this + 7) = (char *)this + 64;
  v6 = pthread_self();
  if (pthread_equal(v6, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
  {
    v7 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
    if (v7 != -1)
    {
      v10.rlim_cur = (rlim_t)&v8;
      v9 = &v10;
      std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
    }
    *((_QWORD *)this + 7) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
  }
}

uint64_t WTF::Thread::entryPoint(unint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  _QWORD *v4;
  char *stackaddr_np;
  int v6;
  _opaque_pthread_t *v7;
  rlim_t rlim_cur;
  _opaque_pthread_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  rlimit *v35;
  rlimit v36;

  v2 = (pthread_mutex_t *)(a1 + 40);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 40));
  pthread_setname_np(*(const char **)(a1 + 8));
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = 0;
  stackaddr_np = (char *)v4[2];
  if (!stackaddr_np)
  {
    v6 = pthread_main_np();
    v7 = pthread_self();
    stackaddr_np = (char *)pthread_get_stackaddr_np(v7);
    if (v6)
    {
      getrlimit(3, &v36);
      if (v36.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
        rlim_cur = 0x800000;
      else
        rlim_cur = v36.rlim_cur;
    }
    else
    {
      rlim_cur = pthread_get_stacksize_np(v7);
    }
    v4[2] = stackaddr_np;
    v4[3] = &stackaddr_np[-rlim_cur];
  }
  v4[10] = stackaddr_np;
  v4[7] = v4 + 8;
  v9 = pthread_self();
  if (pthread_equal(v9, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
  {
    v10 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
    if (v10 != -1)
    {
      v36.rlim_cur = (rlim_t)&v34;
      v35 = &v36;
      std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, &v35, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
    }
    v4[7] = &WTF::Thread::initializeInThread(void)::sharedStringTable;
  }
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736) = v11;
  pthread_key_init_np();
  pthread_mutex_unlock(v2);
  do
  {
    v12 = __ldaxr((unsigned int *)a1);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, (unsigned int *)a1));
  if (!v13)
  {
    atomic_store(1u, (unsigned int *)a1);
    pthread_mutex_destroy(v2);
    v22 = *(unsigned int **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (!v22)
      goto LABEL_20;
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::Thread::~Thread((WTF::Thread *)v22, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
      v25 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      if (!v25)
        goto LABEL_22;
    }
    else
    {
LABEL_20:
      v25 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      if (!v25)
      {
LABEL_22:
        WTF::fastFree(a1, v15, v16, v17, v18, v19, v20, v21);
        goto LABEL_16;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    goto LABEL_22;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void WTF::Thread::create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W4>, unsigned int a5@<W5>, uint64_t *a6@<X8>)
{
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  _opaque_pthread_t *v23;
  char *stackaddr_np;
  size_t stacksize_np;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char **v72;
  char *v73;

  v12 = atomic_load(&WTF::initialize(void)::onceKey);
  if (v12 != -1)
  {
    v73 = &v71;
    v72 = &v73;
    std::__call_once(&WTF::initialize(void)::onceKey, &v72, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
  }
  v13 = WTF::fastMalloc((WTF *)0x68);
  v14 = (unsigned int *)v13;
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_QWORD *)(v13 + 96) = 0;
  *(_DWORD *)v13 = 1;
  *(_OWORD *)(v13 + 8) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  do
  {
    v15 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
    v16 = v15 + 1;
  }
  while (__stlxr(v16, (unsigned int *)&WTF::ThreadLike::s_uid));
  *(_DWORD *)(v13 + 48) = v16;
  *(_QWORD *)(v13 + 52) = 0;
  *(_QWORD *)(v13 + 68) = 0;
  *(_QWORD *)(v13 + 60) = 0;
  *(_DWORD *)(v13 + 76) = 0;
  *(_QWORD *)(v13 + 88) = 0;
  *(_QWORD *)(v13 + 96) = 0;
  *a6 = v13;
  v17 = WTF::fastMalloc((WTF *)0x68);
  v18 = v17;
  do
    v19 = __ldaxr(v14);
  while (__stlxr(v19 + 1, v14));
  *(_QWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = a1;
  *(_QWORD *)(v17 + 16) = a2;
  v20 = *a3;
  *a3 = 0;
  *(_QWORD *)(v17 + 40) = 850045863;
  *(_QWORD *)(v17 + 24) = v20;
  *(_QWORD *)(v17 + 32) = v14;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_QWORD *)(v17 + 96) = 0;
  do
    v21 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v21 + 1, (unsigned int *)v17));
  pthread_mutex_lock((pthread_mutex_t *)(v17 + 40));
  v22 = (_QWORD *)*a6;
  if (!WTF::Thread::establishHandle(*a6, (void *)v18, 0, 0, a4, a5))
  {
    __break(0xC471u);
    JUMPOUT(0x197B21250);
  }
  *(_DWORD *)(v18 + 4) = 1;
  v23 = (_opaque_pthread_t *)v22[5];
  stackaddr_np = (char *)pthread_get_stackaddr_np(v23);
  stacksize_np = pthread_get_stacksize_np(v23);
  v22[2] = stackaddr_np;
  v22[3] = &stackaddr_np[-stacksize_np];
  pthread_mutex_unlock((pthread_mutex_t *)(v18 + 40));
  if (__ldaxr(_MergedGlobals_16))
  {
    __clrex();
  }
  else if (!__stxr(1u, _MergedGlobals_16))
  {
    goto LABEL_14;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)_MergedGlobals_16);
LABEL_14:
  if ((*(_BYTE *)(*a6 + 5) & 0x10) != 0)
    goto LABEL_39;
  v33 = atomic_load(&qword_1ECF582F8);
  if (v33 != -1)
  {
    v73 = &v71;
    v72 = &v73;
    std::__call_once(&qword_1ECF582F8, &v72, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::allThreads(void)::$_0 &&>>);
  }
  v34 = *a6;
  v35 = qword_1ECF582F0;
  if (qword_1ECF582F0
    || (WTF::HashTable<WTF::Thread *,WTF::Thread *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Thread *>,WTF::HashTraits<WTF::Thread *>,WTF::HashTraits<WTF::Thread *>>::rehash(8u, 0, v26, v27, v28, v29, v30, v31), (v35 = qword_1ECF582F0) != 0))
  {
    v36 = *(_DWORD *)(v35 - 8);
  }
  else
  {
    v36 = 0;
  }
  v37 = (~(v34 << 32) + v34) ^ ((unint64_t)(~(v34 << 32) + v34) >> 22);
  v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
  v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
  v40 = v36 & ((v39 >> 31) ^ v39);
  v41 = (uint64_t *)(v35 + 8 * v40);
  v42 = *v41;
  if (!*v41)
  {
LABEL_28:
    *v41 = v34;
    if (qword_1ECF582F0)
    {
      ++*(_DWORD *)(qword_1ECF582F0 - 12);
      v45 = qword_1ECF582F0;
      if (qword_1ECF582F0)
      {
        v46 = (*(_DWORD *)(qword_1ECF582F0 - 16) + *(_DWORD *)(qword_1ECF582F0 - 12));
        v47 = *(unsigned int *)(qword_1ECF582F0 - 4);
        if (v47 <= 0x400)
          goto LABEL_31;
        goto LABEL_36;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v45 = 0;
    }
    v46 = *(unsigned int *)(v45 - 16);
    v47 = *(unsigned int *)(v45 - 4);
    if (v47 <= 0x400)
    {
LABEL_31:
      if (3 * v47 > 4 * v46)
        goto LABEL_39;
      if (!(_DWORD)v47)
      {
        v48 = 8;
LABEL_38:
        WTF::HashTable<WTF::Thread *,WTF::Thread *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Thread *>,WTF::HashTraits<WTF::Thread *>,WTF::HashTraits<WTF::Thread *>>::rehash(v48, (unint64_t)v41, v26, v27, v28, v29, v30, v31);
        goto LABEL_39;
      }
LABEL_37:
      v48 = (_DWORD)v47 << (6 * *(_DWORD *)(v45 - 12) >= (2 * v47));
      goto LABEL_38;
    }
LABEL_36:
    if (v47 > 2 * v46)
      goto LABEL_39;
    goto LABEL_37;
  }
  v43 = 0;
  v44 = 1;
  while (v42 != v34)
  {
    if (v42 == -1)
      v43 = v41;
    v40 = (v40 + v44) & v36;
    v41 = (uint64_t *)(v35 + 8 * v40);
    v42 = *v41;
    ++v44;
    if (!*v41)
    {
      if (v43)
      {
        *v43 = 0;
        --*(_DWORD *)(qword_1ECF582F0 - 16);
        v41 = v43;
      }
      goto LABEL_28;
    }
  }
LABEL_39:
  v49 = __ldxr(_MergedGlobals_16);
  if (v49 != 1)
  {
    __clrex();
    goto LABEL_43;
  }
  if (__stlxr(0, _MergedGlobals_16))
  {
LABEL_43:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(_MergedGlobals_16, 0, v26, v27, v28, v29, v30, v31);
    goto LABEL_44;
  }
  do
  {
LABEL_44:
    v50 = __ldaxr((unsigned int *)v18);
    v51 = v50 - 1;
  }
  while (__stlxr(v51, (unsigned int *)v18));
  if (!v51)
  {
    atomic_store(1u, (unsigned int *)v18);
    pthread_mutex_destroy((pthread_mutex_t *)(v18 + 40));
    v59 = *(unsigned int **)(v18 + 32);
    *(_QWORD *)(v18 + 32) = 0;
    if (!v59)
      goto LABEL_52;
    do
    {
      v60 = __ldaxr(v59);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v59));
    if (!v61)
    {
      atomic_store(1u, v59);
      WTF::Thread::~Thread((WTF::Thread *)v59, v52, v53, v54, v55, v56, v57, v58);
      WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      v62 = *(_QWORD *)(v18 + 24);
      *(_QWORD *)(v18 + 24) = 0;
      if (!v62)
        goto LABEL_54;
    }
    else
    {
LABEL_52:
      v62 = *(_QWORD *)(v18 + 24);
      *(_QWORD *)(v18 + 24) = 0;
      if (!v62)
      {
LABEL_54:
        WTF::fastFree(v18, v52, v53, v54, v55, v56, v57, v58);
        return;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
    goto LABEL_54;
  }
}

void WTF::initialize(WTF *this)
{
  unint64_t v1;
  char v2;
  char **v3;
  char *v4;

  v1 = atomic_load(&WTF::initialize(void)::onceKey);
  if (v1 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&WTF::initialize(void)::onceKey, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
  }
}

void WTF::Thread::didExit(WTF::Thread *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WTF::Thread *v16;
  int v17;
  unsigned int v18;
  int v20;
  WTF::WordLock *v21;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  WTF *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  WTF **v36;
  unint64_t v37;
  int v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  int v41;
  WTF ***v42;
  _QWORD *v43;
  WTF *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t *v49;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  int v57;
  unsigned int i;
  unint64_t v59;
  int v60;
  int j;
  uint64_t v62;
  WTF::Thread **v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  WTF::Thread *v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v90;
  WTF **v91;
  std::__shared_weak_count *v92;
  WTF *v93;
  uint64_t v94;
  char v95;

  if (__ldaxr(_MergedGlobals_16))
  {
    __clrex();
  }
  else if (!__stxr(1u, _MergedGlobals_16))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(_MergedGlobals_16);
LABEL_5:
  v10 = atomic_load(&qword_1ECF582F8);
  if (v10 != -1)
  {
    v93 = (WTF *)&v95;
    v91 = &v93;
    std::__call_once(&qword_1ECF582F8, &v91, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::allThreads(void)::$_0 &&>>);
  }
  if (qword_1ECF582F0)
  {
    v11 = *(_DWORD *)(qword_1ECF582F0 - 8);
    v12 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = *(WTF::Thread **)(qword_1ECF582F0 + 8 * v15);
    if (v16 == this)
    {
LABEL_12:
      if (v15 != *(_DWORD *)(qword_1ECF582F0 - 4))
      {
        *(_QWORD *)(qword_1ECF582F0 + 8 * v15) = -1;
        ++*(_DWORD *)(qword_1ECF582F0 - 16);
        if (qword_1ECF582F0)
        {
          --*(_DWORD *)(qword_1ECF582F0 - 12);
          if (qword_1ECF582F0)
          {
            v18 = *(_DWORD *)(qword_1ECF582F0 - 4);
            if (6 * *(_DWORD *)(qword_1ECF582F0 - 12) < v18 && v18 >= 9)
              WTF::HashTable<WTF::Thread *,WTF::Thread *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Thread *>,WTF::HashTraits<WTF::Thread *>,WTF::HashTraits<WTF::Thread *>>::rehash(v18 >> 1, 0, a3, a4, a5, a6, a7, a8);
          }
        }
        else
        {
          MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
        }
      }
    }
    else
    {
      v17 = 1;
      while (v16)
      {
        v15 = ((_DWORD)v15 + v17) & v11;
        v16 = *(WTF::Thread **)(qword_1ECF582F0 + 8 * v15);
        ++v17;
        if (v16 == this)
          goto LABEL_12;
      }
    }
  }
  *((_BYTE *)this + 5) |= 0x10u;
  v20 = __ldxr(_MergedGlobals_16);
  if (v20 != 1)
  {
    __clrex();
LABEL_30:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(_MergedGlobals_16, 0, a3, a4, a5, a6, a7, a8);
    v93 = 0;
    v94 = 0;
    v21 = (WTF::Thread *)((char *)this + 8);
    if (__ldaxr((unint64_t *)this + 1))
      goto LABEL_28;
    goto LABEL_31;
  }
  if (__stlxr(0, _MergedGlobals_16))
    goto LABEL_30;
  v93 = 0;
  v94 = 0;
  v21 = (WTF::Thread *)((char *)this + 8);
  if (__ldaxr((unint64_t *)this + 1))
  {
LABEL_28:
    __clrex();
LABEL_32:
    WTF::WordLock::lockSlow(v21);
    goto LABEL_33;
  }
LABEL_31:
  if (__stxr(1uLL, (unint64_t *)v21))
    goto LABEL_32;
LABEL_33:
  v24 = *((_QWORD *)this + 4);
  if (v24)
  {
    v25 = *(unsigned int *)(v24 - 4);
    v26 = (_QWORD *)(v24 + 24 * v25);
    if (*(_DWORD *)(v24 - 12))
    {
      v27 = (_QWORD *)*((_QWORD *)this + 4);
      if ((_DWORD)v25)
      {
        v28 = 24 * v25;
        v27 = (_QWORD *)*((_QWORD *)this + 4);
        while ((unint64_t)(*v27 + 1) <= 1)
        {
          v27 += 3;
          v28 -= 24;
          if (!v28)
          {
            v27 = v26;
            break;
          }
        }
      }
    }
    else
    {
      v27 = (_QWORD *)(v24 + 24 * v25);
      v26 = v27;
    }
    v29 = (_QWORD *)(v24 + 24 * *(unsigned int *)(v24 - 4));
    while (v27 != v29)
    {
      v91 = 0;
      v33 = (std::__shared_weak_count *)v27[2];
      if (!v33)
        goto LABEL_62;
      v34 = std::__shared_weak_count::lock(v33);
      v35 = v34;
      v92 = v34;
      if (v34)
      {
        v36 = (WTF **)v27[1];
        v91 = v36;
        if (!v36)
          goto LABEL_52;
      }
      else
      {
        v36 = v91;
        if (!v91)
        {
LABEL_52:
          if (v34)
            goto LABEL_57;
          goto LABEL_62;
        }
      }
      if (HIDWORD(v94) == (_DWORD)v94)
      {
        v37 = WTF::Vector<std::shared_ptr<WTF::ThreadGroup>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v93, HIDWORD(v94) + 1, (unint64_t)&v91);
        v38 = HIDWORD(v94);
        *((_OWORD *)v93 + HIDWORD(v94)) = *(_OWORD *)v37;
        *(_QWORD *)v37 = 0;
        *(_QWORD *)(v37 + 8) = 0;
        HIDWORD(v94) = v38 + 1;
        v35 = v92;
        if (v92)
        {
LABEL_57:
          p_shared_owners = (unint64_t *)&v35->__shared_owners_;
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
      }
      else
      {
        v41 = HIDWORD(v94) + 1;
        v42 = (WTF ***)((char *)v93 + 16 * HIDWORD(v94));
        *v42 = v36;
        v42[1] = (WTF **)v34;
        HIDWORD(v94) = v41;
      }
LABEL_62:
      v43 = v27 + 3;
      v27 = v26;
      if (v43 != v26)
      {
        v27 = v43;
        while ((unint64_t)(*v27 + 1) <= 1)
        {
          v27 += 3;
          if (v27 == v26)
          {
            v27 = v26;
            break;
          }
        }
      }
    }
  }
  *((_BYTE *)this + 5) |= 1u;
  v30 = __ldxr((unint64_t *)v21);
  if (v30 == 1)
  {
    if (!__stlxr(0, (unint64_t *)v21))
    {
      v31 = v93;
      v32 = HIDWORD(v94);
      if (!HIDWORD(v94))
        goto LABEL_132;
      goto LABEL_69;
    }
  }
  else
  {
    __clrex();
  }
  WTF::WordLock::unlockSlow(v21);
  v31 = v93;
  v32 = HIDWORD(v94);
  if (!HIDWORD(v94))
    goto LABEL_132;
LABEL_69:
  v44 = (WTF *)((char *)v31 + 16 * v32);
  v45 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v46 = 9 * ((v45 + ~(v45 << 13)) ^ ((v45 + ~(v45 << 13)) >> 8));
  v47 = (v46 ^ (v46 >> 15)) + ~((v46 ^ (v46 >> 15)) << 27);
  v48 = (v47 >> 31) ^ v47;
  do
  {
    v49 = (unint64_t *)(*(_QWORD *)v31 + 16);
    if (__ldaxr(v49))
    {
      __clrex();
    }
    else if (!__stxr(1uLL, v49))
    {
      goto LABEL_77;
    }
    WTF::WordLock::lockSlow((WTF::WordLock *)v49);
LABEL_77:
    if (__ldaxr((unint64_t *)v21))
    {
      __clrex();
LABEL_80:
      WTF::WordLock::lockSlow(v21);
      goto LABEL_81;
    }
    if (__stxr(1uLL, (unint64_t *)v21))
      goto LABEL_80;
LABEL_81:
    v52 = *(_QWORD *)v31;
    v53 = (uint64_t *)(*(_QWORD *)v31 + 24);
    v54 = *v53;
    if (*v53)
    {
      v55 = *(_DWORD *)(v54 - 8);
      v56 = v55 & v48;
      v57 = 1;
      for (i = v55 & v48; ; i = (i + v57++) & v55)
      {
        v59 = *(_QWORD *)(v54 + 8 * i);
        if (v59 != -1)
        {
          if (!v59)
            goto LABEL_115;
          if (*(WTF::Thread **)v59 == this)
            break;
        }
      }
      v60 = *(_DWORD *)(v54 - 4);
      if (i != v60)
      {
        for (j = 1; ; ++j)
        {
          v62 = v56;
          v63 = *(WTF::Thread ***)(v54 + 8 * v56);
          if (v63 != (WTF::Thread **)-1)
          {
            if (!v63)
              goto LABEL_104;
            if (*v63 == this)
              break;
          }
          v56 = (v62 + j) & v55;
        }
        if (v60 == (_DWORD)v62)
          goto LABEL_104;
        *(_QWORD *)(v54 + 8 * v62) = -1;
        ++*(_DWORD *)(*v53 - 16);
        if (*v53)
        {
          --*(_DWORD *)(*v53 - 12);
          v64 = *v53;
          if (!*v53)
            goto LABEL_104;
        }
        else
        {
          MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
          v64 = *v53;
          if (!*v53)
          {
LABEL_104:
            v68 = *(_QWORD *)(v59 + 8);
            v69 = *(_QWORD *)(v59 + 16);
            if (v68)
            {
              *(_QWORD *)(v68 + 16) = v69;
              v69 = *(_QWORD *)(v59 + 16);
            }
            else
            {
              *(_QWORD *)(v52 + 32) = v69;
            }
            if (v69)
              v70 = (_QWORD *)(v69 + 8);
            else
              v70 = (_QWORD *)(v52 + 40);
            *v70 = v68;
            v71 = *(WTF::Thread **)v59;
            *(_QWORD *)v59 = 0;
            if (v71)
            {
              do
              {
                v72 = __ldaxr((unsigned int *)v71);
                v73 = v72 - 1;
              }
              while (__stlxr(v73, (unsigned int *)v71));
              if (!v73)
              {
                atomic_store(1u, (unsigned int *)v71);
                WTF::Thread::~Thread(v71, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
              }
            }
            WTF::fastFree(v59, a2, a3, a4, a5, a6, a7, a8);
            goto LABEL_115;
          }
        }
        v65 = 6 * *(_DWORD *)(v64 - 12);
        v66 = *(_DWORD *)(v64 - 4);
        if (v65 < v66 && v66 >= 9)
          WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>> *>>::rehash(v53, v66 >> 1, 0, a4, a5, a6, a7, a8);
        goto LABEL_104;
      }
    }
LABEL_115:
    v74 = __ldxr((unint64_t *)v21);
    if (v74 == 1)
    {
      if (!__stlxr(0, (unint64_t *)v21))
      {
        v75 = __ldxr(v49);
        if (v75 != 1)
          goto LABEL_70;
        goto LABEL_121;
      }
    }
    else
    {
      __clrex();
    }
    WTF::WordLock::unlockSlow(v21);
    v76 = __ldxr(v49);
    if (v76 != 1)
    {
LABEL_70:
      __clrex();
LABEL_71:
      WTF::WordLock::unlockSlow((WTF::WordLock *)v49);
      goto LABEL_72;
    }
LABEL_121:
    if (__stlxr(0, v49))
      goto LABEL_71;
LABEL_72:
    v31 = (WTF *)((char *)v31 + 16);
  }
  while (v31 != v44);
  v31 = v93;
  if (HIDWORD(v94))
  {
    v85 = (WTF *)((char *)v93 + 16 * HIDWORD(v94));
    do
    {
      v86 = (std::__shared_weak_count *)*((_QWORD *)v31 + 1);
      if (v86)
      {
        v87 = (unint64_t *)&v86->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      v31 = (WTF *)((char *)v31 + 16);
    }
    while (v31 != v85);
    v31 = v93;
  }
LABEL_132:
  if (v31)
    WTF::fastFree((unint64_t)v31, a2, a3, a4, a5, a6, a7, a8);
  if (__ldaxr((unint64_t *)v21))
  {
    __clrex();
    goto LABEL_137;
  }
  if (__stxr(1uLL, (unint64_t *)v21))
LABEL_137:
    WTF::WordLock::lockSlow(v21);
  *((_BYTE *)this + 5) |= 2u;
  v90 = __ldxr((unint64_t *)v21);
  if (v90 != 1)
  {
    __clrex();
    goto LABEL_142;
  }
  if (__stlxr(0, (unint64_t *)v21))
LABEL_142:
    WTF::WordLock::unlockSlow(v21);
}

uint64_t *WTF::Thread::addToThreadGroup(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v10;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  uint64_t *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  _QWORD *v55;
  _BYTE v56[24];

  v10 = (unint64_t *)(a1 + 8);
  if (__ldaxr((unint64_t *)(a1 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1uLL, v10))
  {
    goto LABEL_5;
  }
  WTF::WordLock::lockSlow((WTF::WordLock *)(a1 + 8));
LABEL_5:
  if ((*(_BYTE *)(a1 + 5) & 1) != 0)
  {
    v33 = 2;
    v35 = __ldxr(v10);
    if (v35 == 1)
      goto LABEL_24;
    goto LABEL_28;
  }
  do
    v12 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v12 + 1, (unsigned int *)a1));
  *(_QWORD *)&v54 = a1;
  WTF::ListHashSet<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>,WTF::DefaultHash<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>>>::add(a3 + 3, (uint64_t *)&v54, a4, a5, a6, a7, a8, (uint64_t)v56);
  v20 = v56[16];
  v21 = (unsigned int *)v54;
  *(_QWORD *)&v54 = 0;
  if (v21)
  {
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::Thread::~Thread((WTF::Thread *)v21, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
      if (v20)
        goto LABEL_11;
      goto LABEL_27;
    }
  }
  if (!v20)
  {
LABEL_27:
    v33 = 1;
    v45 = __ldxr(v10);
    if (v45 == 1)
      goto LABEL_24;
LABEL_28:
    __clrex();
LABEL_29:
    WTF::WordLock::unlockSlow((WTF::WordLock *)v10);
    return (uint64_t *)v33;
  }
LABEL_11:
  v55 = a3;
  v24 = (std::__shared_weak_count *)a3[1];
  if (v24)
  {
    v25 = *a3;
    v26 = std::__shared_weak_count::lock(v24);
    if (v26)
    {
      v27 = v26;
      v28 = (uint64_t *)(a1 + 32);
      *(_QWORD *)&v54 = v25;
      *((_QWORD *)&v54 + 1) = v26;
      p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v27);
      }
      WTF::HashMap<WTF::ThreadGroup *,std::weak_ptr<WTF::ThreadGroup>,WTF::DefaultHash<WTF::ThreadGroup *>,WTF::HashTraits<WTF::ThreadGroup *>,WTF::HashTraits<std::weak_ptr<WTF::ThreadGroup>>,WTF::HashTableTraits>::add<std::weak_ptr<WTF::ThreadGroup>>(v28, (uint64_t *)&v55, &v54, (uint64_t)v56);
      if (*((_QWORD *)&v54 + 1))
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v54 + 1));
      v33 = 0;
      v34 = __ldxr(v10);
      if (v34 != 1)
        goto LABEL_28;
LABEL_24:
      if (!__stlxr(0, v10))
        return (uint64_t *)v33;
      goto LABEL_29;
    }
  }
  std::__throw_bad_weak_ptr[abi:sn180100]();
  return WTF::ListHashSet<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>,WTF::DefaultHash<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>>>::add(v46, v47, v48, v49, v50, v51, v52, v53);
}

uint64_t *WTF::ListHashSet<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>,WTF::DefaultHash<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t *v9;
  uint64_t v11;
  int v12;
  uint64_t **v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  unsigned int v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t **v33;
  uint64_t *v34;

  v9 = result;
  v11 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>> *>>::rehash(result, 8uLL, 0, a3, a4, a5, a6, a7), (v11 = *v9) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = 0;
  v14 = ~(*a2 << 32) + *a2;
  v15 = 9
      * (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) ^ (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = (v16 >> 31) ^ v16;
  for (i = 1; ; ++i)
  {
    v19 = v17 & v12;
    v20 = (uint64_t **)(v11 + 8 * (v17 & v12));
    v21 = *v20;
    if (*v20 == (uint64_t *)-1)
    {
      v13 = (uint64_t **)(v11 + 8 * v19);
      goto LABEL_6;
    }
    if (!v21)
      break;
    if (*v21 == *a2)
    {
      *(_QWORD *)a8 = v9;
      *(_QWORD *)(a8 + 8) = v21;
      *(_BYTE *)(a8 + 16) = 0;
      return result;
    }
LABEL_6:
    v17 = i + v19;
  }
  if (v13)
  {
    *v13 = 0;
    --*(_DWORD *)(*v9 - 16);
    v20 = v13;
  }
  result = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  v27 = *a2;
  *a2 = 0;
  result[1] = 0;
  result[2] = 0;
  *result = v27;
  *v20 = result;
  if (*v9)
  {
    ++*(_DWORD *)(*v9 - 12);
    v28 = *v9;
    if (*v9)
      goto LABEL_15;
LABEL_20:
    v29 = *(unsigned int *)(v28 - 16);
    v30 = *(unsigned int *)(v28 - 4);
    if (v30 > 0x400)
      goto LABEL_21;
LABEL_16:
    if (3 * v30 <= 4 * v29)
    {
      if (!(_DWORD)v30)
      {
        v31 = 8;
        goto LABEL_23;
      }
LABEL_22:
      v31 = ((_DWORD)v30 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v30)));
LABEL_23:
      v20 = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>> *>>::rehash(v9, v31, (uint64_t)v20, v22, v23, v24, v25, v26);
      result = *v20;
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    v28 = *v9;
    if (!*v9)
      goto LABEL_20;
LABEL_15:
    v29 = (*(_DWORD *)(v28 - 16) + *(_DWORD *)(v28 - 12));
    v30 = *(unsigned int *)(v28 - 4);
    if (v30 <= 0x400)
      goto LABEL_16;
LABEL_21:
    if (v30 <= 2 * v29)
      goto LABEL_22;
  }
  v32 = v9[2];
  result[1] = v32;
  result[2] = 0;
  if (v32)
    v33 = (uint64_t **)(v32 + 16);
  else
    v33 = (uint64_t **)(v9 + 1);
  *v33 = result;
  v9[2] = (uint64_t)result;
  v34 = *v20;
  *(_QWORD *)a8 = v9;
  *(_QWORD *)(a8 + 8) = v34;
  *(_BYTE *)(a8 + 16) = 1;
  return result;
}

void WTF::HashMap<WTF::ThreadGroup *,std::weak_ptr<WTF::ThreadGroup>,WTF::DefaultHash<WTF::ThreadGroup *>,WTF::HashTraits<WTF::ThreadGroup *>,WTF::HashTraits<std::weak_ptr<WTF::ThreadGroup>>,WTF::HashTableTraits>::add<std::weak_ptr<WTF::ThreadGroup>>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  char v27;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ThreadGroup *,WTF::KeyValuePair<WTF::ThreadGroup *,std::weak_ptr<WTF::ThreadGroup>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ThreadGroup *,std::weak_ptr<WTF::ThreadGroup>>>,WTF::DefaultHash<WTF::ThreadGroup *>,WTF::HashMap<WTF::ThreadGroup *,std::weak_ptr<WTF::ThreadGroup>,WTF::DefaultHash<WTF::ThreadGroup *>,WTF::HashTraits<WTF::ThreadGroup *>,WTF::HashTraits<std::weak_ptr<WTF::ThreadGroup>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ThreadGroup *>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = (_QWORD *)(v8 + 24 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v25 = 0;
        else
          v25 = *(_DWORD *)(v8 - 4);
        v27 = 0;
        v26 = v8 + 24 * v25;
        goto LABEL_31;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (_QWORD *)(v8 + 24 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v21 = (std::__shared_weak_count *)v16[2];
  *(_OWORD *)(v16 + 1) = v20;
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  if (*a1)
  {
    ++*(_DWORD *)(*a1 - 12);
    v22 = *a1;
    if (*a1)
      goto LABEL_16;
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    v22 = *a1;
    if (*a1)
    {
LABEL_16:
      v23 = (*(_DWORD *)(v22 - 16) + *(_DWORD *)(v22 - 12));
      v24 = *(unsigned int *)(v22 - 4);
      if (v24 <= 0x400)
        goto LABEL_17;
LABEL_25:
      if (v24 > 2 * v23)
        goto LABEL_28;
      goto LABEL_26;
    }
  }
  v23 = *(unsigned int *)(v22 - 16);
  v24 = *(unsigned int *)(v22 - 4);
  if (v24 > 0x400)
    goto LABEL_25;
LABEL_17:
  if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v16 = WTF::HashTable<WTF::ThreadGroup *,WTF::KeyValuePair<WTF::ThreadGroup *,std::weak_ptr<WTF::ThreadGroup>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ThreadGroup *,std::weak_ptr<WTF::ThreadGroup>>>,WTF::DefaultHash<WTF::ThreadGroup *>,WTF::HashMap<WTF::ThreadGroup *,std::weak_ptr<WTF::ThreadGroup>,WTF::DefaultHash<WTF::ThreadGroup *>,WTF::HashTraits<WTF::ThreadGroup *>,WTF::HashTraits<std::weak_ptr<WTF::ThreadGroup>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ThreadGroup *>>::rehash(a1, 8u, v16);
      v22 = *a1;
      if (!*a1)
      {
LABEL_20:
        LODWORD(v24) = 0;
        goto LABEL_28;
      }
LABEL_27:
      LODWORD(v24) = *(_DWORD *)(v22 - 4);
      goto LABEL_28;
    }
LABEL_26:
    v16 = WTF::HashTable<WTF::ThreadGroup *,WTF::KeyValuePair<WTF::ThreadGroup *,std::weak_ptr<WTF::ThreadGroup>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ThreadGroup *,std::weak_ptr<WTF::ThreadGroup>>>,WTF::DefaultHash<WTF::ThreadGroup *>,WTF::HashMap<WTF::ThreadGroup *,std::weak_ptr<WTF::ThreadGroup>,WTF::DefaultHash<WTF::ThreadGroup *>,WTF::HashTraits<WTF::ThreadGroup *>,WTF::HashTraits<std::weak_ptr<WTF::ThreadGroup>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ThreadGroup *>>::rehash(a1, (_DWORD)v24 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v24)), v16);
    v22 = *a1;
    if (!*a1)
      goto LABEL_20;
    goto LABEL_27;
  }
LABEL_28:
  v26 = v22 + 24 * v24;
  v27 = 1;
LABEL_31:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v26;
  *(_BYTE *)(a4 + 16) = v27;
}

uint64_t WTF::HashMap<WTF::ThreadGroup *,std::weak_ptr<WTF::ThreadGroup>,WTF::DefaultHash<WTF::ThreadGroup *>,WTF::HashTraits<WTF::ThreadGroup *>,WTF::HashTraits<std::weak_ptr<WTF::ThreadGroup>>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unsigned int v15;
  unsigned int v16;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = ~(*a2 << 32) + *a2;
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
  v9 = (uint64_t *)(v2 + 24 * v8);
  v10 = *v9;
  if (*v9 != *a2)
  {
    v11 = 1;
    while (v10)
    {
      v8 = (v8 + v11) & v4;
      v9 = (uint64_t *)(v2 + 24 * v8);
      v10 = *v9;
      ++v11;
      if (*v9 == *a2)
        goto LABEL_6;
    }
    return 0;
  }
LABEL_6:
  if ((uint64_t *)(v2 + 24 * *(unsigned int *)(v2 - 4)) == v9)
    return 0;
  *v9 = -1;
  v12 = (std::__shared_weak_count *)v9[2];
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  ++*(_DWORD *)(*a1 - 16);
  if (*a1)
  {
    --*(_DWORD *)(*a1 - 12);
    v13 = *a1;
    if (!*a1)
      return 1;
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
    v13 = *a1;
    if (!*a1)
      return 1;
  }
  v15 = 6 * *(_DWORD *)(v13 - 12);
  v16 = *(_DWORD *)(v13 - 4);
  if (v15 >= v16 || v16 < 9)
    return 1;
  WTF::HashTable<WTF::ThreadGroup *,WTF::KeyValuePair<WTF::ThreadGroup *,std::weak_ptr<WTF::ThreadGroup>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ThreadGroup *,std::weak_ptr<WTF::ThreadGroup>>>,WTF::DefaultHash<WTF::ThreadGroup *>,WTF::HashMap<WTF::ThreadGroup *,std::weak_ptr<WTF::ThreadGroup>,WTF::DefaultHash<WTF::ThreadGroup *>,WTF::HashTraits<WTF::ThreadGroup *>,WTF::HashTraits<std::weak_ptr<WTF::ThreadGroup>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ThreadGroup *>>::rehash(a1, v16 >> 1, 0);
  return 1;
}

uint64_t WTF::Thread::numberOfThreadGroups(WTF::Thread *this)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v2 = (unint64_t *)((char *)this + 8);
  if (__ldaxr((unint64_t *)this + 1))
  {
    __clrex();
  }
  else if (!__stxr(1uLL, v2))
  {
    goto LABEL_5;
  }
  WTF::WordLock::lockSlow((WTF::Thread *)((char *)this + 8));
LABEL_5:
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 12);
    v6 = __ldxr(v2);
    if (v6 == 1)
      goto LABEL_7;
LABEL_10:
    __clrex();
    goto LABEL_11;
  }
  v5 = 0;
  v8 = __ldxr(v2);
  if (v8 != 1)
    goto LABEL_10;
LABEL_7:
  if (!__stlxr(0, v2))
    return v5;
LABEL_11:
  WTF::WordLock::unlockSlow((WTF::WordLock *)v2);
  return v5;
}

uint64_t WTF::Thread::exchangeIsCompilationThread(WTF::Thread *this)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  char v4;

  v1 = (int)this;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2)
    v2 = WTF::Thread::initializeCurrentTLS(0);
  v3 = *(unsigned __int8 *)(v2 + 5);
  if (v1)
    v4 = 8;
  else
    v4 = 0;
  *(_BYTE *)(v2 + 5) = v3 & 0xF7 | v4;
  return (v3 >> 3) & 1;
}

uint64_t WTF::Thread::registerGCThread(char a1)
{
  uint64_t result;

  result = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!result)
    result = WTF::Thread::initializeCurrentTLS(0);
  *(_BYTE *)(result + 5) = *(_BYTE *)(result + 5) & 0x3F | (a1 << 6);
  return result;
}

uint64_t WTF::Thread::mayBeGCThread(WTF::Thread *this)
{
  unint64_t StatusReg;
  uint64_t v2;
  uint64_t v3;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v2 = *(_QWORD *)(StatusReg + 736);
  if (!v2)
  {
    if (*(unsigned __int8 *)(WTF::Thread::initializeCurrentTLS(0) + 5) <= 0x3Fu)
      goto LABEL_3;
    return 1;
  }
  if (*(unsigned __int8 *)(v2 + 5) > 0x3Fu)
    return 1;
LABEL_3:
  v3 = *(_QWORD *)(StatusReg + 736);
  if (!v3)
    v3 = WTF::Thread::initializeCurrentTLS(0);
  return (*(unsigned __int8 *)(v3 + 5) >> 3) & 1;
}

uint64_t WTF::Thread::registerJSThread(uint64_t this, WTF::Thread *a2)
{
  *(_BYTE *)(this + 5) |= 0x20u;
  return this;
}

uint64_t WTF::Thread::setCurrentThreadIsUserInteractive(WTF::Thread *this)
{
  int v1;
  int v2;
  qos_class_t v3;

  v1 = (int)this;
  if (WTF::globalMaxQOSclass >= 0x21)
    v2 = 33;
  else
    v2 = WTF::globalMaxQOSclass;
  if (WTF::globalMaxQOSclass)
    v3 = v2;
  else
    v3 = QOS_CLASS_USER_INTERACTIVE;
  return pthread_set_qos_class_self_np(v3, v1);
}

uint64_t WTF::Thread::setCurrentThreadIsUserInitiated(WTF::Thread *this)
{
  int v1;
  int v2;
  qos_class_t v3;

  v1 = (int)this;
  if (WTF::globalMaxQOSclass >= 0x19)
    v2 = 25;
  else
    v2 = WTF::globalMaxQOSclass;
  if (WTF::globalMaxQOSclass)
    v3 = v2;
  else
    v3 = QOS_CLASS_USER_INITIATED;
  return pthread_set_qos_class_self_np(v3, v1);
}

uint64_t WTF::Thread::currentThreadQOS(WTF::Thread *this)
{
  _opaque_pthread_t *v1;
  unsigned int v2;
  unint64_t v3;
  int __relative_priority;
  qos_class_t __qos_class;

  __qos_class = QOS_CLASS_DEFAULT;
  __relative_priority = 0;
  v1 = pthread_self();
  pthread_get_qos_class_np(v1, &__qos_class, &__relative_priority);
  HIDWORD(v3) = __qos_class - 9;
  LODWORD(v3) = __qos_class - 9;
  v2 = v3 >> 3;
  if (v2 > 3)
    return 2;
  else
    return dword_199123460[v2];
}

uint64_t WTF::Thread::setGlobalMaxQOSClass(uint64_t this, qos_class_t a2)
{
  atomic_store(this, &pas_scavenger_requested_qos_class);
  WTF::globalMaxQOSclass = this;
  return this;
}

uint64_t WTF::Thread::dump(WTF::Thread *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v4;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v4, "%s", "Thread:");
  WTF::PrintStream::printf(v4, "%p", this);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void std::__throw_bad_weak_ptr[abi:sn180100]()
{
  std::__libcpp_verbose_abort("bad_weak_ptr was thrown in -fno-exceptions mode");
  std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::allThreads(void)::$_0 &&>>();
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::allThreads(void)::$_0 &&>>()
{
  qword_1ECF582F0 = 0;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>()
{
  WTF::Thread::initializeInThread(void)::sharedStringTable = 0;
}

void WTF::HashTable<WTF::Thread *,WTF::Thread *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Thread *>,WTF::HashTraits<WTF::Thread *>,WTF::HashTraits<WTF::Thread *>>::rehash(unsigned int a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  int v11;
  _DWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;

  v9 = qword_1ECF582F0;
  if (qword_1ECF582F0)
  {
    v10 = *(_DWORD *)(qword_1ECF582F0 - 4);
    v11 = *(_DWORD *)(qword_1ECF582F0 - 12);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = (_DWORD *)WTF::fastZeroedMalloc(8 * a1 + 16, a2, a3, a4, a5, a6, a7, a8);
  qword_1ECF582F0 = (uint64_t)(v12 + 4);
  v12[2] = a1 - 1;
  v12[3] = a1;
  *v12 = 0;
  *(_DWORD *)(qword_1ECF582F0 - 12) = v11;
  if (v10)
  {
    for (i = 0; i != v10; ++i)
    {
      v21 = *(_QWORD *)(v9 + 8 * i);
      if ((unint64_t)(v21 + 1) >= 2)
      {
        if (qword_1ECF582F0)
          v22 = *(_DWORD *)(qword_1ECF582F0 - 8);
        else
          v22 = 0;
        v23 = (~(v21 << 32) + v21) ^ ((unint64_t)(~(v21 << 32) + v21) >> 22);
        v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
        v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
        v26 = v22 & ((v25 >> 31) ^ v25);
        v27 = 1;
        do
        {
          v28 = v26;
          v13 = *(void **)(qword_1ECF582F0 + 8 * v26);
          v26 = (v26 + v27++) & v22;
        }
        while (v13);
        *(_QWORD *)(qword_1ECF582F0 + 8 * v28) = v21;
      }
    }
  }
  if (v9)
    WTF::fastFree(v9 - 16, v13, v14, v15, v16, v17, v18, v19);
}

unint64_t WTF::Vector<std::shared_ptr<WTF::ThreadGroup>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = *(unsigned int *)(a1 + 12), v5 + 16 * v6 <= a3))
  {
    v22 = *(unsigned int *)(a1 + 8);
    v23 = v22 + (v22 >> 2);
    if (v23 >= 0x10)
      v24 = v23 + 1;
    else
      v24 = 16;
    if (v24 <= a2)
      v25 = a2;
    else
      v25 = v24;
    if (v25 > v22)
    {
      if (v25 >> 28)
        goto LABEL_35;
      v26 = *(unsigned int *)(a1 + 12);
      v27 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v25));
      *(_DWORD *)(a1 + 8) = v25;
      *(_QWORD *)a1 = v27;
      if ((_DWORD)v26)
      {
        v35 = 16 * v26;
        v36 = v5;
        do
        {
          *v27++ = *(_OWORD *)v36;
          *(_QWORD *)v36 = 0;
          *(_QWORD *)(v36 + 8) = 0;
          v36 += 16;
          v35 -= 16;
        }
        while (v35);
      }
      if (v5)
      {
        if (*(_QWORD *)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v28, v29, v30, v31, v32, v33, v34);
      }
    }
    return a3;
  }
  v7 = *(unsigned int *)(a1 + 8);
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= a2)
    v10 = a2;
  else
    v10 = v9;
  if (v10 > v7)
  {
    if (!(v10 >> 28))
    {
      v11 = WTF::fastMalloc((WTF *)(16 * v10));
      v19 = 0;
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      do
      {
        v20 = (_QWORD *)(v5 + v19);
        *(_OWORD *)(v11 + v19) = *(_OWORD *)(v5 + v19);
        *v20 = 0;
        v20[1] = 0;
        v19 += 16;
      }
      while (16 * v6 != v19);
      v21 = *(_QWORD *)a1;
      if (v5)
      {
        if (v21 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
        v21 = *(_QWORD *)a1;
      }
      return v21 + 16 * ((uint64_t)(a3 - v5) >> 4);
    }
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x197B2274CLL);
  }
  v21 = *(_QWORD *)a1;
  return v21 + 16 * ((uint64_t)(a3 - v5) >> 4);
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>> *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD **v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (_QWORD **)(v11 + 8 * v22);
      v25 = *v24;
      if ((unint64_t)*v24 + 1 >= 2)
      {
        v26 = *a1;
        v27 = *a1 ? *(_DWORD *)(v26 - 8) : 0;
        v28 = ~(*v25 << 32) + *v25;
        v29 = (v28 ^ (v28 >> 22)) + ~((v28 ^ (v28 >> 22)) << 13);
        v30 = (9 * (v29 ^ (v29 >> 8))) ^ ((9 * (v29 ^ (v29 >> 8))) >> 15);
        v31 = v27 & (((v30 + ~(v30 << 27)) >> 31) ^ (v30 + ~((_DWORD)v30 << 27)));
        v32 = 1;
        do
        {
          v33 = v31;
          v34 = *(_QWORD *)(v26 + 8 * v31);
          v31 = (v31 + v32++) & v27;
        }
        while (v34);
        v35 = (_QWORD *)(v26 + 8 * v33);
        *v35 = v25;
        if (v24 == (_QWORD **)a3)
          v23 = v35;
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
  }
  if (v11)
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

_QWORD *WTF::HashTable<WTF::ThreadGroup *,WTF::KeyValuePair<WTF::ThreadGroup *,std::weak_ptr<WTF::ThreadGroup>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ThreadGroup *,std::weak_ptr<WTF::ThreadGroup>>>,WTF::DefaultHash<WTF::ThreadGroup *>,WTF::HashMap<WTF::ThreadGroup *,std::weak_ptr<WTF::ThreadGroup>,WTF::DefaultHash<WTF::ThreadGroup *>,WTF::HashTraits<WTF::ThreadGroup *>,WTF::HashTraits<std::weak_ptr<WTF::ThreadGroup>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ThreadGroup *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  _QWORD *v31;
  unsigned int v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  _QWORD *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v15 = v7;
  v16 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  *a1 = v16;
  *(_DWORD *)(v15 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v17 = 0;
    v18 = 0;
    v19 = v5;
    do
    {
      v20 = (uint64_t *)(v4 + 24 * v17);
      v21 = *v20;
      if (*v20 != -1)
      {
        if (v21)
        {
          v23 = *a1;
          if (*a1)
            v24 = *(_DWORD *)(v23 - 8);
          else
            v24 = 0;
          v25 = (~(v21 << 32) + v21) ^ ((unint64_t)(~(v21 << 32) + v21) >> 22);
          v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
          v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
          v28 = v24 & ((v27 >> 31) ^ v27);
          v29 = 1;
          do
          {
            v30 = v28;
            v31 = (_QWORD *)(v23 + 24 * v28);
            v28 = (v28 + v29++) & v24;
          }
          while (*v31);
          v32 = v30;
          v33 = *(std::__shared_weak_count **)(v23 + 24 * v30 + 16);
          if (v33)
          {
            std::__shared_weak_count::__release_weak(v33);
            v21 = *v20;
          }
          *v31 = v21;
          v34 = v4 + 24 * v17;
          *(_OWORD *)(v23 + 24 * v32 + 8) = *(_OWORD *)(v34 + 8);
          *(_QWORD *)(v34 + 8) = 0;
          *(_QWORD *)(v34 + 16) = 0;
          if (v20 == a3)
            v18 = v31;
        }
        else
        {
          v22 = *(std::__shared_weak_count **)(v4 + 24 * v17 + 16);
          if (v22)
            std::__shared_weak_count::__release_weak(v22);
        }
      }
      ++v17;
    }
    while (v17 != v19);
  }
  else
  {
    v18 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
  return v18;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>(WTF::Config *a1)
{
  unint64_t v1;
  WTF::WallTime *v2;
  unint64_t v3;
  unint64_t v4;
  double v5;
  int v6;
  double v7;
  unsigned int v8;
  unint64_t v9;
  BOOL v10;
  double v11;
  char *v12;
  char v13;
  char **v14;
  char *v15;

  v1 = atomic_load(&WTF::setPermissionsOfConfigPage(void)::onceFlag);
  if (v1 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once(&WTF::setPermissionsOfConfigPage(void)::onceFlag, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::setPermissionsOfConfigPage(void)::$_0 &&>>);
  }
  v2 = (WTF::WallTime *)WTF::Config::initialize(a1);
  v3 = atomic_load(&Gigacage::ensureGigacage(void)::onceFlag);
  if (v3 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once(&Gigacage::ensureGigacage(void)::onceFlag, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<Gigacage::ensureGigacage(void)::$_0 &&>>);
  }
  if (byte_1ECF4C090)
  {
    __break(0xC471u);
    JUMPOUT(0x197B22BA4);
  }
  {
    if (byte_1ECF4C094)
      goto LABEL_8;
    goto LABEL_28;
  }
  v5 = floor(WTF::WallTime::now(v2) * 1000.0);
  v6 = (int)(floor(v5 / 3.1556952e10) + 1970.0);
  v7 = (floor(((double)v6 + -1.0) / 400.0)
      + -4.0
      + floor(((double)v6 + -1.0) * 0.25)
      + -492.0
      + ((double)v6 + -1970.0) * 365.0
      - (floor(((double)v6 + -1.0) / 100.0)
       + -19.0))
     * 86400000.0;
  if (v7 <= v5)
  {
    HIDWORD(v9) = -1030792151 * v6 + 85899344;
    LODWORD(v9) = HIDWORD(v9);
    v8 = v9 >> 4;
    LODWORD(v9) = HIDWORD(v9);
    v10 = (v9 >> 2) <= 0x28F5C28 && v8 >= 0xA3D70B;
    v11 = 365.0;
    if (!v10)
      v11 = 366.0;
    if ((v6 & 3) != 0)
      v11 = 365.0;
    if (v7 + v11 * 86400000.0 <= v5)
      ++v6;
  }
  else
  {
    --v6;
  }
  if (v6 >= 2010)
    v6 = 2010;
  WTF::equivalentYearForDST(int)::minYear = v6;
  if (!byte_1ECF4C094)
  {
LABEL_28:
    dword_1ECF4C098 = 30;
    v12 = getenv("JSC_SIGNAL_FOR_GC");
    if (v12)
    {
      LODWORD(v15) = 0;
      if (sscanf(v12, "%d", &v15) == 1)
        dword_1ECF4C098 = (int)v15;
    }
  }
LABEL_8:
  byte_1ECF4C095 = 1;
  v4 = atomic_load(&initializeLibraryPathDiagnostics::onceFlag);
  if (v4 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once(&initializeLibraryPathDiagnostics::onceFlag, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<initializeLibraryPathDiagnostics::$_0 &&>>);
  }
  if (byte_1ECF4C090)
  {
    __break(0xC471u);
    JUMPOUT(0x197B22BC4);
  }
}

void WTF::Thread::~Thread(WTF::Thread *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count **v22;

  v9 = (unsigned int *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (!v9)
    goto LABEL_5;
  v10 = v9 + 2;
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
  {
    atomic_store(1u, v9 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    v13 = (_DWORD *)*((_QWORD *)this + 8);
    if (!v13)
      goto LABEL_24;
  }
  else
  {
LABEL_5:
    v13 = (_DWORD *)*((_QWORD *)this + 8);
    if (!v13)
      goto LABEL_24;
  }
  v14 = *(v13 - 1);
  v15 = &v13[v14];
  if (*(v13 - 3))
  {
    v16 = v13;
    if ((_DWORD)v14)
    {
      v17 = 4 * v14;
      v16 = v13;
      while (*v16 <= 1u)
      {
        ++v16;
        v17 -= 4;
        if (!v17)
        {
          v16 = v15;
          break;
        }
      }
    }
  }
  else
  {
    v16 = &v13[v14];
    v15 = v16;
  }
  v18 = &v13[*(v13 - 1)];
  if (v18 != v16)
  {
    do
    {
      v19 = v16 + 1;
      *(_DWORD *)(16 * *v16 + 0x10) &= ~0x10u;
      v16 = v15;
      if (v19 != v15)
      {
        v16 = v19;
        while (*v16 <= 1u)
        {
          if (++v16 == v15)
          {
            v16 = v15;
            break;
          }
        }
      }
    }
    while (v16 != v18);
    v13 = (_DWORD *)*((_QWORD *)this + 8);
  }
LABEL_24:
  if (v13)
    WTF::fastFree((unint64_t)(v13 - 4), a2, a3, a4, a5, a6, a7, a8);
  v20 = *((_QWORD *)this + 4);
  if (v20)
  {
    v21 = *(unsigned int *)(v20 - 4);
    if ((_DWORD)v21)
    {
      v22 = (std::__shared_weak_count **)(v20 + 16);
      do
      {
        if (*(v22 - 2) != (std::__shared_weak_count *)-1)
        {
          if (*v22)
            std::__shared_weak_count::__release_weak(*v22);
        }
        v22 += 3;
        --v21;
      }
      while (v21);
    }
    WTF::fastFree(v20 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count **v22;

  v9 = (unsigned int *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (!v9)
    goto LABEL_5;
  v10 = v9 + 2;
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
  {
    atomic_store(1u, v9 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    v13 = (_DWORD *)*((_QWORD *)this + 8);
    if (!v13)
      goto LABEL_24;
  }
  else
  {
LABEL_5:
    v13 = (_DWORD *)*((_QWORD *)this + 8);
    if (!v13)
      goto LABEL_24;
  }
  v14 = *(v13 - 1);
  v15 = &v13[v14];
  if (*(v13 - 3))
  {
    v16 = v13;
    if ((_DWORD)v14)
    {
      v17 = 4 * v14;
      v16 = v13;
      while (*v16 <= 1u)
      {
        ++v16;
        v17 -= 4;
        if (!v17)
        {
          v16 = v15;
          break;
        }
      }
    }
  }
  else
  {
    v16 = &v13[v14];
    v15 = v16;
  }
  v18 = &v13[*(v13 - 1)];
  if (v18 != v16)
  {
    do
    {
      v19 = v16 + 1;
      *(_DWORD *)(16 * *v16 + 0x10) &= ~0x10u;
      v16 = v15;
      if (v19 != v15)
      {
        v16 = v19;
        while (*v16 <= 1u)
        {
          if (++v16 == v15)
          {
            v16 = v15;
            break;
          }
        }
      }
    }
    while (v16 != v18);
    v13 = (_DWORD *)*((_QWORD *)this + 8);
  }
LABEL_24:
  if (v13)
    WTF::fastFree((unint64_t)(v13 - 4), a2, a3, a4, a5, a6, a7, a8);
  v20 = *((_QWORD *)this + 4);
  if (v20)
  {
    v21 = *(unsigned int *)(v20 - 4);
    if ((_DWORD)v21)
    {
      v22 = (std::__shared_weak_count **)(v20 + 16);
      do
      {
        if (*(v22 - 2) != (std::__shared_weak_count *)-1)
        {
          if (*v22)
            std::__shared_weak_count::__release_weak(*v22);
        }
        v22 += 3;
        --v21;
      }
      while (v21);
    }
    WTF::fastFree(v20 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
}

BOOL WTF::Thread::establishHandle(uint64_t a1, void *a2, size_t a3, char a4, int a5, unsigned int a6)
{
  int v12;
  qos_class_t v13;
  int v14;
  _opaque_pthread_t *v15;
  unint64_t *v16;
  unint64_t v18;
  pthread_t v20;
  pthread_attr_t __attr;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  pthread_attr_init(&__attr);
  if (WTF::globalMaxQOSclass >= dword_199123470[a5])
    v12 = dword_199123470[a5];
  else
    v12 = WTF::globalMaxQOSclass;
  if (WTF::globalMaxQOSclass)
    v13 = v12;
  else
    v13 = dword_199123470[a5];
  pthread_attr_set_qos_class_np(&__attr, v13, 0);
  if (a6 > 2)
  {
    pthread_attr_setschedpolicy(&__attr, 1);
    if (!a4)
      goto LABEL_12;
    goto LABEL_11;
  }
  pthread_attr_setschedpolicy(&__attr, dword_199123484[(char)a6]);
  if (a4)
LABEL_11:
    pthread_attr_setstacksize(&__attr, a3);
LABEL_12:
  v14 = pthread_create(&v20, &__attr, (void *(__cdecl *)(void *))WTF::wtfThreadEntryPoint, a2);
  pthread_attr_destroy(&__attr);
  if (v14)
    return v14 == 0;
  v15 = v20;
  v16 = (unint64_t *)(a1 + 8);
  if (__ldaxr((unint64_t *)(a1 + 8)))
  {
    __clrex();
LABEL_16:
    WTF::WordLock::lockSlow((WTF::WordLock *)(a1 + 8));
    goto LABEL_17;
  }
  if (__stxr(1uLL, v16))
    goto LABEL_16;
LABEL_17:
  *(_QWORD *)(a1 + 40) = v15;
  *(_DWORD *)(a1 + 52) = pthread_mach_thread_np(v15);
  v18 = __ldxr(v16);
  if (v18 == 1)
  {
    if (!__stlxr(0, v16))
      return v14 == 0;
  }
  else
  {
    __clrex();
  }
  WTF::WordLock::unlockSlow((WTF::WordLock *)(a1 + 8));
  return v14 == 0;
}

uint64_t WTF::wtfThreadEntryPoint(WTF *this, void *a2)
{
  WTF::Thread::entryPoint((unint64_t)this);
  return 0;
}

void WTF::Thread::changePriority(WTF::Thread *this, int a2)
{
  unint64_t *v4;
  unint64_t v6;
  unint64_t v7;
  sched_param v8;
  int v9;

  v4 = (unint64_t *)((char *)this + 8);
  if (__ldaxr((unint64_t *)this + 1))
  {
    __clrex();
  }
  else if (!__stxr(1uLL, v4))
  {
    goto LABEL_5;
  }
  WTF::WordLock::lockSlow((WTF::Thread *)((char *)this + 8));
LABEL_5:
  v9 = 0;
  if (pthread_getschedparam(*((pthread_t *)this + 5), &v9, &v8))
  {
    v6 = __ldxr(v4);
    if (v6 == 1)
      goto LABEL_7;
LABEL_10:
    __clrex();
    goto LABEL_11;
  }
  v8.sched_priority += a2;
  pthread_setschedparam(*((pthread_t *)this + 5), v9, &v8);
  v7 = __ldxr(v4);
  if (v7 != 1)
    goto LABEL_10;
LABEL_7:
  if (__stlxr(0, v4))
LABEL_11:
    WTF::WordLock::unlockSlow((WTF::WordLock *)v4);
}

uint64_t WTF::Thread::setThreadTimeConstraints(uint64_t a1, int a2, double a3, double a4, double a5)
{
  double v6;
  double v7;
  unint64_t v10;
  double v11;
  double v12;
  unint64_t v13;
  double v14;
  double v15;
  unint64_t v16;
  integer_t policy_info[2];
  int v19;
  int v20;
  char v21;
  integer_t **v22;
  integer_t *v23;

  v6 = a5;
  v7 = a4;
  v10 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v10 != -1)
  {
    *(_QWORD *)policy_info = &v22;
    v23 = policy_info;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v23, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(a5) = WTF::machTimebaseInfo(void)::timebaseInfo;
  LODWORD(a4) = dword_1ECF4400C;
  v11 = a3 * 1000000000.0 * (double)*(unint64_t *)&a4;
  v12 = (double)*(unint64_t *)&a5;
  policy_info[0] = (unint64_t)(v11 / (double)*(unint64_t *)&a5);
  v13 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v13 != -1)
  {
    v23 = (integer_t *)&v21;
    v22 = &v23;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(a5) = WTF::machTimebaseInfo(void)::timebaseInfo;
  LODWORD(v12) = dword_1ECF4400C;
  v14 = v7 * 1000000000.0 * (double)*(unint64_t *)&v12;
  v15 = (double)*(unint64_t *)&a5;
  policy_info[1] = (unint64_t)(v14 / (double)*(unint64_t *)&a5);
  v16 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v16 != -1)
  {
    v23 = (integer_t *)&v21;
    v22 = &v23;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(a5) = WTF::machTimebaseInfo(void)::timebaseInfo;
  LODWORD(v15) = dword_1ECF4400C;
  v19 = (unint64_t)(v6 * 1000000000.0 * (double)*(unint64_t *)&v15 / (double)*(unint64_t *)&a5);
  v20 = a2;
  return thread_policy_set(*(_DWORD *)(a1 + 52), 2u, policy_info, 4u);
}

uint64_t WTF::Thread::waitForCompletion(WTF::Thread *this)
{
  unint64_t *v2;
  _opaque_pthread_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v9;

  v2 = (unint64_t *)((char *)this + 8);
  if (__ldaxr((unint64_t *)this + 1))
  {
    __clrex();
  }
  else if (!__stxr(1uLL, v2))
  {
    goto LABEL_5;
  }
  WTF::WordLock::lockSlow((WTF::Thread *)((char *)this + 8));
LABEL_5:
  v4 = (_opaque_pthread_t *)*((_QWORD *)this + 5);
  v5 = __ldxr(v2);
  if (v5 != 1)
  {
    __clrex();
LABEL_10:
    WTF::WordLock::unlockSlow((WTF::WordLock *)v2);
    v6 = pthread_join(v4, 0);
    if (__ldaxr(v2))
      goto LABEL_8;
LABEL_11:
    if (!__stxr(1uLL, v2))
      goto LABEL_13;
    goto LABEL_12;
  }
  if (__stlxr(0, v2))
    goto LABEL_10;
  v6 = pthread_join(v4, 0);
  if (!__ldaxr(v2))
    goto LABEL_11;
LABEL_8:
  __clrex();
LABEL_12:
  WTF::WordLock::lockSlow((WTF::WordLock *)v2);
LABEL_13:
  if ((*((_BYTE *)this + 5) & 2) == 0)
    *((_BYTE *)this + 4) = 1;
  v9 = __ldxr(v2);
  if (v9 == 1)
  {
    if (!__stlxr(0, v2))
      return v6;
  }
  else
  {
    __clrex();
  }
  WTF::WordLock::unlockSlow((WTF::WordLock *)v2);
  return v6;
}

void WTF::Thread::detach(WTF::Thread *this)
{
  unint64_t *v2;
  unint64_t v4;
  unint64_t v5;

  v2 = (unint64_t *)((char *)this + 8);
  if (__ldaxr((unint64_t *)this + 1))
  {
    __clrex();
  }
  else if (!__stxr(1uLL, v2))
  {
    goto LABEL_5;
  }
  WTF::WordLock::lockSlow((WTF::Thread *)((char *)this + 8));
LABEL_5:
  pthread_detach(*((pthread_t *)this + 5));
  if ((*((_BYTE *)this + 5) & 2) != 0)
  {
    v4 = __ldxr(v2);
    if (v4 == 1)
      goto LABEL_7;
LABEL_10:
    __clrex();
    WTF::WordLock::unlockSlow((WTF::WordLock *)v2);
    return;
  }
  *((_BYTE *)this + 4) = 2;
  v5 = __ldxr(v2);
  if (v5 != 1)
    goto LABEL_10;
LABEL_7:
  if (__stlxr(0, v2))
    WTF::WordLock::unlockSlow((WTF::WordLock *)v2);
}

uint64_t WTF::Thread::initializeCurrentTLS(WTF::Thread *this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  _opaque_pthread_t *v7;
  unint64_t v9;
  char v11;
  char **v12;
  char *v13;

  v1 = atomic_load(&WTF::initialize(void)::onceKey);
  if (v1 != -1)
  {
    v13 = &v11;
    v12 = &v13;
    std::__call_once(&WTF::initialize(void)::onceKey, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
  }
  v2 = WTF::fastMalloc((WTF *)0x68);
  v3 = v2;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_QWORD *)(v2 + 96) = 0;
  *(_DWORD *)v2 = 1;
  *(_OWORD *)(v2 + 8) = 0u;
  v4 = (unint64_t *)(v2 + 8);
  *(_OWORD *)(v2 + 24) = 0u;
  do
  {
    v5 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
    v6 = v5 + 1;
  }
  while (__stlxr(v6, (unsigned int *)&WTF::ThreadLike::s_uid));
  *(_DWORD *)(v2 + 48) = v6;
  *(_QWORD *)(v2 + 52) = 0;
  *(_QWORD *)(v2 + 68) = 0;
  *(_QWORD *)(v2 + 60) = 0;
  *(_DWORD *)(v2 + 76) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  v7 = pthread_self();
  if (__ldaxr(v4))
  {
    __clrex();
  }
  else if (!__stxr(1uLL, v4))
  {
    goto LABEL_9;
  }
  WTF::WordLock::lockSlow((WTF::WordLock *)v4);
LABEL_9:
  *(_QWORD *)(v3 + 40) = v7;
  *(_DWORD *)(v3 + 52) = pthread_mach_thread_np(v7);
  v9 = __ldxr(v4);
  if (v9 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_14;
  }
  else
  {
    __clrex();
  }
  WTF::WordLock::unlockSlow((WTF::WordLock *)v4);
LABEL_14:
  WTF::Thread::initializeInThread((WTF::Thread *)v3);
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736) = v3;
  pthread_key_init_np();
  return v3;
}

BOOL WTF::Thread::signal(WTF::Thread *this, int a2)
{
  unint64_t *v4;
  _BOOL8 v6;
  unint64_t v7;
  unint64_t v8;

  v4 = (unint64_t *)((char *)this + 8);
  if (__ldaxr((unint64_t *)this + 1))
  {
    __clrex();
  }
  else if (!__stxr(1uLL, v4))
  {
    goto LABEL_5;
  }
  WTF::WordLock::lockSlow((WTF::Thread *)((char *)this + 8));
LABEL_5:
  if ((*((_BYTE *)this + 5) & 2) != 0)
  {
    v6 = 0;
    v8 = __ldxr(v4);
    if (v8 != 1)
      goto LABEL_7;
  }
  else
  {
    v6 = pthread_kill(*((pthread_t *)this + 5), a2) == 0;
    v7 = __ldxr(v4);
    if (v7 != 1)
    {
LABEL_7:
      __clrex();
LABEL_10:
      WTF::WordLock::unlockSlow((WTF::WordLock *)v4);
      return v6;
    }
  }
  if (__stlxr(0, v4))
    goto LABEL_10;
  return v6;
}

uint64_t WTF::Thread::suspend@<X0>(WTF::Thread *this@<X0>, uint64_t a2@<X8>)
{
  WTF::Thread *v5;
  uint64_t result;

  v5 = *(WTF::Thread **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v5)
    v5 = (WTF::Thread *)WTF::Thread::initializeCurrentTLS(0);
  if (v5 == this)
  {
    result = 449;
    __break(0xC471u);
  }
  else
  {
    result = thread_suspend(*((_DWORD *)this + 13));
    if ((_DWORD)result)
    {
      *(_DWORD *)a2 = result;
      *(_BYTE *)(a2 + 4) = 1;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 4) = 0;
    }
  }
  return result;
}

uint64_t WTF::Thread::resume(WTF::Thread *this, const WTF::ThreadSuspendLocker *a2)
{
  return thread_resume(*((_DWORD *)this + 13));
}

void WTF::Thread::getRegisters(WTF::Thread *this, const WTF::ThreadSuspendLocker *a2, __darwin_arm_thread_state64 *a3)
{
  kern_return_t state;
  mach_msg_type_number_t old_stateCnt[2];

  *(_QWORD *)old_stateCnt = 0x600000044;
  state = thread_get_state(*((_DWORD *)this + 13), 6, (thread_state_t)a3, old_stateCnt);
  if (state)
  {
    WTFReportFatalError("/Library/Caches/com.apple.xbs/Sources/WTF/Source/WTF/wtf/posix/ThreadingPOSIX.cpp", 540, "size_t WTF::Thread::getRegisters(const ThreadSuspendLocker &, PlatformRegisters &)", "JavaScript garbage collection failed because thread_get_state returned an error (%d). This is probably the result of running inside Rosetta, which is not supported.", state);
    __break(0xC471u);
  }
}

void WTF::Thread::destructTLS(unsigned int **this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  std::__shared_weak_count **v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if ((*((_BYTE *)this + 5) & 4) != 0)
  {
    WTF::Thread::didExit((WTF::Thread *)this, a2, a3, a4, a5, a6, a7, a8);
    do
    {
      v20 = __ldaxr((unsigned int *)this);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, (unsigned int *)this));
    if (v21)
      return;
    atomic_store(1u, (unsigned int *)this);
    v22 = this[12];
    this[12] = 0;
    if (!v22)
      goto LABEL_15;
    v23 = v22 + 2;
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v22 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
      WTF::AtomStringTable::~AtomStringTable((WTF::AtomStringTable *)(this + 8), v36, v37, v38, v39, v40, v41, v42);
      v33 = this[4];
      if (v33)
        goto LABEL_16;
    }
    else
    {
LABEL_15:
      WTF::AtomStringTable::~AtomStringTable((WTF::AtomStringTable *)(this + 8), v13, v14, v15, v16, v17, v18, v19);
      v33 = this[4];
      if (v33)
      {
LABEL_16:
        v34 = *(v33 - 1);
        if ((_DWORD)v34)
        {
          v35 = (std::__shared_weak_count **)(v33 + 4);
          do
          {
            if (*(v35 - 2) != (std::__shared_weak_count *)-1 && *v35)
              std::__shared_weak_count::__release_weak(*v35);
            v35 += 3;
            --v34;
          }
          while (v34);
        }
        WTF::fastFree((unint64_t)(v33 - 4), v26, v27, v28, v29, v30, v31, v32);
      }
    }
    WTF::fastFree((unint64_t)this, v26, v27, v28, v29, v30, v31, v32);
    return;
  }
  *((_BYTE *)this + 5) |= 4u;
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736) = this;
  pthread_key_init_np();
  v9 = this[12];
  this[12] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
}

void WTF::Mutex::~Mutex(pthread_mutex_t *this)
{
  pthread_mutex_destroy(this);
}

{
  pthread_mutex_destroy(this);
}

BOOL WTF::Mutex::tryLock(pthread_mutex_t *this)
{
  return pthread_mutex_trylock(this) == 0;
}

void WTF::ThreadCondition::~ThreadCondition(pthread_cond_t *this)
{
  pthread_cond_destroy(this);
}

{
  pthread_cond_destroy(this);
}

BOOL WTF::ThreadCondition::timedWait(pthread_cond_t *a1, pthread_mutex_t *a2, double a3)
{
  timespec v7;

  if (fabs(a3) == INFINITY)
  {
    if (a3 == -INFINITY)
      return 0;
LABEL_7:
    pthread_cond_wait(a1, a2);
    return 1;
  }
  if (a3 < WTF::WallTime::now((WTF::WallTime *)a1))
    return 0;
  if (a3 > 9.22337204e18)
    goto LABEL_7;
  v7.tv_sec = (uint64_t)a3;
  v7.tv_nsec = (uint64_t)((a3 - (double)(uint64_t)a3) * 1000000000.0);
  return pthread_cond_timedwait(a1, a2, &v7) == 0;
}

void WTF::Thread::yield(WTF::Thread *this)
{
  JUMPOUT(0x19AEBBF94);
}

uint64_t WTF::sendMessageScoped(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  kern_return_t state;
  natural_t old_state[68];
  mach_msg_type_number_t old_stateCnt[2];

  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v5)
    v5 = WTF::Thread::initializeCurrentTLS(0);
  if (v5 == a2)
  {
    __break(0xC471u);
    goto LABEL_10;
  }
  if (thread_suspend(*(_DWORD *)(a2 + 52)))
    return 1;
  *(_QWORD *)old_stateCnt = 0x600000044;
  state = thread_get_state(*(_DWORD *)(a2 + 52), 6, old_state, old_stateCnt);
  if (state)
  {
    WTFReportFatalError("/Library/Caches/com.apple.xbs/Sources/WTF/Source/WTF/wtf/posix/ThreadingPOSIX.cpp", 540, "size_t WTF::Thread::getRegisters(const ThreadSuspendLocker &, PlatformRegisters &)", "JavaScript garbage collection failed because thread_get_state returned an error (%d). This is probably the result of running inside Rosetta, which is not supported.", state);
    __break(0xC471u);
LABEL_10:
    JUMPOUT(0x197B23D70);
  }
  (*(void (**)(_QWORD, natural_t *))a3)(*(_QWORD *)(a3 + 8), old_state);
  thread_resume(*(_DWORD *)(a2 + 52));
  return 0;
}

uint64_t WTF::TimeWithDynamicClockType::now(int a1)
{
  uint64_t result;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  timespec v6;
  char v7;
  timespec *v8;

  if (a1 == 2)
  {
    v2 = mach_approximate_time();
    v4 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v4 == -1)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (a1 == 1)
  {
    v2 = mach_absolute_time();
    v5 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v5 == -1)
    {
LABEL_9:
      LODWORD(v3) = dword_1ECF4400C;
      *(double *)&result = (double)(v2 * WTF::machTimebaseInfo(void)::timebaseInfo)
                         / ((double)v3
                          * 1000000000.0);
      return result;
    }
LABEL_8:
    v6.tv_sec = (__darwin_time_t)&v7;
    v8 = &v6;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    goto LABEL_9;
  }
  if (a1)
  {
    result = 46;
    __break(0xC471u);
  }
  else
  {
    v6.tv_sec = 0;
    v6.tv_nsec = 0;
    clock_gettime(_CLOCK_REALTIME, &v6);
    *(double *)&result = (double)v6.tv_nsec / 1000000000.0 + (double)v6.tv_sec;
  }
  return result;
}

uint64_t WTF::TimeWithDynamicClockType::nowWithSameClock(WTF::TimeWithDynamicClockType *this)
{
  int v1;
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  timespec v7;
  char v8;
  timespec *v9;

  v1 = *((_DWORD *)this + 2);
  if (v1 == 2)
  {
    v3 = mach_approximate_time();
    v5 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v5 == -1)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (v1 == 1)
  {
    v3 = mach_absolute_time();
    v6 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v6 == -1)
    {
LABEL_9:
      LODWORD(v4) = dword_1ECF4400C;
      *(double *)&result = (double)(v3 * WTF::machTimebaseInfo(void)::timebaseInfo)
                         / ((double)v4
                          * 1000000000.0);
      return result;
    }
LABEL_8:
    v7.tv_sec = (__darwin_time_t)&v8;
    v9 = &v7;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    goto LABEL_9;
  }
  if (v1)
  {
    result = 46;
    __break(0xC471u);
  }
  else
  {
    v7.tv_sec = 0;
    v7.tv_nsec = 0;
    clock_gettime(_CLOCK_REALTIME, &v7);
    *(double *)&result = (double)v7.tv_nsec / 1000000000.0 + (double)v7.tv_sec;
  }
  return result;
}

uint64_t WTF::TimeWithDynamicClockType::wallTime(uint64_t this)
{
  if (*(_DWORD *)(this + 8))
  {
    this = 57;
    __break(0xC471u);
  }
  return this;
}

uint64_t WTF::TimeWithDynamicClockType::monotonicTime(uint64_t this)
{
  if (*(_DWORD *)(this + 8) != 1)
  {
    this = 63;
    __break(0xC471u);
  }
  return this;
}

uint64_t WTF::TimeWithDynamicClockType::approximateTime(uint64_t this)
{
  if (*(_DWORD *)(this + 8) != 2)
  {
    this = 69;
    __break(0xC471u);
  }
  return this;
}

uint64_t WTF::TimeWithDynamicClockType::approximateWallTime(uint64_t this)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  char v4;
  timespec *p_tp;
  timespec __tp;

  v1 = *(_DWORD *)(this + 8);
  if (v1 == 2)
  {
    if (fabs(*(double *)this) == INFINITY)
      return this;
    mach_approximate_time();
    v2 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v2 != -1)
    {
LABEL_10:
      __tp.tv_sec = (__darwin_time_t)&v4;
      p_tp = &__tp;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &p_tp, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
LABEL_11:
    __tp.tv_sec = 0;
    __tp.tv_nsec = 0;
    return clock_gettime(_CLOCK_REALTIME, &__tp);
  }
  if (v1 == 1)
  {
    if (fabs(*(double *)this) == INFINITY)
      return this;
    mach_absolute_time();
    v3 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v3 != -1)
      goto LABEL_10;
    goto LABEL_11;
  }
  if (v1)
  {
    this = 83;
    __break(0xC471u);
  }
  return this;
}

void WTF::TimeWithDynamicClockType::approximateMonotonicTime(WTF::TimeWithDynamicClockType *this)
{
  int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 2);
  if (v1 == 2)
  {
    v2 = *(_QWORD *)this;
    WTF::ApproximateTime::approximateMonotonicTime((WTF::ApproximateTime *)&v2);
  }
  else if (v1 != 1)
  {
    if (v1)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = *(_QWORD *)this;
      WTF::WallTime::approximateMonotonicTime((WTF::WallTime *)&v2);
    }
  }
}

uint64_t WTF::TimeWithDynamicClockType::operator-(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 8) != *(_DWORD *)(a2 + 8))
  {
    result = 103;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::TimeWithDynamicClockType::operator<(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8))
    return *(double *)a1 < *(double *)a2;
  result = 109;
  __break(0xC471u);
  return result;
}

uint64_t WTF::TimeWithDynamicClockType::operator>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8))
    return *(double *)a1 > *(double *)a2;
  result = 115;
  __break(0xC471u);
  return result;
}

uint64_t WTF::TimeWithDynamicClockType::operator<=(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8))
    return *(double *)a1 <= *(double *)a2;
  result = 121;
  __break(0xC471u);
  return result;
}

uint64_t WTF::TimeWithDynamicClockType::operator>=(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8))
    return *(double *)a1 >= *(double *)a2;
  result = 127;
  __break(0xC471u);
  return result;
}

uint64_t WTF::TimeWithDynamicClockType::dump(WTF::TimeWithDynamicClockType *this, WTF::PrintStream *a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  const char *v7;
  WTF::PrintStream *v8;
  uint64_t result;

  v4 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v5 = *((int *)this + 2);
  if (v5 >= 3)
  {
    result = 46;
    __break(0xC471u);
  }
  else
  {
    v6 = (WTF::PrintStream *)v4;
    v7 = off_1E3572498[v5];
    v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printf(v8, "%s", v7);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    WTF::PrintStream::printf(v6, "%s", "(");
    WTF::PrintStream::printf(v6, "%lf", *(double *)this);
    WTF::PrintStream::printf(v6, "%s", " sec)");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return result;
}

void WTF::sleep(WTF *this, const WTF::TimeWithDynamicClockType *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int16 v11;

  v11 = 0;
  if (__ldaxr((unsigned __int8 *)&v11 + 1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&v11 + 1))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&v11 + 1);
LABEL_5:
  WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)&v11, (unsigned __int8 *)&v11 + 1, this);
  v10 = __ldxr((unsigned __int8 *)&v11 + 1);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)&v11 + 1))
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&v11 + 1, 0, v4, v5, v6, v7, v8, v9);
}

BOOL WTF::hasElapsed(WTF *this, const WTF::TimeWithDynamicClockType *a2)
{
  int v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  timespec v10;
  char v11;
  timespec *v12;

  if (*(double *)this <= 0.0)
    return 1;
  if (fabs(*(double *)this) == INFINITY)
    return 0;
  v4 = *((_DWORD *)this + 2);
  if (v4 == 2)
  {
    v6 = mach_approximate_time();
    v8 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v8 == -1)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v4 == 1)
  {
    v6 = mach_absolute_time();
    v9 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v9 == -1)
    {
LABEL_13:
      LODWORD(v7) = dword_1ECF4400C;
      v5 = (double)(v6 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v7 * 1000000000.0);
      goto LABEL_14;
    }
LABEL_12:
    v10.tv_sec = (__darwin_time_t)&v11;
    v12 = &v10;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    goto LABEL_13;
  }
  if (v4)
  {
    __break(0xC471u);
LABEL_18:
    JUMPOUT(0x197B24724);
  }
  v10.tv_sec = 0;
  v10.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &v10);
  v5 = (double)v10.tv_nsec / 1000000000.0 + (double)v10.tv_sec;
LABEL_14:
  if (*((_DWORD *)this + 2) != v4)
  {
    __break(0xC471u);
    goto LABEL_18;
  }
  return *(double *)this <= v5;
}

void WTF::TimingScope::scopeDidEnd(WTF::TimingScope *this)
{
  unint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  unsigned __int8 *v17;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  double v29;
  unsigned int v30;
  double v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _OWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  double v43;
  int v44;
  char v45;
  char **v46;
  char *v47;

  {
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    i = (unint64_t)v19;
    *v19 = 0;
    v19[1] = 0;
    {
      __clrex();
    }
    {
      break;
    }
    if (*v19)
      WTF::fastFree(*v19 - 16, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(i, v20, v21, v22, v23, v24, v25, v26);
  }
  v3 = *((_QWORD *)this + 1);
  v11 = mach_absolute_time();
  v13 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v13 != -1)
  {
    v47 = &v45;
    v46 = &v47;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v46, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  v14 = (double)(v11 * WTF::machTimebaseInfo(void)::timebaseInfo);
  LODWORD(v12) = dword_1ECF4400C;
  v15 = (double)v12 * 1000000000.0;
  v16 = *(double *)this;
  v17 = (unsigned __int8 *)(i + 8);
  if (__ldaxr((unsigned __int8 *)(i + 8)))
  {
    __clrex();
LABEL_14:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(i + 8);
    goto LABEL_15;
  }
  if (__stxr(1u, v17))
    goto LABEL_14;
LABEL_15:
  v28 = *(_QWORD *)i;
  v29 = v14 / v15;
  if (*(_QWORD *)i
  {
    v30 = *(_DWORD *)(v28 - 8);
  }
  else
  {
    v30 = 0;
  }
  v31 = v29 - v16;
  v32 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
  v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
  v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
  v35 = v30 & ((v34 >> 31) ^ v34);
  v36 = (_QWORD *)(v28 + 32 * v35);
  v37 = *v36;
  if (!*v36)
  {
LABEL_26:
    *v36 = v3;
    v36[1] = 0;
    v36[2] = 0;
    v36[3] = 0;
    if (*(_QWORD *)i)
    {
      ++*(_DWORD *)(*(_QWORD *)i - 12);
      v40 = *(_QWORD *)i;
      if (*(_QWORD *)i)
        goto LABEL_28;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v40 = *(_QWORD *)i;
      if (*(_QWORD *)i)
      {
LABEL_28:
        v41 = (*(_DWORD *)(v40 - 16) + *(_DWORD *)(v40 - 12));
        v42 = *(unsigned int *)(v40 - 4);
        if (v42 <= 0x400)
          goto LABEL_29;
        goto LABEL_33;
      }
    }
    v41 = *(unsigned int *)(v40 - 16);
    v42 = *(unsigned int *)(v40 - 4);
    if (v42 <= 0x400)
    {
LABEL_29:
      if (3 * v42 > 4 * v41)
        goto LABEL_35;
LABEL_34:
      goto LABEL_35;
    }
LABEL_33:
    if (v42 > 2 * v41)
      goto LABEL_35;
    goto LABEL_34;
  }
  v38 = 0;
  v39 = 1;
  while (v37 != v3)
  {
    if (v37 == -1)
      v38 = v36;
    v35 = ((_DWORD)v35 + v39) & v30;
    v36 = (_QWORD *)(v28 + 32 * v35);
    v37 = *v36;
    ++v39;
    if (!*v36)
    {
      if (v38)
      {
        *v38 = 0u;
        v38[1] = 0u;
        --*(_DWORD *)(*(_QWORD *)i - 16);
        v36 = v38;
      }
      goto LABEL_26;
    }
  }
LABEL_35:
  ++*((_DWORD *)v36 + 4);
  v43 = *((double *)v36 + 3);
  if (v43 < v31)
    v43 = v31;
  *((double *)v36 + 3) = v43;
  *((double *)v36 + 1) = v31 + *((double *)v36 + 1);
  v44 = __ldxr(v17);
  if (v44 == 1)
  {
    if (!__stlxr(0, v17))
    {
      if (*((_DWORD *)v36 + 4) % *((_DWORD *)this + 6))
        return;
LABEL_43:
      WTFLogAlways("%s: %u calls, mean duration: %.6fms, total duration: %.6fms, max duration %.6fms", v4, v5, v6, v7, v8, v9, v10, *((_QWORD *)this + 1));
      return;
    }
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(i + 8), 0, v5, v6, v7, v8, v9, v10);
  if (!(*((_DWORD *)v36 + 4) % *((_DWORD *)this + 6)))
    goto LABEL_43;
}

_OWORD *WTF::HashTable<char const*,WTF::KeyValuePair<char const*,WTF::`anonymous namespace'::State::CallData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<char const*,WTF::`anonymous namespace'::State::CallData>>,WTF::DefaultHash<char const*>,WTF::HashMap<char const*,WTF::`anonymous namespace'::State::CallData,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<WTF::`anonymous namespace'::State::CallData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<char const*>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  _OWORD *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastMalloc((WTF *)((32 * v7) | 0x10));
  v16 = v8;
  v17 = v8 + 16;
  if (v7)
    bzero((void *)(v8 + 16), 32 * v7);
  *a1 = v17;
  *(_DWORD *)(v16 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = v4 + 32 * v18;
      if ((unint64_t)(*(_QWORD *)v20 + 1) >= 2)
      {
        v21 = *a1;
        if (*a1)
          v22 = *(_DWORD *)(v21 - 8);
        else
          v22 = 0;
        v23 = (~(*(_QWORD *)v20 << 32) + *(_QWORD *)v20) ^ ((~(*(_QWORD *)v20 << 32) + *(_QWORD *)v20) >> 22);
        v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((unint64_t)(v23 + ~(v23 << 13)) >> 8));
        v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
        v26 = v22 & ((v25 >> 31) ^ v25);
        v27 = 1;
        do
        {
          v28 = v26;
          v29 = *(_QWORD *)(v21 + 32 * v26);
          v26 = (v26 + v27++) & v22;
        }
        while (v29);
        v30 = (_OWORD *)(v21 + 32 * v28);
        v31 = *(_OWORD *)(v20 + 16);
        *v30 = *(_OWORD *)v20;
        v30[1] = v31;
        if (v20 == a2)
          v19 = v30;
      }
      ++v18;
    }
    while (v18 != v5);
  }
  else
  {
    v19 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree(v4 - 16, v9, v10, v11, v12, v13, v14, v15);
  return v19;
}

double WTF::URL::invalidate(WTF::URL *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

uint64_t WTF::URL::URL(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, unsigned __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  __int128 v18;
  __int128 v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  __int128 v62;
  __int128 v63;
  WTF *v64;
  int v65;
  WTF::StringImpl *v66;

  *(_QWORD *)a1 = 0;
  v9 = *a3;
  if (*a3)
    *(_DWORD *)v9 += 2;
  v60 = v9;
  WTF::URLParser::URLParser((WTF::URL *)&v61, (WTF::AtomStringImpl *)&v60, a2, a4, a5, a6, a7, a8);
  v17 = v61;
  if (v61)
    *(_DWORD *)v61 += 2;
  v18 = v62;
  v19 = v63;
  v20 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v17;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      v58 = v19;
      v59 = v18;
      WTF::StringImpl::~StringImpl(v20, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      *(_OWORD *)(a1 + 8) = v59;
      *(_OWORD *)(a1 + 24) = v58;
      v21 = v66;
      v66 = 0;
      if (!v21)
        goto LABEL_13;
      goto LABEL_11;
    }
    *(_DWORD *)v20 -= 2;
  }
  *(_OWORD *)(a1 + 8) = v18;
  *(_OWORD *)(a1 + 24) = v19;
  v21 = v66;
  v66 = 0;
  if (!v21)
  {
LABEL_13:
    v30 = v64;
    if (!v64)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_11:
  if (*(_DWORD *)v21 != 2)
  {
    *(_DWORD *)v21 -= 2;
    goto LABEL_13;
  }
  WTF::StringImpl::~StringImpl(v21, v10, v11, v12, v13, v14, v15, v16);
  WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
  v30 = v64;
  if (v64)
  {
LABEL_14:
    v64 = 0;
    v65 = 0;
    WTF::fastFree((unint64_t)v30, v10, v11, v12, v13, v14, v15, v16);
  }
LABEL_15:
  v31 = v61;
  v61 = 0;
  if (!v31)
    goto LABEL_18;
  if (*(_DWORD *)v31 != 2)
  {
    *(_DWORD *)v31 -= 2;
LABEL_18:
    v32 = v60;
    if (!v60)
      return a1;
    goto LABEL_23;
  }
  WTF::StringImpl::~StringImpl(v31, v10, v11, v12, v13, v14, v15, v16);
  WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
  v32 = v60;
  if (!v60)
    return a1;
LABEL_23:
  if (*(_DWORD *)v32 != 2)
  {
    *(_DWORD *)v32 -= 2;
    return a1;
  }
  WTF::StringImpl::~StringImpl(v32, v10, v11, v12, v13, v14, v15, v16);
  WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
  return a1;
}

uint64_t WTF::URL::URL(uint64_t a1, WTF::AtomStringImpl *a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  WTF::StringImpl *v59[2];
  __int128 v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  __int128 v63;
  __int128 v64;
  WTF *v65;
  int v66;
  WTF::StringImpl *v67;

  *(_QWORD *)a1 = 0;
  v61 = 0;
  *(_OWORD *)v59 = 0u;
  v60 = 0u;
  WTF::URLParser::URLParser((WTF::URL *)&v62, a2, (uint64_t)v59, a3, a5, a6, a7, a8);
  v16 = v62;
  if (v62)
    *(_DWORD *)v62 += 2;
  v17 = v63;
  v18 = v64;
  v19 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v16;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      v57 = v18;
      v58 = v17;
      WTF::StringImpl::~StringImpl(v19, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      *(_OWORD *)(a1 + 8) = v58;
      *(_OWORD *)(a1 + 24) = v57;
      v20 = v67;
      v67 = 0;
      if (!v20)
        goto LABEL_11;
      goto LABEL_9;
    }
    *(_DWORD *)v19 -= 2;
  }
  *(_OWORD *)(a1 + 8) = v17;
  *(_OWORD *)(a1 + 24) = v18;
  v20 = v67;
  v67 = 0;
  if (!v20)
  {
LABEL_11:
    v29 = v65;
    if (!v65)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_9:
  if (*(_DWORD *)v20 != 2)
  {
    *(_DWORD *)v20 -= 2;
    goto LABEL_11;
  }
  WTF::StringImpl::~StringImpl(v20, v9, v10, v11, v12, v13, v14, v15);
  WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
  v29 = v65;
  if (v65)
  {
LABEL_12:
    v65 = 0;
    v66 = 0;
    WTF::fastFree((unint64_t)v29, v9, v10, v11, v12, v13, v14, v15);
  }
LABEL_13:
  v30 = v62;
  v62 = 0;
  if (!v30)
    goto LABEL_16;
  if (*(_DWORD *)v30 != 2)
  {
    *(_DWORD *)v30 -= 2;
LABEL_16:
    v31 = v59[0];
    v59[0] = 0;
    if (!v31)
      return a1;
    goto LABEL_21;
  }
  WTF::StringImpl::~StringImpl(v30, v9, v10, v11, v12, v13, v14, v15);
  WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
  v31 = v59[0];
  v59[0] = 0;
  if (!v31)
    return a1;
LABEL_21:
  if (*(_DWORD *)v31 != 2)
  {
    *(_DWORD *)v31 -= 2;
    return a1;
  }
  WTF::StringImpl::~StringImpl(v31, v9, v10, v11, v12, v13, v14, v15);
  WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
  return a1;
}

void WTF::URL::isolatedCopy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1)
  {
    *(_DWORD *)v3 += 2;
    *(_QWORD *)a2 = v3;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
    WTF::String::isolatedCopy((_DWORD *)a2, &v19);
    *(_QWORD *)a2 = v19;
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::~StringImpl(v3, v4, v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v3 -= 2;
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
    WTF::String::isolatedCopy((_DWORD *)a2, &v19);
    *(_QWORD *)a2 = v19;
  }
}

void WTF::URL::isolatedCopy(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *a1;
  *a1 = 0;
  *(_QWORD *)a2 = v3;
  v4 = *(_OWORD *)(a1 + 1);
  *(_OWORD *)(a2 + 8) = v4;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 3);
  *((_DWORD *)a1 + 2) = v4 & 0xFFFFFFFE;
  WTF::String::isolatedCopy((uint64_t *)a2, &v21);
  v12 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v21;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
}

const char *WTF::URL::lastPathComponent(WTF::URL *this)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  const char *result;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  unsigned int v30;

  v1 = *((_DWORD *)this + 8);
  v2 = *((_DWORD *)this + 2);
  v3 = ((v2 >> 3) & 7) + *((_DWORD *)this + 6);
  v4 = (v2 >> 6) + 1;
  v5 = v3;
  if ((_DWORD)v3 == v4)
  {
    v6 = *(_QWORD *)this;
    v5 = ((v2 >> 3) & 7) + *((_DWORD *)this + 6);
    if (*(_QWORD *)this)
    {
      v7 = v3 + 1;
      v5 = v3;
      if ((v3 + 1) < *(_DWORD *)(v6 + 4))
      {
        v8 = *(_QWORD *)(v6 + 8);
        if ((*(_BYTE *)(v6 + 16) & 4) != 0)
        {
          v5 = v3;
          if (*(_BYTE *)(v8 + v3) != 47)
            goto LABEL_12;
          v9 = *(unsigned __int8 *)(v8 + v7);
        }
        else
        {
          v5 = v3;
          if (*(_WORD *)(v8 + 2 * v3) != 47)
            goto LABEL_12;
          v9 = *(unsigned __int16 *)(v8 + 2 * v7);
        }
        if (v9 == 46)
          v5 = v3 + 2;
        else
          v5 = v3;
      }
    }
  }
LABEL_12:
  if (v1 <= v5)
    return 0;
  v10 = v1 - 1;
  v11 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return "";
  v12 = *(unsigned int *)(v11 + 4);
  v13 = *(_DWORD *)(v11 + 16);
  if (v12 <= v10)
  {
    result = *(const char **)(v11 + 8);
    v16 = v10;
    if ((v13 & 4) == 0)
      goto LABEL_27;
    goto LABEL_39;
  }
  result = *(const char **)(v11 + 8);
  if ((v13 & 4) == 0)
  {
    v15 = v1 - 2;
    if (*(_WORD *)&result[2 * v10] == 47)
      LODWORD(v10) = v15;
    v16 = v10;
    if ((v13 & 4) == 0)
      goto LABEL_27;
LABEL_39:
    if (!(_DWORD)v12)
      goto LABEL_54;
    v19 = v12 - 1;
    if (v12 > v10)
      v19 = v16;
    if (v19 >= v12)
      goto LABEL_68;
    v20 = result[v19];
    if (v19 - 1 < v12)
    {
      if (v20 != 47)
      {
        while (v19)
        {
          v21 = v19 - 1;
          v24 = result[--v19];
          if (v24 == 47)
            goto LABEL_55;
        }
        goto LABEL_54;
      }
      goto LABEL_45;
    }
    goto LABEL_52;
  }
  v23 = v1 - 2;
  if (result[v10] == 47)
    LODWORD(v10) = v23;
  v16 = v10;
  if ((v13 & 4) != 0)
    goto LABEL_39;
LABEL_27:
  if (!(_DWORD)v12)
    goto LABEL_54;
  v19 = v12 - 1;
  if (v12 > v10)
    v19 = v16;
  if (v19 >= v12)
  {
LABEL_68:
    __break(1u);
    return result;
  }
  v20 = *(unsigned __int16 *)&result[2 * v19];
  if (v19 - 1 >= v12)
  {
LABEL_52:
    if (v20 == 47)
      goto LABEL_45;
    if (!v19)
    {
LABEL_54:
      v21 = -1;
      goto LABEL_55;
    }
    goto LABEL_68;
  }
  if (v20 != 47)
  {
    while (v19)
    {
      v21 = v19 - 1;
      v22 = *(unsigned __int16 *)&result[2 * v19-- - 2];
      if (v22 == 47)
        goto LABEL_55;
    }
    goto LABEL_54;
  }
LABEL_45:
  v21 = v19;
LABEL_55:
  if ((_DWORD)v3 == v4)
  {
    v25 = v3 + 1;
    if ((int)v3 + 1 < v12)
    {
      if ((v13 & 4) != 0)
      {
        if (result[v3] != 47)
          goto LABEL_64;
        v26 = result[v25];
      }
      else
      {
        if (*(_WORD *)&result[2 * v3] != 47)
          goto LABEL_64;
        v26 = *(unsigned __int16 *)&result[2 * v25];
      }
      if (v26 == 46)
        LODWORD(v3) = v3 + 2;
    }
  }
LABEL_64:
  if (v21 < v3)
    return 0;
  v27 = v12 | ((unint64_t)((v13 >> 2) & 1) << 32);
  v28 = (v21 + 1);
  v29 = v12 >= v28;
  v30 = v12 - v28;
  if (v30 == 0 || !v29)
    return "";
  v17 = v10 - v21;
  if (v30 > v17 || (v17 = v30, (_DWORD)v21 != -1))
  {
    v18 = v27 - v28;
    if ((v27 & 0x100000000) != 0)
    {
      if (v18 >= v17)
      {
        result += v28;
        return result;
      }
    }
    else if (v18 >= v17)
    {
      result += 2 * v28;
      return result;
    }
    goto LABEL_68;
  }
  return result;
}

uint64_t WTF::URL::pathStart(WTF::URL *this)
{
  unsigned int v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v2 = *((_DWORD *)this + 2);
  result = ((v2 >> 3) & 7) + *((_DWORD *)this + 6);
  if ((_DWORD)result == (v2 >> 6) + 1)
  {
    v4 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v5 = result + 1;
      if ((result + 1) < *(_DWORD *)(v4 + 4))
      {
        v6 = *(_QWORD *)(v4 + 8);
        if ((*(_BYTE *)(v4 + 16) & 4) != 0)
        {
          if (*(_BYTE *)(v6 + result) != 47)
            return result;
          v7 = *(unsigned __int8 *)(v6 + v5);
        }
        else
        {
          if (*(_WORD *)(v6 + 2 * result) != 47)
            return result;
          v7 = *(unsigned __int16 *)(v6 + 2 * v5);
        }
        if (v7 == 46)
          return (result + 2);
        else
          return result;
      }
    }
  }
  return result;
}

BOOL WTF::URL::hasSpecialScheme(WTF::URL *this)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  _WORD *v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  BOOL v13;
  uint64_t v14;
  _BOOL8 result;
  uint64_t v17;
  int v18;
  unsigned int v20;
  unsigned __int8 *v21;
  int v22;
  unsigned int v23;
  unsigned __int8 *v24;
  int v25;
  unsigned int v26;
  unsigned __int8 *v27;
  int v28;
  unsigned int v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v33;
  int v34;
  uint64_t v36;
  int v37;
  uint64_t v39;
  int v40;
  uint64_t v42;
  int v43;
  uint64_t v45;
  uint64_t v47;
  int v48;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;

  v1 = *((_DWORD *)this + 2);
  if ((v1 & 0xFFFFFFC1) == 0x101)
  {
    v6 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v7 = *(_DWORD *)(v6 + 4);
      if (v7)
      {
        v8 = *(_QWORD *)(v6 + 8);
        if ((*(_BYTE *)(v6 + 16) & 4) != 0)
        {
          if (v7 == 1
            || (*(_BYTE *)v8 & 0xDF) != 0x46
            || v7 < 3
            || (*(_BYTE *)(v8 + 1) & 0xDF) != 0x49
            || v7 < 4
            || (*(_BYTE *)(v8 + 2) & 0xDF) != 0x4C)
          {
            goto LABEL_48;
          }
          v9 = *(unsigned __int8 *)(v8 + 3);
        }
        else
        {
          if (v7 == 1
            || (*(_WORD *)v8 & 0xFFDF) != 0x46
            || v7 < 3
            || (*(_WORD *)(v8 + 2) & 0xFFDF) != 0x49
            || v7 < 4
            || (*(_WORD *)(v8 + 4) & 0xFFDF) != 0x4C)
          {
            goto LABEL_48;
          }
          v9 = *(unsigned __int16 *)(v8 + 6);
        }
        v13 = (v9 & 0xFFFFFFDF) == 69;
        v14 = v13;
        if ((v1 & 1) == 0 || v13)
          return v14;
        goto LABEL_58;
      }
    }
  }
  else
  {
    if ((v1 & 0xFFFFFFC1) != 0xC1)
      goto LABEL_48;
    v2 = *(_QWORD *)this;
    if (!*(_QWORD *)this)
      goto LABEL_48;
    v3 = *(_DWORD *)(v2 + 4);
    if (!v3)
      goto LABEL_48;
    v4 = *(_WORD **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) == 0)
    {
      if ((*v4 & 0xFFDF) != 0x46 || v3 <= 1)
        goto LABEL_48;
LABEL_26:
      v11 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)(v11 + 1) & 0xDF) != 0x54 || v3 < 3)
          goto LABEL_48;
      }
      else if ((*(_WORD *)(v11 + 2) & 0xFFDF) != 0x54 || v3 < 3)
      {
        goto LABEL_48;
      }
      v17 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
        v18 = *(unsigned __int8 *)(v17 + 2);
      else
        v18 = *(unsigned __int16 *)(v17 + 4);
      v13 = (v18 & 0xFFFFFFDF) == 80;
      v14 = v13;
      if (v13 || (*((_DWORD *)this + 2) & 1) == 0)
        return v14;
      goto LABEL_58;
    }
    if ((*(_BYTE *)v4 & 0xDF) == 0x46 && v3 > 1)
      goto LABEL_26;
  }
LABEL_48:
  if ((v1 & 1) == 0)
    return 0;
LABEL_58:
  switch(((v1 & 0xFFFFFFC0) - 128) >> 6)
  {
    case 0u:
      v14 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
        return v14;
      v20 = *(_DWORD *)(v14 + 4);
      if (!v20)
        return 0;
      v21 = *(unsigned __int8 **)(v14 + 8);
      v22 = (*(_BYTE *)(v14 + 16) & 4) != 0 ? *v21 : *(unsigned __int16 *)v21;
      if ((v22 & 0xFFFFFFDF) != 0x57 || v20 <= 1)
        return 0;
      v33 = *(_QWORD *)(v14 + 8);
      v34 = (*(_BYTE *)(v14 + 16) & 4) != 0 ? *(unsigned __int8 *)(v33 + 1) : *(unsigned __int16 *)(v33 + 2);
      if ((v34 & 0xFFFFFFDF) != 0x53)
        return 0;
      result = 1;
      break;
    case 1u:
      v14 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
        return v14;
      v23 = *(_DWORD *)(v14 + 4);
      if (!v23)
        return 0;
      v24 = *(unsigned __int8 **)(v14 + 8);
      v25 = (*(_BYTE *)(v14 + 16) & 4) != 0 ? *v24 : *(unsigned __int16 *)v24;
      if ((v25 & 0xFFFFFFDF) != 0x57 || v23 <= 1)
        return 0;
      v36 = *(_QWORD *)(v14 + 8);
      v37 = (*(_BYTE *)(v14 + 16) & 4) != 0 ? *(unsigned __int8 *)(v36 + 1) : *(unsigned __int16 *)(v36 + 2);
      if ((v37 & 0xFFFFFFDF) != 0x53 || v23 < 3)
        return 0;
      v45 = *(_QWORD *)(v14 + 8);
      if ((*(_BYTE *)(v14 + 16) & 4) != 0)
        result = (*(_BYTE *)(v45 + 2) & 0xDF) == 83;
      else
        result = (*(_WORD *)(v45 + 4) & 0xFFDF) == 83;
      break;
    case 2u:
      v14 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
        return v14;
      v26 = *(_DWORD *)(v14 + 4);
      if (!v26)
        return 0;
      v27 = *(unsigned __int8 **)(v14 + 8);
      v28 = (*(_BYTE *)(v14 + 16) & 4) != 0 ? *v27 : *(unsigned __int16 *)v27;
      if ((v28 & 0xFFFFFFDF) != 0x48 || v26 <= 1)
        return 0;
      v39 = *(_QWORD *)(v14 + 8);
      v40 = (*(_BYTE *)(v14 + 16) & 4) != 0 ? *(unsigned __int8 *)(v39 + 1) : *(unsigned __int16 *)(v39 + 2);
      if ((v40 & 0xFFFFFFDF) != 0x54 || v26 < 3)
        return 0;
      v47 = *(_QWORD *)(v14 + 8);
      v48 = (*(_BYTE *)(v14 + 16) & 4) != 0 ? *(unsigned __int8 *)(v47 + 2) : *(unsigned __int16 *)(v47 + 4);
      if ((v48 & 0xFFFFFFDF) != 0x54 || v26 < 4)
        return 0;
      v52 = *(_QWORD *)(v14 + 8);
      v53 = (*(_BYTE *)(v14 + 16) & 4) != 0 ? *(unsigned __int8 *)(v52 + 3) : *(unsigned __int16 *)(v52 + 6);
      if ((v53 & 0xFFFFFFDF) != 0x50)
        return 0;
      result = 1;
      break;
    case 3u:
      v14 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
        return v14;
      v29 = *(_DWORD *)(v14 + 4);
      if (!v29)
        return 0;
      v30 = *(unsigned __int8 **)(v14 + 8);
      v31 = (*(_BYTE *)(v14 + 16) & 4) != 0 ? *v30 : *(unsigned __int16 *)v30;
      if ((v31 & 0xFFFFFFDF) != 0x48 || v29 <= 1)
        return 0;
      v42 = *(_QWORD *)(v14 + 8);
      v43 = (*(_BYTE *)(v14 + 16) & 4) != 0 ? *(unsigned __int8 *)(v42 + 1) : *(unsigned __int16 *)(v42 + 2);
      if ((v43 & 0xFFFFFFDF) != 0x54 || v29 < 3)
        return 0;
      v50 = *(_QWORD *)(v14 + 8);
      v51 = (*(_BYTE *)(v14 + 16) & 4) != 0 ? *(unsigned __int8 *)(v50 + 2) : *(unsigned __int16 *)(v50 + 4);
      if ((v51 & 0xFFFFFFDF) != 0x54 || v29 < 4)
        return 0;
      v54 = *(_QWORD *)(v14 + 8);
      v55 = (*(_BYTE *)(v14 + 16) & 4) != 0 ? *(unsigned __int8 *)(v54 + 3) : *(unsigned __int16 *)(v54 + 6);
      if ((v55 & 0xFFFFFFDF) != 0x50 || v29 < 5)
        return 0;
      v56 = *(_QWORD *)(v14 + 8);
      v57 = (*(_BYTE *)(v14 + 16) & 4) != 0 ? *(unsigned __int8 *)(v56 + 4) : *(unsigned __int16 *)(v56 + 8);
      if ((v57 & 0xFFFFFFDF) != 0x53)
        return 0;
      result = 1;
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t WTF::URL::protocolIs(uint64_t *a1, _BYTE *a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;

  v3 = *((_DWORD *)a1 + 2);
  if ((v3 & 1) == 0 || (_DWORD)a3 != v3 >> 6)
    return 0;
  if (v3 < 0x40)
    return 1;
  v5 = *a1;
  v6 = a3 & 0xFF00000000;
  if (*a1)
  {
    v7 = *(unsigned int *)(v5 + 4);
    if (a3 <= 1)
      v8 = 1;
    else
      v8 = a3;
    v9 = 0;
    if (v6)
    {
      LOBYTE(v6) = 0;
      while (1)
      {
        if (v9 >= v7)
        {
          if ((unsigned __int16)(char)a2[v9] != 32)
            return v6 & 1;
        }
        else
        {
          v10 = *(_QWORD *)(v5 + 8);
          if ((*(_BYTE *)(v5 + 16) & 4) != 0)
          {
            if ((*(unsigned __int8 *)(v10 + v9) | 0x20) != (unsigned __int16)(char)a2[v9])
              return v6 & 1;
          }
          else if ((*(unsigned __int16 *)(v10 + 2 * v9) | 0x20) != (unsigned __int16)(char)a2[v9])
          {
            return v6 & 1;
          }
        }
        LOBYTE(v6) = ++v9 >= a3;
        if (v8 == v9)
          return v6 & 1;
      }
    }
    while (1)
    {
      if (v9 >= v7)
      {
        if ((unsigned __int16)(char)a2[2 * v9] != 32)
          return v6 & 1;
      }
      else
      {
        v11 = *(_QWORD *)(v5 + 8);
        if ((*(_BYTE *)(v5 + 16) & 4) != 0)
        {
          if ((*(unsigned __int8 *)(v11 + v9) | 0x20) != (unsigned __int16)(char)a2[2 * v9])
            return v6 & 1;
        }
        else if ((*(unsigned __int16 *)(v11 + 2 * v9) | 0x20) != (unsigned __int16)(char)a2[2 * v9])
        {
          return v6 & 1;
        }
      }
      LOBYTE(v6) = ++v9 >= a3;
      if (v8 == v9)
        return v6 & 1;
    }
  }
  if (!v6)
  {
    if (*a2 == 32)
    {
      v12 = 0;
      v13 = a3;
      if (a3 <= 1)
        v14 = 1;
      else
        v14 = a3;
      while (v14 - 1 != v12)
      {
        v16 = a2[2 * v12++ + 2];
        if (v16 != 32)
          return v12 >= v13;
      }
      goto LABEL_43;
    }
    return 0;
  }
  if (*a2 != 32)
    return 0;
  v12 = 0;
  v13 = a3;
  if (a3 <= 1)
    v14 = 1;
  else
    v14 = a3;
  while (v14 - 1 != v12)
  {
    v15 = a2[++v12];
    if (v15 != 32)
      return v12 >= v13;
  }
LABEL_43:
  v12 = v14;
  return v12 >= v13;
}

BOOL WTF::URL::hasLocalScheme(WTF::URL *this)
{
  int v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _BOOL8 result;
  int v11;
  int v12;

  v1 = *((_DWORD *)this + 2);
  if ((v1 & 1) == 0)
    return 0;
  v2 = v1 & 0xFFFFFFC0;
  if (v2 != 256)
  {
    if (v2 != 320)
      return 0;
    v3 = *(_QWORD *)this;
    if (!*(_QWORD *)this)
      return 0;
    v4 = *(_DWORD *)(v3 + 4);
    if (!v4)
      return 0;
    v5 = *(_QWORD *)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      if (v4 == 1
        || (*(_BYTE *)v5 & 0xDF) != 0x41
        || v4 < 3
        || (*(_BYTE *)(v5 + 1) & 0xDF) != 0x42
        || v4 < 4
        || (*(_BYTE *)(v5 + 2) & 0xDF) != 0x4F
        || v4 < 5
        || (*(_BYTE *)(v5 + 3) & 0xDF) != 0x55)
      {
        return 0;
      }
      v6 = *(unsigned __int8 *)(v5 + 4);
    }
    else
    {
      if (v4 == 1
        || (*(_WORD *)v5 & 0xFFDF) != 0x41
        || v4 < 3
        || (*(_WORD *)(v5 + 2) & 0xFFDF) != 0x42
        || v4 < 4
        || (*(_WORD *)(v5 + 4) & 0xFFDF) != 0x4F
        || v4 < 5
        || (*(_WORD *)(v5 + 6) & 0xFFDF) != 0x55)
      {
        return 0;
      }
      v6 = *(unsigned __int16 *)(v5 + 8);
    }
    return (v6 & 0xFFFFFFDF) == 0x54;
  }
  v7 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v8 = *(_DWORD *)(v7 + 4);
  if (!v8)
    return 0;
  v9 = *(_QWORD *)(v7 + 8);
  if ((*(_BYTE *)(v7 + 16) & 4) == 0)
  {
    if (v8 == 1
      || (*(_WORD *)v9 & 0xFFDF) != 0x42
      || v8 < 3
      || (*(_WORD *)(v9 + 2) & 0xFFDF) != 0x4C
      || v8 < 4
      || (*(_WORD *)(v9 + 4) & 0xFFDF) != 0x4F
      || (*(_WORD *)(v9 + 6) & 0xFFDF) != 0x42)
    {
      result = 0;
      if (v8 >= 2 && (*(_WORD *)v9 & 0xFFDF) == 0x44)
      {
        result = 0;
        if (v8 >= 3 && (*(_WORD *)(v9 + 2) & 0xFFDF) == 0x41)
        {
          result = 0;
          if (v8 >= 4 && (*(_WORD *)(v9 + 4) & 0xFFDF) == 0x54)
          {
            v11 = *(unsigned __int16 *)(v9 + 6);
            return (v11 & 0xFFFFFFDF) == 65;
          }
        }
      }
      return result;
    }
    return 1;
  }
  v12 = *(_BYTE *)v9 & 0xDF;
  if (v8 != 1
    && v12 == 66
    && v8 >= 3
    && (*(_BYTE *)(v9 + 1) & 0xDF) == 0x4C
    && v8 >= 4
    && (*(_BYTE *)(v9 + 2) & 0xDF) == 0x4F
    && (*(_BYTE *)(v9 + 3) & 0xDF) == 0x42)
  {
    return 1;
  }
  result = 0;
  if (v8 >= 2 && v12 == 68)
  {
    result = 0;
    if (v8 >= 3 && (*(_BYTE *)(v9 + 1) & 0xDF) == 0x41)
    {
      result = 0;
      if (v8 >= 4 && (*(_BYTE *)(v9 + 2) & 0xDF) == 0x54)
      {
        v11 = *(unsigned __int8 *)(v9 + 3);
        return (v11 & 0xFFFFFFDF) == 65;
      }
    }
  }
  return result;
}

BOOL WTF::URL::hasFetchScheme(WTF::URL *this)
{
  int v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 *v9;
  _BOOL8 result;
  int v11;
  unsigned int v12;

  v1 = *((_DWORD *)this + 2);
  if ((v1 & 2) != 0)
    return 1;
  if ((v1 & 1) == 0)
    return 0;
  v2 = v1 & 0xFFFFFFC0;
  if (v2 != 256)
  {
    if (v2 != 320)
      return 0;
    v3 = *(_QWORD *)this;
    if (!*(_QWORD *)this)
      return 0;
    v4 = *(_DWORD *)(v3 + 4);
    if (!v4)
      return 0;
    v5 = *(_QWORD *)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      if (v4 == 1
        || (*(_BYTE *)v5 & 0xDF) != 0x41
        || v4 < 3
        || (*(_BYTE *)(v5 + 1) & 0xDF) != 0x42
        || v4 < 4
        || (*(_BYTE *)(v5 + 2) & 0xDF) != 0x4F
        || v4 < 5
        || (*(_BYTE *)(v5 + 3) & 0xDF) != 0x55)
      {
        return 0;
      }
      v6 = *(unsigned __int8 *)(v5 + 4);
    }
    else
    {
      if (v4 == 1
        || (*(_WORD *)v5 & 0xFFDF) != 0x41
        || v4 < 3
        || (*(_WORD *)(v5 + 2) & 0xFFDF) != 0x42
        || v4 < 4
        || (*(_WORD *)(v5 + 4) & 0xFFDF) != 0x4F
        || v4 < 5
        || (*(_WORD *)(v5 + 6) & 0xFFDF) != 0x55)
      {
        return 0;
      }
      v6 = *(unsigned __int16 *)(v5 + 8);
    }
    return (v6 & 0xFFFFFFDF) == 0x54;
  }
  v7 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v8 = *(_DWORD *)(v7 + 4);
  if (!v8)
    return 0;
  v9 = *(unsigned __int8 **)(v7 + 8);
  if ((*(_BYTE *)(v7 + 16) & 4) == 0)
  {
    if ((v8 == 1
       || (*(_WORD *)v9 & 0xFFDF) != 0x42
       || v8 < 3
       || (*((_WORD *)v9 + 1) & 0xFFDF) != 0x4C
       || v8 < 4
       || (*((_WORD *)v9 + 2) & 0xFFDF) != 0x4F
       || (*((_WORD *)v9 + 3) & 0xFFDF) != 0x42)
      && (v8 < 2
       || (*(_WORD *)v9 & 0xFFDF) != 0x44
       || v8 < 3
       || (*((_WORD *)v9 + 1) & 0xFFDF) != 0x41
       || v8 < 4
       || (*((_WORD *)v9 + 2) & 0xFFDF) != 0x54
       || (*((_WORD *)v9 + 3) & 0xFFDF) != 0x41))
    {
      result = 0;
      if (v8 >= 2 && (*(_WORD *)v9 & 0xFFDF) == 0x46)
      {
        result = 0;
        if (v8 >= 3 && (*((_WORD *)v9 + 1) & 0xFFDF) == 0x49)
        {
          result = 0;
          if (v8 >= 4 && (*((_WORD *)v9 + 2) & 0xFFDF) == 0x4C)
            return (*((_WORD *)v9 + 3) & 0xFFDF) == 69;
        }
      }
      return result;
    }
    return 1;
  }
  v11 = *v9;
  v12 = v11 & 0xFFFFFFDF;
  if (v8 != 1
    && v12 == 66
    && v8 >= 3
    && (v9[1] & 0xDF) == 0x4C
    && v8 >= 4
    && (v9[2] & 0xDF) == 0x4F
    && (v9[3] & 0xDF) == 0x42
    || v8 >= 2
    && v12 == 68
    && v8 >= 3
    && (v9[1] & 0xDF) == 0x41
    && v8 >= 4
    && (v9[2] & 0xDF) == 0x54
    && (v9[3] & 0xDF) == 0x41)
  {
    return 1;
  }
  result = 0;
  if (v8 >= 2 && (v11 & 0xFFFFFFDF) == 0x46)
  {
    result = 0;
    if (v8 >= 3 && (v9[1] & 0xDF) == 0x49)
    {
      result = 0;
      if (v8 >= 4 && (v9[2] & 0xDF) == 0x4C)
        return (v9[3] & 0xDF) == 69;
    }
  }
  return result;
}

const char *WTF::URL::protocol(WTF::URL *this)
{
  uint64_t v2;

  if ((*((_DWORD *)this + 2) & 1) == 0)
    return 0;
  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this && *(_DWORD *)(v2 + 4))
    return *(const char **)(v2 + 8);
  else
    return "";
}

const char *WTF::URL::host(WTF::URL *this)
{
  const char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;

  if ((*((_BYTE *)this + 8) & 1) == 0)
    return 0;
  LODWORD(v3) = *((_DWORD *)this + 5);
  if ((_DWORD)v3 == *((_DWORD *)this + 3))
    v3 = v3;
  else
    v3 = (v3 + 1);
  v4 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return "";
  result = *(const char **)(v4 + 8);
  v5 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  if (v5 <= v3)
    return "";
  v6 = *((_DWORD *)this + 6) - v3;
  if ((int)v5 - (int)v3 > v6 || (v6 = v5 - v3, (_DWORD)v3))
  {
    v7 = v6;
    v8 = v5 - v3;
    if ((v5 & 0x100000000) != 0)
    {
      if (v8 >= v7)
      {
        result += v3;
        return result;
      }
    }
    else if (v8 >= v7)
    {
      result += 2 * v3;
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t *WTF::URL::port(uint64_t *this)
{
  unsigned int v1;
  uint64_t v2;
  const char *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  const char *v12;
  const char *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const char *v19;
  const char *v20;
  int v21;
  unsigned __int16 v22;
  char v23;
  unsigned __int16 v24;
  int v25;
  int v26;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned __int16 v32;
  int v33;
  int v34;
  int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;

  v1 = *((_DWORD *)this + 2);
  if ((v1 & 0x38) == 0)
    return 0;
  v2 = *this;
  if (!*this
    || (v3 = *(const char **)(v2 + 8),
        v4 = *(unsigned int *)(v2 + 4) | ((unint64_t)((*(_DWORD *)(v2 + 16) >> 2) & 1) << 32),
        v5 = (*((_DWORD *)this + 6) + 1),
        v4 <= v5))
  {
    v4 = 0;
    v3 = "";
    goto LABEL_14;
  }
  v6 = ((v1 >> 3) & 7) - 1;
  if ((int)v4 - (int)v5 <= v6)
  {
    v6 = v4 - v5;
    if (*((_DWORD *)this + 6) == -1)
    {
      v15 = v4;
      v4 = v4;
      if ((v15 & 0x100000000) == 0)
        goto LABEL_24;
      goto LABEL_14;
    }
  }
  v7 = v4 - v5;
  if ((v4 & 0x100000000) != 0)
  {
    if (v7 >= v6)
    {
      v3 += v5;
      v8 = v6 | 0x100000000;
      v4 = v8;
      if ((v8 & 0x100000000) == 0)
      {
LABEL_24:
        if (!v3 || !v4)
          return 0;
        v16 = 0;
        v17 = 2 * v4;
        while (1)
        {
          v18 = *(unsigned __int16 *)&v3[v16];
          if ((v18 - 9) >= 5 && v18 != 32)
            break;
          --v4;
          v16 += 2;
          if (v17 == v16)
            return 0;
        }
        if (v18 == 43)
        {
          if (v17 - 2 == v16)
            return 0;
          --v4;
          v19 = &v3[v16];
          v21 = *((unsigned __int16 *)v19 + 1);
          v20 = v19 + 2;
          v18 = v21;
        }
        else
        {
          v20 = &v3[v16];
        }
        if ((v18 - 48) > 9)
          return 0;
        v22 = 0;
        v23 = 0;
        while (1)
        {
          v32 = v18 - 48;
          v33 = 10 * v22;
          if ((v33 & 0xF0000) == 0)
            v22 *= 10;
          v34 = v22 + v32;
          if ((v33 & 0xF0000) != 0 || (unsigned __int16)v34 != v34)
            v23 = 1;
          if ((unsigned __int16)v34 == v34)
            v22 = v34;
          if (!--v4)
            break;
          v36 = *((unsigned __int16 *)v20 + 1);
          v20 += 2;
          LOWORD(v18) = v36;
          v37 = v36 - 48;
          if ((v36 - 48) > 9 || v37 >= 0xA)
          {
            if (!v23)
            {
              v38 = 0;
              while (1)
              {
                v39 = *(unsigned __int16 *)&v20[2 * v38];
                if ((v39 - 9) >= 5 && v39 != 32)
                  break;
                if (v4 == ++v38)
                  return (uint64_t *)(v22 | 0x10000 | v22 & 0xFF00u);
              }
            }
            return 0;
          }
        }
        goto LABEL_75;
      }
LABEL_14:
      if (!v3 || !v4)
        return 0;
      v9 = 0;
      while (1)
      {
        v10 = v3[v9];
        if ((v10 - 9) >= 5 && v10 != 32)
          break;
        if (v4 == ++v9)
          return 0;
      }
      if (v10 == 43)
      {
        if (v4 - 1 == v9)
          return 0;
        v11 = ~v9 + v4;
        v12 = &v3[v9];
        v14 = *((unsigned __int8 *)v12 + 1);
        v13 = v12 + 1;
        v10 = v14;
      }
      else
      {
        v13 = &v3[v9];
        v11 = v4 - v9;
      }
      if ((v10 - 48) > 9)
        return 0;
      v22 = 0;
      v23 = 0;
      while (1)
      {
        v24 = v10 - 48;
        v25 = 10 * v22;
        if ((v25 & 0xF0000) == 0)
          v22 *= 10;
        v26 = v22 + v24;
        if ((v25 & 0xF0000) != 0 || (unsigned __int16)v26 != v26)
          v23 = 1;
        if ((unsigned __int16)v26 == v26)
          v22 = v26;
        if (!--v11)
          break;
        v28 = *(unsigned __int8 *)++v13;
        LOBYTE(v10) = v28;
        v29 = v28 - 48;
        if ((v28 - 48) > 9 || v29 >= 0xA)
        {
          if (!v23)
          {
            v30 = 0;
            while (1)
            {
              v31 = v13[v30];
              if ((v31 - 9) >= 5 && v31 != 32)
                break;
              if (v11 == ++v30)
                return (uint64_t *)(v22 | 0x10000 | v22 & 0xFF00u);
            }
          }
          return 0;
        }
      }
LABEL_75:
      if (!v23)
        return (uint64_t *)(v22 | 0x10000 | v22 & 0xFF00u);
      return 0;
    }
  }
  else if (v7 >= v6)
  {
    v3 += 2 * v5;
    v4 = v6;
    goto LABEL_24;
  }
  __break(1u);
  return this;
}

uint64_t WTF::URL::hostAndPort@<X0>(WTF::URL *this@<X0>, int **a2@<X8>)
{
  uint64_t result;
  int v5;
  int *v6;
  unsigned __int16 v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unsigned __int16 v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  char *v30;
  _WORD *v31;
  uint64_t v32;
  char *v33;
  unsigned int v34;
  char *v35;
  size_t v36;
  uint64_t v37;
  _WORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint16x8_t *v47;
  unint64_t v48;
  uint8x8_t *v49;
  uint8x16_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t *v53;
  unint64_t v54;
  char *v55;
  _WORD *v56;
  _DWORD *v57;

  result = (uint64_t)WTF::URL::port((uint64_t *)this);
  v5 = *((_DWORD *)this + 2);
  if (result < 0x10000)
  {
    if ((v5 & 1) == 0)
    {
LABEL_3:
      v6 = 0;
      goto LABEL_94;
    }
    LODWORD(v10) = *((_DWORD *)this + 5);
    if ((_DWORD)v10 == *((_DWORD *)this + 3))
      v10 = v10;
    else
      v10 = (v10 + 1);
    v11 = *(_QWORD *)this;
    if (!*(_QWORD *)this
      || (v12 = *(char **)(v11 + 8),
          v13 = *(unsigned int *)(v11 + 4) | ((unint64_t)((*(_DWORD *)(v11 + 16) >> 2) & 1) << 32),
          v13 <= v10))
    {
LABEL_43:
      v6 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_94;
    }
    v19 = *((_DWORD *)this + 6) - v10;
    if ((int)v13 - (int)v10 <= v19)
    {
      v19 = v13 - v10;
      if (!(_DWORD)v10)
      {
        v20 = v13;
        v22 = v13;
        if ((v13 & 0x100000000) != 0)
          goto LABEL_28;
        goto LABEL_38;
      }
    }
    v20 = v19;
    v21 = v13 - v10;
    if ((v13 & 0x100000000) != 0)
    {
      if (v21 >= v19)
      {
        v12 += v10;
        v20 = v19;
        v22 = v19;
LABEL_28:
        if (!v12)
          goto LABEL_3;
        if (!v22)
          goto LABEL_43;
        if (v22 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x197B26990);
        }
        v6 = (int *)WTF::fastCompactMalloc((WTF *)(v22 + 20));
        result = (uint64_t)(v6 + 5);
        *v6 = 2;
        v6[1] = v20;
        *((_QWORD *)v6 + 1) = v6 + 5;
        v6[4] = 4;
        if (v22 == 1)
        {
          *(_BYTE *)result = *v12;
          goto LABEL_94;
        }
        v35 = v12;
        v36 = v22;
LABEL_70:
        result = (uint64_t)memcpy((void *)result, v35, v36);
        goto LABEL_94;
      }
      goto LABEL_95;
    }
    if (v21 >= v19)
    {
      v12 += 2 * v10;
      v22 = v19;
LABEL_38:
      if (!v12)
        goto LABEL_3;
      if (!v22)
        goto LABEL_43;
      if (v22 < 0x7FFFFFF0)
      {
        v6 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v22 + 20));
        result = (uint64_t)(v6 + 5);
        *v6 = 2;
        v6[1] = v20;
        *((_QWORD *)v6 + 1) = v6 + 5;
        v6[4] = 0;
        if (v22 == 1)
        {
          *(_WORD *)result = *(_WORD *)v12;
          goto LABEL_94;
        }
        v35 = v12;
        v36 = 2 * v22;
        goto LABEL_70;
      }
      __break(0xC471u);
LABEL_99:
      JUMPOUT(0x197B26988);
    }
LABEL_95:
    __break(1u);
LABEL_96:
    *a2 = 0;
    __break(0xC471u);
    goto LABEL_99;
  }
  v7 = result;
  if ((v5 & 1) != 0)
  {
    LODWORD(v14) = *((_DWORD *)this + 5);
    if ((_DWORD)v14 == *((_DWORD *)this + 3))
      v14 = v14;
    else
      v14 = (v14 + 1);
    v15 = *(_QWORD *)this;
    if (*(_QWORD *)this
      && (v8 = *(const char **)(v15 + 8),
          v16 = *(unsigned int *)(v15 + 4) | ((unint64_t)((*(_DWORD *)(v15 + 16) >> 2) & 1) << 32),
          v16 > v14))
    {
      v17 = *((_DWORD *)this + 6) - v14;
      if ((int)v16 - (int)v14 > v17 || (v17 = v16 - v14, (_DWORD)v14))
      {
        v9 = v17;
        v18 = v16 - v14;
        if ((v16 & 0x100000000) != 0)
        {
          if (v18 < v17)
            goto LABEL_95;
          v8 += v14;
          v9 = v17 | 0x100000000;
        }
        else
        {
          if (v18 < v17)
            goto LABEL_95;
          v8 += 2 * v14;
        }
      }
      else
      {
        v9 = v16;
      }
    }
    else
    {
      v9 = 0x100000000;
      v8 = "";
    }
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  v23 = 0;
  v24 = result;
  do
  {
    ++v23;
    v25 = v24;
    v24 /= 0xAu;
  }
  while (v25 > 9);
  if (v23 < 0)
    goto LABEL_96;
  v26 = __OFADD__(v23, 1);
  v27 = v23 + 1;
  v28 = v26;
  if ((v9 & 0x80000000) != 0)
    goto LABEL_96;
  if (v28)
    goto LABEL_96;
  v29 = (v9 + v27);
  if (__OFADD__((_DWORD)v9, v27))
    goto LABEL_96;
  if ((v9 & 0x100000000) == 0)
  {
    if (v29 > 0x7FFFFFEF)
      goto LABEL_96;
    WTF::tryFastCompactMalloc((WTF *)(2 * v29 + 20), &v57);
    v6 = v57;
    if (!v57)
      goto LABEL_96;
    v31 = v57 + 5;
    *v57 = 2;
    v6[1] = v29;
    *((_QWORD *)v6 + 1) = v6 + 5;
    v6[4] = 0;
    if ((_DWORD)v9)
    {
      if ((_DWORD)v9 == 1)
        *v31 = *(_WORD *)v8;
      else
        memcpy(v6 + 5, v8, 2 * v9);
    }
    v37 = 0;
    v38 = &v31[v9];
    *v38 = 58;
    v39 = 7;
    result = 1;
    do
    {
      v40 = v39;
      v41 = v37;
      v42 = result;
      v43 = v7;
      --v39;
      *((_BYTE *)&v57 + v39) = (v7 % 0xAu) | 0x30;
      ++v37;
      ++result;
      v7 /= 0xAu;
    }
    while (v43 > 9);
    if (v40 > 7)
      goto LABEL_94;
    v44 = v41 + 1;
    if ((unint64_t)(v41 + 1) < 8)
    {
      v45 = v39;
      goto LABEL_92;
    }
    if (v44 >= 0x20)
    {
      v46 = v44 & 0xFFFFFFFFFFFFFFE0;
      v47 = (uint16x8_t *)((char *)v6 + 2 * v9 + 54);
      v48 = v42 & 0xFFFFFFFFFFFFFFE0;
      v49 = (uint8x8_t *)((char *)&v57 - v41 + 22);
      do
      {
        v50 = *(uint8x16_t *)v49[-2].i8;
        v51 = vmovl_u8(*v49);
        v52 = vmovl_high_u8(*(uint8x16_t *)v49->i8);
        v47[-2] = vmovl_u8(*(uint8x8_t *)v50.i8);
        v47[-1] = vmovl_high_u8(v50);
        *v47 = v51;
        v47[1] = v52;
        v47 += 4;
        v49 += 4;
        v48 -= 32;
      }
      while (v48);
      if (v44 == v46)
        goto LABEL_94;
      if ((v44 & 0x18) == 0)
      {
        v38 += v46;
        v45 = v39 + v46;
        goto LABEL_92;
      }
    }
    else
    {
      v46 = 0;
    }
    v45 = v39 + (v44 & 0xFFFFFFFFFFFFFFF8);
    v38 += v44 & 0xFFFFFFFFFFFFFFF8;
    v53 = (uint16x8_t *)((char *)v6 + 2 * v46 + 2 * v9 + 22);
    v54 = v46 - (v42 & 0xFFFFFFFFFFFFFFF8);
    v55 = (char *)&v57 + v46;
    do
    {
      *v53++ = vmovl_u8(*(uint8x8_t *)&v55[v39]);
      v55 += 8;
      v54 += 8;
    }
    while (v54);
    if (v44 == (v44 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_94;
LABEL_92:
    v56 = v38 + 1;
    do
      *v56++ = *((unsigned __int8 *)&v57 + v45++);
    while (v45 != 7);
    goto LABEL_94;
  }
  if ((v29 & 0x80000000) != 0)
    goto LABEL_96;
  result = WTF::tryFastCompactMalloc((WTF *)(v29 + 20), &v57);
  v6 = v57;
  if (!v57)
    goto LABEL_96;
  v30 = (char *)(v57 + 5);
  *v57 = 2;
  v6[1] = v29;
  *((_QWORD *)v6 + 1) = v6 + 5;
  v6[4] = 4;
  if ((_DWORD)v9)
  {
    if ((_DWORD)v9 == 1)
      *v30 = *v8;
    else
      result = (uint64_t)memcpy(v6 + 5, v8, v9);
  }
  v32 = 0;
  v33 = &v30[v9];
  *v33 = 58;
  do
  {
    v34 = v7;
    *((_BYTE *)&v57 + v32-- + 6) = (v7 % 0xAu) | 0x30;
    v7 /= 0xAu;
  }
  while (v34 > 9);
  if (v32 + 8 <= 7)
  {
    v35 = (char *)&v57 + v32 + 7;
    v36 = -v32;
    result = (uint64_t)(v33 + 1);
    goto LABEL_70;
  }
LABEL_94:
  *a2 = v6;
  return result;
}

_QWORD *WTF::URL::protocolHostAndPort@<X0>(WTF::URL *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int8x16_t *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int8x16_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  v3 = *((_DWORD *)this + 5);
  v4 = *((unsigned int *)this + 3);
  if (v3 <= v4)
  {
    v15 = *((_DWORD *)this + 2);
    v16 = ((v15 >> 3) & 7) + *((_DWORD *)this + 6);
    result = *(_QWORD **)this;
    if ((_DWORD)v16 == (v15 >> 6) + 1)
    {
      if (result)
      {
        v18 = v16 + 1;
        v19 = *((_DWORD *)result + 1);
        if ((int)v16 + 1 < v19)
        {
          v20 = result[1];
          if ((result[2] & 4) != 0)
          {
            if (*(_BYTE *)(v20 + v16) == 47)
            {
              v21 = *(unsigned __int8 *)(v20 + v18);
LABEL_53:
              if (v21 == 46)
                LODWORD(v16) = v16 + 2;
            }
          }
          else if (*(_WORD *)(v20 + 2 * v16) == 47)
          {
            v21 = *(unsigned __int16 *)(v20 + 2 * v18);
            goto LABEL_53;
          }
        }
LABEL_20:
        if (v19 > v16)
          return WTF::StringImpl::substring(result, 0, v16, a2);
        *(_DWORD *)result += 2;
        *a2 = (uint64_t)result;
        return result;
      }
    }
    else if (result)
    {
      v19 = *((_DWORD *)result + 1);
      goto LABEL_20;
    }
    *a2 = 0;
    return result;
  }
  v5 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v6 = *(unsigned int *)(v5 + 4);
    v7 = ((unint64_t)*(unsigned int *)(v5 + 16) >> 2) & 1;
    v8 = *(int8x16_t **)(v5 + 8);
    v9 = v4 >= v6;
    v10 = (v7 << 32) | v4;
    if (v9)
      v11 = *(unsigned int *)(v5 + 4) | ((((unint64_t)*(unsigned int *)(v5 + 16) >> 2) & 1) << 32);
    else
      v11 = v10;
    v12 = v6 | (v7 << 32);
    if ((_DWORD)v6)
    {
      v12 = *(unsigned int *)(v5 + 4) | ((((unint64_t)*(unsigned int *)(v5 + 16) >> 2) & 1) << 32);
      v13 = *(int8x16_t **)(v5 + 8);
    }
    else
    {
      v13 = (int8x16_t *)"";
    }
    if ((_DWORD)v6)
      v14 = v11;
    else
      v14 = 0x100000000;
  }
  else
  {
    v8 = 0;
    v14 = 0x100000000;
    v12 = 0x100000000;
    v13 = (int8x16_t *)"";
  }
  v22 = v3 + 1;
  v23 = *((_DWORD *)this + 2);
  v24 = ((v23 >> 3) & 7) + *((_DWORD *)this + 6);
  if ((_DWORD)v24 == (v23 >> 6) + 1 && v5 != 0)
  {
    v29 = v24 + 1;
    if ((v24 + 1) < *(_DWORD *)(v5 + 4))
    {
      v30 = *(_QWORD *)(v5 + 8);
      if ((*(_BYTE *)(v5 + 16) & 4) != 0)
      {
        if (*(_BYTE *)(v30 + v24) != 47)
          goto LABEL_28;
        v31 = *(unsigned __int8 *)(v30 + v29);
      }
      else
      {
        if (*(_WORD *)(v30 + 2 * v24) != 47)
          goto LABEL_28;
        v31 = *(unsigned __int16 *)(v30 + 2 * v29);
      }
      if (v31 == 46)
        LODWORD(v24) = v24 + 2;
    }
  }
LABEL_28:
  if (v12 <= v22)
  {
    v27 = 0x100000000;
    v8 = (int8x16_t *)"";
    if ((v14 & 0x80000000) != 0)
      goto LABEL_62;
    goto LABEL_48;
  }
  v26 = v24 - v22;
  if ((int)v12 - (int)v22 > v26 || (v26 = v12 - v22, (_DWORD)v22))
  {
    v27 = v26;
    v28 = v12 - v22;
    if ((v12 & 0x100000000) != 0)
    {
      if (v28 >= v26)
      {
        v8 = (int8x16_t *)((char *)v8 + v22);
        v27 = v26 | 0x100000000;
        if (((v26 | v14) & 0x80000000) != 0)
          goto LABEL_62;
        goto LABEL_48;
      }
    }
    else if (v28 >= v26)
    {
      v8 = (int8x16_t *)((char *)v8 + 2 * v22);
      if (((v26 | v14) & 0x80000000) != 0)
        goto LABEL_62;
      goto LABEL_48;
    }
    __break(1u);
    goto LABEL_62;
  }
  v27 = v12;
  if (((v12 | v14) & 0x80000000) != 0)
  {
LABEL_62:
    *a2 = 0;
    __break(0xC471u);
LABEL_63:
    JUMPOUT(0x197B26BCCLL);
  }
LABEL_48:
  if (__OFADD__((_DWORD)v14, (_DWORD)v27))
    goto LABEL_62;
  result = (_QWORD *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>((v14 + v27), HIDWORD(v14) & HIDWORD(v27), v13, v14, v8, v27, (int **)a2);
  if (!*a2)
  {
    __break(0xC471u);
    goto LABEL_63;
  }
  return result;
}

void WTF::URL::user(WTF::URL *this@<X0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>, float a5@<S2>)
{
  uint64_t v5;
  int16x8_t *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;

  v5 = *(_QWORD *)this;
  if (!*(_QWORD *)this
    || (v6 = *(int16x8_t **)(v5 + 8),
        v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32),
        v8 = *((unsigned int *)this + 3),
        v7 <= v8))
  {
    v10 = 0x100000000;
    v6 = (int16x8_t *)"";
    v12 = a2;
    goto LABEL_8;
  }
  v9 = *((_DWORD *)this + 4) - v8;
  if ((int)v7 - (int)v8 <= v9)
  {
    v9 = v7 - v8;
    if (!(_DWORD)v8)
    {
      v10 = v7;
      v12 = a2;
      goto LABEL_8;
    }
  }
  v10 = v9;
  v11 = v7 - v8;
  if ((v7 & 0x100000000) != 0)
  {
    if (v11 >= v10)
    {
      v6 = (int16x8_t *)((char *)v6 + v8);
      v10 |= 0x100000000uLL;
      v12 = a2;
LABEL_8:
      WTF::decodeEscapeSequencesFromParsedURL(v12, v6, v10, a3, a4, a5);
      return;
    }
  }
  else if (v11 >= v10)
  {
    v6 = (int16x8_t *)((char *)v6 + 2 * v8);
    v12 = a2;
    goto LABEL_8;
  }
  __break(1u);
}

void WTF::decodeEscapeSequencesFromParsedURL(uint64_t *a1, int16x8_t *a2, uint64_t a3, double a4, double a5, float a6)
{
  int v9;
  unint64_t v10;
  int *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  int16x8_t *v17;
  int16x8_t *v18;
  int16x8_t v19;
  int16x8_t *v20;
  int8x16_t v21;
  char *v22;
  int16x8_t v23;
  unsigned int v24;
  _BYTE *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  __int16 v32;
  size_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  unsigned __int8 v49;
  char *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  int16x8_t *v59;
  size_t v60;
  uint64_t *v61;
  __int16 v62;
  void *__src;
  uint64_t v64;
  _BYTE v65[104];

  v9 = BYTE4(a3);
  v10 = a3;
  if (a3 <= 2)
    goto LABEL_2;
  if (BYTE4(a3))
  {
    v13 = 16;
    if (a3 < 0x10uLL)
      v13 = a3;
    v14 = v13;
    v15 = a2;
    do
    {
      if (*v15 == 37)
        goto LABEL_16;
      ++v15;
      --v14;
    }
    while (v14);
    if (a3 < 0x11uLL)
      goto LABEL_2;
    v15 = memchr(&a2->i8[v13], 37, a3 - v13);
    if (!v15)
      goto LABEL_2;
LABEL_16:
    if (v15 - (_BYTE *)a2 == -1)
      goto LABEL_2;
  }
  else
  {
    v16 = 2 * a3;
    if (v16 <= -2)
    {
LABEL_100:
      __break(1u);
LABEL_101:
      __break(0xC471u);
      goto LABEL_104;
    }
    v17 = (int16x8_t *)((char *)a2 + v16);
    v18 = a2;
    if ((unint64_t)v16 <= 0x3E)
    {
      while (v18->i16[0] != 37)
      {
        v18 = (int16x8_t *)((char *)v18 + 2);
        v16 -= 2;
        if (!v16)
          goto LABEL_2;
      }
    }
    else
    {
      if (a3 < 8uLL)
      {
LABEL_31:
        if (v18 >= v17)
          goto LABEL_2;
        v20 = v17 - 1;
        v23.i64[0] = 0x25002500250025;
        v23.i64[1] = 0x25002500250025;
        v21 = (int8x16_t)vceqq_s16(v17[-1], v23);
        v23.i16[0] = vmaxvq_u16((uint16x8_t)v21);
        if (!v23.i32[0])
          goto LABEL_2;
      }
      else
      {
        v19.i64[0] = 0x25002500250025;
        v19.i64[1] = 0x25002500250025;
        v20 = a2;
        while (1)
        {
          v21 = (int8x16_t)vceqq_s16(*v20, v19);
          LOWORD(a6) = vmaxvq_u16((uint16x8_t)v21);
          if (a6 != 0.0)
            break;
          v18 = v20 + 1;
          v22 = &v20[1].i8[14];
          ++v20;
          if (v22 >= (char *)v17)
            goto LABEL_31;
        }
      }
      v18 = (int16x8_t *)((char *)v20
                        + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v21)));
    }
    if (v18 == v17 || ((char *)v18 - (char *)a2) >> 1 == -1)
    {
LABEL_2:
      if (v9)
      {
        if (a2)
        {
          if (v10)
          {
            if (v10 >> 31)
            {
              __break(0xC471u);
              JUMPOUT(0x197B2721CLL);
            }
            v11 = (int *)WTF::fastCompactMalloc((WTF *)(v10 + 20));
            v12 = v11 + 5;
            *v11 = 2;
            v11[1] = a3;
            *((_QWORD *)v11 + 1) = v11 + 5;
            v11[4] = 4;
            if (v10 == 1)
            {
              *v12 = a2->i8[0];
LABEL_98:
              *a1 = (uint64_t)v11;
              return;
            }
            v59 = a2;
            v60 = v10;
            goto LABEL_97;
          }
LABEL_24:
          v11 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
          goto LABEL_98;
        }
LABEL_23:
        v11 = 0;
        goto LABEL_98;
      }
      if (!a2)
        goto LABEL_23;
      if (!v10)
        goto LABEL_24;
      if (v10 < 0x7FFFFFF0)
      {
        v11 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v10 + 20));
        v12 = v11 + 5;
        *v11 = 2;
        v11[1] = a3;
        *((_QWORD *)v11 + 1) = v11 + 5;
        v11[4] = 0;
        if (v10 == 1)
        {
          *(_WORD *)v12 = a2->i16[0];
          goto LABEL_98;
        }
        v59 = a2;
        v60 = 2 * v10;
LABEL_97:
        memcpy(v12, v59, v60);
        goto LABEL_98;
      }
      __break(0xC471u);
LABEL_104:
      JUMPOUT(0x197B27214);
    }
  }
  v61 = a1;
  __src = v65;
  v64 = 100;
  if (v10 >= 0x65)
  {
    LODWORD(v64) = a3;
    __src = (void *)WTF::fastMalloc((WTF *)v10);
  }
  v24 = 0;
  do
  {
    while (1)
    {
      while (1)
      {
        v27 = v24 + 3;
        if (v24 + 3 > a3)
          goto LABEL_57;
        if ((a3 & 0xFF00000000) != 0)
          break;
        if (v24 >= a3)
          goto LABEL_100;
        if (a2->i16[v24] == 37)
        {
          if (v24 + 1 >= a3 || v24 + 2 >= a3)
            goto LABEL_100;
          v30 = a2->u16[v24 + 1];
          v31 = a2->u16[v24 + 2];
          if (v30 - 48 < 0xA)
            goto LABEL_55;
          goto LABEL_54;
        }
LABEL_57:
        v62 = 0;
        if (!v9)
        {
          v32 = a2->i16[v24];
          v33 = HIDWORD(v64);
          if (HIDWORD(v64) != (_DWORD)v64)
            goto LABEL_39;
LABEL_61:
          v34 = v33 + (v33 >> 2);
          if (v34 >= 0x10)
            v35 = v34 + 1;
          else
            v35 = 16;
          if (v35 <= v33 + 1)
            v36 = v33 + 1;
          else
            v36 = v35;
          v37 = __src;
          if (v36 < 0x65)
          {
            __src = v65;
            LODWORD(v64) = 100;
            memcpy(v65, v37, v33);
            if (v65 == v37)
            {
LABEL_76:
              v25 = (char *)__src + HIDWORD(v64);
              goto LABEL_40;
            }
          }
          else
          {
            if (HIDWORD(v36))
              goto LABEL_101;
            v38 = (void *)WTF::fastMalloc((WTF *)v36);
            LODWORD(v64) = v36;
            __src = v38;
            memcpy(v38, v37, v33);
            if (v65 == v37)
              goto LABEL_76;
          }
          if (v37)
          {
            if (__src == v37)
            {
              __src = 0;
              LODWORD(v64) = 0;
            }
            WTF::fastFree((unint64_t)v37, v39, v40, v41, v42, v43, v44, v45);
          }
          goto LABEL_76;
        }
        LOBYTE(v32) = a2->i8[v24];
        v33 = HIDWORD(v64);
        if (HIDWORD(v64) == (_DWORD)v64)
          goto LABEL_61;
LABEL_39:
        v25 = (char *)__src + v33;
LABEL_40:
        *v25 = v32;
        v26 = ++HIDWORD(v64);
        if (++v24 >= a3)
          goto LABEL_87;
      }
      if (v24 >= a3)
        goto LABEL_100;
      if (a2->i8[v24] != 37)
        goto LABEL_57;
      v28 = v24 + 1;
      if (v28 >= a3)
        goto LABEL_100;
      v29 = v24 + 2;
      if (v29 >= a3)
        goto LABEL_100;
      v30 = a2->u8[v28];
      v31 = a2->u8[v29];
      if (v30 - 48 < 0xA)
        goto LABEL_55;
LABEL_54:
      if ((unsigned __int16)((v30 | 0x20) - 97) > 5u)
        goto LABEL_57;
LABEL_55:
      if (v31 - 48 >= 0xA && (unsigned __int16)((v31 | 0x20) - 97) > 5u)
        goto LABEL_57;
      v46 = v30 >= 0x41 ? 9 : 0;
      v47 = v46 + v30;
      v48 = v31 >= 0x41 ? (v31 + 9) & 0xF : v31 - 48;
      v49 = v48 | (16 * v47);
      v62 = v49 | 0x100;
      if (HIDWORD(v64) != (_DWORD)v64)
        break;
      v50 = WTF::Vector<unsigned char,100ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&__src, (WTF *)(HIDWORD(v64) + 1), (unint64_t)&v62);
      *((_BYTE *)__src + HIDWORD(v64)) = *v50;
      v26 = ++HIDWORD(v64);
      v24 += 3;
      if (v27 >= a3)
        goto LABEL_87;
    }
    *((_BYTE *)__src + HIDWORD(v64)) = v49;
    v26 = ++HIDWORD(v64);
    v24 += 3;
  }
  while (v27 < a3);
LABEL_87:
  if (__src)
  {
    WTF::fromUTF8Impl<false>((unint64_t)__src, v26, v61);
    v58 = __src;
    if (v65 != __src && __src)
    {
      __src = 0;
      LODWORD(v64) = 0;
      WTF::fastFree((unint64_t)v58, v51, v52, v53, v54, v55, v56, v57);
    }
  }
  else
  {
    *v61 = 0;
  }
}

const char *WTF::URL::encodedUser(WTF::URL *this)
{
  uint64_t v2;
  const char *result;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return "";
  result = *(const char **)(v2 + 8);
  v4 = *(unsigned int *)(v2 + 4) | ((unint64_t)((*(_DWORD *)(v2 + 16) >> 2) & 1) << 32);
  v5 = *((unsigned int *)this + 3);
  if (v4 <= v5)
    return "";
  v6 = *((_DWORD *)this + 4) - v5;
  if ((int)v4 - (int)v5 > v6 || (v6 = v4 - v5, (_DWORD)v5))
  {
    v7 = v6;
    v8 = v4 - v5;
    if ((v4 & 0x100000000) != 0)
    {
      if (v8 >= v7)
      {
        result += v5;
        return result;
      }
    }
    else if (v8 >= v7)
    {
      result += 2 * v5;
      return result;
    }
    __break(1u);
  }
  return result;
}

void WTF::URL::password(WTF::URL *this@<X0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>, float a5@<S2>)
{
  int v5;
  int v6;
  int16x8_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;

  v6 = *((_DWORD *)this + 4);
  v5 = *((_DWORD *)this + 5);
  if (v5 == v6)
  {
    v7 = 0;
    v8 = 0x100000000;
    v9 = a2;
LABEL_3:
    WTF::decodeEscapeSequencesFromParsedURL(v9, v7, v8, a3, a4, a5);
    return;
  }
  v10 = *(_QWORD *)this;
  if (!*(_QWORD *)this
    || (v7 = *(int16x8_t **)(v10 + 8),
        v11 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32),
        v12 = (v6 + 1),
        v11 <= v12))
  {
    v8 = 0x100000000;
    v7 = (int16x8_t *)"";
    v9 = a2;
    goto LABEL_3;
  }
  v13 = v5 + ~v6;
  if ((int)v11 - (int)v12 <= v13)
  {
    v13 = v11 - v12;
    if (v6 == -1)
    {
      v8 = v11;
      v9 = a2;
      goto LABEL_3;
    }
  }
  v8 = v13;
  v14 = v11 - v12;
  if ((v11 & 0x100000000) != 0)
  {
    if (v14 >= v8)
    {
      v7 = (int16x8_t *)((char *)v7 + v12);
      v8 |= 0x100000000uLL;
      v9 = a2;
      goto LABEL_3;
    }
  }
  else if (v14 >= v8)
  {
    v7 = (int16x8_t *)((char *)v7 + 2 * v12);
    v9 = a2;
    goto LABEL_3;
  }
  __break(1u);
}

const char *WTF::URL::encodedPassword(WTF::URL *this)
{
  int v1;
  int v2;
  const char *result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;

  v2 = *((_DWORD *)this + 4);
  v1 = *((_DWORD *)this + 5);
  if (v1 == v2)
    return 0;
  v4 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return "";
  result = *(const char **)(v4 + 8);
  v5 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  v6 = (v2 + 1);
  if (v5 <= v6)
    return "";
  v7 = v1 + ~v2;
  if ((int)v5 - (int)v6 > v7 || (v7 = v5 - v6, v2 != -1))
  {
    v8 = v7;
    v9 = v5 - v6;
    if ((v5 & 0x100000000) != 0)
    {
      if (v9 >= v8)
      {
        result += v6;
        return result;
      }
    }
    else if (v9 >= v8)
    {
      result += 2 * v6;
      return result;
    }
    __break(1u);
  }
  return result;
}

const char *WTF::URL::fragmentIdentifier(const char *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  if ((this[8] & 1) == 0)
    return 0;
  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v2 = *(unsigned int *)(v1 + 4);
  v3 = *((unsigned int *)this + 9);
  if (v2 <= v3)
    return 0;
  v4 = v3 + 1;
  if (v2 <= (int)v3 + 1)
    return "";
  v5 = *(_QWORD *)(v1 + 8);
  v6 = (v2 - v4);
  v7 = v2 - v4;
  if ((*(_BYTE *)(v1 + 16) & 4) != 0)
  {
    if (v7 >= v6)
      return (const char *)(v5 + v4);
  }
  else if (v7 >= v6)
  {
    return (const char *)(v5 + 2 * v4);
  }
  __break(1u);
  return this;
}

void WTF::URL::consumeFragmentDirective(WTF::URL *this@<X0>, uint64_t *a2@<X8>)
{
  int8x16_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  int8x16_t *v24;
  size_t v25;
  uint64_t v26;
  _BYTE *v27;
  unsigned int v28;
  uint64_t v29;
  _WORD *v30;
  int8x16_t *v31;
  unint64_t v32;

  if ((*((_BYTE *)this + 8) & 1) == 0)
    goto LABEL_8;
  v4 = *(int8x16_t **)this;
  if (!*(_QWORD *)this)
  {
    v9 = 0;
    v11 = 0x100000000;
    goto LABEL_14;
  }
  v5 = v4->u32[1];
  v6 = *((unsigned int *)this + 9);
  if (v5 <= v6)
  {
LABEL_8:
    v9 = 0;
    v4 = 0;
    v11 = 0x100000000;
    goto LABEL_14;
  }
  v7 = v6 + 1;
  if (v5 <= (int)v6 + 1)
  {
    v9 = 0x100000000;
    v4 = (int8x16_t *)"";
  }
  else
  {
    v8 = v4->i64[1];
    v9 = (v5 - v7);
    v10 = v5 - v7;
    if ((v4[1].i8[0] & 4) != 0)
    {
      if (v10 < v9)
        goto LABEL_54;
      v4 = (int8x16_t *)(v8 + v7);
      v9 |= 0x100000000uLL;
    }
    else
    {
      if (v10 < v9)
        goto LABEL_54;
      v4 = (int8x16_t *)(v8 + 2 * v7);
    }
  }
  v11 = v9 & 0x100000000;
  v9 = v9;
LABEL_14:
  v31 = v4;
  v32 = v9 | v11;
  v12 = WTF::StringView::find((uint64_t)&v31, (uint8x8_t *)":~:", 3uLL, 0);
  if (v12 == -1)
  {
    *a2 = 0;
    return;
  }
  v20 = v12;
  v21 = (v12 + 3);
  if (v32 <= v21)
  {
    v25 = 0;
    v24 = (int8x16_t *)"";
    if (!"")
      goto LABEL_41;
    goto LABEL_24;
  }
  if ((_DWORD)v12 == -3)
  {
    v24 = v31;
    v22 = v32;
    v25 = v32;
    if ((v32 & 0xFF00000000) != 0)
    {
LABEL_20:
      if (!v24)
      {
LABEL_41:
        *a2 = 0;
        v28 = v32;
        if (!(_DWORD)v32)
          goto LABEL_53;
LABEL_44:
        if (v28 <= v20)
        {
          v14 = v32;
        }
        else
        {
          if (BYTE4(v32))
            v14 = v20 | 0x100000000;
          else
            v14 = v20;
          if (!(_DWORD)v14)
            goto LABEL_53;
        }
        WTF::URL::setFragmentIdentifier((uint64_t)this, v31, v14);
        return;
      }
LABEL_24:
      if (v25)
      {
        if (!(v25 >> 31))
        {
          v26 = WTF::fastCompactMalloc((WTF *)(v25 + 20));
          v27 = (_BYTE *)(v26 + 20);
          *(_DWORD *)v26 = 2;
          *(_DWORD *)(v26 + 4) = v25;
          *(_QWORD *)(v26 + 8) = v26 + 20;
          *(_DWORD *)(v26 + 16) = 4;
          if (v25 == 1)
          {
            *v27 = v24->i8[0];
            *a2 = v26;
            v28 = v32;
            if ((_DWORD)v32)
              goto LABEL_44;
          }
          else
          {
            memcpy(v27, v24, v25);
            *a2 = v26;
            v28 = v32;
            if ((_DWORD)v32)
              goto LABEL_44;
          }
          goto LABEL_53;
        }
LABEL_55:
        __break(0xC471u);
        JUMPOUT(0x197B277F0);
      }
      goto LABEL_43;
    }
  }
  else
  {
    v23 = v32 - v21;
    v22 = v32 - v21;
    if (BYTE4(v32))
    {
      if (v23 >= v23)
      {
        v24 = (int8x16_t *)((char *)v31 + v21);
        v25 = v23;
        goto LABEL_20;
      }
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    if (v23 < v23)
      goto LABEL_54;
    v24 = (int8x16_t *)((char *)v31 + 2 * v21);
    v25 = (v32 - v21);
  }
  if (!v24)
    goto LABEL_41;
  if (!v25)
  {
LABEL_43:
    WTF::StringImpl::s_emptyAtomString += 2;
    *a2 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
    v28 = v32;
    if ((_DWORD)v32)
      goto LABEL_44;
    goto LABEL_53;
  }
  if (v25 >= 0x7FFFFFF0)
    goto LABEL_55;
  v29 = WTF::fastCompactMalloc((WTF *)(2 * v25 + 20));
  v30 = (_WORD *)(v29 + 20);
  *(_DWORD *)v29 = 2;
  *(_DWORD *)(v29 + 4) = v22;
  *(_QWORD *)(v29 + 8) = v29 + 20;
  *(_DWORD *)(v29 + 16) = 0;
  if (v25 == 1)
  {
    *v30 = v24->i16[0];
    *a2 = v29;
    v28 = v32;
    if ((_DWORD)v32)
      goto LABEL_44;
  }
  else
  {
    memcpy(v30, v24, 2 * v25);
    *a2 = v29;
    v28 = v32;
    if ((_DWORD)v32)
      goto LABEL_44;
  }
LABEL_53:
  WTF::URL::removeFragmentIdentifier((WTF::StringImpl **)this, v13, v14, v15, v16, v17, v18, v19);
}

void WTF::URL::removeFragmentIdentifier(WTF::StringImpl **this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;

  if (((_BYTE)this[1] & 1) != 0)
  {
    v9 = *this;
    if (!v9)
    {
      *this = 0;
      goto LABEL_12;
    }
    v10 = *((unsigned int *)this + 9);
    if (*((_DWORD *)v9 + 1) <= v10)
    {
      v12 = *(_DWORD *)v9;
      *(_DWORD *)v9 += 2;
      v36 = 0;
      if (!v12)
        goto LABEL_9;
    }
    else
    {
      WTF::StringImpl::substring(v9, 0, v10, (uint64_t *)&v36);
      v9 = *this;
      v11 = v36;
      v36 = 0;
      *this = v11;
      if (!v9)
        goto LABEL_12;
      v12 = *(_DWORD *)v9 - 2;
      if (*(_DWORD *)v9 == 2)
      {
LABEL_9:
        WTF::StringImpl::~StringImpl(v9, a2, v10, a4, a5, a6, a7, a8);
        WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
        v9 = v36;
        v36 = 0;
        if (v9)
        {
          v12 = *(_DWORD *)v9 - 2;
          if (*(_DWORD *)v9 == 2)
          {
            WTF::StringImpl::~StringImpl(v9, v21, v22, v23, v24, v25, v26, v27);
            WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
            goto LABEL_12;
          }
          goto LABEL_11;
        }
LABEL_12:
        WTF::URL::maybeTrimTrailingSpacesFromOpaquePath((WTF::URL *)this);
        return;
      }
    }
LABEL_11:
    *(_DWORD *)v9 = v12;
    goto LABEL_12;
  }
}

void WTF::URL::setFragmentIdentifier(uint64_t a1, int8x16_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int8x16_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    v6 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 && (v7 = *(unsigned int *)(v6 + 4), (_DWORD)v7))
    {
      v8 = *(int8x16_t **)(v6 + 8);
      v9 = *(unsigned int *)(a1 + 36);
      v10 = (*(_DWORD *)(v6 + 16) >> 2) & 1;
      if (v9 >= v7)
      {
        v11 = v7 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v10 & 1) << 32);
        if ((a3 & 0x80000000) != 0)
        {
LABEL_22:
          v36 = 0;
LABEL_23:
          __break(0xC471u);
          return;
        }
      }
      else
      {
        v11 = (v10 << 32) | v9;
        if ((a3 & 0x80000000) != 0)
          goto LABEL_22;
      }
    }
    else
    {
      v11 = 0x100000000;
      v8 = (int8x16_t *)"";
      if ((a3 & 0x80000000) != 0)
        goto LABEL_22;
    }
    v12 = a3 + 1;
    if (__OFADD__((_DWORD)a3, 1) || (v11 & 0x80000000) != 0 || __OFADD__((_DWORD)v11, v12))
      goto LABEL_22;
    if ((a3 & 0xFF00000000) != 0)
      v13 = HIDWORD(v11);
    else
      v13 = 0;
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>>((v11 + v12), v13, v8, v11, 35, a2, a3, (int **)&v36);
    if (!v36)
      goto LABEL_23;
    WTF::URL::parseAllowingC0AtEnd(a1, (WTF::AtomStringImpl *)&v36, v14, v15, v16, v17, v18, v19);
    v27 = v36;
    v36 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
      {
        WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
      else
      {
        *(_DWORD *)v27 -= 2;
      }
    }
  }
}

void WTF::URL::truncatedForUseAsBase(WTF::URL *this@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  WTF::StringImpl *v9;
  unsigned int v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;

  v9 = *(WTF::StringImpl **)this;
  if (v9)
  {
    v10 = *((_DWORD *)this + 7);
    if (*((_DWORD *)v9 + 1) <= v10)
    {
      *(_DWORD *)v9 += 2;
      v27 = v9;
    }
    else
    {
      WTF::StringImpl::substring(v9, 0, v10, (uint64_t *)&v27);
    }
  }
  else
  {
    v27 = 0;
  }
  WTF::URL::URL(a7, (WTF::AtomStringImpl *)&v27, 0, a2, a3, a4, a5, a6);
  v18 = v27;
  v27 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
}

void WTF::registerDefaultPortForProtocolForTesting(WTF *this, const WTF::StringImpl **a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v9;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int i;
  unsigned int v24;
  uint64_t v25;
  WTF *v26;
  const WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;

  v9 = (__int16)this;
  if (__ldaxr(_MergedGlobals_17))
  {
    __clrex();
  }
  else if (!__stxr(1u, _MergedGlobals_17))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)_MergedGlobals_17);
LABEL_5:
  v11 = (uint64_t *)qword_1ECF58318;
  if (!qword_1ECF58318)
  {
    v11 = (uint64_t *)WTF::fastMalloc((WTF *)8);
    *v11 = 0;
    qword_1ECF58318 = (uint64_t)v11;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned short>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned short>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned short,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned short>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v11, 8uLL, 0, v17, v18, v19, v20, v21);
    v12 = *v11;
    if (*v11)
      goto LABEL_8;
LABEL_11:
    v13 = 0;
    v14 = *a2;
    v15 = *((_DWORD *)*a2 + 4);
    if (v15 >= 0x100)
      goto LABEL_9;
LABEL_12:
    v16 = WTF::StringImpl::hashSlowCase(v14);
    goto LABEL_13;
  }
  v12 = *(_QWORD *)qword_1ECF58318;
  if (!*(_QWORD *)qword_1ECF58318)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned short>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned short>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned short,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned short>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)qword_1ECF58318, 8uLL, 0, a4, a5, a6, a7, a8);
    v12 = *v11;
    if (!*v11)
      goto LABEL_11;
  }
LABEL_8:
  v13 = *(_DWORD *)(v12 - 8);
  v14 = *a2;
  v15 = *((_DWORD *)*a2 + 4);
  if (v15 < 0x100)
    goto LABEL_12;
LABEL_9:
  v16 = v15 >> 8;
LABEL_13:
  v22 = 0;
  for (i = 1; ; ++i)
  {
    v24 = v16 & v13;
    v25 = v12 + 16 * (v16 & v13);
    v26 = *(WTF **)v25;
    if (*(_QWORD *)v25 == -1)
    {
      v22 = (_QWORD *)(v12 + 16 * v24);
      goto LABEL_15;
    }
    if (!v26)
      break;
    if (WTF::equal(v26, *a2, a3))
      goto LABEL_35;
LABEL_15:
    v16 = i + v24;
  }
  if (v22)
  {
    *v22 = 0;
    v22[1] = 0;
    --*(_DWORD *)(*v11 - 16);
    v25 = (uint64_t)v22;
  }
  v27 = *a2;
  if (*a2)
    *(_DWORD *)v27 += 2;
  *(_QWORD *)v25 = v27;
  *(_WORD *)(v25 + 8) = v9;
  if (*v11)
  {
    ++*(_DWORD *)(*v11 - 12);
    v28 = *v11;
    if (*v11)
      goto LABEL_26;
LABEL_31:
    v29 = *(unsigned int *)(v28 - 16);
    v30 = *(unsigned int *)(v28 - 4);
    if (v30 > 0x400)
      goto LABEL_32;
LABEL_27:
    if (3 * v30 <= 4 * v29)
    {
      if (!(_DWORD)v30)
      {
        v31 = 8;
        goto LABEL_34;
      }
LABEL_33:
      v31 = ((_DWORD)v30 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v30)));
LABEL_34:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned short>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned short>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned short,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned short>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v11, v31, v25, a4, a5, a6, a7, a8);
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    v28 = *v11;
    if (!*v11)
      goto LABEL_31;
LABEL_26:
    v29 = (*(_DWORD *)(v28 - 16) + *(_DWORD *)(v28 - 12));
    v30 = *(unsigned int *)(v28 - 4);
    if (v30 <= 0x400)
      goto LABEL_27;
LABEL_32:
    if (v30 <= 2 * v29)
      goto LABEL_33;
  }
LABEL_35:
  v32 = __ldxr(_MergedGlobals_17);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_39;
  }
  if (__stlxr(0, _MergedGlobals_17))
LABEL_39:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(_MergedGlobals_17, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void WTF::clearDefaultPortForProtocolMapForTesting(WTF *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  if (__ldaxr(_MergedGlobals_17))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)_MergedGlobals_17);
    goto LABEL_5;
  }
  if (__stxr(1u, _MergedGlobals_17))
    goto LABEL_4;
LABEL_5:
  if (qword_1ECF58318)
  {
    v9 = *(WTF::StringImpl ***)qword_1ECF58318;
    if (*(_QWORD *)qword_1ECF58318)
    {
      *(_QWORD *)qword_1ECF58318 = 0;
      v10 = *((unsigned int *)v9 - 1);
      if ((_DWORD)v10)
      {
        v11 = v9;
        do
        {
          v12 = *v11;
          if (*v11 != (WTF::StringImpl *)-1)
          {
            *v11 = 0;
            if (v12)
            {
              if (*(_DWORD *)v12 == 2)
              {
                WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
              }
              else
              {
                *(_DWORD *)v12 -= 2;
              }
            }
          }
          v11 += 2;
          --v10;
        }
        while (v10);
      }
      WTF::fastFree((unint64_t)(v9 - 2), a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v21 = __ldxr(_MergedGlobals_17);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_20;
  }
  if (__stlxr(0, _MergedGlobals_17))
LABEL_20:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(_MergedGlobals_17, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::defaultPortForProtocol(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;

  if (__ldaxr(_MergedGlobals_17))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)_MergedGlobals_17);
    goto LABEL_5;
  }
  if (__stxr(1u, _MergedGlobals_17))
    goto LABEL_4;
LABEL_5:
  v11 = (_QWORD *)qword_1ECF58318;
  if (!qword_1ECF58318)
    goto LABEL_32;
  v12 = *(_QWORD *)qword_1ECF58318;
  if (!*(_QWORD *)qword_1ECF58318)
    goto LABEL_32;
  v13 = -1640531527;
  if ((a2 & 0xFF00000000) != 0)
  {
    if ((a2 & 0xFFFFFFFE) != 0)
    {
      v14 = 0;
      do
      {
        v15 = (a1[v14 + 1] << 11) ^ ((v13 + a1[v14]) << 16) ^ (v13 + a1[v14]);
        v13 = v15 + (v15 >> 11);
        v16 = v14 + 3;
        v14 += 2;
      }
      while (v16 < a2);
    }
    if ((a2 & 1) == 0)
      goto LABEL_19;
    v17 = a1[a2 - 1];
  }
  else
  {
    if ((a2 & 0xFFFFFFFE) != 0)
    {
      v18 = 0;
      do
      {
        v19 = (*(unsigned __int16 *)&a1[2 * v18 + 2] << 11) ^ ((v13 + *(unsigned __int16 *)&a1[2 * v18]) << 16) ^ (v13 + *(unsigned __int16 *)&a1[2 * v18]);
        v13 = v19 + (v19 >> 11);
        v20 = v18 + 3;
        v18 += 2;
      }
      while (v20 < a2);
    }
    if ((a2 & 1) == 0)
      goto LABEL_19;
    v17 = *(unsigned __int16 *)&a1[2 * a2 - 2];
  }
  v13 = ((v13 + v17) ^ ((v13 + v17) << 11)) + (((v13 + v17) ^ ((v13 + v17) << 11)) >> 17);
LABEL_19:
  v21 = 0;
  v22 = *(_DWORD *)(v12 - 8);
  v23 = (v13 ^ (8 * v13)) + ((v13 ^ (8 * v13)) >> 5);
  v24 = (v23 ^ (4 * v23)) + ((v23 ^ (4 * v23)) >> 15);
  v25 = (v24 ^ (v24 << 10)) & 0xFFFFFF;
  if (!v25)
    v25 = 0x800000;
  while (1)
  {
    v26 = v25 & v22;
    v27 = *(_QWORD *)(v12 + 16 * v26);
    if (v27 != -1)
    {
      if (!v27)
        goto LABEL_32;
      if (WTF::operator==(*(unsigned __int8 **)(v27 + 8), *(unsigned int *)(v27 + 4) | ((unint64_t)((*(_DWORD *)(v27 + 16) >> 2) & 1) << 32), a1, a2))
      {
        break;
      }
    }
    v25 = ++v21 + v26;
  }
  v28 = v12 + 16 * v26;
  if (!*v11 || v28 != *v11 + 16 * *(unsigned int *)(*v11 - 4))
  {
    v29 = 0;
    LOWORD(v11) = *(_WORD *)(v28 + 8);
    v30 = __ldxr(_MergedGlobals_17);
    if (v30 == 1)
      goto LABEL_33;
    goto LABEL_31;
  }
LABEL_32:
  v29 = 1;
  v31 = __ldxr(_MergedGlobals_17);
  if (v31 == 1)
  {
LABEL_33:
    if (!__stlxr(0, _MergedGlobals_17))
      goto LABEL_35;
    goto LABEL_34;
  }
LABEL_31:
  __clrex();
LABEL_34:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(_MergedGlobals_17, 0, a3, a4, a5, a6, a7, a8);
LABEL_35:
  if (v29)
  {
    v32 = WTF::URLParser::defaultPortForProtocol(a1, a2);
    LOWORD(v11) = v32;
    v33 = v32 & 0xFFFF0000;
  }
  else
  {
    v33 = 0x10000;
  }
  return v33 | (unsigned __int16)v11;
}

BOOL WTF::isDefaultPortForProtocol(int a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = WTF::defaultPortForProtocol(a2, a3, a3, a4, a5, a6, a7, a8);
  return (v9 & 0xFF0000) != 0 && a1 == (unsigned __int16)v9;
}

BOOL WTF::URL::protocolIsJavaScript(WTF::URL *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int16 *v3;
  _BOOL8 result;
  const char *v5;
  unsigned int v6;
  unsigned int v7;
  const char *v9;
  unsigned int v10;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2 = *(unsigned int *)(v1 + 4);
    if ((_DWORD)v2)
    {
      v3 = *(unsigned __int16 **)(v1 + 8);
      if ((*(_BYTE *)(v1 + 16) & 4) == 0)
      {
        LOBYTE(result) = 1;
        v5 = "javascript";
        while (1)
        {
          v7 = *v3++;
          v6 = v7;
          if ((result & 1) != 0)
          {
            if (v6 < 0x21)
            {
              LOBYTE(result) = 1;
              goto LABEL_6;
            }
          }
          else if (v6 <= 0xD && ((1 << v6) & 0x2600) != 0)
          {
            LOBYTE(result) = 0;
            goto LABEL_6;
          }
          if (!*v5)
            return v6 == 58;
          result = 0;
          if ((v6 | 0x20) != (unsigned __int16)*v5)
            return result;
          ++v5;
LABEL_6:
          if (!--v2)
            return 0;
        }
      }
      LOBYTE(result) = 1;
      v9 = "javascript";
      do
      {
        v10 = *(unsigned __int8 *)v3;
        v3 = (unsigned __int16 *)((char *)v3 + 1);
        v6 = v10;
        if ((result & 1) != 0)
        {
          if (v6 < 0x21)
          {
            LOBYTE(result) = 1;
            goto LABEL_20;
          }
        }
        else if (v6 <= 0xD && ((1 << v6) & 0x2600) != 0)
        {
          LOBYTE(result) = 0;
          goto LABEL_20;
        }
        if (!*v9)
          return v6 == 58;
        result = 0;
        if ((v6 | 0x20) != *v9)
          return result;
        ++v9;
LABEL_20:
        --v2;
      }
      while (v2);
    }
  }
  return 0;
}

BOOL WTF::protocolIsJavaScript(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  const char *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v8;

  v2 = a2;
  if (!(_DWORD)a2)
    return 0;
  v3 = 1;
  v4 = "javascript";
  if ((a2 & 0xFF00000000) == 0)
  {
    while (1)
    {
      v8 = *a1++;
      v5 = v8;
      if ((v3 & 1) != 0)
      {
        if (v5 < 0x21)
        {
          v3 = 1;
          goto LABEL_18;
        }
      }
      else if (v5 <= 0xD && ((1 << v5) & 0x2600) != 0)
      {
        v3 = 0;
        goto LABEL_18;
      }
      if (!*v4)
        return v5 == 58;
      v3 = 0;
      if ((v5 | 0x20) != (unsigned __int16)*v4)
        return 0;
      ++v4;
LABEL_18:
      if (!--v2)
        return 0;
    }
  }
  while (1)
  {
    v6 = *(unsigned __int8 *)a1;
    a1 = (unsigned __int16 *)((char *)a1 + 1);
    v5 = v6;
    if ((v3 & 1) != 0)
    {
      if (v5 < 0x21)
      {
        v3 = 1;
        goto LABEL_5;
      }
    }
    else if (v5 <= 0xD && ((1 << v5) & 0x2600) != 0)
    {
      v3 = 0;
      goto LABEL_5;
    }
    if (!*v4)
      return v5 == 58;
    v3 = 0;
    if ((v5 | 0x20) != *v4)
      return 0;
    ++v4;
LABEL_5:
    if (!--v2)
      return 0;
  }
}

const char *WTF::URL::query(WTF::URL *this)
{
  int v1;
  int v2;
  const char *result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;

  v2 = *((_DWORD *)this + 8);
  v1 = *((_DWORD *)this + 9);
  if (v1 == v2)
    return 0;
  v4 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return "";
  result = *(const char **)(v4 + 8);
  v5 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  v6 = (v2 + 1);
  if (v5 <= v6)
    return "";
  v7 = v1 - v6;
  if ((int)v5 - (int)v6 > v7 || (v7 = v5 - v6, (_DWORD)v6))
  {
    v8 = v7;
    v9 = v5 - v6;
    if ((v5 & 0x100000000) != 0)
    {
      if (v9 >= v8)
      {
        result += v6;
        return result;
      }
    }
    else if (v9 >= v8)
    {
      result += 2 * v6;
      return result;
    }
    __break(1u);
  }
  return result;
}

const char *WTF::URL::path(WTF::URL *this)
{
  unsigned int v1;
  const char *result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  int v15;

  v1 = *((_DWORD *)this + 2);
  if ((v1 & 1) == 0)
    return 0;
  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    result = *(const char **)(v4 + 8);
    v5 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    result = 0;
    v5 = 0x100000000;
  }
  v6 = *((_DWORD *)this + 6) + ((v1 >> 3) & 7);
  v7 = (_DWORD)v6 != (v1 >> 6) + 1 || v4 == 0;
  if (v7 || (v12 = v6 + 1, (v6 + 1) >= *(_DWORD *)(v4 + 4)))
  {
    v8 = v6;
    goto LABEL_12;
  }
  v13 = *(_QWORD *)(v4 + 8);
  if ((*(_BYTE *)(v4 + 16) & 4) != 0)
  {
    v8 = v6;
    if (*(_BYTE *)(v13 + v6) != 47)
      goto LABEL_12;
    LOBYTE(v14) = *(_BYTE *)(v13 + v12);
    v15 = v6 + 2;
    v14 = v14;
    if (v14 != 46)
      v15 = v6;
  }
  else
  {
    v8 = v6;
    if (*(_WORD *)(v13 + 2 * v6) != 47)
      goto LABEL_12;
    v14 = *(_WORD *)(v13 + 2 * v12);
    if (v14 == 46)
      v15 = v6 + 2;
    else
      v15 = v6;
  }
  if (v14 == 46)
    v8 = v6 + 2;
  else
    v8 = v6;
  LODWORD(v6) = v15;
LABEL_12:
  if (v5 <= v6)
    return "";
  v9 = *((_DWORD *)this + 8) - v8;
  if ((int)v5 - (int)v6 > v9 || (v9 = v5 - v6, (_DWORD)v6))
  {
    v10 = v6;
    v11 = v5 - (unint64_t)v6;
    if ((v5 & 0x100000000) != 0)
    {
      if (v11 >= v9)
      {
        result += v10;
        return result;
      }
    }
    else if (v11 >= v9)
    {
      result += 2 * v10;
      return result;
    }
    __break(1u);
  }
  return result;
}

BOOL WTF::URL::setProtocol@<W0>(uint64_t a1@<X0>, int8x16_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unint64_t a9@<X8>, float a10@<S2>)
{
  unint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  const char *v14;
  WTF::StringImpl *v15;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  int16x8_t *v23;
  int16x8_t *v24;
  int16x8_t v25;
  int16x8_t *v26;
  int8x16_t v27;
  char *v28;
  int16x8_t v29;
  char *v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int16x8_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  WTF::StringImpl *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  int8x16_t *v89;
  size_t v90;
  _BYTE *v91;
  unint64_t v92;
  unsigned __int128 *v93;
  unsigned __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  char *v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  BOOL v107;
  uint64_t v108;
  _WORD *v109;
  int8x16_t *v110;
  __int16 v111;
  char *v112;
  unint64_t v113;
  BOOL v114;
  unint64_t v115;
  _BYTE *v116;
  int8x16_t *v117;
  char v118;
  char *v119;
  char *v120;
  char *v121;
  __int128 v122;
  int8x16_t v123;
  __int128 v124;
  __int128 v125;
  char *v126;
  char *v127;
  char *v128;
  unint64_t v129;
  char *v130;
  const char *v131;
  __int16 v132;
  size_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  WTF::StringImpl *v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint8x8_t *v162;
  uint16x8_t *v163;
  unint64_t v164;
  uint8x16_t v165;
  uint16x8_t v166;
  uint16x8_t v167;
  uint8x8_t *v168;
  uint16x8_t *v169;
  unint64_t v170;
  uint8x8_t v171;
  uint8x8_t *v172;
  uint16x8_t *v173;
  unint64_t v174;
  uint8x16_t v175;
  uint16x8_t v176;
  uint16x8_t v177;
  uint8x8_t *v178;
  uint16x8_t *v179;
  unint64_t v180;
  uint8x8_t v181;
  int8x16_t *v182;
  int8x16_t *v183;
  unint64_t v184;
  int8x16_t v185;
  int8x16_t v186;
  int8x16_t v187;
  int8x16_t v188;
  int16x8_t *v189;
  int8x8_t *v190;
  unint64_t v191;
  int16x8_t v192;
  WTF::StringImpl *v193;
  unsigned __int8 v194;
  WTF::StringImpl *v195;
  int8x16x2_t v196;
  int8x16x2_t v197;
  int8x16x2_t v198;
  int8x16x2_t v199;
  int8x16x2_t v200;
  int8x16x2_t v201;

  v14 = (const char *)a3;
  v15 = (WTF::StringImpl *)a2;
  v17 = (_WORD *)(a3 & 0xFF00000000);
  if ((a3 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a3)
    {
      v18 = 16;
      if ((a3 & 0xFFFFFFF0) == 0)
        v18 = a3;
      v19 = v18;
      v20 = a2;
      do
      {
        if (*v20 == 58)
          goto LABEL_10;
        ++v20;
        --v19;
      }
      while (v19);
      if (a3 >= 0x11uLL)
      {
        v20 = memchr(&a2->i8[v18], 58, a3 - v18);
        if (v20)
        {
LABEL_10:
          LODWORD(v21) = (_DWORD)v20 - (_DWORD)v15;
          goto LABEL_30;
        }
      }
      goto LABEL_29;
    }
LABEL_24:
    WTF::URLParser::maybeCanonicalizeScheme((int16x8_t *)"", (int16x8_t *)0x100000000, a3, a4, a5, a6, a7, a8, &v193);
    v11 = v194;
    if (!v194)
      return v11 != 0;
LABEL_42:
    v36 = *(unsigned int *)(a1 + 8);
    if ((v36 & 1) == 0)
    {
      v15 = v193;
      if (v193)
        *(_DWORD *)v193 += 2;
      v37 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        *(_DWORD *)v37 += 2;
      if (v15)
      {
        v38 = *((_DWORD *)v15 + 1);
        if (v37)
        {
LABEL_49:
          v39 = *(_DWORD *)(v37 + 4);
          if (v39 < 0)
            goto LABEL_276;
          v31 = __OFADD__(v39, 1);
          v40 = v39 + 1;
          v41 = v31;
          if (v38 < 0)
            goto LABEL_276;
LABEL_67:
          if ((v41 & 1) != 0 || (v47 = (v38 + v40), __OFADD__(v38, v40)))
          {
LABEL_276:
            v195 = 0;
            goto LABEL_277;
          }
          if (v15)
          {
            v48 = *((_DWORD *)v15 + 4);
            v49 = (v48 >> 2) & 1;
            if (!v37 || (v48 & 4) == 0)
            {
LABEL_97:
              WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v47, v49, (uint64_t)v15, 58, v37, (int **)&v195);
              if (v195)
              {
                WTF::URL::parse(a1);
                v61 = v195;
                v195 = 0;
                if (v61)
                {
                  if (*(_DWORD *)v61 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v61, (WTF::AtomStringImpl *)a2, v50, v51, v52, v53, v54, v55);
                    WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
                    if (!v37)
                      goto LABEL_235;
LABEL_104:
                    if (*(_DWORD *)v37 == 2)
                    {
                      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v37, (WTF::AtomStringImpl *)a2, v50, v51, v52, v53, v54, v55);
                      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
                      if (!v15)
                        goto LABEL_238;
                      goto LABEL_236;
                    }
                    *(_DWORD *)v37 -= 2;
LABEL_235:
                    if (!v15)
                      goto LABEL_238;
LABEL_236:
                    if (*(_DWORD *)v15 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v15, (WTF::AtomStringImpl *)a2, v50, v51, v52, v53, v54, v55);
                      WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
                      if (!v194)
                        return v11 != 0;
                      goto LABEL_241;
                    }
                    *(_DWORD *)v15 -= 2;
LABEL_238:
                    if (!v194)
                      return v11 != 0;
LABEL_241:
                    v144 = v193;
                    v193 = 0;
                    if (v144)
                    {
                      if (*(_DWORD *)v144 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v144, (WTF::AtomStringImpl *)a2, v50, v51, v52, v53, v54, v55);
                        WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
                      }
                      else
                      {
                        *(_DWORD *)v144 -= 2;
                      }
                    }
                    return v11 != 0;
                  }
                  *(_DWORD *)v61 -= 2;
                }
                if (!v37)
                  goto LABEL_235;
                goto LABEL_104;
              }
LABEL_277:
              __break(0xC471u);
              JUMPOUT(0x197B29060);
            }
          }
          else if (!v37)
          {
            v49 = 1;
            goto LABEL_97;
          }
          v49 = (*(unsigned __int8 *)(v37 + 16) >> 2) & 1;
          goto LABEL_97;
        }
      }
      else
      {
        v38 = 0;
        if (v37)
          goto LABEL_49;
      }
      v40 = 1;
      v41 = v31;
      if (v38 < 0)
        goto LABEL_276;
      goto LABEL_67;
    }
    v42 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 && (v43 = *(unsigned int *)(v42 + 4), (_DWORD)v43))
    {
      v44 = *(unsigned __int8 **)(v42 + 8);
      v45 = v36 >> 6;
      v46 = (*(_DWORD *)(v42 + 16) >> 2) & 1;
      if (v45 >= v43)
      {
        if (!WTF::URLParser::isSpecialScheme(v44, v43 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v46 & 1) << 32)))
          goto LABEL_81;
      }
      else if (!WTF::URLParser::isSpecialScheme(v44, (v46 << 32) | v45))
      {
        goto LABEL_81;
      }
    }
    else if (!WTF::URLParser::isSpecialScheme("", 0x100000000))
    {
      goto LABEL_81;
    }
    a9 = v194;
    if (!v194)
      goto LABEL_273;
    if (v193)
    {
      if (!WTF::URLParser::isSpecialScheme(*((unsigned __int8 **)v193 + 1), *((unsigned int *)v193 + 1) | ((((unint64_t)*((unsigned int *)v193 + 4) >> 2) & 1) << 32)))goto LABEL_238;
    }
    else if (!WTF::URLParser::isSpecialScheme(0, 0x100000000))
    {
      goto LABEL_238;
    }
LABEL_81:
    v22 = *(unsigned int *)(a1 + 12);
    if (*(_DWORD *)(a1 + 20) != (_DWORD)v22 || WTF::URL::port((uint64_t *)a1) >= 0x10000)
    {
      a9 = v194;
      if (!v194)
        goto LABEL_273;
      if (WTF::equalInternal<unsigned char>((uint64_t)v193, (unint64_t)"file", 4))
        goto LABEL_238;
    }
    v56 = *(_DWORD *)(a1 + 8);
    if ((v56 & 0xFFFFFFC1) != 0x101)
      goto LABEL_129;
    v57 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_129;
    v58 = *(unsigned int *)(v57 + 4);
    if (!(_DWORD)v58)
      goto LABEL_129;
    v22 = *(unsigned int *)(v57 + 16);
    v59 = *(_QWORD *)(v57 + 8);
    if ((v22 & 4) != 0)
    {
      if ((_DWORD)v58 != 1
        && (*(_BYTE *)v59 & 0xDF) == 0x46
        && v58 >= 3
        && (*(_BYTE *)(v59 + 1) & 0xDF) == 0x49
        && v58 >= 4
        && (*(_BYTE *)(v59 + 2) & 0xDF) == 0x4C)
      {
        v60 = *(unsigned __int8 *)(v59 + 3);
LABEL_115:
        if ((v60 & 0xFFFFFFDF) == 0x45)
        {
          if ((v56 & 1) == 0)
            goto LABEL_238;
          v78 = *(_DWORD *)(a1 + 20);
          if (v78 != *(_DWORD *)(a1 + 12))
            ++v78;
          if (v58 <= v78)
            goto LABEL_238;
          v79 = *(_DWORD *)(a1 + 24) - v78;
          if (v58 - v78 > v79 || (v79 = v58 - v78, v78))
          {
            v80 = (v22 >> 2) & 1;
            v22 = v79;
            a9 = v58 - v78;
            if ((_DWORD)v80)
            {
              if (a9 < v79)
                goto LABEL_273;
              v22 = v79 | 0x100000000;
            }
            else if (a9 < v79)
            {
              goto LABEL_273;
            }
          }
          else
          {
            v22 = v58 & 0xFFFFFFFEFFFFFFFFLL | (((v22 >> 2) & 1) << 32);
          }
          if (!(_DWORD)v22)
            goto LABEL_238;
        }
      }
    }
    else if ((_DWORD)v58 != 1
           && (*(_WORD *)v59 & 0xFFDF) == 0x46
           && v58 >= 3
           && (*(_WORD *)(v59 + 2) & 0xFFDF) == 0x49
           && v58 >= 4
           && (*(_WORD *)(v59 + 4) & 0xFFDF) == 0x4C)
    {
      v60 = *(unsigned __int16 *)(v59 + 6);
      goto LABEL_115;
    }
LABEL_129:
    a9 = v194;
    if (v194)
    {
      v15 = v193;
      if (v193)
        *(_DWORD *)v193 += 2;
      v81 = *(_QWORD *)a1;
      if (!*(_QWORD *)a1
        || (v82 = *(unsigned int *)(v81 + 4),
            v83 = *(unsigned int *)(a1 + 8),
            a9 = v83 >> 6,
            v82 <= *(_DWORD *)(a1 + 8) >> 6))
      {
        v13 = 0x100000000;
        v14 = "";
        goto LABEL_137;
      }
      v14 = *(const char **)(v81 + 8);
      v84 = ((unint64_t)*(unsigned int *)(v81 + 16) >> 2) & 1;
      if (v83 < 0x40)
      {
        v13 = v82 | (v84 << 32);
        goto LABEL_137;
      }
      v22 = v82 - a9;
      v13 = v22;
      if ((_DWORD)v84)
      {
        if (v22 >= v22)
        {
          v14 += a9;
          v13 = v22 | 0x100000000;
          goto LABEL_137;
        }
      }
      else if (v22 >= v22)
      {
        v14 += 2 * a9;
LABEL_137:
        if (v15)
        {
          v85 = *((_DWORD *)v15 + 1);
          if (((v85 | v13) & 0x80000000) != 0)
            goto LABEL_277;
        }
        else
        {
          v85 = 0;
          if ((v13 & 0x80000000) != 0)
            goto LABEL_277;
        }
        v86 = (v85 + v13);
        if (__OFADD__(v85, (_DWORD)v13))
          goto LABEL_277;
        if (v15 && (*((_BYTE *)v15 + 16) & 4) == 0)
        {
          if ((_DWORD)v86)
          {
            v87 = 1;
            goto LABEL_157;
          }
          goto LABEL_164;
        }
        if ((v13 & 0x100000000) == 0)
        {
          v87 = (uint64_t)v15;
          if ((_DWORD)v86)
          {
LABEL_157:
            if (v86 > 0x7FFFFFEF)
              goto LABEL_277;
            WTF::tryFastCompactMalloc((WTF *)(2 * v86 + 20), &v195);
            v12 = v195;
            if (!v195)
              goto LABEL_277;
            v17 = (_WORD *)((char *)v195 + 20);
            *(_DWORD *)v195 = 2;
            *((_DWORD *)v12 + 1) = v86;
            *((_QWORD *)v12 + 1) = (char *)v12 + 20;
            *((_DWORD *)v12 + 4) = 0;
            if (!v87)
            {
              v96 = 0;
LABEL_207:
              v119 = (char *)&v17[v96];
              if ((v13 & 0x100000000) != 0)
              {
                v120 = &v119[2 * v13];
                if (v13 >= 0x40)
                {
                  v121 = &v119[2 * (v13 & 0xFFFFFFC0)];
                  v122 = 0uLL;
                  do
                  {
                    v197.val[0] = *(int8x16_t *)v14;
                    v123 = *((int8x16_t *)v14 + 1);
                    v199.val[0] = (int8x16_t)*((_OWORD *)v14 + 2);
                    v124 = *((_OWORD *)v14 + 3);
                    v14 += 64;
                    v125 = v124;
                    v199.val[1] = 0uLL;
                    v201.val[0] = v123;
                    v197.val[1] = 0uLL;
                    v126 = v119;
                    vst2q_s8(v126, v197);
                    v126 += 32;
                    v201.val[1] = 0uLL;
                    vst2q_s8(v126, v201);
                    v127 = v119 + 64;
                    vst2q_s8(v127, v199);
                    v128 = v119 + 96;
                    vst2q_s8(v128, *(int8x16x2_t *)(&v122 - 1));
                    v119 += 128;
                  }
                  while (v119 != v121);
                  v119 = v121;
                }
                if (v119 != v120)
                {
                  v129 = (WTF::StringImpl *)((char *)v12 + 2 * v96 + 2 * v13)
                       - (WTF::StringImpl *)v119
                       + 18;
                  if (v129 < 0xE || v119 < &v14[(v129 >> 1) + 1] && v14 < &v119[(v129 & 0xFFFFFFFFFFFFFFFELL) + 2])
                  {
                    v130 = v119;
                    v131 = v14;
                    goto LABEL_217;
                  }
                  v134 = (v129 >> 1) + 1;
                  if (v129 >= 0x3E)
                  {
                    v135 = v134 & 0xFFFFFFFFFFFFFFE0;
                    v162 = (uint8x8_t *)(v14 + 16);
                    v163 = (uint16x8_t *)(v119 + 32);
                    v164 = v134 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v165 = *(uint8x16_t *)v162[-2].i8;
                      v166 = vmovl_u8(*v162);
                      v167 = vmovl_high_u8(*(uint8x16_t *)v162->i8);
                      v163[-2] = vmovl_u8(*(uint8x8_t *)v165.i8);
                      v163[-1] = vmovl_high_u8(v165);
                      *v163 = v166;
                      v163[1] = v167;
                      v163 += 4;
                      v162 += 4;
                      v164 -= 32;
                    }
                    while (v164);
                    if (v134 == v135)
                      goto LABEL_232;
                    if ((v134 & 0x18) == 0)
                    {
                      v131 = &v14[v135];
                      v130 = &v119[2 * v135];
                      do
                      {
LABEL_217:
                        v132 = *(unsigned __int8 *)v131++;
                        *(_WORD *)v130 = v132;
                        v130 += 2;
                      }
                      while (v130 != v120);
                      goto LABEL_232;
                    }
                  }
                  else
                  {
                    v135 = 0;
                  }
                  v130 = &v119[2 * (v134 & 0xFFFFFFFFFFFFFFF8)];
                  v131 = &v14[v134 & 0xFFFFFFFFFFFFFFF8];
                  v168 = (uint8x8_t *)&v14[v135];
                  v169 = (uint16x8_t *)&v119[2 * v135];
                  v170 = v135 - (v134 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v171 = *v168++;
                    *v169++ = vmovl_u8(v171);
                    v170 += 8;
                  }
                  while (v170);
                  if (v134 != (v134 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_217;
                }
LABEL_232:
                v195 = v12;
                WTF::URL::parse(a1);
                if (v195)
                {
                  if (*(_DWORD *)v195 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v195, (WTF::AtomStringImpl *)a2, v50, v51, v52, v53, v54, v55);
                    WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
                    if (!v15)
                      goto LABEL_238;
                    goto LABEL_236;
                  }
                  *(_DWORD *)v195 -= 2;
                }
                goto LABEL_235;
              }
              if (!(_DWORD)v13)
                goto LABEL_232;
              if ((_DWORD)v13 == 1)
              {
                *(_WORD *)v119 = *(_WORD *)v14;
                goto LABEL_232;
              }
              v133 = 2 * v13;
LABEL_231:
              memcpy(v119, v14, v133);
              goto LABEL_232;
            }
            a2 = (int8x16_t *)*((_QWORD *)v15 + 1);
            v95 = *((unsigned int *)v15 + 1);
            if ((*((_BYTE *)v15 + 16) & 4) == 0)
            {
              if ((_DWORD)v95)
              {
                if ((_DWORD)v95 == 1)
                  *v17 = a2->i16[0];
                else
                  memcpy((char *)v12 + 20, a2, 2 * v95);
              }
              goto LABEL_206;
            }
            a9 = (unint64_t)&v17[v95];
            if (v95 < 0x40)
            {
              v22 = (unint64_t)v12 + 20;
            }
            else
            {
              v22 = (unint64_t)&v17[v95 & 0xFFFFFFC0];
              v97 = 0uLL;
              v98 = (char *)v12 + 20;
              do
              {
                v196.val[0] = *a2;
                v99 = a2[1];
                v198.val[0] = a2[2];
                v100 = a2[3];
                a2 += 4;
                v101 = v100;
                v198.val[1] = 0uLL;
                v200.val[0] = v99;
                v196.val[1] = 0uLL;
                v102 = v98;
                vst2q_s8(v102, v196);
                v102 += 32;
                v200.val[1] = 0uLL;
                vst2q_s8(v102, v200);
                v103 = v98 + 64;
                vst2q_s8(v103, v198);
                v104 = v98 + 96;
                vst2q_s8(v104, *(int8x16x2_t *)(&v97 - 1));
                v98 += 128;
              }
              while (v98 != (char *)v22);
            }
            if (v22 == a9)
            {
LABEL_206:
              v96 = *((unsigned int *)v15 + 1);
              goto LABEL_207;
            }
            v106 = (unint64_t)v12 + 2 * v95 - v22 + 18;
            if (v106 < 0xE
              || (v22 < (unint64_t)a2->u64 + (v106 >> 1) + 1
                ? (v107 = (unint64_t)a2 >= (v106 & 0xFFFFFFFFFFFFFFFELL) + v22 + 2)
                : (v107 = 1),
                  !v107))
            {
              v109 = (_WORD *)v22;
              v110 = a2;
              goto LABEL_190;
            }
            v108 = (v106 >> 1) + 1;
            if (v106 < 0x3E)
            {
              v10 = 0;
              goto LABEL_260;
            }
            v10 = v108 & 0xFFFFFFFFFFFFFFE0;
            v172 = (uint8x8_t *)&a2[1];
            v173 = (uint16x8_t *)(v22 + 32);
            v174 = v108 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v175 = *(uint8x16_t *)v172[-2].i8;
              v176 = vmovl_u8(*v172);
              v177 = vmovl_high_u8(*(uint8x16_t *)v172->i8);
              v173[-2] = vmovl_u8(*(uint8x8_t *)v175.i8);
              v173[-1] = vmovl_high_u8(v175);
              *v173 = v176;
              v173[1] = v177;
              v173 += 4;
              v172 += 4;
              v174 -= 32;
            }
            while (v174);
            if (v108 == v10)
              goto LABEL_206;
            if ((v108 & 0x18) != 0)
            {
LABEL_260:
              v109 = (_WORD *)(v22 + 2 * (v108 & 0xFFFFFFFFFFFFFFF8));
              v110 = (int8x16_t *)((char *)a2 + (v108 & 0xFFFFFFFFFFFFFFF8));
              v178 = (uint8x8_t *)&a2->i8[v10];
              v179 = (uint16x8_t *)(v22 + 2 * v10);
              v180 = v10 - (v108 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v181 = *v178++;
                *v179++ = vmovl_u8(v181);
                v180 += 8;
              }
              while (v180);
              if (v108 == (v108 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_206;
              goto LABEL_190;
            }
LABEL_274:
            v110 = (int8x16_t *)((char *)a2 + v10);
            v109 = (_WORD *)(v22 + 2 * v10);
            do
            {
LABEL_190:
              v111 = v110->u8[0];
              v110 = (int8x16_t *)((char *)v110 + 1);
              *v109++ = v111;
            }
            while (v109 != (_WORD *)a9);
            goto LABEL_206;
          }
LABEL_164:
          v12 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
          goto LABEL_232;
        }
        if (!(_DWORD)v86)
          goto LABEL_164;
        if ((v86 & 0x80000000) != 0)
          goto LABEL_277;
        WTF::tryFastCompactMalloc((WTF *)(v86 + 20), &v195);
        v12 = v195;
        if (!v195)
          goto LABEL_277;
        v88 = (char *)v195 + 20;
        *(_DWORD *)v195 = 2;
        *((_DWORD *)v12 + 1) = v86;
        *((_QWORD *)v12 + 1) = (char *)v12 + 20;
        *((_DWORD *)v12 + 4) = 4;
        if (!v15)
        {
          v105 = 0;
LABEL_227:
          if (!(_DWORD)v13)
            goto LABEL_232;
          v119 = &v88[v105];
          if ((_DWORD)v13 == 1)
          {
            *v119 = *v14;
            goto LABEL_232;
          }
          v133 = v13;
          goto LABEL_231;
        }
        v89 = (int8x16_t *)*((_QWORD *)v15 + 1);
        v90 = *((unsigned int *)v15 + 1);
        if ((*((_BYTE *)v15 + 16) & 4) != 0)
        {
          if ((_DWORD)v90)
          {
            if ((_DWORD)v90 == 1)
              *v88 = v89->i8[0];
            else
              memcpy((char *)v12 + 20, v89, v90);
          }
          goto LABEL_226;
        }
        v91 = &v88[v90];
        if (v90 < 0x10)
        {
          v92 = (unint64_t)v12 + 20;
        }
        else
        {
          v92 = (unint64_t)&v88[v90 & 0xFFFFFFF0];
          v93 = (unsigned __int128 *)((char *)v12 + 20);
          do
          {
            v94 = (unsigned __int128)vld2q_s8(v89->i8);
            v89 += 2;
            *v93++ = v94;
          }
          while (v93 != (unsigned __int128 *)v92);
        }
        if ((_BYTE *)v92 == v91)
        {
LABEL_226:
          v105 = *((unsigned int *)v15 + 1);
          goto LABEL_227;
        }
        v112 = (char *)v12 + v90;
        v113 = (unint64_t)v12 + v90 - v92 + 20;
        if (v113 < 8
          || (v92 < (unint64_t)&v89[2].u64[1] + 2 * (_QWORD)v112 + -2 * v92
            ? (v114 = v89 >= (int8x16_t *)(v112 + 20))
            : (v114 = 1),
              !v114))
        {
          v116 = (_BYTE *)v92;
          v117 = v89;
          goto LABEL_203;
        }
        if (v113 >= 0x20)
        {
          v115 = v113 & 0xFFFFFFFFFFFFFFE0;
          v182 = v89 + 2;
          v183 = (int8x16_t *)(v92 + 16);
          v184 = v113 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v186 = v182[-2];
            v185 = v182[-1];
            v188 = *v182;
            v187 = v182[1];
            v182 += 4;
            v183[-1] = vuzp1q_s8(v186, v185);
            *v183 = vuzp1q_s8(v188, v187);
            v183 += 2;
            v184 -= 32;
          }
          while (v184);
          if (v113 == v115)
            goto LABEL_226;
          if ((v113 & 0x18) == 0)
          {
            v117 = (int8x16_t *)((char *)v89 + 2 * v115);
            v116 = (_BYTE *)(v92 + v115);
            do
            {
LABEL_203:
              v118 = v117->i8[0];
              v117 = (int8x16_t *)((char *)v117 + 2);
              *v116++ = v118;
            }
            while (v116 != v91);
            goto LABEL_226;
          }
        }
        else
        {
          v115 = 0;
        }
        v116 = (_BYTE *)(v92 + (v113 & 0xFFFFFFFFFFFFFFF8));
        v117 = (int8x16_t *)((char *)v89 + 2 * (v113 & 0xFFFFFFFFFFFFFFF8));
        v189 = (int16x8_t *)((char *)v89 + 2 * v115);
        v190 = (int8x8_t *)(v92 + v115);
        v191 = v115 - (v113 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v192 = *v189++;
          *v190++ = vmovn_s16(v192);
          v191 += 8;
        }
        while (v191);
        if (v113 == (v113 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_226;
        goto LABEL_203;
      }
    }
LABEL_273:
    __break(1u);
    goto LABEL_274;
  }
  if (!(_DWORD)a3)
    goto LABEL_24;
  v22 = 2 * a3;
  if ((uint64_t)v22 <= -2)
    goto LABEL_273;
  v23 = (int16x8_t *)&a2->i8[v22];
  if (v22 <= 0x3E)
  {
    v30 = (char *)a2;
    while (*(_WORD *)v30 != 58)
    {
      v30 += 2;
      v22 -= 2;
      if (!v22)
        goto LABEL_29;
    }
  }
  else
  {
    v24 = (int16x8_t *)a2;
    if (a3 < 8uLL)
    {
LABEL_18:
      if (v24 >= v23
        || (v26 = v23 - 1,
            v29.i64[0] = 0x3A003A003A003ALL,
            v29.i64[1] = 0x3A003A003A003ALL,
            v27 = (int8x16_t)vceqq_s16(v23[-1], v29),
            v29.i16[0] = vmaxvq_u16((uint16x8_t)v27),
            !v29.i32[0]))
      {
LABEL_29:
        LODWORD(v21) = -1;
        goto LABEL_30;
      }
    }
    else
    {
      v25.i64[0] = 0x3A003A003A003ALL;
      v25.i64[1] = 0x3A003A003A003ALL;
      v26 = (int16x8_t *)a2;
      while (1)
      {
        v27 = (int8x16_t)vceqq_s16(*v26, v25);
        LOWORD(a10) = vmaxvq_u16((uint16x8_t)v27);
        if (a10 != 0.0)
          break;
        v24 = v26 + 1;
        v28 = &v26[1].i8[14];
        ++v26;
        if (v28 >= (char *)v23)
          goto LABEL_18;
      }
    }
    v30 = &v26->i8[2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v27))];
  }
  if (v30 == (char *)v23)
    LODWORD(v21) = -1;
  else
    v21 = (v30 - (char *)a2) >> 1;
LABEL_30:
  v32 = v21;
  if (v17)
    v32 = v21 | 0x100000000;
  if (v14 > v21)
    v33 = v32;
  else
    v33 = (uint64_t)v14;
  if ((_DWORD)v14)
    v34 = (int16x8_t *)v15;
  else
    v34 = (int16x8_t *)"";
  if ((_DWORD)v14)
    v35 = v33;
  else
    v35 = 0x100000000;
  WTF::URLParser::maybeCanonicalizeScheme(v34, (int16x8_t *)v35, a3, a4, a5, a6, a7, a8, &v193);
  v11 = v194;
  if (v194)
    goto LABEL_42;
  return v11 != 0;
}

void WTF::URL::parse(uint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  __int128 v10;
  __int128 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  WTF::StringImpl *v42;
  __int128 v43;
  __int128 v44;
  WTF *v45;
  int v46;
  WTF::StringImpl *v47;

  WTF::URLParser::URLParser((WTF::URL *)&v42);
  v9 = v42;
  if (v42)
    *(_DWORD *)v42 += 2;
  v10 = v43;
  v11 = v44;
  v12 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v9;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      v40 = v11;
      v41 = v10;
      WTF::StringImpl::~StringImpl(v12, v2, v3, v4, v5, v6, v7, v8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      *(_OWORD *)(a1 + 8) = v41;
      *(_OWORD *)(a1 + 24) = v40;
      v13 = v47;
      v47 = 0;
      if (!v13)
        goto LABEL_11;
      goto LABEL_9;
    }
    *(_DWORD *)v12 -= 2;
  }
  *(_OWORD *)(a1 + 8) = v10;
  *(_OWORD *)(a1 + 24) = v11;
  v13 = v47;
  v47 = 0;
  if (!v13)
  {
LABEL_11:
    v22 = v45;
    if (!v45)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_9:
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_11;
  }
  WTF::StringImpl::~StringImpl(v13, v2, v3, v4, v5, v6, v7, v8);
  WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
  v22 = v45;
  if (v45)
  {
LABEL_12:
    v45 = 0;
    v46 = 0;
    WTF::fastFree((unint64_t)v22, v2, v3, v4, v5, v6, v7, v8);
  }
LABEL_13:
  v23 = v42;
  v42 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v2, v3, v4, v5, v6, v7, v8);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
}

void WTF::URL::setHost(WTF::URL *a1, int16x8_t *a2, uint64_t a3, double a4, double a5, float a6)
{
  const char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  int v14;
  int16x8_t *v15;
  int16x8_t v16;
  int16x8_t *v17;
  int8x16_t v18;
  int16x8_t *v19;
  char *v20;
  int16x8_t v21;
  __int16 *v22;
  uint64_t v23;
  uint64_t (*v24);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  int v42;
  _BOOL4 hasSpecialScheme;
  uint64_t v44;
  unint64_t v45;
  WTF *v46;
  int8x16_t *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  int v52;
  BOOL v53;
  int v54;
  BOOL v55;
  unint64_t v56;
  WTF *v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int8x16_t *v66;
  WTF::StringImpl *v67;
  WTF *v68;
  uint64_t v69;
  _BYTE v70[1032];

  if ((*((_BYTE *)a1 + 8) & 1) != 0)
  {
    v7 = (const char *)a2;
    v9 = BYTE4(a3);
    if (BYTE4(a3))
    {
      if (!(_DWORD)a3)
      {
        v14 = 0;
        v13 = 1;
        goto LABEL_36;
      }
      v10 = 16;
      if (a3 < 0x10uLL)
        v10 = a3;
      v11 = v10;
      v12 = a2;
      do
      {
        if (*v12 == 58)
          goto LABEL_11;
        ++v12;
        --v11;
      }
      while (v11);
      if (a3 >= 0x11)
      {
        v12 = memchr(&a2->i8[v10], 58, a3 - v10);
        if (v12)
        {
LABEL_11:
          v13 = v9;
          v14 = a3;
          if (v12 - v7 == -1)
            goto LABEL_36;
          goto LABEL_24;
        }
      }
      v13 = 1;
LABEL_35:
      v14 = a3;
      goto LABEL_36;
    }
    if (!(_DWORD)a3)
    {
      v13 = 0;
      v14 = 0;
      goto LABEL_36;
    }
    v15 = (int16x8_t *)((char *)a2 + 2 * a3);
    if (a3 <= 0x1F)
    {
      v23 = 2 * a3;
      v22 = (__int16 *)a2;
      while (*v22 != 58)
      {
        ++v22;
        v23 -= 2;
        if (!v23)
          goto LABEL_34;
      }
    }
    else
    {
      v16.i64[0] = 0x3A003A003A003ALL;
      v16.i64[1] = 0x3A003A003A003ALL;
      v17 = a2;
      do
      {
        v18 = (int8x16_t)vceqq_s16(*v17, v16);
        LOWORD(a6) = vmaxvq_u16((uint16x8_t)v18);
        if (a6 != 0.0)
          goto LABEL_21;
        v19 = v17 + 1;
        v20 = &v17[1].i8[14];
        ++v17;
      }
      while (v20 < (char *)v15);
      if (v19 >= v15
        || (v21.i64[0] = 0x3A003A003A003ALL,
            v21.i64[1] = 0x3A003A003A003ALL,
            v18 = (int8x16_t)vceqq_s16(v15[-1], v21),
            v21.i16[0] = vmaxvq_u16((uint16x8_t)v18),
            !v21.i32[0]))
      {
LABEL_34:
        v13 = 0;
        goto LABEL_35;
      }
      v17 = v15 - 1;
LABEL_21:
      v22 = &v17->i16[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v18))];
    }
    if (v22 != (__int16 *)v15)
    {
      v13 = 0;
      v14 = a3;
      if (((char *)v22 - (char *)a2) >> 1 == -1)
        goto LABEL_36;
LABEL_24:
      if (!(_DWORD)a3)
        return;
      if ((_DWORD)v9)
      {
        v13 = v9;
        v14 = a3;
        if (*v7 != 91)
          return;
      }
      else
      {
        v13 = 0;
        v14 = a3;
        if (*(_WORD *)v7 != 91)
          return;
      }
LABEL_36:
      if (WTF::URL::hasSpecialScheme(a1))
        v24 = WTF::slashHashOrQuestionMark;
      else
        v24 = WTF::forwardSlashHashOrQuestionMark;
      if (v13)
      {
        if (v14)
        {
          v25 = 0;
          while ((v24(v7[v25]) & 1) == 0)
          {
            if (v14 == ++v25)
              goto LABEL_49;
          }
LABEL_50:
          if ((_DWORD)a3)
          {
            v26 = a3;
            if (a3 > v25)
            {
              if ((_DWORD)v9)
                v26 = v25 | 0x100000000;
              else
                v26 = v25;
            }
          }
          else
          {
            v26 = 0x100000000;
            v7 = "";
          }
          v9 = BYTE4(v26);
LABEL_57:
          v68 = (WTF *)v70;
          v69 = 512;
          v27 = v26;
          if (WTF::URL::hasSpecialScheme(a1) && !WTF::appendEncodedHostname((uint64_t)&v68, (uint64_t)v7))
            goto LABEL_101;
          v35 = *((_DWORD *)a1 + 3);
          v36 = (*((_DWORD *)a1 + 2) >> 6) + 1;
          v37 = *(_QWORD *)a1;
          if (*(_QWORD *)a1)
          {
            v38 = *(unsigned int *)(v37 + 4);
            LODWORD(v39) = *((_DWORD *)a1 + 5);
            if ((_DWORD)v39 == v35)
              v39 = v39;
            else
              v39 = (v39 + 1);
            if ((_DWORD)v38)
            {
              v66 = *(int8x16_t **)(v37 + 8);
              if (v38 > v39)
                v40 = ((unint64_t)((*(_DWORD *)(v37 + 16) >> 2) & 1) << 32) | v39;
              else
                v40 = v38 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)((*(_DWORD *)(v37 + 16) >> 2) & 1) << 32);
            }
            else
            {
              v40 = 0x100000000;
              v66 = (int8x16_t *)"";
            }
          }
          else
          {
            v40 = 0x100000000;
            v66 = (int8x16_t *)"";
          }
          if (v35 == v36)
            v41 = "//";
          else
            v41 = "";
          if (v35 == v36)
            v42 = 3;
          else
            v42 = 1;
          hasSpecialScheme = WTF::URL::hasSpecialScheme(a1);
          v45 = HIDWORD(v69);
          if (!hasSpecialScheme)
            v45 = v27 | (v9 << 32) | a3 & 0xFFFFFF0000000000;
          v46 = v68;
          if (!hasSpecialScheme)
            v46 = (WTF *)v7;
          if (v37)
          {
            v47 = *(int8x16_t **)(v37 + 8);
            v48 = *((unsigned int *)a1 + 6);
            if (*(_DWORD *)(v37 + 4) > v48)
            {
              if (!(_DWORD)v48)
              {
                v49 = *(unsigned int *)(v37 + 4) | ((unint64_t)((*(_DWORD *)(v37 + 16) >> 2) & 1) << 32);
                v51 = v42 - 1;
                goto LABEL_86;
              }
              v49 = (*(_DWORD *)(v37 + 4) - v48);
              v50 = *(unsigned int *)(v37 + 4) - v48;
              if (((*(unsigned int *)(v37 + 4) | ((unint64_t)((*(_DWORD *)(v37 + 16) >> 2) & 1) << 32)) & 0x100000000) != 0)
              {
                if (v50 >= v49)
                {
                  v47 = (int8x16_t *)((char *)v47 + v48);
                  v49 |= 0x100000000uLL;
                  v51 = v42 - 1;
LABEL_86:
                  if (((v49 | v45) & 0x80000000) == 0)
                  {
                    v52 = v45 + v49;
                    if (!__OFADD__((_DWORD)v45, (_DWORD)v49))
                    {
                      v53 = __OFADD__(v51, v52);
                      v54 = v51 + v52;
                      v55 = v53;
                      if ((v40 & 0x80000000) == 0 && !v55 && !__OFADD__((_DWORD)v40, v54))
                      {
                        LODWORD(v56) = 0;
                        if ((v40 & 0x100000000) != 0 && (v45 & 0xFF00000000) != 0)
                          v56 = HIDWORD(v49);
                        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>((int **)&v67, v40 + v54, v56, v66, v40, v41, v51, v44, (int8x16_t *)v46, v45, v47, v49);
                        if (v67)
                        {
                          WTF::URL::parse((uint64_t)a1);
                          if (v67)
                          {
                            if (*(_DWORD *)v67 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v67, v28, v29, v30, v31, v32, v33, v34);
                              WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
                              v57 = v68;
                              if (v70 == (_BYTE *)v68)
                                return;
                              goto LABEL_104;
                            }
                            *(_DWORD *)v67 -= 2;
                          }
LABEL_101:
                          v57 = v68;
                          if (v70 == (_BYTE *)v68)
                            return;
LABEL_104:
                          if (v57)
                          {
                            v68 = 0;
                            LODWORD(v69) = 0;
                            WTF::fastFree((unint64_t)v57, v28, v29, v30, v31, v32, v33, v34);
                          }
                          return;
                        }
                      }
                    }
                  }
LABEL_113:
                  __break(0xC471u);
                  JUMPOUT(0x197B29594);
                }
              }
              else if (v50 >= v49)
              {
                v47 = (int8x16_t *)((char *)v47 + 2 * v48);
                v51 = v42 - 1;
                goto LABEL_86;
              }
              __break(1u);
              goto LABEL_113;
            }
          }
          v49 = 0x100000000;
          v47 = (int8x16_t *)"";
          v51 = v42 - 1;
          goto LABEL_86;
        }
      }
      else if (v14)
      {
        v25 = 0;
        while ((v24(*(unsigned __int16 *)&v7[2 * v25]) & 1) == 0)
        {
          if (v14 == ++v25)
            goto LABEL_49;
        }
        goto LABEL_50;
      }
LABEL_49:
      LODWORD(v26) = a3;
      goto LABEL_57;
    }
    goto LABEL_34;
  }
}

uint64_t WTF::slashHashOrQuestionMark(unsigned int a1)
{
  if (a1 == 92)
    return 1;
  else
    return (a1 < 0x40) & (0x8000800800000000 >> a1);
}

uint64_t WTF::forwardSlashHashOrQuestionMark(unsigned int a1)
{
  return (a1 < 0x40) & (0x8000800800000000 >> a1);
}

uint64_t WTF::appendEncodedHostname(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v10;
  unint64_t v11;
  int8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8x16_t *v15;
  unint64_t v16;
  int8x8_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint16x4_t *v29;
  uint64_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t *v33;
  uint64_t v34;
  int8x16_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  int8x16_t v40;
  int8x16_t v41;
  uint8x8_t *v42;
  unint64_t v43;
  int8x16_t v44;
  int8x16_t v45;
  uint8x8_t v46;
  uint16x8_t v47;
  uint32x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  uint32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  unint64_t v57;
  uint8x16_t *v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  uint8x16_t v65;
  uint16x8_t v66;
  uint32x4_t v67;
  int8x16_t v68;
  int8x16_t v69;
  uint16x8_t v70;
  uint32x4_t v71;
  int8x16_t v72;
  int8x16_t v73;
  uint32x4_t v74;
  int8x16_t v75;
  uint32x4_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  unsigned int v81;
  unint64_t v82;
  const UIDNA *v83;
  unint64_t v84;
  WTF *v85;
  WTF *v86;
  __int128 v87;
  char *v88;
  int8x16_t v89;
  __int128 v90;
  __int128 v91;
  char *v92;
  char *v93;
  char *v94;
  WTF *v95;
  unint64_t v96;
  unint64_t v97;
  WTF *v98;
  WTF *v99;
  __int16 v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int32_t v108;
  WTF *v109;
  uint64_t result;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  _BYTE *v119;
  void *v120;
  uint64_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t *v124;
  uint64_t v125;
  int8x16_t v126;
  uint64_t v127;
  unint64_t v128;
  unsigned __int16 *v129;
  uint64_t v130;
  int8x16_t v131;
  int8x16_t v132;
  uint16x4_t *v133;
  unint64_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  uint16x8_t v141;
  uint32x4_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  uint32x4_t v146;
  int8x16_t v147;
  int8x16_t v148;
  uint32x4_t v149;
  int8x16_t v150;
  int8x16_t v151;
  uint32x4_t v152;
  int8x16_t v153;
  int8x16_t v154;
  unsigned int v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  const void *v162;
  void *v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _BYTE *v171;
  uint16x8_t *v172;
  uint16x8_t *v173;
  uint16x8_t *v174;
  __int128 v175;
  int8x16_t v176;
  __int128 v177;
  __int128 v178;
  char *v179;
  char *i8;
  char *v181;
  unint64_t v182;
  uint16x8_t *v183;
  WTF *v184;
  __int16 v185;
  uint64_t v186;
  unint64_t v187;
  uint8x8_t *v188;
  uint16x8_t *v189;
  unint64_t v190;
  uint8x16_t v191;
  uint16x8_t v192;
  uint16x8_t v193;
  uint8x8_t *v194;
  uint16x8_t *v195;
  unint64_t v196;
  uint8x8_t v197;
  uint64_t v198;
  unint64_t v199;
  uint8x8_t *v200;
  uint16x8_t *v201;
  unint64_t v202;
  uint8x16_t v203;
  uint16x8_t v204;
  uint16x8_t v205;
  uint8x8_t *v206;
  uint16x8_t *v207;
  unint64_t v208;
  uint8x8_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  WTF *v218;
  unint64_t v219;
  _BYTE v220[64];
  WTF *v221;
  unint64_t v222;
  UIDNAInfo pInfo;
  UErrorCode pErrorCode;
  char v225;
  UChar dest[2048];
  uint64_t v227;
  int8x16x2_t v228;
  int8x16x2_t v229;
  int8x16x2_t v230;
  int8x16x2_t v231;
  int8x16x2_t v232;
  int8x16x2_t v233;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v6 = (WTF *)v3;
  v7 = v2;
  v227 = *MEMORY[0x1E0C80C00];
  v8 = v4;
  if (v4 >= 0x801)
    goto LABEL_116;
  v10 = (v3 & 7) == 0 || (_DWORD)v4 == 0;
  if ((v4 & 0xFF00000000) != 0)
  {
    v11 = v3 + v4;
    if (v10)
    {
      v12 = 0;
      v13 = v3;
      v14 = v11 & 0xFFFFFFFFFFFFFFF8;
      if (v3 >= (v11 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_11:
        v15 = (uint8x16_t *)v13;
        goto LABEL_47;
      }
    }
    else
    {
      v13 = v3 + 1;
      v19 = *(_BYTE *)v3;
      if (((v3 + 1) & 7) != 0 && v4 != 1)
      {
        v19 |= *(_BYTE *)(v3 + 1);
        v13 = v3 + 2;
        if (((v3 + 2) & 7) != 0 && v4 != 2)
        {
          v19 |= *(_BYTE *)(v3 + 2);
          v13 = v3 + 3;
          if (((v3 + 3) & 7) != 0 && v4 != 3)
          {
            v19 |= *(_BYTE *)(v3 + 3);
            v13 = v3 + 4;
            if (((v3 + 4) & 7) != 0 && v4 != 4)
            {
              v19 |= *(_BYTE *)(v3 + 4);
              v13 = v3 + 5;
              if (((v3 + 5) & 7) != 0 && v4 != 5)
              {
                v19 |= *(_BYTE *)(v3 + 5);
                v13 = v3 + 6;
                if (((v3 + 6) & 7) != 0 && v4 != 6)
                {
                  v19 |= *(_BYTE *)(v3 + 6);
                  v13 = v3 + 7;
                  if (((v3 + 7) & 7) != 0 && v4 != 7)
                  {
                    v19 |= *(_BYTE *)(v3 + 7);
                    v13 = v3 + 8;
                  }
                }
              }
            }
          }
        }
      }
      v12 = (int8x8_t)v19;
      v14 = v11 & 0xFFFFFFFFFFFFFFF8;
      if (v13 >= (v11 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_11;
    }
    v20 = v13 + 8;
    if (v14 > v13 + 8)
      v20 = v14;
    v21 = v20 + ~v13;
    if (v21 >= 0x18)
    {
      v30 = (v21 >> 3) + 1;
      v15 = (uint8x16_t *)(v13 + 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL));
      v31 = 0uLL;
      v32 = (int8x16_t)(unint64_t)v12;
      v33 = (int8x16_t *)(v13 + 16);
      v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v32 = vorrq_s8(v33[-1], v32);
        v31 = vorrq_s8(*v33, v31);
        v33 += 2;
        v34 -= 4;
      }
      while (v34);
      v35 = vorrq_s8(v31, v32);
      v12 = vorr_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
      if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_47:
        if (v15 == (uint8x16_t *)v11)
          goto LABEL_62;
        v37 = v3 + v4 - (_QWORD)v15;
        if (v37 < 8)
        {
          v38 = (unsigned __int8 *)v15;
          goto LABEL_61;
        }
        if (v37 >= 0x10)
        {
          v39 = v37 & 0xFFFFFFFFFFFFFFF0;
          v55 = 0uLL;
          v56 = (int8x16_t)(unint64_t)v12;
          v57 = v37 & 0xFFFFFFFFFFFFFFF0;
          v58 = v15;
          v59 = 0uLL;
          v60 = 0uLL;
          v61 = 0uLL;
          v62 = 0uLL;
          v63 = 0uLL;
          v64 = 0uLL;
          do
          {
            v65 = *v58++;
            v66 = vmovl_u8(*(uint8x8_t *)v65.i8);
            v67 = vmovl_u16(*(uint16x4_t *)v66.i8);
            v68.i64[0] = v67.u32[0];
            v68.i64[1] = v67.u32[1];
            v69 = v68;
            v70 = vmovl_high_u8(v65);
            v71 = vmovl_high_u16(v70);
            v68.i64[0] = v71.u32[2];
            v68.i64[1] = v71.u32[3];
            v72 = v68;
            v68.i64[0] = v67.u32[2];
            v68.i64[1] = v67.u32[3];
            v73 = v68;
            v74 = vmovl_high_u16(v66);
            v68.i64[0] = v74.u32[0];
            v68.i64[1] = v74.u32[1];
            v75 = v68;
            v76 = vmovl_u16(*(uint16x4_t *)v70.i8);
            v68.i64[0] = v76.u32[0];
            v68.i64[1] = v76.u32[1];
            v77 = v68;
            v68.i64[0] = v71.u32[0];
            v68.i64[1] = v71.u32[1];
            v78 = v68;
            v68.i64[0] = v74.u32[2];
            v68.i64[1] = v74.u32[3];
            v79 = v68;
            v68.i64[0] = v76.u32[2];
            v68.i64[1] = v76.u32[3];
            v62 = vorrq_s8(v62, v68);
            v60 = vorrq_s8(v60, v79);
            v63 = vorrq_s8(v63, v78);
            v61 = vorrq_s8(v61, v77);
            v59 = vorrq_s8(v59, v75);
            v55 = vorrq_s8(v55, v73);
            v64 = vorrq_s8(v64, v72);
            v56 = vorrq_s8(v56, v69);
            v57 -= 16;
          }
          while (v57);
          v80 = vorrq_s8(vorrq_s8(vorrq_s8(v56, v61), vorrq_s8(v59, v63)), vorrq_s8(vorrq_s8(v55, v62), vorrq_s8(v60, v64)));
          v12 = vorr_s8(*(int8x8_t *)v80.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v80, v80, 8uLL));
          if (v37 == v39)
            goto LABEL_62;
          if ((v37 & 8) == 0)
          {
            v38 = &v15->u8[v39];
            do
            {
LABEL_61:
              v81 = *v38++;
              *(_QWORD *)&v12 |= v81;
            }
            while (v38 != (unsigned __int8 *)v11);
            goto LABEL_62;
          }
        }
        else
        {
          v39 = 0;
        }
        v38 = &v15->u8[v37 & 0xFFFFFFFFFFFFFFF8];
        v40 = 0uLL;
        v41 = (int8x16_t)(unint64_t)v12;
        v42 = (uint8x8_t *)&v15->i8[v39];
        v43 = v39 - (v37 & 0xFFFFFFFFFFFFFFF8);
        v44 = 0uLL;
        v45 = 0uLL;
        do
        {
          v46 = *v42++;
          v47 = vmovl_u8(v46);
          v48 = vmovl_u16(*(uint16x4_t *)v47.i8);
          v49.i64[0] = v48.u32[0];
          v49.i64[1] = v48.u32[1];
          v50 = v49;
          v49.i64[0] = v48.u32[2];
          v49.i64[1] = v48.u32[3];
          v51 = v49;
          v52 = vmovl_high_u16(v47);
          v49.i64[0] = v52.u32[0];
          v49.i64[1] = v52.u32[1];
          v53 = v49;
          v49.i64[0] = v52.u32[2];
          v49.i64[1] = v52.u32[3];
          v45 = vorrq_s8(v45, v49);
          v44 = vorrq_s8(v44, v53);
          v40 = vorrq_s8(v40, v51);
          v41 = vorrq_s8(v41, v50);
          v43 += 8;
        }
        while (v43);
        v54 = vorrq_s8(vorrq_s8(v41, v44), vorrq_s8(v40, v45));
        v12 = vorr_s8(*(int8x8_t *)v54.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL));
        if (v37 != (v37 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_61;
LABEL_62:
        if ((*(_QWORD *)&v12 & 0x8080808080808080) != 0)
          goto LABEL_63;
LABEL_116:
        v156 = *(unsigned int *)(v2 + 8);
        v157 = *(unsigned int *)(v2 + 12);
        v158 = v4 + v157;
        if (v158 <= v156)
          goto LABEL_132;
        v159 = v156 + (v156 >> 2);
        if (v159 >= 0x10)
          v160 = v159 + 1;
        else
          v160 = 16;
        if (v160 <= v158)
          v161 = v4 + v157;
        else
          v161 = v160;
        v162 = *(const void **)v2;
        if (v161 < 0x201)
        {
          *(_QWORD *)v2 = v2 + 16;
          *(_DWORD *)(v2 + 8) = 512;
          memcpy((void *)(v2 + 16), v162, 2 * v157);
          if ((const void *)(v7 + 16) == v162)
            goto LABEL_132;
        }
        else
        {
          if (v161 >> 31)
          {
            __break(0xC471u);
            goto LABEL_184;
          }
          v163 = (void *)WTF::fastMalloc((WTF *)(2 * v161));
          *(_DWORD *)(v7 + 8) = v161;
          *(_QWORD *)v7 = v163;
          memcpy(v163, v162, 2 * v157);
          if ((const void *)(v7 + 16) == v162)
          {
LABEL_132:
            *(_DWORD *)(v7 + 12) = v158;
            v171 = *(_BYTE **)v7;
            v172 = (uint16x8_t *)(*(_QWORD *)v7 + 2 * v157);
            if ((v5 & 0xFF00000000) == 0)
            {
              if ((_DWORD)v5)
              {
                if ((_DWORD)v5 == 1)
                  v172->i16[0] = *(_WORD *)v6;
                else
                  memcpy(v172, v6, 2 * v8);
              }
              return 1;
            }
            v173 = (uint16x8_t *)((char *)v172 + 2 * v8);
            if (v5 >= 0x40)
            {
              v174 = (uint16x8_t *)((char *)v172 + 2 * (v5 & 0xFFFFFFC0));
              v175 = 0uLL;
              do
              {
                v229.val[0] = *(int8x16_t *)v6;
                v176 = *((int8x16_t *)v6 + 1);
                v231.val[0] = (int8x16_t)*((_OWORD *)v6 + 2);
                v177 = *((_OWORD *)v6 + 3);
                v6 = (WTF *)((char *)v6 + 64);
                v178 = v177;
                v231.val[1] = 0uLL;
                v233.val[0] = v176;
                v229.val[1] = 0uLL;
                v179 = (char *)v172;
                vst2q_s8(v179, v229);
                v179 += 32;
                v233.val[1] = 0uLL;
                vst2q_s8(v179, v233);
                i8 = v172[4].i8;
                vst2q_s8(i8, v231);
                v181 = v172[6].i8;
                vst2q_s8(v181, *(int8x16x2_t *)(&v175 - 1));
                v172 += 8;
              }
              while (v172 != v174);
              v172 = v174;
            }
            if (v172 == v173)
              return 1;
            v182 = &v171[2 * v8 + 2 * v157] - (_BYTE *)v172 - 2;
            if (v182 < 0xE
              || v172 < (uint16x8_t *)((char *)v6 + (v182 >> 1) + 1)
              && v6 < (WTF *)((char *)&v172->i16[1] + (v182 & 0xFFFFFFFFFFFFFFFELL)))
            {
              v183 = v172;
              v184 = v6;
              goto LABEL_142;
            }
            v186 = (v182 >> 1) + 1;
            if (v182 >= 0x3E)
            {
              v187 = v186 & 0xFFFFFFFFFFFFFFE0;
              v188 = (uint8x8_t *)((char *)v6 + 16);
              v189 = v172 + 2;
              v190 = v186 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v191 = *(uint8x16_t *)v188[-2].i8;
                v192 = vmovl_u8(*v188);
                v193 = vmovl_high_u8(*(uint8x16_t *)v188->i8);
                v189[-2] = vmovl_u8(*(uint8x8_t *)v191.i8);
                v189[-1] = vmovl_high_u8(v191);
                *v189 = v192;
                v189[1] = v193;
                v189 += 4;
                v188 += 4;
                v190 -= 32;
              }
              while (v190);
              if (v186 == v187)
                return 1;
              if ((v186 & 0x18) == 0)
              {
                v184 = (WTF *)((char *)v6 + v187);
                v183 = (uint16x8_t *)((char *)v172 + 2 * v187);
                do
                {
LABEL_142:
                  v185 = *(unsigned __int8 *)v184;
                  v184 = (WTF *)((char *)v184 + 1);
                  v183->i16[0] = v185;
                  v183 = (uint16x8_t *)((char *)v183 + 2);
                }
                while (v183 != v173);
                return 1;
              }
            }
            else
            {
              v187 = 0;
            }
            v183 = (uint16x8_t *)((char *)v172 + 2 * (v186 & 0xFFFFFFFFFFFFFFF8));
            v184 = (WTF *)((char *)v6 + (v186 & 0xFFFFFFFFFFFFFFF8));
            v194 = (uint8x8_t *)((char *)v6 + v187);
            v195 = (uint16x8_t *)((char *)v172 + 2 * v187);
            v196 = v187 - (v186 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v197 = *v194++;
              *v195++ = vmovl_u8(v197);
              v196 += 8;
            }
            while (v196);
            if (v186 == (v186 & 0xFFFFFFFFFFFFFFF8))
              return 1;
            goto LABEL_142;
          }
        }
        if (v162)
        {
          if (*(const void **)v7 == v162)
          {
            *(_QWORD *)v7 = 0;
            *(_DWORD *)(v7 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v162, v164, v165, v166, v167, v168, v169, v170);
        }
        goto LABEL_132;
      }
    }
    else
    {
      v15 = (uint8x16_t *)v13;
    }
    do
    {
      v36 = v15->i64[0];
      v15 = (uint8x16_t *)((char *)v15 + 8);
      *(_QWORD *)&v12 |= v36;
    }
    while ((unint64_t)v15 < v14);
    goto LABEL_47;
  }
  v16 = v3 + 2 * v4;
  if (v10)
  {
    v17 = 0;
    v18 = v3;
  }
  else
  {
    v17 = 0;
    v22 = 2 * v4 - 2;
    v23 = v3 + 2;
    v18 = v3;
    do
    {
      v24 = *(unsigned __int16 *)v18;
      v18 += 2;
      *(_QWORD *)&v17 |= v24;
      if ((v23 & 7) == 0)
        break;
      v25 = v22;
      v22 -= 2;
      v23 += 2;
    }
    while (v25);
  }
  v26 = v16 & 0xFFFFFFFFFFFFFFF8;
  if (v18 >= (v16 & 0xFFFFFFFFFFFFFFF8))
  {
    v29 = (uint16x4_t *)v18;
    goto LABEL_108;
  }
  v27 = v18 + 8;
  if (v26 > v18 + 8)
    v27 = v16 & 0xFFFFFFFFFFFFFFF8;
  v28 = v27 + ~v18;
  if (v28 < 0x18)
  {
    v29 = (uint16x4_t *)v18;
    do
    {
LABEL_107:
      v127 = (uint64_t)*v29++;
      *(_QWORD *)&v17 |= v127;
    }
    while ((unint64_t)v29 < v26);
    goto LABEL_108;
  }
  v121 = (v28 >> 3) + 1;
  v29 = (uint16x4_t *)(v18 + 8 * (v121 & 0x3FFFFFFFFFFFFFFCLL));
  v122 = 0uLL;
  v123 = (int8x16_t)(unint64_t)v17;
  v124 = (int8x16_t *)(v18 + 16);
  v125 = v121 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v123 = vorrq_s8(v124[-1], v123);
    v122 = vorrq_s8(*v124, v122);
    v124 += 2;
    v125 -= 4;
  }
  while (v125);
  v126 = vorrq_s8(v122, v123);
  v17 = vorr_s8(*(int8x8_t *)v126.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL));
  if (v121 != (v121 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_107;
LABEL_108:
  if (v29 == (uint16x4_t *)v16)
    goto LABEL_115;
  v128 = v3 + 2 * v4 - (_QWORD)v29 - 2;
  if (v128 < 0x1E)
  {
    v129 = (unsigned __int16 *)v29;
    do
    {
LABEL_114:
      v155 = *v129++;
      *(_QWORD *)&v17 |= v155;
    }
    while (v129 != (unsigned __int16 *)v16);
    goto LABEL_115;
  }
  v130 = (v128 >> 1) + 1;
  v131 = 0uLL;
  v132 = (int8x16_t)(unint64_t)v17;
  v129 = (unsigned __int16 *)v29 + (v130 & 0xFFFFFFFFFFFFFFF0);
  v133 = v29 + 2;
  v134 = v130 & 0xFFFFFFFFFFFFFFF0;
  v135 = 0uLL;
  v136 = 0uLL;
  v137 = 0uLL;
  v138 = 0uLL;
  v139 = 0uLL;
  v140 = 0uLL;
  do
  {
    v141 = *(uint16x8_t *)v133[-2].i8;
    v142 = vmovl_u16(*(uint16x4_t *)v141.i8);
    v143.i64[0] = v142.u32[0];
    v143.i64[1] = v142.u32[1];
    v144 = v143;
    v143.i64[0] = v142.u32[2];
    v143.i64[1] = v142.u32[3];
    v145 = v143;
    v146 = vmovl_high_u16(v141);
    v143.i64[0] = v146.u32[0];
    v143.i64[1] = v146.u32[1];
    v147 = v143;
    v143.i64[0] = v146.u32[2];
    v143.i64[1] = v146.u32[3];
    v148 = v143;
    v149 = vmovl_u16(*v133);
    v143.i64[0] = v149.u32[0];
    v143.i64[1] = v149.u32[1];
    v150 = v143;
    v143.i64[0] = v149.u32[2];
    v143.i64[1] = v149.u32[3];
    v151 = v143;
    v152 = vmovl_high_u16(*(uint16x8_t *)v133->i8);
    v143.i64[0] = v152.u32[0];
    v143.i64[1] = v152.u32[1];
    v153 = v143;
    v143.i64[0] = v152.u32[2];
    v143.i64[1] = v152.u32[3];
    v136 = vorrq_s8(v136, v148);
    v135 = vorrq_s8(v135, v147);
    v131 = vorrq_s8(v131, v145);
    v132 = vorrq_s8(v132, v144);
    v140 = vorrq_s8(v140, v143);
    v139 = vorrq_s8(v139, v153);
    v138 = vorrq_s8(v138, v151);
    v137 = vorrq_s8(v137, v150);
    v133 += 4;
    v134 -= 16;
  }
  while (v134);
  v154 = vorrq_s8(vorrq_s8(vorrq_s8(v137, v132), vorrq_s8(v139, v135)), vorrq_s8(vorrq_s8(v138, v131), vorrq_s8(v140, v136)));
  v17 = vorr_s8(*(int8x8_t *)v154.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v154, v154, 8uLL));
  if (v130 != (v130 & 0xFFFFFFFFFFFFFFF0))
    goto LABEL_114;
LABEL_115:
  if ((*(_QWORD *)&v17 & 0xFF80FF80FF80FF80) == 0)
    goto LABEL_116;
LABEL_63:
  pErrorCode = U_ZERO_ERROR;
  pInfo = (UIDNAInfo)xmmword_199123570;
  v82 = atomic_load(&WTF::URLParser::internationalDomainNameTranscoder(void)::onceFlag);
  if (v82 != -1)
  {
    *(_QWORD *)dest = &v225;
    v218 = (WTF *)dest;
    std::__call_once(&WTF::URLParser::internationalDomainNameTranscoder(void)::onceFlag, &v218, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::URLParser::internationalDomainNameTranscoder(void)::$_0 &&>>);
  }
  v83 = (const UIDNA *)WTF::URLParser::internationalDomainNameTranscoder(void)::encoder;
  v218 = (WTF *)v220;
  v219 = 32;
  v221 = 0;
  v222 = 0;
  if ((v5 & 0xFF00000000) != 0)
  {
    if (v8 <= 0x20)
    {
      HIDWORD(v219) = v5;
      v85 = (WTF *)v220;
      v86 = (WTF *)v220;
    }
    else
    {
      if (v8 <= 0x29)
        v84 = 41;
      else
        v84 = v8;
      if (v84 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x197B2A2B0);
      }
      v85 = (WTF *)WTF::fastMalloc((WTF *)(2 * v84));
      v218 = v85;
      v219 = __PAIR64__(v5, v84);
      if (v8 < 0x40)
      {
        v86 = v85;
        v95 = (WTF *)((char *)v85 + 2 * v8);
        if (v85 != v95)
          goto LABEL_77;
        goto LABEL_82;
      }
      v86 = (WTF *)((char *)v85 + 2 * (v5 & 0xFFFFFFC0));
      v87 = 0uLL;
      v88 = (char *)v85;
      do
      {
        v228.val[0] = *(int8x16_t *)v6;
        v89 = *((int8x16_t *)v6 + 1);
        v230.val[0] = (int8x16_t)*((_OWORD *)v6 + 2);
        v90 = *((_OWORD *)v6 + 3);
        v6 = (WTF *)((char *)v6 + 64);
        v91 = v90;
        v230.val[1] = 0uLL;
        v232.val[0] = v89;
        v228.val[1] = 0uLL;
        v92 = v88;
        vst2q_s8(v92, v228);
        v92 += 32;
        v232.val[1] = 0uLL;
        vst2q_s8(v92, v232);
        v93 = v88 + 64;
        vst2q_s8(v93, v230);
        v94 = v88 + 96;
        vst2q_s8(v94, *(int8x16x2_t *)(&v87 - 1));
        v88 += 128;
      }
      while (v88 != (char *)v86);
    }
    v95 = (WTF *)((char *)v85 + 2 * v8);
    if (v86 != v95)
    {
LABEL_77:
      v96 = v95 - v86 - 2;
      if (v96 < 0xE
        || (v97 = (WTF *)((char *)v85 + 2 * v8) - v86 - 2, v86 < (WTF *)((char *)v6 + (v97 >> 1) + 1))
        && v6 < (WTF *)((char *)v86 + (v97 & 0xFFFFFFFFFFFFFFFELL) + 2))
      {
        v98 = v86;
        v99 = v6;
        goto LABEL_81;
      }
      v198 = (v96 >> 1) + 1;
      if (v96 >= 0x3E)
      {
        v199 = v198 & 0xFFFFFFFFFFFFFFE0;
        v200 = (uint8x8_t *)((char *)v6 + 16);
        v201 = (uint16x8_t *)((char *)v86 + 32);
        v202 = v198 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v203 = *(uint8x16_t *)v200[-2].i8;
          v204 = vmovl_u8(*v200);
          v205 = vmovl_high_u8(*(uint8x16_t *)v200->i8);
          v201[-2] = vmovl_u8(*(uint8x8_t *)v203.i8);
          v201[-1] = vmovl_high_u8(v203);
          *v201 = v204;
          v201[1] = v205;
          v201 += 4;
          v200 += 4;
          v202 -= 32;
        }
        while (v202);
        if (v198 == v199)
          goto LABEL_82;
        if ((v198 & 0x18) == 0)
        {
          v99 = (WTF *)((char *)v6 + v199);
          v98 = (WTF *)((char *)v86 + 2 * v199);
          do
          {
LABEL_81:
            v100 = *(unsigned __int8 *)v99;
            v99 = (WTF *)((char *)v99 + 1);
            *(_WORD *)v98 = v100;
            v98 = (WTF *)((char *)v98 + 2);
          }
          while (v98 != v95);
          goto LABEL_82;
        }
      }
      else
      {
        v199 = 0;
      }
      v98 = (WTF *)((char *)v86 + 2 * (v198 & 0xFFFFFFFFFFFFFFF8));
      v99 = (WTF *)((char *)v6 + (v198 & 0xFFFFFFFFFFFFFFF8));
      v206 = (uint8x8_t *)((char *)v6 + v199);
      v207 = (uint16x8_t *)((char *)v86 + 2 * v199);
      v208 = v199 - (v198 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v209 = *v206++;
        *v207++ = vmovl_u8(v209);
        v208 += 8;
      }
      while (v208);
      if (v198 == (v198 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_82;
      goto LABEL_81;
    }
LABEL_82:
    v6 = v218;
    v8 = HIDWORD(v219);
  }
  v221 = v6;
  v222 = v8;
  v108 = uidna_nameToASCII(v83, (const UChar *)v6, v5, dest, 2048, &pInfo, &pErrorCode);
  v109 = v218;
  if (v220 != (_BYTE *)v218 && v218 != 0)
  {
    v218 = 0;
    LODWORD(v219) = 0;
    WTF::fastFree((unint64_t)v109, v101, v102, v103, v104, v105, v106, v107);
  }
  if (pErrorCode > U_ZERO_ERROR)
    return 0;
  result = 0;
  if (pInfo.errors <= 0x3F && v108)
  {
    v112 = v108;
    v113 = *(unsigned int *)(v7 + 8);
    v114 = *(unsigned int *)(v7 + 12);
    v115 = v114 + v108;
    if (v115 <= v113)
    {
LABEL_174:
      v217 = *(unsigned int *)(v7 + 12);
      if (v115 < v217)
      {
        __break(0xC471u);
        JUMPOUT(0x197B2A2B8);
      }
      memcpy((void *)(*(_QWORD *)v7 + 2 * v217), dest, 2 * v112);
      *(_DWORD *)(v7 + 12) = v115;
      return 1;
    }
    v116 = v113 + (v113 >> 2);
    if (v116 >= 0x10)
      v117 = v116 + 1;
    else
      v117 = 16;
    if (v117 <= v115)
      v118 = v114 + v108;
    else
      v118 = v117;
    v119 = *(_BYTE **)v7;
    if (v118 < 0x201)
    {
      v120 = (void *)(v7 + 16);
      *(_QWORD *)v7 = v7 + 16;
      *(_DWORD *)(v7 + 8) = 512;
      goto LABEL_169;
    }
    if (!(v118 >> 31))
    {
      v120 = (void *)WTF::fastMalloc((WTF *)(2 * v118));
      *(_DWORD *)(v7 + 8) = v118;
      *(_QWORD *)v7 = v120;
LABEL_169:
      memcpy(v120, v119, 2 * v114);
      if ((_BYTE *)(v7 + 16) != v119 && v119)
      {
        if (*(_BYTE **)v7 == v119)
        {
          *(_QWORD *)v7 = 0;
          *(_DWORD *)(v7 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v119, v210, v211, v212, v213, v214, v215, v216);
      }
      goto LABEL_174;
    }
    __break(0xC471u);
LABEL_184:
    JUMPOUT(0x197B2A2A8);
  }
  return result;
}

void WTF::URL::setPort(uint64_t a1, int a2)
{
  unsigned int v2;
  unsigned int v4;
  WTF::StringImpl *v5;
  int8x16_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int8x16_t *v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::String *v14;
  WTF::StringImpl *v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unsigned int v45;
  BOOL v46;
  BOOL v47;
  int v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;

  v2 = *(_DWORD *)(a1 + 8);
  if ((v2 & 1) != 0)
  {
    v4 = (v2 >> 3) & 7;
    if ((*(_QWORD *)&a2 & 0xFF0000) != 0)
    {
      v5 = *(WTF::StringImpl **)a1;
      if (*(_QWORD *)a1)
      {
        v6 = (int8x16_t *)*((_QWORD *)v5 + 1);
        LODWORD(v7) = *((_DWORD *)v5 + 1);
        v8 = ((unint64_t)*((unsigned int *)v5 + 4) >> 2) & 1;
        v9 = *(unsigned int *)(a1 + 24);
        v10 = (v8 << 32) | v9;
        if (v7 <= v9)
          v10 = *((unsigned int *)v5 + 1) | ((((unint64_t)*((unsigned int *)v5 + 4) >> 2) & 1) << 32);
        if ((_DWORD)v7)
          v11 = (int8x16_t *)*((_QWORD *)v5 + 1);
        else
          v11 = (int8x16_t *)"";
        if ((_DWORD)v7)
          v12 = v10;
        else
          v12 = 0x100000000;
        v7 = v7;
        v13 = v9 + v4;
        if ((_DWORD)v13 != (v2 >> 6) + 1)
          goto LABEL_32;
      }
      else
      {
        v6 = 0;
        v12 = 0x100000000;
        v8 = 1;
        v11 = (int8x16_t *)"";
        v7 = 0;
        v13 = *(_DWORD *)(a1 + 24) + v4;
        if ((_DWORD)v13 != (v2 >> 6) + 1)
          goto LABEL_32;
      }
      if (v5)
      {
        v31 = v13 + 1;
        if ((v13 + 1) < *((_DWORD *)v5 + 1))
        {
          v32 = *((_QWORD *)v5 + 1);
          if ((*((_BYTE *)v5 + 16) & 4) != 0)
          {
            if (*(_BYTE *)(v32 + v13) != 47)
              goto LABEL_32;
            v33 = *(unsigned __int8 *)(v32 + v31);
          }
          else
          {
            if (*(_WORD *)(v32 + 2 * v13) != 47)
              goto LABEL_32;
            v33 = *(unsigned __int16 *)(v32 + 2 * v31);
          }
          if (v33 == 46)
            LODWORD(v13) = v13 + 2;
        }
      }
LABEL_32:
      if (v7 <= v13)
      {
        v42 = 0x100000000;
        v6 = (int8x16_t *)"";
      }
      else if ((_DWORD)v13)
      {
        v42 = (v7 - v13);
        v43 = v7 - v13;
        if (v8)
        {
          if (v43 >= v42)
          {
            v6 = (int8x16_t *)((char *)v6 + v13);
            v42 |= 0x100000000uLL;
            goto LABEL_41;
          }
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
        if (v43 < v42)
          goto LABEL_57;
        v6 = (int8x16_t *)((char *)v6 + 2 * v13);
      }
      else
      {
        v42 = v7 | (v8 << 32);
      }
LABEL_41:
      v44 = 0;
      v45 = (unsigned __int16)a2;
      do
      {
        ++v44;
        v46 = v45 > 9;
        v45 /= 0xAu;
      }
      while (v46);
      if (((v44 | v42) & 0x80000000) == 0)
      {
        v47 = __OFADD__(v44, (_DWORD)v42);
        v48 = v44 + v42;
        if (!v47)
        {
          v47 = __OFADD__(v48, 1);
          v49 = v48 + 1;
          v50 = v47;
          if ((v12 & 0x80000000) == 0 && !v50)
          {
            v47 = __OFADD__((_DWORD)v12, v49);
            v51 = v12 + v49;
            if (!v47)
            {
              WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::StringView,void>>((unint64_t)&v61, v51, HIDWORD(v12) & HIDWORD(v42), v11, v12, (unsigned __int16)a2, v6, v42);
              if (v61)
              {
                WTF::URL::parse(a1);
                v30 = v61;
                if (!v61)
                  return;
                goto LABEL_53;
              }
            }
          }
        }
      }
LABEL_58:
      __break(0xC471u);
      return;
    }
    if (!v4)
      return;
    v14 = (const WTF::String *)*(unsigned int *)(a1 + 24);
    v60 = *(WTF::StringImpl **)a1;
    v15 = v60;
    *(_QWORD *)a1 = 0;
    WTF::makeStringByRemoving((uint64_t)&v60, v14, v4, (int **)&v61);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl(v15, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
        WTF::URL::parse(a1);
        v30 = v61;
        v61 = 0;
        if (!v30)
          return;
        goto LABEL_53;
      }
      *(_DWORD *)v15 -= 2;
    }
    WTF::URL::parse(a1);
    v30 = v61;
    v61 = 0;
    if (!v30)
      return;
LABEL_53:
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
}

void WTF::URL::setHostAndPort(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  _BYTE *v6;
  unint64_t v7;
  int8x16_t v8;
  int16x8_t v9;
  float v10;
  uint64_t (*v11);
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  WTF::URL *v26;
  int16x8_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  int16x8_t *v35;
  int16x8_t *v36;
  int16x8_t *v37;
  char *v38;
  __int16 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  const char *v61;
  uint64_t v62;
  _BOOL4 hasSpecialScheme;
  uint64_t v64;
  WTF *v65;
  const char *v66;
  unsigned int v67;
  int8x16_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  unint64_t v86;
  uint64_t v87;
  int8x16_t *v88;
  int8x16_t *v89;
  unint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF *v93;
  uint64_t v94;
  _BYTE v95[1032];

  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    return;
  v3 = a3;
  LODWORD(v6) = a3;
  v7 = BYTE4(a3);
  if (WTF::URL::hasSpecialScheme((WTF::URL *)a1))
    v11 = WTF::slashHashOrQuestionMark;
  else
    v11 = WTF::forwardSlashHashOrQuestionMark;
  v12 = v3;
  if ((_DWORD)v7)
  {
    if (!(_DWORD)v6)
      goto LABEL_69;
    v13 = 0;
    while ((v11(*(unsigned __int8 *)(a2 + v13)) & 1) == 0)
    {
      if (v3 == ++v13)
      {
        v12 = v6;
        goto LABEL_22;
      }
    }
  }
  else
  {
    if (!(_DWORD)v6)
    {
LABEL_30:
      v7 = 0;
LABEL_69:
      v25 = v6 | (v7 << 32) | v3 & 0xFFFFFF0000000000;
      v26 = (WTF::URL *)a1;
      v27 = (int16x8_t *)a2;
LABEL_70:
      WTF::URL::setHost(v26, v27, v25, *(double *)v8.i64, *(double *)v9.i64, v10);
      return;
    }
    v13 = 0;
    while ((v11(*(unsigned __int16 *)(a2 + 2 * v13)) & 1) == 0)
    {
      if (v3 == ++v13)
        goto LABEL_26;
    }
  }
  v14 = v13;
  if ((_DWORD)v7)
    v14 = v13 | 0x100000000;
  if (v6 <= v13)
    v14 = v3;
  LODWORD(v6) = v14;
  v7 = BYTE4(v14);
  v12 = v14;
  if (BYTE4(v14))
  {
LABEL_22:
    if ((_DWORD)v6)
    {
      v15 = v12 - 1;
      LODWORD(v16) = *(unsigned __int8 *)(a2 + v12 - 1);
      if ((_DWORD)v6 != 1)
      {
        if ((_DWORD)v16 == 58)
        {
          LODWORD(v16) = 0;
          goto LABEL_40;
        }
        v17 = v12 - 2;
        while (v17 != -1)
        {
          v18 = *(unsigned __int8 *)(a2 + v17--);
          if (v18 == 58)
          {
            LODWORD(v16) = 0;
            v15 = v17 + 1;
            goto LABEL_40;
          }
        }
        v20 = v12 - 1;
        v15 = -1;
        if (v12 < 2)
          goto LABEL_51;
LABEL_43:
        if ((_DWORD)v16 != 93)
        {
          do
          {
            if (!v20)
            {
              LODWORD(v16) = 0;
              v20 = -1;
              if (v15 != -1)
                goto LABEL_67;
              goto LABEL_69;
            }
            v21 = v20 - 1;
            v22 = *(unsigned __int8 *)(a2 + v20-- - 1);
          }
          while (v22 != 93);
          LODWORD(v16) = 0;
          v20 = v21;
          if (v15 != -1)
            goto LABEL_67;
          goto LABEL_69;
        }
        goto LABEL_44;
      }
      if ((_DWORD)v16 == 58)
      {
        LODWORD(v16) = 0;
        v12 = 1;
        LODWORD(v6) = 1;
        goto LABEL_40;
      }
      if (v12 != 1)
        goto LABEL_204;
      LODWORD(v6) = 1;
    }
    goto LABEL_69;
  }
LABEL_26:
  if (!(_DWORD)v6)
    goto LABEL_30;
  v15 = v12 - 1;
  LODWORD(v16) = *(unsigned __int16 *)(a2 + 2 * (v12 - 1));
  if ((_DWORD)v6 == 1)
  {
    if ((_DWORD)v16 == 58)
    {
      v7 = 0;
      LODWORD(v16) = 1;
      LODWORD(v6) = 1;
      goto LABEL_40;
    }
    if (v12 != 1)
      goto LABEL_204;
    v7 = 0;
    LODWORD(v6) = 1;
    goto LABEL_69;
  }
  if ((_DWORD)v16 == 58)
  {
    v7 = 0;
    goto LABEL_39;
  }
  v16 = v12 - 2;
  do
  {
    if (v16 == -1)
    {
      v7 = 0;
      v20 = v12 - 1;
      v15 = -1;
LABEL_56:
      if (!v12)
        goto LABEL_204;
      LODWORD(v16) = *(unsigned __int16 *)(a2 + 2 * v20);
      if (v12 == 1)
        goto LABEL_205;
      if ((_DWORD)v16 == 93)
      {
LABEL_66:
        LODWORD(v16) = 1;
        if (v15 != -1)
          goto LABEL_67;
      }
      else
      {
        do
        {
          if (!v20)
          {
            v20 = -1;
            goto LABEL_66;
          }
          v23 = v20 - 1;
          v24 = *(unsigned __int16 *)(a2 + 2 * v20-- - 2);
        }
        while (v24 != 93);
        LODWORD(v16) = 1;
        v20 = v23;
        if (v15 != -1)
          goto LABEL_67;
      }
      goto LABEL_69;
    }
    v19 = *(unsigned __int16 *)(a2 + 2 * v16--);
  }
  while (v19 != 58);
  v7 = 0;
  v15 = v16 + 1;
LABEL_39:
  LODWORD(v16) = 1;
LABEL_40:
  if (v15)
  {
    v20 = v12 - 1;
    if ((v16 & 1) == 0)
    {
      LODWORD(v16) = *(unsigned __int8 *)(a2 + v20);
      if (v12 >= 2)
        goto LABEL_43;
LABEL_51:
      if ((_DWORD)v16 != 93)
      {
        if (v20)
          goto LABEL_204;
        LODWORD(v16) = 0;
        v20 = -1;
        v12 = 1;
        if (v15 == -1)
          goto LABEL_69;
LABEL_67:
        while (2)
        {
          if (v20 != -1 && v20 > v15)
            goto LABEL_69;
          v28 = (v15 + 1);
          v29 = ((_DWORD)v6 - v28);
          if (v6 <= v28)
          {
            v12 = (unint64_t)"";
            v29 = 0x100000000;
          }
          else if ((_DWORD)v15 == -1)
          {
            v29 = v6 | (v7 << 32) | v3 & 0xFFFFFF0000000000;
            v12 = a2;
          }
          else
          {
            if ((v16 & 1) != 0)
            {
              if (v12 - v28 >= v29)
              {
                v12 = a2 + 2 * v28;
                break;
              }
LABEL_204:
              __break(1u);
LABEL_205:
              if ((_DWORD)v16 == 93)
                v20 = 0;
              else
                v20 = -1;
              LODWORD(v16) = 1;
              if (v15 == -1)
                goto LABEL_69;
              continue;
            }
            if (v12 - v28 < v29)
              goto LABEL_204;
            v12 = a2 + v28;
            v29 |= 0x100000000uLL;
          }
          break;
        }
        if ((_DWORD)v16)
          v30 = v15;
        else
          v30 = v15 | 0x100000000;
        if (v6 <= v15)
          v3 = v6 | (v7 << 32) | v3 & 0xFFFFFF0000000000;
        else
          v3 = v30;
        if ((v3 & 0xFF00000000) != 0)
        {
          if ((_DWORD)v3)
          {
            v31 = 16;
            if (v3 < 0x10uLL)
              v31 = v3;
            v32 = v31;
            v33 = (_BYTE *)a2;
            do
            {
              if (*v33 == 58)
                goto LABEL_95;
              ++v33;
              --v32;
            }
            while (v32);
            if (v3 >= 0x11uLL)
            {
              v33 = memchr((void *)(a2 + v31), 58, v3 - v31);
              if (v33)
              {
LABEL_95:
                v34 = (uint64_t)&v33[-a2];
                goto LABEL_107;
              }
            }
          }
        }
        else if ((_DWORD)v3)
        {
          v35 = (int16x8_t *)(a2 + 2 * v3);
          if (v3 <= 0x1FuLL)
          {
            v40 = 2 * v3;
            v39 = (__int16 *)a2;
            while (*v39 != 58)
            {
              ++v39;
              v40 -= 2;
              if (!v40)
                goto LABEL_113;
            }
LABEL_105:
            if (v39 != (__int16 *)v35)
            {
              v34 = ((uint64_t)v39 - a2) >> 1;
LABEL_107:
              if (v34 != -1 && v20 == -1)
                return;
            }
          }
          else
          {
            v9.i64[0] = 0x3A003A003A003ALL;
            v9.i64[1] = 0x3A003A003A003ALL;
            v36 = (int16x8_t *)a2;
            do
            {
              v8 = (int8x16_t)vceqq_s16(*v36, v9);
              LOWORD(v10) = vmaxvq_u16((uint16x8_t)v8);
              if (v10 != 0.0)
                goto LABEL_104;
              v37 = v36 + 1;
              v38 = &v36[1].i8[14];
              ++v36;
            }
            while (v38 < (char *)v35);
            if (v37 < v35)
            {
              v9.i64[0] = 0x3A003A003A003ALL;
              v9.i64[1] = 0x3A003A003A003ALL;
              v8 = (int8x16_t)vceqq_s16(v35[-1], v9);
              v9.i16[0] = vmaxvq_u16((uint16x8_t)v8);
              if (v9.i32[0])
              {
                v36 = v35 - 1;
LABEL_104:
                v9.i64[0] = 0x3000200010000;
                v8 = vornq_s8((int8x16_t)xmmword_199123280, v8);
                v8.i16[0] = vminvq_u16((uint16x8_t)v8);
                v39 = &v36->i16[v8.u8[0]];
                goto LABEL_105;
              }
            }
          }
        }
LABEL_113:
        if (!(_DWORD)v29)
          goto LABEL_131;
        v41 = 0;
        if ((v29 & 0xFF00000000) != 0)
        {
          while (*(unsigned __int8 *)(v12 + v41) - 48 <= 9)
          {
            if (v29 == ++v41)
              goto LABEL_117;
          }
        }
        else
        {
          while (*(unsigned __int16 *)(v12 + 2 * v41) - 48 <= 9)
          {
            if (v29 == ++v41)
            {
LABEL_117:
              LODWORD(v41) = v29;
              break;
            }
          }
        }
        v42 = v41 >= v29 ? v29 : v41;
        if (!(_DWORD)v42)
        {
LABEL_131:
          v26 = (WTF::URL *)a1;
          v27 = (int16x8_t *)a2;
          v25 = v3;
          goto LABEL_70;
        }
        if ((v29 & 0xFF00000000) != 0)
          v43 = v42 | 0x100000000;
        else
          v43 = v42;
        if (v41 >= v29)
          v43 = v29;
        v44 = v43 & 0xFFFFFFFFFFLL;
        if ((v43 & 0xFF00000000) != 0)
          v45 = WTF::parseInteger<unsigned short,unsigned char>(v12, v43);
        else
          v45 = WTF::parseInteger<unsigned short,char16_t>(v12, v43);
        v46 = v45;
        v47 = 0x100000000;
        if (v45 >= 0x10000)
          v47 = v44;
        v91 = v47;
        v93 = (WTF *)v95;
        v94 = 512;
        if (WTF::URL::hasSpecialScheme((WTF::URL *)a1) && !WTF::appendEncodedHostname((uint64_t)&v93, a2))
          goto LABEL_193;
        v7 = *(unsigned int *)(a1 + 8);
        v55 = *(_DWORD *)(a1 + 12);
        v56 = (v7 >> 6) + 1;
        v57 = *(_QWORD *)a1;
        v86 = v7 >> 6;
        if (*(_QWORD *)a1)
        {
          v58 = *(unsigned int *)(v57 + 4);
          LODWORD(v59) = *(_DWORD *)(a1 + 20);
          if ((_DWORD)v59 == v55)
            v59 = v59;
          else
            v59 = (v59 + 1);
          if ((_DWORD)v58)
          {
            v89 = *(int8x16_t **)(v57 + 8);
            if (v58 <= v59)
              v90 = v58 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)((*(_DWORD *)(v57 + 16) >> 2) & 1) << 32);
            else
              v90 = ((unint64_t)((*(_DWORD *)(v57 + 16) >> 2) & 1) << 32) | v59;
          }
          else
          {
            v89 = (int8x16_t *)"";
            v90 = 0x100000000;
          }
        }
        else
        {
          v89 = (int8x16_t *)"";
          v90 = 0x100000000;
        }
        v60 = v55 == (_DWORD)v56;
        if (v55 == (_DWORD)v56)
          v61 = "//";
        else
          v61 = "";
        v62 = 3;
        if (!v60)
          v62 = 1;
        v87 = v62;
        v88 = (int8x16_t *)v61;
        hasSpecialScheme = WTF::URL::hasSpecialScheme((WTF::URL *)a1);
        if (hasSpecialScheme)
          v64 = HIDWORD(v94);
        else
          v64 = v3;
        if (hasSpecialScheme)
          v65 = v93;
        else
          v65 = (WTF *)a2;
        if ((_DWORD)v91)
          v66 = ":";
        else
          v66 = "";
        v15 = 1;
        if ((_DWORD)v91)
          v15 = 2;
        if (v46 >= 0x10000)
          v16 = v12;
        else
          v16 = 0;
        if (v57)
        {
          v67 = *(_DWORD *)(v57 + 16);
          v68 = *(int8x16_t **)(v57 + 8);
          v69 = *(unsigned int *)(v57 + 4);
          v70 = v69 | ((unint64_t)((v67 >> 2) & 1) << 32);
          LODWORD(v71) = *(_DWORD *)(a1 + 24) + ((v7 >> 3) & 7);
          if ((_DWORD)v71 == (_DWORD)v56)
          {
            v72 = (v7 >> 6) + 1;
            v73 = v86 + 2;
            v6 = v95;
            if (v73 < v69)
            {
              if ((v67 & 4) != 0)
              {
                if (v68->i8[v72] == 47)
                {
                  v74 = v68->u8[v73];
                  goto LABEL_176;
                }
              }
              else if (v68->i16[v72] == 47)
              {
                v74 = v68->u16[v73];
LABEL_176:
                LODWORD(v71) = v86 + 3;
                if (v74 != 46)
                  LODWORD(v71) = (v7 >> 6) + 1;
LABEL_179:
                v75 = (v70 - v71);
                if (v70 <= v71)
                {
                  v75 = 0x100000000;
                  v68 = (int8x16_t *)"";
                  goto LABEL_188;
                }
                if (!(_DWORD)v71)
                {
                  v75 = v70;
                  goto LABEL_188;
                }
                v76 = v70 - (unint64_t)v71;
                if ((v70 & 0x100000000) != 0)
                {
                  if (v76 >= v75)
                  {
                    v68 = (int8x16_t *)((char *)v68 + v71);
                    v75 |= 0x100000000uLL;
LABEL_188:
                    WTF::tryMakeString<WTF::StringView,WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral,WTF::StringView,WTF::StringView>((int **)&v92, v89, v90, v88, v87, v65, v64, (unint64_t)v66, v15, (int8x16_t *)v16, v91 | v29 & 0xFFFFFF0000000000, v68, v75);
                    if (!v92)
                    {
                      __break(0xC471u);
                      return;
                    }
                    WTF::URL::parse(a1);
                    if (v92)
                    {
                      if (*(_DWORD *)v92 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v92, v48, v49, v50, v51, v52, v53, v54);
                        WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
                      }
                      else
                      {
                        *(_DWORD *)v92 -= 2;
                      }
                    }
LABEL_193:
                    v85 = v93;
                    if (v95 != (_BYTE *)v93)
                    {
                      if (v93)
                      {
                        v93 = 0;
                        LODWORD(v94) = 0;
                        WTF::fastFree((unint64_t)v85, v48, v49, v50, v51, v52, v53, v54);
                      }
                    }
                    return;
                  }
                }
                else if (v76 >= v75)
                {
                  v68 = (int8x16_t *)((char *)v68 + 2 * v71);
                  goto LABEL_188;
                }
                goto LABEL_204;
              }
            }
            v71 = (v7 >> 6) + 1;
            goto LABEL_179;
          }
        }
        else
        {
          v68 = 0;
          LODWORD(v71) = *(_DWORD *)(a1 + 24) + ((v7 >> 3) & 7);
          v70 = 0x100000000;
        }
        v6 = v95;
        goto LABEL_179;
      }
LABEL_44:
      LODWORD(v16) = 0;
      if (v15 != -1)
        goto LABEL_67;
      goto LABEL_69;
    }
    goto LABEL_56;
  }
}

void WTF::URL::removeHostAndPort(WTF::URL *this)
{
  unsigned int v1;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;

  v1 = *((_DWORD *)this + 2);
  if ((v1 & 1) != 0)
  {
    v3 = *((_DWORD *)this + 5);
    if (v3 == *((_DWORD *)this + 3))
      v4 = v3;
    else
      v4 = v3 + 1;
    v5 = *((_DWORD *)this + 6) + ((v1 >> 3) & 7);
    if ((_DWORD)v5 == (v1 >> 6) + 1)
    {
      v6 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v7 = v5 + 1;
        if ((v5 + 1) < *(_DWORD *)(v6 + 4))
        {
          v8 = *(_QWORD *)(v6 + 8);
          if ((*(_BYTE *)(v6 + 16) & 4) != 0)
          {
            if (*(_BYTE *)(v8 + v5) != 47)
              goto LABEL_15;
            v9 = *(unsigned __int8 *)(v8 + v7);
          }
          else
          {
            if (*(_WORD *)(v8 + 2 * v5) != 47)
              goto LABEL_15;
            v9 = *(unsigned __int16 *)(v8 + 2 * v7);
          }
          if (v9 == 46)
            LODWORD(v5) = v5 + 2;
        }
      }
    }
LABEL_15:
    if ((_DWORD)v5 == (_DWORD)v4)
      return;
    v42 = *(WTF::StringImpl **)this;
    v10 = v42;
    *(_QWORD *)this = 0;
    WTF::makeStringByRemoving((uint64_t)&v42, (const WTF::String *)v4, v5 - v4, (int **)&v43);
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::~StringImpl(v10, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
        WTF::URL::parse((uint64_t)this);
        v25 = v43;
        v43 = 0;
        if (!v25)
          return;
        goto LABEL_22;
      }
      *(_DWORD *)v10 -= 2;
    }
    WTF::URL::parse((uint64_t)this);
    v25 = v43;
    v43 = 0;
    if (!v25)
      return;
LABEL_22:
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
}

void WTF::URL::parseAllowingC0AtEnd(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  WTF::StringImpl *v58[2];
  __int128 v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  __int128 v62;
  __int128 v63;
  WTF *v64;
  int v65;
  WTF::StringImpl *v66;

  v60 = 0;
  *(_OWORD *)v58 = 0u;
  v59 = 0u;
  WTF::URLParser::URLParser((WTF::URL *)&v61, a2, (uint64_t)v58, (unsigned __int16 *)0xFFFFFFFFFFFFFFFFLL, a5, a6, a7, a8);
  v16 = v61;
  if (v61)
    *(_DWORD *)v61 += 2;
  v17 = v62;
  v18 = v63;
  v19 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v16;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      v56 = v18;
      v57 = v17;
      WTF::StringImpl::~StringImpl(v19, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      *(_OWORD *)(a1 + 8) = v57;
      *(_OWORD *)(a1 + 24) = v56;
      v20 = v66;
      v66 = 0;
      if (!v20)
        goto LABEL_11;
      goto LABEL_9;
    }
    *(_DWORD *)v19 -= 2;
  }
  *(_OWORD *)(a1 + 8) = v17;
  *(_OWORD *)(a1 + 24) = v18;
  v20 = v66;
  v66 = 0;
  if (!v20)
  {
LABEL_11:
    v29 = v64;
    if (!v64)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_9:
  if (*(_DWORD *)v20 != 2)
  {
    *(_DWORD *)v20 -= 2;
    goto LABEL_11;
  }
  WTF::StringImpl::~StringImpl(v20, v9, v10, v11, v12, v13, v14, v15);
  WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
  v29 = v64;
  if (v64)
  {
LABEL_12:
    v64 = 0;
    v65 = 0;
    WTF::fastFree((unint64_t)v29, v9, v10, v11, v12, v13, v14, v15);
  }
LABEL_13:
  v30 = v61;
  v61 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
      v31 = v58[0];
      v58[0] = 0;
      if (!v31)
        return;
      goto LABEL_21;
    }
    *(_DWORD *)v30 -= 2;
  }
  v31 = v58[0];
  v58[0] = 0;
  if (!v31)
    return;
LABEL_21:
  if (*(_DWORD *)v31 == 2)
  {
    WTF::StringImpl::~StringImpl(v31, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
  }
  else
  {
    *(_DWORD *)v31 -= 2;
  }
}

void WTF::URL::setUser(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, double a4, float a5)
{
  unsigned int v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  size_t v45;
  uint64_t v46;
  unint64_t v47;
  WTF::StringImpl *v48;
  int v49;
  int v50;
  BOOL v51;
  int v52;
  int v53;
  char v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  WTF::StringImpl *v58;
  char *v59;
  unint64_t v60;
  unsigned int v61;
  _WORD *v62;
  _WORD *v63;
  unint64_t v64;
  __int128 v65;
  char *v66;
  int8x16_t v67;
  __int128 v68;
  __int128 v69;
  char *v70;
  char *v71;
  char *v72;
  unint64_t v73;
  BOOL v74;
  uint64_t v75;
  unint64_t v76;
  _WORD *v77;
  const char *v78;
  __int16 v79;
  const char *v80;
  WTF::StringImpl *v81;
  char *v82;
  char *v83;
  int8x16_t *v84;
  size_t v85;
  char *v86;
  unint64_t v87;
  unsigned __int128 *v88;
  unsigned __int128 v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  BOOL v93;
  unint64_t v94;
  char *v95;
  int8x16_t *v96;
  char v97;
  const WTF::String *v98;
  WTF::StringImpl *v99;
  WTF::AtomStringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::AtomStringImpl *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  uint8x8_t *v123;
  uint16x8_t *v124;
  unint64_t v125;
  uint8x16_t v126;
  uint16x8_t v127;
  uint16x8_t v128;
  uint8x8_t *v129;
  uint16x8_t *v130;
  unint64_t v131;
  uint8x8_t v132;
  unint64_t v133;
  _WORD *v134;
  unint64_t v135;
  __int128 v136;
  int8x16_t v137;
  __int128 v138;
  __int128 v139;
  char *v140;
  char *v141;
  char *v142;
  unint64_t v143;
  _WORD *v144;
  const char *v145;
  __int16 v146;
  int8x16_t *v147;
  uint64_t v148;
  uint64_t v149;
  _WORD *v150;
  unint64_t v151;
  __int128 v152;
  char *v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  BOOL v163;
  uint64_t v164;
  unint64_t v165;
  _WORD *v166;
  int8x16_t *v167;
  __int16 v168;
  WTF::StringImpl *v169;
  unint64_t v170;
  char *v171;
  unint64_t v172;
  __int128 v173;
  int8x16_t v174;
  __int128 v175;
  __int128 v176;
  char *v177;
  char *v178;
  char *v179;
  uint64_t v180;
  unint64_t v181;
  BOOL v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  const char *v186;
  __int16 v187;
  char *v188;
  char *v189;
  __int128 v190;
  int8x16_t v191;
  __int128 v192;
  __int128 v193;
  char *v194;
  char *v195;
  char *v196;
  unint64_t v197;
  BOOL v198;
  uint64_t v199;
  unint64_t v200;
  char *v201;
  const char *v202;
  __int16 v203;
  const char *v204;
  WTF::StringImpl *v205;
  uint8x8_t *v206;
  uint16x8_t *v207;
  unint64_t v208;
  uint8x16_t v209;
  uint16x8_t v210;
  uint16x8_t v211;
  uint8x8_t *v212;
  uint16x8_t *v213;
  unint64_t v214;
  uint8x8_t v215;
  uint8x8_t *v216;
  uint16x8_t *v217;
  unint64_t v218;
  uint8x16_t v219;
  uint16x8_t v220;
  uint16x8_t v221;
  uint8x8_t *v222;
  uint16x8_t *v223;
  unint64_t v224;
  uint8x8_t v225;
  uint8x8_t *v226;
  uint16x8_t *v227;
  unint64_t v228;
  uint8x16_t v229;
  uint16x8_t v230;
  uint16x8_t v231;
  uint8x8_t *v232;
  uint16x8_t *v233;
  unint64_t v234;
  uint8x8_t v235;
  char *v236;
  char *v237;
  unint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  const char *v256;
  uint8x8_t *v257;
  uint16x8_t *v258;
  unint64_t v259;
  uint8x16_t v260;
  uint16x8_t v261;
  uint16x8_t v262;
  uint8x8_t *v263;
  uint16x8_t *v264;
  unint64_t v265;
  uint8x8_t v266;
  int8x16_t *v267;
  int8x16_t *v268;
  unint64_t v269;
  int8x16_t v270;
  int8x16_t v271;
  int8x16_t v272;
  int8x16_t v273;
  int16x8_t *v274;
  int8x8_t *v275;
  unint64_t v276;
  int16x8_t v277;
  WTF::StringImpl *v278;
  uint64_t v279;
  unsigned int v280;
  unsigned int v281;
  uint64_t v282;
  unsigned int v283;
  unsigned int v284;
  unint64_t v285;
  WTF::StringImpl *v286;
  _QWORD v287[2];
  WTF::StringImpl *v288;
  WTF::StringImpl *v289;
  int8x16x2_t v290;
  int8x16x2_t v291;
  int8x16x2_t v292;
  int8x16x2_t v293;
  int8x16x2_t v294;
  int8x16x2_t v295;
  int8x16x2_t v296;
  int8x16x2_t v297;
  int8x16x2_t v298;
  int8x16x2_t v299;
  int8x16x2_t v300;
  int8x16x2_t v301;
  int8x16x2_t v302;
  int8x16x2_t v303;
  int8x16x2_t v304;

  v287[0] = a2;
  v287[1] = a3;
  v5 = *((_DWORD *)a1 + 2);
  if ((v5 & 1) == 0)
    return;
  v6 = a3;
  v7 = a1;
  v8 = *((unsigned int *)a1 + 4);
  v9 = a3;
  if (!(_DWORD)a3)
  {
    if ((_DWORD)v8 == *((_DWORD *)a1 + 5) && (_DWORD)v8 != *((_DWORD *)a1 + 6))
    {
      v23 = *a1;
      if (*a1)
      {
        if (*(_DWORD *)(v23 + 4) > v8)
        {
          v24 = *(_QWORD *)(v23 + 8);
          v25 = (*(_BYTE *)(v23 + 16) & 4) != 0 ? *(unsigned __int8 *)(v24 + v8) : *(unsigned __int16 *)(v24 + 2 * v8);
          if (v25 == 64)
            LODWORD(v8) = v8 + 1;
        }
      }
    }
    v98 = (const WTF::String *)*((unsigned int *)a1 + 3);
    if ((_DWORD)v8 != (_DWORD)v98)
    {
      v288 = (WTF::StringImpl *)*a1;
      v99 = v288;
      *a1 = 0;
      WTF::makeStringByRemoving((uint64_t)&v288, v98, v8 - (_DWORD)v98, (int **)&v289);
      if (v99)
      {
        if (*(_DWORD *)v99 == 2)
        {
          WTF::StringImpl::~StringImpl(v99, v100, v101, v102, v103, v104, v105, v106);
          WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
        }
        else
        {
          *(_DWORD *)v99 -= 2;
        }
      }
      WTF::URL::parse((uint64_t)v7);
      v122 = v289;
      v289 = 0;
      if (v122)
        goto LABEL_285;
    }
    return;
  }
  v11 = *((unsigned int *)a1 + 3);
  v12 = v5 >> 6;
  if ((_DWORD)v8 != *((_DWORD *)a1 + 6))
  {
    v13 = *a1;
    if ((_DWORD)v8 == *((_DWORD *)a1 + 5))
    {
      if (v13 && *(_DWORD *)(v13 + 4) > v8)
      {
        v26 = *(_QWORD *)(v13 + 8);
        if ((*(_BYTE *)(v13 + 16) & 4) != 0)
          v14 = *(unsigned __int8 *)(v26 + v8) != 64;
        else
          v14 = *(unsigned __int16 *)(v26 + 2 * v8) != 64;
        v15 = v12 + 1;
        v16 = "";
        goto LABEL_5;
      }
      v14 = 1;
      v15 = v12 + 1;
      v16 = "";
      if (!v13)
        goto LABEL_25;
    }
    else
    {
      v14 = 0;
      v15 = v12 + 1;
      v16 = "";
      if (!v13)
        goto LABEL_25;
    }
LABEL_5:
    v17 = *(unsigned int *)(v13 + 4);
    if ((_DWORD)v17)
    {
      v18 = *(const char **)(v13 + 8);
      v19 = (*(_DWORD *)(v13 + 16) >> 2) & 1;
      v20 = v17 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v19 & 1) << 32);
      v21 = (v19 << 32) | v11;
      if (v17 > v11)
        v22 = v21;
      else
        v22 = v20;
    }
    else
    {
      v22 = 0x100000000;
      v18 = "";
    }
    goto LABEL_26;
  }
  v13 = *a1;
  v14 = 1;
  v15 = v12 + 1;
  v16 = "";
  if (*a1)
    goto LABEL_5;
LABEL_25:
  v22 = 0x100000000;
  v18 = "";
LABEL_26:
  if ((_DWORD)v11 == v15)
    v27 = "//";
  else
    v27 = "";
  if ((_DWORD)v11 == v15)
    v28 = 3;
  else
    v28 = 1;
  v289 = (WTF::StringImpl *)WTF::URLParser::isInUserInfoEncodeSet;
  v279 = v28;
  v29 = a3;
  v30 = a2;
  if ((a3 & 0xFF00000000) != 0)
  {
    do
    {
      if (!v29)
        goto LABEL_289;
      v31 = *v30;
      if (v31 > 0x7E || (WTF::characterClassTable[v31] & 1) != 0)
        goto LABEL_290;
      ++v30;
      --v29;
    }
    while (v29);
  }
  else
  {
    do
    {
      if (!v29)
        goto LABEL_289;
      v32 = *(unsigned __int16 *)v30;
      if (v32 > 0x7E || (WTF::characterClassTable[v32] & 1) != 0)
        goto LABEL_290;
      v30 += 2;
      --v29;
    }
    while (v29);
  }
  if ((a3 & 0xFF00000000) != 0)
  {
    if (a2)
    {
      v282 = v22;
      if ((unint64_t)a3 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x197B2C0E8);
      }
      v34 = v14;
      v35 = WTF::fastCompactMalloc((WTF *)(a3 + 20));
      v36 = (unsigned __int8 *)(v35 + 20);
      *(_DWORD *)v35 = 2;
      *(_DWORD *)(v35 + 4) = v6;
      *(_QWORD *)(v35 + 8) = v35 + 20;
      *(_DWORD *)(v35 + 16) = 4;
      if (v9 == 1)
        *v36 = *a2;
      else
        memcpy(v36, a2, v9);
      v14 = v34;
      v7 = a1;
      v22 = v282;
LABEL_56:
      v16 = "";
      goto LABEL_57;
    }
  }
  else if (a2)
  {
    v283 = v14;
    if (a3 >= 0x7FFFFFF0uLL)
    {
      __break(0xC471u);
      JUMPOUT(0x197B2B3E8);
    }
    v35 = WTF::fastCompactMalloc((WTF *)(2 * a3 + 20));
    v37 = (_WORD *)(v35 + 20);
    *(_DWORD *)v35 = 2;
    *(_DWORD *)(v35 + 4) = v6;
    *(_QWORD *)(v35 + 8) = v35 + 20;
    *(_DWORD *)(v35 + 16) = 0;
    if (v9 == 1)
      *v37 = *(_WORD *)a2;
    else
      memcpy(v37, a2, 2 * v9);
    v14 = v283;
    goto LABEL_56;
  }
  v35 = 0;
LABEL_57:
  v286 = (WTF::StringImpl *)v35;
  while (1)
  {
    if ((_DWORD)v14)
      v38 = "@";
    else
      v38 = v16;
    v39 = 1;
    if ((_DWORD)v14)
      v39 = 2;
    v40 = *v7;
    if (!*v7
      || (v41 = *(const char **)(v40 + 8),
          v42 = *(unsigned int *)(v40 + 4) | ((unint64_t)((*(_DWORD *)(v40 + 16) >> 2) & 1) << 32),
          v43 = (v42 - v8),
          v42 <= v8))
    {
      v43 = 0x100000000;
      v41 = "";
      v45 = v28 - 1;
      goto LABEL_70;
    }
    if (!(_DWORD)v8)
    {
      v43 = v42;
      v45 = v28 - 1;
      goto LABEL_70;
    }
    v44 = v42 - v8;
    if ((v42 & 0x100000000) == 0)
      break;
    if (v44 >= v43)
    {
      v41 += v8;
      v43 |= 0x100000000uLL;
      v45 = v28 - 1;
      goto LABEL_70;
    }
LABEL_289:
    __break(1u);
LABEL_290:
    v254 = v7;
    v255 = v14;
    v256 = v16;
    WTF::percentEncodeCharacters<WTF::StringView>(WTF::StringView const&,BOOL (*)(char16_t))::{lambda(WTF::StringView const&)#1}::operator()(&v286, (unsigned int (**)(_QWORD))&v289, (uint64_t)v287, a4, a5);
    v16 = v256;
    v14 = v255;
    v7 = v254;
  }
  if (v44 < v43)
    goto LABEL_289;
  v41 += 2 * v8;
  v45 = v28 - 1;
LABEL_70:
  v74 = v39 != 0;
  v46 = v39 - 1;
  if (v74)
    v47 = v46;
  else
    v47 = 0;
  if (v47 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x197B2C0D8);
  }
  v48 = v286;
  if (!v286)
  {
    v49 = 0;
    if (((v43 | v47) & 0x80000000) == 0)
      goto LABEL_78;
    goto LABEL_314;
  }
  v49 = *((_DWORD *)v286 + 1);
  if (((v43 | v47) & 0x80000000) != 0)
    goto LABEL_314;
LABEL_78:
  v50 = v47 + v43;
  if (__OFADD__((_DWORD)v47, (_DWORD)v43)
    || v49 < 0
    || (v51 = __OFADD__(v49, v50), v52 = v49 + v50, v51)
    || ((v51 = __OFADD__((_DWORD)v45, v52), v53 = v45 + v52, !v51) ? (v54 = 0) : (v54 = 1),
        (v22 & 0x80000000) != 0 || (v54 & 1) != 0 || (v55 = (v22 + v53), __OFADD__((_DWORD)v22, v53))))
  {
LABEL_314:
    __break(0xC471u);
    JUMPOUT(0x197B2C0E0);
  }
  if ((v22 & 0x100000000) == 0 || v286 && (*((_BYTE *)v286 + 16) & 4) == 0 || (v43 & 0x100000000) == 0)
  {
    if (!(_DWORD)v55)
      goto LABEL_105;
    if (v55 <= 0x7FFFFFEF)
    {
      v281 = v47;
      v285 = v43;
      WTF::tryFastCompactMalloc((WTF *)(2 * v55 + 20), &v289);
      v61 = v281;
      v60 = v285;
      v58 = v289;
      if (v289)
      {
        v62 = (_WORD *)((char *)v289 + 20);
        *(_DWORD *)v289 = 2;
        *((_DWORD *)v58 + 1) = v55;
        *((_QWORD *)v58 + 1) = (char *)v58 + 20;
        *((_DWORD *)v58 + 4) = 0;
        if ((v22 & 0x100000000) != 0)
        {
          v63 = &v62[v22];
          if (v22 < 0x40)
          {
            v64 = (unint64_t)v58 + 20;
          }
          else
          {
            v64 = (unint64_t)&v62[v22 & 0xFFFFFFC0];
            v65 = 0uLL;
            v66 = (char *)v58 + 20;
            do
            {
              v290.val[0] = *(int8x16_t *)v18;
              v67 = *((int8x16_t *)v18 + 1);
              v295.val[0] = (int8x16_t)*((_OWORD *)v18 + 2);
              v68 = *((_OWORD *)v18 + 3);
              v18 += 64;
              v69 = v68;
              v295.val[1] = 0uLL;
              v300.val[0] = v67;
              v290.val[1] = 0uLL;
              v70 = v66;
              vst2q_s8(v70, v290);
              v70 += 32;
              v300.val[1] = 0uLL;
              vst2q_s8(v70, v300);
              v71 = v66 + 64;
              vst2q_s8(v71, v295);
              v72 = v66 + 96;
              vst2q_s8(v72, *(int8x16x2_t *)(&v65 - 1));
              v66 += 128;
            }
            while (v66 != (char *)v64);
          }
          if ((_WORD *)v64 != v63)
          {
            v73 = (unint64_t)v58 + 2 * v22 - v64 + 18;
            if (v73 < 0xE
              || (v64 < (unint64_t)&v18[(v73 >> 1) + 1]
                ? (v74 = (unint64_t)v18 >= (v73 & 0xFFFFFFFFFFFFFFFELL) + v64 + 2)
                : (v74 = 1),
                  !v74))
            {
              v77 = (_WORD *)v64;
              v78 = v18;
              goto LABEL_121;
            }
            v75 = (v73 >> 1) + 1;
            if (v73 >= 0x3E)
            {
              v76 = v75 & 0xFFFFFFFFFFFFFFE0;
              v123 = (uint8x8_t *)(v18 + 16);
              v124 = (uint16x8_t *)(v64 + 32);
              v125 = v75 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v126 = *(uint8x16_t *)v123[-2].i8;
                v127 = vmovl_u8(*v123);
                v128 = vmovl_high_u8(*(uint8x16_t *)v123->i8);
                v124[-2] = vmovl_u8(*(uint8x8_t *)v126.i8);
                v124[-1] = vmovl_high_u8(v126);
                *v124 = v127;
                v124[1] = v128;
                v124 += 4;
                v123 += 4;
                v125 -= 32;
              }
              while (v125);
              if (v75 == v76)
                goto LABEL_172;
              if ((v75 & 0x18) == 0)
              {
                v78 = &v18[v76];
                v77 = (_WORD *)(v64 + 2 * v76);
                do
                {
LABEL_121:
                  v79 = *(unsigned __int8 *)v78++;
                  *v77++ = v79;
                }
                while (v77 != v63);
                goto LABEL_172;
              }
            }
            else
            {
              v76 = 0;
            }
            v77 = (_WORD *)(v64 + 2 * (v75 & 0xFFFFFFFFFFFFFFF8));
            v78 = &v18[v75 & 0xFFFFFFFFFFFFFFF8];
            v129 = (uint8x8_t *)&v18[v76];
            v130 = (uint16x8_t *)(v64 + 2 * v76);
            v131 = v76 - (v75 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v132 = *v129++;
              *v130++ = vmovl_u8(v132);
              v131 += 8;
            }
            while (v131);
            if (v75 != (v75 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_121;
          }
        }
        else if ((_DWORD)v22)
        {
          if ((_DWORD)v22 == 1)
          {
            *v62 = *(_WORD *)v18;
          }
          else
          {
            v80 = v18;
            v81 = v58;
            memcpy((char *)v58 + 20, v80, 2 * v22);
            v61 = v281;
            v60 = v285;
            v58 = v81;
          }
        }
LABEL_172:
        v133 = (unint64_t)&v62[v22];
        v134 = (_WORD *)(v133 + 2 * v45);
        if ((v45 & 0xFFFFFFC0) != 0)
        {
          v135 = v133 + 2 * (v45 & 0xFFFFFFC0);
          v136 = 0uLL;
          do
          {
            v291.val[0] = *(int8x16_t *)v27;
            v137 = *((int8x16_t *)v27 + 1);
            v296.val[0] = (int8x16_t)*((_OWORD *)v27 + 2);
            v138 = *((_OWORD *)v27 + 3);
            v27 += 64;
            v139 = v138;
            v296.val[1] = 0uLL;
            v301.val[0] = v137;
            v291.val[1] = 0uLL;
            v140 = (char *)v133;
            vst2q_s8(v140, v291);
            v140 += 32;
            v301.val[1] = 0uLL;
            vst2q_s8(v140, v301);
            v141 = (char *)(v133 + 64);
            vst2q_s8(v141, v296);
            v142 = (char *)(v133 + 96);
            vst2q_s8(v142, *(int8x16x2_t *)(&v136 - 1));
            v133 += 128;
          }
          while (v133 != v135);
          v133 = v135;
        }
        if ((_WORD *)v133 != v134)
        {
          v143 = (unint64_t)v58 + 2 * v45 + 2 * (unint64_t)v22 - v133 + 18;
          if (v143 < 0xE
            || v133 < (unint64_t)&v27[(v143 >> 1) + 1]
            && (unint64_t)v27 < (v143 & 0xFFFFFFFFFFFFFFFELL) + v133 + 2)
          {
            v144 = (_WORD *)v133;
            v145 = v27;
            goto LABEL_181;
          }
          v160 = (v143 >> 1) + 1;
          if (v143 >= 0x3E)
          {
            v161 = v160 & 0xFFFFFFFFFFFFFFE0;
            v206 = (uint8x8_t *)(v27 + 16);
            v207 = (uint16x8_t *)(v133 + 32);
            v208 = v160 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v209 = *(uint8x16_t *)v206[-2].i8;
              v210 = vmovl_u8(*v206);
              v211 = vmovl_high_u8(*(uint8x16_t *)v206->i8);
              v207[-2] = vmovl_u8(*(uint8x8_t *)v209.i8);
              v207[-1] = vmovl_high_u8(v209);
              *v207 = v210;
              v207[1] = v211;
              v207 += 4;
              v206 += 4;
              v208 -= 32;
            }
            while (v208);
            if (v160 == v161)
              goto LABEL_182;
            if ((v160 & 0x18) == 0)
            {
              v145 = &v27[v161];
              v144 = (_WORD *)(v133 + 2 * v161);
              do
              {
LABEL_181:
                v146 = *(unsigned __int8 *)v145++;
                *v144++ = v146;
              }
              while (v144 != v134);
              goto LABEL_182;
            }
          }
          else
          {
            v161 = 0;
          }
          v144 = (_WORD *)(v133 + 2 * (v160 & 0xFFFFFFFFFFFFFFF8));
          v145 = &v27[v160 & 0xFFFFFFFFFFFFFFF8];
          v212 = (uint8x8_t *)&v27[v161];
          v213 = (uint16x8_t *)(v133 + 2 * v161);
          v214 = v161 - (v160 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v215 = *v212++;
            *v213++ = vmovl_u8(v215);
            v214 += 8;
          }
          while (v214);
          if (v160 != (v160 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_181;
        }
LABEL_182:
        if (!v48)
        {
          v149 = 0;
          goto LABEL_209;
        }
        v147 = (int8x16_t *)*((_QWORD *)v48 + 1);
        v148 = *((unsigned int *)v48 + 1);
        if ((*((_BYTE *)v48 + 16) & 4) == 0)
        {
          if ((_DWORD)v148)
          {
            if ((_DWORD)v148 == 1)
            {
              *v134 = v147->i16[0];
            }
            else
            {
              v169 = v58;
              memcpy(v134, v147, 2 * v148);
              v61 = v281;
              v60 = v285;
              v58 = v169;
            }
          }
          goto LABEL_208;
        }
        v150 = &v134[v148];
        if (v148 < 0x40)
        {
          v151 = (unint64_t)v134;
        }
        else
        {
          v151 = (unint64_t)&v134[v148 & 0xFFFFFFC0];
          v152 = 0uLL;
          v153 = (char *)v134;
          do
          {
            v292.val[0] = *v147;
            v154 = v147[1];
            v297.val[0] = v147[2];
            v155 = v147[3];
            v147 += 4;
            v156 = v155;
            v297.val[1] = 0uLL;
            v302.val[0] = v154;
            v292.val[1] = 0uLL;
            v157 = v153;
            vst2q_s8(v157, v292);
            v157 += 32;
            v302.val[1] = 0uLL;
            vst2q_s8(v157, v302);
            v158 = v153 + 64;
            vst2q_s8(v158, v297);
            v159 = v153 + 96;
            vst2q_s8(v159, *(int8x16x2_t *)(&v152 - 1));
            v153 += 128;
          }
          while (v153 != (char *)v151);
        }
        if ((_WORD *)v151 == v150)
        {
LABEL_208:
          v149 = *((unsigned int *)v48 + 1);
LABEL_209:
          v170 = (unint64_t)&v134[v149];
          v171 = (char *)(v170 + 2 * v61);
          if ((v61 & 0xFFFFFFC0) != 0)
          {
            v172 = v170 + 2 * (v61 & 0xFFFFFFC0);
            v173 = 0uLL;
            do
            {
              v293.val[0] = *(int8x16_t *)v38;
              v174 = *((int8x16_t *)v38 + 1);
              v298.val[0] = (int8x16_t)*((_OWORD *)v38 + 2);
              v175 = *((_OWORD *)v38 + 3);
              v38 += 64;
              v176 = v175;
              v298.val[1] = 0uLL;
              v303.val[0] = v174;
              v293.val[1] = 0uLL;
              v177 = (char *)v170;
              vst2q_s8(v177, v293);
              v177 += 32;
              v303.val[1] = 0uLL;
              vst2q_s8(v177, v303);
              v178 = (char *)(v170 + 64);
              vst2q_s8(v178, v298);
              v179 = (char *)(v170 + 96);
              vst2q_s8(v179, *(int8x16x2_t *)(&v173 - 1));
              v170 += 128;
            }
            while (v170 != v172);
            v170 = v172;
          }
          v180 = v61;
          if ((char *)v170 != v171)
          {
            v181 = (unint64_t)v58
                 + 2 * v149
                 + 2 * v45
                 + 2 * v61
                 + 2 * v22
                 - v170
                 + 18;
            if (v181 < 0xE
              || (v170 < (unint64_t)&v38[(v181 >> 1) + 1]
                ? (v182 = (unint64_t)v38 >= (v181 & 0xFFFFFFFFFFFFFFFELL) + v170 + 2)
                : (v182 = 1),
                  !v182))
            {
              v185 = (char *)v170;
              v186 = v38;
              goto LABEL_223;
            }
            v183 = (v181 >> 1) + 1;
            if (v181 >= 0x3E)
            {
              v184 = v183 & 0xFFFFFFFFFFFFFFE0;
              v216 = (uint8x8_t *)(v38 + 16);
              v217 = (uint16x8_t *)(v170 + 32);
              v218 = v183 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v219 = *(uint8x16_t *)v216[-2].i8;
                v220 = vmovl_u8(*v216);
                v221 = vmovl_high_u8(*(uint8x16_t *)v216->i8);
                v217[-2] = vmovl_u8(*(uint8x8_t *)v219.i8);
                v217[-1] = vmovl_high_u8(v219);
                *v217 = v220;
                v217[1] = v221;
                v217 += 4;
                v216 += 4;
                v218 -= 32;
              }
              while (v218);
              if (v183 == v184)
                goto LABEL_224;
              if ((v183 & 0x18) == 0)
              {
                v186 = &v38[v184];
                v185 = (char *)(v170 + 2 * v184);
                do
                {
LABEL_223:
                  v187 = *(unsigned __int8 *)v186++;
                  *(_WORD *)v185 = v187;
                  v185 += 2;
                }
                while (v185 != v171);
                goto LABEL_224;
              }
            }
            else
            {
              v184 = 0;
            }
            v185 = (char *)(v170 + 2 * (v183 & 0xFFFFFFFFFFFFFFF8));
            v186 = &v38[v183 & 0xFFFFFFFFFFFFFFF8];
            v222 = (uint8x8_t *)&v38[v184];
            v223 = (uint16x8_t *)(v170 + 2 * v184);
            v224 = v184 - (v183 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v225 = *v222++;
              *v223++ = vmovl_u8(v225);
              v224 += 8;
            }
            while (v224);
            if (v183 != (v183 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_223;
          }
LABEL_224:
          if ((v60 & 0x100000000) == 0)
          {
            if ((_DWORD)v60)
            {
              if ((_DWORD)v60 == 1)
              {
                *(_WORD *)v171 = *(_WORD *)v41;
              }
              else
              {
                v204 = v41;
                v205 = v58;
                memcpy(v171, v204, 2 * v60);
                v58 = v205;
              }
            }
            goto LABEL_279;
          }
          v188 = &v171[2 * v60];
          if (v60 >= 0x40)
          {
            v189 = &v171[2 * (v60 & 0xFFFFFFC0)];
            v190 = 0uLL;
            do
            {
              v294.val[0] = *(int8x16_t *)v41;
              v191 = *((int8x16_t *)v41 + 1);
              v299.val[0] = (int8x16_t)*((_OWORD *)v41 + 2);
              v192 = *((_OWORD *)v41 + 3);
              v41 += 64;
              v193 = v192;
              v299.val[1] = 0uLL;
              v304.val[0] = v191;
              v294.val[1] = 0uLL;
              v194 = v171;
              vst2q_s8(v194, v294);
              v194 += 32;
              v304.val[1] = 0uLL;
              vst2q_s8(v194, v304);
              v195 = v171 + 64;
              vst2q_s8(v195, v299);
              v196 = v171 + 96;
              vst2q_s8(v196, *(int8x16x2_t *)(&v190 - 1));
              v171 += 128;
            }
            while (v171 != v189);
            v171 = v189;
          }
          if (v171 == v188)
            goto LABEL_279;
          v197 = (WTF::StringImpl *)((char *)v58
                                   + 2 * v149
                                   + 2 * v45
                                   + 2 * v180
                                   + 2 * v22
                                   + 2 * (unint64_t)v60)
               - (WTF::StringImpl *)v171
               + 18;
          if (v197 < 0xE
            || (v171 < &v41[(v197 >> 1) + 1] ? (v198 = v41 >= &v171[(v197 & 0xFFFFFFFFFFFFFFFELL) + 2]) : (v198 = 1),
                !v198))
          {
            v201 = v171;
            v202 = v41;
            goto LABEL_242;
          }
          v199 = (v197 >> 1) + 1;
          if (v197 >= 0x3E)
          {
            v200 = v199 & 0xFFFFFFFFFFFFFFE0;
            v226 = (uint8x8_t *)(v41 + 16);
            v227 = (uint16x8_t *)(v171 + 32);
            v228 = v199 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v229 = *(uint8x16_t *)v226[-2].i8;
              v230 = vmovl_u8(*v226);
              v231 = vmovl_high_u8(*(uint8x16_t *)v226->i8);
              v227[-2] = vmovl_u8(*(uint8x8_t *)v229.i8);
              v227[-1] = vmovl_high_u8(v229);
              *v227 = v230;
              v227[1] = v231;
              v227 += 4;
              v226 += 4;
              v228 -= 32;
            }
            while (v228);
            if (v199 == v200)
              goto LABEL_279;
            if ((v199 & 0x18) == 0)
            {
              v202 = &v41[v200];
              v201 = &v171[2 * v200];
              goto LABEL_242;
            }
          }
          else
          {
            v200 = 0;
          }
          v201 = &v171[2 * (v199 & 0xFFFFFFFFFFFFFFF8)];
          v202 = &v41[v199 & 0xFFFFFFFFFFFFFFF8];
          v232 = (uint8x8_t *)&v41[v200];
          v233 = (uint16x8_t *)&v171[2 * v200];
          v234 = v200 - (v199 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v235 = *v232++;
            *v233++ = vmovl_u8(v235);
            v234 += 8;
          }
          while (v234);
          if (v199 == (v199 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_279;
          do
          {
LABEL_242:
            v203 = *(unsigned __int8 *)v202++;
            *(_WORD *)v201 = v203;
            v201 += 2;
          }
          while (v201 != v188);
          goto LABEL_279;
        }
        v162 = (unint64_t)v58 + 2 * v45 + 2 * v148 + 2 * v22 - v151 + 18;
        if (v162 < 0xE
          || (v151 < (unint64_t)v147->u64 + (v162 >> 1) + 1
            ? (v163 = (unint64_t)v147 >= (v162 & 0xFFFFFFFFFFFFFFFELL) + v151 + 2)
            : (v163 = 1),
              !v163))
        {
          v166 = (_WORD *)v151;
          v167 = v147;
          goto LABEL_205;
        }
        v164 = (v162 >> 1) + 1;
        if (v162 >= 0x3E)
        {
          v165 = v164 & 0xFFFFFFFFFFFFFFE0;
          v257 = (uint8x8_t *)&v147[1];
          v258 = (uint16x8_t *)(v151 + 32);
          v259 = v164 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v260 = *(uint8x16_t *)v257[-2].i8;
            v261 = vmovl_u8(*v257);
            v262 = vmovl_high_u8(*(uint8x16_t *)v257->i8);
            v258[-2] = vmovl_u8(*(uint8x8_t *)v260.i8);
            v258[-1] = vmovl_high_u8(v260);
            *v258 = v261;
            v258[1] = v262;
            v258 += 4;
            v257 += 4;
            v259 -= 32;
          }
          while (v259);
          if (v164 == v165)
            goto LABEL_208;
          if ((v164 & 0x18) == 0)
          {
            v167 = (int8x16_t *)((char *)v147 + v165);
            v166 = (_WORD *)(v151 + 2 * v165);
            do
            {
LABEL_205:
              v168 = v167->u8[0];
              v167 = (int8x16_t *)((char *)v167 + 1);
              *v166++ = v168;
            }
            while (v166 != v150);
            goto LABEL_208;
          }
        }
        else
        {
          v165 = 0;
        }
        v166 = (_WORD *)(v151 + 2 * (v164 & 0xFFFFFFFFFFFFFFF8));
        v167 = (int8x16_t *)((char *)v147 + (v164 & 0xFFFFFFFFFFFFFFF8));
        v263 = (uint8x8_t *)&v147->i8[v165];
        v264 = (uint16x8_t *)(v151 + 2 * v165);
        v265 = v165 - (v164 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v266 = *v263++;
          *v264++ = vmovl_u8(v266);
          v265 += 8;
        }
        while (v265);
        if (v164 == (v164 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_208;
        goto LABEL_205;
      }
    }
    goto LABEL_314;
  }
  if (!(_DWORD)v55)
  {
LABEL_105:
    v58 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_279;
  }
  if ((v55 & 0x80000000) != 0)
    goto LABEL_314;
  v280 = v47;
  v284 = v43;
  WTF::tryFastCompactMalloc((WTF *)(v55 + 20), &v289);
  v56 = v280;
  v57 = v284;
  v58 = v289;
  if (!v289)
    goto LABEL_314;
  v59 = (char *)v289 + 20;
  *(_DWORD *)v289 = 2;
  *((_DWORD *)v58 + 1) = v55;
  *((_QWORD *)v58 + 1) = (char *)v58 + 20;
  *((_DWORD *)v58 + 4) = 4;
  v278 = v58;
  if ((_DWORD)v22)
  {
    if ((_DWORD)v22 == 1)
    {
      *v59 = *v18;
    }
    else
    {
      memcpy((char *)v58 + 20, v18, v22);
      v56 = v280;
      v57 = v284;
      v58 = v278;
    }
  }
  v82 = &v59[v22];
  if ((_DWORD)v45)
  {
    if ((_DWORD)v45 == 1)
    {
      *v82 = *v27;
    }
    else
    {
      memcpy(&v59[v22], v27, v45);
      v56 = v280;
      v57 = v284;
      v58 = v278;
    }
  }
  v83 = &v82[v45];
  if (v48)
  {
    v84 = (int8x16_t *)*((_QWORD *)v48 + 1);
    v85 = *((unsigned int *)v48 + 1);
    if ((*((_BYTE *)v48 + 16) & 4) != 0)
    {
      if ((_DWORD)v85)
      {
        if ((_DWORD)v85 == 1)
        {
          *v83 = v84->i8[0];
        }
        else
        {
          memcpy(&v82[v45], v84, v85);
          v56 = v280;
          v57 = v284;
          v58 = v278;
        }
      }
    }
    else
    {
      v86 = &v83[v85];
      if (v85 < 0x10)
      {
        v87 = (unint64_t)&v82[v45];
      }
      else
      {
        v87 = (unint64_t)&v83[v85 & 0xFFFFFFF0];
        v88 = (unsigned __int128 *)&v82[v45];
        do
        {
          v89 = (unsigned __int128)vld2q_s8(v84->i8);
          v84 += 2;
          *v88++ = v89;
        }
        while (v88 != (unsigned __int128 *)v87);
      }
      if ((char *)v87 != v86)
      {
        v91 = (char *)v58 + v279 + v85 + v22;
        v92 = (unint64_t)&v91[-v87 - (v279 != 0) + 20];
        if (v92 < 8
          || (v87 < (unint64_t)v84[2].u64 + 2 * (_QWORD)v91 + -2 * v87 + 6
            ? (v93 = v84 >= (int8x16_t *)&v91[-(v279 != 0) + 20])
            : (v93 = 1),
              !v93))
        {
          v95 = (char *)v87;
          v96 = v84;
          goto LABEL_153;
        }
        if (v92 >= 0x20)
        {
          v94 = v92 & 0xFFFFFFFFFFFFFFE0;
          v267 = v84 + 2;
          v268 = (int8x16_t *)(v87 + 16);
          v269 = v92 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v271 = v267[-2];
            v270 = v267[-1];
            v273 = *v267;
            v272 = v267[1];
            v267 += 4;
            v268[-1] = vuzp1q_s8(v271, v270);
            *v268 = vuzp1q_s8(v273, v272);
            v268 += 2;
            v269 -= 32;
          }
          while (v269);
          if (v92 != v94)
          {
            if ((v92 & 0x18) == 0)
            {
              v96 = (int8x16_t *)((char *)v84 + 2 * v94);
              v95 = (char *)(v87 + v94);
              goto LABEL_153;
            }
            goto LABEL_307;
          }
        }
        else
        {
          v94 = 0;
LABEL_307:
          v95 = (char *)(v87 + (v92 & 0xFFFFFFFFFFFFFFF8));
          v96 = (int8x16_t *)((char *)v84 + 2 * (v92 & 0xFFFFFFFFFFFFFFF8));
          v274 = (int16x8_t *)((char *)v84 + 2 * v94);
          v275 = (int8x8_t *)(v87 + v94);
          v276 = v94 - (v92 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v277 = *v274++;
            *v275++ = vmovn_s16(v277);
            v276 += 8;
          }
          while (v276);
          if (v92 != (v92 & 0xFFFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_153:
              v97 = v96->i8[0];
              v96 = (int8x16_t *)((char *)v96 + 2);
              *v95++ = v97;
            }
            while (v95 != v86);
          }
        }
      }
    }
    v90 = *((unsigned int *)v48 + 1);
  }
  else
  {
    v90 = 0;
  }
  v236 = &v83[v90];
  if (v56)
  {
    if (v56 == 1)
    {
      *v236 = *v38;
    }
    else
    {
      memcpy(v236, v38, v56);
      v56 = v280;
      v57 = v284;
      v58 = v278;
    }
  }
  if (v57)
  {
    v237 = &v236[v56];
    if (v57 == 1)
    {
      *v237 = *v41;
    }
    else
    {
      memcpy(v237, v41, v57);
      v58 = v278;
    }
  }
LABEL_279:
  v289 = v58;
  WTF::URL::parse((uint64_t)v7);
  if (v289)
  {
    if (*(_DWORD *)v289 != 2)
    {
      *(_DWORD *)v289 -= 2;
      goto LABEL_282;
    }
    WTF::StringImpl::~StringImpl(v289, v115, v116, v117, v118, v119, v120, v121);
    WTF::fastFree(v238, v239, v240, v241, v242, v243, v244, v245);
    v122 = v286;
    if (v286)
    {
LABEL_285:
      if (*(_DWORD *)v122 == 2)
      {
        WTF::StringImpl::~StringImpl(v122, v115, v116, v117, v118, v119, v120, v121);
        WTF::fastFree(v246, v247, v248, v249, v250, v251, v252, v253);
      }
      else
      {
        *(_DWORD *)v122 -= 2;
      }
    }
  }
  else
  {
LABEL_282:
    v122 = v286;
    if (v286)
      goto LABEL_285;
  }
}

void WTF::URL::setPassword(uint64_t a1, unsigned __int8 *a2, uint64_t a3, double a4, float a5)
{
  unsigned int v5;
  int v6;
  size_t v8;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  WTF::StringImpl *i;
  const WTF::String *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _WORD *v32;
  unint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  WTF::StringImpl *v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  size_t v64;
  WTF::StringImpl *v65;
  int v66;
  int v67;
  BOOL v68;
  int v69;
  int v70;
  char v71;
  uint64_t v72;
  unsigned int v73;
  WTF::StringImpl *v74;
  char *v75;
  unint64_t v76;
  _WORD *v77;
  _WORD *v78;
  unint64_t v79;
  __int128 v80;
  char *v81;
  int8x16_t v82;
  __int128 v83;
  __int128 v84;
  char *v85;
  char *v86;
  char *v87;
  unint64_t v88;
  BOOL v89;
  uint64_t v90;
  unint64_t v91;
  _WORD *v92;
  const char *v93;
  __int16 v94;
  char *v95;
  char *v96;
  int8x16_t *v97;
  size_t v98;
  char *v99;
  unint64_t v100;
  unsigned __int128 *v101;
  unsigned __int128 v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  BOOL v106;
  unint64_t v107;
  char *v108;
  int8x16_t *v109;
  char v110;
  uint8x8_t *v111;
  uint16x8_t *v112;
  unint64_t v113;
  uint8x16_t v114;
  uint16x8_t v115;
  uint16x8_t v116;
  uint8x8_t *v117;
  uint16x8_t *v118;
  unint64_t v119;
  uint8x8_t v120;
  unint64_t v121;
  char *v122;
  unint64_t v123;
  __int128 v124;
  int8x16_t v125;
  __int128 v126;
  __int128 v127;
  char *v128;
  char *v129;
  char *v130;
  unint64_t v131;
  char *v132;
  const char *v133;
  __int16 v134;
  int8x16_t *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  unint64_t v140;
  __int128 v141;
  char *v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  BOOL v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  int8x16_t *v156;
  __int16 v157;
  size_t v158;
  char *v159;
  char *v160;
  char *v161;
  __int128 v162;
  int8x16_t v163;
  __int128 v164;
  __int128 v165;
  char *v166;
  char *v167;
  char *v168;
  unint64_t v169;
  BOOL v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  const char *v174;
  __int16 v175;
  uint8x8_t *v176;
  uint16x8_t *v177;
  unint64_t v178;
  uint8x16_t v179;
  uint16x8_t v180;
  uint16x8_t v181;
  uint8x8_t *v182;
  uint16x8_t *v183;
  unint64_t v184;
  uint8x8_t v185;
  uint8x8_t *v186;
  uint16x8_t *v187;
  unint64_t v188;
  uint8x16_t v189;
  uint16x8_t v190;
  uint16x8_t v191;
  uint8x8_t *v192;
  uint16x8_t *v193;
  unint64_t v194;
  uint8x8_t v195;
  unint64_t v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint8x8_t *v212;
  uint16x8_t *v213;
  unint64_t v214;
  uint8x16_t v215;
  uint16x8_t v216;
  uint16x8_t v217;
  uint8x8_t *v218;
  uint16x8_t *v219;
  unint64_t v220;
  uint8x8_t v221;
  int8x16_t *v222;
  int8x16_t *v223;
  unint64_t v224;
  int8x16_t v225;
  int8x16_t v226;
  int8x16_t v227;
  int8x16_t v228;
  int16x8_t *v229;
  int8x8_t *v230;
  unint64_t v231;
  int16x8_t v232;
  uint64_t v233;
  unsigned int v234;
  unint64_t v235;
  WTF::StringImpl *v236;
  _QWORD v237[2];
  WTF::StringImpl *v238;
  WTF::StringImpl *v239;
  int8x16x2_t v240;
  int8x16x2_t v241;
  int8x16x2_t v242;
  int8x16x2_t v243;
  int8x16x2_t v244;
  int8x16x2_t v245;
  int8x16x2_t v246;
  int8x16x2_t v247;
  int8x16x2_t v248;
  int8x16x2_t v249;
  int8x16x2_t v250;
  int8x16x2_t v251;

  v237[0] = a2;
  v237[1] = a3;
  v5 = *(_DWORD *)(a1 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = a3;
    v8 = a3;
    if ((_DWORD)a3)
    {
      v10 = *(unsigned int *)(a1 + 16);
      v11 = (v5 >> 6) + 1;
      v12 = *(WTF::StringImpl **)a1;
      if (*(_QWORD *)a1 && (v13 = *((unsigned int *)v12 + 1), (_DWORD)v13))
      {
        v14 = (const char *)*((_QWORD *)v12 + 1);
        v15 = (*((_DWORD *)v12 + 4) >> 2) & 1;
        if (v13 > v10)
          v16 = (v15 << 32) | v10;
        else
          v16 = v13 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v15 & 1) << 32);
      }
      else
      {
        v16 = 0x100000000;
        v14 = "";
      }
      if ((_DWORD)v10 == v11)
        v17 = 4;
      else
        v17 = 2;
      if ((_DWORD)v10 == v11)
        v18 = "//:";
      else
        v18 = ":";
      v239 = (WTF::StringImpl *)WTF::URLParser::isInUserInfoEncodeSet;
      v19 = a3;
      v20 = a2;
      if ((a3 & 0xFF00000000) != 0)
      {
        do
        {
          if (!v19)
            goto LABEL_72;
          v21 = *v20;
          if (v21 > 0x7E || (WTF::characterClassTable[v21] & 1) != 0)
            goto LABEL_73;
          ++v20;
          --v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          if (!v19)
            goto LABEL_72;
          v22 = *(unsigned __int16 *)v20;
          if (v22 > 0x7E || (WTF::characterClassTable[v22] & 1) != 0)
            goto LABEL_73;
          v20 += 2;
          --v19;
        }
        while (v19);
      }
      if ((a3 & 0xFF00000000) != 0)
      {
        if (a2)
        {
          if ((unint64_t)a3 >> 31)
          {
            __break(0xC471u);
            JUMPOUT(0x197B2CE88);
          }
          v23 = WTF::fastCompactMalloc((WTF *)(a3 + 20));
          v24 = (unsigned __int8 *)(v23 + 20);
          *(_DWORD *)v23 = 2;
          *(_DWORD *)(v23 + 4) = v6;
          *(_QWORD *)(v23 + 8) = v23 + 20;
          *(_DWORD *)(v23 + 16) = 4;
          if (v8 == 1)
          {
            *v24 = *a2;
            v236 = (WTF::StringImpl *)v23;
            i = *(WTF::StringImpl **)a1;
            if (*(_QWORD *)a1)
              goto LABEL_47;
          }
          else
          {
            memcpy(v24, a2, v8);
            v236 = (WTF::StringImpl *)v23;
            i = *(WTF::StringImpl **)a1;
            if (*(_QWORD *)a1)
              goto LABEL_47;
          }
          goto LABEL_74;
        }
      }
      else if (a2)
      {
        if (a3 >= 0x7FFFFFF0uLL)
        {
          __break(0xC471u);
          JUMPOUT(0x197B2CE78);
        }
        v31 = WTF::fastCompactMalloc((WTF *)(2 * a3 + 20));
        v32 = (_WORD *)(v31 + 20);
        *(_DWORD *)v31 = 2;
        *(_DWORD *)(v31 + 4) = v6;
        *(_QWORD *)(v31 + 8) = v31 + 20;
        *(_DWORD *)(v31 + 16) = 0;
        if (v8 == 1)
        {
          *v32 = *(_WORD *)a2;
          v236 = (WTF::StringImpl *)v31;
          i = *(WTF::StringImpl **)a1;
          if (*(_QWORD *)a1)
            goto LABEL_47;
        }
        else
        {
          memcpy(v32, a2, 2 * v8);
          v236 = (WTF::StringImpl *)v31;
          for (i = *(WTF::StringImpl **)a1; *(_QWORD *)a1; i = *(WTF::StringImpl **)a1)
          {
LABEL_47:
            v33 = *((unsigned int *)i + 4);
            v34 = (const char *)*((_QWORD *)i + 1);
            v35 = *((unsigned int *)i + 1);
            v36 = *(unsigned int *)(a1 + 20);
            if ((_DWORD)v36 != *(_DWORD *)(a1 + 24) && v35 > v36)
            {
              v37 = (v33 & 4) != 0 ? v34[v36] : *(unsigned __int16 *)&v34[2 * v36];
              if (v37 == 64)
                LODWORD(v36) = v36 + 1;
            }
            if (v35 <= v36)
              break;
            if (!(_DWORD)v36)
            {
              v38 = v35 & 0xFFFFFFFEFFFFFFFFLL | (((v33 >> 2) & 1) << 32);
              goto LABEL_75;
            }
            v38 = (v35 - v36);
            v39 = v35 - v36;
            if (((v33 >> 2) & 1) != 0)
            {
              if (v39 >= v38)
              {
                v34 += v36;
                v38 |= 0x100000000uLL;
                goto LABEL_75;
              }
            }
            else if (v39 >= v38)
            {
              v34 += 2 * v36;
              goto LABEL_75;
            }
LABEL_72:
            __break(1u);
LABEL_73:
            WTF::percentEncodeCharacters<WTF::StringView>(WTF::StringView const&,BOOL (*)(char16_t))::{lambda(WTF::StringView const&)#1}::operator()(&v236, (unsigned int (**)(_QWORD))&v239, (uint64_t)v237, a4, a5);
          }
        }
LABEL_74:
        v38 = 0x100000000;
        v34 = "";
LABEL_75:
        v64 = v17 - 1;
        v233 = v17;
        v65 = v236;
        if (v236)
        {
          v66 = *((_DWORD *)v236 + 1);
          if ((v38 & 0x80000000) != 0)
            goto LABEL_270;
        }
        else
        {
          v66 = 0;
          if ((v38 & 0x80000000) != 0)
            goto LABEL_270;
        }
        v67 = v38 + 1;
        if (__OFADD__((_DWORD)v38, 1)
          || v66 < 0
          || (v68 = __OFADD__(v66, v67), v69 = v66 + v67, v68)
          || ((v68 = __OFADD__((_DWORD)v64, v69), v70 = v64 + v69, !v68) ? (v71 = 0) : (v71 = 1),
              (v16 & 0x80000000) != 0
           || (v71 & 1) != 0
           || (v72 = (v16 + v70), __OFADD__((_DWORD)v16, v70))))
        {
LABEL_270:
          __break(0xC471u);
          JUMPOUT(0x197B2CE80);
        }
        if ((v16 & 0x100000000) != 0 && (!v236 || (*((_BYTE *)v236 + 16) & 4) != 0) && (v38 & 0x100000000) != 0)
        {
          if ((_DWORD)v72)
          {
            if ((v72 & 0x80000000) == 0)
            {
              v234 = v38;
              WTF::tryFastCompactMalloc((WTF *)(v72 + 20), &v239);
              v73 = v234;
              v74 = v239;
              if (v239)
              {
                v75 = (char *)v239 + 20;
                *(_DWORD *)v239 = 2;
                *((_DWORD *)v74 + 1) = v72;
                *((_QWORD *)v74 + 1) = (char *)v74 + 20;
                *((_DWORD *)v74 + 4) = 4;
                if ((_DWORD)v16)
                {
                  if ((_DWORD)v16 == 1)
                  {
                    *v75 = *v14;
                  }
                  else
                  {
                    memcpy((char *)v74 + 20, v14, v16);
                    v73 = v234;
                  }
                }
                v95 = &v75[v16];
                if ((_DWORD)v64)
                {
                  if ((_DWORD)v64 == 1)
                  {
                    *v95 = *v18;
                  }
                  else
                  {
                    memcpy(&v75[v16], v18, v64);
                    v73 = v234;
                  }
                }
                v96 = &v95[v64];
                if (!v65)
                {
                  v103 = 0;
                  goto LABEL_234;
                }
                v97 = (int8x16_t *)*((_QWORD *)v65 + 1);
                v98 = *((unsigned int *)v65 + 1);
                if ((*((_BYTE *)v65 + 16) & 4) != 0)
                {
                  if ((_DWORD)v98)
                  {
                    if ((_DWORD)v98 == 1)
                    {
                      *v96 = v97->i8[0];
                    }
                    else
                    {
                      memcpy(&v95[v64], v97, v98);
                      v73 = v234;
                    }
                  }
                  goto LABEL_233;
                }
                v99 = &v96[v98];
                if (v98 < 0x10)
                {
                  v100 = (unint64_t)&v95[v64];
                }
                else
                {
                  v100 = (unint64_t)&v96[v98 & 0xFFFFFFF0];
                  v101 = (unsigned __int128 *)&v95[v64];
                  do
                  {
                    v102 = (unsigned __int128)vld2q_s8(v97->i8);
                    v97 += 2;
                    *v101++ = v102;
                  }
                  while (v101 != (unsigned __int128 *)v100);
                }
                if ((char *)v100 == v99)
                {
LABEL_233:
                  v103 = *((unsigned int *)v65 + 1);
LABEL_234:
                  v96[v103] = 64;
                  v138 = &v96[v103 + 1];
                  if (v73)
                  {
                    if (v73 == 1)
                    {
                      *v138 = *v34;
                      goto LABEL_239;
                    }
                    v158 = v73;
LABEL_238:
                    memcpy(v138, v34, v158);
                    goto LABEL_239;
                  }
                  goto LABEL_239;
                }
                v104 = (char *)v74 + v233 + v98 + v16;
                v105 = (unint64_t)&v104[-v100 - (v233 != 0) + 20];
                if (v105 < 8
                  || (v100 < (unint64_t)v97[2].u64 + 2 * (_QWORD)v104 + -2 * v100 + 6
                    ? (v106 = v97 >= (int8x16_t *)&v104[-(v233 != 0) + 20])
                    : (v106 = 1),
                      !v106))
                {
                  v108 = (char *)v100;
                  v109 = v97;
                  goto LABEL_150;
                }
                if (v105 >= 0x20)
                {
                  v107 = v105 & 0xFFFFFFFFFFFFFFE0;
                  v222 = v97 + 2;
                  v223 = (int8x16_t *)(v100 + 16);
                  v224 = v105 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v226 = v222[-2];
                    v225 = v222[-1];
                    v228 = *v222;
                    v227 = v222[1];
                    v222 += 4;
                    v223[-1] = vuzp1q_s8(v226, v225);
                    *v223 = vuzp1q_s8(v228, v227);
                    v223 += 2;
                    v224 -= 32;
                  }
                  while (v224);
                  if (v105 == v107)
                    goto LABEL_233;
                  if ((v105 & 0x18) == 0)
                  {
                    v109 = (int8x16_t *)((char *)v97 + 2 * v107);
                    v108 = (char *)(v100 + v107);
                    do
                    {
LABEL_150:
                      v110 = v109->i8[0];
                      v109 = (int8x16_t *)((char *)v109 + 2);
                      *v108++ = v110;
                    }
                    while (v108 != v99);
                    goto LABEL_233;
                  }
                }
                else
                {
                  v107 = 0;
                }
                v108 = (char *)(v100 + (v105 & 0xFFFFFFFFFFFFFFF8));
                v109 = (int8x16_t *)((char *)v97 + 2 * (v105 & 0xFFFFFFFFFFFFFFF8));
                v229 = (int16x8_t *)((char *)v97 + 2 * v107);
                v230 = (int8x8_t *)(v100 + v107);
                v231 = v107 - (v105 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v232 = *v229++;
                  *v230++ = vmovn_s16(v232);
                  v231 += 8;
                }
                while (v231);
                if (v105 == (v105 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_233;
                goto LABEL_150;
              }
            }
            goto LABEL_270;
          }
LABEL_106:
          v74 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
          goto LABEL_239;
        }
        if (!(_DWORD)v72)
          goto LABEL_106;
        if (v72 > 0x7FFFFFEF)
          goto LABEL_270;
        v235 = v38;
        WTF::tryFastCompactMalloc((WTF *)(2 * v72 + 20), &v239);
        v76 = v235;
        v74 = v239;
        if (!v239)
          goto LABEL_270;
        v77 = (_WORD *)((char *)v239 + 20);
        *(_DWORD *)v239 = 2;
        *((_DWORD *)v74 + 1) = v72;
        *((_QWORD *)v74 + 1) = (char *)v74 + 20;
        *((_DWORD *)v74 + 4) = 0;
        if ((v16 & 0x100000000) != 0)
        {
          v78 = &v77[v16];
          if (v16 < 0x40)
          {
            v79 = (unint64_t)v74 + 20;
          }
          else
          {
            v79 = (unint64_t)&v77[v16 & 0xFFFFFFC0];
            v80 = 0uLL;
            v81 = (char *)v74 + 20;
            do
            {
              v240.val[0] = *(int8x16_t *)v14;
              v82 = *((int8x16_t *)v14 + 1);
              v244.val[0] = (int8x16_t)*((_OWORD *)v14 + 2);
              v83 = *((_OWORD *)v14 + 3);
              v14 += 64;
              v84 = v83;
              v244.val[1] = 0uLL;
              v248.val[0] = v82;
              v240.val[1] = 0uLL;
              v85 = v81;
              vst2q_s8(v85, v240);
              v85 += 32;
              v248.val[1] = 0uLL;
              vst2q_s8(v85, v248);
              v86 = v81 + 64;
              vst2q_s8(v86, v244);
              v87 = v81 + 96;
              vst2q_s8(v87, *(int8x16x2_t *)(&v80 - 1));
              v81 += 128;
            }
            while (v81 != (char *)v79);
          }
          if ((_WORD *)v79 != v78)
          {
            v88 = (unint64_t)v74 + 2 * v16 - v79 + 18;
            if (v88 < 0xE
              || (v79 < (unint64_t)&v14[(v88 >> 1) + 1]
                ? (v89 = (unint64_t)v14 >= (v88 & 0xFFFFFFFFFFFFFFFELL) + v79 + 2)
                : (v89 = 1),
                  !v89))
            {
              v92 = (_WORD *)v79;
              v93 = v14;
              goto LABEL_121;
            }
            v90 = (v88 >> 1) + 1;
            if (v88 >= 0x3E)
            {
              v91 = v90 & 0xFFFFFFFFFFFFFFE0;
              v111 = (uint8x8_t *)(v14 + 16);
              v112 = (uint16x8_t *)(v79 + 32);
              v113 = v90 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v114 = *(uint8x16_t *)v111[-2].i8;
                v115 = vmovl_u8(*v111);
                v116 = vmovl_high_u8(*(uint8x16_t *)v111->i8);
                v112[-2] = vmovl_u8(*(uint8x8_t *)v114.i8);
                v112[-1] = vmovl_high_u8(v114);
                *v112 = v115;
                v112[1] = v116;
                v112 += 4;
                v111 += 4;
                v113 -= 32;
              }
              while (v113);
              if (v90 == v91)
                goto LABEL_159;
              if ((v90 & 0x18) == 0)
              {
                v93 = &v14[v91];
                v92 = (_WORD *)(v79 + 2 * v91);
                do
                {
LABEL_121:
                  v94 = *(unsigned __int8 *)v93++;
                  *v92++ = v94;
                }
                while (v92 != v78);
                goto LABEL_159;
              }
            }
            else
            {
              v91 = 0;
            }
            v92 = (_WORD *)(v79 + 2 * (v90 & 0xFFFFFFFFFFFFFFF8));
            v93 = &v14[v90 & 0xFFFFFFFFFFFFFFF8];
            v117 = (uint8x8_t *)&v14[v91];
            v118 = (uint16x8_t *)(v79 + 2 * v91);
            v119 = v91 - (v90 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v120 = *v117++;
              *v118++ = vmovl_u8(v120);
              v119 += 8;
            }
            while (v119);
            if (v90 != (v90 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_121;
          }
        }
        else if ((_DWORD)v16)
        {
          if ((_DWORD)v16 == 1)
          {
            *v77 = *(_WORD *)v14;
          }
          else
          {
            memcpy((char *)v74 + 20, v14, 2 * v16);
            v76 = v235;
          }
        }
LABEL_159:
        v121 = (unint64_t)&v77[v16];
        v122 = (char *)(v121 + 2 * v64);
        if ((v64 & 0xFFFFFFC0) != 0)
        {
          v123 = v121 + 2 * (v64 & 0xFFFFFFC0);
          v124 = 0uLL;
          do
          {
            v241.val[0] = *(int8x16_t *)v18;
            v125 = *((int8x16_t *)v18 + 1);
            v245.val[0] = (int8x16_t)*((_OWORD *)v18 + 2);
            v126 = *((_OWORD *)v18 + 3);
            v18 += 64;
            v127 = v126;
            v245.val[1] = 0uLL;
            v249.val[0] = v125;
            v241.val[1] = 0uLL;
            v128 = (char *)v121;
            vst2q_s8(v128, v241);
            v128 += 32;
            v249.val[1] = 0uLL;
            vst2q_s8(v128, v249);
            v129 = (char *)(v121 + 64);
            vst2q_s8(v129, v245);
            v130 = (char *)(v121 + 96);
            vst2q_s8(v130, *(int8x16x2_t *)(&v124 - 1));
            v121 += 128;
          }
          while (v121 != v123);
          v121 = v123;
        }
        if ((char *)v121 != v122)
        {
          v131 = (unint64_t)v74 + 2 * v64 + 2 * (unint64_t)v16 - v121 + 18;
          if (v131 < 0xE
            || v121 < (unint64_t)&v18[(v131 >> 1) + 1]
            && (unint64_t)v18 < (v131 & 0xFFFFFFFFFFFFFFFELL) + v121 + 2)
          {
            v132 = (char *)v121;
            v133 = v18;
            goto LABEL_168;
          }
          v149 = (v131 >> 1) + 1;
          if (v131 >= 0x3E)
          {
            v150 = v149 & 0xFFFFFFFFFFFFFFE0;
            v176 = (uint8x8_t *)(v18 + 16);
            v177 = (uint16x8_t *)(v121 + 32);
            v178 = v149 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v179 = *(uint8x16_t *)v176[-2].i8;
              v180 = vmovl_u8(*v176);
              v181 = vmovl_high_u8(*(uint8x16_t *)v176->i8);
              v177[-2] = vmovl_u8(*(uint8x8_t *)v179.i8);
              v177[-1] = vmovl_high_u8(v179);
              *v177 = v180;
              v177[1] = v181;
              v177 += 4;
              v176 += 4;
              v178 -= 32;
            }
            while (v178);
            if (v149 == v150)
              goto LABEL_169;
            if ((v149 & 0x18) == 0)
            {
              v133 = &v18[v150];
              v132 = (char *)(v121 + 2 * v150);
              do
              {
LABEL_168:
                v134 = *(unsigned __int8 *)v133++;
                *(_WORD *)v132 = v134;
                v132 += 2;
              }
              while (v132 != v122);
              goto LABEL_169;
            }
          }
          else
          {
            v150 = 0;
          }
          v132 = (char *)(v121 + 2 * (v149 & 0xFFFFFFFFFFFFFFF8));
          v133 = &v18[v149 & 0xFFFFFFFFFFFFFFF8];
          v182 = (uint8x8_t *)&v18[v150];
          v183 = (uint16x8_t *)(v121 + 2 * v150);
          v184 = v150 - (v149 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v185 = *v182++;
            *v183++ = vmovl_u8(v185);
            v184 += 8;
          }
          while (v184);
          if (v149 != (v149 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_168;
        }
LABEL_169:
        if (!v65)
        {
          v137 = 0;
          *(_WORD *)v122 = 64;
          v138 = v122 + 2;
          if ((v76 & 0x100000000) != 0)
            goto LABEL_200;
          goto LABEL_175;
        }
        v135 = (int8x16_t *)*((_QWORD *)v65 + 1);
        v136 = *((unsigned int *)v65 + 1);
        if ((*((_BYTE *)v65 + 16) & 4) == 0)
        {
          if ((_DWORD)v136)
          {
            if ((_DWORD)v136 == 1)
            {
              *(_WORD *)v122 = v135->i16[0];
            }
            else
            {
              memcpy(v122, v135, 2 * v136);
              v76 = v235;
            }
          }
LABEL_199:
          v137 = *((unsigned int *)v65 + 1);
          v159 = &v122[2 * v137];
          *(_WORD *)v159 = 64;
          v138 = v159 + 2;
          if ((v76 & 0x100000000) != 0)
          {
LABEL_200:
            v160 = &v138[2 * v76];
            if (v76 >= 0x40)
            {
              v161 = &v138[2 * (v76 & 0xFFFFFFC0)];
              v162 = 0uLL;
              do
              {
                v243.val[0] = *(int8x16_t *)v34;
                v163 = *((int8x16_t *)v34 + 1);
                v247.val[0] = (int8x16_t)*((_OWORD *)v34 + 2);
                v164 = *((_OWORD *)v34 + 3);
                v34 += 64;
                v165 = v164;
                v247.val[1] = 0uLL;
                v251.val[0] = v163;
                v243.val[1] = 0uLL;
                v166 = v138;
                vst2q_s8(v166, v243);
                v166 += 32;
                v251.val[1] = 0uLL;
                vst2q_s8(v166, v251);
                v167 = v138 + 64;
                vst2q_s8(v167, v247);
                v168 = v138 + 96;
                vst2q_s8(v168, *(int8x16x2_t *)(&v162 - 1));
                v138 += 128;
              }
              while (v138 != v161);
              v138 = v161;
            }
            if (v138 == v160)
              goto LABEL_239;
            v169 = (WTF::StringImpl *)((char *)v74
                                     + 2 * v137
                                     + 2 * v64
                                     + 2 * v16
                                     + 2 * v76)
                 - (WTF::StringImpl *)v138
                 + 20;
            if (v169 < 0xE
              || (v138 < &v34[(v169 >> 1) + 1] ? (v170 = v34 >= &v138[(v169 & 0xFFFFFFFFFFFFFFFELL) + 2]) : (v170 = 1),
                  !v170))
            {
              v173 = v138;
              v174 = v34;
              goto LABEL_214;
            }
            v171 = (v169 >> 1) + 1;
            if (v169 >= 0x3E)
            {
              v172 = v171 & 0xFFFFFFFFFFFFFFE0;
              v186 = (uint8x8_t *)(v34 + 16);
              v187 = (uint16x8_t *)(v138 + 32);
              v188 = v171 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v189 = *(uint8x16_t *)v186[-2].i8;
                v190 = vmovl_u8(*v186);
                v191 = vmovl_high_u8(*(uint8x16_t *)v186->i8);
                v187[-2] = vmovl_u8(*(uint8x8_t *)v189.i8);
                v187[-1] = vmovl_high_u8(v189);
                *v187 = v190;
                v187[1] = v191;
                v187 += 4;
                v186 += 4;
                v188 -= 32;
              }
              while (v188);
              if (v171 == v172)
                goto LABEL_239;
              if ((v171 & 0x18) == 0)
              {
                v174 = &v34[v172];
                v173 = &v138[2 * v172];
                do
                {
LABEL_214:
                  v175 = *(unsigned __int8 *)v174++;
                  *(_WORD *)v173 = v175;
                  v173 += 2;
                }
                while (v173 != v160);
                goto LABEL_239;
              }
            }
            else
            {
              v172 = 0;
            }
            v173 = &v138[2 * (v171 & 0xFFFFFFFFFFFFFFF8)];
            v174 = &v34[v171 & 0xFFFFFFFFFFFFFFF8];
            v192 = (uint8x8_t *)&v34[v172];
            v193 = (uint16x8_t *)&v138[2 * v172];
            v194 = v172 - (v171 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v195 = *v192++;
              *v193++ = vmovl_u8(v195);
              v194 += 8;
            }
            while (v194);
            if (v171 == (v171 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_239;
            goto LABEL_214;
          }
LABEL_175:
          if ((_DWORD)v76)
          {
            if ((_DWORD)v76 != 1)
            {
              v158 = 2 * v76;
              goto LABEL_238;
            }
            *(_WORD *)v138 = *(_WORD *)v34;
          }
LABEL_239:
          v239 = v74;
          WTF::URL::parse(a1);
          if (v239)
          {
            if (*(_DWORD *)v239 == 2)
            {
              WTF::StringImpl::~StringImpl(v239, v56, v57, v58, v59, v60, v61, v62);
              WTF::fastFree(v196, v197, v198, v199, v200, v201, v202, v203);
              v63 = v236;
              if (!v236)
                return;
              goto LABEL_245;
            }
            *(_DWORD *)v239 -= 2;
          }
          v63 = v236;
          if (!v236)
            return;
LABEL_245:
          if (*(_DWORD *)v63 == 2)
          {
            WTF::StringImpl::~StringImpl(v63, v56, v57, v58, v59, v60, v61, v62);
            WTF::fastFree(v204, v205, v206, v207, v208, v209, v210, v211);
          }
          else
          {
            *(_DWORD *)v63 -= 2;
          }
          return;
        }
        v139 = &v122[2 * v136];
        if (v136 < 0x40)
        {
          v140 = (unint64_t)v122;
        }
        else
        {
          v140 = (unint64_t)&v122[2 * (v136 & 0xFFFFFFC0)];
          v141 = 0uLL;
          v142 = v122;
          do
          {
            v242.val[0] = *v135;
            v143 = v135[1];
            v246.val[0] = v135[2];
            v144 = v135[3];
            v135 += 4;
            v145 = v144;
            v246.val[1] = 0uLL;
            v250.val[0] = v143;
            v242.val[1] = 0uLL;
            v146 = v142;
            vst2q_s8(v146, v242);
            v146 += 32;
            v250.val[1] = 0uLL;
            vst2q_s8(v146, v250);
            v147 = v142 + 64;
            vst2q_s8(v147, v246);
            v148 = v142 + 96;
            vst2q_s8(v148, *(int8x16x2_t *)(&v141 - 1));
            v142 += 128;
          }
          while (v142 != (char *)v140);
        }
        if ((char *)v140 == v139)
          goto LABEL_199;
        v151 = (unint64_t)v74 + 2 * v64 + 2 * v136 + 2 * v16 - v140 + 18;
        if (v151 < 0xE
          || (v140 < (unint64_t)v135->u64 + (v151 >> 1) + 1
            ? (v152 = (unint64_t)v135 >= (v151 & 0xFFFFFFFFFFFFFFFELL) + v140 + 2)
            : (v152 = 1),
              !v152))
        {
          v155 = (char *)v140;
          v156 = v135;
          goto LABEL_195;
        }
        v153 = (v151 >> 1) + 1;
        if (v151 >= 0x3E)
        {
          v154 = v153 & 0xFFFFFFFFFFFFFFE0;
          v212 = (uint8x8_t *)&v135[1];
          v213 = (uint16x8_t *)(v140 + 32);
          v214 = v153 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v215 = *(uint8x16_t *)v212[-2].i8;
            v216 = vmovl_u8(*v212);
            v217 = vmovl_high_u8(*(uint8x16_t *)v212->i8);
            v213[-2] = vmovl_u8(*(uint8x8_t *)v215.i8);
            v213[-1] = vmovl_high_u8(v215);
            *v213 = v216;
            v213[1] = v217;
            v213 += 4;
            v212 += 4;
            v214 -= 32;
          }
          while (v214);
          if (v153 == v154)
            goto LABEL_199;
          if ((v153 & 0x18) == 0)
          {
            v156 = (int8x16_t *)((char *)v135 + v154);
            v155 = (char *)(v140 + 2 * v154);
            goto LABEL_195;
          }
        }
        else
        {
          v154 = 0;
        }
        v155 = (char *)(v140 + 2 * (v153 & 0xFFFFFFFFFFFFFFF8));
        v156 = (int8x16_t *)((char *)v135 + (v153 & 0xFFFFFFFFFFFFFFF8));
        v218 = (uint8x8_t *)&v135->i8[v154];
        v219 = (uint16x8_t *)(v140 + 2 * v154);
        v220 = v154 - (v153 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v221 = *v218++;
          *v219++ = vmovl_u8(v221);
          v220 += 8;
        }
        while (v220);
        if (v153 == (v153 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_199;
        do
        {
LABEL_195:
          v157 = v156->u8[0];
          v156 = (int8x16_t *)((char *)v156 + 1);
          *(_WORD *)v155 = v157;
          v155 += 2;
        }
        while (v155 != v139);
        goto LABEL_199;
      }
      v236 = 0;
      i = *(WTF::StringImpl **)a1;
      if (*(_QWORD *)a1)
        goto LABEL_47;
      goto LABEL_74;
    }
    v26 = (const WTF::String *)*(unsigned int *)(a1 + 16);
    v27 = *(unsigned int *)(a1 + 20);
    if (*(_DWORD *)(a1 + 12) == (_DWORD)v26 && (_DWORD)v27 != *(_DWORD *)(a1 + 24))
    {
      v28 = *(WTF::StringImpl **)a1;
      if (*(_QWORD *)a1)
      {
        if (*((_DWORD *)v28 + 1) > v27)
        {
          v29 = *((_QWORD *)v28 + 1);
          v30 = (*((_BYTE *)v28 + 16) & 4) != 0 ? *(unsigned __int8 *)(v29 + v27) : *(unsigned __int16 *)(v29 + 2 * v27);
          if (v30 == 64)
            LODWORD(v27) = v27 + 1;
        }
      }
    }
    if ((_DWORD)v27 != (_DWORD)v26)
    {
      v238 = *(WTF::StringImpl **)a1;
      v40 = v238;
      *(_QWORD *)a1 = 0;
      WTF::makeStringByRemoving((uint64_t)&v238, v26, v27 - (_DWORD)v26, (int **)&v239);
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
        {
          WTF::StringImpl::~StringImpl(v40, v41, v42, v43, v44, v45, v46, v47);
          WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
        }
        else
        {
          *(_DWORD *)v40 -= 2;
        }
      }
      WTF::URL::parse(a1);
      v63 = v239;
      v239 = 0;
      if (v63)
        goto LABEL_245;
    }
  }
}

void WTF::URL::removeCredentials(WTF::URL *this)
{
  const WTF::String *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;

  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    v2 = (const WTF::String *)*((unsigned int *)this + 3);
    v3 = *((unsigned int *)this + 5);
    if ((_DWORD)v3 != *((_DWORD *)this + 6))
    {
      v4 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        if (*(_DWORD *)(v4 + 4) > v3)
        {
          v5 = *(_QWORD *)(v4 + 8);
          if ((*(_BYTE *)(v4 + 16) & 4) != 0)
            v6 = *(unsigned __int8 *)(v5 + v3);
          else
            v6 = *(unsigned __int16 *)(v5 + 2 * v3);
          if (v6 == 64)
            LODWORD(v3) = v3 + 1;
        }
      }
    }
    if ((_DWORD)v3 != (_DWORD)v2)
    {
      v39 = *(WTF::StringImpl **)this;
      v7 = v39;
      *(_QWORD *)this = 0;
      WTF::makeStringByRemoving((uint64_t)&v39, v2, v3 - (_DWORD)v2, (int **)&v40);
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
        {
          WTF::StringImpl::~StringImpl(v7, v8, v9, v10, v11, v12, v13, v14);
          WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
          WTF::URL::parse((uint64_t)this);
          v22 = v40;
          v40 = 0;
          if (!v22)
            return;
          goto LABEL_17;
        }
        *(_DWORD *)v7 -= 2;
      }
      WTF::URL::parse((uint64_t)this);
      v22 = v40;
      v40 = 0;
      if (!v22)
        return;
LABEL_17:
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::~StringImpl(v22, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
      }
      else
      {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
}

void WTF::URL::maybeTrimTrailingSpacesFromOpaquePath(WTF::URL *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  int8x16_t *v8;
  unint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  if ((~*((_DWORD *)this + 2) & 5) == 0)
  {
    v2 = *(_QWORD *)this;
    if (!*(_QWORD *)this)
    {
      if (*((_DWORD *)this + 9) > *((_DWORD *)this + 8))
        return;
      goto LABEL_12;
    }
    v3 = *(_DWORD *)(v2 + 4);
    v4 = *((_DWORD *)this + 9);
    if (v3 <= v4)
    {
      v5 = *((_DWORD *)this + 8);
      if (v4 <= v5)
      {
        if (v3)
        {
          if (v5 >= v3)
            v6 = v3;
          else
            v6 = v5;
          if ((v6 & 0x80000000) != 0)
            goto LABEL_18;
          v7 = (unint64_t)((*(_DWORD *)(v2 + 16) >> 2) & 1) << 32;
          v8 = *(int8x16_t **)(v2 + 8);
          v9 = v6 & 0xFFFFFFFEFFFFFFFFLL | v7;
LABEL_13:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>>(v6, v7 != 0, v8, v9, (int **)&v26);
          v25 = v26;
          if (v26)
          {
            WTF::URL::parse((uint64_t)this);
            if (*(_DWORD *)v25 == 2)
            {
              WTF::StringImpl::~StringImpl(v25, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
            }
            else
            {
              *(_DWORD *)v25 -= 2;
            }
            return;
          }
LABEL_18:
          __break(0xC471u);
          return;
        }
LABEL_12:
        v6 = 0;
        v9 = 0x100000000;
        v7 = 0x100000000;
        v8 = (int8x16_t *)"";
        goto LABEL_13;
      }
    }
  }
}

void WTF::URL::removeQueryAndFragmentIdentifier(WTF::StringImpl **this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;

  if (((_BYTE)this[1] & 1) != 0)
  {
    v9 = *this;
    if (!v9)
    {
      *this = 0;
      goto LABEL_12;
    }
    v10 = *((unsigned int *)this + 8);
    if (*((_DWORD *)v9 + 1) <= v10)
    {
      v12 = *(_DWORD *)v9;
      *(_DWORD *)v9 += 2;
      v36 = 0;
      if (!v12)
        goto LABEL_9;
    }
    else
    {
      WTF::StringImpl::substring(v9, 0, v10, (uint64_t *)&v36);
      v9 = *this;
      v11 = v36;
      v36 = 0;
      *this = v11;
      if (!v9)
        goto LABEL_12;
      v12 = *(_DWORD *)v9 - 2;
      if (*(_DWORD *)v9 == 2)
      {
LABEL_9:
        WTF::StringImpl::~StringImpl(v9, a2, v10, a4, a5, a6, a7, a8);
        WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
        v9 = v36;
        v36 = 0;
        if (v9)
        {
          v12 = *(_DWORD *)v9 - 2;
          if (*(_DWORD *)v9 == 2)
          {
            WTF::StringImpl::~StringImpl(v9, v21, v22, v23, v24, v25, v26, v27);
            WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
            goto LABEL_12;
          }
          goto LABEL_11;
        }
LABEL_12:
        *((_DWORD *)this + 9) = *((_DWORD *)this + 8);
        WTF::URL::maybeTrimTrailingSpacesFromOpaquePath((WTF::URL *)this);
        return;
      }
    }
LABEL_11:
    *(_DWORD *)v9 = v12;
    goto LABEL_12;
  }
}

void WTF::URL::setQuery(uint64_t a1, int8x16_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int8x16_t *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  _BOOL4 v16;
  char *v17;
  uint64_t v18;
  int8x16_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int i;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;

  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    return;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v11 = *(unsigned int *)(v10 + 4);
    if ((_DWORD)v11)
    {
      v12 = *(int8x16_t **)(v10 + 8);
      v13 = *(unsigned int *)(a1 + 32);
      if (v11 > v13)
        v14 = ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32) | v13;
      else
        v14 = v11 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
      if ((_DWORD)a3)
        goto LABEL_8;
LABEL_11:
      v16 = 0;
      goto LABEL_16;
    }
    v14 = 0x100000000;
    v12 = (int8x16_t *)"";
    if (!(_DWORD)a3)
      goto LABEL_11;
  }
  else
  {
    v14 = 0x100000000;
    v12 = (int8x16_t *)"";
    if (!(_DWORD)a3)
      goto LABEL_11;
  }
LABEL_8:
  if ((a3 & 0xFF00000000) != 0)
    v15 = a2->u8[0];
  else
    v15 = a2->u16[0];
  v16 = v15 == 63;
LABEL_16:
  if (!a2)
    v16 = 1;
  if (v16)
    v17 = "";
  else
    v17 = "?";
  if (v16)
    v18 = 1;
  else
    v18 = 2;
  if (!v10)
    goto LABEL_32;
  v19 = *(int8x16_t **)(v10 + 8);
  v20 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
  v21 = *(unsigned int *)(a1 + 36);
  if (v20 <= v21)
    goto LABEL_32;
  if ((_DWORD)v21)
  {
    v22 = (v20 - v21);
    v23 = v20 - v21;
    if ((v20 & 0x100000000) != 0)
    {
      if (v23 < v22)
        goto LABEL_31;
      v19 = (int8x16_t *)((char *)v19 + v21);
      v22 |= 0x100000000uLL;
      for (i = v18 - 1; (unint64_t)(v18 - 1) >> 31; i = v18 - 1)
      {
LABEL_30:
        a3 = (uint64_t)"unsigned int WTF::stringLength(size_t)";
        v12 = (int8x16_t *)13;
        __break(0xC471u);
LABEL_31:
        __break(1u);
LABEL_32:
        v22 = 0x100000000;
        v19 = (int8x16_t *)"";
      }
    }
    else
    {
      if (v23 < v22)
        goto LABEL_31;
      v19 = (int8x16_t *)((char *)v19 + 2 * v21);
      i = v18 - 1;
      if ((unint64_t)(v18 - 1) >> 31)
        goto LABEL_30;
    }
  }
  else
  {
    v22 = v20;
    i = v18 - 1;
    if ((unint64_t)(v18 - 1) >> 31)
      goto LABEL_30;
  }
  if (((v22 | a3) & 0x80000000) != 0)
    goto LABEL_57;
  v25 = a3 + v22;
  if (__OFADD__((_DWORD)a3, (_DWORD)v22))
    goto LABEL_57;
  v26 = __OFADD__(i, v25);
  v27 = i + v25;
  v28 = v26;
  if ((v14 & 0x80000000) != 0)
    goto LABEL_57;
  if (v28)
    goto LABEL_57;
  v29 = v14 + v27;
  if (__OFADD__((_DWORD)v14, v27))
    goto LABEL_57;
  LODWORD(v30) = 0;
  if ((a3 & 0xFF00000000) != 0 && (v14 & 0x100000000) != 0)
    v30 = HIDWORD(v22);
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>((int **)&v52, v29, v30, v12, v14, v17, i, a8, a2, a3, v19, v22);
  if (!v52)
  {
LABEL_57:
    __break(0xC471u);
    return;
  }
  WTF::URL::parseAllowingC0AtEnd(a1, (WTF::AtomStringImpl *)&v52, v31, v32, v33, v34, v35, v36);
  if (!v52)
  {
LABEL_48:
    if (a2)
      return;
LABEL_51:
    WTF::URL::maybeTrimTrailingSpacesFromOpaquePath((WTF::URL *)a1);
    return;
  }
  if (*(_DWORD *)v52 != 2)
  {
    *(_DWORD *)v52 -= 2;
    goto LABEL_48;
  }
  WTF::StringImpl::~StringImpl(v52, v37, v38, v39, v40, v41, v42, v43);
  WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
  if (!a2)
    goto LABEL_51;
}

void WTF::URL::setPath(unsigned int *a1, int8x16_t *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  const char *v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  const char *v28;
  uint64_t v29;
  StringView v30;
  double v31;
  float v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  int8x16_t *v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  const char *v49;
  size_t v50;
  size_t v51;
  int v52;
  BOOL v53;
  int v54;
  int v55;
  int v56;
  char v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  unsigned int v60;
  WTF::StringImpl *v61;
  char *v62;
  unint64_t v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  _WORD *v66;
  _WORD *v67;
  unint64_t v68;
  __int128 v69;
  char *v70;
  int8x16_t v71;
  __int128 v72;
  __int128 v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  BOOL v78;
  uint64_t v79;
  unint64_t v80;
  _WORD *v81;
  const char *v82;
  __int16 v83;
  WTF::StringImpl *v84;
  char *v85;
  char *v86;
  char *v87;
  int8x16_t *v88;
  char *v89;
  unint64_t v90;
  unsigned __int128 *v91;
  unsigned __int128 v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  int8x16_t *v100;
  char v101;
  uint8x8_t *v102;
  uint16x8_t *v103;
  unint64_t v104;
  uint8x16_t v105;
  uint16x8_t v106;
  uint16x8_t v107;
  uint8x8_t *v108;
  uint16x8_t *v109;
  unint64_t v110;
  uint8x8_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  __int128 v115;
  int8x16_t v116;
  __int128 v117;
  __int128 v118;
  char *v119;
  char *v120;
  char *v121;
  unint64_t v122;
  _WORD *v123;
  const char *v124;
  __int16 v125;
  char *v126;
  unint64_t v127;
  __int128 v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  char *v132;
  char *v133;
  char *v134;
  unint64_t v135;
  BOOL v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  int8x16_t *v140;
  __int16 v141;
  int8x16_t *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  unint64_t v147;
  __int128 v148;
  char *v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  BOOL v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  int8x16_t *v163;
  __int16 v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  char *v167;
  char *v168;
  __int128 v169;
  int8x16_t v170;
  __int128 v171;
  __int128 v172;
  char *v173;
  char *v174;
  char *v175;
  unint64_t v176;
  BOOL v177;
  uint64_t v178;
  unint64_t v179;
  char *v180;
  const char *v181;
  __int16 v182;
  uint8x8_t *v183;
  uint16x8_t *v184;
  unint64_t v185;
  uint8x16_t v186;
  uint16x8_t v187;
  uint16x8_t v188;
  uint8x8_t *v189;
  uint16x8_t *v190;
  unint64_t v191;
  uint8x8_t v192;
  uint8x8_t *v193;
  uint16x8_t *v194;
  unint64_t v195;
  uint8x16_t v196;
  uint16x8_t v197;
  uint16x8_t v198;
  uint8x8_t *v199;
  uint16x8_t *v200;
  unint64_t v201;
  uint8x8_t v202;
  uint8x8_t *v203;
  uint16x8_t *v204;
  unint64_t v205;
  uint8x16_t v206;
  uint16x8_t v207;
  uint16x8_t v208;
  uint8x8_t *v209;
  uint16x8_t *v210;
  unint64_t v211;
  uint8x8_t v212;
  char *v213;
  WTF::AtomStringImpl *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  WTF::StringImpl *v221;
  unint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint8x8_t *v238;
  uint16x8_t *v239;
  unint64_t v240;
  uint8x16_t v241;
  uint16x8_t v242;
  uint16x8_t v243;
  uint8x8_t *v244;
  uint16x8_t *v245;
  unint64_t v246;
  uint8x8_t v247;
  unint64_t v248;
  int8x16_t *v249;
  int8x16_t *v250;
  unint64_t v251;
  int8x16_t v252;
  int8x16_t v253;
  int8x16_t v254;
  int8x16_t v255;
  int16x8_t *v256;
  int8x8_t *v257;
  unint64_t v258;
  int16x8_t v259;
  WTF::StringImpl *v260;
  unsigned int v261;
  uint64_t v262;
  WTF::StringImpl *v263;
  WTF::StringImpl *v264;
  WTF::StringImpl *v266;
  WTF::StringImpl *v267;
  StringView v268;
  int8x16x2_t v269;
  int8x16x2_t v270;
  int8x16x2_t v271;
  int8x16x2_t v272;
  int8x16x2_t v273;
  int8x16x2_t v274;
  int8x16x2_t v275;
  int8x16x2_t v276;
  int8x16x2_t v277;
  int8x16x2_t v278;
  int8x16x2_t v279;
  int8x16x2_t v280;
  int8x16x2_t v281;
  int8x16x2_t v282;
  int8x16x2_t v283;

  v3 = a1[2];
  if ((v3 & 1) != 0)
  {
    v6 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v7 = *(const char **)(v6 + 8);
      v8 = *(_DWORD *)(v6 + 4);
      v9 = ((unint64_t)*(unsigned int *)(v6 + 16) >> 2) & 1;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v9 = 1;
    }
    v10 = a1[6];
    v11 = (v3 >> 3) & 7;
    v12 = v10 + v11;
    v13 = v3 >> 6;
    v14 = (a1[2] >> 6) + 1;
    v15 = (_DWORD)v12 != v14 || v6 == 0;
    v16 = v10 + v11;
    if (!v15)
    {
      v25 = v12 + 1;
      v16 = v12;
      if ((v12 + 1) < *(_DWORD *)(v6 + 4))
      {
        v26 = *(_QWORD *)(v6 + 8);
        if ((*(_BYTE *)(v6 + 16) & 4) != 0)
        {
          v16 = v12;
          if (*(_BYTE *)(v26 + v12) != 47)
            goto LABEL_10;
          v27 = *(unsigned __int8 *)(v26 + v25);
        }
        else
        {
          v16 = v12;
          if (*(_WORD *)(v26 + 2 * v12) != 47)
            goto LABEL_10;
          v27 = *(unsigned __int16 *)(v26 + 2 * v25);
        }
        v16 = v12 + 2;
        if (v27 != 46)
          v16 = v12;
      }
    }
LABEL_10:
    if (v8)
    {
      v17 = v8 | (v9 << 32);
      if (v9)
        v18 = v16 | 0x100000000;
      else
        v18 = v16;
      if (v8 > v16)
        v19 = v18;
      else
        v19 = v17;
      if ((_DWORD)a3)
      {
LABEL_18:
        if ((a3 & 0xFF00000000) != 0)
        {
          v20 = a2->u8[0];
          v21 = a1;
          if (v20 == 47)
          {
LABEL_36:
            v28 = "";
            v29 = 1;
            if (WTF::URL::hasSpecialScheme((WTF::URL *)v21))
              goto LABEL_154;
            goto LABEL_69;
          }
        }
        else
        {
          v20 = a2->u16[0];
          if (v20 == 47)
            goto LABEL_58;
        }
        if (v20 == 92)
        {
          v21 = a1;
          if (WTF::URL::hasSpecialScheme((WTF::URL *)a1))
            goto LABEL_36;
          if ((v3 & 0xFFFFFFC1) == 0x101)
          {
            if (v6)
            {
              v33 = *(_DWORD *)(v6 + 4);
              if (v33)
              {
                v34 = *(_QWORD *)(v6 + 8);
                if ((*(_BYTE *)(v6 + 16) & 4) != 0)
                {
                  if (v33 != 1
                    && (*(_BYTE *)v34 & 0xDF) == 0x46
                    && v33 >= 3
                    && (*(_BYTE *)(v34 + 1) & 0xDF) == 0x49
                    && v33 >= 4
                    && (*(_BYTE *)(v34 + 2) & 0xDF) == 0x4C)
                  {
                    v35 = *(unsigned __int8 *)(v34 + 3);
LABEL_67:
                    if ((v35 & 0xFFFFFFDF) != 0x45)
                      goto LABEL_68;
LABEL_58:
                    v28 = "";
                    v29 = 1;
                    v21 = a1;
                    if (WTF::URL::hasSpecialScheme((WTF::URL *)a1))
                      goto LABEL_154;
LABEL_69:
                    v36 = v21[5];
                    if (v36 != v21[3])
                      ++v36;
                    if (v6 && *(_DWORD *)(v6 + 4) > v36)
                    {
                      v37 = v10 - v36;
                      if (*(_DWORD *)(v6 + 4) - v36 > v10 - v36 || (v37 = *(_DWORD *)(v6 + 4) - v36, v36))
                      {
                        v38 = *(unsigned int *)(v6 + 4) - (unint64_t)v36;
                        if (((*(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32)) & 0x100000000) != 0)
                        {
                          if (v38 < v37)
                            goto LABEL_319;
                          if (v37)
                            goto LABEL_154;
                        }
                        else
                        {
                          if (v38 < v37)
                            goto LABEL_319;
                          if (v37)
                            goto LABEL_154;
                        }
                      }
                      else if (*(_DWORD *)(v6 + 4))
                      {
                        goto LABEL_154;
                      }
                    }
                    *(_QWORD *)&v268.m_length = "//";
                    v268.m_characters = (void *)a3;
                    v30.m_characters = (void *)0x100000002;
                    if (WTF::startsWith(a2, v268, v30) && a3 > 2)
                    {
                      v39 = (int8x16_t *)"/.";
                      v40 = 3;
                      WTF::escapePathWithoutCopying(&v266, a2, a3, v31, v32);
                      v47 = *(_QWORD *)v21;
                      if (!*(_QWORD *)v21)
                        goto LABEL_86;
LABEL_155:
                      v49 = *(const char **)(v47 + 8);
                      v94 = *(unsigned int *)(v47 + 4) | ((unint64_t)((*(_DWORD *)(v47 + 16) >> 2) & 1) << 32);
                      v95 = v21[8];
                      if (v94 > v95)
                      {
                        if ((_DWORD)v95)
                        {
                          v48 = (v94 - v95);
                          v96 = v94 - v95;
                          if ((v94 & 0x100000000) != 0)
                          {
                            if (v96 < v48)
                              goto LABEL_319;
                            v49 += v95;
                            v48 |= 0x100000000uLL;
                            v50 = v29 - 1;
                            if ((unint64_t)(v29 - 1) >> 31)
                              goto LABEL_320;
                          }
                          else
                          {
                            if (v96 < v48)
                              goto LABEL_319;
                            v49 += 2 * v95;
                            v50 = v29 - 1;
                            if ((unint64_t)(v29 - 1) >> 31)
                              goto LABEL_320;
                          }
                        }
                        else
                        {
                          v48 = v94;
                          v50 = v29 - 1;
                          if ((unint64_t)(v29 - 1) >> 31)
                            goto LABEL_320;
                        }
                        goto LABEL_87;
                      }
LABEL_86:
                      v48 = 0x100000000;
                      v49 = "";
                      v50 = v29 - 1;
                      if ((unint64_t)(v29 - 1) >> 31)
                        goto LABEL_320;
LABEL_87:
                      v51 = v40 - 1;
                      if (!((unint64_t)(v40 - 1) >> 31))
                      {
                        v262 = v29;
                        if (v266)
                        {
                          v52 = *((_DWORD *)v266 + 1);
                          if (((v52 | v48) & 0x80000000) != 0)
                            goto LABEL_320;
                        }
                        else
                        {
                          v52 = 0;
                          if ((v48 & 0x80000000) != 0)
                            goto LABEL_320;
                        }
                        v53 = __OFADD__(v52, (_DWORD)v48);
                        v54 = v52 + v48;
                        if (v53
                          || (v53 = __OFADD__((_DWORD)v51, v54), v55 = v51 + v54, v53)
                          || ((v53 = __OFADD__((_DWORD)v50, v55), v56 = v50 + v55, !v53) ? (v57 = 0) : (v57 = 1),
                              (v19 & 0x80000000) != 0
                           || (v57 & 1) != 0
                           || (v58 = (v19 + v56), __OFADD__((_DWORD)v19, v56))))
                        {
LABEL_320:
                          __break(0xC471u);
                          JUMPOUT(0x197B2DB94);
                        }
                        if ((v19 & 0x100000000) != 0
                          && (!v266 || (*((_BYTE *)v266 + 16) & 4) != 0)
                          && (v48 & 0x100000000) != 0)
                        {
                          if ((_DWORD)v58)
                          {
                            if ((v58 & 0x80000000) == 0)
                            {
                              v263 = v266;
                              v261 = v48;
                              WTF::tryFastCompactMalloc((WTF *)(v58 + 20), &v267);
                              v59 = v263;
                              v60 = v261;
                              v61 = v267;
                              if (v267)
                              {
                                v62 = (char *)v267 + 20;
                                *(_DWORD *)v267 = 2;
                                *((_DWORD *)v61 + 1) = v58;
                                *((_QWORD *)v61 + 1) = (char *)v61 + 20;
                                *((_DWORD *)v61 + 4) = 4;
                                v260 = v61;
                                if ((_DWORD)v19)
                                {
                                  if ((_DWORD)v19 == 1)
                                  {
                                    *v62 = *v7;
                                  }
                                  else
                                  {
                                    memcpy((char *)v61 + 20, v7, v19);
                                    v59 = v263;
                                    v61 = v260;
                                    v60 = v261;
                                  }
                                }
                                v85 = &v62[v19];
                                v21 = a1;
                                if ((_DWORD)v50)
                                {
                                  if ((_DWORD)v50 == 1)
                                  {
                                    *v85 = *v28;
                                  }
                                  else
                                  {
                                    memcpy(v85, v28, v50);
                                    v59 = v263;
                                    v61 = v260;
                                    v60 = v261;
                                  }
                                }
                                v86 = &v85[v50];
                                if ((_DWORD)v40 == 1)
                                {
                                  v87 = &v86[v51];
                                  if (v59)
                                    goto LABEL_143;
                                }
                                else
                                {
                                  memcpy(v86, v39, v51);
                                  v59 = v263;
                                  v61 = v260;
                                  v60 = v261;
                                  v87 = &v86[v51];
                                  if (v263)
                                  {
LABEL_143:
                                    v88 = (int8x16_t *)*((_QWORD *)v59 + 1);
                                    v41 = *((unsigned int *)v59 + 1);
                                    if ((*((_BYTE *)v59 + 16) & 4) != 0)
                                    {
                                      if ((_DWORD)v41)
                                      {
                                        if ((_DWORD)v41 == 1)
                                        {
                                          *v87 = v88->i8[0];
                                        }
                                        else
                                        {
                                          memcpy(v87, v88, v41);
                                          v59 = v263;
                                          v61 = v260;
                                          v60 = v261;
                                        }
                                      }
                                      goto LABEL_279;
                                    }
                                    v89 = &v87[v41];
                                    if (v41 < 0x10)
                                    {
                                      v90 = (unint64_t)v87;
                                    }
                                    else
                                    {
                                      v90 = (unint64_t)&v87[v41 & 0xFFFFFFF0];
                                      v91 = (unsigned __int128 *)v87;
                                      do
                                      {
                                        v92 = (unsigned __int128)vld2q_s8(v88->i8);
                                        v88 += 2;
                                        *v91++ = v92;
                                      }
                                      while (v91 != (unsigned __int128 *)v90);
                                    }
                                    if ((char *)v90 == v89)
                                    {
LABEL_279:
                                      v93 = *((unsigned int *)v59 + 1);
LABEL_280:
                                      if (v60)
                                      {
                                        v213 = &v87[v93];
                                        if (v60 == 1)
                                        {
                                          *v213 = *v49;
                                        }
                                        else
                                        {
                                          memcpy(v213, v49, v60);
                                          v61 = v260;
                                        }
                                      }
LABEL_284:
                                      v267 = v61;
                                      WTF::URL::parseAllowingC0AtEnd((uint64_t)v21, (WTF::AtomStringImpl *)&v267, v41, v42, v43, v44, v45, v46);
                                      if (v267)
                                      {
                                        if (*(_DWORD *)v267 == 2)
                                        {
                                          WTF::StringImpl::~StringImpl(v267, v214, v215, v216, v217, v218, v219, v220);
                                          WTF::fastFree(v222, v223, v224, v225, v226, v227, v228, v229);
                                          v221 = v266;
                                          if (!v266)
                                            return;
                                          goto LABEL_290;
                                        }
                                        *(_DWORD *)v267 -= 2;
                                      }
                                      v221 = v266;
                                      if (!v266)
                                        return;
LABEL_290:
                                      if (*(_DWORD *)v221 == 2)
                                      {
                                        WTF::StringImpl::~StringImpl(v221, v214, v215, v216, v217, v218, v219, v220);
                                        WTF::fastFree(v230, v231, v232, v233, v234, v235, v236, v237);
                                      }
                                      else
                                      {
                                        *(_DWORD *)v221 -= 2;
                                      }
                                      return;
                                    }
                                    v97 = (char *)v61 + v41 + v262 + v40 + v19;
                                    v98 = (unint64_t)&v97[-v90 - (v262 != 0) - (v40 != 0) + 20];
                                    if (v98 < 8
                                      || v90 < (unint64_t)v88[2].u64 + 2 * (_QWORD)v97 + -2 * v90 + 4
                                      && v88 < (int8x16_t *)(v97 + 18))
                                    {
                                      v99 = (char *)v90;
                                      v100 = v88;
                                      goto LABEL_172;
                                    }
                                    if (v98 >= 0x20)
                                    {
                                      v248 = v98 & 0xFFFFFFFFFFFFFFE0;
                                      v249 = v88 + 2;
                                      v250 = (int8x16_t *)(v90 + 16);
                                      v251 = v98 & 0xFFFFFFFFFFFFFFE0;
                                      do
                                      {
                                        v253 = v249[-2];
                                        v252 = v249[-1];
                                        v255 = *v249;
                                        v254 = v249[1];
                                        v249 += 4;
                                        v250[-1] = vuzp1q_s8(v253, v252);
                                        *v250 = vuzp1q_s8(v255, v254);
                                        v250 += 2;
                                        v251 -= 32;
                                      }
                                      while (v251);
                                      if (v98 == v248)
                                        goto LABEL_279;
                                      if ((v98 & 0x18) == 0)
                                      {
                                        v100 = (int8x16_t *)((char *)v88 + 2 * v248);
                                        v99 = (char *)(v90 + v248);
                                        do
                                        {
LABEL_172:
                                          v101 = v100->i8[0];
                                          v100 = (int8x16_t *)((char *)v100 + 2);
                                          *v99++ = v101;
                                        }
                                        while (v99 != v89);
                                        goto LABEL_279;
                                      }
                                    }
                                    else
                                    {
                                      v248 = 0;
                                    }
                                    v99 = (char *)(v90 + (v98 & 0xFFFFFFFFFFFFFFF8));
                                    v100 = (int8x16_t *)((char *)v88 + 2 * (v98 & 0xFFFFFFFFFFFFFFF8));
                                    v256 = (int16x8_t *)((char *)v88 + 2 * v248);
                                    v257 = (int8x8_t *)(v90 + v248);
                                    v258 = v248 - (v98 & 0xFFFFFFFFFFFFFFF8);
                                    do
                                    {
                                      v259 = *v256++;
                                      *v257++ = vmovn_s16(v259);
                                      v258 += 8;
                                    }
                                    while (v258);
                                    if (v98 == (v98 & 0xFFFFFFFFFFFFFFF8))
                                      goto LABEL_279;
                                    goto LABEL_172;
                                  }
                                }
                                v93 = 0;
                                goto LABEL_280;
                              }
                            }
                            goto LABEL_320;
                          }
LABEL_119:
                          v61 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
                          WTF::StringImpl::s_emptyAtomString += 2;
                          goto LABEL_284;
                        }
                        if (!(_DWORD)v58)
                          goto LABEL_119;
                        if (v58 > 0x7FFFFFEF)
                          goto LABEL_320;
                        v264 = v266;
                        v63 = v48;
                        WTF::tryFastCompactMalloc((WTF *)(2 * v58 + 20), &v267);
                        v64 = v264;
                        v61 = v267;
                        if (!v267)
                          goto LABEL_320;
                        v65 = v63;
                        v66 = (_WORD *)((char *)v267 + 20);
                        *(_DWORD *)v267 = 2;
                        *((_DWORD *)v61 + 1) = v58;
                        *((_QWORD *)v61 + 1) = (char *)v61 + 20;
                        *((_DWORD *)v61 + 4) = 0;
                        if ((v19 & 0x100000000) == 0)
                        {
                          if ((_DWORD)v19)
                          {
                            if ((_DWORD)v19 == 1)
                            {
                              *v66 = *(_WORD *)v7;
                            }
                            else
                            {
                              v84 = v61;
                              memcpy((char *)v61 + 20, v7, 2 * v19);
                              v64 = v264;
                              v65 = v63;
                              v61 = v84;
                            }
                          }
LABEL_181:
                          v112 = (unint64_t)&v66[v19];
                          v113 = v112 + 2 * v50;
                          if ((v50 & 0xFFFFFFC0) != 0)
                          {
                            v114 = v112 + 2 * (v50 & 0xFFFFFFC0);
                            v115 = 0uLL;
                            do
                            {
                              v270.val[0] = *(int8x16_t *)v28;
                              v116 = *((int8x16_t *)v28 + 1);
                              v275.val[0] = (int8x16_t)*((_OWORD *)v28 + 2);
                              v117 = *((_OWORD *)v28 + 3);
                              v28 += 64;
                              v118 = v117;
                              v275.val[1] = 0uLL;
                              v280.val[0] = v116;
                              v270.val[1] = 0uLL;
                              v119 = (char *)v112;
                              vst2q_s8(v119, v270);
                              v119 += 32;
                              v280.val[1] = 0uLL;
                              vst2q_s8(v119, v280);
                              v120 = (char *)(v112 + 64);
                              vst2q_s8(v120, v275);
                              v121 = (char *)(v112 + 96);
                              vst2q_s8(v121, *(int8x16x2_t *)(&v115 - 1));
                              v112 += 128;
                            }
                            while (v112 != v114);
                            v112 = v114;
                          }
                          if (v112 != v113)
                          {
                            v122 = (unint64_t)v61
                                 + 2 * v50
                                 + 2 * (unint64_t)v19
                                 - v112
                                 + 18;
                            if (v122 < 0xE
                              || v112 < (unint64_t)&v28[(v122 >> 1) + 1]
                              && (unint64_t)v28 < (v122 & 0xFFFFFFFFFFFFFFFELL) + v112 + 2)
                            {
                              v123 = (_WORD *)v112;
                              v124 = v28;
                              goto LABEL_190;
                            }
                            v156 = (v122 >> 1) + 1;
                            if (v122 >= 0x3E)
                            {
                              v157 = v156 & 0xFFFFFFFFFFFFFFE0;
                              v193 = (uint8x8_t *)(v28 + 16);
                              v194 = (uint16x8_t *)(v112 + 32);
                              v195 = v156 & 0xFFFFFFFFFFFFFFE0;
                              do
                              {
                                v196 = *(uint8x16_t *)v193[-2].i8;
                                v197 = vmovl_u8(*v193);
                                v198 = vmovl_high_u8(*(uint8x16_t *)v193->i8);
                                v194[-2] = vmovl_u8(*(uint8x8_t *)v196.i8);
                                v194[-1] = vmovl_high_u8(v196);
                                *v194 = v197;
                                v194[1] = v198;
                                v194 += 4;
                                v193 += 4;
                                v195 -= 32;
                              }
                              while (v195);
                              if (v156 == v157)
                                goto LABEL_191;
                              if ((v156 & 0x18) == 0)
                              {
                                v124 = &v28[v157];
                                v123 = (_WORD *)(v112 + 2 * v157);
                                do
                                {
LABEL_190:
                                  v125 = *(unsigned __int8 *)v124++;
                                  *v123++ = v125;
                                }
                                while (v123 != (_WORD *)v113);
                                goto LABEL_191;
                              }
                            }
                            else
                            {
                              v157 = 0;
                            }
                            v123 = (_WORD *)(v112 + 2 * (v156 & 0xFFFFFFFFFFFFFFF8));
                            v124 = &v28[v156 & 0xFFFFFFFFFFFFFFF8];
                            v199 = (uint8x8_t *)&v28[v157];
                            v200 = (uint16x8_t *)(v112 + 2 * v157);
                            v201 = v157 - (v156 & 0xFFFFFFFFFFFFFFF8);
                            do
                            {
                              v202 = *v199++;
                              *v200++ = vmovl_u8(v202);
                              v201 += 8;
                            }
                            while (v201);
                            if (v156 != (v156 & 0xFFFFFFFFFFFFFFF8))
                              goto LABEL_190;
                          }
LABEL_191:
                          v126 = (char *)(v113 + 2 * v51);
                          if ((v51 & 0xFFFFFFC0) != 0)
                          {
                            v127 = v113 + 2 * (v51 & 0xFFFFFFC0);
                            v128 = 0uLL;
                            do
                            {
                              v271.val[0] = *v39;
                              v129 = v39[1];
                              v276.val[0] = v39[2];
                              v130 = v39[3];
                              v39 += 4;
                              v131 = v130;
                              v276.val[1] = 0uLL;
                              v281.val[0] = v129;
                              v271.val[1] = 0uLL;
                              v132 = (char *)v113;
                              vst2q_s8(v132, v271);
                              v132 += 32;
                              v281.val[1] = 0uLL;
                              vst2q_s8(v132, v281);
                              v133 = (char *)(v113 + 64);
                              vst2q_s8(v133, v276);
                              v134 = (char *)(v113 + 96);
                              vst2q_s8(v134, *(int8x16x2_t *)(&v128 - 1));
                              v113 += 128;
                            }
                            while (v113 != v127);
                            v113 = v127;
                          }
                          if ((char *)v113 != v126)
                          {
                            v135 = (unint64_t)v61
                                 + 2 * v50
                                 + 2 * (unint64_t)v51
                                 + 2 * v19
                                 - v113
                                 + 18;
                            if (v135 < 0xE
                              || (v113 < (unint64_t)v39->u64 + (v135 >> 1) + 1
                                ? (v136 = (unint64_t)v39 >= (v135 & 0xFFFFFFFFFFFFFFFELL) + v113 + 2)
                                : (v136 = 1),
                                  !v136))
                            {
                              v139 = (char *)v113;
                              v140 = v39;
                              goto LABEL_205;
                            }
                            v137 = (v135 >> 1) + 1;
                            if (v135 >= 0x3E)
                            {
                              v138 = v137 & 0xFFFFFFFFFFFFFFE0;
                              v183 = (uint8x8_t *)&v39[1];
                              v184 = (uint16x8_t *)(v113 + 32);
                              v185 = v137 & 0xFFFFFFFFFFFFFFE0;
                              do
                              {
                                v186 = *(uint8x16_t *)v183[-2].i8;
                                v187 = vmovl_u8(*v183);
                                v188 = vmovl_high_u8(*(uint8x16_t *)v183->i8);
                                v184[-2] = vmovl_u8(*(uint8x8_t *)v186.i8);
                                v184[-1] = vmovl_high_u8(v186);
                                *v184 = v187;
                                v184[1] = v188;
                                v184 += 4;
                                v183 += 4;
                                v185 -= 32;
                              }
                              while (v185);
                              if (v137 == v138)
                                goto LABEL_206;
                              if ((v137 & 0x18) == 0)
                              {
                                v140 = (int8x16_t *)((char *)v39 + v138);
                                v139 = (char *)(v113 + 2 * v138);
                                do
                                {
LABEL_205:
                                  v141 = v140->u8[0];
                                  v140 = (int8x16_t *)((char *)v140 + 1);
                                  *(_WORD *)v139 = v141;
                                  v139 += 2;
                                }
                                while (v139 != v126);
                                goto LABEL_206;
                              }
                            }
                            else
                            {
                              v138 = 0;
                            }
                            v139 = (char *)(v113 + 2 * (v137 & 0xFFFFFFFFFFFFFFF8));
                            v140 = (int8x16_t *)((char *)v39 + (v137 & 0xFFFFFFFFFFFFFFF8));
                            v189 = (uint8x8_t *)&v39->i8[v138];
                            v190 = (uint16x8_t *)(v113 + 2 * v138);
                            v191 = v138 - (v137 & 0xFFFFFFFFFFFFFFF8);
                            do
                            {
                              v192 = *v189++;
                              *v190++ = vmovl_u8(v192);
                              v191 += 8;
                            }
                            while (v191);
                            if (v137 != (v137 & 0xFFFFFFFFFFFFFFF8))
                              goto LABEL_205;
                          }
LABEL_206:
                          if (!v64)
                          {
                            v144 = 0;
                            v145 = v126;
                            if ((v65 & 0x100000000) != 0)
                              goto LABEL_237;
                            goto LABEL_212;
                          }
                          v142 = (int8x16_t *)*((_QWORD *)v64 + 1);
                          v143 = *((unsigned int *)v64 + 1);
                          if ((*((_BYTE *)v64 + 16) & 4) == 0)
                          {
                            if ((_DWORD)v143)
                            {
                              if ((_DWORD)v143 == 1)
                              {
                                *(_WORD *)v126 = v142->i16[0];
                              }
                              else
                              {
                                v166 = v61;
                                memcpy(v126, v142, 2 * v143);
                                v64 = v264;
                                v65 = v63;
                                v61 = v166;
                              }
                            }
LABEL_236:
                            v144 = *((unsigned int *)v64 + 1);
                            v145 = &v126[2 * v144];
                            if ((v65 & 0x100000000) != 0)
                            {
LABEL_237:
                              v167 = &v145[2 * v65];
                              if (v65 >= 0x40)
                              {
                                v168 = &v145[2 * (v65 & 0xFFFFFFC0)];
                                v169 = 0uLL;
                                do
                                {
                                  v273.val[0] = *(int8x16_t *)v49;
                                  v170 = *((int8x16_t *)v49 + 1);
                                  v278.val[0] = (int8x16_t)*((_OWORD *)v49 + 2);
                                  v171 = *((_OWORD *)v49 + 3);
                                  v49 += 64;
                                  v172 = v171;
                                  v278.val[1] = 0uLL;
                                  v283.val[0] = v170;
                                  v273.val[1] = 0uLL;
                                  v173 = v145;
                                  vst2q_s8(v173, v273);
                                  v173 += 32;
                                  v283.val[1] = 0uLL;
                                  vst2q_s8(v173, v283);
                                  v174 = v145 + 64;
                                  vst2q_s8(v174, v278);
                                  v175 = v145 + 96;
                                  vst2q_s8(v175, *(int8x16x2_t *)(&v169 - 1));
                                  v145 += 128;
                                }
                                while (v145 != v168);
                                v145 = v168;
                              }
                              if (v145 != v167)
                              {
                                v176 = (WTF::StringImpl *)((char *)v61
                                                         + 2 * v144
                                                         + 2 * v50
                                                         + 2 * v51
                                                         + 2 * v19
                                                         + 2 * (unint64_t)v65)
                                     - (WTF::StringImpl *)v145
                                     + 18;
                                if (v176 < 0xE
                                  || (v145 < &v49[(v176 >> 1) + 1]
                                    ? (v177 = v49 >= &v145[(v176 & 0xFFFFFFFFFFFFFFFELL) + 2])
                                    : (v177 = 1),
                                      !v177))
                                {
                                  v180 = v145;
                                  v181 = v49;
                                  v21 = a1;
                                  goto LABEL_252;
                                }
                                v178 = (v176 >> 1) + 1;
                                if (v176 >= 0x3E)
                                {
                                  v179 = v178 & 0xFFFFFFFFFFFFFFE0;
                                  v203 = (uint8x8_t *)(v49 + 16);
                                  v204 = (uint16x8_t *)(v145 + 32);
                                  v205 = v178 & 0xFFFFFFFFFFFFFFE0;
                                  v21 = a1;
                                  do
                                  {
                                    v206 = *(uint8x16_t *)v203[-2].i8;
                                    v207 = vmovl_u8(*v203);
                                    v208 = vmovl_high_u8(*(uint8x16_t *)v203->i8);
                                    v204[-2] = vmovl_u8(*(uint8x8_t *)v206.i8);
                                    v204[-1] = vmovl_high_u8(v206);
                                    *v204 = v207;
                                    v204[1] = v208;
                                    v204 += 4;
                                    v203 += 4;
                                    v205 -= 32;
                                  }
                                  while (v205);
                                  if (v178 == v179)
                                    goto LABEL_284;
                                  if ((v178 & 0x18) == 0)
                                  {
                                    v181 = &v49[v179];
                                    v180 = &v145[2 * v179];
                                    goto LABEL_252;
                                  }
                                }
                                else
                                {
                                  v179 = 0;
                                  v21 = a1;
                                }
                                v180 = &v145[2 * (v178 & 0xFFFFFFFFFFFFFFF8)];
                                v181 = &v49[v178 & 0xFFFFFFFFFFFFFFF8];
                                v209 = (uint8x8_t *)&v49[v179];
                                v210 = (uint16x8_t *)&v145[2 * v179];
                                v211 = v179 - (v178 & 0xFFFFFFFFFFFFFFF8);
                                do
                                {
                                  v212 = *v209++;
                                  *v210++ = vmovl_u8(v212);
                                  v211 += 8;
                                }
                                while (v211);
                                if (v178 == (v178 & 0xFFFFFFFFFFFFFFF8))
                                  goto LABEL_284;
                                do
                                {
LABEL_252:
                                  v182 = *(unsigned __int8 *)v181++;
                                  *(_WORD *)v180 = v182;
                                  v180 += 2;
                                }
                                while (v180 != v167);
                                goto LABEL_284;
                              }
LABEL_250:
                              v21 = a1;
                              goto LABEL_284;
                            }
LABEL_212:
                            if ((_DWORD)v65)
                            {
                              v21 = a1;
                              if ((_DWORD)v65 == 1)
                              {
                                *(_WORD *)v145 = *(_WORD *)v49;
                              }
                              else
                              {
                                v165 = v61;
                                memcpy(v145, v49, 2 * v65);
                                v61 = v165;
                              }
                              goto LABEL_284;
                            }
                            goto LABEL_250;
                          }
                          v146 = &v126[2 * v143];
                          if (v143 < 0x40)
                          {
                            v147 = (unint64_t)v126;
                          }
                          else
                          {
                            v147 = (unint64_t)&v126[2 * (v143 & 0xFFFFFFC0)];
                            v148 = 0uLL;
                            v149 = v126;
                            do
                            {
                              v272.val[0] = *v142;
                              v150 = v142[1];
                              v277.val[0] = v142[2];
                              v151 = v142[3];
                              v142 += 4;
                              v152 = v151;
                              v277.val[1] = 0uLL;
                              v282.val[0] = v150;
                              v272.val[1] = 0uLL;
                              v153 = v149;
                              vst2q_s8(v153, v272);
                              v153 += 32;
                              v282.val[1] = 0uLL;
                              vst2q_s8(v153, v282);
                              v154 = v149 + 64;
                              vst2q_s8(v154, v277);
                              v155 = v149 + 96;
                              vst2q_s8(v155, *(int8x16x2_t *)(&v148 - 1));
                              v149 += 128;
                            }
                            while (v149 != (char *)v147);
                          }
                          if ((char *)v147 == v146)
                            goto LABEL_236;
                          v158 = (unint64_t)v61
                               + 2 * v50
                               + 2 * v143
                               + 2 * v51
                               + 2 * v19
                               - v147
                               + 18;
                          if (v158 < 0xE
                            || (v147 < (unint64_t)v142->u64 + (v158 >> 1) + 1
                              ? (v159 = (unint64_t)v142 >= (v158 & 0xFFFFFFFFFFFFFFFELL) + v147 + 2)
                              : (v159 = 1),
                                !v159))
                          {
                            v162 = (char *)v147;
                            v163 = v142;
                            goto LABEL_232;
                          }
                          v160 = (v158 >> 1) + 1;
                          if (v158 >= 0x3E)
                          {
                            v161 = v160 & 0xFFFFFFFFFFFFFFE0;
                            v238 = (uint8x8_t *)&v142[1];
                            v239 = (uint16x8_t *)(v147 + 32);
                            v240 = v160 & 0xFFFFFFFFFFFFFFE0;
                            do
                            {
                              v241 = *(uint8x16_t *)v238[-2].i8;
                              v242 = vmovl_u8(*v238);
                              v243 = vmovl_high_u8(*(uint8x16_t *)v238->i8);
                              v239[-2] = vmovl_u8(*(uint8x8_t *)v241.i8);
                              v239[-1] = vmovl_high_u8(v241);
                              *v239 = v242;
                              v239[1] = v243;
                              v239 += 4;
                              v238 += 4;
                              v240 -= 32;
                            }
                            while (v240);
                            if (v160 == v161)
                              goto LABEL_236;
                            if ((v160 & 0x18) == 0)
                            {
                              v163 = (int8x16_t *)((char *)v142 + v161);
                              v162 = (char *)(v147 + 2 * v161);
                              goto LABEL_232;
                            }
                          }
                          else
                          {
                            v161 = 0;
                          }
                          v162 = (char *)(v147 + 2 * (v160 & 0xFFFFFFFFFFFFFFF8));
                          v163 = (int8x16_t *)((char *)v142 + (v160 & 0xFFFFFFFFFFFFFFF8));
                          v244 = (uint8x8_t *)&v142->i8[v161];
                          v245 = (uint16x8_t *)(v147 + 2 * v161);
                          v246 = v161 - (v160 & 0xFFFFFFFFFFFFFFF8);
                          do
                          {
                            v247 = *v244++;
                            *v245++ = vmovl_u8(v247);
                            v246 += 8;
                          }
                          while (v246);
                          if (v160 == (v160 & 0xFFFFFFFFFFFFFFF8))
                            goto LABEL_236;
                          do
                          {
LABEL_232:
                            v164 = v163->u8[0];
                            v163 = (int8x16_t *)((char *)v163 + 1);
                            *(_WORD *)v162 = v164;
                            v162 += 2;
                          }
                          while (v162 != v146);
                          goto LABEL_236;
                        }
                        v67 = &v66[v19];
                        if (v19 < 0x40)
                        {
                          v68 = (unint64_t)v61 + 20;
                          if (v66 == v67)
                            goto LABEL_181;
                        }
                        else
                        {
                          v68 = (unint64_t)&v66[v19 & 0xFFFFFFC0];
                          v69 = 0uLL;
                          v70 = (char *)v61 + 20;
                          do
                          {
                            v269.val[0] = *(int8x16_t *)v7;
                            v71 = *((int8x16_t *)v7 + 1);
                            v274.val[0] = (int8x16_t)*((_OWORD *)v7 + 2);
                            v72 = *((_OWORD *)v7 + 3);
                            v7 += 64;
                            v73 = v72;
                            v274.val[1] = 0uLL;
                            v279.val[0] = v71;
                            v269.val[1] = 0uLL;
                            v74 = v70;
                            vst2q_s8(v74, v269);
                            v74 += 32;
                            v279.val[1] = 0uLL;
                            vst2q_s8(v74, v279);
                            v75 = v70 + 64;
                            vst2q_s8(v75, v274);
                            v76 = v70 + 96;
                            vst2q_s8(v76, *(int8x16x2_t *)(&v69 - 1));
                            v70 += 128;
                          }
                          while (v70 != (char *)v68);
                          if ((_WORD *)v68 == v67)
                            goto LABEL_181;
                        }
                        v77 = (unint64_t)v61 + 2 * v19 - v68 + 18;
                        if (v77 < 0xE
                          || (v68 < (unint64_t)&v7[(v77 >> 1) + 1]
                            ? (v78 = (unint64_t)v7 >= (v77 & 0xFFFFFFFFFFFFFFFELL) + v68 + 2)
                            : (v78 = 1),
                              !v78))
                        {
                          v81 = (_WORD *)v68;
                          v82 = v7;
                          goto LABEL_133;
                        }
                        v79 = (v77 >> 1) + 1;
                        if (v77 >= 0x3E)
                        {
                          v80 = v79 & 0xFFFFFFFFFFFFFFE0;
                          v102 = (uint8x8_t *)(v7 + 16);
                          v103 = (uint16x8_t *)(v68 + 32);
                          v104 = v79 & 0xFFFFFFFFFFFFFFE0;
                          do
                          {
                            v105 = *(uint8x16_t *)v102[-2].i8;
                            v106 = vmovl_u8(*v102);
                            v107 = vmovl_high_u8(*(uint8x16_t *)v102->i8);
                            v103[-2] = vmovl_u8(*(uint8x8_t *)v105.i8);
                            v103[-1] = vmovl_high_u8(v105);
                            *v103 = v106;
                            v103[1] = v107;
                            v103 += 4;
                            v102 += 4;
                            v104 -= 32;
                          }
                          while (v104);
                          if (v79 == v80)
                            goto LABEL_181;
                          if ((v79 & 0x18) == 0)
                          {
                            v82 = &v7[v80];
                            v81 = (_WORD *)(v68 + 2 * v80);
                            goto LABEL_133;
                          }
                        }
                        else
                        {
                          v80 = 0;
                        }
                        v81 = (_WORD *)(v68 + 2 * (v79 & 0xFFFFFFFFFFFFFFF8));
                        v82 = &v7[v79 & 0xFFFFFFFFFFFFFFF8];
                        v108 = (uint8x8_t *)&v7[v80];
                        v109 = (uint16x8_t *)(v68 + 2 * v80);
                        v110 = v80 - (v79 & 0xFFFFFFFFFFFFFFF8);
                        do
                        {
                          v111 = *v108++;
                          *v109++ = vmovl_u8(v111);
                          v110 += 8;
                        }
                        while (v110);
                        if (v79 == (v79 & 0xFFFFFFFFFFFFFFF8))
                          goto LABEL_181;
                        do
                        {
LABEL_133:
                          v83 = *(unsigned __int8 *)v82++;
                          *v81++ = v83;
                        }
                        while (v81 != v67);
                        goto LABEL_181;
                      }
                      __break(0xC471u);
LABEL_319:
                      __break(1u);
                      goto LABEL_320;
                    }
LABEL_154:
                    v39 = (int8x16_t *)"";
                    v40 = 1;
                    WTF::escapePathWithoutCopying(&v266, a2, a3, v31, v32);
                    v47 = *(_QWORD *)v21;
                    if (!*(_QWORD *)v21)
                      goto LABEL_86;
                    goto LABEL_155;
                  }
                }
                else if (v33 != 1
                       && (*(_WORD *)v34 & 0xFFDF) == 0x46
                       && v33 >= 3
                       && (*(_WORD *)(v34 + 2) & 0xFFDF) == 0x49
                       && v33 >= 4
                       && (*(_WORD *)(v34 + 4) & 0xFFDF) == 0x4C)
                {
                  v35 = *(unsigned __int16 *)(v34 + 6);
                  goto LABEL_67;
                }
              }
            }
          }
        }
LABEL_68:
        v28 = "/";
        v29 = 2;
        v21 = a1;
        if (WTF::URL::hasSpecialScheme((WTF::URL *)a1))
          goto LABEL_154;
        goto LABEL_69;
      }
    }
    else
    {
      v19 = 0x100000000;
      v7 = "";
      if ((_DWORD)a3)
        goto LABEL_18;
    }
    if (WTF::URL::hasSpecialScheme((WTF::URL *)a1))
      goto LABEL_68;
    if ((_DWORD)v12 == v14)
    {
      if (!v6)
        goto LABEL_68;
      v22 = v13 + 2;
      if ((v13 + 2) >= *(_DWORD *)(v6 + 4))
        goto LABEL_68;
      v23 = *(_QWORD *)(v6 + 8);
      if ((*(_BYTE *)(v6 + 16) & 4) != 0)
      {
        if (*(_BYTE *)(v23 + v12) != 47)
          goto LABEL_68;
        v24 = *(unsigned __int8 *)(v23 + v22);
      }
      else
      {
        if (*(_WORD *)(v23 + 2 * v12) != 47)
          goto LABEL_68;
        v24 = *(unsigned __int16 *)(v23 + 2 * v22);
      }
      if (v24 == 46)
        LODWORD(v12) = v13 + 3;
    }
    if (v14 >= v12)
      goto LABEL_68;
    goto LABEL_58;
  }
}

void WTF::escapePathWithoutCopying(WTF::StringImpl **a1, _BYTE *a2, uint64_t a3, double a4, float a5)
{
  int v5;
  size_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int *v17;
  _BYTE *v18;
  const void *v19;
  size_t v20;
  _QWORD v21[2];
  uint64_t (*v22);

  v5 = a3;
  v21[0] = a2;
  v21[1] = a3;
  v22 = WTF::escapePathWithoutCopying(WTF::StringView)::$_0::__invoke;
  v8 = a3;
  if (!(_DWORD)a3)
  {
LABEL_14:
    if (BYTE4(a3))
    {
      if (a2)
      {
        if ((_DWORD)a3)
        {
          if (!((unint64_t)a3 >> 31))
          {
            v17 = (int *)WTF::fastCompactMalloc((WTF *)(a3 + 20));
            v18 = v17 + 5;
            *v17 = 2;
            v17[1] = v5;
            *((_QWORD *)v17 + 1) = v17 + 5;
            v17[4] = 4;
            if (v8 == 1)
            {
              *v18 = *a2;
LABEL_31:
              *a1 = (WTF::StringImpl *)v17;
              return;
            }
            v19 = a2;
            v20 = v8;
            goto LABEL_30;
          }
          goto LABEL_32;
        }
        goto LABEL_27;
      }
    }
    else if (a2)
    {
      if ((_DWORD)a3)
      {
        if (a3 < 0x7FFFFFF0uLL)
        {
          v17 = (int *)WTF::fastCompactMalloc((WTF *)(2 * a3 + 20));
          v18 = v17 + 5;
          *v17 = 2;
          v17[1] = v5;
          *((_QWORD *)v17 + 1) = v17 + 5;
          v17[4] = 0;
          if (v8 == 1)
          {
            *(_WORD *)v18 = *(_WORD *)a2;
            goto LABEL_31;
          }
          v19 = a2;
          v20 = 2 * v8;
LABEL_30:
          memcpy(v18, v19, v20);
          goto LABEL_31;
        }
LABEL_32:
        __break(0xC471u);
        JUMPOUT(0x197B2E664);
      }
LABEL_27:
      v17 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_31;
    }
    v17 = 0;
    goto LABEL_31;
  }
  if (BYTE4(a3))
  {
    v9 = a3;
    v10 = a2;
    while (1)
    {
      v12 = *v10++;
      v11 = v12;
      if (v12 == 35 || v11 == 63 || (char)v11 < 0)
        break;
      if (!--v9)
        goto LABEL_14;
    }
  }
  else
  {
    v13 = (unsigned __int16 *)a2;
    v14 = a3;
    while (1)
    {
      v16 = *v13++;
      v15 = v16;
      if (v16 == 35 || v15 == 63 || v15 > 0x7F)
        break;
      if (!--v14)
        goto LABEL_14;
    }
  }
  WTF::percentEncodeCharacters<WTF::StringView>(WTF::StringView const&,BOOL (*)(char16_t))::{lambda(WTF::StringView const&)#1}::operator()(a1, (unsigned int (**)(_QWORD))&v22, (uint64_t)v21, a4, a5);
}

const char *WTF::URL::viewWithoutQueryOrFragmentIdentifier(WTF::URL *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if (v1 && *(_DWORD *)(v1 + 4))
      return *(const char **)(v1 + 8);
    else
      return "";
  }
  else if (v1)
  {
    return *(const char **)(v1 + 8);
  }
  else
  {
    return 0;
  }
}

const char *WTF::URL::viewWithoutFragmentIdentifier(WTF::URL *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if (v1 && *(_DWORD *)(v1 + 4))
      return *(const char **)(v1 + 8);
    else
      return "";
  }
  else if (v1)
  {
    return *(const char **)(v1 + 8);
  }
  else
  {
    return 0;
  }
}

_QWORD *WTF::URL::stringWithoutFragmentIdentifier@<X0>(_QWORD *this@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  _DWORD *v3;
  unsigned int v4;

  v2 = this;
  if ((this[1] & 1) != 0)
  {
    this = (_QWORD *)*this;
    if (*v2)
    {
      v4 = *((_DWORD *)v2 + 9);
      if (*((_DWORD *)this + 1) <= v4)
      {
        *(_DWORD *)this += 2;
        *a2 = (uint64_t)this;
      }
      else
      {
        return WTF::StringImpl::substring(this, 0, v4, a2);
      }
    }
    else
    {
      *a2 = 0;
    }
  }
  else
  {
    v3 = (_DWORD *)*this;
    if (*this)
      *v3 += 2;
    *a2 = (uint64_t)v3;
  }
  return this;
}

BOOL WTF::equalIgnoringFragmentIdentifier(WTF *this, const WTF::URL *a2, const WTF::URL *a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v3 = *(_QWORD *)this;
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if (v3 && (v8 = *(unsigned int *)(v3 + 4), (_DWORD)v8))
    {
      v4 = *(unsigned __int8 **)(v3 + 8);
      v10 = *((unsigned int *)this + 9);
      v11 = (*(_DWORD *)(v3 + 16) >> 2) & 1;
      if (v10 >= v8)
        v5 = v8 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v11 & 1) << 32);
      else
        v5 = (v11 << 32) | v10;
    }
    else
    {
      v5 = 0x100000000;
      v4 = "";
    }
    v6 = HIDWORD(v5);
    v7 = *(_QWORD *)a2;
    if ((*((_BYTE *)a2 + 8) & 1) == 0)
      goto LABEL_19;
  }
  else if (v3)
  {
    v4 = *(unsigned __int8 **)(v3 + 8);
    LODWORD(v5) = *(_DWORD *)(v3 + 4);
    v6 = ((unint64_t)*(unsigned int *)(v3 + 16) >> 2) & 1;
    v7 = *(_QWORD *)a2;
    if ((*((_BYTE *)a2 + 8) & 1) == 0)
    {
LABEL_19:
      if (v7)
      {
        v13 = *(unsigned __int8 **)(v7 + 8);
        v16 = v5 | (unint64_t)(v6 << 32);
        v17 = *(unsigned int *)(v7 + 4) | ((((unint64_t)*(unsigned int *)(v7 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v13 = 0;
        v16 = v5 | (unint64_t)(v6 << 32);
        v17 = 0x100000000;
      }
      return WTF::operator==(v4, v16, v13, v17);
    }
  }
  else
  {
    LODWORD(v5) = 0;
    v4 = 0;
    v6 = 1;
    v7 = *(_QWORD *)a2;
    if ((*((_BYTE *)a2 + 8) & 1) == 0)
      goto LABEL_19;
  }
  if (v7 && (v12 = *(unsigned int *)(v7 + 4), (_DWORD)v12))
  {
    v13 = *(unsigned __int8 **)(v7 + 8);
    v14 = *((unsigned int *)a2 + 9);
    v15 = (*(_DWORD *)(v7 + 16) >> 2) & 1;
    v16 = v5 | (unint64_t)(v6 << 32);
    if (v14 >= v12)
      v17 = v12 | ((v12 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v15 & 1) << 32)) >> 32 << 32);
    else
      v17 = v14 | (((v15 << 32) | v14) >> 32 << 32);
  }
  else
  {
    v13 = "";
    v16 = v5 | (unint64_t)(v6 << 32);
    v17 = 0x100000000;
  }
  return WTF::operator==(v4, v16, v13, v17);
}

uint64_t WTF::protocolHostAndPortAreEqual(WTF *this, const WTF::URL *a2, const WTF::URL *a3)
{
  unsigned int v3;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  _BOOL4 v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  _BOOL4 v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = *((_DWORD *)this + 2);
  if ((*((_DWORD *)a2 + 2) ^ v3) > 0x3F)
    return 0;
  v5 = *((_DWORD *)this + 5);
  v6 = *((_DWORD *)this + 6);
  v7 = v5 == *((_DWORD *)this + 3) ? *((_DWORD *)this + 5) : v5 + 1;
  v8 = v6 - v7;
  v9 = *((_DWORD *)a2 + 3);
  v10 = *((_DWORD *)a2 + 5);
  v11 = v10 == v9;
  v12 = v10 != v9;
  v13 = v11 ? *((_DWORD *)a2 + 5) : v10 + 1;
  if ((_DWORD)v8 != *((_DWORD *)a2 + 6) - v13)
    return 0;
  if (v3 >= 0x40)
  {
    LODWORD(v19) = v3 >> 6;
    v20 = *(_QWORD *)this;
    v21 = *(_QWORD *)a2;
    if (!*(_QWORD *)this)
    {
      if (v21)
      {
        v38 = 0;
        if (v19 <= 1)
          v39 = 1;
        else
          v39 = v19;
        while (1)
        {
          if (v38 < *(unsigned int *)(v21 + 4))
          {
            v40 = *(_QWORD *)(v21 + 8);
            if ((*(_BYTE *)(v21 + 16) & 4) != 0)
            {
              if (*(unsigned __int8 *)(v40 + v38) | (32 * (*(unsigned __int8 *)(v40 + v38) - 65 < 0x1A)))
                return 0;
            }
            else if (*(unsigned __int16 *)(v40 + 2 * v38) | (32
                                                            * (*(unsigned __int16 *)(v40 + 2 * v38) - 65 < 0x1A)))
            {
              return 0;
            }
          }
          if (v39 == ++v38)
            goto LABEL_10;
        }
      }
      goto LABEL_10;
    }
    v22 = *(unsigned int *)(v20 + 4);
    if (!v21)
    {
      if (v19 <= 1)
        v41 = 1;
      else
        v41 = v19;
      while (1)
      {
        if (v21 < v22)
        {
          v42 = *(_QWORD *)(v20 + 8);
          if ((*(_BYTE *)(v20 + 16) & 4) != 0)
          {
            if (*(unsigned __int8 *)(v42 + v21) | (32 * (*(unsigned __int8 *)(v42 + v21) - 65 < 0x1A)))
              return 0;
          }
          else if (*(unsigned __int16 *)(v42 + 2 * v21) | (32
                                                          * (*(unsigned __int16 *)(v42 + 2 * v21) - 65 < 0x1A)))
          {
            return 0;
          }
        }
        if (v41 == ++v21)
          goto LABEL_10;
      }
    }
    v23 = 0;
    v24 = *(unsigned int *)(v21 + 4);
    if (v19 <= 1)
      v19 = 1;
    else
      v19 = v19;
    do
    {
      if (v23 >= v22)
      {
        v26 = 0;
        v27 = 0;
        if (v23 < v24)
          goto LABEL_26;
      }
      else
      {
        v25 = *(_QWORD *)(v20 + 8);
        if ((*(_BYTE *)(v20 + 16) & 4) != 0)
        {
          v26 = *(unsigned __int8 *)(v25 + v23);
          v27 = (v26 - 65) < 0x1A;
          if (v23 < v24)
          {
LABEL_26:
            v28 = *(_QWORD *)(v21 + 8);
            if ((*(_BYTE *)(v21 + 16) & 4) != 0)
              v29 = *(unsigned __int8 *)(v28 + v23);
            else
              v29 = *(unsigned __int16 *)(v28 + 2 * v23);
            goto LABEL_31;
          }
        }
        else
        {
          v26 = *(unsigned __int16 *)(v25 + 2 * v23);
          v27 = (v26 - 65) < 0x1A;
          if (v23 < v24)
            goto LABEL_26;
        }
      }
      v29 = 0;
LABEL_31:
      if ((v26 | (32 * v27)) != (v29 | (32 * ((v29 - 65) < 0x1A))))
        return 0;
      ++v23;
    }
    while (v19 != v23);
  }
LABEL_10:
  if (v6 != v7)
  {
    v30 = *(_QWORD *)this;
    v31 = *(_QWORD *)a2;
    v32 = v10 + v12;
    do
    {
      if (v30 && *(_DWORD *)(v30 + 4) > v7)
      {
        v33 = *(_QWORD *)(v30 + 8);
        if ((*(_BYTE *)(v30 + 16) & 4) != 0)
        {
          v34 = *(unsigned __int8 *)(v33 + v7);
          v35 = (v34 - 65) < 0x1A;
          if (!v31)
            goto LABEL_45;
        }
        else
        {
          v34 = *(unsigned __int16 *)(v33 + 2 * v7);
          v35 = (v34 - 65) < 0x1A;
          if (!v31)
            goto LABEL_45;
        }
      }
      else
      {
        v34 = 0;
        v35 = 0;
        if (!v31)
          goto LABEL_45;
      }
      if (*(_DWORD *)(v31 + 4) > v32)
      {
        v36 = *(_QWORD *)(v31 + 8);
        if ((*(_BYTE *)(v31 + 16) & 4) != 0)
          v37 = *(unsigned __int8 *)(v36 + v32);
        else
          v37 = *(unsigned __int16 *)(v36 + 2 * v32);
        goto LABEL_46;
      }
LABEL_45:
      v37 = 0;
LABEL_46:
      if ((v34 | (32 * v35)) != (v37 | (32 * ((v37 - 65) < 0x1A))))
        return 0;
      ++v32;
      ++v7;
      --v8;
    }
    while (v8);
  }
  v14 = WTF::URL::port((uint64_t *)this);
  v15 = WTF::URL::port((uint64_t *)a2);
  v16 = ((v14 & 0xFFFF0000) != 0) ^ ((v15 & 0xFFFF0000) != 0);
  v17 = (unsigned __int16)v14 != (unsigned __int16)v15;
  if (v15 < 0x10000)
    v17 = ((v14 & 0xFFFF0000) != 0) ^ ((v15 & 0xFFFF0000) != 0);
  if (v14 >= 0x10000)
    v16 = v17;
  return v16 ^ 1u;
}

uint64_t WTF::URL::isMatchingDomain(uint64_t result, uint64_t a2, void *a3, StringView a4)
{
  uint64_t v4;
  int v6;
  StringView v7;
  WTF *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;

  v4 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
    return 0;
  if (!(_DWORD)a3)
    return 1;
  v6 = *(_DWORD *)(result + 8);
  if ((v6 & 2) == 0)
    return 0;
  *(_QWORD *)&v7.m_length = a2;
  if ((v6 & 1) == 0)
  {
    v8 = 0;
    v9 = 0x100000000;
    goto LABEL_21;
  }
  LODWORD(v10) = *(_DWORD *)(result + 20);
  if ((_DWORD)v10 == *(_DWORD *)(result + 12))
    v10 = v10;
  else
    v10 = (v10 + 1);
  v11 = *(unsigned int *)(v4 + 4);
  if (v10 >= v11)
  {
    v9 = 0x100000000;
    v8 = (WTF *)"";
  }
  else
  {
    v12 = *(unsigned int *)(v4 + 16);
    v8 = *(WTF **)(v4 + 8);
    v13 = *(_DWORD *)(result + 24) - v10;
    if ((int)v11 - (int)v10 > v13 || (v13 = v11 - v10, (_DWORD)v10))
    {
      v14 = (v12 >> 2) & 1;
      v15 = v11 - v10;
      v9 = v13;
      if ((_DWORD)v14)
      {
        if (v15 >= v13)
        {
          v8 = (WTF *)((char *)v8 + v10);
          v9 = v13 | 0x100000000;
          goto LABEL_21;
        }
LABEL_30:
        __break(1u);
        return result;
      }
      if (v15 < v13)
        goto LABEL_30;
      v8 = (WTF *)((char *)v8 + 2 * v10);
    }
    else
    {
      v9 = v11 & 0xFFFFFFFEFFFFFFFFLL | (((v12 >> 2) & 1) << 32);
    }
  }
LABEL_21:
  v7.m_characters = (void *)v9;
  a4.m_characters = a3;
  result = WTF::endsWith(v8, v7, a4);
  if ((_DWORD)result)
  {
    if ((_DWORD)v9 == (_DWORD)a3)
      return 1;
    v16 = v9 + ~(_DWORD)a3;
    if ((v9 & 0x100000000) != 0)
    {
      if (v16 < v9)
        return *((unsigned __int8 *)v8 + v16) == 46;
    }
    else if (v16 < v9)
    {
      return *((unsigned __int16 *)v8 + v16) == 46;
    }
    goto LABEL_30;
  }
  return result;
}

void WTF::encodeWithURLEscapeSequences(WTF *this@<X0>, WTF::StringImpl **a2@<X8>, double a3@<D0>, float a4@<S1>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t (*v10);

  v10 = WTF::URLParser::isInUserInfoEncodeSet;
  v5 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_11;
  v6 = *(unsigned int *)(v5 + 4);
  if (!(_DWORD)v6)
  {
LABEL_10:
    *(_DWORD *)v5 += 2;
LABEL_11:
    *a2 = (WTF::StringImpl *)v5;
    return;
  }
  v7 = 0;
  v8 = *(_QWORD *)(v5 + 8);
  while (1)
  {
    v9 = (*(_DWORD *)(v5 + 16) & 4) != 0 ? *(unsigned __int8 *)(v8 + v7) : *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 > 0x7E || (WTF::characterClassTable[v9] & 1) != 0)
      break;
    if (v6 == ++v7)
      goto LABEL_10;
  }
  WTF::percentEncodeCharacters<WTF::String>(WTF::String const&,BOOL (*)(char16_t))::{lambda(WTF::String const&)#1}::operator()(a2, (unsigned int (**)(_QWORD))&v10, v5, a3, a4);
}

void WTF::percentEncodeFragmentDirectiveSpecialCharacters(WTF *this@<X0>, WTF::StringImpl **a2@<X8>, double a3@<D0>, float a4@<S1>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  BOOL (*v10)(__int16);

  v10 = WTF::URLParser::isSpecialCharacterForFragmentDirective;
  v5 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_10;
  v6 = *(unsigned int *)(v5 + 4);
  if (!(_DWORD)v6)
  {
LABEL_9:
    *(_DWORD *)v5 += 2;
LABEL_10:
    *a2 = (WTF::StringImpl *)v5;
    return;
  }
  v7 = 0;
  v8 = *(_QWORD *)(v5 + 8);
  while (1)
  {
    v9 = (*(_DWORD *)(v5 + 16) & 4) != 0 ? *(unsigned __int8 *)(v8 + v7) : *(_WORD *)(v8 + 2 * v7);
    if ((v9 & 0xFFFE) == 0x2C)
      break;
    if (v6 == ++v7)
      goto LABEL_9;
  }
  WTF::percentEncodeCharacters<WTF::String>(WTF::String const&,BOOL (*)(char16_t))::{lambda(WTF::String const&)#1}::operator()(a2, (unsigned int (**)(_QWORD))&v10, v5, a3, a4);
}

BOOL WTF::protocolIs(unsigned __int16 *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v8;

  v3 = a2;
  if (!(_DWORD)a2)
    return 0;
  v4 = 1;
  if ((a2 & 0xFF00000000) == 0)
  {
    while (1)
    {
      v8 = *a1++;
      v5 = v8;
      if ((v4 & 1) != 0)
      {
        if (v5 < 0x21)
        {
          v4 = 1;
          goto LABEL_18;
        }
      }
      else if (v5 <= 0xD && ((1 << v5) & 0x2600) != 0)
      {
        v4 = 0;
        goto LABEL_18;
      }
      if (!*a3)
        return v5 == 58;
      v4 = 0;
      if ((v5 | 0x20) != (unsigned __int16)(char)*a3)
        return 0;
      ++a3;
LABEL_18:
      if (!--v3)
        return 0;
    }
  }
  while (1)
  {
    v6 = *(unsigned __int8 *)a1;
    a1 = (unsigned __int16 *)((char *)a1 + 1);
    v5 = v6;
    if ((v4 & 1) != 0)
    {
      if (v5 < 0x21)
      {
        v4 = 1;
        goto LABEL_5;
      }
    }
    else if (v5 <= 0xD && ((1 << v5) & 0x2600) != 0)
    {
      v4 = 0;
      goto LABEL_5;
    }
    if (!*a3)
      return v5 == 58;
    v4 = 0;
    if ((v5 | 0x20) != (char)*a3)
      return 0;
    ++a3;
LABEL_5:
    if (!--v3)
      return 0;
  }
}

uint64_t WTF::URL::dump(WTF::URL *this, WTF::PrintStream *a2)
{
  WTF *v4;
  const WTF::String *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  float v12;

  v4 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::printInternal(v4, this, v5, v6, v7, v8, v9, v10, v11, v12);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t WTF::URL::strippedForUseAsReferrer@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  int8x16_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int8x16_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;

  if ((*(_BYTE *)(this + 8) & 1) == 0)
  {
    v3 = *(_QWORD *)this;
    if (!*(_QWORD *)this)
    {
LABEL_4:
      *(_QWORD *)a2 = v3;
      *(_BYTE *)(a2 + 8) = 0;
      return this;
    }
LABEL_3:
    *(_DWORD *)v3 += 2;
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(this + 20);
  v3 = *(_QWORD *)this;
  if ((_DWORD)v4 != *(_DWORD *)(this + 24))
  {
    if (!v3)
    {
      if (*(_DWORD *)(this + 12) == (_DWORD)v4)
      {
        v7 = *(_DWORD *)(this + 36);
LABEL_36:
        v3 = 0;
        if (!v7)
          goto LABEL_4;
        v20 = 0x100000000;
        v19 = (int8x16_t *)"";
LABEL_38:
        v21 = 0x100000000;
        v11 = (int8x16_t *)"";
        if ((v20 & 0x80000000) != 0)
          goto LABEL_55;
        goto LABEL_51;
      }
LABEL_40:
      v20 = 0x100000000;
      v19 = (int8x16_t *)"";
      goto LABEL_38;
    }
    if (*(_DWORD *)(v3 + 4) > v4)
    {
      v5 = *(_QWORD *)(v3 + 8);
      v6 = (*(_BYTE *)(v3 + 16) & 4) != 0 ? *(unsigned __int8 *)(v5 + v4) : *(unsigned __int16 *)(v5 + 2 * v4);
      if (v6 == 64)
        LODWORD(v4) = v4 + 1;
    }
  }
  v8 = *(unsigned int *)(this + 12);
  if ((_DWORD)v8 != (_DWORD)v4)
  {
    if (v3)
    {
      v9 = *(_DWORD *)(v3 + 4);
      goto LABEL_22;
    }
    goto LABEL_40;
  }
  v7 = *(_DWORD *)(this + 36);
  if (!v3)
    goto LABEL_36;
  v9 = *(_DWORD *)(v3 + 4);
  if (v7 == v9)
    goto LABEL_3;
LABEL_22:
  v10 = *(unsigned int *)(v3 + 16);
  v11 = *(int8x16_t **)(v3 + 8);
  v12 = (v10 >> 2) & 1;
  v13 = v9 | (unint64_t)(v12 << 32);
  v14 = v9 | ((unint64_t)(v12 & 1) << 32);
  v15 = v8 >= v9;
  v16 = (v12 << 32) | v8;
  if (v15)
    v17 = v9 | ((unint64_t)(v12 & 1) << 32);
  else
    v17 = v16;
  if (v9)
    v18 = v14;
  else
    v18 = v13;
  if (v9)
    v19 = v11;
  else
    v19 = (int8x16_t *)"";
  if (v9)
    v20 = v17;
  else
    v20 = 0x100000000;
  if (v18 <= v4)
    goto LABEL_38;
  v22 = *(_DWORD *)(this + 36) - v4;
  if ((int)v18 - (int)v4 > v22 || (v22 = v18 - v4, (_DWORD)v4))
  {
    v21 = v22;
    v23 = v18 - (unint64_t)v4;
    if ((v18 & 0x100000000) != 0)
    {
      if (v23 >= v22)
      {
        v11 = (int8x16_t *)((char *)v11 + v4);
        v21 = v22 | 0x100000000;
        if (((v22 | v20) & 0x80000000) != 0)
          goto LABEL_55;
        goto LABEL_51;
      }
    }
    else if (v23 >= v22)
    {
      v11 = (int8x16_t *)((char *)v11 + 2 * v4);
      if (((v22 | v20) & 0x80000000) != 0)
        goto LABEL_55;
      goto LABEL_51;
    }
    __break(1u);
    goto LABEL_55;
  }
  v21 = v18;
  if (((v18 | v20) & 0x80000000) != 0)
  {
LABEL_55:
    *(_QWORD *)a2 = 0;
    goto LABEL_56;
  }
LABEL_51:
  this = (v20 + v21);
  if (__OFADD__((_DWORD)v20, (_DWORD)v21))
    goto LABEL_55;
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(this, HIDWORD(v20) & HIDWORD(v21), v19, v20, v11, v21, (int **)a2);
  if (*(_QWORD *)a2)
  {
    *(_BYTE *)(a2 + 8) = 1;
    return this;
  }
LABEL_56:
  __break(0xC471u);
  return this;
}

unint64_t WTF::URL::strippedForUseAsReferrerWithExplicitPort@<X0>(unint64_t this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, unint64_t a8@<X8>)
{
  uint64_t v8;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  unint64_t v26;
  int8x16_t *v27;
  unint64_t v28;
  unint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned int v47;
  BOOL v48;
  BOOL v49;
  int v50;
  int v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  char v60;

  v8 = this;
  v10 = *(unsigned int *)(this + 8);
  if ((v10 & 1) != 0)
  {
    if ((v10 & 0x38) != 0)
      return WTF::URL::strippedForUseAsReferrer(v8, a8);
    v12 = *(_DWORD **)this;
    if (*(_QWORD *)this && (v13 = v12[1], (_DWORD)v13))
    {
      v14 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
      v15 = v10 >> 6;
      v16 = (v12[4] >> 2) & 1;
      if (v15 >= v13)
      {
        v17 = WTF::defaultPortForProtocol(v14, v13 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v16 & 1) << 32), a2, a3, a4, a5, a6, a7);
        if ((v17 & 0xFF0000) == 0)
          return WTF::URL::strippedForUseAsReferrer(v8, a8);
      }
      else
      {
        v17 = WTF::defaultPortForProtocol(v14, (v16 << 32) | v15, a2, a3, a4, a5, a6, a7);
        if ((v17 & 0xFF0000) == 0)
          return WTF::URL::strippedForUseAsReferrer(v8, a8);
      }
    }
    else
    {
      v17 = WTF::defaultPortForProtocol("", 0x100000000, a2, a3, a4, a5, a6, a7);
      if ((v17 & 0xFF0000) == 0)
        return WTF::URL::strippedForUseAsReferrer(v8, a8);
    }
    v18 = *(unsigned int *)(v8 + 20);
    v19 = *(unsigned int *)(v8 + 24);
    v20 = *(_QWORD *)v8;
    if ((_DWORD)v18 != (_DWORD)v19)
    {
      if (!v20)
      {
        if (*(_DWORD *)(v8 + 12) == (_DWORD)v18)
        {
          LODWORD(v23) = *(_DWORD *)(v8 + 36);
          goto LABEL_50;
        }
LABEL_52:
        v27 = 0;
        v31 = 0x100000000;
        v37 = 0x100000000;
        v30 = (int8x16_t *)"";
        goto LABEL_53;
      }
      if (*(_DWORD *)(v20 + 4) > v18)
      {
        v21 = *(_QWORD *)(v20 + 8);
        v22 = (*(_BYTE *)(v20 + 16) & 4) != 0 ? *(unsigned __int8 *)(v21 + v18) : *(unsigned __int16 *)(v21 + 2 * v18);
        if (v22 == 64)
          LODWORD(v18) = v18 + 1;
      }
    }
    if (*(_DWORD *)(v8 + 12) == (_DWORD)v18)
    {
      v23 = *(unsigned int *)(v8 + 36);
      if (v20)
      {
        v24 = *(_DWORD *)(v20 + 4);
        if ((_DWORD)v23 == v24)
        {
          v25 = 0;
          v26 = ((unint64_t)*(unsigned int *)(v20 + 16) >> 2) & 1;
          v27 = *(int8x16_t **)(v20 + 8);
          v28 = (v26 << 32) | v19;
          if (v23 <= v19)
            v28 = v23 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*(unsigned int *)(v20 + 16) >> 2) & 1) << 32);
          v29 = v23 | (v26 << 32);
          if ((_DWORD)v23)
          {
            v29 = v23 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*(unsigned int *)(v20 + 16) >> 2) & 1) << 32);
            v30 = *(int8x16_t **)(v20 + 8);
          }
          else
          {
            v30 = (int8x16_t *)"";
          }
          if ((_DWORD)v23)
            v31 = v28;
          else
            v31 = 0x100000000;
LABEL_63:
          v41 = *(_DWORD *)(v8 + 8);
          v42 = ((v41 >> 3) & 7) + v19;
          if ((_DWORD)v42 == (v41 >> 6) + 1 && (v25 & 1) == 0)
          {
            v43 = v42 + 1;
            if ((v42 + 1) < *(_DWORD *)(v20 + 4))
            {
              v44 = *(_QWORD *)(v20 + 8);
              if ((*(_BYTE *)(v20 + 16) & 4) != 0)
              {
                if (*(_BYTE *)(v44 + v42) == 47)
                {
                  v45 = *(unsigned __int8 *)(v44 + v43);
LABEL_84:
                  if (v45 == 46)
                    LODWORD(v42) = v42 + 2;
                }
              }
              else if (*(_WORD *)(v44 + 2 * v42) == 47)
              {
                v45 = *(unsigned __int16 *)(v44 + 2 * v43);
                goto LABEL_84;
              }
            }
          }
          v53 = (v29 - v42);
          if (v29 <= v42)
          {
            v53 = 0x100000000;
            v27 = (int8x16_t *)"";
            goto LABEL_95;
          }
          if (!(_DWORD)v42)
          {
            v53 = v29;
            goto LABEL_95;
          }
          v54 = v42;
          v55 = v29 - (unint64_t)v42;
          if ((v29 & 0x100000000) != 0)
          {
            if (v55 >= v53)
            {
              v27 = (int8x16_t *)((char *)v27 + v54);
              v53 |= 0x100000000uLL;
              goto LABEL_95;
            }
            goto LABEL_107;
          }
          if (v55 >= v53)
          {
            v27 = (int8x16_t *)((char *)v27 + 2 * v54);
LABEL_95:
            v56 = 0;
            v57 = (unsigned __int16)v17;
            do
            {
              ++v56;
              v48 = v57 > 9;
              v57 /= 0xAu;
            }
            while (v48);
            if (((v56 | v53) & 0x80000000) != 0
              || (v49 = __OFADD__(v56, (_DWORD)v53), v58 = v56 + v53, v49)
              || ((v49 = __OFADD__(v58, 1), v59 = v58 + 1, !v49) ? (v60 = 0) : (v60 = 1),
                  (v31 & 0x80000000) != 0 || (v60 & 1) != 0 || __OFADD__((_DWORD)v31, v59)))
            {
              *(_QWORD *)a8 = 0;
              __break(0xC471u);
              JUMPOUT(0x197B2F748);
            }
            this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(a8, (int)v31 + v59, HIDWORD(v31) & HIDWORD(v53), v30, v31, (unsigned __int16)v17, v27, v53);
            if (*(_QWORD *)a8)
              goto LABEL_106;
            goto LABEL_110;
          }
LABEL_107:
          __break(1u);
          goto LABEL_108;
        }
        goto LABEL_38;
      }
LABEL_50:
      v27 = 0;
      v31 = 0x100000000;
      v30 = (int8x16_t *)"";
      if (!(_DWORD)v23)
      {
        v25 = 1;
        v29 = 0x100000000;
        goto LABEL_63;
      }
      v37 = 0x100000000;
LABEL_53:
      if (v37 <= v18)
      {
        v39 = 0x100000000;
        v27 = (int8x16_t *)"";
      }
      else
      {
        v38 = *(_DWORD *)(v8 + 36) - v18;
        if ((int)v37 - (int)v18 > v38 || (v38 = v37 - v18, (_DWORD)v18))
        {
          v39 = v38;
          v40 = v37 - (unint64_t)v18;
          if ((v37 & 0x100000000) != 0)
          {
            if (v40 < v38)
              goto LABEL_107;
            v27 = (int8x16_t *)((char *)v27 + v18);
            v39 = v38 | 0x100000000;
          }
          else
          {
            if (v40 < v38)
              goto LABEL_107;
            v27 = (int8x16_t *)((char *)v27 + 2 * v18);
          }
        }
        else
        {
          v39 = v37;
        }
      }
      v46 = 0;
      v47 = (unsigned __int16)v17;
      do
      {
        ++v46;
        v48 = v47 > 9;
        v47 /= 0xAu;
      }
      while (v48);
      if (((v46 | v39) & 0x80000000) == 0)
      {
        v49 = __OFADD__(v46, (_DWORD)v39);
        v50 = v46 + v39;
        if (!v49)
        {
          v49 = __OFADD__(v50, 1);
          v51 = v50 + 1;
          v52 = v49;
          if ((v31 & 0x80000000) == 0 && !v52 && !__OFADD__((_DWORD)v31, v51))
          {
            this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(a8, (int)v31 + v51, HIDWORD(v31) & HIDWORD(v39), v30, v31, (unsigned __int16)v17, v27, v39);
            if (*(_QWORD *)a8)
            {
LABEL_106:
              *(_BYTE *)(a8 + 8) = 1;
              return this;
            }
LABEL_110:
            __break(0xC471u);
            JUMPOUT(0x197B2F73CLL);
          }
        }
      }
LABEL_108:
      *(_QWORD *)a8 = 0;
      goto LABEL_110;
    }
    if (v20)
    {
      v24 = *(_DWORD *)(v20 + 4);
LABEL_38:
      v27 = *(int8x16_t **)(v20 + 8);
      v32 = ((unint64_t)*(unsigned int *)(v20 + 16) >> 2) & 1;
      v33 = v24 | (v32 << 32);
      v34 = v24 | ((v32 & 1) << 32);
      v35 = (v32 << 32) | v19;
      if (v19 < v24)
        v36 = v35;
      else
        v36 = v34;
      if (v24)
        v37 = v34;
      else
        v37 = v33;
      if (v24)
        v30 = v27;
      else
        v30 = (int8x16_t *)"";
      if (v24)
        v31 = v36;
      else
        v31 = 0x100000000;
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  v11 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v11 += 2;
  *(_QWORD *)a8 = v11;
  *(_BYTE *)(a8 + 8) = 0;
  return this;
}

uint64_t WTF::URL::strippedForUseAsReport@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  int8x16_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int8x16_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;

  if ((*(_BYTE *)(this + 8) & 1) == 0)
  {
    v3 = *(_QWORD *)this;
    if (!*(_QWORD *)this)
    {
LABEL_4:
      *a2 = (int *)v3;
      return this;
    }
LABEL_3:
    *(_DWORD *)v3 += 2;
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(this + 20);
  v3 = *(_QWORD *)this;
  if ((_DWORD)v4 != *(_DWORD *)(this + 24))
  {
    if (!v3)
    {
      if (*(_DWORD *)(this + 12) == (_DWORD)v4)
      {
        v7 = *(_DWORD *)(this + 32);
LABEL_36:
        v3 = 0;
        if (!v7)
          goto LABEL_4;
        v20 = 0x100000000;
        v19 = (int8x16_t *)"";
LABEL_38:
        v21 = 0x100000000;
        v11 = (int8x16_t *)"";
        if ((v20 & 0x80000000) != 0)
          goto LABEL_54;
        goto LABEL_51;
      }
LABEL_40:
      v20 = 0x100000000;
      v19 = (int8x16_t *)"";
      goto LABEL_38;
    }
    if (*(_DWORD *)(v3 + 4) > v4)
    {
      v5 = *(_QWORD *)(v3 + 8);
      v6 = (*(_BYTE *)(v3 + 16) & 4) != 0 ? *(unsigned __int8 *)(v5 + v4) : *(unsigned __int16 *)(v5 + 2 * v4);
      if (v6 == 64)
        LODWORD(v4) = v4 + 1;
    }
  }
  v8 = *(unsigned int *)(this + 12);
  if ((_DWORD)v8 != (_DWORD)v4)
  {
    if (v3)
    {
      v9 = *(_DWORD *)(v3 + 4);
      goto LABEL_22;
    }
    goto LABEL_40;
  }
  v7 = *(_DWORD *)(this + 32);
  if (!v3)
    goto LABEL_36;
  v9 = *(_DWORD *)(v3 + 4);
  if (v7 == v9)
    goto LABEL_3;
LABEL_22:
  v10 = *(unsigned int *)(v3 + 16);
  v11 = *(int8x16_t **)(v3 + 8);
  v12 = (v10 >> 2) & 1;
  v13 = v9 | (unint64_t)(v12 << 32);
  v14 = v9 | ((unint64_t)(v12 & 1) << 32);
  v15 = v8 >= v9;
  v16 = (v12 << 32) | v8;
  if (v15)
    v17 = v9 | ((unint64_t)(v12 & 1) << 32);
  else
    v17 = v16;
  if (v9)
    v18 = v14;
  else
    v18 = v13;
  if (v9)
    v19 = v11;
  else
    v19 = (int8x16_t *)"";
  if (v9)
    v20 = v17;
  else
    v20 = 0x100000000;
  if (v18 <= v4)
    goto LABEL_38;
  v22 = *(_DWORD *)(this + 32) - v4;
  if ((int)v18 - (int)v4 > v22 || (v22 = v18 - v4, (_DWORD)v4))
  {
    v21 = v22;
    v23 = v18 - (unint64_t)v4;
    if ((v18 & 0x100000000) != 0)
    {
      if (v23 >= v22)
      {
        v11 = (int8x16_t *)((char *)v11 + v4);
        v21 = v22 | 0x100000000;
        if (((v22 | v20) & 0x80000000) != 0)
          goto LABEL_54;
        goto LABEL_51;
      }
    }
    else if (v23 >= v22)
    {
      v11 = (int8x16_t *)((char *)v11 + 2 * v4);
      if (((v22 | v20) & 0x80000000) != 0)
        goto LABEL_54;
      goto LABEL_51;
    }
LABEL_56:
    __break(1u);
    return this;
  }
  v21 = v18;
  if (((v18 | v20) & 0x80000000) != 0)
  {
LABEL_54:
    *a2 = 0;
    goto LABEL_55;
  }
LABEL_51:
  this = (v20 + v21);
  if (__OFADD__((_DWORD)v20, (_DWORD)v21))
    goto LABEL_54;
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(this, HIDWORD(v20) & HIDWORD(v21), v19, v20, v11, v21, a2);
  if (!*a2)
  {
LABEL_55:
    __break(0xC471u);
    goto LABEL_56;
  }
  return this;
}

BOOL WTF::protocolIsInHTTPFamily(uint64_t a1, uint64_t a2)
{
  int v2;
  int v4;

  if (a2 < 5)
    return 0;
  if ((a2 & 0xFF00000000) != 0)
  {
    if ((*(_BYTE *)a1 & 0xDF) == 0x48
      && (*(_BYTE *)(a1 + 1) & 0xDF) == 0x54
      && (*(_BYTE *)(a1 + 2) & 0xDF) == 0x54
      && (*(_BYTE *)(a1 + 3) & 0xDF) == 0x50)
    {
      v2 = *(unsigned __int8 *)(a1 + 4);
      if (v2 == 58)
        return 1;
      if (a2 >= 6 && (v2 & 0xFFFFFFDF) == 0x53)
        return *(_BYTE *)(a1 + 5) == 58;
    }
    return 0;
  }
  if ((*(_WORD *)a1 & 0xFFDF) != 0x48
    || (*(_WORD *)(a1 + 2) & 0xFFDF) != 0x54
    || (*(_WORD *)(a1 + 4) & 0xFFDF) != 0x54
    || (*(_WORD *)(a1 + 6) & 0xFFDF) != 0x50)
  {
    return 0;
  }
  v4 = *(unsigned __int16 *)(a1 + 8);
  if (v4 == 58)
    return 1;
  if (a2 < 6 || (v4 & 0xFFFFFFDF) != 0x53)
    return 0;
  return *(unsigned __int16 *)(a1 + 10) == 58;
}

void *WTF::aboutBlankURL(WTF *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&qword_1ECF58308);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&qword_1ECF58308, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::aboutBlankURL(void)::$_0 &&>>);
  }
  return &unk_1ECF58320;
}

void *WTF::aboutSrcDocURL(WTF *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&qword_1ECF58310);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&qword_1ECF58310, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::aboutSrcDocURL(void)::$_0 &&>>);
  }
  return &unk_1ECF58348;
}

BOOL WTF::portAllowed(WTF *this, const WTF::URL *a2)
{
  unsigned int v3;
  _BOOL8 result;
  __int16 *v5;
  unint64_t v6;
  unint64_t v7;
  __int16 *v8;
  __int16 *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v17;
  int v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;

  v3 = WTF::URL::port((uint64_t *)this);
  if (v3 < 0x10000)
    return 1;
  v5 = (__int16 *)&WTF::portAllowed(WTF::URL const&)::blockedPortList;
  v6 = 82;
  do
  {
    v7 = v6 >> 1;
    v8 = &v5[v6 >> 1];
    v10 = (unsigned __int16)*v8;
    v9 = v8 + 1;
    v6 += ~(v6 >> 1);
    if (v10 < (unsigned __int16)v3)
      v5 = v9;
    else
      v6 = v7;
  }
  while (v6);
  if (v5 == aWebkitFakeUrl_0 || (unsigned __int16)*v5 > (unsigned __int16)v3)
    return 1;
  v11 = *((_DWORD *)this + 2) & 0xFFFFFFC1;
  if ((unsigned __int16)v3 - 21 <= 1 && v11 == 193)
  {
    v12 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if (v13)
      {
        v14 = *(unsigned __int8 **)(v12 + 8);
        v15 = (*(_BYTE *)(v12 + 16) & 4) != 0 ? *v14 : *(unsigned __int16 *)v14;
        if ((v15 & 0xFFFFFFDF) == 0x46 && v13 > 1)
        {
          v17 = *(_QWORD *)(v12 + 8);
          v18 = (*(_BYTE *)(v12 + 16) & 4) != 0 ? *(unsigned __int8 *)(v17 + 1) : *(unsigned __int16 *)(v17 + 2);
          if ((v18 & 0xFFFFFFDF) == 0x54 && v13 >= 3)
          {
            v20 = *(_QWORD *)(v12 + 8);
            v21 = (*(_BYTE *)(v12 + 16) & 4) != 0 ? *(unsigned __int8 *)(v20 + 2) : *(unsigned __int16 *)(v20 + 4);
            if ((v21 & 0xFFFFFFDF) == 0x50)
              return 1;
          }
        }
      }
    }
  }
  if (v11 != 257)
    return 0;
  v22 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v23 = *(_DWORD *)(v22 + 4);
  if (!v23)
    return 0;
  v24 = *(_QWORD *)(v22 + 8);
  if ((*(_BYTE *)(v22 + 16) & 4) != 0)
  {
    result = 0;
    if (v23 != 1 && (*(_BYTE *)v24 & 0xDF) == 0x46)
    {
      result = 0;
      if (v23 >= 3 && (*(_BYTE *)(v24 + 1) & 0xDF) == 0x49)
      {
        result = 0;
        if (v23 >= 4 && (*(_BYTE *)(v24 + 2) & 0xDF) == 0x4C)
          return (*(_BYTE *)(v24 + 3) & 0xDF) == 69;
      }
    }
  }
  else
  {
    result = 0;
    if (v23 != 1 && (*(_WORD *)v24 & 0xFFDF) == 0x46)
    {
      result = 0;
      if (v23 >= 3 && (*(_WORD *)(v24 + 2) & 0xFFDF) == 0x49)
      {
        result = 0;
        if (v23 >= 4 && (*(_WORD *)(v24 + 4) & 0xFFDF) == 0x4C)
          return (*(_WORD *)(v24 + 6) & 0xFFDF) == 69;
      }
    }
  }
  return result;
}

void WTF::mimeTypeFromDataURL(uint64_t a1@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, float a10@<S2>)
{
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  int16x8_t *v20;
  int16x8_t *v21;
  unint64_t v22;
  int16x8_t v23;
  int8x16_t v24;
  int16x8_t *v25;
  int16x8_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  int16x8_t *v33;
  int16x8_t *v34;
  int16x8_t *v35;
  unint64_t v36;
  int16x8_t v37;
  int8x16_t v38;
  int16x8_t *v39;
  int16x8_t v40;
  uint64_t v41;
  uint64_t v42;
  int16x8_t *v43[2];

  v10 = a2;
  v13 = (unint64_t)a2 & 0xFF00000000;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    if (a2 < 6)
      goto LABEL_74;
    v14 = a1 + 5;
    v15 = a2 - 5;
    v16 = 16;
    if (v15 < 0x10)
      v16 = a2 - 5;
    v17 = v16;
    v18 = (_BYTE *)(a1 + 5);
    while (*v18 != 59)
    {
      ++v18;
      if (!--v17)
      {
        if (v15 < 0x11)
          goto LABEL_31;
        v18 = memchr((void *)(v14 + v16), 59, v15 - v16);
        if (!v18)
          goto LABEL_31;
        break;
      }
    }
    v19 = (unint64_t)&v18[-a1];
    if (&v18[-a1] != (_BYTE *)-1)
      goto LABEL_41;
    goto LABEL_31;
  }
  if (a2 < 6)
    goto LABEL_74;
  if (a2 <= 4uLL)
    goto LABEL_75;
  v20 = (int16x8_t *)(a1 + 10);
  v21 = (int16x8_t *)(a1 + 2 * a2);
  if (2 * (unint64_t)a2 - 73 >= 0xFFFFFFFFFFFFFFC1)
  {
    v27 = 2 * a2 - 10;
    while (v20->i16[0] != 59)
    {
      v20 = (int16x8_t *)((char *)v20 + 2);
      v27 -= 2;
      if (!v27)
        goto LABEL_31;
    }
  }
  else
  {
    if (a2 < 0xDuLL)
    {
LABEL_20:
      if (v20 >= v21)
        goto LABEL_31;
      v25 = v21 - 1;
      v26.i64[0] = 0x3B003B003B003BLL;
      v26.i64[1] = 0x3B003B003B003BLL;
      v24 = (int8x16_t)vceqq_s16(v21[-1], v26);
      v26.i16[0] = vmaxvq_u16((uint16x8_t)v24);
      if (!v26.i32[0])
        goto LABEL_31;
    }
    else
    {
      v22 = a1 + 24;
      v23.i64[0] = 0x3B003B003B003BLL;
      v23.i64[1] = 0x3B003B003B003BLL;
      while (1)
      {
        v24 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v22 - 14), v23);
        LOWORD(a10) = vmaxvq_u16((uint16x8_t)v24);
        if (a10 != 0.0)
          break;
        v22 += 16;
        if (v22 >= (unint64_t)v21)
        {
          v20 = (int16x8_t *)(v22 - 14);
          goto LABEL_20;
        }
      }
      v25 = (int16x8_t *)(v22 - 14);
    }
    v20 = (int16x8_t *)((char *)v25
                      + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v24)));
  }
  if (v20 == v21 || (v19 = ((uint64_t)v20->i64 - a1) >> 1, v19 == -1))
  {
LABEL_31:
    if (v13)
    {
      if (v10 >= 6)
      {
        v28 = v10 - 5;
        v29 = 16;
        if (v28 < 0x10)
          v29 = v10 - 5;
        v30 = v29;
        v31 = (_BYTE *)(a1 + 5);
        do
        {
          if (*v31 == 44)
            goto LABEL_40;
          ++v31;
          --v30;
        }
        while (v30);
        if (v28 >= 0x11)
        {
          v31 = memchr((void *)(a1 + 5 + v29), 44, v28 - v29);
          if (v31)
          {
LABEL_40:
            v19 = (unint64_t)&v31[-a1];
            goto LABEL_41;
          }
        }
      }
      goto LABEL_74;
    }
    if (v10 >= 6)
    {
      if (v10 <= 4uLL)
        goto LABEL_75;
      v34 = (int16x8_t *)(a1 + 10);
      v35 = (int16x8_t *)(a1 + 2 * v10);
      if (2 * (unint64_t)v10 - 73 >= 0xFFFFFFFFFFFFFFC1)
      {
        v41 = 2 * v10 - 10;
        while (v34->i16[0] != 44)
        {
          v34 = (int16x8_t *)((char *)v34 + 2);
          v41 -= 2;
          if (!v41)
            goto LABEL_74;
        }
      }
      else
      {
        if (v10 < 0xDuLL)
        {
LABEL_58:
          if (v34 >= v35)
            goto LABEL_74;
          v39 = v35 - 1;
          v40.i64[0] = 0x2C002C002C002CLL;
          v40.i64[1] = 0x2C002C002C002CLL;
          v38 = (int8x16_t)vceqq_s16(v35[-1], v40);
          v40.i16[0] = vmaxvq_u16((uint16x8_t)v38);
          if (!v40.i32[0])
            goto LABEL_74;
        }
        else
        {
          v36 = a1 + 24;
          v37.i64[0] = 0x2C002C002C002CLL;
          v37.i64[1] = 0x2C002C002C002CLL;
          while (1)
          {
            v38 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v36 - 14), v37);
            LOWORD(a10) = vmaxvq_u16((uint16x8_t)v38);
            if (a10 != 0.0)
              break;
            v36 += 16;
            if (v36 >= (unint64_t)v35)
            {
              v34 = (int16x8_t *)(v36 - 14);
              goto LABEL_58;
            }
          }
          v39 = (int16x8_t *)(v36 - 14);
        }
        v34 = (int16x8_t *)((char *)v39
                          + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v38)));
      }
      if (v34 != v35)
      {
        v19 = ((uint64_t)v34->i64 - a1) >> 1;
        if (v19 == 5)
          goto LABEL_73;
        goto LABEL_42;
      }
    }
LABEL_74:
    WTF::StringImpl::s_emptyAtomString += 2;
    *a9 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
    return;
  }
LABEL_41:
  if (v19 == 5)
  {
LABEL_73:
    v42 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v42 = 0xA00000002;
    *(_QWORD *)(v42 + 8) = "text/plain";
    *(_DWORD *)(v42 + 16) = 4;
    *a9 = v42;
    return;
  }
LABEL_42:
  if (v19 == -1)
    goto LABEL_74;
  if (v10 < 6)
  {
    v19 = 0x100000000;
    v33 = (int16x8_t *)"";
    goto LABEL_68;
  }
  LODWORD(v19) = v19 - 5;
  if (v10 - 5 >= v19)
    v19 = v19;
  else
    v19 = v10 - 5;
  v32 = v10 - 5;
  if (v13)
  {
    if (v32 >= v19)
    {
      v33 = (int16x8_t *)(a1 + 5);
      v19 |= 0x100000000uLL;
LABEL_68:
      v43[0] = v33;
      v43[1] = (int16x8_t *)v19;
      WTF::StringView::convertToASCIILowercase(v43, a2, a3, a4, a5, a6, a7, a8, a9);
      return;
    }
  }
  else if (v32 >= v19)
  {
    v33 = (int16x8_t *)(a1 + 10);
    goto LABEL_68;
  }
LABEL_75:
  __break(1u);
}

uint64_t WTF::URL::stringCenterEllipsizedToLength@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, int **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int8x16_t *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int8x16_t *v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  char v18;
  unint64_t v19;
  int v20;

  v4 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_10;
  v5 = *(unsigned int *)(v4 + 4);
  if (v5 <= a2)
  {
    *(_DWORD *)v4 += 2;
LABEL_10:
    *a3 = (int *)v4;
    return this;
  }
  v6 = *(unsigned int *)(v4 + 16);
  v7 = *(int8x16_t **)(v4 + 8);
  v8 = (v6 >> 2) & 1;
  v9 = (a2 >> 1) - 1;
  if (v5 >= v9)
    v10 = v9;
  else
    v10 = v5;
  v11 = (a2 >> 1) - 2;
  v12 = (v5 - v11);
  if (v5 <= v12)
  {
    LODWORD(v11) = 0;
    v14 = 0x100000000;
    v13 = (int8x16_t *)"";
    goto LABEL_18;
  }
  if ((_DWORD)v5 == (_DWORD)v11)
  {
    v11 = (v8 << 32) | v5;
    v13 = v7;
    goto LABEL_17;
  }
  v15 = v5 - v12;
  if ((_DWORD)v8)
  {
    if (v15 >= v11)
    {
      v13 = (int8x16_t *)((char *)v7 + v12);
      v11 |= 0x100000000uLL;
      goto LABEL_17;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v15 < v11)
    goto LABEL_29;
  v13 = (int8x16_t *)((char *)v7 + 2 * v12);
LABEL_17:
  v14 = v11;
  if ((v11 & 0x80000000) != 0)
  {
LABEL_30:
    *a3 = 0;
LABEL_31:
    __break(0xC471u);
    return this;
  }
LABEL_18:
  v16 = __OFADD__((_DWORD)v11, 3);
  v17 = v11 + 3;
  v18 = v16;
  if ((v10 & 0x80000000) != 0)
    goto LABEL_30;
  if ((v18 & 1) != 0)
    goto LABEL_30;
  this = (v10 + v17);
  if (__OFADD__((_DWORD)v10, v17))
    goto LABEL_30;
  v19 = v10 & 0xFFFFFFFEFFFFFFFFLL | (((v6 >> 2) & 1) << 32);
  if ((_DWORD)v8)
    v20 = HIDWORD(v14);
  else
    v20 = 0;
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(this, v20, v7, v19, "...", 3u, v13, v14, a3);
  if (!*a3)
    goto LABEL_31;
  return this;
}

void WTF::URL::fakeURLWithRelativePart(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  int *v32;
  uint64_t v33;
  unint64_t v34;
  BOOL v35;
  int *v36;
  unint64_t *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  unint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  int *v60;
  unint64_t v61;
  __int128 v62;
  char *v63;
  int8x16_t v64;
  __int128 v65;
  __int128 v66;
  char *v67;
  char *v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int *v73;
  char *v74;
  __int16 v75;
  uint64_t v76;
  _WORD *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  unint64_t v82;
  __int128 v83;
  char *v84;
  int8x16_t v85;
  __int128 v86;
  __int128 v87;
  char *v88;
  char *v89;
  char *v90;
  unint64_t v91;
  char *v92;
  char *v93;
  __int16 v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  unint64_t v101;
  __int128 v102;
  char *v103;
  int8x16_t v104;
  __int128 v105;
  __int128 v106;
  char *v107;
  char *v108;
  char *v109;
  unint64_t v110;
  BOOL v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  __int16 v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  unint64_t v123;
  __int128 v124;
  char *v125;
  int8x16_t v126;
  __int128 v127;
  __int128 v128;
  char *v129;
  char *v130;
  char *v131;
  unint64_t v132;
  BOOL v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  __int16 v138;
  uint64_t v139;
  char *v140;
  unint64_t v141;
  uint64_t v142;
  char *v143;
  _WORD *v144;
  unint64_t v145;
  __int128 v146;
  int8x16_t v147;
  __int128 v148;
  __int128 v149;
  char *v150;
  char *v151;
  char *v152;
  unint64_t v153;
  BOOL v154;
  uint64_t v155;
  unint64_t v156;
  _WORD *v157;
  char *v158;
  __int16 v159;
  _WORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _WORD *v166;
  unint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint8x8_t *v179;
  uint16x8_t *v180;
  unint64_t v181;
  uint8x16_t v182;
  uint16x8_t v183;
  uint16x8_t v184;
  uint8x8_t *v185;
  uint16x8_t *v186;
  unint64_t v187;
  uint8x8_t v188;
  uint8x8_t *v189;
  uint16x8_t *v190;
  unint64_t v191;
  uint8x16_t v192;
  uint16x8_t v193;
  uint16x8_t v194;
  uint8x8_t *v195;
  uint16x8_t *v196;
  unint64_t v197;
  uint8x8_t v198;
  uint8x8_t *v199;
  uint16x8_t *v200;
  unint64_t v201;
  uint8x16_t v202;
  uint16x8_t v203;
  uint16x8_t v204;
  uint8x8_t *v205;
  uint16x8_t *v206;
  unint64_t v207;
  uint8x8_t v208;
  uint8x8_t *v209;
  uint16x8_t *v210;
  int v211;
  unint64_t v212;
  uint8x16_t v213;
  uint16x8_t v214;
  uint16x8_t v215;
  uint8x8_t *v216;
  uint16x8_t *v217;
  int v218;
  unint64_t v219;
  uint8x8_t v220;
  uint8x8_t *v221;
  uint16x8_t *v222;
  unint64_t v223;
  uint8x16_t v224;
  uint16x8_t v225;
  uint16x8_t v226;
  uint8x8_t *v227;
  uint16x8_t *v228;
  unint64_t v229;
  uint8x8_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234[3];
  _BYTE v235[12];
  _DWORD v236[4];
  _BYTE v237[4];
  unsigned int v238;
  char **v239;
  _BYTE v240[4];
  unsigned int v241;
  char *v242;
  _BYTE v243[4];
  unsigned int v244;
  unint64_t v245;
  unint64_t v246;
  _DWORD v247[4];
  uint64_t v248;
  int8x16x2_t v249;
  int8x16x2_t v250;
  int8x16x2_t v251;
  int8x16x2_t v252;
  int8x16x2_t v253;
  int8x16x2_t v254;
  int8x16x2_t v255;
  int8x16x2_t v256;
  int8x16x2_t v257;
  int8x16x2_t v258;
  int8x16x2_t v259;
  int8x16x2_t v260;
  int8x16x2_t v261;
  int8x16x2_t v262;
  int8x16x2_t v263;

  v248 = *MEMORY[0x1E0C80C00];
  v245 = 0;
  v246 = 0;
  WTF::cryptographicallyRandomValues((uint64_t)&v245, 16, a3, a4, a5, a6, a7, a8);
  v232 = v245 & 0x3FFFFFFFFFFFFFFFLL | 0x8000000000000000;
  v233 = v246 & 0xFFFFFFFFFFFF0FFFLL | 0x4000;
  v12 = _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_(&v232);
  if ((a2 & 0x80000000) != 0)
    goto LABEL_177;
  v18 = a2 + 1;
  if (__OFADD__((_DWORD)a2, 1))
    goto LABEL_177;
  if (v12 < 0)
    goto LABEL_177;
  v19 = __OFADD__(v12, v18);
  v20 = v12 + v18;
  if (v19)
    goto LABEL_177;
  v21 = (v20 + 18);
  if (__OFADD__(v20, 18))
    goto LABEL_177;
  v23 = v232;
  v22 = v233;
  if ((a2 & 0xFF00000000) != 0)
  {
    if (v20 != -18)
    {
      if ((v21 & 0x80000000) == 0)
      {
        WTF::tryFastCompactMalloc((WTF *)(v21 + 20), &v245);
        v24 = (int *)v245;
        if (v245)
        {
          *(_DWORD *)v245 = 2;
          v24[1] = v21;
          *((_QWORD *)v24 + 1) = v24 + 5;
          v24[4] = 4;
          *((_WORD *)v24 + 18) = 12079;
          *(_OWORD *)(v24 + 5) = *(_OWORD *)"webkit-fake-url://";
          v245 = v23;
          v246 = v22;
          v242 = (char *)v24 + 38;
          v239 = &v242;
          _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIhEEvPT_EUlDpOT_E_EEDcOS5_(&v245, &v239);
          v25 = (char *)v24
              + _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_(&v245)
              + 38;
          *v25 = 47;
          v31 = v25 + 1;
          if ((_DWORD)a2)
          {
            if ((_DWORD)a2 == 1)
              *v31 = *a1;
            else
              memcpy(v31, a1, a2);
          }
          v245 = (unint64_t)v24;
          WTF::URL::URL(a9, (WTF::AtomStringImpl *)&v245, 0, v26, v27, v28, v29, v30);
          v45 = (WTF::StringImpl *)v245;
          if (!v245)
            return;
LABEL_120:
          if (*(_DWORD *)v45 == 2)
          {
            WTF::StringImpl::~StringImpl(v45, v38, v39, v40, v41, v42, v43, v44);
            WTF::fastFree(v167, v168, v169, v170, v171, v172, v173, v174);
          }
          else
          {
            *(_DWORD *)v45 -= 2;
          }
          return;
        }
      }
LABEL_177:
      __break(0xC471u);
      JUMPOUT(0x197B30F10);
    }
LABEL_20:
    WTF::StringImpl::s_emptyAtomString += 2;
    v245 = (unint64_t)&WTF::StringImpl::s_emptyAtomString;
    WTF::URL::URL(a9, (WTF::AtomStringImpl *)&v245, 0, v13, v14, v15, v16, v17);
    v45 = (WTF::StringImpl *)v245;
    if (!v245)
      return;
    goto LABEL_120;
  }
  if (v20 == -18)
    goto LABEL_20;
  if (v21 > 0x7FFFFFEF)
    goto LABEL_177;
  WTF::tryFastCompactMalloc((WTF *)(2 * v21 + 20), &v245);
  v32 = (int *)v245;
  if (!v245)
    goto LABEL_177;
  v33 = 0;
  *(_DWORD *)v245 = 2;
  v32[1] = v21;
  *(_OWORD *)(v32 + 5) = *(_OWORD *)aWebkitFakeUrl_0;
  *((_QWORD *)v32 + 1) = v32 + 5;
  v32[4] = 0;
  *(_OWORD *)(v32 + 9) = *(_OWORD *)&aWebkitFakeUrl_0[8];
  v32[13] = 3080239;
  v234[0] = v23;
  v234[1] = v22;
  v34 = HIDWORD(v22);
  do
  {
    *((_BYTE *)&v246 + v33-- + 7) = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::lowercaseHexDigits[v34 & 0xF];
    v35 = v34 > 0xF;
    v34 >>= 4;
  }
  while (v35);
  v36 = v32 + 14;
  v231 = v33 + 17;
  if (v33 + 17 < 10)
  {
    v37 = (unint64_t *)((char *)v247 + v33);
  }
  else
  {
    v37 = &v246;
    memset(&v246, 48, v33 + 8);
  }
  v46 = v247 - (_DWORD)v37;
  v247[0] = v46;
  v47 = WORD1(v22);
  v48 = 15;
  do
  {
    v243[v48-- - 4] = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::lowercaseHexDigits[v47 & 0xF];
    v35 = v47 > 0xF;
    v47 >>= 4;
  }
  while (v35);
  if (v48 + 2 < 14)
  {
    v49 = &v243[v48 - 3];
  }
  else
  {
    v49 = v243;
    memset(v243, 48, v48 - 11);
  }
  v244 = &v244 - (_DWORD)v49;
  v50 = (unsigned __int16)v22;
  v51 = 15;
  do
  {
    v240[v51-- - 4] = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::lowercaseHexDigits[v50 & 0xF];
    v35 = v50 > 0xF;
    v50 >>= 4;
  }
  while (v35);
  if (v51 + 2 < 14)
  {
    v52 = &v240[v51 - 3];
  }
  else
  {
    v52 = v240;
    memset(v240, 48, v51 - 11);
  }
  v241 = &v241 - (_DWORD)v52;
  v53 = HIWORD(v23);
  v54 = 15;
  do
  {
    *((_BYTE *)&v236[1] + v54--) = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::lowercaseHexDigits[v53 & 0xF];
    v35 = v53 > 0xF;
    v53 >>= 4;
  }
  while (v35);
  if (v54 + 2 < 14)
  {
    v55 = (char *)&v236[1] + v54 + 1;
  }
  else
  {
    v55 = v237;
    memset(v237, 48, v54 - 11);
  }
  v56 = 0;
  v238 = &v238 - (_DWORD)v55;
  v57 = v23 & 0xFFFFFFFFFFFFLL;
  do
  {
    v235[v56-- + 11] = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::lowercaseHexDigits[v57 & 0xF];
    v35 = v57 > 0xF;
    v57 >>= 4;
  }
  while (v35);
  if (v56 + 17 < 6)
  {
    v58 = (char *)v236 + v56;
  }
  else
  {
    v58 = v235;
    memset(v235, 48, v56 + 12);
  }
  v236[0] = v236 - (_DWORD)v58;
  v59 = (char *)v247 - v46;
  v60 = (int *)((char *)v36 + 2 * v46);
  if (v46 < 0x40)
  {
    v61 = (unint64_t)(v32 + 14);
    if (v36 == v60)
      goto LABEL_57;
  }
  else
  {
    v61 = (unint64_t)v36 + 2 * (v46 & 0xFFFFFFC0);
    v62 = 0uLL;
    v63 = (char *)(v32 + 14);
    do
    {
      v249.val[0] = *(int8x16_t *)v59;
      v64 = *((int8x16_t *)v59 + 1);
      v254.val[0] = (int8x16_t)*((_OWORD *)v59 + 2);
      v65 = *((_OWORD *)v59 + 3);
      v59 += 64;
      v66 = v65;
      v254.val[1] = 0uLL;
      v259.val[0] = v64;
      v249.val[1] = 0uLL;
      v67 = v63;
      vst2q_s8(v67, v249);
      v67 += 32;
      v259.val[1] = 0uLL;
      vst2q_s8(v67, v259);
      v68 = v63 + 64;
      vst2q_s8(v68, v254);
      v69 = v63 + 96;
      vst2q_s8(v69, *(int8x16x2_t *)(&v62 - 1));
      v63 += 128;
    }
    while (v63 != (char *)v61);
    if ((int *)v61 == v60)
      goto LABEL_57;
  }
  v70 = (unint64_t)v32 - v61 + 54;
  v71 = v46 + (v70 >> 1);
  v72 = v71 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v71 & 0x7FFFFFFFFFFFFFFFLL) < 7
    || v61 < (unint64_t)&v59[v72 + 1] && (unint64_t)v59 < v61 + 2 * v71 + 2)
  {
    v73 = (int *)v61;
    v74 = v59;
    goto LABEL_56;
  }
  v175 = v72 + 1;
  if (v72 >= 0x1F)
  {
    v176 = v175 & 0xFFFFFFFFFFFFFFE0;
    v209 = (uint8x8_t *)(v59 + 16);
    v210 = (uint16x8_t *)(v61 + 32);
    v211 = 9;
    if (v231 < 9)
      v211 = v231;
    v212 = ((((17 - v211) + (v70 >> 1)) & 0x7FFFFFFFFFFFFFFFLL) + 1) & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v213 = *(uint8x16_t *)v209[-2].i8;
      v214 = vmovl_u8(*v209);
      v215 = vmovl_high_u8(*(uint8x16_t *)v209->i8);
      v210[-2] = vmovl_u8(*(uint8x8_t *)v213.i8);
      v210[-1] = vmovl_high_u8(v213);
      *v210 = v214;
      v210[1] = v215;
      v210 += 4;
      v209 += 4;
      v212 -= 32;
    }
    while (v212);
    if (v175 == v176)
      goto LABEL_57;
    if ((v175 & 0x18) == 0)
    {
      v74 = &v59[v176];
      v73 = (int *)(v61 + 2 * v176);
      do
      {
LABEL_56:
        v75 = *v74++;
        *(_WORD *)v73 = v75;
        v73 = (int *)((char *)v73 + 2);
      }
      while (v73 != v60);
      goto LABEL_57;
    }
  }
  else
  {
    v176 = 0;
  }
  v73 = (int *)(v61 + 2 * (v175 & 0xFFFFFFFFFFFFFFF8));
  v74 = &v59[v175 & 0xFFFFFFFFFFFFFFF8];
  v216 = (uint8x8_t *)&v59[v176];
  v217 = (uint16x8_t *)(v61 + 2 * v176);
  v218 = 9;
  if (v231 < 9)
    v218 = v231;
  v219 = v176 - (((((17 - v218) + (v70 >> 1)) & 0x7FFFFFFFFFFFFFFFLL) + 1) & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v220 = *v216++;
    *v217++ = vmovl_u8(v220);
    v219 += 8;
  }
  while (v219);
  if (v175 != (v175 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_56;
LABEL_57:
  v76 = v247[0];
  v77 = (_WORD *)v36 + v247[0];
  *v77 = 45;
  v78 = (char *)(v77 + 1);
  v79 = v244;
  v80 = (char *)&v244 - v244;
  v81 = &v78[2 * v244];
  if (v244 < 0x40)
  {
    v82 = (unint64_t)v78;
    if (v78 == v81)
      goto LABEL_68;
LABEL_63:
    v91 = (unint64_t)v32 + 2 * v76 + 2 * v79 - v82 + 56;
    if (v91 < 0xE
      || v82 < (unint64_t)&v80[(v91 >> 1) + 1] && (unint64_t)v80 < (v91 & 0xFFFFFFFFFFFFFFFELL) + v82 + 2)
    {
      v92 = (char *)v82;
      v93 = v80;
      goto LABEL_67;
    }
    v177 = (v91 >> 1) + 1;
    if (v91 >= 0x3E)
    {
      v178 = v177 & 0xFFFFFFFFFFFFFFE0;
      v221 = (uint8x8_t *)(v80 + 16);
      v222 = (uint16x8_t *)(v82 + 32);
      v223 = v177 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v224 = *(uint8x16_t *)v221[-2].i8;
        v225 = vmovl_u8(*v221);
        v226 = vmovl_high_u8(*(uint8x16_t *)v221->i8);
        v222[-2] = vmovl_u8(*(uint8x8_t *)v224.i8);
        v222[-1] = vmovl_high_u8(v224);
        *v222 = v225;
        v222[1] = v226;
        v222 += 4;
        v221 += 4;
        v223 -= 32;
      }
      while (v223);
      if (v177 == v178)
        goto LABEL_68;
      if ((v177 & 0x18) == 0)
      {
        v93 = &v80[v178];
        v92 = (char *)(v82 + 2 * v178);
        goto LABEL_67;
      }
    }
    else
    {
      v178 = 0;
    }
    v92 = (char *)(v82 + 2 * (v177 & 0xFFFFFFFFFFFFFFF8));
    v93 = &v80[v177 & 0xFFFFFFFFFFFFFFF8];
    v227 = (uint8x8_t *)&v80[v178];
    v228 = (uint16x8_t *)(v82 + 2 * v178);
    v229 = v178 - (v177 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v230 = *v227++;
      *v228++ = vmovl_u8(v230);
      v229 += 8;
    }
    while (v229);
    if (v177 == (v177 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_68;
    do
    {
LABEL_67:
      v94 = *v93++;
      *(_WORD *)v92 = v94;
      v92 += 2;
    }
    while (v92 != v81);
    goto LABEL_68;
  }
  v82 = (unint64_t)&v78[2 * (v244 & 0xFFFFFFC0)];
  v83 = 0uLL;
  v84 = v78;
  do
  {
    v250.val[0] = *(int8x16_t *)v80;
    v85 = *((int8x16_t *)v80 + 1);
    v255.val[0] = (int8x16_t)*((_OWORD *)v80 + 2);
    v86 = *((_OWORD *)v80 + 3);
    v80 += 64;
    v87 = v86;
    v255.val[1] = 0uLL;
    v260.val[0] = v85;
    v250.val[1] = 0uLL;
    v88 = v84;
    vst2q_s8(v88, v250);
    v88 += 32;
    v260.val[1] = 0uLL;
    vst2q_s8(v88, v260);
    v89 = v84 + 64;
    vst2q_s8(v89, v255);
    v90 = v84 + 96;
    vst2q_s8(v90, *(int8x16x2_t *)(&v83 - 1));
    v84 += 128;
  }
  while (v84 != (char *)v82);
  if ((char *)v82 != v81)
    goto LABEL_63;
LABEL_68:
  v95 = v244;
  v96 = &v78[2 * v244];
  *(_WORD *)v96 = 45;
  v97 = v96 + 2;
  v98 = v241;
  v99 = (char *)&v241 - v241;
  v100 = &v97[2 * v241];
  if (v241 < 0x40)
  {
    v101 = (unint64_t)v97;
    if (v97 == v100)
      goto LABEL_84;
LABEL_74:
    v110 = (unint64_t)v32 + 2 * v76 + 2 * v95 + 2 * v98 - v101 + 58;
    if (v110 < 0xE
      || (v101 < (unint64_t)&v99[(v110 >> 1) + 1]
        ? (v111 = (unint64_t)v99 >= (v110 & 0xFFFFFFFFFFFFFFFELL) + v101 + 2)
        : (v111 = 1),
          !v111))
    {
      v114 = (char *)v101;
      v115 = v99;
      goto LABEL_83;
    }
    v112 = (v110 >> 1) + 1;
    if (v110 >= 0x3E)
    {
      v113 = v112 & 0xFFFFFFFFFFFFFFE0;
      v179 = (uint8x8_t *)(v99 + 16);
      v180 = (uint16x8_t *)(v101 + 32);
      v181 = v112 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v182 = *(uint8x16_t *)v179[-2].i8;
        v183 = vmovl_u8(*v179);
        v184 = vmovl_high_u8(*(uint8x16_t *)v179->i8);
        v180[-2] = vmovl_u8(*(uint8x8_t *)v182.i8);
        v180[-1] = vmovl_high_u8(v182);
        *v180 = v183;
        v180[1] = v184;
        v180 += 4;
        v179 += 4;
        v181 -= 32;
      }
      while (v181);
      if (v112 == v113)
        goto LABEL_84;
      if ((v112 & 0x18) == 0)
      {
        v115 = &v99[v113];
        v114 = (char *)(v101 + 2 * v113);
        goto LABEL_83;
      }
    }
    else
    {
      v113 = 0;
    }
    v114 = (char *)(v101 + 2 * (v112 & 0xFFFFFFFFFFFFFFF8));
    v115 = &v99[v112 & 0xFFFFFFFFFFFFFFF8];
    v185 = (uint8x8_t *)&v99[v113];
    v186 = (uint16x8_t *)(v101 + 2 * v113);
    v187 = v113 - (v112 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v188 = *v185++;
      *v186++ = vmovl_u8(v188);
      v187 += 8;
    }
    while (v187);
    if (v112 == (v112 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_84;
    do
    {
LABEL_83:
      v116 = *v115++;
      *(_WORD *)v114 = v116;
      v114 += 2;
    }
    while (v114 != v100);
    goto LABEL_84;
  }
  v101 = (unint64_t)&v97[2 * (v241 & 0xFFFFFFC0)];
  v102 = 0uLL;
  v103 = v97;
  do
  {
    v251.val[0] = *(int8x16_t *)v99;
    v104 = *((int8x16_t *)v99 + 1);
    v256.val[0] = (int8x16_t)*((_OWORD *)v99 + 2);
    v105 = *((_OWORD *)v99 + 3);
    v99 += 64;
    v106 = v105;
    v256.val[1] = 0uLL;
    v261.val[0] = v104;
    v251.val[1] = 0uLL;
    v107 = v103;
    vst2q_s8(v107, v251);
    v107 += 32;
    v261.val[1] = 0uLL;
    vst2q_s8(v107, v261);
    v108 = v103 + 64;
    vst2q_s8(v108, v256);
    v109 = v103 + 96;
    vst2q_s8(v109, *(int8x16x2_t *)(&v102 - 1));
    v103 += 128;
  }
  while (v103 != (char *)v101);
  if ((char *)v101 != v100)
    goto LABEL_74;
LABEL_84:
  v117 = v241;
  v118 = &v97[2 * v241];
  *(_WORD *)v118 = 45;
  v119 = v118 + 2;
  v120 = v238;
  v121 = (char *)&v238 - v238;
  v122 = &v119[2 * v238];
  if (v238 < 0x40)
  {
    v123 = (unint64_t)v119;
    if (v119 == v122)
      goto LABEL_100;
LABEL_90:
    v132 = (unint64_t)v32 + 2 * v76 + 2 * v95 + 2 * v117 + 2 * v120 - v123 + 60;
    if (v132 < 0xE
      || (v123 < (unint64_t)&v121[(v132 >> 1) + 1]
        ? (v133 = (unint64_t)v121 >= (v132 & 0xFFFFFFFFFFFFFFFELL) + v123 + 2)
        : (v133 = 1),
          !v133))
    {
      v136 = (char *)v123;
      v137 = v121;
      goto LABEL_99;
    }
    v134 = (v132 >> 1) + 1;
    if (v132 >= 0x3E)
    {
      v135 = v134 & 0xFFFFFFFFFFFFFFE0;
      v189 = (uint8x8_t *)(v121 + 16);
      v190 = (uint16x8_t *)(v123 + 32);
      v191 = v134 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v192 = *(uint8x16_t *)v189[-2].i8;
        v193 = vmovl_u8(*v189);
        v194 = vmovl_high_u8(*(uint8x16_t *)v189->i8);
        v190[-2] = vmovl_u8(*(uint8x8_t *)v192.i8);
        v190[-1] = vmovl_high_u8(v192);
        *v190 = v193;
        v190[1] = v194;
        v190 += 4;
        v189 += 4;
        v191 -= 32;
      }
      while (v191);
      if (v134 == v135)
        goto LABEL_100;
      if ((v134 & 0x18) == 0)
      {
        v137 = &v121[v135];
        v136 = (char *)(v123 + 2 * v135);
        goto LABEL_99;
      }
    }
    else
    {
      v135 = 0;
    }
    v136 = (char *)(v123 + 2 * (v134 & 0xFFFFFFFFFFFFFFF8));
    v137 = &v121[v134 & 0xFFFFFFFFFFFFFFF8];
    v195 = (uint8x8_t *)&v121[v135];
    v196 = (uint16x8_t *)(v123 + 2 * v135);
    v197 = v135 - (v134 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v198 = *v195++;
      *v196++ = vmovl_u8(v198);
      v197 += 8;
    }
    while (v197);
    if (v134 == (v134 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_100;
    do
    {
LABEL_99:
      v138 = *v137++;
      *(_WORD *)v136 = v138;
      v136 += 2;
    }
    while (v136 != v122);
    goto LABEL_100;
  }
  v123 = (unint64_t)&v119[2 * (v238 & 0xFFFFFFC0)];
  v124 = 0uLL;
  v125 = v119;
  do
  {
    v252.val[0] = *(int8x16_t *)v121;
    v126 = *((int8x16_t *)v121 + 1);
    v257.val[0] = (int8x16_t)*((_OWORD *)v121 + 2);
    v127 = *((_OWORD *)v121 + 3);
    v121 += 64;
    v128 = v127;
    v257.val[1] = 0uLL;
    v262.val[0] = v126;
    v252.val[1] = 0uLL;
    v129 = v125;
    vst2q_s8(v129, v252);
    v129 += 32;
    v262.val[1] = 0uLL;
    vst2q_s8(v129, v262);
    v130 = v125 + 64;
    vst2q_s8(v130, v257);
    v131 = v125 + 96;
    vst2q_s8(v131, *(int8x16x2_t *)(&v124 - 1));
    v125 += 128;
  }
  while (v125 != (char *)v123);
  if ((char *)v123 != v122)
    goto LABEL_90;
LABEL_100:
  v139 = v238;
  v140 = &v119[2 * v238];
  *(_WORD *)v140 = 45;
  v141 = (unint64_t)(v140 + 2);
  v142 = v236[0];
  v143 = (char *)v236 - v236[0];
  v144 = (_WORD *)(v141 + 2 * v236[0]);
  if (v236[0] >= 0x40u)
  {
    v145 = v141 + 2 * (v236[0] & 0xFFFFFFC0);
    v146 = 0uLL;
    do
    {
      v253.val[0] = *(int8x16_t *)v143;
      v147 = *((int8x16_t *)v143 + 1);
      v258.val[0] = (int8x16_t)*((_OWORD *)v143 + 2);
      v148 = *((_OWORD *)v143 + 3);
      v143 += 64;
      v149 = v148;
      v258.val[1] = 0uLL;
      v263.val[0] = v147;
      v253.val[1] = 0uLL;
      v150 = (char *)v141;
      vst2q_s8(v150, v253);
      v150 += 32;
      v263.val[1] = 0uLL;
      vst2q_s8(v150, v263);
      v151 = (char *)(v141 + 64);
      vst2q_s8(v151, v258);
      v152 = (char *)(v141 + 96);
      vst2q_s8(v152, *(int8x16x2_t *)(&v146 - 1));
      v141 += 128;
    }
    while (v141 != v145);
    v141 = v145;
  }
  if ((_WORD *)v141 != v144)
  {
    v153 = (unint64_t)v32 + 2 * v76 + 2 * v95 + 2 * v117 + 2 * v139 + 2 * v142 - v141 + 62;
    if (v153 < 0xE
      || (v141 < (unint64_t)&v143[(v153 >> 1) + 1]
        ? (v154 = (unint64_t)v143 >= (v153 & 0xFFFFFFFFFFFFFFFELL) + v141 + 2)
        : (v154 = 1),
          !v154))
    {
      v157 = (_WORD *)v141;
      v158 = v143;
      goto LABEL_114;
    }
    v155 = (v153 >> 1) + 1;
    if (v153 >= 0x3E)
    {
      v156 = v155 & 0xFFFFFFFFFFFFFFE0;
      v199 = (uint8x8_t *)(v143 + 16);
      v200 = (uint16x8_t *)(v141 + 32);
      v201 = v155 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v202 = *(uint8x16_t *)v199[-2].i8;
        v203 = vmovl_u8(*v199);
        v204 = vmovl_high_u8(*(uint8x16_t *)v199->i8);
        v200[-2] = vmovl_u8(*(uint8x8_t *)v202.i8);
        v200[-1] = vmovl_high_u8(v202);
        *v200 = v203;
        v200[1] = v204;
        v200 += 4;
        v199 += 4;
        v201 -= 32;
      }
      while (v201);
      if (v155 == v156)
        goto LABEL_115;
      if ((v155 & 0x18) == 0)
      {
        v158 = &v143[v156];
        v157 = (_WORD *)(v141 + 2 * v156);
        do
        {
LABEL_114:
          v159 = *v158++;
          *v157++ = v159;
        }
        while (v157 != v144);
        goto LABEL_115;
      }
    }
    else
    {
      v156 = 0;
    }
    v157 = (_WORD *)(v141 + 2 * (v155 & 0xFFFFFFFFFFFFFFF8));
    v158 = &v143[v155 & 0xFFFFFFFFFFFFFFF8];
    v205 = (uint8x8_t *)&v143[v156];
    v206 = (uint16x8_t *)(v141 + 2 * v156);
    v207 = v156 - (v155 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v208 = *v205++;
      *v206++ = vmovl_u8(v208);
      v207 += 8;
    }
    while (v207);
    if (v155 != (v155 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_114;
  }
LABEL_115:
  v160 = (_WORD *)v36
       + _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_(v234);
  *v160 = 47;
  v166 = v160 + 1;
  if ((_DWORD)a2)
  {
    if ((_DWORD)a2 == 1)
      *v166 = *(_WORD *)a1;
    else
      memcpy(v166, a1, 2 * a2);
  }
  v245 = (unint64_t)v32;
  WTF::URL::URL(a9, (WTF::AtomStringImpl *)&v245, 0, v161, v162, v163, v164, v165);
  v45 = (WTF::StringImpl *)v245;
  if (v245)
    goto LABEL_120;
}

void WTF::URL::fileURLWithFileSystemPath(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, float a5@<S1>)
{
  const char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  __int128 v24;
  int8x16_t v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  const char *v35;
  __int16 v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  char *v65;
  char *v66;
  unsigned __int128 v67;
  char *v68;
  unint64_t v69;
  BOOL v70;
  unint64_t v71;
  char *v72;
  char *v73;
  __int128 v74;
  int8x16_t v75;
  __int128 v76;
  __int128 v77;
  char *v78;
  char *v79;
  char *v80;
  int64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  unsigned __int8 *v85;
  __int16 v86;
  char *v87;
  char *v88;
  char v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint8x8_t *v94;
  uint16x8_t *v95;
  unint64_t v96;
  uint8x16_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  uint8x8_t *v100;
  uint16x8_t *v101;
  unint64_t v102;
  uint8x8_t v103;
  int8x16_t *v104;
  int8x16_t *v105;
  unint64_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int16x8_t *v111;
  int8x8_t *v112;
  unint64_t v113;
  int16x8_t v114;
  uint8x8_t *v115;
  uint16x8_t *v116;
  unint64_t v117;
  uint8x16_t v118;
  uint16x8_t v119;
  uint16x8_t v120;
  uint8x8_t *v121;
  uint16x8_t *v122;
  unint64_t v123;
  uint8x8_t v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  int8x16x2_t v127;
  int8x16x2_t v128;
  int8x16x2_t v129;
  int8x16x2_t v130;
  int8x16x2_t v131;
  int8x16x2_t v132;

  v6 = "/";
  if ((_DWORD)a2)
  {
    if ((a2 & 0xFF00000000) != 0)
      v7 = *a1;
    else
      v7 = *(unsigned __int16 *)a1;
    if (v7 == 47)
    {
      v6 = "";
      v8 = 1;
    }
    else
    {
      v8 = 2;
    }
  }
  else
  {
    v8 = 2;
  }
  WTF::escapePathWithoutCopying(&v125, a1, a2, a4, a5);
  v14 = v8 - 1;
  if ((unint64_t)(v8 - 1) >> 31)
    goto LABEL_117;
  v15 = v125;
  if (v125)
  {
    v16 = *((_DWORD *)v125 + 1);
    if (((v16 | v14) & 0x80000000) != 0)
      goto LABEL_117;
  }
  else
  {
    v16 = 0;
    if ((v14 & 0x80000000) != 0)
      goto LABEL_117;
  }
  v17 = __OFADD__((_DWORD)v14, v16);
  v18 = v14 + v16;
  if (v17)
    goto LABEL_117;
  v19 = (v18 + 7);
  if (__OFADD__(v18, 7))
    goto LABEL_117;
  if (!v125 || (*((_BYTE *)v125 + 16) & 4) != 0)
  {
    if (v18 == -7)
      goto LABEL_42;
    if ((v19 & 0x80000000) == 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(v19 + 20), &v126);
      v20 = v126;
      if (v126)
      {
        *(_DWORD *)v126 = 2;
        *((_DWORD *)v20 + 1) = v19;
        *((_QWORD *)v20 + 1) = (char *)v20 + 20;
        *((_QWORD *)v20 + 2) = 0x656C696600000004;
        v39 = (char *)v20 + 27;
        *(_DWORD *)((char *)v20 + 23) = 791624293;
        if ((_DWORD)v8 != 1)
          *v39 = *v6;
        if (!v15)
          goto LABEL_43;
        v22 = &v39[v14];
        v37 = *((_QWORD *)v15 + 1);
        v64 = *((unsigned int *)v15 + 1);
        if ((*((_BYTE *)v15 + 16) & 4) != 0)
        {
          if (!(_DWORD)v64)
            goto LABEL_43;
          if ((_DWORD)v64 == 1)
          {
            *v22 = *(_BYTE *)v37;
            goto LABEL_43;
          }
          goto LABEL_85;
        }
        v65 = &v22[v64];
        if (v64 >= 0x10)
        {
          v66 = &v22[v64 & 0xFFFFFFF0];
          do
          {
            v67 = (unsigned __int128)vld2q_s8((const char *)v37);
            v37 += 32;
            *(_OWORD *)v22 = v67;
            v22 += 16;
          }
          while (v22 != v66);
          v22 = v66;
        }
        if (v22 == v65)
          goto LABEL_43;
        v68 = (char *)v20 + v8 + v64;
        v69 = v68 - v22 - (v8 != 0) + 27;
        if (v69 < 8
          || ((unint64_t)v22 < v37 - 2 * (_QWORD)(v22 + 1) + 2 * (_QWORD)v68 + 54
            ? (v70 = v37 >= (unint64_t)&v68[-(v8 != 0) + 27])
            : (v70 = 1),
              !v70))
        {
          v87 = v22;
          v88 = (char *)v37;
          goto LABEL_82;
        }
        if (v69 >= 0x20)
        {
          v71 = v69 & 0xFFFFFFFFFFFFFFE0;
          v104 = (int8x16_t *)(v37 + 32);
          v105 = (int8x16_t *)(v22 + 16);
          v106 = v69 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v108 = v104[-2];
            v107 = v104[-1];
            v110 = *v104;
            v109 = v104[1];
            v104 += 4;
            v105[-1] = vuzp1q_s8(v108, v107);
            *v105 = vuzp1q_s8(v110, v109);
            v105 += 2;
            v106 -= 32;
          }
          while (v106);
          if (v69 == v71)
            goto LABEL_43;
          if ((v69 & 0x18) == 0)
          {
            v88 = (char *)(v37 + 2 * v71);
            v87 = &v22[v71];
            goto LABEL_82;
          }
        }
        else
        {
          v71 = 0;
        }
        v87 = &v22[v69 & 0xFFFFFFFFFFFFFFF8];
        v88 = (char *)(v37 + 2 * (v69 & 0xFFFFFFFFFFFFFFF8));
        v111 = (int16x8_t *)(v37 + 2 * v71);
        v112 = (int8x8_t *)&v22[v71];
        v113 = v71 - (v69 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v114 = *v111++;
          *v112++ = vmovn_s16(v114);
          v113 += 8;
        }
        while (v113);
        if (v69 == (v69 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_43;
        do
        {
LABEL_82:
          v89 = *v88;
          v88 += 2;
          *v87++ = v89;
        }
        while (v87 != v65);
        goto LABEL_43;
      }
    }
LABEL_117:
    __break(0xC471u);
    JUMPOUT(0x197B315ECLL);
  }
  if (v18 == -7)
  {
LABEL_42:
    v20 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_43;
  }
  if (v19 > 0x7FFFFFEF)
    goto LABEL_117;
  WTF::tryFastCompactMalloc((WTF *)(2 * v19 + 20), &v126);
  v20 = v126;
  if (!v126)
    goto LABEL_117;
  *(_DWORD *)v126 = 2;
  *((_DWORD *)v20 + 1) = v19;
  *(_QWORD *)((char *)v20 + 20) = 0x65006C00690066;
  *((_QWORD *)v20 + 1) = (char *)v20 + 20;
  *((_DWORD *)v20 + 4) = 0;
  v21 = (unint64_t)v20 + 34;
  *((_DWORD *)v20 + 7) = 3080250;
  *((_WORD *)v20 + 16) = 47;
  v22 = (char *)v20 + 2 * v14 + 34;
  if ((v14 & 0xFFFFFFC0) != 0)
  {
    v23 = v21 + 2 * (v14 & 0xFFFFFFC0);
    v24 = 0uLL;
    do
    {
      v127.val[0] = *(int8x16_t *)v6;
      v25 = *((int8x16_t *)v6 + 1);
      v129.val[0] = (int8x16_t)*((_OWORD *)v6 + 2);
      v26 = *((_OWORD *)v6 + 3);
      v6 += 64;
      v27 = v26;
      v129.val[1] = 0uLL;
      v131.val[0] = v25;
      v127.val[1] = 0uLL;
      v28 = (char *)v21;
      vst2q_s8(v28, v127);
      v28 += 32;
      v131.val[1] = 0uLL;
      vst2q_s8(v28, v131);
      v29 = (char *)(v21 + 64);
      vst2q_s8(v29, v129);
      v30 = (char *)(v21 + 96);
      vst2q_s8(v30, *(int8x16x2_t *)(&v24 - 1));
      v21 += 128;
    }
    while (v21 != v23);
    v21 = v23;
  }
  if ((char *)v21 != v22)
  {
    v31 = (char *)v20 + 2 * v8 - v21;
    v32 = (unint64_t)(v31 + 30);
    if ((unint64_t)(v31 + 30) < 0xE
      || (v33 = v31 + 30, v21 < (unint64_t)&v6[((unint64_t)v33 >> 1) + 1])
      && (unint64_t)v6 < ((unint64_t)v33 & 0xFFFFFFFFFFFFFFFELL) + v21 + 2)
    {
      v34 = (char *)v21;
      v35 = v6;
      goto LABEL_30;
    }
    v90 = (v32 >> 1) + 1;
    if (v32 >= 0x3E)
    {
      v91 = v90 & 0xFFFFFFFFFFFFFFE0;
      v94 = (uint8x8_t *)(v6 + 16);
      v95 = (uint16x8_t *)(v21 + 32);
      v96 = v90 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v97 = *(uint8x16_t *)v94[-2].i8;
        v98 = vmovl_u8(*v94);
        v99 = vmovl_high_u8(*(uint8x16_t *)v94->i8);
        v95[-2] = vmovl_u8(*(uint8x8_t *)v97.i8);
        v95[-1] = vmovl_high_u8(v97);
        *v95 = v98;
        v95[1] = v99;
        v95 += 4;
        v94 += 4;
        v96 -= 32;
      }
      while (v96);
      if (v90 == v91)
        goto LABEL_31;
      if ((v90 & 0x18) == 0)
      {
        v35 = &v6[v91];
        v34 = (char *)(v21 + 2 * v91);
        do
        {
LABEL_30:
          v36 = *(unsigned __int8 *)v35++;
          *(_WORD *)v34 = v36;
          v34 += 2;
        }
        while (v34 != v22);
        goto LABEL_31;
      }
    }
    else
    {
      v91 = 0;
    }
    v34 = (char *)(v21 + 2 * (v90 & 0xFFFFFFFFFFFFFFF8));
    v35 = &v6[v90 & 0xFFFFFFFFFFFFFFF8];
    v100 = (uint8x8_t *)&v6[v91];
    v101 = (uint16x8_t *)(v21 + 2 * v91);
    v102 = v91 - (v90 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v103 = *v100++;
      *v101++ = vmovl_u8(v103);
      v102 += 8;
    }
    while (v102);
    if (v90 != (v90 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
  }
LABEL_31:
  v37 = *((_QWORD *)v15 + 1);
  v38 = *((unsigned int *)v15 + 1);
  if ((*((_BYTE *)v15 + 16) & 4) == 0)
  {
    if (!(_DWORD)v38)
      goto LABEL_43;
    if ((_DWORD)v38 == 1)
    {
      *(_WORD *)v22 = *(_WORD *)v37;
      goto LABEL_43;
    }
    v64 = 2 * v38;
LABEL_85:
    memcpy(v22, (const void *)v37, v64);
    goto LABEL_43;
  }
  v72 = &v22[2 * v38];
  if (v38 >= 0x40)
  {
    v73 = &v22[2 * (v38 & 0xFFFFFFC0)];
    v74 = 0uLL;
    do
    {
      v128.val[0] = *(int8x16_t *)v37;
      v75 = *(int8x16_t *)(v37 + 16);
      v130.val[0] = *(int8x16_t *)(v37 + 32);
      v76 = *(_OWORD *)(v37 + 48);
      v37 += 64;
      v77 = v76;
      v130.val[1] = 0uLL;
      v132.val[0] = v75;
      v128.val[1] = 0uLL;
      v78 = v22;
      vst2q_s8(v78, v128);
      v78 += 32;
      v132.val[1] = 0uLL;
      vst2q_s8(v78, v132);
      v79 = v22 + 64;
      vst2q_s8(v79, v130);
      v80 = v22 + 96;
      vst2q_s8(v80, *(int8x16x2_t *)(&v74 - 1));
      v22 += 128;
    }
    while (v22 != v73);
    v22 = v73;
  }
  if (v22 != v72)
  {
    v81 = (WTF::StringImpl *)((char *)v20 + 2 * v8 + 2 * v38) - (WTF::StringImpl *)v22;
    v82 = v81 + 30;
    if ((unint64_t)(v81 + 30) < 0xE
      || (v83 = v81 + 30, (unint64_t)v22 < v37 + (v83 >> 1) + 1)
      && v37 < (unint64_t)&v22[(v83 & 0xFFFFFFFFFFFFFFFELL) + 2])
    {
      v84 = v22;
      v85 = (unsigned __int8 *)v37;
      goto LABEL_79;
    }
    v92 = (v82 >> 1) + 1;
    if (v82 >= 0x3E)
    {
      v93 = v92 & 0xFFFFFFFFFFFFFFE0;
      v115 = (uint8x8_t *)(v37 + 16);
      v116 = (uint16x8_t *)(v22 + 32);
      v117 = v92 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v118 = *(uint8x16_t *)v115[-2].i8;
        v119 = vmovl_u8(*v115);
        v120 = vmovl_high_u8(*(uint8x16_t *)v115->i8);
        v116[-2] = vmovl_u8(*(uint8x8_t *)v118.i8);
        v116[-1] = vmovl_high_u8(v118);
        *v116 = v119;
        v116[1] = v120;
        v116 += 4;
        v115 += 4;
        v117 -= 32;
      }
      while (v117);
      if (v92 == v93)
        goto LABEL_43;
      if ((v92 & 0x18) == 0)
      {
        v85 = (unsigned __int8 *)(v37 + v93);
        v84 = &v22[2 * v93];
        do
        {
LABEL_79:
          v86 = *v85++;
          *(_WORD *)v84 = v86;
          v84 += 2;
        }
        while (v84 != v72);
        goto LABEL_43;
      }
    }
    else
    {
      v93 = 0;
    }
    v84 = &v22[2 * (v92 & 0xFFFFFFFFFFFFFFF8)];
    v85 = (unsigned __int8 *)(v37 + (v92 & 0xFFFFFFFFFFFFFFF8));
    v121 = (uint8x8_t *)(v37 + v93);
    v122 = (uint16x8_t *)&v22[2 * v93];
    v123 = v93 - (v92 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v124 = *v121++;
      *v122++ = vmovl_u8(v124);
      v123 += 8;
    }
    while (v123);
    if (v92 != (v92 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_79;
  }
LABEL_43:
  v126 = v20;
  WTF::URL::URL(a3, (WTF::AtomStringImpl *)&v126, 0, v9, v10, v11, v12, v13);
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
    {
      WTF::StringImpl::~StringImpl(v126, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
      v47 = v125;
      if (!v125)
        return;
      goto LABEL_49;
    }
    *(_DWORD *)v126 -= 2;
  }
  v47 = v125;
  if (!v125)
    return;
LABEL_49:
  if (*(_DWORD *)v47 == 2)
  {
    WTF::StringImpl::~StringImpl(v47, v40, v41, v42, v43, v44, v45, v46);
    WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
  }
  else
  {
    *(_DWORD *)v47 -= 2;
  }
}

const char *WTF::URL::queryWithLeadingQuestionMark(WTF::URL *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  const char *result;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *((unsigned int *)this + 8);
  v2 = *((_DWORD *)this + 9);
  if (v2 <= v1)
    return 0;
  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return "";
  result = *(const char **)(v3 + 8);
  v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  if (v5 <= v1)
    return "";
  v6 = v2 - v1;
  if ((int)v5 - (int)v1 > v6 || (v6 = v5 - v1, (_DWORD)v1))
  {
    v7 = v6;
    v8 = v5 - v1;
    if ((v5 & 0x100000000) != 0)
    {
      if (v8 >= v7)
      {
        result += v1;
        return result;
      }
    }
    else if (v8 >= v7)
    {
      result += 2 * v1;
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t WTF::URL::fragmentIdentifierWithLeadingNumberSign(WTF::URL *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;

  if ((*((_BYTE *)this + 8) & 1) == 0)
    return 0;
  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v2 = *(unsigned int *)(v1 + 4);
  v3 = *((unsigned int *)this + 9);
  if (v2 <= v3)
    return 0;
  result = *(_QWORD *)(v1 + 8);
  if ((_DWORD)v3)
  {
    v5 = v2 - v3;
    if (((*(_DWORD *)(v1 + 16) >> 2) & 1) != 0)
    {
      if (v5 >= v5)
      {
        result += v3;
        return result;
      }
    }
    else if (v5 >= v5)
    {
      result += 2 * v3;
      return result;
    }
    __break(1u);
  }
  return result;
}

BOOL WTF::URL::isAboutBlank(WTF::URL *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;

  if ((*((_DWORD *)this + 2) & 0xFFFFFFC1) != 0x141)
    return 0;
  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v2 = *(_DWORD *)(v1 + 4);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 16) & 4) != 0)
  {
    if (v2 == 1
      || (*(_BYTE *)v3 & 0xDF) != 0x41
      || v2 < 3
      || (*(_BYTE *)(v3 + 1) & 0xDF) != 0x42
      || v2 < 4
      || (*(_BYTE *)(v3 + 2) & 0xDF) != 0x4F
      || v2 < 5
      || (*(_BYTE *)(v3 + 3) & 0xDF) != 0x55)
    {
      return 0;
    }
    v4 = *(unsigned __int8 *)(v3 + 4);
  }
  else
  {
    if (v2 == 1
      || (*(_WORD *)v3 & 0xFFDF) != 0x41
      || v2 < 3
      || (*(_WORD *)(v3 + 2) & 0xFFDF) != 0x42
      || v2 < 4
      || (*(_WORD *)(v3 + 4) & 0xFFDF) != 0x4F
      || v2 < 5
      || (*(_WORD *)(v3 + 6) & 0xFFDF) != 0x55)
    {
      return 0;
    }
    v4 = *(unsigned __int16 *)(v3 + 8);
  }
  if ((v4 & 0xFFFFFFDF) == 0x54)
  {
    v5 = (unsigned __int8 *)WTF::URL::path(this);
    return WTF::operator==(v5, v6, "blank", 6);
  }
  return 0;
}

BOOL WTF::URL::isAboutSrcDoc(WTF::URL *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;

  if ((*((_DWORD *)this + 2) & 0xFFFFFFC1) != 0x141)
    return 0;
  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v2 = *(_DWORD *)(v1 + 4);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 16) & 4) != 0)
  {
    if (v2 == 1
      || (*(_BYTE *)v3 & 0xDF) != 0x41
      || v2 < 3
      || (*(_BYTE *)(v3 + 1) & 0xDF) != 0x42
      || v2 < 4
      || (*(_BYTE *)(v3 + 2) & 0xDF) != 0x4F
      || v2 < 5
      || (*(_BYTE *)(v3 + 3) & 0xDF) != 0x55)
    {
      return 0;
    }
    v4 = *(unsigned __int8 *)(v3 + 4);
  }
  else
  {
    if (v2 == 1
      || (*(_WORD *)v3 & 0xFFDF) != 0x41
      || v2 < 3
      || (*(_WORD *)(v3 + 2) & 0xFFDF) != 0x42
      || v2 < 4
      || (*(_WORD *)(v3 + 4) & 0xFFDF) != 0x4F
      || v2 < 5
      || (*(_WORD *)(v3 + 6) & 0xFFDF) != 0x55)
    {
      return 0;
    }
    v4 = *(unsigned __int16 *)(v3 + 8);
  }
  if ((v4 & 0xFFFFFFDF) == 0x54)
  {
    v5 = (unsigned __int8 *)WTF::URL::path(this);
    return WTF::operator==(v5, v6, "srcdoc", 7);
  }
  return 0;
}

void WTF::queryParameters(WTF *this@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, float a5@<S2>)
{
  int v6;
  int v7;
  int16x8_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;

  v7 = *((_DWORD *)this + 8);
  v6 = *((_DWORD *)this + 9);
  if (v6 == v7)
  {
    v8 = 0;
    v9 = 0x100000000;
LABEL_3:
    WTF::URLParser::parseURLEncodedForm(v8, v9, a2, a3, a4, a5);
    return;
  }
  v10 = *(_QWORD *)this;
  if (!*(_QWORD *)this
    || (v8 = *(int16x8_t **)(v10 + 8),
        v11 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32),
        v12 = (v7 + 1),
        v11 <= v12))
  {
    v9 = 0x100000000;
    v8 = (int16x8_t *)"";
    goto LABEL_3;
  }
  v13 = v6 - v12;
  if ((int)v11 - (int)v12 <= v13)
  {
    v13 = v11 - v12;
    if (!(_DWORD)v12)
    {
      v9 = v11;
      goto LABEL_3;
    }
  }
  v9 = v13;
  v14 = v11 - v12;
  if ((v11 & 0x100000000) != 0)
  {
    if (v14 >= v9)
    {
      v8 = (int16x8_t *)((char *)v8 + v12);
      v9 |= 0x100000000uLL;
      goto LABEL_3;
    }
  }
  else if (v14 >= v9)
  {
    v8 = (int16x8_t *)((char *)v8 + 2 * v12);
    goto LABEL_3;
  }
  __break(1u);
}

void WTF::differingQueryParameters(WTF *this@<X0>, const WTF::URL *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, float a6@<S2>)
{
  int v9;
  int v10;
  double v11;
  double v12;
  float v13;
  int v14;
  int v15;
  uint64_t v16;
  int16x8_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  WTF::AtomStringImpl *v23;
  const WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int16x8_t *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  const WTF::StringImpl *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  WTF *v49;
  WTF *v50;
  int v51;
  WTF *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  WTF *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  uint64_t v65;
  _DWORD *v66;
  _DWORD *v67;
  uint64_t v68;
  _DWORD *v69;
  _DWORD *v70;
  uint64_t v71;
  WTF *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  _DWORD *v77;
  uint64_t v78;
  _DWORD *v79;
  _DWORD *v80;
  uint64_t v81;
  WTF *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  _DWORD *v88;
  uint64_t v89;
  _DWORD *v90;
  _DWORD *v91;
  unsigned int *v92;
  int v93;
  int v94;
  WTF *v95;
  uint64_t v96;
  WTF::StringImpl **v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF *v116;
  uint64_t v117;
  WTF::StringImpl **v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  WTF *v137;
  int v138;
  unsigned int v139;
  WTF *v140;
  int v141;
  unsigned int v142;

  v10 = *((_DWORD *)this + 8);
  v9 = *((_DWORD *)this + 9);
  if (v9 == v10)
  {
    WTF::URLParser::parseURLEncodedForm(0, 0x100000000, (uint64_t)&v140, a4, a5, a6);
    v15 = *((_DWORD *)a2 + 8);
    v14 = *((_DWORD *)a2 + 9);
    if (v14 != v15)
      goto LABEL_19;
LABEL_16:
    WTF::URLParser::parseURLEncodedForm(0, 0x100000000, (uint64_t)&v137, v11, v12, v13);
    v30 = v142;
    if (v142)
      goto LABEL_31;
    goto LABEL_106;
  }
  v16 = *(_QWORD *)this;
  if (!*(_QWORD *)this
    || (v17 = *(int16x8_t **)(v16 + 8),
        v18 = *(unsigned int *)(v16 + 4) | ((unint64_t)((*(_DWORD *)(v16 + 16) >> 2) & 1) << 32),
        v19 = (v10 + 1),
        v18 <= v19))
  {
    WTF::URLParser::parseURLEncodedForm((int16x8_t *)"", 0x100000000, (uint64_t)&v140, a4, a5, a6);
    v15 = *((_DWORD *)a2 + 8);
    v14 = *((_DWORD *)a2 + 9);
    if (v14 != v15)
      goto LABEL_19;
    goto LABEL_16;
  }
  v20 = v9 - v19;
  if ((int)v18 - (int)v19 > v20 || (v20 = v18 - v19, (_DWORD)v19))
  {
    v21 = v20;
    v22 = v18 - v19;
    if ((v18 & 0x100000000) != 0)
    {
      if (v22 >= v21)
      {
        WTF::URLParser::parseURLEncodedForm((int16x8_t *)((char *)v17 + v19), v21 | 0x100000000, (uint64_t)&v140, a4, a5, a6);
        v15 = *((_DWORD *)a2 + 8);
        v14 = *((_DWORD *)a2 + 9);
        if (v14 != v15)
          goto LABEL_19;
        goto LABEL_16;
      }
LABEL_139:
      __break(1u);
LABEL_145:
      __break(0xC471u);
      JUMPOUT(0x197B32568);
    }
    if (v22 < v21)
      goto LABEL_139;
    WTF::URLParser::parseURLEncodedForm((int16x8_t *)((char *)v17 + 2 * v19), v21, (uint64_t)&v140, a4, a5, a6);
    v15 = *((_DWORD *)a2 + 8);
    v14 = *((_DWORD *)a2 + 9);
    if (v14 == v15)
      goto LABEL_16;
  }
  else
  {
    WTF::URLParser::parseURLEncodedForm(v17, v18, (uint64_t)&v140, a4, a5, a6);
    v15 = *((_DWORD *)a2 + 8);
    v14 = *((_DWORD *)a2 + 9);
    if (v14 == v15)
      goto LABEL_16;
  }
LABEL_19:
  v31 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2
    || (v32 = *(int16x8_t **)(v31 + 8),
        v33 = *(unsigned int *)(v31 + 4) | ((unint64_t)((*(_DWORD *)(v31 + 16) >> 2) & 1) << 32),
        v34 = (v15 + 1),
        v33 <= v34))
  {
    WTF::URLParser::parseURLEncodedForm((int16x8_t *)"", 0x100000000, (uint64_t)&v137, v11, v12, v13);
    v30 = v142;
    if (!v142)
      goto LABEL_106;
    goto LABEL_31;
  }
  v35 = v14 - v34;
  if ((int)v33 - (int)v34 <= v35)
  {
    v35 = v33 - v34;
    if (!(_DWORD)v34)
    {
      WTF::URLParser::parseURLEncodedForm(v32, v33, (uint64_t)&v137, v11, v12, v13);
      v30 = v142;
      if (v142)
        goto LABEL_31;
      goto LABEL_106;
    }
  }
  v36 = v35;
  v37 = v33 - v34;
  if ((v33 & 0x100000000) == 0)
  {
    if (v37 < v36)
      goto LABEL_139;
    WTF::URLParser::parseURLEncodedForm((int16x8_t *)((char *)v32 + 2 * v34), v36, (uint64_t)&v137, v11, v12, v13);
    v30 = v142;
    if (v142)
      goto LABEL_31;
LABEL_106:
    v30 = (unint64_t)v137;
    v137 = 0;
    *(_QWORD *)a3 = v30;
    v94 = v138;
    LODWORD(v30) = v139;
    v138 = 0;
    *(_DWORD *)(a3 + 8) = v94;
    v92 = &v139;
    goto LABEL_107;
  }
  if (v37 < v36)
    goto LABEL_139;
  WTF::URLParser::parseURLEncodedForm((int16x8_t *)((char *)v32 + v34), v36 | 0x100000000, (uint64_t)&v137, v11, v12, v13);
  v30 = v142;
  if (!v142)
    goto LABEL_106;
LABEL_31:
  v38 = v140;
  if (v139)
  {
    std::__introsort<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *,false>((WTF::StringImpl **)v140, (WTF *)((char *)v140 + 16 * v30), (const WTF::StringImpl *)(126 - 2 * __clz(v30)), 1, v26, v27, v28, v29);
    v43 = 126 - 2 * __clz(v139);
    if (v139)
      v44 = (const WTF::StringImpl *)v43;
    else
      v44 = 0;
    std::__introsort<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *,false>((WTF::StringImpl **)v137, (WTF *)((char *)v137 + 16 * v139), v44, 1, v39, v40, v41, v42);
    v45 = 0;
    v46 = v142;
    v47 = v139;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v48 = 0;
    if (!(_DWORD)v46 || !(_DWORD)v47)
    {
LABEL_74:
      if (v45 < v46)
      {
        v71 = 16 * v45;
        do
        {
          if (v45 >= v142)
          {
            __break(0xC471u);
            JUMPOUT(0x197B32578);
          }
          v72 = v140;
          v24 = (WTF *)((char *)v140 + v71);
          v73 = *(unsigned int *)(a3 + 12);
          if ((_DWORD)v73 == *(_DWORD *)(a3 + 8))
          {
            v74 = WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v73 + 1, (unint64_t)v24);
            v73 = *(unsigned int *)(a3 + 12);
            v75 = *(_QWORD *)a3;
            v76 = *(_DWORD **)v74;
            if (*(_QWORD *)v74)
              *v76 += 2;
            *(_QWORD *)(v75 + 16 * v73) = v76;
            v77 = *(_DWORD **)(v74 + 8);
            if (v77)
              *v77 += 2;
            *(_QWORD *)(v75 + 16 * v73 + 8) = v77;
          }
          else
          {
            v78 = *(_QWORD *)a3;
            v79 = *(_DWORD **)v24;
            if (*(_QWORD *)v24)
              *v79 += 2;
            *(_QWORD *)(v78 + 16 * v73) = v79;
            v80 = *(_DWORD **)((char *)v72 + v71 + 8);
            if (v80)
              *v80 += 2;
            *(_QWORD *)(v78 + 16 * v73 + 8) = v80;
          }
          *(_DWORD *)(a3 + 12) = v73 + 1;
          ++v45;
          v71 += 16;
        }
        while (v46 != v45);
      }
      if (v48 < v47)
      {
        v81 = 16 * v48;
        do
        {
          while (1)
          {
            if (v48 >= v139)
            {
              __break(0xC471u);
              JUMPOUT(0x197B32580);
            }
            v82 = v137;
            v24 = (WTF *)((char *)v137 + v81);
            v83 = *(unsigned int *)(a3 + 12);
            if ((_DWORD)v83 != *(_DWORD *)(a3 + 8))
              break;
            v84 = WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v83 + 1, (unint64_t)v24);
            v85 = *(unsigned int *)(a3 + 12);
            v86 = *(_QWORD *)a3;
            v87 = *(_DWORD **)v84;
            if (*(_QWORD *)v84)
              *v87 += 2;
            *(_QWORD *)(v86 + 16 * v85) = v87;
            v88 = *(_DWORD **)(v84 + 8);
            if (v88)
              *v88 += 2;
            *(_QWORD *)(v86 + 16 * v85 + 8) = v88;
            *(_DWORD *)(a3 + 12) = v85 + 1;
            ++v48;
            v81 += 16;
            if (v47 == v48)
              goto LABEL_108;
          }
          v89 = *(_QWORD *)a3;
          v90 = *(_DWORD **)v24;
          if (*(_QWORD *)v24)
            *v90 += 2;
          *(_QWORD *)(v89 + 16 * v83) = v90;
          v91 = *(_DWORD **)((char *)v82 + v81 + 8);
          if (v91)
            *v91 += 2;
          *(_QWORD *)(v89 + 16 * v83 + 8) = v91;
          *(_DWORD *)(a3 + 12) = v83 + 1;
          ++v48;
          v81 += 16;
        }
        while (v47 != v48);
      }
      goto LABEL_108;
    }
    v48 = 0;
    v45 = 0;
    while (1)
    {
      if (v45 >= v142)
        goto LABEL_145;
      if (v48 >= v139)
      {
        __break(0xC471u);
        JUMPOUT(0x197B32570);
      }
      v49 = v140;
      v50 = v137;
      v51 = WTF::codePointCompare(*((WTF **)v140 + 2 * v45), *((const WTF::StringImpl **)v137 + 2 * v48), v24);
      if (v51)
      {
        if ((v51 & 0x80000000) == 0)
          goto LABEL_42;
      }
      else
      {
        v51 = WTF::codePointCompare(*((WTF **)v49 + 2 * v45 + 1), *((const WTF::StringImpl **)v50 + 2 * v48 + 1), v24);
        if ((v51 & 0x80000000) == 0)
        {
LABEL_42:
          if (v51)
          {
            if (v48 >= v139)
            {
              __break(0xC471u);
              JUMPOUT(0x197B32588);
            }
            v52 = v137;
            v24 = (WTF *)((char *)v137 + 16 * v48);
            v53 = *(unsigned int *)(a3 + 12);
            if ((_DWORD)v53 == *(_DWORD *)(a3 + 8))
            {
              v54 = WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v53 + 1, (unint64_t)v24);
              v55 = *(unsigned int *)(a3 + 12);
              v56 = *(_QWORD *)a3;
              v57 = *(_DWORD **)v54;
              if (*(_QWORD *)v54)
                *v57 += 2;
              *(_QWORD *)(v56 + 16 * v55) = v57;
              v58 = *(_DWORD **)(v54 + 8);
              if (v58)
                *v58 += 2;
              *(_QWORD *)(v56 + 16 * v55 + 8) = v58;
              *(_DWORD *)(a3 + 12) = v55 + 1;
              ++v48;
              if (v45 >= v46)
                goto LABEL_74;
            }
            else
            {
              v65 = *(_QWORD *)a3;
              v66 = *(_DWORD **)v24;
              if (*(_QWORD *)v24)
                *v66 += 2;
              *(_QWORD *)(v65 + 16 * v53) = v66;
              v67 = (_DWORD *)*((_QWORD *)v52 + 2 * v48 + 1);
              if (v67)
                *v67 += 2;
              *(_QWORD *)(v65 + 16 * v53 + 8) = v67;
              *(_DWORD *)(a3 + 12) = v53 + 1;
              ++v48;
              if (v45 >= v46)
                goto LABEL_74;
            }
          }
          else
          {
            ++v45;
            ++v48;
            if (v45 >= v46)
              goto LABEL_74;
          }
          goto LABEL_73;
        }
      }
      if (v45 >= v142)
        goto LABEL_145;
      v59 = v140;
      v24 = (WTF *)((char *)v140 + 16 * v45);
      v60 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v60 == *(_DWORD *)(a3 + 8))
      {
        v61 = WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v60 + 1, (unint64_t)v24);
        v60 = *(unsigned int *)(a3 + 12);
        v62 = *(_QWORD *)a3;
        v63 = *(_DWORD **)v61;
        if (*(_QWORD *)v61)
          *v63 += 2;
        *(_QWORD *)(v62 + 16 * v60) = v63;
        v64 = *(_DWORD **)(v61 + 8);
        if (v64)
          *v64 += 2;
        *(_QWORD *)(v62 + 16 * v60 + 8) = v64;
      }
      else
      {
        v68 = *(_QWORD *)a3;
        v69 = *(_DWORD **)v24;
        if (*(_QWORD *)v24)
          *v69 += 2;
        *(_QWORD *)(v68 + 16 * v60) = v69;
        v70 = (_DWORD *)*((_QWORD *)v59 + 2 * v45 + 1);
        if (v70)
          *v70 += 2;
        *(_QWORD *)(v68 + 16 * v60 + 8) = v70;
      }
      *(_DWORD *)(a3 + 12) = v60 + 1;
      if (++v45 >= v46)
        goto LABEL_74;
LABEL_73:
      if (v48 >= v47)
        goto LABEL_74;
    }
  }
  v92 = &v142;
  v140 = 0;
  *(_QWORD *)a3 = v38;
  v93 = v141;
  v141 = 0;
  *(_DWORD *)(a3 + 8) = v93;
LABEL_107:
  *v92 = 0;
  *(_DWORD *)(a3 + 12) = v30;
LABEL_108:
  v95 = v137;
  if (!v139)
    goto LABEL_121;
  v96 = 16 * v139;
  v97 = (WTF::StringImpl **)((char *)v137 + 8);
  do
  {
    v98 = *v97;
    *v97 = 0;
    if (!v98)
      goto LABEL_115;
    if (*(_DWORD *)v98 != 2)
    {
      *(_DWORD *)v98 -= 2;
LABEL_115:
      v99 = *(v97 - 1);
      *(v97 - 1) = 0;
      if (!v99)
        goto LABEL_111;
      goto LABEL_118;
    }
    WTF::StringImpl::~StringImpl(v98, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    v99 = *(v97 - 1);
    *(v97 - 1) = 0;
    if (!v99)
      goto LABEL_111;
LABEL_118:
    if (*(_DWORD *)v99 == 2)
    {
      WTF::StringImpl::~StringImpl(v99, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    }
    else
    {
      *(_DWORD *)v99 -= 2;
    }
LABEL_111:
    v97 += 2;
    v96 -= 16;
  }
  while (v96);
  v95 = v137;
LABEL_121:
  if (v95)
  {
    v137 = 0;
    v138 = 0;
    WTF::fastFree((unint64_t)v95, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
  }
  v116 = v140;
  if (v142)
  {
    v117 = 16 * v142;
    v118 = (WTF::StringImpl **)((char *)v140 + 8);
    while (1)
    {
      v119 = *v118;
      *v118 = 0;
      if (!v119)
        goto LABEL_130;
      if (*(_DWORD *)v119 != 2)
        break;
      WTF::StringImpl::~StringImpl(v119, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
      v120 = *(v118 - 1);
      *(v118 - 1) = 0;
      if (v120)
      {
LABEL_133:
        if (*(_DWORD *)v120 == 2)
        {
          WTF::StringImpl::~StringImpl(v120, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
          WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
        }
        else
        {
          *(_DWORD *)v120 -= 2;
        }
      }
LABEL_126:
      v118 += 2;
      v117 -= 16;
      if (!v117)
      {
        v116 = v140;
        goto LABEL_136;
      }
    }
    *(_DWORD *)v119 -= 2;
LABEL_130:
    v120 = *(v118 - 1);
    *(v118 - 1) = 0;
    if (v120)
      goto LABEL_133;
    goto LABEL_126;
  }
LABEL_136:
  if (v116)
  {
    v140 = 0;
    v141 = 0;
    WTF::fastFree((unint64_t)v116, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
  }
}

BOOL WTF::isEqualIgnoringQueryAndFragments(WTF *this, const WTF::URL *a2, const WTF::URL *a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v3 = *(_QWORD *)this;
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if (v3 && (v8 = *(unsigned int *)(v3 + 4), (_DWORD)v8))
    {
      v4 = *(unsigned __int8 **)(v3 + 8);
      v10 = *((unsigned int *)this + 8);
      v11 = (*(_DWORD *)(v3 + 16) >> 2) & 1;
      if (v10 >= v8)
        v5 = v8 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v11 & 1) << 32);
      else
        v5 = (v11 << 32) | v10;
    }
    else
    {
      v5 = 0x100000000;
      v4 = "";
    }
    v6 = HIDWORD(v5);
    v7 = *(_QWORD *)a2;
    if ((*((_BYTE *)a2 + 8) & 1) == 0)
      goto LABEL_19;
  }
  else if (v3)
  {
    v4 = *(unsigned __int8 **)(v3 + 8);
    LODWORD(v5) = *(_DWORD *)(v3 + 4);
    v6 = ((unint64_t)*(unsigned int *)(v3 + 16) >> 2) & 1;
    v7 = *(_QWORD *)a2;
    if ((*((_BYTE *)a2 + 8) & 1) == 0)
    {
LABEL_19:
      if (v7)
      {
        v13 = *(unsigned __int8 **)(v7 + 8);
        v16 = v5 | (unint64_t)(v6 << 32);
        v17 = *(unsigned int *)(v7 + 4) | ((((unint64_t)*(unsigned int *)(v7 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v13 = 0;
        v16 = v5 | (unint64_t)(v6 << 32);
        v17 = 0x100000000;
      }
      return WTF::operator==(v4, v16, v13, v17);
    }
  }
  else
  {
    LODWORD(v5) = 0;
    v4 = 0;
    v6 = 1;
    v7 = *(_QWORD *)a2;
    if ((*((_BYTE *)a2 + 8) & 1) == 0)
      goto LABEL_19;
  }
  if (v7 && (v12 = *(unsigned int *)(v7 + 4), (_DWORD)v12))
  {
    v13 = *(unsigned __int8 **)(v7 + 8);
    v14 = *((unsigned int *)a2 + 8);
    v15 = (*(_DWORD *)(v7 + 16) >> 2) & 1;
    v16 = v5 | (unint64_t)(v6 << 32);
    if (v14 >= v12)
      v17 = v12 | ((v12 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v15 & 1) << 32)) >> 32 << 32);
    else
      v17 = v14 | (((v15 << 32) | v14) >> 32 << 32);
  }
  else
  {
    v13 = "";
    v16 = v5 | (unint64_t)(v6 << 32);
    v17 = 0x100000000;
  }
  return WTF::operator==(v4, v16, v13, v17);
}

uint64_t WTF::removeQueryParameters@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  double v7;
  double v8;
  float v9;
  _QWORD *v10;

  if (*a2 && *(_DWORD *)(*a2 - 12))
  {
    v5 = result;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E35724C0;
    v6[1] = a2;
    v10 = v6;
    WTF::removeQueryParameters(v5, &v10, (uint64_t)a3, v7, v8, v9);
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void WTF::removeQueryParameters(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, float a6@<S2>)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  int16x8_t *v17;
  _BOOL4 v18;
  unint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int16x8_t v27;
  double v28;
  int8x16_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  BOOL v33;
  int8x16_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  int16x8_t *v40;
  int8x16_t v41;
  int8x16_t v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unsigned int v47;
  _BOOL8 v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  _BYTE *v53;
  _BYTE *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unint64_t v66;
  BOOL v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _WORD *v79;
  const char *v80;
  __int16 v81;
  int8x16_t v82;
  unint64_t v83;
  char *v84;
  int8x16_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int8x16_t v88;
  char *v89;
  char *v90;
  char *v91;
  _WORD *v92;
  unint64_t v93;
  int8x16_t *v94;
  uint64_t v95;
  __int8 *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  _WORD *v101;
  int16x8_t *v102;
  __int16 v103;
  size_t v104;
  int16x8_t *v105;
  unint64_t v106;
  BOOL v107;
  unint64_t v108;
  __int8 *v109;
  int16x8_t *v110;
  __int8 v111;
  uint64_t v112;
  unint64_t v113;
  uint8x8_t *v114;
  uint16x8_t *v115;
  unint64_t v116;
  uint8x16_t v117;
  uint16x8_t v118;
  uint8x8_t *v119;
  int8x16_t *v120;
  unint64_t v121;
  uint8x8_t v122;
  int8x16_t *v123;
  int8x16_t *v124;
  unint64_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int16x8_t *v129;
  _QWORD *v130;
  unint64_t v131;
  int16x8_t v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  unsigned int v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  int8x16_t *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int16x8_t v158;
  int8x16_t v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  char v162;
  int16x8_t *v163;
  unint64_t v164;
  unsigned __int16 v165;
  char v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  unsigned int v169;
  char v170;
  int8x16x2_t v171;

  v8 = *(unsigned int *)(a1 + 32);
  v7 = *(_DWORD *)(a1 + 36);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if (v7 > v8)
  {
    v167 = 0;
    v168 = 0;
    v169 = 0;
    v170 = 1;
    v10 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v11 = *(_QWORD *)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
      v13 = v8 + 1;
      v14 = v12 - v13;
      if (v12 > v13)
      {
        LODWORD(v15) = v7 - v13;
        if (v14 >= v15)
          v15 = v15;
        else
          v15 = v14;
        v16 = v12 - v13;
        if ((v12 & 0x100000000) != 0)
        {
          if (v16 >= v15)
          {
            v17 = (int16x8_t *)(v11 + v13);
            v15 |= 0x100000000uLL;
LABEL_13:
            v163 = v17;
            v164 = v15;
            v165 = 38;
            v166 = 0;
            v18 = v15 == 0;
            v19 = WTF::StringView::find((uint64_t)&v163, 0x26u, 0, a4, a5, a6);
            if (v19 == -1)
            {
              v30 = 0;
LABEL_20:
              v31 = v164;
              v32 = v164 - v30;
              if (v166)
                v33 = 0;
              else
                v33 = (_DWORD)v164 == v30;
              if (v33)
                v18 = 1;
              if (v30 == (_DWORD)v164 && v18)
              {
LABEL_169:
                if (!*(_DWORD *)(a3 + 12))
                  goto LABEL_186;
                v133 = v168;
                v134 = v168;
                if ((v168 || (v134 = v167) != 0) && (*((_BYTE *)v134 + 16) & 4) == 0)
                {
                  v135 = v169;
                  if (!v169)
                  {
                    v137 = 0;
                    v138 = 0;
                    goto LABEL_185;
                  }
                  v136 = v167;
                  if (!v167)
                    v136 = v168;
                  if ((v169 & 0x80000000) == 0)
                  {
                    v137 = 0;
                    v138 = (int8x16_t *)*((_QWORD *)v136 + 1);
LABEL_185:
                    WTF::URL::setQuery(a1, v138, v137 | v135, v22, v23, v24, v25, v26);
LABEL_186:
                    v139 = v168;
                    v168 = 0;
                    if (v139)
                    {
                      if (*(_DWORD *)v139 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v139, v20, v21, v22, v23, v24, v25, v26);
                        WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
                        v140 = v167;
                        v167 = 0;
                        if (!v140)
                          return;
                        goto LABEL_192;
                      }
                      *(_DWORD *)v139 -= 2;
                    }
                    v140 = v167;
                    v167 = 0;
                    if (!v140)
                      return;
LABEL_192:
                    if (*(_DWORD *)v140 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v140, v20, v21, v22, v23, v24, v25, v26);
                      WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
                    }
                    else
                    {
                      *(_DWORD *)v140 -= 2;
                    }
                    return;
                  }
                }
                else
                {
                  v135 = v169;
                  if (!v169)
                  {
                    v138 = 0;
                    v137 = 0x100000000;
                    goto LABEL_185;
                  }
                  if (v167)
                    v133 = v167;
                  if ((v169 & 0x80000000) == 0)
                  {
                    v138 = (int8x16_t *)*((_QWORD *)v133 + 1);
                    v137 = 0x100000000;
                    goto LABEL_185;
                  }
                }
LABEL_197:
                __break(0xC471u);
                JUMPOUT(0x197B33034);
              }
            }
            else
            {
              v30 = 0;
              while (v19 <= v30 && !v166)
              {
                v19 = WTF::StringView::find((uint64_t)&v163, v165, ++v30, *(double *)v27.i64, v28, *(float *)v29.i32);
                if (v19 == -1)
                  goto LABEL_20;
              }
              v32 = v19 - v30;
              v31 = v164;
              if (v30 == (_DWORD)v164 && v18)
                goto LABEL_169;
            }
            v36 = 0uLL;
            while (1)
            {
              v158 = v27;
              v159 = v36;
              if (v164 <= v30)
              {
                v38 = 0x100000000;
                v40 = (int16x8_t *)"";
                WTF::URLParser::parseQueryNameAndValue((int16x8_t *)"", 0x100000000, (uint64_t)&v160, *(float *)v29.i32);
                if (!v162)
                  goto LABEL_85;
              }
              else
              {
                v37 = v32;
                if (v164 - v30 > v32 || (v37 = v164 - v30, v30))
                {
                  v38 = v37;
                  v39 = v164 - (unint64_t)v30;
                  if (BYTE4(v164))
                  {
                    if (v39 < v37)
                      goto LABEL_196;
                    v40 = (int16x8_t *)((char *)v163 + v30);
                    v38 = v37 | 0x100000000;
                    WTF::URLParser::parseQueryNameAndValue(v40, v38, (uint64_t)&v160, *(float *)v29.i32);
                    if (!v162)
                      goto LABEL_85;
                  }
                  else
                  {
                    if (v39 < v37)
                      goto LABEL_196;
                    v40 = (int16x8_t *)((char *)v163 + 2 * v30);
                    WTF::URLParser::parseQueryNameAndValue(v40, v37, (uint64_t)&v160, *(float *)v29.i32);
                    if (!v162)
                      goto LABEL_85;
                  }
                }
                else
                {
                  v40 = v163;
                  v38 = v164;
                  WTF::URLParser::parseQueryNameAndValue(v163, v164, (uint64_t)&v160, *(float *)v29.i32);
                  if (!v162)
                    goto LABEL_85;
                }
              }
              if (v160)
                break;
LABEL_77:
              v55 = v161;
              v161 = 0;
              if (!v55)
                goto LABEL_80;
              if (*(_DWORD *)v55 != 2)
              {
                *(_DWORD *)v55 -= 2;
LABEL_80:
                v56 = v160;
                v160 = 0;
                if (!v56)
                  goto LABEL_85;
                goto LABEL_83;
              }
              WTF::StringImpl::~StringImpl(v55, v20, v21, v22, v23, v24, v25, v26);
              WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
              v56 = v160;
              v160 = 0;
              if (!v56)
                goto LABEL_85;
LABEL_83:
              if (*(_DWORD *)v56 != 2)
              {
                *(_DWORD *)v56 -= 2;
LABEL_85:
                v30 += v32;
                if (v30 < v164)
                  goto LABEL_86;
                goto LABEL_99;
              }
              WTF::StringImpl::~StringImpl(v56, v20, v21, v22, v23, v24, v25, v26);
              WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
              v30 += v32;
              if (v30 < v164)
              {
LABEL_86:
                while (1)
                {
                  v65 = v30++;
                  v66 = WTF::StringView::find((uint64_t)&v163, v165, v30, *(double *)v41.i64, *(double *)v42.i64, *(float *)v29.i32);
                  if (v66 == -1)
                    break;
                  if (v66 > v30 || v166 != 0)
                  {
                    v32 = v66 - v30;
                    v30 = v65 + 1;
                    goto LABEL_100;
                  }
                }
                v32 = v164 - 1 - v65;
                if (v166)
                  v68 = 0;
                else
                  v68 = (_DWORD)v164 - 1 == v65;
                if (v68)
                  LOBYTE(v18) = 1;
                goto LABEL_100;
              }
LABEL_99:
              LOBYTE(v18) = 1;
LABEL_100:
              v27 = v158;
              v36 = v159;
              if (v30 == v31 && v18)
                goto LABEL_169;
            }
            if (!*((_DWORD *)v160 + 1))
            {
LABEL_76:
              if (!v162)
                goto LABEL_85;
              goto LABEL_77;
            }
            if ((*(unsigned int (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a2 + 16))(*a2, &v160))
            {
              v43 = *(unsigned int *)(a3 + 12);
              if ((_DWORD)v43 == *(_DWORD *)(a3 + 8))
              {
                v44 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v43 + 1, (unint64_t)&v160);
                v43 = *(unsigned int *)(a3 + 12);
                v45 = *(_QWORD *)a3;
                v46 = *v44;
                if (!*v44)
                  goto LABEL_75;
              }
              else
              {
                v45 = *(_QWORD *)a3;
                v46 = v160;
                if (!v160)
                {
LABEL_75:
                  *(_QWORD *)(v45 + 8 * v43) = v46;
                  *(_DWORD *)(a3 + 12) = v43 + 1;
                  goto LABEL_76;
                }
              }
              *(_DWORD *)v46 += 2;
              goto LABEL_75;
            }
            v47 = v169;
            v48 = v169 != 0;
            v49 = v48 + v38;
            if (__CFADD__(v48, (_DWORD)v38))
              v49 = -1;
            v107 = __CFADD__(v169, v49);
            v50 = v169 + v49;
            if (v107)
              v51 = 0xFFFFFFFFLL;
            else
              v51 = v50;
            v52 = v168;
            if (v168 || (v52 = v167) != 0)
            {
              if ((*((_BYTE *)v52 + 16) & 4) != 0 && (v38 & 0xFF00000000) != 0)
              {
LABEL_66:
                v53 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v167, (WTF::AtomStringImpl *)v51, v21, v22, v23, v24, v25, v26);
                if (!v53)
                  goto LABEL_76;
                if (v47)
                  *v53 = 38;
                v54 = &v53[v48];
                if ((v38 & 0xFF00000000) != 0)
                {
                  if (!(_DWORD)v38)
                    goto LABEL_76;
                  if ((_DWORD)v38 == 1)
                  {
                    *v54 = v40->i8[0];
                    goto LABEL_76;
                  }
                  v104 = v38;
LABEL_148:
                  memcpy(v54, v40, v104);
                  goto LABEL_76;
                }
                if (v38 < 0x10)
                {
                  v93 = (unint64_t)&v53[v48];
                  v95 = v38;
                  v96 = &v54[v38];
                  if (&v53[v48] == v96)
                    goto LABEL_76;
                }
                else
                {
                  v93 = (unint64_t)&v54[v38 & 0xFFFFFFF0];
                  v94 = (int8x16_t *)&v53[v48];
                  do
                  {
                    *(int8x16x2_t *)v41.i8 = vld2q_s8(v40->i8);
                    v40 += 2;
                    *v94++ = v41;
                  }
                  while (v94 != (int8x16_t *)v93);
                  v95 = v38;
                  v96 = &v54[v38];
                  if ((__int8 *)v93 == v96)
                    goto LABEL_76;
                }
                v105 = (int16x8_t *)&v53[v48 + v95];
                v106 = (unint64_t)v105 - v93;
                if ((unint64_t)v105 - v93 < 8
                  || (v93 < (unint64_t)v40 + 2 * v106 ? (v107 = v40 >= v105) : (v107 = 1), !v107))
                {
                  v109 = (__int8 *)v93;
                  v110 = v40;
                  goto LABEL_145;
                }
                if (v106 >= 0x20)
                {
                  v108 = v106 & 0xFFFFFFFFFFFFFFE0;
                  v123 = (int8x16_t *)&v40[2];
                  v124 = (int8x16_t *)(v93 + 16);
                  v125 = v106 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v127 = v123[-2];
                    v126 = v123[-1];
                    v128 = *v123;
                    v29 = v123[1];
                    v123 += 4;
                    v41 = vuzp1q_s8(v127, v126);
                    v42 = vuzp1q_s8(v128, v29);
                    v124[-1] = v41;
                    *v124 = v42;
                    v124 += 2;
                    v125 -= 32;
                  }
                  while (v125);
                  if (v106 == v108)
                    goto LABEL_76;
                  if ((v106 & 0x18) == 0)
                  {
                    v110 = (int16x8_t *)((char *)v40 + 2 * v108);
                    v109 = (__int8 *)(v93 + v108);
                    goto LABEL_145;
                  }
                }
                else
                {
                  v108 = 0;
                }
                v109 = (__int8 *)(v93 + (v106 & 0xFFFFFFFFFFFFFFF8));
                v110 = (int16x8_t *)((char *)v40 + 2 * (v106 & 0xFFFFFFFFFFFFFFF8));
                v129 = (int16x8_t *)((char *)v40 + 2 * v108);
                v130 = (_QWORD *)(v93 + v108);
                v131 = v108 - (v106 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v132 = *v129++;
                  *(int8x8_t *)v41.i8 = vmovn_s16(v132);
                  *v130++ = v41.i64[0];
                  v131 += 8;
                }
                while (v131);
                if (v106 == (v106 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_76;
                do
                {
LABEL_145:
                  v111 = v110->i8[0];
                  v110 = (int16x8_t *)((char *)v110 + 2);
                  *v109++ = v111;
                }
                while (v109 != v96);
                goto LABEL_76;
              }
            }
            else if ((v38 & 0xFF00000000) != 0)
            {
              goto LABEL_66;
            }
            v77 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v167, (WTF::AtomStringImpl *)v51, v21, v22, v23, v24, v25, v26);
            if (!v77)
              goto LABEL_76;
            if (v47)
            {
              v78 = 2 * v48;
              v79 = (_WORD *)v77;
              v80 = "&";
              do
              {
                v81 = *(unsigned __int8 *)v80++;
                *v79++ = v81;
                v78 -= 2;
              }
              while (v78);
            }
            v54 = (_BYTE *)(v77 + 2 * v48);
            v82 = v159;
            if ((v38 & 0xFF00000000) == 0)
            {
              if (!(_DWORD)v38)
                goto LABEL_76;
              if ((_DWORD)v38 == 1)
              {
                *(_WORD *)v54 = v40->i16[0];
                goto LABEL_76;
              }
              v104 = 2 * v38;
              goto LABEL_148;
            }
            if (v38 < 0x40)
            {
              v83 = v77 + 2 * v48;
              v92 = &v54[2 * v38];
              if ((_WORD *)v83 == v92)
                goto LABEL_76;
            }
            else
            {
              v83 = (unint64_t)&v54[2 * (v38 & 0xFFFFFFC0)];
              v84 = (char *)(v77 + 2 * v48);
              do
              {
                v41 = *(int8x16_t *)v40;
                v85 = (int8x16_t)v40[1];
                v29 = (int8x16_t)v40[2];
                v86 = v40[3];
                v40 += 4;
                v87 = v86;
                v88 = v159;
                v171.val[0] = v85;
                v42 = v159;
                v89 = v84;
                vst2q_s8(v89, *(int8x16x2_t *)v41.i8);
                v89 += 32;
                v171.val[1] = v159;
                vst2q_s8(v89, v171);
                v90 = v84 + 64;
                vst2q_s8(v90, *(int8x16x2_t *)v29.i8);
                v91 = v84 + 96;
                vst2q_s8(v91, *(int8x16x2_t *)(&v82 - 1));
                v84 += 128;
              }
              while (v84 != (char *)v83);
              v158 = v87;
              v92 = &v54[2 * v38];
              if ((_WORD *)v83 == v92)
                goto LABEL_76;
            }
            v97 = v77 - 2;
            if (v47)
              v98 = v77;
            else
              v98 = v77 - 2;
            v99 = v98 + 2 * v38 - v83;
            if (v99 < 0xE)
              goto LABEL_131;
            if (v47)
              v97 = v77;
            v100 = v97 + 2 * v38 - v83;
            if (v83 < (unint64_t)v40->u64 + (v100 >> 1) + 1
              && (unint64_t)v40 < v83 + (v100 & 0xFFFFFFFFFFFFFFFELL) + 2)
            {
LABEL_131:
              v101 = (_WORD *)v83;
              v102 = v40;
              goto LABEL_132;
            }
            v112 = (v99 >> 1) + 1;
            if (v99 >= 0x3E)
            {
              v113 = v112 & 0xFFFFFFFFFFFFFFE0;
              v114 = (uint8x8_t *)&v40[1];
              v115 = (uint16x8_t *)(v83 + 32);
              v116 = v112 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v117 = *(uint8x16_t *)v114[-2].i8;
                v29 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v117.i8);
                v41 = (int8x16_t)vmovl_high_u8(v117);
                v118 = vmovl_u8(*v114);
                v42 = (int8x16_t)vmovl_high_u8(*(uint8x16_t *)v114->i8);
                v115[-2] = (uint16x8_t)v29;
                v115[-1] = (uint16x8_t)v41;
                *v115 = v118;
                v115[1] = (uint16x8_t)v42;
                v115 += 4;
                v114 += 4;
                v116 -= 32;
              }
              while (v116);
              if (v112 == v113)
                goto LABEL_76;
              if ((v112 & 0x18) == 0)
              {
                v102 = (int16x8_t *)((char *)v40 + v113);
                v101 = (_WORD *)(v83 + 2 * v113);
                goto LABEL_132;
              }
            }
            else
            {
              v113 = 0;
            }
            v101 = (_WORD *)(v83 + 2 * (v112 & 0xFFFFFFFFFFFFFFF8));
            v102 = (int16x8_t *)((char *)v40 + (v112 & 0xFFFFFFFFFFFFFFF8));
            v119 = (uint8x8_t *)&v40->i8[v113];
            v120 = (int8x16_t *)(v83 + 2 * v113);
            v121 = v113 - (v112 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v122 = *v119++;
              v41 = (int8x16_t)vmovl_u8(v122);
              *v120++ = v41;
              v121 += 8;
            }
            while (v121);
            if (v112 == (v112 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_76;
            do
            {
LABEL_132:
              v103 = v102->u8[0];
              v102 = (int16x8_t *)((char *)v102 + 1);
              *v101++ = v103;
            }
            while (v101 != v92);
            goto LABEL_76;
          }
        }
        else if (v16 >= v15)
        {
          v17 = (int16x8_t *)(v11 + 2 * v13);
          goto LABEL_13;
        }
LABEL_196:
        __break(1u);
        goto LABEL_197;
      }
    }
    v15 = 0x100000000;
    v17 = (int16x8_t *)"";
    goto LABEL_13;
  }
}

char *WTF::Vector<unsigned char,100ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, WTF *a2, unint64_t a3)
{
  char *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v26 = *a1;
        return &v26[a3 - (_QWORD)v5];
      }
      if (v10 < 0x65)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 100;
        goto LABEL_31;
      }
      if (!HIDWORD(v10))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)v10);
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, v6);
        v26 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v26 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v5, v27, v28, v29, v30, v31, v32, v33);
          v26 = *a1;
        }
        return &v26[a3 - (_QWORD)v5];
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x197B33228);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 <= v12)
    return (char *)a3;
  v16 = *((unsigned int *)a1 + 3);
  if (v15 < 0x65)
  {
    *a1 = (char *)(a1 + 2);
    *((_DWORD *)a1 + 2) = 100;
    memcpy(a1 + 2, v5, v16);
    if (a1 + 2 == (char **)v5)
      return (char *)a3;
  }
  else
  {
    if (HIDWORD(v15))
      goto LABEL_37;
    v17 = (char *)WTF::fastMalloc((WTF *)v15);
    *((_DWORD *)a1 + 2) = v15;
    *a1 = v17;
    memcpy(v17, v5, v16);
    if (a1 + 2 == (char **)v5)
      return (char *)a3;
  }
  if (!v5)
    return (char *)a3;
  if (*a1 == v5)
  {
    *a1 = 0;
    *((_DWORD *)a1 + 2) = 0;
  }
  WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
  return (char *)a3;
}

uint64_t WTF::escapePathWithoutCopying(WTF::StringView)::$_0::__invoke(unsigned int a1)
{
  _BOOL4 v1;

  v1 = a1 > 0x7F;
  if (a1 == 63)
    v1 = 1;
  return a1 == 35 || v1;
}

void std::__introsort<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *,false>(WTF::StringImpl **a1, WTF::AtomStringImpl *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const WTF::StringImpl *v8;
  const WTF::StringImpl **v9;
  const WTF::StringImpl **v11;
  uint64_t v12;
  unint64_t v13;
  const WTF::StringImpl **v14;
  WTF::AtomStringImpl *v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  const WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const WTF::StringImpl **v34;
  const WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  const WTF::StringImpl *v57;
  const WTF::StringImpl *v58;
  WTF **v59;
  int v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const WTF::StringImpl **v67;
  const WTF::StringImpl **v68;
  const WTF::StringImpl **v69;
  WTF::AtomStringImpl *v70;
  int v71;
  int v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::AtomStringImpl *v81;
  WTF **v82;
  int v83;
  const WTF::StringImpl **v84;
  int v85;
  const WTF::StringImpl **v86;
  const WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  const WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  const WTF::StringImpl *v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF *v128;
  WTF *v129;
  int v130;
  const WTF::StringImpl **v131;
  int v132;
  const WTF::StringImpl **v133;
  int v134;
  WTF::AtomStringImpl *v135;
  const WTF::StringImpl **v136;
  int v137;
  const WTF::StringImpl **v138;
  int v139;
  const WTF::StringImpl **v140;
  int v141;
  WTF **v142;
  const WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  const WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  WTF::StringImpl *v163;
  unint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  WTF::StringImpl *v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  const WTF::StringImpl *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  WTF **v188;
  BOOL v190;
  uint64_t v191;
  const WTF::StringImpl **v192;
  const WTF::StringImpl **v193;
  int v194;
  WTF::AtomStringImpl *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  WTF *v201;
  WTF *v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  WTF::StringImpl *v206;
  uint64_t v207;
  WTF::StringImpl *v208;
  unint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  unint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int64_t v246;
  int64_t v247;
  int64_t v248;
  uint64_t v249;
  WTF **v250;
  int v251;
  const WTF::StringImpl *v252;
  const WTF::StringImpl **v253;
  int v254;
  int64_t v255;
  const WTF::StringImpl *v256;
  const WTF::StringImpl **v257;
  int v258;
  WTF **v259;
  WTF *v260;
  WTF::StringImpl *v261;
  WTF *v262;
  WTF::StringImpl *v263;
  unint64_t v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  WTF *v272;
  unint64_t v273;
  void *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  const WTF::StringImpl *v283;
  WTF::StringImpl *v284;
  WTF::StringImpl *v285;
  unint64_t v286;
  void *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  void *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v304;
  const WTF::StringImpl **v305;
  WTF **v306;
  WTF **v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  WTF *v312;
  WTF::StringImpl *v313;
  WTF *v314;
  WTF::StringImpl *v315;
  unint64_t v316;
  void *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  WTF *v324;
  unint64_t v325;
  void *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  const WTF::StringImpl *v333;
  WTF::StringImpl *v334;
  WTF *v335;
  WTF::StringImpl *v336;
  WTF::StringImpl *v337;
  WTF::StringImpl *v338;
  unint64_t v339;
  void *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  WTF *v347;
  WTF::StringImpl *v348;
  unint64_t v349;
  void *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  WTF::StringImpl *v357;
  unint64_t v358;
  void *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  void *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  WTF **v376;
  int v377;
  unint64_t v378;
  void *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  const WTF::StringImpl *v386;
  const WTF::StringImpl *v387;
  WTF **v388;
  WTF *v389;
  WTF *v390;
  WTF *v391;
  WTF::StringImpl *v392;
  unint64_t v393;
  void *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  WTF *v401;
  unint64_t v402;
  void *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  int v410;
  WTF::StringImpl *v411;
  unint64_t v412;
  void *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  void *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  WTF::StringImpl **v429;
  uint64_t v430;
  uint64_t v431;
  const WTF::StringImpl **v432;
  uint64_t v433;
  int v434;
  WTF::AtomStringImpl *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  WTF *v441;
  WTF *v442;
  WTF::StringImpl **v443;
  uint64_t v444;
  WTF::StringImpl *v445;
  WTF::StringImpl *v446;
  WTF::StringImpl *v447;
  WTF::StringImpl *v448;
  unint64_t v449;
  void *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  WTF::StringImpl *v457;
  BOOL v458;
  unint64_t v459;
  void *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  int v467;
  WTF::StringImpl *v468;
  WTF::StringImpl *v469;
  unint64_t v470;
  void *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t v478;
  void *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  const WTF::StringImpl **v486;
  int64_t v487;
  const WTF::StringImpl **v488;
  WTF::StringImpl *v489;
  WTF::StringImpl *v490;
  char v491;
  WTF *v492;

  v491 = a4;
  v8 = a3;
  v9 = (const WTF::StringImpl **)a2;
LABEL_2:
  v11 = a1;
  v486 = a1 + 4;
  v488 = a1 + 2;
  while (2)
  {
    v12 = (char *)v9 - (char *)v11;
    v13 = ((char *)v9 - (char *)v11) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v181 = WTF::codePointCompare(*(v9 - 2), *v11, a3);
        if (!v181)
          v181 = WTF::codePointCompare(*(v9 - 1), v11[1], v182);
        if (v181 < 0)
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::String> *&,WTF::KeyValuePair<WTF::String,WTF::String> *&>(v11, (WTF::AtomStringImpl *)(v9 - 2), (uint64_t)v182, v183, v184, v185, v186, v187);
        return;
      case 3uLL:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(v11, v11 + 2, v9 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(v11, v11 + 2, v11 + 4, v9 - 2);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *,0>(v11, v11 + 2, v11 + 4, v11 + 6, v9 - 2);
        return;
      default:
        if (v12 <= 383)
        {
          v188 = v11 + 2;
          v190 = v11 == v9 || v188 == v9;
          if ((v491 & 1) != 0)
          {
            if (v190)
              return;
            v191 = 0;
            v192 = v11;
LABEL_154:
            v193 = v192;
            v192 = v188;
            v194 = WTF::codePointCompare(v193[2], *v193, a3);
            if (v194)
            {
              if ((v194 & 0x80000000) == 0)
                goto LABEL_153;
            }
            else if ((WTF::codePointCompare(v193[3], v193[1], a3) & 0x80000000) == 0)
            {
              goto LABEL_153;
            }
            v201 = *v188;
            *v188 = 0;
            v202 = v193[3];
            v193[3] = 0;
            v203 = v191;
            while (1)
            {
              v204 = (const WTF::StringImpl **)((char *)v11 + v203);
              v205 = *(uint64_t *)((char *)v11 + v203);
              *v204 = 0;
              v206 = *(const WTF::StringImpl **)((char *)v11 + v203 + 16);
              v204[2] = v205;
              if (!v206)
                goto LABEL_163;
              if (*(_DWORD *)v206 != 2)
                break;
              WTF::StringImpl::~StringImpl(v206, v195, (uint64_t)a3, v196, v197, v198, v199, v200);
              WTF::fastFree(v209, v210, v211, v212, v213, v214, v215, v216);
              v217 = v204[1];
              v204[1] = 0;
              v208 = (WTF::StringImpl *)v204[3];
              v204[3] = v217;
              if (!v208)
                goto LABEL_168;
LABEL_166:
              if (*(_DWORD *)v208 == 2)
              {
                WTF::StringImpl::~StringImpl(v208, v195, (uint64_t)a3, v196, v197, v198, v199, v200);
                WTF::fastFree(v218, v219, v220, v221, v222, v223, v224, v225);
                if (!v203)
                {
LABEL_173:
                  v227 = (uint64_t)v11;
                  goto LABEL_175;
                }
                goto LABEL_171;
              }
              *(_DWORD *)v208 -= 2;
LABEL_168:
              if (!v203)
                goto LABEL_173;
LABEL_171:
              v226 = WTF::codePointCompare(v201, *(const WTF::StringImpl **)((char *)v11 + v203 - 16), a3);
              if (!v226)
                v226 = WTF::codePointCompare(v202, *(const WTF::StringImpl **)((char *)v11 + v203 - 8), a3);
              v203 -= 16;
              if ((v226 & 0x80000000) == 0)
              {
                v227 = (uint64_t)v11 + v203 + 16;
LABEL_175:
                v228 = *(WTF::StringImpl **)v227;
                *(_QWORD *)v227 = v201;
                if (v228)
                {
                  if (*(_DWORD *)v228 != 2)
                  {
                    *(_DWORD *)v228 -= 2;
                    goto LABEL_178;
                  }
                  WTF::StringImpl::~StringImpl(v228, v195, (uint64_t)a3, v196, v197, v198, v199, v200);
                  WTF::fastFree(v230, v231, v232, v233, v234, v235, v236, v237);
                  v229 = *(WTF::StringImpl **)(v227 + 8);
                  *(_QWORD *)(v227 + 8) = v202;
                  if (v229)
                  {
LABEL_181:
                    if (*(_DWORD *)v229 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v229, v195, (uint64_t)a3, v196, v197, v198, v199, v200);
                      WTF::fastFree(v238, v239, v240, v241, v242, v243, v244, v245);
                    }
                    else
                    {
                      *(_DWORD *)v229 -= 2;
                    }
                  }
                }
                else
                {
LABEL_178:
                  v229 = *(WTF::StringImpl **)(v227 + 8);
                  *(_QWORD *)(v227 + 8) = v202;
                  if (v229)
                    goto LABEL_181;
                }
LABEL_153:
                v188 = v192 + 2;
                v191 += 16;
                if (v192 + 2 == v9)
                  return;
                goto LABEL_154;
              }
            }
            *(_DWORD *)v206 -= 2;
LABEL_163:
            v207 = v204[1];
            v204[1] = 0;
            v208 = (WTF::StringImpl *)v204[3];
            v204[3] = v207;
            if (!v208)
              goto LABEL_168;
            goto LABEL_166;
          }
          if (v190)
            return;
          v428 = 0;
          v429 = v11 + 3;
          v430 = -2;
          v431 = 1;
          v432 = v11;
LABEL_310:
          v433 = v428;
          v428 = v431;
          v434 = WTF::codePointCompare(*v188, *v432, a3);
          if (v434)
          {
            if ((v434 & 0x80000000) == 0)
              goto LABEL_309;
          }
          else if ((WTF::codePointCompare(v11[2 * v428 + 1], v11[2 * v433 + 1], a3) & 0x80000000) == 0)
          {
            goto LABEL_309;
          }
          v441 = *v188;
          *v188 = 0;
          v442 = v432[3];
          v432[3] = 0;
          v443 = v429;
          v444 = v430;
          while (1)
          {
            v445 = *(v443 - 3);
            *(v443 - 3) = 0;
            v446 = *(v443 - 1);
            *(v443 - 1) = v445;
            if (!v446)
              goto LABEL_319;
            if (*(_DWORD *)v446 != 2)
              break;
            WTF::StringImpl::~StringImpl(v446, v435, (uint64_t)a3, v436, v437, v438, v439, v440);
            WTF::fastFree(v449, v450, v451, v452, v453, v454, v455, v456);
            v457 = *(v443 - 2);
            *(v443 - 2) = 0;
            v448 = *v443;
            *v443 = v457;
            if (!v448)
              goto LABEL_324;
LABEL_322:
            if (*(_DWORD *)v448 == 2)
            {
              WTF::StringImpl::~StringImpl(v448, v435, (uint64_t)a3, v436, v437, v438, v439, v440);
              WTF::fastFree(v459, v460, v461, v462, v463, v464, v465, v466);
              v458 = __CFADD__(v444++, 1);
              if (v458)
                goto LABEL_338;
              goto LABEL_328;
            }
            *(_DWORD *)v448 -= 2;
LABEL_324:
            v458 = __CFADD__(v444++, 1);
            if (v458)
              goto LABEL_338;
LABEL_328:
            v467 = WTF::codePointCompare(v441, *(v443 - 5), a3);
            if (!v467)
              v467 = WTF::codePointCompare(v442, *(v443 - 4), a3);
            v443 -= 2;
            if ((v467 & 0x80000000) == 0)
            {
              v468 = *(v443 - 1);
              *(v443 - 1) = v441;
              if (!v468)
                goto LABEL_333;
              if (*(_DWORD *)v468 == 2)
              {
                WTF::StringImpl::~StringImpl(v468, v435, (uint64_t)a3, v436, v437, v438, v439, v440);
                WTF::fastFree(v470, v471, v472, v473, v474, v475, v476, v477);
                v469 = *v443;
                *v443 = v442;
                if (!v469)
                  goto LABEL_309;
LABEL_336:
                if (*(_DWORD *)v469 == 2)
                {
                  WTF::StringImpl::~StringImpl(v469, v435, (uint64_t)a3, v436, v437, v438, v439, v440);
                  WTF::fastFree(v478, v479, v480, v481, v482, v483, v484, v485);
                }
                else
                {
                  *(_DWORD *)v469 -= 2;
                }
                goto LABEL_309;
              }
              *(_DWORD *)v468 -= 2;
LABEL_333:
              v469 = *v443;
              *v443 = v442;
              if (v469)
                goto LABEL_336;
LABEL_309:
              v432 = &v11[2 * v428];
              v431 = v428 + 1;
              v188 = &v11[2 * v428 + 2];
              --v430;
              v429 += 2;
              if (v188 == v9)
                return;
              goto LABEL_310;
            }
          }
          *(_DWORD *)v446 -= 2;
LABEL_319:
          v447 = *(v443 - 2);
          *(v443 - 2) = 0;
          v448 = *v443;
          *v443 = v447;
          if (!v448)
            goto LABEL_324;
          goto LABEL_322;
        }
        if (!v8)
        {
          if (v11 == v9)
            return;
          v246 = (v13 - 2) >> 1;
          v247 = v246;
LABEL_187:
          v248 = v247;
          if (v246 < v247)
            goto LABEL_186;
          v249 = (2 * v247) | 1;
          v250 = &v11[2 * v249];
          if (2 * v247 + 2 >= (uint64_t)v13)
          {
            v253 = &v11[2 * v247];
            v254 = WTF::codePointCompare(*v250, *v253, a3);
            if (!v254)
              goto LABEL_194;
          }
          else
          {
            v251 = WTF::codePointCompare(*v250, v250[2], a3);
            if (!v251)
              v251 = WTF::codePointCompare(v11[2 * v249 + 1], v250[3], v252);
            if (v251 < 0)
            {
              v250 += 2;
              v249 = 2 * v248 + 2;
            }
            v246 = (v13 - 2) >> 1;
            v253 = &v11[2 * v248];
            v254 = WTF::codePointCompare(*v250, *v253, v252);
            if (!v254)
            {
LABEL_194:
              if ((WTF::codePointCompare(v250[1], v11[2 * v248 + 1], a3) & 0x80000000) != 0)
                goto LABEL_186;
              goto LABEL_198;
            }
          }
          if (v254 < 0)
            goto LABEL_186;
LABEL_198:
          v255 = v248;
          v256 = *v253;
          v487 = v255;
          v257 = &v11[2 * v255];
          v489 = v257[1];
          *v257 = 0;
          v257[1] = 0;
          while (1)
          {
            v259 = v250;
            v260 = *v250;
            *v250 = 0;
            v261 = *v253;
            *v253 = v260;
            if (!v261)
              goto LABEL_204;
            if (*(_DWORD *)v261 != 2)
              break;
            WTF::StringImpl::~StringImpl(v261, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v264, v265, v266, v267, v268, v269, v270, v271);
            v272 = v250[1];
            v250[1] = 0;
            v263 = v253[1];
            v253[1] = v272;
            if (!v263)
              goto LABEL_209;
LABEL_207:
            if (*(_DWORD *)v263 != 2)
            {
              *(_DWORD *)v263 -= 2;
LABEL_209:
              if (v246 < v249)
                goto LABEL_222;
              goto LABEL_212;
            }
            WTF::StringImpl::~StringImpl(v263, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v273, v274, v275, v276, v277, v278, v279, v280);
            if (v246 < v249)
            {
LABEL_222:
              v284 = *v259;
              *v259 = v256;
              v248 = v487;
              if (!v284)
                goto LABEL_225;
              if (*(_DWORD *)v284 == 2)
              {
                WTF::StringImpl::~StringImpl(v284, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v286, v287, v288, v289, v290, v291, v292, v293);
                v285 = v259[1];
                v259[1] = v489;
                if (!v285)
                  goto LABEL_186;
LABEL_228:
                if (*(_DWORD *)v285 == 2)
                {
                  WTF::StringImpl::~StringImpl(v285, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v294, v295, v296, v297, v298, v299, v300, v301);
                }
                else
                {
                  *(_DWORD *)v285 -= 2;
                }
                goto LABEL_186;
              }
              *(_DWORD *)v284 -= 2;
LABEL_225:
              v285 = v259[1];
              v259[1] = v489;
              if (v285)
                goto LABEL_228;
LABEL_186:
              v247 = v248 - 1;
              if (v248)
                goto LABEL_187;
              v302 = (unint64_t)v12 >> 4;
              while (2)
              {
                v304 = 0;
                v305 = v9;
                v490 = *v11;
                v492 = v11[1];
                *v11 = 0;
                v11[1] = 0;
                v306 = v11;
LABEL_236:
                v307 = v306;
                v308 = v304 + 1;
                v306 += 2 * v304 + 2;
                v309 = 2 * v304;
                v304 = (2 * v304) | 1;
                v310 = v309 + 2;
                if (v309 + 2 < v302)
                {
                  v311 = WTF::codePointCompare(*v306, v306[2], a3);
                  if (!v311)
                    v311 = WTF::codePointCompare(v307[2 * v308 + 1], v306[3], a3);
                  if (v311 < 0)
                  {
                    v306 += 2;
                    v304 = v310;
                  }
                }
                v312 = *v306;
                *v306 = 0;
                v313 = *v307;
                *v307 = v312;
                if (v313)
                {
                  if (*(_DWORD *)v313 != 2)
                  {
                    *(_DWORD *)v313 -= 2;
                    goto LABEL_244;
                  }
                  WTF::StringImpl::~StringImpl(v313, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v316, v317, v318, v319, v320, v321, v322, v323);
                  v324 = v306[1];
                  v306[1] = 0;
                  v315 = v307[1];
                  v307[1] = v324;
                  if (v315)
                  {
LABEL_247:
                    if (*(_DWORD *)v315 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v315, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v325, v326, v327, v328, v329, v330, v331, v332);
                    }
                    else
                    {
                      *(_DWORD *)v315 -= 2;
                    }
                  }
                }
                else
                {
LABEL_244:
                  v314 = v306[1];
                  v306[1] = 0;
                  v315 = v307[1];
                  v307[1] = v314;
                  if (v315)
                    goto LABEL_247;
                }
                if (v304 > (uint64_t)((unint64_t)(v302 - 2) >> 1))
                {
                  v9 -= 2;
                  if (v306 == v305 - 2)
                  {
                    v337 = *v306;
                    *v306 = v490;
                    if (v337)
                    {
                      if (*(_DWORD *)v337 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v337, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v378, v379, v380, v381, v382, v383, v384, v385);
                        v338 = v306[1];
                        v306[1] = v492;
                        if (!v338)
                          goto LABEL_232;
                        goto LABEL_303;
                      }
                      *(_DWORD *)v337 -= 2;
                    }
                    v338 = v306[1];
                    v306[1] = v492;
                    if (!v338)
                      goto LABEL_232;
LABEL_303:
                    if (*(_DWORD *)v338 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v338, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v420, v421, v422, v423, v424, v425, v426, v427);
                    }
                    else
                    {
                      *(_DWORD *)v338 -= 2;
                    }
                    goto LABEL_232;
                  }
                  v333 = *v9;
                  *v9 = 0;
                  v334 = *v306;
                  *v306 = v333;
                  if (!v334)
                    goto LABEL_253;
                  if (*(_DWORD *)v334 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v334, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v339, v340, v341, v342, v343, v344, v345, v346);
                    v347 = *(v305 - 1);
                    *(v305 - 1) = 0;
                    v336 = v306[1];
                    v306[1] = v347;
                    if (!v336)
                      goto LABEL_263;
                  }
                  else
                  {
                    *(_DWORD *)v334 -= 2;
LABEL_253:
                    v335 = *(v305 - 1);
                    *(v305 - 1) = 0;
                    v336 = v306[1];
                    v306[1] = v335;
                    if (!v336)
                    {
LABEL_263:
                      v348 = *v9;
                      *v9 = v490;
                      if (!v348)
                        goto LABEL_268;
LABEL_266:
                      if (*(_DWORD *)v348 != 2)
                      {
                        *(_DWORD *)v348 -= 2;
                        goto LABEL_268;
                      }
                      WTF::StringImpl::~StringImpl(v348, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v358, v359, v360, v361, v362, v363, v364, v365);
                      v357 = *(v305 - 1);
                      *(v305 - 1) = v492;
                      if (v357)
                        goto LABEL_271;
LABEL_273:
                      v366 = (char *)(v306 + 2) - (char *)v11;
                      if (v366 < 17)
                        goto LABEL_232;
                      goto LABEL_276;
                    }
                  }
                  if (*(_DWORD *)v336 != 2)
                  {
                    *(_DWORD *)v336 -= 2;
                    goto LABEL_263;
                  }
                  WTF::StringImpl::~StringImpl(v336, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v349, v350, v351, v352, v353, v354, v355, v356);
                  v348 = *v9;
                  *v9 = v490;
                  if (v348)
                    goto LABEL_266;
LABEL_268:
                  v357 = *(v305 - 1);
                  *(v305 - 1) = v492;
                  if (!v357)
                    goto LABEL_273;
LABEL_271:
                  if (*(_DWORD *)v357 != 2)
                  {
                    *(_DWORD *)v357 -= 2;
                    goto LABEL_273;
                  }
                  WTF::StringImpl::~StringImpl(v357, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v367, v368, v369, v370, v371, v372, v373, v374);
                  v366 = (char *)(v306 + 2) - (char *)v11;
                  if (v366 < 17)
                    goto LABEL_232;
LABEL_276:
                  v375 = (((unint64_t)v366 >> 4) - 2) >> 1;
                  v376 = &v11[2 * v375];
                  v377 = WTF::codePointCompare(*v376, *v306, a3);
                  if (v377)
                  {
                    if ((v377 & 0x80000000) == 0)
                      goto LABEL_232;
                  }
                  else if ((WTF::codePointCompare(v376[1], v306[1], a3) & 0x80000000) == 0)
                  {
                    goto LABEL_232;
                  }
                  v387 = *v306;
                  v386 = v306[1];
                  *v306 = 0;
                  v306[1] = 0;
                  while (2)
                  {
                    v388 = v376;
                    v389 = *v376;
                    *v376 = 0;
                    v390 = *v306;
                    *v306 = v389;
                    if (!v390)
                    {
LABEL_287:
                      v391 = v376[1];
                      v376[1] = 0;
                      v392 = v306[1];
                      v306[1] = v391;
                      if (v392)
                        goto LABEL_290;
LABEL_292:
                      if (!v375)
                        break;
                      goto LABEL_295;
                    }
                    if (*(_DWORD *)v390 != 2)
                    {
                      *(_DWORD *)v390 -= 2;
                      goto LABEL_287;
                    }
                    WTF::StringImpl::~StringImpl(v390, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v393, v394, v395, v396, v397, v398, v399, v400);
                    v401 = v376[1];
                    v376[1] = 0;
                    v392 = v306[1];
                    v306[1] = v401;
                    if (!v392)
                      goto LABEL_292;
LABEL_290:
                    if (*(_DWORD *)v392 != 2)
                    {
                      *(_DWORD *)v392 -= 2;
                      goto LABEL_292;
                    }
                    WTF::StringImpl::~StringImpl(v392, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v402, v403, v404, v405, v406, v407, v408, v409);
                    if (!v375)
                      break;
LABEL_295:
                    v375 = (v375 - 1) >> 1;
                    v376 = &v11[2 * v375];
                    v410 = WTF::codePointCompare(*v376, v387, a3);
                    if (!v410)
                      v410 = WTF::codePointCompare(v376[1], v386, a3);
                    v306 = v388;
                    if (v410 < 0)
                      continue;
                    break;
                  }
                  v411 = *v388;
                  *v388 = v387;
                  if (!v411)
                    goto LABEL_300;
                  if (*(_DWORD *)v411 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v411, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v412, v413, v414, v415, v416, v417, v418, v419);
                    v338 = v388[1];
                    v388[1] = v386;
                    if (!v338)
                      goto LABEL_232;
                    goto LABEL_303;
                  }
                  *(_DWORD *)v411 -= 2;
LABEL_300:
                  v338 = v388[1];
                  v388[1] = v386;
                  if (v338)
                    goto LABEL_303;
LABEL_232:
                  if (v302-- <= 2)
                    return;
                  continue;
                }
                goto LABEL_236;
              }
            }
LABEL_212:
            v281 = (2 * v249) | 1;
            v250 = &v11[2 * v281];
            v249 = 2 * v249 + 2;
            if (v249 >= (uint64_t)v13)
            {
              v249 = v281;
              v258 = WTF::codePointCompare(*v250, v256, a3);
              if (v258)
                goto LABEL_200;
            }
            else
            {
              v282 = WTF::codePointCompare(*v250, v250[2], a3);
              if (!v282)
                v282 = WTF::codePointCompare(v11[2 * v281 + 1], v250[3], v283);
              if (v282 >= 0)
                v249 = v281;
              else
                v250 += 2;
              v246 = (v13 - 2) >> 1;
              v258 = WTF::codePointCompare(*v250, v256, v283);
              if (v258)
                goto LABEL_200;
            }
            v258 = WTF::codePointCompare(v250[1], v489, a3);
LABEL_200:
            v253 = v259;
            if (v258 < 0)
              goto LABEL_222;
          }
          *(_DWORD *)v261 -= 2;
LABEL_204:
          v262 = v250[1];
          v250[1] = 0;
          v263 = v253[1];
          v253[1] = v262;
          if (!v263)
            goto LABEL_209;
          goto LABEL_207;
        }
        v14 = &v11[2 * (v13 >> 1)];
        if ((unint64_t)v12 < 0x801)
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(&v11[2 * (v13 >> 1)], v11, v9 - 2);
          v8 = (const WTF::StringImpl *)((char *)v8 - 1);
          if ((v491 & 1) != 0)
            goto LABEL_30;
          goto LABEL_27;
        }
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(v11, &v11[2 * (v13 >> 1)], v9 - 2);
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(v488, v14 - 2, v9 - 4);
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(v486, v14 + 2, v9 - 6);
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(v14 - 2, &v11[2 * (v13 >> 1)], v14 + 2);
        v23 = *v11;
        v22 = v11[1];
        *v11 = 0;
        v11[1] = 0;
        v24 = *v14;
        *v14 = 0;
        v25 = *v11;
        *v11 = v24;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
          {
            WTF::StringImpl::~StringImpl(v25, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
            WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
          }
          else
          {
            *(_DWORD *)v25 -= 2;
          }
        }
        v34 = &v11[2 * (v13 >> 1) + 1];
        v35 = *v34;
        *v34 = 0;
        v36 = v11[1];
        v11[1] = v35;
        if (!v36)
          goto LABEL_16;
        if (*(_DWORD *)v36 != 2)
        {
          *(_DWORD *)v36 -= 2;
LABEL_16:
          v37 = *v14;
          *v14 = v23;
          if (!v37)
            goto LABEL_21;
          goto LABEL_19;
        }
        WTF::StringImpl::~StringImpl(v36, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
        v37 = *v14;
        *v14 = v23;
        if (!v37)
          goto LABEL_21;
LABEL_19:
        if (*(_DWORD *)v37 != 2)
        {
          *(_DWORD *)v37 -= 2;
LABEL_21:
          v46 = *v34;
          *v34 = v22;
          if (!v46)
            goto LABEL_26;
          goto LABEL_24;
        }
        WTF::StringImpl::~StringImpl(v37, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
        v46 = *v34;
        *v34 = v22;
        if (!v46)
          goto LABEL_26;
LABEL_24:
        if (*(_DWORD *)v46 != 2)
        {
          *(_DWORD *)v46 -= 2;
LABEL_26:
          v8 = (const WTF::StringImpl *)((char *)v8 - 1);
          if ((v491 & 1) != 0)
            goto LABEL_30;
          goto LABEL_27;
        }
        WTF::StringImpl::~StringImpl(v46, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
        v8 = (const WTF::StringImpl *)((char *)v8 - 1);
        if ((v491 & 1) != 0)
          goto LABEL_30;
LABEL_27:
        v55 = WTF::codePointCompare(*(v11 - 2), *v11, v16);
        if (!v55)
          v55 = WTF::codePointCompare(*(v11 - 1), v11[1], v16);
        if (v55 < 0)
        {
LABEL_30:
          v56 = 0;
          v58 = *v11;
          v57 = v11[1];
          *v11 = 0;
          v11[1] = 0;
          do
          {
            v59 = &v11[v56 + 2];
            if (v59 == v9)
              goto LABEL_338;
            v60 = WTF::codePointCompare(*v59, v58, v16);
            if (!v60)
              v60 = WTF::codePointCompare(v11[v56 + 3], v57, v16);
            v56 += 2;
          }
          while (v60 < 0);
          v67 = &v11[v56];
          v68 = v9;
          if (v56 != 2)
          {
            while (v68 != v11)
            {
              v70 = (WTF::AtomStringImpl *)(v68 - 2);
              v71 = WTF::codePointCompare(*(v68 - 2), v58, v16);
              if (!v71)
                v71 = WTF::codePointCompare(*(v68 - 1), v57, v16);
              v68 -= 2;
              if (v71 < 0)
                goto LABEL_48;
            }
            goto LABEL_338;
          }
          v69 = v9;
          while (v67 < v69)
          {
            v70 = (WTF::AtomStringImpl *)(v69 - 2);
            v72 = WTF::codePointCompare(*(v69 - 2), v58, v16);
            if (!v72)
              v72 = WTF::codePointCompare(*(v69 - 1), v57, v16);
            v69 -= 2;
            if (v72 < 0)
              goto LABEL_48;
          }
          v70 = (WTF::AtomStringImpl *)v69;
LABEL_48:
          a1 = &v11[v56];
          if (v67 < (const WTF::StringImpl **)v70)
          {
            v81 = v70;
            do
            {
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::String> *&,WTF::KeyValuePair<WTF::String,WTF::String> *&>(a1, v81, (uint64_t)v16, v62, v63, v64, v65, v66);
              v82 = a1 + 2;
              do
              {
                if (v82 == v9)
                  goto LABEL_338;
                v83 = WTF::codePointCompare(*v82, v58, v16);
                if (!v83)
                  v83 = WTF::codePointCompare(v82[1], v57, v16);
                v82 += 2;
              }
              while (v83 < 0);
              a1 = v82 - 2;
              v84 = (const WTF::StringImpl **)v81;
              do
              {
                if (v84 == v11)
                  goto LABEL_338;
                v81 = (WTF::AtomStringImpl *)(v84 - 2);
                v85 = WTF::codePointCompare(*(v84 - 2), v58, v16);
                if (!v85)
                  v85 = WTF::codePointCompare(*(v84 - 1), v57, v16);
                v84 -= 2;
              }
              while ((v85 & 0x80000000) == 0);
            }
            while (a1 < (WTF::StringImpl **)v81);
          }
          v86 = a1 - 2;
          if (a1 - 2 == v11)
            goto LABEL_70;
          v87 = *v86;
          *v86 = 0;
          v88 = *v11;
          *v11 = v87;
          if (v88)
          {
            if (*(_DWORD *)v88 == 2)
            {
              WTF::StringImpl::~StringImpl(v88, v61, (uint64_t)v16, v62, v63, v64, v65, v66);
              WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
              v99 = *(a1 - 1);
              *(a1 - 1) = 0;
              v90 = v11[1];
              v11[1] = v99;
              if (!v90)
                goto LABEL_70;
LABEL_68:
              if (*(_DWORD *)v90 == 2)
              {
                WTF::StringImpl::~StringImpl(v90, v61, (uint64_t)v16, v62, v63, v64, v65, v66);
                WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
                v100 = *v86;
                *v86 = v58;
                if (!v100)
                  goto LABEL_74;
                goto LABEL_71;
              }
              *(_DWORD *)v90 -= 2;
LABEL_70:
              v100 = *v86;
              *v86 = v58;
              if (!v100)
                goto LABEL_74;
LABEL_71:
              if (*(_DWORD *)v100 == 2)
              {
                WTF::StringImpl::~StringImpl(v100, v61, (uint64_t)v16, v62, v63, v64, v65, v66);
                WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
              }
              else
              {
                *(_DWORD *)v100 -= 2;
              }
LABEL_74:
              v109 = *(a1 - 1);
              *(a1 - 1) = v57;
              if (v109)
              {
                if (*(_DWORD *)v109 == 2)
                {
                  WTF::StringImpl::~StringImpl(v109, v61, (uint64_t)v16, v62, v63, v64, v65, v66);
                  WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
                  if (v67 < (const WTF::StringImpl **)v70)
                    goto LABEL_86;
                  goto LABEL_80;
                }
                *(_DWORD *)v109 -= 2;
              }
              if (v67 < (const WTF::StringImpl **)v70)
                goto LABEL_86;
LABEL_80:
              v118 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(v11, a1 - 2, v16);
              if (std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(a1, v9, v119))
              {
                v9 = a1 - 2;
                if (!v118)
                  continue;
                return;
              }
              if (v118)
                goto LABEL_2;
LABEL_86:
              std::__introsort<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *,false>(v11, a1 - 2, v8, v491 & 1);
              v491 = 0;
              goto LABEL_2;
            }
            *(_DWORD *)v88 -= 2;
          }
          v89 = *(a1 - 1);
          *(a1 - 1) = 0;
          v90 = v11[1];
          v11[1] = v89;
          if (!v90)
            goto LABEL_70;
          goto LABEL_68;
        }
        v128 = *v11;
        v129 = v11[1];
        *v11 = 0;
        v11[1] = 0;
        v130 = WTF::codePointCompare(v128, *(v9 - 2), v16);
        if (!v130)
          v130 = WTF::codePointCompare(v129, *(v9 - 1), a3);
        if (v130 < 0)
        {
          v133 = v11 + 2;
          do
          {
            if (v133 == v9)
              goto LABEL_338;
            v134 = WTF::codePointCompare(v128, *v133, a3);
            if (!v134)
              v134 = WTF::codePointCompare(v129, v133[1], a3);
            v133 += 2;
          }
          while ((v134 & 0x80000000) == 0);
          a1 = v133 - 2;
        }
        else
        {
          v131 = v11 + 2;
          do
          {
            a1 = v131;
            if (v131 >= v9)
              break;
            v132 = WTF::codePointCompare(v128, *v131, a3);
            if (!v132)
              v132 = WTF::codePointCompare(v129, a1[1], a3);
            v131 = a1 + 2;
          }
          while ((v132 & 0x80000000) == 0);
        }
        v135 = (WTF::AtomStringImpl *)v9;
        if (a1 >= v9)
        {
LABEL_107:
          if (a1 < (WTF::StringImpl **)v135)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::String> *&,WTF::KeyValuePair<WTF::String,WTF::String> *&>(a1, v135, (uint64_t)a3, a4, a5, a6, a7, a8);
            v138 = a1 + 2;
            while (v138 != v9)
            {
              v139 = WTF::codePointCompare(v128, *v138, a3);
              if (!v139)
                v139 = WTF::codePointCompare(v129, v138[1], a3);
              v138 += 2;
              if (v139 < 0)
              {
                a1 = v138 - 2;
                v140 = (const WTF::StringImpl **)v135;
                while (v140 != v11)
                {
                  v135 = (WTF::AtomStringImpl *)(v140 - 2);
                  v141 = WTF::codePointCompare(v128, *(v140 - 2), a3);
                  if (!v141)
                    v141 = WTF::codePointCompare(v129, *(v140 - 1), a3);
                  v140 -= 2;
                  if ((v141 & 0x80000000) == 0)
                    goto LABEL_107;
                }
                goto LABEL_338;
              }
            }
            goto LABEL_338;
          }
          v142 = a1 - 2;
          if (a1 - 2 != v11)
          {
            v143 = *v142;
            *v142 = 0;
            v144 = *v11;
            *v11 = v143;
            if (v144)
            {
              if (*(_DWORD *)v144 == 2)
              {
                WTF::StringImpl::~StringImpl(v144, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
              }
              else
              {
                *(_DWORD *)v144 -= 2;
              }
            }
            v153 = *(a1 - 1);
            *(a1 - 1) = 0;
            v154 = v11[1];
            v11[1] = v153;
            if (v154)
            {
              if (*(_DWORD *)v154 == 2)
              {
                WTF::StringImpl::~StringImpl(v154, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v155, v156, v157, v158, v159, v160, v161, v162);
              }
              else
              {
                *(_DWORD *)v154 -= 2;
              }
            }
          }
          v163 = *v142;
          *v142 = v128;
          if (v163)
          {
            if (*(_DWORD *)v163 == 2)
            {
              WTF::StringImpl::~StringImpl(v163, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v164, v165, v166, v167, v168, v169, v170, v171);
            }
            else
            {
              *(_DWORD *)v163 -= 2;
            }
          }
          v491 = 0;
          v172 = *(a1 - 1);
          *(a1 - 1) = v129;
          if (v172)
          {
            if (*(_DWORD *)v172 == 2)
            {
              WTF::StringImpl::~StringImpl(v172, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v173, v174, v175, v176, v177, v178, v179, v180);
              v491 = 0;
            }
            else
            {
              v491 = 0;
              *(_DWORD *)v172 -= 2;
            }
          }
          goto LABEL_2;
        }
        v136 = v9;
        while (v136 != v11)
        {
          v135 = (WTF::AtomStringImpl *)(v136 - 2);
          v137 = WTF::codePointCompare(v128, *(v136 - 2), a3);
          if (!v137)
            v137 = WTF::codePointCompare(v129, *(v136 - 1), a3);
          v136 -= 2;
          if ((v137 & 0x80000000) == 0)
            goto LABEL_107;
        }
LABEL_338:
        __break(1u);
        return;
    }
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::String> *&,WTF::KeyValuePair<WTF::String,WTF::String> *&>(WTF::StringImpl **a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v11 = *a1;
  v10 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v12 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v13 = *a1;
  *a1 = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
      v24 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      v15 = a1[1];
      a1[1] = v24;
      if (!v15)
        goto LABEL_9;
      goto LABEL_7;
    }
    *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v15 = a1[1];
  a1[1] = v14;
  if (!v15)
  {
LABEL_9:
    v25 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v11;
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_7:
  if (*(_DWORD *)v15 != 2)
  {
    *(_DWORD *)v15 -= 2;
    goto LABEL_9;
  }
  WTF::StringImpl::~StringImpl(v15, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
  v25 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v11;
  if (!v25)
    goto LABEL_14;
LABEL_12:
  if (*(_DWORD *)v25 == 2)
  {
    WTF::StringImpl::~StringImpl(v25, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    v34 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v10;
    if (!v34)
      return;
    goto LABEL_17;
  }
  *(_DWORD *)v25 -= 2;
LABEL_14:
  v34 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v10;
  if (!v34)
    return;
LABEL_17:
  if (*(_DWORD *)v34 == 2)
  {
    WTF::StringImpl::~StringImpl(v34, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
  }
  else
  {
    *(_DWORD *)v34 -= 2;
  }
}

void std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *,0>(const WTF::StringImpl **a1, WTF **a2, WTF **a3, WTF **a4, WTF **a5)
{
  const WTF::StringImpl *v10;
  int v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const WTF::StringImpl *v18;
  int v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const WTF::StringImpl *v26;
  int v27;
  const WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const WTF::StringImpl *v34;
  int v35;
  const WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(a1, a2, a3, a4);
  v11 = WTF::codePointCompare(*a5, *a4, v10);
  if (v11)
  {
    if ((v11 & 0x80000000) == 0)
      return;
  }
  else if ((WTF::codePointCompare(a5[1], a4[1], v12) & 0x80000000) == 0)
  {
    return;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::String> *&,WTF::KeyValuePair<WTF::String,WTF::String> *&>(a4, (WTF::AtomStringImpl *)a5, (uint64_t)v12, v13, v14, v15, v16, v17);
  v19 = WTF::codePointCompare(*a4, *a3, v18);
  if (v19)
  {
    if ((v19 & 0x80000000) == 0)
      return;
  }
  else if ((WTF::codePointCompare(a4[1], a3[1], v20) & 0x80000000) == 0)
  {
    return;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::String> *&,WTF::KeyValuePair<WTF::String,WTF::String> *&>(a3, (WTF::AtomStringImpl *)a4, (uint64_t)v20, v21, v22, v23, v24, v25);
  v27 = WTF::codePointCompare(*a3, *a2, v26);
  if (v27)
  {
    if ((v27 & 0x80000000) == 0)
      return;
  }
  else if ((WTF::codePointCompare(a3[1], a2[1], v28) & 0x80000000) == 0)
  {
    return;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::String> *&,WTF::KeyValuePair<WTF::String,WTF::String> *&>(a2, (WTF::AtomStringImpl *)a3, (uint64_t)v28, v29, v30, v31, v32, v33);
  v35 = WTF::codePointCompare(*a2, *a1, v34);
  if (!v35)
    v35 = WTF::codePointCompare(a2[1], a1[1], v36);
  if (v35 < 0)
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::String> *&,WTF::KeyValuePair<WTF::String,WTF::String> *&>(a1, (WTF::AtomStringImpl *)a2, (uint64_t)v36, v37, v38, v39, v40, v41);
}

void std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(const WTF::StringImpl **a1, WTF **a2, WTF **a3)
{
  const WTF::StringImpl *v6;
  int v7;
  int v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const WTF::StringImpl *v16;
  const WTF::StringImpl *v17;
  int v18;
  const WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl **v21;
  WTF::AtomStringImpl *v22;

  v7 = WTF::codePointCompare(*a2, *a1, (const WTF::StringImpl *)a3);
  if (!v7)
  {
    v15 = WTF::codePointCompare(a2[1], a1[1], v6);
    v8 = WTF::codePointCompare(*a3, *a2, v16);
    if ((v15 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_7:
    if (v8)
    {
      if ((v8 & 0x80000000) == 0)
      {
LABEL_9:
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::String> *&,WTF::KeyValuePair<WTF::String,WTF::String> *&>(a1, (WTF::AtomStringImpl *)a2, (uint64_t)v9, v10, v11, v12, v13, v14);
        v18 = WTF::codePointCompare(*a3, *a2, v17);
        if (v18)
        {
          if ((v18 & 0x80000000) == 0)
            return;
        }
        else if ((WTF::codePointCompare(a3[1], a2[1], v9) & 0x80000000) == 0)
        {
          return;
        }
        v21 = a2;
        v22 = (WTF::AtomStringImpl *)a3;
LABEL_18:
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::String> *&,WTF::KeyValuePair<WTF::String,WTF::String> *&>(v21, v22, (uint64_t)v9, v10, v11, v12, v13, v14);
        return;
      }
    }
    else if ((WTF::codePointCompare(a3[1], a2[1], v9) & 0x80000000) == 0)
    {
      goto LABEL_9;
    }
    v21 = a1;
    v22 = (WTF::AtomStringImpl *)a3;
    goto LABEL_18;
  }
  v8 = WTF::codePointCompare(*a3, *a2, v6);
  if (v7 < 0)
    goto LABEL_7;
LABEL_3:
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return;
  }
  else if ((WTF::codePointCompare(a3[1], a2[1], v9) & 0x80000000) == 0)
  {
    return;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::String> *&,WTF::KeyValuePair<WTF::String,WTF::String> *&>(a2, (WTF::AtomStringImpl *)a3, (uint64_t)v9, v10, v11, v12, v13, v14);
  v20 = WTF::codePointCompare(*a2, *a1, v19);
  if (v20)
  {
    if (v20 < 0)
      goto LABEL_23;
  }
  else if ((WTF::codePointCompare(a2[1], a1[1], v9) & 0x80000000) != 0)
  {
LABEL_23:
    v21 = a1;
    v22 = (WTF::AtomStringImpl *)a2;
    goto LABEL_18;
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(const WTF::StringImpl **a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  _BOOL8 result;
  int v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::StringImpl **v14;
  const WTF::StringImpl *v15;
  WTF **v16;
  int v17;
  uint64_t v18;
  int v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  const WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  const WTF::StringImpl **v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v5 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = WTF::codePointCompare(*(a2 - 2), *a1, a3);
      if (v7)
      {
        if ((v7 & 0x80000000) == 0)
          return 1;
      }
      else if ((WTF::codePointCompare(*(a2 - 1), a1[1], v8) & 0x80000000) == 0)
      {
        return 1;
      }
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::String> *&,WTF::KeyValuePair<WTF::String,WTF::String> *&>(a1, (WTF::AtomStringImpl *)(a2 - 2), (uint64_t)v8, v9, v10, v11, v12, v13);
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *,0>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v14 = a1 + 4;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(a1, a1 + 2, a1 + 4);
      v16 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v17 = 0;
      v18 = 4;
      break;
  }
  do
  {
    v19 = WTF::codePointCompare(*v16, *v14, v15);
    if (v19)
    {
      if ((v19 & 0x80000000) == 0)
        goto LABEL_9;
    }
    else if ((WTF::codePointCompare(v16[1], v14[1], v15) & 0x80000000) == 0)
    {
      goto LABEL_9;
    }
    v27 = *v16;
    v26 = v16[1];
    v28 = v18 * 8;
    *v16 = 0;
    v16[1] = 0;
    v29 = &a1[v18];
    v30 = a1[v18];
    *v29 = 0;
    v29[2] = v30;
LABEL_17:
    v31 = v29[1];
    v29[1] = 0;
    v32 = v29[3];
    v29[3] = v31;
    if (!v32)
      goto LABEL_22;
    while (1)
    {
      if (*(_DWORD *)v32 != 2)
      {
        *(_DWORD *)v32 -= 2;
LABEL_22:
        if (v28)
          goto LABEL_25;
LABEL_30:
        v53 = a1;
        goto LABEL_32;
      }
      WTF::StringImpl::~StringImpl(v32, v20, (uint64_t)v15, v21, v22, v23, v24, v25);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
      if (!v28)
        goto LABEL_30;
LABEL_25:
      v50 = WTF::codePointCompare(v27, *(const WTF::StringImpl **)((char *)a1 + v28 - 16), v15);
      if (!v50)
        v50 = WTF::codePointCompare(v26, *(const WTF::StringImpl **)((char *)a1 + v28 - 8), v15);
      if ((v50 & 0x80000000) == 0)
        break;
      v51 = *v29;
      v28 -= 16;
      v29 = (const WTF::StringImpl **)((char *)a1 + v28);
      v52 = *(const WTF::StringImpl **)((char *)a1 + v28);
      *v29 = 0;
      v29[2] = v52;
      if (!v51)
        goto LABEL_17;
      if (*(_DWORD *)v51 != 2)
      {
        *(_DWORD *)v51 -= 2;
        goto LABEL_17;
      }
      WTF::StringImpl::~StringImpl(v51, v20, (uint64_t)v15, v21, v22, v23, v24, v25);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
      v41 = v29[1];
      v29[1] = 0;
      v32 = v29[3];
      v29[3] = v41;
      if (!v32)
        goto LABEL_22;
    }
    v53 = (const WTF::StringImpl **)((char *)a1 + v28);
LABEL_32:
    v54 = *v53;
    *v53 = v27;
    if (!v54)
      goto LABEL_35;
    if (*(_DWORD *)v54 != 2)
    {
      *(_DWORD *)v54 -= 2;
LABEL_35:
      v55 = v53[1];
      v53[1] = v26;
      if (!v55)
        goto LABEL_8;
      goto LABEL_38;
    }
    WTF::StringImpl::~StringImpl(v54, v20, (uint64_t)v15, v21, v22, v23, v24, v25);
    WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    v55 = v53[1];
    v53[1] = v26;
    if (!v55)
      goto LABEL_8;
LABEL_38:
    if (*(_DWORD *)v55 == 2)
    {
      WTF::StringImpl::~StringImpl(v55, v20, (uint64_t)v15, v21, v22, v23, v24, v25);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
    else
    {
      *(_DWORD *)v55 -= 2;
    }
LABEL_8:
    if (++v17 == 8)
      return v16 + 2 == a2;
LABEL_9:
    v14 = v16;
    v18 += 2;
    v16 += 2;
  }
  while (v16 != a2);
  return 1;
}

void std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(const WTF::StringImpl **a1, WTF **a2, WTF **a3, WTF **a4)
{
  const WTF::StringImpl *v8;
  int v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const WTF::StringImpl *v16;
  int v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const WTF::StringImpl *v24;
  int v25;
  const WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::differingQueryParameters(WTF::URL const&,WTF::URL const&)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(a1, a2, a3);
  v9 = WTF::codePointCompare(*a4, *a3, v8);
  if (v9)
  {
    if ((v9 & 0x80000000) == 0)
      return;
  }
  else if ((WTF::codePointCompare(a4[1], a3[1], v10) & 0x80000000) == 0)
  {
    return;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::String> *&,WTF::KeyValuePair<WTF::String,WTF::String> *&>(a3, (WTF::AtomStringImpl *)a4, (uint64_t)v10, v11, v12, v13, v14, v15);
  v17 = WTF::codePointCompare(*a3, *a2, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      return;
  }
  else if ((WTF::codePointCompare(a3[1], a2[1], v18) & 0x80000000) == 0)
  {
    return;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::String> *&,WTF::KeyValuePair<WTF::String,WTF::String> *&>(a2, (WTF::AtomStringImpl *)a3, (uint64_t)v18, v19, v20, v21, v22, v23);
  v25 = WTF::codePointCompare(*a2, *a1, v24);
  if (v25)
  {
    if ((v25 & 0x80000000) == 0)
      return;
LABEL_13:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::String> *&,WTF::KeyValuePair<WTF::String,WTF::String> *&>(a1, (WTF::AtomStringImpl *)a2, (uint64_t)v26, v27, v28, v29, v30, v31);
    return;
  }
  if ((WTF::codePointCompare(a2[1], a1[1], v26) & 0x80000000) != 0)
    goto LABEL_13;
}

uint64_t WTF::parseInteger<unsigned short,unsigned char>(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int16 v9;
  char v10;
  unsigned __int16 v11;
  int v12;
  int v13;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  if (a1 && a2)
  {
    v5 = 0;
    while (1)
    {
      v6 = *(unsigned __int8 *)(a1 + v5);
      if ((v6 - 9) >= 5 && v6 != 32)
        break;
      if (a2 == ++v5)
        return 0;
    }
    if (v6 == 43)
    {
      if (a2 - 1 == v5)
        return 0;
      v7 = ~v5 + a2;
      v8 = (unsigned __int8 *)(a1 + v5 + 1);
      v6 = *v8;
      if ((v6 - 48) > 9)
        return 0;
    }
    else
    {
      v8 = (unsigned __int8 *)(a1 + v5);
      v7 = a2 - v5;
      if ((v6 - 48) > 9)
        return 0;
    }
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = v6 - 48;
      v12 = 10 * v9;
      if ((v12 & 0xF0000) == 0)
        v9 *= 10;
      v13 = v9 + v11;
      if ((v12 & 0xF0000) != 0 || (unsigned __int16)v13 != v13)
        v10 = 1;
      if ((unsigned __int16)v13 == v13)
        v9 = v13;
      if (!--v7)
        break;
      v15 = *++v8;
      LOBYTE(v6) = v15;
      v16 = v15 - 48;
      if ((v15 - 48) > 9 || v16 >= 0xA)
      {
        if (!v10)
        {
          v17 = 0;
          while (1)
          {
            v18 = v8[v17];
            if ((v18 - 9) >= 5 && v18 != 32)
              break;
            if (v7 == ++v17)
              goto LABEL_32;
          }
        }
        return 0;
      }
    }
    if (v10)
      return 0;
LABEL_32:
    v4 = v9 & 0xFF00;
    v3 = v9;
    v2 = 0x10000;
  }
  return v3 | v2 | v4;
}

uint64_t WTF::parseInteger<unsigned short,char16_t>(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  unsigned __int16 *i;
  int v6;
  char v7;
  unsigned __int16 v8;
  int v9;
  int v10;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  if (a1 && a2)
  {
    for (i = (unsigned __int16 *)(a1 + 2); ; ++i)
    {
      v6 = *(i - 1);
      if ((v6 - 9) >= 5 && v6 != 32)
        break;
      if (!--a2)
        return 0;
    }
    if (v6 == 43)
    {
      if (!--a2)
        return 0;
      v6 = *i;
      if ((v6 - 48) > 9)
        return 0;
    }
    else
    {
      --i;
      if ((v6 - 48) > 9)
        return 0;
    }
    LOWORD(v3) = 0;
    v7 = 0;
    while (1)
    {
      v8 = v6 - 48;
      v9 = 10 * (unsigned __int16)v3;
      if ((v9 & 0xF0000) == 0)
        LOWORD(v3) = 10 * v3;
      v10 = (unsigned __int16)v3 + v8;
      if ((v9 & 0xF0000) != 0 || (unsigned __int16)v10 != v10)
        v7 = 1;
      if ((unsigned __int16)v10 == v10)
        LOWORD(v3) = v10;
      if (!--a2)
        break;
      v12 = i[1];
      ++i;
      LOWORD(v6) = v12;
      v13 = v12 - 48;
      if ((v12 - 48) > 9 || v13 >= 0xA)
      {
        if (!v7)
        {
          v14 = 0;
          while (1)
          {
            v15 = i[v14];
            if ((v15 - 9) >= 5 && v15 != 32)
              break;
            if (a2 == ++v14)
              goto LABEL_32;
          }
        }
        return 0;
      }
    }
    if (v7)
      return 0;
LABEL_32:
    v4 = v3 & 0xFF00;
    v3 = v3;
    v2 = 0x10000;
  }
  return v3 | v2 | v4;
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned short>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned short>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned short,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned short>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v21 = 0;
    while (1)
    {
      v22 = (WTF::StringImpl **)(v10 + 16 * v21);
      v23 = *v22;
      if (*v22 != (WTF::StringImpl *)-1)
      {
        if (v23)
        {
          v24 = *a1;
          if (*a1)
          {
            v25 = *(_DWORD *)(v24 - 8);
            v26 = *((_DWORD *)v23 + 4);
            if (v26 >= 0x100)
              goto LABEL_12;
LABEL_14:
            v27 = WTF::StringImpl::hashSlowCase(v23);
          }
          else
          {
            v25 = 0;
            v26 = *((_DWORD *)v23 + 4);
            if (v26 < 0x100)
              goto LABEL_14;
LABEL_12:
            v27 = v26 >> 8;
          }
          v28 = 0;
          do
          {
            v29 = v27 & v25;
            v27 = ++v28 + v29;
          }
          while (*(_QWORD *)(v24 + 16 * v29));
          v30 = v24 + 16 * v29;
          *(_QWORD *)v30 = 0;
          v31 = *v22;
          *v22 = 0;
          *(_QWORD *)v30 = v31;
          *(_WORD *)(v30 + 8) = *(_WORD *)(v10 + 16 * v21 + 8);
          v32 = *v22;
          *v22 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
            {
              WTF::StringImpl::~StringImpl(v32, v14, v15, v16, v17, v18, v19, v20);
              WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
            }
            else
            {
              *(_DWORD *)v32 -= 2;
            }
          }
          goto LABEL_7;
        }
        *v22 = 0;
      }
LABEL_7:
      if (++v21 == v11)
        goto LABEL_23;
    }
  }
  if (v10)
LABEL_23:
    WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

unint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(unint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, int **a6@<X8>)
{
  int v9;
  int *v11;
  _BYTE *v12;
  int8x16_t *v13;
  size_t v14;
  _BYTE *v15;
  unint64_t v16;
  unsigned __int128 *v17;
  unsigned __int128 v18;
  _WORD *v19;
  int8x16_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  __int128 v26;
  char *v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  _BYTE *v38;
  int8x16_t *v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  unint64_t v44;
  _WORD *v45;
  int8x16_t *v46;
  __int16 v47;
  int8x16_t *v48;
  size_t v49;
  __int8 *v50;
  unint64_t v51;
  unsigned __int128 v52;
  char *v53;
  unint64_t v54;
  BOOL v55;
  unint64_t v56;
  __int8 *v57;
  int8x16_t *v58;
  __int8 v59;
  _WORD *v60;
  uint64_t v61;
  _WORD *v62;
  unint64_t v63;
  __int128 v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  char *v68;
  char *v69;
  char *v70;
  unint64_t v71;
  _WORD *v72;
  int8x16_t *v73;
  __int16 v74;
  uint64_t v75;
  unint64_t v76;
  int8x16_t *v77;
  int8x16_t *v78;
  unint64_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int16x8_t *v84;
  int8x8_t *v85;
  unint64_t v86;
  int16x8_t v87;
  int8x16_t *v88;
  int8x16_t *v89;
  unint64_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int16x8_t *v95;
  int8x8_t *v96;
  unint64_t v97;
  int16x8_t v98;
  uint8x8_t *v99;
  uint16x8_t *v100;
  unint64_t v101;
  uint8x16_t v102;
  uint16x8_t v103;
  uint16x8_t v104;
  uint8x8_t *v105;
  uint16x8_t *v106;
  unint64_t v107;
  uint8x8_t v108;
  uint8x8_t *v109;
  uint16x8_t *v110;
  unint64_t v111;
  uint8x16_t v112;
  uint16x8_t v113;
  uint16x8_t v114;
  uint8x8_t *v115;
  uint16x8_t *v116;
  unint64_t v117;
  uint8x8_t v118;
  _DWORD *v119;
  int8x16x2_t v120;
  int8x16x2_t v121;
  int8x16x2_t v122;
  int8x16x2_t v123;
  int8x16x2_t v124;
  int8x16x2_t v125;

  v9 = result;
  if (!a2)
  {
    if (!(_DWORD)result)
      goto LABEL_14;
    if (result > 0x7FFFFFEF)
      goto LABEL_13;
    result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v119);
    v11 = v119;
    if (!v119)
      goto LABEL_15;
    v19 = v119 + 5;
    *v119 = 2;
    v11[1] = v9;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    if (!a3)
    {
      v23 = 0;
      goto LABEL_82;
    }
    v20 = *(int8x16_t **)(a3 + 8);
    v21 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) == 0)
    {
      if ((_DWORD)v21)
      {
        if ((_DWORD)v21 == 1)
          *v19 = v20->i16[0];
        else
          memcpy(v11 + 5, v20, 2 * v21);
      }
      goto LABEL_81;
    }
    v24 = &v19[v21];
    if (v21 < 0x40)
    {
      v25 = (unint64_t)(v11 + 5);
    }
    else
    {
      v25 = (unint64_t)&v19[v21 & 0xFFFFFFC0];
      v26 = 0uLL;
      v27 = (char *)(v11 + 5);
      do
      {
        v120.val[0] = *v20;
        v28 = v20[1];
        v122.val[0] = v20[2];
        v29 = v20[3];
        v20 += 4;
        v30 = v29;
        v122.val[1] = 0uLL;
        v124.val[0] = v28;
        v120.val[1] = 0uLL;
        v31 = v27;
        vst2q_s8(v31, v120);
        v31 += 32;
        v124.val[1] = 0uLL;
        vst2q_s8(v31, v124);
        v32 = v27 + 64;
        vst2q_s8(v32, v122);
        v33 = v27 + 96;
        vst2q_s8(v33, *(int8x16x2_t *)(&v26 - 1));
        v27 += 128;
      }
      while (v27 != (char *)v25);
    }
    if ((_WORD *)v25 == v24)
    {
LABEL_81:
      v23 = *(unsigned int *)(a3 + 4);
LABEL_82:
      v60 = &v19[v23];
      *v60 = a4;
      result = (unint64_t)(v60 + 1);
      if (!a5)
        goto LABEL_15;
      v48 = *(int8x16_t **)(a5 + 8);
      v61 = *(unsigned int *)(a5 + 4);
      if ((*(_BYTE *)(a5 + 16) & 4) == 0)
      {
        if (!(_DWORD)v61)
          goto LABEL_15;
        if ((_DWORD)v61 == 1)
        {
          *(_WORD *)result = v48->i16[0];
          goto LABEL_15;
        }
        v49 = 2 * v61;
        goto LABEL_99;
      }
      v62 = (_WORD *)(result + 2 * v61);
      if (v61 >= 0x40)
      {
        v63 = result + 2 * (v61 & 0xFFFFFFC0);
        v64 = 0uLL;
        do
        {
          v121.val[0] = *v48;
          v65 = v48[1];
          v123.val[0] = v48[2];
          v66 = v48[3];
          v48 += 4;
          v67 = v66;
          v123.val[1] = 0uLL;
          v125.val[0] = v65;
          v121.val[1] = 0uLL;
          v68 = (char *)result;
          vst2q_s8(v68, v121);
          v68 += 32;
          v125.val[1] = 0uLL;
          vst2q_s8(v68, v125);
          v69 = (char *)(result + 64);
          vst2q_s8(v69, v123);
          v70 = (char *)(result + 96);
          vst2q_s8(v70, *(int8x16x2_t *)(&v64 - 1));
          result += 128;
        }
        while (result != v63);
        result = v63;
      }
      if ((_WORD *)result == v62)
        goto LABEL_15;
      v71 = (unint64_t)v11 + 2 * v23 + 2 * v61 - result + 20;
      if (v71 < 0xE
        || result < (unint64_t)v48->u64 + (v71 >> 1) + 1
        && (unint64_t)v48 < (v71 & 0xFFFFFFFFFFFFFFFELL) + result + 2)
      {
        v72 = (_WORD *)result;
        v73 = v48;
        goto LABEL_96;
      }
      v75 = (v71 >> 1) + 1;
      if (v71 >= 0x3E)
      {
        v76 = v75 & 0xFFFFFFFFFFFFFFE0;
        v109 = (uint8x8_t *)&v48[1];
        v110 = (uint16x8_t *)(result + 32);
        v111 = v75 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v112 = *(uint8x16_t *)v109[-2].i8;
          v113 = vmovl_u8(*v109);
          v114 = vmovl_high_u8(*(uint8x16_t *)v109->i8);
          v110[-2] = vmovl_u8(*(uint8x8_t *)v112.i8);
          v110[-1] = vmovl_high_u8(v112);
          *v110 = v113;
          v110[1] = v114;
          v110 += 4;
          v109 += 4;
          v111 -= 32;
        }
        while (v111);
        if (v75 == v76)
          goto LABEL_15;
        if ((v75 & 0x18) == 0)
        {
          v73 = (int8x16_t *)((char *)v48 + v76);
          v72 = (_WORD *)(result + 2 * v76);
          goto LABEL_96;
        }
      }
      else
      {
        v76 = 0;
      }
      v72 = (_WORD *)(result + 2 * (v75 & 0xFFFFFFFFFFFFFFF8));
      v73 = (int8x16_t *)((char *)v48 + (v75 & 0xFFFFFFFFFFFFFFF8));
      v115 = (uint8x8_t *)&v48->i8[v76];
      v116 = (uint16x8_t *)(result + 2 * v76);
      v117 = v76 - (v75 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v118 = *v115++;
        *v116++ = vmovl_u8(v118);
        v117 += 8;
      }
      while (v117);
      if (v75 == (v75 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_15;
      do
      {
LABEL_96:
        v74 = v73->u8[0];
        v73 = (int8x16_t *)((char *)v73 + 1);
        *v72++ = v74;
      }
      while (v72 != v62);
      goto LABEL_15;
    }
    v41 = (unint64_t)v11 + 2 * v21 - v25 + 18;
    if (v41 < 0xE
      || (v25 < (unint64_t)v20->u64 + (v41 >> 1) + 1
        ? (v42 = (unint64_t)v20 >= (v41 & 0xFFFFFFFFFFFFFFFELL) + v25 + 2)
        : (v42 = 1),
          !v42))
    {
      v45 = (_WORD *)v25;
      v46 = v20;
      goto LABEL_55;
    }
    v43 = (v41 >> 1) + 1;
    if (v41 >= 0x3E)
    {
      v44 = v43 & 0xFFFFFFFFFFFFFFE0;
      v99 = (uint8x8_t *)&v20[1];
      v100 = (uint16x8_t *)(v25 + 32);
      v101 = v43 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v102 = *(uint8x16_t *)v99[-2].i8;
        v103 = vmovl_u8(*v99);
        v104 = vmovl_high_u8(*(uint8x16_t *)v99->i8);
        v100[-2] = vmovl_u8(*(uint8x8_t *)v102.i8);
        v100[-1] = vmovl_high_u8(v102);
        *v100 = v103;
        v100[1] = v104;
        v100 += 4;
        v99 += 4;
        v101 -= 32;
      }
      while (v101);
      if (v43 == v44)
        goto LABEL_81;
      if ((v43 & 0x18) == 0)
      {
        v46 = (int8x16_t *)((char *)v20 + v44);
        v45 = (_WORD *)(v25 + 2 * v44);
        do
        {
LABEL_55:
          v47 = v46->u8[0];
          v46 = (int8x16_t *)((char *)v46 + 1);
          *v45++ = v47;
        }
        while (v45 != v24);
        goto LABEL_81;
      }
    }
    else
    {
      v44 = 0;
    }
    v45 = (_WORD *)(v25 + 2 * (v43 & 0xFFFFFFFFFFFFFFF8));
    v46 = (int8x16_t *)((char *)v20 + (v43 & 0xFFFFFFFFFFFFFFF8));
    v105 = (uint8x8_t *)&v20->i8[v44];
    v106 = (uint16x8_t *)(v25 + 2 * v44);
    v107 = v44 - (v43 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v108 = *v105++;
      *v106++ = vmovl_u8(v108);
      v107 += 8;
    }
    while (v107);
    if (v43 == (v43 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_81;
    goto LABEL_55;
  }
  if (!(_DWORD)result)
  {
LABEL_14:
    v11 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_15;
  }
  if ((result & 0x80000000) != 0)
  {
LABEL_13:
    v11 = 0;
    goto LABEL_15;
  }
  result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v119);
  v11 = v119;
  if (!v119)
    goto LABEL_15;
  v12 = v119 + 5;
  *v119 = 2;
  v11[1] = v9;
  *((_QWORD *)v11 + 1) = v11 + 5;
  v11[4] = 4;
  if (!a3)
  {
    v22 = 0;
    goto LABEL_59;
  }
  v13 = *(int8x16_t **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v14)
    {
      if ((_DWORD)v14 == 1)
        *v12 = v13->i8[0];
      else
        memcpy(v11 + 5, v13, v14);
    }
    goto LABEL_58;
  }
  v15 = &v12[v14];
  if (v14 < 0x10)
  {
    v16 = (unint64_t)(v11 + 5);
  }
  else
  {
    v16 = (unint64_t)&v12[v14 & 0xFFFFFFF0];
    v17 = (unsigned __int128 *)(v11 + 5);
    do
    {
      v18 = (unsigned __int128)vld2q_s8(v13->i8);
      v13 += 2;
      *v17++ = v18;
    }
    while (v17 != (unsigned __int128 *)v16);
  }
  if ((_BYTE *)v16 != v15)
  {
    v34 = (char *)v11 + v14;
    v35 = (unint64_t)v11 + v14 - v16 + 20;
    if (v35 < 8
      || (v16 < (unint64_t)&v13[2].u64[1] + 2 * (_QWORD)v34 + -2 * v16
        ? (v36 = v13 >= (int8x16_t *)(v34 + 20))
        : (v36 = 1),
          !v36))
    {
      v38 = (_BYTE *)v16;
      v39 = v13;
      goto LABEL_42;
    }
    if (v35 >= 0x20)
    {
      v37 = v35 & 0xFFFFFFFFFFFFFFE0;
      v77 = v13 + 2;
      v78 = (int8x16_t *)(v16 + 16);
      v79 = v35 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v81 = v77[-2];
        v80 = v77[-1];
        v83 = *v77;
        v82 = v77[1];
        v77 += 4;
        v78[-1] = vuzp1q_s8(v81, v80);
        *v78 = vuzp1q_s8(v83, v82);
        v78 += 2;
        v79 -= 32;
      }
      while (v79);
      if (v35 == v37)
        goto LABEL_58;
      if ((v35 & 0x18) == 0)
      {
        v39 = (int8x16_t *)((char *)v13 + 2 * v37);
        v38 = (_BYTE *)(v16 + v37);
        do
        {
LABEL_42:
          v40 = v39->i8[0];
          v39 = (int8x16_t *)((char *)v39 + 2);
          *v38++ = v40;
        }
        while (v38 != v15);
        goto LABEL_58;
      }
    }
    else
    {
      v37 = 0;
    }
    v38 = (_BYTE *)(v16 + (v35 & 0xFFFFFFFFFFFFFFF8));
    v39 = (int8x16_t *)((char *)v13 + 2 * (v35 & 0xFFFFFFFFFFFFFFF8));
    v84 = (int16x8_t *)((char *)v13 + 2 * v37);
    v85 = (int8x8_t *)(v16 + v37);
    v86 = v37 - (v35 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v87 = *v84++;
      *v85++ = vmovn_s16(v87);
      v86 += 8;
    }
    while (v86);
    if (v35 == (v35 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_58;
    goto LABEL_42;
  }
LABEL_58:
  v22 = *(unsigned int *)(a3 + 4);
LABEL_59:
  v12[v22] = a4;
  result = (unint64_t)&v12[v22 + 1];
  if (!a5)
    goto LABEL_15;
  v48 = *(int8x16_t **)(a5 + 8);
  v49 = *(unsigned int *)(a5 + 4);
  if ((*(_BYTE *)(a5 + 16) & 4) != 0)
  {
    if (!(_DWORD)v49)
      goto LABEL_15;
    if ((_DWORD)v49 == 1)
    {
      *(_BYTE *)result = v48->i8[0];
      goto LABEL_15;
    }
LABEL_99:
    result = (unint64_t)memcpy((void *)result, v48, v49);
    goto LABEL_15;
  }
  v50 = (__int8 *)(result + v49);
  if (v49 >= 0x10)
  {
    v51 = result + (v49 & 0xFFFFFFF0);
    do
    {
      v52 = (unsigned __int128)vld2q_s8(v48->i8);
      v48 += 2;
      *(_OWORD *)result = v52;
      result += 16;
    }
    while (result != v51);
    result = v51;
  }
  if ((__int8 *)result != v50)
  {
    v53 = (char *)v11 + v22 + v49;
    v54 = (unint64_t)&v53[-result + 21];
    if (v54 < 8
      || (result < (unint64_t)&v48[2].u64[1] + 2 * (_QWORD)v53 + -2 * result + 2
        ? (v55 = v48 >= (int8x16_t *)(v53 + 21))
        : (v55 = 1),
          !v55))
    {
      v57 = (__int8 *)result;
      v58 = v48;
      goto LABEL_78;
    }
    if (v54 >= 0x20)
    {
      v56 = v54 & 0xFFFFFFFFFFFFFFE0;
      v88 = v48 + 2;
      v89 = (int8x16_t *)(result + 16);
      v90 = v54 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v92 = v88[-2];
        v91 = v88[-1];
        v94 = *v88;
        v93 = v88[1];
        v88 += 4;
        v89[-1] = vuzp1q_s8(v92, v91);
        *v89 = vuzp1q_s8(v94, v93);
        v89 += 2;
        v90 -= 32;
      }
      while (v90);
      if (v54 == v56)
        goto LABEL_15;
      if ((v54 & 0x18) == 0)
      {
        v58 = (int8x16_t *)((char *)v48 + 2 * v56);
        v57 = (__int8 *)(result + v56);
        do
        {
LABEL_78:
          v59 = v58->i8[0];
          v58 = (int8x16_t *)((char *)v58 + 2);
          *v57++ = v59;
        }
        while (v57 != v50);
        goto LABEL_15;
      }
    }
    else
    {
      v56 = 0;
    }
    v57 = (__int8 *)(result + (v54 & 0xFFFFFFFFFFFFFFF8));
    v58 = (int8x16_t *)((char *)v48 + 2 * (v54 & 0xFFFFFFFFFFFFFFF8));
    v95 = (int16x8_t *)((char *)v48 + 2 * v56);
    v96 = (int8x8_t *)(result + v56);
    v97 = v56 - (v54 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v98 = *v95++;
      *v96++ = vmovn_s16(v98);
      v97 += 8;
    }
    while (v97);
    if (v54 != (v54 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_78;
  }
LABEL_15:
  *a6 = v11;
  return result;
}

void WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(int **a1, unsigned int a2, int a3, int8x16_t *a4, uint64_t a5, char *a6, unsigned int a7, uint64_t a8, int8x16_t *a9, uint64_t a10, int8x16_t *a11, uint64_t a12)
{
  int v18;
  int *v19;
  int8x16_t *v20;
  _WORD *v21;
  _WORD *v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  _WORD *v36;
  int8x16_t *v37;
  __int16 v38;
  uint8x8_t *v39;
  uint16x8_t *v40;
  unint64_t v41;
  uint8x16_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint8x8_t *v45;
  uint16x8_t *v46;
  unint64_t v47;
  uint8x8_t v48;
  _DWORD *v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;

  if (!a3)
  {
    if (!a2)
      goto LABEL_9;
    if (a2 > 0x7FFFFFEF)
      goto LABEL_8;
    WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20), &v50);
    v19 = v50;
    if (!v50)
      goto LABEL_41;
    v21 = v50 + 5;
    *v50 = 2;
    v19[1] = a2;
    *((_QWORD *)v19 + 1) = v19 + 5;
    v19[4] = 0;
    if ((a5 & 0xFF00000000) == 0)
    {
      if ((_DWORD)a5)
      {
        if ((_DWORD)a5 == 1)
        {
          *v21 = a4->i16[0];
        }
        else
        {
          memcpy(v19 + 5, a4, 2 * a5);
          v21 = v19 + 5;
        }
      }
      goto LABEL_40;
    }
    v22 = &v21[a5];
    if (a5 < 0x40)
    {
      v23 = (unint64_t)(v19 + 5);
    }
    else
    {
      v23 = (unint64_t)&v21[a5 & 0xFFFFFFC0];
      v24 = 0uLL;
      v25 = (char *)(v19 + 5);
      do
      {
        v51.val[0] = *a4;
        v26 = a4[1];
        v52.val[0] = a4[2];
        v27 = a4[3];
        a4 += 4;
        v28 = v27;
        v52.val[1] = 0uLL;
        v53.val[0] = v26;
        v51.val[1] = 0uLL;
        v29 = v25;
        vst2q_s8(v29, v51);
        v29 += 32;
        v53.val[1] = 0uLL;
        vst2q_s8(v29, v53);
        v30 = v25 + 64;
        vst2q_s8(v30, v52);
        v31 = v25 + 96;
        vst2q_s8(v31, *(int8x16x2_t *)(&v24 - 1));
        v25 += 128;
      }
      while (v25 != (char *)v23);
    }
    if ((_WORD *)v23 == v22)
    {
LABEL_40:
      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>((char *)&v21[a5], (unint64_t)a6, a7, a9, a10, a11, a12);
      goto LABEL_41;
    }
    v32 = (unint64_t)v19 + 2 * a5 - v23 + 18;
    if (v32 < 0xE
      || (v23 < (unint64_t)a4->u64 + (v32 >> 1) + 1
        ? (v33 = (unint64_t)a4 >= (v32 & 0xFFFFFFFFFFFFFFFELL) + v23 + 2)
        : (v33 = 1),
          !v33))
    {
      v36 = (_WORD *)v23;
      v37 = a4;
      goto LABEL_30;
    }
    v34 = (v32 >> 1) + 1;
    if (v32 >= 0x3E)
    {
      v35 = v34 & 0xFFFFFFFFFFFFFFE0;
      v39 = (uint8x8_t *)&a4[1];
      v40 = (uint16x8_t *)(v23 + 32);
      v41 = v34 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v42 = *(uint8x16_t *)v39[-2].i8;
        v43 = vmovl_u8(*v39);
        v44 = vmovl_high_u8(*(uint8x16_t *)v39->i8);
        v40[-2] = vmovl_u8(*(uint8x8_t *)v42.i8);
        v40[-1] = vmovl_high_u8(v42);
        *v40 = v43;
        v40[1] = v44;
        v40 += 4;
        v39 += 4;
        v41 -= 32;
      }
      while (v41);
      if (v34 == v35)
        goto LABEL_40;
      if ((v34 & 0x18) == 0)
      {
        v37 = (int8x16_t *)((char *)a4 + v35);
        v36 = (_WORD *)(v23 + 2 * v35);
        do
        {
LABEL_30:
          v38 = v37->u8[0];
          v37 = (int8x16_t *)((char *)v37 + 1);
          *v36++ = v38;
        }
        while (v36 != v22);
        goto LABEL_40;
      }
    }
    else
    {
      v35 = 0;
    }
    v36 = (_WORD *)(v23 + 2 * (v34 & 0xFFFFFFFFFFFFFFF8));
    v37 = (int8x16_t *)((char *)a4 + (v34 & 0xFFFFFFFFFFFFFFF8));
    v45 = (uint8x8_t *)&a4->i8[v35];
    v46 = (uint16x8_t *)(v23 + 2 * v35);
    v47 = v35 - (v34 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v48 = *v45++;
      *v46++ = vmovl_u8(v48);
      v47 += 8;
    }
    while (v47);
    if (v34 == (v34 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_40;
    goto LABEL_30;
  }
  if (!a2)
  {
LABEL_9:
    v19 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_41;
  }
  if ((a2 & 0x80000000) != 0)
  {
LABEL_8:
    v19 = 0;
    goto LABEL_41;
  }
  WTF::tryFastCompactMalloc((WTF *)(a2 + 20), &v50);
  v19 = v50;
  if (v50)
  {
    v20 = (int8x16_t *)(v50 + 5);
    *v50 = 2;
    v19[1] = a2;
    *((_QWORD *)v19 + 1) = v19 + 5;
    v19[4] = 4;
    WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(v20, a4->i8, a5, a6, a7, a9->i8, a10, v18, a11->i8, a12);
  }
LABEL_41:
  *a1 = v19;
}

double WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(int8x16_t *__dst, char *a2, uint64_t a3, char *__src, unsigned int a5, const char *a6, uint64_t a7, int a8, const char *a9, uint64_t a10)
{
  unsigned int v14;
  const char *v16;
  char *v17;
  int8x16_t *v18;
  unsigned __int128 *v19;
  unsigned __int128 v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  unsigned __int128 *v33;
  unint64_t v34;
  BOOL v35;
  unint64_t v36;
  char *v37;
  const char *v38;
  char v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  int8x16_t *v46;
  const char *v47;
  char v48;
  int8x16_t *v49;
  int8x16_t *v50;
  unint64_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int16x8_t *v56;
  char *v57;
  unint64_t v58;
  int16x8_t v59;
  int8x16_t *v60;
  int8x16_t *v61;
  unint64_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int16x8_t *v67;
  char *v68;
  unint64_t v69;
  int16x8_t v70;
  int8x16_t *v71;
  int8x16_t *v72;
  unint64_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int16x8_t *v78;
  _QWORD *v79;
  unint64_t v80;
  int16x8_t v81;

  v14 = a3;
  v16 = a9;
  if ((a3 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a3)
    {
      if ((_DWORD)a3 == 1)
        __dst->i8[0] = *a2;
      else
        memcpy(__dst, a2, a3);
    }
    goto LABEL_20;
  }
  v17 = &__dst->i8[a3];
  v18 = __dst;
  if (a3 >= 0x10)
  {
    v18 = (int8x16_t *)((char *)__dst + (a3 & 0xFFFFFFF0));
    v19 = (unsigned __int128 *)__dst;
    do
    {
      v20 = (unsigned __int128)vld2q_s8(a2);
      a2 += 32;
      *v19++ = v20;
    }
    while (v19 != (unsigned __int128 *)v18);
  }
  if (v18 != (int8x16_t *)v17)
  {
    v21 = &__dst->i8[a3] - (__int8 *)v18;
    if (v21 < 8 || (v18 < (int8x16_t *)&a2[2 * v21] ? (v22 = a2 >= &__dst->i8[a3]) : (v22 = 1), !v22))
    {
      v24 = (char *)v18;
      v25 = a2;
      goto LABEL_19;
    }
    if (v21 >= 0x20)
    {
      v23 = v21 & 0xFFFFFFFFFFFFFFE0;
      v49 = (int8x16_t *)(a2 + 32);
      v50 = v18 + 1;
      v51 = v21 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v53 = v49[-2];
        v52 = v49[-1];
        v55 = *v49;
        v54 = v49[1];
        v49 += 4;
        v20 = (unsigned __int128)vuzp1q_s8(v53, v52);
        v50[-1] = (int8x16_t)v20;
        *v50 = vuzp1q_s8(v55, v54);
        v50 += 2;
        v51 -= 32;
      }
      while (v51);
      if (v21 == v23)
        goto LABEL_20;
      if ((v21 & 0x18) == 0)
      {
        v25 = &a2[2 * v23];
        v24 = &v18->i8[v23];
        goto LABEL_19;
      }
    }
    else
    {
      v23 = 0;
    }
    v24 = &v18->i8[v21 & 0xFFFFFFFFFFFFFFF8];
    v25 = &a2[2 * (v21 & 0xFFFFFFFFFFFFFFF8)];
    v56 = (int16x8_t *)&a2[2 * v23];
    v57 = &v18->i8[v23];
    v58 = v23 - (v21 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v59 = *v56++;
      *(int8x8_t *)&v20 = vmovn_s16(v59);
      *(_QWORD *)v57 = v20;
      v57 += 8;
      v58 += 8;
    }
    while (v58);
    if (v21 == (v21 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_20;
    do
    {
LABEL_19:
      v26 = *v25;
      v25 += 2;
      *v24++ = v26;
    }
    while (v24 != v17);
  }
LABEL_20:
  v27 = v14;
  v28 = &__dst->i8[v14];
  if (!a5)
    goto LABEL_23;
  if (a5 == 1)
  {
    *v28 = *__src;
LABEL_23:
    v29 = a5;
    v30 = &v28[a5];
    if ((a7 & 0xFF00000000) != 0)
      goto LABEL_24;
LABEL_28:
    v31 = &v30[a7];
    if (a7 < 0x10)
    {
      v32 = v30;
      if (v30 == v31)
        goto LABEL_45;
    }
    else
    {
      v32 = &v30[a7 & 0xFFFFFFF0];
      v33 = (unsigned __int128 *)v30;
      do
      {
        v20 = (unsigned __int128)vld2q_s8(a6);
        a6 += 32;
        *v33++ = v20;
      }
      while (v33 != (unsigned __int128 *)v32);
      if (v32 == v31)
        goto LABEL_45;
    }
    v34 = &__dst->i8[v27 + v29 + a7] - v32;
    if (v34 < 8 || (v32 < &a6[2 * v34] ? (v35 = a6 >= &__dst->i8[a7 + v29 + v27]) : (v35 = 1), !v35))
    {
      v37 = v32;
      v38 = a6;
      goto LABEL_44;
    }
    if (v34 >= 0x20)
    {
      v36 = v34 & 0xFFFFFFFFFFFFFFE0;
      v60 = (int8x16_t *)(a6 + 32);
      v61 = (int8x16_t *)(v32 + 16);
      v62 = v34 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v64 = v60[-2];
        v63 = v60[-1];
        v66 = *v60;
        v65 = v60[1];
        v60 += 4;
        v20 = (unsigned __int128)vuzp1q_s8(v64, v63);
        v61[-1] = (int8x16_t)v20;
        *v61 = vuzp1q_s8(v66, v65);
        v61 += 2;
        v62 -= 32;
      }
      while (v62);
      if (v34 == v36)
        goto LABEL_45;
      if ((v34 & 0x18) == 0)
      {
        v38 = &a6[2 * v36];
        v37 = &v32[v36];
        goto LABEL_44;
      }
    }
    else
    {
      v36 = 0;
    }
    v37 = &v32[v34 & 0xFFFFFFFFFFFFFFF8];
    v38 = &a6[2 * (v34 & 0xFFFFFFFFFFFFFFF8)];
    v67 = (int16x8_t *)&a6[2 * v36];
    v68 = &v32[v36];
    v69 = v36 - (v34 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v70 = *v67++;
      *(int8x8_t *)&v20 = vmovn_s16(v70);
      *(_QWORD *)v68 = v20;
      v68 += 8;
      v69 += 8;
    }
    while (v69);
    if (v34 == (v34 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_45;
    do
    {
LABEL_44:
      v39 = *v38;
      v38 += 2;
      *v37++ = v39;
    }
    while (v37 != v31);
    goto LABEL_45;
  }
  memcpy(v28, __src, a5);
  v29 = a5;
  v30 = &v28[a5];
  if ((a7 & 0xFF00000000) == 0)
    goto LABEL_28;
LABEL_24:
  if ((_DWORD)a7)
  {
    if ((_DWORD)a7 == 1)
      *v30 = *a6;
    else
      memcpy(v30, a6, a7);
  }
LABEL_45:
  v40 = (int8x16_t *)&v30[a7];
  if ((a10 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a10)
    {
      if ((_DWORD)a10 == 1)
        v40->i8[0] = *a9;
      else
        memcpy(v40, a9, a10);
    }
    return *(double *)&v20;
  }
  v41 = (int8x16_t *)((char *)v40 + a10);
  if (a10 >= 0x10)
  {
    v42 = (int8x16_t *)((char *)v40 + (a10 & 0xFFFFFFF0));
    do
    {
      v20 = (unsigned __int128)vld2q_s8(v16);
      v16 += 32;
      *v40++ = (int8x16_t)v20;
    }
    while (v40 != v42);
    v40 = v42;
  }
  if (v40 != v41)
  {
    v43 = &__dst->i8[v27 + v29 + a7 + a10] - (__int8 *)v40;
    if (v43 < 8
      || (v40 < (int8x16_t *)&v16[2 * v43]
        ? (v44 = v16 >= &__dst->i8[a10 + a7 + v29 + v27])
        : (v44 = 1),
          !v44))
    {
      v46 = v40;
      v47 = v16;
      goto LABEL_64;
    }
    if (v43 >= 0x20)
    {
      v45 = v43 & 0xFFFFFFFFFFFFFFE0;
      v71 = (int8x16_t *)(v16 + 32);
      v72 = v40 + 1;
      v73 = v43 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v75 = v71[-2];
        v74 = v71[-1];
        v77 = *v71;
        v76 = v71[1];
        v71 += 4;
        v20 = (unsigned __int128)vuzp1q_s8(v75, v74);
        v72[-1] = (int8x16_t)v20;
        *v72 = vuzp1q_s8(v77, v76);
        v72 += 2;
        v73 -= 32;
      }
      while (v73);
      if (v43 == v45)
        return *(double *)&v20;
      if ((v43 & 0x18) == 0)
      {
        v47 = &v16[2 * v45];
        v46 = (int8x16_t *)((char *)v40 + v45);
        goto LABEL_64;
      }
    }
    else
    {
      v45 = 0;
    }
    v46 = (int8x16_t *)((char *)v40 + (v43 & 0xFFFFFFFFFFFFFFF8));
    v47 = &v16[2 * (v43 & 0xFFFFFFFFFFFFFFF8)];
    v78 = (int16x8_t *)&v16[2 * v45];
    v79 = (uint64_t *)((char *)v40->i64 + v45);
    v80 = v45 - (v43 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v81 = *v78++;
      *(int8x8_t *)&v20 = vmovn_s16(v81);
      *v79++ = v20;
      v80 += 8;
    }
    while (v80);
    if (v43 == (v43 & 0xFFFFFFFFFFFFFFF8))
      return *(double *)&v20;
    do
    {
LABEL_64:
      v48 = *v47;
      v47 += 2;
      v46->i8[0] = v48;
      v46 = (int8x16_t *)((char *)v46 + 1);
    }
    while (v46 != v41);
  }
  return *(double *)&v20;
}

uint16x8_t *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(char *a1, unint64_t a2, unsigned int a3, int8x16_t *__src, uint64_t a5, int8x16_t *a6, uint64_t a7)
{
  unsigned int v9;
  uint16x8_t *v11;
  unint64_t v12;
  __int128 v13;
  char *v14;
  int8x16_t v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  uint16x8_t *v26;
  unsigned __int8 *v27;
  __int16 v28;
  uint16x8_t *v29;
  uint16x8_t *v30;
  __int128 v31;
  char *v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint16x8_t *v40;
  unsigned __int8 *v41;
  __int16 v42;
  uint64_t v43;
  unint64_t v44;
  uint8x8_t *v45;
  uint16x8_t *v46;
  unint64_t v47;
  uint8x16_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint8x8_t *v51;
  uint16x8_t *v52;
  unint64_t v53;
  uint8x8_t v54;
  uint8x8_t *v55;
  uint16x8_t *v56;
  unint64_t v57;
  uint8x16_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint8x8_t *v61;
  uint16x8_t *v62;
  unint64_t v63;
  uint8x8_t v64;
  uint16x8_t *result;
  uint16x8_t *v66;
  uint16x8_t *v67;
  __int128 v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  char *v72;
  char *i8;
  char *v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v77;
  unint64_t v78;
  uint16x8_t *v79;
  unsigned __int8 *v80;
  __int16 v81;
  uint8x8_t *v82;
  uint16x8_t *v83;
  unint64_t v84;
  uint8x16_t v85;
  uint16x8_t v86;
  uint16x8_t v87;
  uint8x8_t *v88;
  uint16x8_t *v89;
  unint64_t v90;
  uint8x8_t v91;
  int8x16x2_t v92;
  int8x16x2_t v93;
  int8x16x2_t v94;
  int8x16x2_t v95;
  int8x16x2_t v96;
  int8x16x2_t v97;
  int8x16x2_t v98;
  int8x16x2_t v99;
  int8x16x2_t v100;

  v9 = a5;
  v11 = (uint16x8_t *)&a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) == 0)
  {
    v12 = (unint64_t)a1;
    v21 = a3;
    if (a1 == (char *)v11)
      goto LABEL_17;
LABEL_7:
    v22 = (unint64_t)&a1[2 * v21 - v12 - 2];
    if (v22 < 0xE
      || (v12 < a2 + (v22 >> 1) + 1 ? (v23 = a2 >= (v22 & 0xFFFFFFFFFFFFFFFELL) + v12 + 2) : (v23 = 1), !v23))
    {
      v26 = (uint16x8_t *)v12;
      v27 = (unsigned __int8 *)a2;
      goto LABEL_16;
    }
    v24 = (v22 >> 1) + 1;
    if (v22 >= 0x3E)
    {
      v25 = v24 & 0xFFFFFFFFFFFFFFE0;
      v45 = (uint8x8_t *)(a2 + 16);
      v46 = (uint16x8_t *)(v12 + 32);
      v47 = v24 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v48 = *(uint8x16_t *)v45[-2].i8;
        v49 = vmovl_u8(*v45);
        v50 = vmovl_high_u8(*(uint8x16_t *)v45->i8);
        v46[-2] = vmovl_u8(*(uint8x8_t *)v48.i8);
        v46[-1] = vmovl_high_u8(v48);
        *v46 = v49;
        v46[1] = v50;
        v46 += 4;
        v45 += 4;
        v47 -= 32;
      }
      while (v47);
      if (v24 == v25)
        goto LABEL_17;
      if ((v24 & 0x18) == 0)
      {
        v27 = (unsigned __int8 *)(a2 + v25);
        v26 = (uint16x8_t *)(v12 + 2 * v25);
        goto LABEL_16;
      }
    }
    else
    {
      v25 = 0;
    }
    v26 = (uint16x8_t *)(v12 + 2 * (v24 & 0xFFFFFFFFFFFFFFF8));
    v27 = (unsigned __int8 *)(a2 + (v24 & 0xFFFFFFFFFFFFFFF8));
    v51 = (uint8x8_t *)(a2 + v25);
    v52 = (uint16x8_t *)(v12 + 2 * v25);
    v53 = v25 - (v24 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v54 = *v51++;
      *v52++ = vmovl_u8(v54);
      v53 += 8;
    }
    while (v53);
    if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_17;
    do
    {
LABEL_16:
      v28 = *v27++;
      v26->i16[0] = v28;
      v26 = (uint16x8_t *)((char *)v26 + 2);
    }
    while (v26 != v11);
    goto LABEL_17;
  }
  v12 = (unint64_t)&a1[2 * (a3 & 0xFFFFFFC0)];
  v13 = 0uLL;
  v14 = a1;
  do
  {
    v92.val[0] = *(int8x16_t *)a2;
    v15 = *(int8x16_t *)(a2 + 16);
    v95.val[0] = *(int8x16_t *)(a2 + 32);
    v16 = *(_OWORD *)(a2 + 48);
    a2 += 64;
    v17 = v16;
    v95.val[1] = 0uLL;
    v98.val[0] = v15;
    v92.val[1] = 0uLL;
    v18 = v14;
    vst2q_s8(v18, v92);
    v18 += 32;
    v98.val[1] = 0uLL;
    vst2q_s8(v18, v98);
    v19 = v14 + 64;
    vst2q_s8(v19, v95);
    v20 = v14 + 96;
    vst2q_s8(v20, *(int8x16x2_t *)(&v13 - 1));
    v14 += 128;
  }
  while (v14 != (char *)v12);
  v21 = a3;
  if ((uint16x8_t *)v12 != v11)
    goto LABEL_7;
LABEL_17:
  if ((a5 & 0xFF00000000) != 0)
  {
    v29 = (uint16x8_t *)((char *)v11 + 2 * a5);
    if (a5 < 0x40)
    {
      v30 = (uint16x8_t *)&a1[2 * a3];
      if (v11 == v29)
        goto LABEL_51;
    }
    else
    {
      v30 = (uint16x8_t *)((char *)v11 + 2 * (a5 & 0xFFFFFFC0));
      v31 = 0uLL;
      v32 = &a1[2 * a3];
      do
      {
        v93.val[0] = *__src;
        v33 = __src[1];
        v96.val[0] = __src[2];
        v34 = __src[3];
        __src += 4;
        v35 = v34;
        v96.val[1] = 0uLL;
        v99.val[0] = v33;
        v93.val[1] = 0uLL;
        v36 = v32;
        vst2q_s8(v36, v93);
        v36 += 32;
        v99.val[1] = 0uLL;
        vst2q_s8(v36, v99);
        v37 = v32 + 64;
        vst2q_s8(v37, v96);
        v38 = v32 + 96;
        vst2q_s8(v38, *(int8x16x2_t *)(&v31 - 1));
        v32 += 128;
      }
      while (v32 != (char *)v30);
      if (v30 == v29)
        goto LABEL_51;
    }
    v39 = &a1[2 * v21 + 2 * a5] - (char *)v30 - 2;
    if (v39 < 0xE
      || v30 < (uint16x8_t *)&__src->i8[(v39 >> 1) + 1]
      && __src < (int8x16_t *)((char *)&v30->i16[1] + (v39 & 0xFFFFFFFFFFFFFFFELL)))
    {
      v40 = v30;
      v41 = (unsigned __int8 *)__src;
      goto LABEL_31;
    }
    v43 = (v39 >> 1) + 1;
    if (v39 >= 0x3E)
    {
      v44 = v43 & 0xFFFFFFFFFFFFFFE0;
      v55 = (uint8x8_t *)&__src[1];
      v56 = v30 + 2;
      v57 = v43 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v58 = *(uint8x16_t *)v55[-2].i8;
        v59 = vmovl_u8(*v55);
        v60 = vmovl_high_u8(*(uint8x16_t *)v55->i8);
        v56[-2] = vmovl_u8(*(uint8x8_t *)v58.i8);
        v56[-1] = vmovl_high_u8(v58);
        *v56 = v59;
        v56[1] = v60;
        v56 += 4;
        v55 += 4;
        v57 -= 32;
      }
      while (v57);
      if (v43 == v44)
        goto LABEL_51;
      if ((v43 & 0x18) == 0)
      {
        v41 = &__src->u8[v44];
        v40 = (uint16x8_t *)((char *)v30 + 2 * v44);
        goto LABEL_31;
      }
    }
    else
    {
      v44 = 0;
    }
    v40 = (uint16x8_t *)((char *)v30 + 2 * (v43 & 0xFFFFFFFFFFFFFFF8));
    v41 = &__src->u8[v43 & 0xFFFFFFFFFFFFFFF8];
    v61 = (uint8x8_t *)&__src->i8[v44];
    v62 = (uint16x8_t *)((char *)v30 + 2 * v44);
    v63 = v44 - (v43 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v64 = *v61++;
      *v62++ = vmovl_u8(v64);
      v63 += 8;
    }
    while (v63);
    if (v43 == (v43 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_51;
    do
    {
LABEL_31:
      v42 = *v41++;
      v40->i16[0] = v42;
      v40 = (uint16x8_t *)((char *)v40 + 2);
    }
    while (v40 != v29);
    goto LABEL_51;
  }
  if ((_DWORD)a5)
  {
    if ((_DWORD)a5 == 1)
      v11->i16[0] = __src->i16[0];
    else
      memcpy(v11, __src, 2 * a5);
  }
LABEL_51:
  result = (uint16x8_t *)((char *)v11 + 2 * v9);
  if ((a7 & 0xFF00000000) != 0)
  {
    v66 = (uint16x8_t *)((char *)result + 2 * a7);
    if (a7 >= 0x40)
    {
      v67 = (uint16x8_t *)((char *)result + 2 * (a7 & 0xFFFFFFC0));
      v68 = 0uLL;
      do
      {
        v94.val[0] = *a6;
        v69 = a6[1];
        v97.val[0] = a6[2];
        v70 = a6[3];
        a6 += 4;
        v71 = v70;
        v97.val[1] = 0uLL;
        v100.val[0] = v69;
        v94.val[1] = 0uLL;
        v72 = (char *)result;
        vst2q_s8(v72, v94);
        v72 += 32;
        v100.val[1] = 0uLL;
        vst2q_s8(v72, v100);
        i8 = result[4].i8;
        vst2q_s8(i8, v97);
        v74 = result[6].i8;
        vst2q_s8(v74, *(int8x16x2_t *)(&v68 - 1));
        result += 8;
      }
      while (result != v67);
      result = v67;
    }
    if (result != v66)
    {
      v75 = &a1[2 * v21 + 2 * v9 + 2 * a7] - (char *)result - 2;
      if (v75 < 0xE
        || (result < (uint16x8_t *)&a6->i8[(v75 >> 1) + 1]
          ? (v76 = a6 >= (int8x16_t *)((char *)&result->i16[1] + (v75 & 0xFFFFFFFFFFFFFFFELL)))
          : (v76 = 1),
            !v76))
      {
        v79 = result;
        v80 = (unsigned __int8 *)a6;
        goto LABEL_69;
      }
      v77 = (v75 >> 1) + 1;
      if (v75 >= 0x3E)
      {
        v78 = v77 & 0xFFFFFFFFFFFFFFE0;
        v82 = (uint8x8_t *)&a6[1];
        v83 = result + 2;
        v84 = v77 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v85 = *(uint8x16_t *)v82[-2].i8;
          v86 = vmovl_u8(*v82);
          v87 = vmovl_high_u8(*(uint8x16_t *)v82->i8);
          v83[-2] = vmovl_u8(*(uint8x8_t *)v85.i8);
          v83[-1] = vmovl_high_u8(v85);
          *v83 = v86;
          v83[1] = v87;
          v83 += 4;
          v82 += 4;
          v84 -= 32;
        }
        while (v84);
        if (v77 == v78)
          return result;
        if ((v77 & 0x18) == 0)
        {
          v80 = &a6->u8[v78];
          v79 = (uint16x8_t *)((char *)result + 2 * v78);
          do
          {
LABEL_69:
            v81 = *v80++;
            v79->i16[0] = v81;
            v79 = (uint16x8_t *)((char *)v79 + 2);
          }
          while (v79 != v66);
          return result;
        }
      }
      else
      {
        v78 = 0;
      }
      v79 = (uint16x8_t *)((char *)result + 2 * (v77 & 0xFFFFFFFFFFFFFFF8));
      v80 = &a6->u8[v77 & 0xFFFFFFFFFFFFFFF8];
      v88 = (uint8x8_t *)&a6->i8[v78];
      v89 = (uint16x8_t *)((char *)result + 2 * v78);
      v90 = v78 - (v77 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v91 = *v88++;
        *v89++ = vmovl_u8(v91);
        v90 += 8;
      }
      while (v90);
      if (v77 != (v77 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_69;
    }
  }
  else if ((_DWORD)a7)
  {
    if ((_DWORD)a7 == 1)
      result->i16[0] = a6->i16[0];
    else
      return (uint16x8_t *)memcpy(result, a6, 2 * a7);
  }
  return result;
}

unint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(unint64_t result, unsigned int a2, int a3, int8x16_t *a4, uint64_t a5, unsigned int a6, int8x16_t *a7, uint64_t a8)
{
  _QWORD *v14;
  int *v15;
  _BYTE *v16;
  _WORD *v17;
  _WORD *v18;
  unint64_t v19;
  __int128 v20;
  char *v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  char *v25;
  char *v26;
  char *v27;
  _BYTE *v28;
  unint64_t v29;
  unsigned __int128 *v30;
  unsigned __int128 v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  _WORD *v36;
  int8x16_t *v37;
  __int16 v38;
  char *v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  _BYTE *v43;
  int8x16_t *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned int v49;
  BOOL v50;
  void *v51;
  uint64_t v52;
  _BYTE *v53;
  unint64_t v54;
  unsigned __int128 v55;
  unint64_t v56;
  BOOL v57;
  unint64_t v58;
  size_t v59;
  _BYTE *v60;
  int8x16_t *v61;
  char v62;
  uint8x8_t *v63;
  uint16x8_t *v64;
  unint64_t v65;
  uint8x16_t v66;
  uint16x8_t v67;
  uint16x8_t v68;
  uint8x8_t *v69;
  uint16x8_t *v70;
  unint64_t v71;
  uint8x8_t v72;
  uint64_t v73;
  _WORD *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _WORD *v81;
  unint64_t v82;
  uint64_t v83;
  _WORD *v84;
  unint64_t v85;
  uint16x8_t *v86;
  unint64_t v87;
  uint8x8_t *v88;
  uint8x16_t v89;
  uint16x8_t v90;
  uint16x8_t v91;
  uint16x8_t *v92;
  unint64_t v93;
  char *v94;
  int8x16_t *v95;
  int8x16_t *v96;
  unint64_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int16x8_t *v102;
  int8x8_t *v103;
  unint64_t v104;
  int16x8_t v105;
  int8x16_t *v106;
  int8x16_t *v107;
  unint64_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int16x8_t *v113;
  int8x8_t *v114;
  unint64_t v115;
  int16x8_t v116;
  uint64_t v117;
  _WORD *v118;
  unint64_t v119;
  __int128 v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  char *v124;
  char *v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  BOOL v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _WORD *v135;
  int8x16_t *v136;
  __int16 v137;
  uint8x8_t *v138;
  uint16x8_t *v139;
  unint64_t v140;
  uint8x16_t v141;
  uint16x8_t v142;
  uint16x8_t v143;
  uint8x8_t *v144;
  uint16x8_t *v145;
  unint64_t v146;
  uint8x8_t v147;
  _QWORD v148[3];
  int8x16x2_t v149;
  int8x16x2_t v150;
  int8x16x2_t v151;
  int8x16x2_t v152;
  int8x16x2_t v153;
  int8x16x2_t v154;

  v14 = (_QWORD *)result;
  v148[2] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (a2)
    {
      if ((a2 & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20), v148);
        v15 = (int *)v148[0];
        if (!v148[0])
          goto LABEL_13;
        v16 = (_BYTE *)(v148[0] + 20);
        *(_DWORD *)v148[0] = 2;
        v15[1] = a2;
        *((_QWORD *)v15 + 1) = v15 + 5;
        v15[4] = 4;
        if ((a5 & 0xFF00000000) != 0)
        {
          if ((_DWORD)a5)
          {
            if ((_DWORD)a5 == 1)
              *v16 = a4->i8[0];
            else
              memcpy(v15 + 5, a4, a5);
          }
LABEL_53:
          v46 = 0;
          v47 = a5;
          v48 = &v16[a5];
          *v48 = 58;
          v49 = a6;
          do
          {
            *((_BYTE *)&v148[1] + v46-- + 4) = (v49 % 0xA) | 0x30;
            v50 = v49 > 9;
            v49 /= 0xAu;
          }
          while (v50);
          v51 = v48 + 1;
          if (v46 + 14 <= 13)
            memcpy(v51, (char *)&v148[1] + v46 + 5, -v46);
          LODWORD(v52) = 0;
          do
          {
            v52 = (v52 + 1);
            v50 = a6 > 9;
            a6 /= 0xAu;
          }
          while (v50);
          result = (unint64_t)v51 + v52;
          if ((a8 & 0xFF00000000) != 0)
          {
            if ((_DWORD)a8)
            {
              if ((_DWORD)a8 == 1)
              {
                *(_BYTE *)result = a7->i8[0];
                goto LABEL_13;
              }
              v59 = a8;
LABEL_144:
              result = (unint64_t)memcpy((void *)result, a7, v59);
              goto LABEL_13;
            }
            goto LABEL_13;
          }
          v53 = (_BYTE *)(result + a8);
          if (a8 >= 0x10)
          {
            v54 = result + (a8 & 0xFFFFFFF0);
            do
            {
              v55 = (unsigned __int128)vld2q_s8(a7->i8);
              a7 += 2;
              *(_OWORD *)result = v55;
              result += 16;
            }
            while (result != v54);
            result = v54;
          }
          if ((_BYTE *)result == v53)
            goto LABEL_13;
          v56 = (unint64_t)v15 + v47 + a8 - result + v52 + 21;
          if (v56 < 8
            || (result < (unint64_t)&a7[2].u64[1]
                       + 2 * ((_QWORD)v15 + v47 + a8 + v52)
                       + -2 * result
                       + 2
              ? (v57 = a7 >= (int8x16_t *)((char *)v15 + a8 + v47 + v52 + 21))
              : (v57 = 1),
                !v57))
          {
            v60 = (_BYTE *)result;
            v61 = a7;
            goto LABEL_78;
          }
          if (v56 >= 0x20)
          {
            v58 = v56 & 0xFFFFFFFFFFFFFFE0;
            v106 = a7 + 2;
            v107 = (int8x16_t *)(result + 16);
            v108 = ((unint64_t)v15 + v47 + a8 - result + v52 + 21) & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v110 = v106[-2];
              v109 = v106[-1];
              v112 = *v106;
              v111 = v106[1];
              v106 += 4;
              v107[-1] = vuzp1q_s8(v110, v109);
              *v107 = vuzp1q_s8(v112, v111);
              v107 += 2;
              v108 -= 32;
            }
            while (v108);
            if (v56 == v58)
              goto LABEL_13;
            if ((v56 & 0x18) == 0)
            {
              v61 = (int8x16_t *)((char *)a7 + 2 * v58);
              v60 = (_BYTE *)(result + v58);
              goto LABEL_78;
            }
          }
          else
          {
            v58 = 0;
          }
          v60 = (_BYTE *)(result + (v56 & 0xFFFFFFFFFFFFFFF8));
          v61 = (int8x16_t *)((char *)a7 + 2 * (v56 & 0xFFFFFFFFFFFFFFF8));
          v113 = (int16x8_t *)((char *)a7 + 2 * v58);
          v114 = (int8x8_t *)(result + v58);
          v115 = v58
               - (((unint64_t)v15 + v47 + a8 - result + v52 + 21) & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v116 = *v113++;
            *v114++ = vmovn_s16(v116);
            v115 += 8;
          }
          while (v115);
          if (v56 == (v56 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_13;
          do
          {
LABEL_78:
            v62 = v61->i8[0];
            v61 = (int8x16_t *)((char *)v61 + 2);
            *v60++ = v62;
          }
          while (v60 != v53);
          goto LABEL_13;
        }
        v28 = &v16[a5];
        if (a5 < 0x10)
        {
          v29 = (unint64_t)(v15 + 5);
        }
        else
        {
          v29 = (unint64_t)&v16[a5 & 0xFFFFFFF0];
          v30 = (unsigned __int128 *)(v15 + 5);
          do
          {
            v31 = (unsigned __int128)vld2q_s8(a4->i8);
            a4 += 2;
            *v30++ = v31;
          }
          while (v30 != (unsigned __int128 *)v29);
        }
        if ((_BYTE *)v29 == v28)
          goto LABEL_53;
        v39 = (char *)v15 + a5;
        v40 = (unint64_t)&v39[-v29 + 20];
        if (v40 < 8
          || (v29 < (unint64_t)&a4[2].u64[1] + 2 * (_QWORD)v39 + -2 * v29
            ? (v41 = a4 >= (int8x16_t *)(v39 + 20))
            : (v41 = 1),
              !v41))
        {
          v43 = (_BYTE *)v29;
          v44 = a4;
          goto LABEL_52;
        }
        if (v40 >= 0x20)
        {
          v42 = v40 & 0xFFFFFFFFFFFFFFE0;
          v95 = a4 + 2;
          v96 = (int8x16_t *)(v29 + 16);
          v97 = v40 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v99 = v95[-2];
            v98 = v95[-1];
            v101 = *v95;
            v100 = v95[1];
            v95 += 4;
            v96[-1] = vuzp1q_s8(v99, v98);
            *v96 = vuzp1q_s8(v101, v100);
            v96 += 2;
            v97 -= 32;
          }
          while (v97);
          if (v40 == v42)
            goto LABEL_53;
          if ((v40 & 0x18) == 0)
          {
            v44 = (int8x16_t *)((char *)a4 + 2 * v42);
            v43 = (_BYTE *)(v29 + v42);
            goto LABEL_52;
          }
        }
        else
        {
          v42 = 0;
        }
        v43 = (_BYTE *)(v29 + (v40 & 0xFFFFFFFFFFFFFFF8));
        v44 = (int8x16_t *)((char *)a4 + 2 * (v40 & 0xFFFFFFFFFFFFFFF8));
        v102 = (int16x8_t *)((char *)a4 + 2 * v42);
        v103 = (int8x8_t *)(v29 + v42);
        v104 = v42 - (v40 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v105 = *v102++;
          *v103++ = vmovn_s16(v105);
          v104 += 8;
        }
        while (v104);
        if (v40 == (v40 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_53;
        do
        {
LABEL_52:
          v45 = v44->i8[0];
          v44 = (int8x16_t *)((char *)v44 + 2);
          *v43++ = v45;
        }
        while (v43 != v28);
        goto LABEL_53;
      }
LABEL_11:
      v15 = 0;
      goto LABEL_13;
    }
LABEL_12:
    v15 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_13;
  }
  if (!a2)
    goto LABEL_12;
  if (a2 > 0x7FFFFFEF)
    goto LABEL_11;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20), v148);
  v15 = (int *)v148[0];
  if (!v148[0])
    goto LABEL_13;
  v17 = (_WORD *)(v148[0] + 20);
  *(_DWORD *)v148[0] = 2;
  v15[1] = a2;
  *((_QWORD *)v15 + 1) = v15 + 5;
  v15[4] = 0;
  if ((a5 & 0xFF00000000) != 0)
  {
    v18 = &v17[a5];
    if (a5 < 0x40)
    {
      v19 = (unint64_t)(v15 + 5);
    }
    else
    {
      v19 = (unint64_t)&v17[a5 & 0xFFFFFFC0];
      v20 = 0uLL;
      v21 = (char *)(v15 + 5);
      do
      {
        v149.val[0] = *a4;
        v22 = a4[1];
        v151.val[0] = a4[2];
        v23 = a4[3];
        a4 += 4;
        v24 = v23;
        v151.val[1] = 0uLL;
        v153.val[0] = v22;
        v149.val[1] = 0uLL;
        v25 = v21;
        vst2q_s8(v25, v149);
        v25 += 32;
        v153.val[1] = 0uLL;
        vst2q_s8(v25, v153);
        v26 = v21 + 64;
        vst2q_s8(v26, v151);
        v27 = v21 + 96;
        vst2q_s8(v27, *(int8x16x2_t *)(&v20 - 1));
        v21 += 128;
      }
      while (v21 != (char *)v19);
    }
    if ((_WORD *)v19 != v18)
    {
      v32 = (unint64_t)v15 + 2 * a5 - v19 + 18;
      if (v32 < 0xE
        || (v19 < (unint64_t)a4->u64 + (v32 >> 1) + 1
          ? (v33 = (unint64_t)a4 >= (v32 & 0xFFFFFFFFFFFFFFFELL) + v19 + 2)
          : (v33 = 1),
            !v33))
      {
        v36 = (_WORD *)v19;
        v37 = a4;
        goto LABEL_38;
      }
      v34 = (v32 >> 1) + 1;
      if (v32 >= 0x3E)
      {
        v35 = v34 & 0xFFFFFFFFFFFFFFE0;
        v63 = (uint8x8_t *)&a4[1];
        v64 = (uint16x8_t *)(v19 + 32);
        v65 = v34 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v66 = *(uint8x16_t *)v63[-2].i8;
          v67 = vmovl_u8(*v63);
          v68 = vmovl_high_u8(*(uint8x16_t *)v63->i8);
          v64[-2] = vmovl_u8(*(uint8x8_t *)v66.i8);
          v64[-1] = vmovl_high_u8(v66);
          *v64 = v67;
          v64[1] = v68;
          v64 += 4;
          v63 += 4;
          v65 -= 32;
        }
        while (v65);
        if (v34 == v35)
          goto LABEL_88;
        if ((v34 & 0x18) == 0)
        {
          v37 = (int8x16_t *)((char *)a4 + v35);
          v36 = (_WORD *)(v19 + 2 * v35);
          do
          {
LABEL_38:
            v38 = v37->u8[0];
            v37 = (int8x16_t *)((char *)v37 + 1);
            *v36++ = v38;
          }
          while (v36 != v18);
          goto LABEL_88;
        }
      }
      else
      {
        v35 = 0;
      }
      v36 = (_WORD *)(v19 + 2 * (v34 & 0xFFFFFFFFFFFFFFF8));
      v37 = (int8x16_t *)((char *)a4 + (v34 & 0xFFFFFFFFFFFFFFF8));
      v69 = (uint8x8_t *)&a4->i8[v35];
      v70 = (uint16x8_t *)(v19 + 2 * v35);
      v71 = v35 - (v34 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v72 = *v69++;
        *v70++ = vmovl_u8(v72);
        v71 += 8;
      }
      while (v71);
      if (v34 != (v34 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_38;
    }
  }
  else if ((_DWORD)a5)
  {
    if ((_DWORD)a5 == 1)
      *v17 = a4->i16[0];
    else
      memcpy(v15 + 5, a4, 2 * a5);
  }
LABEL_88:
  v73 = 0;
  v74 = &v17[a5];
  *v74 = 58;
  v75 = 13;
  v76 = 1;
  v77 = a6;
  do
  {
    v78 = v75;
    v79 = v73;
    v80 = v76;
    --v75;
    *((_BYTE *)v148 + v75) = (v77 % 0xA) | 0x30;
    ++v73;
    ++v76;
    v50 = v77 > 9;
    v77 /= 0xAu;
  }
  while (v50);
  v81 = v74 + 1;
  if (v78 <= 13)
  {
    v82 = v79 + 1;
    if ((unint64_t)(v79 + 1) < 8)
    {
      v83 = v75;
      v84 = v81;
      goto LABEL_120;
    }
    if (v82 >= 0x20)
    {
      v85 = v82 & 0xFFFFFFFFFFFFFFE0;
      v86 = (uint16x8_t *)((char *)v15 + 2 * a5 + 54);
      v87 = v80 & 0xFFFFFFFFFFFFFFE0;
      v88 = (uint8x8_t *)((char *)&v148[3] - v79 + 4);
      do
      {
        v89 = *(uint8x16_t *)v88[-2].i8;
        v90 = vmovl_u8(*v88);
        v91 = vmovl_high_u8(*(uint8x16_t *)v88->i8);
        v86[-2] = vmovl_u8(*(uint8x8_t *)v89.i8);
        v86[-1] = vmovl_high_u8(v89);
        *v86 = v90;
        v86[1] = v91;
        v86 += 4;
        v88 += 4;
        v87 -= 32;
      }
      while (v87);
      if (v82 == v85)
        goto LABEL_121;
      if ((v82 & 0x18) == 0)
      {
        v84 = &v81[v85];
        v83 = v75 + v85;
        do
LABEL_120:
          *v84++ = *((unsigned __int8 *)v148 + v83++);
        while (v83 != 13);
        goto LABEL_121;
      }
    }
    else
    {
      v85 = 0;
    }
    v83 = v75 + (v82 & 0xFFFFFFFFFFFFFFF8);
    v84 = &v81[v82 & 0xFFFFFFFFFFFFFFF8];
    v92 = (uint16x8_t *)((char *)v15 + 2 * v85 + 2 * a5 + 22);
    v93 = v85 - (v80 & 0xFFFFFFFFFFFFFFF8);
    v94 = (char *)v148 + v85;
    do
    {
      *v92++ = vmovl_u8(*(uint8x8_t *)&v94[v75]);
      v94 += 8;
      v93 += 8;
    }
    while (v93);
    if (v82 != (v82 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_120;
  }
LABEL_121:
  LODWORD(v117) = 0;
  do
  {
    v117 = (v117 + 1);
    v50 = a6 > 9;
    a6 /= 0xAu;
  }
  while (v50);
  result = (unint64_t)&v81[v117];
  if ((a8 & 0xFF00000000) == 0)
  {
    if (!(_DWORD)a8)
      goto LABEL_13;
    if ((_DWORD)a8 == 1)
    {
      *(_WORD *)result = a7->i16[0];
      goto LABEL_13;
    }
    v59 = 2 * a8;
    goto LABEL_144;
  }
  v118 = (_WORD *)(result + 2 * a8);
  if (a8 >= 0x40)
  {
    v119 = result + 2 * (a8 & 0xFFFFFFC0);
    v120 = 0uLL;
    do
    {
      v150.val[0] = *a7;
      v121 = a7[1];
      v152.val[0] = a7[2];
      v122 = a7[3];
      a7 += 4;
      v123 = v122;
      v152.val[1] = 0uLL;
      v154.val[0] = v121;
      v150.val[1] = 0uLL;
      v124 = (char *)result;
      vst2q_s8(v124, v150);
      v124 += 32;
      v154.val[1] = 0uLL;
      vst2q_s8(v124, v154);
      v125 = (char *)(result + 64);
      vst2q_s8(v125, v152);
      v126 = (char *)(result + 96);
      vst2q_s8(v126, *(int8x16x2_t *)(&v120 - 1));
      result += 128;
    }
    while (result != v119);
    result = v119;
  }
  if ((_WORD *)result != v118)
  {
    v127 = (unint64_t)v15 + 2 * a5 + 2 * (unint64_t)a8 - result + 20;
    v128 = v117 + (v127 >> 1);
    v129 = v128 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v128 & 0x7FFFFFFFFFFFFFFFuLL) < 7
      || ((v130 = result + 2 * v128 + 2, result < (unint64_t)a7->u64 + v129 + 1)
        ? (v131 = (unint64_t)a7 >= v130)
        : (v131 = 1),
          !v131))
    {
      v135 = (_WORD *)result;
      v136 = a7;
      goto LABEL_141;
    }
    v132 = v129 + 1;
    v133 = v127 >> 1;
    if (v129 >= 0x1F)
    {
      v134 = v132 & 0xFFFFFFFFFFFFFFE0;
      v138 = (uint8x8_t *)&a7[1];
      v139 = (uint16x8_t *)(result + 32);
      v140 = (((v133 + v117) & 0x7FFFFFFFFFFFFFFFLL) + 1) & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v141 = *(uint8x16_t *)v138[-2].i8;
        v142 = vmovl_u8(*v138);
        v143 = vmovl_high_u8(*(uint8x16_t *)v138->i8);
        v139[-2] = vmovl_u8(*(uint8x8_t *)v141.i8);
        v139[-1] = vmovl_high_u8(v141);
        *v139 = v142;
        v139[1] = v143;
        v139 += 4;
        v138 += 4;
        v140 -= 32;
      }
      while (v140);
      if (v132 == v134)
        goto LABEL_13;
      if ((v132 & 0x18) == 0)
      {
        v136 = (int8x16_t *)((char *)a7 + v134);
        v135 = (_WORD *)(result + 2 * v134);
        goto LABEL_141;
      }
    }
    else
    {
      v134 = 0;
    }
    v135 = (_WORD *)(result + 2 * (v132 & 0xFFFFFFFFFFFFFFF8));
    v136 = (int8x16_t *)((char *)a7 + (v132 & 0xFFFFFFFFFFFFFFF8));
    v144 = (uint8x8_t *)&a7->i8[v134];
    v145 = (uint16x8_t *)(result + 2 * v134);
    v146 = v134 - ((((v133 + v117) & 0x7FFFFFFFFFFFFFFFLL) + 1) & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v147 = *v144++;
      *v145++ = vmovl_u8(v147);
      v146 += 8;
    }
    while (v146);
    if (v132 == (v132 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_13;
    do
    {
LABEL_141:
      v137 = v136->u8[0];
      v136 = (int8x16_t *)((char *)v136 + 1);
      *v135++ = v137;
    }
    while (v135 != v118);
  }
LABEL_13:
  *v14 = v15;
  return result;
}

void WTF::tryMakeString<WTF::StringView,WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral,WTF::StringView,WTF::StringView>(int **a1, int8x16_t *a2, uint64_t a3, int8x16_t *a4, uint64_t a5, _WORD *a6, uint64_t a7, unint64_t a8, uint64_t a9, int8x16_t *a10, uint64_t a11, int8x16_t *a12, uint64_t a13)
{
  size_t v13;
  unint64_t v14;
  int v16;
  int *v17;
  BOOL v19;
  int v20;
  char v21;
  int v22;
  int v24;
  char v25;
  uint64_t v26;
  int v29;
  _BYTE *v30;
  char *v31;
  char *v32;
  _WORD *v33;
  _WORD *v34;
  unint64_t v35;
  __int128 v36;
  char *v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  char *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  _WORD *v48;
  int8x16_t *v49;
  __int16 v50;
  _BYTE *v51;
  uint8x8_t *v52;
  uint16x8_t *v53;
  unint64_t v54;
  uint8x16_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint8x8_t *v58;
  uint16x8_t *v59;
  unint64_t v60;
  uint8x8_t v61;
  unint64_t v62;
  _WORD *v63;
  unint64_t v64;
  __int128 v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  char *v69;
  char *v70;
  char *v71;
  unint64_t v72;
  _WORD *v73;
  int8x16_t *v74;
  __int16 v75;
  _WORD *v76;
  unint64_t v77;
  unint64_t v78;
  __int128 v79;
  char *v80;
  int8x16_t v81;
  __int128 v82;
  __int128 v83;
  char *v84;
  char *v85;
  char *v86;
  unint64_t v87;
  BOOL v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _WORD *v92;
  unsigned __int8 *v93;
  __int16 v94;
  uint64_t v95;
  unint64_t v96;
  uint8x8_t *v97;
  uint16x8_t *v98;
  unint64_t v99;
  uint8x16_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint8x8_t *v103;
  uint16x8_t *v104;
  unint64_t v105;
  uint8x8_t v106;
  uint8x8_t *v107;
  uint16x8_t *v108;
  unint64_t v109;
  uint8x16_t v110;
  uint16x8_t v111;
  uint16x8_t v112;
  uint8x8_t *v113;
  uint16x8_t *v114;
  unint64_t v115;
  uint8x8_t v116;
  int v117;
  int v118;
  _DWORD *v123;
  int8x16x2_t v124;
  int8x16x2_t v125;
  int8x16x2_t v126;
  int8x16x2_t v127;
  int8x16x2_t v128;
  int8x16x2_t v129;
  int8x16x2_t v130;
  int8x16x2_t v131;
  int8x16x2_t v132;

  if (a5)
    v13 = a5 - 1;
  else
    v13 = 0;
  if (v13 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x197B36EDCLL);
  }
  if (a9)
    v14 = a9 - 1;
  else
    v14 = 0;
  if (v14 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x197B36EFCLL);
  }
  if (((a13 | a11) & 0x80000000) != 0)
    goto LABEL_12;
  v16 = a11 + a13;
  if (__OFADD__((_DWORD)a11, (_DWORD)a13))
    goto LABEL_12;
  v17 = 0;
  v19 = __OFADD__((_DWORD)v14, v16);
  v20 = v14 + v16;
  v21 = v19;
  if ((a7 & 0x80000000) != 0 || (v21 & 1) != 0)
    goto LABEL_13;
  v19 = __OFADD__((_DWORD)a7, v20);
  v22 = a7 + v20;
  if (v19)
    goto LABEL_12;
  v17 = 0;
  v19 = __OFADD__((_DWORD)v13, v22);
  v24 = v13 + v22;
  v25 = v19;
  if ((a3 & 0x80000000) != 0 || (v25 & 1) != 0)
    goto LABEL_13;
  v26 = (a3 + v24);
  if (__OFADD__((_DWORD)a3, v24))
  {
LABEL_12:
    v17 = 0;
    goto LABEL_13;
  }
  if ((a3 & 0xFF00000000) == 0
    || (a7 & 0xFF00000000) == 0
    || (a11 & 0xFF00000000) == 0
    || (a13 & 0xFF00000000) == 0)
  {
    if (!(_DWORD)v26)
      goto LABEL_44;
    if (v26 > 0x7FFFFFEF)
      goto LABEL_12;
    v118 = a3 + v24;
    WTF::tryFastCompactMalloc((WTF *)(2 * v26 + 20), &v123);
    v17 = v123;
    if (!v123)
      goto LABEL_13;
    v33 = v123 + 5;
    *v123 = 2;
    v17[1] = v118;
    *((_QWORD *)v17 + 1) = v17 + 5;
    v17[4] = 0;
    if ((a3 & 0xFF00000000) != 0)
    {
      v34 = &v33[a3];
      if (a3 < 0x40)
      {
        v35 = (unint64_t)(v17 + 5);
      }
      else
      {
        v35 = (unint64_t)&v33[a3 & 0xFFFFFFC0];
        v36 = 0uLL;
        v37 = (char *)(v17 + 5);
        do
        {
          v124.val[0] = *a2;
          v38 = a2[1];
          v127.val[0] = a2[2];
          v39 = a2[3];
          a2 += 4;
          v40 = v39;
          v127.val[1] = 0uLL;
          v130.val[0] = v38;
          v124.val[1] = 0uLL;
          v41 = v37;
          vst2q_s8(v41, v124);
          v41 += 32;
          v130.val[1] = 0uLL;
          vst2q_s8(v41, v130);
          v42 = v37 + 64;
          vst2q_s8(v42, v127);
          v43 = v37 + 96;
          vst2q_s8(v43, *(int8x16x2_t *)(&v36 - 1));
          v37 += 128;
        }
        while (v37 != (char *)v35);
      }
      if ((_WORD *)v35 != v34)
      {
        v44 = (unint64_t)v17 + 2 * a3 - v35 + 18;
        if (v44 < 0xE
          || (v35 < (unint64_t)a2->u64 + (v44 >> 1) + 1
            ? (v45 = (unint64_t)a2 >= (v44 & 0xFFFFFFFFFFFFFFFELL) + v35 + 2)
            : (v45 = 1),
              !v45))
        {
          v48 = (_WORD *)v35;
          v49 = a2;
          goto LABEL_59;
        }
        v46 = (v44 >> 1) + 1;
        if (v44 >= 0x3E)
        {
          v47 = v46 & 0xFFFFFFFFFFFFFFE0;
          v52 = (uint8x8_t *)&a2[1];
          v53 = (uint16x8_t *)(v35 + 32);
          v54 = v46 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v55 = *(uint8x16_t *)v52[-2].i8;
            v56 = vmovl_u8(*v52);
            v57 = vmovl_high_u8(*(uint8x16_t *)v52->i8);
            v53[-2] = vmovl_u8(*(uint8x8_t *)v55.i8);
            v53[-1] = vmovl_high_u8(v55);
            *v53 = v56;
            v53[1] = v57;
            v53 += 4;
            v52 += 4;
            v54 -= 32;
          }
          while (v54);
          if (v46 == v47)
            goto LABEL_77;
          if ((v46 & 0x18) == 0)
          {
            v49 = (int8x16_t *)((char *)a2 + v47);
            v48 = (_WORD *)(v35 + 2 * v47);
            do
            {
LABEL_59:
              v50 = v49->u8[0];
              v49 = (int8x16_t *)((char *)v49 + 1);
              *v48++ = v50;
            }
            while (v48 != v34);
            goto LABEL_77;
          }
        }
        else
        {
          v47 = 0;
        }
        v48 = (_WORD *)(v35 + 2 * (v46 & 0xFFFFFFFFFFFFFFF8));
        v49 = (int8x16_t *)((char *)a2 + (v46 & 0xFFFFFFFFFFFFFFF8));
        v58 = (uint8x8_t *)&a2->i8[v47];
        v59 = (uint16x8_t *)(v35 + 2 * v47);
        v60 = v47 - (v46 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v61 = *v58++;
          *v59++ = vmovl_u8(v61);
          v60 += 8;
        }
        while (v60);
        if (v46 != (v46 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_59;
      }
    }
    else if ((_DWORD)a3)
    {
      if ((_DWORD)a3 == 1)
      {
        *v33 = a2->i16[0];
      }
      else
      {
        memcpy(v17 + 5, a2, 2 * a3);
        v33 = v17 + 5;
      }
    }
LABEL_77:
    v62 = (unint64_t)&v33[a3];
    v63 = (_WORD *)(v62 + 2 * v13);
    if ((v13 & 0xFFFFFFC0) != 0)
    {
      v64 = v62 + 2 * (v13 & 0xFFFFFFC0);
      v65 = 0uLL;
      do
      {
        v125.val[0] = *a4;
        v66 = a4[1];
        v128.val[0] = a4[2];
        v67 = a4[3];
        a4 += 4;
        v68 = v67;
        v128.val[1] = 0uLL;
        v131.val[0] = v66;
        v125.val[1] = 0uLL;
        v69 = (char *)v62;
        vst2q_s8(v69, v125);
        v69 += 32;
        v131.val[1] = 0uLL;
        vst2q_s8(v69, v131);
        v70 = (char *)(v62 + 64);
        vst2q_s8(v70, v128);
        v71 = (char *)(v62 + 96);
        vst2q_s8(v71, *(int8x16x2_t *)(&v65 - 1));
        v62 += 128;
      }
      while (v62 != v64);
      v62 = v64;
    }
    if ((_WORD *)v62 != v63)
    {
      v72 = (unint64_t)v17 + 2 * v13 + 2 * (unint64_t)a3 - v62 + 18;
      if (v72 < 0xE
        || v62 < (unint64_t)a4->u64 + (v72 >> 1) + 1
        && (unint64_t)a4 < (v72 & 0xFFFFFFFFFFFFFFFELL) + v62 + 2)
      {
        v73 = (_WORD *)v62;
        v74 = a4;
        goto LABEL_86;
      }
      v95 = (v72 >> 1) + 1;
      if (v72 >= 0x3E)
      {
        v96 = v95 & 0xFFFFFFFFFFFFFFE0;
        v97 = (uint8x8_t *)&a4[1];
        v98 = (uint16x8_t *)(v62 + 32);
        v99 = v95 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v100 = *(uint8x16_t *)v97[-2].i8;
          v101 = vmovl_u8(*v97);
          v102 = vmovl_high_u8(*(uint8x16_t *)v97->i8);
          v98[-2] = vmovl_u8(*(uint8x8_t *)v100.i8);
          v98[-1] = vmovl_high_u8(v100);
          *v98 = v101;
          v98[1] = v102;
          v98 += 4;
          v97 += 4;
          v99 -= 32;
        }
        while (v99);
        if (v95 == v96)
          goto LABEL_87;
        if ((v95 & 0x18) == 0)
        {
          v74 = (int8x16_t *)((char *)a4 + v96);
          v73 = (_WORD *)(v62 + 2 * v96);
          do
          {
LABEL_86:
            v75 = v74->u8[0];
            v74 = (int8x16_t *)((char *)v74 + 1);
            *v73++ = v75;
          }
          while (v73 != v63);
          goto LABEL_87;
        }
      }
      else
      {
        v96 = 0;
      }
      v73 = (_WORD *)(v62 + 2 * (v95 & 0xFFFFFFFFFFFFFFF8));
      v74 = (int8x16_t *)((char *)a4 + (v95 & 0xFFFFFFFFFFFFFFF8));
      v103 = (uint8x8_t *)&a4->i8[v96];
      v104 = (uint16x8_t *)(v62 + 2 * v96);
      v105 = v96 - (v95 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v106 = *v103++;
        *v104++ = vmovl_u8(v106);
        v105 += 8;
      }
      while (v105);
      if (v95 != (v95 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_87:
    if ((a7 & 0xFF00000000) == 0)
    {
      if ((_DWORD)a7)
      {
        if ((_DWORD)a7 == 1)
          *v63 = *a6;
        else
          memcpy(v63, a6, 2 * a7);
      }
      goto LABEL_126;
    }
    v76 = &v63[a7];
    v77 = (unint64_t)a6;
    if (a7 < 0x40)
    {
      v78 = (unint64_t)v63;
    }
    else
    {
      v78 = (unint64_t)&v63[a7 & 0xFFFFFFC0];
      v79 = 0uLL;
      v80 = (char *)v63;
      do
      {
        v126.val[0] = *(int8x16_t *)v77;
        v81 = *(int8x16_t *)(v77 + 16);
        v129.val[0] = *(int8x16_t *)(v77 + 32);
        v82 = *(_OWORD *)(v77 + 48);
        v77 += 64;
        v83 = v82;
        v129.val[1] = 0uLL;
        v132.val[0] = v81;
        v126.val[1] = 0uLL;
        v84 = v80;
        vst2q_s8(v84, v126);
        v84 += 32;
        v132.val[1] = 0uLL;
        vst2q_s8(v84, v132);
        v85 = v80 + 64;
        vst2q_s8(v85, v129);
        v86 = v80 + 96;
        vst2q_s8(v86, *(int8x16x2_t *)(&v79 - 1));
        v80 += 128;
      }
      while (v80 != (char *)v78);
    }
    if ((_WORD *)v78 == v76)
    {
LABEL_126:
      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>((char *)&v63[a7], a8, v14, a10, a11, a12, a13);
      goto LABEL_13;
    }
    v87 = (unint64_t)v17
        + 2 * v13
        + 2 * (unint64_t)a3
        + 2 * a7
        - v78
        + 18;
    if (v87 < 0xE
      || (v78 < v77 + (v87 >> 1) + 1 ? (v88 = v77 >= (v87 & 0xFFFFFFFFFFFFFFFELL) + v78 + 2) : (v88 = 1), !v88))
    {
      v92 = (_WORD *)v78;
      v93 = (unsigned __int8 *)v77;
      goto LABEL_106;
    }
    v89 = (v87 >> 1) + 1;
    if (v87 >= 0x3E)
    {
      v91 = v89 & 0xFFFFFFFFFFFFFFE0;
      v90 = v77;
      v107 = (uint8x8_t *)(v77 + 16);
      v108 = (uint16x8_t *)(v78 + 32);
      v109 = v89 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v110 = *(uint8x16_t *)v107[-2].i8;
        v111 = vmovl_u8(*v107);
        v112 = vmovl_high_u8(*(uint8x16_t *)v107->i8);
        v108[-2] = vmovl_u8(*(uint8x8_t *)v110.i8);
        v108[-1] = vmovl_high_u8(v110);
        *v108 = v111;
        v108[1] = v112;
        v108 += 4;
        v107 += 4;
        v109 -= 32;
      }
      while (v109);
      if (v89 == v91)
        goto LABEL_126;
      if ((v89 & 0x18) == 0)
      {
        v93 = (unsigned __int8 *)(v90 + v91);
        v92 = (_WORD *)(v78 + 2 * v91);
        do
        {
LABEL_106:
          v94 = *v93++;
          *v92++ = v94;
        }
        while (v92 != v76);
        goto LABEL_126;
      }
    }
    else
    {
      v90 = v77;
      v91 = 0;
    }
    v92 = (_WORD *)(v78 + 2 * (v89 & 0xFFFFFFFFFFFFFFF8));
    v93 = (unsigned __int8 *)(v90 + (v89 & 0xFFFFFFFFFFFFFFF8));
    v113 = (uint8x8_t *)(v90 + v91);
    v114 = (uint16x8_t *)(v78 + 2 * v91);
    v115 = v91 - (v89 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v116 = *v113++;
      *v114++ = vmovl_u8(v116);
      v115 += 8;
    }
    while (v115);
    if (v89 == (v89 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_126;
    goto LABEL_106;
  }
  if (!(_DWORD)v26)
  {
LABEL_44:
    v17 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_13;
  }
  if ((v26 & 0x80000000) != 0)
    goto LABEL_12;
  v117 = a3 + v24;
  WTF::tryFastCompactMalloc((WTF *)(v26 + 20), &v123);
  v17 = v123;
  if (v123)
  {
    v30 = v123 + 5;
    *v123 = 2;
    v17[1] = v117;
    *((_QWORD *)v17 + 1) = v17 + 5;
    v17[4] = 4;
    v31 = (char *)a6;
    v32 = (char *)a8;
    if ((_DWORD)a3)
    {
      if ((_DWORD)a3 == 1)
      {
        *v30 = a2->i8[0];
      }
      else
      {
        memcpy(v17 + 5, a2, a3);
        v30 = v17 + 5;
        v31 = (char *)a6;
        v32 = (char *)a8;
      }
    }
    v51 = &v30[a3];
    if ((_DWORD)v13)
    {
      if ((_DWORD)v13 == 1)
      {
        *v51 = a4->i8[0];
      }
      else
      {
        memcpy(&v30[a3], a4, v13);
        v31 = (char *)a6;
        v32 = (char *)a8;
      }
    }
    WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>((int8x16_t *)&v51[v13], v31, a7, v32, v14, a10->i8, a11, v29, a12->i8, a13);
  }
LABEL_13:
  *a1 = v17;
}

void WTF::percentEncodeCharacters<WTF::StringView>(WTF::StringView const&,BOOL (*)(char16_t))::{lambda(WTF::StringView const&)#1}::operator()(WTF::StringImpl **a1, unsigned int (**a2)(_QWORD), uint64_t a3, double a4, float a5)
{
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int8x16_t *v11;
  unint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint8x16_t v15;
  char *v16;
  unsigned int v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF::StringImpl *v27;
  WTF *v28;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  WTF *v32;
  WTF::StringImpl *v33;
  char *v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  BOOL v37;
  WTF *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  WTF *v42;
  int v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int (**v76)(_QWORD);
  WTF *v77;
  WTF::StringImpl *v78;
  int v79;
  char v80;
  WTF::StringImpl *v81[2];
  unint64_t v82;

  v76 = a2;
  v6 = *(char **)a3;
  v7 = *(unsigned int *)(a3 + 8);
  if (!*(_BYTE *)(a3 + 12))
  {
    if ((_DWORD)v7)
    {
      if (v7 > 0x2AAAAAAA)
        goto LABEL_78;
      v17 = 3 * v7;
      v77 = (WTF *)&v79;
      LODWORD(v78) = 1024;
      HIDWORD(v78) = 3 * v7;
      if (v7 < 0x156)
      {
        v18 = (WTF *)&v79;
      }
      else
      {
        v18 = (WTF *)WTF::fastMalloc((WTF *)(3 * v7));
        LODWORD(v78) = 3 * v7;
        v77 = v18;
        v17 = HIDWORD(v78);
      }
      WTF::Unicode::convertReplacingInvalidSequences((uint64_t)v6, v7, (uint64_t)v18, v17, (uint64_t)v81);
      v41 = LOBYTE(v81[0]);
      if (LOBYTE(v81[0]) == 1)
      {
        LOBYTE(v81[0]) = 1;
        v42 = v77;
        if (&v79 == (int *)v77)
          goto LABEL_61;
      }
      else
      {
        if (v82 > HIDWORD(v78))
          goto LABEL_80;
        WTF::String WTF::percentEncodeCharacters<WTF::StringView>(WTF::StringView const&,BOOL (*)(char16_t))::{lambda(WTF::StringView const&)#1}::operator() const(WTF::StringView const&)::{lambda(std::span<char8_t const,18446744073709551615ul>)#1}::operator()(v81, &v76, (char *)v77, v82);
        v42 = v77;
        if (&v79 == (int *)v77)
          goto LABEL_61;
      }
      if (v42)
      {
        v77 = 0;
        LODWORD(v78) = 0;
        WTF::fastFree((unint64_t)v42, v19, v20, v21, v22, v23, v24, v25);
      }
LABEL_61:
      if (v41 != 1)
      {
LABEL_62:
        v39 = v81[0];
        if (!v81[0])
          goto LABEL_45;
        goto LABEL_63;
      }
LABEL_78:
      __break(0xC471u);
      goto LABEL_81;
    }
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v80 = 1;
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v77);
    v26 = v77;
    if (v77)
      *(_DWORD *)v77 += 2;
    v40 = v78;
    v78 = 0;
    v28 = v26;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
      {
        WTF::StringImpl::~StringImpl(v40, (WTF::AtomStringImpl *)v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
        v28 = v77;
        v77 = 0;
        if (!v28)
          goto LABEL_74;
LABEL_72:
        if (*(_DWORD *)v28 == 2)
          goto LABEL_76;
        *(_DWORD *)v28 -= 2;
LABEL_74:
        v81[0] = v26;
        v39 = v26;
        if (!v26)
          goto LABEL_45;
        goto LABEL_63;
      }
      *(_DWORD *)v40 -= 2;
      v28 = v26;
    }
    v77 = 0;
    if (!v28)
      goto LABEL_74;
    goto LABEL_72;
  }
  if (!(_DWORD)v7)
  {
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v80 = 1;
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v77);
    v26 = v77;
    if (v77)
      *(_DWORD *)v77 += 2;
    v27 = v78;
    v78 = 0;
    v28 = v26;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
      {
        WTF::StringImpl::~StringImpl(v27, (WTF::AtomStringImpl *)v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
        v28 = v77;
        v77 = 0;
        if (!v28)
          goto LABEL_69;
LABEL_67:
        if (*(_DWORD *)v28 != 2)
        {
          *(_DWORD *)v28 -= 2;
          goto LABEL_69;
        }
LABEL_76:
        WTF::StringImpl::~StringImpl(v28, (WTF::AtomStringImpl *)v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
        v81[0] = v26;
        v39 = v26;
        if (!v26)
          goto LABEL_45;
        goto LABEL_63;
      }
      *(_DWORD *)v27 -= 2;
      v28 = v26;
    }
    v77 = 0;
    if (!v28)
    {
LABEL_69:
      v81[0] = v26;
      v39 = v26;
      if (!v26)
        goto LABEL_45;
      goto LABEL_63;
    }
    goto LABEL_67;
  }
  if (v7 >> 30)
    goto LABEL_78;
  v8 = 0;
  v9 = 16 - (*(_QWORD *)a3 & 0xFLL);
  if (v7 >= v9)
    v10 = 16 - (*(_QWORD *)a3 & 0xFLL);
  else
    v10 = *(unsigned int *)(a3 + 8);
  do
  {
    if (v6[v8] < 0)
    {
      v16 = &v6[v8];
LABEL_27:
      v29 = v16 - v6;
      v30 = v7 - (v16 - v6);
      v31 = v16 - v6 + 2 * v30;
      v77 = (WTF *)&v79;
      LODWORD(v78) = 1024;
      HIDWORD(v78) = (_DWORD)v16 - (_DWORD)v6 + 2 * v30;
      v32 = (WTF *)&v79;
      if (v31 >= 0x401)
      {
        if (HIDWORD(v31))
        {
          __break(0xC471u);
          goto LABEL_80;
        }
        v32 = (WTF *)WTF::fastMalloc((WTF *)v31);
        LODWORD(v78) = v31;
        v77 = v32;
      }
      memcpy(v32, v6, v29);
      if (v7 < v29)
        goto LABEL_80;
      v33 = (WTF::StringImpl *)(HIDWORD(v78) - v29);
      if (HIDWORD(v78) < v29)
        goto LABEL_80;
      v34 = &v6[v29];
      v81[0] = 0;
      while (1)
      {
        v35 = v81[0];
        if (!v30)
          break;
        if (v81[0] == v33)
          goto LABEL_39;
        v36 = *v34++;
        --v30;
        if (WTF::Unicode::append<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)v77 + v29, (unint64_t)v33, (unint64_t *)v81, v36))
        {
          v35 = v81[0];
          break;
        }
      }
      v37 = v33 >= v35;
      v33 = v35;
      if (!v37)
        goto LABEL_80;
LABEL_39:
      if ((unint64_t)v33 + v29 <= HIDWORD(v78))
      {
        WTF::String WTF::percentEncodeCharacters<WTF::StringView>(WTF::StringView const&,BOOL (*)(char16_t))::{lambda(WTF::StringView const&)#1}::operator() const(WTF::StringView const&)::{lambda(std::span<char8_t const,18446744073709551615ul>)#1}::operator()(v81, &v76, (char *)v77, (uint64_t)v33 + v29);
        v38 = v77;
        if (&v79 != (int *)v77 && v77)
        {
          v77 = 0;
          LODWORD(v78) = 0;
          WTF::fastFree((unint64_t)v38, v19, v20, v21, v22, v23, v24, v25);
          v39 = v81[0];
          if (!v81[0])
            goto LABEL_45;
          goto LABEL_63;
        }
        goto LABEL_62;
      }
LABEL_80:
      __break(1u);
LABEL_81:
      JUMPOUT(0x197B3771CLL);
    }
    ++v8;
  }
  while (v10 != v8);
  if (v9 >= v7)
    goto LABEL_44;
  v11 = (int8x16_t *)&v6[v10];
  v12 = v7 - v10;
  v13 = vcltzq_s8(*v11);
  LOBYTE(a5) = vmaxvq_u8((uint8x16_t)v13);
  if (a5 != 0.0)
  {
LABEL_13:
    v15 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_19911D0A0, v13);
    v15.i8[0] = vminvq_u8(v15);
    if (v12 <= v15.u32[0])
      goto LABEL_44;
    v16 = &v11->i8[v15.u32[0]];
    goto LABEL_27;
  }
  while (v12 >= 0x11)
  {
    v12 -= 16;
    v14 = v11[1];
    ++v11;
    v13 = vcltzq_s8(v14);
    LOBYTE(a5) = vmaxvq_u8((uint8x16_t)v13);
    if (a5 != 0.0)
      goto LABEL_13;
  }
LABEL_44:
  WTF::String WTF::percentEncodeCharacters<WTF::StringView>(WTF::StringView const&,BOOL (*)(char16_t))::{lambda(WTF::StringView const&)#1}::operator() const(WTF::StringView const&)::{lambda(std::span<char8_t const,18446744073709551615ul>)#1}::operator()(v81, &v76, *(char **)a3, v7);
  v39 = v81[0];
  if (!v81[0])
  {
LABEL_45:
    *a1 = 0;
    return;
  }
LABEL_63:
  v43 = *(_DWORD *)v39;
  *(_DWORD *)v39 += 2;
  *a1 = v39;
  if (v43)
  {
    *(_DWORD *)v39 = v43;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v39, (WTF::AtomStringImpl *)v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
  }
}

void WTF::String WTF::percentEncodeCharacters<WTF::StringView>(WTF::StringView const&,BOOL (*)(char16_t))::{lambda(WTF::StringView const&)#1}::operator() const(WTF::StringView const&)::{lambda(std::span<char8_t const,18446744073709551615ul>)#1}::operator()(WTF::StringImpl **a1, unsigned int (***a2)(_QWORD), char *a3, uint64_t a4)
{
  uint64_t v5;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  __int16 v18;
  __int16 v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  _WORD *v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  _BYTE *v27;
  WTF::StringImpl *v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  unsigned int v64;
  char v65;
  int8x16_t v66;

  v62 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 1;
  if (!a4)
    goto LABEL_43;
  v5 = a4;
  do
  {
    v15 = *a3;
    if ((**a2)((unsigned __int16)*a3))
    {
      if (v15 >= 0xA0)
        v16 = 55;
      else
        v16 = 48;
      v17 = v16 + (v15 >> 4);
      if ((v15 & 0xF) >= 0xA)
        v18 = 55;
      else
        v18 = 48;
      v19 = v18 + (v15 & 0xF);
      if (v64 >= 0xFFFFFFFD)
        v20 = 0xFFFFFFFFLL;
      else
        v20 = v64 + 3;
      v21 = v63;
      if ((v63 || (v21 = v62) != 0) && (*((_BYTE *)v21 + 16) & 4) == 0)
      {
        v22 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v62, (WTF::AtomStringImpl *)v20, v9, v10, v11, v12, v13, v14);
        if (v22)
        {
          *v22 = 37;
          v22[1] = v17;
          v22[2] = v19;
        }
      }
      else
      {
        v27 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v62, (WTF::AtomStringImpl *)v20, v9, v10, v11, v12, v13, v14);
        if (v27)
        {
          *v27 = 37;
          v27[1] = v17;
          v27[2] = v19;
        }
      }
    }
    else
    {
      v66.i8[0] = v15;
      if (v63 && ((v23 = v64, v64 < *((_DWORD *)v63 + 1)) ? (v24 = v62 == 0) : (v24 = 0), v24))
      {
        v25 = *((_DWORD *)v63 + 4);
        v26 = *((_QWORD *)v63 + 1);
        ++v64;
        if ((v25 & 4) != 0)
          *(_BYTE *)(v26 + v23) = v15;
        else
          *(_WORD *)(v26 + 2 * v23) = v15;
      }
      else
      {
        WTF::StringBuilder::append((uint64_t)&v62, &v66, 1uLL, v10, v11, v12, v13, v14);
      }
    }
    ++a3;
    --v5;
  }
  while (v5);
  v28 = v62;
  if (v62)
    goto LABEL_44;
  if ((v64 & 0x80000000) != 0 || !v63 || *((_DWORD *)v63 + 1) <= v64 + (v64 >> 2))
    goto LABEL_43;
  if ((*((_BYTE *)v63 + 16) & 4) != 0)
    WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v62, (WTF::AtomStringImpl *)v64, v9, v10, v11, v12, v13, v14);
  else
    WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v62, (WTF::AtomStringImpl *)v64, v9, v10, v11, v12, v13, v14);
  v36 = v62;
  v62 = v63;
  v63 = 0;
  if (!v36)
  {
LABEL_43:
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v62);
    v28 = v62;
    if (!v62)
      goto LABEL_45;
    goto LABEL_44;
  }
  if (*(_DWORD *)v36 != 2)
  {
    *(_DWORD *)v36 -= 2;
    goto LABEL_43;
  }
  WTF::StringImpl::~StringImpl(v36, v29, v30, v31, v32, v33, v34, v35);
  WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v62);
  v28 = v62;
  if (v62)
LABEL_44:
    *(_DWORD *)v28 += 2;
LABEL_45:
  *a1 = v28;
  v37 = v63;
  v63 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v8, v9, v10, v11, v12, v13, v14);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
      v28 = v62;
      v62 = 0;
      if (!v28)
        return;
      goto LABEL_51;
    }
    *(_DWORD *)v37 -= 2;
  }
  v62 = 0;
  if (!v28)
    return;
LABEL_51:
  if (*(_DWORD *)v28 == 2)
  {
    WTF::StringImpl::~StringImpl(v28, v8, v9, v10, v11, v12, v13, v14);
    WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
  }
  else
  {
    *(_DWORD *)v28 -= 2;
  }
}

unint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>>@<X0>(unint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, uint64_t a4@<X3>, int **a5@<X8>)
{
  int v7;
  int *v9;
  _WORD *v10;
  unint64_t v11;
  __int128 v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unsigned __int128 v25;
  char *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  _WORD *v30;
  int8x16_t *v31;
  __int16 v32;
  size_t v33;
  _BYTE *v34;
  int8x16_t *v35;
  char v36;
  uint8x8_t *v37;
  uint16x8_t *v38;
  unint64_t v39;
  uint8x16_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint8x8_t *v43;
  uint16x8_t *v44;
  unint64_t v45;
  uint8x8_t v46;
  int8x16_t *v47;
  int8x16_t *v48;
  unint64_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int16x8_t *v54;
  int8x8_t *v55;
  unint64_t v56;
  int16x8_t v57;
  int *v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;

  v7 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v58);
        v9 = v58;
        if (!v58)
          goto LABEL_13;
        result = (unint64_t)(v58 + 5);
        *v58 = 2;
        v9[1] = v7;
        *((_QWORD *)v9 + 1) = v9 + 5;
        v9[4] = 4;
        if ((a4 & 0xFF00000000) != 0)
        {
          if ((_DWORD)a4)
          {
            if ((_DWORD)a4 == 1)
            {
              *(_BYTE *)result = a3->i8[0];
              goto LABEL_13;
            }
            v33 = a4;
LABEL_53:
            result = (unint64_t)memcpy((void *)result, a3, v33);
            goto LABEL_13;
          }
          goto LABEL_13;
        }
        v23 = (_BYTE *)(result + a4);
        if (a4 >= 0x10)
        {
          v24 = result + (a4 & 0xFFFFFFF0);
          do
          {
            v25 = (unsigned __int128)vld2q_s8(a3->i8);
            a3 += 2;
            *(_OWORD *)result = v25;
            result += 16;
          }
          while (result != v24);
          result = v24;
        }
        if ((_BYTE *)result == v23)
          goto LABEL_13;
        v26 = (char *)v9 + a4;
        v27 = (unint64_t)&v26[-result + 20];
        if (v27 < 8
          || (result < (unint64_t)&a3[2].u64[1] + 2 * (_QWORD)v26 + -2 * result
            ? (v28 = a3 >= (int8x16_t *)(v26 + 20))
            : (v28 = 1),
              !v28))
        {
          v34 = (_BYTE *)result;
          v35 = a3;
          goto LABEL_50;
        }
        if (v27 >= 0x20)
        {
          v29 = v27 & 0xFFFFFFFFFFFFFFE0;
          v47 = a3 + 2;
          v48 = (int8x16_t *)(result + 16);
          v49 = v27 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v51 = v47[-2];
            v50 = v47[-1];
            v53 = *v47;
            v52 = v47[1];
            v47 += 4;
            v48[-1] = vuzp1q_s8(v51, v50);
            *v48 = vuzp1q_s8(v53, v52);
            v48 += 2;
            v49 -= 32;
          }
          while (v49);
          if (v27 == v29)
            goto LABEL_13;
          if ((v27 & 0x18) == 0)
          {
            v35 = (int8x16_t *)((char *)a3 + 2 * v29);
            v34 = (_BYTE *)(result + v29);
            goto LABEL_50;
          }
        }
        else
        {
          v29 = 0;
        }
        v34 = (_BYTE *)(result + (v27 & 0xFFFFFFFFFFFFFFF8));
        v35 = (int8x16_t *)((char *)a3 + 2 * (v27 & 0xFFFFFFFFFFFFFFF8));
        v54 = (int16x8_t *)((char *)a3 + 2 * v29);
        v55 = (int8x8_t *)(result + v29);
        v56 = v29 - (v27 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v57 = *v54++;
          *v55++ = vmovn_s16(v57);
          v56 += 8;
        }
        while (v56);
        if (v27 == (v27 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_13;
        do
        {
LABEL_50:
          v36 = v35->i8[0];
          v35 = (int8x16_t *)((char *)v35 + 2);
          *v34++ = v36;
        }
        while (v34 != v23);
        goto LABEL_13;
      }
LABEL_11:
      v9 = 0;
      goto LABEL_13;
    }
LABEL_12:
    v9 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_13;
  }
  if (!(_DWORD)result)
    goto LABEL_12;
  if (result > 0x7FFFFFEF)
    goto LABEL_11;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v58);
  v9 = v58;
  if (!v58)
    goto LABEL_13;
  result = (unint64_t)(v58 + 5);
  *v58 = 2;
  v9[1] = v7;
  *((_QWORD *)v9 + 1) = v9 + 5;
  v9[4] = 0;
  if ((a4 & 0xFF00000000) == 0)
  {
    if (!(_DWORD)a4)
      goto LABEL_13;
    if ((_DWORD)a4 == 1)
    {
      *(_WORD *)result = a3->i16[0];
      goto LABEL_13;
    }
    v33 = 2 * a4;
    goto LABEL_53;
  }
  v10 = (_WORD *)(result + 2 * a4);
  if (a4 >= 0x40)
  {
    v11 = result + 2 * (a4 & 0xFFFFFFC0);
    v12 = 0uLL;
    do
    {
      v59.val[0] = *a3;
      v13 = a3[1];
      v60.val[0] = a3[2];
      v14 = a3[3];
      a3 += 4;
      v15 = v14;
      v60.val[1] = 0uLL;
      v61.val[0] = v13;
      v59.val[1] = 0uLL;
      v16 = (char *)result;
      vst2q_s8(v16, v59);
      v16 += 32;
      v61.val[1] = 0uLL;
      vst2q_s8(v16, v61);
      v17 = (char *)(result + 64);
      vst2q_s8(v17, v60);
      v18 = (char *)(result + 96);
      vst2q_s8(v18, *(int8x16x2_t *)(&v12 - 1));
      result += 128;
    }
    while (result != v11);
    result = v11;
  }
  if ((_WORD *)result != v10)
  {
    v19 = (unint64_t)v9 + 2 * a4 - result + 18;
    if (v19 < 0xE
      || (result < (unint64_t)a3->u64 + (v19 >> 1) + 1
        ? (v20 = (unint64_t)a3 >= (v19 & 0xFFFFFFFFFFFFFFFELL) + result + 2)
        : (v20 = 1),
          !v20))
    {
      v30 = (_WORD *)result;
      v31 = a3;
      goto LABEL_46;
    }
    v21 = (v19 >> 1) + 1;
    if (v19 >= 0x3E)
    {
      v22 = v21 & 0xFFFFFFFFFFFFFFE0;
      v37 = (uint8x8_t *)&a3[1];
      v38 = (uint16x8_t *)(result + 32);
      v39 = v21 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v40 = *(uint8x16_t *)v37[-2].i8;
        v41 = vmovl_u8(*v37);
        v42 = vmovl_high_u8(*(uint8x16_t *)v37->i8);
        v38[-2] = vmovl_u8(*(uint8x8_t *)v40.i8);
        v38[-1] = vmovl_high_u8(v40);
        *v38 = v41;
        v38[1] = v42;
        v38 += 4;
        v37 += 4;
        v39 -= 32;
      }
      while (v39);
      if (v21 == v22)
        goto LABEL_13;
      if ((v21 & 0x18) == 0)
      {
        v31 = (int8x16_t *)((char *)a3 + v22);
        v30 = (_WORD *)(result + 2 * v22);
        goto LABEL_46;
      }
    }
    else
    {
      v22 = 0;
    }
    v30 = (_WORD *)(result + 2 * (v21 & 0xFFFFFFFFFFFFFFF8));
    v31 = (int8x16_t *)((char *)a3 + (v21 & 0xFFFFFFFFFFFFFFF8));
    v43 = (uint8x8_t *)&a3->i8[v22];
    v44 = (uint16x8_t *)(result + 2 * v22);
    v45 = v22 - (v21 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v46 = *v43++;
      *v44++ = vmovl_u8(v46);
      v45 += 8;
    }
    while (v45);
    if (v21 == (v21 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_13;
    do
    {
LABEL_46:
      v32 = v31->u8[0];
      v31 = (int8x16_t *)((char *)v31 + 1);
      *v30++ = v32;
    }
    while (v30 != v10);
  }
LABEL_13:
  *a5 = v9;
  return result;
}

void WTF::percentEncodeCharacters<WTF::String>(WTF::String const&,BOOL (*)(char16_t))::{lambda(WTF::String const&)#1}::operator()(WTF::StringImpl **a1, unsigned int (**a2)(_QWORD), uint64_t a3, double a4, float a5)
{
  char *v6;
  unint64_t v7;
  unsigned int v8;
  WTF *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int8x16_t *v13;
  unint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  uint8x16_t v17;
  __int8 *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF::StringImpl *v27;
  WTF *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  size_t v46;
  unint64_t v47;
  unint64_t v48;
  WTF *v49;
  WTF::StringImpl *v50;
  char *v51;
  WTF::StringImpl *v52;
  unsigned int v53;
  BOOL v54;
  WTF *v55;
  int v56;
  WTF *v57;
  int v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (**v67)(_QWORD);
  WTF *v68;
  WTF::StringImpl *v69;
  int v70;
  char v71;
  WTF::StringImpl *v72[2];
  unint64_t v73;

  v67 = a2;
  if (!a3)
    goto LABEL_20;
  v6 = *(char **)(a3 + 8);
  v7 = *(unsigned int *)(a3 + 4);
  if ((*(_BYTE *)(a3 + 16) & 4) == 0)
  {
    if ((_DWORD)v7)
    {
      if (v7 <= 0x2AAAAAAA)
      {
        v8 = 3 * v7;
        v68 = (WTF *)&v70;
        LODWORD(v69) = 1024;
        HIDWORD(v69) = 3 * v7;
        if (v7 < 0x156)
        {
          v9 = (WTF *)&v70;
        }
        else
        {
          v9 = (WTF *)WTF::fastMalloc((WTF *)(3 * v7));
          LODWORD(v69) = 3 * v7;
          v68 = v9;
          v8 = HIDWORD(v69);
        }
        WTF::Unicode::convertReplacingInvalidSequences((uint64_t)v6, v7, (uint64_t)v9, v8, (uint64_t)v72);
        v56 = LOBYTE(v72[0]);
        if (LOBYTE(v72[0]) == 1)
        {
          LOBYTE(v72[0]) = 1;
          v57 = v68;
          if (&v70 == (int *)v68)
            goto LABEL_59;
          goto LABEL_57;
        }
        if (v73 <= HIDWORD(v69))
        {
          WTF::String WTF::percentEncodeCharacters<WTF::StringView>(WTF::StringView const&,BOOL (*)(char16_t))::{lambda(WTF::StringView const&)#1}::operator() const(WTF::StringView const&)::{lambda(std::span<char8_t const,18446744073709551615ul>)#1}::operator()(v72, &v67, (char *)v68, v73);
          v57 = v68;
          if (&v70 == (int *)v68)
            goto LABEL_59;
LABEL_57:
          if (v57)
          {
            v68 = 0;
            LODWORD(v69) = 0;
            WTF::fastFree((unint64_t)v57, v19, v20, v21, v22, v23, v24, v25);
          }
LABEL_59:
          if (v56 != 1)
          {
LABEL_60:
            v45 = v72[0];
            if (!v72[0])
              goto LABEL_65;
            goto LABEL_61;
          }
          goto LABEL_66;
        }
LABEL_68:
        __break(1u);
LABEL_69:
        JUMPOUT(0x197B3810CLL);
      }
LABEL_66:
      __break(0xC471u);
      goto LABEL_69;
    }
LABEL_20:
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v71 = 1;
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v68);
    v26 = v68;
    if (v68)
      *(_DWORD *)v68 += 2;
    v27 = v69;
    v69 = 0;
    v28 = v26;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
      {
        WTF::StringImpl::~StringImpl(v27, (WTF::AtomStringImpl *)v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
        v28 = v68;
        v68 = 0;
        if (!v28)
          goto LABEL_31;
LABEL_28:
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::~StringImpl(v28, (WTF::AtomStringImpl *)v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
        }
        else
        {
          *(_DWORD *)v28 -= 2;
        }
LABEL_31:
        v72[0] = v26;
        v45 = v26;
        if (!v26)
          goto LABEL_65;
        goto LABEL_61;
      }
      *(_DWORD *)v27 -= 2;
      v28 = v26;
    }
    v68 = 0;
    if (!v28)
      goto LABEL_31;
    goto LABEL_28;
  }
  if (!(_DWORD)v7)
    goto LABEL_20;
  if (v7 >> 30)
    goto LABEL_66;
  v10 = 0;
  v11 = 16 - (*(_QWORD *)(a3 + 8) & 0xFLL);
  if (v7 >= v11)
    v12 = 16 - (*(_QWORD *)(a3 + 8) & 0xFLL);
  else
    v12 = *(unsigned int *)(a3 + 4);
  do
  {
    if (v6[v10] < 0)
    {
      v18 = &v6[v10];
      goto LABEL_34;
    }
    ++v10;
  }
  while (v12 != v10);
  if (v11 >= v7)
    goto LABEL_64;
  v13 = (int8x16_t *)&v6[v12];
  v14 = v7 - v12;
  v15 = vcltzq_s8(*v13);
  LOBYTE(a5) = vmaxvq_u8((uint8x16_t)v15);
  if (a5 != 0.0)
  {
LABEL_18:
    v17 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_19911D0A0, v15);
    v17.i8[0] = vminvq_u8(v17);
    if (v14 <= v17.u32[0])
      goto LABEL_64;
    v18 = &v13->i8[v17.u32[0]];
LABEL_34:
    v46 = v18 - v6;
    v47 = v7 - (v18 - v6);
    v48 = v18 - v6 + 2 * v47;
    v68 = (WTF *)&v70;
    LODWORD(v69) = 1024;
    HIDWORD(v69) = (_DWORD)v18 - (_DWORD)v6 + 2 * v47;
    v49 = (WTF *)&v70;
    if (v48 >= 0x401)
    {
      if (HIDWORD(v48))
      {
        __break(0xC471u);
        goto LABEL_68;
      }
      v49 = (WTF *)WTF::fastMalloc((WTF *)v48);
      LODWORD(v69) = v48;
      v68 = v49;
    }
    memcpy(v49, v6, v46);
    if (v7 >= v46)
    {
      v50 = (WTF::StringImpl *)(HIDWORD(v69) - v46);
      if (HIDWORD(v69) >= v46)
      {
        v51 = &v6[v46];
        v72[0] = 0;
        while (1)
        {
          v52 = v72[0];
          if (!v47)
            break;
          if (v72[0] == v50)
            goto LABEL_46;
          v53 = *v51++;
          --v47;
          if (WTF::Unicode::append<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)v68 + v46, (unint64_t)v50, (unint64_t *)v72, v53))
          {
            v52 = v72[0];
            break;
          }
        }
        v54 = v50 >= v52;
        v50 = v52;
        if (v54)
        {
LABEL_46:
          if ((unint64_t)v50 + v46 <= HIDWORD(v69))
          {
            WTF::String WTF::percentEncodeCharacters<WTF::StringView>(WTF::StringView const&,BOOL (*)(char16_t))::{lambda(WTF::StringView const&)#1}::operator() const(WTF::StringView const&)::{lambda(std::span<char8_t const,18446744073709551615ul>)#1}::operator()(v72, &v67, (char *)v68, (uint64_t)v50 + v46);
            v55 = v68;
            if (&v70 != (int *)v68 && v68)
            {
              v68 = 0;
              LODWORD(v69) = 0;
              WTF::fastFree((unint64_t)v55, v19, v20, v21, v22, v23, v24, v25);
              v45 = v72[0];
              if (!v72[0])
                goto LABEL_65;
              goto LABEL_61;
            }
            goto LABEL_60;
          }
        }
      }
    }
    goto LABEL_68;
  }
  while (v14 >= 0x11)
  {
    v14 -= 16;
    v16 = v13[1];
    ++v13;
    v15 = vcltzq_s8(v16);
    LOBYTE(a5) = vmaxvq_u8((uint8x16_t)v15);
    if (a5 != 0.0)
      goto LABEL_18;
  }
LABEL_64:
  WTF::String WTF::percentEncodeCharacters<WTF::StringView>(WTF::StringView const&,BOOL (*)(char16_t))::{lambda(WTF::StringView const&)#1}::operator() const(WTF::StringView const&)::{lambda(std::span<char8_t const,18446744073709551615ul>)#1}::operator()(v72, &v67, *(char **)(a3 + 8), v7);
  v45 = v72[0];
  if (!v72[0])
  {
LABEL_65:
    *a1 = 0;
    return;
  }
LABEL_61:
  v58 = *(_DWORD *)v45;
  *(_DWORD *)v45 += 2;
  *a1 = v45;
  if (v58)
  {
    *(_DWORD *)v45 = v58;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v45, (WTF::AtomStringImpl *)v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::aboutBlankURL(void)::$_0 &&>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;

  WTF::aboutBlankString += 2;
  v23 = (WTF::StringImpl *)&WTF::aboutBlankString;
  WTF::URL::URL((uint64_t)&unk_1ECF58320, (WTF::AtomStringImpl *)&v23, 0, a4, a5, a6, a7, a8);
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v8, v9, v10, v11, v12, v13, v14);
      WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::aboutSrcDocURL(void)::$_0 &&>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;

  WTF::aboutSrcDocString += 2;
  v23 = (WTF::StringImpl *)&WTF::aboutSrcDocString;
  WTF::URL::URL((uint64_t)&unk_1ECF58348, (WTF::AtomStringImpl *)&v23, 0, a4, a5, a6, a7, a8);
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v8, v9, v10, v11, v12, v13, v14);
      WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
}

unint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>>@<X0>(unint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, unsigned int a6@<W5>, int8x16_t *a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>)
{
  int v15;
  int *v17;
  _BYTE *v18;
  char *v19;
  __int8 *v20;
  unint64_t v21;
  unsigned __int128 *v22;
  unsigned __int128 v23;
  char *v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  __int8 *v28;
  int8x16_t *v29;
  __int8 v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  __int8 *v34;
  unint64_t v35;
  unsigned __int128 v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  __int8 *v42;
  int8x16_t *v43;
  __int8 v44;
  int8x16_t *v45;
  int8x16_t *v46;
  unint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int16x8_t *v52;
  int8x8_t *v53;
  unint64_t v54;
  int16x8_t v55;
  int8x16_t *v56;
  int8x16_t *v57;
  unint64_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int16x8_t *v63;
  int8x8_t *v64;
  unint64_t v65;
  int16x8_t v66;
  _DWORD *v67;

  v15 = result;
  if (!a2)
  {
    if ((_DWORD)result)
    {
      if (result <= 0x7FFFFFEF)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v67);
        v17 = v67;
        if (v67)
        {
          v19 = (char *)(v67 + 5);
          *v67 = 2;
          v17[1] = v15;
          *((_QWORD *)v17 + 1) = v17 + 5;
          v17[4] = 0;
          result = (unint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(v19, a3, a4, (unint64_t)a5, a6, a7, a8);
        }
        goto LABEL_56;
      }
LABEL_11:
      v17 = 0;
      goto LABEL_56;
    }
LABEL_12:
    v17 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_56;
  }
  if (!(_DWORD)result)
    goto LABEL_12;
  if ((result & 0x80000000) != 0)
    goto LABEL_11;
  result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v67);
  v17 = v67;
  if (!v67)
    goto LABEL_56;
  v18 = v67 + 5;
  *v67 = 2;
  v17[1] = v15;
  *((_QWORD *)v17 + 1) = v17 + 5;
  v17[4] = 4;
  if ((a4 & 0xFF00000000) == 0)
  {
    v20 = &v18[a4];
    if (a4 < 0x10)
    {
      v21 = (unint64_t)(v17 + 5);
    }
    else
    {
      v21 = (unint64_t)&v18[a4 & 0xFFFFFFF0];
      v22 = (unsigned __int128 *)(v17 + 5);
      do
      {
        v23 = (unsigned __int128)vld2q_s8(a3->i8);
        a3 += 2;
        *v22++ = v23;
      }
      while (v22 != (unsigned __int128 *)v21);
    }
    if ((__int8 *)v21 == v20)
      goto LABEL_32;
    v24 = (char *)v17 + a4;
    v25 = (unint64_t)&v24[-v21 + 20];
    if (v25 < 8
      || (v21 < (unint64_t)&a3[2].u64[1] + 2 * (_QWORD)v24 + -2 * v21
        ? (v26 = a3 >= (int8x16_t *)(v24 + 20))
        : (v26 = 1),
          !v26))
    {
      v28 = (__int8 *)v21;
      v29 = a3;
      goto LABEL_31;
    }
    if (v25 >= 0x20)
    {
      v27 = v25 & 0xFFFFFFFFFFFFFFE0;
      v45 = a3 + 2;
      v46 = (int8x16_t *)(v21 + 16);
      v47 = v25 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v49 = v45[-2];
        v48 = v45[-1];
        v51 = *v45;
        v50 = v45[1];
        v45 += 4;
        v46[-1] = vuzp1q_s8(v49, v48);
        *v46 = vuzp1q_s8(v51, v50);
        v46 += 2;
        v47 -= 32;
      }
      while (v47);
      if (v25 == v27)
        goto LABEL_32;
      if ((v25 & 0x18) == 0)
      {
        v29 = (int8x16_t *)((char *)a3 + 2 * v27);
        v28 = (__int8 *)(v21 + v27);
        goto LABEL_31;
      }
    }
    else
    {
      v27 = 0;
    }
    v28 = (__int8 *)(v21 + (v25 & 0xFFFFFFFFFFFFFFF8));
    v29 = (int8x16_t *)((char *)a3 + 2 * (v25 & 0xFFFFFFFFFFFFFFF8));
    v52 = (int16x8_t *)((char *)a3 + 2 * v27);
    v53 = (int8x8_t *)(v21 + v27);
    v54 = v27 - (v25 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v55 = *v52++;
      *v53++ = vmovn_s16(v55);
      v54 += 8;
    }
    while (v54);
    if (v25 == (v25 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_32;
    do
    {
LABEL_31:
      v30 = v29->i8[0];
      v29 = (int8x16_t *)((char *)v29 + 2);
      *v28++ = v30;
    }
    while (v28 != v20);
    goto LABEL_32;
  }
  if ((_DWORD)a4)
  {
    if ((_DWORD)a4 == 1)
      *v18 = a3->i8[0];
    else
      memcpy(v17 + 5, a3, a4);
  }
LABEL_32:
  v31 = a4;
  v32 = &v18[a4];
  if (!a6)
    goto LABEL_35;
  if (a6 == 1)
  {
    *v32 = *a5;
LABEL_35:
    v33 = a6;
    result = (unint64_t)&v32[a6];
    if ((a8 & 0xFF00000000) != 0)
      goto LABEL_36;
    goto LABEL_40;
  }
  memcpy(v32, a5, a6);
  v33 = a6;
  result = (unint64_t)&v32[a6];
  if ((a8 & 0xFF00000000) != 0)
  {
LABEL_36:
    if ((_DWORD)a8)
    {
      if ((_DWORD)a8 == 1)
        *(_BYTE *)result = a7->i8[0];
      else
        result = (unint64_t)memcpy((void *)result, a7, a8);
    }
    goto LABEL_56;
  }
LABEL_40:
  v34 = (__int8 *)(result + a8);
  if (a8 >= 0x10)
  {
    v35 = result + (a8 & 0xFFFFFFF0);
    do
    {
      v36 = (unsigned __int128)vld2q_s8(a7->i8);
      a7 += 2;
      *(_OWORD *)result = v36;
      result += 16;
    }
    while (result != v35);
    result = v35;
  }
  if ((__int8 *)result != v34)
  {
    v37 = (char *)v17 + v31 + v33 + a8;
    v38 = (unint64_t)&v37[-result + 20];
    if (v38 < 8
      || ((v39 = (unint64_t)v17 + a8 + v33 + v31 + 20,
           result < (unint64_t)&a7[2].u64[1] + 2 * (_QWORD)v37 + -2 * result)
        ? (v40 = (unint64_t)a7 >= v39)
        : (v40 = 1),
          !v40))
    {
      v42 = (__int8 *)result;
      v43 = a7;
      goto LABEL_55;
    }
    if (v38 >= 0x20)
    {
      v41 = v38 & 0xFFFFFFFFFFFFFFE0;
      v56 = a7 + 2;
      v57 = (int8x16_t *)(result + 16);
      v58 = v38 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v60 = v56[-2];
        v59 = v56[-1];
        v62 = *v56;
        v61 = v56[1];
        v56 += 4;
        v57[-1] = vuzp1q_s8(v60, v59);
        *v57 = vuzp1q_s8(v62, v61);
        v57 += 2;
        v58 -= 32;
      }
      while (v58);
      if (v38 == v41)
        goto LABEL_56;
      if ((v38 & 0x18) == 0)
      {
        v43 = (int8x16_t *)((char *)a7 + 2 * v41);
        v42 = (__int8 *)(result + v41);
        goto LABEL_55;
      }
    }
    else
    {
      v41 = 0;
    }
    v42 = (__int8 *)(result + (v38 & 0xFFFFFFFFFFFFFFF8));
    v43 = (int8x16_t *)((char *)a7 + 2 * (v38 & 0xFFFFFFFFFFFFFFF8));
    v63 = (int16x8_t *)((char *)a7 + 2 * v41);
    v64 = (int8x8_t *)(result + v41);
    v65 = v41 - (v38 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v66 = *v63++;
      *v64++ = vmovn_s16(v66);
      v65 += 8;
    }
    while (v65);
    if (v38 == (v38 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_56;
    do
    {
LABEL_55:
      v44 = v43->i8[0];
      v43 = (int8x16_t *)((char *)v43 + 2);
      *v42++ = v44;
    }
    while (v42 != v34);
  }
LABEL_56:
  *a9 = v17;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(char *__dst, int8x16_t *a2, uint64_t a3, unint64_t a4, unsigned int a5, int8x16_t *__src, uint64_t a7)
{
  unsigned int v11;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  int8x16_t *v28;
  __int16 v29;
  uint8x8_t *v30;
  uint16x8_t *v31;
  unint64_t v32;
  uint8x16_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint8x8_t *v36;
  uint16x8_t *v37;
  unint64_t v38;
  uint8x8_t v39;
  char *v40;
  char *result;
  char *v42;
  __int128 v43;
  int8x16_t v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  char *v48;
  char *v49;
  unint64_t v50;
  char *v51;
  unsigned __int8 *v52;
  __int16 v53;
  char *v54;
  char *v55;
  __int128 v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  char *v60;
  char *v61;
  char *v62;
  unint64_t v63;
  BOOL v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  unsigned __int8 *v68;
  __int16 v69;
  uint64_t v70;
  unint64_t v71;
  uint8x8_t *v72;
  uint16x8_t *v73;
  unint64_t v74;
  uint8x16_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint8x8_t *v78;
  uint16x8_t *v79;
  unint64_t v80;
  uint8x8_t v81;
  uint8x8_t *v82;
  uint16x8_t *v83;
  unint64_t v84;
  uint8x16_t v85;
  uint16x8_t v86;
  uint16x8_t v87;
  uint8x8_t *v88;
  uint16x8_t *v89;
  unint64_t v90;
  uint8x8_t v91;
  int8x16x2_t v92;
  int8x16x2_t v93;
  int8x16x2_t v94;
  int8x16x2_t v95;
  int8x16x2_t v96;
  int8x16x2_t v97;
  int8x16x2_t v98;
  int8x16x2_t v99;
  int8x16x2_t v100;

  v11 = a3;
  if ((a3 & 0xFF00000000) != 0)
  {
    v13 = &__dst[2 * a3];
    v14 = __dst;
    if (a3 >= 0x40)
    {
      v14 = &__dst[2 * (a3 & 0xFFFFFFC0)];
      v15 = 0uLL;
      v16 = __dst;
      do
      {
        v92.val[0] = *a2;
        v17 = a2[1];
        v95.val[0] = a2[2];
        v18 = a2[3];
        a2 += 4;
        v19 = v18;
        v95.val[1] = 0uLL;
        v98.val[0] = v17;
        v92.val[1] = 0uLL;
        v20 = v16;
        vst2q_s8(v20, v92);
        v20 += 32;
        v98.val[1] = 0uLL;
        vst2q_s8(v20, v98);
        v21 = v16 + 64;
        vst2q_s8(v21, v95);
        v22 = v16 + 96;
        vst2q_s8(v22, *(int8x16x2_t *)(&v15 - 1));
        v16 += 128;
      }
      while (v16 != v14);
    }
    if (v14 != v13)
    {
      v23 = &__dst[2 * a3] - v14 - 2;
      if (v23 < 0xE
        || (v14 < &a2->i8[(v23 >> 1) + 1]
          ? (v24 = a2 >= (int8x16_t *)&v14[(v23 & 0xFFFFFFFFFFFFFFFELL) + 2])
          : (v24 = 1),
            !v24))
      {
        v27 = v14;
        v28 = a2;
        goto LABEL_18;
      }
      v25 = (v23 >> 1) + 1;
      if (v23 >= 0x3E)
      {
        v26 = v25 & 0xFFFFFFFFFFFFFFE0;
        v30 = (uint8x8_t *)&a2[1];
        v31 = (uint16x8_t *)(v14 + 32);
        v32 = v25 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v33 = *(uint8x16_t *)v30[-2].i8;
          v34 = vmovl_u8(*v30);
          v35 = vmovl_high_u8(*(uint8x16_t *)v30->i8);
          v31[-2] = vmovl_u8(*(uint8x8_t *)v33.i8);
          v31[-1] = vmovl_high_u8(v33);
          *v31 = v34;
          v31[1] = v35;
          v31 += 4;
          v30 += 4;
          v32 -= 32;
        }
        while (v32);
        if (v25 == v26)
          goto LABEL_28;
        if ((v25 & 0x18) == 0)
        {
          v28 = (int8x16_t *)((char *)a2 + v26);
          v27 = &v14[2 * v26];
          do
          {
LABEL_18:
            v29 = v28->u8[0];
            v28 = (int8x16_t *)((char *)v28 + 1);
            *(_WORD *)v27 = v29;
            v27 += 2;
          }
          while (v27 != v13);
          goto LABEL_28;
        }
      }
      else
      {
        v26 = 0;
      }
      v27 = &v14[2 * (v25 & 0xFFFFFFFFFFFFFFF8)];
      v28 = (int8x16_t *)((char *)a2 + (v25 & 0xFFFFFFFFFFFFFFF8));
      v36 = (uint8x8_t *)&a2->i8[v26];
      v37 = (uint16x8_t *)&v14[2 * v26];
      v38 = v26 - (v25 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v39 = *v36++;
        *v37++ = vmovl_u8(v39);
        v38 += 8;
      }
      while (v38);
      if (v25 != (v25 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_18;
    }
  }
  else if ((_DWORD)a3)
  {
    if ((_DWORD)a3 == 1)
      *(_WORD *)__dst = a2->i16[0];
    else
      memcpy(__dst, a2, 2 * a3);
  }
LABEL_28:
  v40 = &__dst[2 * v11];
  result = &v40[2 * a5];
  if ((a5 & 0xFFFFFFC0) != 0)
  {
    v42 = &v40[2 * (a5 & 0xFFFFFFC0)];
    v43 = 0uLL;
    do
    {
      v93.val[0] = *(int8x16_t *)a4;
      v44 = *(int8x16_t *)(a4 + 16);
      v96.val[0] = *(int8x16_t *)(a4 + 32);
      v45 = *(_OWORD *)(a4 + 48);
      a4 += 64;
      v46 = v45;
      v96.val[1] = 0uLL;
      v99.val[0] = v44;
      v93.val[1] = 0uLL;
      v47 = v40;
      vst2q_s8(v47, v93);
      v47 += 32;
      v99.val[1] = 0uLL;
      vst2q_s8(v47, v99);
      v48 = v40 + 64;
      vst2q_s8(v48, v96);
      v49 = v40 + 96;
      vst2q_s8(v49, *(int8x16x2_t *)(&v43 - 1));
      v40 += 128;
    }
    while (v40 != v42);
    v40 = v42;
  }
  if (v40 != result)
  {
    v50 = &__dst[2 * v11 + 2 * (unint64_t)a5] - v40 - 2;
    if (v50 < 0xE
      || (unint64_t)v40 < a4 + (v50 >> 1) + 1 && a4 < (unint64_t)&v40[(v50 & 0xFFFFFFFFFFFFFFFELL) + 2])
    {
      v51 = v40;
      v52 = (unsigned __int8 *)a4;
      goto LABEL_37;
    }
    v70 = (v50 >> 1) + 1;
    if (v50 >= 0x3E)
    {
      v71 = v70 & 0xFFFFFFFFFFFFFFE0;
      v72 = (uint8x8_t *)(a4 + 16);
      v73 = (uint16x8_t *)(v40 + 32);
      v74 = v70 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v75 = *(uint8x16_t *)v72[-2].i8;
        v76 = vmovl_u8(*v72);
        v77 = vmovl_high_u8(*(uint8x16_t *)v72->i8);
        v73[-2] = vmovl_u8(*(uint8x8_t *)v75.i8);
        v73[-1] = vmovl_high_u8(v75);
        *v73 = v76;
        v73[1] = v77;
        v73 += 4;
        v72 += 4;
        v74 -= 32;
      }
      while (v74);
      if (v70 == v71)
        goto LABEL_38;
      if ((v70 & 0x18) == 0)
      {
        v52 = (unsigned __int8 *)(a4 + v71);
        v51 = &v40[2 * v71];
        do
        {
LABEL_37:
          v53 = *v52++;
          *(_WORD *)v51 = v53;
          v51 += 2;
        }
        while (v51 != result);
        goto LABEL_38;
      }
    }
    else
    {
      v71 = 0;
    }
    v51 = &v40[2 * (v70 & 0xFFFFFFFFFFFFFFF8)];
    v52 = (unsigned __int8 *)(a4 + (v70 & 0xFFFFFFFFFFFFFFF8));
    v78 = (uint8x8_t *)(a4 + v71);
    v79 = (uint16x8_t *)&v40[2 * v71];
    v80 = v71 - (v70 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v81 = *v78++;
      *v79++ = vmovl_u8(v81);
      v80 += 8;
    }
    while (v80);
    if (v70 != (v70 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_37;
  }
LABEL_38:
  if ((a7 & 0xFF00000000) != 0)
  {
    v54 = &result[2 * a7];
    if (a7 >= 0x40)
    {
      v55 = &result[2 * (a7 & 0xFFFFFFC0)];
      v56 = 0uLL;
      do
      {
        v94.val[0] = *__src;
        v57 = __src[1];
        v97.val[0] = __src[2];
        v58 = __src[3];
        __src += 4;
        v59 = v58;
        v97.val[1] = 0uLL;
        v100.val[0] = v57;
        v94.val[1] = 0uLL;
        v60 = result;
        vst2q_s8(v60, v94);
        v60 += 32;
        v100.val[1] = 0uLL;
        vst2q_s8(v60, v100);
        v61 = result + 64;
        vst2q_s8(v61, v97);
        v62 = result + 96;
        vst2q_s8(v62, *(int8x16x2_t *)(&v56 - 1));
        result += 128;
      }
      while (result != v55);
      result = v55;
    }
    if (result != v54)
    {
      v63 = &__dst[2 * v11 + 2 * (unint64_t)a5 + 2 * a7] - result - 2;
      if (v63 < 0xE
        || (result < &__src->i8[(v63 >> 1) + 1]
          ? (v64 = __src >= (int8x16_t *)&result[(v63 & 0xFFFFFFFFFFFFFFFELL) + 2])
          : (v64 = 1),
            !v64))
      {
        v67 = result;
        v68 = (unsigned __int8 *)__src;
        goto LABEL_56;
      }
      v65 = (v63 >> 1) + 1;
      if (v63 >= 0x3E)
      {
        v66 = v65 & 0xFFFFFFFFFFFFFFE0;
        v82 = (uint8x8_t *)&__src[1];
        v83 = (uint16x8_t *)(result + 32);
        v84 = v65 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v85 = *(uint8x16_t *)v82[-2].i8;
          v86 = vmovl_u8(*v82);
          v87 = vmovl_high_u8(*(uint8x16_t *)v82->i8);
          v83[-2] = vmovl_u8(*(uint8x8_t *)v85.i8);
          v83[-1] = vmovl_high_u8(v85);
          *v83 = v86;
          v83[1] = v87;
          v83 += 4;
          v82 += 4;
          v84 -= 32;
        }
        while (v84);
        if (v65 == v66)
          return result;
        if ((v65 & 0x18) == 0)
        {
          v68 = &__src->u8[v66];
          v67 = &result[2 * v66];
          do
          {
LABEL_56:
            v69 = *v68++;
            *(_WORD *)v67 = v69;
            v67 += 2;
          }
          while (v67 != v54);
          return result;
        }
      }
      else
      {
        v66 = 0;
      }
      v67 = &result[2 * (v65 & 0xFFFFFFFFFFFFFFF8)];
      v68 = &__src->u8[v65 & 0xFFFFFFFFFFFFFFF8];
      v88 = (uint8x8_t *)&__src->i8[v66];
      v89 = (uint16x8_t *)&result[2 * v66];
      v90 = v66 - (v65 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v91 = *v88++;
        *v89++ = vmovl_u8(v91);
        v90 += 8;
      }
      while (v90);
      if (v65 != (v65 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_56;
    }
  }
  else if ((_DWORD)a7)
  {
    if ((_DWORD)a7 == 1)
      *(_WORD *)result = __src->i16[0];
    else
      return (char *)memcpy(result, __src, 2 * a7);
  }
  return result;
}

uint64_t _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  int v25;
  char v26;
  uint64_t result;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  BOOL v33;
  int v34;
  int v35;
  char v36;
  unsigned int v37;

  v1 = *a1;
  v2 = a1[1];
  v3 = HIDWORD(v2);
  v4 = -17;
  do
  {
    ++v4;
    v5 = v3 > 0xF;
    v3 >>= 4;
  }
  while (v5);
  v6 = -v4;
  v7 = v4 + 17;
  if (v6 > 9)
    v7 = 8;
  v8 = WORD1(v2);
  v9 = -17;
  do
  {
    ++v9;
    v5 = v8 > 0xF;
    v8 >>= 4;
  }
  while (v5);
  v10 = -v9;
  v11 = v9 + 17;
  if (v10 > 13)
    v11 = 4;
  v12 = (unsigned __int16)a1[1];
  v13 = -17;
  do
  {
    ++v13;
    v5 = v12 > 0xF;
    v12 >>= 4;
  }
  while (v5);
  v14 = -v13;
  v15 = v13 + 17;
  if (v14 > 13)
    v15 = 4;
  v16 = HIWORD(v1);
  v17 = -17;
  do
  {
    ++v17;
    v5 = v16 > 0xF;
    v16 >>= 4;
  }
  while (v5);
  v18 = -v17;
  v19 = v17 + 17;
  if (v18 > 13)
    v19 = 4;
  v20 = v1 & 0xFFFFFFFFFFFFLL;
  v21 = -17;
  do
  {
    ++v21;
    v5 = v20 > 0xF;
    v20 >>= 4;
  }
  while (v5);
  v22 = -v21;
  v23 = v21 + 17;
  if (v22 > 5)
    v23 = 12;
  if (v23 < 0)
    return 0xFFFFFFFFLL;
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  v26 = v24;
  result = 0xFFFFFFFFLL;
  if ((v19 & 0x80000000) == 0 && (v26 & 1) == 0)
  {
    v24 = __OFADD__(v19, v25);
    v28 = v19 + v25;
    if (!v24)
    {
      v24 = __OFADD__(v28, 1);
      v29 = v28 + 1;
      v30 = v24;
      if ((v15 & 0x80000000) == 0 && !v30)
      {
        v24 = __OFADD__(v15, v29);
        v31 = v15 + v29;
        if (!v24)
        {
          v24 = __OFADD__(v31, 1);
          v32 = v31 + 1;
          v33 = v24;
          if ((v11 & 0x80000000) == 0 && !v33)
          {
            v24 = __OFADD__(v11, v32);
            v34 = v11 + v32;
            if (!v24)
            {
              v24 = __OFADD__(v34, 1);
              v35 = v34 + 1;
              v36 = v24;
              if ((v7 & 0x80000000) == 0 && (v36 & 1) == 0)
              {
                v24 = __OFADD__(v7, v35);
                v37 = v7 + v35;
                if (v24)
                  return 0xFFFFFFFFLL;
                else
                  return v37;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

_BYTE *_ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIhEEvPT_EUlDpOT_E_EEDcOS5_(unint64_t *a1, _BYTE ***a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  char *v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  size_t v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  size_t v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  size_t v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *result;
  size_t v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE v43[12];
  _DWORD v44[4];
  _BYTE v45[4];
  _DWORD v46[4];
  _BYTE v47[4];
  _DWORD v48[4];
  _BYTE v49[4];
  size_t __n;
  _BYTE v51[8];
  unsigned int v52;
  uint64_t v53;

  v3 = 0;
  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = a1[1];
  v6 = HIDWORD(v5);
  do
  {
    v51[v3-- + 7] = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::lowercaseHexDigits[v6 & 0xF];
    v7 = v6 > 0xF;
    v6 >>= 4;
  }
  while (v7);
  if (v3 + 17 < 10)
  {
    v8 = (char *)&v52 + v3;
  }
  else
  {
    v8 = v51;
    memset(v51, 48, v3 + 8);
  }
  v9 = (char *)((char *)&v52 - v8);
  v52 = &v52 - (_DWORD)v8;
  v10 = WORD1(v5);
  v11 = 15;
  do
  {
    *((_BYTE *)&v48[1] + v11--) = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::lowercaseHexDigits[v10 & 0xF];
    v7 = v10 > 0xF;
    v10 >>= 4;
  }
  while (v7);
  if (v11 + 2 < 14)
  {
    v12 = (char *)&v48[1] + v11 + 1;
  }
  else
  {
    v12 = v49;
    memset(v49, 48, v11 - 11);
  }
  LODWORD(__n) = &__n - (_DWORD)v12;
  v13 = (unsigned __int16)v5;
  v14 = 15;
  do
  {
    *((_BYTE *)&v46[1] + v14--) = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::lowercaseHexDigits[v13 & 0xF];
    v7 = v13 > 0xF;
    v13 >>= 4;
  }
  while (v7);
  if (v14 + 2 < 14)
  {
    v15 = (char *)&v46[1] + v14 + 1;
  }
  else
  {
    v15 = v47;
    memset(v47, 48, v14 - 11);
  }
  v48[0] = v48 - (_DWORD)v15;
  v16 = HIWORD(v4);
  v17 = 15;
  do
  {
    *((_BYTE *)&v44[1] + v17--) = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::lowercaseHexDigits[v16 & 0xF];
    v7 = v16 > 0xF;
    v16 >>= 4;
  }
  while (v7);
  if (v17 + 2 < 14)
  {
    v18 = (char *)&v44[1] + v17 + 1;
  }
  else
  {
    v18 = v45;
    memset(v45, 48, v17 - 11);
  }
  v19 = 0;
  v46[0] = v46 - (_DWORD)v18;
  v20 = v4 & 0xFFFFFFFFFFFFLL;
  do
  {
    v43[v19-- + 11] = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::lowercaseHexDigits[v20 & 0xF];
    v7 = v20 > 0xF;
    v20 >>= 4;
  }
  while (v7);
  if (v19 + 17 < 6)
  {
    v44[0] = -(int)v19;
    v21 = **a2;
    if (!(_DWORD)v9)
      goto LABEL_29;
  }
  else
  {
    memset(v43, 48, v19 + 12);
    v44[0] = v44 - v43;
    v21 = **a2;
    if (!(_DWORD)v9)
      goto LABEL_29;
  }
  v22 = (_BYTE *)((char *)&v52 - v9);
  if ((_DWORD)v9 != 1)
  {
    memcpy(v21, v22, v9);
    v26 = &v21[v52];
    *v26 = 45;
    v24 = v26 + 1;
    v25 = __n;
    if (!(_DWORD)__n)
      goto LABEL_34;
    goto LABEL_32;
  }
  *v21 = *v22;
LABEL_29:
  v23 = &v21[v52];
  *v23 = 45;
  v24 = v23 + 1;
  v25 = __n;
  if (!(_DWORD)__n)
  {
LABEL_34:
    v28 = &v24[__n];
    *v28 = 45;
    v29 = v28 + 1;
    v30 = v48[0];
    if (!v48[0])
      goto LABEL_39;
    goto LABEL_37;
  }
LABEL_32:
  v27 = &v51[-v25 - 4];
  if ((_DWORD)v25 == 1)
  {
    *v24 = *v27;
    goto LABEL_34;
  }
  memcpy(v24, v27, v25);
  v31 = &v24[__n];
  *v31 = 45;
  v29 = v31 + 1;
  v30 = v48[0];
  if (!v48[0])
    goto LABEL_39;
LABEL_37:
  v32 = (char *)v48 - v30;
  if ((_DWORD)v30 != 1)
  {
    memcpy(v29, v32, v30);
    v36 = &v29[v48[0]];
    *v36 = 45;
    v34 = v36 + 1;
    v35 = v46[0];
    if (!v46[0])
      goto LABEL_44;
    goto LABEL_42;
  }
  *v29 = *v32;
LABEL_39:
  v33 = &v29[v48[0]];
  *v33 = 45;
  v34 = v33 + 1;
  v35 = v46[0];
  if (!v46[0])
  {
LABEL_44:
    v38 = &v34[v46[0]];
    *v38 = 45;
    result = v38 + 1;
    v40 = v44[0];
    if (!v44[0])
      return result;
    goto LABEL_47;
  }
LABEL_42:
  v37 = (char *)v46 - v35;
  if ((_DWORD)v35 == 1)
  {
    *v34 = *v37;
    goto LABEL_44;
  }
  memcpy(v34, v37, v35);
  v41 = &v34[v46[0]];
  *v41 = 45;
  result = v41 + 1;
  v40 = v44[0];
  if (!v44[0])
    return result;
LABEL_47:
  v42 = (char *)v44 - v40;
  if ((_DWORD)v40 != 1)
    return memcpy(result, v42, v40);
  *result = *v42;
  return result;
}

unint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 28))
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v14 = (_QWORD *)v6;
      v15 = (WTF::StringImpl **)(v4 + 16 * v5);
      v16 = (WTF::StringImpl **)v4;
      while (1)
      {
        v17 = *v16;
        *v16 = 0;
        *v14 = v17;
        v18 = v16[1];
        v16[1] = 0;
        v14[1] = v18;
        v19 = v16[1];
        v16[1] = 0;
        if (!v19)
          goto LABEL_10;
        if (*(_DWORD *)v19 != 2)
          break;
        WTF::StringImpl::~StringImpl(v19, v7, v8, v9, v10, v11, v12, v13);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
        v20 = *v16;
        *v16 = 0;
        if (v20)
        {
LABEL_13:
          if (*(_DWORD *)v20 == 2)
          {
            WTF::StringImpl::~StringImpl(v20, v7, v8, v9, v10, v11, v12, v13);
            WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
          }
          else
          {
            *(_DWORD *)v20 -= 2;
          }
        }
LABEL_6:
        v16 += 2;
        v14 += 2;
        if (v16 == v15)
          goto LABEL_15;
      }
      *(_DWORD *)v19 -= 2;
LABEL_10:
      v20 = *v16;
      *v16 = 0;
      if (v20)
        goto LABEL_13;
      goto LABEL_6;
    }
LABEL_15:
    if (v4)
    {
      if (*(_QWORD *)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

WTF *WTF::Detail::CallableWrapper<WTF::removeQueryParameters(WTF::URL &,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::$_0,BOOL,WTF::String const&>::call(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  int v5;
  unsigned int v6;
  unsigned int v7;
  WTF *result;
  int i;
  int v10;

  v3 = **(_QWORD **)(a1 + 8);
  if (!v3)
    return 0;
  v5 = *(_DWORD *)(v3 - 8);
  v6 = *((_DWORD *)*a2 + 4);
  if (v6 < 0x100)
    v7 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v7 = v6 >> 8;
  for (i = 0; ; v7 = i + v10)
  {
    v10 = v7 & v5;
    result = *(WTF **)(v3 + 8 * (v7 & v5));
    if (result != (WTF *)-1)
    {
      if (!result)
        return result;
      if (WTF::equal(result, *a2, a3))
        break;
    }
    ++i;
  }
  return (WTF *)1;
}

WTF::URL *WTF::URL::URL(WTF::URL *this, CFURLRef url)
{
  CFIndex v4;
  CFIndex v5;
  int *v6;
  UInt8 *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  WTF::StringImpl *v71[2];
  __int128 v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  __int128 v76;
  __int128 v77;
  WTF *v78;
  int v79;
  WTF::StringImpl *v80;

  *(_QWORD *)this = 0;
  if (!url)
  {
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 8) = 0u;
    return this;
  }
  v4 = CFURLGetBytes(url, 0, 0);
  if (v4 == -1)
    goto LABEL_41;
  v5 = v4;
  if (v4 >= 0x80000000)
  {
    __break(0xC471u);
    JUMPOUT(0x197B39524);
  }
  if ((_DWORD)v4)
  {
    if (!((unint64_t)v4 >> 31))
    {
      v6 = (int *)WTF::fastCompactMalloc((WTF *)(v4 + 20));
      v7 = (UInt8 *)(v6 + 5);
      *v6 = 2;
      v6[1] = v5;
      *((_QWORD *)v6 + 1) = v6 + 5;
      v6[4] = 4;
      goto LABEL_10;
    }
LABEL_41:
    __break(0xC471u);
    JUMPOUT(0x197B39504);
  }
  v7 = 0;
  v6 = &WTF::StringImpl::s_emptyAtomString;
  WTF::StringImpl::s_emptyAtomString += 2;
LABEL_10:
  v74 = (WTF::StringImpl *)v6;
  CFURLGetBytes(url, v7, v5);
  v73 = 0;
  *(_OWORD *)v71 = 0u;
  v72 = 0u;
  WTF::URLParser::URLParser((WTF::URL *)&v75, (WTF::AtomStringImpl *)&v74, (uint64_t)v71, 0, v9, v10, v11, v12);
  v20 = v75;
  if (v75)
    *(_DWORD *)v75 += 2;
  v21 = v76;
  v22 = v77;
  v23 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = v20;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      v69 = v22;
      v70 = v21;
      WTF::StringImpl::~StringImpl(v23, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
      *(_OWORD *)((char *)this + 8) = v70;
      *(_OWORD *)((char *)this + 24) = v69;
      v24 = v80;
      v80 = 0;
      if (!v24)
        goto LABEL_20;
      goto LABEL_18;
    }
    *(_DWORD *)v23 -= 2;
  }
  *(_OWORD *)((char *)this + 8) = v21;
  *(_OWORD *)((char *)this + 24) = v22;
  v24 = v80;
  v80 = 0;
  if (!v24)
  {
LABEL_20:
    v33 = v78;
    if (!v78)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_18:
  if (*(_DWORD *)v24 != 2)
  {
    *(_DWORD *)v24 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::~StringImpl(v24, v13, v14, v15, v16, v17, v18, v19);
  WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
  v33 = v78;
  if (v78)
  {
LABEL_21:
    v78 = 0;
    v79 = 0;
    WTF::fastFree((unint64_t)v33, v13, v14, v15, v16, v17, v18, v19);
  }
LABEL_22:
  v34 = v75;
  v75 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::~StringImpl(v34, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
      v35 = v71[0];
      v71[0] = 0;
      if (!v35)
        goto LABEL_32;
      goto LABEL_30;
    }
    *(_DWORD *)v34 -= 2;
  }
  v35 = v71[0];
  v71[0] = 0;
  if (v35)
  {
LABEL_30:
    if (*(_DWORD *)v35 != 2)
    {
      *(_DWORD *)v35 -= 2;
      goto LABEL_32;
    }
    WTF::StringImpl::~StringImpl(v35, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    v52 = v74;
    if (v74)
      goto LABEL_35;
    return this;
  }
LABEL_32:
  v52 = v74;
  if (!v74)
    return this;
LABEL_35:
  if (*(_DWORD *)v52 == 2)
  {
    WTF::StringImpl::~StringImpl(v52, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
  }
  else
  {
    *(_DWORD *)v52 -= 2;
  }
  return this;
}

void WTF::URL::createCFURL(WTF::URL *this@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, CFURLRef *a7@<X8>, float a8@<S1>)
{
  uint64_t v9;
  uint64_t v11;
  const UInt8 *v12;
  CFIndex v13;
  const WTF::URL *v14;
  CFURLRef v15;
  _DWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v9 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    *a7 = 0;
    return;
  }
  if (!*(_DWORD *)(v9 + 4))
  {
    WTF::URL::emptyCFURL(a7);
    return;
  }
  if ((*(_BYTE *)(v9 + 16) & 4) != 0 && WTF::String::containsOnlyASCII(this))
  {
    v11 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v12 = *(const UInt8 **)(v11 + 8);
      v13 = *(unsigned int *)(v11 + 4);
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
    goto LABEL_11;
  }
  WTF::String::utf8((uint64_t *)this, 0, a2, a3, a4, a5, a6, &v23, a8);
  v16 = (_DWORD *)v23;
  if (!v23)
  {
    v12 = 0;
    v13 = 0;
LABEL_11:
    v15 = CFURLCreateAbsoluteURLWithBytes(0, v12, v13, 0x8000100u, 0, 1u);
    goto LABEL_12;
  }
  v15 = CFURLCreateAbsoluteURLWithBytes(0, (const UInt8 *)(v23 + 16), *(_QWORD *)(v23 + 8), 0x8000100u, 0, 1u);
  if (*v16 == 1)
    WTF::fastFree((unint64_t)v16, v17, (uint64_t)v14, v18, v19, v20, v21, v22);
  else
    --*v16;
LABEL_12:
  if ((*((_BYTE *)this + 8) & 2) != 0 && !WTF::isSameOrigin(v15, this, v14))
  {
    *a7 = 0;
    if (v15)
      CFRelease(v15);
  }
  else
  {
    *a7 = v15;
  }
}

BOOL WTF::String::containsOnlyASCII(WTF::String *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  BOOL v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x16_t *v10;
  int8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x16_t *v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint16x4_t *v22;
  unsigned __int8 v23;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t *v33;
  uint64_t v34;
  int8x16_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  uint64_t v39;
  int8x16_t v40;
  int8x16_t v41;
  uint16x4_t *v42;
  unint64_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint16x8_t v50;
  uint32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  uint32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  uint32x4_t v58;
  int8x16_t v59;
  int8x16_t v60;
  uint32x4_t v61;
  int8x16_t v62;
  int8x16_t v63;
  unsigned int v64;
  uint64_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t *v68;
  uint64_t v69;
  int8x16_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned __int8 *v73;
  unint64_t v74;
  int8x16_t v75;
  int8x16_t v76;
  uint8x8_t *v77;
  unint64_t v78;
  int8x16_t v79;
  int8x16_t v80;
  uint8x8_t v81;
  uint16x8_t v82;
  uint32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  uint32x4_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  unint64_t v92;
  uint8x16_t *v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  uint8x16_t v100;
  uint16x8_t v101;
  uint32x4_t v102;
  int8x16_t v103;
  int8x16_t v104;
  uint16x8_t v105;
  uint32x4_t v106;
  int8x16_t v107;
  int8x16_t v108;
  uint32x4_t v109;
  int8x16_t v110;
  uint32x4_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  unsigned int v116;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 1;
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(unsigned int *)(v1 + 4);
  v5 = (v2 & 7) == 0 || v3 == 0;
  if ((*(_BYTE *)(v1 + 16) & 4) == 0)
  {
    v6 = v2 + 2 * v3;
    if (v5)
    {
      v7 = 0;
      v8 = v2;
    }
    else
    {
      v7 = 0;
      v15 = 2 * v3 - 2;
      v16 = v2 + 2;
      v8 = v2;
      do
      {
        v17 = *(unsigned __int16 *)v8;
        v8 += 2;
        *(_QWORD *)&v7 |= v17;
        if ((v16 & 7) == 0)
          break;
        v18 = v15;
        v15 -= 2;
        v16 += 2;
      }
      while (v18);
    }
    v19 = v6 & 0xFFFFFFFFFFFFFFF8;
    if (v8 >= (v6 & 0xFFFFFFFFFFFFFFF8))
    {
      v22 = (uint16x4_t *)v8;
      goto LABEL_56;
    }
    v20 = v8 + 8;
    if (v19 > v8 + 8)
      v20 = v6 & 0xFFFFFFFFFFFFFFF8;
    v21 = v20 + ~v8;
    if (v21 >= 0x18)
    {
      v30 = (v21 >> 3) + 1;
      v22 = (uint16x4_t *)(v8 + 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL));
      v31 = 0uLL;
      v32 = (int8x16_t)(unint64_t)v7;
      v33 = (int8x16_t *)(v8 + 16);
      v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v32 = vorrq_s8(v33[-1], v32);
        v31 = vorrq_s8(*v33, v31);
        v33 += 2;
        v34 -= 4;
      }
      while (v34);
      v35 = vorrq_s8(v31, v32);
      v7 = vorr_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
      if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_56:
        if (v22 != (uint16x4_t *)v6)
        {
          v37 = v2 + 2 * v3 - (_QWORD)v22 - 2;
          if (v37 >= 0x1E)
          {
            v39 = (v37 >> 1) + 1;
            v40 = 0uLL;
            v41 = (int8x16_t)(unint64_t)v7;
            v38 = (unsigned __int16 *)v22 + (v39 & 0xFFFFFFFFFFFFFFF0);
            v42 = v22 + 2;
            v43 = v39 & 0xFFFFFFFFFFFFFFF0;
            v44 = 0uLL;
            v45 = 0uLL;
            v46 = 0uLL;
            v47 = 0uLL;
            v48 = 0uLL;
            v49 = 0uLL;
            do
            {
              v50 = *(uint16x8_t *)v42[-2].i8;
              v51 = vmovl_u16(*(uint16x4_t *)v50.i8);
              v52.i64[0] = v51.u32[0];
              v52.i64[1] = v51.u32[1];
              v53 = v52;
              v52.i64[0] = v51.u32[2];
              v52.i64[1] = v51.u32[3];
              v54 = v52;
              v55 = vmovl_high_u16(v50);
              v52.i64[0] = v55.u32[0];
              v52.i64[1] = v55.u32[1];
              v56 = v52;
              v52.i64[0] = v55.u32[2];
              v52.i64[1] = v55.u32[3];
              v57 = v52;
              v58 = vmovl_u16(*v42);
              v52.i64[0] = v58.u32[0];
              v52.i64[1] = v58.u32[1];
              v59 = v52;
              v52.i64[0] = v58.u32[2];
              v52.i64[1] = v58.u32[3];
              v60 = v52;
              v61 = vmovl_high_u16(*(uint16x8_t *)v42->i8);
              v52.i64[0] = v61.u32[0];
              v52.i64[1] = v61.u32[1];
              v62 = v52;
              v52.i64[0] = v61.u32[2];
              v52.i64[1] = v61.u32[3];
              v45 = vorrq_s8(v45, v57);
              v44 = vorrq_s8(v44, v56);
              v40 = vorrq_s8(v40, v54);
              v41 = vorrq_s8(v41, v53);
              v49 = vorrq_s8(v49, v52);
              v48 = vorrq_s8(v48, v62);
              v47 = vorrq_s8(v47, v60);
              v46 = vorrq_s8(v46, v59);
              v42 += 4;
              v43 -= 16;
            }
            while (v43);
            v63 = vorrq_s8(vorrq_s8(vorrq_s8(v46, v41), vorrq_s8(v48, v44)), vorrq_s8(vorrq_s8(v47, v40), vorrq_s8(v49, v45)));
            v7 = vorr_s8(*(int8x8_t *)v63.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL));
            if (v39 == (v39 & 0xFFFFFFFFFFFFFFF0))
              return (*(_QWORD *)&v7 & 0xFF80FF80FF80FF80) == 0;
          }
          else
          {
            v38 = (unsigned __int16 *)v22;
          }
          do
          {
            v64 = *v38++;
            *(_QWORD *)&v7 |= v64;
          }
          while (v38 != (unsigned __int16 *)v6);
        }
        return (*(_QWORD *)&v7 & 0xFF80FF80FF80FF80) == 0;
      }
    }
    else
    {
      v22 = (uint16x4_t *)v8;
    }
    do
    {
      v36 = (uint64_t)*v22++;
      *(_QWORD *)&v7 |= v36;
    }
    while ((unint64_t)v22 < v19);
    goto LABEL_56;
  }
  v10 = (uint8x16_t *)(v2 + v3);
  if (v5)
  {
    v11 = 0;
    v12 = v2;
    v13 = (unint64_t)v10 & 0xFFFFFFFFFFFFFFF8;
    if (v2 >= ((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_14:
      v14 = (uint8x16_t *)v12;
      goto LABEL_68;
    }
  }
  else
  {
    v12 = v2 + 1;
    v23 = *(_BYTE *)v2;
    if (((v2 + 1) & 7) != 0 && (_DWORD)v3 != 1)
    {
      v23 |= *(_BYTE *)(v2 + 1);
      v12 = v2 + 2;
      if (((v2 + 2) & 7) != 0 && (_DWORD)v3 != 2)
      {
        v23 |= *(_BYTE *)(v2 + 2);
        v12 = v2 + 3;
        if (((v2 + 3) & 7) != 0 && (_DWORD)v3 != 3)
        {
          v23 |= *(_BYTE *)(v2 + 3);
          v12 = v2 + 4;
          if (((v2 + 4) & 7) != 0 && (_DWORD)v3 != 4)
          {
            v23 |= *(_BYTE *)(v2 + 4);
            v12 = v2 + 5;
            if (((v2 + 5) & 7) != 0 && (_DWORD)v3 != 5)
            {
              v23 |= *(_BYTE *)(v2 + 5);
              v12 = v2 + 6;
              if (((v2 + 6) & 7) != 0 && (_DWORD)v3 != 6)
              {
                v23 |= *(_BYTE *)(v2 + 6);
                v12 = v2 + 7;
                if (((v2 + 7) & 7) != 0 && (_DWORD)v3 != 7)
                {
                  v23 |= *(_BYTE *)(v2 + 7);
                  v12 = v2 + 8;
                }
              }
            }
          }
        }
      }
    }
    v11 = (int8x8_t)v23;
    v13 = (unint64_t)v10 & 0xFFFFFFFFFFFFFFF8;
    if (v12 >= ((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_14;
  }
  v28 = v12 + 8;
  if (v13 > v12 + 8)
    v28 = v13;
  v29 = v28 + ~v12;
  if (v29 < 0x18)
  {
    v14 = (uint8x16_t *)v12;
    do
    {
LABEL_67:
      v71 = v14->i64[0];
      v14 = (uint8x16_t *)((char *)v14 + 8);
      *(_QWORD *)&v11 |= v71;
    }
    while ((unint64_t)v14 < v13);
    goto LABEL_68;
  }
  v65 = (v29 >> 3) + 1;
  v14 = (uint8x16_t *)(v12 + 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL));
  v66 = 0uLL;
  v67 = (int8x16_t)(unint64_t)v11;
  v68 = (int8x16_t *)(v12 + 16);
  v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v67 = vorrq_s8(v68[-1], v67);
    v66 = vorrq_s8(*v68, v66);
    v68 += 2;
    v69 -= 4;
  }
  while (v69);
  v70 = vorrq_s8(v66, v67);
  v11 = vorr_s8(*(int8x8_t *)v70.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL));
  if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_67;
LABEL_68:
  if (v14 != v10)
  {
    v72 = v2 + v3 - (_QWORD)v14;
    if (v72 < 8)
    {
      v73 = (unsigned __int8 *)v14;
      goto LABEL_82;
    }
    if (v72 >= 0x10)
    {
      v74 = v72 & 0xFFFFFFFFFFFFFFF0;
      v90 = 0uLL;
      v91 = (int8x16_t)(unint64_t)v11;
      v92 = v72 & 0xFFFFFFFFFFFFFFF0;
      v93 = v14;
      v94 = 0uLL;
      v95 = 0uLL;
      v96 = 0uLL;
      v97 = 0uLL;
      v98 = 0uLL;
      v99 = 0uLL;
      do
      {
        v100 = *v93++;
        v101 = vmovl_u8(*(uint8x8_t *)v100.i8);
        v102 = vmovl_u16(*(uint16x4_t *)v101.i8);
        v103.i64[0] = v102.u32[0];
        v103.i64[1] = v102.u32[1];
        v104 = v103;
        v105 = vmovl_high_u8(v100);
        v106 = vmovl_high_u16(v105);
        v103.i64[0] = v106.u32[2];
        v103.i64[1] = v106.u32[3];
        v107 = v103;
        v103.i64[0] = v102.u32[2];
        v103.i64[1] = v102.u32[3];
        v108 = v103;
        v109 = vmovl_high_u16(v101);
        v103.i64[0] = v109.u32[0];
        v103.i64[1] = v109.u32[1];
        v110 = v103;
        v111 = vmovl_u16(*(uint16x4_t *)v105.i8);
        v103.i64[0] = v111.u32[0];
        v103.i64[1] = v111.u32[1];
        v112 = v103;
        v103.i64[0] = v106.u32[0];
        v103.i64[1] = v106.u32[1];
        v113 = v103;
        v103.i64[0] = v109.u32[2];
        v103.i64[1] = v109.u32[3];
        v114 = v103;
        v103.i64[0] = v111.u32[2];
        v103.i64[1] = v111.u32[3];
        v97 = vorrq_s8(v97, v103);
        v95 = vorrq_s8(v95, v114);
        v98 = vorrq_s8(v98, v113);
        v96 = vorrq_s8(v96, v112);
        v94 = vorrq_s8(v94, v110);
        v90 = vorrq_s8(v90, v108);
        v99 = vorrq_s8(v99, v107);
        v91 = vorrq_s8(v91, v104);
        v92 -= 16;
      }
      while (v92);
      v115 = vorrq_s8(vorrq_s8(vorrq_s8(v91, v96), vorrq_s8(v94, v98)), vorrq_s8(vorrq_s8(v90, v97), vorrq_s8(v95, v99)));
      v11 = vorr_s8(*(int8x8_t *)v115.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v115, v115, 8uLL));
      if (v72 == v74)
        return (*(_QWORD *)&v11 & 0x8080808080808080) == 0;
      if ((v72 & 8) == 0)
      {
        v73 = &v14->u8[v74];
        do
        {
LABEL_82:
          v116 = *v73++;
          *(_QWORD *)&v11 |= v116;
        }
        while (v73 != (unsigned __int8 *)v10);
        return (*(_QWORD *)&v11 & 0x8080808080808080) == 0;
      }
    }
    else
    {
      v74 = 0;
    }
    v73 = &v14->u8[v72 & 0xFFFFFFFFFFFFFFF8];
    v75 = 0uLL;
    v76 = (int8x16_t)(unint64_t)v11;
    v77 = (uint8x8_t *)&v14->i8[v74];
    v78 = v74 - (v72 & 0xFFFFFFFFFFFFFFF8);
    v79 = 0uLL;
    v80 = 0uLL;
    do
    {
      v81 = *v77++;
      v82 = vmovl_u8(v81);
      v83 = vmovl_u16(*(uint16x4_t *)v82.i8);
      v84.i64[0] = v83.u32[0];
      v84.i64[1] = v83.u32[1];
      v85 = v84;
      v84.i64[0] = v83.u32[2];
      v84.i64[1] = v83.u32[3];
      v86 = v84;
      v87 = vmovl_high_u16(v82);
      v84.i64[0] = v87.u32[0];
      v84.i64[1] = v87.u32[1];
      v88 = v84;
      v84.i64[0] = v87.u32[2];
      v84.i64[1] = v87.u32[3];
      v80 = vorrq_s8(v80, v84);
      v79 = vorrq_s8(v79, v88);
      v75 = vorrq_s8(v75, v86);
      v76 = vorrq_s8(v76, v85);
      v78 += 8;
    }
    while (v78);
    v89 = vorrq_s8(vorrq_s8(v76, v79), vorrq_s8(v75, v80));
    v11 = vorr_s8(*(int8x8_t *)v89.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL));
    if (v72 == (v72 & 0xFFFFFFFFFFFFFFF8))
      return (*(_QWORD *)&v11 & 0x8080808080808080) == 0;
    goto LABEL_82;
  }
  return (*(_QWORD *)&v11 & 0x8080808080808080) == 0;
}

void WTF::URL::fileSystemPath(WTF::URL *this@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, WTF::StringImpl **a7@<X8>, float a8@<S1>)
{
  const __CFString *v9;
  CFURLRef v10;
  CFURLRef anURL;

  WTF::URL::createCFURL(this, a2, a3, a4, a5, a6, &anURL, a8);
  if (anURL)
  {
    v9 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
    WTF::String::String(a7, v9);
    if (v9)
      CFRelease(v9);
    v10 = anURL;
    anURL = 0;
    if (v10)
      CFRelease(v10);
  }
  else
  {
    *a7 = 0;
  }
}

id WTF::URL::operator NSURL *(WTF::URL *a1, double a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  id v11;

  WTF::URL::createCFURL(a1, a6, a7, a8, a9, a10, (CFURLRef *)&v11, a3);
  return v11;
}

void WTF::URL::emptyCFURL(_QWORD *a1@<X8>)
{
  id v3;
  void *v4;

  v3 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initWithString:", &stru_1E35BF3F0);
  v4 = v3;
  if (v3)
    CFRetain(v3);

  *a1 = v4;
}

void sub_197B39CDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WTF::URL::hostIsIPAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  CFTypeRef v3;
  CFTypeRef cf;
  _QWORD v6[2];

  v6[0] = a1;
  v6[1] = a2;
  WTF::StringView::createNSStringWithoutCopying((WTF::StringView *)v6, &cf);
  v2 = objc_msgSend((id)cf, "_web_looksLikeIPAddress");
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
  return v2;
}

void sub_197B39D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WTF::makeNSArrayElement(WTF *this@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, _QWORD *a7@<X8>, float a8@<S1>)
{
  void *v10;
  id v11;
  void *v12;
  CFTypeRef v13;
  CFTypeRef cf;

  WTF::URL::createCFURL(this, a2, a3, a4, a5, a6, (CFURLRef *)&cf, a8);
  v10 = (void *)cf;
  cf = 0;
  v11 = v10;
  v12 = v11;
  if (v11)
    CFRetain(v11);

  *a7 = v12;
  v13 = cf;
  cf = 0;
  if (v13)
    CFRelease(v13);
}

void sub_197B39DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  void *v10;

  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void WTF::makeVectorElement(const WTF::URL *a1@<X1>, uint64_t a2@<X8>)
{
  const WTF::URL *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v5 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    WTF::URL::URL((WTF::URL *)&v6, v5);
    *(_QWORD *)a2 = v6;
    *(_OWORD *)(a2 + 8) = v7;
    *(_OWORD *)(a2 + 24) = v8;
    *(_BYTE *)(a2 + 40) = 1;

  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 40) = 0;

  }
}

void sub_197B39E8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WTF::URLHelpers::mapHostName()
{
  unsigned int **v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int16x8_t *v19;
  int16x8_t *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int16x8_t *v36;
  uint64_t (*v37)(uint64_t, int16x8_t *, uint64_t, int16x8_t *, uint64_t, _DWORD *, int *);
  unint64_t v38;
  WTF::URLHelpers *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  UChar32 v44;
  int v46;
  BOOL v47;
  int v48;
  int Script;
  uint16x8_t v50;
  uint16x8_t v51;
  unsigned int v52;
  uint16x8_t v53;
  _DWORD v54[7];
  int v55;
  int16x8_t v56;
  int16x8_t *v57;
  int v58;
  unsigned int v59;
  int v60;
  WTF::StringImpl *v61;
  int v62;
  _QWORD v63[3];

  v0 = (unsigned int **)MEMORY[0x1E0C80A78]();
  v3 = v2;
  v4 = *v0;
  if (!*v0 || (v5 = v4[1], v5 >= 0x801) || !(_DWORD)v5)
  {
    *(_QWORD *)v3 = 0;
    *(_BYTE *)(v3 + 8) = 1;
    return;
  }
  v6 = v1;
  *v4 += 2;
  v61 = (WTF::StringImpl *)v4;
  WTF::String::charactersWithoutNullTermination((WTF::String *)&v61, (uint64_t)&v57);
  v14 = v60;
  if (v60)
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 8) = 0;
    if (v14 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v15 = v59;
  if (v59 == v58)
  {
    v16 = v59 + ((unint64_t)v59 >> 2);
    if (v16 >= 0x10)
      v17 = v16 + 1;
    else
      v17 = 16;
    if (v17 <= (unint64_t)v59 + 1)
      v18 = v59 + 1;
    else
      v18 = v17;
    if (v18 >> 31)
    {
LABEL_89:
      __break(0xC471u);
      JUMPOUT(0x197B3A37CLL);
    }
    v19 = v57;
    v20 = (int16x8_t *)WTF::fastMalloc((WTF *)(2 * v18));
    v58 = v18;
    v57 = v20;
    memcpy(v20, v19, 2 * v15);
    if (v19)
    {
      if (v20 == v19)
      {
        v20 = 0;
        v57 = 0;
        v58 = 0;
      }
      WTF::fastFree((unint64_t)v19, v21, v22, v23, v24, v25, v26, v27);
    }
  }
  else
  {
    v20 = v57;
  }
  v20->i16[v15] = 0;
  v59 = v15 + 1;
  v36 = v57;
  v55 = 0;
  *(_OWORD *)v54 = xmmword_199123570;
  if (v6)
    v37 = (uint64_t (*)(uint64_t, int16x8_t *, uint64_t, int16x8_t *, uint64_t, _DWORD *, int *))MEMORY[0x1E0DE62C0];
  else
    v37 = (uint64_t (*)(uint64_t, int16x8_t *, uint64_t, int16x8_t *, uint64_t, _DWORD *, int *))MEMORY[0x1E0DE62D0];
  v38 = atomic_load(&WTF::URLParser::internationalDomainNameTranscoder(void)::onceFlag);
  if (v38 != -1)
  {
    v56.i64[0] = (uint64_t)&v62;
    v63[0] = &v56;
    std::__call_once(&WTF::URLParser::internationalDomainNameTranscoder(void)::onceFlag, v63, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::URLParser::internationalDomainNameTranscoder(void)::$_0 &&>>);
  }
  v39 = (WTF::URLHelpers *)v37(WTF::URLParser::internationalDomainNameTranscoder(void)::encoder, v36, v5, &v56, 2048, v54, &v55);
  if (v55 > 0 || (v6 ? (v40 = -1) : (v40 = -64), (v54[1] & v40) != 0))
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 8) = 0;
    v14 = v60;
    if (v60 == -1)
      goto LABEL_7;
LABEL_6:
    ((void (*)(int16x8_t *, int16x8_t **))off_1E35724D8[v14])(&v56, &v57);
    goto LABEL_7;
  }
  v41 = (int)v39;
  if (v39 >= 0x801)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  if ((int)v39 == v5)
  {
    if (!(_DWORD)v39)
      goto LABEL_85;
    if ((_DWORD)v39 == 1)
    {
      if (v36->u16[0] == v56.u16[0])
        goto LABEL_85;
    }
    else
    {
      switch(31 - __clz((_DWORD)v39 - 1))
      {
        case 0u:
          if (v36->i32[0] == v56.i32[0])
            goto LABEL_85;
          goto LABEL_43;
        case 1u:
          if (v36->i32[0] == v56.i32[0]
            && *(__int32 *)((char *)&v36->i32[-1] + 2 * (int)v39) == *(int *)((char *)&v55 + 2 * (int)v39))
          {
            goto LABEL_85;
          }
          goto LABEL_43;
        case 2u:
          if (v36->i64[0] == v56.i64[0]
            && *(uint64_t *)((char *)&v36->i64[-1] + 2 * (int)v39) == *(_QWORD *)((char *)&v54[6] + 2 * (int)v39))
          {
            goto LABEL_85;
          }
          goto LABEL_43;
        case 3u:
          v50 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)((char *)v36 + 2 * (int)v39 - 16), *(int16x8_t *)((char *)&v54[4] + 2 * (int)v39)), (int8x16_t)vceqq_s16(*v36, v56));
          v50.i16[0] = vminvq_u16(v50);
          if (!v50.i32[0])
            goto LABEL_43;
          goto LABEL_85;
        default:
          v51 = (uint16x8_t)vceqq_s16(*v36, v56);
          v51.i16[0] = vminvq_u16(v51);
          if (!v51.i32[0])
            goto LABEL_43;
          if (v39 < 8)
            goto LABEL_85;
          v52 = v39 & 7;
          break;
      }
      while (1)
      {
        v53 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v36 + 2 * v52), *(int16x8_t *)((char *)&v56 + 2 * v52));
        v53.i16[0] = vminvq_u16(v53);
        if (!v53.i32[0])
          break;
        v52 += 8;
        if (v52 >= v39)
          goto LABEL_85;
      }
    }
  }
LABEL_43:
  if (v6)
    goto LABEL_44;
  WTF::URLHelpers::loadIDNAllowedScriptList(v39);
  LOBYTE(v63[0]) = 0;
  BYTE4(v63[0]) = 0;
  if (!(_DWORD)v41)
    goto LABEL_44;
  v42 = 0;
  while (1)
  {
    v43 = v42 + 1;
    v44 = v56.u16[v42];
    if ((v44 & 0xFC00) != 0xD800 || v43 == v41)
    {
      ++v42;
    }
    else
    {
      if (v43 >= v41)
        goto LABEL_88;
      v46 = v56.u16[v43];
      v47 = (v46 & 0xFC00) == 56320;
      v48 = v46 + (v44 << 10) - 56613888;
      if (v47)
        v44 = v48;
      if (v47)
        v42 += 2;
      else
        ++v42;
    }
    v62 = 0;
    Script = uscript_getScript();
    if (v62
      || Script < 0
      || Script > 254
      || ((*((_DWORD *)&WTF::URLHelpers::allowedIDNScriptBits + (Script >> 5)) >> Script) & 1) == 0
      || WTF::URLHelpers::isLookalikeCharacter((unint64_t)v63, v44))
    {
      break;
    }
    LODWORD(v63[0]) = v44;
    BYTE4(v63[0]) = 1;
    if (v42 >= v41)
      goto LABEL_44;
  }
  if ((WTF::URLHelpers::allCharactersAllowedByTLDRules((uint64_t)&v56, v41) & 1) != 0)
  {
LABEL_44:
    WTF::String::String((int **)v3, &v56, v41);
    goto LABEL_86;
  }
LABEL_85:
  *(_QWORD *)v3 = 0;
LABEL_86:
  *(_BYTE *)(v3 + 8) = 1;
  v14 = v60;
  if (v60 != -1)
    goto LABEL_6;
LABEL_7:
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
    {
      WTF::StringImpl::~StringImpl(v61, v7, v8, v9, v10, v11, v12, v13);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v61 -= 2;
    }
  }
}

uint64_t WTF::URLHelpers::allCharactersAllowedByTLDRules(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v15;
  uint64_t v18;
  int v19;
  int v21;
  int v22;
  uint64_t v24;
  int v25;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  uint64_t v48;
  uint64_t v49;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v60;
  uint64_t v61;

  if (!a2)
  {
    __break(1u);
    return result;
  }
  v2 = a2 - 1;
  if (*(_WORD *)(result + 2 * (a2 - 1)) != 46)
    v2 = a2;
  if (v2 < 4)
    return 0;
  v3 = result + 2 * v2;
  if (*(_DWORD *)(v3 - 6) == 71303214 && *(_WORD *)(v3 - 2) == 1092)
  {
    v11 = 2 * v2;
    while (1)
    {
      v12 = *(unsigned __int16 *)(result - 8 + v11);
      if (v12 != 1105 && (v12 - 1072) >= 0x20 && v12 != 45 && (v12 - 48) > 9)
        break;
      v11 -= 2;
      if (v11 == 6)
        return 1;
    }
    return v12 == 46;
  }
  if (v2 < 5)
  {
LABEL_71:
    v21 = *(_DWORD *)(v3 - 6);
    v22 = *(unsigned __int16 *)(v3 - 2);
    if (v21 != 70320174 || v22 != 1075)
      return 0;
    v24 = 2 * v2;
    while (1)
    {
      v25 = *(unsigned __int16 *)(result - 8 + v24);
      if (v25 != 1100
        && (v25 - 1072) >= 0x1B
        && ((v25 - 1102) > 0xF || ((1 << (v25 - 78)) & 0x8007) == 0)
        && v25 != 45
        && (v25 - 48) > 9)
      {
        break;
      }
      v24 -= 2;
      if (v24 == 6)
        return 1;
    }
    return v25 == 46;
  }
  if (*(_QWORD *)(v3 - 8) == 0x44104430440002ELL)
  {
    v15 = 2 * v2;
    while (1)
    {
      v12 = *(unsigned __int16 *)(result - 10 + v15);
      if (v12 != 1105 && (v12 - 1072) >= 0x20 && v12 != 45 && (v12 - 48) > 9)
        break;
      v15 -= 2;
      if (v15 == 8)
        return 1;
    }
    return v12 == 46;
  }
  if (v2 >= 8)
  {
    if (*(_QWORD *)(v3 - 14) == 0x441043E043C002ELL && *(_QWORD *)(v3 - 8) == 0x4300432043A0441)
    {
      v33 = 2 * v2;
      v34 = result - 16;
      result = 1;
      while (1)
      {
        v12 = *(unsigned __int16 *)(v34 + v33);
        if (v12 != 1105 && (v12 - 1072) >= 0x20 && v12 != 45 && (v12 - 48) > 9)
          break;
        v33 -= 2;
        if (v33 == 14)
          return result;
      }
      return v12 == 46;
    }
    v6 = v3 - 10;
    if (*(_QWORD *)(v3 - 10) != 0x44204350434002ELL || *(_WORD *)(v3 - 2) != 1080)
    {
      if (*(_QWORD *)(v3 - 14) == 0x43B043D043E002ELL && *(_QWORD *)(v3 - 8) == 0x43D04390430043BLL)
      {
        v9 = 2 * v2;
        v10 = result - 16;
        result = 1;
        while (1)
        {
          v12 = *(unsigned __int16 *)(v10 + v9);
          if (v12 != 1105 && (v12 - 1072) >= 0x20 && v12 != 45 && (v12 - 48) > 9)
            break;
          v9 -= 2;
          if (v9 == 14)
            return result;
        }
        return v12 == 46;
      }
      goto LABEL_60;
    }
LABEL_95:
    v30 = 2 * v2;
    v31 = result - 12;
    result = 1;
    while (1)
    {
      v12 = *(unsigned __int16 *)(v31 + v30);
      if (v12 != 1105 && (v12 - 1072) >= 0x20 && v12 != 45 && (v12 - 48) > 9)
        break;
      v30 -= 2;
      if (v30 == 10)
        return result;
    }
    return v12 == 46;
  }
  if (v2 <= 5)
    goto LABEL_64;
  v6 = v3 - 10;
  if (*(_QWORD *)(v3 - 10) == 0x44204350434002ELL && *(_WORD *)(v3 - 2) == 1080)
    goto LABEL_95;
LABEL_60:
  v18 = *(_QWORD *)v6;
  v19 = *(unsigned __int16 *)(v6 + 8);
  if (v18 == 0x43904300441002ELL && v19 == 1090)
  {
    v39 = 2 * v2;
    v40 = result - 12;
    result = 1;
    while (1)
    {
      v12 = *(unsigned __int16 *)(v40 + v39);
      if (v12 != 1105 && (v12 - 1072) >= 0x20 && v12 != 45 && (v12 - 48) > 9)
        break;
      v39 -= 2;
      if (v39 == 10)
        return result;
    }
    return v12 == 46;
  }
LABEL_64:
  if (*(_QWORD *)(v3 - 8) != 0x4330440043E002ELL)
  {
    if (*(_QWORD *)(v3 - 8) == 0x43B04350431002ELL)
    {
      v42 = 2 * v2;
      v43 = result - 10;
      result = 1;
      while (1)
      {
        v44 = *(unsigned __int16 *)(v43 + v42);
        if ((v44 - 1072) >= 0x20)
        {
          v45 = (v44 - 1105) > 0xD || ((1 << (v44 - 81)) & 0x2021) == 0;
          if (v45 && v44 != 8217 && v44 != 45 && (v44 - 48) > 9)
            break;
        }
        v42 -= 2;
        if (v42 == 8)
          return result;
      }
      return v44 == 46;
    }
    if (*(_QWORD *)(v3 - 8) != 0x4370430049B002ELL)
    {
      switch(*(_QWORD *)(v3 - 8))
      {
        case 0x440043A0443002ELL:
          v52 = 2 * v2;
          v53 = result - 10;
          result = 1;
          while (1)
          {
            v25 = *(unsigned __int16 *)(v53 + v52);
            if ((v25 - 1072) >= 0x20)
            {
              v54 = (v25 - 1110) > 0x3B
                 || ((1 << (v25 - 86)) & 0x800000000000003) == 0;
              if (v54 && v25 != 1028 && v25 != 1105 && v25 != 45 && (v25 - 48) > 9)
                break;
            }
            v52 -= 2;
            if (v52 == 8)
              return result;
          }
          break;
        case 0x43104400441002ELL:
          v55 = 2 * v2;
          v56 = result - 10;
          result = 1;
          while (1)
          {
            v25 = *(unsigned __int16 *)(v56 + v55);
            if ((v25 - 1072) >= 9
              && (v25 - 1082) >= 0xF
              && ((v25 - 1106) > 0xD || ((1 << (v25 - 82)) & 0x23C1) == 0)
              && v25 != 45
              && (v25 - 48) > 9)
            {
              break;
            }
            v55 -= 2;
            if (v55 == 8)
              return result;
          }
          break;
        case 0x434043A043C002ELL:
          v60 = 2 * v2;
          v61 = result - 10;
          result = 1;
          while (1)
          {
            v25 = *(unsigned __int16 *)(v61 + v60);
            if ((v25 - 1072) >= 9
              && (v25 - 1082) >= 0xF
              && ((v25 - 1107) > 0xC || ((1 << (v25 - 83)) & 0x12E5) == 0)
              && v25 != 45
              && (v25 - 48) > 9)
            {
              break;
            }
            v60 -= 2;
            if (v60 == 8)
              return result;
          }
          break;
        case 0x43D043E043C002ELL:
          return WTF::URLHelpers::isSecondLevelDomainNameAllowedByTLDRules<WTF::URLHelpers::allCharactersAllowedByTLDRules(std::span<char16_t const,18446744073709551615ul>)::$_5>(result, v2 - 4);
        default:
          goto LABEL_71;
      }
      return v25 == 46;
    }
    v48 = 2 * v2;
    v49 = result - 10;
    result = 1;
    while (1)
    {
      v25 = *(unsigned __int16 *)(v49 + v48);
      if ((v25 - 1072) >= 0x20)
      {
        if (*(unsigned __int16 *)(v49 + v48) <= 0x492u)
        {
          if (v25 == 1105 || v25 == 1110)
            goto LABEL_160;
        }
        else
        {
          v51 = (v25 - 1171) > 0x28 || ((1 << (v25 + 109)) & 0x10050010101) == 0;
          if (!v51 || v25 == 1241 || v25 == 1257)
            goto LABEL_160;
        }
        if (v25 != 45 && (v25 - 48) > 9)
          return v25 == 46;
      }
LABEL_160:
      v48 -= 2;
      if (v48 == 8)
        return result;
    }
  }
  v36 = 2 * v2;
  v37 = result - 10;
  result = 1;
  while (1)
  {
    v12 = *(unsigned __int16 *)(v37 + v36);
    if (v12 != 1105 && (v12 - 1072) >= 0x20 && v12 != 45 && (v12 - 48) > 9)
      break;
    v36 -= 2;
    if (v36 == 8)
      return result;
  }
  return v12 == 46;
}

void WTF::URLHelpers::mapHostNames(int **this@<X0>, uint64_t a2@<X1>, int **a3@<X8>)
{
  int *v6;
  size_t v7;
  size_t v8;
  int8x16_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  WTF *v38;
  unsigned int v39;
  char v40;
  int *v41;

  if (a2)
  {
    if (WTF::String::containsOnlyASCII((WTF::String *)this))
    {
      v6 = *this;
      if (*this)
        *v6 += 2;
      *a3 = v6;
      return;
    }
    LOBYTE(v38) = 0;
    v40 = 0;
    WTF::URLHelpers::applyHostNameFunctionToURLString(this, a2, (uint64_t)&v38);
    if (!v40)
      goto LABEL_27;
  }
  else
  {
    LOBYTE(v38) = 0;
    v40 = 0;
    WTF::URLHelpers::applyHostNameFunctionToURLString(this, 0, (uint64_t)&v38);
    if (!v40)
    {
LABEL_27:
      v37 = *this;
      if (*this)
        *v37 += 2;
      *a3 = v37;
      return;
    }
  }
  if (v39)
  {
    v14 = *this;
    if (v14)
      *v14 += 2;
    *a3 = v14;
    while (1)
    {
      if (!v39)
        goto LABEL_31;
      v15 = v39 - 1;
      v16 = (unsigned int *)((char *)v38 + 16 * v15);
      v7 = *v16;
      v8 = v16[1];
      v17 = *((_QWORD *)v16 + 1);
      *((_QWORD *)v16 + 1) = 0;
      v39 = v15;
      if (v17)
      {
        v9 = *(int8x16_t **)(v17 + 8);
        v18 = *(unsigned int *)(v17 + 4);
        v19 = ((unint64_t)*(unsigned int *)(v17 + 16) >> 2) & 1;
        if (v14)
          goto LABEL_17;
      }
      else
      {
        v9 = 0;
        v18 = 0;
        v19 = 1;
        if (v14)
        {
LABEL_17:
          WTF::StringImpl::replace(v14, v7, v8, v9, v18 | (v19 << 32), &v41);
          v20 = v41;
          *a3 = v41;
          if (*v14 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, (WTF::AtomStringImpl *)v7, v8, (uint64_t)v9, v10, v11, v12, v13);
            WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
          }
          else
          {
            *v14 -= 2;
          }
          v14 = v20;
          goto LABEL_23;
        }
      }
      *a3 = 0;
LABEL_23:
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v17, (WTF::AtomStringImpl *)v7, v8, (uint64_t)v9, v10, v11, v12, v13);
          WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
        }
        else
        {
          *(_DWORD *)v17 -= 2;
        }
      }
      if (!v40)
      {
        __break(1u);
        return;
      }
    }
  }
  *a3 = 0;
LABEL_31:
  if (v38)
    WTF::fastFree((unint64_t)v38, (void *)v7, v8, (uint64_t)v9, v10, v11, v12, v13);
}

void WTF::URLHelpers::applyHostNameFunctionToURLString(int **a1, uint64_t a2, uint64_t a3)
{
  int *v4;
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  char v9;
  const char *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  char v15;
  const char *v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v27;
  int v28;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int v39;
  unint64_t v40;
  int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  int *v46;
  unsigned __int16 *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned __int16 *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  BOOL v55;
  uint64_t v56;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  unsigned int v63;
  unint64_t v64;
  unsigned __int8 *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v71;
  unsigned int v73;
  unint64_t v74;
  int v76;
  uint64_t v77;
  unint64_t v78;
  int16x8_t *v79;
  unint64_t v80;
  unint64_t v81;
  int16x8_t v82;
  int8x16_t v83;
  int16x8_t *v84;
  __int8 *v85;
  _BYTE *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  int16x8_t v92;

  v4 = *a1;
  if (v4)
  {
    v6 = v4[1];
    if (v6)
    {
      v7 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
      if ((v4[4] & 4) == 0)
      {
        v8 = v4[1];
        v9 = 1;
        v10 = "mailto";
        while (1)
        {
          v12 = *v7++;
          v11 = v12;
          if ((v9 & 1) != 0)
          {
            if (v11 < 0x21)
            {
              v9 = 1;
              goto LABEL_6;
            }
          }
          else if (v11 <= 0xD && ((1 << v11) & 0x2600) != 0)
          {
            v9 = 0;
            goto LABEL_6;
          }
          if (!*v10)
            goto LABEL_32;
          if ((v11 | 0x20) != (unsigned __int16)*v10)
            goto LABEL_106;
          v9 = 0;
          ++v10;
LABEL_6:
          if (!--v8)
            goto LABEL_106;
        }
      }
      v14 = v4[1];
      v15 = 1;
      v16 = "mailto";
      while (1)
      {
        v17 = *(unsigned __int8 *)v7;
        v7 = (unsigned __int16 *)((char *)v7 + 1);
        v11 = v17;
        if ((v15 & 1) != 0)
        {
          if (v11 < 0x21)
          {
            v15 = 1;
            goto LABEL_20;
          }
        }
        else if (v11 <= 0xD && ((1 << v11) & 0x2600) != 0)
        {
          v15 = 0;
          goto LABEL_20;
        }
        if (!*v16)
          break;
        if ((v11 | 0x20) != *v16)
          goto LABEL_106;
        v15 = 0;
        ++v16;
LABEL_20:
        if (!--v14)
          goto LABEL_106;
      }
LABEL_32:
      if (v11 == 58)
      {
        LODWORD(v19) = 0;
        while (1)
        {
          v20 = v19;
          v21 = v4[4];
          v22 = *((_QWORD *)v4 + 1);
          v23 = v4[1];
          if ((v21 & 4) != 0)
          {
            if (v23 <= v19)
              return;
            while (1)
            {
              v27 = *(unsigned __int8 *)(v22 + v20) - 34;
              v61 = v27 > 0x1E;
              v28 = (1 << v27) & 0x60000001;
              if (!v61 && v28 != 0)
                break;
              if (v23 == ++v20)
                return;
            }
          }
          else
          {
            if (v23 <= v19)
              return;
            while (1)
            {
              v24 = *(unsigned __int16 *)(v22 + 2 * v20) - 34;
              v61 = v24 > 0x1E;
              v25 = (1 << v24) & 0x60000001;
              if (!v61 && v25 != 0)
                break;
              if (v23 == ++v20)
                return;
            }
          }
          if (v20 == -1)
            return;
          if (v23 <= v20)
          {
            v31 = v20 + 1;
            goto LABEL_62;
          }
          if ((v21 & 4) != 0)
            v30 = *(unsigned __int8 *)(v22 + v20);
          else
            v30 = *(unsigned __int16 *)(v22 + 2 * v20);
          v31 = v20 + 1;
          if (v30 != 64)
          {
            if (v30 != 63)
            {
              while (1)
              {
LABEL_62:
                v32 = v31;
                if ((v21 & 4) != 0)
                {
                  if (v23 <= v31)
                    return;
                  while (1)
                  {
                    v34 = *(unsigned __int8 *)(v22 + v32);
                    if (v34 == 34 || v34 == 92)
                      break;
                    if (v23 == ++v32)
                      return;
                  }
                }
                else
                {
                  if (v23 <= v31)
                    return;
                  while (1)
                  {
                    v33 = *(unsigned __int16 *)(v22 + 2 * v32);
                    if (v33 == 34 || v33 == 92)
                      break;
                    if (v23 == ++v32)
                      return;
                  }
                }
                if (v32 == -1)
                  break;
                if (v23 <= v32)
                {
                  LODWORD(v19) = v32 + 1;
                }
                else
                {
                  if ((v21 & 4) != 0)
                    v35 = *(unsigned __int8 *)(v22 + v32);
                  else
                    v35 = *(unsigned __int16 *)(v22 + 2 * v32);
                  LODWORD(v19) = v32 + 1;
                  if (v35 == 34)
                    goto LABEL_104;
                }
                v31 = v32 + 2;
                if ((_DWORD)v19 == v6)
                  return;
              }
            }
            return;
          }
          if ((v21 & 4) != 0)
          {
            if (v23 > v31)
            {
              v19 = (v20 + 1);
              do
              {
                v39 = *(unsigned __int8 *)(v22 + v19);
                v61 = v39 > 0x3F;
                v40 = (1 << v39) & 0xC000100000000000;
                if (!v61 && v40 != 0)
                  goto LABEL_99;
              }
              while (v23 != ++v19);
            }
          }
          else if (v23 > v31)
          {
            v19 = (v20 + 1);
            do
            {
              v36 = *(unsigned __int16 *)(v22 + 2 * v19);
              v61 = v36 > 0x3F;
              v37 = (1 << v36) & 0xC000100000000000;
              if (!v61 && v37 != 0)
                goto LABEL_99;
            }
            while (v23 != ++v19);
          }
          v19 = -1;
LABEL_99:
          if (v19 == -1)
            v42 = v6;
          else
            v42 = v19;
          WTF::URLHelpers::collectRangesThatNeedMapping(a1, v31, v42 - v31, a3);
          if (v19 != -1)
          {
            v4 = *a1;
LABEL_104:
            if (v4)
              continue;
          }
          return;
        }
      }
    }
LABEL_106:
    v43 = WTF::StringImpl::find((uint64_t)v4, (int8x16_t *)"://", 3uLL, 0);
    if (v43 != -1)
    {
      v45 = v43 + 3;
      v46 = *a1;
      if (!*a1)
      {
        v58 = 0;
        goto LABEL_200;
      }
      v47 = (unsigned __int16 *)*((_QWORD *)v46 + 1);
      v48 = v46[1];
      v49 = v46[4];
      if (!(_DWORD)v48)
      {
        v59 = 0;
        v60 = (v43 + 3);
        v58 = 0;
        v61 = 0;
        if ((v49 & 4) == 0)
        {
LABEL_153:
          if (!v61)
            goto LABEL_166;
          v62 = v60;
          while (1)
          {
            v73 = v47[v62];
            v61 = v73 > 0x3F;
            v74 = (1 << v73) & 0x8400800800000000;
            if (!v61 && v74 != 0)
              break;
            if (v59 == ++v62)
              goto LABEL_162;
          }
LABEL_163:
          if (v62 == -1)
            v58 = v48;
          else
            v58 = v62;
LABEL_166:
          if ((_DWORD)v48)
          {
            v76 = (v49 >> 2) & 1;
            if (v58 >= v48)
              v77 = v48;
            else
              v77 = v58;
            if (v76)
            {
              if (v77 > v45)
              {
                v86 = (char *)v47 + v60;
                v87 = v77 - v60;
                v55 = (unint64_t)(v77 - v60) >= 0x10;
                v88 = 16;
                if (!v55)
                  v88 = v87;
                if (v88)
                {
                  v89 = v88;
                  v90 = v86;
                  while (*v90 != 64)
                  {
                    ++v90;
                    if (!--v89)
                      goto LABEL_189;
                  }
                }
                else
                {
LABEL_189:
                  if (v87 < 0x11)
                    goto LABEL_200;
                  v90 = memchr(&v86[v88], 64, v87 - v88);
                  if (!v90)
                    goto LABEL_200;
                }
                v91 = v90 - (_BYTE *)v47;
                goto LABEL_198;
              }
            }
            else if (v77 > v45)
            {
              v78 = v77 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v76 & 1) << 32);
              v79 = (int16x8_t *)&v47[v60];
              v80 = (unint64_t)&v47[v78];
              v81 = v80 - (_QWORD)v79;
              if ((uint64_t)(v80 - (_QWORD)v79) <= -2)
              {
                __break(1u);
                return;
              }
              if (v81 <= 0x3E)
              {
                while (v79->i16[0] != 64)
                {
                  v79 = (int16x8_t *)((char *)v79 + 2);
                  v81 -= 2;
                  if (!v81)
                    goto LABEL_200;
                }
              }
              else
              {
                if ((unint64_t)&v79->u64[1] + 6 >= v80)
                {
                  v84 = v79;
LABEL_193:
                  if ((unint64_t)v84 >= v80)
                    goto LABEL_200;
                  v79 = (int16x8_t *)(v80 - 16);
                  v92.i64[0] = 0x40004000400040;
                  v92.i64[1] = 0x40004000400040;
                  v83 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v80 - 16), v92);
                  v92.i16[0] = vmaxvq_u16((uint16x8_t)v83);
                  if (!v92.i32[0])
                    goto LABEL_200;
                }
                else
                {
                  v82.i64[0] = 0x40004000400040;
                  v82.i64[1] = 0x40004000400040;
                  while (1)
                  {
                    v83 = (int8x16_t)vceqq_s16(*v79, v82);
                    LOWORD(v44) = vmaxvq_u16((uint16x8_t)v83);
                    if (v44)
                      break;
                    v84 = v79 + 1;
                    v85 = &v79[1].i8[14];
                    ++v79;
                    if ((unint64_t)v85 >= v80)
                      goto LABEL_193;
                  }
                }
                v79 = (int16x8_t *)((char *)v79
                                  + 2
                                  * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v83)));
              }
              if (v79 != (int16x8_t *)v80)
              {
                v91 = ((char *)v79 - (char *)v47) >> 1;
LABEL_198:
                if (v91 != -1)
                  v45 = v91 + 1;
              }
            }
          }
LABEL_200:
          WTF::URLHelpers::collectRangesThatNeedMapping(a1, v45, v58 - v45, a3);
          return;
        }
LABEL_128:
        if (!v61)
          goto LABEL_166;
        v62 = v60;
        while (1)
        {
          v63 = *((unsigned __int8 *)v47 + v62);
          v61 = v63 > 0x3F;
          v64 = (1 << v63) & 0x8400800800000000;
          if (!v61 && v64 != 0)
            goto LABEL_163;
          if (v59 == ++v62)
          {
LABEL_162:
            v58 = v48;
            goto LABEL_166;
          }
        }
      }
      v50 = v43;
      if (v48 <= v43)
        v50 = v48;
      if ((v49 & 4) == 0)
      {
        if (v50)
        {
          v51 = v47;
          do
          {
            v53 = *v51++;
            v52 = v53;
            v54 = (v53 | 0x20) - 97;
            v55 = v53 - 48 >= 0xA && v54 >= 0x1A;
            if (v55)
            {
              v61 = v52 > 0x2E;
              v56 = (1 << v52) & 0x680000000000;
              if (v61 || v56 == 0)
                return;
            }
          }
          while (--v50);
        }
LABEL_152:
        v59 = v48;
        v60 = (v43 + 3);
        v58 = v48;
        v61 = v48 > v45;
        if ((v49 & 4) == 0)
          goto LABEL_153;
        goto LABEL_128;
      }
      if (!v50)
        goto LABEL_152;
      v66 = (unsigned __int8 *)v47;
      while (1)
      {
        v68 = *v66++;
        v67 = v68;
        v69 = (v68 | 0x20) - 97;
        if (v68 - 48 >= 0xA && v69 >= 0x1A)
        {
          v61 = v67 > 0x2E;
          v71 = (1 << v67) & 0x680000000000;
          if (v61 || v71 == 0)
            break;
        }
        if (!--v50)
          goto LABEL_152;
      }
    }
  }
}

void WTF::URLHelpers::userVisibleURL(WTF::URLHelpers *this, const WTF::CString *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char *v10;
  int v11;
  _BOOL4 v12;
  uint64_t v13;
  char *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v20;
  char v21;
  char v22;
  char v23;
  char v24;
  BOOL v25;
  int v26;
  size_t v27;
  char *v28;
  char *v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unsigned int v38;
  char v39;
  unsigned int v40;
  char v41;
  char v42;
  _BYTE *v43;
  unsigned int v44;
  unsigned int v45;
  char *v46;
  size_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  int v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::AtomStringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  int v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int8x16_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  int v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int i;
  unsigned int v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  uint64_t v125;
  UChar32 v126;
  int v127;
  int v128;
  WTF::StringImpl *v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _WORD *v147;
  unint64_t v148;
  unsigned int v149;
  _WORD *v150;
  unint64_t v151;
  __int128 v152;
  char *v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  char *v157;
  char *v158;
  char *v159;
  unint64_t v160;
  BOOL v161;
  uint64_t v162;
  unint64_t v163;
  _WORD *v164;
  int8x16_t *v165;
  __int16 v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v169;
  int v170;
  UChar32 v171;
  char v172;
  int v173;
  int v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  __int16 v178;
  uint64_t v179;
  _WORD *v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  __int16 v184;
  uint64_t v185;
  _WORD *v186;
  unsigned __int8 *v187;
  unsigned int v188;
  unint64_t v189;
  int v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  _BYTE *v195;
  void *v196;
  _WORD *v197;
  unint64_t v198;
  unsigned int v199;
  int v200;
  unsigned int v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  void *v205;
  int v206;
  unint64_t v207;
  unsigned int v208;
  __int16 v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  void *v213;
  uint64_t v214;
  _WORD *v215;
  uint64_t v216;
  _WORD *v217;
  void *v218;
  uint8x8_t *v219;
  uint16x8_t *v220;
  unint64_t v221;
  uint8x16_t v222;
  uint16x8_t v223;
  uint16x8_t v224;
  uint8x8_t *v225;
  uint16x8_t *v226;
  unint64_t v227;
  uint8x8_t v228;
  void *v229;
  int v230;
  unsigned int v231;
  WTF::StringImpl *v232;
  char *__s;
  int v234;
  int v235;
  _BYTE v236[2052];
  __int16 v237;
  char v238;
  char v239;
  void *__src;
  uint64_t v241;
  _BYTE v242[4096];
  unsigned int v243;
  char v244;
  int8x16x2_t v245;
  int8x16x2_t v246;
  int8x16x2_t v247;

  v2 = (uint64_t *)MEMORY[0x1E0C80A78](this, a2);
  v4 = v3;
  v5 = *v2;
  if (!*v2 || (v6 = *(_QWORD *)(v5 + 8), !(_DWORD)v6) || (v7 = 3 * (int)v6, v7 != (int)v7))
  {
    *v4 = 0;
    return;
  }
  v8 = v7 + 1;
  v9 = (int)v7 + 1;
  __s = v236;
  v234 = 2048;
  v235 = v7 + 1;
  v10 = v236;
  if ((v7 + 1) >= 0x801)
  {
    if ((int)v7 <= -2)
    {
      __break(0xC471u);
      goto LABEL_290;
    }
    v10 = (char *)WTF::fastMalloc((WTF *)v8);
    v234 = v8;
    __s = v10;
  }
  if ((int)v6 >= 1)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5 + 16;
    v14 = v10;
    while (v6 > v11)
    {
      v15 = *(unsigned __int8 *)(v13 + v11);
      if (v15 == 37)
      {
        v16 = v11 + 2;
        if (v11 + 2 >= (int)v6)
          goto LABEL_11;
        v17 = v11 + 1;
        if (v6 <= v17)
          goto LABEL_290;
        v18 = *(unsigned __int8 *)(v13 + v17);
        if (v18 - 48 >= 0xA && ((v18 | 0x20) - 97) > 5u)
          goto LABEL_11;
        if (v6 <= v16)
          goto LABEL_290;
        v20 = *(unsigned __int8 *)(v13 + v16);
        if (v20 - 48 >= 0xA && ((v20 | 0x20) - 97) > 5u)
        {
LABEL_11:
          *v14 = 37;
          v10 = v14 + 1;
        }
        else
        {
          if (v18 >= 0x41)
            v21 = 9;
          else
            v21 = 0;
          v22 = v21 + v18;
          v23 = (v20 + 9) & 0xF;
          if (v20 < 0x41)
            v23 = v20 - 48;
          v24 = v23 | (16 * v22);
          if (v24 < 0)
          {
            v10 = v14 + 1;
            *v14 = v24;
          }
          else
          {
            *v14 = 37;
            v14[1] = *(_BYTE *)(v13 + v17);
            v10 = v14 + 3;
            v14[2] = *(_BYTE *)(v13 + v16);
          }
          v11 = v16;
        }
      }
      else
      {
        *v14 = v15;
        v10 = v14 + 1;
        v25 = v11 >= 3 && v15 == 45;
        v26 = !v25;
        if (((v26 | v12) & 1) == 0)
          v12 = (*(v14 - 3) & 0xDF) == 0x58 && (*(v14 - 2) & 0xDF) == 0x4E && *(v14 - 1) == 45;
      }
      ++v11;
      v14 = v10;
      if (v11 >= (int)v6)
        goto LABEL_45;
    }
    goto LABEL_290;
  }
  LOBYTE(v12) = 0;
LABEL_45:
  *v10 = 0;
  if (__s)
  {
    v27 = strlen(__s);
    WTF::fromUTF8Impl<false>((unint64_t)__s, v27, (uint64_t *)&v232);
    if (v232)
      goto LABEL_69;
    v28 = __s;
  }
  else
  {
    v28 = 0;
    v232 = 0;
  }
  v29 = &v28[v9 - ((int)v10 - (int)v28)];
  memmove(v29 - 1, v28, (int)v10 - (int)v28 + 1);
  v37 = __s;
  v38 = *(v29 - 1);
  if (!*(v29 - 1))
  {
    *__s = 0;
    v46 = __s;
    if (__s)
      goto LABEL_61;
LABEL_64:
    __src = 0;
    v49 = v232;
    v232 = 0;
    if (!v49)
      goto LABEL_69;
    goto LABEL_65;
  }
  do
  {
    while ((v38 & 0x80) == 0)
    {
      v43 = v37 + 1;
      *v37 = v38;
      v45 = *v29++;
      v38 = v45;
      ++v37;
      if (!v45)
        goto LABEL_60;
    }
    if (v38 >= 0xA0)
      v39 = 55;
    else
      v39 = 48;
    v37[1] = v39 + (v38 >> 4);
    v40 = v38 & 0xF;
    if (v40 >= 0xA)
      v41 = 55;
    else
      v41 = 48;
    v42 = v41 + v40;
    v43 = v37 + 3;
    v37[2] = v42;
    *v37 = 37;
    v44 = *v29++;
    v38 = v44;
    v37 += 3;
  }
  while (v44);
LABEL_60:
  *v43 = 0;
  v46 = __s;
  if (!__s)
    goto LABEL_64;
LABEL_61:
  v47 = strlen(v46);
  WTF::fromUTF8Impl<false>((unint64_t)v46, v47, (uint64_t *)&__src);
  v48 = (WTF::StringImpl *)__src;
  __src = 0;
  v49 = v232;
  v232 = v48;
  if (!v49)
  {
LABEL_69:
    if (!v12)
      goto LABEL_79;
LABEL_70:
    WTF::URLHelpers::mapHostNames((int **)&v232, 0, (int **)&__src);
    v73 = (WTF::StringImpl *)__src;
    if (!__src)
      goto LABEL_79;
    *(_DWORD *)__src += 2;
    v74 = v232;
    v232 = v73;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
      {
        WTF::StringImpl::~StringImpl(v74, v66, v67, v68, v69, v70, v71, v72);
        WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
        v75 = *(_DWORD *)v73 - 2;
        if (*(_DWORD *)v73 != 2)
          goto LABEL_75;
LABEL_77:
        WTF::StringImpl::~StringImpl(v73, v66, v67, v68, v69, v70, v71, v72);
        WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
        goto LABEL_79;
      }
      *(_DWORD *)v74 -= 2;
    }
    v75 = *(_DWORD *)v73 - 2;
    if (*(_DWORD *)v73 != 2)
    {
LABEL_75:
      *(_DWORD *)v73 = v75;
      goto LABEL_79;
    }
    goto LABEL_77;
  }
LABEL_65:
  v50 = *(_DWORD *)v49 - 2;
  if (*(_DWORD *)v49 != 2)
    goto LABEL_68;
  WTF::StringImpl::~StringImpl(v49, v30, v31, v32, v33, v34, v35, v36);
  WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  v49 = (WTF::StringImpl *)__src;
  __src = 0;
  if (!v49)
    goto LABEL_69;
  v50 = *(_DWORD *)v49 - 2;
  if (*(_DWORD *)v49 != 2)
  {
LABEL_68:
    *(_DWORD *)v49 = v50;
    goto LABEL_69;
  }
  WTF::StringImpl::~StringImpl(v49, v59, v60, v61, v62, v63, v64, v65);
  WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
  if (v12)
    goto LABEL_70;
LABEL_79:
  if (v232)
  {
    WTF::normalizedNFC(*((_QWORD *)v232 + 1), *((unsigned int *)v232 + 1) | ((unint64_t)((*((_DWORD *)v232 + 4) >> 2) & 1) << 32), (int **)&__src);
    v107 = __src;
    if (__src)
      goto LABEL_81;
LABEL_85:
    v107 = v232;
    if (!v232)
    {
      *v4 = 0;
      goto LABEL_117;
    }
    v108 = *(_DWORD *)v232 + 2;
    goto LABEL_87;
  }
  WTF::normalizedNFC(0, 0x100000000uLL, (int **)&__src);
  v107 = __src;
  if (!__src)
    goto LABEL_85;
LABEL_81:
  v108 = *(_DWORD *)v107;
  *(_DWORD *)v107 += 2;
  if (!v108)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v107, (WTF::AtomStringImpl *)v100, v101, v102, v103, v104, v105, v106);
    WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    v117 = *((_DWORD *)v107 + 1);
    LOBYTE(v243) = 0;
    v244 = 0;
    if (!v117)
    {
LABEL_116:
      *(_DWORD *)v107 += 2;
      *v4 = (uint64_t)v107;
      goto LABEL_117;
    }
    goto LABEL_88;
  }
LABEL_87:
  *(_DWORD *)v107 = v108;
  v117 = *((_DWORD *)v107 + 1);
  LOBYTE(v243) = 0;
  v244 = 0;
  if (!v117)
    goto LABEL_116;
LABEL_88:
  for (i = 0; i < v117; i += v128)
  {
    v119 = *((_DWORD *)v107 + 1);
    if (v119 <= i)
    {
      v122 = 0;
      if (WTF::URLHelpers::isLookalikeCharacter((unint64_t)&v243, 0))
        break;
      goto LABEL_109;
    }
    v120 = *((_QWORD *)v107 + 1);
    if ((*((_BYTE *)v107 + 16) & 4) != 0)
    {
      v122 = *(unsigned __int8 *)(v120 + i);
      v125 = *((_QWORD *)v107 + 1);
LABEL_107:
      v126 = *(unsigned __int8 *)(v125 + i);
LABEL_108:
      if (WTF::URLHelpers::isLookalikeCharacter((unint64_t)&v243, v126))
        break;
      goto LABEL_109;
    }
    v121 = *(unsigned __int16 *)(v120 + 2 * i);
    v122 = v121;
    if ((v121 & 0xF800) == 0xD800)
    {
      v122 = 0;
      if (i + 1 < v119 && (v121 & 0xFC00) == 0xD800)
      {
        v123 = *(unsigned __int16 *)(v120 + 2 * (i + 1));
        v25 = (v123 & 0xFC00) == 56320;
        v124 = (v121 << 10) - 56613888 + v123;
        if (v25)
          v122 = v124;
        else
          v122 = 0;
      }
    }
    v125 = *((_QWORD *)v107 + 1);
    if ((*((_BYTE *)v107 + 16) & 4) != 0)
      goto LABEL_107;
    v126 = *(unsigned __int16 *)(v125 + 2 * i);
    if ((v126 & 0xF800) != 0xD800)
      goto LABEL_108;
    if (i + 1 < v119
      && (v126 & 0xFC00) == 0xD800
      && (v127 = *(unsigned __int16 *)(v125 + 2 * (i + 1)), (v127 & 0xFC00) == 0xDC00))
    {
      if (WTF::URLHelpers::isLookalikeCharacter((unint64_t)&v243, (v126 << 10) - 56613888 + v127))
        break;
    }
    else if (WTF::URLHelpers::isLookalikeCharacter((unint64_t)&v243, 0))
    {
      break;
    }
LABEL_109:
    v243 = v122;
    v244 = 1;
    if (v122 < 0x10000)
      v128 = 1;
    else
      v128 = 2;
  }
  if (i == v117)
    goto LABEL_116;
  __src = v242;
  v241 = 2048;
  v147 = v242;
  v229 = v107;
  if (i >= 0x801)
  {
    if (i <= 0xA01uLL)
      v148 = 2561;
    else
      v148 = i;
    if (v148 >> 31)
    {
LABEL_292:
      __break(0xC471u);
      JUMPOUT(0x197B3C1FCLL);
    }
    v147 = (_WORD *)WTF::fastMalloc((WTF *)(2 * v148));
    LODWORD(v241) = v148;
    __src = v147;
    v107 = v229;
  }
  HIDWORD(v241) = i;
  v100 = (int8x16_t *)*((_QWORD *)v107 + 1);
  v149 = *((_DWORD *)v107 + 1);
  if ((*((_BYTE *)v107 + 16) & 4) != 0)
  {
    if (v149 < i)
      goto LABEL_290;
    v150 = &v147[i];
    if (i < 0x40)
    {
      v151 = (unint64_t)v147;
    }
    else
    {
      v151 = (unint64_t)&v147[i & 0xFFFFFFC0];
      v152 = 0uLL;
      v153 = (char *)v147;
      do
      {
        v245.val[0] = *v100;
        v154 = v100[1];
        v246.val[0] = v100[2];
        v155 = v100[3];
        v100 += 4;
        v156 = v155;
        v246.val[1] = 0uLL;
        v247.val[0] = v154;
        v245.val[1] = 0uLL;
        v157 = v153;
        vst2q_s8(v157, v245);
        v157 += 32;
        v247.val[1] = 0uLL;
        vst2q_s8(v157, v247);
        v158 = v153 + 64;
        vst2q_s8(v158, v246);
        v159 = v153 + 96;
        vst2q_s8(v159, *(int8x16x2_t *)(&v152 - 1));
        v153 += 128;
      }
      while (v153 != (char *)v151);
    }
    if ((_WORD *)v151 == v150)
      goto LABEL_160;
    v160 = (unint64_t)&v147[i - 1] - v151;
    if (v160 < 0xE
      || (v151 < (unint64_t)v100->u64 + (v160 >> 1) + 1
        ? (v161 = (unint64_t)v100 >= (v160 & 0xFFFFFFFFFFFFFFFELL) + v151 + 2)
        : (v161 = 1),
          !v161))
    {
      v164 = (_WORD *)v151;
      v165 = v100;
      goto LABEL_157;
    }
    v162 = (v160 >> 1) + 1;
    if (v160 >= 0x3E)
    {
      v163 = v162 & 0xFFFFFFFFFFFFFFE0;
      v219 = (uint8x8_t *)&v100[1];
      v220 = (uint16x8_t *)(v151 + 32);
      v221 = v162 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v222 = *(uint8x16_t *)v219[-2].i8;
        v223 = vmovl_u8(*v219);
        v224 = vmovl_high_u8(*(uint8x16_t *)v219->i8);
        v220[-2] = vmovl_u8(*(uint8x8_t *)v222.i8);
        v220[-1] = vmovl_high_u8(v222);
        *v220 = v223;
        v220[1] = v224;
        v220 += 4;
        v219 += 4;
        v221 -= 32;
      }
      while (v221);
      if (v162 == v163)
        goto LABEL_160;
      if ((v162 & 0x18) == 0)
      {
        v165 = (int8x16_t *)((char *)v100 + v163);
        v164 = (_WORD *)(v151 + 2 * v163);
        goto LABEL_157;
      }
    }
    else
    {
      v163 = 0;
    }
    v164 = (_WORD *)(v151 + 2 * (v162 & 0xFFFFFFFFFFFFFFF8));
    v165 = (int8x16_t *)((char *)v100 + (v162 & 0xFFFFFFFFFFFFFFF8));
    v225 = (uint8x8_t *)&v100->i8[v163];
    v226 = (uint16x8_t *)(v151 + 2 * v163);
    v227 = v163 - (v162 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v228 = *v225++;
      *v226++ = vmovl_u8(v228);
      v227 += 8;
    }
    while (v227);
    if (v162 == (v162 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_160;
    do
    {
LABEL_157:
      v166 = v165->u8[0];
      v165 = (int8x16_t *)((char *)v165 + 1);
      *v164++ = v166;
    }
    while (v164 != v150);
    goto LABEL_160;
  }
  if (v149 < i)
  {
LABEL_290:
    __break(1u);
    goto LABEL_291;
  }
  if (i)
  {
    if (i == 1)
      *v147 = v100->i16[0];
    else
      memcpy(v147, v100, 2 * i);
  }
LABEL_160:
  if (i < v117)
  {
    while (2)
    {
      v168 = *((_DWORD *)v107 + 1);
      if (v168 <= i)
      {
        v171 = 0;
        v172 = 1;
        goto LABEL_175;
      }
      v169 = *((_QWORD *)v107 + 1);
      if ((*((_BYTE *)v107 + 16) & 4) != 0)
      {
        v171 = *(unsigned __int8 *)(v169 + i);
        v172 = 1;
        goto LABEL_175;
      }
      v170 = *(unsigned __int16 *)(v169 + 2 * i);
      if ((v170 & 0xF800) != 0xD800)
      {
        v172 = 1;
        v171 = *(unsigned __int16 *)(v169 + 2 * i);
        goto LABEL_175;
      }
      v171 = 0;
      v172 = 1;
      if (i + 1 >= v168)
      {
LABEL_175:
        v174 = 1;
LABEL_176:
        v230 = v174;
      }
      else
      {
        v230 = 1;
        if ((v170 & 0xFC00) == 0xD800)
        {
          v173 = *(unsigned __int16 *)(v169 + 2 * (i + 1));
          if ((v173 & 0xFC00) == 0xDC00)
          {
            v172 = 0;
            v171 = (v170 << 10) - 56613888 + v173;
            v174 = 2;
            goto LABEL_176;
          }
          v171 = 0;
          goto LABEL_175;
        }
      }
      v175 = v171;
      v231 = v171;
      if (WTF::URLHelpers::isLookalikeCharacter((unint64_t)&v243, v171))
      {
        if (v175 <= 0x7F)
        {
          LOBYTE(v237) = v175;
          v176 = 1;
          goto LABEL_202;
        }
        if (v175 <= 0x7FF)
        {
          LOBYTE(v237) = (v175 >> 6) | 0xC0;
          HIBYTE(v237) = v175 & 0x3F | 0x80;
          v176 = 2;
          goto LABEL_202;
        }
        if (v175 >> 11 < 0x1B || (v175 & 0xFFFFE000) == 0xE000)
        {
          LOBYTE(v237) = (v175 >> 12) | 0xE0;
          HIBYTE(v237) = (v175 >> 6) & 0x3F | 0x80;
          v238 = v175 & 0x3F | 0x80;
          v176 = 3;
LABEL_202:
          v187 = (unsigned __int8 *)&v237;
          v188 = HIDWORD(v241);
          while (2)
          {
            v189 = v188;
            v190 = v241;
            if (v188 != (_DWORD)v241)
            {
              v197 = __src;
              *((_WORD *)__src + v188) = 37;
              goto LABEL_222;
            }
            v191 = v188 + 1;
            v192 = v189 + (v189 >> 2);
            if (v192 >= 0x10)
              v193 = v192 + 1;
            else
              v193 = 16;
            if (v193 <= v191)
              v194 = v189 + 1;
            else
              v194 = v193;
            v195 = __src;
            if (v194 < 0x801)
            {
              __src = v242;
              LODWORD(v241) = 2048;
              memcpy(v242, v195, 2 * v189);
              if (v242 == v195)
                goto LABEL_221;
            }
            else
            {
              if (v194 >> 31)
                goto LABEL_292;
              v196 = (void *)WTF::fastMalloc((WTF *)(2 * v194));
              LODWORD(v241) = v194;
              __src = v196;
              memcpy(v196, v195, 2 * v189);
              if (v242 == v195)
              {
LABEL_221:
                v188 = HIDWORD(v241);
                v197 = __src;
                *((_WORD *)__src + HIDWORD(v241)) = 37;
                v190 = v241;
LABEL_222:
                v198 = v188 + 1;
                HIDWORD(v241) = v188 + 1;
                v199 = *v187;
                if (v199 >= 0xA0)
                  v200 = 55;
                else
                  v200 = 48;
                v201 = v200 + (v199 >> 4);
                if ((_DWORD)v198 != v190)
                {
                  v197[v198] = v201;
                  v206 = v198;
                  goto LABEL_242;
                }
                v202 = v198 + (v198 >> 2);
                if (v202 >= 0x10)
                  v203 = v202 + 1;
                else
                  v203 = 16;
                if (v203 <= v198 + 1)
                  v204 = v198 + 1;
                else
                  v204 = v203;
                if (v204 < 0x801)
                {
                  __src = v242;
                  LODWORD(v241) = 2048;
                  memcpy(v242, v197, 2 * v198);
                  if (v242 == (_BYTE *)v197)
                    goto LABEL_241;
                }
                else
                {
                  if (v204 >> 31)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197B3C204);
                  }
                  v205 = (void *)WTF::fastMalloc((WTF *)(2 * v204));
                  LODWORD(v241) = v204;
                  __src = v205;
                  memcpy(v205, v197, 2 * v198);
                  if (v242 == (_BYTE *)v197)
                  {
LABEL_241:
                    v206 = HIDWORD(v241);
                    v197 = __src;
                    *((_WORD *)__src + HIDWORD(v241)) = v201;
                    v190 = v241;
LABEL_242:
                    v207 = (v206 + 1);
                    HIDWORD(v241) = v206 + 1;
                    v208 = v199 & 0xF;
                    if (v208 >= 0xA)
                      v209 = 55;
                    else
                      v209 = 48;
                    if ((_DWORD)v207 != v190)
                    {
                      v188 = v206 + 2;
                      v197[v207] = v209 + v208;
                      HIDWORD(v241) = v188;
                      ++v187;
                      if (!--v176)
                        goto LABEL_162;
                      continue;
                    }
                    v210 = v207 + (v207 >> 2);
                    if (v210 >= 0x10)
                      v211 = v210 + 1;
                    else
                      v211 = 16;
                    if (v211 <= v207 + 1)
                      v212 = v207 + 1;
                    else
                      v212 = v211;
                    if (v212 < 0x801)
                    {
                      __src = v242;
                      LODWORD(v241) = 2048;
                      memcpy(v242, v197, 2 * v207);
                      if (v242 == (_BYTE *)v197)
                        goto LABEL_260;
                    }
                    else
                    {
                      if (v212 >> 31)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197B3C20CLL);
                      }
                      v213 = (void *)WTF::fastMalloc((WTF *)(2 * v212));
                      LODWORD(v241) = v212;
                      __src = v213;
                      memcpy(v213, v197, 2 * v207);
                      if (v242 == (_BYTE *)v197)
                      {
LABEL_260:
                        v188 = HIDWORD(v241) + 1;
                        *((_WORD *)__src + HIDWORD(v241)) = v209 + v208;
                        HIDWORD(v241) = v188;
                        ++v187;
                        if (!--v176)
                          goto LABEL_162;
                        continue;
                      }
                    }
                    if (__src == v197)
                    {
                      __src = 0;
                      LODWORD(v241) = 0;
                    }
                    WTF::fastFree((unint64_t)v197, v100, v101, v102, v103, v104, v105, v106);
                    goto LABEL_260;
                  }
                }
                if (__src == v197)
                {
                  __src = 0;
                  LODWORD(v241) = 0;
                }
                WTF::fastFree((unint64_t)v197, v100, v101, v102, v103, v104, v105, v106);
                goto LABEL_241;
              }
            }
            break;
          }
          if (v195)
          {
            if (__src == v195)
            {
              __src = 0;
              LODWORD(v241) = 0;
            }
            WTF::fastFree((unint64_t)v195, v100, v101, v102, v103, v104, v105, v106);
          }
          goto LABEL_221;
        }
        if (!((v175 - 0x10000) >> 20))
        {
          LOBYTE(v237) = (v231 >> 18) | 0xF0;
          HIBYTE(v237) = (v231 >> 12) & 0x3F | 0x80;
          v238 = (v231 >> 6) & 0x3F | 0x80;
          v239 = v231 & 0x3F | 0x80;
          v176 = 4;
          goto LABEL_202;
        }
LABEL_162:
        v107 = v229;
LABEL_163:
        v167 = v231;
LABEL_164:
        v243 = v167;
        v244 = 1;
        i += v230;
        if (i >= v117)
          goto LABEL_266;
        continue;
      }
      break;
    }
    if (*((_DWORD *)v107 + 1) <= i)
    {
      v178 = 0;
      v237 = 0;
      v179 = HIDWORD(v241);
      if (HIDWORD(v241) == (_DWORD)v241)
        goto LABEL_187;
    }
    else
    {
      v177 = *((_QWORD *)v107 + 1);
      if ((*((_BYTE *)v107 + 16) & 4) == 0)
      {
        v178 = *(_WORD *)(v177 + 2 * i);
        v237 = v178;
        v179 = HIDWORD(v241);
        if (HIDWORD(v241) != (_DWORD)v241)
          goto LABEL_190;
LABEL_187:
        v180 = (_WORD *)WTF::Vector<char16_t,2048ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__src, v179 + 1, (unint64_t)&v237);
        v181 = HIDWORD(v241);
        *((_WORD *)__src + HIDWORD(v241)) = *v180;
        HIDWORD(v241) = v181 + 1;
        v167 = v231;
        if ((v172 & 1) != 0)
          goto LABEL_164;
LABEL_191:
        v182 = i + 1;
        if (*((_DWORD *)v107 + 1) <= v182)
        {
          v184 = 0;
          v237 = 0;
          v185 = HIDWORD(v241);
          if (HIDWORD(v241) != (_DWORD)v241)
            goto LABEL_263;
        }
        else
        {
          v183 = *((_QWORD *)v107 + 1);
          if ((*((_BYTE *)v107 + 16) & 4) != 0)
          {
            v184 = *(unsigned __int8 *)(v183 + v182);
            v237 = v184;
            v185 = HIDWORD(v241);
            if (HIDWORD(v241) != (_DWORD)v241)
              goto LABEL_263;
          }
          else
          {
            v184 = *(_WORD *)(v183 + 2 * v182);
            v237 = v184;
            v185 = HIDWORD(v241);
            if (HIDWORD(v241) != (_DWORD)v241)
            {
LABEL_263:
              *((_WORD *)__src + v185) = v184;
              goto LABEL_264;
            }
          }
        }
        v186 = (_WORD *)WTF::Vector<char16_t,2048ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__src, v185 + 1, (unint64_t)&v237);
        LODWORD(v185) = HIDWORD(v241);
        *((_WORD *)__src + HIDWORD(v241)) = *v186;
LABEL_264:
        HIDWORD(v241) = v185 + 1;
        goto LABEL_163;
      }
      v178 = *(unsigned __int8 *)(v177 + i);
      v237 = v178;
      v179 = HIDWORD(v241);
      if (HIDWORD(v241) == (_DWORD)v241)
        goto LABEL_187;
    }
LABEL_190:
    *((_WORD *)__src + v179) = v178;
    HIDWORD(v241) = v179 + 1;
    v167 = v231;
    if ((v172 & 1) != 0)
      goto LABEL_164;
    goto LABEL_191;
  }
LABEL_266:
  v214 = HIDWORD(v241);
  if (!HIDWORD(v241))
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *v4 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
    goto LABEL_273;
  }
  if (HIDWORD(v241) >= 0x7FFFFFF0)
  {
LABEL_291:
    __break(0xC471u);
    JUMPOUT(0x197B3C21CLL);
  }
  v215 = __src;
  v216 = WTF::fastCompactMalloc((WTF *)(2 * HIDWORD(v241) + 20));
  v217 = (_WORD *)(v216 + 20);
  *(_DWORD *)v216 = 2;
  *(_DWORD *)(v216 + 4) = v214;
  *(_QWORD *)(v216 + 8) = v216 + 20;
  *(_DWORD *)(v216 + 16) = 0;
  *v4 = v216;
  if ((_DWORD)v214 == 1)
    *v217 = *v215;
  else
    memcpy(v217, v215, 2 * v214);
  v107 = v229;
LABEL_273:
  v218 = __src;
  if (v242 != __src && __src)
  {
    __src = 0;
    LODWORD(v241) = 0;
    WTF::fastFree((unint64_t)v218, v100, v101, v102, v103, v104, v105, v106);
  }
LABEL_117:
  if (!v107)
  {
LABEL_120:
    v129 = v232;
    v232 = 0;
    if (v129)
      goto LABEL_123;
LABEL_125:
    v138 = __s;
    if (v236 != __s)
      goto LABEL_128;
    return;
  }
  if (*(_DWORD *)v107 != 2)
  {
    *(_DWORD *)v107 -= 2;
    goto LABEL_120;
  }
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v107, (WTF::AtomStringImpl *)v100, v101, v102, v103, v104, v105, v106);
  WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
  v129 = v232;
  v232 = 0;
  if (!v129)
    goto LABEL_125;
LABEL_123:
  if (*(_DWORD *)v129 != 2)
  {
    *(_DWORD *)v129 -= 2;
    goto LABEL_125;
  }
  WTF::StringImpl::~StringImpl(v129, (WTF::AtomStringImpl *)v100, v101, v102, v103, v104, v105, v106);
  WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
  v138 = __s;
  if (v236 != __s)
  {
LABEL_128:
    if (v138)
    {
      __s = 0;
      v234 = 0;
      WTF::fastFree((unint64_t)v138, v100, v101, v102, v103, v104, v105, v106);
    }
  }
}

BOOL WTF::URLHelpers::isLookalikeCharacter(unint64_t a1, UChar32 c)
{
  _BOOL8 result;
  UBlockCode Code;
  int v6;
  int v7;
  UChar32 v8;
  BOOL v10;

  if (!u_isprint(c))
    return 1;
  if (u_isUWhiteSpace(c))
    return 1;
  if (u_hasBinaryProperty(c, UCHAR_DEFAULT_IGNORABLE_CODE_POINT))
    return 1;
  Code = ublock_getCode(c);
  result = 1;
  if (Code == UBLOCK_IPA_EXTENSIONS || Code == UBLOCK_DESERET)
    return result;
  if (c <= 8530)
  {
    if (c <= 1747)
    {
      if (c > 1416)
      {
        switch(c)
        {
          case 1460:
          case 1465:
          case 1466:
          case 1468:
          case 1473:
          case 1474:
          case 1475:
          case 1476:
          case 1524:
          case 1545:
          case 1546:
            return result;
          case 1461:
          case 1462:
          case 1463:
          case 1464:
          case 1467:
          case 1469:
          case 1470:
          case 1471:
          case 1472:
          case 1477:
          case 1478:
          case 1479:
          case 1480:
          case 1481:
          case 1482:
          case 1483:
          case 1484:
          case 1485:
          case 1486:
          case 1487:
          case 1488:
          case 1489:
          case 1490:
          case 1491:
          case 1492:
          case 1493:
          case 1494:
          case 1495:
          case 1496:
          case 1497:
          case 1498:
          case 1499:
          case 1500:
          case 1501:
          case 1502:
          case 1503:
          case 1504:
          case 1505:
          case 1506:
          case 1507:
          case 1508:
          case 1509:
          case 1510:
          case 1511:
          case 1512:
          case 1513:
          case 1514:
          case 1515:
          case 1516:
          case 1517:
          case 1518:
          case 1519:
          case 1520:
          case 1521:
          case 1522:
          case 1523:
          case 1525:
          case 1526:
          case 1527:
          case 1528:
          case 1529:
          case 1530:
          case 1531:
          case 1532:
          case 1533:
          case 1534:
          case 1535:
          case 1536:
          case 1537:
          case 1538:
          case 1539:
          case 1540:
          case 1541:
          case 1542:
          case 1543:
          case 1544:
            goto LABEL_80;
          default:
            if (((c - 1616) > 0x1A || ((1 << (c - 80)) & 0x4010001) == 0) && c != 1417)
              goto LABEL_80;
            break;
        }
        return result;
      }
      if (c <= 566)
      {
        if (c <= 447)
        {
          if ((c - 188) >= 3)
          {
            if (c == 46)
              return 0;
            goto LABEL_80;
          }
          return result;
        }
        if (c == 448 || c == 451)
          return result;
      }
      else
      {
        if (c > 774)
        {
          if ((c - 823) >= 2)
          {
            if (c == 775)
            {
              v8 = *(_DWORD *)a1;
              v10 = *(_DWORD *)a1 == 567 || v8 == 305;
              if (!*(_BYTE *)(a1 + 4) || !v10)
                return *(_BYTE *)(a1 + 4) && v8 == 1493;
            }
            else if (c != 821)
            {
              goto LABEL_80;
            }
          }
          return result;
        }
        if ((c - 567) <= 0x2A && ((1 << (c - 55)) & 0x40004000001) != 0 || c == 720)
          return result;
      }
LABEL_80:
      if ((WTF::URLHelpers::isLookalikeSequence<(UScriptCode)3>(a1, c) & 1) != 0
        || (WTF::URLHelpers::isLookalikeSequence<(UScriptCode)35>(a1, c) & 1) != 0
        || (WTF::URLHelpers::isLookalikeSequence<(UScriptCode)40>(a1, c) & 1) != 0
        || (WTF::URLHelpers::isLookalikeSequence<(UScriptCode)38>(a1, c) & 1) != 0)
      {
        return 1;
      }
      if ((c - 1611) <= 0x14)
      {
        if (*(_BYTE *)(a1 + 4))
          return ublock_getCode(*(_DWORD *)a1) != UBLOCK_ARABIC;
        return 1;
      }
      return 0;
    }
    if (c <= 7835)
    {
      if ((c - 1748) <= 0x30 && ((1 << (c + 44)) & 0x1E00010000001) != 0
        || (c - 7428) <= 0x1E && ((1 << (c - 4)) & 0x71000801) != 0)
      {
        return result;
      }
      v6 = 5941;
      goto LABEL_79;
    }
    switch(c)
    {
      case 8208:
      case 8209:
      case 8228:
      case 8231:
      case 8249:
      case 8250:
      case 8257:
      case 8260:
      case 8274:
        return result;
      case 8210:
      case 8211:
      case 8212:
      case 8213:
      case 8214:
      case 8215:
      case 8216:
      case 8217:
      case 8218:
      case 8219:
      case 8220:
      case 8221:
      case 8222:
      case 8223:
      case 8224:
      case 8225:
      case 8226:
      case 8227:
      case 8229:
      case 8230:
      case 8232:
      case 8233:
      case 8234:
      case 8235:
      case 8236:
      case 8237:
      case 8238:
      case 8239:
      case 8240:
      case 8241:
      case 8242:
      case 8243:
      case 8244:
      case 8245:
      case 8246:
      case 8247:
      case 8248:
      case 8251:
      case 8252:
      case 8253:
      case 8254:
      case 8255:
      case 8256:
      case 8258:
      case 8259:
      case 8261:
      case 8262:
      case 8263:
      case 8264:
      case 8265:
      case 8266:
      case 8267:
      case 8268:
      case 8269:
      case 8270:
      case 8271:
      case 8272:
      case 8273:
        goto LABEL_80;
      default:
        if ((c - 7885) <= 0x32 && ((1 << (c + 51)) & 0x6000000000001) != 0)
          return result;
        v7 = -7836;
        break;
    }
LABEL_63:
    if ((c + v7) >= 2)
      goto LABEL_80;
    return result;
  }
  if (c <= 12271)
  {
    if (c <= 8721)
    {
      if ((c - 8531) >= 0xD)
        goto LABEL_80;
      return result;
    }
    if (c <= 9289)
    {
      if ((c - 8722) <= 0x24 && ((1 << (c - 18)) & 0x1000000019) != 0 || c == 9023)
        return result;
      v6 = 9134;
    }
    else if (c > 10743)
    {
      if (c == 10744 || c == 11003)
        return result;
      v6 = 11005;
    }
    else
    {
      if ((c - 9585) < 2 || c == 9290)
        return result;
      v6 = 10742;
    }
    goto LABEL_79;
  }
  if (c <= 42800)
  {
    switch(c)
    {
      case 12272:
      case 12273:
      case 12274:
      case 12275:
      case 12276:
      case 12277:
      case 12278:
      case 12279:
      case 12280:
      case 12281:
      case 12282:
      case 12283:
      case 12290:
      case 12296:
      case 12308:
      case 12309:
      case 12339:
      case 12341:
        return result;
      case 12284:
      case 12285:
      case 12286:
      case 12287:
      case 12288:
      case 12289:
      case 12291:
      case 12292:
      case 12293:
      case 12294:
      case 12295:
      case 12297:
      case 12298:
      case 12299:
      case 12300:
      case 12301:
      case 12302:
      case 12303:
      case 12304:
      case 12305:
      case 12306:
      case 12307:
      case 12310:
      case 12311:
      case 12312:
      case 12313:
      case 12314:
      case 12315:
      case 12316:
      case 12317:
      case 12318:
      case 12319:
      case 12320:
      case 12321:
      case 12322:
      case 12323:
      case 12324:
      case 12325:
      case 12326:
      case 12327:
      case 12328:
      case 12329:
      case 12330:
      case 12331:
      case 12332:
      case 12333:
      case 12334:
      case 12335:
      case 12336:
      case 12337:
      case 12338:
      case 12340:
        goto LABEL_80;
      default:
        if ((c - 13230) <= 0x31 && ((1 << (c + 82)) & 0x2000001000003) != 0)
          return result;
        v7 = -12829;
        break;
    }
    goto LABEL_63;
  }
  if (c > 65293)
  {
    if (c > 128270)
    {
      if ((c - 128271) >= 5)
        goto LABEL_80;
      return result;
    }
    if ((c - 65294) < 2 || (c - 65532) < 2)
      return result;
    v6 = 65377;
    goto LABEL_79;
  }
  if (c > 65043)
  {
    if ((c - 65087) <= 0x1F && ((1 << (c - 63)) & 0xC0000001) != 0)
      return result;
    v7 = -65044;
    goto LABEL_63;
  }
  if (c == 42801 || c == 42865)
    return result;
  v6 = 42889;
LABEL_79:
  if (c != v6)
    goto LABEL_80;
  return result;
}

unint64_t WTF::URLHelpers::isLookalikeSequence<(UScriptCode)3>(unint64_t result, unsigned __int16 a2)
{
  unsigned __int16 *v2;
  int v3;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  int Script;

  if (!*(_BYTE *)(result + 4))
    return 0;
  v2 = (unsigned __int16 *)result;
  v3 = *(_DWORD *)result;
  if (*(_DWORD *)result == 47)
    return 0;
  if (a2 - 1352 <= 0x3D && ((1 << (a2 - 72)) & 0x2221000000002221) != 0)
  {
    result = uscript_getScript();
    if ((_DWORD)result != 3)
    {
      if ((unsigned __int16)(v3 - 33) >= 0x20u)
      {
        result = 1;
        if ((unsigned __int16)v3 - 94 > 0x20
          || ((1 << (v3 - 94)) & 0x1E0000007) == 0)
        {
          return result;
        }
      }
      else if ((unsigned __int16)(v3 - 35) < 0x1Eu && ((0x30801005u >> (v3 - 35)) & 1) != 0)
      {
        return 1;
      }
    }
  }
  if (!*((_BYTE *)v2 + 4))
  {
    __break(1u);
    return result;
  }
  v5 = *v2 - 1352;
  v6 = v5 > 0x3D;
  v7 = (1 << v5) & 0x2221000000002221;
  if (v6 || v7 == 0)
    return 0;
  Script = uscript_getScript();
  result = 0;
  if (Script != 3)
  {
    if ((unsigned __int16)(a2 - 33) >= 0x20u)
    {
      if ((unsigned __int16)(a2 - 94) < 0x21u)
        return (0x1FFFFFF8uLL >> (a2 - 94)) & 1;
      return 1;
    }
    if ((unsigned __int16)(a2 - 35) >= 0x1Eu)
      return 0;
    else
      return (0x30801005u >> (a2 - 35)) & 1;
  }
  return result;
}

uint64_t WTF::URLHelpers::isLookalikeSequence<(UScriptCode)35>(uint64_t result, __int16 a2)
{
  uint64_t v2;
  int v3;
  int Script;
  unsigned int v6;
  unint64_t v7;

  if (!*(_BYTE *)(result + 4))
    return 0;
  v2 = result;
  v3 = *(_DWORD *)result;
  if (*(_DWORD *)result == 47)
    return 0;
  if (a2 == 3046)
  {
    result = uscript_getScript();
    if ((_DWORD)result != 35)
    {
      if ((unsigned __int16)(v3 - 33) >= 0x20u)
      {
        result = 1;
        if ((unsigned __int16)v3 - 94 > 0x20
          || ((1 << (v3 - 94)) & 0x1E0000007) == 0)
        {
          return result;
        }
      }
      else if ((unsigned __int16)(v3 - 35) < 0x1Eu && ((0x30801005u >> (v3 - 35)) & 1) != 0)
      {
        return 1;
      }
    }
  }
  if (!*(_BYTE *)(v2 + 4))
  {
    __break(1u);
    return result;
  }
  if (*(_WORD *)v2 != 3046)
    return 0;
  Script = uscript_getScript();
  result = 0;
  if (Script != 35)
  {
    v6 = (0x30801005u >> (a2 - 35)) & 1;
    if ((unsigned __int16)(a2 - 35) >= 0x1Eu)
      v6 = 0;
    v7 = (0x1FFFFFF8uLL >> (a2 - 94)) & 1;
    if ((unsigned __int16)(a2 - 94) >= 0x21u)
      LODWORD(v7) = 1;
    if ((unsigned __int16)(a2 - 33) >= 0x20u)
      return v7;
    else
      return v6;
  }
  return result;
}

unint64_t WTF::URLHelpers::isLookalikeSequence<(UScriptCode)40>(unint64_t result, unsigned __int16 a2)
{
  unsigned __int16 *v2;
  int v3;
  unsigned int v5;
  int Script;

  if (!*(_BYTE *)(result + 4))
    return 0;
  v2 = (unsigned __int16 *)result;
  v3 = *(_DWORD *)result;
  if (*(_DWORD *)result == 47)
    return 0;
  if (a2 > 0x15AEu)
  {
    switch(a2)
    {
      case 0x15AFu:
      case 0x15B4u:
      case 0x15C5u:
      case 0x15DEu:
      case 0x15E9u:
      case 0x15F1u:
      case 0x15F4u:
        goto LABEL_12;
      case 0x15B0u:
      case 0x15B1u:
      case 0x15B2u:
      case 0x15B3u:
      case 0x15B5u:
      case 0x15B6u:
      case 0x15B7u:
      case 0x15B8u:
      case 0x15B9u:
      case 0x15BAu:
      case 0x15BBu:
      case 0x15BCu:
      case 0x15BDu:
      case 0x15BEu:
      case 0x15BFu:
      case 0x15C0u:
      case 0x15C1u:
      case 0x15C2u:
      case 0x15C3u:
      case 0x15C4u:
      case 0x15C6u:
      case 0x15C7u:
      case 0x15C8u:
      case 0x15C9u:
      case 0x15CAu:
      case 0x15CBu:
      case 0x15CCu:
      case 0x15CDu:
      case 0x15CEu:
      case 0x15CFu:
      case 0x15D0u:
      case 0x15D1u:
      case 0x15D2u:
      case 0x15D3u:
      case 0x15D4u:
      case 0x15D5u:
      case 0x15D6u:
      case 0x15D7u:
      case 0x15D8u:
      case 0x15D9u:
      case 0x15DAu:
      case 0x15DBu:
      case 0x15DCu:
      case 0x15DDu:
      case 0x15DFu:
      case 0x15E0u:
      case 0x15E1u:
      case 0x15E2u:
      case 0x15E3u:
      case 0x15E4u:
      case 0x15E5u:
      case 0x15E6u:
      case 0x15E7u:
      case 0x15E8u:
      case 0x15EAu:
      case 0x15EBu:
      case 0x15ECu:
      case 0x15EDu:
      case 0x15EEu:
      case 0x15EFu:
      case 0x15F0u:
      case 0x15F2u:
      case 0x15F3u:
        goto LABEL_19;
      default:
        if (a2 - 5741 < 2)
          goto LABEL_12;
        goto LABEL_19;
    }
  }
  if (a2 - 5229 <= 0x3D && ((1 << (a2 - 109)) & 0x2000000000000025) != 0
    || a2 == 5500
    || a2 == 5511)
  {
LABEL_12:
    result = uscript_getScript();
    if ((_DWORD)result != 40)
    {
      if ((unsigned __int16)(v3 - 33) >= 0x20u)
      {
        result = 1;
        if ((unsigned __int16)v3 - 94 > 0x20
          || ((1 << (v3 - 94)) & 0x1E0000007) == 0)
        {
          return result;
        }
      }
      else if ((unsigned __int16)(v3 - 35) < 0x1Eu && ((0x30801005u >> (v3 - 35)) & 1) != 0)
      {
        return 1;
      }
    }
  }
LABEL_19:
  if (!*((_BYTE *)v2 + 4))
  {
    __break(1u);
    return result;
  }
  result = 0;
  v5 = *v2;
  if (v5 > 0x15AE)
  {
    switch(*v2)
    {
      case 0x15AFu:
      case 0x15B4u:
      case 0x15C5u:
      case 0x15DEu:
      case 0x15E9u:
      case 0x15F1u:
      case 0x15F4u:
        goto LABEL_28;
      case 0x15B0u:
      case 0x15B1u:
      case 0x15B2u:
      case 0x15B3u:
      case 0x15B5u:
      case 0x15B6u:
      case 0x15B7u:
      case 0x15B8u:
      case 0x15B9u:
      case 0x15BAu:
      case 0x15BBu:
      case 0x15BCu:
      case 0x15BDu:
      case 0x15BEu:
      case 0x15BFu:
      case 0x15C0u:
      case 0x15C1u:
      case 0x15C2u:
      case 0x15C3u:
      case 0x15C4u:
      case 0x15C6u:
      case 0x15C7u:
      case 0x15C8u:
      case 0x15C9u:
      case 0x15CAu:
      case 0x15CBu:
      case 0x15CCu:
      case 0x15CDu:
      case 0x15CEu:
      case 0x15CFu:
      case 0x15D0u:
      case 0x15D1u:
      case 0x15D2u:
      case 0x15D3u:
      case 0x15D4u:
      case 0x15D5u:
      case 0x15D6u:
      case 0x15D7u:
      case 0x15D8u:
      case 0x15D9u:
      case 0x15DAu:
      case 0x15DBu:
      case 0x15DCu:
      case 0x15DDu:
      case 0x15DFu:
      case 0x15E0u:
      case 0x15E1u:
      case 0x15E2u:
      case 0x15E3u:
      case 0x15E4u:
      case 0x15E5u:
      case 0x15E6u:
      case 0x15E7u:
      case 0x15E8u:
      case 0x15EAu:
      case 0x15EBu:
      case 0x15ECu:
      case 0x15EDu:
      case 0x15EEu:
      case 0x15EFu:
      case 0x15F0u:
      case 0x15F2u:
      case 0x15F3u:
        return result;
      default:
        if (v5 - 5741 < 2)
          goto LABEL_28;
        break;
    }
    return result;
  }
  if (v5 - 5229 <= 0x3D && ((1 << (v5 - 109)) & 0x2000000000000025) != 0
    || v5 == 5500
    || v5 == 5511)
  {
LABEL_28:
    Script = uscript_getScript();
    result = 0;
    if (Script == 40)
      return result;
    if ((unsigned __int16)(a2 - 33) < 0x20u)
    {
      if ((unsigned __int16)(a2 - 35) < 0x1Eu)
        return (0x30801005u >> (a2 - 35)) & 1;
      return 0;
    }
    if ((unsigned __int16)(a2 - 94) < 0x21u)
      return (0x1FFFFFF8uLL >> (a2 - 94)) & 1;
    return 1;
  }
  return result;
}

uint64_t WTF::URLHelpers::isLookalikeSequence<(UScriptCode)38>(uint64_t result, __int16 a2)
{
  uint64_t v2;
  int v3;
  int Script;
  unsigned int v6;
  unint64_t v7;

  if (!*(_BYTE *)(result + 4))
    return 0;
  v2 = result;
  v3 = *(_DWORD *)result;
  if (*(_DWORD *)result == 47)
    return 0;
  if (a2 == 3585)
  {
    result = uscript_getScript();
    if ((_DWORD)result != 38)
    {
      if ((unsigned __int16)(v3 - 33) >= 0x20u)
      {
        result = 1;
        if ((unsigned __int16)v3 - 94 > 0x20
          || ((1 << (v3 - 94)) & 0x1E0000007) == 0)
        {
          return result;
        }
      }
      else if ((unsigned __int16)(v3 - 35) < 0x1Eu && ((0x30801005u >> (v3 - 35)) & 1) != 0)
      {
        return 1;
      }
    }
  }
  if (!*(_BYTE *)(v2 + 4))
  {
    __break(1u);
    return result;
  }
  if (*(_WORD *)v2 != 3585)
    return 0;
  Script = uscript_getScript();
  result = 0;
  if (Script != 38)
  {
    v6 = (0x30801005u >> (a2 - 35)) & 1;
    if ((unsigned __int16)(a2 - 35) >= 0x1Eu)
      v6 = 0;
    v7 = (0x1FFFFFF8uLL >> (a2 - 94)) & 1;
    if ((unsigned __int16)(a2 - 94) >= 0x21u)
      LODWORD(v7) = 1;
    if ((unsigned __int16)(a2 - 33) >= 0x20u)
      return v7;
    else
      return v6;
  }
  return result;
}

BOOL WTF::URLHelpers::isSecondLevelDomainNameAllowedByTLDRules<WTF::URLHelpers::allCharactersAllowedByTLDRules(std::span<char16_t const,18446744073709551615ul>)::$_5>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 1;
  v2 = 2 * a2;
  while (1)
  {
    v3 = *(unsigned __int16 *)(a1 - 2 + v2);
    if ((v3 - 1072) >= 0x20
      && v3 != 1105
      && v3 != 1199
      && v3 != 1257
      && v3 != 45
      && (v3 - 48) > 9)
    {
      break;
    }
    v2 -= 2;
    if (!v2)
      return 1;
  }
  return v3 == 46;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIDsLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  v8 = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
  }
}

void WTF::URLHelpers::collectRangesThatNeedMapping(int **a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  char v54;
  WTF::StringImpl *v55;

  WTF::String::substringSharingImpl(a1, a2, a3, (int **)&v55);
  WTF::URLHelpers::mapHostName();
  if (v54)
    v14 = v53 == 0;
  else
    v14 = 0;
  if (v14)
  {
LABEL_36:
    v36 = v55;
    if (!v55)
      return;
    goto LABEL_37;
  }
  if (*(_BYTE *)(a4 + 16))
  {
    if (!v54)
      goto LABEL_36;
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 1;
    if (!v54)
      goto LABEL_36;
  }
  v15 = *(unsigned int *)(a4 + 12);
  LODWORD(v16) = v15;
  if ((_DWORD)v15 == *(_DWORD *)(a4 + 8))
  {
    v17 = v15 + (v15 >> 2);
    if (v17 >= 0x10)
      v18 = v17 + 1;
    else
      v18 = 16;
    if (v18 <= v15 + 1)
      v19 = v15 + 1;
    else
      v19 = v18;
    if (v19 >> 28)
    {
      __break(0xC471u);
      return;
    }
    v20 = *(_QWORD *)a4;
    v21 = WTF::fastMalloc((WTF *)(16 * v19));
    *(_DWORD *)(a4 + 8) = v19;
    *(_QWORD *)a4 = v21;
    if ((_DWORD)v15)
    {
      v22 = v20 + 16 * v15;
      v23 = v20;
      do
      {
        *(_DWORD *)v21 = *(_DWORD *)v23;
        *(_DWORD *)(v21 + 4) = *(_DWORD *)(v23 + 4);
        v24 = *(_QWORD *)(v23 + 8);
        *(_QWORD *)(v23 + 8) = 0;
        *(_QWORD *)(v21 + 8) = v24;
        v25 = *(WTF::StringImpl **)(v23 + 8);
        *(_QWORD *)(v23 + 8) = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
          {
            WTF::StringImpl::~StringImpl(v25, v7, v8, v9, v10, v11, v12, v13);
            WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
          }
          else
          {
            *(_DWORD *)v25 -= 2;
          }
        }
        v23 += 16;
        v21 += 16;
      }
      while (v23 != v22);
      v21 = *(_QWORD *)a4;
    }
    if (v20)
    {
      if (v21 == v20)
      {
        *(_QWORD *)a4 = 0;
        *(_DWORD *)(a4 + 8) = 0;
      }
      WTF::fastFree(v20, v7, v8, v9, v10, v11, v12, v13);
      v21 = *(_QWORD *)a4;
    }
    v16 = *(unsigned int *)(a4 + 12);
    v34 = v21 + 16 * v16;
  }
  else
  {
    v34 = *(_QWORD *)a4 + 16 * v15;
  }
  *(_DWORD *)v34 = a2;
  *(_DWORD *)(v34 + 4) = a3;
  if (!v53)
  {
    *(_QWORD *)(v34 + 8) = 0;
    *(_DWORD *)(a4 + 12) = v16 + 1;
    v36 = v55;
    if (!v55)
      return;
    goto LABEL_37;
  }
  v35 = *(_DWORD *)v53;
  *(_DWORD *)v53 += 2;
  *(_QWORD *)(v34 + 8) = v53;
  *(_DWORD *)(a4 + 12) = v16 + 1;
  if (!v35)
  {
    WTF::StringImpl::~StringImpl(v53, v7, v8, v9, v10, v11, v12, v13);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    goto LABEL_36;
  }
  *(_DWORD *)v53 = v35;
  v36 = v55;
  if (!v55)
    return;
LABEL_37:
  if (*(_DWORD *)v36 == 2)
  {
    WTF::StringImpl::~StringImpl(v36, v7, v8, v9, v10, v11, v12, v13);
    WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
  }
  else
  {
    *(_DWORD *)v36 -= 2;
  }
}

unint64_t WTF::Vector<char16_t,2048ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 2 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v26 = *(const void **)a1;
      }
      else
      {
        if (v10 < 0x801)
        {
          v11 = (void *)(a1 + 16);
          *(_QWORD *)a1 = a1 + 16;
          *(_DWORD *)(a1 + 8) = 2048;
        }
        else
        {
          if (v10 >> 31)
          {
            __break(0xC471u);
            JUMPOUT(0x197B3D3A4);
          }
          v11 = (void *)WTF::fastMalloc((WTF *)(2 * v10));
          *(_DWORD *)(a1 + 8) = v10;
          *(_QWORD *)a1 = v11;
        }
        memcpy(v11, v5, 2 * v6);
        v26 = *(const void **)a1;
        if ((const void *)(a1 + 16) != v5 && v5)
        {
          if (v26 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v27, v28, v29, v30, v31, v32, v33);
          v26 = *(const void **)a1;
        }
      }
      return (unint64_t)v26 + 2 * ((uint64_t)(a3 - (_QWORD)v5) >> 1);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 <= v12)
    return a3;
  v16 = *(unsigned int *)(a1 + 12);
  if (v15 < 0x801)
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 2048;
    memcpy((void *)(a1 + 16), v5, 2 * v16);
    if ((const void *)(a1 + 16) != v5)
      goto LABEL_25;
    return a3;
  }
  if (v15 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x197B3D39CLL);
  }
  v17 = (void *)WTF::fastMalloc((WTF *)(2 * v15));
  *(_DWORD *)(a1 + 8) = v15;
  *(_QWORD *)a1 = v17;
  memcpy(v17, v5, 2 * v16);
  if ((const void *)(a1 + 16) == v5)
    return a3;
LABEL_25:
  if (!v5)
    return a3;
  if (*(const void **)a1 == v5)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
  return a3;
}

uint64_t WTF::URLParser::isInUserInfoEncodeSet(unsigned int a1)
{
  if (a1 <= 0x7E)
    return WTF::characterClassTable[a1] & 1;
  else
    return 1;
}

BOOL WTF::URLParser::isSpecialCharacterForFragmentDirective(__int16 a1)
{
  return (a1 & 0xFFFE) == 44;
}

uint64_t WTF::URLParser::copyBaseWindowsDriveLetter(WTF::URLParser *this, const WTF::URL *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int16 *v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  int v30;
  unsigned __int16 *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v40;
  unint64_t v42;
  unsigned __int16 *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v51;
  unsigned __int16 *v53;
  uint64_t v54;

  result = WTF::URL::protocolIs((uint64_t *)a2, "file", 0x100000004);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2
      || (v6 = ((*((_DWORD *)a2 + 2) >> 3) & 7) + *((_DWORD *)a2 + 6),
          v7 = *(unsigned int *)(v5 + 4),
          v6 >= v7))
    {
      result = 442;
      __break(0xC471u);
LABEL_105:
      __break(1u);
      return result;
    }
    v8 = *(_QWORD *)(v5 + 8);
    v9 = v6 + 1;
    v10 = v7 - v9;
    if ((*(_BYTE *)(v5 + 16) & 4) == 0)
    {
      v11 = (unsigned __int16 *)(v8 + 2 * v9);
      v53 = v11;
      v54 = v7 - v9;
      if ((_DWORD)v7 == (_DWORD)v9)
        return 0;
      v12 = *v11;
      v13 = v10 != 1 && (v12 & 0xFC00) == 55296;
      v14 = *v11;
      if (!v13)
        goto LABEL_14;
      if (v10 > 1)
      {
        v15 = v11[1];
        v13 = (v15 & 0xFC00) == 56320;
        v14 = v15 + (v12 << 10) - 56613888;
        if (!v13)
          v14 = *v11;
LABEL_14:
        if ((v14 | 0x20u) - 97 > 0x19)
          return 0;
        v16 = v12 & 0xFC00;
        if (v10 != 1 && v16 == 55296)
        {
          if ((v11[1] & 0xFC00) == 0xDC00)
            v18 = 2;
          else
            v18 = 1;
          v19 = v10 - v18;
          if (v10 == v18)
            return 0;
        }
        else
        {
          v18 = 1;
          v19 = v10 - 1;
          if (v10 == 1)
            return 0;
        }
        v32 = &v11[v18];
        while (1)
        {
          v34 = *v32;
          if (v19 == 1)
          {
            if ((v34 - 14) < 0xFFFFFFFB || (v34 - 11) < 2)
              goto LABEL_72;
          }
          else
          {
            v35 = *v32;
            if ((v34 & 0xFC00) == 0xD800)
            {
              v36 = v32[1];
              v13 = (v36 & 0xFC00) == 56320;
              v35 = (v34 << 10) - 56613888 + v36;
              if (!v13)
                v35 = *v32;
            }
            v37 = v35 - 14;
            v38 = v35 - 11;
            if (v37 < 0xFFFFFFFB || v38 < 2)
            {
LABEL_72:
              if (v19 && (v34 & 0xFC00) != 0xD800 && (v34 == 124 || v34 == 58))
              {
                v42 = v19 - 1;
                if (!v42)
                  goto LABEL_103;
                v43 = v32 + 1;
                while (1)
                {
                  v44 = *v43;
                  v45 = v44 & 0xFC00;
                  v46 = (unsigned __int16)v44;
                  if (v42 != 1 && v45 == 55296)
                  {
                    v47 = v43[1];
                    v13 = (v47 & 0xFC00) == 56320;
                    v46 = (v44 << 10) - 56613888 + v47;
                    if (!v13)
                      v46 = *v43;
                  }
                  v48 = v46 - 14;
                  v49 = v46 - 11;
                  if (v48 < 0xFFFFFFFB || v49 < 2)
                    break;
                  v51 = 1;
                  if (v42 != 1 && v45 == 55296)
                  {
                    if ((v43[1] & 0xFC00) == 0xDC00)
                      v51 = 2;
                    else
                      v51 = 1;
                  }
                  v43 += v51;
                  v42 -= v51;
                  if (!v42)
                    goto LABEL_103;
                }
                if (v45 != 55296
                  && (v44 - 35) <= 0x39
                  && ((1 << (v44 - 35)) & 0x200000010001001) != 0)
                {
LABEL_103:
                  WTF::URLParser::appendWindowsDriveLetter<char16_t>((uint64_t)this, (uint64_t *)&v53);
                  return 1;
                }
              }
              return 0;
            }
          }
          if (v19 == 1)
          {
            v33 = 1;
          }
          else
          {
            v40 = v34 & 0xFC00;
            v33 = 1;
            if (v40 == 55296)
            {
              if ((v32[1] & 0xFC00) == 0xDC00)
                v33 = 2;
              else
                v33 = 1;
            }
          }
          v32 += v33;
          v19 -= v33;
          if (!v19)
            return 0;
        }
      }
      goto LABEL_105;
    }
    v20 = (unsigned __int8 *)(v8 + v9);
    v53 = (unsigned __int16 *)(v8 + v9);
    v54 = v7 - v9;
    if ((_DWORD)v7 != (_DWORD)v9)
    {
      v21 = v10 - 1;
      if ((*v20 | 0x20u) - 123 >= 0xFFFFFFE6 && v10 != 1)
      {
        v23 = v9 - v7 + 2;
        v24 = v20;
        while (1)
        {
          v26 = *++v24;
          v25 = v26;
          v27 = v26 - 11;
          v28 = v26 - 14 >= 0xFFFFFFFB && v27 >= 2;
          if (!v28)
            break;
          ++v23;
          v20 = v24;
          if (!--v21)
            return 0;
        }
        if (v21 && (v25 == 124 || v25 == 58))
        {
          if (v21 != 1)
          {
            v29 = 2;
            while (1)
            {
              v30 = v20[v29];
              if ((v30 - 14) < 0xFFFFFFFB || (v30 - 11) < 2)
                break;
              ++v29;
              v28 = __CFADD__(v23++, 1);
              if (v28)
                goto LABEL_97;
            }
            if ((v30 - 35) > 0x39 || ((1 << (v30 - 35)) & 0x200000010001001) == 0)
              return 0;
          }
LABEL_97:
          WTF::URLParser::appendWindowsDriveLetter<unsigned char>((uint64_t)this, (uint64_t *)&v53);
          return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

void WTF::URLParser::appendWindowsDriveLetter<unsigned char>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;

  v4 = *(_DWORD *)(a1 + 24) + ((*(_DWORD *)(a1 + 8) >> 3) & 7u) + 1;
  if (*(_DWORD *)(a1 + 28) > v4)
  {
    WTF::URLParser::syntaxViolation<unsigned char>(a1, *a2);
    *(_DWORD *)(a1 + 28) = v4;
    v5 = *(unsigned int *)(a1 + 52);
    if (v5 < v4)
    {
      v6 = *(unsigned int *)(a1 + 48);
      if (v6 < v4)
      {
        v7 = v6 + (v6 >> 2);
        if (v7 >= 0x10)
          v8 = v7 + 1;
        else
          v8 = 16;
        if (v8 <= v4)
          v9 = v4;
        else
          v9 = v8;
        if (HIDWORD(v9))
        {
          __break(0xC471u);
          return;
        }
        v10 = *(const void **)(a1 + 40);
        v11 = (void *)WTF::fastMalloc((WTF *)v9);
        *(_DWORD *)(a1 + 48) = v9;
        *(_QWORD *)(a1 + 40) = v11;
        memcpy(v11, v10, v5);
        if (v10)
        {
          if (*(const void **)(a1 + 40) == v10)
          {
            *(_QWORD *)(a1 + 40) = 0;
            *(_DWORD *)(a1 + 48) = 0;
          }
          WTF::fastFree((unint64_t)v10, v12, v13, v14, v15, v16, v17, v18);
        }
      }
    }
    *(_DWORD *)(a1 + 52) = v4;
  }
  if (!a2[1])
  {
LABEL_36:
    __break(1u);
    return;
  }
  v19 = *(_BYTE *)*a2;
  v35 = v19;
  if (*(_BYTE *)(a1 + 59))
  {
    v33 = *(unsigned int *)(a1 + 52);
    if ((_DWORD)v33 == *(_DWORD *)(a1 + 48))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(a1 + 40, &v35);
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 40) + v33) = v19;
      ++*(_DWORD *)(a1 + 52);
    }
  }
  while (1)
  {
    v20 = a2[1];
    if (!v20)
      goto LABEL_36;
    v21 = (unsigned __int8 *)(*a2 + 1);
    v22 = v20 - 1;
    *a2 = (uint64_t)v21;
    a2[1] = v22;
    if (!v22)
      goto LABEL_36;
    v23 = *v21;
    if ((v23 - 14) < 0xFFFFFFFB || (v23 - 11) < 2)
      break;
    WTF::URLParser::syntaxViolation<unsigned char>(a1, (uint64_t)v21);
  }
  if (v23 == 124)
  {
    WTF::URLParser::syntaxViolation<unsigned char>(a1, (uint64_t)v21);
    v34 = 58;
    if (!*(_BYTE *)(a1 + 59))
      goto LABEL_28;
LABEL_39:
    v32 = *(unsigned int *)(a1 + 52);
    if ((_DWORD)v32 == *(_DWORD *)(a1 + 48))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(a1 + 40, &v34);
      v25 = a2[1];
      if (v25)
        goto LABEL_29;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 40) + v32) = 58;
      ++*(_DWORD *)(a1 + 52);
      v25 = a2[1];
      if (v25)
        goto LABEL_29;
    }
    goto LABEL_36;
  }
  v34 = 58;
  if (*(_BYTE *)(a1 + 59))
    goto LABEL_39;
LABEL_28:
  v25 = a2[1];
  if (!v25)
    goto LABEL_36;
LABEL_29:
  while (1)
  {
    v26 = (unsigned __int8 *)(*a2 + 1);
    v27 = v25 - 1;
    *a2 = (uint64_t)v26;
    a2[1] = v27;
    if (!v27)
      break;
    v28 = *v26;
    v29 = v28 - 14;
    v30 = v28 - 11;
    if (v29 < 0xFFFFFFFB || v30 < 2)
      break;
    WTF::URLParser::syntaxViolation<unsigned char>(a1, (uint64_t)v26);
    v25 = a2[1];
    if (!v25)
      goto LABEL_36;
  }
}

void WTF::URLParser::appendWindowsDriveLetter<char16_t>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;

  v4 = *(_DWORD *)(a1 + 24) + ((*(_DWORD *)(a1 + 8) >> 3) & 7u);
  v5 = (v4 + 1);
  if (*(_DWORD *)(a1 + 28) <= v5)
  {
LABEL_16:
    v19 = (unsigned __int16 *)a2[1];
    if (!v19)
      goto LABEL_37;
    v20 = *(unsigned __int16 *)*a2;
    v21 = v19 != (unsigned __int16 *)1 && (v20 & 0xFC00) == 55296;
    if (v21)
    {
      v22 = *(unsigned __int16 *)(*a2 + 2);
      v21 = (v22 & 0xFC00) == 56320;
      v23 = v22 + (v20 << 10) - 56613888;
      if (v21)
        v20 = v23;
      v26 = v20;
      if (!*(_BYTE *)(a1 + 59))
      {
LABEL_22:
        WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>(a1, a2);
        v4 = a2[1];
        if (v4)
          goto LABEL_23;
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
    }
    else
    {
      v26 = *(unsigned __int16 *)*a2;
      if (!*(_BYTE *)(a1 + 59))
        goto LABEL_22;
    }
    v24 = *(unsigned int *)(a1 + 52);
    if ((_DWORD)v24 == *(_DWORD *)(a1 + 48))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(a1 + 40, &v26);
      WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>(a1, a2);
      v4 = a2[1];
      if (!v4)
        goto LABEL_37;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 40) + v24) = v20;
      ++*(_DWORD *)(a1 + 52);
      WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>(a1, a2);
      v4 = a2[1];
      if (!v4)
        goto LABEL_37;
    }
LABEL_23:
    if (*(_WORD *)*a2 == 124)
      WTF::URLParser::syntaxViolation<char16_t>(a1, *a2);
    v25 = 58;
    if (!*(_BYTE *)(a1 + 59))
      goto LABEL_26;
    v4 = *(unsigned int *)(a1 + 52);
    if ((_DWORD)v4 == *(_DWORD *)(a1 + 48))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(a1 + 40, &v25);
LABEL_26:
      WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>(a1, a2);
      return;
    }
LABEL_38:
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + v4) = 58;
    ++*(_DWORD *)(a1 + 52);
    goto LABEL_26;
  }
  WTF::URLParser::syntaxViolation<char16_t>(a1, *a2);
  *(_DWORD *)(a1 + 28) = v5;
  v6 = *(unsigned int *)(a1 + 52);
  if (v6 >= v5 || (v4 = *(unsigned int *)(a1 + 48), v4 >= v5))
  {
LABEL_15:
    *(_DWORD *)(a1 + 52) = v5;
    goto LABEL_16;
  }
  v7 = v4 + (v4 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= v5)
    v9 = v5;
  else
    v9 = v8;
  if (!HIDWORD(v9))
  {
    v10 = *(const void **)(a1 + 40);
    v11 = (void *)WTF::fastMalloc((WTF *)v9);
    *(_DWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 40) = v11;
    memcpy(v11, v10, v6);
    if (v10)
    {
      if (*(const void **)(a1 + 40) == v10)
      {
        *(_QWORD *)(a1 + 40) = 0;
        *(_DWORD *)(a1 + 48) = 0;
      }
      WTF::fastFree((unint64_t)v10, v12, v13, v14, v15, v16, v17, v18);
    }
    goto LABEL_15;
  }
  __break(0xC471u);
}

void WTF::URLParser::percentEncodeByte(WTF::URLParser *this, unsigned int a2)
{
  int v4;
  unsigned int v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v13 = 37;
  if (*((_BYTE *)this + 59))
  {
    v8 = *((unsigned int *)this + 13);
    if ((_DWORD)v8 == *((_DWORD *)this + 12))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)this + 40, &v13);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)this + 5) + v8) = 37;
      ++*((_DWORD *)this + 13);
    }
  }
  if (a2 >= 0xA0)
    v4 = 55;
  else
    v4 = 48;
  v5 = v4 + (a2 >> 4);
  v12 = v5;
  if (*((_BYTE *)this + 59))
  {
    v9 = *((unsigned int *)this + 13);
    if ((_DWORD)v9 == *((_DWORD *)this + 12))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)this + 40, &v12);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)this + 5) + v9) = v5;
      ++*((_DWORD *)this + 13);
    }
  }
  if ((a2 & 0xF) >= 0xA)
    v6 = 55;
  else
    v6 = 48;
  v7 = v6 + (a2 & 0xF);
  v11 = v6 + (a2 & 0xF);
  if (*((_BYTE *)this + 59))
  {
    v10 = *((unsigned int *)this + 13);
    if ((_DWORD)v10 == *((_DWORD *)this + 12))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)this + 40, &v11);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)this + 5) + v10) = v7;
      ++*((_DWORD *)this + 13);
    }
  }
}

uint64_t WTF::URLParser::defaultPortForProtocol(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  BOOL v8;
  int v9;
  int v10;

  if (!(_DWORD)a2)
    return 0;
  v2 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) != 0)
  {
    v3 = *a1;
    if (v3 != 102)
      goto LABEL_4;
LABEL_11:
    if ((_DWORD)a2 == 3)
    {
      if (v2)
      {
        if (a1[1] != 116 || a1[2] != 112)
          return 0;
      }
      else if (*((_WORD *)a1 + 1) != 116 || *((_WORD *)a1 + 2) != 112)
      {
        return 0;
      }
      return 65557;
    }
    return 0;
  }
  v3 = *(unsigned __int16 *)a1;
  if (v3 == 102)
    goto LABEL_11;
LABEL_4:
  if (v3 == 104)
  {
    if ((_DWORD)a2 == 5)
    {
      if (v2)
      {
        if (a1[1] != 116 || a1[2] != 116 || a1[3] != 112)
          return 0;
        v6 = a1[4];
      }
      else
      {
        if (*((_WORD *)a1 + 1) != 116 || *((_WORD *)a1 + 2) != 116 || *((_WORD *)a1 + 3) != 112)
          return 0;
        v6 = *((unsigned __int16 *)a1 + 4);
      }
      goto LABEL_49;
    }
    if ((_DWORD)a2 == 4)
    {
      if (v2)
      {
        if (a1[1] != 116 || a1[2] != 116)
          return 0;
        v5 = a1[3];
      }
      else
      {
        if (*((_WORD *)a1 + 1) != 116 || *((_WORD *)a1 + 2) != 116)
          return 0;
        v5 = *((unsigned __int16 *)a1 + 3);
      }
      if (v5 == 112)
        return 65616;
    }
    return 0;
  }
  if (v3 != 119)
    return 0;
  if ((_DWORD)a2 == 3)
  {
    if (v2)
    {
      if (a1[1] != 115)
        return 0;
      v6 = a1[2];
    }
    else
    {
      if (*((_WORD *)a1 + 1) != 115)
        return 0;
      v6 = *((unsigned __int16 *)a1 + 2);
    }
LABEL_49:
    if (v6 == 115)
      return 65979;
    return 0;
  }
  if ((_DWORD)a2 != 2)
    return 0;
  if (v2)
    v4 = a1[1];
  else
    v4 = *((unsigned __int16 *)a1 + 1);
  v8 = v4 == 115;
  v9 = (v4 == 115) << 16;
  if (v8)
    v10 = 80;
  else
    v10 = 0;
  return v10 | v9;
}

void WTF::URLParser::maybeCanonicalizeScheme(int16x8_t *a1@<X0>, int16x8_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  __int16 v16;
  unsigned __int16 v17;
  unsigned int v18;
  unint64_t v20;
  BOOL v21;
  int v23;
  unsigned int v24;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned __int16 v30;
  BOOL v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  _BYTE *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  WTF *v49;
  size_t v50;
  unsigned __int8 *v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  WTF *v56;
  WTF *v57;
  WTF *v58;
  WTF *v59;
  unsigned __int16 *v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  int v66;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  int v80;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  int16x8_t *v91[2];
  uint64_t v92;
  unsigned int v93;
  WTF *v94;

  v91[0] = a1;
  v91[1] = a2;
  if (!(_DWORD)a2)
    goto LABEL_41;
  v10 = 0;
  v11 = (unint64_t)a2 & 0xFF00000000;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    while (1)
    {
      v12 = a1->u8[v10];
      v13 = v12 - 14;
      v14 = v12 - 11;
      if (v13 < 0xFFFFFFFB || v14 < 2)
        break;
      if (a2 == ++v10)
        goto LABEL_41;
    }
  }
  else
  {
    while (1)
    {
      v16 = a1->i16[v10];
      v17 = v16 - 14;
      v18 = (unsigned __int16)(v16 - 11);
      if (v17 < 0xFFFBu || v18 < 2)
        break;
      if (a2 == ++v10)
        goto LABEL_41;
    }
  }
  if (v11)
  {
    if (a2 <= v10)
      goto LABEL_126;
    if ((a1->u8[v10] | 0x20u) - 97 > 0x19)
      goto LABEL_41;
  }
  else
  {
    if (a2 <= v10)
      goto LABEL_126;
    if ((a1->u16[v10] | 0x20u) - 97 > 0x19)
    {
LABEL_41:
      *a9 = 0;
      a9[8] = 0;
      return;
    }
  }
  v20 = v10 + 1;
  if (v20 < a2)
  {
    if (!v11)
    {
      while (1)
      {
        v26 = a1->u16[v20];
        v27 = v26 - 48;
        v28 = (v26 | 0x20) - 97;
        if (v27 >= 0xA && v28 >= 0x1A)
        {
          v30 = a1->u16[v20];
          v31 = v30 > 0x2Eu || ((1 << a1->i16[v20]) & 0x680000000000) == 0;
          if (v31 && ((unsigned __int16)(v30 - 14) < 0xFFFBu || (unsigned __int16)(v30 - 11) < 2u))
            goto LABEL_41;
        }
        if (a2 == ++v20)
          goto LABEL_57;
      }
    }
    while ((_DWORD)a2 != (_DWORD)v20)
    {
      LODWORD(v11) = a1->u8[v20];
      if ((v11 - 45) >= 2u)
      {
        v21 = (_DWORD)v11 != 43 && (v11 - 48) >= 0xA;
        if (v21 && (v11 | 0x20) - 97 >= 0x1A)
        {
          v23 = a1->u8[v20];
          v24 = v23 - 14;
          LODWORD(v11) = v23 - 11;
          if (v24 < 0xFFFFFFFB || v11 <= 1)
            goto LABEL_41;
        }
      }
      if (a2 == ++v20)
        goto LABEL_57;
    }
    goto LABEL_126;
  }
LABEL_57:
  WTF::StringView::convertToASCIILowercase(v91, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8, (uint64_t *)&v90);
  v39 = v90;
  if (!v90)
  {
    *(_QWORD *)a9 = 0;
    a9[8] = 1;
    return;
  }
  v40 = (_BYTE *)*((_QWORD *)v90 + 1);
  if ((*((_BYTE *)v90 + 16) & 4) != 0)
  {
    v49 = (WTF *)*((unsigned int *)v90 + 1);
    if (!(_DWORD)v49)
      goto LABEL_77;
    v50 = 0;
    v51 = (unsigned __int8 *)v49 + (_QWORD)v40;
    while (1)
    {
      v52 = v40[v50];
      v53 = v52 - 9;
      v54 = v52 - 13;
      if (v53 <= 4 && v54 < 0xFFFFFFFE)
        break;
      if (v49 == (WTF *)++v50)
        goto LABEL_77;
    }
    v93 = *((_DWORD *)v90 + 1);
    v58 = (WTF *)WTF::fastMalloc(v49);
    v94 = v58;
    if (v50 <= (unint64_t)v49)
    {
      v59 = v58;
      if ((_DWORD)v50)
      {
        if ((_DWORD)v50 == 1)
          *(_BYTE *)v58 = *v40;
        else
          memcpy(v58, v40, v50);
      }
      if (v49 == (WTF *)v50)
      {
LABEL_128:
        v93 = v50;
        WTF::StringImpl::adopt(&v93, &v92);
        goto LABEL_129;
      }
      v75 = &v40[v50];
      LODWORD(v11) = v50;
      while (1)
      {
        v76 = *v75;
        v77 = v76 - 9;
        v78 = v76 - 13;
        if (v77 > 4 || v78 > 0xFFFFFFFD)
          goto LABEL_116;
        if (++v75 == v51)
        {
          v75 = &v40[(_QWORD)v49];
LABEL_116:
          if (v75 == v51)
            goto LABEL_127;
          while (1)
          {
            v80 = *v75;
            if ((v80 - 9) <= 4 && (v80 - 13) < 0xFFFFFFFE)
              break;
            ++v75;
            LODWORD(v50) = v11 + 1;
            *((_BYTE *)v59 + v11) = v80;
            LODWORD(v11) = v11 + 1;
            if (v75 == v51)
              goto LABEL_128;
          }
          LODWORD(v50) = v11;
          if (v75 == v51)
            goto LABEL_128;
        }
      }
    }
LABEL_126:
    __break(1u);
LABEL_127:
    LODWORD(v50) = v11;
    goto LABEL_128;
  }
  v41 = *((unsigned int *)v90 + 1);
  if ((_DWORD)v41)
  {
    v42 = 0;
    v43 = 0;
    v44 = (unsigned __int16 *)&v40[2 * v41];
    while (1)
    {
      v45 = *(unsigned __int16 *)&v40[2 * v42];
      v46 = v45 - 9;
      v47 = v45 - 13;
      if (v46 <= 4 && v47 < 0xFFFFFFFE)
        break;
      v43 -= 2;
      ++v42;
      if (-2 * v41 == v43)
        goto LABEL_77;
    }
    v56 = (WTF *)WTF::fastMalloc((WTF *)(2 * v41));
    v94 = v56;
    if (v42 <= v41)
    {
      v57 = v56;
      if ((_DWORD)v42)
      {
        if ((_DWORD)v42 == 1)
          *(_WORD *)v56 = *(_WORD *)v40;
        else
          memcpy(v56, v40, -v43);
      }
      if (-2 * v41 != v43)
      {
        v60 = (unsigned __int16 *)&v40[-v43];
        v61 = v42;
        while (1)
        {
          while (1)
          {
            v62 = *v60;
            v63 = v62 - 9;
            v64 = v62 - 13;
            if (v63 > 4 || v64 > 0xFFFFFFFD)
              break;
            if (++v60 == v44)
              goto LABEL_105;
          }
          if (v60 == v44)
            break;
          while (1)
          {
            v66 = *v60;
            if ((v66 - 9) <= 4 && (v66 - 13) < 0xFFFFFFFE)
              break;
            ++v60;
            LODWORD(v42) = v61 + 1;
            *((_WORD *)v57 + v61++) = v66;
            if (v60 == v44)
              goto LABEL_106;
          }
          LODWORD(v42) = v61;
          if (v60 == v44)
            goto LABEL_106;
        }
LABEL_105:
        LODWORD(v42) = v61;
      }
LABEL_106:
      v93 = v42;
      WTF::StringImpl::adopt(&v93, &v92);
LABEL_129:
      WTF::fastFree((unint64_t)v94, v68, v69, v70, v71, v72, v73, v74);
      v39 = v90;
      *(_QWORD *)a9 = v92;
      a9[8] = 1;
      v90 = 0;
      if (!v39)
        return;
      goto LABEL_130;
    }
    goto LABEL_126;
  }
LABEL_77:
  *(_DWORD *)v90 += 2;
  *(_QWORD *)a9 = v39;
  a9[8] = 1;
  v90 = 0;
LABEL_130:
  if (*(_DWORD *)v39 == 2)
  {
    WTF::StringImpl::~StringImpl(v39, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
  }
  else
  {
    *(_DWORD *)v39 -= 2;
  }
}

BOOL WTF::URLParser::isSpecialScheme(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;
  int v9;

  if (!(_DWORD)a2)
    return 0;
  v2 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) != 0)
  {
    v3 = *a1;
    if (v3 != 119)
      goto LABEL_4;
  }
  else
  {
    v3 = *(unsigned __int16 *)a1;
    if (v3 != 119)
    {
LABEL_4:
      if (v3 == 104)
      {
        if ((_DWORD)a2 == 5)
        {
          if (v2)
          {
            if (a1[1] != 116 || a1[2] != 116 || a1[3] != 112)
              return 0;
            v9 = a1[4];
          }
          else
          {
            if (*((_WORD *)a1 + 1) != 116 || *((_WORD *)a1 + 2) != 116 || *((_WORD *)a1 + 3) != 112)
              return 0;
            v9 = *((unsigned __int16 *)a1 + 4);
          }
          return v9 == 115;
        }
        if ((_DWORD)a2 == 4)
        {
          if (v2)
          {
            if (a1[1] != 116 || a1[2] != 116)
              return 0;
            v6 = a1[3];
          }
          else
          {
            if (*((_WORD *)a1 + 1) != 116 || *((_WORD *)a1 + 2) != 116)
              return 0;
            v6 = *((unsigned __int16 *)a1 + 3);
          }
          return v6 == 112;
        }
      }
      else if (v3 == 102)
      {
        if ((_DWORD)a2 == 4)
        {
          if (v2)
          {
            if (a1[1] != 105 || a1[2] != 108)
              return 0;
            v7 = a1[3];
          }
          else
          {
            if (*((_WORD *)a1 + 1) != 105 || *((_WORD *)a1 + 2) != 108)
              return 0;
            v7 = *((unsigned __int16 *)a1 + 3);
          }
          return v7 == 101;
        }
        if ((_DWORD)a2 == 3)
        {
          if (v2)
          {
            if (a1[1] == 116)
            {
              v4 = a1[2];
              return v4 == 112;
            }
          }
          else if (*((_WORD *)a1 + 1) == 116)
          {
            v4 = *((unsigned __int16 *)a1 + 2);
            return v4 == 112;
          }
        }
      }
      return 0;
    }
  }
  if ((_DWORD)a2 == 3)
  {
    if (v2)
    {
      if (a1[1] != 115)
        return 0;
      v8 = a1[2];
    }
    else
    {
      if (*((_WORD *)a1 + 1) != 115)
        return 0;
      v8 = *((unsigned __int16 *)a1 + 2);
    }
    return v8 == 115;
  }
  if ((_DWORD)a2 != 2)
    return 0;
  if (v2)
    return a1[1] == 115;
  else
    return *((unsigned __int16 *)a1 + 1) == 115;
}

void WTF::URLParser::copyASCIIStringUntil(WTF::URLParser *this, const WTF::String *a2, size_t a3)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 v6;
  int v7;
  int v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  int v14;

  if (!a2)
  {
    if (!a3)
      return;
    goto LABEL_20;
  }
  if (*((unsigned int *)a2 + 1) < a3)
    goto LABEL_20;
  v4 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
  if ((*((_BYTE *)a2 + 16) & 4) != 0)
  {
    if (!*((_BYTE *)this + 59) || !a3)
      return;
    v10 = *((unsigned int *)this + 13);
    v11 = v10 + a3;
    if (v10 + a3 <= *((unsigned int *)this + 12))
    {
LABEL_19:
      memcpy((void *)(*((_QWORD *)this + 5) + v10), v4, a3);
      *((_DWORD *)this + 13) = v11;
      return;
    }
    v12 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)this + 40, (WTF *)(v10 + a3), (uint64_t)v4);
    v10 = *((unsigned int *)this + 13);
    if (v11 >= v10)
    {
      v4 = (unsigned __int16 *)v12;
      goto LABEL_19;
    }
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x197B3E790);
  }
  if (a3 && *((_BYTE *)this + 59))
  {
    v5 = 2 * a3 - 2;
    v6 = *v4;
    v14 = *v4;
LABEL_9:
    v9 = *((unsigned int *)this + 13);
    if ((_DWORD)v9 == *((_DWORD *)this + 12))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)this + 40, &v14);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)this + 5) + v9) = v6;
      ++*((_DWORD *)this + 13);
    }
    while (v5)
    {
      v7 = *((unsigned __int8 *)this + 59);
      v5 -= 2;
      v8 = v4[1];
      ++v4;
      LOBYTE(v6) = v8;
      v14 = v8;
      if (v7)
        goto LABEL_9;
    }
  }
}

void WTF::URLParser::popPath(WTF::URLParser *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  const void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = *((unsigned int *)this + 7);
  v3 = ((*((_DWORD *)this + 2) >> 3) & 7) + *((_DWORD *)this + 6);
  if (v2 <= v3 + 1)
  {
    v4 = *((_DWORD *)this + 13);
    goto LABEL_46;
  }
  v4 = *((_DWORD *)this + 13);
  if (v4 <= (int)v2 - 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197B3E9CCLL);
  }
  v5 = *((_QWORD *)this + 5);
  v6 = v2 - 2;
  if (*(_BYTE *)(v5 + (v2 - 1)) != 47)
    v6 = v2 - 1;
  if (v6 > v3)
  {
    do
    {
      if (v4 <= v6)
        goto LABEL_64;
      if (*(_BYTE *)(v5 + v6) == 47)
        goto LABEL_10;
      --v6;
    }
    while (v6 > v3);
    v6 = ((*((_DWORD *)this + 2) >> 3) & 7) + *((_DWORD *)this + 6);
  }
LABEL_10:
  v7 = v6 + 1;
  if (!*((_BYTE *)this + 57))
  {
LABEL_45:
    *((_DWORD *)this + 7) = v7;
    LODWORD(v2) = v7;
    goto LABEL_46;
  }
  if (v4 <= v7)
  {
    __break(0xC471u);
    goto LABEL_63;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  v9 = v2 - v7;
  if (v2 - v7 < 0)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if ((_DWORD)v2 == (_DWORD)v7 || v3 != v6)
    goto LABEL_45;
  v10 = v9 - 1;
  if ((*v8 | 0x20u) - 123 < 0xFFFFFFE6 || v9 == 1)
    goto LABEL_45;
  v12 = v7 - v2 + 2;
  v13 = v8;
  while (1)
  {
    v14 = *++v13;
    v15 = v14;
    v16 = v14 - 11;
    v17 = v14 - 14 >= 0xFFFFFFFB && v16 >= 2;
    if (!v17)
      break;
    ++v12;
    v8 = v13;
    if (!--v10)
      goto LABEL_45;
  }
  if (v15 != 124 && v15 != 58)
    goto LABEL_45;
  if (v10 != 1)
  {
    v18 = 2;
    do
    {
      v19 = v8[v18];
      if ((v19 - 14) < 0xFFFFFFFB || (v19 - 11) < 2)
        break;
      ++v18;
      v17 = __CFADD__(v12++, 1);
    }
    while (!v17);
    if ((v19 - 35) > 0x39 || ((1 << (v19 - 35)) & 0x200000010001001) == 0)
      goto LABEL_45;
  }
LABEL_46:
  if (v4 >= v2)
    goto LABEL_59;
  v22 = *((unsigned int *)this + 12);
  if (v22 >= v2)
    goto LABEL_59;
  v23 = v22 + (v22 >> 2);
  if (v23 >= 0x10)
    v24 = v23 + 1;
  else
    v24 = 16;
  if (v24 <= v2)
    v25 = v2;
  else
    v25 = v24;
  if (HIDWORD(v25))
  {
LABEL_64:
    __break(0xC471u);
    JUMPOUT(0x197B3E9C4);
  }
  v26 = v4;
  v27 = (const void *)*((_QWORD *)this + 5);
  v28 = (void *)WTF::fastMalloc((WTF *)v25);
  *((_DWORD *)this + 12) = v25;
  *((_QWORD *)this + 5) = v28;
  memcpy(v28, v27, v26);
  if (v27)
  {
    if (*((const void **)this + 5) == v27)
    {
      *((_QWORD *)this + 5) = 0;
      *((_DWORD *)this + 12) = 0;
    }
    WTF::fastFree((unint64_t)v27, v29, v30, v31, v32, v33, v34, v35);
  }
LABEL_59:
  *((_DWORD *)this + 13) = v2;
}

void WTF::URLParser::failure(WTF::URLParser *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  v9 = (_DWORD *)*((_QWORD *)this + 8);
  if (v9)
    *v9 += 2;
  v10 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
}

BOOL WTF::URLParser::isAtLocalhost<unsigned char>(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v6;
  uint64_t i;
  int v8;
  uint64_t j;
  int v12;
  uint64_t k;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned __int8 *v27;
  uint64_t m;

  if (!a2)
    return 0;
  v2 = a2 - 1;
  if (a2 == 1 || (*a1 | (32 * (*a1 - 65 < 0x1A))) != 0x6C)
    return 0;
  v3 = a1[1];
  if ((v3 - 14) >= 0xFFFFFFFB && (v3 - 11) >= 2)
  {
    while (--v2)
    {
      v3 = a1[2];
      ++a1;
      if ((v3 - 14) < 0xFFFFFFFB || (v3 - 11) < 2)
        goto LABEL_14;
    }
  }
  else
  {
LABEL_14:
    m = v2;
    if ((v3 | (32 * ((v3 - 65) < 0x1A))) == 0x6F)
    {
      v27 = a1 + 2;
      if (v2 != 1)
      {
        v6 = 0;
        for (i = -2; ; --i)
        {
          v8 = a1[v6 + 2];
          if ((v8 - 14) < 0xFFFFFFFB || (v8 - 11) < 2)
            break;
          v27 = &a1[v6 + 3];
          m = v2 + i;
          if (v2 - 1 == ++v6)
            return 0;
        }
        if ((v8 | (32 * ((v8 - 65) < 0x1A))) == 0x63)
        {
          v27 = &a1[v6 + 3];
          m = v2 + i;
          if (v2 - 2 != v6)
          {
            for (j = -3 - v6; ; --j)
            {
              v12 = a1[v6 + 3];
              if ((v12 - 14) < 0xFFFFFFFB || (v12 - 11) < 2)
                break;
              v27 = &a1[v6 + 4];
              m = v2 + j;
              if (v2 - 2 == ++v6)
                return 0;
            }
            if ((v12 | (32 * ((v12 - 65) < 0x1A))) == 0x61)
            {
              v27 = &a1[v6 + 4];
              m = v2 + j;
              if (v2 - 3 != v6)
              {
                for (k = -v6; ; --k)
                {
                  v15 = &a1[v6];
                  v16 = a1[v6 + 4];
                  if ((v16 - 14) < 0xFFFFFFFB || (v16 - 11) < 2)
                    break;
                  v27 = v15 + 5;
                  m = v2 + k - 4;
                  if (v2 - 3 == ++v6)
                    return 0;
                }
                if ((v16 | (32 * ((v16 - 65) < 0x1A))) == 0x6C)
                {
                  v27 = &a1[v6 + 5];
                  m = v2 + k - 4;
                  if (v2 - 4 != v6)
                  {
                    v18 = v15 + 6;
                    v19 = v2 - v6 - 6;
                    v20 = v15 + 7;
                    while (1)
                    {
                      v21 = *(v18 - 1);
                      if ((v21 - 14) < 0xFFFFFFFB || (v21 - 11) < 2)
                        break;
                      v27 = v20 - 1;
                      m = v19 + 1;
                      ++v20;
                      --v19;
                      ++v18;
                      if (v19 == -2)
                        return 0;
                    }
                    if ((v21 | (32 * ((v21 - 65) < 0x1A))) == 0x68)
                    {
                      v27 = v20 - 1;
                      for (m = v19 + 1; v19 != -1; --v19)
                      {
                        v23 = *v18;
                        v24 = v23 - 14;
                        v25 = v23 - 11;
                        if (v24 < 0xFFFFFFFB || v25 < 2)
                          break;
                        ++v18;
                        v27 = v20;
                        m = v19;
                        ++v20;
                      }
                      if (WTF::URLParser::checkLocalhostCodePoint<unsigned char>(&v27, 111)
                        && WTF::URLParser::checkLocalhostCodePoint<unsigned char>(&v27, 115)
                        && WTF::URLParser::checkLocalhostCodePoint<unsigned char>(&v27, 116))
                      {
                        return m == 0;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t WTF::URLParser::isAtLocalhost<char16_t>(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t result;
  unsigned __int16 *v3;
  uint64_t v4;

  v3 = a1;
  v4 = a2;
  result = WTF::URLParser::checkLocalhostCodePoint<char16_t>(&v3, 108);
  if ((_DWORD)result)
  {
    result = WTF::URLParser::checkLocalhostCodePoint<char16_t>(&v3, 111);
    if ((_DWORD)result)
    {
      result = WTF::URLParser::checkLocalhostCodePoint<char16_t>(&v3, 99);
      if ((_DWORD)result)
      {
        result = WTF::URLParser::checkLocalhostCodePoint<char16_t>(&v3, 97);
        if ((_DWORD)result)
        {
          result = WTF::URLParser::checkLocalhostCodePoint<char16_t>(&v3, 108);
          if ((_DWORD)result)
          {
            result = WTF::URLParser::checkLocalhostCodePoint<char16_t>(&v3, 104);
            if ((_DWORD)result)
            {
              result = WTF::URLParser::checkLocalhostCodePoint<char16_t>(&v3, 111);
              if ((_DWORD)result)
              {
                result = WTF::URLParser::checkLocalhostCodePoint<char16_t>(&v3, 115);
                if ((_DWORD)result)
                {
                  result = WTF::URLParser::checkLocalhostCodePoint<char16_t>(&v3, 116);
                  if ((_DWORD)result)
                    return v4 == 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

WTF::URL *WTF::URLParser::URLParser(WTF::URL *this, WTF::AtomStringImpl *a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 *v8;
  unsigned __int8 *v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v16;
  _DWORD *v17;
  _OWORD *v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;

  v8 = a4;
  v9 = (unsigned __int8 *)a3;
  *(_OWORD *)((char *)this + 44) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  v11 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)this + 8) = v11;
  *((_QWORD *)this + 9) = 0;
  if (v11)
  {
    v12 = *(_DWORD *)(v11 + 16);
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(unsigned int *)(v11 + 4);
    *((_QWORD *)this + 9) = v13;
    if ((v12 & 4) != 0)
    {
      WTF::URLParser::parse<unsigned char>(this, v13, v14, v9, (void (***)(WTF **__return_ptr, _QWORD, uint64_t, _QWORD))v8, a6, a7, a8);
      if (*((_BYTE *)this + 56))
        return this;
    }
    else
    {
      WTF::URLParser::parse<char16_t>(this, v13, v14, (uint64_t)v9, v8, a6, a7, a8);
      if (*((_BYTE *)this + 56))
        return this;
    }
    v20 = *((_DWORD *)this + 2);
    v21 = ((v20 >> 3) & 7) + *((_DWORD *)this + 6);
    if ((_DWORD)v21 != (v20 >> 6) + 1)
      return this;
    v22 = *(_QWORD *)this;
    if (!*(_QWORD *)this)
      return this;
    v23 = v21 + 1;
    if ((v21 + 1) >= *(_DWORD *)(v22 + 4))
      return this;
    v24 = *(_QWORD *)(v22 + 8);
    if ((*(_BYTE *)(v22 + 16) & 4) != 0)
    {
      if (*(_BYTE *)(v24 + v21) != 47)
        return this;
      v25 = *(unsigned __int8 *)(v24 + v23);
    }
    else
    {
      if (*(_WORD *)(v24 + 2 * v21) != 47)
        return this;
      v25 = *(unsigned __int16 *)(v24 + 2 * v23);
    }
    if (v25 != 47)
      return this;
    WTF::URLParser::addNonSpecialDotSlash(this);
    return this;
  }
  else
  {
    v16 = (_OWORD *)(a3 + 8);
    if ((*(_DWORD *)(a3 + 8) & 5) != 1)
      return this;
    v17 = *(_DWORD **)a3;
    if (*(_QWORD *)a3)
      *v17 += 2;
    v18 = (_OWORD *)((char *)this + 8);
    v19 = *(WTF::StringImpl **)this;
    *(_QWORD *)this = v17;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, a2, a3, a3, (uint64_t)v8, a6, a7, a8);
        WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    v34 = v16[1];
    *v18 = *v16;
    *(_OWORD *)((char *)this + 24) = v34;
    WTF::URL::removeFragmentIdentifier((WTF::StringImpl **)this, a2, a3, (uint64_t)v9, (uint64_t)v8, a6, a7, a8);
    return this;
  }
}

void WTF::URLParser::parse<unsigned char>(WTF::URLParser *this, uint64_t a2, uint64_t a3, unsigned __int8 *a4, void (***a5)(WTF **__return_ptr, _QWORD, uint64_t, _QWORD), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  unint64_t v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  char v27;
  unsigned __int8 v28;
  int v29;
  BOOL v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v50;
  uint64_t v51;
  int v52;
  BOOL v53;
  char v54;
  int v55;
  unsigned __int8 *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  uint64_t v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  int v68;
  unsigned __int8 *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  int v80;
  unsigned __int8 *v81;
  unsigned int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  int v95;
  int v96;
  _WORD *v97;
  int v98;
  uint64_t v99;
  unint64_t v101;
  unsigned __int8 *v102;
  signed __int8 v103;
  BOOL v104;
  uint64_t v105;
  int v106;
  unsigned __int8 *v107;
  BOOL v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  uint64_t v117;
  unsigned __int8 *v118;
  uint64_t v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  int v124;
  int v125;
  BOOL v126;
  uint64_t v127;
  unsigned __int8 *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  unint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unsigned __int8 *v143;
  uint64_t v144;
  unsigned __int8 *v145;
  unsigned __int8 *v146;
  uint64_t v147;
  int v148;
  int v149;
  uint64_t v150;
  unsigned __int8 *v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned __int8 v163;
  unsigned __int8 v164;
  unsigned int v165;
  int v167;
  BOOL v168;
  unsigned __int8 *v169;
  int v170;
  unsigned int v171;
  unsigned int v172;
  uint64_t v174;
  uint64_t v175;
  unsigned __int8 v176;
  unsigned __int8 v177;
  unsigned int v178;
  int v180;
  BOOL v181;
  uint64_t v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  unsigned __int8 v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  const char *v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unsigned __int16 *v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  const char *v229;
  unint64_t v230;
  __int16 v231;
  int v232;
  uint64_t v233;
  unsigned __int8 *v234;
  unint64_t v235;
  unint64_t v236;
  const char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  WTF::URLParser *v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  WTF::URLParser *v255;
  unsigned int v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  const char *v261;
  unint64_t v262;
  unint64_t v263;
  const char *v264;
  unint64_t v265;
  const char *v266;
  unint64_t v267;
  __int16 v268;
  uint64_t v269;
  int v270;
  int v271;
  uint64_t v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  const char *v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  const char *v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  const char *v296;
  unint64_t v297;
  unint64_t v298;
  const char *v299;
  uint64_t v300;
  uint64_t v301;
  _DWORD *v302;
  WTF::StringImpl *v303;
  unint64_t v304;
  void *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  unsigned __int8 *v313;
  int v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  uint64_t v319;
  unint64_t v320;
  int *v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unsigned __int8 v326;
  unsigned int v327;
  unint64_t v329;
  void *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  __int128 v337;
  uint64_t v338;
  int v339;
  unsigned int v340;
  unsigned int v341;
  int v343;
  int v344;
  BOOL v345;
  int v346;
  int v347;
  int v348;
  unint64_t v349;
  unint64_t v350;
  unint64_t v351;
  const char *v352;
  unsigned __int8 *v353;
  unint64_t v354;
  unsigned int v355;
  uint64_t v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  unsigned __int16 *v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t v366;
  uint64_t v367;
  int v368;
  int v369;
  unint64_t v370;
  const char *v371;
  uint64_t v372;
  unint64_t v373;
  __int16 v374;
  uint64_t v375;
  int v376;
  _DWORD *v377;
  WTF::StringImpl *v378;
  unint64_t v379;
  void *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  WTF *v387;
  unint64_t v388;
  unint64_t v389;
  unint64_t v390;
  const char *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unint64_t *v395;
  int *v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  WTF *v400;
  uint64_t v401;
  void (***v402)(WTF **__return_ptr, _QWORD, uint64_t, _QWORD);
  __int128 v403;
  __int128 v404;

  v9 = (uint64_t)a4;
  v10 = a3;
  v11 = (unsigned __int8 *)a2;
  v402 = a5;
  v13 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  *(_OWORD *)((char *)this + 8) = 0u;
  v22 = (_OWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  v400 = 0;
  v401 = 0;
  if (a5 == (void (***)(WTF **__return_ptr, _QWORD, uint64_t, _QWORD))-1)
  {
    v402 = 0;
    *(_QWORD *)&v399 = v11;
    *((_QWORD *)&v399 + 1) = v10;
    v398 = 0uLL;
    if (v10)
      goto LABEL_21;
LABEL_11:
    if (*((_BYTE *)this + 59))
    {
      if (!*((_DWORD *)this + 13))
      {
LABEL_13:
        if ((*(_DWORD *)(v9 + 8) & 5) == 1)
        {
          v24 = *(_DWORD **)v9;
          if (*(_QWORD *)v9)
            *v24 += 2;
          v25 = *(WTF::StringImpl **)this;
          *(_QWORD *)this = v24;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
            {
              WTF::StringImpl::~StringImpl(v25, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
              WTF::fastFree(v329, v330, v331, v332, v333, v334, v335, v336);
            }
            else
            {
              *(_DWORD *)v25 -= 2;
            }
          }
          v337 = *(_OWORD *)(v9 + 24);
          *v22 = *(_OWORD *)(v9 + 8);
          *(_OWORD *)((char *)this + 24) = v337;
          WTF::URL::removeFragmentIdentifier((WTF::StringImpl **)this, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
          goto LABEL_999;
        }
      }
    }
    else if ((_QWORD)v399 == *((_QWORD *)this + 9))
    {
      goto LABEL_13;
    }
LABEL_836:
    *v22 = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    v302 = (_DWORD *)*((_QWORD *)this + 8);
    if (v302)
      *v302 += 2;
    v303 = *(WTF::StringImpl **)this;
    *(_QWORD *)this = v302;
    if (v303)
    {
      if (*(_DWORD *)v303 == 2)
      {
        WTF::StringImpl::~StringImpl(v303, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
        WTF::fastFree(v304, v305, v306, v307, v308, v309, v310, v311);
      }
      else
      {
        *(_DWORD *)v303 -= 2;
      }
    }
    goto LABEL_999;
  }
  if (!v10)
  {
LABEL_10:
    v399 = (unint64_t)v11;
    goto LABEL_11;
  }
  v23 = v10;
  while (v11[v23 - 1] <= 0x20u)
  {
    --v23;
    WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, (uint64_t)v11);
    if (!v23)
      goto LABEL_10;
  }
  if (v10 < v23)
    goto LABEL_962;
  *(_QWORD *)&v399 = v11;
  *((_QWORD *)&v399 + 1) = v23;
  v10 = v23;
  v398 = 0uLL;
LABEL_21:
  if (*v11 <= 0x20u)
  {
    v353 = v11 + 1;
    v354 = v10 - 1;
    do
    {
      WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, (uint64_t)v11);
      *(_QWORD *)&v399 = v353;
      *((_QWORD *)&v399 + 1) = v354;
      if (!v354)
        goto LABEL_11;
      v355 = *++v11;
      ++v353;
      --v354;
    }
    while (v355 <= 0x20);
    v10 = v354 + 1;
  }
  v26 = 0;
  v27 = 0;
  v395 = (unint64_t *)((char *)this + 40);
  v396 = (int *)((char *)this + 52);
  v397 = v399;
  while (2)
  {
    a4 = (unsigned __int8 *)v399;
    while (1)
    {
      v28 = *a4;
      v29 = *a4;
      v30 = (v29 - 14) >= 0xFFFFFFFB && (v29 - 11) >= 2;
      if (!v30)
        break;
      WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, (uint64_t)a4);
      if (!*((_QWORD *)&v399 + 1))
        goto LABEL_962;
      v10 = *((_QWORD *)&v399 + 1) - 1;
      v53 = *((_QWORD *)&v399 + 1) == 1;
      a4 = (unsigned __int8 *)(v399 + 1);
      *(_QWORD *)&v399 = v399 + 1;
      --*((_QWORD *)&v399 + 1);
      if (v53)
        goto LABEL_835;
    }
    switch(v27)
    {
      case 0:
        if ((v29 | 0x20u) - 97 <= 0x19)
        {
          if ((v29 - 65) <= 0x19)
          {
            WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, (uint64_t)a4);
            if (!*((_QWORD *)&v399 + 1))
              goto LABEL_962;
            v28 = *(_BYTE *)v399;
          }
          LODWORD(v404) = v28 | (32 * (v28 - 65 < 0x1A));
          if (*((_BYTE *)this + 59))
          {
            v243 = *((unsigned int *)this + 13);
            if ((_DWORD)v243 == *((_DWORD *)this + 12))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
            }
            else
            {
              *(_BYTE *)(*v395 + v243) = v28 | (32 * (v28 - 65 < 0x1A));
              ++*v396;
            }
          }
          while (*((_QWORD *)&v399 + 1))
          {
            a2 = v399 + 1;
            *(_QWORD *)&v399 = v399 + 1;
            if (!--*((_QWORD *)&v399 + 1))
              goto LABEL_341;
            v31 = *(unsigned __int8 *)a2;
            v32 = v31 - 14;
            v33 = v31 - 11;
            if (v32 < 0xFFFFFFFB || v33 < 2)
              goto LABEL_351;
            WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, a2);
          }
          goto LABEL_962;
        }
        v27 = 2;
        goto LABEL_485;
      case 1:
        if (*a4 > 0x7Au)
          goto LABEL_341;
        if ((WTF::characterClassTable[*a4] & 0x40) != 0)
        {
          if ((v29 - 65) <= 0x19)
          {
            WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, (uint64_t)a4);
            if (!*((_QWORD *)&v399 + 1))
              goto LABEL_962;
            v28 = *(_BYTE *)v399;
          }
          LODWORD(v404) = v28 | (32 * (v28 - 65 < 0x1A));
          if (*((_BYTE *)this + 59))
          {
            v254 = *((unsigned int *)this + 13);
            if ((_DWORD)v254 == *((_DWORD *)this + 12))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
            }
            else
            {
              *(_BYTE *)(*v395 + v254) = v28 | (32 * (v28 - 65 < 0x1A));
              ++*v396;
            }
          }
          while (1)
          {
            if (!*((_QWORD *)&v399 + 1))
              goto LABEL_962;
            a2 = v399 + 1;
            *(_QWORD *)&v399 = v399 + 1;
            if (!--*((_QWORD *)&v399 + 1))
              goto LABEL_341;
            v133 = *(unsigned __int8 *)a2;
            v134 = v133 - 14;
            v135 = v133 - 11;
            if (v134 < 0xFFFFFFFB || v135 < 2)
              break;
            WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, a2);
          }
LABEL_351:
          v27 = 1;
          goto LABEL_485;
        }
        if (*a4 != 58)
        {
LABEL_341:
          if (*((_DWORD *)this + 12))
          {
            if (*v396)
              *v396 = 0;
            v137 = *v395;
            if (*v395)
            {
              *((_QWORD *)this + 5) = 0;
              *((_DWORD *)this + 12) = 0;
              WTF::fastFree(v137, (void *)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
            }
          }
          v399 = v397;
          v27 = 2;
          goto LABEL_485;
        }
        v68 = *((unsigned __int8 *)this + 59);
        if (*((_BYTE *)this + 59))
        {
          LODWORD(v69) = *v396;
          v70 = v394;
          if (*v396 >> 26)
            goto LABEL_836;
        }
        else
        {
          v69 = &a4[-*((_QWORD *)this + 9)];
          v70 = v394;
          if (v69 >> 26)
            goto LABEL_836;
        }
        *(_DWORD *)v22 = *(_DWORD *)v22 & 0x3F | ((_DWORD)v69 << 6);
        LODWORD(v404) = 58;
        if (v68)
        {
          v272 = *((unsigned int *)this + 13);
          if ((_DWORD)v272 == *((_DWORD *)this + 12))
          {
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
          }
          else
          {
            *(_BYTE *)(*v395 + v272) = 58;
            ++*v396;
          }
          v70 = v394;
          v71 = *((unsigned int *)this + 2);
          v72 = v71 >> 6;
          if (*((_BYTE *)this + 59))
          {
LABEL_760:
            if (*v396 < v72)
              goto LABEL_962;
            v281 = v393 & 0xFFFFFF0000000000 | v72;
            a3 = v281 | 0x100000000;
            v78 = (uint64_t *)((char *)this + 40);
            v393 = v281 | 0x100000000;
            if (!(_DWORD)v281)
              goto LABEL_459;
            goto LABEL_155;
          }
        }
        else
        {
          v71 = *((unsigned int *)this + 2);
          v72 = v71 >> 6;
          if (*((_BYTE *)this + 59))
            goto LABEL_760;
        }
        v73 = v70 & 0xFFFFFF0000000000;
        v74 = *((_QWORD *)this + 8);
        if (!v74)
        {
          v394 = v73 | 0x100000000;
LABEL_458:
          v393 = 0x100000000;
LABEL_459:
          v402 = 0;
          v404 = v399;
          WTF::URLParser::advance<unsigned char,(WTF::URLParser::ReportSyntaxViolation)1>((uint64_t)this, &v404);
          if (*((_QWORD *)&v404 + 1) && *(_BYTE *)v404 == 47)
          {
            LODWORD(v403) = 47;
            if (*((_BYTE *)this + 59))
            {
              v286 = *((unsigned int *)this + 13);
              if ((_DWORD)v286 == *((_DWORD *)this + 12))
              {
                WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v403);
              }
              else
              {
                *(_BYTE *)(*v395 + v286) = 47;
                ++*v396;
              }
            }
            v399 = v404;
            if (!*((_QWORD *)&v404 + 1))
              goto LABEL_962;
            v187 = v399 + 1;
            *(_QWORD *)&v399 = v399 + 1;
            --*((_QWORD *)&v399 + 1);
            if (*((_BYTE *)this + 59))
              LODWORD(v188) = *v396;
            else
              v188 = v187 - *((_QWORD *)this + 9);
            *((_DWORD *)this + 3) = v188;
            v27 = 4;
          }
          else
          {
            if (!*((_QWORD *)&v399 + 1))
              goto LABEL_962;
            v189 = v399 + 1;
            *(_QWORD *)&v399 = v399 + 1;
            --*((_QWORD *)&v399 + 1);
            if (*((_BYTE *)this + 59))
              LODWORD(v190) = *v396;
            else
              v190 = v189 - *((_QWORD *)this + 9);
            *(int32x4_t *)((char *)this + 12) = vdupq_n_s32(v190);
            v191 = *((_DWORD *)this + 2);
            *((_DWORD *)this + 7) = v190;
            *((_DWORD *)this + 2) = v191 & 0xFFFFFFC3 | 4;
            v27 = 16;
          }
          goto LABEL_485;
        }
        v75 = *(unsigned int *)(v74 + 4);
        v76 = (unint64_t)((*(_DWORD *)(v74 + 16) >> 2) & 1) << 32;
        v77 = v73 | v75;
        if (!(_DWORD)v75)
        {
          v394 = v77 | v76;
          goto LABEL_458;
        }
        v78 = (uint64_t *)(v74 + 8);
        if (v75 <= v72)
          a3 = v77 | v76;
        else
          a3 = v76 | v72;
        v393 = a3;
        v394 = v77 | v76;
        if (!(_DWORD)a3)
          goto LABEL_459;
LABEL_155:
        a2 = *v78;
        v79 = a3 & 0xFF00000000;
        if ((a3 & 0xFF00000000) != 0)
          v80 = *(unsigned __int8 *)a2;
        else
          v80 = *(unsigned __int16 *)a2;
        if (v80 == 119)
        {
          if ((_DWORD)a3 == 3)
          {
            if (v79)
            {
              if (*(_BYTE *)(a2 + 1) != 115)
                goto LABEL_459;
              v203 = *(unsigned __int8 *)(a2 + 2);
            }
            else
            {
              if (*(_WORD *)(a2 + 2) != 115)
                goto LABEL_459;
              v203 = *(unsigned __int16 *)(a2 + 4);
            }
            a3 = v393;
            if (v203 != 115)
              goto LABEL_459;
          }
          else
          {
            if ((_DWORD)a3 != 2)
              goto LABEL_459;
            v201 = v79 ? *(unsigned __int8 *)(a2 + 1) : *(unsigned __int16 *)(a2 + 2);
            if (v201 != 115)
              goto LABEL_459;
          }
          v402 = 0;
          *((_BYTE *)this + 56) = 1;
          v222 = (uint64_t *)v9;
          goto LABEL_593;
        }
        if (v80 == 104)
        {
          if ((_DWORD)a3 == 5)
          {
            if (v79)
            {
              if (*(_BYTE *)(a2 + 1) != 116 || *(_BYTE *)(a2 + 2) != 116 || *(_BYTE *)(a2 + 3) != 112)
                goto LABEL_459;
              v202 = *(unsigned __int8 *)(a2 + 4);
            }
            else
            {
              if (*(_WORD *)(a2 + 2) != 116 || *(_WORD *)(a2 + 4) != 116 || *(_WORD *)(a2 + 6) != 112)
                goto LABEL_459;
              v202 = *(unsigned __int16 *)(a2 + 8);
            }
            if (v202 != 115)
              goto LABEL_459;
          }
          else
          {
            if ((_DWORD)a3 != 4)
              goto LABEL_459;
            if (v79)
            {
              if (*(_BYTE *)(a2 + 1) != 116 || *(_BYTE *)(a2 + 2) != 116)
                goto LABEL_459;
              v200 = *(unsigned __int8 *)(a2 + 3);
            }
            else
            {
              if (*(_WORD *)(a2 + 2) != 116 || *(_WORD *)(a2 + 4) != 116)
                goto LABEL_459;
              v200 = *(unsigned __int16 *)(a2 + 6);
            }
            if (v200 != 112)
              goto LABEL_459;
          }
          *(_DWORD *)v22 = v71 | 2;
          goto LABEL_588;
        }
        if (v80 != 102)
          goto LABEL_459;
        if ((_DWORD)a3 != 4)
        {
          if ((_DWORD)a3 != 3)
            goto LABEL_459;
          if (v79)
          {
            if (*(_BYTE *)(a2 + 1) != 116)
              goto LABEL_459;
            v199 = *(unsigned __int8 *)(a2 + 2);
          }
          else
          {
            if (*(_WORD *)(a2 + 2) != 116)
              goto LABEL_459;
            v199 = *(unsigned __int16 *)(a2 + 4);
          }
          if (v199 != 112)
            goto LABEL_459;
LABEL_588:
          *((_BYTE *)this + 56) = 1;
          v222 = (uint64_t *)v9;
          a3 = v393;
LABEL_593:
          v223 = WTF::URL::protocolIs(v222, (_BYTE *)a2, a3);
          if (!*((_QWORD *)&v399 + 1))
            goto LABEL_962;
          if (v223)
            v27 = 3;
          else
            v27 = 7;
          v10 = *((_QWORD *)&v399 + 1) - 1;
          *(_QWORD *)&v399 = v399 + 1;
          --*((_QWORD *)&v399 + 1);
          goto LABEL_486;
        }
        if (v79)
        {
          if (*(_BYTE *)(a2 + 1) != 105 || *(_BYTE *)(a2 + 2) != 108)
            goto LABEL_459;
          v204 = *(unsigned __int8 *)(a2 + 3);
        }
        else
        {
          if (*(_WORD *)(a2 + 2) != 105 || *(_WORD *)(a2 + 4) != 108)
            goto LABEL_459;
          v204 = *(unsigned __int16 *)(a2 + 6);
        }
        if (v204 != 101)
          goto LABEL_459;
        *((_WORD *)this + 28) = 257;
        if (!*((_QWORD *)&v399 + 1))
          goto LABEL_962;
        v10 = *((_QWORD *)&v399 + 1) - 1;
        *(_QWORD *)&v399 = v399 + 1;
        --*((_QWORD *)&v399 + 1);
        v27 = 11;
LABEL_486:
        if (!v10)
        {
LABEL_835:
          switch(v27)
          {
            case 0:
              goto LABEL_11;
            case 1:
            case 7:
            case 8:
              goto LABEL_836;
            case 2:
              __break(0xC471u);
              JUMPOUT(0x197B426ECLL);
            case 3:
              v317 = v399;
              goto LABEL_861;
            case 4:
              v318 = *((_DWORD *)this + 2);
              v312 = *((_DWORD *)this + 3);
              *(int32x4_t *)((char *)this + 12) = vdupq_n_s32(v312 - 1);
              goto LABEL_927;
            case 5:
              __break(0xC471u);
              JUMPOUT(0x197B4270CLL);
            case 6:
              WTF::URLParser::copyURLPartsUntil<unsigned char>((uint64_t)this, v9, 5, v399, &v402);
              LODWORD(v404) = 47;
              if (*((_BYTE *)this + 59))
                goto LABEL_953;
              goto LABEL_945;
            case 9:
              goto LABEL_848;
            case 10:
              goto LABEL_846;
            case 11:
              if ((*(_BYTE *)(v9 + 8) & 1) != 0)
              {
                v348 = WTF::URL::protocolIs((uint64_t *)v9, "file", 0x100000004);
                v317 = v399;
                if (v348)
                {
LABEL_861:
                  WTF::URLParser::copyURLPartsUntil<unsigned char>((uint64_t)this, v9, 8, v317, &v402);
                  goto LABEL_991;
                }
              }
              else
              {
                v317 = v399;
              }
              WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, v317);
              if (!*((_BYTE *)this + 59))
                goto LABEL_910;
              goto LABEL_963;
            case 12:
              WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, v399);
              if ((*(_BYTE *)(v9 + 8) & 1) == 0
                || !WTF::URL::protocolIs((uint64_t *)v9, "file", 0x100000004))
              {
                goto LABEL_980;
              }
              WTF::URL::host((WTF::URL *)v9);
              if (v315)
              {
                WTF::URLParser::copyURLPartsUntil<unsigned char>((uint64_t)this, v9, 5, v399, &v402);
                LODWORD(v404) = 47;
                if (*((_BYTE *)this + 59))
                {
                  v316 = *((unsigned int *)this + 13);
                  if ((_DWORD)v316 == *((_DWORD *)this + 12))
                  {
                    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
                  }
                  else
                  {
                    *(_BYTE *)(*v395 + v316) = 47;
                    ++*v396;
                  }
                }
              }
              else
              {
                WTF::URLParser::copyURLPartsUntil<unsigned char>((uint64_t)this, v9, 0, v399, &v402);
                if (!*((_BYTE *)this + 59))
                  goto LABEL_981;
                v350 = *((unsigned int *)this + 13);
                v351 = v350 + 2;
                if (v350 + 2 <= *((unsigned int *)this + 12))
                {
                  v352 = ":/";
                }
                else
                {
                  v352 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v395, (WTF *)(v350 + 2), (uint64_t)":/");
                  v350 = *v396;
                  if (v351 < v350)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197B42124);
                  }
                }
                *(_WORD *)(*v395 + v350) = *(_WORD *)v352;
                *v396 = v351;
LABEL_980:
                if (*((_BYTE *)this + 59))
                {
                  v389 = *((unsigned int *)this + 12);
                  v388 = *((unsigned int *)this + 13);
                  *((_DWORD *)this + 3) = v388 + 1;
                  v390 = v388 + 2;
                  if (v388 + 2 <= v389)
                  {
                    v391 = "//";
                  }
                  else
                  {
                    v391 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v395, (WTF *)(v388 + 2), (uint64_t)"//");
                    v388 = *v396;
                    if (v390 < v388)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197B4264CLL);
                    }
                  }
                  *(_WORD *)(*((_QWORD *)this + 5) + v388) = *(_WORD *)v391;
                  *((_DWORD *)this + 13) = v390;
                  v376 = *((_DWORD *)this + 3);
                }
                else
                {
LABEL_981:
                  v376 = v399 - *((_DWORD *)this + 18) + 1;
                  *((_DWORD *)this + 3) = v376;
                }
                *((_DWORD *)this + 4) = v376;
                *((_DWORD *)this + 5) = v376;
                *((_DWORD *)this + 6) = v376;
                *((_DWORD *)this + 2) &= 0xFFFFFFC7;
              }
              if (WTF::URLParser::copyBaseWindowsDriveLetter(this, (const WTF::URL *)v9))
              {
                LODWORD(v404) = 47;
                if (*((_BYTE *)this + 59))
                {
                  v392 = *((unsigned int *)this + 13);
                  if ((_DWORD)v392 == *((_DWORD *)this + 12))
                  {
                    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
                  }
                  else
                  {
                    *(_BYTE *)(*v395 + v392) = 47;
                    ++*v396;
                  }
                }
                v346 = 4;
              }
              else
              {
                v346 = 1;
              }
              v347 = *((_DWORD *)this + 6);
              goto LABEL_988;
            case 13:
              v313 = (unsigned __int8 *)v399;
              goto LABEL_873;
            case 14:
              __break(0xC471u);
              JUMPOUT(0x197B4272CLL);
            case 15:
            case 16:
              if (*((_BYTE *)this + 59))
                v312 = *v396;
              else
                v312 = v399 - *((_DWORD *)this + 18);
              *((_DWORD *)this + 8) = v312;
              goto LABEL_990;
            case 17:
              goto LABEL_870;
            case 18:
              a4 = (unsigned __int8 *)v399;
              goto LABEL_868;
            default:
              goto LABEL_991;
          }
        }
        continue;
      case 2:
        v55 = *(_DWORD *)(v9 + 8);
        if ((v55 & 1) == 0)
          goto LABEL_836;
        if ((v55 & 4) == 0)
        {
          if (WTF::URL::protocolIs((uint64_t *)v9, "file", 0x100000004))
            v27 = 11;
          else
            v27 = 5;
          goto LABEL_485;
        }
        if (*a4 != 35)
          goto LABEL_836;
LABEL_261:
        WTF::URLParser::copyURLPartsUntil<unsigned char>((uint64_t)this, v9, 8, (uint64_t)a4, &v402);
        LODWORD(v404) = 35;
        if (*((_BYTE *)this + 59))
        {
          v109 = *((unsigned int *)this + 13);
          if ((_DWORD)v109 == *((_DWORD *)this + 12))
          {
LABEL_304:
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
          }
          else
          {
            *(_BYTE *)(*v395 + v109) = 35;
LABEL_708:
            ++*v396;
          }
        }
LABEL_384:
        if (!*((_QWORD *)&v399 + 1))
          goto LABEL_962;
        v10 = *((_QWORD *)&v399 + 1) - 1;
        *(_QWORD *)&v399 = v399 + 1;
        --*((_QWORD *)&v399 + 1);
        v27 = 19;
        goto LABEL_486;
      case 3:
        if (*a4 != 47)
        {
          v27 = 5;
          goto LABEL_485;
        }
        LODWORD(v404) = 47;
        if (*((_BYTE *)this + 59))
        {
          v239 = *((unsigned int *)this + 13);
          if ((_DWORD)v239 == *((_DWORD *)this + 12))
          {
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
          }
          else
          {
            *(_BYTE *)(*v395 + v239) = 47;
            ++*v396;
          }
        }
        while (1)
        {
          if (!*((_QWORD *)&v399 + 1))
            goto LABEL_962;
          a2 = v399 + 1;
          *(_QWORD *)&v399 = v399 + 1;
          if (!--*((_QWORD *)&v399 + 1))
            goto LABEL_938;
          v61 = *(unsigned __int8 *)a2;
          if ((v61 - 14) < 0xFFFFFFFB || (v61 - 11) < 2)
            break;
          WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, a2);
        }
        if (v61 != 47)
        {
          v27 = 6;
          goto LABEL_485;
        }
        LODWORD(v404) = 47;
        if (*((_BYTE *)this + 59))
        {
          v138 = *((unsigned int *)this + 13);
          if ((_DWORD)v138 == *((_DWORD *)this + 12))
          {
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
          }
          else
          {
            *(_BYTE *)(*v395 + v138) = 47;
            ++*v396;
          }
        }
        goto LABEL_215;
      case 4:
        if (*a4 != 47)
        {
          if (*((_BYTE *)this + 59))
            LODWORD(v107) = *v396;
          else
            v107 = &a4[-*((_QWORD *)this + 9)];
          *(int32x4_t *)((char *)this + 12) = vdupq_n_s32((int)v107 - 1);
          *((_DWORD *)this + 2) &= 0xFFFFFFC7;
          goto LABEL_330;
        }
        LODWORD(v404) = 47;
        if (*((_BYTE *)this + 59))
        {
          v238 = *((unsigned int *)this + 13);
          if ((_DWORD)v238 == *((_DWORD *)this + 12))
          {
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
          }
          else
          {
            *(_BYTE *)(*v395 + v238) = 47;
            ++*v396;
          }
        }
        while (1)
        {
          if (!*((_QWORD *)&v399 + 1))
            goto LABEL_962;
          a2 = v399 + 1;
          *(_QWORD *)&v399 = v399 + 1;
          if (!--*((_QWORD *)&v399 + 1))
            break;
          v38 = *(unsigned __int8 *)a2;
          v39 = v38 - 14;
          v40 = v38 - 11;
          if (v39 < 0xFFFFFFFB || v40 < 2)
            break;
          WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, a2);
        }
        if (!*((_BYTE *)this + 59))
        {
          v94 = (unsigned __int8 *)(a2 - *((_QWORD *)this + 9));
          goto LABEL_296;
        }
        goto LABEL_604;
      case 5:
        v82 = *a4;
        if (v82 <= 0x3E)
        {
          if (v82 == 35)
            goto LABEL_261;
          if (v82 == 47)
          {
LABEL_257:
            --v10;
            *(_QWORD *)&v399 = a4 + 1;
            *((_QWORD *)&v399 + 1) = v10;
            v27 = 6;
            goto LABEL_486;
          }
LABEL_163:
          WTF::URLParser::copyURLPartsUntil<unsigned char>((uint64_t)this, v9, 6, (uint64_t)a4, &v402);
          v83 = *((unsigned __int8 *)this + 59);
          if (*((_BYTE *)this + 59))
          {
            v258 = *v396;
            if ((_DWORD)v258 && *(_BYTE *)(v258 + *v395 - 1) != 47)
            {
LABEL_498:
              LODWORD(v404) = 47;
              if (!v83)
                goto LABEL_230;
              goto LABEL_499;
            }
          }
          else
          {
            v84 = *((_QWORD *)this + 9);
            if ((_QWORD)v399 != v84)
            {
              v85 = *((_QWORD *)this + 8);
              if (!v85)
                goto LABEL_230;
              v86 = v399 + ~(_DWORD)v84;
              if (*(_DWORD *)(v85 + 4) <= v86)
                goto LABEL_230;
              v87 = *(_QWORD *)(v85 + 8);
              if ((*(_BYTE *)(v85 + 16) & 4) != 0)
              {
                if (*(_BYTE *)(v87 + v86) != 47)
                  goto LABEL_498;
              }
              else if (*(_WORD *)(v87 + 2 * v86) != 47)
              {
                goto LABEL_498;
              }
            }
          }
          WTF::URL::host((WTF::URL *)v9);
          if ((_DWORD)a2)
            goto LABEL_279;
          WTF::URL::path((WTF::URL *)v9);
          if ((_DWORD)a2)
            goto LABEL_279;
          v83 = *((unsigned __int8 *)this + 59);
          goto LABEL_498;
        }
        if (v82 != 63)
        {
          if (v82 == 92)
            goto LABEL_257;
          goto LABEL_163;
        }
        WTF::URLParser::copyURLPartsUntil<unsigned char>((uint64_t)this, v9, 7, (uint64_t)a4, &v402);
        LODWORD(v404) = 63;
        if (!*((_BYTE *)this + 59))
          goto LABEL_477;
        v141 = *((unsigned int *)this + 13);
        if ((_DWORD)v141 != *((_DWORD *)this + 12))
        {
          v142 = *v395;
LABEL_706:
          *(_BYTE *)(v142 + v141) = 63;
          ++*v396;
          goto LABEL_477;
        }
LABEL_664:
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
LABEL_477:
        if (!*((_QWORD *)&v399 + 1))
          goto LABEL_962;
        v10 = *((_QWORD *)&v399 + 1) - 1;
        v193 = v399;
        *(_QWORD *)&v399 = v399 + 1;
        --*((_QWORD *)&v399 + 1);
        if (v402)
        {
          v26 = v193 + 1;
          v27 = 18;
        }
        else
        {
          v27 = 17;
        }
        goto LABEL_486;
      case 6:
        if (*a4 != 92 && *a4 != 47)
        {
          WTF::URLParser::copyURLPartsUntil<unsigned char>((uint64_t)this, v9, 5, (uint64_t)a4, &v402);
          LODWORD(v404) = 47;
          if (*((_BYTE *)this + 59))
          {
            v247 = *((unsigned int *)this + 13);
            if ((_DWORD)v247 == *((_DWORD *)this + 12))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
            }
            else
            {
              *(_BYTE *)(*v395 + v247) = 47;
              ++*v396;
            }
          }
          v124 = *(_DWORD *)(v9 + 24) + ((*(_DWORD *)(v9 + 8) >> 3) & 7);
          goto LABEL_292;
        }
        *(_QWORD *)&v399 = a4 + 1;
        *((_QWORD *)&v399 + 1) = v10 - 1;
        WTF::URLParser::copyURLPartsUntil<unsigned char>((uint64_t)this, v9, 0, (uint64_t)(a4 + 1), &v402);
        if (*((_BYTE *)this + 59))
        {
          v227 = *((unsigned int *)this + 13);
          v228 = v227 + 3;
          v229 = "://";
          if (v227 + 3 > *((unsigned int *)this + 12))
          {
            v229 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v395, (WTF *)(v227 + 3), (uint64_t)"://");
            v227 = *v396;
            if (v228 < v227)
            {
              __break(0xC471u);
              JUMPOUT(0x197B4276CLL);
            }
          }
          v230 = *v395 + v227;
          v231 = *(_WORD *)v229;
          *(_BYTE *)(v230 + 2) = v229[2];
          *(_WORD *)v230 = v231;
          *v396 = v228;
          if (*((_BYTE *)this + 56))
            goto LABEL_272;
        }
        else if (*((_BYTE *)this + 56))
        {
          goto LABEL_272;
        }
        if (*((_BYTE *)this + 59))
          goto LABEL_604;
        v94 = (unsigned __int8 *)(v399 - *((_QWORD *)this + 9));
        goto LABEL_296;
      case 7:
        if (*a4 == 47)
          goto LABEL_133;
        if (*a4 != 92)
        {
          WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, (uint64_t)a4);
          if (!*((_BYTE *)this + 59))
            goto LABEL_272;
          v235 = *((unsigned int *)this + 13);
          v236 = v235 + 2;
          v237 = "//";
          if (v235 + 2 > *((unsigned int *)this + 12))
          {
            v237 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v395, (WTF *)(v235 + 2), (uint64_t)"//");
            v235 = *v396;
            if (v236 < v235)
            {
              __break(0xC471u);
              JUMPOUT(0x197B42774);
            }
          }
          *(_WORD *)(*v395 + v235) = *(_WORD *)v237;
          *v396 = v236;
          v27 = 8;
          goto LABEL_485;
        }
        WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, (uint64_t)a4);
LABEL_133:
        LODWORD(v404) = 47;
        if (*((_BYTE *)this + 59))
        {
          v224 = *((unsigned int *)this + 13);
          if ((_DWORD)v224 == *((_DWORD *)this + 12))
          {
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
          }
          else
          {
            *(_BYTE *)(*v395 + v224) = 47;
            ++*v396;
          }
        }
        while (1)
        {
          if (!*((_QWORD *)&v399 + 1))
            goto LABEL_962;
          a2 = v399 + 1;
          v63 = *((_QWORD *)&v399 + 1) - 1;
          *(_QWORD *)&v399 = v399 + 1;
          *((_QWORD *)&v399 + 1) = v63;
          if (!v63)
            goto LABEL_271;
          v64 = *(unsigned __int8 *)a2;
          v65 = v64 - 14;
          v66 = v64 - 11;
          if (v65 < 0xFFFFFFFB || v66 < 2)
            break;
          WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, a2);
        }
        v110 = *(unsigned __int8 *)a2;
        if (v110 == 47)
          goto LABEL_268;
        if (v110 == 92)
        {
          WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, a2);
          v63 = *((_QWORD *)&v399 + 1);
          if (!*((_QWORD *)&v399 + 1))
            goto LABEL_962;
          a2 = v399;
LABEL_268:
          *(_QWORD *)&v399 = a2 + 1;
          *((_QWORD *)&v399 + 1) = v63 - 1;
          LODWORD(v404) = 47;
          if (*((_BYTE *)this + 59))
          {
            v111 = *((unsigned int *)this + 13);
            if ((_DWORD)v111 != *((_DWORD *)this + 12))
              goto LABEL_270;
LABEL_619:
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
          }
        }
        else
        {
LABEL_271:
          WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, a2);
          LODWORD(v404) = 47;
          if (*((_BYTE *)this + 59))
          {
            v111 = *((unsigned int *)this + 13);
            if ((_DWORD)v111 != *((_DWORD *)this + 12))
            {
LABEL_270:
              *(_BYTE *)(*v395 + v111) = 47;
              ++*v396;
              v27 = 8;
              goto LABEL_485;
            }
            goto LABEL_619;
          }
        }
LABEL_272:
        v27 = 8;
        goto LABEL_485;
      case 8:
        if (*a4 != 92 && *a4 != 47)
        {
          if (*((_BYTE *)this + 59))
LABEL_604:
            LODWORD(v94) = *v396;
          else
            v94 = &a4[-*((_QWORD *)this + 9)];
LABEL_296:
          *((_DWORD *)this + 3) = (_DWORD)v94;
          v398 = v399;
          v27 = 9;
          goto LABEL_485;
        }
        WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, (uint64_t)a4);
LABEL_215:
        if (!*((_QWORD *)&v399 + 1))
          goto LABEL_962;
        v10 = *((_QWORD *)&v399 + 1) - 1;
        *(_QWORD *)&v399 = v399 + 1;
        --*((_QWORD *)&v399 + 1);
        v27 = 8;
        goto LABEL_486;
      case 9:
        v50 = 0;
        v51 = -1;
        do
        {
          v52 = a4[v50];
          if (v52 == 47)
          {
LABEL_273:
            v54 = 1;
LABEL_274:
            a2 = v398;
            a3 = (uint64_t)&a4[v50 - v398];
            if (a3 < 0)
              goto LABEL_962;
            if (&a4[v50] == (unsigned __int8 *)v398)
            {
              if (*((_BYTE *)this + 56))
                goto LABEL_836;
              if (*((_BYTE *)this + 59))
                LODWORD(v128) = *v396;
              else
                v128 = &a4[v50 - *((_QWORD *)this + 9)];
              *((_DWORD *)this + 2) &= 0xFFFFFFC7;
              *((int32x4_t *)this + 1) = vdupq_n_s32(v128);
              v27 = 15;
            }
            else
            {
              if (*((_BYTE *)this + 59))
              {
                v245 = *v396;
                *((_DWORD *)this + 4) = *v396;
                *((_DWORD *)this + 5) = v245;
                if (!WTF::URLParser::parseHostAndPort<unsigned char>())
                  goto LABEL_836;
              }
              else
              {
                v112 = v398 - *((_QWORD *)this + 9);
                *((_DWORD *)this + 4) = v112;
                *((_DWORD *)this + 5) = v112;
                if (!WTF::URLParser::parseHostAndPort<unsigned char>())
                  goto LABEL_836;
              }
              if ((v54 & 1) != 0)
              {
LABEL_279:
                v27 = 15;
              }
              else
              {
                if (*((_BYTE *)this + 56))
                {
                  WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, v399);
                  LODWORD(v404) = 47;
                  if (*((_BYTE *)this + 59))
                  {
LABEL_499:
                    v195 = *((unsigned int *)this + 13);
                    if ((_DWORD)v195 == *((_DWORD *)this + 12))
                    {
                      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
                    }
                    else
                    {
                      *(_BYTE *)(*v395 + v195) = 47;
                      ++*v396;
                    }
                  }
                }
LABEL_53:
                if (*((_BYTE *)this + 59))
LABEL_538:
                  LODWORD(v107) = *v396;
                else
LABEL_230:
                  v107 = (unsigned __int8 *)(v399 - *((_QWORD *)this + 9));
LABEL_330:
                *((_DWORD *)this + 7) = (_DWORD)v107;
                v27 = 15;
              }
            }
            goto LABEL_485;
          }
          if (v52 == 64)
          {
            v143 = &a4[v50];
            v144 = v10 - v50;
            v145 = v143;
            v146 = v143;
            v147 = v144;
            while (--v144)
            {
              v149 = *++v145;
              v148 = v149;
              v150 = v147;
              v151 = v146;
              v146 = v145;
              v147 = v144;
              if (v149 != 64)
              {
                if (v148 == 47 || v148 == 92 && *((_BYTE *)this + 56))
                  goto LABEL_446;
                if (v148 == 35)
                  goto LABEL_446;
                v146 = v151;
                v147 = v150;
                if (v148 == 63)
                  goto LABEL_446;
              }
            }
            v151 = v146;
            v150 = v147;
LABEL_446:
            a2 = v398;
            a3 = (uint64_t)&v151[-v398];
            if ((uint64_t)&v151[-v398] < 0)
              goto LABEL_962;
            WTF::URLParser::parseAuthority<unsigned char>((uint64_t)this, (unsigned __int8 *)v398, a3);
            a2 = (uint64_t)(v151 + 1);
            *(_QWORD *)&v399 = v151 + 1;
            *((_QWORD *)&v399 + 1) = v150 - 1;
            if (v150 != 1)
            {
              do
              {
                v183 = *(unsigned __int8 *)a2;
                v184 = v183 - 14;
                v185 = v183 - 11;
                if (v184 < 0xFFFFFFFB || v185 < 2)
                  break;
                WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, a2);
                if (!*((_QWORD *)&v399 + 1))
                  goto LABEL_962;
                a2 = v399 + 1;
                *(_QWORD *)&v399 = v399 + 1;
                --*((_QWORD *)&v399 + 1);
              }
              while (*((_QWORD *)&v399 + 1));
            }
            v398 = v399;
            *((_BYTE *)this + 58) = 0;
            v27 = 10;
            goto LABEL_485;
          }
          v53 = v52 != 92 || *((_BYTE *)this + 56) == 0;
          if (!v53)
            goto LABEL_273;
          v54 = 0;
          if (v52 == 63 || v52 == 35)
            goto LABEL_274;
          if (v52 == 37 || (char)v52 < 0)
            *((_BYTE *)this + 58) = 1;
          *(_QWORD *)&v399 = &a4[v50 + 1];
          *((_QWORD *)&v399 + 1) = v10 + v51;
          ++v50;
          --v51;
        }
        while (v10 != v50);
LABEL_848:
        if (*((_BYTE *)this + 59))
        {
          v368 = *v396;
          *((_DWORD *)this + 4) = *v396;
          *((_DWORD *)this + 5) = v368;
          a3 = *((_QWORD *)&v398 + 1);
          if (!*((_QWORD *)&v398 + 1))
            goto LABEL_959;
LABEL_850:
          if (!WTF::URLParser::parseHostAndPort<unsigned char>())
            goto LABEL_938;
          goto LABEL_851;
        }
        v314 = v398 - *((_DWORD *)this + 18);
        *((_DWORD *)this + 4) = v314;
        *((_DWORD *)this + 5) = v314;
        a3 = *((_QWORD *)&v398 + 1);
        if (*((_QWORD *)&v398 + 1))
          goto LABEL_850;
LABEL_959:
        v369 = *((_DWORD *)this + 2);
        v312 = *((_DWORD *)this + 3);
        *((_DWORD *)this + 4) = v312;
        *((_DWORD *)this + 5) = v312;
        *((_DWORD *)this + 6) = v312;
        *((_DWORD *)this + 2) = v369 & 0xFFFFFFC7;
LABEL_989:
        *((_DWORD *)this + 7) = v312;
        *((_DWORD *)this + 8) = v312;
LABEL_990:
        *((_DWORD *)this + 9) = v312;
LABEL_991:
        if (*((_BYTE *)this + 59))
        {
          WTF::StringImpl::create(*((_BYTE **)this + 5), *((unsigned int *)this + 13), (uint64_t *)&v404);
          v378 = *(WTF::StringImpl **)this;
          *(_QWORD *)this = v404;
          if (v378)
            goto LABEL_995;
        }
        else
        {
          v377 = (_DWORD *)*((_QWORD *)this + 8);
          if (v377)
            *v377 += 2;
          v378 = *(WTF::StringImpl **)this;
          *(_QWORD *)this = v377;
          if (v378)
          {
LABEL_995:
            if (*(_DWORD *)v378 == 2)
            {
              WTF::StringImpl::~StringImpl(v378, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
              WTF::fastFree(v379, v380, v381, v382, v383, v384, v385, v386);
            }
            else
            {
              *(_DWORD *)v378 -= 2;
            }
          }
        }
        *(_DWORD *)v22 |= 1u;
LABEL_999:
        v387 = v400;
        if (v400)
        {
          v400 = 0;
          LODWORD(v401) = 0;
          WTF::fastFree((unint64_t)v387, (void *)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
        }
        return;
      case 10:
        v101 = v10 - 1;
        v102 = a4;
        while (1)
        {
          v103 = *a4;
          if (*a4 == 47)
            break;
          v104 = v103 != 92 || *((_BYTE *)this + 56) == 0;
          if (!v104 || v103 == 63 || *a4 == 35)
            break;
          if (v103 == 37 || v103 < 0)
            *((_BYTE *)this + 58) = 1;
          ++a4;
          *(_QWORD *)&v399 = ++v102;
          *((_QWORD *)&v399 + 1) = v101--;
          if (v101 == -1)
          {
LABEL_846:
            if (!WTF::URLParser::parseHostAndPort<unsigned char>())
              goto LABEL_938;
LABEL_851:
            if (!*((_BYTE *)this + 56))
            {
              v346 = *((_DWORD *)this + 6);
              v347 = (*((_DWORD *)this + 2) >> 3) & 7;
LABEL_988:
              v312 = v347 + v346;
              goto LABEL_989;
            }
            WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, v399);
            LODWORD(v404) = 47;
            if (*((_BYTE *)this + 59))
            {
LABEL_953:
              v367 = *((unsigned int *)this + 13);
              if ((_DWORD)v367 == *((_DWORD *)this + 12))
              {
                WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
              }
              else
              {
                *(_BYTE *)(*v395 + v367) = 47;
                ++*v396;
              }
            }
LABEL_945:
            v312 = *((_DWORD *)this + 6) + ((*((_DWORD *)this + 2) >> 3) & 7) + 1;
            goto LABEL_989;
          }
        }
        a2 = v398;
        a3 = (uint64_t)&v102[-v398];
        if ((uint64_t)&v102[-v398] < 0)
          goto LABEL_962;
        if (!WTF::URLParser::parseHostAndPort<unsigned char>())
          goto LABEL_836;
        v10 = *((_QWORD *)&v399 + 1);
        if (!*((_QWORD *)&v399 + 1))
          goto LABEL_962;
        a2 = v399;
        v106 = *(unsigned __int8 *)v399;
        if (v106 != 63 && v106 != 35)
        {
          v27 = 15;
          goto LABEL_486;
        }
        WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, v399);
        LODWORD(v404) = 47;
        if (*((_BYTE *)this + 59))
          goto LABEL_499;
        goto LABEL_230;
      case 11:
        v37 = *a4;
        if (v37 > 0x3E)
        {
          if (v37 == 63)
          {
            WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, (uint64_t)a4);
            if ((*(_BYTE *)(v9 + 8) & 1) != 0
              && WTF::URL::protocolIs((uint64_t *)v9, "file", 0x100000004))
            {
              WTF::URLParser::copyURLPartsUntil<unsigned char>((uint64_t)this, v9, 7, v399, &v402);
              LODWORD(v404) = 63;
              if (*((_BYTE *)this + 59))
              {
                v282 = *((unsigned int *)this + 13);
                if ((_DWORD)v282 == *((_DWORD *)this + 12))
                {
                  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
                }
                else
                {
                  *(_BYTE *)(*v395 + v282) = 63;
                  ++*v396;
                }
              }
              if (!*((_QWORD *)&v399 + 1))
                goto LABEL_962;
              v140 = v399 + 1;
              *(_QWORD *)&v399 = v399 + 1;
              --*((_QWORD *)&v399 + 1);
            }
            else
            {
              if (*((_BYTE *)this + 59))
              {
                v262 = *((unsigned int *)this + 13);
                v263 = v262 + 4;
                v264 = "///?";
                if (v262 + 4 > *((unsigned int *)this + 12))
                {
                  v264 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v395, (WTF *)(v262 + 4), (uint64_t)"///?");
                  v262 = *v396;
                  if (v263 < v262)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197B4274CLL);
                  }
                }
                *(_DWORD *)(*v395 + v262) = *(_DWORD *)v264;
                *v396 = v263;
                v156 = *((_QWORD *)&v399 + 1);
                if (!*((_QWORD *)&v399 + 1))
                  goto LABEL_962;
              }
              else
              {
                v156 = *((_QWORD *)&v399 + 1);
                if (!*((_QWORD *)&v399 + 1))
                  goto LABEL_962;
              }
              v157 = v156 - 1;
              v140 = v399 + 1;
              *(_QWORD *)&v399 = v399 + 1;
              *((_QWORD *)&v399 + 1) = v157;
              if (*((_BYTE *)this + 59))
                LODWORD(v158) = *v396;
              else
                v158 = v140 - *((_QWORD *)this + 9);
              *(int32x4_t *)((char *)this + 12) = vdupq_n_s32((int)v158 - 2);
              *((_DWORD *)this + 2) &= 0xFFFFFFC7;
              v159 = v158 - 1;
              *((_DWORD *)this + 7) = v159;
              *((_DWORD *)this + 8) = v159;
            }
            if (v402)
            {
              v26 = v140;
              v27 = 18;
            }
            else
            {
              v27 = 17;
            }
            goto LABEL_485;
          }
          if (v37 == 92)
          {
            WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, (uint64_t)a4);
LABEL_237:
            LODWORD(v404) = 47;
            if (*((_BYTE *)this + 59))
            {
              v246 = *((unsigned int *)this + 13);
              if ((_DWORD)v246 == *((_DWORD *)this + 12))
              {
                WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
              }
              else
              {
                *(_BYTE *)(*v395 + v246) = 47;
                ++*v396;
              }
            }
            if (!*((_QWORD *)&v399 + 1))
              goto LABEL_962;
            v10 = *((_QWORD *)&v399 + 1) - 1;
            *(_QWORD *)&v399 = v399 + 1;
            --*((_QWORD *)&v399 + 1);
            v27 = 12;
            goto LABEL_486;
          }
        }
        else
        {
          if (v37 == 35)
          {
            WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, (uint64_t)a4);
            if ((*(_BYTE *)(v9 + 8) & 1) != 0
              && WTF::URL::protocolIs((uint64_t *)v9, "file", 0x100000004))
            {
              a4 = (unsigned __int8 *)v399;
              goto LABEL_261;
            }
            if (!*((_BYTE *)this + 59))
              goto LABEL_382;
            v259 = *((unsigned int *)this + 13);
            v260 = v259 + 4;
            v261 = "///#";
            if (v259 + 4 > *((unsigned int *)this + 12))
            {
              v261 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v395, (WTF *)(v259 + 4), (uint64_t)"///#");
              v259 = *v396;
              if (v260 < v259)
              {
                __break(0xC471u);
                JUMPOUT(0x197B42744);
              }
            }
            *(_DWORD *)(*((_QWORD *)this + 5) + v259) = *(_DWORD *)v261;
            *((_DWORD *)this + 13) = v260;
            if (*((_BYTE *)this + 59))
              LODWORD(v154) = v260;
            else
LABEL_382:
              v154 = v399 - *((_QWORD *)this + 9);
            *(int32x4_t *)((char *)this + 12) = vdupq_n_s32((int)v154 - 2);
            *((_DWORD *)this + 2) &= 0xFFFFFFC7;
            v155 = v154 - 1;
            *((_DWORD *)this + 7) = v155;
            *((_DWORD *)this + 8) = v155;
            *((_DWORD *)this + 9) = v155;
            goto LABEL_384;
          }
          if (v37 == 47)
            goto LABEL_237;
        }
        WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, (uint64_t)a4);
        if ((*(_BYTE *)(v9 + 8) & 1) != 0)
        {
          if (WTF::URL::protocolIs((uint64_t *)v9, "file", 0x100000004))
          {
            WTF::URLParser::shouldCopyFileURL<unsigned char>((uint64_t)this, (unsigned __int8 *)v399, *((uint64_t *)&v399 + 1));
            if (v139)
            {
              WTF::URLParser::copyURLPartsUntil<unsigned char>((uint64_t)this, v9, 6, v399, &v402);
              goto LABEL_398;
            }
          }
        }
        if ((*(_BYTE *)(v9 + 8) & 1) == 0 || !WTF::URL::protocolIs((uint64_t *)v9, "file", 0x100000004))
        {
          if (!*((_BYTE *)this + 59))
            goto LABEL_395;
          v265 = *((unsigned int *)this + 13);
          v197 = v265 + 3;
          v266 = "///";
          if (v265 + 3 > *((unsigned int *)this + 12))
          {
            v266 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v395, (WTF *)(v265 + 3), (uint64_t)"///");
            v265 = *v396;
            if (v197 < v265)
            {
              __break(0xC471u);
              JUMPOUT(0x197B42754);
            }
          }
          v267 = *v395 + v265;
          v268 = *(_WORD *)v266;
          *(_BYTE *)(v267 + 2) = v266[2];
          *(_WORD *)v267 = v268;
LABEL_721:
          *((_DWORD *)this + 13) = v197;
          if (*((_BYTE *)this + 59))
          {
            LODWORD(v160) = v197;
            goto LABEL_396;
          }
LABEL_395:
          v160 = v399 - *((_QWORD *)this + 9);
LABEL_396:
          v153 = v160 - 1;
          *(int32x4_t *)((char *)this + 12) = vdupq_n_s32(v153);
          *((_DWORD *)this + 2) &= 0xFFFFFFC7;
          goto LABEL_397;
        }
        WTF::URL::host((WTF::URL *)v9);
        if (!v152)
        {
          WTF::URLParser::copyURLPartsUntil<unsigned char>((uint64_t)this, v9, 0, v399, &v402);
          if (*((_BYTE *)this + 59))
          {
            v196 = *((unsigned int *)this + 13);
            v197 = v196 + 4;
            v198 = ":///";
            if (v196 + 4 > *((unsigned int *)this + 12))
            {
              v198 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v395, (WTF *)(v196 + 4), (uint64_t)":///");
              v196 = *v396;
              if (v197 < v196)
              {
                __break(0xC471u);
                JUMPOUT(0x197B4273CLL);
              }
            }
            *(_DWORD *)(*v395 + v196) = *(_DWORD *)v198;
            goto LABEL_721;
          }
          goto LABEL_395;
        }
        WTF::URLParser::copyURLPartsUntil<unsigned char>((uint64_t)this, v9, 5, v399, &v402);
        LODWORD(v404) = 47;
        if (!*((_BYTE *)this + 59))
          goto LABEL_380;
        v287 = *((unsigned int *)this + 13);
        if ((_DWORD)v287 == *((_DWORD *)this + 12))
        {
          WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
LABEL_380:
          v153 = *((_DWORD *)this + 6);
          goto LABEL_397;
        }
        *(_BYTE *)(*v395 + v287) = 47;
        ++*v396;
        v153 = *((_DWORD *)this + 6);
LABEL_397:
        *((_DWORD *)this + 7) = v153 + 1;
LABEL_398:
        if (*((_QWORD *)&v399 + 1))
        {
          if ((*(unsigned __int8 *)v399 | 0x20u) - 97 <= 0x19)
          {
            v161 = *((_QWORD *)&v399 + 1) - 1;
            if (*((_QWORD *)&v399 + 1) != 1)
            {
              v162 = v399 + 1;
              v163 = *(_BYTE *)(v399 + 1);
              if (v163 - 14 < 0xFFFFFFFB || v163 - 11 < 2)
              {
LABEL_408:
                *(_QWORD *)&v404 = v162;
                *((_QWORD *)&v404 + 1) = v161;
                if (v163 == 124 || v163 == 58)
                {
                  WTF::URLParser::advance<unsigned char,(WTF::URLParser::ReportSyntaxViolation)0>(&v404);
                  if (!*((_QWORD *)&v404 + 1)
                    || ((v167 = *(unsigned __int8 *)v404, (v167 - 47) <= 0x2D)
                      ? (v168 = ((1 << (v167 - 47)) & 0x200000010001) == 0)
                      : (v168 = 1),
                        !v168 || v167 == 35))
                  {
                    WTF::URLParser::appendWindowsDriveLetter<unsigned char>((uint64_t)this, (uint64_t *)&v399);
                    v27 = 15;
                    goto LABEL_485;
                  }
                }
              }
              else
              {
                while (--v161)
                {
                  v164 = *(_BYTE *)++v162;
                  v163 = v164;
                  v165 = v164 - 11;
                  if (v164 - 14 < 0xFFFFFFFB || v165 < 2)
                    goto LABEL_408;
                }
              }
            }
          }
        }
        goto LABEL_279;
      case 12:
        if (*a4 == 47)
          goto LABEL_72;
        if (*a4 == 92)
        {
          WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, (uint64_t)a4);
LABEL_72:
          if ((*(_BYTE *)(v9 + 8) & 1) != 0 && WTF::URL::protocolIs((uint64_t *)v9, "file", 0x100000004))
          {
            WTF::URLParser::copyURLPartsUntil<unsigned char>((uint64_t)this, v9, 0, v399, &v402);
            if (!*((_BYTE *)this + 59))
              goto LABEL_79;
            v42 = *((unsigned int *)this + 13);
            v43 = v42 + 2;
            v44 = ":/";
            if (v42 + 2 > *((unsigned int *)this + 12))
            {
              v44 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v395, (WTF *)(v42 + 2), (uint64_t)":/");
              v42 = *v396;
              if (v43 < v42)
              {
                __break(0xC471u);
                JUMPOUT(0x197B42734);
              }
            }
            *(_WORD *)(*v395 + v42) = *(_WORD *)v44;
            *v396 = v43;
          }
          v45 = *((unsigned __int8 *)this + 59);
          LODWORD(v404) = 47;
          if (v45)
          {
            v225 = *((unsigned int *)this + 13);
            if ((_DWORD)v225 == *((_DWORD *)this + 12))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
            }
            else
            {
              *(_BYTE *)(*v395 + v225) = 47;
              ++*v396;
            }
          }
          while (1)
          {
LABEL_79:
            if (!*((_QWORD *)&v399 + 1))
              goto LABEL_962;
            a2 = v399 + 1;
            *(_QWORD *)&v399 = v399 + 1;
            if (!--*((_QWORD *)&v399 + 1))
              break;
            v46 = *(unsigned __int8 *)a2;
            v47 = v46 - 14;
            v48 = v46 - 11;
            if (v47 < 0xFFFFFFFB || v48 < 2)
              break;
            WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, a2);
          }
          if (*((_BYTE *)this + 59))
            LODWORD(v105) = *v396;
          else
            v105 = a2 - *((_QWORD *)this + 9);
          *(int32x4_t *)((char *)this + 12) = vdupq_n_s32(v105);
          *((_DWORD *)this + 2) &= 0xFFFFFFC7;
          v398 = v399;
          v27 = 13;
LABEL_485:
          v10 = *((_QWORD *)&v399 + 1);
          goto LABEL_486;
        }
        if ((*(_BYTE *)(v9 + 8) & 1) == 0)
          goto LABEL_724;
        if ((WTF::URL::protocolIs((uint64_t *)v9, "file", 0x100000004) & 1) != 0)
        {
          WTF::URL::host((WTF::URL *)v9);
          if (v232)
          {
            WTF::URLParser::copyURLPartsUntil<unsigned char>((uint64_t)this, v9, 5, v399, &v402);
            LODWORD(v404) = 47;
            if (*((_BYTE *)this + 59))
            {
              v233 = *((unsigned int *)this + 13);
              if ((_DWORD)v233 == *((_DWORD *)this + 12))
              {
                WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
                v234 = (unsigned __int8 *)v399;
                v404 = v399;
                if (!*((_QWORD *)&v399 + 1))
                  goto LABEL_804;
              }
              else
              {
                *(_BYTE *)(*v395 + v233) = 47;
                ++*v396;
                v234 = (unsigned __int8 *)v399;
                v404 = v399;
                if (!*((_QWORD *)&v399 + 1))
                  goto LABEL_804;
              }
LABEL_728:
              if ((*v234 | 0x20u) - 97 <= 0x19)
              {
                WTF::URLParser::advance<unsigned char,(WTF::URLParser::ReportSyntaxViolation)0>(&v404);
                if (*((_QWORD *)&v404 + 1))
                {
                  v270 = *(unsigned __int8 *)v404;
                  if (v270 == 124 || v270 == 58)
                  {
                    if ((WTF::URLParser::advance<unsigned char,(WTF::URLParser::ReportSyntaxViolation)0>(&v404),
                          !*((_QWORD *)&v404 + 1))
                      || (v271 = *(unsigned __int8 *)v404, (v271 - 47) <= 0x2D)
                      && ((1 << (v271 - 47)) & 0x200000010001) != 0
                      || v271 == 35)
                    {
                      WTF::URLParser::appendWindowsDriveLetter<unsigned char>((uint64_t)this, (uint64_t *)&v399);
                      goto LABEL_807;
                    }
                  }
                }
              }
LABEL_804:
              if (WTF::URLParser::copyBaseWindowsDriveLetter(this, (const WTF::URL *)v9))
              {
                LODWORD(v404) = 47;
                if (*((_BYTE *)this + 59))
                {
                  v293 = *((unsigned int *)this + 13);
                  if ((_DWORD)v293 == *((_DWORD *)this + 12))
                  {
                    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
                  }
                  else
                  {
                    *(_BYTE *)(*v395 + v293) = 47;
                    ++*v396;
                  }
                }
                v125 = *((_DWORD *)this + 6) + 4;
LABEL_293:
                *((_DWORD *)this + 7) = v125;
                v27 = 15;
                goto LABEL_485;
              }
LABEL_807:
              v124 = *((_DWORD *)this + 6);
LABEL_292:
              v125 = v124 + 1;
              goto LABEL_293;
            }
LABEL_727:
            v234 = (unsigned __int8 *)v399;
            v404 = v399;
            if (!*((_QWORD *)&v399 + 1))
              goto LABEL_804;
            goto LABEL_728;
          }
          WTF::URLParser::copyURLPartsUntil<unsigned char>((uint64_t)this, v9, 0, v399, &v402);
          if (!*((_BYTE *)this + 59))
            goto LABEL_725;
          v283 = *((unsigned int *)this + 13);
          v284 = v283 + 4;
          v285 = ":///";
          if (v283 + 4 > *((unsigned int *)this + 12))
          {
            v285 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v395, (WTF *)(v283 + 4), (uint64_t)":///");
            v283 = *v396;
            if (v284 < v283)
            {
              __break(0xC471u);
              JUMPOUT(0x197B4275CLL);
            }
          }
          *(_DWORD *)(*v395 + v283) = *(_DWORD *)v285;
        }
        else
        {
          a4 = (unsigned __int8 *)v399;
LABEL_724:
          WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, (uint64_t)a4);
          if (!*((_BYTE *)this + 59))
            goto LABEL_725;
          v291 = *((unsigned int *)this + 13);
          v284 = v291 + 2;
          v292 = "//";
          if (v291 + 2 > *((unsigned int *)this + 12))
          {
            v292 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v395, (WTF *)(v291 + 2), (uint64_t)"//");
            v291 = *v396;
            if (v284 < v291)
            {
              __break(0xC471u);
              JUMPOUT(0x197B42764);
            }
          }
          *(_WORD *)(*v395 + v291) = *(_WORD *)v292;
        }
        *((_DWORD *)this + 13) = v284;
        if (*((_BYTE *)this + 59))
        {
          LODWORD(v269) = v284;
          goto LABEL_726;
        }
LABEL_725:
        v269 = v399 - *((_QWORD *)this + 9);
LABEL_726:
        *(int32x4_t *)((char *)this + 12) = vdupq_n_s32((int)v269 - 1);
        *((_DWORD *)this + 2) &= 0xFFFFFFC7;
        goto LABEL_727;
      case 13:
        v88 = 0;
        v89 = 2 - (_QWORD)a4;
        v90 = -1;
        v91 = a4;
        while (1)
        {
          v93 = a4[v88];
          if (v93 <= 0x5C && (WTF::characterClassTable[v93] & 0x20) != 0)
            break;
          if ((_DWORD)v93 == 37 || (char)v93 < 0)
            *((_BYTE *)this + 58) = 1;
          v92 = (uint64_t)&a4[++v88];
          *(_QWORD *)&v399 = v92;
          *((_QWORD *)&v399 + 1) = v10 + v90--;
          ++v91;
          --v89;
          if (v10 == v88)
          {
            v313 = &a4[v88];
LABEL_873:
            v319 = v398;
            v320 = (unint64_t)&v313[-v398];
            v321 = (int *)((char *)this + 52);
            if ((uint64_t)&v313[-v398] < 0)
              goto LABEL_962;
            if (v320 >= 2)
            {
              v322 = v320 - 1;
              v323 = v398 - (_QWORD)v313 + 2;
              v324 = v398;
              v325 = v398;
              while (1)
              {
                v326 = *(_BYTE *)++v325;
                v327 = v326 - 11;
                --v322;
                if (v326 - 14 < 0xFFFFFFFB || v327 < 2)
                  break;
                ++v323;
                v324 = v325;
                if (!v322)
                  goto LABEL_923;
              }
              if (v322)
              {
                v338 = 2;
                while (1)
                {
                  v339 = *(unsigned __int8 *)(v324 + v338);
                  v340 = v339 - 14;
                  v341 = v339 - 11;
                  if (v340 < 0xFFFFFFFB || v341 < 2)
                    break;
                  ++v338;
                  v30 = __CFADD__(v323++, 1);
                  if (v30)
                    goto LABEL_894;
                }
              }
              else
              {
LABEL_894:
                v404 = v398;
                if (*((_QWORD *)&v398 + 1))
                {
                  if ((*(unsigned __int8 *)v398 | 0x20u) - 97 <= 0x19)
                  {
                    WTF::URLParser::advance<unsigned char,(WTF::URLParser::ReportSyntaxViolation)0>(&v404);
                    if (*((_QWORD *)&v404 + 1))
                    {
                      v343 = *(unsigned __int8 *)v404;
                      if (v343 == 124 || v343 == 58)
                      {
                        WTF::URLParser::advance<unsigned char,(WTF::URLParser::ReportSyntaxViolation)0>(&v404);
                        if (!*((_QWORD *)&v404 + 1)
                          || ((v344 = *(unsigned __int8 *)v404, (v344 - 47) <= 0x2D)
                            ? (v345 = ((1 << (v344 - 47)) & 0x200000010001) == 0)
                            : (v345 = 1),
                              !v345 || v344 == 35))
                        {
                          WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, v319);
                          LODWORD(v404) = 47;
                          if (*((_BYTE *)this + 59))
                          {
                            v375 = *((unsigned int *)this + 13);
                            if ((_DWORD)v375 == *((_DWORD *)this + 12))
                            {
                              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
                              v321 = (int *)((char *)this + 52);
                            }
                            else
                            {
                              v321 = (int *)((char *)this + 52);
                              *(_BYTE *)(*v395 + v375) = 47;
                              ++*v396;
                            }
                          }
                          WTF::URLParser::appendWindowsDriveLetter<unsigned char>((uint64_t)this, (uint64_t *)&v398);
                          if (*((_BYTE *)this + 59))
                            v312 = *v321;
                          else
                            v312 = v399 - *((_DWORD *)this + 18);
                          goto LABEL_989;
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_923:
            if (__PAIR128__(*((unint64_t *)&v398 + 1), v319) == v399)
            {
              WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, v319);
              LODWORD(v404) = 47;
              if (!*((_BYTE *)this + 59))
                goto LABEL_925;
              v372 = *((unsigned int *)this + 13);
              if ((_DWORD)v372 == *((_DWORD *)this + 12))
              {
                WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
              }
              else
              {
                *(_BYTE *)(*v395 + v372) = 47;
                ++*v396;
              }
              if (*((_BYTE *)this + 59))
                v312 = *v396;
              else
LABEL_925:
                v312 = v399 - *((_DWORD *)this + 18);
              *(int32x4_t *)((char *)this + 12) = vdupq_n_s32(v312 - 1);
              v318 = *((_DWORD *)this + 2);
LABEL_927:
              *((_DWORD *)this + 2) = v318 & 0xFFFFFFC7;
              goto LABEL_989;
            }
            a3 = v399 - v319;
            if ((uint64_t)v399 - v319 < 0)
              goto LABEL_962;
            if (!WTF::URLParser::parseHostAndPort<unsigned char>())
            {
LABEL_938:
              WTF::URLParser::failure(this, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
              goto LABEL_999;
            }
            WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, v399);
            v356 = *((unsigned int *)this + 5);
            v357 = *((unsigned __int8 *)this + 59);
            if (*((_BYTE *)this + 59))
            {
              if (*v396 < v356)
                goto LABEL_962;
              v321 = (int *)((char *)this + 52);
              v362 = (unsigned __int16 *)(*v395 + v356);
              v365 = (*v396 - v356);
            }
            else
            {
              v358 = *((_QWORD *)this + 8);
              if (v358 && (v359 = *(unsigned int *)(v358 + 4), v359 > v356))
              {
                v360 = v399 - *((_QWORD *)this + 9) - v356;
                v361 = *(unsigned int *)(v358 + 16);
                v362 = *(unsigned __int16 **)(v358 + 8);
                if ((int)v359 - (int)v356 > v360 || (LODWORD(v360) = v359 - v356, (_DWORD)v356))
                {
                  v363 = (v361 >> 2) & 1;
                  v364 = v359 - v356;
                  if ((_DWORD)v363)
                  {
                    if (v364 >= v360)
                    {
                      v362 = (unsigned __int16 *)((char *)v362 + v356);
                      v365 = v360;
                      goto LABEL_940;
                    }
LABEL_962:
                    __break(1u);
LABEL_963:
                    v370 = *((unsigned int *)this + 13);
                    v349 = v370 + 3;
                    if (v370 + 3 <= *((unsigned int *)this + 12))
                    {
                      v371 = "///";
                    }
                    else
                    {
                      v371 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v395, (WTF *)(v370 + 3), (uint64_t)"///");
                      v370 = *v396;
                      if (v349 < v370)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197B42408);
                      }
                    }
                    v373 = *((_QWORD *)this + 5) + v370;
                    v374 = *(_WORD *)v371;
                    *(_BYTE *)(v373 + 2) = v371[2];
                    *(_WORD *)v373 = v374;
                    *((_DWORD *)this + 13) = v349;
                    if (!*((_BYTE *)this + 59))
LABEL_910:
                      LODWORD(v349) = v399 - *((_DWORD *)this + 18);
                    *(int32x4_t *)((char *)this + 12) = vdupq_n_s32((int)v349 - 1);
                    *((_DWORD *)this + 2) &= 0xFFFFFFC7;
                    *((_DWORD *)this + 7) = v349;
                    *((_DWORD *)this + 8) = v349;
                    *((_DWORD *)this + 9) = v349;
                    goto LABEL_991;
                  }
                  if (v364 < v360)
                    goto LABEL_962;
                  v362 += v356;
                  v365 = v360;
LABEL_949:
                  if (!WTF::URLParser::isAtLocalhost<char16_t>(v362, v365))
                  {
LABEL_944:
                    LODWORD(v404) = 47;
                    if (v357)
                      goto LABEL_953;
                    goto LABEL_945;
                  }
LABEL_941:
                  *v321 = v356;
                  if (!v357)
                    LODWORD(v356) = v399 - *((_DWORD *)this + 18);
                  *((_DWORD *)this + 6) = v356;
                  *((_DWORD *)this + 2) &= 0xFFFFFFC7;
                  goto LABEL_944;
                }
                v366 = v359 & 0xFFFFFFFEFFFFFFFFLL | (((v361 >> 2) & 1) << 32);
                v365 = v366;
                if ((v366 & 0x100000000) == 0)
                  goto LABEL_949;
              }
              else
              {
                v365 = 0;
                v362 = (unsigned __int16 *)"";
              }
            }
LABEL_940:
            if (!WTF::URLParser::isAtLocalhost<unsigned char>((unsigned __int8 *)v362, v365))
              goto LABEL_944;
            goto LABEL_941;
          }
        }
        v113 = v398;
        v114 = &a4[v88];
        if ((uint64_t)&v114[-v398] < 0)
          goto LABEL_962;
        if ((unint64_t)&v114[-v398] < 2)
          goto LABEL_541;
        v115 = 0;
        v116 = &v91[-v398];
        v117 = (uint64_t)&v91[-v398 - 2];
        v118 = v116 - 1;
        v119 = v398 + v89;
        while (1)
        {
          v120 = v115[(_QWORD)v398 + 1];
          v121 = v120 - 14;
          v122 = v120 - 11;
          if (v121 < 0xFFFFFFFB || v122 < 2)
            break;
          ++v115;
          ++v119;
          if (v118 == v115)
            goto LABEL_541;
        }
        if ((unsigned __int8 *)v117 == v115)
        {
LABEL_426:
          if (*((_QWORD *)&v398 + 1))
          {
            if ((*(unsigned __int8 *)v398 | 0x20u) - 97 <= 0x19)
            {
              v174 = *((_QWORD *)&v398 + 1) - 1;
              if (*((_QWORD *)&v398 + 1) != 1)
              {
                v175 = v398 + 1;
                v176 = *(_BYTE *)(v398 + 1);
                if (v176 - 14 < 0xFFFFFFFB || v176 - 11 < 2)
                {
LABEL_436:
                  *(_QWORD *)&v404 = v175;
                  *((_QWORD *)&v404 + 1) = v174;
                  if (v176 == 124 || v176 == 58)
                  {
                    WTF::URLParser::advance<unsigned char,(WTF::URLParser::ReportSyntaxViolation)0>(&v404);
                    if (!*((_QWORD *)&v404 + 1)
                      || ((v180 = *(unsigned __int8 *)v404, (v180 - 47) <= 0x2D)
                        ? (v181 = ((1 << (v180 - 47)) & 0x200000010001) == 0)
                        : (v181 = 1),
                          !v181 || v180 == 35))
                    {
                      WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, v113);
                      LODWORD(v404) = 47;
                      if (*((_BYTE *)this + 59))
                      {
                        v290 = *((unsigned int *)this + 13);
                        if ((_DWORD)v290 == *((_DWORD *)this + 12))
                        {
                          WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
                        }
                        else
                        {
                          *(_BYTE *)(*v395 + v290) = 47;
                          ++*v396;
                        }
                      }
                      WTF::URLParser::appendWindowsDriveLetter<unsigned char>((uint64_t)this, (uint64_t *)&v398);
                      v182 = *((_QWORD *)&v399 + 1);
LABEL_543:
                      if (!v182)
                        goto LABEL_962;
                      a2 = v399;
                      v205 = *(unsigned __int8 *)v399;
                      if (v205 == 63)
                      {
                        WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, v399);
                        if (*((_BYTE *)this + 59))
                        {
                          v294 = *((unsigned int *)this + 13);
                          v295 = v294 + 2;
                          v296 = "/?";
                          if (v294 + 2 > *((unsigned int *)this + 12))
                          {
                            v296 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v395, (WTF *)(v294 + 2), (uint64_t)"/?");
                            v294 = *v396;
                            if (v295 < v294)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x197B4277CLL);
                            }
                          }
                          *(_WORD *)(*v395 + v294) = *(_WORD *)v296;
                          *v396 = v295;
                          v275 = *((_QWORD *)&v399 + 1);
                          if (!*((_QWORD *)&v399 + 1))
                            goto LABEL_962;
                        }
                        else
                        {
                          v275 = *((_QWORD *)&v399 + 1);
                          if (!*((_QWORD *)&v399 + 1))
                            goto LABEL_962;
                        }
                        v276 = v275 - 1;
                        v277 = v399;
                        v278 = v399 + 1;
                        *(_QWORD *)&v399 = v399 + 1;
                        *((_QWORD *)&v399 + 1) = v276;
                        if (v402)
                        {
                          v26 = v277 + 1;
                          v27 = 18;
                        }
                        else
                        {
                          v27 = 17;
                        }
                        if (*((_BYTE *)this + 59))
                          LODWORD(v279) = *v396;
                        else
                          v279 = v278 - *((_QWORD *)this + 9);
                        v280 = v279 - 1;
                        *((_DWORD *)this + 7) = v280;
                        *((_DWORD *)this + 8) = v280;
                      }
                      else
                      {
                        if (v205 != 35)
                          goto LABEL_279;
                        WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, v399);
                        if (*((_BYTE *)this + 59))
                        {
                          v297 = *((unsigned int *)this + 13);
                          v298 = v297 + 2;
                          v299 = "/#";
                          if (v297 + 2 > *((unsigned int *)this + 12))
                          {
                            v299 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v395, (WTF *)(v297 + 2), (uint64_t)"/#");
                            v297 = *v396;
                            if (v298 < v297)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x197B42784);
                            }
                          }
                          *(_WORD *)(*v395 + v297) = *(_WORD *)v299;
                          *v396 = v298;
                          v206 = *((_QWORD *)&v399 + 1);
                          if (!*((_QWORD *)&v399 + 1))
                            goto LABEL_962;
                        }
                        else
                        {
                          v206 = *((_QWORD *)&v399 + 1);
                          if (!*((_QWORD *)&v399 + 1))
                            goto LABEL_962;
                        }
                        v207 = v206 - 1;
                        v208 = v399 + 1;
                        *(_QWORD *)&v399 = v399 + 1;
                        *((_QWORD *)&v399 + 1) = v207;
                        if (*((_BYTE *)this + 59))
                          LODWORD(v209) = *v396;
                        else
                          v209 = v208 - *((_QWORD *)this + 9);
                        v210 = v209 - 1;
                        *((_DWORD *)this + 7) = v210;
                        *((_DWORD *)this + 8) = v210;
                        *((_DWORD *)this + 9) = v210;
                        v27 = 19;
                      }
                      goto LABEL_485;
                    }
                    v114 = (unsigned __int8 *)v399;
                  }
                }
                else
                {
                  while (--v174)
                  {
                    v177 = *(_BYTE *)++v175;
                    v176 = v177;
                    v178 = v177 - 11;
                    if (v177 - 14 < 0xFFFFFFFB || v178 < 2)
                      goto LABEL_436;
                  }
                }
              }
            }
          }
        }
        else
        {
          v169 = &v115[v398 + 2];
          while (1)
          {
            v170 = *v169;
            v171 = v170 - 14;
            v172 = v170 - 11;
            if (v171 < 0xFFFFFFFB || v172 < 2)
              break;
            ++v169;
            v30 = __CFADD__(v119++, 1);
            if (v30)
              goto LABEL_426;
          }
        }
LABEL_541:
        if ((unsigned __int8 *)v113 == v114)
        {
          v182 = *((_QWORD *)&v398 + 1);
          if (*((_QWORD *)&v398 + 1) == *((_QWORD *)&v399 + 1))
            goto LABEL_543;
        }
        a3 = (uint64_t)&v114[-v113];
        if ((uint64_t)&v114[-v113] < 0)
          goto LABEL_962;
        if (!WTF::URLParser::parseHostAndPort<unsigned char>())
          goto LABEL_836;
        v211 = *((unsigned int *)this + 5);
        if (!*((_BYTE *)this + 59))
        {
          v212 = *((_QWORD *)this + 8);
          if (!v212 || (v213 = *(unsigned int *)(v212 + 4), v213 <= v211))
          {
            v219 = 0;
            v216 = (unsigned __int16 *)"";
            goto LABEL_562;
          }
          v214 = v399 - (*((_QWORD *)this + 9) + v211);
          v215 = *(unsigned int *)(v212 + 16);
          v216 = *(unsigned __int16 **)(v212 + 8);
          if ((int)v213 - (int)v211 > v214 || (LODWORD(v214) = v213 - v211, (_DWORD)v211))
          {
            v217 = (v215 >> 2) & 1;
            v218 = v213 - v211;
            if ((_DWORD)v217)
            {
              if (v218 < v214)
                goto LABEL_962;
              v216 = (unsigned __int16 *)((char *)v216 + v211);
              v219 = v214;
              goto LABEL_562;
            }
            if (v218 < v214)
              goto LABEL_962;
            v216 += v211;
            v219 = v214;
          }
          else
          {
            v220 = v213 & 0xFFFFFFFEFFFFFFFFLL | (((v215 >> 2) & 1) << 32);
            v219 = v220;
            if ((v220 & 0x100000000) != 0)
              goto LABEL_562;
          }
          if (!WTF::URLParser::isAtLocalhost<char16_t>(v216, v219))
          {
LABEL_563:
            v27 = 14;
            goto LABEL_485;
          }
          goto LABEL_568;
        }
        if (*v396 < v211)
          goto LABEL_962;
        v216 = (unsigned __int16 *)(*v395 + v211);
        v219 = (*v396 - v211);
LABEL_562:
        if (!WTF::URLParser::isAtLocalhost<unsigned char>((unsigned __int8 *)v216, v219))
          goto LABEL_563;
LABEL_568:
        WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, v399);
        LODWORD(v221) = *((_DWORD *)this + 5);
        *((_DWORD *)this + 13) = v221;
        if (!*((_BYTE *)this + 59))
          v221 = v399 - *((_QWORD *)this + 9);
        *((_DWORD *)this + 6) = v221;
        *((_DWORD *)this + 2) &= 0xFFFFFFC7;
        v27 = 14;
        goto LABEL_485;
      case 14:
        if (*a4 == 47)
          goto LABEL_53;
        if (*a4 == 92)
          goto LABEL_53;
        WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, (uint64_t)a4);
        LODWORD(v404) = 47;
        if (!*((_BYTE *)this + 59))
          goto LABEL_53;
        goto LABEL_499;
      case 15:
        if (*a4 == 47)
          goto LABEL_326;
        if (*a4 == 92 && *((_BYTE *)this + 56) != 0)
        {
          WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, (uint64_t)a4);
LABEL_326:
          LODWORD(v404) = 47;
          if (*((_BYTE *)this + 59))
          {
            v226 = *((unsigned int *)this + 13);
            if ((_DWORD)v226 == *((_DWORD *)this + 12))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
            }
            else
            {
              *(_BYTE *)(*v395 + v226) = 47;
              ++*v396;
            }
          }
          if (!*((_QWORD *)&v399 + 1))
            goto LABEL_962;
          v132 = v399 + 1;
          *(_QWORD *)&v399 = v399 + 1;
          --*((_QWORD *)&v399 + 1);
          if (!*((_BYTE *)this + 59))
          {
            v107 = (unsigned __int8 *)(v132 - *((_QWORD *)this + 9));
            goto LABEL_330;
          }
          goto LABEL_538;
        }
        if (*((_BYTE *)this + 59))
        {
          v250 = *v396;
          if (!(_DWORD)v250 || *(_BYTE *)(v250 + *v395 - 1) != 47)
            goto LABEL_471;
        }
        else
        {
          v57 = (unsigned __int8 *)*((_QWORD *)this + 9);
          if (a4 == v57)
            goto LABEL_471;
          v58 = *((_QWORD *)this + 8);
          if (!v58)
            goto LABEL_471;
          v59 = ~(_DWORD)v57 + (_DWORD)a4;
          if (*(_DWORD *)(v58 + 4) <= v59)
            goto LABEL_471;
          v60 = *(_QWORD *)(v58 + 8);
          if ((*(_BYTE *)(v58 + 16) & 4) != 0)
          {
            if (*(_BYTE *)(v60 + v59) != 47)
              goto LABEL_471;
          }
          else if (*(_WORD *)(v60 + 2 * v59) != 47)
          {
            goto LABEL_471;
          }
        }
        *(_QWORD *)&v403 = a4;
        *((_QWORD *)&v403 + 1) = v10;
        if (v28 == 37)
        {
          WTF::URLParser::advance<unsigned char,(WTF::URLParser::ReportSyntaxViolation)0>(&v403);
          if (!*((_QWORD *)&v403 + 1))
            goto LABEL_789;
          if (*(_BYTE *)v403 != 50)
            goto LABEL_789;
          WTF::URLParser::advance<unsigned char,(WTF::URLParser::ReportSyntaxViolation)0>(&v403);
          if (!*((_QWORD *)&v403 + 1) || (*(_BYTE *)v403 & 0xDF) != 0x45)
            goto LABEL_789;
        }
        else if (v28 != 46)
        {
          goto LABEL_789;
        }
        WTF::URLParser::advance<unsigned char,(WTF::URLParser::ReportSyntaxViolation)0>(&v403);
        v404 = v403;
        if (!*((_QWORD *)&v403 + 1))
          goto LABEL_789;
        v251 = *(unsigned __int8 *)v403;
        if (v251 != 37)
        {
          if (v251 != 46)
            goto LABEL_789;
          WTF::URLParser::advance<unsigned char,(WTF::URLParser::ReportSyntaxViolation)0>(&v404);
          if (!*((_QWORD *)&v404 + 1))
            goto LABEL_831;
          v252 = *(unsigned __int8 *)v404;
          if (v252 > 0x5C)
            goto LABEL_789;
LABEL_680:
          if ((WTF::characterClassTable[v252] & 0x20) != 0)
            goto LABEL_831;
          goto LABEL_789;
        }
        WTF::URLParser::advance<unsigned char,(WTF::URLParser::ReportSyntaxViolation)0>(&v404);
        if (*((_QWORD *)&v404 + 1))
        {
          if (*(_BYTE *)v404 == 50)
          {
            WTF::URLParser::advance<unsigned char,(WTF::URLParser::ReportSyntaxViolation)0>(&v404);
            if (*((_QWORD *)&v404 + 1))
            {
              if ((*(_BYTE *)v404 & 0xDF) == 0x45)
              {
                WTF::URLParser::advance<unsigned char,(WTF::URLParser::ReportSyntaxViolation)0>(&v404);
                if (!*((_QWORD *)&v404 + 1))
                {
LABEL_831:
                  WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, v399);
                  WTF::URLParser::consumeDoubleDotPathSegment<unsigned char>((uint64_t)this, (uint64_t *)&v399, v300);
                  WTF::URLParser::popPath(this);
                  v27 = 15;
                  goto LABEL_485;
                }
                v252 = *(unsigned __int8 *)v404;
                if (v252 < 0x5D)
                  goto LABEL_680;
              }
            }
          }
        }
LABEL_789:
        v404 = v399;
        if (!*((_QWORD *)&v399 + 1))
          goto LABEL_471;
        v288 = *(unsigned __int8 *)v399;
        if (v288 != 37)
        {
          if (v288 != 46)
            goto LABEL_471;
          WTF::URLParser::advance<unsigned char,(WTF::URLParser::ReportSyntaxViolation)0>(&v404);
          if (!*((_QWORD *)&v404 + 1))
            goto LABEL_834;
          v289 = *(unsigned __int8 *)v404;
          if (v289 > 0x5C)
            goto LABEL_471;
LABEL_794:
          if ((WTF::characterClassTable[v289] & 0x20) != 0)
            goto LABEL_834;
          goto LABEL_471;
        }
        WTF::URLParser::advance<unsigned char,(WTF::URLParser::ReportSyntaxViolation)0>(&v404);
        if (*((_QWORD *)&v404 + 1))
        {
          if (*(_BYTE *)v404 == 50)
          {
            WTF::URLParser::advance<unsigned char,(WTF::URLParser::ReportSyntaxViolation)0>(&v404);
            if (*((_QWORD *)&v404 + 1))
            {
              if ((*(_BYTE *)v404 & 0xDF) == 0x45)
              {
                WTF::URLParser::advance<unsigned char,(WTF::URLParser::ReportSyntaxViolation)0>(&v404);
                if (!*((_QWORD *)&v404 + 1))
                {
LABEL_834:
                  WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, v399);
                  WTF::URLParser::consumeSingleDotPathSegment<unsigned char>((uint64_t)this, &v399, v301);
                  v27 = 15;
                  goto LABEL_485;
                }
                v289 = *(unsigned __int8 *)v404;
                if (v289 < 0x5D)
                  goto LABEL_794;
              }
            }
          }
        }
LABEL_471:
        if (!*((_QWORD *)&v399 + 1))
          goto LABEL_962;
        a2 = v399;
        v192 = *(unsigned __int8 *)v399;
        if ((_DWORD)v192 == 35)
        {
          if (*((_BYTE *)this + 59))
LABEL_662:
            LODWORD(v81) = *v396;
          else
            v81 = (unsigned __int8 *)(v399 - *((_QWORD *)this + 9));
          goto LABEL_483;
        }
        if ((_DWORD)v192 != 63)
        {
          v194 = *(_BYTE *)v399;
          if ((char)v192 < 0)
          {
            WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, v399);
            WTF::URLParser::percentEncodeByte(this, (v194 >> 6) | 0xC0);
            v273 = v194 & 0x3F | 0x80;
          }
          else
          {
            if ((char)v192 != 127 && (WTF::characterClassTable[v192] & 2) == 0)
            {
              LODWORD(v404) = *(unsigned __int8 *)v399;
              if (*((_BYTE *)this + 59))
              {
                v274 = *((unsigned int *)this + 13);
                if ((_DWORD)v274 == *((_DWORD *)this + 12))
                {
                  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
                }
                else
                {
                  *(_BYTE *)(*v395 + v274) = v194;
                  ++*v396;
                }
              }
              goto LABEL_492;
            }
            WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, v399);
            v273 = v194;
          }
          WTF::URLParser::percentEncodeByte(this, v273);
LABEL_492:
          if (!*((_QWORD *)&v399 + 1))
            goto LABEL_962;
          v10 = *((_QWORD *)&v399 + 1) - 1;
          *(_QWORD *)&v399 = v399 + 1;
          --*((_QWORD *)&v399 + 1);
          v27 = 15;
          goto LABEL_486;
        }
        if (!*((_BYTE *)this + 59))
        {
          v36 = v399 - *((_DWORD *)this + 18);
          goto LABEL_476;
        }
LABEL_663:
        v248 = *((_DWORD *)this + 12);
        v141 = *((unsigned int *)this + 13);
        *((_DWORD *)this + 8) = v141;
        LODWORD(v404) = 63;
        if ((_DWORD)v141 != v248)
        {
          v142 = *v395;
          goto LABEL_706;
        }
        goto LABEL_664;
      case 16:
        v35 = *a4;
        if (v35 == 35)
        {
          if (*((_BYTE *)this + 59))
            goto LABEL_662;
          v81 = &a4[-*((_QWORD *)this + 9)];
LABEL_483:
          *((_DWORD *)this + 8) = (_DWORD)v81;
          goto LABEL_484;
        }
        if (v35 == 47)
        {
          LODWORD(v404) = 47;
          if (*((_BYTE *)this + 59))
          {
            v249 = *((unsigned int *)this + 13);
            if ((_DWORD)v249 == *((_DWORD *)this + 12))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
            }
            else
            {
              *(_BYTE *)(*v395 + v249) = 47;
              ++*v396;
            }
          }
          if (!*((_QWORD *)&v399 + 1))
            goto LABEL_962;
          v129 = v399 + 1;
          *(_QWORD *)&v399 = v399 + 1;
          --*((_QWORD *)&v399 + 1);
          if (*((_BYTE *)this + 59))
            LODWORD(v130) = *v396;
          else
            v130 = v129 - *((_QWORD *)this + 9);
          *((_DWORD *)this + 7) = v130;
          v27 = 16;
          goto LABEL_485;
        }
        if (v35 != 63)
        {
          if ((*a4 & 0x80) != 0)
          {
            WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, (uint64_t)a4);
            WTF::URLParser::percentEncodeByte(this, (v28 >> 6) | 0xC0);
            v256 = v28 & 0x3F | 0x80;
            v255 = this;
LABEL_694:
            WTF::URLParser::percentEncodeByte(v255, v256);
          }
          else
          {
            if (*a4 == 127 || *a4 <= 0x1Fu)
            {
              WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, (uint64_t)a4);
              v255 = this;
              v256 = v28;
              goto LABEL_694;
            }
            LODWORD(v404) = *a4;
            if (*((_BYTE *)this + 59))
            {
              v257 = *((unsigned int *)this + 13);
              if ((_DWORD)v257 == *((_DWORD *)this + 12))
              {
                WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
              }
              else
              {
                *(_BYTE *)(*v395 + v257) = v28;
                ++*v396;
              }
            }
          }
          if (!*((_QWORD *)&v399 + 1))
            goto LABEL_962;
          v10 = *((_QWORD *)&v399 + 1) - 1;
          *(_QWORD *)&v399 = v399 + 1;
          --*((_QWORD *)&v399 + 1);
          v27 = 16;
          goto LABEL_486;
        }
        if (*((_BYTE *)this + 59))
          goto LABEL_663;
        v36 = (_DWORD)a4 - *((_DWORD *)this + 18);
LABEL_476:
        *((_DWORD *)this + 8) = v36;
        goto LABEL_477;
      case 17:
        if (*a4 == 35)
        {
          if (*((_BYTE *)this + 59))
            goto LABEL_605;
          v81 = &a4[-*((_QWORD *)this + 9)];
LABEL_484:
          *((_DWORD *)this + 9) = (_DWORD)v81;
          v27 = 19;
          goto LABEL_485;
        }
        if ((*a4 & 0x80) == 0)
        {
          if ((WTF::characterClassTable[*a4] & 0x10) != 0
            || (*a4 == 39 ? (v108 = *((_BYTE *)this + 56) == 0) : (v108 = 1), !v108))
          {
            WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, (uint64_t)a4);
            LODWORD(a2) = v28;
            v242 = this;
            goto LABEL_646;
          }
          LODWORD(v404) = *a4;
          if (!*((_BYTE *)this + 59))
          {
LABEL_253:
            if (!*((_QWORD *)&v399 + 1))
              goto LABEL_962;
            v10 = *((_QWORD *)&v399 + 1) - 1;
            *(_QWORD *)&v399 = v399 + 1;
            --*((_QWORD *)&v399 + 1);
            v27 = 17;
            goto LABEL_486;
          }
          v244 = *((unsigned int *)this + 13);
          if ((_DWORD)v244 == *((_DWORD *)this + 12))
          {
LABEL_650:
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
            goto LABEL_253;
          }
          *(_BYTE *)(*v395 + v244) = v28;
LABEL_698:
          ++*v396;
          goto LABEL_253;
        }
        WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, (uint64_t)a4);
        v240 = (v28 >> 6) | 0xC0;
        if ((WTF::characterClassTable[v240] & 0x10) != 0)
        {
          WTF::URLParser::percentEncodeByte(this, v240);
        }
        else
        {
          LODWORD(v404) = (v28 >> 6) | 0xC0;
          if (*((_BYTE *)this + 59))
          {
            v241 = *((unsigned int *)this + 13);
            if ((_DWORD)v241 == *((_DWORD *)this + 12))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v395, &v404);
              a2 = v28 & 0x3F | 0x80;
              if ((WTF::characterClassTable[a2] & 0x10) != 0)
              {
LABEL_642:
                v242 = this;
LABEL_646:
                WTF::URLParser::percentEncodeByte(v242, a2);
                goto LABEL_253;
              }
            }
            else
            {
              *(_BYTE *)(*v395 + v241) = v240;
              ++*v396;
              a2 = v28 & 0x3F | 0x80;
              if ((WTF::characterClassTable[a2] & 0x10) != 0)
                goto LABEL_642;
            }
LABEL_687:
            LODWORD(v404) = a2;
            if (!*((_BYTE *)this + 59))
              goto LABEL_253;
            v253 = *((unsigned int *)this + 13);
            if ((_DWORD)v253 == *((_DWORD *)this + 12))
              goto LABEL_650;
            *(_BYTE *)(*v395 + v253) = a2;
            goto LABEL_698;
          }
        }
        a2 = v28 & 0x3F | 0x80;
        if ((WTF::characterClassTable[a2] & 0x10) != 0)
          goto LABEL_642;
        goto LABEL_687;
      case 18:
        v95 = *a4;
        while (v95 != 35)
        {
          LOWORD(v404) = v28;
          v96 = HIDWORD(v401);
          if (HIDWORD(v401) == (_DWORD)v401)
          {
            v97 = (_WORD *)WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v400, HIDWORD(v401) + 1, (unint64_t)&v404);
            v98 = HIDWORD(v401);
            *((_WORD *)v400 + HIDWORD(v401)) = *v97;
            v99 = *((_QWORD *)&v399 + 1);
            HIDWORD(v401) = v98 + 1;
            if (!*((_QWORD *)&v399 + 1))
              goto LABEL_962;
            goto LABEL_188;
          }
          *((_WORD *)v400 + HIDWORD(v401)) = v28;
          HIDWORD(v401) = v96 + 1;
          --v10;
          a4 = (unsigned __int8 *)(v399 + 1);
          *(_QWORD *)&v399 = v399 + 1;
          *((_QWORD *)&v399 + 1) = v10;
          if (!v10)
          {
LABEL_868:
            a6 = (uint64_t)&a4[-v26];
            if ((uint64_t)&a4[-v26] >= 0)
            {
              WTF::URLParser::encodeNonUTF8Query<unsigned char>((uint64_t)this, (uint64_t)v400, HIDWORD(v401), v402, v26, a6);
LABEL_870:
              if (*((_BYTE *)this + 59))
                v312 = *v396;
              else
                v312 = v399 - *((_DWORD *)this + 18);
              goto LABEL_990;
            }
            goto LABEL_962;
          }
          while (1)
          {
            v28 = *a4;
            v95 = *a4;
            if ((v95 - 14) < 0xFFFFFFFB || (v95 - 11) < 2)
              break;
            WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, v26);
            v99 = *((_QWORD *)&v399 + 1);
            if (!*((_QWORD *)&v399 + 1))
              goto LABEL_962;
LABEL_188:
            v10 = v99 - 1;
            a4 = (unsigned __int8 *)(v399 + 1);
            *(_QWORD *)&v399 = v399 + 1;
            *((_QWORD *)&v399 + 1) = v10;
            if (!v10)
              goto LABEL_868;
          }
        }
        a6 = (uint64_t)&a4[-v26];
        if ((uint64_t)&a4[-v26] < 0)
          goto LABEL_962;
        WTF::URLParser::encodeNonUTF8Query<unsigned char>((uint64_t)this, (uint64_t)v400, HIDWORD(v401), v402, v26, a6);
        if (*((_BYTE *)this + 59))
LABEL_605:
          LODWORD(v81) = *v396;
        else
          v81 = (unsigned __int8 *)(v399 - *((_QWORD *)this + 9));
        goto LABEL_484;
      case 19:
        if ((*a4 & 0x80) != 0)
        {
          WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, (uint64_t)a4);
          WTF::URLParser::percentEncodeByte(this, (v28 >> 6) | 0xC0);
          WTF::URLParser::percentEncodeByte(this, v28 & 0x3F | 0x80);
          goto LABEL_384;
        }
        if (*a4 == 96
          || *a4 == 127
          || (*a4 != 35 ? (v126 = (WTF::characterClassTable[*a4] & 0x10) == 0) : (v126 = 1), !v126))
        {
          WTF::URLParser::syntaxViolation<unsigned char>((uint64_t)this, (uint64_t)a4);
          WTF::URLParser::percentEncodeByte(this, v28);
          goto LABEL_384;
        }
        LODWORD(v404) = *a4;
        if (!*((_BYTE *)this + 59))
          goto LABEL_384;
        v127 = *((unsigned int *)this + 13);
        if ((_DWORD)v127 == *((_DWORD *)this + 12))
          goto LABEL_304;
        *(_BYTE *)(*v395 + v127) = v28;
        goto LABEL_708;
      default:
        goto LABEL_485;
    }
  }
}

void WTF::URLParser::parse<char16_t>(WTF::URL *this, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 *v8;
  unint64_t v9;
  unsigned __int16 *v10;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  BOOL v28;
  unsigned __int8 v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  char v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned __int16 v49;
  BOOL v50;
  unint64_t v51;
  BOOL v52;
  unint64_t v53;
  char v55;
  unint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  WTF *v63;
  int v64;
  _WORD *v65;
  uint64_t v66;
  unsigned __int16 *v67;
  _WORD *v68;
  uint64_t v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned __int16 *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  const WTF::URL *v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  _WORD *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  unsigned __int16 *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  char v132;
  char v133;
  unsigned int v134;
  __int128 *v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  const char *v142;
  int v143;
  char v144;
  char v145;
  unsigned int v146;
  unsigned __int8 *v147;
  uint64_t v148;
  int v149;
  char v150;
  char v151;
  unsigned int v152;
  __int128 *v153;
  WTF::URL *v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  int v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned __int16 *v167;
  int v168;
  int v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int16 *v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unsigned __int16 *v184;
  uint64_t v185;
  int v186;
  int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  const char *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  unint64_t v204;
  unint64_t v205;
  const char *v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  const char *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  char v217;
  char v218;
  unsigned int v219;
  __int128 *v220;
  uint64_t v221;
  unsigned int v222;
  unsigned __int16 *v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  const char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned __int16 *v233;
  uint64_t v234;
  int v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  const char *v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  unsigned __int16 *v251;
  uint64_t v252;
  int v253;
  int v254;
  int v255;
  unsigned int v256;
  unsigned int v257;
  int v259;
  int v260;
  BOOL v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unsigned __int16 *v266;
  uint64_t v267;
  int v268;
  int v269;
  int v270;
  unsigned int v271;
  unsigned int v272;
  int v274;
  int v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  unsigned __int8 *v283;
  unsigned int v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  int v290;
  int v291;
  int v292;
  int v293;
  BOOL v294;
  uint64_t v295;
  _WORD *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  const char *v311;
  uint64_t v312;
  int v313;
  unint64_t v314;
  unint64_t v315;
  const char *v316;
  unint64_t v317;
  __int16 v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  const char *v329;
  unint64_t v330;
  unint64_t v331;
  const char *v332;
  unint64_t v333;
  const char *v334;
  unint64_t v335;
  __int16 v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  unint64_t v342;
  const char *v343;
  unint64_t v344;
  uint64_t v345;
  int v346;
  int v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unsigned __int16 *v356;
  unsigned __int16 *v357;
  uint64_t v358;
  int v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  int v364;
  int v365;
  int v366;
  uint64_t v367;
  int v368;
  int v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t v372;
  const char *v373;
  unint64_t v374;
  unint64_t v375;
  const char *v376;
  int v377;
  _DWORD *v378;
  WTF::StringImpl *v379;
  unint64_t v380;
  void *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  const WTF::URL *v391;
  int v392;
  uint64_t v393;
  uint64_t v394;
  WTF::URL *v395;
  uint64_t v396;
  int v397;
  int v398;
  unsigned __int16 *v399;
  _DWORD *v400;
  int v401;
  int v402;
  int v403;
  int v404;
  int v405;
  uint64_t v406;
  int v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  unsigned __int16 *v411;
  unsigned int v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  void *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  __int128 v424;
  int v425;
  unint64_t v426;
  int v427;
  int v428;
  unint64_t v429;
  unint64_t v430;
  const char *v431;
  unint64_t v432;
  uint64_t v433;
  unsigned int v434;
  int v436;
  int v437;
  unint64_t v438;
  const char *v439;
  unint64_t v440;
  __int16 v441;
  uint64_t v442;
  int v443;
  _DWORD *v444;
  WTF::StringImpl *v445;
  unint64_t v446;
  void *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  WTF *v454;
  unint64_t v455;
  unint64_t v456;
  unint64_t v457;
  const char *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  WTF *v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t *v465;
  int *v466;
  unsigned __int16 *v467;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  WTF *v472;
  uint64_t v473;
  unsigned __int16 *v474;
  __int128 v475;
  __int128 v476;
  unsigned __int8 v477;
  _BYTE v478[9];

  v8 = a5;
  v9 = a3;
  v10 = (unsigned __int16 *)a2;
  v474 = a5;
  v12 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  *(_OWORD *)((char *)this + 8) = 0u;
  v21 = (_OWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  v472 = 0;
  v473 = 0;
  if (v8 == (unsigned __int16 *)-1)
  {
    v474 = 0;
    *(_QWORD *)&v471 = v10;
    *((_QWORD *)&v471 + 1) = v9;
    v470 = 0uLL;
    if (!v9)
      goto LABEL_11;
  }
  else
  {
    if (!v9)
    {
LABEL_10:
      v471 = (unint64_t)v10;
      goto LABEL_11;
    }
    v22 = v9;
    while (v10[v22 - 1] <= 0x20u)
    {
      --v22;
      WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v10);
      if (!v22)
        goto LABEL_10;
    }
    if (v9 < v22)
      goto LABEL_1337;
    *(_QWORD *)&v471 = v10;
    *((_QWORD *)&v471 + 1) = v22;
    v9 = v22;
    v470 = 0uLL;
  }
  v27 = *v10;
  v28 = v27 > 0x20 || (v27 & 0xFC00) == 55296;
  if (!v28)
  {
    while (1)
    {
      WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v10);
      if (v9 == 1)
      {
        v433 = 1;
      }
      else
      {
        v433 = 1;
        if ((*v10 & 0xFC00) == 0xD800)
        {
          if ((v10[1] & 0xFC00) == 0xDC00)
            v433 = 2;
          else
            v433 = 1;
        }
      }
      v10 += v433;
      v9 -= v433;
      *((_QWORD *)&v471 + 1) = v9;
      if (!v9)
        break;
      v434 = *v10;
      if (v434 > 0x20 || (v434 & 0xFC00) == 55296)
      {
        *(_QWORD *)&v471 = v10;
        goto LABEL_26;
      }
    }
    *(_QWORD *)&v471 = v10;
LABEL_11:
    if (*((_BYTE *)this + 59))
    {
      v23 = a4;
      if (!*((_DWORD *)this + 13))
      {
LABEL_13:
        v24 = (_OWORD *)(v23 + 8);
        if ((*(_DWORD *)(v23 + 8) & 5) == 1)
        {
          v25 = *(_DWORD **)v23;
          if (*(_QWORD *)v23)
            *v25 += 2;
          v26 = *(WTF::StringImpl **)this;
          *(_QWORD *)this = v25;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
            {
              WTF::StringImpl::~StringImpl(v26, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
              WTF::fastFree(v416, v417, v418, v419, v420, v421, v422, v423);
            }
            else
            {
              *(_DWORD *)v26 -= 2;
            }
          }
          v424 = v24[1];
          *v21 = *v24;
          *(_OWORD *)((char *)this + 24) = v424;
          WTF::URL::removeFragmentIdentifier((WTF::StringImpl **)this, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
          goto LABEL_1329;
        }
      }
    }
    else
    {
      v23 = a4;
      if (!((uint64_t)(v471 - *((_QWORD *)this + 9)) >> 1))
        goto LABEL_13;
    }
LABEL_1168:
    *v21 = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    v378 = (_DWORD *)*((_QWORD *)this + 8);
    if (v378)
      *v378 += 2;
    v379 = *(WTF::StringImpl **)this;
    *(_QWORD *)this = v378;
    if (v379)
    {
      if (*(_DWORD *)v379 == 2)
      {
        WTF::StringImpl::~StringImpl(v379, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
        WTF::fastFree(v380, v381, v382, v383, v384, v385, v386, v387);
      }
      else
      {
        *(_DWORD *)v379 -= 2;
      }
    }
    goto LABEL_1329;
  }
LABEL_26:
  v29 = 0;
  v465 = (unint64_t *)((char *)this + 40);
  v469 = v471;
  v466 = (int *)((char *)this + 52);
  v467 = 0;
  while (2)
  {
    v30 = (unsigned __int16 *)v471;
    while (1)
    {
      v32 = *v30;
      v33 = v32 & 0xFC00;
      v34 = v9 != 1 && v33 == 55296;
      v35 = !v34;
      v36 = *v30;
      if (v34)
      {
        v37 = v30[1];
        v28 = (v37 & 0xFC00) == 56320;
        v36 = ((_DWORD)v32 << 10) - 56613888 + v37;
        if (!v28)
          v36 = *v30;
      }
      v38 = v36 - 14;
      v39 = v36 - 11;
      v40 = v38 >= 0xFFFFFFFB && v39 >= 2;
      if (!v40)
        break;
      WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
      v41 = *((_QWORD *)&v471 + 1);
      if (!*((_QWORD *)&v471 + 1))
        goto LABEL_1337;
      if (*((_QWORD *)&v471 + 1) == 1)
      {
        v31 = 1;
      }
      else
      {
        v31 = 1;
        if ((*(_WORD *)v471 & 0xFC00) == 0xD800)
        {
          if ((*(_WORD *)(v471 + 2) & 0xFC00) == 0xDC00)
            v31 = 2;
          else
            v31 = 1;
        }
      }
      v9 = *((_QWORD *)&v471 + 1) - v31;
      v30 = (unsigned __int16 *)(v471 + 2 * v31);
      *(_QWORD *)&v471 = v30;
      *((_QWORD *)&v471 + 1) -= v31;
      if (v41 == v31)
        goto LABEL_1167;
    }
    switch(v29)
    {
      case 0u:
        if (v33 == 55296 || (v32 | 0x20) - 97 > 0x19)
        {
          v29 = 2;
          goto LABEL_790;
        }
        if ((v32 - 65) > 0x19)
        {
          v42 = *v30;
          if (v9 == 1)
            goto LABEL_60;
LABEL_56:
          if ((v42 & 0xFC00) == 0xD800)
          {
            v43 = v30[1];
            v28 = (v43 & 0xFC00) == 56320;
            v44 = (v42 << 10) - 56613888 + v43;
            if (v28)
              v42 = v44;
          }
          goto LABEL_60;
        }
        WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
        if (!*((_QWORD *)&v471 + 1))
          goto LABEL_1337;
        v30 = (unsigned __int16 *)v471;
        v42 = *(unsigned __int16 *)v471;
        if (*((_QWORD *)&v471 + 1) != 1)
          goto LABEL_56;
LABEL_60:
        v45 = v42 | (32 * ((v42 - 65) < 0x1A));
        LODWORD(v476) = v45;
        if (*((_BYTE *)this + 59))
        {
          v319 = *((unsigned int *)this + 13);
          if ((_DWORD)v319 == *((_DWORD *)this + 12))
          {
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
          }
          else
          {
            *(_BYTE *)(*v465 + v319) = v45;
            ++*v466;
          }
        }
        WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>((uint64_t)this, &v471);
        v9 = *((_QWORD *)&v471 + 1);
        if (!*((_QWORD *)&v471 + 1))
          goto LABEL_404;
        goto LABEL_403;
      case 1u:
        if (v32 > 0x7A || v33 == 55296)
          goto LABEL_404;
        if ((WTF::characterClassTable[v32] & 0x40) == 0)
        {
          if ((_DWORD)v32 != 58)
            goto LABEL_404;
          v97 = *((unsigned __int8 *)this + 59);
          if (*((_BYTE *)this + 59))
          {
            LODWORD(v98) = *v466;
            v99 = v464;
            if (*v466 >> 26)
              goto LABEL_1168;
          }
          else
          {
            v98 = ((uint64_t)v30 - *((_QWORD *)this + 9)) >> 1;
            v99 = v464;
            if (v98 >> 26)
              goto LABEL_1168;
          }
          *(_DWORD *)v21 = *(_DWORD *)v21 & 0x3F | ((_DWORD)v98 << 6);
          LODWORD(v476) = 58;
          if (v97)
          {
            v339 = *((unsigned int *)this + 13);
            if ((_DWORD)v339 == *((_DWORD *)this + 12))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
            }
            else
            {
              *(_BYTE *)(*v465 + v339) = 58;
              ++*v466;
            }
            v99 = v464;
            v100 = *((unsigned int *)this + 2);
            v101 = v100 >> 6;
            if (*((_BYTE *)this + 59))
              goto LABEL_1079;
LABEL_251:
            v102 = v99 & 0xFFFFFF0000000000;
            v103 = *((_QWORD *)this + 8);
            if (v103)
            {
              v104 = *(unsigned int *)(v103 + 4);
              v105 = (unint64_t)((*(_DWORD *)(v103 + 16) >> 2) & 1) << 32;
              v106 = v102 | v104 | v105;
              if ((_DWORD)v104)
              {
                v107 = (uint64_t *)(v103 + 8);
                v108 = v105 | v101;
                if (v104 <= v101)
                  v108 = v106;
                v461 = v108;
                if (!(_DWORD)v108)
                  goto LABEL_678;
                goto LABEL_256;
              }
            }
            else
            {
              v106 = v102 | 0x100000000;
            }
            v461 = 0x100000000;
            goto LABEL_678;
          }
          v100 = *((unsigned int *)this + 2);
          v101 = v100 >> 6;
          if (!*((_BYTE *)this + 59))
            goto LABEL_251;
LABEL_1079:
          if (*v466 < v101)
            goto LABEL_1337;
          v348 = v461 & 0xFFFFFF0000000000 | v101;
          v108 = v348 | 0x100000000;
          v106 = v464;
          v107 = (uint64_t *)((char *)this + 40);
          v461 = v348 | 0x100000000;
          if (!(_DWORD)v348)
          {
LABEL_678:
            v474 = 0;
            v476 = v471;
            WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>((uint64_t)this, &v476);
            v464 = v106;
            if (*((_QWORD *)&v476 + 1) && *(_WORD *)v476 == 47)
            {
              LODWORD(v475) = 47;
              if (*((_BYTE *)this + 59))
              {
                v353 = *((unsigned int *)this + 13);
                if ((_DWORD)v353 == *((_DWORD *)this + 12))
                {
                  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v475);
                }
                else
                {
                  *(_BYTE *)(*v465 + v353) = 47;
                  ++*v466;
                }
              }
              v471 = v476;
              if (!*((_QWORD *)&v476 + 1))
                goto LABEL_1337;
              if (*((_QWORD *)&v471 + 1) == 1)
              {
                v230 = 1;
              }
              else
              {
                v230 = 1;
                if ((*(_WORD *)v471 & 0xFC00) == 0xD800)
                {
                  if ((*(_WORD *)(v471 + 2) & 0xFC00) == 0xDC00)
                    v230 = 2;
                  else
                    v230 = 1;
                }
              }
              v263 = v471 + 2 * v230;
              *(_QWORD *)&v471 = v263;
              *((_QWORD *)&v471 + 1) -= v230;
              if (*((_BYTE *)this + 59))
                LODWORD(v264) = *v466;
              else
                v264 = (v263 - *((_QWORD *)this + 9)) >> 1;
              *((_DWORD *)this + 3) = v264;
              v29 = 4;
            }
            else
            {
              if (!*((_QWORD *)&v471 + 1))
                goto LABEL_1337;
              if (*((_QWORD *)&v471 + 1) == 1)
              {
                v231 = 1;
              }
              else
              {
                v231 = 1;
                if ((*(_WORD *)v471 & 0xFC00) == 0xD800)
                {
                  if ((*(_WORD *)(v471 + 2) & 0xFC00) == 0xDC00)
                    v231 = 2;
                  else
                    v231 = 1;
                }
              }
              v241 = v471 + 2 * v231;
              *(_QWORD *)&v471 = v241;
              *((_QWORD *)&v471 + 1) -= v231;
              if (*((_BYTE *)this + 59))
                LODWORD(v242) = *v466;
              else
                v242 = (v241 - *((_QWORD *)this + 9)) >> 1;
              *(int32x4_t *)((char *)this + 12) = vdupq_n_s32(v242);
              v243 = *((_DWORD *)this + 2);
              *((_DWORD *)this + 7) = v242;
              *((_DWORD *)this + 2) = v243 & 0xFFFFFFC3 | 4;
              v29 = 16;
            }
            goto LABEL_790;
          }
LABEL_256:
          a2 = *v107;
          v109 = v108 & 0xFF00000000;
          if ((v108 & 0xFF00000000) != 0)
            v110 = *(unsigned __int8 *)a2;
          else
            v110 = *(unsigned __int16 *)a2;
          switch(v110)
          {
            case 'w':
              if ((_DWORD)v108 == 3)
              {
                v464 = v106;
                if (v109)
                {
                  if (*(_BYTE *)(a2 + 1) != 115)
                    goto LABEL_930;
                  v291 = *(unsigned __int8 *)(a2 + 2);
                }
                else
                {
                  if (*(_WORD *)(a2 + 2) != 115)
                    goto LABEL_930;
                  v291 = *(unsigned __int16 *)(a2 + 4);
                }
              }
              else
              {
                if ((_DWORD)v108 != 2)
                  goto LABEL_678;
                v464 = v106;
                if (v109)
                  v291 = *(unsigned __int8 *)(a2 + 1);
                else
                  v291 = *(unsigned __int16 *)(a2 + 2);
              }
              if (v291 != 115)
                goto LABEL_930;
              v474 = 0;
              *((_BYTE *)this + 56) = 1;
              if (WTF::URL::protocolIs((uint64_t *)a4, (_BYTE *)a2, v461))
                v29 = 3;
              else
                v29 = 7;
              v295 = *((_QWORD *)&v471 + 1);
              if (!*((_QWORD *)&v471 + 1))
                goto LABEL_1337;
              v296 = (_WORD *)v471;
              if (*((_QWORD *)&v471 + 1) == 1)
                goto LABEL_906;
              break;
            case 'h':
              if ((_DWORD)v108 != 5)
              {
                if ((_DWORD)v108 != 4)
                  goto LABEL_678;
                v464 = v106;
                if (v109)
                {
                  if (*(_BYTE *)(a2 + 1) != 116 || *(_BYTE *)(a2 + 2) != 116)
                    goto LABEL_930;
                  v290 = *(unsigned __int8 *)(a2 + 3);
                }
                else
                {
                  if (*(_WORD *)(a2 + 2) != 116 || *(_WORD *)(a2 + 4) != 116)
                    goto LABEL_930;
                  v290 = *(unsigned __int16 *)(a2 + 6);
                }
                if (v290 == 112)
                  goto LABEL_896;
                goto LABEL_930;
              }
              v464 = v106;
              if (v109)
              {
                if (*(_BYTE *)(a2 + 1) != 116 || *(_BYTE *)(a2 + 2) != 116 || *(_BYTE *)(a2 + 3) != 112)
                  goto LABEL_930;
                v292 = *(unsigned __int8 *)(a2 + 4);
              }
              else
              {
                if (*(_WORD *)(a2 + 2) != 116 || *(_WORD *)(a2 + 4) != 116 || *(_WORD *)(a2 + 6) != 112)
                  goto LABEL_930;
                v292 = *(unsigned __int16 *)(a2 + 8);
              }
              if (v292 != 115)
                goto LABEL_930;
LABEL_896:
              *(_DWORD *)v21 = v100 | 2;
LABEL_901:
              *((_BYTE *)this + 56) = 1;
              if (WTF::URL::protocolIs((uint64_t *)a4, (_BYTE *)a2, v461))
                v29 = 3;
              else
                v29 = 7;
              v295 = *((_QWORD *)&v471 + 1);
              if (!*((_QWORD *)&v471 + 1))
                goto LABEL_1337;
              v296 = (_WORD *)v471;
              if (*((_QWORD *)&v471 + 1) == 1)
              {
LABEL_906:
                v297 = 1;
LABEL_919:
                v9 = v295 - v297;
                *(_QWORD *)&v471 = &v296[v297];
                *((_QWORD *)&v471 + 1) = v295 - v297;
                goto LABEL_791;
              }
              break;
            case 'f':
              if ((_DWORD)v108 == 4)
              {
                v464 = v106;
                if (v109)
                {
                  if (*(_BYTE *)(a2 + 1) != 105 || *(_BYTE *)(a2 + 2) != 108)
                    goto LABEL_930;
                  v293 = *(unsigned __int8 *)(a2 + 3);
                }
                else
                {
                  if (*(_WORD *)(a2 + 2) != 105 || *(_WORD *)(a2 + 4) != 108)
                    goto LABEL_930;
                  v293 = *(unsigned __int16 *)(a2 + 6);
                }
                if (v293 == 101)
                {
                  *((_WORD *)this + 28) = 257;
                  if (!*((_QWORD *)&v471 + 1))
                    goto LABEL_1337;
                  if (*((_QWORD *)&v471 + 1) == 1)
                  {
                    v298 = 1;
                  }
                  else
                  {
                    v298 = 1;
                    if ((*(_WORD *)v471 & 0xFC00) == 0xD800)
                    {
                      if ((*(_WORD *)(v471 + 2) & 0xFC00) == 0xDC00)
                        v298 = 2;
                      else
                        v298 = 1;
                    }
                  }
                  v9 = *((_QWORD *)&v471 + 1) - v298;
                  *(_QWORD *)&v471 = v471 + 2 * v298;
                  *((_QWORD *)&v471 + 1) -= v298;
                  v29 = 11;
                  goto LABEL_791;
                }
                goto LABEL_930;
              }
              if ((_DWORD)v108 != 3)
                goto LABEL_678;
              v464 = v106;
              if (v109)
              {
                if (*(_BYTE *)(a2 + 1) == 116)
                {
                  v262 = *(unsigned __int8 *)(a2 + 2);
LABEL_900:
                  if (v262 == 112)
                    goto LABEL_901;
                }
              }
              else if (*(_WORD *)(a2 + 2) == 116)
              {
                v262 = *(unsigned __int16 *)(a2 + 4);
                goto LABEL_900;
              }
LABEL_930:
              v106 = v464;
              goto LABEL_678;
            default:
              goto LABEL_678;
          }
          v297 = 1;
          if ((*v296 & 0xFC00) == 0xD800)
          {
            if ((v296[1] & 0xFC00) == 0xDC00)
              v297 = 2;
            else
              v297 = 1;
          }
          goto LABEL_919;
        }
        if ((v32 - 65) > 0x19)
        {
          v158 = *v30;
          if (v9 == 1)
            goto LABEL_401;
LABEL_397:
          if ((v158 & 0xFC00) == 0xD800)
          {
            v159 = v30[1];
            v28 = (v159 & 0xFC00) == 56320;
            v160 = (v158 << 10) - 56613888 + v159;
            if (v28)
              v158 = v160;
          }
          goto LABEL_401;
        }
        WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
        if (!*((_QWORD *)&v471 + 1))
          goto LABEL_1337;
        v30 = (unsigned __int16 *)v471;
        v158 = *(unsigned __int16 *)v471;
        if (*((_QWORD *)&v471 + 1) != 1)
          goto LABEL_397;
LABEL_401:
        v161 = v158 | (32 * ((v158 - 65) < 0x1A));
        LODWORD(v476) = v161;
        if (*((_BYTE *)this + 59))
        {
          v320 = *((unsigned int *)this + 13);
          if ((_DWORD)v320 == *((_DWORD *)this + 12))
          {
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
          }
          else
          {
            *(_BYTE *)(*v465 + v320) = v161;
            ++*v466;
          }
        }
        WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>((uint64_t)this, &v471);
        v9 = *((_QWORD *)&v471 + 1);
        if (!*((_QWORD *)&v471 + 1))
        {
LABEL_404:
          if (*((_DWORD *)this + 12))
          {
            if (*v466)
              *v466 = 0;
            v162 = *v465;
            if (*v465)
            {
              *((_QWORD *)this + 5) = 0;
              *((_DWORD *)this + 12) = 0;
              WTF::fastFree(v162, (void *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
            }
          }
          v471 = v469;
          v29 = 2;
          goto LABEL_790;
        }
LABEL_403:
        v29 = 1;
        goto LABEL_791;
      case 2u:
        a2 = a4;
        v89 = *(_DWORD *)(a4 + 8);
        if ((v89 & 1) == 0)
          goto LABEL_1168;
        if ((v89 & 4) == 0)
        {
          if (WTF::URL::protocolIs((uint64_t *)a4, "file", 0x100000004))
            v29 = 11;
          else
            v29 = 5;
          goto LABEL_790;
        }
        if ((_DWORD)v32 != 35)
          goto LABEL_1168;
        v154 = this;
LABEL_457:
        WTF::URLParser::copyURLPartsUntil<char16_t>((uint64_t)v154, a2, 8, (uint64_t)v30, &v474);
        LODWORD(v476) = 35;
        if (*((_BYTE *)this + 59))
        {
          v299 = *((unsigned int *)this + 13);
          if ((_DWORD)v299 == *((_DWORD *)this + 12))
            goto LABEL_936;
          *(_BYTE *)(*v465 + v299) = 35;
          ++*v466;
        }
        goto LABEL_458;
      case 3u:
        v29 = 5;
        if ((_DWORD)v32 != 47)
          goto LABEL_790;
        LODWORD(v476) = 47;
        if (*((_BYTE *)this + 59))
        {
          v306 = *((unsigned int *)this + 13);
          if ((_DWORD)v306 == *((_DWORD *)this + 12))
          {
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
          }
          else
          {
            *(_BYTE *)(*v465 + v306) = 47;
            ++*v466;
          }
        }
        WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>((uint64_t)this, &v471);
        if (!*((_QWORD *)&v471 + 1))
          goto LABEL_1234;
        v29 = 6;
        if (*(_WORD *)v471 != 47)
          goto LABEL_790;
        LODWORD(v476) = 47;
        if (*((_BYTE *)this + 59))
        {
          v321 = *((unsigned int *)this + 13);
          if ((_DWORD)v321 == *((_DWORD *)this + 12))
          {
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
          }
          else
          {
            *(_BYTE *)(*v465 + v321) = 47;
            ++*v466;
          }
        }
        v91 = *((_QWORD *)&v471 + 1);
        if (!*((_QWORD *)&v471 + 1))
          goto LABEL_1337;
        v92 = (_WORD *)v471;
        if (*((_QWORD *)&v471 + 1) == 1)
          goto LABEL_232;
        goto LABEL_287;
      case 4u:
        if ((_DWORD)v32 != 47)
        {
          if (*((_BYTE *)this + 59))
            LODWORD(v137) = *v466;
          else
            v137 = ((uint64_t)v30 - *((_QWORD *)this + 9)) >> 1;
          *(int32x4_t *)((char *)this + 12) = vdupq_n_s32((int)v137 - 1);
          *((_DWORD *)this + 2) &= 0xFFFFFFC7;
          goto LABEL_605;
        }
        LODWORD(v476) = 47;
        if (*((_BYTE *)this + 59))
        {
          v305 = *((unsigned int *)this + 13);
          if ((_DWORD)v305 == *((_DWORD *)this + 12))
          {
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
          }
          else
          {
            *(_BYTE *)(*v465 + v305) = 47;
            ++*v466;
          }
        }
        WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>((uint64_t)this, &v471);
        goto LABEL_192;
      case 5u:
        v113 = *v30;
        if ((v35 & 1) == 0)
        {
          v114 = v30[1];
          v28 = (v114 & 0xFC00) == 56320;
          v113 = ((_DWORD)v32 << 10) - 56613888 + v114;
          if (!v28)
            v113 = *v30;
        }
        if (v113 <= 62)
        {
          if (v113 == 35)
          {
            v154 = this;
            a2 = a4;
            goto LABEL_457;
          }
          if (v113 == 47)
          {
LABEL_360:
            if (v9 == 1)
            {
              v148 = 1;
            }
            else
            {
              v148 = 1;
              if ((v32 & 0xFC00) == 0xD800)
              {
                if ((v30[1] & 0xFC00) == 0xDC00)
                  v148 = 2;
                else
                  v148 = 1;
              }
            }
            v9 -= v148;
            *(_QWORD *)&v471 = &v30[v148];
            *((_QWORD *)&v471 + 1) = v9;
            v29 = 6;
            goto LABEL_791;
          }
LABEL_269:
          WTF::URLParser::copyURLPartsUntil<char16_t>((uint64_t)this, a4, 6, (uint64_t)v30, &v474);
          v115 = *((unsigned __int8 *)this + 59);
          if (*((_BYTE *)this + 59))
          {
            v326 = *v466;
            if ((_DWORD)v326 && *(_BYTE *)(v326 + *v465 - 1) != 47)
            {
LABEL_722:
              LODWORD(v476) = 47;
              if (!v115)
                goto LABEL_180;
              goto LABEL_723;
            }
          }
          else
          {
            v116 = *((_QWORD *)this + 9);
            v117 = v471 - v116;
            if ((_QWORD)v471 != v116)
            {
              v118 = *((_QWORD *)this + 8);
              if (!v118)
                goto LABEL_180;
              v119 = (v117 >> 1) - 1;
              if (*(_DWORD *)(v118 + 4) <= v119)
                goto LABEL_180;
              v120 = *(_QWORD *)(v118 + 8);
              if ((*(_BYTE *)(v118 + 16) & 4) != 0)
              {
                if (*(_BYTE *)(v120 + v119) != 47)
                  goto LABEL_722;
              }
              else if (*(_WORD *)(v120 + 2 * v119) != 47)
              {
                goto LABEL_722;
              }
            }
          }
          WTF::URL::host((WTF::URL *)a4);
          if ((_DWORD)a2)
            goto LABEL_789;
          WTF::URL::path((WTF::URL *)a4);
          if ((_DWORD)a2)
            goto LABEL_789;
          v115 = *((unsigned __int8 *)this + 59);
          goto LABEL_722;
        }
        if (v113 != 63)
        {
          if (v113 == 92)
            goto LABEL_360;
          goto LABEL_269;
        }
        WTF::URLParser::copyURLPartsUntil<char16_t>((uint64_t)this, a4, 7, (uint64_t)v30, &v474);
        LODWORD(v476) = 63;
        v76 = v467;
        if (!*((_BYTE *)this + 59))
        {
          v77 = *((_QWORD *)&v471 + 1);
          if (!*((_QWORD *)&v471 + 1))
            goto LABEL_1337;
          goto LABEL_621;
        }
        v323 = *((unsigned int *)this + 13);
        if ((_DWORD)v323 == *((_DWORD *)this + 12))
        {
LABEL_1016:
          WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
          goto LABEL_1056;
        }
        v325 = *v465;
LABEL_1055:
        *(_BYTE *)(v325 + v323) = 63;
        ++*v466;
LABEL_1056:
        v76 = v467;
        v77 = *((_QWORD *)&v471 + 1);
        if (!*((_QWORD *)&v471 + 1))
          goto LABEL_1337;
LABEL_621:
        if (v77 == 1)
        {
          v221 = 1;
        }
        else
        {
          v221 = 1;
          if ((*(_WORD *)v471 & 0xFC00) == 0xD800)
          {
            if ((*(_WORD *)(v471 + 2) & 0xFC00) == 0xDC00)
              v221 = 2;
            else
              v221 = 1;
          }
        }
        v9 = v77 - v221;
        v223 = (unsigned __int16 *)(v471 + 2 * v221);
        *(_QWORD *)&v471 = v223;
        *((_QWORD *)&v471 + 1) = v9;
        if (v474)
          v76 = v223;
        v467 = v76;
        if (v474)
          v29 = 18;
        else
          v29 = 17;
LABEL_791:
        if (!v9)
        {
LABEL_1167:
          v377 = v29;
          v67 = v467;
          switch(v377)
          {
            case 0:
              goto LABEL_11;
            case 1:
            case 7:
            case 8:
              goto LABEL_1168;
            case 2:
              __break(0xC471u);
              JUMPOUT(0x197B46FD0);
            case 3:
              v394 = v471;
              v395 = this;
              v396 = a4;
              goto LABEL_1194;
            case 4:
              v398 = *((_DWORD *)this + 2);
              v397 = *((_DWORD *)this + 3);
              *(int32x4_t *)((char *)this + 12) = vdupq_n_s32(v397 - 1);
              *((_DWORD *)this + 2) = v398 & 0xFFFFFFC7;
              goto LABEL_1319;
            case 5:
              __break(0xC471u);
              JUMPOUT(0x197B46FF0);
            case 6:
              WTF::URLParser::copyURLPartsUntil<char16_t>((uint64_t)this, a4, 5, v471, &v474);
              LODWORD(v476) = 47;
              if (*((_BYTE *)this + 59))
                goto LABEL_1288;
              goto LABEL_1246;
            case 9:
              goto LABEL_1179;
            case 10:
              goto LABEL_1177;
            case 11:
              if ((*(_BYTE *)(a4 + 8) & 1) != 0)
              {
                v425 = WTF::URL::protocolIs((uint64_t *)a4, "file", 0x100000004);
                v394 = v471;
                if (v425)
                {
                  v395 = this;
                  v396 = a4;
LABEL_1194:
                  WTF::URLParser::copyURLPartsUntil<char16_t>((uint64_t)v395, v396, 8, v394, &v474);
                  goto LABEL_1321;
                }
              }
              else
              {
                v394 = v471;
              }
              WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, v394);
              if (!*((_BYTE *)this + 59))
                goto LABEL_1250;
              v438 = *((unsigned int *)this + 13);
              v426 = v438 + 3;
              if (v438 + 3 <= *((unsigned int *)this + 12))
              {
                v439 = "///";
              }
              else
              {
                v439 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v465, (WTF *)(v438 + 3), (uint64_t)"///");
                v438 = *v466;
                if (v426 < v438)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197B46CD0);
                }
              }
              v440 = *((_QWORD *)this + 5) + v438;
              v441 = *(_WORD *)v439;
              *(_BYTE *)(v440 + 2) = v439[2];
              *(_WORD *)v440 = v441;
              *((_DWORD *)this + 13) = v426;
              if (!*((_BYTE *)this + 59))
LABEL_1250:
                v426 = ((_QWORD)v471 - *((_QWORD *)this + 9)) >> 1;
              *(int32x4_t *)((char *)this + 12) = vdupq_n_s32((int)v426 - 1);
              *((_DWORD *)this + 2) &= 0xFFFFFFC7;
              *((_DWORD *)this + 7) = v426;
              *((_DWORD *)this + 8) = v426;
              *((_DWORD *)this + 9) = v426;
              goto LABEL_1321;
            case 12:
              WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, v471);
              v391 = (const WTF::URL *)a4;
              if ((*(_BYTE *)(a4 + 8) & 1) == 0
                || !WTF::URL::protocolIs((uint64_t *)a4, "file", 0x100000004))
              {
                goto LABEL_1310;
              }
              WTF::URL::host((WTF::URL *)a4);
              if (v392)
              {
                WTF::URLParser::copyURLPartsUntil<char16_t>((uint64_t)this, a4, 5, v471, &v474);
                LODWORD(v476) = 47;
                if (*((_BYTE *)this + 59))
                {
                  v393 = *((unsigned int *)this + 13);
                  if ((_DWORD)v393 == *((_DWORD *)this + 12))
                  {
                    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
                  }
                  else
                  {
                    *(_BYTE *)(*v465 + v393) = 47;
                    ++*v466;
                  }
                  v391 = (const WTF::URL *)a4;
                }
              }
              else
              {
                WTF::URLParser::copyURLPartsUntil<char16_t>((uint64_t)this, a4, 0, v471, &v474);
                if (!*((_BYTE *)this + 59))
                  goto LABEL_1311;
                v429 = *((unsigned int *)this + 13);
                v430 = v429 + 2;
                if (v429 + 2 <= *((unsigned int *)this + 12))
                {
                  v431 = ":/";
                }
                else
                {
                  v431 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v465, (WTF *)(v429 + 2), (uint64_t)":/");
                  v429 = *v466;
                  if (v430 < v429)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197B46AC4);
                  }
                }
                *(_WORD *)(*v465 + v429) = *(_WORD *)v431;
                *v466 = v430;
                v391 = (const WTF::URL *)a4;
LABEL_1310:
                if (*((_BYTE *)this + 59))
                {
                  v456 = *((unsigned int *)this + 12);
                  v455 = *((unsigned int *)this + 13);
                  *((_DWORD *)this + 3) = v455 + 1;
                  v457 = v455 + 2;
                  if (v455 + 2 <= v456)
                  {
                    v458 = "//";
                  }
                  else
                  {
                    v458 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v465, (WTF *)(v455 + 2), (uint64_t)"//");
                    v455 = *v466;
                    if (v457 < v455)
                    {
                      __break(0xC471u);
                      goto LABEL_1337;
                    }
                  }
                  *(_WORD *)(*((_QWORD *)this + 5) + v455) = *(_WORD *)v458;
                  *((_DWORD *)this + 13) = v457;
                  v443 = *((_DWORD *)this + 3);
                  v391 = (const WTF::URL *)a4;
                }
                else
                {
LABEL_1311:
                  v443 = (((_QWORD)v471 - *((_QWORD *)this + 9)) >> 1) + 1;
                  *((_DWORD *)this + 3) = v443;
                }
                *((_DWORD *)this + 4) = v443;
                *((_DWORD *)this + 5) = v443;
                *((_DWORD *)this + 6) = v443;
                *((_DWORD *)this + 2) &= 0xFFFFFFC7;
              }
              if (!WTF::URLParser::copyBaseWindowsDriveLetter(this, v391))
              {
                v427 = 1;
                goto LABEL_1317;
              }
              LODWORD(v476) = 47;
              if (*((_BYTE *)this + 59))
                goto LABEL_1338;
              goto LABEL_1315;
            case 13:
              v30 = (unsigned __int16 *)v471;
              goto LABEL_1205;
            case 14:
              __break(0xC471u);
              JUMPOUT(0x197B47010);
            case 15:
            case 16:
              if (*((_BYTE *)this + 59))
                LODWORD(v388) = *v466;
              else
                v388 = ((_QWORD)v471 - *((_QWORD *)this + 9)) >> 1;
              *((_DWORD *)this + 8) = v388;
              goto LABEL_1237;
            case 17:
              if (!*((_BYTE *)this + 59))
                goto LABEL_1236;
              v397 = *v466;
              goto LABEL_1320;
            case 18:
              v30 = (unsigned __int16 *)v471;
              goto LABEL_1201;
            default:
              goto LABEL_1321;
          }
        }
        continue;
      case 6u:
        if (v33 == 55296 || (_DWORD)v32 != 92 && (_DWORD)v32 != 47)
        {
          v122 = a4;
          WTF::URLParser::copyURLPartsUntil<char16_t>((uint64_t)this, a4, 5, (uint64_t)v30, &v474);
          LODWORD(v476) = 47;
          if (*((_BYTE *)this + 59))
          {
            v300 = *((unsigned int *)this + 13);
            if ((_DWORD)v300 == *((_DWORD *)this + 12))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
            }
            else
            {
              *(_BYTE *)(*v465 + v300) = 47;
              ++*v466;
            }
            v122 = a4;
          }
          v123 = *(_DWORD *)(v122 + 24) + ((*(_DWORD *)(v122 + 8) >> 3) & 7);
          goto LABEL_787;
        }
        *(_QWORD *)&v471 = v30 + 1;
        *((_QWORD *)&v471 + 1) = v9 - 1;
        WTF::URLParser::copyURLPartsUntil<char16_t>((uint64_t)this, a4, 0, (uint64_t)(v30 + 1), &v474);
        if (*((_BYTE *)this + 59))
        {
          v314 = *((unsigned int *)this + 13);
          v315 = v314 + 3;
          v316 = "://";
          if (v314 + 3 > *((unsigned int *)this + 12))
          {
            v316 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v465, (WTF *)(v314 + 3), (uint64_t)"://");
            v314 = *v466;
            if (v315 < v314)
            {
              __break(0xC471u);
              JUMPOUT(0x197B47098);
            }
          }
          v317 = *v465 + v314;
          v318 = *(_WORD *)v316;
          *(_BYTE *)(v317 + 2) = v316[2];
          *(_WORD *)v317 = v318;
          *v466 = v315;
          if (*((_BYTE *)this + 56))
            goto LABEL_590;
        }
        else if (*((_BYTE *)this + 56))
        {
          goto LABEL_590;
        }
LABEL_192:
        if (*((_BYTE *)this + 59))
          goto LABEL_932;
        v82 = v471 - *((_QWORD *)this + 9);
        goto LABEL_302;
      case 7u:
        if (v33 == 55296)
          goto LABEL_346;
        if ((_DWORD)v32 == 47)
          goto LABEL_237;
        if ((_DWORD)v32 != 92)
        {
LABEL_346:
          WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
          if (!*((_BYTE *)this + 59))
            goto LABEL_590;
          v140 = *((unsigned int *)this + 13);
          v141 = v140 + 2;
          v142 = "//";
          if (v140 + 2 > *((unsigned int *)this + 12))
          {
            v142 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v465, (WTF *)(v140 + 2), (uint64_t)"//");
            v140 = *v466;
            if (v141 < v140)
            {
              __break(0xC471u);
              JUMPOUT(0x197B47090);
            }
          }
          *(_WORD *)(*v465 + v140) = *(_WORD *)v142;
          *v466 = v141;
          v29 = 8;
          goto LABEL_790;
        }
        WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
LABEL_237:
        LODWORD(v476) = 47;
        if (*((_BYTE *)this + 59))
        {
          v307 = *((unsigned int *)this + 13);
          if ((_DWORD)v307 == *((_DWORD *)this + 12))
          {
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
          }
          else
          {
            *(_BYTE *)(*v465 + v307) = 47;
            ++*v466;
          }
        }
        WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>((uint64_t)this, &v471);
        v94 = *((_QWORD *)&v471 + 1);
        a2 = v471;
        if (!*((_QWORD *)&v471 + 1))
          goto LABEL_240;
        v95 = *(unsigned __int16 *)v471;
        if ((v95 & 0xFC00) == 0xD800)
          goto LABEL_240;
        if (v95 == 47)
          goto LABEL_424;
        if (v95 == 92)
        {
          WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, v471);
          v94 = *((_QWORD *)&v471 + 1);
          if (!*((_QWORD *)&v471 + 1))
            goto LABEL_1337;
          a2 = v471;
          if (*((_QWORD *)&v471 + 1) == 1 || (*(_WORD *)v471 & 0xFC00) != 0xD800)
          {
LABEL_424:
            v165 = 1;
          }
          else if ((*(_WORD *)(v471 + 2) & 0xFC00) == 0xDC00)
          {
            v165 = 2;
          }
          else
          {
            v165 = 1;
          }
          *(_QWORD *)&v471 = a2 + 2 * v165;
          *((_QWORD *)&v471 + 1) = v94 - v165;
          LODWORD(v476) = 47;
          if (!*((_BYTE *)this + 59))
            goto LABEL_590;
          v96 = *((unsigned int *)this + 13);
          if ((_DWORD)v96 == *((_DWORD *)this + 12))
          {
LABEL_242:
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
LABEL_590:
            v29 = 8;
            goto LABEL_790;
          }
        }
        else
        {
LABEL_240:
          WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, v471);
          LODWORD(v476) = 47;
          if (!*((_BYTE *)this + 59))
            goto LABEL_590;
          v96 = *((unsigned int *)this + 13);
          if ((_DWORD)v96 == *((_DWORD *)this + 12))
            goto LABEL_242;
        }
        *(_BYTE *)(*v465 + v96) = 47;
        ++*v466;
        v29 = 8;
        goto LABEL_790;
      case 8u:
        if (v33 == 55296 || (_DWORD)v32 != 92 && (_DWORD)v32 != 47)
        {
          if (*((_BYTE *)this + 59))
          {
LABEL_932:
            LODWORD(v124) = *v466;
          }
          else
          {
            v82 = (uint64_t)v30 - *((_QWORD *)this + 9);
LABEL_302:
            v124 = v82 >> 1;
          }
          *((_DWORD *)this + 3) = v124;
          v470 = v471;
          v29 = 9;
          goto LABEL_790;
        }
        WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
        v91 = *((_QWORD *)&v471 + 1);
        if (!*((_QWORD *)&v471 + 1))
          goto LABEL_1337;
        v92 = (_WORD *)v471;
        if (*((_QWORD *)&v471 + 1) == 1)
        {
LABEL_232:
          v93 = 1;
        }
        else
        {
LABEL_287:
          v93 = 1;
          if ((*v92 & 0xFC00) == 0xD800)
          {
            if ((v92[1] & 0xFC00) == 0xDC00)
              v93 = 2;
            else
              v93 = 1;
          }
        }
        v9 = v91 - v93;
        *(_QWORD *)&v471 = &v92[v93];
        *((_QWORD *)&v471 + 1) = v91 - v93;
        v29 = 8;
        goto LABEL_791;
      case 9u:
        do
        {
          LODWORD(v53) = *v30;
          if ((v53 & 0xFC00) == 0xD800)
            goto LABEL_100;
          if ((_DWORD)v53 == 47)
            goto LABEL_375;
          if ((_DWORD)v53 == 64)
          {
            v183 = v9;
            v184 = v30;
LABEL_495:
            if ((unsigned __int16)v53 == 64)
            {
              v30 = v184;
              v9 = v183;
            }
            if ((unsigned __int16)v53 != 47
              && ((unsigned __int16)v53 != 92 || !*((_BYTE *)this + 56))
              && (unsigned __int16)v53 != 35
              && (unsigned __int16)v53 != 63)
            {
LABEL_504:
              if ((v53 & 0xFC00) == 0xD800 && v183 != 1)
              {
                if ((v184[1] & 0xFC00) == 0xDC00)
                  v53 = 2;
                else
                  v53 = 1;
                goto LABEL_510;
              }
              while (1)
              {
                v53 = 1;
LABEL_510:
                v40 = v183 >= v53;
                v183 -= v53;
                if (!v40)
                  goto LABEL_1337;
                if (!v183)
                  break;
                v184 += v53;
                LOWORD(v53) = *v184;
                if ((*v184 & 0xFC00) != 0xD800)
                  goto LABEL_495;
                if (v183 != 1)
                  goto LABEL_504;
              }
            }
            a2 = v470;
            if ((uint64_t)((uint64_t)v30 - v470) <= -2)
            {
LABEL_1337:
              __break(1u);
LABEL_1338:
              v459 = *((unsigned int *)this + 13);
              if ((_DWORD)v459 == *((_DWORD *)this + 12))
              {
                WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
              }
              else
              {
                *(_BYTE *)(*v465 + v459) = 47;
                ++*v466;
              }
LABEL_1315:
              v427 = 4;
LABEL_1317:
              v428 = *((_DWORD *)this + 6);
              goto LABEL_1318;
            }
            WTF::URLParser::parseAuthority<char16_t>((uint64_t)this, (unsigned __int16 *)v470, (uint64_t)((uint64_t)v30 - v470) >> 1);
            *(_QWORD *)&v471 = v30;
            *((_QWORD *)&v471 + 1) = v9;
            WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>((uint64_t)this, &v471);
            v470 = v471;
            *((_BYTE *)this + 58) = 0;
            v29 = 10;
            goto LABEL_790;
          }
          if ((_DWORD)v53 == 92 && *((_BYTE *)this + 56) != 0)
          {
LABEL_375:
            v55 = 1;
LABEL_376:
            a2 = v470;
            if ((uint64_t)((uint64_t)v30 - v470) <= -2)
              goto LABEL_1337;
            if (v30 == (unsigned __int16 *)v470)
            {
              if (*((_BYTE *)this + 56))
                goto LABEL_1168;
              if (*((_BYTE *)this + 59))
                LODWORD(v166) = *v466;
              else
                v166 = ((uint64_t)v30 - *((_QWORD *)this + 9)) >> 1;
              *((_DWORD *)this + 2) &= 0xFFFFFFC7;
              *((int32x4_t *)this + 1) = vdupq_n_s32(v166);
            }
            else
            {
              if (*((_BYTE *)this + 59))
              {
                v313 = *v466;
                *((_DWORD *)this + 4) = *v466;
                *((_DWORD *)this + 5) = v313;
                if (!WTF::URLParser::parseHostAndPort<char16_t>())
                  goto LABEL_1168;
              }
              else
              {
                v155 = (uint64_t)(v470 - *((_QWORD *)this + 9)) >> 1;
                *((_DWORD *)this + 4) = v155;
                *((_DWORD *)this + 5) = v155;
                if (!WTF::URLParser::parseHostAndPort<char16_t>())
                  goto LABEL_1168;
              }
              if ((v55 & 1) == 0)
              {
                if (*((_BYTE *)this + 56))
                {
                  WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, v471);
                  LODWORD(v476) = 47;
                  if (*((_BYTE *)this + 59))
                  {
LABEL_723:
                    v244 = *((unsigned int *)this + 13);
                    if ((_DWORD)v244 == *((_DWORD *)this + 12))
                    {
                      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
                    }
                    else
                    {
                      *(_BYTE *)(*v465 + v244) = 47;
                      ++*v466;
                    }
                  }
                }
LABEL_179:
                if (*((_BYTE *)this + 59))
                {
LABEL_931:
                  LODWORD(v137) = *v466;
                }
                else
                {
LABEL_180:
                  v78 = v471 - *((_QWORD *)this + 9);
LABEL_604:
                  v137 = v78 >> 1;
                }
LABEL_605:
                *((_DWORD *)this + 7) = v137;
              }
            }
LABEL_789:
            v29 = 15;
            goto LABEL_790;
          }
          v55 = 0;
          if ((_DWORD)v53 == 63 || (_DWORD)v53 == 35)
            goto LABEL_376;
          if ((_DWORD)v53 == 37 || v53 >= 0x80)
LABEL_100:
            *((_BYTE *)this + 58) = 1;
          v56 = 1;
          if (v9 != 1 && (v53 & 0xFC00) == 0xD800)
          {
            if ((v30[1] & 0xFC00) == 0xDC00)
              v56 = 2;
            else
              v56 = 1;
          }
          v40 = v9 >= v56;
          v9 -= v56;
          if (!v40)
            goto LABEL_1337;
          v30 += v56;
          *(_QWORD *)&v471 = v30;
          *((_QWORD *)&v471 + 1) = v9;
        }
        while (v9);
LABEL_1179:
        if (*((_BYTE *)this + 59))
        {
          v436 = *v466;
          *((_DWORD *)this + 4) = *v466;
          *((_DWORD *)this + 5) = v436;
          a3 = *((_QWORD *)&v470 + 1);
          if (!*((_QWORD *)&v470 + 1))
            goto LABEL_1291;
LABEL_1181:
          if (!WTF::URLParser::parseHostAndPort<char16_t>())
            goto LABEL_1234;
          goto LABEL_1182;
        }
        a3 = *((_QWORD *)&v470 + 1);
        v389 = ((_QWORD)v470 - *((_QWORD *)this + 9)) >> 1;
        *((_DWORD *)this + 4) = v389;
        *((_DWORD *)this + 5) = v389;
        if (a3)
          goto LABEL_1181;
LABEL_1291:
        v437 = *((_DWORD *)this + 2);
        v397 = *((_DWORD *)this + 3);
        *((_DWORD *)this + 4) = v397;
        *((_DWORD *)this + 5) = v397;
        *((_DWORD *)this + 6) = v397;
        *((_DWORD *)this + 2) = v437 & 0xFFFFFFC7;
LABEL_1319:
        *((_DWORD *)this + 7) = v397;
        *((_DWORD *)this + 8) = v397;
LABEL_1320:
        *((_DWORD *)this + 9) = v397;
LABEL_1321:
        if (*((_BYTE *)this + 59))
        {
          WTF::StringImpl::create(*((_BYTE **)this + 5), *((unsigned int *)this + 13), (uint64_t *)&v476);
          v445 = *(WTF::StringImpl **)this;
          *(_QWORD *)this = v476;
          if (v445)
            goto LABEL_1325;
        }
        else
        {
          v444 = (_DWORD *)*((_QWORD *)this + 8);
          if (v444)
            *v444 += 2;
          v445 = *(WTF::StringImpl **)this;
          *(_QWORD *)this = v444;
          if (v445)
          {
LABEL_1325:
            if (*(_DWORD *)v445 == 2)
            {
              WTF::StringImpl::~StringImpl(v445, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
              WTF::fastFree(v446, v447, v448, v449, v450, v451, v452, v453);
            }
            else
            {
              *(_DWORD *)v445 -= 2;
            }
          }
        }
        *(_DWORD *)v21 |= 1u;
LABEL_1329:
        v454 = v472;
        if (v472)
        {
          v472 = 0;
          LODWORD(v473) = 0;
          WTF::fastFree((unint64_t)v454, (void *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
        }
        return;
      case 0xAu:
        while (2)
        {
          v49 = *v30;
          if ((*v30 & 0xFC00) == 0xD800)
            goto LABEL_76;
          if (*v30 != 47)
          {
            v50 = *v30 != 92 || *((_BYTE *)this + 56) == 0;
            if (v50 && *v30 != 63 && *v30 != 35)
            {
              if (*v30 == 37 || *v30 >= 0x80u)
LABEL_76:
                *((_BYTE *)this + 58) = 1;
              if (v9 == 1)
              {
                v51 = 1;
                v9 = 0;
                v52 = 1;
              }
              else
              {
                v28 = (v49 & 0xFC00) == 55296;
                v51 = 1;
                if (v28)
                {
                  if ((v30[1] & 0xFC00) == 0xDC00)
                    v51 = 2;
                  else
                    v51 = 1;
                }
                v40 = v9 >= v51;
                v9 -= v51;
                v52 = v9 == 0;
                if (!v40)
                  goto LABEL_1337;
              }
              v30 += v51;
              *(_QWORD *)&v471 = v30;
              *((_QWORD *)&v471 + 1) = v9;
              if (v52)
              {
LABEL_1177:
                if (!WTF::URLParser::parseHostAndPort<char16_t>())
                  goto LABEL_1234;
LABEL_1182:
                if (*((_BYTE *)this + 56))
                {
                  WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, v471);
                  LODWORD(v476) = 47;
                  if (*((_BYTE *)this + 59))
                  {
                    v390 = *((unsigned int *)this + 13);
                    if ((_DWORD)v390 != *((_DWORD *)this + 12))
                      goto LABEL_1185;
LABEL_1289:
                    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
                  }
                  goto LABEL_1246;
                }
                v427 = *((_DWORD *)this + 6);
                v428 = (*((_DWORD *)this + 2) >> 3) & 7;
LABEL_1318:
                v397 = v428 + v427;
                goto LABEL_1319;
              }
              continue;
            }
          }
          break;
        }
        a2 = v470;
        if ((uint64_t)((uint64_t)v30 - v470) <= -2)
          goto LABEL_1337;
        if (!WTF::URLParser::parseHostAndPort<char16_t>())
          goto LABEL_1168;
        if (!*((_QWORD *)&v471 + 1))
          goto LABEL_1337;
        a2 = v471;
        v125 = *(unsigned __int16 *)v471;
        if ((v125 & 0xFC00) == 0xD800 || v125 != 63 && v125 != 35)
          goto LABEL_789;
        WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, v471);
        LODWORD(v476) = 47;
        if (*((_BYTE *)this + 59))
          goto LABEL_723;
        goto LABEL_180;
      case 0xBu:
        if ((v35 & 1) == 0)
        {
          v79 = v30[1];
          v28 = (v79 & 0xFC00) == 56320;
          v80 = ((_DWORD)v32 << 10) - 56613888 + v79;
          if (v28)
            LODWORD(v32) = v80;
        }
        if ((int)v32 <= 62)
        {
          v81 = a4;
          if ((_DWORD)v32 != 35)
          {
            if ((_DWORD)v32 != 47)
              goto LABEL_437;
            goto LABEL_330;
          }
          WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
          if ((*(_BYTE *)(a4 + 8) & 1) == 0
            || !WTF::URL::protocolIs((uint64_t *)a4, "file", 0x100000004))
          {
            if (!*((_BYTE *)this + 59))
              goto LABEL_485;
            v327 = *((unsigned int *)this + 13);
            v328 = v327 + 4;
            v329 = "///#";
            if (v327 + 4 > *((unsigned int *)this + 12))
            {
              v329 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v465, (WTF *)(v327 + 4), (uint64_t)"///#");
              v327 = *v466;
              if (v328 < v327)
              {
                __break(0xC471u);
                JUMPOUT(0x197B47068);
              }
            }
            *(_DWORD *)(*((_QWORD *)this + 5) + v327) = *(_DWORD *)v329;
            *((_DWORD *)this + 13) = v328;
            if (*((_BYTE *)this + 59))
              LODWORD(v179) = v328;
            else
LABEL_485:
              v179 = (uint64_t)(v471 - *((_QWORD *)this + 9)) >> 1;
            *(int32x4_t *)((char *)this + 12) = vdupq_n_s32((int)v179 - 2);
            *((_DWORD *)this + 2) &= 0xFFFFFFC7;
            v180 = v179 - 1;
            *((_DWORD *)this + 7) = v180;
            *((_DWORD *)this + 8) = v180;
            *((_DWORD *)this + 9) = v180;
            goto LABEL_458;
          }
          WTF::URLParser::copyURLPartsUntil<char16_t>((uint64_t)this, a4, 8, v471, &v474);
          LODWORD(v476) = 35;
          if (!*((_BYTE *)this + 59))
            goto LABEL_458;
          v171 = *((unsigned int *)this + 13);
          if ((_DWORD)v171 == *((_DWORD *)this + 12))
          {
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
            v172 = *((_QWORD *)&v471 + 1);
            if (!*((_QWORD *)&v471 + 1))
              goto LABEL_1337;
          }
          else
          {
            *(_BYTE *)(*v465 + v171) = 35;
            ++*v466;
            v172 = *((_QWORD *)&v471 + 1);
            if (!*((_QWORD *)&v471 + 1))
              goto LABEL_1337;
          }
LABEL_459:
          if (v172 == 1)
          {
            v175 = 1;
          }
          else
          {
            v175 = 1;
            if ((*(_WORD *)v471 & 0xFC00) == 0xD800)
            {
              if ((*(_WORD *)(v471 + 2) & 0xFC00) == 0xDC00)
                v175 = 2;
              else
                v175 = 1;
            }
          }
          v9 = v172 - v175;
          *(_QWORD *)&v471 = v471 + 2 * v175;
          *((_QWORD *)&v471 + 1) = v172 - v175;
          v29 = 19;
          goto LABEL_791;
        }
        v81 = a4;
        if ((_DWORD)v32 == 63)
        {
          WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
          if ((*(_BYTE *)(a4 + 8) & 1) != 0 && WTF::URL::protocolIs((uint64_t *)a4, "file", 0x100000004))
          {
            WTF::URLParser::copyURLPartsUntil<char16_t>((uint64_t)this, a4, 7, v471, &v474);
            LODWORD(v476) = 63;
            if (*((_BYTE *)this + 59))
            {
              v349 = *((unsigned int *)this + 13);
              if ((_DWORD)v349 == *((_DWORD *)this + 12))
              {
                WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
              }
              else
              {
                *(_BYTE *)(*v465 + v349) = 63;
                ++*v466;
              }
            }
            v173 = v467;
            if (!*((_QWORD *)&v471 + 1))
              goto LABEL_1337;
            if (*((_QWORD *)&v471 + 1) == 1)
            {
              v174 = 1;
            }
            else
            {
              v174 = 1;
              if ((*(_WORD *)v471 & 0xFC00) == 0xD800)
              {
                if ((*(_WORD *)(v471 + 2) & 0xFC00) == 0xDC00)
                  v174 = 2;
                else
                  v174 = 1;
              }
            }
            v233 = (unsigned __int16 *)(v471 + 2 * v174);
            *(_QWORD *)&v471 = v233;
            *((_QWORD *)&v471 + 1) -= v174;
          }
          else
          {
            if (*((_BYTE *)this + 59))
            {
              v330 = *((unsigned int *)this + 13);
              v331 = v330 + 4;
              v332 = "///?";
              if (v330 + 4 > *((unsigned int *)this + 12))
              {
                v332 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v465, (WTF *)(v330 + 4), (uint64_t)"///?");
                v330 = *v466;
                if (v331 < v330)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197B47070);
                }
              }
              *(_DWORD *)(*v465 + v330) = *(_DWORD *)v332;
              v173 = v467;
              *v466 = v331;
              v181 = *((_QWORD *)&v471 + 1);
              if (!*((_QWORD *)&v471 + 1))
                goto LABEL_1337;
            }
            else
            {
              v181 = *((_QWORD *)&v471 + 1);
              v173 = v467;
              if (!*((_QWORD *)&v471 + 1))
                goto LABEL_1337;
            }
            if (v181 == 1)
            {
              v182 = 1;
            }
            else
            {
              v182 = 1;
              if ((*(_WORD *)v471 & 0xFC00) == 0xD800)
              {
                if ((*(_WORD *)(v471 + 2) & 0xFC00) == 0xDC00)
                  v182 = 2;
                else
                  v182 = 1;
              }
            }
            v232 = v181 - v182;
            v233 = (unsigned __int16 *)(v471 + 2 * v182);
            *(_QWORD *)&v471 = v233;
            *((_QWORD *)&v471 + 1) = v232;
            if (*((_BYTE *)this + 59))
              LODWORD(v234) = *v466;
            else
              v234 = ((uint64_t)v233 - *((_QWORD *)this + 9)) >> 1;
            *(int32x4_t *)((char *)this + 12) = vdupq_n_s32((int)v234 - 2);
            *((_DWORD *)this + 2) &= 0xFFFFFFC7;
            v235 = v234 - 1;
            *((_DWORD *)this + 7) = v235;
            *((_DWORD *)this + 8) = v235;
          }
          if (v474)
            v173 = v233;
          v467 = v173;
          if (v474)
            v29 = 18;
          else
            v29 = 17;
          goto LABEL_790;
        }
        if ((_DWORD)v32 == 92)
        {
          WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
LABEL_330:
          LODWORD(v476) = 47;
          if (*((_BYTE *)this + 59))
          {
            v309 = *((unsigned int *)this + 13);
            if ((_DWORD)v309 == *((_DWORD *)this + 12))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
            }
            else
            {
              *(_BYTE *)(*v465 + v309) = 47;
              ++*v466;
            }
          }
          if (!*((_QWORD *)&v471 + 1))
            goto LABEL_1337;
          if (*((_QWORD *)&v471 + 1) == 1)
          {
            v136 = 1;
          }
          else
          {
            v136 = 1;
            if ((*(_WORD *)v471 & 0xFC00) == 0xD800)
            {
              if ((*(_WORD *)(v471 + 2) & 0xFC00) == 0xDC00)
                v136 = 2;
              else
                v136 = 1;
            }
          }
          v9 = *((_QWORD *)&v471 + 1) - v136;
          *(_QWORD *)&v471 = v471 + 2 * v136;
          *((_QWORD *)&v471 + 1) -= v136;
          v29 = 12;
          goto LABEL_791;
        }
LABEL_437:
        WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
        if ((*(_BYTE *)(v81 + 8) & 1) != 0
          && WTF::URL::protocolIs((uint64_t *)v81, "file", 0x100000004)
          && WTF::URLParser::shouldCopyFileURL<char16_t>((uint64_t)this, (unsigned __int16 *)v471, *((uint64_t *)&v471 + 1)))
        {
          WTF::URLParser::copyURLPartsUntil<char16_t>((uint64_t)this, v81, 6, v471, &v474);
LABEL_521:
          if (*((_QWORD *)&v471 + 1))
          {
            v186 = *(unsigned __int16 *)v471;
            if (*((_QWORD *)&v471 + 1) == 1)
            {
              v187 = *(unsigned __int16 *)v471;
            }
            else
            {
              v187 = *(unsigned __int16 *)v471;
              if ((v186 & 0xFC00) == 0xD800)
              {
                v188 = *(unsigned __int16 *)(v471 + 2);
                v28 = (v188 & 0xFC00) == 56320;
                v187 = (v186 << 10) - 56613888 + v188;
                if (!v28)
                  v187 = *(unsigned __int16 *)v471;
              }
            }
            if ((v187 | 0x20u) - 97 <= 0x19)
            {
              if (*((_QWORD *)&v471 + 1) == 1)
              {
                v237 = 1;
              }
              else
              {
                v236 = v186 & 0xFC00;
                v237 = 1;
                if (v236 == 55296)
                {
                  if ((*(_WORD *)(v471 + 2) & 0xFC00) == 0xDC00)
                    v237 = 2;
                  else
                    v237 = 1;
                }
              }
              v250 = *((_QWORD *)&v471 + 1) - v237;
              if (*((_QWORD *)&v471 + 1) != v237)
              {
                v251 = (unsigned __int16 *)(v471 + 2 * v237);
                while (1)
                {
                  v253 = *v251;
                  if (v250 == 1)
                  {
                    v254 = *v251;
                  }
                  else
                  {
                    v254 = *v251;
                    if ((v253 & 0xFC00) == 0xD800)
                    {
                      v255 = v251[1];
                      v28 = (v255 & 0xFC00) == 56320;
                      v254 = (v253 << 10) - 56613888 + v255;
                      if (!v28)
                        v254 = *v251;
                    }
                  }
                  v256 = v254 - 14;
                  v257 = v254 - 11;
                  if (v256 < 0xFFFFFFFB || v257 < 2)
                    break;
                  if (v250 == 1)
                  {
                    v252 = 1;
                  }
                  else
                  {
                    v259 = v253 & 0xFC00;
                    v252 = 1;
                    if (v259 == 55296)
                    {
                      if ((v251[1] & 0xFC00) == 0xDC00)
                        v252 = 2;
                      else
                        v252 = 1;
                    }
                  }
                  v251 += v252;
                  v250 -= v252;
                  if (!v250)
                    goto LABEL_789;
                }
                *(_QWORD *)&v476 = v251;
                *((_QWORD *)&v476 + 1) = v250;
                if ((v253 & 0xFC00) != 0xD800 && (v253 == 124 || v253 == 58))
                {
                  WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)0>(&v476);
                  if (!*((_QWORD *)&v476 + 1)
                    || (v260 = *(unsigned __int16 *)v476, (v260 & 0xFC00) != 0xD800)
                    && ((v260 - 47) <= 0x2D
                      ? (v261 = ((1 << (v260 - 47)) & 0x200000010001) == 0)
                      : (v261 = 1),
                        !v261 || v260 == 35))
                  {
                    WTF::URLParser::appendWindowsDriveLetter<char16_t>((uint64_t)this, (uint64_t *)&v471);
                  }
                }
              }
            }
          }
          goto LABEL_789;
        }
        if ((*(_BYTE *)(v81 + 8) & 1) != 0 && WTF::URL::protocolIs((uint64_t *)v81, "file", 0x100000004))
        {
          WTF::URL::host((WTF::URL *)v81);
          if (v176)
          {
            WTF::URLParser::copyURLPartsUntil<char16_t>((uint64_t)this, v81, 5, v471, &v474);
            LODWORD(v476) = 47;
            if (*((_BYTE *)this + 59))
            {
              v354 = *((unsigned int *)this + 13);
              if ((_DWORD)v354 != *((_DWORD *)this + 12))
              {
                *(_BYTE *)(*v465 + v354) = 47;
                ++*v466;
                v177 = *((_DWORD *)this + 6);
                goto LABEL_520;
              }
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
            }
            v177 = *((_DWORD *)this + 6);
LABEL_520:
            *((_DWORD *)this + 7) = v177 + 1;
            goto LABEL_521;
          }
          WTF::URLParser::copyURLPartsUntil<char16_t>((uint64_t)this, v81, 0, v471, &v474);
          if (!*((_BYTE *)this + 59))
            goto LABEL_518;
          v245 = *((unsigned int *)this + 13);
          v246 = v245 + 4;
          v247 = ":///";
          if (v245 + 4 > *((unsigned int *)this + 12))
          {
            v247 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v465, (WTF *)(v245 + 4), (uint64_t)":///");
            v245 = *v466;
            if (v246 < v245)
            {
              __break(0xC471u);
              JUMPOUT(0x197B47058);
            }
          }
          *(_DWORD *)(*v465 + v245) = *(_DWORD *)v247;
        }
        else
        {
          if (!*((_BYTE *)this + 59))
            goto LABEL_518;
          v333 = *((unsigned int *)this + 13);
          v246 = v333 + 3;
          v334 = "///";
          if (v333 + 3 > *((unsigned int *)this + 12))
          {
            v334 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v465, (WTF *)(v333 + 3), (uint64_t)"///");
            v333 = *v466;
            if (v246 < v333)
            {
              __break(0xC471u);
              JUMPOUT(0x197B47078);
            }
          }
          v335 = *v465 + v333;
          v336 = *(_WORD *)v334;
          *(_BYTE *)(v335 + 2) = v334[2];
          *(_WORD *)v335 = v336;
        }
        *((_DWORD *)this + 13) = v246;
        if (*((_BYTE *)this + 59))
        {
          LODWORD(v185) = v246;
          goto LABEL_519;
        }
LABEL_518:
        v185 = (uint64_t)(v471 - *((_QWORD *)this + 9)) >> 1;
LABEL_519:
        v177 = v185 - 1;
        *(int32x4_t *)((char *)this + 12) = vdupq_n_s32(v177);
        *((_DWORD *)this + 2) &= 0xFFFFFFC7;
        goto LABEL_520;
      case 0xCu:
        v83 = (const WTF::URL *)a4;
        if (v33 == 55296)
          goto LABEL_340;
        if ((_DWORD)v32 == 47)
          goto LABEL_198;
        if ((_DWORD)v32 == 92)
        {
          WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
LABEL_198:
          if ((*(_BYTE *)(a4 + 8) & 1) != 0 && WTF::URL::protocolIs((uint64_t *)a4, "file", 0x100000004))
          {
            WTF::URLParser::copyURLPartsUntil<char16_t>((uint64_t)this, a4, 0, v471, &v474);
            if (!*((_BYTE *)this + 59))
            {
LABEL_205:
              WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>((uint64_t)this, &v471);
              if (*((_BYTE *)this + 59))
                LODWORD(v88) = *v466;
              else
                v88 = (uint64_t)(v471 - *((_QWORD *)this + 9)) >> 1;
              *(int32x4_t *)((char *)this + 12) = vdupq_n_s32(v88);
              *((_DWORD *)this + 2) &= 0xFFFFFFC7;
              v470 = v471;
              v29 = 13;
LABEL_790:
              v9 = *((_QWORD *)&v471 + 1);
              goto LABEL_791;
            }
            v84 = *((unsigned int *)this + 13);
            v85 = v84 + 2;
            v86 = ":/";
            if (v84 + 2 > *((unsigned int *)this + 12))
            {
              v86 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v465, (WTF *)(v84 + 2), (uint64_t)":/");
              v84 = *v466;
              if (v85 < v84)
              {
                __break(0xC471u);
                JUMPOUT(0x197B47048);
              }
            }
            *(_WORD *)(*v465 + v84) = *(_WORD *)v86;
            *v466 = v85;
          }
          v87 = *((unsigned __int8 *)this + 59);
          LODWORD(v476) = 47;
          if (v87)
          {
            v308 = *((unsigned int *)this + 13);
            if ((_DWORD)v308 == *((_DWORD *)this + 12))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
            }
            else
            {
              *(_BYTE *)(*v465 + v308) = 47;
              ++*v466;
            }
          }
          goto LABEL_205;
        }
LABEL_340:
        if ((*(_BYTE *)(a4 + 8) & 1) == 0)
          goto LABEL_553;
        if ((WTF::URL::protocolIs((uint64_t *)a4, "file", 0x100000004) & 1) != 0)
        {
          WTF::URL::host((WTF::URL *)a4);
          if (v138)
          {
            WTF::URLParser::copyURLPartsUntil<char16_t>((uint64_t)this, a4, 5, v471, &v474);
            LODWORD(v476) = 47;
            if (!*((_BYTE *)this + 59))
            {
LABEL_557:
              v476 = v471;
              if (!*((_QWORD *)&v471 + 1))
                goto LABEL_1391;
              v198 = *(unsigned __int16 *)v471;
              if (*((_QWORD *)&v471 + 1) != 1 && (v198 & 0xFC00) == 0xD800)
              {
                v199 = *(unsigned __int16 *)(v471 + 2);
                v28 = (v199 & 0xFC00) == 56320;
                v200 = (v198 << 10) - 56613888 + v199;
                if (v28)
                  v198 = v200;
              }
              if ((v198 | 0x20u) - 97 <= 0x19
                && (WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)0>(&v476),
                    *((_QWORD *)&v476 + 1))
                && (v201 = *(unsigned __int16 *)v476, (v201 & 0xFC00) != 0xD800)
                && (v201 == 124 || v201 == 58)
                && ((WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)0>(&v476),
                     !*((_QWORD *)&v476 + 1))
                 || (v202 = *(unsigned __int16 *)v476, (v202 & 0xFC00) != 0xD800)
                 && ((v202 - 47) <= 0x2D
                  && ((1 << (v202 - 47)) & 0x200000010001) != 0
                  || v202 == 35)))
              {
                WTF::URLParser::appendWindowsDriveLetter<char16_t>((uint64_t)this, (uint64_t *)&v471);
              }
              else
              {
LABEL_1391:
                if (WTF::URLParser::copyBaseWindowsDriveLetter(this, v83))
                {
                  LODWORD(v476) = 47;
                  if (*((_BYTE *)this + 59))
                  {
                    v322 = *((unsigned int *)this + 13);
                    if ((_DWORD)v322 == *((_DWORD *)this + 12))
                    {
                      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
                    }
                    else
                    {
                      *(_BYTE *)(*v465 + v322) = 47;
                      ++*v466;
                    }
                  }
                  v203 = *((_DWORD *)this + 6) + 4;
LABEL_788:
                  *((_DWORD *)this + 7) = v203;
                  goto LABEL_789;
                }
              }
              v123 = *((_DWORD *)this + 6);
LABEL_787:
              v203 = v123 + 1;
              goto LABEL_788;
            }
            v139 = *((unsigned int *)this + 13);
            if ((_DWORD)v139 == *((_DWORD *)this + 12))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
            }
            else
            {
              *(_BYTE *)(*v465 + v139) = 47;
              ++*v466;
            }
LABEL_556:
            v83 = (const WTF::URL *)a4;
            goto LABEL_557;
          }
          WTF::URLParser::copyURLPartsUntil<char16_t>((uint64_t)this, a4, 0, v471, &v474);
          if (!*((_BYTE *)this + 59))
            goto LABEL_554;
          v226 = *((unsigned int *)this + 13);
          v227 = v226 + 4;
          v228 = ":///";
          if (v226 + 4 > *((unsigned int *)this + 12))
          {
            v228 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v465, (WTF *)(v226 + 4), (uint64_t)":///");
            v226 = *v466;
            if (v227 < v226)
            {
              __break(0xC471u);
              JUMPOUT(0x197B47050);
            }
          }
          *(_DWORD *)(*v465 + v226) = *(_DWORD *)v228;
        }
        else
        {
          v30 = (unsigned __int16 *)v471;
LABEL_553:
          WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
          if (!*((_BYTE *)this + 59))
            goto LABEL_554;
          v310 = *((unsigned int *)this + 13);
          v227 = v310 + 2;
          v311 = "//";
          if (v310 + 2 > *((unsigned int *)this + 12))
          {
            v311 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v465, (WTF *)(v310 + 2), (uint64_t)"//");
            v310 = *v466;
            if (v227 < v310)
            {
              __break(0xC471u);
              JUMPOUT(0x197B47060);
            }
          }
          *(_WORD *)(*v465 + v310) = *(_WORD *)v311;
        }
        *((_DWORD *)this + 13) = v227;
        if (*((_BYTE *)this + 59))
        {
          LODWORD(v197) = v227;
          goto LABEL_555;
        }
LABEL_554:
        v197 = (uint64_t)(v471 - *((_QWORD *)this + 9)) >> 1;
LABEL_555:
        *(int32x4_t *)((char *)this + 12) = vdupq_n_s32((int)v197 - 1);
        *((_DWORD *)this + 2) &= 0xFFFFFFC7;
        goto LABEL_556;
      case 0xDu:
        while (2)
        {
          v46 = *v30;
          v47 = v46 & 0xFC00;
          if (v47 == 55296)
            goto LABEL_65;
          if (v46 > 0x5C || (WTF::characterClassTable[v46] & 0x20) == 0)
          {
            if ((_DWORD)v46 == 37 || v46 >= 0x80)
LABEL_65:
              *((_BYTE *)this + 58) = 1;
            v48 = 1;
            if (v9 != 1 && v47 == 55296)
            {
              if ((v30[1] & 0xFC00) == 0xDC00)
                v48 = 2;
              else
                v48 = 1;
            }
            v9 -= v48;
            v30 += v48;
            *(_QWORD *)&v471 = v30;
            *((_QWORD *)&v471 + 1) = v9;
            if (!v9)
            {
LABEL_1205:
              v399 = (unsigned __int16 *)v470;
              v400 = (_DWORD *)((char *)this + 52);
              if ((uint64_t)((uint64_t)v30 - v470) <= -2)
                goto LABEL_1337;
              if (WTF::URLParser::takesTwoAdvancesUntilEnd<char16_t>((_WORD *)v470, (uint64_t)((uint64_t)v30 - v470) >> 1))
              {
                *(_QWORD *)&v476 = v399;
                *((_QWORD *)&v476 + 1) = *((_QWORD *)&v470 + 1);
                if (*((_QWORD *)&v470 + 1))
                {
                  v401 = *v399;
                  if (*((_QWORD *)&v470 + 1) != 1 && (v401 & 0xFC00) == 0xD800)
                  {
                    v402 = v399[1];
                    v28 = (v402 & 0xFC00) == 56320;
                    v403 = (v401 << 10) - 56613888 + v402;
                    if (v28)
                      v401 = v403;
                  }
                  if ((v401 | 0x20u) - 97 <= 0x19)
                  {
                    WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)0>(&v476);
                    if (*((_QWORD *)&v476 + 1))
                    {
                      v404 = *(unsigned __int16 *)v476;
                      if ((v404 & 0xFC00) != 0xD800 && (v404 == 124 || v404 == 58))
                      {
                        WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)0>(&v476);
                        if (!*((_QWORD *)&v476 + 1)
                          || (v405 = *(unsigned __int16 *)v476, (v405 & 0xFC00) != 0xD800)
                          && ((v405 - 47) <= 0x2D
                           && ((1 << (v405 - 47)) & 0x200000010001) != 0
                           || v405 == 35))
                        {
                          WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v399);
                          LODWORD(v476) = 47;
                          if (*((_BYTE *)this + 59))
                          {
                            v460 = *((unsigned int *)this + 13);
                            if ((_DWORD)v460 == *((_DWORD *)this + 12))
                            {
                              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
                              v400 = (_DWORD *)((char *)this + 52);
                            }
                            else
                            {
                              v400 = (_DWORD *)((char *)this + 52);
                              *(_BYTE *)(*v465 + v460) = 47;
                              ++*v466;
                            }
                          }
                          WTF::URLParser::appendWindowsDriveLetter<char16_t>((uint64_t)this, (uint64_t *)&v470);
                          if (*((_BYTE *)this + 59))
                            LODWORD(v388) = *v400;
                          else
                            v388 = ((_QWORD)v471 - *((_QWORD *)this + 9)) >> 1;
                          *((_DWORD *)this + 7) = v388;
                          *((_DWORD *)this + 8) = v388;
                          goto LABEL_1237;
                        }
                      }
                    }
                  }
                }
              }
              if (__PAIR128__(*((unint64_t *)&v470 + 1), (unint64_t)v399) == v471)
              {
                WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v399);
                LODWORD(v476) = 47;
                if (!*((_BYTE *)this + 59))
                  goto LABEL_1222;
                v442 = *((unsigned int *)this + 13);
                if ((_DWORD)v442 == *((_DWORD *)this + 12))
                {
                  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
                }
                else
                {
                  *(_BYTE *)(*v465 + v442) = 47;
                  ++*v466;
                }
                if (*((_BYTE *)this + 59))
                  LODWORD(v388) = *v466;
                else
LABEL_1222:
                  v388 = ((_QWORD)v471 - *((_QWORD *)this + 9)) >> 1;
                *(int32x4_t *)((char *)this + 12) = vdupq_n_s32((int)v388 - 1);
                *((_DWORD *)this + 2) &= 0xFFFFFFC7;
                *((_DWORD *)this + 7) = v388;
                *((_DWORD *)this + 8) = v388;
LABEL_1237:
                *((_DWORD *)this + 9) = v388;
                goto LABEL_1321;
              }
              if ((uint64_t)(v471 - (_QWORD)v399) <= -2)
                goto LABEL_1337;
              if (!WTF::URLParser::parseHostAndPort<char16_t>())
              {
LABEL_1234:
                WTF::URLParser::failure(this, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
                goto LABEL_1329;
              }
              WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, v471);
              v406 = *((unsigned int *)this + 5);
              v407 = *((unsigned __int8 *)this + 59);
              if (*((_BYTE *)this + 59))
              {
                if (*v466 < v406)
                  goto LABEL_1337;
                v400 = (_DWORD *)((char *)this + 52);
                v411 = (unsigned __int16 *)(*v465 + v406);
                v415 = (*v466 - v406);
              }
              else
              {
                v408 = *((_QWORD *)this + 8);
                if (v408 && (v409 = *(unsigned int *)(v408 + 4), v409 > v406))
                {
                  v410 = *(unsigned int *)(v408 + 16);
                  v411 = *(unsigned __int16 **)(v408 + 8);
                  v412 = (((_QWORD)v471 - *((_QWORD *)this + 9)) >> 1) - v406;
                  if ((int)v409 - (int)v406 > v412 || (v412 = v409 - v406, (_DWORD)v406))
                  {
                    v413 = (v410 >> 2) & 1;
                    v414 = v409 - v406;
                    if ((_DWORD)v413)
                    {
                      if (v414 >= v412)
                      {
                        v411 = (unsigned __int16 *)((char *)v411 + v406);
                        v415 = v412;
                        goto LABEL_1241;
                      }
                      goto LABEL_1337;
                    }
                    if (v414 < v412)
                      goto LABEL_1337;
                    v411 += v406;
                    v415 = v412;
LABEL_1260:
                    if (!WTF::URLParser::isAtLocalhost<char16_t>(v411, v415))
                    {
LABEL_1245:
                      LODWORD(v476) = 47;
                      if (v407)
                      {
LABEL_1288:
                        v390 = *((unsigned int *)this + 13);
                        if ((_DWORD)v390 == *((_DWORD *)this + 12))
                          goto LABEL_1289;
LABEL_1185:
                        *(_BYTE *)(*v465 + v390) = 47;
                        ++*v466;
                      }
LABEL_1246:
                      v397 = *((_DWORD *)this + 6) + ((*((_DWORD *)this + 2) >> 3) & 7) + 1;
                      goto LABEL_1319;
                    }
LABEL_1242:
                    *v400 = v406;
                    if (!v407)
                      v406 = ((_QWORD)v471 - *((_QWORD *)this + 9)) >> 1;
                    *((_DWORD *)this + 6) = v406;
                    *((_DWORD *)this + 2) &= 0xFFFFFFC7;
                    goto LABEL_1245;
                  }
                  v432 = v409 & 0xFFFFFFFEFFFFFFFFLL | (((v410 >> 2) & 1) << 32);
                  v415 = v432;
                  if ((v432 & 0x100000000) == 0)
                    goto LABEL_1260;
                }
                else
                {
                  v415 = 0;
                  v411 = (unsigned __int16 *)"";
                }
              }
LABEL_1241:
              if (!WTF::URLParser::isAtLocalhost<unsigned char>((unsigned __int8 *)v411, v415))
                goto LABEL_1245;
              goto LABEL_1242;
            }
            continue;
          }
          break;
        }
        v167 = (unsigned __int16 *)v470;
        if ((uint64_t)((uint64_t)v30 - v470) <= -2)
          goto LABEL_1337;
        if (WTF::URLParser::takesTwoAdvancesUntilEnd<char16_t>((_WORD *)v470, (uint64_t)((uint64_t)v30 - v470) >> 1)
          && *((_QWORD *)&v470 + 1))
        {
          v168 = *v167;
          if (*((_QWORD *)&v470 + 1) == 1)
          {
            v169 = *v167;
          }
          else
          {
            v169 = *v167;
            if ((v168 & 0xFC00) == 0xD800)
            {
              v170 = v167[1];
              v28 = (v170 & 0xFC00) == 56320;
              v169 = (v168 << 10) - 56613888 + v170;
              if (!v28)
                v169 = *v167;
            }
          }
          if ((v169 | 0x20u) - 97 <= 0x19)
          {
            if (*((_QWORD *)&v470 + 1) == 1)
            {
              v249 = 1;
            }
            else
            {
              v248 = v168 & 0xFC00;
              v249 = 1;
              if (v248 == 55296)
              {
                if ((v167[1] & 0xFC00) == 0xDC00)
                  v249 = 2;
                else
                  v249 = 1;
              }
            }
            v265 = *((_QWORD *)&v470 + 1) - v249;
            if (*((_QWORD *)&v470 + 1) != v249)
            {
              v266 = &v167[v249];
              while (1)
              {
                v268 = *v266;
                if (v265 == 1)
                {
                  v269 = *v266;
                }
                else
                {
                  v269 = *v266;
                  if ((v268 & 0xFC00) == 0xD800)
                  {
                    v270 = v266[1];
                    v28 = (v270 & 0xFC00) == 56320;
                    v269 = (v268 << 10) - 56613888 + v270;
                    if (!v28)
                      v269 = *v266;
                  }
                }
                v271 = v269 - 14;
                v272 = v269 - 11;
                if (v271 < 0xFFFFFFFB || v272 < 2)
                  break;
                if (v265 == 1)
                {
                  v267 = 1;
                }
                else
                {
                  v274 = v268 & 0xFC00;
                  v267 = 1;
                  if (v274 == 55296)
                  {
                    if ((v266[1] & 0xFC00) == 0xDC00)
                      v267 = 2;
                    else
                      v267 = 1;
                  }
                }
                v266 += v267;
                v265 -= v267;
                if (!v265)
                  goto LABEL_823;
              }
              *(_QWORD *)&v476 = v266;
              *((_QWORD *)&v476 + 1) = v265;
              if ((v268 & 0xFC00) != 0xD800 && (v268 == 124 || v268 == 58))
              {
                WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)0>(&v476);
                if (!*((_QWORD *)&v476 + 1)
                  || (v275 = *(unsigned __int16 *)v476, (v275 & 0xFC00) != 0xD800)
                  && ((v275 - 47) <= 0x2D
                    ? (v294 = ((1 << (v275 - 47)) & 0x200000010001) == 0)
                    : (v294 = 1),
                      !v294 || v275 == 35))
                {
                  WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v167);
                  LODWORD(v476) = 47;
                  if (*((_BYTE *)this + 59))
                  {
                    v370 = *((unsigned int *)this + 13);
                    if ((_DWORD)v370 == *((_DWORD *)this + 12))
                    {
                      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
                    }
                    else
                    {
                      *(_BYTE *)(*v465 + v370) = 47;
                      ++*v466;
                    }
                  }
                  WTF::URLParser::appendWindowsDriveLetter<char16_t>((uint64_t)this, (uint64_t *)&v470);
                  if (!*((_QWORD *)&v471 + 1))
                    goto LABEL_1337;
                  goto LABEL_825;
                }
              }
            }
          }
        }
LABEL_823:
        if (__PAIR128__(*((unint64_t *)&v470 + 1), (unint64_t)v167) == v471)
        {
          if (!*((_QWORD *)&v470 + 1))
            goto LABEL_1337;
LABEL_825:
          a2 = v471;
          v276 = *(unsigned __int16 *)v471;
          if ((v276 & 0xFC00) == 0xD800)
            goto LABEL_789;
          if (v276 == 63)
          {
            WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, v471);
            if (*((_BYTE *)this + 59))
            {
              v371 = *((unsigned int *)this + 13);
              v372 = v371 + 2;
              v373 = "/?";
              if (v371 + 2 > *((unsigned int *)this + 12))
              {
                v373 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v465, (WTF *)(v371 + 2), (uint64_t)"/?");
                v371 = *v466;
                if (v372 < v371)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197B47080);
                }
              }
              *(_WORD *)(*v465 + v371) = *(_WORD *)v373;
              *v466 = v372;
              v351 = *((_QWORD *)&v471 + 1);
              if (!*((_QWORD *)&v471 + 1))
                goto LABEL_1337;
            }
            else
            {
              v351 = *((_QWORD *)&v471 + 1);
              if (!*((_QWORD *)&v471 + 1))
                goto LABEL_1337;
            }
            if (v351 == 1)
            {
              v352 = 1;
            }
            else
            {
              v352 = 1;
              if ((*(_WORD *)v471 & 0xFC00) == 0xD800)
              {
                if ((*(_WORD *)(v471 + 2) & 0xFC00) == 0xDC00)
                  v352 = 2;
                else
                  v352 = 1;
              }
            }
            v355 = v351 - v352;
            v356 = (unsigned __int16 *)(v471 + 2 * v352);
            *(_QWORD *)&v471 = v356;
            *((_QWORD *)&v471 + 1) = v355;
            v357 = v467;
            if (v474)
              v357 = v356;
            v467 = v357;
            if (v474)
              v29 = 18;
            else
              v29 = 17;
            if (*((_BYTE *)this + 59))
              LODWORD(v358) = *v466;
            else
              v358 = ((uint64_t)v356 - *((_QWORD *)this + 9)) >> 1;
            v359 = v358 - 1;
            *((_DWORD *)this + 7) = v359;
            *((_DWORD *)this + 8) = v359;
          }
          else
          {
            if (v276 != 35)
              goto LABEL_789;
            WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, v471);
            if (*((_BYTE *)this + 59))
            {
              v374 = *((unsigned int *)this + 13);
              v375 = v374 + 2;
              v376 = "/#";
              if (v374 + 2 > *((unsigned int *)this + 12))
              {
                v376 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v465, (WTF *)(v374 + 2), (uint64_t)"/#");
                v374 = *v466;
                if (v375 < v374)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197B47088);
                }
              }
              *(_WORD *)(*v465 + v374) = *(_WORD *)v376;
              *v466 = v375;
              v277 = *((_QWORD *)&v471 + 1);
              if (!*((_QWORD *)&v471 + 1))
                goto LABEL_1337;
            }
            else
            {
              v277 = *((_QWORD *)&v471 + 1);
              if (!*((_QWORD *)&v471 + 1))
                goto LABEL_1337;
            }
            if (v277 == 1)
            {
              v278 = 1;
            }
            else
            {
              v278 = 1;
              if ((*(_WORD *)v471 & 0xFC00) == 0xD800)
              {
                if ((*(_WORD *)(v471 + 2) & 0xFC00) == 0xDC00)
                  v278 = 2;
                else
                  v278 = 1;
              }
            }
            v360 = v277 - v278;
            v361 = v471 + 2 * v278;
            *(_QWORD *)&v471 = v361;
            *((_QWORD *)&v471 + 1) = v360;
            if (*((_BYTE *)this + 59))
              LODWORD(v362) = *v466;
            else
              v362 = (v361 - *((_QWORD *)this + 9)) >> 1;
            v363 = v362 - 1;
            *((_DWORD *)this + 7) = v363;
            *((_DWORD *)this + 8) = v363;
            *((_DWORD *)this + 9) = v363;
            v29 = 19;
          }
          goto LABEL_790;
        }
        if ((uint64_t)(v471 - (_QWORD)v167) <= -2)
          goto LABEL_1337;
        if (!WTF::URLParser::parseHostAndPort<char16_t>())
          goto LABEL_1168;
        v279 = *((unsigned int *)this + 5);
        if (!*((_BYTE *)this + 59))
        {
          v280 = *((_QWORD *)this + 8);
          if (!v280 || (v281 = *(unsigned int *)(v280 + 4), v281 <= v279))
          {
            v287 = 0;
            v283 = "";
            goto LABEL_846;
          }
          v282 = *(unsigned int *)(v280 + 16);
          v283 = *(unsigned __int8 **)(v280 + 8);
          v284 = (((_QWORD)v471 - *((_QWORD *)this + 9)) >> 1) - v279;
          if ((int)v281 - (int)v279 > v284 || (v284 = v281 - v279, (_DWORD)v279))
          {
            v285 = (v282 >> 2) & 1;
            v286 = v281 - v279;
            if ((_DWORD)v285)
            {
              if (v286 < v284)
                goto LABEL_1337;
              v283 += v279;
              v287 = v284;
LABEL_846:
              if (!WTF::URLParser::isAtLocalhost<unsigned char>(v283, v287))
                goto LABEL_847;
LABEL_852:
              WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, v471);
              LODWORD(v289) = *((_DWORD *)this + 5);
              *((_DWORD *)this + 13) = v289;
              if (!*((_BYTE *)this + 59))
                v289 = (uint64_t)(v471 - *((_QWORD *)this + 9)) >> 1;
              *((_DWORD *)this + 6) = v289;
              *((_DWORD *)this + 2) &= 0xFFFFFFC7;
              v29 = 14;
              goto LABEL_790;
            }
            if (v286 < v284)
              goto LABEL_1337;
            v283 += 2 * v279;
            v287 = v284;
          }
          else
          {
            v288 = v281 & 0xFFFFFFFEFFFFFFFFLL | (((v282 >> 2) & 1) << 32);
            v287 = v288;
            if ((v288 & 0x100000000) != 0)
              goto LABEL_846;
          }
          if (!WTF::URLParser::isAtLocalhost<char16_t>((unsigned __int16 *)v283, v287))
          {
LABEL_847:
            v29 = 14;
            goto LABEL_790;
          }
          goto LABEL_852;
        }
        if (*v466 < v279)
          goto LABEL_1337;
        v283 = (unsigned __int8 *)(*v465 + v279);
        v287 = (*v466 - v279);
        goto LABEL_846;
      case 0xEu:
        if (v33 != 55296 && ((_DWORD)v32 == 47 || (_DWORD)v32 == 92))
          goto LABEL_179;
        WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
        LODWORD(v476) = 47;
        if (!*((_BYTE *)this + 59))
          goto LABEL_179;
        goto LABEL_723;
      case 0xFu:
        if (v33 == 55296)
          goto LABEL_312;
        if ((_DWORD)v32 == 47)
          goto LABEL_218;
        if ((_DWORD)v32 == 92 && *((_BYTE *)this + 56))
        {
          WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
LABEL_218:
          LODWORD(v476) = 47;
          if (*((_BYTE *)this + 59))
          {
            v312 = *((unsigned int *)this + 13);
            if ((_DWORD)v312 == *((_DWORD *)this + 12))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
            }
            else
            {
              *(_BYTE *)(*v465 + v312) = 47;
              ++*v466;
            }
          }
          if (!*((_QWORD *)&v471 + 1))
            goto LABEL_1337;
          if (*((_QWORD *)&v471 + 1) == 1)
          {
            v90 = 1;
          }
          else
          {
            v90 = 1;
            if ((*(_WORD *)v471 & 0xFC00) == 0xD800)
            {
              if ((*(_WORD *)(v471 + 2) & 0xFC00) == 0xDC00)
                v90 = 2;
              else
                v90 = 1;
            }
          }
          v214 = v471 + 2 * v90;
          *(_QWORD *)&v471 = v214;
          *((_QWORD *)&v471 + 1) -= v90;
          if (!*((_BYTE *)this + 59))
          {
            v78 = v214 - *((_QWORD *)this + 9);
            goto LABEL_604;
          }
          goto LABEL_931;
        }
LABEL_312:
        if (*((_BYTE *)this + 59))
        {
          v76 = v467;
          v301 = *v466;
          if (!(_DWORD)v301 || *(_BYTE *)(v301 + *v465 - 1) != 47)
            goto LABEL_607;
        }
        else
        {
          v126 = (unsigned __int16 *)*((_QWORD *)this + 9);
          v127 = (char *)v30 - (char *)v126;
          v76 = v467;
          if (v30 == v126)
            goto LABEL_607;
          v128 = *((_QWORD *)this + 8);
          if (!v128)
            goto LABEL_607;
          v129 = (v127 >> 1) - 1;
          if (*(_DWORD *)(v128 + 4) <= v129)
            goto LABEL_607;
          v130 = *(_QWORD *)(v128 + 8);
          if ((*(_BYTE *)(v128 + 16) & 4) != 0)
          {
            if (*(_BYTE *)(v130 + v129) != 47)
              goto LABEL_607;
          }
          else if (*(_WORD *)(v130 + 2 * v129) != 47)
          {
            goto LABEL_607;
          }
        }
        *(_QWORD *)&v475 = v30;
        *((_QWORD *)&v475 + 1) = v9;
        v302 = *v30;
        if ((v302 & 0xFC00) == 0xD800)
          goto LABEL_1128;
        if (v302 == 37)
        {
          WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)0>(&v475);
          if (!*((_QWORD *)&v475 + 1))
            goto LABEL_1128;
          if (*(_WORD *)v475 != 50)
            goto LABEL_1128;
          WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)0>(&v475);
          if (!*((_QWORD *)&v475 + 1))
            goto LABEL_1128;
          v346 = *(unsigned __int16 *)v475;
          if (*((_QWORD *)&v475 + 1) != 1 && (v346 & 0xFC00) == 0xD800)
          {
            v347 = *(unsigned __int16 *)(v475 + 2);
            if ((v347 & 0xFC00) == 0xDC00)
              v346 = (v346 << 10) - 56613888 + v347;
          }
          if ((v346 & 0xFFFFFFDF) != 0x45)
            goto LABEL_1128;
        }
        else if (v302 != 46)
        {
          goto LABEL_1128;
        }
        WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)0>(&v475);
        v476 = v475;
        if (!*((_QWORD *)&v475 + 1))
          goto LABEL_1128;
        v303 = *(unsigned __int16 *)v475;
        if ((v303 & 0xFC00) == 0xD800)
          goto LABEL_1128;
        if (v303 == 37)
        {
          WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)0>(&v476);
          if (!*((_QWORD *)&v476 + 1))
            goto LABEL_1128;
          if (*(_WORD *)v476 != 50)
            goto LABEL_1128;
          WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)0>(&v476);
          if (!*((_QWORD *)&v476 + 1))
            goto LABEL_1128;
          v364 = *(unsigned __int16 *)v476;
          if (*((_QWORD *)&v476 + 1) != 1 && (v364 & 0xFC00) == 0xD800)
          {
            v365 = *(unsigned __int16 *)(v476 + 2);
            if ((v365 & 0xFC00) == 0xDC00)
              v364 = (v364 << 10) - 56613888 + v365;
          }
          if ((v364 & 0xFFFFFFDF) != 0x45)
            goto LABEL_1128;
        }
        else if (v303 != 46)
        {
          goto LABEL_1128;
        }
        WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)0>(&v476);
        if (!*((_QWORD *)&v476 + 1)
          || (v304 = *(unsigned __int16 *)v476, v304 <= 0x5C)
          && (v304 & 0xFC00) != 0xD800
          && (WTF::characterClassTable[v304] & 0x20) != 0)
        {
          WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, v471);
          WTF::URLParser::consumeDoubleDotPathSegment<char16_t>((uint64_t)this, (unsigned __int16 **)&v471);
          WTF::URLParser::popPath(this);
          goto LABEL_789;
        }
LABEL_1128:
        v476 = v471;
        if (!*((_QWORD *)&v471 + 1))
          goto LABEL_1145;
        v366 = *(unsigned __int16 *)v471;
        if ((v366 & 0xFC00) == 0xD800)
          goto LABEL_1145;
        if (v366 == 37)
        {
          WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)0>(&v476);
          if (!*((_QWORD *)&v476 + 1))
            goto LABEL_1145;
          if (*(_WORD *)v476 != 50)
            goto LABEL_1145;
          WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)0>(&v476);
          if (!*((_QWORD *)&v476 + 1))
            goto LABEL_1145;
          v368 = *(unsigned __int16 *)v476;
          if (*((_QWORD *)&v476 + 1) != 1 && (v368 & 0xFC00) == 0xD800)
          {
            v369 = *(unsigned __int16 *)(v476 + 2);
            if ((v369 & 0xFC00) == 0xDC00)
              v368 = (v368 << 10) - 56613888 + v369;
          }
          if ((v368 & 0xFFFFFFDF) != 0x45)
            goto LABEL_1145;
        }
        else if (v366 != 46)
        {
          goto LABEL_1145;
        }
        WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)0>(&v476);
        if (!*((_QWORD *)&v476 + 1))
          goto LABEL_1136;
        v367 = *(unsigned __int16 *)v476;
        if (v367 > 0x5C || (v367 & 0xFC00) == 0xD800)
        {
LABEL_1145:
          v76 = v467;
          goto LABEL_607;
        }
        v76 = v467;
        if ((WTF::characterClassTable[v367] & 0x20) != 0)
        {
LABEL_1136:
          WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, v471);
          WTF::URLParser::consumeSingleDotPathSegment<char16_t>((uint64_t)this, (unsigned __int16 **)&v471);
          goto LABEL_789;
        }
LABEL_607:
        if (!*((_QWORD *)&v471 + 1))
          goto LABEL_1337;
        a2 = v471;
        v215 = *(unsigned __int16 *)v471;
        if ((v215 & 0xFC00) == 0xD800)
        {
          if (*((_QWORD *)&v471 + 1) != 1)
          {
            v216 = *(unsigned __int16 *)(v471 + 2);
            if ((v216 & 0xFC00) == 0xDC00)
              LODWORD(v215) = ((_DWORD)v215 << 10) - 56613888 + v216;
          }
          WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, v471);
LABEL_613:
          if (v215 >> 11 < 0x1B || (v215 & 0xFFFFE000) == 0xE000)
          {
            v217 = 0;
            v219 = (v215 >> 12) | 0xFFFFFFE0;
            LOBYTE(v476) = (v215 >> 6) & 0x3F | 0x80;
            v218 = 1;
            v220 = &v475;
            goto LABEL_627;
          }
          if (!((v215 - 0x10000) >> 20))
          {
            v217 = 0;
            v218 = 0;
            v219 = (v215 >> 18) | 0xFFFFFFF0;
            LOBYTE(v476) = (v215 >> 12) & 0x3F | 0x80;
            LOBYTE(v475) = (v215 >> 6) & 0x3F | 0x80;
            v220 = (__int128 *)v478;
            goto LABEL_627;
          }
          if (*((_BYTE *)this + 59))
          {
            v341 = *((unsigned int *)this + 13);
            v342 = v341 + 9;
            v343 = "%EF%BF%BD";
            if (v341 + 9 > *((unsigned int *)this + 12))
            {
              v343 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v465, (WTF *)(v341 + 9), (uint64_t)"%EF%BF%BD");
              v341 = *v466;
              if (v342 < v341)
              {
                __break(0xC471u);
                JUMPOUT(0x197B47040);
              }
            }
            v344 = *v465 + v341;
            v345 = *(_QWORD *)v343;
            *(_BYTE *)(v344 + 8) = v343[8];
            *(_QWORD *)v344 = v345;
            *v466 = v342;
          }
LABEL_649:
          if (!*((_QWORD *)&v471 + 1))
            goto LABEL_1337;
          if (*((_QWORD *)&v471 + 1) == 1)
          {
            v225 = 1;
          }
          else
          {
            v225 = 1;
            if ((*(_WORD *)v471 & 0xFC00) == 0xD800)
            {
              if ((*(_WORD *)(v471 + 2) & 0xFC00) == 0xDC00)
                v225 = 2;
              else
                v225 = 1;
            }
          }
          v9 = *((_QWORD *)&v471 + 1) - v225;
          *(_QWORD *)&v471 = v471 + 2 * v225;
          *((_QWORD *)&v471 + 1) -= v225;
          v29 = 15;
          goto LABEL_791;
        }
        if ((_DWORD)v215 == 35)
        {
          if (*((_BYTE *)this + 59))
            goto LABEL_1007;
          v190 = v471 - *((_QWORD *)this + 9);
LABEL_639:
          v112 = v190 >> 1;
LABEL_640:
          *((_DWORD *)this + 8) = v112;
          goto LABEL_641;
        }
        if ((_DWORD)v215 != 63)
        {
          if (v215 > 0x7F)
          {
            WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, v471);
            if (v215 > 0x7FF)
              goto LABEL_613;
            v218 = 0;
            v219 = (v215 >> 6) | 0xFFFFFFC0;
            v217 = 1;
            v220 = &v476;
LABEL_627:
            *(_BYTE *)v220 = v215 & 0x3F | 0x80;
            WTF::URLParser::percentEncodeByte(this, v219);
            WTF::URLParser::percentEncodeByte(this, v476);
            if ((v217 & 1) != 0)
              goto LABEL_649;
            WTF::URLParser::percentEncodeByte(this, v475);
            if ((v218 & 1) != 0)
              goto LABEL_649;
            v222 = v478[0];
          }
          else
          {
            if ((_DWORD)v215 != 127 && (WTF::characterClassTable[v215] & 2) == 0)
            {
              LODWORD(v476) = *(unsigned __int16 *)v471;
              if (*((_BYTE *)this + 59))
              {
                v224 = *((unsigned int *)this + 13);
                if ((_DWORD)v224 == *((_DWORD *)this + 12))
                {
                  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
                }
                else
                {
                  *(_BYTE *)(*v465 + v224) = v215;
                  ++*v466;
                }
              }
              goto LABEL_649;
            }
            WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, v471);
            v222 = v215;
          }
          WTF::URLParser::percentEncodeByte(this, v222);
          goto LABEL_649;
        }
        if (*((_BYTE *)this + 59))
          goto LABEL_1008;
        *((_DWORD *)this + 8) = ((_QWORD)v471 - *((_QWORD *)this + 9)) >> 1;
        v77 = *((_QWORD *)&v471 + 1);
        if (!*((_QWORD *)&v471 + 1))
          goto LABEL_1337;
        goto LABEL_621;
      case 0x10u:
        if (v33 == 55296)
        {
          if (v9 != 1)
          {
            v131 = v30[1];
            if ((v131 & 0xFC00) == 0xDC00)
              LODWORD(v32) = ((_DWORD)v32 << 10) - 56613888 + v131;
          }
          WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
          goto LABEL_323;
        }
        if ((_DWORD)v32 == 35)
        {
          if (!*((_BYTE *)this + 59))
          {
            v190 = (uint64_t)v30 - *((_QWORD *)this + 9);
            goto LABEL_639;
          }
LABEL_1007:
          LODWORD(v112) = *v466;
          goto LABEL_640;
        }
        if ((_DWORD)v32 == 47)
        {
          LODWORD(v476) = 47;
          if (*((_BYTE *)this + 59))
          {
            v337 = *((unsigned int *)this + 13);
            if ((_DWORD)v337 == *((_DWORD *)this + 12))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
            }
            else
            {
              *(_BYTE *)(*v465 + v337) = 47;
              ++*v466;
            }
          }
          if (!*((_QWORD *)&v471 + 1))
            goto LABEL_1337;
          if (*((_QWORD *)&v471 + 1) == 1)
          {
            v189 = 1;
          }
          else
          {
            v189 = 1;
            if ((*(_WORD *)v471 & 0xFC00) == 0xD800)
            {
              if ((*(_WORD *)(v471 + 2) & 0xFC00) == 0xDC00)
                v189 = 2;
              else
                v189 = 1;
            }
          }
          v238 = v471 + 2 * v189;
          *(_QWORD *)&v471 = v238;
          *((_QWORD *)&v471 + 1) -= v189;
          if (*((_BYTE *)this + 59))
            LODWORD(v239) = *v466;
          else
            v239 = (v238 - *((_QWORD *)this + 9)) >> 1;
          *((_DWORD *)this + 7) = v239;
          v29 = 16;
          goto LABEL_790;
        }
        v76 = v467;
        if ((_DWORD)v32 != 63)
        {
          if (v32 <= 0x7F)
          {
            if ((_DWORD)v32 != 127 && v32 > 0x1F)
            {
              LODWORD(v476) = *v30;
              if (*((_BYTE *)this + 59))
              {
                v338 = *((unsigned int *)this + 13);
                if ((_DWORD)v338 == *((_DWORD *)this + 12))
                {
                  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
                }
                else
                {
                  *(_BYTE *)(*v465 + v338) = v32;
                  ++*v466;
                }
              }
              goto LABEL_544;
            }
            WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
            v156 = v32;
LABEL_388:
            WTF::URLParser::percentEncodeByte(this, v156);
            goto LABEL_544;
          }
          WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
          if (v32 <= 0x7FF)
          {
            v133 = 0;
            v134 = (v32 >> 6) | 0xFFFFFFC0;
            v132 = 1;
            v135 = &v476;
            goto LABEL_385;
          }
LABEL_323:
          if (v32 >> 11 < 0x1B || (v32 & 0xFFFFE000) == 0xE000)
          {
            v132 = 0;
            v134 = (v32 >> 12) | 0xFFFFFFE0;
            LOBYTE(v476) = (v32 >> 6) & 0x3F | 0x80;
            v133 = 1;
            v135 = &v475;
          }
          else
          {
            if ((v32 - 0x10000) >> 20)
            {
              if (*((_BYTE *)this + 59))
              {
                v191 = *((unsigned int *)this + 13);
                v192 = v191 + 9;
                v193 = "%EF%BF%BD";
                if (v191 + 9 > *((unsigned int *)this + 12))
                {
                  v193 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v465, (WTF *)(v191 + 9), (uint64_t)"%EF%BF%BD");
                  v191 = *v466;
                  if (v192 < v191)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197B47028);
                  }
                }
                v194 = *v465 + v191;
                v195 = *(_QWORD *)v193;
                *(_BYTE *)(v194 + 8) = v193[8];
                *(_QWORD *)v194 = v195;
                *v466 = v192;
              }
              goto LABEL_544;
            }
            v132 = 0;
            v133 = 0;
            v134 = (v32 >> 18) | 0xFFFFFFF0;
            LOBYTE(v476) = (v32 >> 12) & 0x3F | 0x80;
            LOBYTE(v475) = (v32 >> 6) & 0x3F | 0x80;
            v135 = (__int128 *)v478;
          }
LABEL_385:
          *(_BYTE *)v135 = v32 & 0x3F | 0x80;
          WTF::URLParser::percentEncodeByte(this, v134);
          WTF::URLParser::percentEncodeByte(this, v476);
          if ((v132 & 1) == 0)
          {
            WTF::URLParser::percentEncodeByte(this, v475);
            if ((v133 & 1) == 0)
            {
              v156 = v478[0];
              goto LABEL_388;
            }
          }
LABEL_544:
          if (!*((_QWORD *)&v471 + 1))
            goto LABEL_1337;
          if (*((_QWORD *)&v471 + 1) == 1)
          {
            v196 = 1;
          }
          else
          {
            v196 = 1;
            if ((*(_WORD *)v471 & 0xFC00) == 0xD800)
            {
              if ((*(_WORD *)(v471 + 2) & 0xFC00) == 0xDC00)
                v196 = 2;
              else
                v196 = 1;
            }
          }
          v9 = *((_QWORD *)&v471 + 1) - v196;
          *(_QWORD *)&v471 = v471 + 2 * v196;
          *((_QWORD *)&v471 + 1) -= v196;
          v29 = 16;
          goto LABEL_791;
        }
        if (!*((_BYTE *)this + 59))
        {
          *((_DWORD *)this + 8) = ((unint64_t)v30 - *((_QWORD *)this + 9)) >> 1;
          v77 = *((_QWORD *)&v471 + 1);
          if (!*((_QWORD *)&v471 + 1))
            goto LABEL_1337;
          goto LABEL_621;
        }
LABEL_1008:
        v324 = *((_DWORD *)this + 12);
        v323 = *((unsigned int *)this + 13);
        *((_DWORD *)this + 8) = v323;
        LODWORD(v476) = 63;
        if ((_DWORD)v323 == v324)
          goto LABEL_1016;
        v325 = *v465;
        goto LABEL_1055;
      case 0x11u:
        if (v33 == 55296)
        {
          if (v9 != 1)
          {
            v143 = v30[1];
            if ((v143 & 0xFC00) == 0xDC00)
              LODWORD(v32) = ((_DWORD)v32 << 10) - 56613888 + v143;
          }
          WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
        }
        else
        {
          if ((_DWORD)v32 == 35)
          {
            if (*((_BYTE *)this + 59))
              goto LABEL_984;
            v111 = (uint64_t)v30 - *((_QWORD *)this + 9);
LABEL_262:
            v112 = v111 >> 1;
LABEL_641:
            *((_DWORD *)this + 9) = v112;
            v29 = 19;
            goto LABEL_790;
          }
          if (v32 <= 0x7F)
          {
            if ((WTF::characterClassTable[v32] & 0x10) != 0 || *v30 == 39 && *((_BYTE *)this + 56))
            {
              WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
              WTF::URLParser::percentEncodeByte(this, v32);
              v164 = *((_QWORD *)&v471 + 1);
              if (!*((_QWORD *)&v471 + 1))
                goto LABEL_1337;
              goto LABEL_664;
            }
            LODWORD(v476) = *v30;
            if (*((_BYTE *)this + 59))
            {
              v163 = *((unsigned int *)this + 13);
              if ((_DWORD)v163 == *((_DWORD *)this + 12))
                goto LABEL_416;
              *(_BYTE *)(*v465 + v163) = v32;
LABEL_1047:
              ++*v466;
              v164 = *((_QWORD *)&v471 + 1);
              if (!*((_QWORD *)&v471 + 1))
                goto LABEL_1337;
              goto LABEL_664;
            }
            goto LABEL_663;
          }
          WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
          if (v32 <= 0x7FF)
          {
            v145 = 0;
            v146 = (v32 >> 6) | 0xFFFFFFC0;
            v144 = 1;
            v147 = (unsigned __int8 *)&v475;
            goto LABEL_390;
          }
        }
        if (v32 >> 11 < 0x1B || (v32 & 0xFFFFE000) == 0xE000)
        {
          v144 = 0;
          v146 = (v32 >> 12) | 0xFFFFFFE0;
          LOBYTE(v475) = (v32 >> 6) & 0x3F | 0x80;
          v145 = 1;
          v147 = v478;
        }
        else
        {
          if ((v32 - 0x10000) >> 20)
          {
            if (*((_BYTE *)this + 59))
            {
              v204 = *((unsigned int *)this + 13);
              v205 = v204 + 9;
              v206 = "%EF%BF%BD";
              if (v204 + 9 > *((unsigned int *)this + 12))
              {
                v206 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v465, (WTF *)(v204 + 9), (uint64_t)"%EF%BF%BD");
                v204 = *v466;
                if (v205 < v204)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197B47030);
                }
              }
              v207 = *v465 + v204;
              v208 = *(_QWORD *)v206;
              *(_BYTE *)(v207 + 8) = v206[8];
              *(_QWORD *)v207 = v208;
              *v466 = v205;
              v164 = *((_QWORD *)&v471 + 1);
              if (!*((_QWORD *)&v471 + 1))
                goto LABEL_1337;
LABEL_664:
              if (v164 == 1)
              {
                v229 = 1;
              }
              else
              {
                v229 = 1;
                if ((*(_WORD *)v471 & 0xFC00) == 0xD800)
                {
                  if ((*(_WORD *)(v471 + 2) & 0xFC00) == 0xDC00)
                    v229 = 2;
                  else
                    v229 = 1;
                }
              }
              v9 = v164 - v229;
              *(_QWORD *)&v471 = v471 + 2 * v229;
              *((_QWORD *)&v471 + 1) = v164 - v229;
              v29 = 17;
              goto LABEL_791;
            }
            goto LABEL_663;
          }
          v144 = 0;
          v145 = 0;
          v146 = (v32 >> 18) | 0xFFFFFFF0;
          LOBYTE(v475) = (v32 >> 12) & 0x3F | 0x80;
          v478[0] = (v32 >> 6) & 0x3F | 0x80;
          v147 = &v477;
        }
LABEL_390:
        *v147 = v32 & 0x3F | 0x80;
        if ((WTF::characterClassTable[v146] & 0x10) != 0)
        {
          WTF::URLParser::percentEncodeByte(this, v146);
        }
        else
        {
          LODWORD(v476) = v146;
          if (*((_BYTE *)this + 59))
          {
            v157 = *((unsigned int *)this + 13);
            if ((_DWORD)v157 == *((_DWORD *)this + 12))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
              a2 = v475;
              if ((WTF::characterClassTable[v475] & 0x10) != 0)
                goto LABEL_473;
            }
            else
            {
              *(_BYTE *)(*v465 + v157) = v146;
              ++*v466;
              a2 = v475;
              if ((WTF::characterClassTable[v475] & 0x10) != 0)
                goto LABEL_473;
            }
LABEL_471:
            if ((_DWORD)a2 != 39 || !*((_BYTE *)this + 56))
            {
              LODWORD(v476) = a2;
              if (*((_BYTE *)this + 59))
              {
                v340 = *((unsigned int *)this + 13);
                if ((_DWORD)v340 == *((_DWORD *)this + 12))
                {
                  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
                }
                else
                {
                  *(_BYTE *)(*v465 + v340) = a2;
                  ++*v466;
                }
              }
              goto LABEL_596;
            }
LABEL_473:
            WTF::URLParser::percentEncodeByte(this, a2);
LABEL_596:
            if ((v144 & 1) == 0)
            {
              a2 = v478[0];
              if ((WTF::characterClassTable[v478[0]] & 0x10) != 0 || v478[0] == 39 && *((_BYTE *)this + 56))
              {
                WTF::URLParser::percentEncodeByte(this, v478[0]);
              }
              else
              {
                LODWORD(v476) = v478[0];
                if (*((_BYTE *)this + 59))
                {
                  v350 = *((unsigned int *)this + 13);
                  if ((_DWORD)v350 == *((_DWORD *)this + 12))
                  {
                    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
                  }
                  else
                  {
                    *(_BYTE *)(*v465 + v350) = v478[0];
                    ++*v466;
                  }
                }
              }
              if ((v145 & 1) == 0)
              {
                a2 = v477;
                if ((WTF::characterClassTable[v477] & 0x10) != 0 || v477 == 39 && *((_BYTE *)this + 56))
                {
                  WTF::URLParser::percentEncodeByte(this, v477);
                  v164 = *((_QWORD *)&v471 + 1);
                  if (!*((_QWORD *)&v471 + 1))
                    goto LABEL_1337;
                  goto LABEL_664;
                }
                LODWORD(v476) = v477;
                if (*((_BYTE *)this + 59))
                {
                  v240 = *((unsigned int *)this + 13);
                  if ((_DWORD)v240 == *((_DWORD *)this + 12))
                  {
LABEL_416:
                    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
                    v164 = *((_QWORD *)&v471 + 1);
                    if (!*((_QWORD *)&v471 + 1))
                      goto LABEL_1337;
                    goto LABEL_664;
                  }
                  *(_BYTE *)(*v465 + v240) = v477;
                  goto LABEL_1047;
                }
              }
            }
LABEL_663:
            v164 = *((_QWORD *)&v471 + 1);
            if (!*((_QWORD *)&v471 + 1))
              goto LABEL_1337;
            goto LABEL_664;
          }
        }
        a2 = v475;
        if ((WTF::characterClassTable[v475] & 0x10) != 0)
          goto LABEL_473;
        goto LABEL_471;
      case 0x12u:
LABEL_121:
        v57 = (unsigned __int16)v32;
        if ((v32 & 0xFC00) == 0xD800)
        {
          if (v9 == 1 || (v58 = v30[1], (v58 & 0xFC00) != 0xDC00))
          {
LABEL_139:
            LOWORD(v476) = v32;
            v64 = HIDWORD(v473);
            if (HIDWORD(v473) == (_DWORD)v473)
            {
              v65 = (_WORD *)WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v472, HIDWORD(v473) + 1, (unint64_t)&v476);
              v64 = HIDWORD(v473);
              *((_WORD *)v472 + HIDWORD(v473)) = *v65;
            }
            else
            {
              *((_WORD *)v472 + HIDWORD(v473)) = v32;
            }
            HIDWORD(v473) = v64 + 1;
          }
          else
          {
            v59 = HIDWORD(v473) + 2;
            if (v59 > v473)
            {
              v463 = HIDWORD(v473);
              v60 = v473 + ((unint64_t)v473 >> 2);
              if (v60 >= 0x10)
                v61 = v60 + 1;
              else
                v61 = 16;
              if (v61 <= v59)
                v62 = HIDWORD(v473) + 2;
              else
                v62 = v61;
              if (v62 >> 31)
              {
                __break(0xC471u);
                JUMPOUT(0x197B47018);
              }
              v462 = v472;
              v63 = (WTF *)WTF::fastMalloc((WTF *)(2 * v62));
              LODWORD(v473) = v62;
              v472 = v63;
              memcpy(v63, v462, 2 * v463);
              if (v462)
              {
                if (v472 == v462)
                {
                  v472 = 0;
                  LODWORD(v473) = 0;
                }
                WTF::fastFree((unint64_t)v462, (void *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
              }
            }
            if (v59 < HIDWORD(v473))
            {
              __break(0xC471u);
              JUMPOUT(0x197B47020);
            }
            *(_DWORD *)((char *)v472 + 2 * HIDWORD(v473)) = (unsigned __int16)(((v58
                                                                                             + (v57 << 10)
                                                                                             + 10494976) >> 10)
                                                                             - 10304) | ((v58 & 0x3FF | 0xDC00) << 16);
            HIDWORD(v473) = v59;
          }
          v66 = *((_QWORD *)&v471 + 1);
          v67 = v467;
          if (!*((_QWORD *)&v471 + 1))
            goto LABEL_1337;
          v68 = (_WORD *)v471;
          if (*((_QWORD *)&v471 + 1) != 1)
          {
            while (1)
            {
              v69 = 1;
              if ((*v68 & 0xFC00) == 0xD800)
              {
                if ((v68[1] & 0xFC00) == 0xDC00)
                  v69 = 2;
                else
                  v69 = 1;
              }
              while (1)
              {
LABEL_149:
                v9 = v66 - v69;
                v30 = &v68[v69];
                *(_QWORD *)&v471 = v30;
                *((_QWORD *)&v471 + 1) = v66 - v69;
                if (v66 == v69)
                {
LABEL_1201:
                  if ((char *)v30 - (char *)v67 > -2)
                  {
                    WTF::URLParser::encodeNonUTF8Query<char16_t>((uint64_t)this, (uint64_t)v472, HIDWORD(v473), (void (***)(WTF **__return_ptr, _QWORD, uint64_t, _QWORD))v474, v67, v30 - v67);
                    if (*((_BYTE *)this + 59))
                      LODWORD(v388) = *v466;
                    else
LABEL_1236:
                      v388 = ((_QWORD)v471 - *((_QWORD *)this + 9)) >> 1;
                    goto LABEL_1237;
                  }
                  goto LABEL_1337;
                }
                LODWORD(v32) = *v30;
                if (v9 == 1)
                {
                  if ((v32 - 14) < 0xFFFFFFFB || (v32 - 11) < 2)
                    goto LABEL_121;
                }
                else
                {
                  v70 = *v30;
                  if ((v32 & 0xFC00) == 0xD800)
                  {
                    v71 = v30[1];
                    v28 = (v71 & 0xFC00) == 56320;
                    v70 = ((_DWORD)v32 << 10) - 56613888 + v71;
                    if (!v28)
                      v70 = *v30;
                  }
                  v72 = v70 - 14;
                  v73 = v70 - 11;
                  if (v72 < 0xFFFFFFFB || v73 < 2)
                    goto LABEL_121;
                }
                WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v467);
                v66 = *((_QWORD *)&v471 + 1);
                if (!*((_QWORD *)&v471 + 1))
                  goto LABEL_1337;
                v68 = (_WORD *)v471;
                if (*((_QWORD *)&v471 + 1) != 1)
                  break;
                v69 = 1;
              }
            }
          }
          v69 = 1;
          goto LABEL_149;
        }
        if ((unsigned __int16)v32 != 35)
          goto LABEL_139;
        a5 = v467;
        if ((char *)v30 - (char *)v467 <= -2)
          goto LABEL_1337;
        WTF::URLParser::encodeNonUTF8Query<char16_t>((uint64_t)this, (uint64_t)v472, HIDWORD(v473), (void (***)(WTF **__return_ptr, _QWORD, uint64_t, _QWORD))v474, v467, v30 - v467);
        if (!*((_BYTE *)this + 59))
        {
          v111 = v471 - *((_QWORD *)this + 9);
          goto LABEL_262;
        }
LABEL_984:
        LODWORD(v112) = *v466;
        goto LABEL_641;
      case 0x13u:
        if (v33 == 55296)
        {
          if (v9 != 1)
          {
            v149 = v30[1];
            if ((v149 & 0xFC00) == 0xDC00)
              LODWORD(v32) = ((_DWORD)v32 << 10) - 56613888 + v149;
          }
          WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
        }
        else
        {
          if (v32 <= 0x7F)
          {
            if ((_DWORD)v32 != 96
              && (_DWORD)v32 != 127
              && ((_DWORD)v32 == 35 || (WTF::characterClassTable[v32] & 0x10) == 0))
            {
              LODWORD(v476) = *v30;
              if (*((_BYTE *)this + 59))
              {
                v178 = *((unsigned int *)this + 13);
                if ((_DWORD)v178 == *((_DWORD *)this + 12))
                {
LABEL_936:
                  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v465, &v476);
                }
                else
                {
                  *(_BYTE *)(*v465 + v178) = v32;
                  ++*v466;
                }
              }
              goto LABEL_458;
            }
            WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
            v121 = v32;
LABEL_422:
            WTF::URLParser::percentEncodeByte(this, v121);
            goto LABEL_458;
          }
          WTF::URLParser::syntaxViolation<char16_t>((uint64_t)this, (uint64_t)v30);
          if (v32 <= 0x7FF)
          {
            v151 = 0;
            v152 = (v32 >> 6) | 0xFFFFFFC0;
            v150 = 1;
            v153 = &v476;
            goto LABEL_419;
          }
        }
        if (v32 >> 11 < 0x1B || (v32 & 0xFFFFE000) == 0xE000)
        {
          v150 = 0;
          v152 = (v32 >> 12) | 0xFFFFFFE0;
          LOBYTE(v476) = (v32 >> 6) & 0x3F | 0x80;
          v151 = 1;
          v153 = &v475;
        }
        else
        {
          if ((v32 - 0x10000) >> 20)
          {
            if (*((_BYTE *)this + 59))
            {
              v209 = *((unsigned int *)this + 13);
              v210 = v209 + 9;
              v211 = "%EF%BF%BD";
              if (v209 + 9 > *((unsigned int *)this + 12))
              {
                v211 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v465, (WTF *)(v209 + 9), (uint64_t)"%EF%BF%BD");
                v209 = *v466;
                if (v210 < v209)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197B47038);
                }
              }
              v212 = *v465 + v209;
              v213 = *(_QWORD *)v211;
              *(_BYTE *)(v212 + 8) = v211[8];
              *(_QWORD *)v212 = v213;
              *v466 = v210;
            }
            goto LABEL_458;
          }
          v150 = 0;
          v151 = 0;
          v152 = (v32 >> 18) | 0xFFFFFFF0;
          LOBYTE(v476) = (v32 >> 12) & 0x3F | 0x80;
          LOBYTE(v475) = (v32 >> 6) & 0x3F | 0x80;
          v153 = (__int128 *)v478;
        }
LABEL_419:
        *(_BYTE *)v153 = v32 & 0x3F | 0x80;
        WTF::URLParser::percentEncodeByte(this, v152);
        WTF::URLParser::percentEncodeByte(this, v476);
        if ((v150 & 1) == 0)
        {
          WTF::URLParser::percentEncodeByte(this, v475);
          if ((v151 & 1) == 0)
          {
            v121 = v478[0];
            goto LABEL_422;
          }
        }
LABEL_458:
        v172 = *((_QWORD *)&v471 + 1);
        if (!*((_QWORD *)&v471 + 1))
          goto LABEL_1337;
        goto LABEL_459;
      default:
        goto LABEL_790;
    }
  }
}

void WTF::URLParser::addNonSpecialDotSlash(WTF::URLParser *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int8x16_t *v6;
  unint64_t v7;
  unint64_t v8;
  int8x16_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  char v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v10 = 0x100000000;
    v9 = (int8x16_t *)"";
LABEL_17:
    LODWORD(v11) = 0;
    v13 = 0x100000000;
    v6 = (int8x16_t *)"";
    goto LABEL_22;
  }
  v3 = *(unsigned int *)(v2 + 4);
  v4 = ((unint64_t)*(unsigned int *)(v2 + 16) >> 2) & 1;
  v5 = *((_DWORD *)this + 6) + ((*((_DWORD *)this + 2) >> 3) & 7u) + 1;
  v6 = *(int8x16_t **)(v2 + 8);
  v7 = (v4 << 32) | v5;
  if (v3 <= v5)
    v7 = v3 | (v4 << 32);
  v8 = v3 | (v4 << 32);
  if ((_DWORD)v3)
  {
    v8 = v3 | (v4 << 32);
    v9 = v6;
  }
  else
  {
    v9 = (int8x16_t *)"";
  }
  if ((_DWORD)v3)
    v10 = v7;
  else
    v10 = 0x100000000;
  v11 = (v8 - v5);
  if (v8 <= v5)
    goto LABEL_17;
  if (*((_DWORD *)this + 6) + ((*((_DWORD *)this + 2) >> 3) & 7) == -1)
  {
    LODWORD(v11) = v8;
    v13 = v8;
    if ((v8 & 0x80000000) != 0)
      goto LABEL_37;
    goto LABEL_22;
  }
  v12 = v8 - (unint64_t)v5;
  if ((v8 & 0x100000000) == 0)
  {
    if (v12 >= v11)
    {
      v6 = (int8x16_t *)((char *)v6 + 2 * v5);
      v13 = (v8 - v5);
      if ((v11 & 0x80000000) == 0)
        goto LABEL_22;
LABEL_37:
      v50 = 0;
      goto LABEL_38;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v12 < v11)
    goto LABEL_36;
  v6 = (int8x16_t *)((char *)v6 + v5);
  v11 |= 0x100000000uLL;
  v13 = v11;
  if ((v11 & 0x80000000) != 0)
    goto LABEL_37;
LABEL_22:
  v14 = __OFADD__((_DWORD)v11, 2);
  v15 = v11 + 2;
  v16 = v14;
  if ((v10 & 0x80000000) != 0 || (v16 & 1) != 0 || __OFADD__((_DWORD)v10, v15))
    goto LABEL_37;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>>((v10 + v15), HIDWORD(v10) & HIDWORD(v13), v9, v10, "./", 2u, v6, v13, (int **)&v50);
  v24 = v50;
  if (v50)
  {
    v50 = 0;
    v25 = *(WTF::StringImpl **)this;
    *(_QWORD *)this = v24;
    if (v25)
    {
      v26 = *(_DWORD *)v25 - 2;
      if (*(_DWORD *)v25 != 2)
      {
LABEL_33:
        *(_DWORD *)v25 = v26;
        goto LABEL_34;
      }
      WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      v25 = v50;
      v50 = 0;
      if (v25)
      {
        v26 = *(_DWORD *)v25 - 2;
        if (*(_DWORD *)v25 == 2)
        {
          WTF::StringImpl::~StringImpl(v25, v35, v36, v37, v38, v39, v40, v41);
          WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
          goto LABEL_34;
        }
        goto LABEL_33;
      }
    }
LABEL_34:
    *(int32x2_t *)((char *)this + 28) = vadd_s32(*(int32x2_t *)((char *)this + 28), (int32x2_t)0x200000002);
    *((_DWORD *)this + 9) += 2;
    return;
  }
LABEL_38:
  __break(0xC471u);
}

void WTF::URLParser::serializeIPv4(WTF::URLParser *this, unsigned int a2)
{
  unsigned int v2;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;

  v2 = a2;
  v4 = 0;
  v5 = HIBYTE(a2);
  do
  {
    v6 = v5;
    *((_BYTE *)&v30 + v4-- + 3) = (v5 % 0xAu) | 0x30;
    LOBYTE(v5) = v5 / 0xAu;
  }
  while (v6 > 9);
  if (!*((_BYTE *)this + 59))
    goto LABEL_4;
  if (!v4)
  {
    v30 = 46;
    LODWORD(v17) = *((_DWORD *)this + 13);
LABEL_38:
    if ((_DWORD)v17 == *((_DWORD *)this + 12))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)this + 40, &v30);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)this + 5) + v17) = 46;
      ++*((_DWORD *)this + 13);
    }
    goto LABEL_4;
  }
  v15 = (char *)&v30 + v4 + 4;
  v16 = *((unsigned int *)this + 13);
  v17 = v16 - v4;
  if (v16 - v4 > *((unsigned int *)this + 12))
  {
    v15 = (char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)this + 40, (WTF *)(v16 - v4), (uint64_t)&v30 + v4 + 4);
    v16 = *((unsigned int *)this + 13);
  }
  if (v17 < v16)
    goto LABEL_52;
  memcpy((void *)(*((_QWORD *)this + 5) + v16), v15, -v4);
  *((_DWORD *)this + 13) = v17;
  v18 = *((unsigned __int8 *)this + 59);
  v30 = 46;
  if (v18)
    goto LABEL_38;
LABEL_4:
  v7 = 0;
  v8 = HIWORD(v2);
  do
  {
    v9 = v8;
    *((_BYTE *)&v30 + v7-- + 3) = (v8 % 0xAu) | 0x30;
    LOBYTE(v8) = v8 / 0xAu;
  }
  while (v9 > 9);
  if (!*((_BYTE *)this + 59))
    goto LABEL_7;
  if (!v7)
  {
    v30 = 46;
    LODWORD(v21) = *((_DWORD *)this + 13);
LABEL_42:
    if ((_DWORD)v21 == *((_DWORD *)this + 12))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)this + 40, &v30);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)this + 5) + v21) = 46;
      ++*((_DWORD *)this + 13);
    }
    goto LABEL_7;
  }
  v19 = (char *)&v30 + v7 + 4;
  v20 = *((unsigned int *)this + 13);
  v21 = v20 - v7;
  if (v20 - v7 > *((unsigned int *)this + 12))
  {
    v19 = (char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)this + 40, (WTF *)(v20 - v7), (uint64_t)&v30 + v7 + 4);
    v20 = *((unsigned int *)this + 13);
  }
  if (v21 < v20)
  {
    __break(0xC471u);
    JUMPOUT(0x197B476FCLL);
  }
  memcpy((void *)(*((_QWORD *)this + 5) + v20), v19, -v7);
  *((_DWORD *)this + 13) = v21;
  v22 = *((unsigned __int8 *)this + 59);
  v30 = 46;
  if (v22)
    goto LABEL_42;
LABEL_7:
  v10 = 0;
  v11 = v2 >> 8;
  do
  {
    v12 = v11;
    *((_BYTE *)&v30 + v10-- + 3) = (v11 % 0xAu) | 0x30;
    LOBYTE(v11) = v11 / 0xAu;
  }
  while (v12 > 9);
  if (!*((_BYTE *)this + 59))
    goto LABEL_10;
  if (!v10)
  {
    v30 = 46;
    LODWORD(v25) = *((_DWORD *)this + 13);
LABEL_46:
    if ((_DWORD)v25 == *((_DWORD *)this + 12))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)this + 40, &v30);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)this + 5) + v25) = 46;
      ++*((_DWORD *)this + 13);
    }
    goto LABEL_10;
  }
  v23 = (char *)&v30 + v10 + 4;
  v24 = *((unsigned int *)this + 13);
  v25 = v24 - v10;
  if (v24 - v10 > *((unsigned int *)this + 12))
  {
    v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)this + 40, (WTF *)(v24 - v10), (uint64_t)&v30 + v10 + 4);
    v24 = *((unsigned int *)this + 13);
  }
  if (v25 < v24)
  {
    __break(0xC471u);
    JUMPOUT(0x197B47704);
  }
  memcpy((void *)(*((_QWORD *)this + 5) + v24), v23, -v10);
  *((_DWORD *)this + 13) = v25;
  v26 = *((unsigned __int8 *)this + 59);
  v30 = 46;
  if (v26)
    goto LABEL_46;
LABEL_10:
  v13 = 0;
  do
  {
    v14 = v2;
    *((_BYTE *)&v30 + v13-- + 3) = (v2 % 0xAu) | 0x30;
    LOBYTE(v2) = v2 / 0xAu;
  }
  while (v14 > 9);
  if (*((_BYTE *)this + 59) && v13)
  {
    v27 = (char *)&v30 + v13 + 4;
    v28 = *((unsigned int *)this + 13);
    v29 = v28;
    if (v28 - v13 > *((unsigned int *)this + 12))
    {
      v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)this + 40, (WTF *)(v28 - v13), (uint64_t)&v30 + v13 + 4);
      v29 = *((unsigned int *)this + 13);
    }
    if (v28 - v13 >= v29)
    {
      memcpy((void *)(*((_QWORD *)this + 5) + v29), v27, -v13);
      *((_DWORD *)this + 13) = v28 - v13;
      return;
    }
LABEL_52:
    __break(0xC471u);
    JUMPOUT(0x197B476F4);
  }
}

void WTF::URLParser::serializeIPv6Piece(WTF::URLParser *this, unsigned int a2)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  if (a2 < 0x1000)
  {
    v6 = (a2 >> 8) & 0xF;
    if (!v6)
    {
      v9 = a2 >> 4;
      if (!(a2 >> 4))
        goto LABEL_17;
      goto LABEL_13;
    }
  }
  else
  {
    if (a2 >> 12 >= 0xA)
      v4 = 87;
    else
      v4 = 48;
    v5 = v4 + (a2 >> 12);
    v18 = v5;
    if (*((_BYTE *)this + 59))
    {
      v17 = *((unsigned int *)this + 13);
      if ((_DWORD)v17 != *((_DWORD *)this + 12))
      {
        *(_BYTE *)(*((_QWORD *)this + 5) + v17) = v5;
        ++*((_DWORD *)this + 13);
        v6 = (a2 >> 8) & 0xF;
        goto LABEL_8;
      }
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)this + 40, &v18);
    }
    v6 = (a2 >> 8) & 0xF;
  }
LABEL_8:
  if (v6 >= 0xA)
    v7 = 87;
  else
    v7 = 48;
  v8 = v7 + v6;
  v18 = v8;
  if (*((_BYTE *)this + 59))
  {
    v16 = *((unsigned int *)this + 13);
    if ((_DWORD)v16 == *((_DWORD *)this + 12))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)this + 40, &v18);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)this + 5) + v16) = v8;
      ++*((_DWORD *)this + 13);
    }
  }
  v9 = a2 >> 4;
LABEL_13:
  if (v9 >= 0xA)
    v10 = 87;
  else
    v10 = 48;
  v11 = v10 + v9;
  v18 = v11;
  if (*((_BYTE *)this + 59))
  {
    v15 = *((unsigned int *)this + 13);
    if ((_DWORD)v15 == *((_DWORD *)this + 12))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)this + 40, &v18);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)this + 5) + v15) = v11;
      ++*((_DWORD *)this + 13);
    }
  }
LABEL_17:
  if ((a2 & 0xF) >= 0xA)
    v12 = 87;
  else
    v12 = 48;
  v13 = v12 + (a2 & 0xF);
  v18 = v12 + (a2 & 0xF);
  if (*((_BYTE *)this + 59))
  {
    v14 = *((unsigned int *)this + 13);
    if ((_DWORD)v14 == *((_DWORD *)this + 12))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)this + 40, &v18);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)this + 5) + v14) = v13;
      ++*((_DWORD *)this + 13);
    }
  }
}

void WTF::URLParser::serializeIPv6(WTF::URLParser *this, unint64_t a2, unint64_t a3)
{
  unsigned __int16 v3;
  unsigned __int16 v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _QWORD v55[2];
  int v56;

  v3 = a3;
  v4 = a2;
  v55[0] = a2;
  v55[1] = a3;
  v56 = 91;
  v6 = a2 >> 16;
  v7 = HIDWORD(a2);
  v8 = HIWORD(a2);
  v9 = a3 >> 16;
  v10 = HIDWORD(a3);
  v11 = HIWORD(a3);
  if (*((_BYTE *)this + 59))
  {
    v42 = *((unsigned int *)this + 13);
    if ((_DWORD)v42 == *((_DWORD *)this + 12))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)this + 40, &v56);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)this + 5) + v42) = 91;
      ++*((_DWORD *)this + 13);
    }
  }
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  do
  {
    while (1)
    {
      v20 = v13;
      if (!*((_WORD *)v55 + v13))
      {
        v20 = v13 + 1;
        if (v13 != 7 && !*((_WORD *)v55 + v20))
        {
          v20 = v13 + 2;
          if (v13 != 6 && !*((_WORD *)v55 + v20))
          {
            v20 = v13 + 3;
            if (v13 != 5 && !*((_WORD *)v55 + v20))
            {
              v20 = v13 + 4;
              if (v13 != 4 && !*((_WORD *)v55 + v20))
              {
                v20 = v13 + 5;
                if (v13 != 3 && !*((_WORD *)v55 + v20))
                {
                  v20 = v13 + 6;
                  if (v13 != 2 && !*((_WORD *)v55 + v20))
                  {
                    v20 = v13 + 7;
                    if (v13 != 1 && !*((_WORD *)v55 + v20))
                      v20 = 8;
                  }
                }
              }
            }
          }
        }
      }
      v16 = v20 - v13;
      if (v20 != v13)
        break;
      if ((unint64_t)++v13 >= 8)
        goto LABEL_35;
    }
    if (v14)
      v17 = v12 >= v16;
    else
      v17 = 0;
    if (!v17)
    {
      v19 = v20 - v13;
    }
    else
    {
      LODWORD(v13) = v15;
      v19 = v12;
    }
    if (v16 != 1)
    {
      v15 = v13;
      v14 = 1;
      v12 = v19;
    }
    v13 = v20 + 1;
  }
  while ((unint64_t)(v20 + 1) < 8);
LABEL_35:
  v54 = (char *)this + 40;
  if (!v14)
    goto LABEL_65;
  v21 = v15;
  if (!(_BYTE)v15)
  {
    v31 = 0;
    v32 = v15 + 1;
    v33 = v15 + 2;
    v34 = v15 + 3;
    v35 = v15 + 4;
    v36 = v15 + 5;
    v51 = v15 + 7;
    v53 = v15 + 6;
    while (1)
    {
      if (v31 == v21)
      {
        if (*((_BYTE *)this + 59))
        {
          v39 = *((unsigned int *)this + 13);
          v40 = v39 + 2;
          v41 = "::";
          if (v39 + 2 > *((unsigned int *)this + 12))
          {
            v41 = (const char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v54, (WTF *)(v39 + 2), (uint64_t)"::");
            v39 = *((unsigned int *)this + 13);
            if (v40 < v39)
            {
              __break(0xC471u);
              return;
            }
          }
          *(_WORD *)(*((_QWORD *)this + 5) + v39) = *(_WORD *)v41;
          *((_DWORD *)this + 13) = v40;
          v37 = *((unsigned __int16 *)v55 + v21);
          v31 = v21;
          if (*((_WORD *)v55 + v21))
            goto LABEL_95;
LABEL_79:
          if (v21 == 7)
            goto LABEL_73;
          v37 = *((unsigned __int16 *)v55 + v32);
          v31 = v21 + 1;
          if (!*((_WORD *)v55 + v32))
          {
            if (v21 == 6)
              goto LABEL_73;
            v37 = *((unsigned __int16 *)v55 + v33);
            v31 = v21 + 2;
            if (!*((_WORD *)v55 + v33))
            {
              if (v21 == 5)
                goto LABEL_73;
              v37 = *((unsigned __int16 *)v55 + v34);
              v31 = v21 + 3;
              if (!*((_WORD *)v55 + v34))
              {
                if (v21 == 4)
                  goto LABEL_73;
                v37 = *((unsigned __int16 *)v55 + v35);
                v31 = v21 + 4;
                if (!*((_WORD *)v55 + v35))
                {
                  if (v21 == 3)
                    goto LABEL_73;
                  v37 = *((unsigned __int16 *)v55 + v36);
                  v31 = v21 + 5;
                  if (!*((_WORD *)v55 + v36))
                  {
                    if (v21 == 2)
                      goto LABEL_73;
                    v31 = v21 + 6;
                    v37 = *((unsigned __int16 *)v55 + v53);
                    if (!*((_WORD *)v55 + v53))
                    {
                      if (v21 == 1)
                        goto LABEL_73;
                      v31 = v21 + 7;
                      v37 = *((unsigned __int16 *)v55 + v51);
                      if (!*((_WORD *)v55 + v51))
                        goto LABEL_73;
                    }
                  }
                }
              }
            }
          }
          goto LABEL_95;
        }
        v37 = *((unsigned __int16 *)v55 + v21);
        v31 = v21;
        if (!*((_WORD *)v55 + v21))
          goto LABEL_79;
      }
      else
      {
        v37 = *((unsigned __int16 *)v55 + v31);
      }
LABEL_95:
      WTF::URLParser::serializeIPv6Piece(this, v37);
      if (v31 > 6)
        goto LABEL_73;
      v56 = 58;
      if (*((_BYTE *)this + 59))
      {
        v38 = *((unsigned int *)this + 13);
        if ((_DWORD)v38 == *((_DWORD *)this + 12))
        {
          WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v54, &v56);
          goto LABEL_97;
        }
        *(_BYTE *)(*((_QWORD *)this + 5) + v38) = 58;
        ++*((_DWORD *)this + 13);
        ++v31;
      }
      else
      {
LABEL_97:
        ++v31;
      }
    }
  }
  if (v15 <= 7u)
  {
    v22 = 0;
    v23 = v15 + 1;
    v24 = v15 + 2;
    v25 = v15 + 3;
    v26 = v15 + 4;
    v27 = v15 + 5;
    v52 = v15 + 6;
    while (1)
    {
      while (1)
      {
        if (v22 == v21)
        {
          v56 = 58;
          if (*((_BYTE *)this + 59))
          {
            v30 = *((unsigned int *)this + 13);
            if ((_DWORD)v30 == *((_DWORD *)this + 12))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v54, &v56);
            }
            else
            {
              *(_BYTE *)(*((_QWORD *)this + 5) + v30) = 58;
              ++*((_DWORD *)this + 13);
            }
          }
          v28 = *((unsigned __int16 *)v55 + v21);
          v22 = v21;
          if (!*((_WORD *)v55 + v21))
          {
            if (v21 == 7)
              goto LABEL_73;
            v28 = *((unsigned __int16 *)v55 + v23);
            v22 = v21 + 1;
            if (!*((_WORD *)v55 + v23))
            {
              if (v21 == 6)
                goto LABEL_73;
              v28 = *((unsigned __int16 *)v55 + v24);
              v22 = v21 + 2;
              if (!*((_WORD *)v55 + v24))
              {
                if (v21 == 5)
                  goto LABEL_73;
                v28 = *((unsigned __int16 *)v55 + v25);
                v22 = v21 + 3;
                if (!*((_WORD *)v55 + v25))
                {
                  if (v21 == 4)
                    goto LABEL_73;
                  v28 = *((unsigned __int16 *)v55 + v26);
                  v22 = v21 + 4;
                  if (!*((_WORD *)v55 + v26))
                  {
                    if (v21 == 3)
                      goto LABEL_73;
                    v28 = *((unsigned __int16 *)v55 + v27);
                    v22 = v21 + 5;
                    if (!*((_WORD *)v55 + v27))
                    {
                      if (v21 == 2)
                        goto LABEL_73;
                      v22 = v21 + 6;
                      v28 = *((unsigned __int16 *)v55 + v52);
                      if (!*((_WORD *)v55 + v52))
                        goto LABEL_73;
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          v28 = *((unsigned __int16 *)v55 + v22);
        }
        WTF::URLParser::serializeIPv6Piece(this, v28);
        if (v22 > 6)
          goto LABEL_73;
        v56 = 58;
        if (*((_BYTE *)this + 59))
          break;
LABEL_58:
        ++v22;
      }
      v29 = *((unsigned int *)this + 13);
      if ((_DWORD)v29 == *((_DWORD *)this + 12))
      {
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v54, &v56);
        goto LABEL_58;
      }
      *(_BYTE *)(*((_QWORD *)this + 5) + v29) = 58;
      ++*((_DWORD *)this + 13);
      ++v22;
    }
  }
LABEL_65:
  WTF::URLParser::serializeIPv6Piece(this, v4);
  v56 = 58;
  if (*((_BYTE *)this + 59))
  {
    v44 = *((unsigned int *)this + 13);
    if ((_DWORD)v44 == *((_DWORD *)this + 12))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v54, &v56);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)this + 5) + v44) = 58;
      ++*((_DWORD *)this + 13);
    }
  }
  WTF::URLParser::serializeIPv6Piece(this, (unsigned __int16)v6);
  v56 = 58;
  if (*((_BYTE *)this + 59))
  {
    v45 = *((unsigned int *)this + 13);
    if ((_DWORD)v45 == *((_DWORD *)this + 12))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v54, &v56);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)this + 5) + v45) = 58;
      ++*((_DWORD *)this + 13);
    }
  }
  WTF::URLParser::serializeIPv6Piece(this, (unsigned __int16)v7);
  v56 = 58;
  if (!*((_BYTE *)this + 59))
  {
    WTF::URLParser::serializeIPv6Piece(this, v8);
    v56 = 58;
    if (!*((_BYTE *)this + 59))
      goto LABEL_69;
LABEL_123:
    v48 = *((unsigned int *)this + 13);
    if ((_DWORD)v48 == *((_DWORD *)this + 12))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v54, &v56);
      WTF::URLParser::serializeIPv6Piece(this, v3);
      v56 = 58;
      if (*((_BYTE *)this + 59))
        goto LABEL_128;
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)this + 5) + v48) = 58;
      ++*((_DWORD *)this + 13);
      WTF::URLParser::serializeIPv6Piece(this, v3);
      v56 = 58;
      if (*((_BYTE *)this + 59))
        goto LABEL_128;
    }
LABEL_70:
    WTF::URLParser::serializeIPv6Piece(this, (unsigned __int16)v9);
    v56 = 58;
    if (!*((_BYTE *)this + 59))
      goto LABEL_71;
    goto LABEL_132;
  }
  v46 = *((unsigned int *)this + 13);
  if ((_DWORD)v46 == *((_DWORD *)this + 12))
  {
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v54, &v56);
    WTF::URLParser::serializeIPv6Piece(this, v8);
    v56 = 58;
    if (*((_BYTE *)this + 59))
      goto LABEL_123;
  }
  else
  {
    *(_BYTE *)(*((_QWORD *)this + 5) + v46) = 58;
    ++*((_DWORD *)this + 13);
    WTF::URLParser::serializeIPv6Piece(this, v8);
    v56 = 58;
    if (*((_BYTE *)this + 59))
      goto LABEL_123;
  }
LABEL_69:
  WTF::URLParser::serializeIPv6Piece(this, v3);
  v56 = 58;
  if (!*((_BYTE *)this + 59))
    goto LABEL_70;
LABEL_128:
  v49 = *((unsigned int *)this + 13);
  if ((_DWORD)v49 == *((_DWORD *)this + 12))
  {
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v54, &v56);
    WTF::URLParser::serializeIPv6Piece(this, (unsigned __int16)v9);
    v56 = 58;
    if (!*((_BYTE *)this + 59))
      goto LABEL_71;
  }
  else
  {
    *(_BYTE *)(*((_QWORD *)this + 5) + v49) = 58;
    ++*((_DWORD *)this + 13);
    WTF::URLParser::serializeIPv6Piece(this, (unsigned __int16)v9);
    v56 = 58;
    if (!*((_BYTE *)this + 59))
      goto LABEL_71;
  }
LABEL_132:
  v50 = *((unsigned int *)this + 13);
  if ((_DWORD)v50 == *((_DWORD *)this + 12))
  {
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v54, &v56);
  }
  else
  {
    *(_BYTE *)(*((_QWORD *)this + 5) + v50) = 58;
    ++*((_DWORD *)this + 13);
  }
LABEL_71:
  WTF::URLParser::serializeIPv6Piece(this, (unsigned __int16)v10);
  v56 = 58;
  if (*((_BYTE *)this + 59))
  {
    v47 = *((unsigned int *)this + 13);
    if ((_DWORD)v47 == *((_DWORD *)this + 12))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v54, &v56);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)this + 5) + v47) = 58;
      ++*((_DWORD *)this + 13);
    }
  }
  WTF::URLParser::serializeIPv6Piece(this, v11);
LABEL_73:
  v56 = 93;
  if (*((_BYTE *)this + 59))
  {
    v43 = *((unsigned int *)this + 13);
    if ((_DWORD)v43 == *((_DWORD *)this + 12))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>((uint64_t)v54, &v56);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)this + 5) + v43) = 93;
      ++*((_DWORD *)this + 13);
    }
  }
}

const char *WTF::StringView::substring(const char *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *((unsigned int *)this + 2);
  if (v3 <= a2)
    return "";
  if (v3 - a2 <= a3)
  {
    a3 = v3 - a2;
    if (!a2)
      return *(const char **)this;
  }
  v4 = v3 - a2;
  if (this[12])
  {
    if (v4 >= a3)
      return (const char *)(*(_QWORD *)this + a2);
  }
  else if (v4 >= a3)
  {
    return (const char *)(*(_QWORD *)this + 2 * a2);
  }
  __break(1u);
  return this;
}

uint64_t WTF::URLParser::subdomainStartsWithXNDashDash(unsigned __int16 **this, WTF::StringImpl *a2)
{
  uint64_t result;
  uint64_t v3;
  unsigned __int16 *i;
  char v5;
  int v6;
  char v7;

  if (((_BYTE)this[2] & 4) == 0)
    return WTF::URLParser::subdomainStartsWithXNDashDash<char16_t>(this[1], *((unsigned int *)this + 1));
  v3 = *((unsigned int *)this + 1);
  if (!(_DWORD)v3)
    return 0;
  i = this[1];
  v5 = *(_BYTE *)i;
  if ((*(_BYTE *)i & 0xEF) == 0x2F)
    return 0;
  LOBYTE(v6) = *(_BYTE *)i;
  v7 = 1;
  while (2)
  {
    result = 0;
    if (v5 != 35 && v5 != 58)
    {
      switch(v7)
      {
        case 1:
          if ((v6 & 0xDF) != 0x58)
            goto LABEL_17;
          v7 = 2;
          if (!--v3)
            return 0;
          goto LABEL_27;
        case 2:
          if ((v6 & 0xDF) != 0x4E)
            goto LABEL_17;
          v7 = 3;
          if (!--v3)
            return 0;
          goto LABEL_27;
        case 3:
          if (v5 == 45)
          {
            v7 = 4;
            if (!--v3)
              return 0;
          }
          else if (v5 == 46)
          {
LABEL_21:
            v7 = 1;
            if (!--v3)
              return 0;
          }
          else
          {
LABEL_25:
            v7 = 0;
LABEL_26:
            if (!--v3)
              return 0;
          }
LABEL_27:
          for (i = (unsigned __int16 *)((char *)i + 1); ; i = (unsigned __int16 *)((char *)i + 1))
          {
            v5 = *(_BYTE *)i;
            v6 = *(unsigned __int8 *)i;
            if ((v6 - 14) < 0xFFFFFFFB || (v6 - 11) < 2)
              break;
            if (!--v3)
              return 0;
          }
          result = 0;
          if ((v6 & 0xFFFFFFEF) == 0x2F)
            return result;
          continue;
        case 4:
          v7 = 1;
          if (v5 == 46)
            goto LABEL_26;
          if (v5 != 45)
            goto LABEL_25;
          return 1;
        default:
LABEL_17:
          if (v5 != 46)
            goto LABEL_25;
          goto LABEL_21;
      }
    }
    return result;
  }
}

uint64_t WTF::URLParser::subdomainStartsWithXNDashDash<char16_t>(unsigned __int16 *a1, uint64_t a2)
{
  int v2;
  char v3;
  __int16 v4;
  unsigned __int16 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;

  if (a2)
  {
    LOWORD(v2) = *a1;
    v3 = 1;
LABEL_3:
    v4 = v2;
    if (a2 != 1)
    {
      v4 = v2;
      if ((v2 & 0xFC00) == 0xD800)
      {
        v5 = a1[1];
        v4 = v2;
        if ((v5 & 0xFC00) == 0xDC00)
          v4 = ((_WORD)v2 << 10) + 9216 + v5;
      }
    }
    if ((v4 & 0xFFEF) != 0x2F && v4 != 35 && v4 != 58)
    {
      switch(v3)
      {
        case 1:
          if ((v4 & 0xFFDF) != 0x58)
            goto LABEL_17;
          v3 = 2;
          if (a2 != 1)
            goto LABEL_28;
          goto LABEL_22;
        case 2:
          if ((v4 & 0xFFDF) != 0x4E)
            goto LABEL_17;
          v3 = 3;
          if (a2 == 1)
            goto LABEL_22;
          goto LABEL_28;
        case 3:
          if (v4 == 45)
          {
            v3 = 4;
            if (a2 != 1)
              goto LABEL_28;
          }
          else
          {
            if (v4 == 46)
            {
LABEL_21:
              v3 = 1;
              if (a2 == 1)
                goto LABEL_22;
LABEL_28:
              v6 = 1;
              if ((v2 & 0xFC00) == 0xD800)
              {
                if ((a1[1] & 0xFC00) == 0xDC00)
                  v6 = 2;
                else
                  v6 = 1;
              }
              a2 -= v6;
              if (!a2)
                return 0;
              goto LABEL_33;
            }
LABEL_26:
            v3 = 0;
LABEL_27:
            if (a2 != 1)
              goto LABEL_28;
          }
LABEL_22:
          v6 = 1;
          if (!--a2)
            return 0;
LABEL_33:
          a1 += v6;
          while (1)
          {
            v2 = *a1;
            if (a2 == 1)
            {
              if ((v2 - 14) < 0xFFFFFFFB || (v2 - 11) < 2)
                goto LABEL_3;
            }
            else
            {
              v8 = *a1;
              if ((v2 & 0xFC00) == 0xD800)
              {
                v9 = a1[1];
                v10 = (v9 & 0xFC00) == 56320;
                v8 = (v2 << 10) - 56613888 + v9;
                if (!v10)
                  v8 = *a1;
              }
              v11 = v8 - 14;
              v12 = v8 - 11;
              if (v11 < 0xFFFFFFFB || v12 < 2)
                goto LABEL_3;
            }
            if (a2 == 1)
            {
              v7 = 1;
            }
            else
            {
              v7 = 1;
              if ((v2 & 0xFC00) == 0xD800)
              {
                if ((a1[1] & 0xFC00) == 0xDC00)
                  v7 = 2;
                else
                  v7 = 1;
              }
            }
            a1 += v7;
            a2 -= v7;
            if (!a2)
              return 0;
          }
        case 4:
          v3 = 1;
          if (v4 == 46)
            goto LABEL_27;
          if (v4 != 45)
            goto LABEL_26;
          return 1;
        default:
LABEL_17:
          if (v4 != 46)
            goto LABEL_26;
          goto LABEL_21;
      }
    }
  }
  return 0;
}

void WTF::URLParser::formURLDecode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>, float a9@<S1>)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  unint64_t v18;
  unsigned int v19;
  char *v20;
  unint64_t v21;
  char *v22;
  unsigned int v23;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  char v31;
  char v32;
  char v33;
  char *v34;
  char *v35;
  WTF *v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _BYTE v43[2048];
  WTF *v44;
  _QWORD v45[2];
  char v46[9];

  v45[0] = a1;
  v45[1] = a2;
  WTF::StringView::utf8((uint64_t)v45, 1, a3, a4, a5, a6, a7, &v44, a9);
  v17 = v44;
  if (!v44)
  {
    *a8 = 0;
    a8[8] = 0;
    return;
  }
  v18 = *((_QWORD *)v44 + 1);
  v41 = v43;
  v42 = 2048;
  if (v18 >= 0x801)
  {
    if (HIDWORD(v18))
    {
      __break(0xC471u);
      return;
    }
    LODWORD(v42) = v18;
    v41 = (char *)WTF::fastMalloc((WTF *)v18);
  }
  else if (!v18)
  {
    v19 = 0;
    v20 = v43;
    goto LABEL_42;
  }
  v21 = 0;
  v22 = (char *)v17 + 16;
  do
  {
    while (1)
    {
      LOBYTE(v40) = v22[v21];
      if (v40 == 37)
        break;
      if (HIDWORD(v42) != (_DWORD)v42)
      {
        v41[HIDWORD(v42)] = v40;
        goto LABEL_37;
      }
      v36 = (WTF *)(HIDWORD(v42) + 1);
LABEL_32:
      v37 = WTF::Vector<unsigned char,2048ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v41, v36, (unint64_t)&v40);
      v41[HIDWORD(v42)] = *v37;
LABEL_37:
      v19 = ++HIDWORD(v42);
      if (++v21 >= v18)
        goto LABEL_41;
    }
    if (v18 < 3 || v21 >= v18 - 2)
    {
      v27 = HIDWORD(v42);
      if (HIDWORD(v42) != (_DWORD)v42)
        goto LABEL_36;
      goto LABEL_31;
    }
    v23 = v22[v21 + 1];
    if (v23 - 48 >= 0xA && ((v23 | 0x20) - 97) >= 6u)
    {
      v28 = v42;
      v27 = HIDWORD(v42);
LABEL_35:
      if (v27 != v28)
      {
LABEL_36:
        v41[v27] = 37;
        goto LABEL_37;
      }
LABEL_31:
      v36 = (WTF *)(v27 + 1);
      goto LABEL_32;
    }
    v25 = v21 + 2;
    v26 = v22[v21 + 2];
    v28 = v42;
    v27 = HIDWORD(v42);
    if (v26 - 48 >= 0xA && ((v26 | 0x20) - 97) > 5u)
      goto LABEL_35;
    if (v23 >= 0x41)
      v30 = 9;
    else
      v30 = 0;
    v31 = v30 + v23;
    if (v26 >= 0x41)
      v32 = (v26 + 9) & 0xF;
    else
      v32 = v26 - 48;
    v33 = v32 | (16 * v31);
    v46[0] = v33;
    if (HIDWORD(v42) == (unint64_t)v42)
    {
      v34 = WTF::Vector<unsigned char,2048ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v41, (WTF *)(HIDWORD(v42) + 1), (unint64_t)v46);
      v27 = HIDWORD(v42);
      v35 = v41;
      v33 = *v34;
    }
    else
    {
      v35 = v41;
    }
    v35[v27] = v33;
    v19 = ++HIDWORD(v42);
    v21 += 3;
  }
  while (v25 + 1 < v18);
LABEL_41:
  v20 = v41;
  if (v41)
  {
LABEL_42:
    WTF::fromUTF8Impl<true>((unint64_t)v20, v19, &v40);
    v38 = v41;
    *(_QWORD *)a8 = v40;
    a8[8] = 1;
    if (v43 != v38)
    {
      if (v38)
      {
        v41 = 0;
        LODWORD(v42) = 0;
        WTF::fastFree((unint64_t)v38, v10, v11, v12, v13, v14, v15, v16);
      }
    }
    v39 = *(_DWORD *)v17 - 1;
    if (*(_DWORD *)v17 != 1)
    {
LABEL_46:
      *(_DWORD *)v17 = v39;
      return;
    }
  }
  else
  {
    *(_QWORD *)a8 = 0;
    a8[8] = 1;
    v39 = *(_DWORD *)v17 - 1;
    if (*(_DWORD *)v17 != 1)
      goto LABEL_46;
  }
  WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
}

void WTF::URLParser::parseURLEncodedForm(int16x8_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, float a6@<S2>)
{
  _BOOL4 v7;
  unint64_t v8;
  double v9;
  double v10;
  float v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v18;
  unint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  BOOL v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  unsigned __int8 v62;
  int16x8_t *v63;
  uint64_t v64;
  unsigned __int16 v65;
  char v66;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v63 = a1;
  v64 = a2;
  v65 = 38;
  v66 = 0;
  v7 = a2 == 0;
  v8 = WTF::StringView::find((uint64_t)&v63, 0x26u, 0, a4, a5, a6);
  if (v8 != -1)
  {
    v12 = 0;
    while (v8 <= v12 && !v66)
    {
      v8 = WTF::StringView::find((uint64_t)&v63, v65, ++v12, v9, v10, v11);
      if (v8 == -1)
        goto LABEL_8;
    }
    v14 = v8 - v12;
    v13 = v64;
    if (v12 != (_DWORD)v64 || !v7)
      goto LABEL_24;
    return;
  }
  v12 = 0;
LABEL_8:
  v13 = v64;
  v14 = v64 - v12;
  if (v66)
    v15 = 0;
  else
    v15 = (_DWORD)v64 == v12;
  if (v15)
    v7 = 1;
  if (v12 != (_DWORD)v64 || !v7)
  {
    while (1)
    {
LABEL_24:
      if (v64 <= v12)
      {
        WTF::URLParser::parseQueryNameAndValue((int16x8_t *)"", 0x100000000, (uint64_t)&v60, v11);
        if (!v62)
          goto LABEL_49;
      }
      else
      {
        v18 = v14;
        if (v64 - v12 > v14 || (v18 = v64 - v12, v12))
        {
          v19 = v64 - (unint64_t)v12;
          if (BYTE4(v64))
          {
            if (v19 < v18)
              goto LABEL_67;
            WTF::URLParser::parseQueryNameAndValue((int16x8_t *)((char *)v63 + v12), v18 | 0x100000000, (uint64_t)&v60, v11);
            if (!v62)
              goto LABEL_49;
          }
          else
          {
            if (v19 < v18)
            {
LABEL_67:
              __break(1u);
              return;
            }
            WTF::URLParser::parseQueryNameAndValue((int16x8_t *)((char *)v63 + 2 * v12), v18, (uint64_t)&v60, v11);
            if (!v62)
              goto LABEL_49;
          }
        }
        else
        {
          WTF::URLParser::parseQueryNameAndValue(v63, v64, (uint64_t)&v60, v11);
          if (!v62)
            goto LABEL_49;
        }
      }
      v29 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v29 == *(_DWORD *)(a3 + 8))
      {
        v30 = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v29 + 1, (unint64_t)&v60);
        v31 = *(unsigned int *)(a3 + 12);
        v32 = (_QWORD *)(*(_QWORD *)a3 + 16 * v31);
        v33 = *v30;
        *v30 = 0;
        *v32 = v33;
        v34 = v30[1];
        v30[1] = 0;
        v32[1] = v34;
        LODWORD(v32) = v62;
        *(_DWORD *)(a3 + 12) = v31 + 1;
        if (!(_DWORD)v32)
          goto LABEL_49;
      }
      else
      {
        v35 = (WTF::StringImpl **)(*(_QWORD *)a3 + 16 * v29);
        v36 = v60;
        v60 = 0;
        *v35 = v36;
        v37 = v61;
        v61 = 0;
        v35[1] = v37;
        *(_DWORD *)(a3 + 12) = v29 + 1;
      }
      v38 = v61;
      v61 = 0;
      if (!v38)
        goto LABEL_44;
      if (*(_DWORD *)v38 != 2)
        break;
      WTF::StringImpl::~StringImpl(v38, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
      v39 = v60;
      v60 = 0;
      if (!v39)
        goto LABEL_49;
LABEL_47:
      if (*(_DWORD *)v39 != 2)
      {
        *(_DWORD *)v39 -= 2;
LABEL_49:
        v12 += v14;
        if (v12 < v64)
          goto LABEL_50;
        goto LABEL_63;
      }
      WTF::StringImpl::~StringImpl(v39, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
      v12 += v14;
      if (v12 < v64)
      {
LABEL_50:
        while (1)
        {
          v48 = v12++;
          v49 = WTF::StringView::find((uint64_t)&v63, v65, v12, v27, v28, v11);
          if (v49 == -1)
            break;
          if (v49 > v12 || v66 != 0)
          {
            v14 = v49 - v12;
            v12 = v48 + 1;
            goto LABEL_64;
          }
        }
        v14 = v64 - 1 - v48;
        if (v66)
          v51 = 0;
        else
          v51 = (_DWORD)v64 - 1 == v48;
        if (v51)
          LOBYTE(v7) = 1;
        goto LABEL_64;
      }
LABEL_63:
      LOBYTE(v7) = 1;
LABEL_64:
      if (v12 == v13 && v7)
        return;
    }
    *(_DWORD *)v38 -= 2;
LABEL_44:
    v39 = v60;
    v60 = 0;
    if (!v39)
      goto LABEL_49;
    goto LABEL_47;
  }
}

void WTF::URLParser::parseQueryNameAndValue(int16x8_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S2>)
{
  uint64_t v4;
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t *v12;
  int16x8_t *v13;
  int16x8_t v14;
  int16x8_t *v15;
  int8x16_t v16;
  char *v17;
  int16x8_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  WTF::AtomStringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  int v89;
  int v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  unsigned __int8 v117;
  WTF::StringImpl *v118;
  unsigned __int8 v119;

  v4 = a2;
  v5 = (char *)a1;
  v7 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a2)
    {
      v8 = 16;
      if ((a2 & 0xFFFFFFF0) == 0)
        v8 = a2;
      v9 = v8;
      while (a1->i8[0] != 61)
      {
        a1 = (int16x8_t *)((char *)a1 + 1);
        if (!--v9)
        {
          if (a2 < 0x11uLL)
            goto LABEL_35;
          a1 = (int16x8_t *)memchr(&v5[v8], 61, a2 - v8);
          if (!a1)
            goto LABEL_35;
          break;
        }
      }
      LODWORD(v10) = (_DWORD)a1 - (_DWORD)v5;
      if ((char *)a1 - v5 != -1)
        goto LABEL_24;
    }
    goto LABEL_35;
  }
  if (!(_DWORD)a2)
    goto LABEL_35;
  v11 = 2 * a2;
  if (v11 <= -2)
    goto LABEL_83;
  v12 = (int16x8_t *)((char *)a1 + v11);
  if ((unint64_t)v11 <= 0x3E)
  {
    v19 = (char *)a1;
    while (*(_WORD *)v19 != 61)
    {
      v19 += 2;
      v11 -= 2;
      if (!v11)
        goto LABEL_35;
    }
  }
  else
  {
    v13 = a1;
    if (a2 < 8uLL)
    {
LABEL_19:
      if (v13 >= v12)
        goto LABEL_35;
      v15 = v12 - 1;
      v18.i64[0] = 0x3D003D003D003DLL;
      v18.i64[1] = 0x3D003D003D003DLL;
      v16 = (int8x16_t)vceqq_s16(v12[-1], v18);
      v18.i16[0] = vmaxvq_u16((uint16x8_t)v16);
      if (!v18.i32[0])
        goto LABEL_35;
    }
    else
    {
      v14.i64[0] = 0x3D003D003D003DLL;
      v14.i64[1] = 0x3D003D003D003DLL;
      v15 = a1;
      while (1)
      {
        v16 = (int8x16_t)vceqq_s16(*v15, v14);
        LOWORD(a4) = vmaxvq_u16((uint16x8_t)v16);
        if (a4 != 0.0)
          break;
        v13 = v15 + 1;
        v17 = &v15[1].i8[14];
        ++v15;
        if (v17 >= (char *)v12)
          goto LABEL_19;
      }
    }
    v19 = &v15->i8[2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v16))];
  }
  if (v19 == (char *)v12 || (v10 = (v19 - (char *)a1) >> 1, v10 == -1))
  {
LABEL_35:
    WTF::makeStringByReplacingAll(v5, v4, 0x2Bu, 0x20u, (int **)&v116);
    if (v116)
    {
      WTF::URLParser::formURLDecode(*((_QWORD *)v116 + 1), *((unsigned int *)v116 + 1) | ((unint64_t)((*((_DWORD *)v116 + 4) >> 2) & 1) << 32), v32, v33, v34, v35, v36, &v118, v37);
      v45 = v116;
      v116 = 0;
      if (!v45)
      {
LABEL_41:
        if (!v119)
          goto LABEL_82;
        goto LABEL_44;
      }
    }
    else
    {
      WTF::URLParser::formURLDecode(0, 0x100000000, v32, v33, v34, v35, v36, &v118, v37);
      v45 = v116;
      v116 = 0;
      if (!v45)
        goto LABEL_41;
    }
    if (*(_DWORD *)v45 != 2)
    {
      *(_DWORD *)v45 -= 2;
      goto LABEL_41;
    }
    WTF::StringImpl::~StringImpl(v45, v38, v39, v40, v41, v42, v43, v44);
    WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    if (v119)
    {
LABEL_44:
      v54 = v118;
      v55 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
LABEL_45:
      *(_QWORD *)a3 = v54;
      *(_QWORD *)(a3 + 8) = v55;
      *(_BYTE *)(a3 + 16) = 1;
      return;
    }
LABEL_82:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return;
  }
LABEL_24:
  if ((_DWORD)v4)
  {
    v20 = v5;
    v21 = v4;
    if (v4 > v10)
    {
      if (v7)
        v21 = v10 | 0x100000000;
      else
        v21 = v10;
      v20 = v5;
    }
    WTF::makeStringByReplacingAll(v20, v21, 0x2Bu, 0x20u, (int **)&v116);
    v28 = v116;
    if (v116)
      goto LABEL_31;
  }
  else
  {
    WTF::makeStringByReplacingAll("", 0x100000000, 0x2Bu, 0x20u, (int **)&v116);
    v28 = v116;
    if (v116)
    {
LABEL_31:
      v29 = *((unsigned int *)v28 + 4);
      v30 = *((_QWORD *)v28 + 1);
      LODWORD(v28) = *((_DWORD *)v28 + 1);
      v31 = (v29 >> 2) & 1;
      goto LABEL_48;
    }
  }
  v30 = 0;
  v31 = 1;
LABEL_48:
  WTF::URLParser::formURLDecode(v30, v28 | (unint64_t)(v31 << 32), v22, v23, v24, v25, v26, &v118, v27);
  v63 = v116;
  v116 = 0;
  if (!v63)
    goto LABEL_51;
  if (*(_DWORD *)v63 != 2)
  {
    *(_DWORD *)v63 -= 2;
LABEL_51:
    v64 = (v10 + 1);
    v65 = (v4 - v64);
    if (v4 > v64)
      goto LABEL_52;
LABEL_57:
    v4 = 0x100000000;
    v5 = "";
    goto LABEL_58;
  }
  WTF::StringImpl::~StringImpl(v63, v56, v57, v58, v59, v60, v61, v62);
  WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
  v64 = (v10 + 1);
  v65 = (v4 - v64);
  if (v4 <= v64)
    goto LABEL_57;
LABEL_52:
  if (!(_DWORD)v64)
    goto LABEL_58;
  v66 = v4 - v64;
  if (!v7)
  {
    if (v66 < v65)
      goto LABEL_83;
    v5 += 2 * v64;
    v4 = v65;
LABEL_58:
    WTF::makeStringByReplacingAll(v5, v4, 0x2Bu, 0x20u, (int **)&v115);
    if (v115)
    {
      WTF::URLParser::formURLDecode(*((_QWORD *)v115 + 1), *((unsigned int *)v115 + 1) | ((unint64_t)((*((_DWORD *)v115 + 4) >> 2) & 1) << 32), v75, v76, v77, v78, v79, &v116, v80);
      v88 = v115;
      v115 = 0;
      if (!v88)
        goto LABEL_64;
    }
    else
    {
      WTF::URLParser::formURLDecode(0, 0x100000000, v75, v76, v77, v78, v79, &v116, v80);
      v88 = v115;
      v115 = 0;
      if (!v88)
        goto LABEL_64;
    }
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v81, v82, v83, v84, v85, v86, v87);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
      v89 = v119;
      v90 = v117;
      if (!v119)
        goto LABEL_69;
      goto LABEL_67;
    }
    *(_DWORD *)v88 -= 2;
LABEL_64:
    v89 = v119;
    v90 = v117;
    if (!v119)
      goto LABEL_69;
LABEL_67:
    if (v90)
    {
      v54 = v118;
      v55 = v116;
      goto LABEL_45;
    }
LABEL_69:
    if (v90 && v116)
    {
      if (*(_DWORD *)v116 == 2)
      {
        WTF::StringImpl::~StringImpl(v116, v81, v82, v83, v84, v85, v86, v87);
        WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
        if (!v89)
          goto LABEL_82;
        goto LABEL_74;
      }
      *(_DWORD *)v116 -= 2;
    }
    if (!v89)
      goto LABEL_82;
LABEL_74:
    if (v118)
    {
      if (*(_DWORD *)v118 == 2)
      {
        WTF::StringImpl::~StringImpl(v118, v81, v82, v83, v84, v85, v86, v87);
        WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
      }
      else
      {
        *(_DWORD *)v118 -= 2;
      }
    }
    goto LABEL_82;
  }
  if (v66 >= v65)
  {
    v5 += v64;
    v4 = v65 | 0x100000000;
    goto LABEL_58;
  }
LABEL_83:
  __break(1u);
}

void WTF::URLParser::serialize(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>, double a9@<D0>, float a10@<S1>)
{
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  size_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  float v30;
  size_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  const void *v35;
  void *v36;
  _BYTE *v37;
  size_t v38;
  uint64_t v39;
  _BYTE *v40;
  const void *v41;
  uint64_t v42;

  v11 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v11)
  {
    *a8 = 0;
    return;
  }
  v41 = 0;
  v42 = 0;
  v12 = *(uint64_t **)a1;
  v13 = *(_QWORD *)a1 + 16 * v11;
  do
  {
    v16 = HIDWORD(v42);
    if (HIDWORD(v42))
    {
      if (HIDWORD(v42) == (_DWORD)v42)
      {
        v17 = HIDWORD(v42) + ((unint64_t)HIDWORD(v42) >> 2);
        if (v17 >= 0x10)
          v18 = v17 + 1;
        else
          v18 = 16;
        if (v18 <= (unint64_t)HIDWORD(v42) + 1)
          v19 = HIDWORD(v42) + 1;
        else
          v19 = v18;
        if (HIDWORD(v19))
        {
          __break(0xC471u);
          JUMPOUT(0x197B4912CLL);
        }
        v20 = v41;
        v21 = (void *)WTF::fastMalloc((WTF *)v19);
        LODWORD(v42) = v19;
        v41 = v21;
        memcpy(v21, v20, v16);
        if (v20)
        {
          if (v21 == v20)
          {
            v21 = 0;
            v41 = 0;
            LODWORD(v42) = 0;
          }
          WTF::fastFree((unint64_t)v20, v22, a2, a3, a4, a5, a6, a7);
        }
      }
      else
      {
        v21 = (void *)v41;
      }
      *((_BYTE *)v21 + v16) = 38;
      HIDWORD(v42) = v16 + 1;
    }
    WTF::serializeURLEncodedForm(v12, (uint64_t)&v41, a9, a10, a2, a3, a4, a5, a6, a7);
    v31 = HIDWORD(v42);
    if (HIDWORD(v42) == (_DWORD)v42)
    {
      v32 = HIDWORD(v42) + ((unint64_t)HIDWORD(v42) >> 2);
      if (v32 >= 0x10)
        v33 = v32 + 1;
      else
        v33 = 16;
      if (v33 <= (unint64_t)HIDWORD(v42) + 1)
        v34 = HIDWORD(v42) + 1;
      else
        v34 = v33;
      if (HIDWORD(v34))
        goto LABEL_44;
      v35 = v41;
      v14 = (void *)WTF::fastMalloc((WTF *)v34);
      LODWORD(v42) = v34;
      v41 = v14;
      memcpy(v14, v35, v31);
      if (v35)
      {
        if (v14 == v35)
        {
          v14 = 0;
          v41 = 0;
          LODWORD(v42) = 0;
        }
        WTF::fastFree((unint64_t)v35, v36, v23, v24, v25, v26, v27, v28);
      }
    }
    else
    {
      v14 = (void *)v41;
    }
    *((_BYTE *)v14 + v31) = 61;
    HIDWORD(v42) = v31 + 1;
    WTF::serializeURLEncodedForm(v12 + 1, (uint64_t)&v41, v29, v30, v23, v24, v25, v26, v27, v28);
    v12 += 2;
  }
  while (v12 != (uint64_t *)v13);
  v37 = v41;
  v38 = HIDWORD(v42);
  if (!HIDWORD(v42))
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a8 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
    if (!v37)
      return;
    goto LABEL_38;
  }
  if (v42 < 0)
  {
LABEL_44:
    __break(0xC471u);
    JUMPOUT(0x197B49124);
  }
  v39 = WTF::fastCompactMalloc((WTF *)(HIDWORD(v42) + 20));
  v40 = (_BYTE *)(v39 + 20);
  *(_DWORD *)v39 = 2;
  *(_DWORD *)(v39 + 4) = v38;
  *(_QWORD *)(v39 + 8) = v39 + 20;
  *(_DWORD *)(v39 + 16) = 4;
  *a8 = v39;
  if ((_DWORD)v38 == 1)
  {
    *v40 = *v37;
LABEL_38:
    WTF::fastFree((unint64_t)v37, v15, a2, a3, a4, a5, a6, a7);
    return;
  }
  memcpy(v40, v37, v38);
  if (v37)
    goto LABEL_38;
}

void WTF::serializeURLEncodedForm(uint64_t *a1, uint64_t a2, double a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  size_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  void *v27;
  size_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  const void *v32;
  void *v33;
  size_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  const void *v38;
  void *v39;
  _BYTE *v40;
  int v41;
  size_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  const void *v47;
  void *v48;
  _BYTE *v49;
  int v50;
  size_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  const void *v55;
  void *v56;
  _BYTE *v57;
  char v58;
  WTF *v59;

  WTF::String::utf8(a1, 1, a6, a7, a8, a9, a10, &v59, a4);
  v18 = v59;
  if (v59)
  {
    v19 = *((_QWORD *)v59 + 1);
    if (v19)
    {
      v20 = (unsigned __int8 *)v59 + 16;
      do
      {
        v21 = *v20;
        if (v21 - 45 < 2 || v21 == 42)
          goto LABEL_23;
        if (v21 == 32)
        {
          v22 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v22 == *(_DWORD *)(a2 + 8))
          {
            v23 = v22 + (v22 >> 2);
            if (v23 >= 0x10)
              v24 = v23 + 1;
            else
              v24 = 16;
            if (v24 <= v22 + 1)
              v25 = v22 + 1;
            else
              v25 = v24;
            if (HIDWORD(v25))
            {
              __break(0xC471u);
              JUMPOUT(0x197B49534);
            }
            v26 = *(const void **)a2;
            v27 = (void *)WTF::fastMalloc((WTF *)v25);
            *(_DWORD *)(a2 + 8) = v25;
            *(_QWORD *)a2 = v27;
            memcpy(v27, v26, v22);
            if (v26)
            {
              if (*(const void **)a2 == v26)
              {
                *(_QWORD *)a2 = 0;
                *(_DWORD *)(a2 + 8) = 0;
              }
              WTF::fastFree((unint64_t)v26, v11, v12, v13, v14, v15, v16, v17);
            }
            *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = 43;
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)a2 + v22) = 43;
          }
          goto LABEL_5;
        }
        if (v21 - 48 < 0xA || v21 == 95 || (v21 & 0xFFFFFFDF) - 65 <= 0x19)
        {
LABEL_23:
          v28 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v28 == *(_DWORD *)(a2 + 8))
          {
            v29 = v28 + (v28 >> 2);
            if (v29 >= 0x10)
              v30 = v29 + 1;
            else
              v30 = 16;
            if (v30 <= v28 + 1)
              v31 = v28 + 1;
            else
              v31 = v30;
            if (HIDWORD(v31))
            {
LABEL_96:
              __break(0xC471u);
              JUMPOUT(0x197B4952CLL);
            }
            v32 = *(const void **)a2;
            v33 = (void *)WTF::fastMalloc((WTF *)v31);
            *(_DWORD *)(a2 + 8) = v31;
            *(_QWORD *)a2 = v33;
            memcpy(v33, v32, v28);
            if (v32)
            {
              if (*(const void **)a2 == v32)
              {
                *(_QWORD *)a2 = 0;
                *(_DWORD *)(a2 + 8) = 0;
              }
              WTF::fastFree((unint64_t)v32, v11, v12, v13, v14, v15, v16, v17);
            }
            *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = v21;
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)a2 + v28) = v21;
          }
        }
        else
        {
          v34 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v34 == *(_DWORD *)(a2 + 8))
          {
            v35 = v34 + (v34 >> 2);
            if (v35 >= 0x10)
              v36 = v35 + 1;
            else
              v36 = 16;
            if (v36 <= v34 + 1)
              v37 = v34 + 1;
            else
              v37 = v36;
            if (HIDWORD(v37))
            {
              __break(0xC471u);
              JUMPOUT(0x197B4953CLL);
            }
            v38 = *(const void **)a2;
            v39 = (void *)WTF::fastMalloc((WTF *)v37);
            *(_DWORD *)(a2 + 8) = v37;
            *(_QWORD *)a2 = v39;
            memcpy(v39, v38, v34);
            if (v38)
            {
              if (*(const void **)a2 == v38)
              {
                *(_QWORD *)a2 = 0;
                *(_DWORD *)(a2 + 8) = 0;
              }
              WTF::fastFree((unint64_t)v38, v11, v12, v13, v14, v15, v16, v17);
            }
            v40 = (_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12));
          }
          else
          {
            v40 = (_BYTE *)(*(_QWORD *)a2 + v34);
          }
          *v40 = 37;
          v41 = *(_DWORD *)(a2 + 8);
          v42 = (*(_DWORD *)(a2 + 12) + 1);
          *(_DWORD *)(a2 + 12) = v42;
          if (v21 >= 0xA0)
            v43 = 55;
          else
            v43 = 48;
          if ((_DWORD)v42 == v41)
          {
            v44 = v42 + (v42 >> 2);
            if (v44 >= 0x10)
              v45 = v44 + 1;
            else
              v45 = 16;
            if (v45 <= v42 + 1)
              v46 = v42 + 1;
            else
              v46 = v45;
            if (HIDWORD(v46))
            {
              __break(0xC471u);
              JUMPOUT(0x197B49544);
            }
            v47 = *(const void **)a2;
            v48 = (void *)WTF::fastMalloc((WTF *)v46);
            *(_DWORD *)(a2 + 8) = v46;
            *(_QWORD *)a2 = v48;
            memcpy(v48, v47, v42);
            if (v47)
            {
              if (*(const void **)a2 == v47)
              {
                *(_QWORD *)a2 = 0;
                *(_DWORD *)(a2 + 8) = 0;
              }
              WTF::fastFree((unint64_t)v47, v11, v12, v13, v14, v15, v16, v17);
            }
            v49 = (_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12));
          }
          else
          {
            v49 = (_BYTE *)(*(_QWORD *)a2 + v42);
          }
          *v49 = v43 + (v21 >> 4);
          v50 = *(_DWORD *)(a2 + 8);
          v51 = (*(_DWORD *)(a2 + 12) + 1);
          *(_DWORD *)(a2 + 12) = v51;
          if ((_DWORD)v51 == v50)
          {
            v52 = v51 + (v51 >> 2);
            if (v52 >= 0x10)
              v53 = v52 + 1;
            else
              v53 = 16;
            if (v53 <= v51 + 1)
              v54 = v51 + 1;
            else
              v54 = v53;
            if (HIDWORD(v54))
              goto LABEL_96;
            v55 = *(const void **)a2;
            v56 = (void *)WTF::fastMalloc((WTF *)v54);
            *(_DWORD *)(a2 + 8) = v54;
            *(_QWORD *)a2 = v56;
            memcpy(v56, v55, v51);
            if (v55)
            {
              if (*(const void **)a2 == v55)
              {
                *(_QWORD *)a2 = 0;
                *(_DWORD *)(a2 + 8) = 0;
              }
              WTF::fastFree((unint64_t)v55, v11, v12, v13, v14, v15, v16, v17);
            }
            v57 = (_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12));
          }
          else
          {
            v57 = (_BYTE *)(*(_QWORD *)a2 + v51);
          }
          if ((v21 & 0xF) >= 0xA)
            v58 = 55;
          else
            v58 = 48;
          *v57 = v58 + (v21 & 0xF);
        }
LABEL_5:
        ++*(_DWORD *)(a2 + 12);
        ++v20;
        --v19;
      }
      while (v19);
    }
    if (*(_DWORD *)v18 == 1)
      WTF::fastFree((unint64_t)v18, v11, v12, v13, v14, v15, v16, v17);
    else
      --*(_DWORD *)v18;
  }
}

BOOL WTF::URLParser::allValuesEqual(WTF **this, const WTF::StringImpl **a2, const WTF::URL *a3)
{
  WTF *v5;
  const WTF::StringImpl *v6;
  BOOL v7;
  _BOOL8 result;
  int v9;

  v5 = *this;
  v6 = *a2;
  if (v5 == v6)
    goto LABEL_9;
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
    return 0;
  result = WTF::equal(v5, v6, a3);
  if ((_DWORD)result)
  {
LABEL_9:
    v9 = *((_DWORD *)a2 + 2) ^ *((_DWORD *)this + 2);
    if ((v9 & 0xFFFFFFC7) != 0
      || *((_DWORD *)this + 3) != *((_DWORD *)a2 + 3)
      || *((_DWORD *)this + 4) != *((_DWORD *)a2 + 4)
      || *((_DWORD *)this + 5) != *((_DWORD *)a2 + 5))
    {
      return 0;
    }
    result = 0;
    if ((v9 & 0x38) == 0 && *((_DWORD *)this + 6) == *((_DWORD *)a2 + 6))
    {
      if (*((_DWORD *)this + 7) == *((_DWORD *)a2 + 7) && *((_DWORD *)this + 8) == *((_DWORD *)a2 + 8))
        return *((_DWORD *)this + 9) == *((_DWORD *)a2 + 9);
      return 0;
    }
  }
  return result;
}

BOOL WTF::URLParser::internalValuesConsistent(WTF::URLParser *this, const WTF::URL *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  v2 = *((_DWORD *)this + 2);
  v3 = *((_DWORD *)this + 3);
  if (v3 < v2 >> 6)
    return 0;
  v5 = *((_DWORD *)this + 4);
  if (v3 > v5)
    return 0;
  v6 = *((_DWORD *)this + 5);
  if (v5 > v6)
    return 0;
  v7 = *((_DWORD *)this + 6);
  if (v6 > v7)
    return 0;
  v8 = v7 + ((v2 >> 3) & 7);
  v9 = *((_DWORD *)this + 7);
  if (v8 > v9)
    return 0;
  v10 = *((_DWORD *)this + 8);
  if (v9 > v10)
    return 0;
  v11 = *((_DWORD *)this + 9);
  if (v10 > v11)
    return 0;
  v12 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    LODWORD(v12) = *(_DWORD *)(v12 + 4);
  return v11 <= v12;
}

void WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_13:
    *(_BYTE *)(*(_QWORD *)a1 + (*(_DWORD *)(a1 + 12))++) = *a2;
    return;
  }
  if (!HIDWORD(v8))
  {
    v9 = *(const void **)a1;
    v10 = (void *)WTF::fastMalloc((WTF *)v8);
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v10;
    memcpy(v10, v9, v5);
    if (v9)
    {
      if (*(const void **)a1 == v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v9, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(uint64_t result, WTF *a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const void *v9;
  size_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(unsigned int *)(result + 8);
  v5 = v4 + (v4 >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= (unint64_t)a2)
    v7 = (unint64_t)a2;
  else
    v7 = v6;
  if (v7 <= v4)
    return a3;
  if (!HIDWORD(v7))
  {
    v8 = result;
    v9 = *(const void **)result;
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)v7);
    *(_DWORD *)(v8 + 8) = v7;
    *(_QWORD *)v8 = v11;
    memcpy(v11, v9, v10);
    if (v9)
    {
      if (*(const void **)v8 == v9)
      {
        *(_QWORD *)v8 = 0;
        *(_DWORD *)(v8 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v9, v12, v13, v14, v15, v16, v17, v18);
    }
    return a3;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::URLParser::advance<unsigned char,(WTF::URLParser::ReportSyntaxViolation)0>(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;

  v1 = result[1];
  if (v1)
  {
    v2 = *result;
    v3 = (unsigned __int8 *)(*result + 1);
    *result = v3;
    result[1] = v1 - 1;
    if (v1 != 1)
    {
      v4 = v2 + 2;
      v5 = v1 - 2;
      do
      {
        v6 = *v3;
        v7 = v6 - 14;
        v8 = v6 - 11;
        if (v7 < 0xFFFFFFFB || v8 < 2)
          break;
        ++v3;
        *result = v4;
        result[1] = v5;
        ++v4;
        --v5;
      }
      while (v5 != -1);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void WTF::URLParser::syntaxViolation<unsigned char>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  int8x16_t *v7;
  size_t v8;
  _DWORD *v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  size_t v30;
  size_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  const void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int8x16_t *v47;
  int8x16_t *v48;
  unint64_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x8_t *v54;
  unint64_t v55;
  int16x8_t *v56;
  int16x8_t v57;
  char v58;

  if (!*(_BYTE *)(a1 + 59))
  {
    *(_BYTE *)(a1 + 59) = 1;
    v4 = *(_QWORD *)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
    if (v4)
    {
      v6 = a2 - v5;
      if (a2 - v5 <= (unint64_t)*(unsigned int *)(v4 + 4))
      {
        v7 = *(int8x16_t **)(v4 + 8);
        if ((*(_BYTE *)(v4 + 16) & 4) == 0)
        {
          if (v5 == a2)
            return;
          v9 = (_DWORD *)(a1 + 52);
          v8 = *(unsigned int *)(a1 + 52);
          v10 = v6 + v8;
          v11 = *(unsigned int *)(a1 + 48);
          if (v6 + v8 > v11)
          {
            v12 = v11 + (v11 >> 2);
            if (v12 >= 0x10)
              v13 = v12 + 1;
            else
              v13 = 16;
            if (v13 <= v10)
              v14 = v6 + v8;
            else
              v14 = v13;
            if (HIDWORD(v14))
            {
              __break(0xC471u);
              JUMPOUT(0x197B49BACLL);
            }
            v15 = *(const void **)(a1 + 40);
            v16 = (void *)WTF::fastMalloc((WTF *)v14);
            *(_DWORD *)(a1 + 48) = v14;
            *(_QWORD *)(a1 + 40) = v16;
            memcpy(v16, v15, v8);
            if (v15)
            {
              if (*(const void **)(a1 + 40) == v15)
              {
                *(_QWORD *)(a1 + 40) = 0;
                *(_DWORD *)(a1 + 48) = 0;
              }
              WTF::fastFree((unint64_t)v15, v17, v18, v19, v20, v21, v22, v23);
            }
          }
          v24 = *v9;
          if (v10 < v24)
          {
            __break(0xC471u);
            JUMPOUT(0x197B49B9CLL);
          }
          v25 = *(_QWORD *)(a1 + 40);
          v26 = (char *)(v25 + v24);
          v27 = 2 * a2 - 2 * v5;
          v28 = v27 - 2;
          if ((unint64_t)(v27 - 2) < 0xE)
          {
            v29 = (char *)v7;
            goto LABEL_52;
          }
          if (v26 < &v7->i8[v27])
          {
            v29 = (char *)v7;
            if ((unint64_t)v7 < v24 + (v28 >> 1) + v25 + 1)
              goto LABEL_52;
          }
          v45 = (v28 >> 1) + 1;
          if (v28 >= 0x3E)
          {
            v46 = v45 & 0xFFFFFFFFFFFFFFE0;
            v47 = v7 + 2;
            v48 = (int8x16_t *)(v24 + v25 + 16);
            v49 = v45 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v51 = v47[-2];
              v50 = v47[-1];
              v53 = *v47;
              v52 = v47[1];
              v47 += 4;
              v48[-1] = vuzp1q_s8(v51, v50);
              *v48 = vuzp1q_s8(v53, v52);
              v48 += 2;
              v49 -= 32;
            }
            while (v49);
            if (v45 == v46)
              goto LABEL_53;
            if ((v45 & 0x18) == 0)
            {
              v29 = &v7->i8[2 * v46];
              v26 += v46;
              do
              {
LABEL_52:
                v58 = *v29;
                v29 += 2;
                *v26++ = v58;
              }
              while (v29 != (char *)v7 + 2 * v6);
LABEL_53:
              *v9 = v10;
              return;
            }
          }
          else
          {
            v46 = 0;
          }
          v26 += v45 & 0xFFFFFFFFFFFFFFF8;
          v29 = &v7->i8[2 * (v45 & 0xFFFFFFFFFFFFFFF8)];
          v54 = (int8x8_t *)(v25 + v46 + v24);
          v55 = v46 - (v45 & 0xFFFFFFFFFFFFFFF8);
          v56 = (int16x8_t *)((char *)v7 + 2 * v46);
          do
          {
            v57 = *v56++;
            *v54++ = vmovn_s16(v57);
            v55 += 8;
          }
          while (v55);
          if (v45 == (v45 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_53;
          goto LABEL_52;
        }
        if (v5 == a2)
          return;
        v9 = (_DWORD *)(a1 + 52);
        v30 = *(unsigned int *)(a1 + 52);
        v10 = v6 + v30;
        v31 = *(unsigned int *)(a1 + 48);
        if (v6 + v30 <= v31)
        {
LABEL_37:
          v44 = *v9;
          if (v10 < v44)
          {
            __break(0xC471u);
            JUMPOUT(0x197B49BA4);
          }
          memcpy((void *)(*(_QWORD *)(a1 + 40) + v44), v7, v6);
          goto LABEL_53;
        }
        v32 = v31 + (v31 >> 2);
        if (v32 >= 0x10)
          v33 = v32 + 1;
        else
          v33 = 16;
        if (v33 <= v10)
          v34 = v6 + v30;
        else
          v34 = v33;
        if (!HIDWORD(v34))
        {
          v35 = *(const void **)(a1 + 40);
          v36 = (void *)WTF::fastMalloc((WTF *)v34);
          *(_DWORD *)(a1 + 48) = v34;
          *(_QWORD *)(a1 + 40) = v36;
          memcpy(v36, v35, v30);
          if (v35)
          {
            if (*(const void **)(a1 + 40) == v35)
            {
              *(_QWORD *)(a1 + 40) = 0;
              *(_DWORD *)(a1 + 48) = 0;
            }
            WTF::fastFree((unint64_t)v35, v37, v38, v39, v40, v41, v42, v43);
          }
          goto LABEL_37;
        }
      }
    }
    else if (v5 == a2)
    {
      return;
    }
    __break(0xC471u);
    JUMPOUT(0x197B49A0CLL);
  }
}

void WTF::URLParser::advance<unsigned char,(WTF::URLParser::ReportSyntaxViolation)1>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *v4;
  uint64_t v5;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;

  v2 = a2[1];
  if (v2)
  {
    v4 = (unsigned __int8 *)(*a2 + 1);
    v5 = v2 - 1;
    *a2 = v4;
    a2[1] = v5;
    if (v5)
    {
      do
      {
        v7 = *v4;
        v8 = v7 - 14;
        v9 = v7 - 11;
        if (v8 < 0xFFFFFFFB || v9 < 2)
          break;
        WTF::URLParser::syntaxViolation<unsigned char>(a1, (uint64_t)v4);
        v11 = a2[1];
        if (!v11)
          goto LABEL_11;
        v4 = (unsigned __int8 *)(*a2 + 1);
        v12 = v11 - 1;
        *a2 = v4;
        a2[1] = v12;
      }
      while (v12);
    }
  }
  else
  {
LABEL_11:
    __break(1u);
  }
}

_QWORD *WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)0>(_QWORD *result)
{
  uint64_t v1;
  _WORD *v2;
  unsigned __int16 *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v16;

  v1 = result[1];
  if (v1)
  {
    v2 = (_WORD *)*result;
    if (v1 != 1 && (*(_WORD *)*result & 0xFC00) == 55296)
    {
      v6 = 1;
      if ((v2[1] & 0xFC00) == 0xDC00)
        v6 = 2;
      v4 = &v2[v6];
      *result = v4;
      for (i = v1 - v6; i; i -= v7)
      {
LABEL_14:
        v8 = *v4;
        if (i == 1)
        {
          if ((v8 - 14) < 0xFFFFFFFB || (v8 - 11) < 2)
            break;
        }
        else
        {
          v9 = *v4;
          if ((v8 & 0xFC00) == 0xD800)
          {
            v10 = v4[1];
            v11 = v10 & 0xFC00;
            v9 = v10 + (v8 << 10) - 56613888;
            if (v11 != 56320)
              v9 = *v4;
          }
          v12 = v9 - 14;
          v13 = v9 - 11;
          if (v12 < 0xFFFFFFFB || v13 < 2)
            break;
        }
        if (i == 1)
        {
          v7 = 1;
        }
        else
        {
          v16 = v8 & 0xFC00;
          v7 = 1;
          if (v16 == 55296)
          {
            if ((v4[1] & 0xFC00) == 0xDC00)
              v7 = 2;
            else
              v7 = 1;
          }
        }
        v4 += v7;
        *result = v4;
      }
    }
    else
    {
      v4 = v2 + 1;
      *result = v4;
      i = v1 - 1;
      if (i)
        goto LABEL_14;
    }
    result[1] = i;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void WTF::URLParser::syntaxViolation<char16_t>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  int8x16_t *v7;
  size_t v8;
  _DWORD *v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  size_t v29;
  size_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  const void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int8x16_t *v46;
  int8x16_t *v47;
  unint64_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x8_t *v53;
  unint64_t v54;
  int16x8_t *v55;
  int16x8_t v56;
  char v57;

  if (!*(_BYTE *)(a1 + 59))
  {
    *(_BYTE *)(a1 + 59) = 1;
    v4 = *(_QWORD *)(a1 + 64);
    v3 = *(_QWORD *)(a1 + 72);
    if (v4)
    {
      v5 = a2 - v3;
      v6 = (a2 - v3) >> 1;
      if (v6 <= *(unsigned int *)(v4 + 4))
      {
        v7 = *(int8x16_t **)(v4 + 8);
        if ((*(_BYTE *)(v4 + 16) & 4) == 0)
        {
          if (v3 == a2)
            return;
          v9 = (_DWORD *)(a1 + 52);
          v8 = *(unsigned int *)(a1 + 52);
          v10 = v6 + v8;
          v11 = *(unsigned int *)(a1 + 48);
          if (v6 + v8 > v11)
          {
            v12 = v11 + (v11 >> 2);
            if (v12 >= 0x10)
              v13 = v12 + 1;
            else
              v13 = 16;
            if (v13 <= v10)
              v14 = v6 + v8;
            else
              v14 = v13;
            if (HIDWORD(v14))
            {
              __break(0xC471u);
              JUMPOUT(0x197B4A048);
            }
            v15 = *(const void **)(a1 + 40);
            v16 = (void *)WTF::fastMalloc((WTF *)v14);
            *(_DWORD *)(a1 + 48) = v14;
            *(_QWORD *)(a1 + 40) = v16;
            memcpy(v16, v15, v8);
            if (v15)
            {
              if (*(const void **)(a1 + 40) == v15)
              {
                *(_QWORD *)(a1 + 40) = 0;
                *(_DWORD *)(a1 + 48) = 0;
              }
              WTF::fastFree((unint64_t)v15, v17, v18, v19, v20, v21, v22, v23);
            }
          }
          v24 = *v9;
          if (v10 < v24)
          {
            __break(0xC471u);
            JUMPOUT(0x197B4A038);
          }
          v25 = *(_QWORD *)(a1 + 40);
          v26 = (char *)(v25 + v24);
          v27 = v5 - 2;
          if ((unint64_t)(v5 - 2) < 0xE)
          {
            v28 = (char *)v7;
            goto LABEL_52;
          }
          if (v26 < &v7->i8[(v27 & 0xFFFFFFFFFFFFFFFELL) + 2])
          {
            v28 = (char *)v7;
            if ((unint64_t)v7 < v24 + (v27 >> 1) + v25 + 1)
              goto LABEL_52;
          }
          v44 = (v27 >> 1) + 1;
          if (v27 >= 0x3E)
          {
            v45 = v44 & 0xFFFFFFFFFFFFFFE0;
            v46 = v7 + 2;
            v47 = (int8x16_t *)(v24 + v25 + 16);
            v48 = v44 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v50 = v46[-2];
              v49 = v46[-1];
              v52 = *v46;
              v51 = v46[1];
              v46 += 4;
              v47[-1] = vuzp1q_s8(v50, v49);
              *v47 = vuzp1q_s8(v52, v51);
              v47 += 2;
              v48 -= 32;
            }
            while (v48);
            if (v44 == v45)
              goto LABEL_53;
            if ((v44 & 0x18) == 0)
            {
              v28 = &v7->i8[2 * v45];
              v26 += v45;
              do
              {
LABEL_52:
                v57 = *v28;
                v28 += 2;
                *v26++ = v57;
              }
              while (v28 != (char *)v7 + 2 * v6);
LABEL_53:
              *v9 = v10;
              return;
            }
          }
          else
          {
            v45 = 0;
          }
          v26 += v44 & 0xFFFFFFFFFFFFFFF8;
          v28 = &v7->i8[2 * (v44 & 0xFFFFFFFFFFFFFFF8)];
          v53 = (int8x8_t *)(v25 + v45 + v24);
          v54 = v45 - (v44 & 0xFFFFFFFFFFFFFFF8);
          v55 = (int16x8_t *)((char *)v7 + 2 * v45);
          do
          {
            v56 = *v55++;
            *v53++ = vmovn_s16(v56);
            v54 += 8;
          }
          while (v54);
          if (v44 == (v44 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_53;
          goto LABEL_52;
        }
        if (v3 == a2)
          return;
        v9 = (_DWORD *)(a1 + 52);
        v29 = *(unsigned int *)(a1 + 52);
        v10 = v6 + v29;
        v30 = *(unsigned int *)(a1 + 48);
        if (v6 + v29 <= v30)
        {
LABEL_37:
          v43 = *v9;
          if (v10 < v43)
          {
            __break(0xC471u);
            JUMPOUT(0x197B4A040);
          }
          memcpy((void *)(*(_QWORD *)(a1 + 40) + v43), v7, v6);
          goto LABEL_53;
        }
        v31 = v30 + (v30 >> 2);
        if (v31 >= 0x10)
          v32 = v31 + 1;
        else
          v32 = 16;
        if (v32 <= v10)
          v33 = v6 + v29;
        else
          v33 = v32;
        if (!HIDWORD(v33))
        {
          v34 = *(const void **)(a1 + 40);
          v35 = (void *)WTF::fastMalloc((WTF *)v33);
          *(_DWORD *)(a1 + 48) = v33;
          *(_QWORD *)(a1 + 40) = v35;
          memcpy(v35, v34, v29);
          if (v34)
          {
            if (*(const void **)(a1 + 40) == v34)
            {
              *(_QWORD *)(a1 + 40) = 0;
              *(_DWORD *)(a1 + 48) = 0;
            }
            WTF::fastFree((unint64_t)v34, v36, v37, v38, v39, v40, v41, v42);
          }
          goto LABEL_37;
        }
      }
    }
    else if (v3 == a2)
    {
      return;
    }
    __break(0xC471u);
    JUMPOUT(0x197B49EA4);
  }
}

void WTF::URLParser::advance<char16_t,(WTF::URLParser::ReportSyntaxViolation)1>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _WORD *v5;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v18;
  _WORD *v19;

  v2 = a2[1];
  if (v2)
  {
    v5 = (_WORD *)*a2;
    if (v2 != 1 && (*(_WORD *)*a2 & 0xFC00) == 55296)
    {
      v9 = 1;
      if ((v5[1] & 0xFC00) == 0xDC00)
        v9 = 2;
      v7 = v2 - v9;
      v8 = &v5[v9];
      *a2 = v8;
      for (a2[1] = v7; v7; a2[1] = v7)
      {
LABEL_14:
        v11 = *v8;
        if (v7 != 1 && (v11 & 0xFC00) == 0xD800)
        {
          v12 = v8[1];
          v13 = v12 & 0xFC00;
          v14 = v12 + (v11 << 10) - 56613888;
          if (v13 == 56320)
            v11 = v14;
        }
        v15 = v11 - 14;
        v16 = v11 - 11;
        if (v15 < 0xFFFFFFFB || v16 < 2)
          break;
        WTF::URLParser::syntaxViolation<char16_t>(a1, (uint64_t)v8);
        v18 = a2[1];
        if (!v18)
          goto LABEL_30;
        v19 = (_WORD *)*a2;
        if (v18 == 1)
        {
          v10 = 1;
        }
        else
        {
          v10 = 1;
          if ((*v19 & 0xFC00) == 0xD800)
          {
            if ((v19[1] & 0xFC00) == 0xDC00)
              v10 = 2;
            else
              v10 = 1;
          }
        }
        v7 = v18 - v10;
        v8 = &v19[v10];
        *a2 = v8;
      }
    }
    else
    {
      v7 = v2 - 1;
      v8 = v5 + 1;
      *a2 = v5 + 1;
      a2[1] = v7;
      if (v7)
        goto LABEL_14;
    }
  }
  else
  {
LABEL_30:
    __break(1u);
  }
}

uint64_t WTF::URLParser::checkLocalhostCodePoint<unsigned char>(unsigned __int8 **a1, int a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint64_t)*a1;
  if ((**a1 | (32 * (**a1 - 65 < 0x1A))) != a2)
    return 0;
  v4 = (unsigned __int8 *)(v3 + 1);
  *a1 = (unsigned __int8 *)(v3 + 1);
  a1[1] = v2 - 1;
  if (v2 != (unsigned __int8 *)1)
  {
    v5 = (unsigned __int8 *)(v3 + 2);
    v6 = v2 - 2;
    do
    {
      v7 = *v4;
      v8 = v7 - 14;
      v9 = v7 - 11;
      if (v8 < 0xFFFFFFFB || v9 < 2)
        break;
      ++v4;
      *a1 = v5;
      a1[1] = v6;
      ++v5;
      --v6;
    }
    while (v6 != (unsigned __int8 *)-1);
  }
  return 1;
}

uint64_t WTF::URLParser::checkLocalhostCodePoint<char16_t>(unsigned __int16 **a1, int a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 *i;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v18;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint64_t)*a1;
  v4 = **a1;
  v5 = v2 != (unsigned __int16 *)1 && (v4 & 0xFC00) == 55296;
  v6 = **a1;
  if (v5)
  {
    v7 = *(unsigned __int16 *)(v3 + 2);
    v5 = (v7 & 0xFC00) == 56320;
    v6 = v7 + (v4 << 10) - 56613888;
    if (!v5)
      v6 = **a1;
  }
  if ((v6 | (32 * ((v6 - 65) < 0x1A))) != a2)
    return 0;
  v8 = 1;
  if (v2 != (unsigned __int16 *)1 && (v4 & 0xFC00) == 0xD800)
  {
    if ((*(_WORD *)(v3 + 2) & 0xFC00) == 0xDC00)
      v8 = 2;
    else
      v8 = 1;
  }
  v9 = (unsigned __int16 *)(v3 + 2 * v8);
  *a1 = v9;
  for (i = (unsigned __int16 *)((char *)v2 - v8); i; i = (unsigned __int16 *)((char *)i - v11))
  {
    v12 = *v9;
    if (i == (unsigned __int16 *)1)
    {
      if ((v12 - 14) < 0xFFFFFFFB || (v12 - 11) < 2)
        break;
    }
    else
    {
      v13 = *v9;
      if ((v12 & 0xFC00) == 0xD800)
      {
        v14 = v9[1];
        v5 = (v14 & 0xFC00) == 56320;
        v13 = (v12 << 10) - 56613888 + v14;
        if (!v5)
          v13 = *v9;
      }
      v15 = v13 - 14;
      v16 = v13 - 11;
      if (v15 < 0xFFFFFFFB || v16 < 2)
        break;
    }
    if (i == (unsigned __int16 *)1)
    {
      v11 = 1;
    }
    else
    {
      v18 = v12 & 0xFC00;
      v11 = 1;
      if (v18 == 55296)
      {
        if ((v9[1] & 0xFC00) == 0xDC00)
          v11 = 2;
        else
          v11 = 1;
      }
    }
    v9 += v11;
    *a1 = v9;
  }
  a1[1] = i;
  return 1;
}

void WTF::URLParser::copyURLPartsUntil<unsigned char>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, _QWORD *a5)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;

  WTF::URLParser::syntaxViolation<unsigned char>(a1, a4);
  if (*(_DWORD *)(a1 + 48))
  {
    if (*(_DWORD *)(a1 + 52))
      *(_DWORD *)(a1 + 52) = 0;
    v16 = *(_QWORD *)(a1 + 40);
    if (v16)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 48) = 0;
      WTF::fastFree(v16, v9, v10, v11, v12, v13, v14, v15);
    }
  }
  switch(a3)
  {
    case 0:
      WTF::URLParser::copyASCIIStringUntil((WTF::URLParser *)a1, *(const WTF::String **)a2, (unint64_t)*(unsigned int *)(a2 + 8) >> 6);
      goto LABEL_23;
    case 1:
      WTF::URLParser::copyASCIIStringUntil((WTF::URLParser *)a1, *(const WTF::String **)a2, *(unsigned int *)(a2 + 12));
      goto LABEL_22;
    case 2:
      WTF::URLParser::copyASCIIStringUntil((WTF::URLParser *)a1, *(const WTF::String **)a2, *(unsigned int *)(a2 + 16));
      goto LABEL_21;
    case 3:
      WTF::URLParser::copyASCIIStringUntil((WTF::URLParser *)a1, *(const WTF::String **)a2, *(unsigned int *)(a2 + 20));
      goto LABEL_20;
    case 4:
      WTF::URLParser::copyASCIIStringUntil((WTF::URLParser *)a1, *(const WTF::String **)a2, *(unsigned int *)(a2 + 24));
      goto LABEL_19;
    case 5:
      WTF::URLParser::copyASCIIStringUntil((WTF::URLParser *)a1, *(const WTF::String **)a2, ((*(_DWORD *)(a2 + 8) >> 3) & 7u) + *(_DWORD *)(a2 + 24));
      goto LABEL_18;
    case 6:
      WTF::URLParser::copyASCIIStringUntil((WTF::URLParser *)a1, *(const WTF::String **)a2, *(unsigned int *)(a2 + 28));
      goto LABEL_17;
    case 7:
      WTF::URLParser::copyASCIIStringUntil((WTF::URLParser *)a1, *(const WTF::String **)a2, *(unsigned int *)(a2 + 32));
      goto LABEL_16;
    case 8:
      WTF::URLParser::copyASCIIStringUntil((WTF::URLParser *)a1, *(const WTF::String **)a2, *(unsigned int *)(a2 + 36));
      *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
LABEL_16:
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
LABEL_17:
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
LABEL_18:
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(a2 + 8) >> 3) & 7));
LABEL_19:
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
LABEL_20:
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
LABEL_21:
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
LABEL_22:
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
LABEL_23:
      v17 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | *(_DWORD *)(a2 + 8) & 1;
      *(_DWORD *)(a1 + 8) = v17;
      v18 = v17 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a2 + 8) >> 1) & 1));
      *(_DWORD *)(a1 + 8) = v18;
      v19 = (unsigned __int8 *)(*(_DWORD *)(a2 + 8) & 0xFFFFFFC0 | v18 & 0x3F);
      *(_DWORD *)(a1 + 8) = (_DWORD)v19;
      v20 = v19 >> 6;
      v21 = *(unsigned int *)(a1 + 52);
      if (v21 >= v19 >> 6)
        goto LABEL_24;
      goto LABEL_54;
    default:
      v19 = (unsigned __int8 *)*(unsigned int *)(a1 + 8);
      v20 = v19 >> 6;
      v21 = *(unsigned int *)(a1 + 52);
      if (v21 < v19 >> 6)
      {
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
LABEL_24:
      if (v19 < 0x40)
        goto LABEL_25;
      v19 = *(unsigned __int8 **)(a1 + 40);
      v27 = *v19;
      switch(v27)
      {
        case 'w':
          if (v20 == 3)
          {
            if (v19[1] != 115 || v19[2] != 115)
              goto LABEL_25;
          }
          else if (v20 != 2 || v19[1] != 115)
          {
            goto LABEL_25;
          }
          *a5 = 0;
LABEL_63:
          *(_BYTE *)(a1 + 56) = 1;
          return;
        case 'h':
          if (v20 == 5)
          {
LABEL_55:
            if (v19[1] == 116 && v19[2] == 116 && v19[3] == 112 && v19[4] == 115)
              goto LABEL_63;
            goto LABEL_25;
          }
          if (v20 != 4 || v19[1] != 116 || v19[2] != 116)
            goto LABEL_25;
          v28 = v19[3];
          break;
        case 'f':
          if (v20 == 4)
          {
            if (v19[1] == 105 && v19[2] == 108 && v19[3] == 101)
            {
              *(_BYTE *)(a1 + 57) = 1;
              *(_BYTE *)(a1 + 56) = 1;
              return;
            }
            goto LABEL_25;
          }
          if (v20 != 3 || v19[1] != 116)
            goto LABEL_25;
          v28 = v19[2];
          break;
        default:
          goto LABEL_25;
      }
      if (v28 == 112)
        goto LABEL_63;
LABEL_25:
      *(_BYTE *)(a1 + 56) = 0;
      *a5 = 0;
      v22 = ((*(_DWORD *)(a1 + 8) >> 3) & 7u) + *(_DWORD *)(a1 + 24);
      v23 = (v22 + 2);
      if (v21 > v23)
      {
        if (v21 <= v22)
        {
          __break(0xC471u);
          JUMPOUT(0x197B4A778);
        }
        v24 = *(_QWORD *)(a1 + 40);
        if (*(_BYTE *)(v24 + v22) == 47)
        {
          v25 = v22 + 1;
          if (v21 <= v25)
          {
            __break(0xC471u);
            JUMPOUT(0x197B4A780);
          }
          if (*(_BYTE *)(v24 + v25) == 46 && *(_BYTE *)(v24 + v23) == 47)
          {
            memmove((void *)(v24 + v25), (const void *)(v24 + v25 + 2), v21 - (v25 + 2));
            *(_DWORD *)(a1 + 52) -= 2;
            *(uint32x2_t *)(a1 + 28) = vqsub_u32(*(uint32x2_t *)(a1 + 28), (uint32x2_t)0x200000002);
            v26 = *(_DWORD *)(a1 + 36);
            if (v26 <= 2)
              v26 = 2;
            *(_DWORD *)(a1 + 36) = v26 - 2;
          }
        }
      }
      return;
  }
}

void WTF::URLParser::parseAuthority<unsigned char>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v13;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned __int8 v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;

  v3 = a2;
  if (!a3)
  {
    WTF::URLParser::syntaxViolation<unsigned char>(a1, (uint64_t)a2);
    if (*(_BYTE *)(a1 + 59))
      v34 = *(_DWORD *)(a1 + 52);
    else
      v34 = (_DWORD)v3 - *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 16) = v34;
    *(_DWORD *)(a1 + 20) = v34;
    return;
  }
  v5 = a3;
  v6 = *a2;
  if (v6 != 58)
  {
    do
    {
      if ((v6 & 0x80) != 0)
      {
        WTF::URLParser::syntaxViolation<unsigned char>(a1, (uint64_t)v3);
        WTF::URLParser::percentEncodeByte((WTF::URLParser *)a1, (v6 >> 6) | 0xC0);
        v15 = v6 & 0x3F | 0x80;
      }
      else
      {
        if (v6 != 127 && (WTF::characterClassTable[v6] & 1) == 0)
        {
          v37 = v6;
          if (*(_BYTE *)(a1 + 59))
          {
            v16 = *(unsigned int *)(a1 + 52);
            if ((_DWORD)v16 == *(_DWORD *)(a1 + 48))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(a1 + 40, &v37);
            }
            else
            {
              *(_BYTE *)(*(_QWORD *)(a1 + 40) + v16) = v6;
              ++*(_DWORD *)(a1 + 52);
            }
          }
          goto LABEL_16;
        }
        WTF::URLParser::syntaxViolation<unsigned char>(a1, (uint64_t)v3);
        v15 = v6;
      }
      WTF::URLParser::percentEncodeByte((WTF::URLParser *)a1, v15);
LABEL_16:
      ++v3;
      if (!--v5)
        goto LABEL_62;
      while (1)
      {
        LOBYTE(v6) = *v3;
        v13 = *v3;
        if ((v13 - 14) < 0xFFFFFFFB || (v13 - 11) < 2)
          break;
        WTF::URLParser::syntaxViolation<unsigned char>(a1, (uint64_t)v3++);
        if (!--v5)
          goto LABEL_62;
      }
    }
    while (v13 != 58);
  }
  v7 = *(unsigned __int8 *)(a1 + 59);
  if (*(_BYTE *)(a1 + 59))
  {
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 52);
    v8 = v5 - 1;
    if (v5 != 1)
      goto LABEL_5;
  }
  else
  {
    *(_DWORD *)(a1 + 16) = (_DWORD)v3 - *(_DWORD *)(a1 + 72);
    v8 = v5 - 1;
    if (v5 != 1)
    {
LABEL_5:
      v9 = v3[1];
      v10 = v9 - 9;
      v11 = v9 - 13;
      if (v10 > 4 || v11 > 0xFFFFFFFD)
      {
        ++v3;
        v37 = 58;
        if (!v7)
          goto LABEL_44;
        goto LABEL_77;
      }
      if (v5 != 2)
      {
        v17 = 2;
        while (1)
        {
          v18 = v3[v17];
          v19 = v18 - 14;
          v20 = v18 - 11;
          if (v19 < 0xFFFFFFFB || v20 < 2)
            break;
          if (v5 == ++v17)
            goto LABEL_40;
        }
        WTF::URLParser::syntaxViolation<unsigned char>(a1, (uint64_t)v3);
        v24 = *(unsigned __int8 *)(a1 + 59);
        v3 += v17;
        v8 = v5 - v17;
        v37 = 58;
        if (!v24)
        {
LABEL_44:
          v25 = *v3;
LABEL_45:
          if ((v25 & 0x80) != 0)
          {
            WTF::URLParser::syntaxViolation<unsigned char>(a1, (uint64_t)v3);
            WTF::URLParser::percentEncodeByte((WTF::URLParser *)a1, (v25 >> 6) | 0xC0);
            v30 = v25 & 0x3F | 0x80;
          }
          else
          {
            if (v25 != 127 && (WTF::characterClassTable[v25] & 1) == 0)
            {
              v37 = v25;
              if (*(_BYTE *)(a1 + 59))
              {
                v31 = *(unsigned int *)(a1 + 52);
                if ((_DWORD)v31 == *(_DWORD *)(a1 + 48))
                {
                  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(a1 + 40, &v37);
                }
                else
                {
                  *(_BYTE *)(*(_QWORD *)(a1 + 40) + v31) = v25;
                  ++*(_DWORD *)(a1 + 52);
                }
              }
LABEL_49:
              while (1)
              {
                ++v3;
                if (!--v8)
                  break;
                v25 = *v3;
                v26 = *v3;
                v27 = v26 - 14;
                v28 = v26 - 11;
                if (v27 < 0xFFFFFFFB || v28 < 2)
                  goto LABEL_45;
                WTF::URLParser::syntaxViolation<unsigned char>(a1, (uint64_t)v3);
              }
LABEL_62:
              v32 = *(unsigned __int8 *)(a1 + 59);
              if (*(_BYTE *)(a1 + 59))
              {
                v33 = *(_DWORD *)(a1 + 52);
                *(_DWORD *)(a1 + 20) = v33;
                if (*(_DWORD *)(a1 + 16))
                {
LABEL_65:
                  v37 = 64;
                  if (!v32)
                    return;
                  goto LABEL_70;
                }
              }
              else
              {
                v33 = (_DWORD)v3 - *(_DWORD *)(a1 + 72);
                *(_DWORD *)(a1 + 20) = v33;
                if (*(_DWORD *)(a1 + 16))
                  goto LABEL_65;
              }
              *(_DWORD *)(a1 + 16) = v33;
              goto LABEL_65;
            }
            WTF::URLParser::syntaxViolation<unsigned char>(a1, (uint64_t)v3);
            v30 = v25;
          }
          WTF::URLParser::percentEncodeByte((WTF::URLParser *)a1, v30);
          goto LABEL_49;
        }
LABEL_77:
        v36 = *(unsigned int *)(a1 + 52);
        if ((_DWORD)v36 == *(_DWORD *)(a1 + 48))
        {
          WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(a1 + 40, &v37);
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)(a1 + 40) + v36) = 58;
          ++*(_DWORD *)(a1 + 52);
        }
        goto LABEL_44;
      }
    }
  }
LABEL_40:
  WTF::URLParser::syntaxViolation<unsigned char>(a1, (uint64_t)v3);
  v23 = *(_DWORD *)(a1 + 12);
  v22 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 20) = v22;
  if (v22 > v23)
  {
    v37 = 64;
    if (*(_BYTE *)(a1 + 59))
    {
LABEL_70:
      v35 = *(unsigned int *)(a1 + 52);
      if ((_DWORD)v35 == *(_DWORD *)(a1 + 48))
      {
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(a1 + 40, &v37);
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 40) + v35) = 64;
        ++*(_DWORD *)(a1 + 52);
      }
    }
  }
}

uint64_t WTF::URLParser::parseHostAndPort<unsigned char>()
{
  unint64_t v0;
  _BYTE *v1;
  _BYTE *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 *v16;
  _BYTE *v18;
  uint64_t v19;
  WTF **v20;
  int v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  char *v31;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  BOOL v70;
  unint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  __int16 v74;
  __int16 v75;
  int v76;
  unsigned __int8 v78;
  unsigned int v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned __int8 v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  unsigned __int8 *v88;
  uint64_t v90;
  unsigned __int8 v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  BOOL v96;
  unsigned __int8 v97;
  uint64_t v98;
  unsigned __int8 v99;
  uint64_t v101;
  unsigned __int8 *v102;
  __int16 v103;
  unsigned __int8 *v104;
  uint64_t v105;
  uint64_t v107;
  unsigned int v108;
  unsigned __int8 v109;
  unsigned __int8 v110;
  unsigned __int8 v111;
  BOOL v113;
  unsigned int v114;
  unsigned __int8 v115;
  unsigned __int8 v116;
  unsigned __int8 v117;
  unsigned __int8 v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v125;
  unsigned __int8 *v126;
  uint64_t v128;
  BOOL v129;
  unint64_t v130;
  unsigned __int8 v131;
  int v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v136;
  unsigned int v138;
  unsigned __int8 v139;
  unsigned __int8 v140;
  uint64_t v141;
  int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned __int8 v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  BOOL v151;
  uint64_t v152;
  unsigned __int8 *v153;
  uint64_t v155;
  unsigned __int8 v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  int v161;
  unsigned int v162;
  unsigned int v163;
  _BOOL4 v164;
  int v165;
  unint64_t v167;
  uint64_t v168;
  unsigned __int8 *v169;
  char *v170;
  int v171;
  int v172;
  size_t v173;
  uint64_t v174;
  unint64_t v175;
  WTF::AtomStringImpl *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  BOOL v191;
  int v192;
  unsigned int v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  unsigned __int8 *v202;
  uint64_t v203;
  size_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  WTF::StringImpl *v208;
  unint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  WTF *v217;
  unint64_t v218;
  int v219;
  __int16 v220;
  _WORD *v221;
  __int16 v222;
  unint64_t v223;
  uint64_t v224;
  __int16 v225;
  unint64_t v226;
  uint64_t v227;
  __int16 v228;
  unint64_t v229;
  uint64_t v230;
  __int16 v231;
  unint64_t v232;
  uint64_t v233;
  __int16 v234;
  unint64_t v235;
  uint64_t v236;
  __int16 v237;
  unint64_t v238;
  uint64_t v239;
  __int16 v240;
  unint64_t v241;
  uint64_t v242;
  __int16 v243;
  unint64_t v244;
  uint64_t v245;
  int v246;
  int v247;
  uint64_t v248;
  unint64_t v249;
  BOOL v250;
  uint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  _BYTE *v256;
  int v257;
  unsigned int v258;
  unsigned int v259;
  uint64_t v261;
  unsigned __int8 *v262;
  unsigned __int8 *v263;
  BOOL v264;
  __int16 v265;
  uint64_t v266;
  char v267;
  unint64_t v268;
  BOOL v269;
  unint64_t v270;
  BOOL v271;
  uint64_t v272;
  _OWORD __src[129];
  char v274;
  WTF::StringImpl *v275;
  WTF *v276;
  int v277;
  unsigned int v278;
  __int128 v279;
  _BYTE v280[2048];
  __int128 v281;
  __int128 v282;
  uint64_t v283;
  int v284;
  char v285;

  v2 = (_BYTE *)MEMORY[0x1E0C80A78]();
  *(_QWORD *)&v282 = v3;
  *((_QWORD *)&v282 + 1) = v4;
  if (!v4)
    return 0;
  v8 = v3;
  v9 = *v3;
  if (v9 == 58)
    return 0;
  v10 = (uint64_t)v2;
  if (v9 != 91)
  {
    v19 = v4;
    if (v2[56])
    {
      if (!v2[58])
      {
        if ((v9 & 0xFFFFFFEF) != 0x2F)
        {
          v28 = 1;
          v29 = *v3;
          v30 = v4;
          v31 = (char *)v3;
          while (2)
          {
            if (v29 != 35 && v29 != 58)
            {
              switch(v28)
              {
                case 1:
                  if ((v9 & 0xDF) != 0x58)
                    goto LABEL_61;
                  v28 = 2;
                  if (!--v30)
                    break;
                  goto LABEL_65;
                case 2:
                  if ((v9 & 0xDF) != 0x4E)
                    goto LABEL_61;
                  v28 = 3;
                  if (!--v30)
                    break;
                  goto LABEL_65;
                case 3:
                  if (v29 == 45)
                  {
                    v28 = 4;
                    if (!--v30)
                      break;
                  }
                  else if (v29 == 46)
                  {
LABEL_62:
                    v28 = 1;
                    if (!--v30)
                      break;
                  }
                  else
                  {
LABEL_64:
                    v28 = 0;
                    if (!--v30)
                      break;
                  }
LABEL_65:
                  ++v31;
                  while (1)
                  {
                    v29 = *v31;
                    v9 = *v31;
                    if ((v9 - 14) < 0xFFFFFFFB || (v9 - 11) < 2)
                      break;
                    ++v31;
                    if (!--v30)
                      goto LABEL_18;
                  }
                  if ((v9 & 0xFFFFFFEF) == 0x2F)
                    break;
                  continue;
                case 4:
                  if (v29 == 46)
                    goto LABEL_62;
                  if (v29 == 45)
                    goto LABEL_401;
                  goto LABEL_64;
                default:
LABEL_61:
                  if (v29 == 46)
                    goto LABEL_62;
                  goto LABEL_64;
              }
            }
            break;
          }
        }
LABEL_18:
        __src[0] = v282;
        v20 = (WTF **)&v3[v4];
        while (1)
        {
          v21 = *v8;
          if ((v21 - 9) > 4)
          {
            if (v21 == 58)
            {
              v20 = (WTF **)v8;
LABEL_81:
              *(_QWORD *)&v282 = v20;
              *((_QWORD *)&v282 + 1) = v19;
              v8 = *(_BYTE **)&__src[0];
              if ((uint64_t)v20 - *(_QWORD *)&__src[0] < 0)
                goto LABEL_562;
              WTF::URLParser::parseIPv4Host<unsigned char,unsigned char>((uint64_t *)&v279, v2, (uint64_t *)__src, *(unsigned __int8 **)&__src[0], (uint64_t)v20 - *(_QWORD *)&__src[0], v5, v6, v7);
              if (DWORD1(v279) != 1)
              {
                if (!DWORD1(v279))
                {
                  WTF::URLParser::serializeIPv4((WTF::URLParser *)v10, v279);
                  if (*(_BYTE *)(v10 + 59))
                  {
                    *(_DWORD *)(v10 + 24) = *(_DWORD *)(v10 + 52);
                    if (v19)
                    {
LABEL_86:
                      if (WTF::URLParser::parsePort<unsigned char>(v10, (uint64_t *)&v282))
                        return 3;
                      else
                        return 0;
                    }
                  }
                  else
                  {
                    *(_DWORD *)(v10 + 24) = (_DWORD)v20 - *(_DWORD *)(v10 + 72);
                    if (v19)
                      goto LABEL_86;
                  }
                  *(_DWORD *)(v10 + 8) &= 0xFFFFFFC7;
                  return 4;
                }
LABEL_463:
                std::__throw_bad_variant_access[abi:sn180100]();
LABEL_464:
                *(_DWORD *)(v10 + 24) = *(_DWORD *)(v10 + 52);
                if (!v19)
                  goto LABEL_465;
LABEL_434:
                if (WTF::URLParser::parsePort<unsigned char>(v10, (uint64_t *)&v282))
                  v34 = 3;
                else
                  v34 = 0;
                goto LABEL_476;
              }
              if (!(_DWORD)v279)
                return 0;
              v1 = (_BYTE *)*((_QWORD *)&__src[0] + 1);
              if (v8 != (_BYTE *)v20 || *((_QWORD *)&__src[0] + 1) != v19)
              {
                if (!*((_QWORD *)&__src[0] + 1))
                {
                  __break(1u);
                  goto LABEL_463;
                }
                v35 = 0;
                v0 = v10 + 40;
                v36 = ~v19 + *((_QWORD *)&__src[0] + 1);
                while (2)
                {
                  v37 = v8[v35];
                  if (v37 - 14 < 0xFFFFFFFB || v37 - 11 < 2)
                  {
                    if (v37 - 65 <= 0x19)
                    {
                      WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)&v8[v35]);
                      v37 = v8[v35];
                    }
                    v39 = v37 | (32 * (v37 - 65 < 0x1A));
                    LODWORD(v276) = v39;
                    if (*(_BYTE *)(v10 + 59))
                    {
                      v40 = *(unsigned int *)(v10 + 52);
                      if ((_DWORD)v40 == *(_DWORD *)(v10 + 48))
                      {
                        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(v10 + 40, &v276);
                        if (&v8[v35 + 1] == (_BYTE *)v20)
                          goto LABEL_105;
                      }
                      else
                      {
                        *(_BYTE *)(*(_QWORD *)(v10 + 40) + v40) = v39;
                        ++*(_DWORD *)(v10 + 52);
                        if (&v8[v35 + 1] == (_BYTE *)v20)
                          goto LABEL_105;
                      }
                    }
                    else
                    {
                      if (&v8[v35 + 1] != (_BYTE *)v20)
                        goto LABEL_94;
LABEL_105:
                      if (v36 == v35)
                      {
                        *(_QWORD *)&__src[0] = &v8[v35 + 1];
                        v8 = v20;
                        goto LABEL_134;
                      }
                    }
LABEL_94:
                    if (v1 == (_BYTE *)++v35)
                    {
                      v22 = &v8[v35];
                      *(_QWORD *)&__src[0] = &v8[v35];
                      __break(1u);
                      goto LABEL_417;
                    }
                    continue;
                  }
                  break;
                }
                WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)&v8[v35]);
                if (&v8[v35 + 1] != (_BYTE *)v20)
                  goto LABEL_94;
                goto LABEL_105;
              }
LABEL_134:
              *((_QWORD *)&__src[0] + 1) = v19;
              v48 = *(unsigned __int8 *)(v10 + 59);
              if (*(_BYTE *)(v10 + 59))
                v49 = *(_DWORD *)(v10 + 52);
              else
                v49 = (_DWORD)v8 - *(_DWORD *)(v10 + 72);
              *(_DWORD *)(v10 + 24) = v49;
              LODWORD(v50) = *(_DWORD *)(v10 + 20);
              if ((_DWORD)v50 == *(_DWORD *)(v10 + 12))
                v50 = v50;
              else
                v50 = (v50 + 1);
              v51 = (v49 - v50);
              if (v48)
              {
                v200 = *(unsigned int *)(v10 + 52);
                if (v200 < v50 || v200 - v50 < v51)
                  goto LABEL_562;
                if ((WTF::dnsNameEndsInNumber((unsigned __int8 *)(*(_QWORD *)(v10 + 40) + v50), v51 | 0x100000000) & 1) != 0)
                  return 0;
              }
              else
              {
                v52 = *(_QWORD *)(v10 + 64);
                if (v52)
                {
                  v53 = *(unsigned __int8 **)(v52 + 8);
                  v54 = *(unsigned int *)(v52 + 4) | ((unint64_t)((*(_DWORD *)(v52 + 16) >> 2) & 1) << 32);
                }
                else
                {
                  v53 = 0;
                  v54 = 0x100000000;
                }
                if (v54 <= v50)
                {
                  if ((WTF::dnsNameEndsInNumber("", 0x100000000) & 1) != 0)
                    return 0;
                  goto LABEL_395;
                }
                if ((int)v54 - (int)v50 > v51)
                  goto LABEL_147;
                if ((_DWORD)v50)
                {
                  v51 = (v54 - v50);
LABEL_147:
                  v55 = v54 - v50;
                  if ((v54 & 0x100000000) != 0)
                  {
                    if (v55 >= v51)
                    {
                      if ((WTF::dnsNameEndsInNumber(&v53[v50], v51 | 0x100000000) & 1) != 0)
                        return 0;
                      goto LABEL_395;
                    }
                  }
                  else if (v55 >= v51)
                  {
                    if ((WTF::dnsNameEndsInNumber(&v53[2 * v50], v51) & 1) != 0)
                      return 0;
                    goto LABEL_395;
                  }
LABEL_562:
                  __break(1u);
                  goto LABEL_563;
                }
                if ((WTF::dnsNameEndsInNumber(v53, v54) & 1) != 0)
                  return 0;
              }
LABEL_395:
              if (v19)
              {
                if (WTF::URLParser::parsePort<unsigned char>(v10, (uint64_t *)__src))
                  return 5;
                else
                  return 0;
              }
              else
              {
                *(_DWORD *)(v10 + 8) &= 0xFFFFFFC7;
                return 6;
              }
            }
            if ((v21 & 0x80) == 0)
            {
LABEL_19:
              if ((WTF::characterClassTable[*v8] & 8) != 0)
                return 0;
            }
          }
          else if ((v21 - 11) < 2)
          {
            goto LABEL_19;
          }
          ++v8;
          if (!--v19)
            goto LABEL_81;
        }
      }
LABEL_401:
      v281 = v282;
      v1 = v280;
      *(_QWORD *)&v279 = v280;
      *((_QWORD *)&v279 + 1) = 2048;
      v168 = v282;
      v169 = (unsigned __int8 *)v282;
      v170 = (char *)v3;
      while (1)
      {
        v171 = *v170;
        if ((v171 - 9) > 4)
          break;
        if ((v171 - 11) < 2)
          goto LABEL_408;
        WTF::URLParser::syntaxViolation<unsigned char>(v10, v168);
LABEL_403:
        v169 = (unsigned __int8 *)(v170 + 1);
        ++v8;
        ++v170;
        if (!--v19)
          goto LABEL_419;
      }
      if (v171 == 58)
      {
        v8 = v169;
        LODWORD(v169) = (_DWORD)v170;
LABEL_419:
        *(_QWORD *)&v282 = v8;
        *((_QWORD *)&v282 + 1) = v19;
        v20 = &v276;
        WTF::URLParser::percentDecode<unsigned char>((uint64_t)&v276, v10, v279, (WTF *)HIDWORD(v279), (uint64_t *)&v281);
        if (!v276 || (WTF::fromUTF8Impl<false>((unint64_t)v276, v278, (uint64_t *)&v275), !v275))
        {
          v34 = 0;
          goto LABEL_480;
        }
        if (!WTF::operator==(*((unsigned __int8 **)v275 + 1), *((unsigned int *)v275 + 1) | ((unint64_t)((*((_DWORD *)v275 + 4) >> 2) & 1) << 32), (unsigned __int8 *)v276, v278 | 0x100000000))WTF::URLParser::syntaxViolation<unsigned char>(v10, v168);
        WTF::URLParser::domainToASCII<unsigned char>();
        if (v274)
        {
          v186 = HIDWORD(__src[0]);
          v8 = *(_BYTE **)&__src[0];
          if (!HIDWORD(__src[0]))
            goto LABEL_430;
          v190 = 0;
          v191 = 1;
          do
          {
            if ((*(char *)(*(_QWORD *)&__src[0] + v190) & 0x80000000) == 0
              && (WTF::characterClassTable[*(unsigned __int8 *)(*(_QWORD *)&__src[0] + v190)] & 8) != 0)
            {
              break;
            }
            v191 = ++v190 < (unint64_t)HIDWORD(__src[0]);
          }
          while (HIDWORD(__src[0]) != v190);
          if (!v191)
          {
LABEL_430:
            WTF::URLParser::parseIPv4Host<unsigned char,unsigned char>(&v272, (void *)v10, (uint64_t *)&v281, *(unsigned __int8 **)&__src[0], HIDWORD(__src[0]), v187, v188, v189);
            if (HIDWORD(v272) != 1)
            {
              if (HIDWORD(v272))
                goto LABEL_463;
              WTF::URLParser::serializeIPv4((WTF::URLParser *)v10, v272);
              if (*(_BYTE *)(v10 + 59))
                goto LABEL_464;
              *(_DWORD *)(v10 + 24) = (_DWORD)v169 - *(_DWORD *)(v10 + 72);
              if (v19)
                goto LABEL_434;
LABEL_465:
              *(_DWORD *)(v10 + 8) &= 0xFFFFFFC7;
              v34 = 4;
LABEL_476:
              std::optional<WTF::Vector<unsigned char,2048ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional((uint64_t)__src, v183, v184, v185, v186, v187, v188, v189);
              v208 = v275;
              v275 = 0;
              if (v208)
              {
                if (*(_DWORD *)v208 == 2)
                {
                  WTF::StringImpl::~StringImpl(v208, v176, v177, v178, v179, v180, v181, v182);
                  WTF::fastFree(v209, v210, v211, v212, v213, v214, v215, v216);
                }
                else
                {
                  *(_DWORD *)v208 -= 2;
                }
              }
LABEL_480:
              v217 = v276;
              if (v20 + 2 != (WTF **)v276 && v276)
              {
                v276 = 0;
                v277 = 0;
                WTF::fastFree((unint64_t)v217, v176, v177, v178, v179, v180, v181, v182);
              }
              v218 = v279;
              if (v1 != (_BYTE *)v279 && (_QWORD)v279)
              {
                *(_QWORD *)&v279 = 0;
                DWORD2(v279) = 0;
                WTF::fastFree(v218, v176, v177, v178, v179, v180, v181, v182);
              }
              return v34;
            }
            if ((_DWORD)v272)
            {
              if (!*(_BYTE *)(v10 + 59))
                goto LABEL_440;
              v204 = HIDWORD(__src[0]);
              v205 = *(unsigned int *)(v10 + 52);
              if (HIDWORD(__src[0]))
              {
                v0 = v205 + HIDWORD(__src[0]);
                if (v0 > *(unsigned int *)(v10 + 48))
                {
                  v206 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(v10 + 40, (WTF *)(v205 + HIDWORD(__src[0])), (uint64_t)v8);
                  v205 = *(unsigned int *)(v10 + 52);
                  if (v0 < v205)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197B4C6A0);
                  }
                  v8 = (_BYTE *)v206;
                }
                memcpy((void *)(*(_QWORD *)(v10 + 40) + v205), v8, v204);
                *(_DWORD *)(v10 + 52) = v0;
                v192 = *(unsigned __int8 *)(v10 + 59);
                if (!*(_BYTE *)(v10 + 59))
                {
LABEL_440:
                  v192 = 0;
                  v0 = ((_DWORD)v169 - *(_DWORD *)(v10 + 72));
                }
              }
              else
              {
                v192 = 1;
                v0 = *(unsigned int *)(v10 + 52);
              }
              *(_DWORD *)(v10 + 24) = v0;
              v193 = *(_DWORD *)(v10 + 20);
              if (v193 == *(_DWORD *)(v10 + 12))
                v194 = v193;
              else
                v194 = v193 + 1;
              v195 = (v0 - v194);
              if (v192)
              {
                v207 = *(unsigned int *)(v10 + 52);
                if (v207 < v194 || v207 - v194 < v195)
                  goto LABEL_562;
                if ((WTF::dnsNameEndsInNumber((unsigned __int8 *)(*(_QWORD *)(v10 + 40) + v194), v195 | 0x100000000) & 1) == 0)
                {
LABEL_457:
                  if (v19)
                  {
                    if (WTF::URLParser::parsePort<unsigned char>(v10, (uint64_t *)&v282))
                      v34 = 5;
                    else
                      v34 = 0;
                  }
                  else
                  {
                    *(_DWORD *)(v10 + 8) &= 0xFFFFFFC7;
                    v34 = 6;
                  }
                  goto LABEL_476;
                }
              }
              else
              {
                v283 = 0;
                v196 = *(_QWORD *)(v10 + 64);
                if (v196)
                {
                  v197 = *(unsigned __int8 *)(v196 + 16);
                  v198 = *(_QWORD *)(v196 + 8);
                  LODWORD(v196) = *(_DWORD *)(v196 + 4);
                  v283 = v198;
                  v199 = (v197 >> 2) & 1;
                }
                else
                {
                  LOBYTE(v199) = 1;
                }
                v284 = v196;
                v285 = v199;
                v202 = (unsigned __int8 *)WTF::StringView::substring((const char *)&v283, v194, v195);
                if ((WTF::dnsNameEndsInNumber(v202, v203) & 1) == 0)
                  goto LABEL_457;
              }
            }
          }
        }
        v34 = 0;
        goto LABEL_476;
      }
LABEL_408:
      if ((v171 & 0x80) != 0)
        WTF::URLParser::syntaxViolation<unsigned char>(v10, v168);
      v172 = *v170;
      if (v172 < 0)
      {
        BYTE1(__src[0]) = v172 & 0x3F | 0x80;
        LOBYTE(v172) = (v172 >> 6) | 0xC0;
        v173 = 2;
      }
      else
      {
        v173 = 1;
      }
      LOBYTE(__src[0]) = v172;
      v174 = HIDWORD(v279);
      v175 = v173 + HIDWORD(v279);
      if (v175 > DWORD2(v279))
      {
        WTF::Vector<unsigned char,2048ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)&v279, (WTF *)(v173 + HIDWORD(v279)));
        v174 = HIDWORD(v279);
        if (v175 < HIDWORD(v279))
        {
          *(_QWORD *)&v282 = v169;
          __break(0xC471u);
          JUMPOUT(0x197B4C698);
        }
      }
      memcpy((void *)(v279 + v174), __src, v173);
      HIDWORD(v279) = v175;
      goto LABEL_403;
    }
    v22 = (char *)v282;
    v23 = v3;
    while (1)
    {
      v24 = (char)*v23;
      v25 = *v23;
      if ((v25 - 9) > 4)
      {
        if (v24 == 58)
        {
          v33 = 0;
          *(_QWORD *)&v282 = v22;
          *((_QWORD *)&v282 + 1) = v19;
          if (*(_BYTE *)(v10 + 59))
          {
LABEL_130:
            *(_DWORD *)(v10 + 24) = *(_DWORD *)(v10 + 52);
            if (!v33)
            {
LABEL_131:
              if (WTF::URLParser::parsePort<unsigned char>(v10, (uint64_t *)&v282))
                return 8;
              else
                return 0;
            }
LABEL_79:
            *(_DWORD *)(v10 + 8) &= 0xFFFFFFC7;
            return 7;
          }
LABEL_78:
          *(_DWORD *)(v10 + 24) = (_DWORD)v23 - *(_DWORD *)(v10 + 72);
          if (!v33)
            goto LABEL_131;
          goto LABEL_79;
        }
      }
      else if ((v25 - 11) >= 2)
      {
        WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)v23);
        goto LABEL_29;
      }
      if (v24 < 0)
      {
        WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)v23);
        WTF::URLParser::percentEncodeByte((WTF::URLParser *)v10, (v24 >> 6) | 0xC0);
        v26 = v24 & 0x3F | 0x80;
      }
      else
      {
        if ((WTF::characterClassTable[*v23] & 4) != 0)
        {
          if (v24 != 37)
          {
LABEL_417:
            v34 = 0;
            *(_QWORD *)&v282 = v22;
            return v34;
          }
LABEL_41:
          LODWORD(__src[0]) = *v23;
          if (*(_BYTE *)(v10 + 59))
          {
            v27 = *(unsigned int *)(v10 + 52);
            if ((_DWORD)v27 == *(_DWORD *)(v10 + 48))
            {
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char32_t &>(v10 + 40, __src);
            }
            else
            {
              *(_BYTE *)(*(_QWORD *)(v10 + 40) + v27) = v24;
              ++*(_DWORD *)(v10 + 52);
            }
          }
          goto LABEL_29;
        }
        if ((v24 - 127) > 0xA0u)
          goto LABEL_41;
        WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)v23);
        v26 = v24;
      }
      WTF::URLParser::percentEncodeByte((WTF::URLParser *)v10, v26);
LABEL_29:
      v22 = (char *)(v23 + 1);
      ++v8;
      ++v23;
      if (!--v19)
      {
        v33 = 1;
        LODWORD(v23) = (_DWORD)v22;
        v282 = (unint64_t)v8;
        if (*(_BYTE *)(v10 + 59))
          goto LABEL_130;
        goto LABEL_78;
      }
    }
  }
  v279 = v282;
  v0 = *((_QWORD *)&v282 + 1);
  if (!*((_QWORD *)&v282 + 1))
    return 0;
  v11 = v279;
  if (*(_BYTE *)v279 != 93)
  {
    do
    {
      if (!--v0)
        return 0;
      v12 = *(unsigned __int8 *)++v11;
    }
    while (v12 != 93);
  }
  *(_QWORD *)&v279 = v11;
  *((_QWORD *)&v279 + 1) = v0;
  v13 = v11 - (_QWORD)v3;
  if (v11 - (uint64_t)v3 <= 0)
    goto LABEL_562;
  v14 = v13 - 1;
  if (v13 == 1)
    return 0;
  v16 = v3 + 1;
  v15 = v3[1];
  if (v15 - 14 >= 0xFFFFFFFB && v15 - 11 >= 2)
  {
    v41 = 0;
    do
    {
      WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)v8);
      if (v13 - 2 == v41)
        return 0;
      v15 = v8[v41++ + 2];
    }
    while (v15 - 14 >= 0xFFFFFFFB && v15 - 11 >= 2);
    v18 = &v8[v41];
    v16 = &v8[v41 + 1];
    v13 -= v41;
    v14 = v13 - 1;
  }
  else
  {
    v18 = v3;
  }
  v43 = 0;
  __src[0] = 0uLL;
  v44 = v15;
  v271 = v15 == 58;
  if (v15 == 58)
  {
    if (v13 == 2)
      return 0;
    v16 = v18 + 3;
    v45 = 3 - v13;
    while (1)
    {
      v46 = *(v16 - 1);
      if ((v46 - 14) < 0xFFFFFFFB || (v46 - 11) < 2)
        break;
      WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)v8);
      ++v16;
      if (++v45 == 1)
        return 0;
    }
    if (v46 != 58)
      return 0;
    if (!v45)
    {
      LODWORD(v167) = 0;
      v43 = 1;
      goto LABEL_507;
    }
    v14 = -v45;
    v43 = 1;
    while (1)
    {
      v56 = *v16;
      v57 = v56 - 14;
      v58 = v56 - 11;
      if (v57 < 0xFFFFFFFB || v58 < 2)
        break;
      WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)v8);
      ++v16;
      if (!--v14)
        goto LABEL_506;
    }
  }
  v267 = 0;
  v60 = v44 != 58;
  while (1)
  {
    v269 = v60;
    v270 = v43;
    if (v43 <= 8)
      v61 = 8;
    else
      v61 = v43;
    v266 = v61;
    if (v43 == 8)
      return 0;
    v62 = *v16;
    if (v62 != 58)
      break;
    v63 = v43;
    v64 = v16;
LABEL_170:
    if (!v269)
      return 0;
    v16 = v64 + 1;
    if (v14 == 1)
    {
      v14 = 0;
    }
    else
    {
      v65 = &v64[v14--];
      while (1)
      {
        v66 = *v16;
        v67 = v66 - 14;
        v68 = v66 - 11;
        if (v67 < 0xFFFFFFFB || v68 < 2)
          break;
        WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)v8);
        ++v16;
        if (!--v14)
        {
          v16 = v65;
          break;
        }
      }
    }
    if ((v267 & 1) != 0)
      WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)v8);
    v60 = 0;
    LODWORD(v167) = 0;
    v43 = v63 + 1;
    v271 = 1;
    if (!v14)
    {
LABEL_507:
      v244 = 0;
      v245 = 0;
      v246 = 0;
      v247 = 0;
      do
      {
        while (1)
        {
          v248 = v245;
          if (!*((_WORD *)__src + v245))
          {
            v248 = v245 + 1;
            if (v245 != 7 && !*((_WORD *)__src + v248))
            {
              v248 = v245 + 2;
              if (v245 != 6 && !*((_WORD *)__src + v248))
              {
                v248 = v245 + 3;
                if (v245 != 5 && !*((_WORD *)__src + v248))
                {
                  v248 = v245 + 4;
                  if (v245 != 4 && !*((_WORD *)__src + v248))
                  {
                    v248 = v245 + 5;
                    if (v245 != 3 && !*((_WORD *)__src + v248))
                    {
                      v248 = v245 + 6;
                      if (v245 != 2 && !*((_WORD *)__src + v248))
                      {
                        v248 = v245 + 7;
                        if (v245 != 1 && !*((_WORD *)__src + v248))
                          v248 = 8;
                      }
                    }
                  }
                }
              }
            }
          }
          v249 = v248 - v245;
          if (v248 != v245)
            break;
          if ((unint64_t)++v245 >= 8)
            goto LABEL_541;
        }
        if (v246)
          v250 = v244 >= v249;
        else
          v250 = 0;
        if (!v250)
        {
          v252 = v248 - v245;
        }
        else
        {
          LODWORD(v245) = v247;
          v252 = v244;
        }
        if (v249 != 1)
        {
          v247 = v245;
          v246 = 1;
          v244 = v252;
        }
        v245 = v248 + 1;
      }
      while ((unint64_t)(v248 + 1) < 8);
LABEL_541:
      if (v246)
      {
        if (v43 != v247 + 1)
          LODWORD(v167) = 1;
        if ((_DWORD)v167 == 1)
LABEL_545:
          WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)v8);
      }
      else if ((v167 & 1) == 0)
      {
        goto LABEL_545;
      }
      WTF::URLParser::serializeIPv6((WTF::URLParser *)v10, *(unint64_t *)&__src[0], *((unint64_t *)&__src[0] + 1));
      v8 = (_BYTE *)(v11 + 1);
      --v0;
      *(_QWORD *)&v279 = v11 + 1;
      *((_QWORD *)&v279 + 1) = v0;
      if (v0)
      {
        v253 = v279;
        v254 = *v8;
        if ((v254 - 14) >= 0xFFFFFFFB && (v254 - 11) >= 2)
        {
          v255 = v11 + 2;
          v256 = (_BYTE *)(v11 + 2);
          do
          {
            v8 = v256;
            v253 = v255;
            WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)(v256 - 1));
            if (!--v0)
              break;
            v256 = v8 + 1;
            v257 = *v8;
            v258 = v257 - 14;
            v259 = v257 - 11;
            v255 = v253 + 1;
          }
          while (v258 >= 0xFFFFFFFB && v259 >= 2);
        }
        *(_QWORD *)&v279 = v253;
        *((_QWORD *)&v279 + 1) = v0;
      }
      if (!*(_BYTE *)(v10 + 59))
      {
        *(_DWORD *)(v10 + 24) = (_DWORD)v8 - *(_DWORD *)(v10 + 72);
        if (v0)
          goto LABEL_559;
LABEL_564:
        v34 = 2;
        goto LABEL_565;
      }
LABEL_563:
      *(_DWORD *)(v10 + 24) = *(_DWORD *)(v10 + 52);
      if (!v0)
        goto LABEL_564;
LABEL_559:
      if (*v8 == 58)
        return WTF::URLParser::parsePort<unsigned char>(v10, (uint64_t *)&v279);
      v34 = 0;
LABEL_565:
      *(_DWORD *)(v10 + 8) &= 0xFFFFFFC7;
      return v34;
    }
  }
  v70 = v271;
  v64 = v16;
  while (1)
  {
    if (v43 == 6 || v271 && v43 < 6)
    {
      v78 = 0;
      v79 = 0;
      v80 = v14;
      v81 = v64;
      v82 = v62;
      while (1)
      {
        v83 = v82 - 48;
        if (v83 > 9)
          break;
        v84 = v80;
        if (!v79)
        {
          if (((v82 == 48) & v78) != 0)
            break;
          v78 |= v82 == 48;
        }
        v79 = v83 + 10 * v79;
        v85 = v80 - 1;
        if (v79 > 0xFF || v84 == 1)
          break;
        v87 = 0;
        v88 = v81 + 2;
        while (1)
        {
          v82 = v81[v87 + 1];
          if (v82 - 14 < 0xFFFFFFFB || v82 - 11 < 2)
            break;
          ++v87;
          ++v88;
          if (v85 == v87)
            goto LABEL_183;
        }
        v80 = ~v87 + v84;
        v81 += v87 + 1;
        if (v82 == 46)
        {
          if (((v79 != 0) & v78) == 0 && v84 - 2 != v87)
          {
            v90 = v84 - v87 - 2;
            while (1)
            {
              v91 = *v88;
              v92 = *v88;
              v93 = v92 - 14;
              v94 = v92 - 11;
              if (v93 < 0xFFFFFFFB || v94 <= 1)
                break;
              ++v88;
              if (!--v90)
                goto LABEL_183;
            }
            v119 = 0;
            v120 = 0;
            while (1)
            {
              v121 = v91 - 48;
              if (v121 > 9)
                break;
              v122 = v90;
              if (!v120)
              {
                if (((v91 == 48) & v119) != 0)
                  goto LABEL_183;
                v119 |= v91 == 48;
              }
              v120 = v121 + 10 * v120;
              v123 = v90 - 1;
              if (v120 > 0xFF || v122 == 1)
                break;
              v125 = 0;
              v126 = v88 + 2;
              while (1)
              {
                v91 = v88[v125 + 1];
                if (v91 - 14 < 0xFFFFFFFB || v91 - 11 < 2)
                  break;
                ++v125;
                ++v126;
                if (v123 == v125)
                  goto LABEL_183;
              }
              v90 = ~v125 + v122;
              v88 += v125 + 1;
              if (v91 == 46)
              {
                if (((v120 != 0) & v119) == 0 && v122 - 2 != v125)
                {
                  v128 = v122 - v125 - 2;
                  while (1)
                  {
                    v129 = v70;
                    v130 = v43;
                    v131 = *v126;
                    v132 = *v126;
                    v133 = v132 - 14;
                    v134 = v132 - 11;
                    if (v133 < 0xFFFFFFFB || v134 <= 1)
                      break;
                    ++v126;
                    if (!--v128)
                      goto LABEL_183;
                  }
                  v146 = 0;
                  v147 = 0;
                  while (1)
                  {
                    v148 = v131 - 48;
                    v43 = v130;
                    v70 = v129;
                    if (v148 > 9)
                      break;
                    v149 = v128;
                    if (!v147)
                    {
                      v43 = v130;
                      v70 = v129;
                      if (((v131 == 48) & v146) != 0)
                        goto LABEL_183;
                      v146 |= v131 == 48;
                    }
                    v147 = v148 + 10 * v147;
                    v150 = v128 - 1;
                    v151 = v147 > 0xFF || v149 == 1;
                    v43 = v130;
                    v70 = v129;
                    if (v151)
                      break;
                    v152 = 0;
                    v153 = v126 + 2;
                    while (1)
                    {
                      v131 = v126[v152 + 1];
                      if (v131 - 14 < 0xFFFFFFFB || v131 - 11 < 2)
                        break;
                      ++v152;
                      ++v153;
                      v43 = v130;
                      v70 = v129;
                      if (v150 == v152)
                        goto LABEL_183;
                    }
                    v128 = ~v152 + v149;
                    v126 += v152 + 1;
                    if (v131 == 46)
                    {
                      v43 = v130;
                      v70 = v129;
                      if (((v147 != 0) & v146) == 0 && v149 - 2 != v152)
                      {
                        v155 = v149 - v152 - 2;
                        while (1)
                        {
                          v156 = *v153;
                          v157 = *v153;
                          v158 = v157 - 14;
                          v159 = v157 - 11;
                          if (v158 < 0xFFFFFFFB || v159 <= 1)
                            break;
                          ++v153;
                          --v155;
                          v43 = v130;
                          v70 = v129;
                          if (!v155)
                            goto LABEL_183;
                        }
                        v161 = 0;
                        v162 = 0;
                        v43 = v130;
                        v70 = v129;
                        while (1)
                        {
                          v163 = v156 - 48;
                          if (v163 > 9)
                            break;
                          if (!v162)
                          {
                            v164 = v156 == 48;
                            v43 = v130;
                            v70 = v129;
                            if ((v164 & v161 & 1) != 0)
                              goto LABEL_183;
                            v161 |= v164;
                          }
                          v43 = v130;
                          v70 = v129;
                          if (v163 + 10 * v162 > 0xFF)
                            break;
                          v162 = v163 + 10 * v162;
                          if (!--v155)
                          {
LABEL_380:
                            v43 = v130;
                            v70 = v129;
                            if (((v162 != 0) & v161) != 0)
                              goto LABEL_183;
                            if (v271 && v130 == 5)
                              return 0;
                            v219 = (v79 << 24) | (v120 << 16);
                            v220 = v162 | (unsigned __int16)((_WORD)v147 << 8);
                            WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)v8);
                            v221 = (_WORD *)__src + v130;
                            *v221 = HIWORD(v219);
                            v63 = v130 + 2;
                            v75 = v220;
                            v221[1] = v220;
                            if (v269)
                              goto LABEL_389;
                            goto LABEL_489;
                          }
                          ++v153;
                          while (1)
                          {
                            v156 = *v153;
                            v165 = *v153;
                            if ((v165 - 14) < 0xFFFFFFFB || (v165 - 11) < 2)
                              break;
                            ++v153;
                            if (!--v155)
                              goto LABEL_380;
                          }
                          v43 = v130;
                          v70 = v129;
                          if (v165 == 46)
                            goto LABEL_183;
                        }
                      }
                      goto LABEL_183;
                    }
                  }
                }
                goto LABEL_183;
              }
            }
          }
          break;
        }
      }
    }
LABEL_183:
    if (v62 - 48 >= 0xA && (v62 | 0x20u) - 97 > 5)
    {
      v71 = 0;
      v72 = v14;
      v73 = v64;
LABEL_186:
      v74 = 0;
      v267 = 1;
      if (!v70 && v71 <= 1)
        goto LABEL_187;
      goto LABEL_250;
    }
    v268 = v43;
    if (v62 - 65 <= 0x19)
    {
      v96 = v70;
      WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)v8);
      v70 = v96;
      LOBYTE(v62) = *v64;
    }
    if (v62 >= 0x41u)
      v97 = (v62 + 9) & 0xF;
    else
      v97 = v62 - 48;
    v74 = v97;
    if (v14 == 1)
    {
      v101 = 0;
      v102 = v64 + 1;
LABEL_247:
      v72 = 0;
      v71 = v101 + 1;
      v73 = v102;
      goto LABEL_248;
    }
    v264 = v70;
    v265 = v97;
    v98 = 0;
    while (1)
    {
      v99 = v64[v98 + 1];
      if (v99 - 14 < 0xFFFFFFFB || v99 - 11 < 2)
        break;
      WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)v8);
      if (v14 - 1 == ++v98)
      {
        v101 = 0;
        goto LABEL_242;
      }
    }
    v262 = &v64[v98 + 1];
    v72 = ~v98 + v14;
    if (v99 - 48 >= 0xA && (v99 | 0x20u) - 97 > 5)
    {
      v71 = 1;
      v70 = v264;
LABEL_263:
      v74 = v265;
      v73 = v262;
      goto LABEL_248;
    }
    v107 = ~v98 + v14;
    if (v99 - 65 <= 0x19)
    {
      WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)v8);
      v99 = *v262;
    }
    v108 = v99;
    v109 = v99 - 48;
    v110 = (v99 + 9) & 0xF;
    if (v108 < 0x41)
      v110 = v109;
    v74 = 16 * v265 + v110;
    if (v14 - 2 == v98)
    {
      v102 = &v64[v98 + 2];
      v101 = 1;
      v43 = v268;
      v70 = v264;
      goto LABEL_247;
    }
    v265 = 16 * v265 + v110;
    while (1)
    {
      v111 = v64[v98 + 2];
      if (v111 - 14 < 0xFFFFFFFB || v111 - 11 < 2)
        break;
      WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)v8);
      if (v14 - 2 == ++v98)
      {
        v101 = 1;
        v14 = v107;
        v64 = v262;
        goto LABEL_242;
      }
    }
    v262 = &v64[v98 + 2];
    v72 = v14 - v98 - 2;
    v113 = v111 - 48 >= 0xA && (v111 | 0x20u) - 97 > 5;
    v70 = v264;
    if (v113)
    {
      v71 = 2;
      v43 = v268;
      goto LABEL_263;
    }
    v261 = v14 - v98 - 2;
    v43 = v268;
    if (v111 - 65 <= 0x19)
    {
      WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)v8);
      v70 = v264;
      v111 = *v262;
    }
    v114 = v111;
    v115 = v111 - 48;
    v116 = (v111 + 9) & 0xF;
    if (v114 < 0x41)
      v116 = v115;
    v74 = 16 * v265 + v116;
    if (v14 - 3 == v98)
    {
      v102 = &v64[v98 + 3];
      v101 = 2;
      goto LABEL_247;
    }
    v265 = 16 * v265 + v116;
    while (1)
    {
      v117 = v64[v98 + 3];
      if (v117 - 14 < 0xFFFFFFFB || v117 - 11 < 2)
        break;
      WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)v8);
      if (v14 - 3 == ++v98)
      {
        v101 = 2;
        v14 = v261;
        v64 = v262;
        goto LABEL_242;
      }
    }
    v73 = &v64[v98 + 3];
    v136 = v14 - v98 - 3;
    if (v117 - 48 < 0xA || (v117 | 0x20u) - 97 <= 5)
    {
      v263 = &v64[v98 + 3];
      if (v117 - 65 <= 0x19)
      {
        WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)v8);
        v117 = *v263;
      }
      v138 = v117;
      v139 = v117 - 48;
      v140 = (v117 + 9) & 0xF;
      if (v138 < 0x41)
        v140 = v139;
      v265 = 16 * v265 + v140;
      v102 = &v64[v98 + 4];
      if (v14 - 4 == v98)
      {
        v101 = 3;
        v43 = v268;
      }
      else
      {
        v141 = v14 - v98 - 4;
        do
        {
          v142 = *v102;
          v143 = v142 - 14;
          v144 = v142 - 11;
          if (v143 < 0xFFFFFFFB || v144 < 2)
          {
            v73 = v102;
            v72 = v141;
            v71 = 4;
            v43 = v268;
            v70 = v264;
            v74 = v265;
            goto LABEL_248;
          }
          WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)v8);
          ++v102;
          --v141;
        }
        while (v141);
        v101 = 3;
        v14 = v136;
        v64 = v263;
LABEL_242:
        v43 = v268;
        v102 = &v64[v14];
      }
      v70 = v264;
      v74 = v265;
      goto LABEL_247;
    }
    v71 = 3;
    v43 = v268;
    v70 = v264;
    v74 = v265;
    v72 = v14 - v98 - 3;
LABEL_248:
    if (!v74)
      goto LABEL_186;
    v267 = 0;
    if (v62 != 48)
    {
LABEL_187:
      if (v43 == v266)
        goto LABEL_562;
      goto LABEL_188;
    }
LABEL_250:
    v103 = v74;
    v104 = v73;
    v105 = v72;
    WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)v8);
    v72 = v105;
    v73 = v104;
    v74 = v103;
    if (v43 == v266)
      goto LABEL_562;
LABEL_188:
    v63 = v43 + 1;
    v75 = v74;
    *((_WORD *)__src + v43) = v74;
    if (!v72)
      goto LABEL_388;
    if (v43 == 7 || *v73 != 58)
      return 0;
    v14 = v72 - 1;
    if (v72 == 1)
      break;
    v64 = v73 + 1;
    while (1)
    {
      LOBYTE(v62) = *v64;
      v76 = *v64;
      if ((v76 - 14) < 0xFFFFFFFB || (v76 - 11) < 2)
        break;
      WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)v8);
      ++v64;
      if (!--v14)
        goto LABEL_387;
    }
    v70 = 0;
    ++v43;
    if (v76 == 58)
      goto LABEL_170;
  }
LABEL_387:
  WTF::URLParser::syntaxViolation<unsigned char>(v10, (uint64_t)v8);
LABEL_388:
  if (!v269)
  {
LABEL_489:
    v43 = v270;
    v167 = v63 - v270;
    if (v63 == v270)
      goto LABEL_507;
    if (v63 - 1 < 8)
    {
      v222 = HIWORD(__src[0]);
      HIWORD(__src[0]) = v75;
      *((_WORD *)__src + v63 - 1) = v222;
      if (v167 == 1)
        goto LABEL_506;
      v223 = v270 - 1;
      if (v63 - 2 <= 7)
      {
        v224 = 2 * (v63 - 2);
        v225 = WORD6(__src[0]);
        WORD6(__src[0]) = *(_WORD *)((char *)__src + v224);
        *(_WORD *)((char *)__src + v224) = v225;
        if (v167 == 2)
          goto LABEL_506;
        v226 = v167 - 2 + v223;
        if (v226 <= 7)
        {
          v227 = 2 * v226;
          v228 = WORD5(__src[0]);
          WORD5(__src[0]) = *(_WORD *)((char *)__src + v227);
          *(_WORD *)((char *)__src + v227) = v228;
          if (v167 == 3)
            goto LABEL_506;
          v229 = v167 - 3 + v223;
          if (v229 <= 7)
          {
            v230 = 2 * v229;
            v231 = WORD4(__src[0]);
            WORD4(__src[0]) = *(_WORD *)((char *)__src + v230);
            *(_WORD *)((char *)__src + v230) = v231;
            if (v167 == 4)
              goto LABEL_506;
            v232 = v167 - 4 + v223;
            if (v232 <= 7)
            {
              v233 = 2 * v232;
              v234 = WORD3(__src[0]);
              WORD3(__src[0]) = *(_WORD *)((char *)__src + v233);
              *(_WORD *)((char *)__src + v233) = v234;
              if (v167 == 5)
                goto LABEL_506;
              v235 = v167 - 5 + v223;
              if (v235 <= 7)
              {
                v236 = 2 * v235;
                v237 = WORD2(__src[0]);
                WORD2(__src[0]) = *(_WORD *)((char *)__src + v236);
                *(_WORD *)((char *)__src + v236) = v237;
                if (v167 == 6)
                  goto LABEL_506;
                v238 = v167 - 6 + v223;
                if (v238 <= 7)
                {
                  v239 = 2 * v238;
                  v240 = WORD1(__src[0]);
                  WORD1(__src[0]) = *(_WORD *)((char *)__src + v239);
                  *(_WORD *)((char *)__src + v239) = v240;
                  if (v167 == 7
                    || (v241 = v167 - 7 + v223, v241 <= 7)
                    && (v242 = 2 * v241,
                        v243 = __src[0],
                        LOWORD(__src[0]) = *(_WORD *)((char *)__src + v242),
                        *(_WORD *)((char *)__src + v242) = v243,
                        v167 == 8))
                  {
LABEL_506:
                    LODWORD(v167) = 0;
                    goto LABEL_507;
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_562;
  }
LABEL_389:
  if (v63 == 8)
  {
    LODWORD(v167) = 1;
    v43 = v270;
    goto LABEL_507;
  }
  return 0;
}

