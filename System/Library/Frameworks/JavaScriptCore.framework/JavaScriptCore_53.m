void JSC::Wasm::LLIntPlan::work(uint64_t a1, int a2)
{
  if (*(_BYTE *)(a1 + 352) == 2)
    JSC::Wasm::EntryPlan::compileFunctions(a1, a2);
}

uint64_t JSC::Wasm::LLIntPlan::didReceiveFunctionData()
{
  return 1;
}

uint64_t `non-virtual thunk to'JSC::Wasm::LLIntPlan::didReceiveFunctionData()
{
  return 1;
}

void JSC::Wasm::startTrackingCurrentThread(JSC::Wasm *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  WTF::WordLock *v11;
  WTF::WordLock *v13;
  unint64_t v14;
  char v15;
  WTF::WordLock **v16;
  WTF::WordLock *v17;

  v8 = atomic_load(&JSC::Wasm::wasmThreads(void)::once);
  if (v8 != -1)
  {
    v17 = (WTF::WordLock *)&v15;
    v16 = &v17;
    std::__call_once(&JSC::Wasm::wasmThreads(void)::once, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmThreads(void)::{lambda(void)#1} &&>>);
  }
  v9 = JSC::Wasm::wasmThreads(void)::threads;
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v10)
    v10 = WTF::Thread::initializeCurrentTLS(this);
  v11 = (WTF::WordLock *)(v9 + 2);
  v17 = (WTF::WordLock *)(v9 + 2);
  if (__ldaxr(v9 + 2))
  {
    __clrex();
LABEL_7:
    WTF::WordLock::lockSlow(v11);
    goto LABEL_8;
  }
  if (__stxr(1uLL, (unint64_t *)v11))
    goto LABEL_7;
LABEL_8:
  WTF::Thread::addToThreadGroup(v10, (uint64_t)&v17, v9, a4, a5, a6, a7, a8);
  v13 = v17;
  if (!v17)
    return;
  v14 = __ldxr((unint64_t *)v17);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, (unint64_t *)v17))
LABEL_15:
    WTF::WordLock::unlockSlow(v13);
}

void JSC::Wasm::resetInstructionCacheOnAllThreads(JSC::Wasm *this)
{
  unint64_t v1;
  unint64_t *v2;
  unint64_t StatusReg;
  unsigned int v5;
  unint64_t v7;
  uint64_t *i;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  char v13;
  _QWORD *v14;
  _QWORD v15[3];

  v1 = atomic_load(&JSC::Wasm::wasmThreads(void)::once);
  if (v1 != -1)
  {
    v15[0] = &v13;
    v14 = v15;
    std::__call_once(&JSC::Wasm::wasmThreads(void)::once, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmThreads(void)::{lambda(void)#1} &&>>);
  }
  v2 = (unint64_t *)((char *)JSC::Wasm::wasmThreads(void)::threads + 16);
  if (__ldaxr((unint64_t *)JSC::Wasm::wasmThreads(void)::threads + 2))
  {
    __clrex();
  }
  else if (!__stxr(1uLL, v2))
  {
    goto LABEL_6;
  }
  WTF::WordLock::lockSlow((WTF::WordLock *)v2);
LABEL_6:
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr((unsigned int *)&pas_thread_suspend_lock))
  {
    if (!__stxr(v5, (unsigned int *)&pas_thread_suspend_lock))
      goto LABEL_11;
  }
  __clrex();
  os_unfair_lock_lock((os_unfair_lock_t)&pas_thread_suspend_lock);
LABEL_11:
  v7 = atomic_load(&JSC::Wasm::wasmThreads(void)::once);
  if (v7 != -1)
  {
    v15[0] = &v13;
    v14 = v15;
    std::__call_once(&JSC::Wasm::wasmThreads(void)::once, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmThreads(void)::{lambda(void)#1} &&>>);
  }
  for (i = (uint64_t *)*((_QWORD *)JSC::Wasm::wasmThreads(void)::threads + 4); i; i = (uint64_t *)i[2])
  {
    v9 = *i;
    v15[0] = WTF::ScopedLambdaRefFunctor<void ()(__darwin_arm_thread_state64 &),JSC::Wasm::resetInstructionCacheOnAllThreads(void)::$_0>::implFunction;
    v15[1] = v15;
    v15[2] = &v13;
    WTF::sendMessageScoped((uint64_t)&v14, v9, (uint64_t)v15);
  }
  v10 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v11 = __ldxr((unsigned int *)&pas_thread_suspend_lock);
    if (v11 != v10)
      break;
    if (!__stlxr(0, (unsigned int *)&pas_thread_suspend_lock))
      goto LABEL_20;
  }
  __clrex();
  os_unfair_lock_unlock((os_unfair_lock_t)&pas_thread_suspend_lock);
LABEL_20:
  v12 = __ldxr(v2);
  if (v12 == 1)
  {
    if (!__stlxr(0, v2))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::WordLock::unlockSlow((WTF::WordLock *)v2);
}

JSC::Wasm::Memory *JSC::Wasm::Memory::Memory(JSC::Wasm::Memory *this)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_DWORD *)this = 1;
  v2 = WTF::fastMalloc((WTF *)0x28);
  std::call_once[abi:sn180100]<JSC::BufferMemoryHandle::nullBasePointer(void)::$_0>((uint64_t)&v5);
  v3 = JSC::BufferMemoryHandle::nullBasePointer(void)::result;
  *(_DWORD *)v2 = 1;
  *(_WORD *)(v2 + 4) = 0;
  *(_BYTE *)(v2 + 6) = 0;
  *(_QWORD *)(v2 + 8) = v3;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *((_QWORD *)this + 1) = v2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  return this;
}

uint64_t JSC::Wasm::Memory::Memory(uint64_t a1, int a2, int a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  *(_DWORD *)a1 = 1;
  v8 = WTF::fastMalloc((WTF *)0x28);
  std::call_once[abi:sn180100]<JSC::BufferMemoryHandle::nullBasePointer(void)::$_0>((uint64_t)&v12);
  v9 = JSC::BufferMemoryHandle::nullBasePointer(void)::result;
  *(_DWORD *)v8 = 1;
  *(_WORD *)(v8 + 4) = 0;
  *(_BYTE *)(v8 + 6) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 8) = v9;
  *(_DWORD *)(v8 + 32) = a2;
  *(_DWORD *)(v8 + 36) = a3;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = 0;
  v10 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v10;
  return a1;
}

JSC::Wasm::Memory *JSC::Wasm::Memory::create@<X0>(JSC::Wasm::Memory **a1@<X8>)
{
  JSC::Wasm::Memory *v3;
  JSC::Wasm::Memory *result;

  v3 = (JSC::Wasm::Memory *)WTF::fastMalloc((WTF *)0x30);
  result = JSC::Wasm::Memory::Memory(v3);
  *a1 = result;
  return result;
}

uint64_t JSC::Wasm::Memory::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)result = 1;
  v7 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 8) = v7;
  *(_QWORD *)(result + 16) = 0;
  v8 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = v8;
  *a3 = result;
  return result;
}

{
  unsigned int *v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v6 = *(unsigned int **)(*a1 + 24);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  result = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = v6;
  v9 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 16) = v9;
  v10 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = v10;
  *a3 = result;
  return result;
}

void JSC::Wasm::Memory::createZeroSized(int a1@<W0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;

  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)v6 = 1;
  v7 = WTF::fastMalloc((WTF *)0x28);
  std::call_once[abi:sn180100]<JSC::BufferMemoryHandle::nullBasePointer(void)::$_0>((uint64_t)&v10);
  v8 = JSC::BufferMemoryHandle::nullBasePointer(void)::result;
  *(_DWORD *)v7 = 1;
  *(_BYTE *)(v7 + 4) = 0;
  *(_BYTE *)(v7 + 5) = a1;
  *(_BYTE *)(v7 + 6) = 0;
  *(_QWORD *)(v7 + 8) = v8;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  if (a1)
    std::call_once[abi:sn180100]<JSC::Wasm::activateSignalingMemory(void)::$_0>((uint64_t)&v11);
  *(_QWORD *)(v6 + 8) = v7;
  *(_QWORD *)(v6 + 16) = 0;
  v9 = *a2;
  *a2 = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 24) = v9;
  *a3 = v6;
}

void JSC::Wasm::Memory::tryCreate(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  void *ZeroedVirtualPages;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  int *v54;
  uint64_t *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  uint64_t *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  uint64_t v93;
  uint64_t *v94[2];
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;

  if (a3 == -1)
  {
    v13 = 0;
    v11 = a2;
    v12 = (unint64_t)a2 << 16;
    v99 = v12;
  }
  else
  {
    if (a3 < a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198D7F4B0);
    }
    v11 = a2;
    v12 = (unint64_t)a2 << 16;
    v99 = v12;
    v13 = (unint64_t)a3 << 16;
  }
  v98 = v13;
  if (v12 >= 0x100000001)
  {
LABEL_58:
    *a6 = 0;
    return;
  }
  if (a3 == -1 || v13)
  {
    v94[0] = (uint64_t *)&v99;
    if ((v14 & 1) != 0)
    {
      v97 = 0;
      if ((_BYTE)word_1ECF4C6F0)
      {
        v94[0] = &v97;
        if (v97)
        {
          v21 = (void *)(v97 + v99);
          v22 = JSC::BufferMemoryHandle::fastMappedBytes((JSC::BufferMemoryHandle *)v14);
          if (!mprotect(v21, v22 - v99, 0))
          {
            if (!a4)
            {
              v23 = WTF::fastMalloc((WTF *)0x28);
              v24 = v97;
              v25 = v99;
              v26 = JSC::BufferMemoryHandle::fastMappedBytes((JSC::BufferMemoryHandle *)v23);
              *(_DWORD *)v23 = 1;
              *(_WORD *)(v23 + 4) = 0;
              *(_BYTE *)(v23 + 6) = 1;
              *(_QWORD *)(v23 + 8) = v24;
              *(_QWORD *)(v23 + 16) = v25;
              *(_QWORD *)(v23 + 24) = v26;
              *(_DWORD *)(v23 + 32) = v11;
              *(_DWORD *)(v23 + 36) = a3;
              std::call_once[abi:sn180100]<JSC::Wasm::activateSignalingMemory(void)::$_0>((uint64_t)v94);
              v27 = WTF::fastMalloc((WTF *)0x30);
              *(_DWORD *)v27 = 1;
              *(_QWORD *)(v27 + 8) = v23;
LABEL_13:
              *(_QWORD *)(v27 + 16) = 0;
              v28 = *a5;
              *a5 = 0;
              *(_QWORD *)(v27 + 32) = 0;
              *(_QWORD *)(v27 + 40) = 0;
              *(_QWORD *)(v27 + 24) = v28;
LABEL_14:
              *a6 = v27;
              return;
            }
            if (a4 != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198D7F328);
            }
            v29 = WTF::fastMalloc((WTF *)0x28);
            v30 = v97;
            v31 = v99;
            v32 = JSC::BufferMemoryHandle::fastMappedBytes((JSC::BufferMemoryHandle *)v29);
            *(_DWORD *)v29 = 1;
            *(_WORD *)(v29 + 4) = 256;
            *(_BYTE *)(v29 + 6) = 1;
            *(_QWORD *)(v29 + 8) = v30;
            *(_QWORD *)(v29 + 16) = v31;
            *(_QWORD *)(v29 + 24) = v32;
            *(_DWORD *)(v29 + 32) = v11;
            *(_DWORD *)(v29 + 36) = a3;
            std::call_once[abi:sn180100]<JSC::Wasm::activateSignalingMemory(void)::$_0>((uint64_t)v94);
            v33 = JSC::BufferMemoryHandle::memory((JSC::BufferMemoryHandle *)v29);
            if (*(_BYTE *)(v29 + 5))
            {
              v34 = atomic_load((unint64_t *)(v29 + 16));
              v13 = v98;
            }
            else
            {
              v34 = *(_QWORD *)(v29 + 16);
            }
            v95 = (unsigned int *)v29;
            v94[0] = 0;
            JSC::SharedArrayBufferContents::create(&v96, v33, v34, v13, 1, (uint64_t *)&v95, (uint64_t *)v94);
            v35 = (unsigned int *)v94[0];
            v94[0] = 0;
            if (v35)
            {
              v36 = v35 + 2;
              do
              {
                v37 = __ldaxr(v36);
                v38 = v37 - 1;
              }
              while (__stlxr(v38, v36));
              if (!v38)
              {
                atomic_store(1u, v35 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
              }
            }
            v39 = v95;
            v95 = 0;
            if (v39)
            {
              do
              {
                v40 = __ldaxr(v39);
                v41 = v40 - 1;
              }
              while (__stlxr(v41, v39));
              if (!v41)
              {
                atomic_store(1u, v39);
                v94[0] = (uint64_t *)v39;
                WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::BufferMemoryHandle **)v94);
              }
            }
            JSC::Wasm::Memory::create(&v96, a5, a6);
            v49 = &v96;
            goto LABEL_29;
          }
          v54 = __error();
          WTF::safeStrerror((WTF *)*v54, &v96);
          if (v96)
            v55 = (uint64_t *)(v96 + 16);
          else
            v55 = 0;
          v94[0] = v55;
          WTF::dataLogLn<char [18],char const*>("mprotect failed: ", (const char **)v94);
          WTF::CString::~CString((WTF::CString *)&v96, v56, v57, v58, v59, v60, v61, v62);
          __break(0xC471u);
          goto LABEL_70;
        }
      }
      if ((_BYTE)word_1ECF4C6F8)
        JSC::FixedVMPoolExecutableAllocator::RegionAllocator::crashOnJumpIslandExhaustion((JSC::FixedVMPoolExecutableAllocator::RegionAllocator *)v14);
      if (a4 == 1)
      {
        v96 = 0;
        v94[0] = &v98;
        v94[1] = &v96;
        if (v96)
        {
          if (!mprotect((void *)(v96 + v99), v98 - v99, 0))
          {
            v63 = WTF::fastMalloc((WTF *)0x28);
            v64 = v96;
            v66 = v98;
            v65 = v99;
            *(_DWORD *)v63 = 1;
            *(_WORD *)(v63 + 4) = 256;
            *(_BYTE *)(v63 + 6) = 0;
            *(_QWORD *)(v63 + 8) = v64;
            *(_QWORD *)(v63 + 16) = v65;
            *(_QWORD *)(v63 + 24) = v66;
            *(_DWORD *)(v63 + 32) = v11;
            *(_DWORD *)(v63 + 36) = a3;
            std::call_once[abi:sn180100]<JSC::Wasm::activateSignalingMemory(void)::$_0>((uint64_t)v94);
            v67 = JSC::BufferMemoryHandle::memory((JSC::BufferMemoryHandle *)v63);
            if (*(_BYTE *)(v63 + 5))
              v68 = atomic_load((unint64_t *)(v63 + 16));
            else
              v68 = *(_QWORD *)(v63 + 16);
            v92 = (unsigned int *)v63;
            v94[0] = 0;
            JSC::SharedArrayBufferContents::create(&v93, v67, v68, v98, 1, (uint64_t *)&v92, (uint64_t *)v94);
            v69 = (unsigned int *)v94[0];
            v94[0] = 0;
            if (v69)
            {
              v70 = v69 + 2;
              do
              {
                v71 = __ldaxr(v70);
                v72 = v71 - 1;
              }
              while (__stlxr(v72, v70));
              if (!v72)
              {
                atomic_store(1u, v69 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v69 + 8))(v69);
              }
            }
            v73 = v92;
            v92 = 0;
            if (v73)
            {
              do
              {
                v74 = __ldaxr(v73);
                v75 = v74 - 1;
              }
              while (__stlxr(v75, v73));
              if (!v75)
              {
                atomic_store(1u, v73);
                v94[0] = (uint64_t *)v73;
                WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::BufferMemoryHandle **)v94);
              }
            }
            JSC::Wasm::Memory::create(&v93, a5, a6);
            v49 = &v93;
LABEL_29:
            WTF::Ref<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::~Ref((unsigned int **)v49, v42, v43, v44, v45, v46, v47, v48);
            return;
          }
          v83 = __error();
          WTF::safeStrerror((WTF *)*v83, &v93);
          if (v93)
            v84 = (uint64_t *)(v93 + 16);
          else
            v84 = 0;
          v94[0] = v84;
          WTF::dataLogLn<char [18],char const*>("mprotect failed: ", (const char **)v94);
          WTF::CString::~CString((WTF::CString *)&v93, v85, v86, v87, v88, v89, v90, v91);
          __break(0xC471u);
LABEL_70:
          JUMPOUT(0x198D7F308);
        }
      }
      else
      {
        if (a4)
        {
          __break(0xC471u);
          JUMPOUT(0x198D7F55CLL);
        }
        if (!v99)
        {
          v82 = WTF::fastMalloc((WTF *)0x30);
          v27 = JSC::Wasm::Memory::Memory(v82, v11, a3, a5);
          goto LABEL_14;
        }
        ZeroedVirtualPages = Gigacage::tryAllocateZeroedVirtualPages(0, v99, v15, v16, v17, v18, v19, v20);
        if (ZeroedVirtualPages)
        {
          v51 = ZeroedVirtualPages;
          v52 = WTF::fastMalloc((WTF *)0x28);
          v53 = v99;
          *(_DWORD *)v52 = 1;
          *(_WORD *)(v52 + 4) = 0;
          *(_BYTE *)(v52 + 6) = 0;
          *(_QWORD *)(v52 + 8) = v51;
          *(_QWORD *)(v52 + 16) = v53;
          *(_QWORD *)(v52 + 24) = v53;
          *(_DWORD *)(v52 + 32) = v11;
          *(_DWORD *)(v52 + 36) = a3;
          v27 = WTF::fastMalloc((WTF *)0x30);
          *(_DWORD *)v27 = 1;
          *(_QWORD *)(v27 + 8) = v52;
          goto LABEL_13;
        }
      }
      std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)v94);
      JSC::BufferMemoryManager::freePhysicalBytes((JSC::BufferMemoryManager *)JSC::BufferMemoryManager::singleton(void)::manager, v99, v76, v77, v78, v79, v80, v81);
    }
    goto LABEL_58;
  }
  if (v12)
  {
    __break(0xC471u);
    JUMPOUT(0x198D7F4D0);
  }
  JSC::Wasm::Memory::createZeroSized(a4, a5, a6);
}

uint64_t JSC::Wasm::`anonymous namespace'::tryAllocate<JSC::Wasm::Memory::tryCreate(JSC::VM &,JSC::PageCount,JSC::PageCount,JSC::MemorySharingMode,WTF::Function<void ()(JSC::Wasm::Memory::GrowSuccess,JSC::PageCount,JSC::PageCount)> &&)::$_0>(uint64_t a1, uint64_t **a2)
{
  JSC::Heap *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int PhysicalBytes;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  __int16 v38;
  unsigned int *v39;
  __int16 v40;
  uint64_t v41;

  v4 = (JSC::Heap *)(a1 + 192);
  std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v40);
  PhysicalBytes = JSC::BufferMemoryManager::tryAllocatePhysicalBytes((JSC::BufferMemoryManager *)JSC::BufferMemoryManager::singleton(void)::manager, **a2, v5, v6, v7, v8, v9, v10);
  switch(PhysicalBytes)
  {
    case 2:
      if (HIBYTE(word_1ECF4C5CC))
        v18 = *(_BYTE *)(a1 + 753) == 0;
      else
        v18 = 1;
      if (!v18)
      {
        v40 = 257;
        v41 = 0;
        v19 = JSC::Heap::requestCollection((uint64_t)v4, (uint64_t)&v40, v12, v13, v14, v15, v16, v17);
        JSC::Heap::waitForCollection(v4, v19, v20, v21, v22, v23, v24, v25);
      }
      break;
    case 1:
      goto LABEL_13;
    case 0:
      return 1;
  }
  std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v40);
  v32 = JSC::BufferMemoryManager::tryAllocatePhysicalBytes((JSC::BufferMemoryManager *)JSC::BufferMemoryManager::singleton(void)::manager, **a2, v26, v27, v28, v29, v30, v31);
  if (!v32)
    return 1;
  if (v32 != 1)
    return 0;
LABEL_13:
  v38 = 257;
  v39 = 0;
  JSC::Heap::collectAsync((uint64_t)v4, (unsigned __int8 *)&v38, v12, v13, v14, v15, v16, v17);
  v34 = v39;
  v39 = 0;
  if (!v34)
    return 1;
  v35 = v34 + 2;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  v33 = 1;
  if (v36 == 1)
  {
    atomic_store(1u, v34 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
  }
  return v33;
}

unsigned int *JSC::Wasm::`anonymous namespace'::tryAllocate<JSC::Wasm::Memory::tryCreate(JSC::VM &,JSC::PageCount,JSC::PageCount,JSC::MemorySharingMode,WTF::Function<void ()(JSC::Wasm::Memory::GrowSuccess,JSC::PageCount,JSC::PageCount)> &&)::$_1>(uint64_t a1, unsigned int ***a2)
{
  JSC::Heap *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  __int16 v39;
  unsigned int *v40;
  __int16 v41;
  uint64_t v42;

  v4 = (JSC::Heap *)(a1 + 192);
  std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v41);
  result = (unsigned int *)JSC::BufferMemoryManager::tryAllocateFastMemory((JSC::BufferMemoryManager *)JSC::BufferMemoryManager::singleton(void)::manager, v5, v6, v7, v8, v9, v10, v11);
  **a2 = result;
  if (v13 == 2)
  {
    if (HIBYTE(word_1ECF4C5CC))
      v20 = *(_BYTE *)(a1 + 753) == 0;
    else
      v20 = 1;
    if (!v20)
    {
      v41 = 257;
      v42 = 0;
      v21 = JSC::Heap::requestCollection((uint64_t)v4, (uint64_t)&v41, v14, v15, v16, v17, v18, v19);
      JSC::Heap::waitForCollection(v4, v21, v22, v23, v24, v25, v26, v27);
    }
LABEL_10:
    std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v41);
    result = (unsigned int *)JSC::BufferMemoryManager::tryAllocateFastMemory((JSC::BufferMemoryManager *)JSC::BufferMemoryManager::singleton(void)::manager, v28, v29, v30, v31, v32, v33, v34);
    **a2 = result;
    if (v35 != 1)
      return result;
    goto LABEL_11;
  }
  if (v13 != 1)
  {
    if (!v13)
      return result;
    goto LABEL_10;
  }
LABEL_11:
  v39 = 257;
  v40 = 0;
  JSC::Heap::collectAsync((uint64_t)v4, (unsigned __int8 *)&v39, v14, v15, v16, v17, v18, v19);
  result = v40;
  v40 = 0;
  if (result)
  {
    v36 = result + 2;
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t JSC::SharedArrayBufferContents::create(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = WTF::fastMalloc((WTF *)0x38);
  v15 = *a6;
  *a6 = 0;
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a2;
  v16 = *a7;
  *a7 = 0;
  *(_QWORD *)(result + 16) = v16;
  *(_QWORD *)(result + 24) = v15;
  if (a5)
    v17 = a4;
  else
    v17 = a3;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 40) = v17;
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFC | (a5 != 0) | 2;
  *a1 = result;
  return result;
}

unsigned int **WTF::Ref<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::~Ref(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      JSC::SharedArrayBufferContents::~SharedArrayBufferContents((JSC::SharedArrayBufferContents *)v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
  }
  return a1;
}

unsigned int *JSC::Wasm::`anonymous namespace'::tryAllocate<JSC::Wasm::Memory::tryCreate(JSC::VM &,JSC::PageCount,JSC::PageCount,JSC::MemorySharingMode,WTF::Function<void ()(JSC::Wasm::Memory::GrowSuccess,JSC::PageCount,JSC::PageCount)> &&)::$_2>(uint64_t a1, unint64_t **a2)
{
  JSC::Heap *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  __int16 v37;
  unsigned int *v38;
  __int16 v39;
  uint64_t v40;

  v4 = (JSC::Heap *)(a1 + 192);
  std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v39);
  result = (unsigned int *)JSC::BufferMemoryManager::tryAllocateGrowableBoundsCheckingMemory((JSC::BufferMemoryManager *)JSC::BufferMemoryManager::singleton(void)::manager, **a2, v5, v6, v7, v8, v9, v10);
  *a2[1] = (unint64_t)result;
  if (v12 == 2)
  {
    if (HIBYTE(word_1ECF4C5CC))
      v19 = *(_BYTE *)(a1 + 753) == 0;
    else
      v19 = 1;
    if (!v19)
    {
      v39 = 257;
      v40 = 0;
      v20 = JSC::Heap::requestCollection((uint64_t)v4, (uint64_t)&v39, v13, v14, v15, v16, v17, v18);
      JSC::Heap::waitForCollection(v4, v20, v21, v22, v23, v24, v25, v26);
    }
LABEL_10:
    std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v39);
    result = (unsigned int *)JSC::BufferMemoryManager::tryAllocateGrowableBoundsCheckingMemory((JSC::BufferMemoryManager *)JSC::BufferMemoryManager::singleton(void)::manager, **a2, v27, v28, v29, v30, v31, v32);
    *a2[1] = (unint64_t)result;
    if (v33 != 1)
      return result;
    goto LABEL_11;
  }
  if (v12 != 1)
  {
    if (!v12)
      return result;
    goto LABEL_10;
  }
LABEL_11:
  v37 = 257;
  v38 = 0;
  JSC::Heap::collectAsync((uint64_t)v4, (unsigned __int8 *)&v37, v13, v14, v15, v16, v17, v18);
  result = v38;
  v38 = 0;
  if (result)
  {
    v34 = result + 2;
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void JSC::Wasm::Memory::~Memory(JSC::Wasm::Memory *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;

  WTF::Vector<WTF::ThreadSafeWeakPtr<JSC::Wasm::Instance>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 32, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v17)
    WTF::ThreadSafeRefCounted<JSC::SharedArrayBufferContents,(WTF::DestructionThread)0>::deref(v17, v9, v10, v11, v12, v13, v14, v15);
  WTF::Ref<JSC::BufferMemoryHandle,WTF::RawPtrTraits<JSC::BufferMemoryHandle>,WTF::DefaultRefDerefTraits<JSC::BufferMemoryHandle>>::~Ref((unsigned int **)this + 1);
}

void WTF::ThreadSafeWeakPtr<JSC::Wasm::Instance>::get(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v12;

  v9 = *a2;
  if (!*a2)
  {
    *a1 = 0;
    return;
  }
  v10 = a2[1];
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v9);
LABEL_7:
  if (*(_QWORD *)(v9 + 24))
    ++*(_QWORD *)(v9 + 8);
  else
    v10 = 0;
  *a1 = v10;
  v12 = __ldxr((unsigned __int8 *)v9);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_13:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v9, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::Wasm::Instance::updateCachedMemory(uint64_t this)
{
  uint64_t (*v1)();
  uint64_t v2;
  uint64_t v3;
  JSC::BufferMemoryHandle *v4;

  v1 = WTF::RefPtr<JSC::Wasm::Memory,WTF::RawPtrTraits<JSC::Wasm::Memory>,WTF::DefaultRefDerefTraits<JSC::Wasm::Memory>>::unspecifiedBoolTypeInstance;
  v2 = *(_QWORD *)(this + 64);
  if (!v2)
    v1 = 0;
  if (v1)
  {
    v3 = this;
    v4 = *(JSC::BufferMemoryHandle **)(v2 + 8);
    *(_QWORD *)(v3 + 48) = *((_QWORD *)v4 + 3);
    this = JSC::BufferMemoryHandle::memory(v4);
    *(_QWORD *)(v3 + 40) = this;
  }
  return this;
}

void JSC::Wasm::Memory::grow(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v9;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int PhysicalBytes;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL4 v60;
  uint64_t v61;
  unint64_t v62;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  int v82;
  unsigned __int8 *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t **v93;
  uint64_t v94;
  uint64_t *v95;
  int v97;
  void *v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t *v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  unsigned int *v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int v124;
  unint64_t v125;
  void *v126;
  void *v127;
  const void *v128;
  uint64_t v129;
  size_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  unsigned int *v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  int v158;
  int *v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  int v170;
  __int128 v171;
  char v172;
  unsigned __int8 *v173;
  uint64_t *v174;
  __int128 *v175;
  __int128 v176;

  v9 = a3;
  if (a3 > 0x10000)
  {
    *(_BYTE *)a9 = 0;
LABEL_7:
    v17 = 1;
LABEL_8:
    *(_DWORD *)(a9 + 4) = v17;
    return;
  }
  v13 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v13 + 5) != 1)
  {
    if (*(_BYTE *)(v13 + 5))
      v18 = atomic_load((unint64_t *)(v13 + 16));
    else
      v18 = *(_QWORD *)(v13 + 16);
    if ((_WORD)v18)
    {
      __break(0xC471u);
      goto LABEL_222;
    }
    v19 = v18 >> 16;
    if (v19 >= 0x10001)
    {
      __break(0xC471u);
      JUMPOUT(0x198D804C4);
    }
    LODWORD(v169) = v19;
    v20 = v19 + a3;
    v21 = v20 >= 0x10001;
    if (v20 >= 0x10001)
      v20 = -1;
    LODWORD(v168) = v20;
    if (v21)
    {
      v17 = 1;
      *(_BYTE *)a9 = 1;
      goto LABEL_8;
    }
    v173 = (unsigned __int8 *)a1;
    v174 = &v169;
    v175 = &v168;
    if (!(_DWORD)a3)
      goto LABEL_185;
    v22 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v22 + 5))
      v23 = atomic_load((unint64_t *)(v22 + 16));
    else
      v23 = *(_QWORD *)(v22 + 16);
    if ((_WORD)v23)
    {
      __break(0xC471u);
      JUMPOUT(0x198D80504);
    }
    if ((v23 >> 16) >= 0x10001)
    {
      __break(0xC471u);
      JUMPOUT(0x198D80544);
    }
    if (v168 <= (v23 >> 16))
    {
      __break(0xC471u);
      JUMPOUT(0x198D80584);
    }
    v24 = *(_QWORD *)(a1 + 8);
    if (v168 > *(_DWORD *)(v24 + 36))
    {
      v25 = 2;
LABEL_187:
      *(_BYTE *)a9 = v25;
      goto LABEL_7;
    }
    if (v168 > 0x10000)
    {
      __break(0xC471u);
      JUMPOUT(0x198D805C4);
    }
    v36 = (unint64_t)v168 << 16;
    if (*(_BYTE *)(v24 + 5))
      v37 = atomic_load((unint64_t *)(v24 + 16));
    else
      v37 = *(_QWORD *)(v24 + 16);
    if (v36 <= v37)
    {
      __break(0xC471u);
      JUMPOUT(0x198D80604);
    }
    v38 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v38 + 6) != 1)
    {
      if (*(_BYTE *)(v38 + 6))
        goto LABEL_216;
      std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v176);
      PhysicalBytes = JSC::BufferMemoryManager::tryAllocatePhysicalBytes((JSC::BufferMemoryManager *)&JSC::BufferMemoryManager::singleton(void)::manager, v36, v39, v40, v41, v42, v43, v44);
      switch(PhysicalBytes)
      {
        case 0:
LABEL_156:
          if (!*(_DWORD *)(*(_QWORD *)(a1 + 8) + 36))
          {
            __break(0xC471u);
            JUMPOUT(0x198D80664);
          }
          v125 = WTF::s_pageSize;
          if (!WTF::s_pageSize)
          {
            v125 = sysconf(29);
            WTF::s_pageSize = v125;
            if ((v125 & (v125 - 1)) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x198D806DCLL);
            }
            if (v125 > 0x4000)
            {
              __break(0xC471u);
              JUMPOUT(0x198D806FCLL);
            }
            if (((v125 + 0x3FFF) & -(uint64_t)v125) != 0x4000)
            {
              __break(0xC471u);
              JUMPOUT(0x198D8071CLL);
            }
          }
          v126 = bmalloc::api::tryLargeZeroedMemalignVirtual(v125, v36, 0, 1, v48, v49, v50, v51);
          if (v126)
          {
            v127 = v126;
            v128 = (const void *)JSC::BufferMemoryHandle::memory(*(JSC::BufferMemoryHandle **)(a1 + 8));
            v129 = *(_QWORD *)(a1 + 8);
            if (*(_BYTE *)(v129 + 5))
              v130 = atomic_load((unint64_t *)(v129 + 16));
            else
              v130 = *(_QWORD *)(v129 + 16);
            memcpy(v127, v128, v130);
            v131 = WTF::fastMalloc((WTF *)0x28);
            v132 = *(_QWORD *)(a1 + 8);
            v133 = *(unsigned __int8 *)(v132 + 5);
            *(_DWORD *)v131 = 1;
            *(_BYTE *)(v131 + 4) = 0;
            *(_WORD *)(v131 + 5) = v133;
            *(_QWORD *)(v131 + 8) = v127;
            *(_QWORD *)(v131 + 16) = v36;
            *(_QWORD *)(v131 + 24) = v36;
            *(_QWORD *)(v131 + 32) = *(_QWORD *)(v132 + 32);
            if (v133)
              std::call_once[abi:sn180100]<JSC::Wasm::activateSignalingMemory(void)::$_0>((uint64_t)&v176);
            v134 = *(unsigned int **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v131;
            if (v134)
            {
              do
              {
                v135 = __ldaxr(v134);
                v136 = v135 - 1;
              }
              while (__stlxr(v136, v134));
              if (!v136)
              {
                atomic_store(1u, v134);
                *(_QWORD *)&v176 = v134;
                WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::BufferMemoryHandle **)&v176);
              }
            }
            goto LABEL_185;
          }
LABEL_186:
          v25 = 3;
          goto LABEL_187;
        case 2:
          if (HIBYTE(word_1ECF4C5CC) && *(_BYTE *)(a2 + 753))
          {
            LOWORD(v176) = 257;
            *((_QWORD *)&v176 + 1) = 0;
            v107 = JSC::Heap::requestCollection(a2 + 192, (uint64_t)&v176, v46, v47, v48, v49, v50, v51);
            JSC::Heap::waitForCollection((JSC::Heap *)(a2 + 192), v107, v108, v109, v110, v111, v112, v113);
          }
          break;
        case 1:
LABEL_151:
          LOWORD(v171) = 257;
          *((_QWORD *)&v171 + 1) = 0;
          JSC::Heap::collectAsync(a2 + 192, (unsigned __int8 *)&v171, v46, v47, v48, v49, v50, v51);
          v121 = (unsigned int *)*((_QWORD *)&v171 + 1);
          *((_QWORD *)&v171 + 1) = 0;
          if (v121)
          {
            v122 = v121 + 2;
            do
            {
              v123 = __ldaxr(v122);
              v124 = v123 - 1;
            }
            while (__stlxr(v124, v122));
            if (!v124)
            {
              atomic_store(1u, v121 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v121 + 8))(v121);
            }
          }
          goto LABEL_156;
      }
      std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v176);
      v120 = JSC::BufferMemoryManager::tryAllocatePhysicalBytes((JSC::BufferMemoryManager *)&JSC::BufferMemoryManager::singleton(void)::manager, v36, v114, v115, v116, v117, v118, v119);
      if (!v120)
        goto LABEL_156;
      if (v120 != 1)
        goto LABEL_186;
      goto LABEL_151;
    }
    if (*(_BYTE *)(v38 + 5))
      v62 = atomic_load((unint64_t *)(v38 + 16));
    else
      v62 = *(_QWORD *)(v38 + 16);
    v63 = v36 - v62;
    if (v36 == v62)
    {
      __break(0xC471u);
      JUMPOUT(0x198D80644);
    }
    std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v176);
    v70 = JSC::BufferMemoryManager::tryAllocatePhysicalBytes((JSC::BufferMemoryManager *)&JSC::BufferMemoryManager::singleton(void)::manager, v63, v64, v65, v66, v67, v68, v69);
    if (v70)
    {
      if (v70 == 2)
      {
        if (HIBYTE(word_1ECF4C5CC) && *(_BYTE *)(a2 + 753))
        {
          LOWORD(v176) = 257;
          *((_QWORD *)&v176 + 1) = 0;
          v137 = JSC::Heap::requestCollection(a2 + 192, (uint64_t)&v176, v71, v72, v73, v74, v75, v76);
          JSC::Heap::waitForCollection((JSC::Heap *)(a2 + 192), v137, v138, v139, v140, v141, v142, v143);
        }
      }
      else if (v70 == 1)
      {
LABEL_175:
        LOWORD(v171) = 257;
        *((_QWORD *)&v171 + 1) = 0;
        JSC::Heap::collectAsync(a2 + 192, (unsigned __int8 *)&v171, v71, v72, v73, v74, v75, v76);
        v151 = (unsigned int *)*((_QWORD *)&v171 + 1);
        *((_QWORD *)&v171 + 1) = 0;
        if (v151)
        {
          v152 = v151 + 2;
          do
          {
            v153 = __ldaxr(v152);
            v154 = v153 - 1;
          }
          while (__stlxr(v154, v152));
          if (!v154)
          {
            atomic_store(1u, v151 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v151 + 8))(v151);
          }
        }
        goto LABEL_180;
      }
      std::call_once[abi:sn180100]<JSC::BufferMemoryManager::singleton(void)::$_0>((uint64_t)&v176);
      v150 = JSC::BufferMemoryManager::tryAllocatePhysicalBytes((JSC::BufferMemoryManager *)&JSC::BufferMemoryManager::singleton(void)::manager, v63, v144, v145, v146, v147, v148, v149);
      if (v150)
      {
        if (v150 != 1)
          goto LABEL_186;
        goto LABEL_175;
      }
    }
LABEL_180:
    v155 = JSC::BufferMemoryHandle::memory(*(JSC::BufferMemoryHandle **)(a1 + 8));
    if (!v155)
    {
      __break(0xC471u);
      JUMPOUT(0x198D80684);
    }
    v156 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v156 + 5))
      v157 = atomic_load((unint64_t *)(v156 + 16));
    else
      v157 = *(_QWORD *)(v156 + 16);
    if (mprotect((void *)(v155 + v157), v63, 3))
    {
LABEL_218:
      v159 = __error();
      WTF::safeStrerror((WTF *)*v159, (uint64_t *)&v171);
      if ((_QWORD)v171)
        v160 = v171 + 16;
      else
        v160 = 0;
      *(_QWORD *)&v176 = v160;
      WTF::dataLogLn<char [18],char const*>("mprotect failed: ", (const char **)&v176);
      WTF::CString::~CString((WTF::CString *)&v171, v161, v162, v163, v164, v165, v166, v167);
      __break(0xC471u);
LABEL_222:
      JUMPOUT(0x198D80484);
    }
    atomic_store(v36, (unint64_t *)(*(_QWORD *)(a1 + 8) + 16));
LABEL_185:
    v158 = JSC::Wasm::Memory::grow(JSC::VM &,JSC::PageCount)::$_0::operator()((unsigned int **)&v173);
    v17 = 0;
    *(_DWORD *)a9 = v158;
    goto LABEL_8;
  }
  v169 = 0;
  v170 = 0;
  LOBYTE(v173) = 0;
  LOBYTE(v175) = 0;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    goto LABEL_29;
  v15 = (unsigned int *)(*(_QWORD *)(v14 + 24) + 4);
  v173 = (unsigned __int8 *)v15;
  LOBYTE(v174) = 1;
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
LABEL_27:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v15);
    goto LABEL_28;
  }
  if (__stxr(1u, (unsigned __int8 *)v15))
    goto LABEL_27;
LABEL_28:
  LOBYTE(v175) = 1;
  v13 = *(_QWORD *)(a1 + 8);
LABEL_29:
  if (*(_BYTE *)(v13 + 5))
    v26 = atomic_load((unint64_t *)(v13 + 16));
  else
    v26 = *(_QWORD *)(v13 + 16);
  if ((_WORD)v26)
  {
    __break(0xC471u);
    JUMPOUT(0x198D804A4);
  }
  v27 = v26 >> 16;
  if ((v26 >> 16) >= 0x10001)
  {
    __break(0xC471u);
    JUMPOUT(0x198D804E4);
  }
  v28 = v27 + v9;
  if ((v27 + v9) >= 0x10001)
    v29 = 0xFFFFFFFFLL;
  else
    v29 = v28;
  if (v28 >= 0x10001)
  {
    v34 = 1;
    *(_BYTE *)a9 = 1;
    goto LABEL_47;
  }
  if (!v9)
  {
    v34 = 0;
    *(_DWORD *)a9 = v27;
    goto LABEL_47;
  }
  v30 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v30 + 5))
    v31 = atomic_load((unint64_t *)(v30 + 16));
  else
    v31 = *(_QWORD *)(v30 + 16);
  if ((_WORD)v31)
  {
    __break(0xC471u);
    JUMPOUT(0x198D80524);
  }
  v32 = v31 >> 16;
  if (v32 >= 0x10001)
  {
    __break(0xC471u);
    JUMPOUT(0x198D80564);
  }
  if (v29 <= v32)
  {
    __break(0xC471u);
    JUMPOUT(0x198D805A4);
  }
  v33 = *(_QWORD *)(a1 + 8);
  if (v29 <= *(_DWORD *)(v33 + 36))
  {
    if (!*(_QWORD *)(a1 + 16))
    {
      __break(0xC471u);
      JUMPOUT(0x198D805E4);
    }
    v52 = (unint64_t)v29 << 16;
    if (*(_BYTE *)(v33 + 5))
      v53 = atomic_load((unint64_t *)(v33 + 16));
    else
      v53 = *(_QWORD *)(v33 + 16);
    if (v52 <= v53)
    {
      __break(0xC471u);
      JUMPOUT(0x198D80624);
    }
    if ((_BYTE)v175)
    {
      JSC::SharedArrayBufferContents::grow(*(_QWORD *)(a1 + 16), a2, v52, (uint64_t)&v168);
      v171 = v168;
      if (DWORD2(v168) != -1 || v170 != -1)
      {
        v60 = DWORD2(v168) == -1;
        if (DWORD2(v168) == -1)
          v61 = -1;
        else
          v61 = DWORD2(v168);
        if (v170 != -1)
          v60 = v61 == v170;
        if (v60)
        {
          ((void (*)(__int128 *, __int128 *, uint64_t *))off_1E35B5C20[v61])(&v176, &v171, &v169);
        }
        else
        {
          v78 = (DWORD2(v168) - 2) < 0xFFFFFFFD || (v170 + 1) < 3;
          if (v78)
            v79 = (uint64_t *)&v171;
          else
            v79 = &v169;
          if (v78)
            v80 = &v169;
          else
            v80 = (uint64_t *)&v171;
          v176 = *(_OWORD *)v80;
          *((_DWORD *)v80 + 2) = -1;
          v81 = *((unsigned int *)v79 + 2);
          if ((_DWORD)v81 != -1)
          {
            ((void (*)(char *, uint64_t *, uint64_t *))off_1E35B5C30[v81])(&v172, v80, v79);
            *((_DWORD *)v80 + 2) = v81;
          }
          *((_DWORD *)v79 + 2) = -1;
          v82 = DWORD2(v176);
          if (DWORD2(v176) != -1)
          {
            ((void (*)(char *, uint64_t *, __int128 *))off_1E35B5C30[DWORD2(v176)])(&v172, v79, &v176);
            *((_DWORD *)v79 + 2) = v82;
          }
        }
      }
      if (!(_BYTE)v175 || !(_BYTE)v174)
        goto LABEL_108;
      v83 = v173;
      v84 = __ldxr(v173);
      if (v84 == 1)
      {
        if (!__stlxr(0, v173))
          goto LABEL_108;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v83, 0, v54, v55, v56, v57, v58, v59);
LABEL_108:
      if (v170)
      {
        if (v170 == 1)
        {
          v25 = v169;
          goto LABEL_187;
        }
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_218;
      }
      (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 0, (v26 >> 16), v29);
      v91 = *(unsigned int *)(a1 + 44);
      if (!(_DWORD)v91)
      {
LABEL_143:
        *(_QWORD *)a9 = v27;
        return;
      }
      v92 = 16 * v91;
      v93 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
      while (1)
      {
        v94 = (uint64_t)*(v93 - 1);
        if (!v94)
          goto LABEL_139;
        v95 = *v93;
        if (__ldaxr((unsigned __int8 *)v94))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v94))
        {
          goto LABEL_118;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v94);
LABEL_118:
        if (*(_QWORD *)(v94 + 24))
          ++*(_QWORD *)(v94 + 8);
        else
          v95 = 0;
        v97 = __ldxr((unsigned __int8 *)v94);
        if (v97 != 1)
        {
          __clrex();
LABEL_124:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v94, 0, v85, v86, v87, v88, v89, v90);
          goto LABEL_125;
        }
        if (__stlxr(0, (unsigned __int8 *)v94))
          goto LABEL_124;
LABEL_125:
        if (v95)
        {
          JSC::Wasm::Instance::updateCachedMemory((uint64_t)v95);
          v99 = *v95;
          if (__ldaxr((unsigned __int8 *)v99))
          {
            __clrex();
            goto LABEL_129;
          }
          if (__stxr(1u, (unsigned __int8 *)v99))
LABEL_129:
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v99);
          v101 = *(_QWORD *)(v99 + 8);
          v102 = v101 - 1;
          *(_QWORD *)(v99 + 8) = v101 - 1;
          if (v101 == 1)
          {
            v106 = *(_QWORD *)(v99 + 16);
            v104 = *(uint64_t **)(v99 + 24);
            *(_QWORD *)(v99 + 24) = 0;
            v103 = v106 == 0;
          }
          else
          {
            v103 = 0;
            v104 = 0;
          }
          v105 = __ldxr((unsigned __int8 *)v99);
          if (v105 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v99))
            {
LABEL_137:
              if (!v102)
              {
                v173 = (unsigned __int8 *)v99;
                v174 = v104;
                LOBYTE(v175) = v103;
                WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::Wasm::Instance,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()((uint64_t)&v173, v98, v85, v86, v87, v88, v89, v90);
              }
              goto LABEL_139;
            }
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v99, 0, v85, v86, v87, v88, v89, v90);
          goto LABEL_137;
        }
LABEL_139:
        v93 += 2;
        v92 -= 16;
        if (!v92)
          goto LABEL_143;
      }
    }
    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_216:
    __break(0xC471u);
    JUMPOUT(0x198D80740);
  }
  *(_BYTE *)a9 = 2;
  v34 = 1;
LABEL_47:
  *(_DWORD *)(a9 + 4) = v34;
  if ((_BYTE)v175 && (_BYTE)v174)
  {
    v35 = __ldxr(v173);
    if (v35 == 1)
    {
      if (!__stlxr(0, v173))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v173, 0, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::Wasm::Memory::grow(JSC::VM &,JSC::PageCount)::$_0::operator()(unsigned int **a1)
{
  unsigned int *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 ***v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v16;
  uint64_t (*v17)();
  _BOOL4 v18;
  unsigned __int8 *v19;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  int v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;

  v2 = *a1;
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)*a1 + 3) + 16))(*((_QWORD *)*a1 + 3), 0, *a1[1], *a1[2]);
  v10 = v2[11];
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    v12 = (unsigned __int8 ***)(*((_QWORD *)v2 + 4) + 8);
    do
    {
      v13 = (uint64_t)*(v12 - 1);
      if (!v13)
      {
        v14 = 0;
        goto LABEL_16;
      }
      v14 = *v12;
      if (__ldaxr((unsigned __int8 *)v13))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v13))
      {
        goto LABEL_9;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v13);
LABEL_9:
      if (*(_QWORD *)(v13 + 24))
        ++*(_QWORD *)(v13 + 8);
      else
        v14 = 0;
      v16 = __ldxr((unsigned __int8 *)v13);
      if (v16 != 1)
      {
        __clrex();
LABEL_15:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v13, 0, v4, v5, v6, v7, v8, v9);
        goto LABEL_16;
      }
      if (__stlxr(0, (unsigned __int8 *)v13))
        goto LABEL_15;
LABEL_16:
      if (v14)
        v17 = WTF::RefPtr<JSC::Wasm::Instance,WTF::RawPtrTraits<JSC::Wasm::Instance>,WTF::DefaultRefDerefTraits<JSC::Wasm::Instance>>::unspecifiedBoolTypeInstance;
      else
        v17 = 0;
      v18 = v17 != 0;
      if (!v14)
      {
LABEL_29:
        if (!v18)
          goto LABEL_57;
        goto LABEL_34;
      }
      v19 = *v14;
      if (__ldaxr(*v14))
      {
        __clrex();
      }
      else if (!__stxr(1u, v19))
      {
        goto LABEL_24;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v19);
LABEL_24:
      v21 = *((_QWORD *)v19 + 1);
      v22 = v21 - 1;
      *((_QWORD *)v19 + 1) = v21 - 1;
      if (v21 == 1)
      {
        v37 = *((_QWORD *)v19 + 2);
        v24 = *((_QWORD *)v19 + 3);
        *((_QWORD *)v19 + 3) = 0;
        v23 = v37 == 0;
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
      v25 = __ldxr(v19);
      if (v25 == 1)
      {
        if (!__stlxr(0, v19))
        {
          if (v22)
            goto LABEL_29;
          goto LABEL_33;
        }
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v19, 0, v4, v5, v6, v7, v8, v9);
      if (v22)
        goto LABEL_29;
LABEL_33:
      v40 = (uint64_t)v19;
      v41 = v24;
      v42 = v23;
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::Wasm::Instance,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()((uint64_t)&v40, v3, v4, v5, v6, v7, v8, v9);
      if (!v18)
        goto LABEL_57;
LABEL_34:
      v26 = (uint64_t)*(v12 - 1);
      if (!v26)
      {
        JSC::Wasm::Instance::updateCachedMemory(0);
        goto LABEL_57;
      }
      v27 = (uint64_t *)*v12;
      if (__ldaxr((unsigned __int8 *)v26))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v26))
      {
        goto LABEL_40;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v26);
LABEL_40:
      if (*(_QWORD *)(v26 + 24))
        ++*(_QWORD *)(v26 + 8);
      else
        v27 = 0;
      v29 = __ldxr((unsigned __int8 *)v26);
      if (v29 != 1)
      {
        __clrex();
LABEL_46:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v26, 0, v4, v5, v6, v7, v8, v9);
        goto LABEL_47;
      }
      if (__stlxr(0, (unsigned __int8 *)v26))
        goto LABEL_46;
LABEL_47:
      JSC::Wasm::Instance::updateCachedMemory((uint64_t)v27);
      if (!v27)
        goto LABEL_57;
      v30 = *v27;
      if (__ldaxr((unsigned __int8 *)v30))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v30))
      {
        goto LABEL_52;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v30);
LABEL_52:
      v32 = *(_QWORD *)(v30 + 8);
      v33 = v32 - 1;
      *(_QWORD *)(v30 + 8) = v32 - 1;
      if (v32 == 1)
      {
        v38 = *(_QWORD *)(v30 + 16);
        v35 = *(_QWORD *)(v30 + 24);
        *(_QWORD *)(v30 + 24) = 0;
        v34 = v38 == 0;
      }
      else
      {
        v34 = 0;
        v35 = 0;
      }
      v36 = __ldxr((unsigned __int8 *)v30);
      if (v36 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v30))
        {
          if (!v33)
            goto LABEL_61;
          goto LABEL_57;
        }
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v30, 0, v4, v5, v6, v7, v8, v9);
      if (!v33)
      {
LABEL_61:
        v40 = v30;
        v41 = v35;
        v42 = v34;
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::Wasm::Instance,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()((uint64_t)&v40, v3, v4, v5, v6, v7, v8, v9);
      }
LABEL_57:
      v12 += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return *a1[1];
}

void JSC::Wasm::Memory::registerInstance(JSC::Wasm::Memory *this, JSC::Wasm::Instance *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  WTF::ThreadSafeWeakPtrControlBlock *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::ThreadSafeWeakPtrControlBlock *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t (*v24)();
  _BOOL4 v25;
  int v26;
  WTF::ThreadSafeWeakPtrControlBlock **v27;
  WTF::ThreadSafeWeakPtrControlBlock *v28;
  uint64_t v29;
  WTF::ThreadSafeWeakPtrControlBlock *v30;
  WTF::ThreadSafeWeakPtrControlBlock *v31[2];

  v10 = (uint64_t *)((char *)this + 32);
  v11 = *((unsigned int *)this + 11);
  if ((_DWORD)v11)
  {
    v22 = 0;
    v23 = 8;
    while (1)
    {
      if (v22 >= *((unsigned int *)this + 11))
        goto LABEL_25;
      WTF::ThreadSafeWeakPtr<JSC::Wasm::Instance>::get((uint64_t *)v31, (uint64_t *)(*v10 + v23 - 8), a3, a4, a5, a6, a7, a8);
      if (v31[0])
        v24 = WTF::RefPtr<JSC::Wasm::Instance,WTF::RawPtrTraits<JSC::Wasm::Instance>,WTF::DefaultRefDerefTraits<JSC::Wasm::Instance>>::unspecifiedBoolTypeInstance;
      else
        v24 = 0;
      v25 = v24 == 0;
      if (v31[0])
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<JSC::Wasm::Instance,(WTF::DestructionThread)0>::deref(*(_QWORD *)v31[0], a2, a3, a4, a5, a6, a7, a8);
      if (v25)
        break;
      ++v22;
      v23 += 16;
      if (v11 == v22)
        goto LABEL_2;
    }
    v28 = *(WTF::ThreadSafeWeakPtrControlBlock **)a2;
    if (*(_QWORD *)a2)
      v28 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v28, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    if (v22 >= *((unsigned int *)this + 11))
    {
LABEL_25:
      __break(0xC471u);
      JUMPOUT(0x198D80BC4);
    }
    v29 = *v10;
    v30 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v29 + v23 - 8);
    *(_QWORD *)(v29 + v23 - 8) = v28;
    if (v30)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v30, a2, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)(v29 + v23) = a2;
  }
  else
  {
LABEL_2:
    v12 = *(WTF::ThreadSafeWeakPtrControlBlock **)a2;
    if (*(_QWORD *)a2)
      v12 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v31[0] = v12;
    v31[1] = a2;
    v13 = *((unsigned int *)this + 11);
    if ((_DWORD)v13 == *((_DWORD *)this + 10))
    {
      WTF::Vector<WTF::ThreadSafeWeakPtr<JSC::Wasm::Instance>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ThreadSafeWeakPtr<JSC::Wasm::Instance>>((uint64_t)v10, (unint64_t)v31);
      v21 = v31[0];
      v31[0] = 0;
      if (v21)
        WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v21, v14, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      v26 = v13 + 1;
      v27 = (WTF::ThreadSafeWeakPtrControlBlock **)(*((_QWORD *)this + 4) + 16 * v13);
      *v27 = v12;
      v27[1] = a2;
      *((_DWORD *)this + 11) = v26;
    }
  }
}

uint64_t JSC::Wasm::MemoryInformation::MemoryInformation(uint64_t result, unsigned int a2, unsigned int a3, char a4, char a5)
{
  *(_DWORD *)result = a2;
  *(_DWORD *)(result + 4) = a3;
  *(_BYTE *)(result + 8) = a4;
  *(_BYTE *)(result + 9) = a5;
  if (a2 == -1 || a3 < a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198D80C0CLL);
  }
  return result;
}

uint64_t JSC::Wasm::MemoryInformation::MemoryInformation(uint64_t a1, unsigned int a2, unsigned int a3, char a4, char a5)
{
  return JSC::Wasm::MemoryInformation::MemoryInformation(a1, a2, a3, a4, a5);
}

JSC::Wasm::Module *JSC::Wasm::Module::Module(JSC::Wasm::Module *this, JSC::Wasm::LLIntPlan *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20[2];

  *(_DWORD *)this = 1;
  if (*((_QWORD *)a2 + 7)
    || (*(unsigned int (**)(JSC::Wasm::LLIntPlan *))(*(_QWORD *)a2 + 16))(a2)
    || (v4 = *((_QWORD *)a2 + 2),
        *((_QWORD *)a2 + 2) = 0,
        *((_QWORD *)this + 2) = 0,
        *((_QWORD *)this + 3) = 0,
        *((_QWORD *)this + 1) = v4,
        *((_QWORD *)a2 + 7))
    || *((unsigned __int8 *)a2 + 352) <= 2u)
  {
    __break(0xC471u);
    JUMPOUT(0x198D80D20);
  }
  WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>::createFromVector<0ul,WTF::CrashOnOverflow>((uint64_t)a2 + 392, (_QWORD *)this + 4);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v5 = 1;
  *((_QWORD *)this + 5) = v5;
  JSC::Wasm::EntryPlan::takeWasmToJSExitStubs(a2, v20);
  WTF::FixedVector<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>>::FixedVector<0ul,WTF::CrashOnOverflow>((unsigned int **)this + 6, v20, v6, v7, v8, v9, v10, v11);
  WTF::Vector<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v12, v13, v14, v15, v16, v17, v18);
  *((_BYTE *)this + 56) = 0;
  return this;
}

uint64_t WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>::createFromVector<0ul,WTF::CrashOnOverflow>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v18;
  int v19;
  int v20;

  v3 = *(uint64_t **)a1;
  v18 = *(uint64_t **)a1;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v19 = v4;
  v20 = v5;
  v6 = 8 * v5;
  v7 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v5 + 8));
  *v7 = 1;
  v7[1] = v5;
  if ((_DWORD)v5)
  {
    v15 = v7 + 2;
    do
    {
      v16 = *v3;
      *v3++ = 0;
      *v15++ = v16;
      v6 -= 8;
    }
    while (v6);
  }
  *a2 = v7;
  return WTF::Vector<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t JSC::Wasm::EntryPlan::takeWasmToJSExitStubs@<X0>(JSC::Wasm::EntryPlan *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  if (*((_QWORD *)this + 7)
    || (result = (*(uint64_t (**)(JSC::Wasm::EntryPlan *))(*(_QWORD *)this + 16))(this), (_DWORD)result))
  {
    result = 81;
    __break(0xC471u);
  }
  else
  {
    *a2 = *((_QWORD *)this + 14);
    v5 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 15) = 0;
    a2[1] = v5;
  }
  return result;
}

uint64_t WTF::Vector<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)a1;
    v11 = *(_QWORD *)a1 + 16 * v9;
    do
    {
      v12 = *(unsigned int **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
        }
      }
      v10 += 16;
    }
    while (v10 != v11);
  }
  v23 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

JSC::Wasm::Module *JSC::Wasm::Module::Module(JSC::Wasm::Module *this, JSC::Wasm::IPIntPlan *a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned int **v6;
  uint64_t v7;
  _DWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  WTF *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v45;
  int v46;
  unsigned int v47;

  *(_DWORD *)this = 1;
  if (*((_QWORD *)a2 + 7))
    goto LABEL_23;
  if ((*(unsigned int (**)(JSC::Wasm::IPIntPlan *))(*(_QWORD *)a2 + 16))(a2))
    goto LABEL_23;
  v4 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = v4;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v5 = 1;
  *((_QWORD *)this + 4) = v5;
  if (*((_QWORD *)a2 + 7) || *((unsigned __int8 *)a2 + 352) <= 2u)
  {
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x198D8106CLL);
  }
  v6 = (unsigned int **)*((_QWORD *)a2 + 49);
  v7 = *((unsigned int *)a2 + 101);
  *((_QWORD *)a2 + 49) = 0;
  *((_QWORD *)a2 + 50) = 0;
  v8 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v7 + 8));
  *v8 = 1;
  v8[1] = v7;
  if ((_DWORD)v7)
  {
    v16 = 0;
    do
    {
      v17 = v6[v16 / 2];
      v6[v16 / 2] = 0;
      *(_QWORD *)&v8[v16 + 2] = v17;
      v16 += 2;
    }
    while (2 * v7 != v16);
    *((_QWORD *)this + 5) = v8;
    WTF::VectorDestructor<true,WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>>::destruct(v6, (uint64_t)&v6[v7], v10, v11, v12, v13, v14, v15);
    if (v6)
      goto LABEL_9;
  }
  else
  {
    *((_QWORD *)this + 5) = v8;
    if (v6)
LABEL_9:
      WTF::fastFree((unint64_t)v6, v9, v10, v11, v12, v13, v14, v15);
  }
  JSC::Wasm::EntryPlan::takeWasmToJSExitStubs(a2, &v45);
  WTF::FixedVector<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>>::FixedVector<0ul,WTF::CrashOnOverflow>((unsigned int **)this + 6, (unint64_t *)&v45, v18, v19, v20, v21, v22, v23);
  v31 = v45;
  if (v47)
  {
    v32 = (WTF *)((char *)v45 + 16 * v47);
    do
    {
      v33 = (unsigned int *)*((_QWORD *)v31 + 1);
      *((_QWORD *)v31 + 1) = 0;
      if (v33)
      {
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          atomic_store(1u, v33);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v33, (uint64_t)v24, v25, v26, v27, v28, v29, v30);
          WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
        }
      }
      v31 = (WTF *)((char *)v31 + 16);
    }
    while (v31 != v32);
    v31 = v45;
  }
  if (v31)
  {
    v45 = 0;
    v46 = 0;
    WTF::fastFree((unint64_t)v31, v24, v25, v26, v27, v28, v29, v30);
  }
  *((_BYTE *)this + 56) = 0;
  return this;
}

void JSC::Wasm::Module::~Module(unsigned int **this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  JSC::Wasm::CalleeGroup *v36;

  WTF::FixedVector<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>>::~FixedVector(this + 6, a2, a3, a4, a5, a6, a7, a8);
  WTF::Ref<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>,WTF::RawPtrTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>>,WTF::DefaultRefDerefTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>>>::~Ref(this + 5, v9, v10, v11, v12, v13, v14, v15);
  WTF::Ref<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>,WTF::RawPtrTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>>,WTF::DefaultRefDerefTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>>>::~Ref(this + 4, v16, v17, v18, v19, v20, v21, v22);
  v30 = this[3];
  this[3] = 0;
  if (v30)
  {
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      v36 = (JSC::Wasm::CalleeGroup *)v30;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v36, v23, v24, v25, v26, v27, v28, v29);
    }
  }
  v33 = this[2];
  this[2] = 0;
  if (v33)
  {
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v33);
      v36 = (JSC::Wasm::CalleeGroup *)v33;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v36, v23, v24, v25, v26, v27, v28, v29);
    }
  }
  WTF::Ref<JSC::Wasm::ModuleInformation,WTF::RawPtrTraits<JSC::Wasm::ModuleInformation>,WTF::DefaultRefDerefTraits<JSC::Wasm::ModuleInformation>>::~Ref(this + 1);
}

uint64_t JSC::Wasm::Module::typeIndexFromFunctionIndexSpace(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(this + 8);
  v3 = a2;
  v4 = *(unsigned int *)(v2 + 36);
  if (v4 > a2)
  {
    v5 = (_QWORD *)(v2 + 24);
    return *(_QWORD *)(*v5 + 8 * v3);
  }
  v3 = a2 - v4;
  if (v3 < *(unsigned int *)(v2 + 52))
  {
    v5 = (_QWORD *)(v2 + 40);
    return *(_QWORD *)(*v5 + 8 * v3);
  }
  __break(0xC471u);
  return this;
}

JSC::Wasm::Module *JSC::Wasm::Module::validateSync@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned __int8 *v20;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned __int8 *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  JSC::Wasm::Module *result;
  int v42;
  JSC::Wasm::Module *v43;
  unsigned int v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  JSC::Wasm::Module *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int *v63;
  char v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;

  v6 = byte_1ECF4C798;
  v7 = WTF::fastMalloc((WTF *)0x1B8);
  if (v6)
  {
    v8 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)(v8 + 8) = 1;
    *(_QWORD *)v8 = off_1E35B5C50;
    v66 = v8;
    v9 = JSC::Wasm::EntryPlan::EntryPlan(v7, a1, a2, 1, &v66);
    *(_QWORD *)v7 = off_1E35B59B0;
    *(_QWORD *)(v7 + 72) = &unk_1E35B5A18;
    *(_OWORD *)(v7 + 368) = 0u;
    *(_OWORD *)(v7 + 384) = 0u;
    *(_OWORD *)(v7 + 400) = 0u;
    *(_OWORD *)(v7 + 416) = 0u;
    *(_QWORD *)(v7 + 432) = 0;
    if (JSC::Wasm::EntryPlan::parseAndValidateModule(v9, *(const void **)(v7 + 80), *(unsigned int *)(v7 + 92), 0.0, v10))JSC::Wasm::EntryPlan::prepare((JSC::Wasm::EntryPlan *)v7);
    v11 = (unsigned int *)v66;
    v66 = 0;
    if (v11)
    {
      v12 = v11 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v11 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
      }
    }
    v15 = atomic_load(&JSC::Wasm::ensureWorklist(void)::initializeWorklist);
    if (v15 != -1)
    {
      v66 = (uint64_t)&v64;
      v65 = &v66;
      std::__call_once(&JSC::Wasm::ensureWorklist(void)::initializeWorklist, &v65, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::ensureWorklist(void)::$_0 &&>>);
    }
    v16 = JSC::Wasm::globalWorklist;
    v17 = (unsigned int *)(v7 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v63 = (unsigned int *)v7;
    JSC::Wasm::Worklist::enqueue(v16, &v63);
    v19 = v63;
    v63 = 0;
    if (v19)
    {
      v56 = v19 + 2;
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (!v58)
      {
        atomic_store(1u, v19 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
      }
    }
    v20 = (unsigned __int8 *)(v7 + 13);
    if (__ldaxr((unsigned __int8 *)(v7 + 13)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v20))
    {
      goto LABEL_30;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v7 + 13);
LABEL_30:
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7) & 1) == 0)
    {
      v66 = 0x7FF0000000000000;
      v67 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v7 + 14, (unsigned __int8 *)(v7 + 13), (WTF::TimeWithDynamicClockType *)&v66);
    }
    v40 = __ldxr(v20);
    if (v40 == 1)
    {
      if (!__stlxr(0, v20))
        goto LABEL_37;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v7 + 13), 0, v34, v35, v36, v37, v38, v39);
LABEL_37:
    if (*(_QWORD *)(v7 + 56))
    {
      WTF::String::isolatedCopy((_DWORD *)(v7 + 56), &v66);
      result = (JSC::Wasm::Module *)v66;
      v42 = 1;
    }
    else
    {
      v43 = (JSC::Wasm::Module *)WTF::fastMalloc((WTF *)0x40);
      result = JSC::Wasm::Module::Module(v43, (JSC::Wasm::IPIntPlan *)v7);
      v42 = 0;
    }
    *(_QWORD *)a3 = result;
    *(_DWORD *)(a3 + 8) = v42;
    do
    {
      v44 = __ldaxr(v17);
      v45 = --v44 == 0;
    }
    while (__stlxr(v44, v17));
    goto LABEL_57;
  }
  v22 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v22 + 8) = 1;
  *(_QWORD *)v22 = off_1E35B5C50;
  v66 = v22;
  JSC::Wasm::LLIntPlan::LLIntPlan((JSC::Wasm::EntryPlan *)v7, a1, a2, 1, &v66);
  v23 = (unsigned int *)v66;
  v66 = 0;
  if (v23)
  {
    v24 = v23 + 2;
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v23 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
    }
  }
  v27 = atomic_load(&JSC::Wasm::ensureWorklist(void)::initializeWorklist);
  if (v27 != -1)
  {
    v66 = (uint64_t)&v64;
    v65 = &v66;
    std::__call_once(&JSC::Wasm::ensureWorklist(void)::initializeWorklist, &v65, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::ensureWorklist(void)::$_0 &&>>);
  }
  v28 = JSC::Wasm::globalWorklist;
  v29 = (unsigned int *)(v7 + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 + 1, v29));
  v62 = (unsigned int *)v7;
  JSC::Wasm::Worklist::enqueue(v28, &v62);
  v31 = v62;
  v62 = 0;
  if (v31)
  {
    v59 = v31 + 2;
    do
    {
      v60 = __ldaxr(v59);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v59));
    if (!v61)
    {
      atomic_store(1u, v31 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
    }
  }
  v32 = (unsigned __int8 *)(v7 + 13);
  if (__ldaxr((unsigned __int8 *)(v7 + 13)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v32))
  {
    goto LABEL_45;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v7 + 13);
LABEL_45:
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7) & 1) == 0)
  {
    v66 = 0x7FF0000000000000;
    v67 = 0;
    WTF::Condition::waitUntilUnchecked<WTF::Lock>(v7 + 14, (unsigned __int8 *)(v7 + 13), (WTF::TimeWithDynamicClockType *)&v66);
  }
  v52 = __ldxr(v32);
  if (v52 == 1)
  {
    if (!__stlxr(0, v32))
      goto LABEL_52;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v7 + 13), 0, v46, v47, v48, v49, v50, v51);
LABEL_52:
  if (*(_QWORD *)(v7 + 56))
  {
    WTF::String::isolatedCopy((_DWORD *)(v7 + 56), &v66);
    result = (JSC::Wasm::Module *)v66;
    v53 = 1;
  }
  else
  {
    v54 = (JSC::Wasm::Module *)WTF::fastMalloc((WTF *)0x40);
    result = JSC::Wasm::Module::Module(v54, (JSC::Wasm::LLIntPlan *)v7);
    v53 = 0;
  }
  *(_QWORD *)a3 = result;
  *(_DWORD *)(a3 + 8) = v53;
  do
  {
    v55 = __ldaxr(v29);
    v45 = --v55 == 0;
  }
  while (__stlxr(v55, v29));
LABEL_57:
  if (v45)
  {
    atomic_store(1u, (unsigned int *)(v7 + 8));
    return (JSC::Wasm::Module *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return result;
}

unsigned int *JSC::Wasm::Module::validateAsync(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  JSC::Wasm::EntryPlan *v7;
  uint64_t v8;
  uint64_t v9;
  JSC::Wasm *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *result;
  unsigned int *v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  JSC::Wasm *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int *v29;
  JSC::Wasm *v30;

  v6 = byte_1ECF4C798;
  v7 = (JSC::Wasm::EntryPlan *)WTF::fastMalloc((WTF *)0x1B8);
  if (!v6)
  {
    v8 = *a3;
    *a3 = 0;
    v9 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v9 + 8) = 1;
    *(_QWORD *)v9 = &off_1E35B5BF8;
    *(_QWORD *)(v9 + 16) = v8;
    v30 = (JSC::Wasm *)v9;
    JSC::Wasm::LLIntPlan::LLIntPlan(v7, a1, a2, 1, (uint64_t *)&v30);
    v10 = v30;
    v30 = 0;
    if (v10)
    {
      v11 = (unsigned int *)((char *)v10 + 8);
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)v10 + 2);
        v10 = (JSC::Wasm *)(*(uint64_t (**)(JSC::Wasm *))(*(_QWORD *)v10 + 8))(v10);
      }
    }
    v14 = JSC::Wasm::ensureWorklist(v10);
    v28 = (unsigned int *)v7;
    JSC::Wasm::Worklist::enqueue(v14, &v28);
    result = v28;
    v28 = 0;
    if (!result)
      return result;
    v16 = result + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = --v17 == 0;
    }
    while (__stlxr(v17, v16));
LABEL_11:
    if (v18)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
    return result;
  }
  v19 = *a3;
  *a3 = 0;
  v20 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v20 + 8) = 1;
  *(_QWORD *)v20 = &off_1E35B5BF8;
  *(_QWORD *)(v20 + 16) = v19;
  v30 = (JSC::Wasm *)v20;
  JSC::Wasm::IPIntPlan::IPIntPlan(v7, a1, a2, 1, (uint64_t *)&v30);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    v22 = (unsigned int *)((char *)v21 + 8);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, (unsigned int *)v21 + 2);
      v21 = (JSC::Wasm *)(*(uint64_t (**)(JSC::Wasm *))(*(_QWORD *)v21 + 8))(v21);
    }
  }
  v25 = JSC::Wasm::ensureWorklist(v21);
  v29 = (unsigned int *)v7;
  JSC::Wasm::Worklist::enqueue(v25, &v29);
  result = v29;
  v29 = 0;
  if (result)
  {
    v26 = result + 2;
    do
    {
      v27 = __ldaxr(v26);
      v18 = --v27 == 0;
    }
    while (__stlxr(v27, v26));
    goto LABEL_11;
  }
  return result;
}

void JSC::Wasm::Module::getOrCreateCalleeGroup(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned __int8 **a9@<X8>)
{
  unsigned int v9;
  unsigned __int8 *v13;
  uint64_t v15;
  unsigned int **v16;
  unsigned int *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  WTF::AtomStringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned __int8 *v91;
  JSC::Wasm::CalleeGroup *v92;

  v9 = a3;
  v91 = 0;
  v13 = (unsigned __int8 *)(a1 + 56);
  if (__ldaxr((unsigned __int8 *)(a1 + 56)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 56);
LABEL_4:
  v15 = a1 + 8 * v9;
  v17 = *(unsigned int **)(v15 + 16);
  v16 = (unsigned int **)(v15 + 16);
  WTF::RefPtr<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>>::operator=((unsigned int **)&v91, v17, a3, a4, a5, a6, a7, a8);
  if (v91)
  {
    v49 = atomic_load(v91 + 112);
    if ((v49 & 1) == 0)
      goto LABEL_21;
    v50 = atomic_load(v91 + 112);
    if ((v50 & 1) != 0 && !*((_QWORD *)v91 + 15))
      goto LABEL_21;
  }
  if (byte_1ECF4C798)
  {
    v51 = *(unsigned int **)(a1 + 8);
    v52 = *(unsigned int **)(a1 + 40);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 + 1, v52));
    v89 = v52;
    JSC::Wasm::CalleeGroup::createFromIPInt(a2, v9, v51, &v89, (uint64_t *)&v90);
    v62 = v90;
    v61 = (unsigned int *)v91;
    v90 = 0;
    v91 = (unsigned __int8 *)v62;
    if (v61)
    {
      do
      {
        v63 = __ldaxr(v61);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v61));
      if (!v64)
      {
        atomic_store(1u, v61);
        v92 = (JSC::Wasm::CalleeGroup *)v61;
        WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v92, v54, v55, v56, v57, v58, v59, v60);
      }
    }
    WTF::RefPtr<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>>::operator=(v16, (unsigned int *)v91, v55, v56, v57, v58, v59, v60);
    v65 = v90;
    v90 = 0;
    if (v65)
    {
      do
      {
        v66 = __ldaxr(v65);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, v65));
      if (!v67)
      {
        atomic_store(1u, v65);
        v92 = (JSC::Wasm::CalleeGroup *)v65;
        WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v92, v18, v19, v20, v21, v22, v23, v24);
      }
    }
    v68 = v89;
    v89 = 0;
    if (v68)
    {
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (!v70)
      {
        atomic_store(1u, v68);
        v92 = (JSC::Wasm::CalleeGroup *)v68;
        WTF::ThreadSafeRefCounted<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((unint64_t *)&v92, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
      }
    }
  }
  else if ((_BYTE)dword_1ECF4C702)
  {
    v25 = *(unsigned int **)(a1 + 8);
    v26 = *(unsigned int **)(a1 + 32);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 + 1, v26));
    v88 = v26;
    JSC::Wasm::CalleeGroup::createFromLLInt(a2, v9, v25, &v88, (uint64_t *)&v90);
    v36 = v90;
    v35 = (unsigned int *)v91;
    v90 = 0;
    v91 = (unsigned __int8 *)v36;
    if (v35)
    {
      do
      {
        v37 = __ldaxr(v35);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v35));
      if (!v38)
      {
        atomic_store(1u, v35);
        v92 = (JSC::Wasm::CalleeGroup *)v35;
        WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v92, v28, v29, v30, v31, v32, v33, v34);
      }
    }
    WTF::RefPtr<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>>::operator=(v16, (unsigned int *)v91, v29, v30, v31, v32, v33, v34);
    v39 = v90;
    v90 = 0;
    if (v39)
    {
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (!v41)
      {
        atomic_store(1u, v39);
        v92 = (JSC::Wasm::CalleeGroup *)v39;
        WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v92, v18, v19, v20, v21, v22, v23, v24);
      }
    }
    v42 = v88;
    v88 = 0;
    if (v42)
    {
      do
      {
        v43 = __ldaxr(v42);
        v44 = --v43 == 0;
      }
      while (__stlxr(v43, v42));
      goto LABEL_19;
    }
  }
  else
  {
    v71 = *(unsigned int **)(a1 + 8);
    v87 = 0;
    JSC::Wasm::CalleeGroup::createFromLLInt(a2, v9, v71, &v87, (uint64_t *)&v90);
    v80 = v90;
    v79 = (unsigned int *)v91;
    v90 = 0;
    v91 = (unsigned __int8 *)v80;
    if (v79)
    {
      do
      {
        v81 = __ldaxr(v79);
        v82 = v81 - 1;
      }
      while (__stlxr(v82, v79));
      if (!v82)
      {
        atomic_store(1u, v79);
        v92 = (JSC::Wasm::CalleeGroup *)v79;
        WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v92, v72, v73, v74, v75, v76, v77, v78);
      }
    }
    WTF::RefPtr<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>>::operator=(v16, (unsigned int *)v91, v73, v74, v75, v76, v77, v78);
    v83 = v90;
    v90 = 0;
    if (v83)
    {
      do
      {
        v84 = __ldaxr(v83);
        v85 = v84 - 1;
      }
      while (__stlxr(v85, v83));
      if (!v85)
      {
        atomic_store(1u, v83);
        v92 = (JSC::Wasm::CalleeGroup *)v83;
        WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v92, v18, v19, v20, v21, v22, v23, v24);
      }
    }
    v42 = v87;
    v87 = 0;
    if (v42)
    {
      do
      {
        v86 = __ldaxr(v42);
        v44 = --v86 == 0;
      }
      while (__stlxr(v86, v42));
LABEL_19:
      if (v44)
      {
        atomic_store(1u, v42);
        v92 = (JSC::Wasm::CalleeGroup *)v42;
        WTF::ThreadSafeRefCounted<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((unint64_t *)&v92, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
      }
    }
  }
LABEL_21:
  *a9 = v91;
  v91 = 0;
  v45 = __ldxr(v13);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_25;
  }
  if (__stlxr(0, v13))
LABEL_25:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, v19, v20, v21, v22, v23, v24);
  v46 = (unsigned int *)v91;
  v91 = 0;
  if (v46)
  {
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
    {
      atomic_store(1u, v46);
      v92 = (JSC::Wasm::CalleeGroup *)v46;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v92, v18, v19, v20, v21, v22, v23, v24);
    }
  }
}

unsigned int **WTF::RefPtr<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>>::operator=(unsigned int **a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  JSC::Wasm::CalleeGroup *v14;

  if (a2)
  {
    do
      v9 = __ldaxr(a2);
    while (__stlxr(v9 + 1, a2));
  }
  v10 = *a1;
  *a1 = a2;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      v14 = (JSC::Wasm::CalleeGroup *)v10;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v14, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

unsigned int **WTF::RefPtr<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>>::operator=<JSC::Wasm::CalleeGroup>(unsigned int **a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  JSC::Wasm::CalleeGroup *v14;

  v9 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      v14 = (JSC::Wasm::CalleeGroup *)v10;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v14, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void JSC::Wasm::Module::compileSync(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned __int8 **a9@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  JSC::Wasm::Module::getOrCreateCalleeGroup(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  JSC::Wasm::CalleeGroup::waitUntilFinished((JSC::Wasm::CalleeGroup *)*a9, v10, v11, v12, v13, v14, v15, v16);
}

void JSC::Wasm::Module::compileAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  JSC::Wasm::CalleeGroup *v26;

  JSC::Wasm::Module::getOrCreateCalleeGroup(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8, (unsigned __int8 **)&v25);
  v10 = v25;
  JSC::Wasm::CalleeGroup::compileAsync((uint64_t)v25, a2, a4, v11, v12, v13, v14, v15);
  v25 = 0;
  if (v10)
  {
    do
    {
      v23 = __ldaxr(v10);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v10));
    if (!v24)
    {
      atomic_store(1u, v10);
      v26 = (JSC::Wasm::CalleeGroup *)v10;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v26, v16, v17, v18, v19, v20, v21, v22);
    }
  }
}

void JSC::Wasm::Module::copyInitialCalleeGroupToAllMemoryModes(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  unsigned int **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::AtomStringImpl *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int *v36;
  JSC::Wasm::CalleeGroup *v37;

  v10 = (unsigned __int8 *)(a1 + 56);
  if (__ldaxr((unsigned __int8 *)(a1 + 56)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 56);
LABEL_4:
  v12 = *(_QWORD *)(a1 + 8 * a2 + 16);
  if (!a2)
    goto LABEL_5;
  if (!*(_QWORD *)(a1 + 16))
  {
    JSC::Wasm::CalleeGroup::createFromExisting(0, v12, (uint64_t *)&v36);
    WTF::RefPtr<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>>::operator=<JSC::Wasm::CalleeGroup>((unsigned int **)(a1 + 16), (WTF::AtomStringImpl *)&v36, v25, v26, v27, v28, v29, v30);
    v32 = v36;
    v36 = 0;
    if (v32)
    {
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        atomic_store(1u, v32);
        v37 = (JSC::Wasm::CalleeGroup *)v32;
        WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v37, v31, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  if (a2 != 1)
  {
LABEL_5:
    v14 = *(_QWORD *)(a1 + 24);
    v13 = (unsigned int **)(a1 + 24);
    if (!v14)
    {
      JSC::Wasm::CalleeGroup::createFromExisting(1, v12, (uint64_t *)&v36);
      WTF::RefPtr<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>>::operator=<JSC::Wasm::CalleeGroup>(v13, (WTF::AtomStringImpl *)&v36, v15, v16, v17, v18, v19, v20);
      v22 = v36;
      v36 = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v37 = (JSC::Wasm::CalleeGroup *)v22;
          WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v37, v21, a3, a4, a5, a6, a7, a8);
        }
      }
    }
  }
  v35 = __ldxr(v10);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_20;
  }
  if (__stlxr(0, v10))
LABEL_20:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

JSC::Wasm::ModuleInformation *JSC::Wasm::ModuleInformation::ModuleInformation(JSC::Wasm::ModuleInformation *this)
{
  JSC::Wasm::NameSection *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64x2_t v10;

  *(_DWORD *)this = 1;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 13) = -1;
  *((_WORD *)this + 56) = 0;
  *((_BYTE *)this + 156) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_BYTE *)this + 152) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_QWORD *)this + 30) = 0;
  v2 = (JSC::Wasm::NameSection *)WTF::fastMalloc((WTF *)0x38);
  *((_QWORD *)this + 31) = JSC::Wasm::NameSection::NameSection(v2, v3, v4, v5, v6, v7, v8, v9);
  *((_QWORD *)this + 32) = 0;
  *((_BYTE *)this + 264) = 0;
  *((_BYTE *)this + 268) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  v10 = vdupq_n_s64(0x8000000000000000);
  *((int64x2_t *)this + 19) = v10;
  *((int64x2_t *)this + 20) = v10;
  return this;
}

void JSC::Wasm::ModuleInformation::~ModuleInformation(JSC::Wasm::ModuleInformation *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;

  v9 = *((_QWORD *)this + 41);
  if ((v9 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v9, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 40);
  if ((v10 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v10, a2, a3, a4, a5, a6, a7, a8);
  v11 = *((_QWORD *)this + 39);
  if ((v11 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v11, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 38);
  if ((v12 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v12, a2, a3, a4, a5, a6, a7, a8);
  WTF::Vector<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 288, a2, a3, a4, a5, a6, a7, a8);
  WTF::Vector<WTF::RefPtr<JSC::Wasm::RTT const,WTF::RawPtrTraits<JSC::Wasm::RTT const>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 272, v13, v14, v15, v16, v17, v18, v19);
  WTF::HashMap<unsigned int,JSC::Wasm::BranchHintMap,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::Wasm::BranchHintMap>,WTF::HashTableTraits>::~HashMap((uint64_t *)this + 32, v20, v21, v22, v23, v24, v25, v26);
  WTF::Ref<JSC::Wasm::NameSection,WTF::RawPtrTraits<JSC::Wasm::NameSection>,WTF::DefaultRefDerefTraits<JSC::Wasm::NameSection>>::~Ref((unsigned int **)this + 31, v27, v28, v29, v30, v31, v32, v33);
  WTF::Vector<JSC::Wasm::CustomSection,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 232, v34, v35, v36, v37, v38, v39, v40);
  v48 = *((_QWORD *)this + 26);
  if (v48)
  {
    *((_QWORD *)this + 26) = 0;
    *((_DWORD *)this + 54) = 0;
    WTF::fastFree(v48, v41, v42, v43, v44, v45, v46, v47);
  }
  v49 = *((_QWORD *)this + 24);
  if (v49)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v49, v41, v42, v43, v44, v45, v46, v47);
  }
  WTF::Vector<JSC::Wasm::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 176, v41, v42, v43, v44, v45, v46, v47);
  WTF::Vector<std::unique_ptr<JSC::Wasm::Segment,void (*)(JSC::Wasm::Segment*)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 160, v50, v51, v52, v53, v54, v55, v56);
  WTF::Vector<JSC::Wasm::Export,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 136, v57, v58, v59, v60, v61, v62, v63);
  WTF::Vector<JSC::Wasm::FunctionData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 120, v64, v65, v66, v67, v68, v69, v70);
  WTF::Vector<WTF::Ref<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 88, v71, v72, v73, v74, v75, v76, v77);
  v85 = *((_QWORD *)this + 9);
  if (v85)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v85, v78, v79, v80, v81, v82, v83, v84);
  }
  v86 = *((_QWORD *)this + 7);
  if (v86)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v86, v78, v79, v80, v81, v82, v83, v84);
  }
  v87 = *((_QWORD *)this + 5);
  if (v87)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v87, v78, v79, v80, v81, v82, v83, v84);
  }
  v88 = *((_QWORD *)this + 3);
  if (v88)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v88, v78, v79, v80, v81, v82, v83, v84);
  }
  WTF::Vector<JSC::Wasm::Import,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 8, v78, v79, v80, v81, v82, v83, v84);
}

uint64_t *WTF::HashMap<unsigned int,JSC::Wasm::BranchHintMap,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::Wasm::BranchHintMap>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;

  v9 = *a1;
  if (*a1)
  {
    v11 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v11)
    {
      v12 = (_QWORD *)(v9 + 8);
      do
      {
        if (*((_DWORD *)v12 - 2) != -2 && *v12)
          WTF::fastFree(*v12 - 16, a2, a3, a4, a5, a6, a7, a8);
        v12 += 2;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void JSC::Wasm::NameSectionParser::parse(JSC::Wasm::NameSectionParser *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::Wasm::NameSection *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  float v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  JSC::Wasm::NameSection *v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  int v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  char v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  int v99;
  BOOL v100;
  unint64_t v101;
  unint64_t v102;
  JSC::Wasm::NameSection *v104;
  unint64_t v105;
  JSC::Wasm::NameSection *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  int v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v136;
  JSC::Wasm::NameSection *v137;
  const void *v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  BOOL v146;
  JSC::Wasm::NameSection *v147;
  unint64_t v148;
  JSC::Wasm::NameSection *v149;
  char *v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unsigned int v164;
  unsigned int v165;
  uint64_t v166;
  char *v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  _QWORD *v173;
  unint64_t *v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  int v178;
  int v179;
  uint64_t v181;
  uint64_t v182;
  JSC::Wasm::NameSection *v183;

  v5 = WTF::fastMalloc((WTF *)0x38);
  v13 = JSC::Wasm::NameSection::NameSection((JSC::Wasm::NameSection *)v5, v6, v7, v8, v9, v10, v11, v12);
  v23 = *(unsigned int *)(*((_QWORD *)this + 6) + 52)
      + (unint64_t)*(unsigned int *)(*((_QWORD *)this + 6) + 36);
  if (v23 > *((unsigned int *)v13 + 12))
  {
    if (v23 >> 28
      || (v24 = *(_QWORD *)(v5 + 40),
          v25 = *(unsigned int *)(v5 + 52),
          WTF::tryFastMalloc((WTF *)(16 * v23), &v183),
          (v26 = v183) == 0))
    {
      v166 = a2;
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't allocate enough memory for function names", (unint64_t *)this, 48, (_QWORD *)a2, v22);
      goto LABEL_288;
    }
    *(_DWORD *)(v5 + 48) = v23;
    *(_QWORD *)(v5 + 40) = v26;
    if ((_DWORD)v25)
    {
      v27 = 16 * v25;
      v28 = (_DWORD *)(v24 + 8);
      do
      {
        *(_QWORD *)v26 = 0;
        *((_QWORD *)v26 + 1) = 0;
        v29 = *((_QWORD *)v28 - 1);
        *((_QWORD *)v28 - 1) = 0;
        *(_QWORD *)v26 = v29;
        LODWORD(v29) = *v28;
        *v28 = 0;
        *((_DWORD *)v26 + 2) = v29;
        LODWORD(v29) = v28[1];
        v28[1] = 0;
        *((_DWORD *)v26 + 3) = v29;
        v30 = *((_QWORD *)v28 - 1);
        if (v30)
        {
          *((_QWORD *)v28 - 1) = 0;
          *v28 = 0;
          WTF::fastFree(v30, v14, v15, v16, v17, v18, v19, v20);
        }
        v28 += 4;
        v26 = (JSC::Wasm::NameSection *)((char *)v26 + 16);
        v27 -= 16;
      }
      while (v27);
    }
    if (v24)
    {
      if (*(_QWORD *)(v5 + 40) == v24)
      {
        *(_QWORD *)(v5 + 40) = 0;
        *(_DWORD *)(v5 + 48) = 0;
      }
      WTF::fastFree(v24, v14, v15, v16, v17, v18, v19, v20);
    }
  }
  v31 = *((_QWORD *)this + 6);
  v32 = *(unsigned int *)(v31 + 36);
  v33 = *(unsigned int *)(v31 + 52);
  v34 = v33 + v32;
  v35 = *(unsigned int *)(v5 + 52);
  if (v33 + v32 <= v35)
  {
    if (v33 + v32 != v35)
    {
      v49 = *(_QWORD *)(v5 + 40) + 16 * v34;
      v50 = 16 * v35 - 16 * v34;
      do
      {
        v51 = *(_QWORD *)v49;
        if (*(_QWORD *)v49)
        {
          *(_QWORD *)v49 = 0;
          *(_DWORD *)(v49 + 8) = 0;
          WTF::fastFree(v51, v14, v15, v16, v17, v18, v19, v20);
        }
        v49 += 16;
        v50 -= 16;
      }
      while (v50);
    }
  }
  else
  {
    v36 = *(unsigned int *)(v5 + 48);
    if (v34 > v36)
    {
      v37 = v36 + (v36 >> 2);
      if (v37 >= 0x10)
        v38 = v37 + 1;
      else
        v38 = 16;
      if (v38 <= v34)
        v2 = v34;
      else
        v2 = v38;
      if (v2 >> 28)
      {
LABEL_289:
        __break(0xC471u);
        JUMPOUT(0x198D82F84);
      }
      v39 = *(_QWORD *)(v5 + 40);
      v40 = WTF::fastMalloc((WTF *)(16 * v2));
      *(_DWORD *)(v5 + 48) = v2;
      *(_QWORD *)(v5 + 40) = v40;
      if ((_DWORD)v35)
      {
        v43 = v40;
        v44 = 16 * v35;
        v2 = v39 + 8;
        do
        {
          *(_QWORD *)v43 = 0;
          *(_QWORD *)(v43 + 8) = 0;
          v45 = *(_QWORD *)(v2 - 8);
          *(_QWORD *)(v2 - 8) = 0;
          *(_QWORD *)v43 = v45;
          LODWORD(v45) = *(_DWORD *)v2;
          *(_DWORD *)v2 = 0;
          *(_DWORD *)(v43 + 8) = v45;
          LODWORD(v45) = *(_DWORD *)(v2 + 4);
          *(_DWORD *)(v2 + 4) = 0;
          *(_DWORD *)(v43 + 12) = v45;
          v46 = *(_QWORD *)(v2 - 8);
          if (v46)
          {
            *(_QWORD *)(v2 - 8) = 0;
            *(_DWORD *)v2 = 0;
            WTF::fastFree(v46, v41, v15, v16, v42, v18, v19, v20);
          }
          v2 += 16;
          v43 += 16;
          v44 -= 16;
        }
        while (v44);
      }
      if (v39)
      {
        if (*(_QWORD *)(v5 + 40) == v39)
        {
          *(_QWORD *)(v5 + 40) = 0;
          *(_DWORD *)(v5 + 48) = 0;
        }
        WTF::fastFree(v39, v41, v15, v16, v42, v18, v19, v20);
      }
    }
    v47 = *(_QWORD *)(v5 + 40);
    if (v47)
    {
      v48 = *(unsigned int *)(v5 + 52);
      if (v34 != v48)
        bzero((void *)(v47 + 16 * v48), (16 * v34 - 16 * v48) & 0xFFFFFFFFFFFFFFF0);
    }
  }
  *(_DWORD *)(v5 + 52) = v34;
  v52 = *(char **)this;
  v53 = *((_QWORD *)this + 2);
  if (*(_QWORD *)this >= v53)
  {
LABEL_237:
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 8) = 0;
    return;
  }
  v54 = 0;
  v182 = v5;
  while (1)
  {
    if ((unint64_t)v52 >= v53)
      goto LABEL_286;
    v55 = *((_QWORD *)this + 1);
    v56 = v52 + 1;
    *(_QWORD *)this = v52 + 1;
    if (v52[v55] < 0)
    {
      ++v52;
LABEL_286:
      v167 = "can't get name type for payload ";
      v166 = a2;
      v168 = (_QWORD *)a2;
      v169 = 33;
      goto LABEL_287;
    }
    if (v53 <= (unint64_t)v56)
      goto LABEL_272;
    LODWORD(v57) = 0;
    v58 = 0;
    LODWORD(v59) = 0;
    v60 = v52[v55];
    v61 = v53 - (unint64_t)v56 >= 5 ? 5 : v53 - (_QWORD)v56;
    v62 = v61 - 1;
    v63 = v52 + 2;
    *(_QWORD *)this = v52 + 2;
    v64 = (unint64_t)(v52 + 4);
    while (1)
    {
      v65 = v56[v55];
      v56 = v63;
      v59 = ((v65 & 0x7F) << v58) | v59;
      if ((v65 & 0x80000000) == 0)
        break;
      if (v62 == v57)
        goto LABEL_272;
      v58 += 7;
      v57 = (v57 + 1);
      ++v63;
      *(_QWORD *)this = v56 + 1;
      ++v64;
      if ((char *)v53 == v56)
        goto LABEL_255;
    }
    if ((_DWORD)v57 == 4 && v65 >= 0x10u)
    {
LABEL_272:
      v152 = "can't get payload length for payload ";
      v153 = a2;
      v154 = (_QWORD *)a2;
      v112 = (unint64_t)v56;
      v155 = 38;
      goto LABEL_280;
    }
    v66 = v53 - (_QWORD)v63;
    if (v53 - (unint64_t)v63 < v59)
    {
      v167 = "payload length is too big for payload ";
      v166 = a2;
      v168 = (_QWORD *)a2;
      v52 = v63;
      v169 = 39;
LABEL_287:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long>(v168, (unint64_t)v52, v167, v169, v54, v21, v22);
      goto LABEL_288;
    }
    if (v60 >= 3)
    {
      v52 = &v63[v59];
      *(_QWORD *)this = &v63[v59];
      goto LABEL_225;
    }
    v181 = v54;
    if (v60 == 2)
      break;
    if (v60 != 1)
    {
      if (v53 <= (unint64_t)v63)
        goto LABEL_236;
      v67 = 0;
      LODWORD(v57) = 0;
      LODWORD(v2) = 0;
      if (v66 >= 5)
        v68 = 5;
      else
        v68 = v53 - (_QWORD)v63;
      v69 = v68 - 1;
      v70 = (unint64_t)(v63 + 1);
      *(_QWORD *)this = v63 + 1;
      v71 = &v63[v55];
      v72 = &v63[-v53];
      while (1)
      {
        v73 = v71[v67];
        v2 = ((v73 & 0x7F) << v57) | v2;
        if ((v73 & 0x80000000) == 0)
          break;
        if (v69 == v67)
          goto LABEL_235;
        ++v70;
        *(_QWORD *)this = v64 + v67;
        v57 = (v57 + 7);
        if (!&v72[++v67])
          goto LABEL_255;
      }
      if ((_DWORD)v67 == 4 && v71[v67] > 0xFu)
      {
LABEL_235:
        v56 = (char *)v70;
LABEL_236:
        v152 = "can't get module's name length for payload ";
        v153 = a2;
        v154 = (_QWORD *)a2;
        v112 = (unint64_t)v56;
        v155 = 44;
        goto LABEL_279;
      }
      if ((_DWORD)v2)
      {
        if (v53 < v2 || (v2 <= 0x186A0 ? (v146 = v70 > v53 - v2) : (v146 = 1), v146))
        {
          v147 = 0;
LABEL_258:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>("can't get module's name of length ", (unint64_t *)this, 35, v2, " for payload ", 14, v181, (_QWORD *)a2, v22);
          *(_DWORD *)(a2 + 8) = 1;
          if (v147)
          {
            v163 = (unint64_t)v147;
            goto LABEL_242;
          }
          goto LABEL_243;
        }
        WTF::tryFastMalloc((WTF *)v2, &v183);
        v147 = v183;
        if (!v183)
          goto LABEL_258;
        v64 = *(_QWORD *)this;
        v148 = *((_QWORD *)this + 2);
        v100 = v148 >= *(_QWORD *)this;
        v53 = v148 - *(_QWORD *)this;
        if (!v100 || v53 < v2)
          goto LABEL_255;
        v149 = 0;
        v150 = (char *)(*((_QWORD *)this + 1) + v64);
        do
        {
          v183 = v149;
          if (WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)v150, v2, (unint64_t *)&v183) == -1)break;
          v149 = v183;
        }
        while ((unint64_t)v183 < v2);
        if ((unint64_t)v149 > v2)
        {
LABEL_255:
          __break(1u);
LABEL_256:
          v104 = 0;
          v97 = (char *)(v64 + v53 + v57 + 2);
LABEL_240:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>((int **)a2, (unint64_t)v97, "can't get function ", 20, v2, v3, v181, v21, v22);
          *(_DWORD *)(a2 + 8) = 1;
          if (v104)
          {
            v163 = (unint64_t)v104;
            goto LABEL_242;
          }
          goto LABEL_243;
        }
        if (v149 != (JSC::Wasm::NameSection *)v2)
          goto LABEL_258;
        memcpy(v147, v150, v2);
        *(_QWORD *)this += v2;
      }
      else
      {
        v147 = 0;
      }
      v151 = *(_QWORD *)(v5 + 8);
      if (v151)
      {
        *(_QWORD *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 16) = 0;
        WTF::fastFree(v151, v52, v15, v16, v54, v18, v19, v20);
      }
      *(_QWORD *)(v5 + 8) = v147;
      *(_DWORD *)(v5 + 16) = v2;
      *(_DWORD *)(v5 + 20) = v2;
      goto LABEL_223;
    }
    if (v53 <= (unint64_t)v63)
    {
      v52 = v63;
LABEL_283:
      v167 = "can't get function count for payload ";
      v166 = a2;
      v168 = (_QWORD *)a2;
      v169 = 38;
      goto LABEL_287;
    }
    v57 = 0;
    v74 = 0;
    LODWORD(v75) = 0;
    if (v66 >= 5)
      v76 = 5;
    else
      v76 = v53 - (_QWORD)v63;
    v77 = v76 - 1;
    v52 = v63 + 1;
    *(_QWORD *)this = v63 + 1;
    v78 = &v63[v55];
    v53 = (unint64_t)&v63[-v53];
    while (1)
    {
      v79 = v78[v57];
      v75 = ((v79 & 0x7F) << v74) | v75;
      if ((v79 & 0x80000000) == 0)
        break;
      if (v77 == v57)
        goto LABEL_283;
      ++v52;
      *(_QWORD *)this = v64 + v57;
      v74 += 7;
      ++v57;
      if (!(v53 + v57))
        goto LABEL_255;
    }
    if ((_DWORD)v57 == 4 && v78[v57] >= 0x10u)
      goto LABEL_283;
    if ((_DWORD)v75)
    {
      LODWORD(v2) = 0;
      while (1)
      {
        v86 = *((_QWORD *)this + 2);
        v64 = *(_QWORD *)this;
        v87 = v86 - *(_QWORD *)this;
        if (v86 <= *(_QWORD *)this)
          goto LABEL_266;
        v53 = 0;
        LODWORD(v57) = 0;
        LODWORD(v88) = 0;
        v89 = *((_QWORD *)this + 1);
        v90 = v87 >= 5 ? 5 : v86 - *(_QWORD *)this;
        v91 = v90 - 1;
        *(_QWORD *)this = v64 + 1;
        while (1)
        {
          v92 = *(char *)(v89 + v64 + v53);
          v88 = ((v92 & 0x7F) << v57) | v88;
          if ((v92 & 0x80000000) == 0)
            break;
          if (v91 == v53)
            goto LABEL_266;
          *(_QWORD *)this = v64 + v53++ + 2;
          v57 = (v57 + 7);
          if (v87 == v53)
            goto LABEL_255;
        }
        if ((_DWORD)v53 == 4 && *(unsigned __int8 *)(v89 + v64 + v53) >= 0x10u)
        {
LABEL_266:
          v171 = "can't get function ";
          v172 = " index for payload ";
          v166 = a2;
          v173 = (_QWORD *)a2;
          v174 = (unint64_t *)this;
          v175 = 20;
          goto LABEL_267;
        }
        v93 = *(unsigned int *)(*((_QWORD *)this + 6) + 52)
            + (unint64_t)*(unsigned int *)(*((_QWORD *)this + 6) + 36);
        if (v93 <= v88)
        {
          v166 = a2;
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,unsigned long>((int **)a2, v64 + v53 + 1, v2, v88, v93, v181, v21, v22);
          goto LABEL_288;
        }
        if (v86 <= v64 + v53 + 1)
          break;
        v57 = 0;
        v94 = 0;
        LODWORD(v3) = 0;
        v95 = ~v53 + v87;
        if (v95 >= 5)
          v95 = 5;
        v96 = v95 - 1;
        v97 = (char *)(v64 + v53 + 2);
        *(_QWORD *)this = v97;
        v98 = v89 + v64 + v53 + 1;
        while (1)
        {
          v99 = *(char *)(v98 + v57);
          v3 = ((v99 & 0x7F) << v94) | v3;
          if ((v99 & 0x80000000) == 0)
            break;
          if (v96 == v57)
            goto LABEL_268;
          ++v97;
          *(_QWORD *)this = v64 + v53 + v57++ + 3;
          v94 += 7;
          if (!(v64 - v86 + v53 + 1 + v57))
            goto LABEL_255;
        }
        if ((_DWORD)v57 == 4 && *(unsigned __int8 *)(v98 + v57) >= 0x10u)
          break;
        if ((_DWORD)v3)
        {
          v100 = v86 >= v3;
          v101 = v86 - v3;
          if (!v100)
            goto LABEL_256;
          v102 = v64 + v53 + v57 + 2;
          if (v3 > 0x186A0 || v102 > v101)
          {
            v104 = 0;
            goto LABEL_240;
          }
          WTF::tryFastMalloc((WTF *)v3, &v183);
          v104 = v183;
          v97 = *(char **)this;
          if (!v183)
            goto LABEL_240;
          v105 = *((_QWORD *)this + 2);
          v100 = v105 >= (unint64_t)v97;
          v64 = v105 - (_QWORD)v97;
          if (!v100 || v64 < v3)
            goto LABEL_255;
          v5 = v75;
          v106 = 0;
          v107 = &v97[*((_QWORD *)this + 1)];
          do
          {
            v183 = v106;
            if (WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)v107, v3, (unint64_t *)&v183) == -1)break;
            v106 = v183;
          }
          while ((unint64_t)v183 < v3);
          if ((unint64_t)v106 > v3)
            goto LABEL_255;
          if (v106 != (JSC::Wasm::NameSection *)v3)
          {
            v97 = *(char **)this;
            v5 = v182;
            goto LABEL_240;
          }
          memcpy(v104, v107, v3);
          *(_QWORD *)this += v3;
          v75 = v5;
          v5 = v182;
        }
        else
        {
          v104 = 0;
        }
        if (*(_DWORD *)(v5 + 52) <= v88)
          goto LABEL_289;
        v108 = *(_QWORD *)(v5 + 40) + 16 * v88;
        v109 = *(_QWORD *)v108;
        if (*(_QWORD *)v108)
        {
          *(_QWORD *)v108 = 0;
          *(_DWORD *)(v108 + 8) = 0;
          WTF::fastFree(v109, v97, v15, v16, v93, v18, v19, v20);
        }
        *(_QWORD *)v108 = v104;
        *(_DWORD *)(v108 + 8) = v3;
        *(_DWORD *)(v108 + 12) = v3;
        LODWORD(v2) = v2 + 1;
        if ((_DWORD)v2 == (_DWORD)v75)
          goto LABEL_223;
      }
LABEL_268:
      v171 = "can't get functions ";
      v172 = "'s name length for payload ";
      v166 = a2;
      v173 = (_QWORD *)a2;
      v174 = (unint64_t *)this;
      v175 = 21;
LABEL_269:
      v176 = v2;
      v177 = 28;
LABEL_270:
      v170 = v181;
LABEL_271:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(v171, v174, v175, v176, v172, v177, v170, v173, v22);
LABEL_288:
      *(_DWORD *)(v166 + 8) = 1;
      goto LABEL_243;
    }
LABEL_223:
    v52 = &v56[v59];
    if (&v56[v59] != *(char **)this)
    {
      v170 = *(_QWORD *)this - (_QWORD)v56;
      v171 = "payload for name section is not correct size, expected ";
      v172 = " got ";
      v166 = a2;
      v173 = (_QWORD *)a2;
      v174 = (unint64_t *)this;
      v175 = 56;
      v176 = v59;
      v177 = 6;
      goto LABEL_271;
    }
    v53 = *((_QWORD *)this + 2);
    v54 = v181;
LABEL_225:
    ++v54;
    if ((unint64_t)v52 >= v53)
      goto LABEL_237;
  }
  if (v53 <= (unint64_t)v63)
    goto LABEL_278;
  v80 = 0;
  LODWORD(v57) = 0;
  v81 = 0;
  if (v66 >= 5)
    v82 = 5;
  else
    v82 = v53 - (_QWORD)v63;
  v83 = v82 - 1;
  *(_QWORD *)this = v63 + 1;
  v84 = v55 + 2;
  v53 = 2 - v53;
  while (1)
  {
    v85 = *(char *)(v84 + v64 - 4);
    v81 |= (v85 & 0x7F) << v57;
    if ((v85 & 0x80000000) == 0)
      break;
    if (v83 == v80)
      goto LABEL_277;
    ++v80;
    *(_QWORD *)this = v64++;
    v57 = (v57 + 7);
    if (v53 + v64 == 4)
      goto LABEL_255;
  }
  if (v80 == 4 && *(unsigned __int8 *)(v84 + v64 - 4) >= 0x10u)
  {
LABEL_277:
    v56 = (char *)(v64 - 1);
LABEL_278:
    v152 = "can't get function count for local name payload ";
    v153 = a2;
    v154 = (_QWORD *)a2;
    v112 = (unint64_t)v56;
    v155 = 49;
LABEL_279:
    v54 = v181;
LABEL_280:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long>(v154, v112, v152, v155, v54, v21, v22);
    *(_DWORD *)(v153 + 8) = 1;
    v5 = v182;
    goto LABEL_243;
  }
  if (!v81)
    goto LABEL_223;
  v110 = 0;
  v178 = v81;
  while (1)
  {
    v111 = *((_QWORD *)this + 2);
    v112 = *(_QWORD *)this;
    v57 = v111 - *(_QWORD *)this;
    if (v111 <= *(_QWORD *)this)
      goto LABEL_276;
    v64 = 0;
    v113 = *((_QWORD *)this + 1);
    if (v57 >= 5)
      v114 = 5;
    else
      v114 = v111 - *(_QWORD *)this;
    v53 = v114 - 1;
    *(_QWORD *)this = v112 + 1;
    while (*(char *)(v113 + v112 + v64) < 0)
    {
      if (v53 == v64)
        goto LABEL_275;
      *(_QWORD *)this = v112 + v64++ + 2;
      if (v57 == v64)
        goto LABEL_255;
    }
    if ((_DWORD)v64 == 4 && *(unsigned __int8 *)(v113 + v112 + v64) >= 0x10u)
    {
LABEL_275:
      v112 += v64 + 1;
LABEL_276:
      v152 = "can't get local's function index for payload ";
      v153 = a2;
      v154 = (_QWORD *)a2;
      v155 = 46;
      goto LABEL_279;
    }
    if (v111 <= v112 + v64 + 1)
    {
      v112 += v64 + 1;
LABEL_274:
      v152 = "can't get local count for payload ";
      v153 = a2;
      v154 = (_QWORD *)a2;
      v155 = 35;
      goto LABEL_279;
    }
    v53 = 0;
    v115 = 0;
    v116 = 0;
    v117 = ~v64 + v57;
    v57 = v112 + v64;
    *(_QWORD *)this = v112 + v64 + 2;
    if (v117 >= 5)
      v117 = 5;
    v118 = v117 - 1;
    v119 = v113 + v57 + 1;
    v120 = v112 - v111 + v64 + 1;
    while (1)
    {
      v121 = *(char *)(v119 + v53);
      v116 |= (v121 & 0x7F) << v115;
      if ((v121 & 0x80000000) == 0)
        break;
      if (v118 == v53)
        goto LABEL_273;
      *(_QWORD *)this = v57 + v53++ + 3;
      v115 += 7;
      if (!(v120 + v53))
        goto LABEL_255;
    }
    v179 = v110;
    if ((_DWORD)v53 == 4 && *(unsigned __int8 *)(v119 + v53) >= 0x10u)
    {
LABEL_273:
      v112 += v64 + v53 + 2;
      goto LABEL_274;
    }
    if (v116)
      break;
LABEL_197:
    v110 = v179 + 1;
    if (v179 + 1 == v178)
      goto LABEL_223;
  }
  LODWORD(v2) = 0;
  while (2)
  {
    v53 = *((_QWORD *)this + 2);
    v64 = *(_QWORD *)this;
    v122 = v53 - *(_QWORD *)this;
    if (v53 <= *(_QWORD *)this)
      goto LABEL_264;
    v123 = 0;
    v57 = *((_QWORD *)this + 1);
    v124 = v122 >= 5 ? 5 : v53 - *(_QWORD *)this;
    v125 = v124 - 1;
    *(_QWORD *)this = v64 + 1;
    while (*(char *)(v57 + v64 + v123) < 0)
    {
      if (v125 == v123)
        goto LABEL_264;
      *(_QWORD *)this = v64 + v123++ + 2;
      if (v122 == v123)
        goto LABEL_255;
    }
    if ((_DWORD)v123 == 4 && *(unsigned __int8 *)(v57 + v64 + v123) >= 0x10u)
    {
LABEL_264:
      v171 = "can't get local ";
      v172 = " index for payload ";
      v166 = a2;
      v173 = (_QWORD *)a2;
      v174 = (unint64_t *)this;
      v175 = 17;
LABEL_267:
      v176 = v2;
      v177 = 20;
      goto LABEL_270;
    }
    if (v53 <= v64 + v123 + 1)
      goto LABEL_265;
    v126 = 0;
    v127 = 0;
    LODWORD(v128) = 0;
    v129 = ~v123 + v122;
    if (v129 >= 5)
      v129 = 5;
    v130 = v129 - 1;
    v131 = v64 + v123 + 2;
    *(_QWORD *)this = v131;
    v57 += v64 + v123 + 1;
    while (1)
    {
      v132 = *(char *)(v57 + v126);
      v128 = ((v132 & 0x7F) << v127) | v128;
      if ((v132 & 0x80000000) == 0)
        break;
      if (v130 == v126)
        goto LABEL_265;
      ++v131;
      *(_QWORD *)this = v64 + v123 + v126++ + 3;
      v127 += 7;
      if (!(v64 - v53 + v123 + 1 + v126))
        goto LABEL_255;
    }
    if ((_DWORD)v126 == 4 && *(unsigned __int8 *)(v57 + v126) >= 0x10u)
    {
LABEL_265:
      v171 = "can't get local ";
      v172 = "'s name length for payload ";
      v166 = a2;
      v173 = (_QWORD *)a2;
      v174 = (unint64_t *)this;
      v175 = 17;
      goto LABEL_269;
    }
    if (!(_DWORD)v128)
    {
LABEL_191:
      LODWORD(v2) = v2 + 1;
      if ((_DWORD)v2 == v116)
        goto LABEL_197;
      continue;
    }
    break;
  }
  v100 = v53 >= v128;
  v133 = v53 - v128;
  if (!v100)
  {
    v3 = 0;
    v131 = v64 + v123 + v126 + 2;
    goto LABEL_238;
  }
  v134 = v64 + v123 + v126 + 2;
  if (v128 <= 0x186A0 && v134 <= v133)
  {
    WTF::tryFastMalloc((WTF *)v128, &v183);
    v3 = (unint64_t)v183;
    v131 = *(_QWORD *)this;
    if (!v183)
      goto LABEL_238;
    v136 = *((_QWORD *)this + 2);
    v100 = v136 >= v131;
    v64 = v136 - v131;
    if (!v100 || v64 < v128)
      goto LABEL_255;
    v137 = 0;
    v138 = (const void *)(*((_QWORD *)this + 1) + v131);
    do
    {
      v183 = v137;
      if (WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)v138, v128, (unint64_t *)&v183) == -1)break;
      v137 = v183;
    }
    while ((unint64_t)v183 < v128);
    if ((unint64_t)v137 > v128)
      goto LABEL_255;
    if (v137 != (JSC::Wasm::NameSection *)v128)
    {
      v131 = *(_QWORD *)this;
      goto LABEL_238;
    }
    memcpy((void *)v3, v138, v128);
    *(_QWORD *)this += v128;
    WTF::fastFree(v3, v139, v140, v141, v142, v143, v144, v145);
    goto LABEL_191;
  }
  v3 = 0;
LABEL_238:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>((int **)a2, v131, "can't get local ", 17, v2, v128, v181, v21, v22);
  *(_DWORD *)(a2 + 8) = 1;
  if (!v3)
    goto LABEL_243;
  v163 = v3;
LABEL_242:
  WTF::fastFree(v163, v156, v157, v158, v159, v160, v161, v162);
  do
  {
LABEL_243:
    v164 = __ldaxr((unsigned int *)v5);
    v165 = v164 - 1;
  }
  while (__stlxr(v165, (unsigned int *)v5));
  if (!v165)
  {
    atomic_store(1u, (unsigned int *)v5);
    v183 = (JSC::Wasm::NameSection *)v5;
    WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v183, v156, v157, v158, v159, v160, v161, v162);
  }
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long>(_QWORD *a1, unint64_t a2, char *__src, uint64_t a4, uint64_t a5, double a6, float a7)
{
  unsigned int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  int *v54;
  unint64_t v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  WTF *v59;
  __int128 v60;
  _BYTE v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v58 = (const char *)off_1E3572250;
  v59 = (WTF *)v61;
  v60 = xmmword_199122F80;
  v61[0] = 0;
  if (__src)
  {
    v10 = a4 - 1;
    if (!a4)
      v10 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v10, (uint64_t)&v56, a7);
  }
  else
  {
    WTF::CString::CString((uint64_t *)&v56, &str_25, 0);
    LODWORD(v57) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v58, "StringView", &v56);
  if ((_DWORD)v57 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v57])(&v55, &v56);
  (*((void (**)(const char **))v58 + 5))(&v58);
  (*((void (**)(const char **))v58 + 5))(&v58);
  v18 = v59;
  if (!v59)
  {
    v53 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v59, v60, (uint64_t *)&v53);
  v18 = v59;
  if (v59 != (WTF *)v61)
LABEL_12:
    WTF::fastFree((unint64_t)v18, v11, v12, v13, v14, v15, v16, v17);
  v58 = (const char *)off_1E3572250;
  v59 = (WTF *)v61;
  v60 = xmmword_199122F80;
  v61[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v58, "%lu", a5);
  (*((void (**)(const char **))v58 + 5))(&v58);
  v26 = v59;
  if (!v59)
  {
    v52 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v59, v60, (uint64_t *)&v52);
  v26 = v59;
  if (v59 != (WTF *)v61)
LABEL_17:
    WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
  v58 = "WebAssembly.Module doesn't parse at byte ";
  v59 = (WTF *)42;
  v56 = ": ";
  v57 = 3;
  v55 = a2;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::String>((uint64_t)&v58, &v55, (uint64_t)&v56, (uint64_t *)&v53, (uint64_t *)&v52, &v54);
  if (v54)
  {
    *a1 = v54;
    v54 = 0;
    v34 = v52;
    v52 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::~StringImpl(v34, v27, v28, v29, v30, v31, v32, v33);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      }
      else
      {
        *(_DWORD *)v34 -= 2;
      }
    }
    v35 = v53;
    v53 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
      {
        WTF::StringImpl::~StringImpl(v35, v27, v28, v29, v30, v31, v32, v33);
        WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
      }
      else
      {
        *(_DWORD *)v35 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,unsigned long>(int **a1, unint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, double a7, float a8)
{
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  float v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  float v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  float v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  int v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  unint64_t v87;
  BOOL v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  unint64_t v107;
  _WORD *v108;
  unsigned int v110;
  int **v111;
  _DWORD *v112;
  char *v113;
  int8x16_t *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  __int128 v118;
  char *v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  char *v123;
  char *v124;
  char *v125;
  __int16 v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unsigned int v202;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  int v214;
  unsigned int v215;
  int v216;
  char v217;
  void (**v218)(WTF::StringPrintStream *__hidden);
  WTF *v219;
  __int128 v220;
  _BYTE v221[128];
  uint64_t v222;
  int8x16x2_t v223;
  int8x16x2_t v224;
  int8x16x2_t v225;

  v222 = *MEMORY[0x1E0C80C00];
  v218 = off_1E3572250;
  v219 = (WTF *)v221;
  v220 = xmmword_199122F80;
  v221[0] = 0;
  WTF::StringImpl::utf8ForCharacters("function ", 9uLL, (uint64_t)&v214, a8);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v218, "StringView", &v214);
  if (v216 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v216])(&v217, &v214);
  v218[5]((WTF::StringPrintStream *)&v218);
  v218[5]((WTF::StringPrintStream *)&v218);
  v20 = v219;
  if (!v219)
  {
    v213 = 0;
    goto LABEL_7;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v219, v220, (uint64_t *)&v213);
  v20 = v219;
  if (v219 != (WTF *)v221)
LABEL_7:
    WTF::fastFree((unint64_t)v20, v13, v14, v15, v16, v17, v18, v19);
  v218 = off_1E3572250;
  v219 = (WTF *)v221;
  v220 = xmmword_199122F80;
  v221[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v218, "%u", a3);
  v218[5]((WTF::StringPrintStream *)&v218);
  v28 = v219;
  if (!v219)
  {
    v212 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v219, v220, (uint64_t *)&v212);
  v28 = v219;
  if (v219 != (WTF *)v221)
LABEL_12:
    WTF::fastFree((unint64_t)v28, v21, v22, v23, v24, v25, v26, v27);
  v218 = off_1E3572250;
  v219 = (WTF *)v221;
  v220 = xmmword_199122F80;
  v221[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" index ", 7uLL, (uint64_t)&v214, v29);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v218, "StringView", &v214);
  if (v216 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v216])(&v217, &v214);
  v218[5]((WTF::StringPrintStream *)&v218);
  v218[5]((WTF::StringPrintStream *)&v218);
  v37 = v219;
  if (!v219)
  {
    v211 = 0;
    goto LABEL_19;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v219, v220, (uint64_t *)&v211);
  v37 = v219;
  if (v219 != (WTF *)v221)
LABEL_19:
    WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
  v218 = off_1E3572250;
  v219 = (WTF *)v221;
  v220 = xmmword_199122F80;
  v221[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v218, "%u", a4);
  v218[5]((WTF::StringPrintStream *)&v218);
  v45 = v219;
  if (!v219)
  {
    v210 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v219, v220, (uint64_t *)&v210);
  v45 = v219;
  if (v219 != (WTF *)v221)
LABEL_24:
    WTF::fastFree((unint64_t)v45, v38, v39, v40, v41, v42, v43, v44);
  v218 = off_1E3572250;
  v219 = (WTF *)v221;
  v220 = xmmword_199122F80;
  v221[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" is larger than function index space ", 0x25uLL, (uint64_t)&v214, v46);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v218, "StringView", &v214);
  if (v216 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v216])(&v217, &v214);
  v218[5]((WTF::StringPrintStream *)&v218);
  v218[5]((WTF::StringPrintStream *)&v218);
  v54 = v219;
  if (!v219)
  {
    v209 = 0;
    goto LABEL_31;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v219, v220, (uint64_t *)&v209);
  v54 = v219;
  if (v219 != (WTF *)v221)
LABEL_31:
    WTF::fastFree((unint64_t)v54, v47, v48, v49, v50, v51, v52, v53);
  v218 = off_1E3572250;
  v219 = (WTF *)v221;
  v220 = xmmword_199122F80;
  v221[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v218, "%lu", a5);
  v218[5]((WTF::StringPrintStream *)&v218);
  v62 = v219;
  if (!v219)
  {
    v208 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v219, v220, (uint64_t *)&v208);
  v62 = v219;
  if (v219 != (WTF *)v221)
LABEL_36:
    WTF::fastFree((unint64_t)v62, v55, v56, v57, v58, v59, v60, v61);
  v218 = off_1E3572250;
  v219 = (WTF *)v221;
  v220 = xmmword_199122F80;
  v221[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" for payload ", 0xDuLL, (uint64_t)&v214, v63);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v218, "StringView", &v214);
  if (v216 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v216])(&v217, &v214);
  v218[5]((WTF::StringPrintStream *)&v218);
  v218[5]((WTF::StringPrintStream *)&v218);
  v71 = v219;
  if (!v219)
  {
    v207 = 0;
    goto LABEL_43;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v219, v220, (uint64_t *)&v207);
  v71 = v219;
  if (v219 != (WTF *)v221)
LABEL_43:
    WTF::fastFree((unint64_t)v71, v64, v65, v66, v67, v68, v69, v70);
  v218 = off_1E3572250;
  v219 = (WTF *)v221;
  v220 = xmmword_199122F80;
  v221[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v218, "%lu", a6);
  v218[5]((WTF::StringPrintStream *)&v218);
  v79 = v219;
  if (v219)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v219, v220, (uint64_t *)&v206);
    v79 = v219;
    if (v219 == (WTF *)v221)
      goto LABEL_49;
  }
  else
  {
    v206 = 0;
  }
  WTF::fastFree((unint64_t)v79, v72, v73, v74, v75, v76, v77, v78);
LABEL_49:
  v80 = 0;
  v81 = v212;
  v82 = v213;
  v84 = v210;
  v83 = v211;
  v85 = v208;
  v86 = v206;
  v87 = a2;
  do
  {
    ++v80;
    v88 = v87 > 9;
    v87 /= 0xAuLL;
  }
  while (v88);
  if (v213)
  {
    v89 = *((_DWORD *)v213 + 1);
    if (v212)
      goto LABEL_53;
  }
  else
  {
    v89 = 0;
    if (v212)
    {
LABEL_53:
      v90 = *((unsigned int *)v212 + 1);
      if (v211)
        goto LABEL_54;
      goto LABEL_151;
    }
  }
  v90 = 0;
  if (v211)
  {
LABEL_54:
    v91 = *((_DWORD *)v211 + 1);
    if (v210)
      goto LABEL_55;
    goto LABEL_152;
  }
LABEL_151:
  v91 = 0;
  if (v210)
  {
LABEL_55:
    v92 = *((_DWORD *)v210 + 1);
    if (v209)
      goto LABEL_56;
    goto LABEL_153;
  }
LABEL_152:
  v92 = 0;
  if (v209)
  {
LABEL_56:
    v93 = *((_DWORD *)v209 + 1);
    if (v208)
      goto LABEL_57;
LABEL_154:
    v94 = 0;
    if (v207)
      goto LABEL_58;
    goto LABEL_155;
  }
LABEL_153:
  v93 = 0;
  if (!v208)
    goto LABEL_154;
LABEL_57:
  v94 = *((_DWORD *)v208 + 1);
  if (v207)
  {
LABEL_58:
    v95 = *((_DWORD *)v207 + 1);
    goto LABEL_59;
  }
LABEL_155:
  v95 = 0;
LABEL_59:
  v204 = v207;
  v205 = v209;
  if (v206)
    v96 = *((_DWORD *)v206 + 1);
  else
    v96 = 0;
  WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(41, v80, 2, v89, v90, v91, v92, v93, (uint64_t)&v214, v94, v95, v96);
  if ((_BYTE)v214)
    goto LABEL_159;
  if (v82 && (*((_BYTE *)v82 + 16) & 4) == 0
    || v81 && (*((_BYTE *)v81 + 16) & 4) == 0
    || v83 && (*((_BYTE *)v83 + 16) & 4) == 0
    || v84 && (*((_BYTE *)v84 + 16) & 4) == 0
    || v205 && (*((_BYTE *)v205 + 16) & 4) == 0
    || v85 && (*((_BYTE *)v85 + 16) & 4) == 0
    || v204 && (*((_BYTE *)v204 + 16) & 4) == 0)
  {
    v104 = v215;
    if (v215)
    {
LABEL_77:
      if (v104 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v104 + 20), &v218);
        v105 = (int *)v218;
        if (v218)
        {
          v106 = 0;
          *(_DWORD *)v218 = 2;
          v105[1] = v104;
          *(_OWORD *)(v105 + 5) = xmmword_19915A580;
          *((_QWORD *)v105 + 1) = v105 + 5;
          v105[4] = 0;
          *(_OWORD *)(v105 + 9) = xmmword_19915A590;
          *(_OWORD *)(v105 + 13) = xmmword_19915A5A0;
          *(_OWORD *)(v105 + 17) = xmmword_19915A5B0;
          *((_WORD *)v105 + 50) = 32;
          v107 = a2;
          *(_OWORD *)(v105 + 21) = xmmword_19915A5C0;
          do
          {
            v221[v106-- - 8] = (v107 % 0xA) | 0x30;
            v88 = v107 > 9;
            v107 /= 0xAuLL;
          }
          while (v88);
          if (v106 + 26 <= 25)
          {
            v108 = (_WORD *)v105 + 51;
            do
              *v108++ = v221[v106 - 7];
            while (!__CFADD__(v106++, 1));
          }
          v110 = 0;
          v111 = a1;
          do
          {
            ++v110;
            v88 = a2 > 9;
            a2 /= 0xAuLL;
          }
          while (v88);
          v112 = (int *)((char *)v105 + 2 * v110 + 102);
          *v112 = 2097210;
          v113 = (char *)(v112 + 1);
          if (v82)
          {
            v114 = (int8x16_t *)*((_QWORD *)v82 + 1);
            v115 = *((unsigned int *)v82 + 1);
            if ((*((_BYTE *)v82 + 16) & 4) != 0)
            {
              v116 = &v113[2 * v115];
              if (v115 >= 0x40)
              {
                v117 = &v113[2 * (v115 & 0xFFFFFFC0)];
                v118 = 0uLL;
                v119 = v113;
                do
                {
                  v223.val[0] = *v114;
                  v120 = v114[1];
                  v224.val[0] = v114[2];
                  v121 = v114[3];
                  v114 += 4;
                  v122 = v121;
                  v224.val[1] = 0uLL;
                  v225.val[0] = v120;
                  v223.val[1] = 0uLL;
                  v123 = v119;
                  vst2q_s8(v123, v223);
                  v123 += 32;
                  v225.val[1] = 0uLL;
                  vst2q_s8(v123, v225);
                  v124 = v119 + 64;
                  vst2q_s8(v124, v224);
                  v125 = v119 + 96;
                  vst2q_s8(v125, *(int8x16x2_t *)(&v118 - 1));
                  v119 += 128;
                }
                while (v119 != v117);
              }
              else
              {
                v117 = v113;
              }
              while (v117 != v116)
              {
                v126 = v114->u8[0];
                v114 = (int8x16_t *)((char *)v114 + 1);
                *(_WORD *)v117 = v126;
                v117 += 2;
              }
            }
            else if ((_DWORD)v115 == 1)
            {
              *(_WORD *)v113 = v114->i16[0];
            }
            else if ((_DWORD)v115)
            {
              memcpy(v113, v114, 2 * v115);
            }
            v127 = *((unsigned int *)v82 + 1);
          }
          else
          {
            v127 = 0;
          }
          WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v113[2 * v127], (uint64_t)v81, (uint64_t)v83, (uint64_t)v84, (uint64_t)v205, (uint64_t)v85, (uint64_t)v204, (uint64_t)v86);
          goto LABEL_101;
        }
      }
LABEL_159:
      __break(0xC471u);
      JUMPOUT(0x198D83CCCLL);
    }
LABEL_137:
    v105 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    v111 = a1;
    goto LABEL_101;
  }
  if (v86)
  {
    v104 = v215;
    if ((*((_BYTE *)v86 + 16) & 4) == 0)
    {
      if (v215)
        goto LABEL_77;
      goto LABEL_137;
    }
    if (!v215)
      goto LABEL_137;
    if ((v215 & 0x80000000) != 0)
      goto LABEL_159;
  }
  else
  {
    v104 = v215;
    if (!v215)
      goto LABEL_137;
    v86 = 0;
    if ((v215 & 0x80000000) != 0)
      goto LABEL_159;
  }
  WTF::tryFastCompactMalloc((WTF *)(v104 + 20), &v218);
  v105 = (int *)v218;
  if (!v218)
    goto LABEL_159;
  v200 = 0;
  *(_OWORD *)((char *)v218 + 20) = *(_OWORD *)"WebAssembly.Module doesn't parse at byte ";
  *v105 = 2;
  v105[1] = v104;
  *((_QWORD *)v105 + 1) = v105 + 5;
  v105[4] = 4;
  qmemcpy(v105 + 9, "le doesn't parse at byte ", 25);
  v201 = a2;
  do
  {
    v221[v200-- - 8] = (v201 % 0xA) | 0x30;
    v88 = v201 > 9;
    v201 /= 0xAuLL;
  }
  while (v88);
  if (v200 + 26 <= 25)
    memcpy((char *)v105 + 61, &v221[v200 - 7], -v200);
  v202 = 0;
  v111 = a1;
  do
  {
    ++v202;
    v88 = a2 > 9;
    a2 /= 0xAuLL;
  }
  while (v88);
  WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)v105 + v202 + 61, ": ", 2u, (uint64_t)v82, (uint64_t)v81, (uint64_t)v83, (uint64_t)v84, (uint64_t)v205, (uint64_t)v85, (uint64_t)v204, (uint64_t)v86);
LABEL_101:
  *v111 = v105;
  v128 = v206;
  v206 = 0;
  if (v128)
  {
    if (*(_DWORD *)v128 == 2)
    {
      WTF::StringImpl::~StringImpl(v128, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
    }
    else
    {
      *(_DWORD *)v128 -= 2;
    }
  }
  v129 = v207;
  v207 = 0;
  if (v129)
  {
    if (*(_DWORD *)v129 == 2)
    {
      WTF::StringImpl::~StringImpl(v129, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
    }
    else
    {
      *(_DWORD *)v129 -= 2;
    }
  }
  v130 = v208;
  v208 = 0;
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
    {
      WTF::StringImpl::~StringImpl(v130, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v152, v153, v154, v155, v156, v157, v158, v159);
    }
    else
    {
      *(_DWORD *)v130 -= 2;
    }
  }
  v131 = v209;
  v209 = 0;
  if (v131)
  {
    if (*(_DWORD *)v131 == 2)
    {
      WTF::StringImpl::~StringImpl(v131, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v160, v161, v162, v163, v164, v165, v166, v167);
    }
    else
    {
      *(_DWORD *)v131 -= 2;
    }
  }
  v132 = v210;
  v210 = 0;
  if (v132)
  {
    if (*(_DWORD *)v132 == 2)
    {
      WTF::StringImpl::~StringImpl(v132, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v168, v169, v170, v171, v172, v173, v174, v175);
    }
    else
    {
      *(_DWORD *)v132 -= 2;
    }
  }
  v133 = v211;
  v211 = 0;
  if (v133)
  {
    if (*(_DWORD *)v133 == 2)
    {
      WTF::StringImpl::~StringImpl(v133, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v176, v177, v178, v179, v180, v181, v182, v183);
    }
    else
    {
      *(_DWORD *)v133 -= 2;
    }
  }
  v134 = v212;
  v212 = 0;
  if (v134)
  {
    if (*(_DWORD *)v134 == 2)
    {
      WTF::StringImpl::~StringImpl(v134, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v184, v185, v186, v187, v188, v189, v190, v191);
    }
    else
    {
      *(_DWORD *)v134 -= 2;
    }
  }
  v135 = v213;
  v213 = 0;
  if (v135)
  {
    if (*(_DWORD *)v135 == 2)
    {
      WTF::StringImpl::~StringImpl(v135, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v192, v193, v194, v195, v196, v197, v198, v199);
    }
    else
    {
      *(_DWORD *)v135 -= 2;
    }
  }
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(int **a1, unint64_t a2, char *__src, uint64_t a4, int a5, int a6, uint64_t a7, double a8, float a9)
{
  unsigned int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  float v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  float v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  int v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  unint64_t v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  WTF::AtomStringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int *v88;
  uint64_t v89;
  unint64_t v90;
  int **v91;
  _WORD *v92;
  unsigned int v94;
  _DWORD *v95;
  char *v96;
  int8x16_t *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  unsigned int v103;
  uint64_t v104;
  __int128 v105;
  char *v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  char *v110;
  char *v111;
  char *v112;
  __int16 v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int **v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  uint64_t v176;
  int v177;
  char v178;
  void (**v179)(WTF::StringPrintStream *__hidden);
  WTF *v180;
  __int128 v181;
  _BYTE v182[128];
  uint64_t v183;
  int8x16x2_t v184;
  int8x16x2_t v185;
  int8x16x2_t v186;

  v183 = *MEMORY[0x1E0C80C00];
  v179 = off_1E3572250;
  v180 = (WTF *)v182;
  v181 = xmmword_199122F80;
  v182[0] = 0;
  if (__src)
  {
    v14 = a4 - 1;
    if (!a4)
      v14 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v14, (uint64_t)&v176, a9);
  }
  else
  {
    WTF::CString::CString(&v176, &str_25, 0);
    v177 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v179, "StringView", &v176);
  if (v177 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v177])(&v178, &v176);
  v179[5]((WTF::StringPrintStream *)&v179);
  v179[5]((WTF::StringPrintStream *)&v179);
  v22 = v180;
  if (!v180)
  {
    v175 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v180, v181, (uint64_t *)&v175);
  v22 = v180;
  if (v180 != (WTF *)v182)
LABEL_12:
    WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
  v179 = off_1E3572250;
  v180 = (WTF *)v182;
  v181 = xmmword_199122F80;
  v182[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v179, "%u", a5);
  v179[5]((WTF::StringPrintStream *)&v179);
  v30 = v180;
  if (!v180)
  {
    v174 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v180, v181, (uint64_t *)&v174);
  v30 = v180;
  if (v180 != (WTF *)v182)
LABEL_17:
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  v179 = off_1E3572250;
  v180 = (WTF *)v182;
  v181 = xmmword_199122F80;
  v182[0] = 0;
  WTF::StringImpl::utf8ForCharacters("'s name of length ", 0x12uLL, (uint64_t)&v176, v31);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v179, "StringView", &v176);
  if (v177 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v177])(&v178, &v176);
  v179[5]((WTF::StringPrintStream *)&v179);
  v179[5]((WTF::StringPrintStream *)&v179);
  v39 = v180;
  if (!v180)
  {
    v173 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v180, v181, (uint64_t *)&v173);
  v39 = v180;
  if (v180 != (WTF *)v182)
LABEL_24:
    WTF::fastFree((unint64_t)v39, v32, v33, v34, v35, v36, v37, v38);
  v179 = off_1E3572250;
  v180 = (WTF *)v182;
  v181 = xmmword_199122F80;
  v182[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v179, "%u", a6);
  v179[5]((WTF::StringPrintStream *)&v179);
  v47 = v180;
  if (!v180)
  {
    v172 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v180, v181, (uint64_t *)&v172);
  v47 = v180;
  if (v180 != (WTF *)v182)
LABEL_29:
    WTF::fastFree((unint64_t)v47, v40, v41, v42, v43, v44, v45, v46);
  v179 = off_1E3572250;
  v180 = (WTF *)v182;
  v181 = xmmword_199122F80;
  v182[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" for payload ", 0xDuLL, (uint64_t)&v176, v48);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v179, "StringView", &v176);
  if (v177 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v177])(&v178, &v176);
  v179[5]((WTF::StringPrintStream *)&v179);
  v179[5]((WTF::StringPrintStream *)&v179);
  v56 = v180;
  if (!v180)
  {
    v171 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v180, v181, (uint64_t *)&v171);
  v56 = v180;
  if (v180 != (WTF *)v182)
LABEL_36:
    WTF::fastFree((unint64_t)v56, v49, v50, v51, v52, v53, v54, v55);
  v179 = off_1E3572250;
  v180 = (WTF *)v182;
  v181 = xmmword_199122F80;
  v182[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v179, "%lu", a7);
  v179[5]((WTF::StringPrintStream *)&v179);
  v64 = v180;
  if (v180)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v180, v181, (uint64_t *)&v170);
    v64 = v180;
    if (v180 == (WTF *)v182)
      goto LABEL_42;
  }
  else
  {
    v170 = 0;
  }
  WTF::fastFree((unint64_t)v64, v57, v58, v59, v60, v61, v62, v63);
LABEL_42:
  v65 = 0;
  v66 = v174;
  v67 = v175;
  v69 = v172;
  v68 = v173;
  v71 = v170;
  v70 = v171;
  v72 = a2;
  do
  {
    ++v65;
    v73 = v72 > 9;
    v72 /= 0xAuLL;
  }
  while (v73);
  if (v175)
  {
    v74 = *((_DWORD *)v175 + 1);
    if (v174)
      goto LABEL_46;
  }
  else
  {
    v74 = 0;
    if (v174)
    {
LABEL_46:
      v75 = *((_DWORD *)v174 + 1);
      if (v173)
        goto LABEL_47;
      goto LABEL_130;
    }
  }
  v75 = 0;
  if (v173)
  {
LABEL_47:
    v76 = *((_DWORD *)v173 + 1);
    if (v172)
      goto LABEL_48;
LABEL_131:
    v77 = 0;
    if (v171)
      goto LABEL_49;
    goto LABEL_132;
  }
LABEL_130:
  v76 = 0;
  if (!v172)
    goto LABEL_131;
LABEL_48:
  v77 = *((_DWORD *)v172 + 1);
  if (v171)
  {
LABEL_49:
    v78 = *((_DWORD *)v171 + 1);
    goto LABEL_50;
  }
LABEL_132:
  v78 = 0;
LABEL_50:
  v169 = a1;
  if (v170)
    v79 = *((_DWORD *)v170 + 1);
  else
    v79 = 0;
  WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(41, v65, 2, v74, v75, v76, v77, v78, (uint64_t)&v176, v79);
  if ((_BYTE)v176)
  {
LABEL_136:
    __break(0xC471u);
    JUMPOUT(0x198D845D0);
  }
  if (v67 && (*((_BYTE *)v67 + 16) & 4) == 0
    || v66 && (*((_BYTE *)v66 + 16) & 4) == 0
    || v68 && (*((_BYTE *)v68 + 16) & 4) == 0
    || v69 && (*((_BYTE *)v69 + 16) & 4) == 0
    || v70 && (*((_BYTE *)v70 + 16) & 4) == 0)
  {
    v87 = HIDWORD(v176);
    goto LABEL_64;
  }
  if (!v71)
  {
    v87 = HIDWORD(v176);
    if (!HIDWORD(v176))
      goto LABEL_137;
    v71 = 0;
    if (v176 < 0)
      goto LABEL_136;
    goto LABEL_86;
  }
  v87 = HIDWORD(v176);
  if ((*((_BYTE *)v71 + 16) & 4) != 0)
  {
    if (!HIDWORD(v176))
      goto LABEL_137;
    if (v176 < 0)
      goto LABEL_136;
LABEL_86:
    WTF::tryFastCompactMalloc((WTF *)(v87 + 20), &v179);
    v88 = (int *)v179;
    if (!v179)
      goto LABEL_136;
    v101 = 0;
    *(_OWORD *)((char *)v179 + 20) = *(_OWORD *)"WebAssembly.Module doesn't parse at byte ";
    *v88 = 2;
    v88[1] = v87;
    *((_QWORD *)v88 + 1) = v88 + 5;
    v88[4] = 4;
    qmemcpy(v88 + 9, "le doesn't parse at byte ", 25);
    v102 = a2;
    do
    {
      v182[v101-- - 8] = (v102 % 0xA) | 0x30;
      v73 = v102 > 9;
      v102 /= 0xAuLL;
    }
    while (v73);
    if (v101 + 26 <= 25)
      memcpy((char *)v88 + 61, &v182[v101 - 7], -v101);
    v103 = 0;
    do
    {
      ++v103;
      v73 = a2 > 9;
      a2 /= 0xAuLL;
    }
    while (v73);
    v104 = (uint64_t)v88 + v103 + 61;
    *(_WORD *)v104 = 8250;
    WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)(v104 + 2), (uint64_t)v67, (uint64_t)v66, (uint64_t)v68, (uint64_t)v69, (uint64_t)v70, (uint64_t)v71);
LABEL_94:
    v91 = v169;
    goto LABEL_102;
  }
LABEL_64:
  if (!(_DWORD)v87)
  {
LABEL_137:
    v88 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_94;
  }
  if (v87 > 0x7FFFFFEF)
    goto LABEL_136;
  WTF::tryFastCompactMalloc((WTF *)(2 * v87 + 20), &v179);
  v88 = (int *)v179;
  if (!v179)
    goto LABEL_136;
  v89 = 0;
  *(_DWORD *)v179 = 2;
  v88[1] = v87;
  *(_OWORD *)(v88 + 5) = xmmword_19915A580;
  *((_QWORD *)v88 + 1) = v88 + 5;
  v88[4] = 0;
  *(_OWORD *)(v88 + 9) = xmmword_19915A590;
  *(_OWORD *)(v88 + 13) = xmmword_19915A5A0;
  *(_OWORD *)(v88 + 17) = xmmword_19915A5B0;
  *((_WORD *)v88 + 50) = 32;
  v90 = a2;
  *(_OWORD *)(v88 + 21) = xmmword_19915A5C0;
  do
  {
    v182[v89-- - 8] = (v90 % 0xA) | 0x30;
    v73 = v90 > 9;
    v90 /= 0xAuLL;
  }
  while (v73);
  v91 = v169;
  if (v89 + 26 <= 25)
  {
    v92 = (_WORD *)v88 + 51;
    do
      *v92++ = v182[v89 - 7];
    while (!__CFADD__(v89++, 1));
  }
  v94 = 0;
  do
  {
    ++v94;
    v73 = a2 > 9;
    a2 /= 0xAuLL;
  }
  while (v73);
  v95 = (int *)((char *)v88 + 2 * v94 + 102);
  *v95 = 2097210;
  v96 = (char *)(v95 + 1);
  if (v67)
  {
    v97 = (int8x16_t *)*((_QWORD *)v67 + 1);
    v98 = *((unsigned int *)v67 + 1);
    if ((*((_BYTE *)v67 + 16) & 4) != 0)
    {
      v99 = &v96[2 * v98];
      if (v98 >= 0x40)
      {
        v100 = &v96[2 * (v98 & 0xFFFFFFC0)];
        v105 = 0uLL;
        v106 = v96;
        do
        {
          v184.val[0] = *v97;
          v107 = v97[1];
          v185.val[0] = v97[2];
          v108 = v97[3];
          v97 += 4;
          v109 = v108;
          v185.val[1] = 0uLL;
          v186.val[0] = v107;
          v184.val[1] = 0uLL;
          v110 = v106;
          vst2q_s8(v110, v184);
          v110 += 32;
          v186.val[1] = 0uLL;
          vst2q_s8(v110, v186);
          v111 = v106 + 64;
          vst2q_s8(v111, v185);
          v112 = v106 + 96;
          vst2q_s8(v112, *(int8x16x2_t *)(&v105 - 1));
          v106 += 128;
        }
        while (v106 != v100);
      }
      else
      {
        v100 = v96;
      }
      while (v100 != v99)
      {
        v113 = v97->u8[0];
        v97 = (int8x16_t *)((char *)v97 + 1);
        *(_WORD *)v100 = v113;
        v100 += 2;
      }
    }
    else if ((_DWORD)v98 == 1)
    {
      *(_WORD *)v96 = v97->i16[0];
    }
    else if ((_DWORD)v98)
    {
      memcpy(v96, v97, 2 * v98);
    }
    v114 = *((unsigned int *)v67 + 1);
  }
  else
  {
    v114 = 0;
  }
  WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v96[2 * v114], (uint64_t)v66, (uint64_t)v68, (uint64_t)v69, (uint64_t)v70, (uint64_t)v71);
LABEL_102:
  *v91 = v88;
  v115 = v170;
  v170 = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
    {
      WTF::StringImpl::~StringImpl(v115, v80, v81, v82, v83, v84, v85, v86);
      WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
    }
    else
    {
      *(_DWORD *)v115 -= 2;
    }
  }
  v116 = v171;
  v171 = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
    {
      WTF::StringImpl::~StringImpl(v116, v80, v81, v82, v83, v84, v85, v86);
      WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
    }
    else
    {
      *(_DWORD *)v116 -= 2;
    }
  }
  v117 = v172;
  v172 = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
    {
      WTF::StringImpl::~StringImpl(v117, v80, v81, v82, v83, v84, v85, v86);
      WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
    }
    else
    {
      *(_DWORD *)v117 -= 2;
    }
  }
  v118 = v173;
  v173 = 0;
  if (v118)
  {
    if (*(_DWORD *)v118 == 2)
    {
      WTF::StringImpl::~StringImpl(v118, v80, v81, v82, v83, v84, v85, v86);
      WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
    }
    else
    {
      *(_DWORD *)v118 -= 2;
    }
  }
  v119 = v174;
  v174 = 0;
  if (v119)
  {
    if (*(_DWORD *)v119 == 2)
    {
      WTF::StringImpl::~StringImpl(v119, v80, v81, v82, v83, v84, v85, v86);
      WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
    }
    else
    {
      *(_DWORD *)v119 -= 2;
    }
  }
  v120 = v175;
  v175 = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
    {
      WTF::StringImpl::~StringImpl(v120, v80, v81, v82, v83, v84, v85, v86);
      WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
    }
    else
    {
      *(_DWORD *)v120 -= 2;
    }
  }
}

void JSC::Wasm::LLIntPlan::~LLIntPlan(JSC::Wasm::LLIntPlan *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;

  v9 = *((_QWORD *)this + 54);
  if (v9)
  {
    v32 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v32)
    {
      v33 = (_QWORD *)(v9 + 8);
      do
      {
        if (*((_DWORD *)v33 - 2) != -2 && *v33)
          WTF::fastFree(*v33 - 16, a2, a3, a4, a5, a6, a7, a8);
        v33 += 2;
        --v32;
      }
      while (v32);
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 53);
  if (v10)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::deallocateTable(v10, a2, a3, a4, a5, a6, a7, a8);
  WTF::Vector<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 408, a2, a3, a4, a5, a6, a7, a8);
  WTF::Vector<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 392, v11, v12, v13, v14, v15, v16, v17);
  WTF::Vector<std::unique_ptr<JSC::Wasm::FunctionCodeBlockGenerator>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 368, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::EntryPlan::~EntryPlan(this, v25, v26, v27, v28, v29, v30, v31);
}

{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;

  v9 = *((_QWORD *)this + 54);
  if (v9)
  {
    v40 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v40)
    {
      v41 = (_QWORD *)(v9 + 8);
      do
      {
        if (*((_DWORD *)v41 - 2) != -2 && *v41)
          WTF::fastFree(*v41 - 16, a2, a3, a4, a5, a6, a7, a8);
        v41 += 2;
        --v40;
      }
      while (v40);
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 53);
  if (v10)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::deallocateTable(v10, a2, a3, a4, a5, a6, a7, a8);
  WTF::Vector<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 408, a2, a3, a4, a5, a6, a7, a8);
  WTF::Vector<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 392, v11, v12, v13, v14, v15, v16, v17);
  WTF::Vector<std::unique_ptr<JSC::Wasm::FunctionCodeBlockGenerator>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 368, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::EntryPlan::~EntryPlan(this, v25, v26, v27, v28, v29, v30, v31);
  WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
}

BOOL JSC::Wasm::LLIntPlan::hasWork(JSC::Wasm::LLIntPlan *this)
{
  return *((unsigned __int8 *)this + 352) < 3u;
}

void `non-virtual thunk to'JSC::Wasm::LLIntPlan::~LLIntPlan(JSC::Wasm::LLIntPlan *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;

  v9 = *((_QWORD *)this + 45);
  if (v9)
  {
    v32 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v32)
    {
      v33 = (_QWORD *)(v9 + 8);
      do
      {
        if (*((_DWORD *)v33 - 2) != -2 && *v33)
          WTF::fastFree(*v33 - 16, a2, a3, a4, a5, a6, a7, a8);
        v33 += 2;
        --v32;
      }
      while (v32);
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 44);
  if (v10)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::deallocateTable(v10, a2, a3, a4, a5, a6, a7, a8);
  WTF::Vector<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 336, a2, a3, a4, a5, a6, a7, a8);
  WTF::Vector<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 320, v11, v12, v13, v14, v15, v16, v17);
  WTF::Vector<std::unique_ptr<JSC::Wasm::FunctionCodeBlockGenerator>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 296, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::EntryPlan::~EntryPlan((JSC::Wasm::LLIntPlan *)((char *)this - 72), v25, v26, v27, v28, v29, v30, v31);
}

{
  JSC::Wasm::LLIntPlan::~LLIntPlan((JSC::Wasm::LLIntPlan *)((char *)this - 72), a2, a3, a4, a5, a6, a7, a8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN3JSC4Wasm26FunctionCodeBlockGeneratorENS_14default_deleteISB_EEEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSE_SG_EEEEEEDcSK_DpT0_(uint64_t a1, JSC::Wasm::FunctionCodeBlockGenerator **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Wasm::FunctionCodeBlockGenerator *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *a2;
  *a2 = 0;
  if (v8)
  {
    JSC::Wasm::FunctionCodeBlockGenerator::~FunctionCodeBlockGenerator(v8, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN3JSC4Wasm26FunctionCodeBlockGeneratorENS_14default_deleteISB_EEEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSE_SG_EEEEEEDcSK_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmThreads(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;

  v0 = WTF::fastMalloc((WTF *)0x48);
  v1 = (std::__shared_weak_count *)v0;
  *(_QWORD *)(v0 + 8) = 0;
  v2 = (unint64_t *)(v0 + 8);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)v0 = &off_1E3572178;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  JSC::Wasm::wasmThreads(void)::threads = (_UNKNOWN *)(v0 + 24);
  unk_1ECF32460 = v0;
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  v4 = (unint64_t *)(v0 + 16);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  *(_QWORD *)(v0 + 24) = v0 + 24;
  *(_QWORD *)(v0 + 32) = v0;
  do
    v6 = __ldaxr(v2);
  while (__stlxr(v6 - 1, v2));
  if (!v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::Wasm::Plan &),JSC::Wasm::makeValidationCallback(WTF::RefPtr<WTF::SharedTask<void ()(std::experimental::fundamentals_v3::expected<WTF::Ref<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm::Module>,WTF::DefaultRefDerefTraits<JSC::Wasm::Module>>,WTF::String> &&)>,WTF::RawPtrTraits<void ()(std::experimental::fundamentals_v3::expected<WTF::Ref<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm::Module>,WTF::DefaultRefDerefTraits<JSC::Wasm::Module>>,WTF::String> &&)>,WTF::DefaultRefDerefTraits<void ()(std::experimental::fundamentals_v3::expected<WTF::Ref<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm::Module>,WTF::DefaultRefDerefTraits<JSC::Wasm::Module>>,WTF::String> &&)>> &&)::$_0>::~SharedTaskFunctor(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::Wasm::Plan &),JSC::Wasm::makeValidationCallback(WTF::RefPtr<WTF::SharedTask<void ()(std::experimental::fundamentals_v3::expected<WTF::Ref<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm::Module>,WTF::DefaultRefDerefTraits<JSC::Wasm::Module>>,WTF::String> &&)>,WTF::RawPtrTraits<void ()(std::experimental::fundamentals_v3::expected<WTF::Ref<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm::Module>,WTF::DefaultRefDerefTraits<JSC::Wasm::Module>>,WTF::String> &&)>,WTF::DefaultRefDerefTraits<void ()(std::experimental::fundamentals_v3::expected<WTF::Ref<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm::Module>,WTF::DefaultRefDerefTraits<JSC::Wasm::Module>>,WTF::String> &&)>> &&)::$_0>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::Wasm::Plan &),JSC::Wasm::makeValidationCallback(WTF::RefPtr<WTF::SharedTask<void ()(std::experimental::fundamentals_v3::expected<WTF::Ref<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm::Module>,WTF::DefaultRefDerefTraits<JSC::Wasm::Module>>,WTF::String> &&)>,WTF::RawPtrTraits<void ()(std::experimental::fundamentals_v3::expected<WTF::Ref<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm::Module>,WTF::DefaultRefDerefTraits<JSC::Wasm::Module>>,WTF::String> &&)>,WTF::DefaultRefDerefTraits<void ()(std::experimental::fundamentals_v3::expected<WTF::Ref<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm::Module>,WTF::DefaultRefDerefTraits<JSC::Wasm::Module>>,WTF::String> &&)>> &&)::$_0>::run(uint64_t a1, JSC::Wasm::LLIntPlan *a2)
{
  uint64_t v3;
  _DWORD *v4;
  JSC::Wasm::Module *v5;
  JSC::Wasm::Module *v6;
  int v7;
  JSC::Wasm::Module *v8;
  uint64_t result;
  JSC::Wasm::Module *v10;
  int v11;
  char v12;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (_DWORD *)((char *)a2 + 56);
  if (!byte_1ECF4C798)
  {
    if (!*(_QWORD *)v4)
    {
      v8 = (JSC::Wasm::Module *)WTF::fastMalloc((WTF *)0x40);
      v6 = JSC::Wasm::Module::Module(v8, a2);
      goto LABEL_7;
    }
LABEL_5:
    WTF::String::isolatedCopy(v4, (uint64_t *)&v10);
    v6 = v10;
    v7 = 1;
    goto LABEL_8;
  }
  if (*(_QWORD *)v4)
    goto LABEL_5;
  v5 = (JSC::Wasm::Module *)WTF::fastMalloc((WTF *)0x40);
  v6 = JSC::Wasm::Module::Module(v5, a2);
LABEL_7:
  v7 = 0;
LABEL_8:
  v10 = v6;
  v11 = v7;
  result = (*(uint64_t (**)(uint64_t, JSC::Wasm::Module **))(*(_QWORD *)v3 + 16))(v3, &v10);
  if (v11 != -1)
    return ((uint64_t (*)(char *, JSC::Wasm::Module **))off_1E35B5C10[v11])(&v12, &v10);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN3JSC4Wasm6ModuleENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSH_SI_EEEEEEDcSM_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  JSC::Wasm::Module *v5;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v5 = (JSC::Wasm::Module *)v2;
      WTF::ThreadSafeRefCounted<JSC::Wasm::Module,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v5);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN3JSC4Wasm6ModuleENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSH_SI_EEEEEEDcSM_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

JSC::Wasm::NameSection *JSC::Wasm::NameSection::NameSection(JSC::Wasm::NameSection *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];

  *(_DWORD *)this = 1;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v17[0] = 0;
  v17[8] = 0;
  JSC::Wasm::NameSection::setHash((uint64_t)this, v17, a3, a4, a5, a6, a7, a8);
  std::optional<WTF::CString>::~optional((uint64_t)v17, v9, v10, v11, v12, v13, v14, v15);
  return this;
}

void JSC::Wasm::NameSection::setHash(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  if (!a2[8])
  {
    v10 = 3;
LABEL_3:
    v11 = (_BYTE *)WTF::fastMalloc((WTF *)v10);
    goto LABEL_4;
  }
  if (*(_QWORD *)a2)
  {
    v10 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v10)
    {
      if (HIDWORD(v10))
        goto LABEL_29;
      goto LABEL_3;
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  v11 = 0;
LABEL_4:
  v12 = *(_QWORD *)(a1 + 24);
  if (v12)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)(a1 + 24) = v11;
  *(_DWORD *)(a1 + 32) = v10;
  *(_DWORD *)(a1 + 36) = v10;
  if (!a2[8])
  {
    if (!(_DWORD)v10)
    {
      __break(0xC471u);
      JUMPOUT(0x198D84C74);
    }
    *v11 = 60;
    if ((_DWORD)v10 == 1)
    {
      __break(0xC471u);
      JUMPOUT(0x198D84C7CLL);
    }
    v11[1] = 63;
    if (v10 > 2)
    {
      v11[2] = 62;
      return;
    }
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x198D84C10);
  }
  v13 = 0;
  v14 = *(_QWORD *)a2;
  v15 = *(_QWORD *)a2 + 16;
  if (!*(_QWORD *)a2)
    v15 = 0;
  while (1)
  {
    v16 = v14 ? *(_QWORD *)(v14 + 8) : 0;
    if (v13 >= v16)
      break;
    if (v10 == v13)
    {
      __break(0xC471u);
      JUMPOUT(0x198D84C6CLL);
    }
    v11[v13] = *(_BYTE *)(v15 + v13);
    ++v13;
  }
}

uint64_t std::optional<WTF::CString>::~optional(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;

  if (*(_BYTE *)(a1 + 8))
  {
    v9 = *(_DWORD **)a1;
    *(_QWORD *)a1 = 0;
    if (v9)
    {
      if (*v9 == 1)
        WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
      else
        --*v9;
    }
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int **v10;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
    WTF::VectorDestructor<true,WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>>::destruct(*(unsigned int ***)a1, *(_QWORD *)a1 + 8 * v9, a3, a4, a5, a6, a7, a8);
  v10 = *(unsigned int ***)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::Vector<std::unique_ptr<JSC::Wasm::FunctionCodeBlockGenerator>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t *v10;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
    WTF::VectorDestructor<true,std::unique_ptr<JSC::Wasm::FunctionCodeBlockGenerator>>::destruct(*(unint64_t **)a1, (unint64_t *)(*(_QWORD *)a1 + 8 * v9), a3, a4, a5, a6, a7, a8);
  v10 = *(unint64_t **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::VectorDestructor<true,std::unique_ptr<JSC::Wasm::FunctionCodeBlockGenerator>>::destruct(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  unint64_t StatusReg;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v9 = a1;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        JSC::Wasm::FunctionCodeBlockGenerator::~FunctionCodeBlockGenerator((JSC::Wasm::FunctionCodeBlockGenerator *)v11, a2, a3, a4, a5, a6, a7, a8);
        v12 = *(_QWORD *)(StatusReg + 752);
        if (v12)
        {
          if (!(v11 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v11 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v11)) & 1) != 0)
          {
LABEL_7:
            v13 = *(unsigned int *)(v12 + 8000);
            if (v13 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v12, v11, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v12 + 8 * v13) = v11 | 0x5000000000000;
              *(_DWORD *)(v12 + 8000) = v13 + 1;
            }
            goto LABEL_9;
          }
          if (v11 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v11 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v11 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                    + 24) >> (2 * ((BYTE3(v11) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_7;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v12, v11, 1, a4, a5, a6, a7, a8);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v11, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_9:
      ++v9;
    }
    while (v9 != a2);
  }
}

uint64_t WTF::Vector<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(const void **)a1;
    v4 = *(unsigned int *)(a1 + 12);
    result = WTF::VectorBufferBase<unsigned long long,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(a1, a2);
    if (!(_DWORD)result)
      return result;
    memcpy(*(void **)a1, v3, 8 * v4);
    if (v3)
    {
      if (*(const void **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v6, v7, v8, v9, v10, v11, v12);
    }
  }
  return 1;
}

char *WTF::Vector<JSC::Wasm::JSEntrypointInterpreterCalleeMetadata,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::JSEntrypointInterpreterCalleeMetadata>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  result = WTF::Vector<JSC::Wasm::JSEntrypointInterpreterCalleeMetadata,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, (WTF *)(*(unsigned int *)(a1 + 12) + 1), a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_BYTE *)(*(_QWORD *)a1 + v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

char *WTF::Vector<JSC::Wasm::JSEntrypointInterpreterCalleeMetadata,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[v3 - (_QWORD)v5];
      }
      if (!HIDWORD(v10))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)v10);
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
        memcpy(v11, v5, v6);
        v19 = *a1;
        if (v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
          v19 = *a1;
        }
        return &v19[v3 - (_QWORD)v5];
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x198D850A4);
    }
  }
  v20 = *((unsigned int *)a1 + 2);
  v21 = v20 + (v20 >> 2);
  if (v21 >= 0x10)
    v22 = v21 + 1;
  else
    v22 = 16;
  if (v22 <= (unint64_t)a2)
    v23 = (unint64_t)a2;
  else
    v23 = v22;
  if (v23 > v20)
  {
    if (HIDWORD(v23))
      goto LABEL_30;
    v24 = *((unsigned int *)a1 + 3);
    v25 = (char *)WTF::fastMalloc((WTF *)v23);
    *((_DWORD *)a1 + 2) = v23;
    *a1 = v25;
    memcpy(v25, v5, v24);
    if (v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((unint64_t)v5, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  return (char *)v3;
}

void WTF::ScopedLambdaRefFunctor<void ()(__darwin_arm_thread_state64 &),JSC::Wasm::resetInstructionCacheOnAllThreads(void)::$_0>::implFunction()
{
  __isb(0xFu);
}

unsigned int **WTF::Ref<JSC::BufferMemoryHandle,WTF::RawPtrTraits<JSC::BufferMemoryHandle>,WTF::DefaultRefDerefTraits<JSC::BufferMemoryHandle>>::~Ref(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  JSC::BufferMemoryHandle *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = (JSC::BufferMemoryHandle *)v2;
      WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v6);
    }
  }
  return a1;
}

uint64_t WTF::Vector<WTF::ThreadSafeWeakPtr<JSC::Wasm::Instance>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  WTF::ThreadSafeWeakPtrControlBlock **v10;
  uint64_t v11;
  WTF::ThreadSafeWeakPtrControlBlock *v12;
  unint64_t v13;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v10 = *(WTF::ThreadSafeWeakPtrControlBlock ***)a1;
    v11 = 16 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
        WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v12, a2, a3, a4, a5, a6, a7, a8);
      v10 += 2;
      v11 -= 16;
    }
    while (v11);
  }
  v13 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJxN3JSC14GrowFailReasonEEE6__swapB8sn180100ERS9_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJxS8_EEESK_EEEDcSB_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJxN3JSC14GrowFailReasonEEE6__swapB8sn180100ERS9_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJxS8_EEESK_EEEDcSB_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJxN3JSC14GrowFailReasonEEEEE19__generic_constructB8sn180100INS0_6__implIJxS9_EEEEEvRSB_OT_EUlRSG_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJxS9_EEEOSP_EEEDcSG_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJxN3JSC14GrowFailReasonEEEEE19__generic_constructB8sn180100INS0_6__implIJxS9_EEEEEvRSB_OT_EUlRSG_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJxS9_EEEOSP_EEEDcSG_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<JSC::Wasm::Instance,(WTF::DestructionThread)0>::deref(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD v16[2];
  BOOL v17;

  if (__ldaxr((unsigned __int8 *)a1))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)a1))
    goto LABEL_3;
LABEL_4:
  v10 = *(_QWORD *)(a1 + 8);
  v11 = v10 - 1;
  *(_QWORD *)(a1 + 8) = v10 - 1;
  if (v10 == 1)
  {
    v15 = *(_QWORD *)(a1 + 16);
    v13 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    v12 = v15 == 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = __ldxr((unsigned __int8 *)a1);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)a1))
      goto LABEL_8;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a1, 0, a3, a4, a5, a6, a7, a8);
LABEL_8:
  if (!v11)
  {
    v16[0] = a1;
    v16[1] = v13;
    v17 = v12;
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::Wasm::Instance,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()((uint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
  }
}

_QWORD *WTF::Vector<WTF::ThreadSafeWeakPtr<JSC::Wasm::Instance>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ThreadSafeWeakPtr<JSC::Wasm::Instance>>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;

  result = (_QWORD *)WTF::Vector<WTF::ThreadSafeWeakPtr<JSC::Wasm::Instance>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v4);
  *v6 = *result;
  v7 = result[1];
  *result = 0;
  result[1] = 0;
  v6[1] = v7;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

unint64_t WTF::Vector<WTF::ThreadSafeWeakPtr<JSC::Wasm::Instance>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::ThreadSafeWeakPtr<JSC::Wasm::Instance>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WTF::ThreadSafeWeakPtr<JSC::Wasm::Instance>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<WTF::ThreadSafeWeakPtr<JSC::Wasm::Instance>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF::ThreadSafeWeakPtrControlBlock **v4;
  WTF::ThreadSafeWeakPtrControlBlock **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x198D85400);
    }
    v4 = *(WTF::ThreadSafeWeakPtrControlBlock ***)a1;
    v5 = (WTF::ThreadSafeWeakPtrControlBlock **)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12));
    v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WTF::ThreadSafeWeakPtr<JSC::Wasm::Instance>>::move(v4, v5, v6, v7, v8, v9, v10, v11);
    if (v4)
    {
      if (*(WTF::ThreadSafeWeakPtrControlBlock ***)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v4, v12, v13, v14, v15, v16, v17, v18);
    }
  }
}

void WTF::VectorMover<false,WTF::ThreadSafeWeakPtr<JSC::Wasm::Instance>>::move(WTF::ThreadSafeWeakPtrControlBlock **a1, WTF::ThreadSafeWeakPtrControlBlock **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  WTF::ThreadSafeWeakPtrControlBlock **v10;
  WTF::ThreadSafeWeakPtrControlBlock *v11;
  WTF::ThreadSafeWeakPtrControlBlock *v12;

  if (a1 != a2)
  {
    v8 = (_QWORD *)a3;
    v10 = a1;
    do
    {
      *v8 = *v10;
      v11 = v10[1];
      *v10 = 0;
      v10[1] = 0;
      v8[1] = v11;
      v12 = *v10;
      *v10 = 0;
      if (v12)
        WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v12, a2, a3, a4, a5, a6, a7, a8);
      v10 += 2;
      v8 += 2;
    }
    while (v10 != a2);
  }
}

unsigned int **WTF::Ref<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>,WTF::RawPtrTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>>,WTF::DefaultRefDerefTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>>>::~Ref(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v13;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v13 = v9;
      WTF::ThreadSafeRefCounted<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((unint64_t *)&v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

unsigned int **WTF::Ref<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>,WTF::RawPtrTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>>,WTF::DefaultRefDerefTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>>>::~Ref(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v13;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v13 = v9;
      WTF::ThreadSafeRefCounted<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((unint64_t *)&v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

unsigned int **WTF::FixedVector<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>>::FixedVector<0ul,WTF::CrashOnOverflow>(unsigned int **a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  *a1 = 0;
  v9 = *a2;
  v10 = *((unsigned int *)a2 + 3);
  *a2 = 0;
  a2[1] = 0;
  if ((_DWORD)v10)
  {
    v11 = (unsigned int *)WTF::fastMalloc((WTF *)((16 * v10) | 8));
    v12 = v11;
    v13 = 0;
    v14 = v9 + 16 * v10;
    *v11 = v10;
    do
    {
      v15 = &v11[v13 / 4];
      v16 = v9 + v13;
      *((_QWORD *)v15 + 1) = *(_QWORD *)(v9 + v13);
      v17 = *(_QWORD *)(v9 + v13 + 8);
      *(_QWORD *)(v16 + 8) = 0;
      *((_QWORD *)v15 + 2) = v17;
      v13 += 16;
    }
    while (v16 + 16 != v14);
    v18 = v9;
    do
    {
      v19 = *(unsigned int **)(v18 + 8);
      *(_QWORD *)(v18 + 8) = 0;
      if (v19)
      {
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          atomic_store(1u, v19);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v19, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
        }
      }
      v18 += 16;
    }
    while (v18 != v14);
    if (v9)
    {
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
      v9 = 0;
    }
  }
  else
  {
    v12 = 0;
  }
  v30 = *a1;
  *a1 = v12;
  if (v30)
  {
    v32 = v30 + 2;
    v31 = *v30;
    if ((_DWORD)v31)
    {
      v33 = &v32[4 * v31];
      do
      {
        v34 = (unsigned int *)*((_QWORD *)v32 + 1);
        *((_QWORD *)v32 + 1) = 0;
        if (v34)
        {
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            atomic_store(1u, v34);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v34, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
          }
        }
        v32 += 4;
      }
      while (v32 != v33);
    }
    WTF::fastFree((unint64_t)v30, a2, a3, a4, a5, a6, a7, a8);
  }
  if (v9)
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t WTF::Vector<JSC::Wasm::Import,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unint64_t v10;

  v9 = *(_DWORD *)(a1 + 12);
  if (v9)
    WTF::VectorDestructor<true,JSC::Wasm::Import>::destruct(*(_QWORD **)a1, (_QWORD *)(*(_QWORD *)a1 + 40 * v9), a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::VectorDestructor<true,JSC::Wasm::Import>::destruct(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = v9[2];
      if (v10)
      {
        v9[2] = 0;
        *((_DWORD *)v9 + 6) = 0;
        WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
      }
      v11 = *v9;
      if (*v9)
      {
        *v9 = 0;
        *((_DWORD *)v9 + 2) = 0;
        WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
      }
      v9 += 5;
    }
    while (v9 != a2);
  }
}

uint64_t WTF::Vector<WTF::Ref<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int **v10;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
    WTF::VectorDestructor<true,WTF::Ref<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>>::destruct(*(unsigned int ***)a1, (unsigned int **)(*(_QWORD *)a1 + 8 * v9), a3, a4, a5, a6, a7, a8);
  v10 = *(unsigned int ***)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::VectorDestructor<true,WTF::Ref<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>>::destruct(unsigned int **a1, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = *v9;
      *v9 = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      ++v9;
    }
    while (v9 != a2);
  }
}

uint64_t WTF::Vector<JSC::Wasm::FunctionData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t StatusReg;
  uint64_t v14;
  uint64_t v15;

  v9 = *(unsigned int *)(a1 + 12);
  v10 = *(_QWORD *)a1;
  if ((_DWORD)v9)
  {
    v11 = 40 * v9;
    v12 = v10 + 16;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      a2 = *(_QWORD *)v12;
      if (*(_QWORD *)v12)
      {
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
        v14 = *(_QWORD *)(StatusReg + 752);
        if (v14)
        {
          if (!(a2 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) != 0)
          {
LABEL_7:
            v15 = *(unsigned int *)(v14 + 8000);
            if (v15 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v14, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v14 + 8 * v15) = a2 | 0x5000000000000;
              *(_DWORD *)(v14 + 8000) = v15 + 1;
            }
            goto LABEL_9;
          }
          if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_7;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v14, a2, 1, a4, a5, a6, a7, a8);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(a2, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_9:
      v12 += 40;
      v11 -= 40;
      if (!v11)
      {
        v10 = *(_QWORD *)a1;
        break;
      }
    }
  }
  if (v10)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::Vector<JSC::Wasm::Export,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v9 = *(unsigned int *)(a1 + 12);
  v10 = *(_QWORD *)a1;
  if ((_DWORD)v9)
  {
    v11 = 24 * v9;
    do
    {
      v12 = *(_QWORD *)v10;
      if (*(_QWORD *)v10)
      {
        *(_QWORD *)v10 = 0;
        *(_DWORD *)(v10 + 8) = 0;
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      }
      v10 += 24;
      v11 -= 24;
    }
    while (v11);
    v10 = *(_QWORD *)a1;
  }
  if (v10)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::Vector<std::unique_ptr<JSC::Wasm::Segment,void (*)(JSC::Wasm::Segment*)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)a1;
    v11 = 16 * v9;
    do
    {
      v12 = *(_QWORD *)v10;
      *(_QWORD *)v10 = 0;
      if (v12)
        (*(void (**)(void))(v10 + 8))();
      v10 += 16;
      v11 -= 16;
    }
    while (v11);
  }
  v13 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::Vector<JSC::Wasm::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::Wasm::Element *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v10 = *(JSC::Wasm::Element **)a1;
    v11 = 80 * v9;
    do
    {
      JSC::Wasm::Element::~Element(v10, a2, a3, a4, a5, a6, a7, a8);
      v10 = (JSC::Wasm::Element *)(v12 + 80);
      v11 -= 80;
    }
    while (v11);
  }
  v13 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void JSC::Wasm::Element::~Element(JSC::Wasm::Element *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;

  v9 = *((_QWORD *)this + 8);
  if (v9)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 6);
  if (v10)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t WTF::Vector<JSC::Wasm::CustomSection,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
    WTF::VectorTypeOperations<JSC::Wasm::CustomSection>::destruct(*(_QWORD **)a1, (_QWORD *)(*(_QWORD *)a1 + 32 * v9), a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::VectorTypeOperations<JSC::Wasm::CustomSection>::destruct(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = v9[2];
      if (v10)
      {
        v9[2] = 0;
        *((_DWORD *)v9 + 6) = 0;
        WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
      }
      v11 = *v9;
      if (*v9)
      {
        *v9 = 0;
        *((_DWORD *)v9 + 2) = 0;
        WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
      }
      v9 += 4;
    }
    while (v9 != a2);
  }
}

uint64_t WTF::Vector<WTF::RefPtr<JSC::Wasm::RTT const,WTF::RawPtrTraits<JSC::Wasm::RTT const>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int **v10;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
    WTF::VectorTypeOperations<WTF::RefPtr<JSC::Wasm::RTT const,WTF::RawPtrTraits<JSC::Wasm::RTT const>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT const>>>::destruct(*(unsigned int ***)a1, (unsigned int **)(*(_QWORD *)a1 + 8 * v9), a3, a4, a5, a6, a7, a8);
  v10 = *(unsigned int ***)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::VectorTypeOperations<WTF::RefPtr<JSC::Wasm::RTT const,WTF::RawPtrTraits<JSC::Wasm::RTT const>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT const>>>::destruct(unsigned int **a1, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = *v9;
      *v9 = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      ++v9;
    }
    while (v9 != a2);
  }
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, char *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char *v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  size_t v24;
  uint64_t v25;
  char *v27;
  unsigned __int128 *v28;
  unsigned __int128 v29;
  unsigned __int128 *v30;
  unsigned __int128 *v31;
  unsigned __int128 v32;
  char v33;
  char v34;

  if (a3 == 1)
  {
    *__dst = *a2;
  }
  else if (a3)
  {
    memcpy(__dst, a2, a3);
  }
  v18 = &__dst[a3];
  if (a4)
  {
    v19 = *(char **)(a4 + 8);
    v20 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v20 == 1)
      {
        *v18 = *v19;
      }
      else if ((_DWORD)v20)
      {
        memcpy(v18, v19, v20);
      }
    }
    else
    {
      if (v20 < 0x10)
      {
        v27 = v18;
      }
      else
      {
        v27 = &v18[v20 & 0xFFFFFFF0];
        v28 = (unsigned __int128 *)v18;
        do
        {
          v29 = (unsigned __int128)vld2q_s8(v19);
          v19 += 32;
          *v28++ = v29;
        }
        while (v28 != (unsigned __int128 *)v27);
      }
      while (v27 != &v18[v20])
      {
        v33 = *v19;
        v19 += 2;
        *v27++ = v33;
      }
    }
    v21 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v21 = 0;
  }
  v22 = &v18[v21];
  if (a5)
  {
    v23 = *(char **)(a5 + 8);
    v24 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      if ((_DWORD)v24 == 1)
      {
        *v22 = *v23;
      }
      else if ((_DWORD)v24)
      {
        memcpy(v22, v23, v24);
      }
    }
    else
    {
      if (v24 < 0x10)
      {
        v30 = (unsigned __int128 *)&v18[v21];
      }
      else
      {
        v30 = (unsigned __int128 *)&v22[v24 & 0xFFFFFFF0];
        v31 = (unsigned __int128 *)&v18[v21];
        do
        {
          v32 = (unsigned __int128)vld2q_s8(v23);
          v23 += 32;
          *v31++ = v32;
        }
        while (v31 != v30);
      }
      while (v30 != (unsigned __int128 *)&v22[v24])
      {
        v34 = *v23;
        v23 += 2;
        *(_BYTE *)v30 = v34;
        v30 = (unsigned __int128 *)((char *)v30 + 1);
      }
    }
    v25 = *(unsigned int *)(a5 + 4);
  }
  else
  {
    v25 = 0;
  }
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v22[v25], a6, a7, a8, a9, a10, a11);
}

uint64_t JSC::Wasm::OMGIRGenerator::fixupPointerPlusOffset(JSC::Wasm::OMGIRGenerator *this, JSC::B3::Value **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  JSC::B3::Value *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  JSC::B3::Value *v11;

  v3 = a3;
  if ((a3 & 0x80000000) != 0)
  {
    v5 = *((_QWORD *)this + 11);
    v6 = (JSC::B3::Value *)*((_QWORD *)this + 7);
    if (*(_QWORD *)this)
      v7 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
    else
      v7 = 0;
    v8 = (uint64_t)*a2;
    v10 = JSC::B3::BasicBlock::appendNew<JSC::B3::Const64Value,JSC::B3::Origin,unsigned int>(*((_QWORD *)this + 11), v6, v7, a3);
    v11 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Const64Value *>(v5, v6, v7, v8, v10);
    v3 = 0;
    *a2 = v11;
  }
  return v3;
}

JSC::B3::Value *JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Const64Value *>(uint64_t a1, JSC::B3::Value *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  JSC::B3::Value *casual;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char **v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  JSC::B3::Value *v28;

  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v10)
  {
    v11 = (_BYTE *)(v10 + 8856);
    *(_BYTE *)(v10 + 8856) = 1;
    v12 = *(unsigned int *)(v10 + 8872);
    if ((_DWORD)v12)
    {
      *(_DWORD *)(v10 + 8872) = v12 - *(_DWORD *)(v10 + 8876);
      casual = (JSC::B3::Value *)(*(_QWORD *)(v10 + 8864) - v12);
LABEL_6:
      *v11 = 0;
      goto LABEL_7;
    }
    v14 = *(_QWORD *)(v10 + 8896);
    v15 = *(_QWORD *)(v10 + 8880);
    if (v14)
    {
LABEL_5:
      v16 = __clz(v14);
      *(_QWORD *)(v10 + 8896) = v14 & ~(0x8000000000000000 >> v16);
      casual = (JSC::B3::Value *)(v15 + 16 * v16);
      goto LABEL_6;
    }
    if (*(_BYTE *)(v10 + 8861) == 6)
    {
      v22 = *(_DWORD *)(v10 + 8892);
      v23 = *(unsigned int *)(v10 + 8888);
      if (v23 < v22)
      {
        *(_QWORD *)&v11[8 * v23 + 56] = 0;
        v24 = (unint64_t *)(v10 + 8 * v23 + 8920);
        v25 = v22 - 1 - v23;
        while (v25)
        {
          v15 += 1024;
          v27 = *v24++;
          v26 = v27;
          LODWORD(v23) = v23 + 1;
          --v25;
          if (v27)
          {
            v14 = __rbit64(v26);
            *(_DWORD *)(v10 + 8888) = v23;
            *(_QWORD *)(v10 + 8880) = v15;
            goto LABEL_5;
          }
        }
        *(_DWORD *)(v10 + 8888) = v22;
      }
    }
    *v11 = 0;
  }
  casual = (JSC::B3::Value *)bmalloc_allocate_casual(56, 1);
LABEL_7:
  JSC::B3::Value::Value<>((uint64_t)casual, 0, 14, 2, a3, a4, a5);
  JSC::B3::Procedure::addValueImpl(a2, casual);
  v28 = casual;
  v17 = (char **)(a1 + 8);
  v18 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v18 == *(_DWORD *)(a1 + 16))
  {
    v21 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17, v18 + 1, (unint64_t)&v28);
    v18 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v18) = *(_QWORD *)v21;
    v19 = v28;
  }
  else
  {
    *(_QWORD *)&(*v17)[8 * v18] = casual;
    v19 = casual;
  }
  *(_DWORD *)(a1 + 20) = v18 + 1;
  *((_QWORD *)v19 + 4) = a1;
  return casual;
}

uint64_t JSC::B3::BasicBlock::appendNew<JSC::B3::Const64Value,JSC::B3::Origin,unsigned int>(uint64_t a1, JSC::B3::Value *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  uint64_t v14;

  v7 = a4;
  v8 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v8 + 8) = -1;
  *(_WORD *)(v8 + 12) = 4;
  *(_DWORD *)(v8 + 16) = 2;
  *(_BYTE *)(v8 + 20) = 0;
  *(_QWORD *)(v8 + 24) = a3;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)v8 = off_1E357DA88;
  *(_QWORD *)(v8 + 40) = v7;
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)v8);
  v14 = v8;
  v9 = (char **)(a1 + 8);
  v10 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 16))
  {
    v13 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v10 + 1, (unint64_t)&v14);
    v10 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) = *(_QWORD *)v13;
    v11 = v14;
  }
  else
  {
    *(_QWORD *)&(*v9)[8 * v10] = v8;
    v11 = v8;
  }
  *(_DWORD *)(a1 + 20) = v10 + 1;
  *(_QWORD *)(v11 + 32) = a1;
  return v8;
}

uint64_t JSC::Wasm::OMGIRGenerator::computeStackCheckSize(JSC::B3::Procedure **this, BOOL *a2, int *a3)
{
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;

  result = JSC::B3::Procedure::frameSize(this[7]);
  if ((result & 0x80000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198D861F4);
  }
  v7 = *((int *)this + 115);
  v8 = 8 * *((_DWORD *)this + 124) + 40;
  if (v8 <= 0x400)
    v8 = 1024;
  v9 = (v8 + 15) & 0xFFFFFFF0;
  *a3 = result;
  v10 = result > 0x3FF;
  *a2 = result > 0x3FF;
  if (*((_BYTE *)this + 456))
  {
    v10 = 1;
    *a2 = 1;
    if ((v9 & 0x80000000) == 0)
    {
      v11 = __OFADD__((_DWORD)result, v9);
      result = result + v9;
      if (!v11)
      {
        *a3 = result;
        goto LABEL_8;
      }
    }
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x198D861ECLL);
  }
  if (*((_BYTE *)this + 457))
  {
    v12 = v9 - v7;
    if (HIDWORD(v12))
    {
      __break(0xC471u);
      JUMPOUT(0x198D861FCLL);
    }
    if ((v12 & 0x80000000) == 0)
    {
      if (result <= v12)
        LODWORD(v13) = v9 - v7;
      else
        LODWORD(v13) = result;
      if (result <= 0x3FF)
        v13 = v12;
      else
        v13 = v13;
      *a3 = v13;
      v10 = (v13 | result) > 0x3FF;
      result = v13;
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_8:
  if (result > dword_1ECF4C250)
    v10 = 1;
  *a2 = v10;
  return result;
}

uint64_t JSC::Wasm::OMGIRGenerator::OMGIRGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, char a9, unsigned int a10, __int16 a11, int a12, int a13)
{
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  WTF *v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  JSC::B3::Value *v63;
  unsigned int v64;
  uint64_t *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  WTF *v82;
  int v83;
  _BYTE v84[16];
  __int128 v85;
  uint64_t v86;

  v16 = a3;
  v86 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_BYTE *)(a1 + 32) = a8;
  *(_BYTE *)(a1 + 33) = a9;
  *(_DWORD *)(a1 + 36) = a10;
  *(_DWORD *)(a1 + 40) = a13;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a5;
  *(_QWORD *)(a1 + 64) = 0;
  v18 = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a1;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  v19 = JSC::Wasm::ModuleInformation::functionWasmSize(*(JSC::Wasm::ModuleInformation **)(v16 + 120), *(_DWORD *)(v16 + 132), a10);
  if (HIDWORD(v19))
  {
    __break(0xC471u);
    JUMPOUT(0x198D866A0);
  }
  v20 = *(uint64_t **)(a1 + 56);
  *(_QWORD *)(a1 + 240) = v20;
  *(_DWORD *)(a1 + 156) = v19;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = a6;
  *(_QWORD *)(a1 + 216) = a7;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 248) = a1 + 264;
  *(_QWORD *)(a1 + 256) = 8;
  *(_DWORD *)(a1 + 460) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_WORD *)(a1 + 456) = 0;
  *(_WORD *)(a1 + 464) = a11;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 500) = *(_DWORD *)(v16 + 36);
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 80) = JSC::B3::Procedure::addBlock(v20, (JSC::B3::Procedure *)v20, 1.0);
  v22 = (WTF *)JSC::B3::Procedure::addBlock(v21, *(JSC::B3::Procedure **)(a1 + 56), 1.0);
  v82 = v22;
  v23 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v23 == *(_DWORD *)(a1 + 72))
  {
    WTF::Vector<JSC::B3::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::BasicBlock *>(v18, (unint64_t)&v82);
    v24 = *(_DWORD *)(a1 + 76);
  }
  else
  {
    v24 = v23 + 1;
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v23) = v22;
    *(_DWORD *)(a1 + 76) = v23 + 1;
  }
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x198D866A8);
  }
  v25 = *(_QWORD **)(a1 + 56);
  *(_QWORD *)(a1 + 88) = **(_QWORD **)(a1 + 64);
  JSC::B3::Procedure::pinRegister(v25, 0x16u);
  JSC::B3::Procedure::pinRegister(*(_QWORD **)(a1 + 56), 0x13u);
  if (!a8)
    goto LABEL_26;
  while (1)
  {
    if (*(_DWORD *)(v16 + 104) != -1)
    {
      v26 = *(_QWORD *)(a1 + 56);
      v82 = (WTF *)a1;
      JSC::B3::Procedure::setWasmBoundsCheckGenerator<JSC::Wasm::OMGIRGenerator::OMGIRGenerator(JSC::Wasm::CalleeGroup &,JSC::Wasm::ModuleInformation const&,JSC::Wasm::OptimizingJITCallee &,JSC::B3::Procedure&,WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int &,JSC::MemoryMode,JSC::Wasm::CompilationMode,unsigned int,std::optional<BOOL>,unsigned int,JSC::Wasm::TierUpCount *)::$_0>(v26, (uint64_t *)&v82);
    }
    v27 = JSC::B3::BasicBlock::appendNew<JSC::B3::PatchpointValue,JSC::B3::Type,JSC::B3::Origin>(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 56));
    *(_WORD *)((char *)v27 + 117) = 1;
    v85 = xmmword_199124480;
    WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v82, &v85, 1uLL);
    WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)(v27 + 17), &v82, v28, v29, v30, v31, v32, v33);
    v41 = v82;
    if (v84 != (_BYTE *)v82 && v82)
    {
      v82 = 0;
      v83 = 0;
      WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
    }
    JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::OMGIRGenerator(JSC::Wasm::CalleeGroup &,JSC::Wasm::ModuleInformation const&,JSC::Wasm::OptimizingJITCallee &,JSC::B3::Procedure &,WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int &,JSC::MemoryMode,JSC::Wasm::CompilationMode,unsigned int,std::optional<BOOL>,unsigned int,JSC::Wasm::TierUpCount *)::$_1>((uint64_t)v27);
    *(_QWORD *)(a1 + 472) = v27;
    v42 = *(_QWORD *)(a1 + 16);
    if (*(_DWORD *)(v42 + 104) != -1)
    {
      if (*(_BYTE *)(a1 + 32) != 1)
      {
        if (!*(_BYTE *)(v42 + 112))
          goto LABEL_13;
        if (!*(_BYTE *)(a1 + 32))
        {
          v67 = JSC::B3::BasicBlock::appendNew<JSC::B3::PatchpointValue,JSC::B3::Type,JSC::B3::Origin>(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 56));
          *(_WORD *)((char *)v67 + 117) = 1;
          v85 = xmmword_199124490;
          WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v82, &v85, 1uLL);
          WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)(v67 + 17), &v82, v68, v69, v70, v71, v72, v73);
          v81 = v82;
          if (v84 != (_BYTE *)v82 && v82)
          {
            v82 = 0;
            v83 = 0;
            WTF::fastFree((unint64_t)v81, v74, v75, v76, v77, v78, v79, v80);
          }
          JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::OMGIRGenerator(JSC::Wasm::CalleeGroup &,JSC::Wasm::ModuleInformation const&,JSC::Wasm::OptimizingJITCallee &,JSC::B3::Procedure &,WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int &,JSC::MemoryMode,JSC::Wasm::CompilationMode,unsigned int,std::optional<BOOL>,unsigned int,JSC::Wasm::TierUpCount *)::$_2>((uint64_t)v67);
          *(_QWORD *)(a1 + 488) = v67;
        }
      }
      v43 = JSC::B3::BasicBlock::appendNew<JSC::B3::PatchpointValue,JSC::B3::Type,JSC::B3::Origin>(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 56));
      *(_WORD *)((char *)v43 + 117) = 1;
      v85 = xmmword_1991244A0;
      WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v82, &v85, 1uLL);
      WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)(v43 + 17), &v82, v44, v45, v46, v47, v48, v49);
      v57 = v82;
      if (v84 != (_BYTE *)v82 && v82)
      {
        v82 = 0;
        v83 = 0;
        WTF::fastFree((unint64_t)v57, v50, v51, v52, v53, v54, v55, v56);
      }
      JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::OMGIRGenerator(JSC::Wasm::CalleeGroup &,JSC::Wasm::ModuleInformation const&,JSC::Wasm::OptimizingJITCallee &,JSC::B3::Procedure &,WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int &,JSC::MemoryMode,JSC::Wasm::CompilationMode,unsigned int,std::optional<BOOL>,unsigned int,JSC::Wasm::TierUpCount *)::$_3>((uint64_t)v43);
      *(_QWORD *)(a1 + 480) = v43;
    }
LABEL_13:
    v58 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v58 + 8) = 1;
    *(_QWORD *)v58 = off_1E35B5EC8;
    *(_QWORD *)(v58 + 16) = a1;
    v59 = *(unsigned int **)(a1 + 544);
    *(_QWORD *)(a1 + 544) = v58;
    if (v59)
    {
      v60 = v59 + 2;
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (!v62)
      {
        atomic_store(1u, v59 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v59 + 8))(v59);
      }
    }
    v16 = JSC::B3::BasicBlock::appendNew<JSC::B3::PatchpointValue,JSC::B3::TypeKind,JSC::B3::Origin>(*(_QWORD *)(a1 + 88), *(JSC::B3::Value **)(a1 + 56), 0, 0);
    JSC::B3::StackmapValue::appendSomeRegister((JSC::B3::StackmapValue *)v16, *(JSC::B3::Value **)(a1 + 472));
    v63 = (JSC::B3::Value *)JSC::Wasm::OMGIRGenerator::framePointer((JSC::Wasm::OMGIRGenerator *)a1);
    JSC::B3::StackmapValue::appendSomeRegister((JSC::B3::StackmapValue *)v16, v63);
    *(_QWORD *)(v16 + 64) |= 0x30000uLL;
    *(_QWORD *)(v16 + 80) |= 0x30000uLL;
    *(_BYTE *)(v16 + 168) = 0;
    v82 = (WTF *)a1;
    JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::OMGIRGenerator(JSC::Wasm::CalleeGroup &,JSC::Wasm::ModuleInformation const&,JSC::Wasm::OptimizingJITCallee &,JSC::B3::Procedure &,WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int &,JSC::MemoryMode,JSC::Wasm::CompilationMode,unsigned int,std::optional<BOOL>,unsigned int,JSC::Wasm::TierUpCount *)::$_5>(v16, (uint64_t *)&v82);
    JSC::Wasm::OMGIRGenerator::emitEntryTierUpCheck((uint64_t *)a1);
    v64 = *(unsigned __int8 *)(a1 + 33);
    if (v64 == 4)
      return a1;
    if (v64 <= 9)
      break;
LABEL_25:
    __break(1u);
LABEL_26:
    JSC::B3::Procedure::pinRegister(*(_QWORD **)(a1 + 56), 0x17u);
  }
  v66 = (uint64_t *)(1 << v64);
  if ((v66 & 0x28) == 0)
  {
    if (((unsigned __int16)v66 & 0x3C7) != 0)
      return a1;
    goto LABEL_25;
  }
  *(_QWORD *)(a1 + 88) = JSC::B3::Procedure::addBlock(v66, *(JSC::B3::Procedure **)(a1 + 56), 1.0);
  return a1;
}

unint64_t JSC::Wasm::ModuleInformation::functionWasmSize(JSC::Wasm::ModuleInformation *this, unsigned int a2, unsigned int a3)
{
  unint64_t result;

  if (a2 <= a3 || (result = *((_QWORD *)this + 5 * a3 + 1) - *((_QWORD *)this + 5 * a3) + 1, result <= 1))
  {
    __break(0xC471u);
    JUMPOUT(0x198D866F0);
  }
  return result;
}

unsigned int *JSC::B3::Procedure::setWasmBoundsCheckGenerator<JSC::Wasm::OMGIRGenerator::OMGIRGenerator(JSC::Wasm::CalleeGroup &,JSC::Wasm::ModuleInformation const&,JSC::Wasm::OptimizingJITCallee &,JSC::B3::Procedure&,WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int &,JSC::MemoryMode,JSC::Wasm::CompilationMode,unsigned int,std::optional<BOOL>,unsigned int,JSC::Wasm::TierUpCount *)::$_0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *result;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v4 + 8) = 1;
  v5 = (unsigned int *)(v4 + 8);
  v6 = *a2;
  *(_QWORD *)v4 = off_1E35B5E28;
  *(_QWORD *)(v4 + 16) = v6;
  v10 = (unsigned int *)v4;
  result = JSC::B3::Procedure::setWasmBoundsCheckGenerator(a1, &v10);
  v10 = 0;
  do
  {
    v8 = __ldaxr(v5);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v5));
  if (!v9)
  {
    atomic_store(1u, (unsigned int *)(v4 + 8));
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

_QWORD *JSC::B3::BasicBlock::appendNew<JSC::B3::PatchpointValue,JSC::B3::Type,JSC::B3::Origin>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v4 = off_1E357F5F0;
  *(_DWORD *)(v4 + 8) = -1;
  *(_WORD *)(v4 + 12) = 83;
  *(_DWORD *)(v4 + 16) = 2;
  *(_BYTE *)(v4 + 20) = 4;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  result = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v4);
  *result = result + 2;
  result[1] = 3;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)v4 = off_1E357E700;
  *(_OWORD *)(v4 + 112) = xmmword_1991243D0;
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v4 + 136) = v4 + 152;
  *(_WORD *)(v4 + 168) = 0;
  *(_BYTE *)(v4 + 160) = 3;
  *(_QWORD *)(v4 + 144) = 0x100000001;
  v6 = *(unsigned int *)(a2 + 92);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * v6 - 8);
    *(_DWORD *)(a2 + 92) = v6 - 1;
    v8 = *(_QWORD *)(a2 + 64);
  }
  else
  {
    v7 = *(unsigned int *)(a2 + 76);
    if ((_DWORD)v7 == *(_DWORD *)(a2 + 72))
    {
      v13 = v7 + (v7 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= v7 + 1)
        v15 = v7 + 1;
      else
        v15 = v14;
      if (v15 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v16 = *(const void **)(a2 + 64);
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a2 + 72) = v15;
      *(_QWORD *)(a2 + 64) = v17;
      memcpy(v17, v16, 8 * v7);
      if (v16)
      {
        if (*(const void **)(a2 + 64) == v16)
        {
          *(_QWORD *)(a2 + 64) = 0;
          *(_DWORD *)(a2 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v16, v18, v19, v20, v21, v22, v23, v24);
      }
      v25 = *(unsigned int *)(a2 + 76);
      v8 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(v8 + 8 * v25) = 0;
      *(_DWORD *)(a2 + 76) = v25 + 1;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(v8 + 8 * v7) = 0;
      *(_DWORD *)(a2 + 76) = v7 + 1;
    }
  }
  *(_QWORD *)(v8 + 8 * v7) = v4;
  *(_DWORD *)(v4 + 8) = v7;
  v26 = v4;
  v9 = (char **)(a1 + 8);
  v10 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 16))
  {
    v12 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v10 + 1, (unint64_t)&v26);
    v10 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) = *(_QWORD *)v12;
    v11 = v26;
  }
  else
  {
    *(_QWORD *)&(*v9)[8 * v10] = v4;
    v11 = v4;
  }
  *(_DWORD *)(a1 + 20) = v10 + 1;
  *(_QWORD *)(v11 + 32) = a1;
  return (_QWORD *)v4;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::OMGIRGenerator(JSC::Wasm::CalleeGroup &,JSC::Wasm::ModuleInformation const&,JSC::Wasm::OptimizingJITCallee &,JSC::B3::Procedure &,WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int &,JSC::MemoryMode,JSC::Wasm::CompilationMode,unsigned int,std::optional<BOOL>,unsigned int,JSC::Wasm::TierUpCount *)::$_1>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E35B5E50;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v2;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::OMGIRGenerator(JSC::Wasm::CalleeGroup &,JSC::Wasm::ModuleInformation const&,JSC::Wasm::OptimizingJITCallee &,JSC::B3::Procedure &,WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int &,JSC::MemoryMode,JSC::Wasm::CompilationMode,unsigned int,std::optional<BOOL>,unsigned int,JSC::Wasm::TierUpCount *)::$_2>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E35B5E78;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v2;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::OMGIRGenerator(JSC::Wasm::CalleeGroup &,JSC::Wasm::ModuleInformation const&,JSC::Wasm::OptimizingJITCallee &,JSC::B3::Procedure &,WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int &,JSC::MemoryMode,JSC::Wasm::CompilationMode,unsigned int,std::optional<BOOL>,unsigned int,JSC::Wasm::TierUpCount *)::$_3>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E35B5EA0;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v2;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t JSC::Wasm::OMGIRGenerator::framePointer(JSC::Wasm::OMGIRGenerator *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  __int128 v26;

  result = *((_QWORD *)this + 56);
  if (!result)
  {
    v3 = *((_QWORD *)this + 7);
    result = WTF::fastMalloc((WTF *)0x30);
    v9 = result;
    *(_QWORD *)result = off_1E357F5F0;
    *(_DWORD *)(result + 8) = -1;
    *(_WORD *)(result + 12) = 13;
    *(_DWORD *)(result + 16) = 2;
    *(_BYTE *)(result + 20) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    v10 = *(unsigned int *)(v3 + 92);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + 8 * v10 - 8);
      *(_DWORD *)(v3 + 92) = v10 - 1;
      v12 = *(_QWORD *)(v3 + 64);
    }
    else
    {
      v11 = *(unsigned int *)(v3 + 76);
      if ((_DWORD)v11 == *(_DWORD *)(v3 + 72))
      {
        v17 = v11 + (v11 >> 2);
        if (v17 >= 0x10)
          v18 = v17 + 1;
        else
          v18 = 16;
        if (v18 <= v11 + 1)
          v19 = v11 + 1;
        else
          v19 = v18;
        if (v19 >> 29)
        {
          __break(0xC471u);
          return result;
        }
        v20 = *(const void **)(v3 + 64);
        v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
        *(_DWORD *)(v3 + 72) = v19;
        *(_QWORD *)(v3 + 64) = v21;
        memcpy(v21, v20, 8 * v11);
        if (v20)
        {
          if (*(const void **)(v3 + 64) == v20)
          {
            *(_QWORD *)(v3 + 64) = 0;
            *(_DWORD *)(v3 + 72) = 0;
          }
          WTF::fastFree((unint64_t)v20, v22, v23, v4, v5, v6, v7, v8);
        }
        v24 = *(unsigned int *)(v3 + 76);
        v12 = *(_QWORD *)(v3 + 64);
        *(_QWORD *)(v12 + 8 * v24) = 0;
        *(_DWORD *)(v3 + 76) = v24 + 1;
      }
      else
      {
        v12 = *(_QWORD *)(v3 + 64);
        *(_QWORD *)(v12 + 8 * v11) = 0;
        *(_DWORD *)(v3 + 76) = v11 + 1;
      }
    }
    *(_DWORD *)(v9 + 8) = v11;
    *(_QWORD *)(v12 + 8 * v11) = v9;
    *((_QWORD *)this + 56) = v9;
    *(_QWORD *)&v26 = 0;
    *((_QWORD *)&v26 + 1) = v9;
    v13 = (uint64_t *)((char *)this + 248);
    v14 = *((unsigned int *)this + 65);
    if ((_DWORD)v14 == *((_DWORD *)this + 64))
    {
      v25 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, (void *)(v14 + 1), (unint64_t)&v26, v4, v5, v6, v7, v8);
      v14 = *((unsigned int *)this + 65);
      v15 = *((_QWORD *)this + 31);
      v16 = *v25;
    }
    else
    {
      v15 = *v13;
      v16 = v26;
    }
    *(_OWORD *)(v15 + 16 * v14) = v16;
    ++*((_DWORD *)this + 65);
    return *((_QWORD *)this + 56);
  }
  return result;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::OMGIRGenerator(JSC::Wasm::CalleeGroup &,JSC::Wasm::ModuleInformation const&,JSC::Wasm::OptimizingJITCallee &,JSC::B3::Procedure &,WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int &,JSC::MemoryMode,JSC::Wasm::CompilationMode,unsigned int,std::optional<BOOL>,unsigned int,JSC::Wasm::TierUpCount *)::$_5>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = *a2;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E35B5EF0;
  *(_QWORD *)(v4 + 16) = v5;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t *JSC::Wasm::OMGIRGenerator::emitEntryTierUpCheck(uint64_t *this)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  char v6;

  v1 = this[6];
  if (v1)
  {
    v2 = this;
    v3 = JSC::Wasm::OMGIRGenerator::constant(this, 2u, v1, 0, 1);
    v4 = JSC::B3::BasicBlock::appendNew<JSC::B3::PatchpointValue,JSC::B3::TypeKind,JSC::B3::Origin>(v2[11], (JSC::B3::Value *)v2[7], 0, 0);
    *(_OWORD *)(v4 + 112) = xmmword_199124400;
    *(_QWORD *)(v4 + 128) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v4 + 64) |= 0x30000uLL;
    *(_QWORD *)(v4 + 80) |= 0x30000uLL;
    v5 = 0;
    v6 = 3;
    JSC::B3::StackmapValue::append((__int128 *)v4, v3, (unint64_t)&v5);
    v5 = v2;
    return (uint64_t *)JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::emitEntryTierUpCheck(void)::$_0>(v4, (uint64_t *)&v5);
  }
  return this;
}

unsigned int *JSC::Wasm::OMGIRGenerator::restoreWebAssemblyGlobalState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  JSC::B3::Value *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *result;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v8 = *(JSC::B3::Value **)(a1 + 56);
  v9 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v9 = off_1E357F5F0;
  *(_DWORD *)(v9 + 8) = -1;
  *(_WORD *)(v9 + 12) = 83;
  *(_DWORD *)(v9 + 16) = 0;
  *(_BYTE *)(v9 + 20) = 4;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  v10 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v9);
  *v10 = v10 + 2;
  v10[1] = 3;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_QWORD *)(v9 + 104) = 0;
  *(_QWORD *)v9 = off_1E357E700;
  *(_OWORD *)(v9 + 112) = xmmword_1991243D0;
  *(_QWORD *)(v9 + 152) = 0;
  *(_QWORD *)(v9 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v9 + 136) = v9 + 152;
  *(_WORD *)(v9 + 168) = 0;
  *(_BYTE *)(v9 + 160) = 0;
  *(_QWORD *)(v9 + 144) = 0x100000001;
  JSC::B3::Procedure::addValueImpl(v8, (JSC::B3::Value *)v9);
  v34 = v9;
  v11 = (_QWORD *)(a4 + 8);
  v12 = *(unsigned int *)(a4 + 20);
  if ((_DWORD)v12 == *(_DWORD *)(a4 + 16))
  {
    v31 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a4 + 8), v12 + 1, (unint64_t)&v34);
    v12 = *(unsigned int *)(a4 + 20);
    *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8 * v12) = *(_QWORD *)v31;
    v13 = v34;
  }
  else
  {
    *(_QWORD *)(*v11 + 8 * v12) = v9;
    v13 = v9;
  }
  *(_DWORD *)(a4 + 20) = v12 + 1;
  *(_QWORD *)(v13 + 32) = a4;
  *(_WORD *)(v9 + 116) = 0;
  *(_DWORD *)(v9 + 112) = 0;
  *(_BYTE *)(v9 + 118) = 1;
  *(_QWORD *)(v9 + 119) = 0;
  *(_BYTE *)(v9 + 127) = 0;
  *(_QWORD *)(v9 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v9 + 80) |= 0x80000uLL;
  v34 = 0;
  v35 = 3;
  JSC::B3::StackmapValue::append((__int128 *)v9, a3, (unint64_t)&v34);
  v14 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v14 + 8) = 1;
  *(_QWORD *)v14 = off_1E35B5E00;
  result = *(unsigned int **)(v9 + 56);
  *(_QWORD *)(v9 + 56) = v14;
  if (result)
  {
    v16 = result + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  if (*(_DWORD *)a2 != -1)
  {
    if (*(_BYTE *)(a1 + 32) == 1)
    {
      v19 = 0x400000;
    }
    else
    {
      if (!*(_BYTE *)(a2 + 8))
        return JSC::Wasm::OMGIRGenerator::reloadMemoryRegistersFromInstance((unsigned int *)a1, *(_DWORD *)a2, a3, a4);
      if (*(_BYTE *)(a1 + 32))
        v19 = 0x400000;
      else
        v19 = 12582912;
    }
    v20 = *(JSC::B3::Value **)(a1 + 56);
    if (*(_QWORD *)a1)
      v21 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
    else
      v21 = 0;
    v22 = WTF::fastMalloc((WTF *)0xD8);
    *(_QWORD *)v22 = off_1E357F5F0;
    *(_DWORD *)(v22 + 8) = -1;
    *(_WORD *)(v22 + 12) = 83;
    *(_DWORD *)(v22 + 16) = 0;
    *(_BYTE *)(v22 + 20) = 4;
    *(_QWORD *)(v22 + 24) = v21;
    *(_QWORD *)(v22 + 32) = 0;
    v23 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v22);
    *v23 = v23 + 2;
    v23[1] = 3;
    *(_OWORD *)(v22 + 40) = 0u;
    *(_OWORD *)(v22 + 56) = 0u;
    *(_OWORD *)(v22 + 72) = 0u;
    *(_OWORD *)(v22 + 88) = 0u;
    *(_QWORD *)(v22 + 104) = 0;
    *(_QWORD *)v22 = off_1E357E700;
    *(_OWORD *)(v22 + 112) = xmmword_1991243D0;
    *(_QWORD *)(v22 + 152) = 0;
    *(_QWORD *)(v22 + 128) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v22 + 136) = v22 + 152;
    *(_WORD *)(v22 + 168) = 0;
    *(_BYTE *)(v22 + 160) = 0;
    *(_QWORD *)(v22 + 144) = 0x100000001;
    JSC::B3::Procedure::addValueImpl(v20, (JSC::B3::Value *)v22);
    v34 = v22;
    v24 = *(unsigned int *)(a4 + 20);
    if ((_DWORD)v24 == *(_DWORD *)(a4 + 16))
    {
      v32 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a4 + 8), v24 + 1, (unint64_t)&v34);
      v24 = *(unsigned int *)(a4 + 20);
      *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8 * v24) = *(_QWORD *)v32;
      v25 = v34;
    }
    else
    {
      *(_QWORD *)(*v11 + 8 * v24) = v22;
      v25 = v22;
    }
    *(_DWORD *)(a4 + 20) = v24 + 1;
    *(_QWORD *)(v25 + 32) = a4;
    *(_WORD *)(v22 + 116) = 0;
    *(_DWORD *)(v22 + 112) = 0;
    *(_BYTE *)(v22 + 118) = 1;
    *(_QWORD *)(v22 + 119) = 0;
    *(_BYTE *)(v22 + 127) = 0;
    *(_QWORD *)(v22 + 128) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v22 + 64) |= v19;
    *(_QWORD *)(v22 + 80) |= v19;
    v26 = *(_QWORD *)(a1 + 480);
    v34 = 0;
    v35 = 3;
    JSC::B3::StackmapValue::append((__int128 *)v22, v26, (unint64_t)&v34);
    if (!*(_BYTE *)(a1 + 32))
    {
      v33 = *(_QWORD *)(a1 + 488);
      v34 = 0;
      v35 = 3;
      JSC::B3::StackmapValue::append((__int128 *)v22, v33, (unint64_t)&v34);
    }
    v27 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)(v27 + 8) = 1;
    *(_QWORD *)v27 = off_1E35B5F18;
    result = *(unsigned int **)(v22 + 56);
    *(_QWORD *)(v22 + 56) = v27;
    if (result)
    {
      v28 = result + 2;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *JSC::Wasm::OMGIRGenerator::reloadMemoryRegistersFromInstance(unsigned int *result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  JSC::B3::Value *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  if (a2 != -1)
  {
    v22 = v4;
    v23 = v5;
    v8 = (JSC::B3::Value *)*((_QWORD *)result + 7);
    if (*(_QWORD *)result)
      v9 = *(_QWORD *)(*(_QWORD *)result + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)result + 14992) << 32);
    else
      v9 = 0;
    v10 = WTF::fastMalloc((WTF *)0xD8);
    *(_QWORD *)v10 = off_1E357F5F0;
    *(_DWORD *)(v10 + 8) = -1;
    *(_WORD *)(v10 + 12) = 83;
    *(_DWORD *)(v10 + 16) = 0;
    *(_BYTE *)(v10 + 20) = 4;
    *(_QWORD *)(v10 + 24) = v9;
    *(_QWORD *)(v10 + 32) = 0;
    v11 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v10);
    *v11 = v11 + 2;
    v11[1] = 3;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_QWORD *)(v10 + 104) = 0;
    *(_QWORD *)v10 = off_1E357E700;
    *(_OWORD *)(v10 + 112) = xmmword_1991243D0;
    *(_QWORD *)(v10 + 152) = 0;
    *(_QWORD *)(v10 + 128) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v10 + 136) = v10 + 152;
    *(_WORD *)(v10 + 168) = 0;
    *(_BYTE *)(v10 + 160) = 0;
    *(_QWORD *)(v10 + 144) = 0x100000001;
    JSC::B3::Procedure::addValueImpl(v8, (JSC::B3::Value *)v10);
    v20 = v10;
    v12 = (char **)(a4 + 8);
    v13 = *(unsigned int *)(a4 + 20);
    if ((_DWORD)v13 == *(_DWORD *)(a4 + 16))
    {
      v19 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, v13 + 1, (unint64_t)&v20);
      v13 = *(unsigned int *)(a4 + 20);
      *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8 * v13) = *(_QWORD *)v19;
      v14 = v20;
    }
    else
    {
      *(_QWORD *)&(*v12)[8 * v13] = v10;
      v14 = v10;
    }
    *(_DWORD *)(a4 + 20) = v13 + 1;
    *(_QWORD *)(v14 + 32) = a4;
    *(_WORD *)(v10 + 116) = 0;
    *(_DWORD *)(v10 + 112) = 0;
    *(_BYTE *)(v10 + 118) = 1;
    *(_QWORD *)(v10 + 119) = 0;
    *(_BYTE *)(v10 + 127) = 0;
    *(_QWORD *)(v10 + 128) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v10 + 64) |= 0xC30000uLL;
    *(_QWORD *)(v10 + 80) |= 0xC30000uLL;
    *(_BYTE *)(v10 + 168) = 1;
    v20 = 0;
    v21 = 3;
    JSC::B3::StackmapValue::append((__int128 *)v10, a3, (unint64_t)&v20);
    v15 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)(v15 + 8) = 1;
    *(_QWORD *)v15 = off_1E35B5F40;
    result = *(unsigned int **)(v10 + 56);
    *(_QWORD *)(v10 + 56) = v15;
    if (result)
    {
      v16 = result + 2;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t JSC::Wasm::OMGIRGenerator::emitExceptionCheck(unsigned int *a1, JSC::ARM64LogicalImmediate *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28[2];

  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(a1, (JSC::ARM64LogicalImmediate *)this, 1, a4, a5, a6, a7, a8);
  JSC::Wasm::Thunks::stub((uint64_t *)JSC::Wasm::thunks, (void (*)(uint64_t))JSC::Wasm::throwExceptionFromWasmThunkGenerator, v9, v10, v11, v12, v13, v28);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>((uint64_t)a1, v28[0], v14, v15, v16, v17, v18, v19);
  return JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v28, v20, v21, v22, v23, v24, v25, v26);
}

uint64_t JSC::Wasm::OMGIRGenerator::constant(uint64_t *a1, unsigned int a2, unint64_t a3, unint64_t a4, char a5)
{
  unsigned int v6;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  JSC::B3::Value *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  __int128 *v43;
  uint64_t *v44;
  unsigned int v45;
  __int128 v49;

  if (a2 >= 0x80000000)
    v6 = 0x80000000;
  else
    v6 = a2;
  if (v6 - 1 >= 5)
  {
    __break(0xC471u);
    JUMPOUT(0x198D87894);
  }
  v45 = v6;
  v8 = a1 + 28;
  v9 = 0x705060403uLL >> (8 * (v6 - 1));
  v10 = HIDWORD(a3);
  v11 = a1[28];
  if (v11
    || (WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::rehash(a1 + 28, 8u, 0), (v11 = *v8) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = v9 & 7;
  v14 = 9 * ((~((_DWORD)a3 << 15) + a3) ^ ((~((_DWORD)a3 << 15) + a3) >> 10));
  v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
  v16 = ((_DWORD)v10 + a2 + v13 + (v15 ^ HIWORD(v15))) & v12;
  v17 = v11 + 32 * v16;
  if (WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,unsigned int,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::isEmptyBucket(v17))
  {
LABEL_9:
    *(_BYTE *)v17 = 0;
    *(_WORD *)(v17 + 1) = v13;
    *(_DWORD *)(v17 + 4) = a2;
    *(_QWORD *)(v17 + 8) = a3;
    *(_QWORD *)(v17 + 16) = 0;
    v18 = a4;
    v19 = (JSC::B3::Value *)a1[7];
    if (v45 == 5)
    {
      if (!a5)
      {
        if (*a1)
          v18 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
        else
          v18 = 0;
      }
      v20 = JSC::B3::Procedure::add<JSC::B3::Const128Value,JSC::B3::Origin,JSC::v128_u>((uint64_t)v19, v18, a3, 0);
    }
    else
    {
      if (!a5)
      {
        if (*a1)
          v18 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
        else
          v18 = 0;
      }
      v20 = JSC::B3::Procedure::addConstant(v19, v18, a2, a3);
    }
    v30 = v20;
    *(_QWORD *)&v49 = 0;
    *((_QWORD *)&v49 + 1) = v20;
    v31 = a1 + 31;
    v32 = *((unsigned int *)a1 + 65);
    if ((_DWORD)v32 == *((_DWORD *)a1 + 64))
    {
      v43 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v31, (void *)(v32 + 1), (unint64_t)&v49, v21, v22, v23, v24, v25);
      v32 = *((unsigned int *)a1 + 65);
      v33 = a1[31];
      v34 = *v43;
    }
    else
    {
      v33 = *v31;
      v34 = v49;
    }
    *(_OWORD *)(v33 + 16 * v32) = v34;
    ++*((_DWORD *)a1 + 65);
    *(_QWORD *)(v17 + 24) = v30;
    v35 = a1[28];
    if (v35)
      v36 = *(_DWORD *)(v35 - 12) + 1;
    else
      v36 = 1;
    *(_DWORD *)(v35 - 12) = v36;
    v37 = *v8;
    if (*v8)
      v38 = *(_DWORD *)(v37 - 12);
    else
      v38 = 0;
    v39 = (*(_DWORD *)(v37 - 16) + v38);
    v40 = *(unsigned int *)(v37 - 4);
    if (v40 > 0x400)
    {
      if (v40 > 2 * v39)
        return *(_QWORD *)(v17 + 24);
      goto LABEL_52;
    }
    if (3 * v40 <= 4 * v39)
    {
      if (!(_DWORD)v40)
      {
        v41 = 8;
LABEL_45:
        v17 = WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::rehash(v8, v41, v17);
        return *(_QWORD *)(v17 + 24);
      }
LABEL_52:
      v41 = (_DWORD)v40 << (6 * *(_DWORD *)(v37 - 12) >= (2 * v40));
      goto LABEL_45;
    }
  }
  else
  {
    v44 = v8;
    v26 = 0;
    v27 = 1;
    while (1)
    {
      v28 = *(unsigned __int8 *)(v17 + 1);
      v29 = !*(_BYTE *)v17 && v28 == v13;
      if (v29
        && (*(_BYTE *)(v17 + 2) & 0xF) == 0
        && *(_DWORD *)(v17 + 4) == a2
        && *(_DWORD *)(v17 + 8) == (_DWORD)a3
        && *(_DWORD *)(v17 + 12) == (_DWORD)v10
        && !*(_DWORD *)(v17 + 16)
        && !*(_DWORD *)(v17 + 20))
      {
        break;
      }
      if (!*(_BYTE *)v17
        && v28 == 159
        && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v17 + 4), (int32x4_t)xmmword_199123080)))) & 1) == 0&& (*(_BYTE *)(v17 + 2) & 0xF) == 0&& !*(_DWORD *)(v17 + 20))
      {
        v26 = v17;
      }
      v16 = ((_DWORD)v16 + v27) & v12;
      v17 = v11 + 32 * v16;
      ++v27;
      if (WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,unsigned int,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::isEmptyBucket(v17))
      {
        v8 = v44;
        if (v26)
        {
          *(_WORD *)v26 = -24832;
          *(_BYTE *)(v26 + 2) &= 0xF0u;
          *(_QWORD *)(v26 + 4) = 0;
          *(_QWORD *)(v26 + 20) = 0;
          *(_QWORD *)(v26 + 12) = 0;
          *(_DWORD *)(v26 + 28) = 0;
          --*(_DWORD *)(*v44 - 16);
          v17 = v26;
        }
        goto LABEL_9;
      }
    }
  }
  return *(_QWORD *)(v17 + 24);
}

uint64_t JSC::Wasm::OMGIRGenerator::insertEntrySwitch(JSC::Wasm::OMGIRGenerator *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;

  JSC::B3::Procedure::setNumEntrypoints(*((JSC::B3::Procedure **)this + 7), (void *)*((unsigned int *)this + 19), a3, a4, a5, a6, a7, a8);
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
  v9[2] = 1;
  v10 = v9 + 2;
  *(_QWORD *)v9 = off_1E35B5F68;
  v11 = *(_QWORD *)(*((_QWORD *)this + 7) + 160);
  v12 = (unsigned int *)*((_QWORD *)this + 68);
  v13 = v12 + 2;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  if (!*(_DWORD *)(v11 + 284))
    goto LABEL_28;
  v15 = *(unsigned int ***)(v11 + 272);
  v16 = *v15;
  *v15 = v12;
  if (v16)
  {
    v17 = v16 + 2;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v16 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
    }
  }
  if (*((_DWORD *)this + 19) >= 2u)
  {
    v33 = 1;
    while (1)
    {
      v34 = *(_QWORD *)(*((_QWORD *)this + 7) + 160);
      do
        v35 = __ldaxr(v10);
      while (__stlxr(v35 + 1, v10));
      if (v33 >= *(unsigned int *)(v34 + 284))
        break;
      v36 = *(_QWORD *)(v34 + 272);
      v37 = *(unsigned int **)(v36 + 8 * v33);
      *(_QWORD *)(v36 + 8 * v33) = v9;
      if (v37)
      {
        v38 = v37 + 2;
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          atomic_store(1u, v37 + 2);
          v41 = v33;
          (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 8))(v37);
          v33 = v41;
        }
      }
      if (++v33 >= *((unsigned int *)this + 19))
        goto LABEL_10;
    }
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x198D87A80);
  }
LABEL_10:
  v20 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 11) = v20;
  result = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin>(v20, *((_QWORD *)this + 7), 157, 0);
  v27 = *((unsigned int *)this + 19);
  if ((_DWORD)v27)
  {
    v28 = (uint64_t *)*((_QWORD *)this + 8);
    v29 = 8 * v27;
    do
    {
      v30 = *v28++;
      result = (uint64_t)JSC::B3::BasicBlock::appendSuccessor(*((_QWORD *)this + 11), v30, 0, v22, v23, v24, v25, v26);
      v29 -= 8;
    }
    while (v29);
  }
  do
  {
    v31 = __ldaxr(v10);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v10));
  if (!v32)
  {
    atomic_store(1u, v9 + 2);
    return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
  }
  return result;
}

double JSC::Wasm::OMGIRGenerator::insertConstants(JSC::Wasm::OMGIRGenerator *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  JSC::B3::InsertionSet *v5;
  double result;
  JSC::B3::Value *v7;
  uint64_t v8;
  JSC::B3::Value *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::B3::BasicBlock *v15;

  if (!*((_BYTE *)this + 465) || *((_BYTE *)this + 464))
  {
    v2 = 1;
    v3 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 1u, 0xFFFFFFFFuLL, 0, 1);
  }
  else
  {
    v2 = 0;
    v3 = 0;
  }
  v4 = *((_QWORD *)this + 7);
  if (!*(_DWORD *)(v4 + 60))
    goto LABEL_10;
  v5 = (JSC::Wasm::OMGIRGenerator *)((char *)this + 240);
  result = JSC::B3::InsertionSet::execute((JSC::Wasm::OMGIRGenerator *)((char *)this + 240), **(JSC::B3::BasicBlock ***)(v4 + 48));
  if (v2)
  {
    v7 = (JSC::B3::Value *)*((_QWORD *)this + 7);
    v8 = JSC::Wasm::OMGIRGenerator::framePointer(this);
    v9 = JSC::B3::Procedure::add<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,int>(v7, v3, v8);
    if (*((_DWORD *)this + 19))
    {
      v15 = (JSC::B3::BasicBlock *)**((_QWORD **)this + 8);
      JSC::B3::InsertionSet::insertValue(v5, 0, v9, v10, v11, v12, v13, v14);
      return JSC::B3::InsertionSet::execute(v5, v15);
    }
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x198D87B68);
  }
  return result;
}

JSC::B3::Value *JSC::B3::Procedure::add<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,int>(JSC::B3::Value *a1, uint64_t a2, uint64_t a3)
{
  uint64_t Space;

  Space = JSC::B3::Value::allocateSpace(70, 64);
  *(_QWORD *)Space = off_1E357F5F0;
  *(_DWORD *)(Space + 8) = -1;
  *(_WORD *)(Space + 12) = 70;
  *(_DWORD *)(Space + 16) = 0;
  *(_BYTE *)(Space + 20) = 2;
  *(_QWORD *)(Space + 24) = 0;
  *(_QWORD *)(Space + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)Space, 2, a2, a3);
  *(_QWORD *)Space = off_1E357E4C8;
  *(_DWORD *)(Space + 40) = 36;
  *(_OWORD *)(Space + 44) = xmmword_19914F690;
  return JSC::B3::Procedure::addValueImpl(a1, (JSC::B3::Value *)Space);
}

uint64_t JSC::Wasm::OMGIRGenerator::toB3ResultType(JSC::Wasm::OMGIRGenerator *this, const JSC::Wasm::TypeDefinition *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  uint64_t v9;
  uint64_t *v11[2];
  _QWORD v12[3];
  const JSC::Wasm::TypeDefinition *v13;

  v13 = a2;
  if (*((_DWORD *)a2 + 8))
    v8 = 0;
  else
    v8 = (char *)a2 + 8;
  v9 = *((unsigned int *)v8 + 3);
  if ((_DWORD)v9 == 1)
    return JSC::Wasm::toB3Type(**(_QWORD **)v8);
  if ((_DWORD)v9)
  {
    v11[0] = (uint64_t *)&v13;
    v11[1] = (uint64_t *)this;
    WTF::HashMap<JSC::Wasm::TypeDefinition const*,JSC::B3::Type,WTF::DefaultHash<JSC::Wasm::TypeDefinition const*>,WTF::HashTraits<JSC::Wasm::TypeDefinition const*>,WTF::HashTraits<JSC::B3::Type>,WTF::HashTableTraits>::ensure<JSC::Wasm::OMGIRGenerator::toB3ResultType(JSC::Wasm::TypeDefinition const*)::$_0>((uint64_t)v12, (uint64_t *)this + 29, (uint64_t *)&v13, v11, a5, a6, a7, a8);
    return *(unsigned int *)(v12[0] + 8);
  }
  return v9;
}

void WTF::HashMap<JSC::Wasm::TypeDefinition const*,JSC::B3::Type,WTF::DefaultHash<JSC::Wasm::TypeDefinition const*>,WTF::HashTraits<JSC::Wasm::TypeDefinition const*>,WTF::HashTraits<JSC::B3::Type>,WTF::HashTableTraits>::ensure<JSC::Wasm::OMGIRGenerator::toB3ResultType(JSC::Wasm::TypeDefinition const*)::$_0>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _OWORD *v20;
  uint64_t v21;
  _OWORD *v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  unsigned int v30;
  unint64_t v31;
  int v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  int v53;
  WTF *v54;
  uint64_t v55;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::Wasm::TypeDefinition const*,WTF::KeyValuePair<JSC::Wasm::TypeDefinition const*,JSC::B3::Type>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Wasm::TypeDefinition const*,JSC::B3::Type>>,WTF::DefaultHash<JSC::Wasm::TypeDefinition const*>,WTF::HashMap<JSC::Wasm::TypeDefinition const*,JSC::B3::Type,WTF::DefaultHash<JSC::Wasm::TypeDefinition const*>,WTF::HashTraits<JSC::Wasm::TypeDefinition const*>,WTF::HashTraits<JSC::B3::Type>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Wasm::TypeDefinition const*>>::rehash(a2, 8u, 0), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = ~(*a3 << 32) + *a3;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (_OWORD *)(v12 + 16 * v19);
  v21 = *(_QWORD *)v20;
  if (*(_QWORD *)v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v45 = 0;
        else
          v45 = *(unsigned int *)(v12 - 4);
        v51 = 0;
        v52 = v12 + 16 * v45;
        goto LABEL_48;
      }
      if (v21 == -1)
        v22 = v20;
      v19 = (v19 + v23) & v14;
      v20 = (_OWORD *)(v12 + 16 * v19);
      v21 = *(_QWORD *)v20;
      ++v23;
    }
    while (*(_QWORD *)v20);
    if (v22)
    {
      *(_QWORD *)v22 = 0;
      *((_DWORD *)v22 + 2) = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v20 = v22;
    }
  }
  *(_QWORD *)v20 = v15;
  v54 = 0;
  v55 = 0;
  v24 = a4[1];
  v25 = **a4;
  v26 = (_QWORD *)(v25 + 8);
  if (*(_DWORD *)(v25 + 32))
    v27 = 0;
  else
    v27 = v25 + 8;
  if (*(_DWORD *)(v27 + 12))
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    do
    {
      v32 = JSC::Wasm::toB3Type(*(_QWORD *)(*v26 + v28));
      v53 = v32;
      if (v30 == (_DWORD)v55)
      {
        v33 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v54, v30 + 1, (unint64_t)&v53);
        v30 = HIDWORD(v55);
        v29 = v54;
        *((_DWORD *)v54 + HIDWORD(v55)) = *v33;
      }
      else
      {
        *((_DWORD *)v29 + v30) = v32;
      }
      HIDWORD(v55) = ++v30;
      ++v31;
      v34 = **a4;
      v26 = (_QWORD *)(v34 + 8);
      if (*(_DWORD *)(v34 + 32))
        v35 = 0;
      else
        v35 = v34 + 8;
      v28 += 16;
    }
    while (v31 < *(unsigned int *)(v35 + 12));
  }
  v36 = v24[7];
  v37 = (_QWORD *)(v36 + 32);
  v38 = *(unsigned int *)(v36 + 44);
  if ((_DWORD)v38 == *(_DWORD *)(v36 + 40))
  {
    v39 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, v38 + 1, (unint64_t)&v54);
    v40 = *(_QWORD *)(v36 + 32) + 16 * *(unsigned int *)(v36 + 44);
  }
  else
  {
    v40 = *v37 + 16 * v38;
    v39 = (unint64_t)&v54;
  }
  *(_QWORD *)v40 = 0;
  *(_QWORD *)(v40 + 8) = 0;
  v41 = *(_QWORD *)v39;
  *(_QWORD *)v39 = 0;
  *(_QWORD *)v40 = v41;
  LODWORD(v41) = *(_DWORD *)(v39 + 8);
  *(_DWORD *)(v39 + 8) = 0;
  *(_DWORD *)(v40 + 8) = v41;
  LODWORD(v41) = *(_DWORD *)(v39 + 12);
  *(_DWORD *)(v39 + 12) = 0;
  *(_DWORD *)(v40 + 12) = v41;
  ++*(_DWORD *)(v36 + 44);
  v42 = v54;
  if (v54)
  {
    v54 = 0;
    LODWORD(v55) = 0;
    WTF::fastFree((unint64_t)v42, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  *((_DWORD *)v20 + 2) = v38 | 0x80000000;
  v43 = *a2;
  if (*a2)
    v44 = *(_DWORD *)(v43 - 12) + 1;
  else
    v44 = 1;
  *(_DWORD *)(v43 - 12) = v44;
  v46 = *a2;
  if (*a2)
    v47 = *(_DWORD *)(v46 - 12);
  else
    v47 = 0;
  v48 = (*(_DWORD *)(v46 - 16) + v47);
  v49 = *(unsigned int *)(v46 - 4);
  if (v49 > 0x400)
  {
    if (v49 <= 2 * v48)
      goto LABEL_39;
  }
  else if (3 * v49 <= 4 * v48)
  {
    if (!(_DWORD)v49)
    {
      v50 = 8;
LABEL_44:
      v20 = WTF::HashTable<JSC::Wasm::TypeDefinition const*,WTF::KeyValuePair<JSC::Wasm::TypeDefinition const*,JSC::B3::Type>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Wasm::TypeDefinition const*,JSC::B3::Type>>,WTF::DefaultHash<JSC::Wasm::TypeDefinition const*>,WTF::HashMap<JSC::Wasm::TypeDefinition const*,JSC::B3::Type,WTF::DefaultHash<JSC::Wasm::TypeDefinition const*>,WTF::HashTraits<JSC::Wasm::TypeDefinition const*>,WTF::HashTraits<JSC::B3::Type>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Wasm::TypeDefinition const*>>::rehash(a2, v50, v20);
      v46 = *a2;
      if (*a2)
        v49 = *(unsigned int *)(v46 - 4);
      else
        v49 = 0;
      goto LABEL_47;
    }
LABEL_39:
    v50 = (_DWORD)v49 << (6 * *(_DWORD *)(v46 - 12) >= (2 * v49));
    goto LABEL_44;
  }
LABEL_47:
  v52 = v46 + 16 * v49;
  v51 = 1;
LABEL_48:
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v52;
  *(_BYTE *)(a1 + 16) = v51;
}

void JSC::Wasm::OMGIRGenerator::fail<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, double a3, float a4)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  float v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  int v68;
  int v69;
  char v70;
  void (**v71)(WTF::StringPrintStream *__hidden);
  WTF *v72;
  __int128 v73;
  _BYTE v74[128];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v71 = off_1E3572250;
  v72 = (WTF *)v74;
  v73 = xmmword_199122F80;
  v74[0] = 0;
  WTF::StringImpl::utf8ForCharacters("can't allocate memory for ", 0x1AuLL, (uint64_t)&v68, a4);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v71, "StringView", &v68);
  if (v69 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v70, &v68);
  v71[5]((WTF::StringPrintStream *)&v71);
  v71[5]((WTF::StringPrintStream *)&v71);
  v13 = v72;
  if (!v72)
  {
    v67 = 0;
    goto LABEL_7;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v72, v73, (uint64_t *)&v67);
  v13 = v72;
  if (v72 != (WTF *)v74)
LABEL_7:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  v71 = off_1E3572250;
  v72 = (WTF *)v74;
  v73 = xmmword_199122F80;
  v74[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v71, "%lu", a2);
  v71[5]((WTF::StringPrintStream *)&v71);
  v21 = v72;
  if (!v72)
  {
    v66 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v72, v73, (uint64_t *)&v66);
  v21 = v72;
  if (v72 != (WTF *)v74)
LABEL_12:
    WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
  v71 = off_1E3572250;
  v72 = (WTF *)v74;
  v73 = xmmword_199122F80;
  v74[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" locals", 7uLL, (uint64_t)&v68, v22);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v71, "StringView", &v68);
  if (v69 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v70, &v68);
  v71[5]((WTF::StringPrintStream *)&v71);
  v71[5]((WTF::StringPrintStream *)&v71);
  v30 = v72;
  if (!v72)
  {
    v65 = 0;
    goto LABEL_19;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v72, v73, (uint64_t *)&v65);
  v30 = v72;
  if (v72 != (WTF *)v74)
LABEL_19:
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::String,WTF::String>((uint64_t)&v71, "WebAssembly.Module failed compiling: ", 38, (uint64_t)v67, (uint64_t)v66, (uint64_t)v65);
  if (v71)
  {
    *a1 = v71;
    v38 = v65;
    v65 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
      {
        WTF::StringImpl::~StringImpl(v38, v31, v32, v33, v34, v35, v36, v37);
        WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
      }
      else
      {
        *(_DWORD *)v38 -= 2;
      }
    }
    v39 = v66;
    v66 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
      {
        WTF::StringImpl::~StringImpl(v39, v31, v32, v33, v34, v35, v36, v37);
        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
      }
      else
      {
        *(_DWORD *)v39 -= 2;
      }
    }
    v40 = v67;
    v67 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
      {
        WTF::StringImpl::~StringImpl(v40, v31, v32, v33, v34, v35, v36, v37);
        WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
      }
      else
      {
        *(_DWORD *)v40 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

char *JSC::B3::BasicBlock::appendNew<JSC::B3::VariableValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Variable *,JSC::B3::Value *>(uint64_t a1, JSC::B3::Procedure *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t casual;
  char *result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v10)
  {
    v11 = (_BYTE *)(v10 + 8856);
    *(_BYTE *)(v10 + 8856) = 1;
    v12 = *(unsigned int *)(v10 + 8872);
    if ((_DWORD)v12)
    {
      *(_DWORD *)(v10 + 8872) = v12 - *(_DWORD *)(v10 + 8876);
      casual = *(_QWORD *)(v10 + 8864) - v12;
LABEL_4:
      *v11 = 0;
      goto LABEL_5;
    }
    v16 = *(_QWORD *)(v10 + 8896);
    v17 = *(_QWORD *)(v10 + 8880);
    if (v16)
    {
LABEL_9:
      v18 = __clz(v16);
      *(_QWORD *)(v10 + 8896) = v16 & ~(0x8000000000000000 >> v18);
      casual = v17 + 16 * v18;
      goto LABEL_4;
    }
    if (*(_BYTE *)(v10 + 8861) == 6)
    {
      v19 = *(_DWORD *)(v10 + 8892);
      v20 = *(unsigned int *)(v10 + 8888);
      if (v20 < v19)
      {
        *(_QWORD *)&v11[8 * v20 + 56] = 0;
        v21 = (unint64_t *)(v10 + 8 * v20 + 8920);
        v22 = v19 - 1 - v20;
        while (v22)
        {
          v17 += 1024;
          v24 = *v21++;
          v23 = v24;
          LODWORD(v20) = v20 + 1;
          --v22;
          if (v24)
          {
            v16 = __rbit64(v23);
            *(_DWORD *)(v10 + 8888) = v20;
            *(_QWORD *)(v10 + 8880) = v17;
            goto LABEL_9;
          }
        }
        *(_DWORD *)(v10 + 8888) = v19;
      }
    }
    *v11 = 0;
  }
  casual = bmalloc_allocate_casual(56, 1);
LABEL_5:
  *(_DWORD *)(casual + 8) = -1;
  *(_WORD *)(casual + 12) = 9;
  *(_DWORD *)(casual + 16) = 0;
  *(_BYTE *)(casual + 20) = 1;
  *(_QWORD *)(casual + 24) = a3;
  *(_QWORD *)(casual + 32) = 0;
  *(_QWORD *)casual = off_1E357F0F8;
  *(_QWORD *)(casual + 40) = a4;
  *(_QWORD *)(casual + 48) = a5;
  JSC::B3::Procedure::addValueImpl(this, (JSC::B3::Value *)casual);
  v25 = casual;
  result = (char *)(a1 + 8);
  v15 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v15 == *(_DWORD *)(a1 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v15 + 1, (unint64_t)&v25);
    v15 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = *(_QWORD *)result;
    casual = v25;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v15) = casual;
  }
  *(_DWORD *)(a1 + 20) = v15 + 1;
  *(_QWORD *)(casual + 32) = a1;
  return result;
}

void JSC::Wasm::OMGIRGenerator::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(void (***a1)(WTF::StringPrintStream *__hidden this), int a2, double a3, float a4)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  float v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  int v68;
  int v69;
  char v70;
  void (**v71)(WTF::StringPrintStream *__hidden);
  WTF *v72;
  __int128 v73;
  _BYTE v74[128];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v71 = off_1E3572250;
  v72 = (WTF *)v74;
  v73 = xmmword_199122F80;
  v74[0] = 0;
  WTF::StringImpl::utf8ForCharacters("can't allocate memory for ", 0x1AuLL, (uint64_t)&v68, a4);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v71, "StringView", &v68);
  if (v69 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v70, &v68);
  v71[5]((WTF::StringPrintStream *)&v71);
  v71[5]((WTF::StringPrintStream *)&v71);
  v13 = v72;
  if (!v72)
  {
    v67 = 0;
    goto LABEL_7;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v72, v73, (uint64_t *)&v67);
  v13 = v72;
  if (v72 != (WTF *)v74)
LABEL_7:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  v71 = off_1E3572250;
  v72 = (WTF *)v74;
  v73 = xmmword_199122F80;
  v74[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v71, "%u", a2);
  v71[5]((WTF::StringPrintStream *)&v71);
  v21 = v72;
  if (!v72)
  {
    v66 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v72, v73, (uint64_t *)&v66);
  v21 = v72;
  if (v72 != (WTF *)v74)
LABEL_12:
    WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
  v71 = off_1E3572250;
  v72 = (WTF *)v74;
  v73 = xmmword_199122F80;
  v74[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" arguments", 0xAuLL, (uint64_t)&v68, v22);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v71, "StringView", &v68);
  if (v69 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v70, &v68);
  v71[5]((WTF::StringPrintStream *)&v71);
  v71[5]((WTF::StringPrintStream *)&v71);
  v30 = v72;
  if (!v72)
  {
    v65 = 0;
    goto LABEL_19;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v72, v73, (uint64_t *)&v65);
  v30 = v72;
  if (v72 != (WTF *)v74)
LABEL_19:
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::String,WTF::String>((uint64_t)&v71, "WebAssembly.Module failed compiling: ", 38, (uint64_t)v67, (uint64_t)v66, (uint64_t)v65);
  if (v71)
  {
    *a1 = v71;
    v38 = v65;
    v65 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
      {
        WTF::StringImpl::~StringImpl(v38, v31, v32, v33, v34, v35, v36, v37);
        WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
      }
      else
      {
        *(_DWORD *)v38 -= 2;
      }
    }
    v39 = v66;
    v66 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
      {
        WTF::StringImpl::~StringImpl(v39, v31, v32, v33, v34, v35, v36, v37);
        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
      }
      else
      {
        *(_DWORD *)v39 -= 2;
      }
    }
    v40 = v67;
    v67 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
      {
        WTF::StringImpl::~StringImpl(v40, v31, v32, v33, v34, v35, v36, v37);
        WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
      }
      else
      {
        *(_DWORD *)v40 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t JSC::B3::BasicBlock::appendNew<JSC::B3::ArgumentRegValue,JSC::B3::Origin,JSC::ARM64Registers::RegisterID>(JSC::B3::BasicBlock *a1, JSC::B3::Value *a2, char a3)
{
  char v5;
  uint64_t v6;

  v5 = a3 & 0x7F;
  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 12;
  *(_DWORD *)(v6 + 16) = 2;
  *(_BYTE *)(v6 + 20) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)v6 = &unk_1E357D2C8;
  *(_BYTE *)(v6 + 40) = v5;
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)v6);
  JSC::B3::BasicBlock::append(a1, (JSC::B3::Value *)v6);
  return v6;
}

uint64_t JSC::B3::BasicBlock::appendNew<JSC::B3::ArgumentRegValue,JSC::B3::Origin,JSC::ARM64Registers::FPRegisterID,JSC::B3::ArgumentRegValue::VectorTag>(uint64_t a1, JSC::B3::Value *a2, char a3)
{
  char v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  uint64_t v12;

  v5 = (a3 + 32) & 0x7F;
  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 12;
  *(_DWORD *)(v6 + 16) = 5;
  *(_BYTE *)(v6 + 20) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)v6 = &unk_1E357D2C8;
  *(_BYTE *)(v6 + 40) = v5;
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)v6);
  v12 = v6;
  v7 = (char **)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v8 == *(_DWORD *)(a1 + 16))
  {
    v11 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v8 + 1, (unint64_t)&v12);
    v8 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v8) = *(_QWORD *)v11;
    v9 = v12;
  }
  else
  {
    *(_QWORD *)&(*v7)[8 * v8] = v6;
    v9 = v6;
  }
  *(_DWORD *)(a1 + 20) = v8 + 1;
  *(_QWORD *)(v9 + 32) = a1;
  return v6;
}

uint64_t JSC::B3::BasicBlock::appendNew<JSC::B3::ArgumentRegValue,JSC::B3::Origin,JSC::ARM64Registers::FPRegisterID>(uint64_t a1, JSC::B3::Value *a2, char a3)
{
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  uint64_t v15;

  v5 = a3 + 32;
  v6 = (a3 + 32) & 0x7F;
  v7 = WTF::fastMalloc((WTF *)0x30);
  v8 = v7;
  if ((v5 & 0x60) != 0)
    v9 = 4;
  else
    v9 = 2;
  *(_DWORD *)(v7 + 8) = -1;
  *(_WORD *)(v7 + 12) = 12;
  *(_DWORD *)(v7 + 16) = v9;
  *(_BYTE *)(v7 + 20) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)v7 = &unk_1E357D2C8;
  *(_BYTE *)(v7 + 40) = v6;
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)v7);
  v15 = v8;
  v10 = (char **)(a1 + 8);
  v11 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v11 == *(_DWORD *)(a1 + 16))
  {
    v14 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v15);
    v11 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v11) = *(_QWORD *)v14;
    v12 = v15;
  }
  else
  {
    *(_QWORD *)&(*v10)[8 * v11] = v8;
    v12 = v8;
  }
  *(_DWORD *)(a1 + 20) = v11 + 1;
  *(_QWORD *)(v12 + 32) = a1;
  return v8;
}

uint64_t JSC::B3::BasicBlock::appendNew<JSC::B3::Const64Value,JSC::B3::Origin,long>(uint64_t a1, JSC::B3::Value *a2, uint64_t a3)
{
  uint64_t v6;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  uint64_t v12;

  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 4;
  *(_DWORD *)(v6 + 16) = 2;
  *(_BYTE *)(v6 + 20) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)v6 = off_1E357DA88;
  *(_QWORD *)(v6 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)v6);
  v12 = v6;
  v7 = (char **)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v8 == *(_DWORD *)(a1 + 16))
  {
    v11 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v8 + 1, (unint64_t)&v12);
    v8 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v8) = *(_QWORD *)v11;
    v9 = v12;
  }
  else
  {
    *(_QWORD *)&(*v7)[8 * v8] = v6;
    v9 = v6;
  }
  *(_DWORD *)(a1 + 20) = v8 + 1;
  *(_QWORD *)(v9 + 32) = a1;
  return v6;
}

uint64_t JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *>(uint64_t a1, JSC::B3::Procedure *this, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t casual;
  char **v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v10)
  {
    v11 = (_BYTE *)(v10 + 9040);
    *(_BYTE *)(v10 + 9040) = 1;
    v12 = *(unsigned int *)(v10 + 9056);
    if ((_DWORD)v12)
    {
      *(_DWORD *)(v10 + 9056) = v12 - *(_DWORD *)(v10 + 9060);
      casual = *(_QWORD *)(v10 + 9048) - v12;
LABEL_4:
      *v11 = 0;
      goto LABEL_5;
    }
    v18 = *(_QWORD *)(v10 + 9080);
    v19 = *(_QWORD *)(v10 + 9064);
    if (v18)
    {
LABEL_9:
      v20 = __clz(v18);
      *(_QWORD *)(v10 + 9080) = v18 & ~(0x8000000000000000 >> v20);
      casual = v19 + 16 * v20;
      goto LABEL_4;
    }
    if (*(_BYTE *)(v10 + 9045) == 6)
    {
      v22 = *(_DWORD *)(v10 + 9076);
      v23 = *(unsigned int *)(v10 + 9072);
      if (v23 < v22)
      {
        *(_QWORD *)&v11[8 * v23 + 56] = 0;
        v24 = (unint64_t *)(v10 + 8 * v23 + 9104);
        v25 = v22 - 1 - v23;
        while (v25)
        {
          v19 += 1024;
          v27 = *v24++;
          v26 = v27;
          LODWORD(v23) = v23 + 1;
          --v25;
          if (v27)
          {
            v18 = __rbit64(v26);
            *(_DWORD *)(v10 + 9072) = v23;
            *(_QWORD *)(v10 + 9064) = v19;
            goto LABEL_9;
          }
        }
        *(_DWORD *)(v10 + 9072) = v22;
      }
    }
    *v11 = 0;
  }
  casual = bmalloc_allocate_casual(72, 1);
LABEL_5:
  *(_DWORD *)(casual + 8) = -1;
  *(_WORD *)(casual + 12) = 67;
  *(_DWORD *)(casual + 16) = a3;
  *(_BYTE *)(casual + 20) = 1;
  *(_QWORD *)(casual + 24) = a4;
  *(_QWORD *)(casual + 32) = 0;
  *(_QWORD *)(casual + 64) = a5;
  *(_QWORD *)casual = off_1E357E4C8;
  *(_DWORD *)(casual + 40) = 0;
  *(_OWORD *)(casual + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(this, (JSC::B3::Value *)casual);
  v28 = casual;
  v14 = (char **)(a1 + 8);
  v15 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v15 == *(_DWORD *)(a1 + 16))
  {
    v21 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v15 + 1, (unint64_t)&v28);
    v15 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = *(_QWORD *)v21;
    v16 = v28;
  }
  else
  {
    *(_QWORD *)&(*v14)[8 * v15] = casual;
    v16 = casual;
  }
  *(_DWORD *)(a1 + 20) = v15 + 1;
  *(_QWORD *)(v16 + 32) = a1;
  return casual;
}

WTF *JSC::Wasm::OMGIRGenerator::push(JSC::Wasm::OMGIRGenerator *this, JSC::B3::Value *a2)
{
  WTF *PushVariable;
  uint64_t v5;
  JSC::B3::Value *v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;

  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *((_DWORD *)a2 + 4));
  v5 = *((_QWORD *)this + 11);
  v6 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v7 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v7 = 0;
  v8 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v8 + 8) = -1;
  *(_WORD *)(v8 + 12) = 9;
  *(_DWORD *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 20) = 1;
  *(_QWORD *)(v8 + 24) = v7;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)v8 = off_1E357F0F8;
  *(_QWORD *)(v8 + 40) = PushVariable;
  *(_QWORD *)(v8 + 48) = a2;
  JSC::B3::Procedure::addValueImpl(v6, (JSC::B3::Value *)v8);
  v13 = v8;
  v9 = (char **)(v5 + 8);
  v10 = *(unsigned int *)(v5 + 20);
  if ((_DWORD)v10 == *(_DWORD *)(v5 + 16))
  {
    v12 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v10 + 1, (unint64_t)&v13);
    v10 = *(unsigned int *)(v5 + 20);
    *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v10) = *(_QWORD *)v12;
    v8 = v13;
  }
  else
  {
    *(_QWORD *)&(*v9)[8 * v10] = v8;
  }
  *(_DWORD *)(v5 + 20) = v10 + 1;
  *(_QWORD *)(v8 + 32) = v5;
  return PushVariable;
}

uint64_t JSC::Wasm::OMGIRGenerator::get(JSC::Wasm::OMGIRGenerator *this, JSC::B3::Variable *a2)
{
  uint64_t v3;
  JSC::B3::Value *v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 11);
  v4 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v5 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v5 = 0;
  v6 = WTF::fastMalloc((WTF *)0x30);
  v7 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 10;
  *(_DWORD *)(v6 + 16) = v7;
  *(_BYTE *)(v6 + 20) = 0;
  *(_QWORD *)(v6 + 24) = v5;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)v6 = off_1E357F0F8;
  *(_QWORD *)(v6 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v4, (JSC::B3::Value *)v6);
  v13 = v6;
  v8 = (char **)(v3 + 8);
  v9 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v9 == *(_DWORD *)(v3 + 16))
  {
    v12 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v9 + 1, (unint64_t)&v13);
    v9 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v9) = *(_QWORD *)v12;
    v10 = v13;
  }
  else
  {
    *(_QWORD *)&(*v8)[8 * v9] = v6;
    v10 = v6;
  }
  *(_DWORD *)(v3 + 20) = v9 + 1;
  *(_QWORD *)(v10 + 32) = v3;
  return v6;
}

uint64_t operationGetWasmTableElement(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;

  if ((a3 & 0x80000000) != 0)
    return 0;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 204) <= a2)
    goto LABEL_13;
  v3 = *(_QWORD *)(120 * *(unsigned int *)(a1 + 112) + 8 * a2 + a1 + 152);
  if (*(_DWORD *)(v3 + 4) <= a3)
    return 0;
  if (!*(_QWORD *)(v3 + 40))
  {
    __break(0xC471u);
    JUMPOUT(0x198D88EE4);
  }
  if (*(_BYTE *)(v3 + 13) == 1)
  {
    v4 = *(_QWORD *)(v3 + 48) + 48 * a3 + 40;
    return *(_QWORD *)v4;
  }
  if (*(_BYTE *)(v3 + 13))
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x198D88EC4);
  }
  v4 = *(_QWORD *)(v3 + 48) + 8 * a3;
  return *(_QWORD *)v4;
}

uint64_t JSC::B3::BasicBlock::appendNew<JSC::B3::CheckValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value *>(uint64_t a1, JSC::B3::Value *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t casual;
  _QWORD *v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v8)
  {
    v9 = (_BYTE *)(v8 + 9960);
    *(_BYTE *)(v8 + 9960) = 1;
    v10 = *(unsigned int *)(v8 + 9976);
    if ((_DWORD)v10)
    {
      *(_DWORD *)(v8 + 9976) = v10 - *(_DWORD *)(v8 + 9980);
      casual = *(_QWORD *)(v8 + 9968) - v10;
LABEL_4:
      *v9 = 0;
      goto LABEL_5;
    }
    v17 = *(_QWORD *)(v8 + 10000);
    v18 = *(_QWORD *)(v8 + 9984);
    if (v17)
    {
LABEL_9:
      v19 = __clz(v17);
      *(_QWORD *)(v8 + 10000) = v17 & ~(0x8000000000000000 >> v19);
      casual = v18 + 16 * v19;
      goto LABEL_4;
    }
    if (*(_BYTE *)(v8 + 9965) == 6)
    {
      v21 = *(_DWORD *)(v8 + 9996);
      v22 = *(unsigned int *)(v8 + 9992);
      if (v22 < v21)
      {
        *(_QWORD *)&v9[8 * v22 + 56] = 0;
        v23 = (unint64_t *)(v8 + 8 * v22 + 10024);
        v24 = v21 - 1 - v22;
        while (v24)
        {
          v18 += 1024;
          v26 = *v23++;
          v25 = v26;
          LODWORD(v22) = v22 + 1;
          --v24;
          if (v26)
          {
            v17 = __rbit64(v25);
            *(_DWORD *)(v8 + 9992) = v22;
            *(_QWORD *)(v8 + 9984) = v18;
            goto LABEL_9;
          }
        }
        *(_DWORD *)(v8 + 9992) = v21;
      }
    }
    *v9 = 0;
  }
  casual = bmalloc_allocate_casual(152, 1);
LABEL_5:
  *(_QWORD *)casual = off_1E357F5F0;
  *(_DWORD *)(casual + 8) = -1;
  *(_WORD *)(casual + 12) = 88;
  *(_DWORD *)(casual + 16) = 0;
  *(_BYTE *)(casual + 20) = 4;
  *(_QWORD *)(casual + 24) = a3;
  *(_QWORD *)(casual + 32) = 0;
  v12 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)casual);
  *v12 = v12 + 2;
  v12[1] = 3;
  *(_OWORD *)(casual + 40) = 0u;
  *(_OWORD *)(casual + 56) = 0u;
  *(_OWORD *)(casual + 72) = 0u;
  *(_OWORD *)(casual + 88) = 0u;
  *(_QWORD *)(casual + 104) = 0;
  *(_QWORD *)casual = off_1E357D550;
  v28 = 0;
  v29 = 0;
  JSC::B3::StackmapValue::append((__int128 *)casual, a4, (unint64_t)&v28);
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)casual);
  v27 = casual;
  v13 = (char **)(a1 + 8);
  v14 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(a1 + 16))
  {
    v20 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v27);
    v14 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v14) = *(_QWORD *)v20;
    v15 = v27;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = casual;
    v15 = casual;
  }
  *(_DWORD *)(a1 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = a1;
  return casual;
}

BOOL operationSetWasmTableElement(JSC::Wasm *a1, JSC::Wasm::Instance *a2, unsigned int a3, uint64_t a4)
{
  return JSC::Wasm::tableSet(a1, a2, a3, a4);
}

uint64_t operationWasmRefFunc(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t result;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 88);
  if (!v2)
    return 2;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
  v6 = v3 & (v5 ^ HIWORD(v5));
  v7 = *(_DWORD *)(v2 + 16 * v6);
  if (v7 == a2)
  {
LABEL_6:
    v10 = *(_QWORD *)(v2 + 16 * v6 + 8);
    if (v10)
      return v10;
    else
      return 2;
  }
  else
  {
    v8 = 1;
    result = 2;
    while (v7 != -1)
    {
      v6 = ((_DWORD)v6 + v8) & v3;
      v7 = *(_DWORD *)(v2 + 16 * v6);
      ++v8;
      if (v7 == a2)
        goto LABEL_6;
    }
  }
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI64Eq@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v13 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v14 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v9, v10, 51, v11, v12, v13);
  result = JSC::Wasm::OMGIRGenerator::push(this, v14);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

BOOL operationWasmTableInit(uint64_t a1, unsigned int a2, unsigned int a3, int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;

  if (__CFADD__(a5, (_DWORD)a6) || __CFADD__(a4, (_DWORD)a6))
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  if (*(_DWORD *)(v8 + 204) <= a3)
    goto LABEL_18;
  if ((a6 + a4) > *(_DWORD *)(*(_QWORD *)(120 * *(unsigned int *)(a1 + 112) + 8 * a3 + a1 + 152) + 4))
    return 0;
  if (*(_DWORD *)(v8 + 188) <= a2)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x198D8938CLL);
  }
  v11 = a1 + 128;
  v12 = *(_QWORD *)(a1 + 128);
  if (v12 >= 0)
    v11 = 2 * v12 + 8;
  if (((*(_QWORD *)(v11 + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1) != 0
    && (v13 = *(_QWORD *)(v8 + 176)) != 0)
  {
    v14 = *(_DWORD *)(v13 + 80 * a2 + 60);
    v9 = a6 + a5 <= v14;
    if (v14)
      v15 = a6 + a5 > v14;
    else
      v15 = 1;
    if (!v15)
    {
      JSC::Wasm::Instance::tableInit((JSC::Wasm::Instance *)a1, a4, a5, a6, a2, a3, a7, a8);
      return 1;
    }
  }
  else
  {
    return (_DWORD)a6 + a5 == 0;
  }
  return v9;
}

_QWORD *JSC::Wasm::OMGIRGenerator::callWasmOperation<void (*)(JSC::Wasm::Instance *,unsigned int),JSC::B3::Value *,JSC::B3::Const32Value *>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  JSC::B3::Value *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *result;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v10 = (JSC::B3::Value *)a1[7];
  if (*a1)
    v11 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v11 = 0;
  v12 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v12 + 8) = -1;
  *(_WORD *)(v12 + 12) = 4;
  *(_DWORD *)(v12 + 16) = 2;
  *(_BYTE *)(v12 + 20) = 0;
  *(_QWORD *)(v12 + 24) = v11;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = a3;
  *(_QWORD *)v12 = off_1E357E2D0;
  JSC::B3::Procedure::addValueImpl(v10, (JSC::B3::Value *)v12);
  v25 = v12;
  v13 = (_QWORD *)(a2 + 8);
  v14 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(a2 + 16))
  {
    v24 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a2 + 8), v14 + 1, (unint64_t)&v25);
    v14 = *(unsigned int *)(a2 + 20);
    *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v14) = *(_QWORD *)v24;
    v15 = v25;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v14) = v12;
    v15 = v12;
  }
  *(_DWORD *)(a2 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = a2;
  if (*a1)
    v16 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v16 = 0;
  v17 = (JSC::B3::Value *)a1[7];
  v18 = *a4;
  v19 = *a5;
  v20 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v20 = off_1E357F5F0;
  *(_DWORD *)(v20 + 8) = -1;
  *(_WORD *)(v20 + 12) = 82;
  *(_DWORD *)(v20 + 16) = 0;
  *(_BYTE *)(v20 + 20) = 4;
  *(_QWORD *)(v20 + 24) = v16;
  *(_QWORD *)(v20 + 32) = 0;
  v21 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v20);
  v21[2] = v12;
  *v21 = v21 + 2;
  v21[3] = v18;
  v21[4] = v19;
  v21[1] = 0x300000003;
  *(_QWORD *)v20 = &unk_1E357CF78;
  *(_OWORD *)(v20 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v20 + 56) = 0xFFFFFFFF00000000;
  if (!*(_DWORD *)(v20 + 76))
  {
    __break(0xC471u);
    JUMPOUT(0x198D895D0);
  }
  result = JSC::B3::Procedure::addValueImpl(v17, (JSC::B3::Value *)v20);
  v25 = v20;
  v23 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v23 == *(_DWORD *)(a2 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a2 + 8), v23 + 1, (unint64_t)&v25);
    v23 = *(unsigned int *)(a2 + 20);
    *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v23) = *result;
    v20 = v25;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v23) = v20;
  }
  *(_DWORD *)(a2 + 20) = v23 + 1;
  *(_QWORD *)(v20 + 32) = a2;
  return result;
}

uint64_t operationWasmElemDrop(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 128);
  result = a1 + 128;
  v4 = 2 * v3 + 8;
  if (v3 >= 0)
    v5 = v4;
  else
    v5 = result;
  *(_QWORD *)(v5 + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) &= ~(1 << a2);
  return result;
}

uint64_t operationGetWasmTableSize(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 204) > a2)
    return *(unsigned int *)(*(_QWORD *)(120 * *(unsigned int *)(a1 + 112) + 8 * a2 + a1 + 152) + 4);
  result = 139;
  __break(0xC471u);
  return result;
}

uint64_t operationWasmTableGrow(uint64_t a1, JSC::Wasm::Instance *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 204) <= a2)
    goto LABEL_10;
  v11 = 8 * a2 + 152;
  v12 = *(_QWORD *)(a1 + v11 + 120 * *(unsigned int *)(a1 + 112));
  v13 = *(unsigned int *)(v12 + 4);
  if ((JSC::Wasm::Table::grow(v12, a4, 2, a4, a5, a6, a7, a8) & 0xFF00000000) == 0)
    return 0xFFFFFFFFLL;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 204) <= a2)
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x198D89754);
  }
  v14 = v13;
  while (v14 < *(_DWORD *)(*(_QWORD *)(a1 + v11 + 120 * *(unsigned int *)(a1 + 112)) + 4))
  {
    JSC::Wasm::tableSet((JSC::Wasm *)a1, a2, v14++, a3);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 204) <= a2)
      goto LABEL_10;
  }
  return v13;
}

uint64_t operationWasmTableFill(uint64_t a1, JSC::Wasm::Instance *a2, unsigned int a3, uint64_t a4, int a5)
{
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;

  if (__CFADD__(a3, a5))
    return 0;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 204) > a2)
  {
    v7 = a5;
    v8 = a3;
    if (a5 + a3 <= *(_DWORD *)(*(_QWORD *)(120 * *(unsigned int *)(a1 + 112) + 8 * a2 + a1 + 152)
                              + 4))
    {
      if (!a5)
        return 1;
      v9 = 1;
      do
      {
        JSC::Wasm::tableSet((JSC::Wasm *)a1, a2, v8++, a4);
        --v7;
      }
      while (v7);
      return v9;
    }
    return 0;
  }
  result = 139;
  __break(0xC471u);
  return result;
}

uint64_t operationWasmTableCopy(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  unsigned int v6;
  uint64_t v7;

  v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 204);
  if (v6 <= a2 || v6 <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x198D89940);
  }
  if (((a5 | a4 | a6) & 0x80000000) != 0)
    return 0;
  if (__CFADD__(a4, a6))
    return 0;
  v7 = 120 * *(unsigned int *)(a1 + 112);
  if (a4 + a6 > *(_DWORD *)(*(_QWORD *)(v7 + 8 * a2 + a1 + 152) + 4)
    || __CFADD__(a5, a6)
    || a5 + a6 > *(_DWORD *)(*(_QWORD *)(v7 + 8 * a3 + a1 + 152) + 4))
  {
    return 0;
  }
  JSC::Wasm::Instance::tableCopy(a1, a4, a5, a6, a2, a3);
  return 1;
}

char *JSC::Wasm::OMGIRGenerator::getLocal(char *this, uint64_t a2, JSC::B3::Variable **a3, WTF **a4)
{
  char *v6;
  unint64_t v7;
  uint64_t v8;
  JSC::B3::Value *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  WTF *PushVariable;
  uint64_t v17;
  JSC::B3::Value *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  v6 = this;
  if (*(_QWORD *)a2)
    v7 = *(_QWORD *)(*(_QWORD *)a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a2 + 14992) << 32);
  else
    v7 = 0;
  if (*(_DWORD *)(a2 + 188) <= a3)
  {
    __break(0xC471u);
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 88);
    v9 = *(JSC::B3::Value **)(a2 + 56);
    v10 = *(_QWORD *)(*(_QWORD *)(a2 + 176) + 8 * a3);
    v11 = WTF::fastMalloc((WTF *)0x30);
    v12 = *(_DWORD *)(v10 + 4);
    *(_DWORD *)(v11 + 8) = -1;
    *(_WORD *)(v11 + 12) = 10;
    *(_DWORD *)(v11 + 16) = v12;
    *(_BYTE *)(v11 + 20) = 0;
    *(_QWORD *)(v11 + 24) = v7;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)v11 = off_1E357F0F8;
    *(_QWORD *)(v11 + 40) = v10;
    JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
    v23 = v11;
    v13 = (char **)(v8 + 8);
    v14 = *(unsigned int *)(v8 + 20);
    if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
    {
      v22 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v23);
      v14 = *(unsigned int *)(v8 + 20);
      *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v22;
      v15 = v23;
    }
    else
    {
      *(_QWORD *)&(*v13)[8 * v14] = v11;
      v15 = v11;
    }
    *(_DWORD *)(v8 + 20) = v14 + 1;
    *(_QWORD *)(v15 + 32) = v8;
    PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable(a2, *(_DWORD *)(v11 + 16));
    v17 = *(_QWORD *)(a2 + 88);
    v18 = *(JSC::B3::Value **)(a2 + 56);
    if (*(_QWORD *)a2)
      v19 = *(_QWORD *)(*(_QWORD *)a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a2 + 14992) << 32);
    else
      v19 = 0;
    v20 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v20 + 8) = -1;
    *(_WORD *)(v20 + 12) = 9;
    *(_DWORD *)(v20 + 16) = 0;
    *(_BYTE *)(v20 + 20) = 1;
    *(_QWORD *)(v20 + 24) = v19;
    *(_QWORD *)(v20 + 32) = 0;
    *(_QWORD *)v20 = off_1E357F0F8;
    *(_QWORD *)(v20 + 40) = PushVariable;
    *(_QWORD *)(v20 + 48) = v11;
    JSC::B3::Procedure::addValueImpl(v18, (JSC::B3::Value *)v20);
    v23 = v20;
    this = (char *)(v17 + 8);
    v21 = *(unsigned int *)(v17 + 20);
    if ((_DWORD)v21 == *(_DWORD *)(v17 + 16))
    {
      this = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)this, v21 + 1, (unint64_t)&v23);
      v21 = *(unsigned int *)(v17 + 20);
      *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v21) = *(_QWORD *)this;
      v20 = v23;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)this + 8 * v21) = v20;
    }
    *(_DWORD *)(v17 + 20) = v21 + 1;
    *(_QWORD *)(v20 + 32) = v17;
    *a4 = PushVariable;
    *v6 = 0;
    v6[8] = 0;
  }
  return this;
}

uint64_t JSC::B3::BasicBlock::appendNew<JSC::B3::VariableValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Variable *>(JSC::B3::BasicBlock *a1, JSC::B3::Value *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Space;
  int v9;

  Space = JSC::B3::Value::allocateSpace(10, 48);
  v9 = *(_DWORD *)(a4 + 4);
  *(_DWORD *)(Space + 8) = -1;
  *(_WORD *)(Space + 12) = 10;
  *(_DWORD *)(Space + 16) = v9;
  *(_BYTE *)(Space + 20) = 0;
  *(_QWORD *)(Space + 24) = a3;
  *(_QWORD *)(Space + 32) = 0;
  *(_QWORD *)Space = off_1E357F0F8;
  *(_QWORD *)(Space + 40) = a4;
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)Space);
  JSC::B3::BasicBlock::append(a1, (JSC::B3::Value *)Space);
  return Space;
}

unsigned int *JSC::Wasm::OMGIRGenerator::addUnreachable(JSC::Wasm::OMGIRGenerator *this, _QWORD *a2)
{
  uint64_t v4;
  JSC::B3::Value *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *result;
  _QWORD *v9;

  v4 = a2[11];
  v5 = (JSC::B3::Value *)a2[7];
  if (*a2)
    v6 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
  else
    v6 = 0;
  v7 = JSC::B3::BasicBlock::appendNew<JSC::B3::PatchpointValue,JSC::B3::TypeKind,JSC::B3::Origin>(v4, v5, 0, v6);
  v9 = a2;
  result = JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addUnreachable(void)::$_0>(v7, (uint64_t *)&v9);
  *(_BYTE *)(v7 + 112) = 1;
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 8) = 0;
  return result;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addUnreachable(void)::$_0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = *a2;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E35B6080;
  *(_QWORD *)(v4 + 16) = v5;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void JSC::Wasm::OMGIRGenerator::emitIndirectCall(_BYTE *a1, JSC::B3::Procedure **a2, uint64_t a3, uint64_t a4, uint64_t a5, WTF *a6, unsigned __int8 **a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  JSC::Wasm *appended;
  uint64_t *v34;
  uint64_t v35;
  unsigned __int8 **v36;
  unsigned __int8 **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  JSC::B3::StackmapValue *v47;
  int v48;
  int v49;
  int v50;
  unsigned int *v51;
  unsigned int v52;
  int v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  JSC::B3::StackmapValue *v65;
  WTF *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  JSC::B3::Procedure *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 **v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  JSC::B3::StackmapValue *v109;
  int v110;
  int v111;
  int v112;
  int v113;
  unsigned int *v114;
  unsigned int *v115;
  unsigned int v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  JSC::B3::Procedure *v133;
  _DWORD *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  JSC::B3::Value *v138;
  WTF *v139;
  uint64_t v140;
  _DWORD *v141;
  JSC::B3::Procedure *v142;
  uint64_t v143;
  JSC::B3::Procedure *v144;
  uint64_t v145;
  WTF *v148;
  int v149;
  _BYTE v150[96];
  _BYTE v151[96];
  JSC::B3::StackmapValue *v152;
  unsigned int *v153;
  unsigned int *v154;
  void *v155;
  unsigned int *v156;
  unsigned int *v157;
  int v158;
  uint64_t *v159;
  char v160;
  uint64_t *v161;
  char v162;
  uint64_t v163;
  __int128 v164;
  char v165;
  uint64_t *v166;

  v166 = (uint64_t *)*MEMORY[0x1E0C80C00];
  v16 = JSC::B3::Procedure::addBlock(v166, a2[7], 1.0);
  v18 = JSC::B3::Procedure::addBlock(v17, a2[7], 1.0);
  if (*a2)
    v19 = *((_QWORD *)*a2 + 1875) | ((unint64_t)*((unsigned __int8 *)*a2 + 14992) << 32);
  else
    v19 = 0;
  v20 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t)a2[11], (uint64_t)a2[7], 51, v19, a3, (uint64_t)a2[59]);
  v22 = (uint64_t)a2[11];
  v23 = (uint64_t)a2[7];
  if (*a2)
    v24 = *((_QWORD *)*a2 + 1875) | ((unint64_t)*((unsigned __int8 *)*a2 + 14992) << 32);
  else
    v24 = 0;
  v161 = v16;
  v162 = 0;
  v159 = v18;
  v160 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v22, v23, 155, v24, v20, (uint64_t *)&v161, (uint64_t *)&v159, v21);
  if (*a2)
    v25 = *((_QWORD *)*a2 + 1875) | ((unint64_t)*((unsigned __int8 *)*a2 + 14992) << 32);
  else
    v25 = 0;
  v26 = JSC::B3::BasicBlock::appendNew<JSC::B3::PatchpointValue,JSC::B3::TypeKind,JSC::B3::Origin>((uint64_t)v18, a2[7], 0, v25);
  *(_BYTE *)(v26 + 118) = 1;
  v27 = *(_QWORD *)(v26 + 80);
  *(_QWORD *)(v26 + 64) |= 0xCB0000uLL;
  *(_QWORD *)(v26 + 80) = v27 | 0xCB0000;
  v161 = 0;
  v162 = 3;
  JSC::B3::StackmapValue::append((__int128 *)v26, a3, (unint64_t)&v161);
  *(_BYTE *)(v26 + 168) = 1;
  JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::emitIndirectCall(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_0>(v26);
  v31 = (uint64_t)a2[7];
  if (*a2)
    v32 = *((_QWORD *)*a2 + 1875) | ((unint64_t)*((unsigned __int8 *)*a2 + 14992) << 32);
  else
    v32 = 0;
  v161 = v16;
  v162 = 0;
  appended = (JSC::Wasm *)JSC::B3::BasicBlock::appendNewControlValue((uint64_t)v18, v31, 154, v32, (uint64_t *)&v161, v28, v29, v30);
  a2[11] = (JSC::B3::Procedure *)v16;
  v34 = JSC::Wasm::wasmCallingConvention(appended);
  v35 = (uint64_t)v34;
  if (*((_DWORD *)a7 + 8))
    v36 = 0;
  else
    v36 = a7 + 1;
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)v34, v36, 0, (char *)&v161);
  if (*((_DWORD *)a7 + 8))
    v37 = 0;
  else
    v37 = a7 + 1;
  JSC::Wasm::WasmCallingConvention::callInformationFor(v35, v37, 1, (char *)&v159);
  if ((unint64_t)(v163 + 15) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198D8A3C0);
  }
  v44 = *((_QWORD *)a2[7] + 20);
  v45 = (v163 + 15) & 0xFFFFFFF0;
  if (*(_DWORD *)(v44 + 188) > v45)
    v45 = *(_DWORD *)(v44 + 188);
  *(_DWORD *)(v44 + 188) = v45;
  if (a10 != 5)
  {
    *((_BYTE *)a2 + 456) = 1;
    v46 = JSC::Wasm::OMGIRGenerator::toB3ResultType((JSC::Wasm::OMGIRGenerator *)a2, (const JSC::Wasm::TypeDefinition *)a7, v38, v39, v40, v41, v42, v43);
    JSC::Wasm::OMGIRGenerator::createCallPatchpoint((uint64_t *)&v152, (uint64_t)a2, (uint64_t)a2[11], a6, v46, (uint64_t)&v161, a8);
    v47 = v152;
    *((_QWORD *)v152 + 10) |= 0xC80000uLL;
    v48 = *((_DWORD *)v47 + 13);
    v155 = 0;
    LOBYTE(v156) = 3;
    JSC::B3::StackmapValue::append((__int128 *)v47, a4, (unint64_t)&v155);
    v155 = 0;
    LOBYTE(v156) = 3;
    JSC::B3::StackmapValue::append((__int128 *)v47, a5, (unint64_t)&v155);
    v49 = *((_DWORD *)v47 + 4);
    if (v49 < 0)
    {
      v142 = a2[7];
      v143 = v49 & 0x7FFFFFFF;
      if (v143 >= *((_DWORD *)v142 + 11))
      {
        __break(0xC471u);
        JUMPOUT(0x198D8A3D8);
      }
      v50 = *(_DWORD *)(*((_QWORD *)v142 + 4) + 16 * v143 + 12);
    }
    else
    {
      v50 = (v49 - 1) < 5;
    }
    v155 = a2;
    v51 = v153;
    if (v153)
    {
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 + 1, v51));
    }
    v53 = v50 + v48;
    v156 = v51;
    v54 = v154;
    if (v154)
    {
      v55 = v154 + 2;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 + 1, v55));
    }
    v157 = v54;
    v158 = v53;
    JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::emitIndirectCall(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_2>((uint64_t)v47, (uint64_t)&v155);
    std::tuple<JSC::B3::PatchpointValue *,WTF::Box<JSC::Wasm::PatchpointExceptionHandle>,WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>>>::~tuple((uint64_t)&v155, v57, v58, v59, v60, v61, v62, v63);
    if (v46 >= 0x80000000)
      v64 = 0x80000000;
    else
      v64 = v46;
    if (!v64)
      goto LABEL_33;
    v65 = v152;
    if (v64 != 0x80000000)
    {
      v66 = JSC::Wasm::OMGIRGenerator::push((JSC::Wasm::OMGIRGenerator *)a2, v152);
      v155 = v66;
      v67 = *(unsigned int *)(a9 + 12);
      if ((_DWORD)v67 == *(_DWORD *)(a9 + 8))
      {
        WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ICStatusContext *>(a9, (unint64_t)&v155);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a9 + 8 * v67) = v66;
        *(_DWORD *)(a9 + 12) = v67 + 1;
      }
LABEL_33:
      JSC::Wasm::OMGIRGenerator::restoreWebAssemblyGlobalState((uint64_t)a2, (uint64_t)a2[2] + 104, (uint64_t)a2[59], (uint64_t)a2[11]);
      *a1 = 0;
      a1[8] = 0;
      std::tuple<JSC::B3::PatchpointValue *,WTF::Box<JSC::Wasm::PatchpointExceptionHandle>,WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>>>::~tuple((uint64_t)&v152, v68, v69, v70, v71, v72, v73, v74);
      goto LABEL_34;
    }
    v133 = a2[7];
    if ((v46 & 0x7FFFFFFF) >= (unint64_t)*((unsigned int *)v133 + 11))
    {
      __break(0xC471u);
      JUMPOUT(0x198D8A3D0);
    }
    if (*((_DWORD *)a7 + 8))
      v134 = 0;
    else
      v134 = a7 + 1;
    if (!v134[3])
      goto LABEL_33;
    v135 = 0;
    v136 = *((_QWORD *)v133 + 4) + 16 * (v46 & 0x7FFFFFFF);
    while (1)
    {
      v137 = *a2 ? *((_QWORD *)*a2 + 1875) | ((unint64_t)*((unsigned __int8 *)*a2 + 14992) << 32) : 0;
      if (v135 >= *(unsigned int *)(v136 + 12))
        break;
      v138 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::ExtractValue,JSC::B3::Origin,JSC::B3::Type,JSC::B3::PatchpointValue *,unsigned int>((uint64_t)a2[11], a2[7], v137, *(_DWORD *)(*(_QWORD *)v136 + 4 * v135), (uint64_t)v65, v135);
      v139 = JSC::Wasm::OMGIRGenerator::push((JSC::Wasm::OMGIRGenerator *)a2, v138);
      v155 = v139;
      v140 = *(unsigned int *)(a9 + 12);
      if ((_DWORD)v140 == *(_DWORD *)(a9 + 8))
      {
        WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ICStatusContext *>(a9, (unint64_t)&v155);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a9 + 8 * v140) = v139;
        *(_DWORD *)(a9 + 12) = v140 + 1;
      }
      ++v135;
      if (*((_DWORD *)a7 + 8))
        v141 = 0;
      else
        v141 = a7 + 1;
      if (v135 >= v141[3])
        goto LABEL_33;
    }
    __break(0xC471u);
LABEL_85:
    JUMPOUT(0x198D8A3B8);
  }
  *((_BYTE *)a2 + 457) = 1;
  v89 = a2[2];
  v90 = *((unsigned int *)a2 + 9);
  if (*((_DWORD *)v89 + 13) <= v90)
  {
    __break(0xC471u);
    JUMPOUT(0x198D8A3C8);
  }
  v91 = *(_QWORD *)(*((_QWORD *)v89 + 5) + 8 * v90);
  if (*(_DWORD *)(v91 + 32))
    v92 = 0;
  else
    v92 = (unsigned __int8 **)(v91 + 8);
  JSC::Wasm::WasmCallingConvention::callInformationFor(v35, v92, 1, (char *)&v155);
  v93 = (uint64_t)a2[11];
  JSC::Wasm::CallInformation::CallInformation((JSC::Wasm::CallInformation *)v151, (const JSC::Wasm::CallInformation *)&v155);
  JSC::Wasm::CallInformation::CallInformation((JSC::Wasm::CallInformation *)v150, (const JSC::Wasm::CallInformation *)&v159);
  *(_QWORD *)&v164 = a4;
  *((_QWORD *)&v164 + 1) = 9;
  v165 = 7;
  WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v148, &v164, 1uLL);
  JSC::Wasm::OMGIRGenerator::createTailCallPatchpoint((uint64_t *)&v152, (JSC::Wasm::OMGIRGenerator *)a2, v93, (uint64_t)v151, (uint64_t)v150, a8, (uint64_t)&v148);
  v101 = v148;
  if (v148)
  {
    v148 = 0;
    v149 = 0;
    WTF::fastFree((unint64_t)v101, v94, v95, v96, v97, v98, v99, v100);
  }
  JSC::Wasm::CallInformation::~CallInformation((JSC::Wasm::CallInformation *)v150, v94, v95, v96, v97, v98, v99, v100);
  JSC::Wasm::CallInformation::~CallInformation((JSC::Wasm::CallInformation *)v151, v102, v103, v104, v105, v106, v107, v108);
  v109 = v152;
  v110 = *((_DWORD *)v152 + 13);
  *(_QWORD *)&v164 = 8;
  BYTE8(v164) = 7;
  JSC::B3::StackmapValue::append((__int128 *)v152, a4, (unint64_t)&v164);
  v111 = *((_DWORD *)v109 + 4);
  if (v111 < 0)
  {
    v144 = a2[7];
    v145 = v111 & 0x7FFFFFFF;
    if (v145 >= *((_DWORD *)v144 + 11))
    {
      __break(0xC471u);
      goto LABEL_85;
    }
    v112 = *(_DWORD *)(*((_QWORD *)v144 + 4) + 16 * v145 + 12);
  }
  else
  {
    v112 = (v111 - 1) < 5;
  }
  v113 = v112 + v110;
  v114 = v154;
  if (v154)
  {
    v115 = v154 + 2;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 + 1, v115));
    *(_QWORD *)&v164 = v114;
    DWORD2(v164) = v113;
    JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::emitIndirectCall(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_1>((uint64_t)v109, (uint64_t *)&v164);
    *(_QWORD *)&v164 = 0;
    do
    {
      v124 = __ldaxr(v115);
      v125 = v124 - 1;
    }
    while (__stlxr(v125, v115));
    if (!v125)
    {
      atomic_store(1u, v114 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v114 + 8))(v114);
    }
  }
  else
  {
    *(_QWORD *)&v164 = 0;
    DWORD2(v164) = v113;
    JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::emitIndirectCall(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_1>((uint64_t)v109, (uint64_t *)&v164);
  }
  *a1 = 0;
  a1[8] = 0;
  std::tuple<JSC::B3::PatchpointValue *,WTF::Box<JSC::Wasm::PatchpointExceptionHandle>,WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>>>::~tuple((uint64_t)&v152, v117, v118, v119, v120, v121, v122, v123);
  JSC::Wasm::CallInformation::~CallInformation((JSC::Wasm::CallInformation *)&v155, v126, v127, v128, v129, v130, v131, v132);
LABEL_34:
  JSC::Wasm::CallInformation::~CallInformation((JSC::Wasm::CallInformation *)&v159, v75, v76, v77, v78, v79, v80, v81);
  JSC::Wasm::CallInformation::~CallInformation((JSC::Wasm::CallInformation *)&v161, v82, v83, v84, v85, v86, v87, v88);
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::emitIndirectCall(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_0>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E35B60A8;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v2;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void JSC::Wasm::OMGIRGenerator::createTailCallPatchpoint(uint64_t *a1, JSC::Wasm::OMGIRGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v7;
  unint64_t v9;
  int v13;
  int v14;
  JSC::B3::Value *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  JSC::B3::Value *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  JSC::B3::Value *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  JSC::B3::Value *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  char v48;
  int v49;
  uint64_t *v50;
  __int128 v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  JSC::B3::Value *v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  WTF *v83;
  uint64_t v84;
  __int128 *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  WTF *v89;
  __int128 *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  int v94;
  WTF *v95;
  uint64_t v96;
  __int128 *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  WTF *v101;
  __int128 *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  WTF *v116;
  uint64_t v117;
  _BYTE *v118;
  __int128 v119;
  unsigned int v120;
  __int128 v121;
  uint64_t v122;
  WTF *v123;
  WTF *v124;
  uint64_t v125;
  _BYTE *v126;
  __int128 v127;
  unsigned int v128;
  WTF *v129;
  WTF *v130;
  WTF *v131;
  unint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  int v139;
  uint64_t v140;
  int v142;
  char **v145;
  _BYTE v146[25];
  WTF *v147;
  uint64_t v148;
  WTF *v149;
  unsigned int v150;
  unsigned int v151;
  _BYTE v152[24];
  uint64_t v153;
  _OWORD v154[2];
  WTF *v155;
  uint64_t v156;
  WTF *v157;
  unsigned int v158;
  unsigned int v159;
  _BYTE v160[24];
  uint64_t v161;
  int v162;
  uint64_t *v163;
  uint64_t v164;
  _QWORD v165[2];
  int v166;

  v7 = *(_QWORD *)(a4 + 88) + 15;
  if (v7 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198D8B0ACLL);
  }
  v9 = *(_QWORD *)(a5 + 88) + 15;
  if (v9 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198D8B0B4);
  }
  v13 = (v7 & 0xFFFFFFF0) - (v9 & 0xFFFFFFF0);
  v14 = *((_DWORD *)this + 115);
  if (v13 < v14)
    v14 = v13;
  *((_DWORD *)this + 115) = v14;
  v165[0] = this;
  v165[1] = a3;
  v142 = v13;
  v166 = v13;
  v15 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v16 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v16 = 0;
  v17 = JSC::Wasm::OMGIRGenerator::framePointer(this);
  v18 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(v18 + 8) = -1;
  *(_WORD *)(v18 + 12) = 67;
  *(_DWORD *)(v18 + 16) = 2;
  *(_BYTE *)(v18 + 20) = 1;
  *(_QWORD *)(v18 + 24) = v16;
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v18 + 64) = v17;
  *(_QWORD *)v18 = off_1E357E4C8;
  *(_DWORD *)(v18 + 40) = 8;
  *(_OWORD *)(v18 + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(v15, (JSC::B3::Value *)v18);
  *(_QWORD *)v146 = v18;
  v19 = (_QWORD *)(a3 + 8);
  v20 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v20 == *(_DWORD *)(a3 + 16))
  {
    v133 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 8), v20 + 1, (unint64_t)v146);
    v20 = *(unsigned int *)(a3 + 20);
    *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8 * v20) = *(_QWORD *)v133;
    v21 = *(_QWORD *)v146;
  }
  else
  {
    *(_QWORD *)(*v19 + 8 * v20) = v18;
    v21 = v18;
  }
  *(_DWORD *)(a3 + 20) = v20 + 1;
  *(_QWORD *)(v21 + 32) = a3;
  JSC::Wasm::OMGIRGenerator::createTailCallPatchpoint(JSC::B3::BasicBlock *,JSC::Wasm::CallInformation,JSC::Wasm::CallInformation,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::$_0::operator()((char *)v165, v18, -8);
  v22 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v23 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v23 = 0;
  v24 = JSC::Wasm::OMGIRGenerator::framePointer(this);
  v25 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(v25 + 8) = -1;
  *(_WORD *)(v25 + 12) = 67;
  *(_DWORD *)(v25 + 16) = 2;
  *(_BYTE *)(v25 + 20) = 1;
  *(_QWORD *)(v25 + 24) = v23;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 64) = v24;
  v26 = v25;
  *(_QWORD *)v25 = off_1E357E4C8;
  *(_DWORD *)(v25 + 40) = 0;
  *(_OWORD *)(v25 + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(v22, (JSC::B3::Value *)v25);
  *(_QWORD *)v146 = v26;
  v27 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(a3 + 16))
  {
    v134 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a3 + 8), v27 + 1, (unint64_t)v146);
    v27 = *(unsigned int *)(a3 + 20);
    *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8 * v27) = *(_QWORD *)v134;
    v28 = *(_QWORD *)v146;
  }
  else
  {
    *(_QWORD *)(*v19 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(a3 + 20) = v27 + 1;
  *(_QWORD *)(v28 + 32) = a3;
  v163 = 0;
  v164 = 0;
  v145 = (char **)(a3 + 8);
  if (!*(_DWORD *)(a6 + 12))
  {
    v58 = 0;
    *(_QWORD *)v146 = v26;
    *(_QWORD *)&v146[8] = 29;
    v146[16] = 7;
    goto LABEL_54;
  }
  v140 = v26;
  v29 = 0;
  v30 = 0;
  do
  {
    v31 = *(_QWORD *)(*(_QWORD *)a6 + 8 * v30);
    v32 = *(_DWORD *)(v31 + 4);
    if (v32 >= 0x80000000)
      v32 = 0x80000000;
    if (v32 == 5)
      goto LABEL_129;
    if (v30 >= *(unsigned int *)(a5 + 44))
    {
      __break(0xC471u);
      JUMPOUT(0x198D8B094);
    }
    if (*(_BYTE *)(*(_QWORD *)(a5 + 32) + v29 + 8) != 3)
    {
      if (*(_QWORD *)this)
        v39 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
      else
        v39 = 0;
      v40 = (JSC::B3::Value *)*((_QWORD *)this + 7);
      v41 = WTF::fastMalloc((WTF *)0x30);
      v42 = *(_DWORD *)(v31 + 4);
      *(_DWORD *)(v41 + 8) = -1;
      *(_WORD *)(v41 + 12) = 10;
      *(_DWORD *)(v41 + 16) = v42;
      *(_BYTE *)(v41 + 20) = 0;
      *(_QWORD *)(v41 + 24) = v39;
      *(_QWORD *)(v41 + 32) = 0;
      *(_QWORD *)v41 = off_1E357F0F8;
      *(_QWORD *)(v41 + 40) = v31;
      JSC::B3::Procedure::addValueImpl(v40, (JSC::B3::Value *)v41);
      *(_QWORD *)v146 = v41;
      v43 = *(unsigned int *)(a3 + 20);
      if ((_DWORD)v43 == *(_DWORD *)(a3 + 16))
      {
        v53 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v145, v43 + 1, (unint64_t)v146);
        v43 = *(unsigned int *)(a3 + 20);
        *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8 * v43) = *(_QWORD *)v53;
        v44 = *(_QWORD *)v146;
      }
      else
      {
        *(_QWORD *)&(*v145)[8 * v43] = v41;
        v44 = v41;
      }
      *(_DWORD *)(a3 + 20) = v43 + 1;
      *(_QWORD *)(v44 + 32) = a3;
      if (v30 >= *(unsigned int *)(a5 + 44))
      {
        __break(0xC471u);
        JUMPOUT(0x198D8B0A4);
      }
      v45 = (uint64_t *)(*(_QWORD *)(a5 + 32) + v29);
      *(_OWORD *)v146 = (unint64_t)v41;
      v46 = *v45;
      v47 = *((unsigned __int8 *)v45 + 8);
      if (v47 == 2)
      {
        v48 = 9;
LABEL_33:
        v146[16] = v48;
        *(_QWORD *)&v146[8] = v46;
LABEL_34:
        v49 = HIDWORD(v164);
        if (HIDWORD(v164) == (_DWORD)v164)
        {
          v54 = WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v163, HIDWORD(v164) + 1, (unint64_t)v146);
          v49 = HIDWORD(v164);
          v55 = &v163[3 * HIDWORD(v164)];
          v56 = *(_QWORD *)(v54 + 16);
          *(_OWORD *)v55 = *(_OWORD *)v54;
          v55[2] = v56;
        }
        else
        {
          v50 = &v163[3 * HIDWORD(v164)];
          v51 = *(_OWORD *)v146;
          v50[2] = *(_QWORD *)&v146[16];
          *(_OWORD *)v50 = v51;
        }
        HIDWORD(v164) = v49 + 1;
        goto LABEL_37;
      }
      if (v47)
      {
        if (v47 == 3)
        {
          v48 = 10;
          goto LABEL_33;
        }
        if (v47 != 1)
          goto LABEL_34;
        v146[16] = 7;
        v57 = (v46 + 32) & 0x7F;
      }
      else
      {
        v146[16] = 7;
        v57 = v46 & 0x7F;
      }
      v146[8] = v57;
      goto LABEL_34;
    }
    if (*(_QWORD *)this)
      v33 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
    else
      v33 = 0;
    v34 = (JSC::B3::Value *)*((_QWORD *)this + 7);
    v35 = WTF::fastMalloc((WTF *)0x30);
    v36 = *(_DWORD *)(v31 + 4);
    *(_DWORD *)(v35 + 8) = -1;
    *(_WORD *)(v35 + 12) = 10;
    *(_DWORD *)(v35 + 16) = v36;
    *(_BYTE *)(v35 + 20) = 0;
    *(_QWORD *)(v35 + 24) = v33;
    *(_QWORD *)(v35 + 32) = 0;
    *(_QWORD *)v35 = off_1E357F0F8;
    *(_QWORD *)(v35 + 40) = v31;
    JSC::B3::Procedure::addValueImpl(v34, (JSC::B3::Value *)v35);
    *(_QWORD *)v146 = v35;
    v37 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v37 == *(_DWORD *)(a3 + 16))
    {
      v52 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v145, v37 + 1, (unint64_t)v146);
      v37 = *(unsigned int *)(a3 + 20);
      *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8 * v37) = *(_QWORD *)v52;
      v38 = *(_QWORD *)v146;
    }
    else
    {
      *(_QWORD *)&(*v145)[8 * v37] = v35;
      v38 = v35;
    }
    *(_DWORD *)(a3 + 20) = v37 + 1;
    *(_QWORD *)(v38 + 32) = a3;
    if (v30 >= *(unsigned int *)(a5 + 44))
    {
      __break(0xC471u);
      JUMPOUT(0x198D8B09CLL);
    }
    JSC::Wasm::OMGIRGenerator::createTailCallPatchpoint(JSC::B3::BasicBlock *,JSC::Wasm::CallInformation,JSC::Wasm::CallInformation,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::$_0::operator()((char *)v165, v35, *(_DWORD *)(*(_QWORD *)(a5 + 32) + v29));
LABEL_37:
    ++v30;
    v29 += 24;
  }
  while (v30 < *(unsigned int *)(a6 + 12));
  v58 = HIDWORD(v164);
  *(_QWORD *)v146 = v140;
  *(_QWORD *)&v146[8] = 29;
  v146[16] = 7;
  if (HIDWORD(v164) != (_DWORD)v164)
  {
    v59 = &v163[3 * HIDWORD(v164)];
    v60 = *(_OWORD *)v146;
    v59[2] = *(_QWORD *)&v146[16];
    *(_OWORD *)v59 = v60;
    goto LABEL_55;
  }
LABEL_54:
  v61 = WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v163, v58 + 1, (unint64_t)v146);
  LODWORD(v58) = HIDWORD(v164);
  v62 = &v163[3 * HIDWORD(v164)];
  v63 = *(_QWORD *)(v61 + 16);
  *(_OWORD *)v62 = *(_OWORD *)v61;
  v62[2] = v63;
LABEL_55:
  HIDWORD(v164) = v58 + 1;
  v64 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v65 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v65 = 0;
  v66 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v66 = off_1E357F5F0;
  *(_DWORD *)(v66 + 8) = -1;
  *(_WORD *)(v66 + 12) = 83;
  *(_DWORD *)(v66 + 16) = 0;
  *(_BYTE *)(v66 + 20) = 4;
  *(_QWORD *)(v66 + 24) = v65;
  *(_QWORD *)(v66 + 32) = 0;
  v67 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v66);
  *v67 = v67 + 2;
  v67[1] = 3;
  *(_OWORD *)(v66 + 40) = 0u;
  *(_OWORD *)(v66 + 56) = 0u;
  *(_OWORD *)(v66 + 72) = 0u;
  *(_OWORD *)(v66 + 88) = 0u;
  *(_QWORD *)(v66 + 104) = 0;
  *(_QWORD *)v66 = off_1E357E700;
  *(_OWORD *)(v66 + 112) = xmmword_1991243D0;
  *(_QWORD *)(v66 + 152) = 0;
  *(_QWORD *)(v66 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v66 + 136) = v66 + 152;
  *(_WORD *)(v66 + 168) = 0;
  *(_BYTE *)(v66 + 160) = 0;
  *(_QWORD *)(v66 + 144) = 0x100000001;
  JSC::B3::Procedure::addValueImpl(v64, (JSC::B3::Value *)v66);
  *(_BYTE *)(v66 + 112) = 1;
  *(_WORD *)(v66 + 117) = 257;
  v68 = *(_QWORD *)(v66 + 64);
  *(_QWORD *)(v66 + 80) |= 0xFF001FF80000uLL;
  *(_QWORD *)(v66 + 64) = v68 | 0xFF001FFB0000;
  v69 = *(_DWORD *)(a7 + 12);
  if (v69)
  {
    v70 = *(uint64_t **)a7;
    v71 = *(_QWORD *)a7 + 24 * v69;
    do
    {
      v72 = (unint64_t)(v70 + 1);
      v73 = *v70;
      v70 += 3;
      JSC::B3::StackmapValue::append((__int128 *)v66, v73, v72);
    }
    while (v70 != (uint64_t *)v71);
  }
  v74 = a4;
  if (HIDWORD(v164))
  {
    v75 = v163;
    v76 = &v163[3 * HIDWORD(v164)];
    do
    {
      v77 = (unint64_t)(v75 + 1);
      v78 = *v75;
      v75 += 3;
      JSC::B3::StackmapValue::append((__int128 *)v66, v78, v77);
    }
    while (v75 != v76);
  }
  *(_QWORD *)v146 = v66;
  v79 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v79 == *(_DWORD *)(a3 + 16))
  {
    v135 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v145, v79 + 1, (unint64_t)v146);
    v79 = *(unsigned int *)(a3 + 20);
    *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8 * v79) = *(_QWORD *)v135;
    v80 = *(_QWORD *)v146;
  }
  else
  {
    *(_QWORD *)&(*v145)[8 * v79] = v66;
    v80 = v66;
  }
  *(_DWORD *)(a3 + 20) = v79 + 1;
  *(_QWORD *)(v80 + 32) = a3;
  *(_OWORD *)v146 = *(_OWORD *)a5;
  *(_OWORD *)&v146[9] = *(_OWORD *)(a5 + 9);
  v81 = *(unsigned int *)(a5 + 44);
  v147 = 0;
  LODWORD(v148) = 0;
  HIDWORD(v148) = v81;
  if ((_DWORD)v81)
  {
    if (v81 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x198D8B0BCLL);
    }
    v82 = 24 * v81;
    v83 = (WTF *)WTF::fastMalloc((WTF *)(24 * v81));
    LODWORD(v148) = (v82 & 0xFFFFFFF8) / 0x18;
    v147 = v83;
    v84 = *(unsigned int *)(a5 + 44);
    if ((_DWORD)v84)
    {
      v85 = *(__int128 **)(a5 + 32);
      v86 = 24 * v84;
      do
      {
        v87 = *v85;
        *((_QWORD *)v83 + 2) = *((_QWORD *)v85 + 2);
        *(_OWORD *)v83 = v87;
        v83 = (WTF *)((char *)v83 + 24);
        v85 = (__int128 *)((char *)v85 + 24);
        v86 -= 24;
      }
      while (v86);
    }
  }
  v88 = *(unsigned int *)(a5 + 60);
  v149 = (WTF *)v152;
  v150 = 1;
  v151 = v88;
  if (v88 >= 2)
  {
    if (v88 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x198D8B0CCLL);
    }
    v138 = 24 * v88;
    v89 = (WTF *)WTF::fastMalloc((WTF *)(24 * v88));
    v150 = (v138 & 0xFFFFFFF8) / 0x18;
    v149 = v89;
    v88 = *(unsigned int *)(a5 + 60);
    v74 = a4;
    if ((_DWORD)v88)
    {
LABEL_72:
      v90 = *(__int128 **)(a5 + 48);
      v91 = 24 * v88;
      do
      {
        v92 = *v90;
        *((_QWORD *)v89 + 2) = *((_QWORD *)v90 + 2);
        *(_OWORD *)v89 = v92;
        v89 = (WTF *)((char *)v89 + 24);
        v90 = (__int128 *)((char *)v90 + 24);
        v91 -= 24;
      }
      while (v91);
    }
  }
  else
  {
    v89 = (WTF *)v152;
    if ((_DWORD)v88)
      goto LABEL_72;
  }
  v153 = *(_QWORD *)(a5 + 88);
  v154[0] = *(_OWORD *)v74;
  *(_OWORD *)((char *)v154 + 9) = *(_OWORD *)(v74 + 9);
  v93 = *(unsigned int *)(v74 + 44);
  v155 = 0;
  LODWORD(v156) = 0;
  HIDWORD(v156) = v93;
  if ((_DWORD)v93)
  {
    if (v93 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x198D8B0C4);
    }
    v94 = 24 * v93;
    v95 = (WTF *)WTF::fastMalloc((WTF *)(24 * v93));
    LODWORD(v156) = (v94 & 0xFFFFFFF8) / 0x18;
    v155 = v95;
    v96 = *(unsigned int *)(v74 + 44);
    if ((_DWORD)v96)
    {
      v97 = *(__int128 **)(v74 + 32);
      v98 = 24 * v96;
      do
      {
        v99 = *v97;
        *((_QWORD *)v95 + 2) = *((_QWORD *)v97 + 2);
        *(_OWORD *)v95 = v99;
        v95 = (WTF *)((char *)v95 + 24);
        v97 = (__int128 *)((char *)v97 + 24);
        v98 -= 24;
      }
      while (v98);
    }
  }
  v100 = *(unsigned int *)(v74 + 60);
  v157 = (WTF *)v160;
  v158 = 1;
  v159 = v100;
  if (v100 >= 2)
  {
    if (v100 >= 0xAAAAAAB)
    {
LABEL_129:
      __break(0xC471u);
      JUMPOUT(0x198D8AF90);
    }
    v139 = 24 * v100;
    v101 = (WTF *)WTF::fastMalloc((WTF *)(24 * v100));
    v158 = (v139 & 0xFFFFFFF8) / 0x18;
    v157 = v101;
    v74 = a4;
    v100 = *(unsigned int *)(a4 + 60);
    if ((_DWORD)v100)
    {
LABEL_81:
      v102 = *(__int128 **)(v74 + 48);
      v103 = 24 * v100;
      do
      {
        v104 = *v102;
        *((_QWORD *)v101 + 2) = *((_QWORD *)v102 + 2);
        *(_OWORD *)v101 = v104;
        v101 = (WTF *)((char *)v101 + 24);
        v102 = (__int128 *)((char *)v102 + 24);
        v103 -= 24;
      }
      while (v103);
    }
  }
  else
  {
    v101 = (WTF *)v160;
    if ((_DWORD)v100)
      goto LABEL_81;
  }
  v161 = *(_QWORD *)(v74 + 88);
  v162 = v142;
  v105 = WTF::fastMalloc((WTF *)0xD8);
  v113 = v105;
  *(_DWORD *)(v105 + 8) = 1;
  *(_QWORD *)v105 = &off_1E35B6738;
  v114 = *(_OWORD *)&v146[9];
  *(_OWORD *)(v105 + 16) = *(_OWORD *)v146;
  *(_OWORD *)(v105 + 25) = v114;
  *(_QWORD *)(v105 + 48) = v147;
  *(_QWORD *)&v114 = v148;
  v147 = 0;
  v148 = 0;
  *(_QWORD *)(v105 + 56) = v114;
  v115 = v105 + 80;
  *(_QWORD *)(v105 + 64) = v105 + 80;
  *(_QWORD *)(v105 + 72) = 1;
  v116 = v149;
  if (v149 == (WTF *)v152)
  {
    if (v151)
    {
      v117 = 24 * v151;
      v118 = v152;
      do
      {
        v119 = *(_OWORD *)v118;
        *(_QWORD *)(v115 + 16) = *((_QWORD *)v118 + 2);
        *(_OWORD *)v115 = v119;
        v115 += 24;
        v118 += 24;
        v117 -= 24;
      }
      while (v117);
    }
  }
  else
  {
    v149 = (WTF *)v152;
    *(_QWORD *)(v105 + 64) = v116;
    v136 = v150;
    v150 = 1;
    *(_DWORD *)(v105 + 72) = v136;
  }
  v120 = v151;
  v151 = 0;
  *(_DWORD *)(v105 + 76) = v120;
  *(_QWORD *)(v105 + 104) = v153;
  v121 = *(_OWORD *)((char *)v154 + 9);
  *(_OWORD *)(v105 + 112) = v154[0];
  *(_OWORD *)(v105 + 121) = v121;
  *(_QWORD *)(v105 + 144) = v155;
  *(_QWORD *)&v121 = v156;
  v155 = 0;
  v156 = 0;
  *(_QWORD *)(v105 + 152) = v121;
  v122 = v105 + 176;
  *(_QWORD *)(v105 + 160) = v105 + 176;
  *(_QWORD *)(v105 + 168) = 1;
  v123 = v157;
  if (v157 == (WTF *)v160)
  {
    if (!v159)
      goto LABEL_89;
    v125 = 24 * v159;
    v126 = v160;
    do
    {
      v127 = *(_OWORD *)v126;
      *(_QWORD *)(v122 + 16) = *((_QWORD *)v126 + 2);
      *(_OWORD *)v122 = v127;
      v122 += 24;
      v126 += 24;
      v125 -= 24;
    }
    while (v125);
    v124 = v157;
  }
  else
  {
    v157 = (WTF *)v160;
    *(_QWORD *)(v105 + 160) = v123;
    v137 = v158;
    v158 = 1;
    *(_DWORD *)(v105 + 168) = v137;
LABEL_89:
    v124 = (WTF *)v160;
  }
  v128 = v159;
  v159 = 0;
  *(_DWORD *)(v113 + 172) = v128;
  *(_QWORD *)(v113 + 200) = v161;
  *(_DWORD *)(v113 + 208) = v162;
  if (v160 != (_BYTE *)v124 && v124)
  {
    v157 = 0;
    v158 = 0;
    WTF::fastFree((unint64_t)v124, v106, v107, v108, v109, v110, v111, v112);
  }
  v129 = v155;
  if (v155)
  {
    v155 = 0;
    LODWORD(v156) = 0;
    WTF::fastFree((unint64_t)v129, v106, v107, v108, v109, v110, v111, v112);
  }
  v130 = v149;
  if (v152 != (_BYTE *)v149 && v149)
  {
    v149 = 0;
    v150 = 0;
    WTF::fastFree((unint64_t)v130, v106, v107, v108, v109, v110, v111, v112);
  }
  v131 = v147;
  if (v147)
  {
    v147 = 0;
    LODWORD(v148) = 0;
    WTF::fastFree((unint64_t)v131, v106, v107, v108, v109, v110, v111, v112);
  }
  *a1 = v66;
  a1[1] = 0;
  a1[2] = v113;
  v132 = (unint64_t)v163;
  if (v163)
  {
    v163 = 0;
    LODWORD(v164) = 0;
    WTF::fastFree(v132, v106, v107, v108, v109, v110, v111, v112);
  }
}

JSC::Wasm::CallInformation *JSC::Wasm::CallInformation::CallInformation(JSC::Wasm::CallInformation *this, const JSC::Wasm::CallInformation *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;

  v4 = *(_OWORD *)a2;
  *(_OWORD *)((char *)this + 9) = *(_OWORD *)((char *)a2 + 9);
  *(_OWORD *)this = v4;
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    v6 = *((unsigned int *)a2 + 11);
    if ((_DWORD)v6)
    {
      v7 = (__int128 *)*((_QWORD *)a2 + 4);
      v8 = 24 * v6;
      do
      {
        v9 = *v7;
        *(_QWORD *)(v5 + 16) = *((_QWORD *)v7 + 2);
        *(_OWORD *)v5 = v9;
        v5 += 24;
        v7 = (__int128 *)((char *)v7 + 24);
        v8 -= 24;
      }
      while (v8);
    }
  }
  WTF::VectorBuffer<JSC::Wasm::ArgumentLocation,1ul,WTF::FastMalloc>::VectorBuffer((uint64_t)this + 48, *((unsigned int *)a2 + 15), *((_DWORD *)a2 + 15));
  v10 = *((_QWORD *)this + 6);
  if (v10)
  {
    v11 = *((unsigned int *)a2 + 15);
    if ((_DWORD)v11)
    {
      v12 = (__int128 *)*((_QWORD *)a2 + 6);
      v13 = 24 * v11;
      do
      {
        v14 = *v12;
        *(_QWORD *)(v10 + 16) = *((_QWORD *)v12 + 2);
        *(_OWORD *)v10 = v14;
        v10 += 24;
        v12 = (__int128 *)((char *)v12 + 24);
        v13 -= 24;
      }
      while (v13);
    }
  }
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  return this;
}

uint64_t *WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, __int128 *a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v9;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  if (a3 < 0xAAAAAAB)
  {
    v5 = 24 * a3;
    v6 = WTF::fastMalloc((WTF *)(24 * a3));
    *((_DWORD *)v3 + 2) = (v5 & 0xFFFFFFF8) / 0x18;
    *v3 = v6;
    v7 = *((_DWORD *)v3 + 3);
    do
    {
      v8 = *v3 + 24 * v7;
      v9 = *a2;
      *(_QWORD *)(v8 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v8 = v9;
      v7 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v7;
      a2 = (__int128 *)((char *)a2 + 24);
      v5 -= 24;
    }
    while (v5);
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::emitIndirectCall(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_1>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E35B60D0;
  v5 = *a2;
  if (*a2)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(result + 16) = v5;
  *(_DWORD *)(result + 24) = *((_DWORD *)a2 + 2);
  v8 = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = result;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  return result;
}

uint64_t std::tuple<JSC::B3::PatchpointValue *,WTF::Box<JSC::Wasm::PatchpointExceptionHandle>,WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>>>::~tuple(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void JSC::Wasm::OMGIRGenerator::createCallPatchpoint(uint64_t *a1, uint64_t a2, uint64_t a3, WTF *a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  unint64_t v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  int v18;
  int v19;
  WTF *v20;
  char *v21;
  __int128 v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  WTF *v40;
  WTF *v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  char **v53;
  uint64_t v54;
  WTF *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  WTF *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  char v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  WTF *v68;
  WTF *v69;
  WTF *v71;
  int v72;
  char v73;
  uint64_t v74;
  char *v75;
  char v76;
  __int128 v78;
  WTF *v79[2];
  _QWORD v80[2];
  WTF *v81;
  uint64_t v82;

  v81 = 0;
  v82 = 0;
  if (*(_DWORD *)(a7 + 12))
  {
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v15 = (WTF *)JSC::Wasm::OMGIRGenerator::get(*(JSC::Wasm::OMGIRGenerator **)a2, *(JSC::B3::BasicBlock **)(a2 + 56), (JSC::B3::Variable *)a3, *(_QWORD *)(*(_QWORD *)a7 + 8 * v14));
      if (v14 >= *(unsigned int *)(a6 + 44))
      {
        __break(0xC471u);
        return;
      }
      v16 = *(_QWORD *)(a6 + 32) + v13;
      v79[0] = v15;
      v17 = *(WTF **)v16;
      v18 = *(unsigned __int8 *)(v16 + 8);
      v79[1] = 0;
      switch(v18)
      {
        case 2:
          LOBYTE(v80[0]) = 9;
          break;
        case 0:
          LOBYTE(v80[0]) = 7;
          v27 = v17 & 0x7F;
LABEL_14:
          LOBYTE(v79[1]) = v27;
          goto LABEL_7;
        case 3:
          LOBYTE(v80[0]) = 10;
          break;
        case 1:
          LOBYTE(v80[0]) = 7;
          v27 = ((_BYTE)v17 + 32) & 0x7F;
          goto LABEL_14;
        default:
          goto LABEL_7;
      }
      v79[1] = v17;
LABEL_7:
      v19 = HIDWORD(v82);
      if (HIDWORD(v82) == (_DWORD)v82)
      {
        v24 = WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v81, HIDWORD(v82) + 1, (unint64_t)v79);
        v19 = HIDWORD(v82);
        v20 = v81;
        v25 = (char *)v81 + 24 * HIDWORD(v82);
        v26 = *(_QWORD *)(v24 + 16);
        *(_OWORD *)v25 = *(_OWORD *)v24;
        *((_QWORD *)v25 + 2) = v26;
      }
      else
      {
        v20 = v81;
        v21 = (char *)v81 + 24 * HIDWORD(v82);
        v22 = *(_OWORD *)v79;
        *((_QWORD *)v21 + 2) = v80[0];
        *(_OWORD *)v21 = v22;
      }
      v23 = v19 + 1;
      HIDWORD(v82) = v23;
      ++v14;
      v13 += 24;
      if (v14 >= *(unsigned int *)(a7 + 12))
        goto LABEL_16;
    }
  }
  v20 = 0;
  v23 = 0;
LABEL_16:
  if (a4)
  {
    v71 = *(WTF **)(a6 + 8);
    v72 = *(unsigned __int8 *)(a6 + 16);
    v79[0] = a4;
    v79[1] = 0;
    if (v72 == 2)
    {
      v73 = 9;
LABEL_73:
      LOBYTE(v80[0]) = v73;
      v79[1] = v71;
      goto LABEL_74;
    }
    if (v72)
    {
      if (v72 == 3)
      {
        v73 = 10;
        goto LABEL_73;
      }
      if (v72 != 1)
      {
LABEL_74:
        if (v23 == (_DWORD)v82)
        {
          WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::ConstrainedValue>((uint64_t)&v81, (unint64_t)v79);
        }
        else
        {
          v74 = v80[0];
          v75 = (char *)v20 + 24 * v23;
          *(_OWORD *)v75 = *(_OWORD *)v79;
          *((_QWORD *)v75 + 2) = v74;
          HIDWORD(v82) = v23 + 1;
        }
        goto LABEL_17;
      }
      LOBYTE(v80[0]) = 7;
      v76 = ((_BYTE)v71 + 32) & 0x7F;
    }
    else
    {
      LOBYTE(v80[0]) = 7;
      v76 = v71 & 0x7F;
    }
    LOBYTE(v79[1]) = v76;
    goto LABEL_74;
  }
LABEL_17:
  v28 = a2;
  if (*(_QWORD *)(a2 + 112))
  {
    v28 = a2;
    do
      v28 = *(_QWORD *)(v28 + 104);
    while (*(_QWORD *)(v28 + 112));
  }
  v29 = *(_DWORD *)(v28 + 508);
  v30 = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)v30 = 1;
  *(_WORD *)(v30 + 4) = *(_WORD *)(a2 + 464);
  *(_DWORD *)(v30 + 8) = v29;
  *(_BYTE *)(v30 + 12) = 0;
  *(_BYTE *)(v30 + 16) = 0;
  v31 = *(JSC::B3::Value **)(a2 + 56);
  if (*(_QWORD *)a2)
    v32 = *(_QWORD *)(*(_QWORD *)a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a2 + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v33 = off_1E357F5F0;
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 83;
  *(_DWORD *)(v33 + 16) = a5;
  *(_BYTE *)(v33 + 20) = 4;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  v34 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v33);
  *v34 = v34 + 2;
  v34[1] = 3;
  *(_OWORD *)(v33 + 40) = 0u;
  *(_OWORD *)(v33 + 56) = 0u;
  *(_OWORD *)(v33 + 72) = 0u;
  *(_OWORD *)(v33 + 88) = 0u;
  *(_QWORD *)(v33 + 104) = 0;
  *(_QWORD *)v33 = off_1E357E700;
  *(_OWORD *)(v33 + 112) = xmmword_1991243D0;
  v35 = v33 + 152;
  *(_QWORD *)(v33 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v33 + 136) = v33 + 152;
  *(_QWORD *)(v33 + 144) = 1;
  *(_WORD *)(v33 + 168) = 0;
  if ((a5 & 0x80000000) == 0)
  {
    if (a5)
      v36 = 3;
    else
      v36 = 0;
    *(_QWORD *)(v33 + 152) = 0;
    *(_BYTE *)(v33 + 160) = v36;
    *(_DWORD *)(v33 + 148) = 1;
  }
  v37 = a5;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  *(_WORD *)(v33 + 117) = 257;
  *(_QWORD *)(v33 + 64) |= 0x30000uLL;
  if (HIBYTE(dword_1ECF4C7B0) && (HIBYTE(word_1ECF4C79E) || *(_BYTE *)(*(_QWORD *)(a2 + 56) + 212)))
    v38 = 0xFFFFFFFF00000000;
  else
    v38 = 0;
  v39 = *(_QWORD *)(v33 + 88);
  *(_QWORD *)(v33 + 80) |= 0xFFFF00FF0003FFFFLL;
  *(_QWORD *)(v33 + 88) = v39 | v38;
  if (HIDWORD(v82))
  {
    v40 = v81;
    v41 = (WTF *)((char *)v81 + 24 * HIDWORD(v82));
    do
    {
      v42 = (unint64_t)v40 + 8;
      v43 = *(_QWORD *)v40;
      v40 = (WTF *)((char *)v40 + 24);
      JSC::B3::StackmapValue::append((__int128 *)v33, v43, v42);
    }
    while (v40 != v41);
  }
  *(_QWORD *)(v30 + 4) = JSC::Wasm::OMGIRGenerator::preparePatchpointForExceptions((_QWORD *)a2, (char **)a3, (JSC::B3::PatchpointValue *)v33);
  *(_QWORD *)(v30 + 12) = v44;
  if (!v37)
    goto LABEL_38;
  v79[0] = (WTF *)v80;
  v79[1] = (WTF *)1;
  v51 = *(_DWORD *)(a6 + 60);
  if (v51)
  {
    v60 = *(uint64_t **)(a6 + 48);
    v61 = &v60[3 * v51];
    do
    {
      v62 = *v60;
      v63 = *((unsigned __int8 *)v60 + 8);
      *(_QWORD *)&v78 = 0;
      switch(v63)
      {
        case 2:
          BYTE8(v78) = 9;
          break;
        case 0:
          BYTE8(v78) = 7;
          v64 = v62 & 0x7F;
LABEL_62:
          LOBYTE(v78) = v64;
          goto LABEL_56;
        case 3:
          BYTE8(v78) = 10;
          break;
        case 1:
          BYTE8(v78) = 7;
          v64 = (v62 + 32) & 0x7F;
          goto LABEL_62;
        default:
          goto LABEL_56;
      }
      *(_QWORD *)&v78 = v62;
LABEL_56:
      if (HIDWORD(v79[1]) == LODWORD(v79[1]))
      {
        WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::ValueRep>((uint64_t)v79, (unint64_t)&v78, v45, v46, v47, v48, v49, v50);
      }
      else
      {
        *((_OWORD *)v79[0] + HIDWORD(v79[1])) = v78;
        ++HIDWORD(v79[1]);
      }
      v60 += 3;
    }
    while (v60 != v61);
  }
  v52 = *(_QWORD *)(v33 + 136);
  if (v52 != v35)
  {
    if (v52)
    {
      *(_QWORD *)(v33 + 136) = 0;
      *(_DWORD *)(v33 + 144) = 0;
      WTF::fastFree(v52, v44, v45, v46, v47, v48, v49, v50);
    }
    *(_QWORD *)(v33 + 136) = v35;
  }
  if ((_QWORD *)v79[0] == v80)
  {
    if (HIDWORD(v79[1]))
    {
      v66 = 0;
      v67 = 16 * HIDWORD(v79[1]);
      do
      {
        *(_OWORD *)(v35 + v66) = *(_OWORD *)&v79[v66 / 8 + 2];
        v66 += 16;
      }
      while (v67 != v66);
      v68 = v79[0];
      v69 = v79[1];
      HIDWORD(v79[1]) = 0;
      *(_QWORD *)(v33 + 144) = v69;
      if (v80 != (_QWORD *)v68 && v68 != 0)
      {
        v79[0] = 0;
        LODWORD(v79[1]) = 0;
        WTF::fastFree((unint64_t)v68, v44, v45, v46, v47, v48, v49, v50);
      }
    }
    else
    {
      *(_QWORD *)(v33 + 144) = LODWORD(v79[1]);
    }
  }
  else
  {
    *(WTF **)(v33 + 136) = v79[0];
    *(WTF **)(v33 + 144) = v79[1];
  }
LABEL_38:
  v79[0] = (WTF *)v33;
  v53 = (char **)(a3 + 8);
  v54 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v54 == *(_DWORD *)(a3 + 16))
  {
    v65 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53, v54 + 1, (unint64_t)v79);
    v54 = *(unsigned int *)(a3 + 20);
    *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8 * v54) = *(_QWORD *)v65;
    v55 = v79[0];
  }
  else
  {
    *(_QWORD *)&(*v53)[8 * v54] = v33;
    v55 = (WTF *)v33;
  }
  *(_DWORD *)(a3 + 20) = v54 + 1;
  *((_QWORD *)v55 + 4) = a3;
  *a1 = v33;
  do
    v56 = __ldaxr((unsigned int *)v30);
  while (__stlxr(v56 + 1, (unsigned int *)v30));
  a1[1] = v30;
  a1[2] = 0;
  do
  {
    v57 = __ldaxr((unsigned int *)v30);
    v58 = v57 - 1;
  }
  while (__stlxr(v58, (unsigned int *)v30));
  if (!v58)
  {
    atomic_store(1u, (unsigned int *)v30);
    WTF::fastFree(v30, v44, v45, v46, v47, v48, v49, v50);
  }
  v59 = v81;
  if (v81)
  {
    v81 = 0;
    LODWORD(v82) = 0;
    WTF::fastFree((unint64_t)v59, v44, v45, v46, v47, v48, v49, v50);
  }
}

uint64_t JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::emitIndirectCall(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_2>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  result = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E35B60F8;
  *(_QWORD *)(result + 16) = *(_QWORD *)a2;
  v5 = *(unsigned int **)(a2 + 8);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  *(_QWORD *)(result + 24) = v5;
  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *(_QWORD *)(result + 32) = v7;
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 24);
  v10 = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = result;
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v10 + 2);
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  return result;
}

uint64_t JSC::B3::BasicBlock::appendNew<JSC::B3::ExtractValue,JSC::B3::Origin,JSC::B3::Type,JSC::B3::PatchpointValue *,unsigned int>(uint64_t a1, JSC::B3::Value *a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  char *v17;
  uint64_t v18;

  v12 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v12 + 8) = -1;
  *(_WORD *)(v12 + 12) = 84;
  *(_DWORD *)(v12 + 16) = a4;
  *(_BYTE *)(v12 + 20) = 1;
  *(_QWORD *)(v12 + 24) = a3;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 48) = a5;
  *(_QWORD *)v12 = &unk_1E357E128;
  *(_DWORD *)(v12 + 40) = a6;
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)v12);
  v18 = v12;
  v13 = (char **)(a1 + 8);
  v14 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(a1 + 16))
  {
    v17 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v18);
    v14 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v14) = *(_QWORD *)v17;
    v15 = v18;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = v12;
    v15 = v12;
  }
  *(_DWORD *)(a1 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = a1;
  return v12;
}

uint64_t operationGrowMemory(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  unsigned int v11;
  int v12;
  uint64_t vars0;

  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v9 + 40) = vars0;
  if ((a2 & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  JSC::Wasm::Memory::grow(*(_QWORD *)(a1 + 64), v9, a2, a4, a5, a6, a7, a8, (uint64_t)&v11);
  if (!v12)
    return v11;
  if (v12 == 1)
  {
    if (v11 < 5u)
      return 0xFFFFFFFFLL;
  }
  else
  {
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  result = 687;
  __break(0xC471u);
  return result;
}

JSC::B3::Value *JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Value *,int>(JSC::B3::BasicBlock *a1, JSC::B3::Value *a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  JSC::B3::Value *v9;
  JSC::B3::Value *v10;

  JSC::B3::Value::allocate<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Value*,int>(a3, a4, a5, a6, a7);
  v10 = v9;
  JSC::B3::Procedure::addValueImpl(a2, v9);
  JSC::B3::BasicBlock::append(a1, v10);
  return v10;
}

JSC::B3::Value *JSC::Wasm::OMGIRGenerator::callWasmOperation<unsigned long long (*)(JSC::Wasm::Instance *,unsigned int,unsigned int,unsigned int),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  JSC::B3::Value *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  unint64_t v21;
  JSC::B3::Value *v22;
  uint64_t v23;
  JSC::B3::Value *v24;
  char *v26;
  char *v27;
  uint64_t v28;

  v14 = (JSC::B3::Value *)a1[7];
  if (*a1)
    v15 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v15 = 0;
  v16 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 4;
  *(_DWORD *)(v16 + 16) = 2;
  *(_BYTE *)(v16 + 20) = 0;
  *(_QWORD *)(v16 + 24) = v15;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = a3;
  *(_QWORD *)v16 = off_1E357E2D0;
  JSC::B3::Procedure::addValueImpl(v14, (JSC::B3::Value *)v16);
  v28 = v16;
  v17 = (_QWORD *)(a2 + 8);
  v18 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v18 == *(_DWORD *)(a2 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a2 + 8), v18 + 1, (unint64_t)&v28);
    v18 = *(unsigned int *)(a2 + 20);
    *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v18) = *(_QWORD *)v26;
    v19 = v28;
  }
  else
  {
    *(_QWORD *)(*v17 + 8 * v18) = v16;
    v19 = v16;
  }
  *(_DWORD *)(a2 + 20) = v18 + 1;
  *(_QWORD *)(v19 + 32) = a2;
  v20 = (JSC::B3::Value *)a1[7];
  if (*a1)
    v21 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v21 = 0;
  v22 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(1, v21, v16, *a4, *a5, *a6, *a7);
  JSC::B3::Procedure::addValueImpl(v20, v22);
  v28 = (uint64_t)v22;
  v23 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v23 == *(_DWORD *)(a2 + 16))
  {
    v27 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a2 + 8), v23 + 1, (unint64_t)&v28);
    v23 = *(unsigned int *)(a2 + 20);
    *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v23) = *(_QWORD *)v27;
    v24 = (JSC::B3::Value *)v28;
  }
  else
  {
    *(_QWORD *)(*v17 + 8 * v23) = v22;
    v24 = v22;
  }
  *(_DWORD *)(a2 + 20) = v23 + 1;
  *((_QWORD *)v24 + 4) = a2;
  return v22;
}

uint64_t operationWasmMemoryFill(uint64_t a1, unsigned int a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (__CFADD__(a2, a4))
    return 0;
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(v8 + 8);
  if (*(_BYTE *)(v9 + 5))
    v10 = atomic_load((unint64_t *)(v9 + 16));
  else
    v10 = *(_QWORD *)(v9 + 16);
  if (v10 < a4 + a2)
    return 0;
  v11 = JSC::BufferMemoryHandle::memory(*(JSC::BufferMemoryHandle **)(v8 + 8));
  memset((void *)(v11 + a2), a3, a4);
  return 1;
}

BOOL operationWasmMemoryInit(JSC::Wasm::Instance *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  return JSC::Wasm::Instance::memoryInit(a1, a3, a4, a5, a2);
}

uint64_t operationWasmMemoryCopy(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (__CFADD__(a2, a4))
    return 0;
  if (__CFADD__(a3, a4))
    return 0;
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(_BYTE *)(v9 + 5) ? atomic_load((unint64_t *)(v9 + 16)) : *(_QWORD *)(v9 + 16);
  if (v10 < a4 + a2)
    return 0;
  v11 = *(_QWORD *)(v8 + 8);
  v12 = *(_BYTE *)(v11 + 5) ? atomic_load((unint64_t *)(v11 + 16)) : *(_QWORD *)(v11 + 16);
  if (v12 < a4 + a3)
    return 0;
  if (a4)
  {
    v13 = JSC::BufferMemoryHandle::memory(*(JSC::BufferMemoryHandle **)(v8 + 8));
    memmove((void *)(v13 + a2), (const void *)(v13 + a3), a4);
  }
  return 1;
}

uint64_t operationWasmDataDrop(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 136);
  result = a1 + 136;
  v4 = 2 * v3 + 8;
  if (v3 >= 0)
    v5 = v4;
  else
    v5 = result;
  *(_QWORD *)(v5 + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) &= ~(1 << a2);
  return result;
}

_QWORD *JSC::Wasm::OMGIRGenerator::setLocal(_QWORD *this, _QWORD *a2, JSC::B3::Variable *a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  v5 = this;
  v6 = a2[11];
  v7 = (JSC::B3::Value *)a2[7];
  v8 = *((_DWORD *)a2 + 47);
  if (!*a2)
  {
    if (v8 > a3)
    {
      v9 = 0;
      goto LABEL_4;
    }
LABEL_13:
    __break(0xC471u);
    return this;
  }
  if (v8 <= a3)
    goto LABEL_13;
  v9 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
LABEL_4:
  v10 = *(_QWORD *)(a2[22] + 8 * a3);
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *(_DWORD *)(a4 + 4);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v9;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a4;
  JSC::B3::Procedure::addValueImpl(v7, (JSC::B3::Value *)v11);
  v19 = v11;
  v13 = (_QWORD *)(v6 + 8);
  v14 = *(unsigned int *)(v6 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v6 + 16))
  {
    v18 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v6 + 8), v14 + 1, (unint64_t)&v19);
    v14 = *(unsigned int *)(v6 + 20);
    *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v14) = *(_QWORD *)v18;
    v15 = v19;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v14) = v11;
    v15 = v11;
  }
  *(_DWORD *)(v6 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v6;
  v16 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 9;
  *(_DWORD *)(v16 + 16) = 0;
  *(_BYTE *)(v16 + 20) = 1;
  *(_QWORD *)(v16 + 24) = v9;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)v16 = off_1E357F0F8;
  *(_QWORD *)(v16 + 40) = v10;
  *(_QWORD *)(v16 + 48) = v11;
  this = JSC::B3::Procedure::addValueImpl(v7, (JSC::B3::Value *)v16);
  v19 = v16;
  v17 = *(unsigned int *)(v6 + 20);
  if ((_DWORD)v17 == *(_DWORD *)(v6 + 16))
  {
    this = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v6 + 8), v17 + 1, (unint64_t)&v19);
    v17 = *(unsigned int *)(v6 + 20);
    *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v17) = *this;
    v16 = v19;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v17) = v16;
  }
  *(_DWORD *)(v6 + 20) = v17 + 1;
  *(_QWORD *)(v16 + 32) = v6;
  *v5 = 0;
  v5[8] = 0;
  return this;
}

uint64_t JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,int>(JSC::B3::BasicBlock *a1, JSC::B3::Value *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t Space;

  Space = JSC::B3::Value::allocateSpace(67, 64);
  *(_DWORD *)(Space + 8) = -1;
  *(_WORD *)(Space + 12) = 67;
  *(_DWORD *)(Space + 16) = 2;
  *(_BYTE *)(Space + 20) = 1;
  *(_QWORD *)(Space + 24) = a3;
  *(_QWORD *)(Space + 32) = 0;
  *(_QWORD *)(Space + 64) = a4;
  *(_QWORD *)Space = off_1E357E4C8;
  *(_DWORD *)(Space + 40) = a5;
  *(_OWORD *)(Space + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)Space);
  JSC::B3::BasicBlock::append(a1, (JSC::B3::Value *)Space);
  return Space;
}

char *JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, JSC::B3::Value *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t casual;
  char *result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v10)
  {
    v11 = (_BYTE *)(v10 + 9040);
    *(_BYTE *)(v10 + 9040) = 1;
    v12 = *(unsigned int *)(v10 + 9056);
    if ((_DWORD)v12)
    {
      *(_DWORD *)(v10 + 9056) = v12 - *(_DWORD *)(v10 + 9060);
      casual = *(_QWORD *)(v10 + 9048) - v12;
LABEL_4:
      *v11 = 0;
      goto LABEL_5;
    }
    v16 = *(_QWORD *)(v10 + 9080);
    v17 = *(_QWORD *)(v10 + 9064);
    if (v16)
    {
LABEL_9:
      v18 = __clz(v16);
      *(_QWORD *)(v10 + 9080) = v16 & ~(0x8000000000000000 >> v18);
      casual = v17 + 16 * v18;
      goto LABEL_4;
    }
    if (*(_BYTE *)(v10 + 9045) == 6)
    {
      v19 = *(_DWORD *)(v10 + 9076);
      v20 = *(unsigned int *)(v10 + 9072);
      if (v20 < v19)
      {
        *(_QWORD *)&v11[8 * v20 + 56] = 0;
        v21 = (unint64_t *)(v10 + 8 * v20 + 9104);
        v22 = v19 - 1 - v20;
        while (v22)
        {
          v17 += 1024;
          v24 = *v21++;
          v23 = v24;
          LODWORD(v20) = v20 + 1;
          --v22;
          if (v24)
          {
            v16 = __rbit64(v23);
            *(_DWORD *)(v10 + 9072) = v20;
            *(_QWORD *)(v10 + 9064) = v17;
            goto LABEL_9;
          }
        }
        *(_DWORD *)(v10 + 9072) = v19;
      }
    }
    *v11 = 0;
  }
  casual = bmalloc_allocate_casual(80, 1);
LABEL_5:
  *(_QWORD *)casual = off_1E357F5F0;
  *(_DWORD *)(casual + 8) = -1;
  *(_WORD *)(casual + 12) = 70;
  *(_DWORD *)(casual + 16) = 0;
  *(_BYTE *)(casual + 20) = 2;
  *(_QWORD *)(casual + 24) = a3;
  *(_QWORD *)(casual + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)casual, 2, a4, a5);
  *(_QWORD *)casual = off_1E357E4C8;
  *(_DWORD *)(casual + 40) = 0;
  *(_OWORD *)(casual + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)casual);
  v25 = casual;
  result = (char *)(a1 + 8);
  v15 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v15 == *(_DWORD *)(a1 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v15 + 1, (unint64_t)&v25);
    v15 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = *(_QWORD *)result;
    casual = v25;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v15) = casual;
  }
  *(_DWORD *)(a1 + 20) = v15 + 1;
  *(_QWORD *)(casual + 32) = a1;
  return result;
}

_QWORD *JSC::Wasm::OMGIRGenerator::callWasmOperation<void (*)(JSC::JSCell *,JSC::VM *),JSC::B3::Value *&,JSC::B3::Value *&>(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  JSC::B3::Value *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  JSC::B3::Value *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *result;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  v8 = (JSC::B3::Value *)a1[7];
  if (*a1)
    v9 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v9 = 0;
  v10 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v10 + 8) = -1;
  *(_WORD *)(v10 + 12) = 4;
  *(_DWORD *)(v10 + 16) = 2;
  *(_BYTE *)(v10 + 20) = 0;
  *(_QWORD *)(v10 + 24) = v9;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = operationWasmWriteBarrierSlowPath;
  *(_QWORD *)v10 = off_1E357E2D0;
  JSC::B3::Procedure::addValueImpl(v8, (JSC::B3::Value *)v10);
  v23 = v10;
  v11 = (_QWORD *)(a2 + 8);
  v12 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v12 == *(_DWORD *)(a2 + 16))
  {
    v22 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a2 + 8), v12 + 1, (unint64_t)&v23);
    v12 = *(unsigned int *)(a2 + 20);
    *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v12) = *(_QWORD *)v22;
    v13 = v23;
  }
  else
  {
    *(_QWORD *)(*v11 + 8 * v12) = v10;
    v13 = v10;
  }
  *(_DWORD *)(a2 + 20) = v12 + 1;
  *(_QWORD *)(v13 + 32) = a2;
  if (*a1)
    v14 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v14 = 0;
  v15 = (JSC::B3::Value *)a1[7];
  v16 = *a3;
  v17 = *a4;
  v18 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v18 = off_1E357F5F0;
  *(_DWORD *)(v18 + 8) = -1;
  *(_WORD *)(v18 + 12) = 82;
  *(_DWORD *)(v18 + 16) = 0;
  *(_BYTE *)(v18 + 20) = 4;
  *(_QWORD *)(v18 + 24) = v14;
  *(_QWORD *)(v18 + 32) = 0;
  v19 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v18);
  v19[2] = v10;
  *v19 = v19 + 2;
  v19[3] = v16;
  v19[4] = v17;
  v19[1] = 0x300000003;
  *(_QWORD *)v18 = &unk_1E357CF78;
  *(_OWORD *)(v18 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v18 + 56) = 0xFFFFFFFF00000000;
  if (!*(_DWORD *)(v18 + 76))
  {
    __break(0xC471u);
    JUMPOUT(0x198D8C670);
  }
  result = JSC::B3::Procedure::addValueImpl(v15, (JSC::B3::Value *)v18);
  v23 = v18;
  v21 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v21 == *(_DWORD *)(a2 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a2 + 8), v21 + 1, (unint64_t)&v23);
    v21 = *(unsigned int *)(a2 + 20);
    *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v21) = *result;
    v18 = v23;
  }
  else
  {
    *(_QWORD *)(*v11 + 8 * v21) = v18;
  }
  *(_DWORD *)(a2 + 20) = v21 + 1;
  *(_QWORD *)(v18 + 32) = a2;
  return result;
}

uint64_t operationWasmWriteBarrierSlowPath(JSC::JSCell *a1, uint64_t a2)
{
  return JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)a1);
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::load(JSC::Wasm::LoadOpType,JSC::B3::Variable *,JSC::B3::Variable *&,unsigned int)::$_0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = *a2;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E35B61C0;
  *(_QWORD *)(v4 + 16) = v5;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t JSC::Wasm::OMGIRGenerator::emitCheckAndPreparePointer(JSC::Wasm::OMGIRGenerator *this, JSC::B3::Value *a2, unsigned int a3, int a4)
{
  uint64_t v6;
  JSC::B3::Value *v7;
  unint64_t v8;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (*((_BYTE *)this + 32) == 1)
  {
    if (a3 >= (unint64_t)dword_1ECF4C6F4 << 16)
    {
      v25 = *(unsigned int *)(*((_QWORD *)this + 2) + 108);
      if ((_DWORD)v25 == -1)
        v26 = 0xFFFFFFFFLL;
      else
        v26 = v25 << 16;
      v27 = *((_QWORD *)this + 11);
      v28 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v28 = *(_QWORD *)(v28 + 15000) | ((unint64_t)*(unsigned __int8 *)(v28 + 14992) << 32);
      JSC::B3::BasicBlock::appendNew<JSC::B3::WasmBoundsCheckValue,JSC::B3::Origin,JSC::B3::Value *,unsigned int,unsigned long>(v27, *((JSC::B3::Value **)this + 7), v28, (uint64_t)a2, a3 + a4 - 1, v26);
    }
  }
  else if (!*((_BYTE *)this + 32))
  {
    v23 = *((_QWORD *)this + 11);
    v24 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v24 = *(_QWORD *)(v24 + 15000) | ((unint64_t)*(unsigned __int8 *)(v24 + 14992) << 32);
    JSC::B3::BasicBlock::appendNew<JSC::B3::WasmBoundsCheckValue,JSC::B3::Origin,JSC::ARM64Registers::RegisterID,JSC::B3::Value *,unsigned int>(v23, *((JSC::B3::Value **)this + 7), v24, (uint64_t)a2, a3 + a4 - 1);
  }
  v6 = *((_QWORD *)this + 11);
  v7 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v8 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v8 = 0;
  v9 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v9 = off_1E357F5F0;
  *(_DWORD *)(v9 + 8) = -1;
  *(_WORD *)(v9 + 12) = 43;
  *(_DWORD *)(v9 + 16) = 2;
  *(_BYTE *)(v9 + 20) = 1;
  *(_QWORD *)(v9 + 24) = v8;
  *(_QWORD *)(v9 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v9, 1, (uint64_t)a2);
  JSC::B3::Procedure::addValueImpl(v7, (JSC::B3::Value *)v9);
  v29 = v9;
  v10 = (char **)(v6 + 8);
  v11 = *(unsigned int *)(v6 + 20);
  if ((_DWORD)v11 == *(_DWORD *)(v6 + 16))
  {
    v21 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v29);
    v11 = *(unsigned int *)(v6 + 20);
    *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v11) = *(_QWORD *)v21;
    v12 = v29;
  }
  else
  {
    *(_QWORD *)&(*v10)[8 * v11] = v9;
    v12 = v9;
  }
  *(_DWORD *)(v6 + 20) = v11 + 1;
  *(_QWORD *)(v12 + 32) = v6;
  v13 = *((_QWORD *)this + 11);
  v14 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v15 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v15 = 0;
  v16 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 80;
  *(_DWORD *)(v16 + 16) = 2;
  *(_BYTE *)(v16 + 20) = 1;
  *(_QWORD *)(v16 + 24) = v15;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 48) = v9;
  *(_QWORD *)v16 = off_1E357F2A0;
  *(_BYTE *)(v16 + 40) = 22;
  JSC::B3::Procedure::addValueImpl(v14, (JSC::B3::Value *)v16);
  v29 = v16;
  v17 = (char **)(v13 + 8);
  v18 = *(unsigned int *)(v13 + 20);
  if ((_DWORD)v18 == *(_DWORD *)(v13 + 16))
  {
    v22 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17, v18 + 1, (unint64_t)&v29);
    v18 = *(unsigned int *)(v13 + 20);
    *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8 * v18) = *(_QWORD *)v22;
    v19 = v29;
  }
  else
  {
    *(_QWORD *)&(*v17)[8 * v18] = v16;
    v19 = v16;
  }
  *(_DWORD *)(v13 + 20) = v18 + 1;
  *(_QWORD *)(v19 + 32) = v13;
  return v16;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::store(JSC::Wasm::StoreOpType,JSC::B3::Variable *,JSC::B3::Variable *,unsigned int)::$_0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = *a2;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E35B61E8;
  *(_QWORD *)(v4 + 16) = v5;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

JSC::B3::Value *JSC::Wasm::OMGIRGenerator::fixupPointerPlusOffsetForAtomicOps(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  JSC::B3::Value *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  JSC::B3::Value *v23;
  _QWORD *v24;
  uint64_t v25;
  JSC::B3::Value *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  v6 = a1[11];
  v7 = (JSC::B3::Value *)a1[7];
  if (*a1)
    v8 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v8 = 0;
  v9 = a4;
  v10 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v10 + 8) = -1;
  *(_WORD *)(v10 + 12) = 4;
  *(_DWORD *)(v10 + 16) = 2;
  *(_BYTE *)(v10 + 20) = 0;
  *(_QWORD *)(v10 + 24) = v8;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)v10 = off_1E357DA88;
  *(_QWORD *)(v10 + 40) = v9;
  JSC::B3::Procedure::addValueImpl(v7, (JSC::B3::Value *)v10);
  v41 = v10;
  v11 = (_QWORD *)(v6 + 8);
  v12 = *(unsigned int *)(v6 + 20);
  if ((_DWORD)v12 == *(_DWORD *)(v6 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v6 + 8), v12 + 1, (unint64_t)&v41);
    v12 = *(unsigned int *)(v6 + 20);
    *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v12) = *(_QWORD *)v37;
    v13 = v41;
  }
  else
  {
    *(_QWORD *)(*v11 + 8 * v12) = v10;
    v13 = v10;
  }
  *(_DWORD *)(v6 + 20) = v12 + 1;
  *(_QWORD *)(v13 + 32) = v6;
  v14 = (JSC::B3::Value *)WTF::fastMalloc((WTF *)0x38);
  JSC::B3::Value::Value<>((uint64_t)v14, 0, 14, 2, v8, a3, v10);
  JSC::B3::Procedure::addValueImpl(v7, v14);
  v41 = (uint64_t)v14;
  v15 = *(unsigned int *)(v6 + 20);
  if ((_DWORD)v15 == *(_DWORD *)(v6 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v6 + 8), v15 + 1, (unint64_t)&v41);
    v15 = *(unsigned int *)(v6 + 20);
    *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v15) = *(_QWORD *)v38;
    v16 = (JSC::B3::Value *)v41;
  }
  else
  {
    *(_QWORD *)(*v11 + 8 * v15) = v14;
    v16 = v14;
  }
  *(_DWORD *)(v6 + 20) = v15 + 1;
  *((_QWORD *)v16 + 4) = v6;
  if (JSC::Wasm::memoryLog2Alignment())
  {
    v17 = a1[11];
    v18 = (JSC::B3::Value *)a1[7];
    if (*a1)
      v19 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
    else
      v19 = 0;
    v20 = JSC::Wasm::memoryLog2Alignment();
    if (v20 > 3)
      v21 = 15;
    else
      v21 = qword_19915AB38[1 << v20];
    v22 = JSC::Wasm::OMGIRGenerator::constant(a1, 2u, v21, 0, 0);
    v23 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(22, v19, (uint64_t)v14, v22);
    JSC::B3::Procedure::addValueImpl(v18, v23);
    v41 = (uint64_t)v23;
    v24 = (_QWORD *)(v17 + 8);
    v25 = *(unsigned int *)(v17 + 20);
    if ((_DWORD)v25 == *(_DWORD *)(v17 + 16))
    {
      v39 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v17 + 8), v25 + 1, (unint64_t)&v41);
      v25 = *(unsigned int *)(v17 + 20);
      *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v25) = *(_QWORD *)v39;
      v26 = (JSC::B3::Value *)v41;
    }
    else
    {
      *(_QWORD *)(*v24 + 8 * v25) = v23;
      v26 = v23;
    }
    *(_DWORD *)(v17 + 20) = v25 + 1;
    *((_QWORD *)v26 + 4) = v17;
    v27 = WTF::fastMalloc((WTF *)0x98);
    *(_QWORD *)v27 = off_1E357F5F0;
    *(_DWORD *)(v27 + 8) = -1;
    *(_WORD *)(v27 + 12) = 88;
    *(_DWORD *)(v27 + 16) = 0;
    *(_BYTE *)(v27 + 20) = 4;
    *(_QWORD *)(v27 + 24) = v19;
    *(_QWORD *)(v27 + 32) = 0;
    v28 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v27);
    *v28 = v28 + 2;
    v28[1] = 3;
    *(_OWORD *)(v27 + 40) = 0u;
    *(_OWORD *)(v27 + 56) = 0u;
    *(_OWORD *)(v27 + 72) = 0u;
    *(_OWORD *)(v27 + 88) = 0u;
    *(_QWORD *)(v27 + 104) = 0;
    *(_QWORD *)v27 = off_1E357D550;
    v41 = (uint64_t)v23;
    v42 = 0;
    v43 = 0;
    JSC::B3::StackmapValue::append((__int128 *)v27, (uint64_t)v23, (unint64_t)&v42);
    JSC::B3::Procedure::addValueImpl(v18, (JSC::B3::Value *)v27);
    v41 = v27;
    v29 = *(unsigned int *)(v17 + 20);
    if ((_DWORD)v29 == *(_DWORD *)(v17 + 16))
    {
      v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v17 + 8), v29 + 1, (unint64_t)&v41);
      v29 = *(unsigned int *)(v17 + 20);
      *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v29) = *(_QWORD *)v40;
      v30 = v41;
    }
    else
    {
      *(_QWORD *)(*v24 + 8 * v29) = v27;
      v30 = v27;
    }
    *(_DWORD *)(v17 + 20) = v29 + 1;
    *(_QWORD *)(v30 + 32) = v17;
    v31 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v31 + 8) = 1;
    *(_QWORD *)v31 = off_1E35B6210;
    *(_QWORD *)(v31 + 16) = a1;
    v32 = *(unsigned int **)(v27 + 56);
    *(_QWORD *)(v27 + 56) = v31;
    if (v32)
    {
      v33 = v32 + 2;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        atomic_store(1u, v32 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
      }
    }
  }
  return v14;
}

JSC::B3::Value *JSC::Wasm::OMGIRGenerator::sanitizeAtomicResult(uint64_t *a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, JSC::B3::Value *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t *v10;
  JSC::B3::Value *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  JSC::B3::Value *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;

  v5 = (uint64_t)a5;
  if (a3 == 255)
    return JSC::Wasm::OMGIRGenerator::sanitizeAtomicResult(JSC::Wasm::ExtAtomicOpType,JSC::Wasm::Type,JSC::B3::Value *)::{lambda(JSC::B3::Value *)#1}::operator()(a2, a1, a5);
  if (a3 != 254)
  {
    __break(0xC471u);
    JUMPOUT(0x198D8CFACLL);
  }
  if (((1 << JSC::Wasm::memoryLog2Alignment()) - 5) >= 4)
  {
    v9 = a1[11];
    v10 = a1;
    v11 = (JSC::B3::Value *)a1[7];
    v12 = v10;
    v13 = *v10;
    if (v13)
      v14 = *(_QWORD *)(v13 + 15000) | ((unint64_t)*(unsigned __int8 *)(v13 + 14992) << 32);
    else
      v14 = 0;
    v15 = JSC::Wasm::OMGIRGenerator::sanitizeAtomicResult(JSC::Wasm::ExtAtomicOpType,JSC::Wasm::Type,JSC::B3::Value *)::{lambda(JSC::B3::Value *)#1}::operator()(a2, v12, (JSC::B3::Value *)v5);
    v5 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v5 = off_1E357F5F0;
    *(_DWORD *)(v5 + 8) = -1;
    *(_WORD *)(v5 + 12) = 43;
    *(_DWORD *)(v5 + 16) = 2;
    *(_BYTE *)(v5 + 20) = 1;
    *(_QWORD *)(v5 + 24) = v14;
    *(_QWORD *)(v5 + 32) = 0;
    JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v5, 1, (uint64_t)v15);
    JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v5);
    v20 = v5;
    v16 = (char **)(v9 + 8);
    v17 = *(unsigned int *)(v9 + 20);
    if ((_DWORD)v17 == *(_DWORD *)(v9 + 16))
    {
      v19 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v16, v17 + 1, (unint64_t)&v20);
      v17 = *(unsigned int *)(v9 + 20);
      *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v17) = *(_QWORD *)v19;
      v18 = v20;
    }
    else
    {
      *(_QWORD *)&(*v16)[8 * v17] = v5;
      v18 = v5;
    }
    *(_DWORD *)(v9 + 20) = v17 + 1;
    *(_QWORD *)(v18 + 32) = v9;
  }
  return (JSC::B3::Value *)v5;
}

char *JSC::Wasm::OMGIRGenerator::emitStructSet(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  unint64_t v14;
  int v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  JSC::B3::BasicBlock *v28;
  JSC::B3::Value *v29;
  __int16 v30;
  __int16 v31;
  unint64_t v32;
  char *result;
  char v34;
  char v35;
  uint64_t v36;
  JSC::B3::Value *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char **v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  char *v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t casual;
  JSC::B3::Value *v55;
  uint64_t v56;
  JSC::B3::Value *v57;
  uint64_t v58;

  v6 = a2;
  v8 = a3;
  if (*(_BYTE *)(a1 + 32) == 1 || *(_BYTE *)(*(_QWORD *)(a1 + 16) + 112))
    v9 = 579;
  else
    v9 = 67;
  v10 = *(_QWORD *)a4 + 32 * a3;
  v11 = *(_QWORD *)(a1 + 88);
  v12 = *(JSC::B3::Value **)(a1 + 56);
  if (*(_QWORD *)a1)
    v14 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
  else
    v14 = 0;
  v56 = *(_QWORD *)v10;
  v15 = *(_DWORD *)(v10 + 16);
  v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v16)
  {
    v17 = (_BYTE *)(v16 + 9040);
    *(_BYTE *)(v16 + 9040) = 1;
    v18 = *(unsigned int *)(v16 + 9056);
    if ((_DWORD)v18)
    {
      *(_DWORD *)(v16 + 9056) = v18 - *(_DWORD *)(v16 + 9060);
      v19 = *(_QWORD *)(v16 + 9048) - v18;
LABEL_10:
      *v17 = 0;
      goto LABEL_11;
    }
    v20 = *(_QWORD *)(v16 + 9080);
    v21 = *(_QWORD *)(v16 + 9064);
    if (v20)
    {
LABEL_9:
      v22 = __clz(v20);
      *(_QWORD *)(v16 + 9080) = v20 & ~(0x8000000000000000 >> v22);
      v19 = v21 + 16 * v22;
      goto LABEL_10;
    }
    if (*(_BYTE *)(v16 + 9045) == 6)
    {
      v47 = *(_DWORD *)(v16 + 9076);
      v48 = *(unsigned int *)(v16 + 9072);
      if (v48 < v47)
      {
        *(_QWORD *)&v17[8 * v48 + 56] = 0;
        v49 = (unint64_t *)(v16 + 8 * v48 + 9104);
        v50 = v47 - 1 - v48;
        while (v50)
        {
          v21 += 1024;
          v52 = *v49++;
          v51 = v52;
          LODWORD(v48) = v48 + 1;
          --v50;
          if (v52)
          {
            v20 = __rbit64(v51);
            *(_DWORD *)(v16 + 9072) = v48;
            *(_QWORD *)(v16 + 9064) = v21;
            goto LABEL_9;
          }
        }
        *(_DWORD *)(v16 + 9072) = v47;
      }
    }
    *v17 = 0;
  }
  casual = bmalloc_allocate_casual(72, 1);
  v6 = a2;
  v19 = casual;
LABEL_11:
  v55 = (JSC::B3::Value *)v6;
  JSC::B3::Value::Value<>(v19, 0, v9, 2, 1, v14, v6);
  *(_QWORD *)v19 = off_1E357E4C8;
  *(_DWORD *)(v19 + 40) = 32;
  *(_OWORD *)(v19 + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(v12, (JSC::B3::Value *)v19);
  v58 = v19;
  v23 = (char **)(v11 + 8);
  v24 = *(unsigned int *)(v11 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v11 + 16))
  {
    v44 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v58);
    v24 = *(unsigned int *)(v11 + 20);
    *(_QWORD *)(*(_QWORD *)(v11 + 8) + 8 * v24) = *(_QWORD *)v44;
    v25 = v58;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v19;
    v25 = v19;
  }
  *(_DWORD *)(v11 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v11;
  v57 = (JSC::B3::Value *)v19;
  v26 = JSC::Wasm::OMGIRGenerator::fixupPointerPlusOffset((JSC::Wasm::OMGIRGenerator *)a1, &v57, *(unsigned int *)(*(_QWORD *)a4 + 32 * *(unsigned int *)(a4 + 8) + 4 * v8));
  if (v15 == 1)
  {
    v27 = *(unsigned __int8 *)(*(_QWORD *)a4 + 32 * v8);
    if (v27 == 247)
    {
      v28 = *(JSC::B3::BasicBlock **)(a1 + 88);
      v29 = *(JSC::B3::Value **)(a1 + 56);
      if (*(_BYTE *)(a1 + 32) == 1 || *(_BYTE *)(*(_QWORD *)(a1 + 16) + 112))
        v30 = 581;
      else
        v30 = 69;
      goto LABEL_38;
    }
    if (v27 == 248)
    {
      v28 = *(JSC::B3::BasicBlock **)(a1 + 88);
      v29 = *(JSC::B3::Value **)(a1 + 56);
      if (*(_BYTE *)(a1 + 32) == 1 || *(_BYTE *)(*(_QWORD *)(a1 + 16) + 112))
        v30 = 580;
      else
        v30 = 68;
LABEL_38:
      if (*(_QWORD *)a1)
        v45 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
      else
        v45 = 0;
      return JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,int>(v28, v29, v30, v45, a5, (uint64_t)v57, v26);
    }
  }
  if (*(_BYTE *)(a1 + 32) == 1 || *(_BYTE *)(*(_QWORD *)(a1 + 16) + 112))
    v31 = 582;
  else
    v31 = 70;
  if (*(_QWORD *)a1)
    v32 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
  else
    v32 = 0;
  result = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,int>(*(JSC::B3::BasicBlock **)(a1 + 88), *(JSC::B3::Value **)(a1 + 56), v31, v32, a5, (uint64_t)v57, v26);
  if (v15)
    v34 = -1;
  else
    v34 = v56;
  if (BYTE1(dword_1ECF4C7B0))
    v35 = 29;
  else
    v35 = 17;
  if ((v35 + v34) <= 1u)
  {
    v36 = *(_QWORD *)(a1 + 88);
    v37 = *(JSC::B3::Value **)(a1 + 56);
    if (*(_QWORD *)a1)
      v38 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
    else
      v38 = 0;
    v39 = *(_QWORD *)(a1 + 472);
    v40 = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)(v40 + 8) = -1;
    *(_WORD *)(v40 + 12) = 67;
    *(_DWORD *)(v40 + 16) = 2;
    *(_BYTE *)(v40 + 20) = 1;
    *(_QWORD *)(v40 + 24) = v38;
    *(_QWORD *)(v40 + 32) = 0;
    *(_QWORD *)(v40 + 64) = v39;
    *(_QWORD *)v40 = off_1E357E4C8;
    *(_DWORD *)(v40 + 40) = 24;
    *(_OWORD *)(v40 + 44) = xmmword_19914F690;
    JSC::B3::Procedure::addValueImpl(v37, (JSC::B3::Value *)v40);
    v58 = v40;
    v41 = (char **)(v36 + 8);
    v42 = *(unsigned int *)(v36 + 20);
    if ((_DWORD)v42 == *(_DWORD *)(v36 + 16))
    {
      v46 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v41, v42 + 1, (unint64_t)&v58);
      v42 = *(unsigned int *)(v36 + 20);
      *(_QWORD *)(*(_QWORD *)(v36 + 8) + 8 * v42) = *(_QWORD *)v46;
      v43 = v58;
    }
    else
    {
      *(_QWORD *)&(*v41)[8 * v42] = v40;
      v43 = v40;
    }
    *(_DWORD *)(v36 + 20) = v42 + 1;
    *(_QWORD *)(v43 + 32) = v36;
    return (char *)JSC::Wasm::OMGIRGenerator::emitWriteBarrier((JSC::Wasm::OMGIRGenerator *)a1, v55, (JSC::B3::Value *)v40);
  }
  return result;
}

char *JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,int>(JSC::B3::BasicBlock *a1, JSC::B3::Value *a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t Space;

  Space = JSC::B3::Value::allocateSpace(a3, 64);
  *(_QWORD *)Space = off_1E357F5F0;
  *(_DWORD *)(Space + 8) = -1;
  *(_WORD *)(Space + 12) = a3;
  *(_DWORD *)(Space + 16) = 0;
  *(_BYTE *)(Space + 20) = 2;
  *(_QWORD *)(Space + 24) = a4;
  *(_QWORD *)(Space + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)Space, 2, a5, a6);
  *(_QWORD *)Space = off_1E357E4C8;
  *(_DWORD *)(Space + 40) = a7;
  *(_OWORD *)(Space + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)Space);
  return JSC::B3::BasicBlock::append(a1, (JSC::B3::Value *)Space);
}

_QWORD *JSC::Wasm::OMGIRGenerator::emitWriteBarrier(JSC::Wasm::OMGIRGenerator *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  JSC::B3::BasicBlock *v5;
  unint64_t v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  JSC::B3::Value *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  JSC::B3::Value *v25;
  unint64_t v26;
  JSC::B3::Value *v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD **v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  JSC::B3::Value *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD **v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  JSC::B3::Value *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char **v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  _QWORD *v68;
  unint64_t v69;
  JSC::B3::Value *v70;
  uint64_t v71;
  JSC::B3::Value *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  JSC::B3::Value *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD *result;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  JSC::B3::Value *v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  JSC::B3::Value *v119;

  v119 = a2;
  v5 = (JSC::B3::BasicBlock *)*((_QWORD *)this + 11);
  if (*(_QWORD *)this)
    v6 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v6 = 0;
  v112 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Value *,int>(v5, *((JSC::B3::Value **)this + 7), 63, 1, v6, (uint64_t)a2, 7);
  v7 = *((_QWORD *)this + 11);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v9 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v9 = 0;
  v10 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(v10 + 8) = -1;
  *(_WORD *)(v10 + 12) = 67;
  *(_DWORD *)(v10 + 16) = 2;
  *(_BYTE *)(v10 + 20) = 1;
  *(_QWORD *)(v10 + 24) = v9;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 64) = a3;
  *(_QWORD *)v10 = off_1E357E4C8;
  *(_DWORD *)(v10 + 40) = 24;
  *(_OWORD *)(v10 + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(v8, (JSC::B3::Value *)v10);
  v116 = v10;
  v11 = (char **)(v7 + 8);
  v12 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v12 == *(_DWORD *)(v7 + 16))
  {
    v100 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, v12 + 1, (unint64_t)&v116);
    v12 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v12) = *(_QWORD *)v100;
    v13 = v116;
  }
  else
  {
    *(_QWORD *)&(*v11)[8 * v12] = v10;
    v13 = v10;
  }
  *(_DWORD *)(v7 + 20) = v12 + 1;
  *(_QWORD *)(v13 + 32) = v7;
  v118 = v10;
  if (*(_QWORD *)this)
    v14 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v14 = 0;
  v15 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Value *,int>(*((JSC::B3::BasicBlock **)this + 11), *((JSC::B3::Value **)this + 7), 67, 1, v14, v10, 760);
  v17 = JSC::B3::Procedure::addBlock(v16, *((JSC::B3::Procedure **)this + 7), 1.0);
  v19 = JSC::B3::Procedure::addBlock(v18, *((JSC::B3::Procedure **)this + 7), 1.0);
  v21 = JSC::B3::Procedure::addBlock(v20, *((JSC::B3::Procedure **)this + 7), 1.0);
  v23 = JSC::B3::Procedure::addBlock(v22, *((JSC::B3::Procedure **)this + 7), 1.0);
  v24 = *((_QWORD *)this + 11);
  v25 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v26 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v26 = 0;
  v27 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(57, v26, (uint64_t)v112, (uint64_t)v15);
  JSC::B3::Procedure::addValueImpl(v25, v27);
  v116 = (uint64_t)v27;
  v29 = (char **)(v24 + 8);
  v30 = *(unsigned int *)(v24 + 20);
  if ((_DWORD)v30 == *(_DWORD *)(v24 + 16))
  {
    v101 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29, v30 + 1, (unint64_t)&v116);
    v30 = *(unsigned int *)(v24 + 20);
    *(_QWORD *)(*(_QWORD *)(v24 + 8) + 8 * v30) = *(_QWORD *)v101;
    v31 = v116;
  }
  else
  {
    *(_QWORD *)&(*v29)[8 * v30] = v27;
    v31 = (uint64_t)v27;
  }
  *(_DWORD *)(v24 + 20) = v30 + 1;
  *(_QWORD *)(v31 + 32) = v24;
  v116 = (uint64_t)v23;
  v117 = 0;
  v114 = (uint64_t)v17;
  v115 = 1;
  JSC::B3::BasicBlock::appendNewControlValue(v24, (uint64_t)v25, 155, v26, (uint64_t)v27, &v116, &v114, v28);
  v32 = *((_QWORD *)this + 11);
  v116 = v32;
  v33 = v17 + 3;
  v34 = *((unsigned int *)v17 + 9);
  if ((_DWORD)v34)
  {
    v35 = (_QWORD *)*v33;
    v36 = *((unsigned int *)v17 + 9);
    while (*v35 != v32)
    {
      ++v35;
      if (!--v36)
        goto LABEL_17;
    }
  }
  else
  {
LABEL_17:
    if ((_DWORD)v34 == *((_DWORD *)v17 + 8))
    {
      v105 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v33, v34 + 1, (unint64_t)&v116);
      v34 = *((unsigned int *)v17 + 9);
      *(_QWORD *)(v17[3] + 8 * v34) = *v105;
    }
    else
    {
      *(_QWORD *)(*v33 + 8 * v34) = v32;
    }
    *((_DWORD *)v17 + 9) = v34 + 1;
    v32 = *((_QWORD *)this + 11);
  }
  v116 = v32;
  v37 = (_QWORD **)(v23 + 3);
  v38 = *((unsigned int *)v23 + 9);
  if ((_DWORD)v38)
  {
    v39 = *v37;
    v40 = *((unsigned int *)v23 + 9);
    while (*v39 != v32)
    {
      ++v39;
      if (!--v40)
        goto LABEL_24;
    }
  }
  else
  {
LABEL_24:
    if ((_DWORD)v38 == *((_DWORD *)v23 + 8))
    {
      v106 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v23 + 3), v38 + 1, (unint64_t)&v116);
      v38 = *((unsigned int *)v23 + 9);
      *(_QWORD *)(v23[3] + 8 * v38) = *v106;
    }
    else
    {
      (*v37)[v38] = v32;
    }
    *((_DWORD *)v23 + 9) = v38 + 1;
  }
  *((_QWORD *)this + 11) = v17;
  if (*(_QWORD *)this)
    v41 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v41 = 0;
  v42 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Value *,int>((JSC::B3::BasicBlock *)v17, *((JSC::B3::Value **)this + 7), 63, 1, v41, v10, 755);
  v44 = *((_QWORD *)this + 11);
  v45 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v46 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v46 = 0;
  v116 = (uint64_t)v19;
  v117 = 0;
  v114 = (uint64_t)v21;
  v115 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v44, v45, 155, v46, (uint64_t)v42, &v116, &v114, v43);
  v47 = *((_QWORD *)this + 11);
  v116 = v47;
  v48 = v19 + 3;
  v49 = *((unsigned int *)v19 + 9);
  if ((_DWORD)v49)
  {
    v50 = (_QWORD *)*v48;
    v51 = *((unsigned int *)v19 + 9);
    while (*v50 != v47)
    {
      ++v50;
      if (!--v51)
        goto LABEL_35;
    }
  }
  else
  {
LABEL_35:
    if ((_DWORD)v49 == *((_DWORD *)v19 + 8))
    {
      v107 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, v49 + 1, (unint64_t)&v116);
      v49 = *((unsigned int *)v19 + 9);
      *(_QWORD *)(v19[3] + 8 * v49) = *v107;
    }
    else
    {
      *(_QWORD *)(*v48 + 8 * v49) = v47;
    }
    *((_DWORD *)v19 + 9) = v49 + 1;
    v47 = *((_QWORD *)this + 11);
  }
  v116 = v47;
  v52 = (_QWORD **)(v21 + 3);
  v53 = *((unsigned int *)v21 + 9);
  if ((_DWORD)v53)
  {
    v54 = *v52;
    v55 = *((unsigned int *)v21 + 9);
    while (*v54 != v47)
    {
      ++v54;
      if (!--v55)
        goto LABEL_42;
    }
  }
  else
  {
LABEL_42:
    if ((_DWORD)v53 == *((_DWORD *)v21 + 8))
    {
      v108 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v21 + 3), v53 + 1, (unint64_t)&v116);
      v53 = *((unsigned int *)v21 + 9);
      *(_QWORD *)(v21[3] + 8 * v53) = *v108;
    }
    else
    {
      (*v52)[v53] = v47;
    }
    *((_DWORD *)v21 + 9) = v53 + 1;
  }
  v111 = v23 + 3;
  *((_QWORD *)this + 11) = v19;
  v56 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v57 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v57 = 0;
  v58 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v58 = off_1E357F5F0;
  *(_DWORD *)(v58 + 8) = -1;
  *(_WORD *)(v58 + 12) = 83;
  *(_DWORD *)(v58 + 16) = 0;
  *(_BYTE *)(v58 + 20) = 4;
  *(_QWORD *)(v58 + 24) = v57;
  *(_QWORD *)(v58 + 32) = 0;
  v59 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v58);
  *v59 = v59 + 2;
  v59[1] = 3;
  *(_OWORD *)(v58 + 40) = 0u;
  *(_OWORD *)(v58 + 56) = 0u;
  *(_OWORD *)(v58 + 72) = 0u;
  *(_OWORD *)(v58 + 88) = 0u;
  *(_QWORD *)(v58 + 104) = 0;
  *(_QWORD *)v58 = off_1E357E700;
  *(_OWORD *)(v58 + 112) = xmmword_1991243D0;
  *(_QWORD *)(v58 + 152) = 0;
  *(_QWORD *)(v58 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v58 + 136) = v58 + 152;
  *(_WORD *)(v58 + 168) = 0;
  *(_BYTE *)(v58 + 160) = 0;
  *(_QWORD *)(v58 + 144) = 0x100000001;
  JSC::B3::Procedure::addValueImpl(v56, (JSC::B3::Value *)v58);
  v116 = v58;
  v60 = (char **)(v19 + 1);
  v61 = *((unsigned int *)v19 + 5);
  if ((_DWORD)v61 == *((_DWORD *)v19 + 4))
  {
    v102 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v60, v61 + 1, (unint64_t)&v116);
    v61 = *((unsigned int *)v19 + 5);
    *(_QWORD *)(v19[1] + 8 * v61) = *(_QWORD *)v102;
    v62 = v116;
  }
  else
  {
    *(_QWORD *)&(*v60)[8 * v61] = v58;
    v62 = v58;
  }
  *((_DWORD *)v19 + 5) = v61 + 1;
  *(_QWORD *)(v62 + 32) = v19;
  v63 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v63 + 8) = 1;
  *(_QWORD *)v63 = off_1E35B5D50;
  v64 = *(unsigned int **)(v58 + 56);
  *(_QWORD *)(v58 + 56) = v63;
  if (v64)
  {
    v65 = v64 + 2;
    do
    {
      v66 = __ldaxr(v65);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, v65));
    if (!v67)
    {
      atomic_store(1u, v64 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 8))(v64);
    }
  }
  v113 = (uint64_t)v21;
  v68 = v21 + 3;
  if (*(_QWORD *)this)
    v69 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v69 = 0;
  v70 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Value *,int>(*((JSC::B3::BasicBlock **)this + 11), *((JSC::B3::Value **)this + 7), 63, 1, v69, (uint64_t)v119, 7);
  v71 = *((_QWORD *)this + 11);
  v72 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v73 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v73 = 0;
  v74 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v74 + 8) = -1;
  *(_WORD *)(v74 + 12) = 3;
  *(_DWORD *)(v74 + 16) = 1;
  *(_BYTE *)(v74 + 20) = 0;
  *(_QWORD *)(v74 + 24) = v73;
  *(_QWORD *)(v74 + 32) = 0;
  *(_QWORD *)v74 = off_1E357D8E0;
  *(_DWORD *)(v74 + 40) = 0;
  JSC::B3::Procedure::addValueImpl(v72, (JSC::B3::Value *)v74);
  v116 = v74;
  v75 = (_QWORD *)(v71 + 8);
  v76 = *(unsigned int *)(v71 + 20);
  if ((_DWORD)v76 == *(_DWORD *)(v71 + 16))
  {
    v103 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v71 + 8), v76 + 1, (unint64_t)&v116);
    v76 = *(unsigned int *)(v71 + 20);
    *(_QWORD *)(*(_QWORD *)(v71 + 8) + 8 * v76) = *(_QWORD *)v103;
    v77 = v116;
  }
  else
  {
    *(_QWORD *)(*v75 + 8 * v76) = v74;
    v77 = v74;
  }
  *(_DWORD *)(v71 + 20) = v76 + 1;
  *(_QWORD *)(v77 + 32) = v71;
  v78 = (JSC::B3::Value *)WTF::fastMalloc((WTF *)0x38);
  JSC::B3::Value::Value<>((uint64_t)v78, 0, 57, 2, v73, (uint64_t)v70, v74);
  JSC::B3::Procedure::addValueImpl(v72, v78);
  v116 = (uint64_t)v78;
  v80 = *(unsigned int *)(v71 + 20);
  if ((_DWORD)v80 == *(_DWORD *)(v71 + 16))
  {
    v104 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v71 + 8), v80 + 1, (unint64_t)&v116);
    v80 = *(unsigned int *)(v71 + 20);
    *(_QWORD *)(*(_QWORD *)(v71 + 8) + 8 * v80) = *(_QWORD *)v104;
    v81 = v116;
  }
  else
  {
    *(_QWORD *)(*v75 + 8 * v80) = v78;
    v81 = (uint64_t)v78;
  }
  *(_DWORD *)(v71 + 20) = v80 + 1;
  *(_QWORD *)(v81 + 32) = v71;
  v116 = (uint64_t)v23;
  v117 = 0;
  v114 = v113;
  v115 = 1;
  JSC::B3::BasicBlock::appendNewControlValue(v71, (uint64_t)v72, 155, v73, (uint64_t)v78, &v116, &v114, v79);
  v82 = *((_QWORD *)this + 11);
  v116 = v82;
  v83 = *(unsigned int *)(v113 + 36);
  if ((_DWORD)v83)
  {
    v84 = (_QWORD *)*v68;
    v85 = *(unsigned int *)(v113 + 36);
    while (*v84 != v82)
    {
      ++v84;
      if (!--v85)
        goto LABEL_66;
    }
  }
  else
  {
LABEL_66:
    if ((_DWORD)v83 == *(_DWORD *)(v113 + 32))
    {
      v109 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v68, v83 + 1, (unint64_t)&v116);
      v83 = *(unsigned int *)(v113 + 36);
      *(_QWORD *)(*(_QWORD *)(v113 + 24) + 8 * v83) = *v109;
    }
    else
    {
      *(_QWORD *)(*v68 + 8 * v83) = v82;
    }
    *(_DWORD *)(v113 + 36) = v83 + 1;
    v82 = *((_QWORD *)this + 11);
  }
  v116 = v82;
  v86 = *((unsigned int *)v23 + 9);
  if ((_DWORD)v86)
  {
    v87 = (_QWORD *)*v111;
    v88 = *((unsigned int *)v23 + 9);
    while (*v87 != v82)
    {
      ++v87;
      if (!--v88)
        goto LABEL_73;
    }
  }
  else
  {
LABEL_73:
    if ((_DWORD)v86 == *((_DWORD *)v23 + 8))
    {
      v110 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v111, v86 + 1, (unint64_t)&v116);
      v86 = *((unsigned int *)v23 + 9);
      *(_QWORD *)(v23[3] + 8 * v86) = *v110;
    }
    else
    {
      *(_QWORD *)(*v111 + 8 * v86) = v82;
    }
    *((_DWORD *)v23 + 9) = v86 + 1;
  }
  *((_QWORD *)this + 11) = v113;
  JSC::Wasm::OMGIRGenerator::callWasmOperation<void (*)(JSC::JSCell *,JSC::VM *),JSC::B3::Value *&,JSC::B3::Value *&>(this, v113, (uint64_t *)&v119, &v118);
  v92 = *((_QWORD *)this + 11);
  v93 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v94 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v94 = 0;
  v116 = (uint64_t)v23;
  v117 = 0;
  result = (_QWORD *)JSC::B3::BasicBlock::appendNewControlValue(v92, v93, 154, v94, &v116, v89, v90, v91);
  v96 = *((_QWORD *)this + 11);
  v116 = v96;
  v97 = *((unsigned int *)v23 + 9);
  if ((_DWORD)v97)
  {
    v98 = (_QWORD *)*v111;
    v99 = *((unsigned int *)v23 + 9);
    while (*v98 != v96)
    {
      ++v98;
      if (!--v99)
        goto LABEL_82;
    }
  }
  else
  {
LABEL_82:
    if ((_DWORD)v97 == *((_DWORD *)v23 + 8))
    {
      result = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v111, v97 + 1, (unint64_t)&v116);
      v97 = *((unsigned int *)v23 + 9);
      *(_QWORD *)(v23[3] + 8 * v97) = *result;
    }
    else
    {
      *(_QWORD *)(*v111 + 8 * v97) = v96;
    }
    *((_DWORD *)v23 + 9) = v97 + 1;
  }
  *((_QWORD *)this + 11) = v23;
  return result;
}

uint64_t operationMemoryAtomicWait32(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  double v19;
  unint64_t v20;
  char v21;
  char **v22;
  char *v23;

  v5 = a3 + (unint64_t)a2;
  if ((v5 & 3) != 0)
    return 0xFFFFFFFFLL;
  v8 = *(_QWORD *)(a1 + 64);
  if (!v8)
    return 0xFFFFFFFFLL;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(v8 + 8);
  v13 = *(_BYTE *)(v12 + 5) ? atomic_load((unint64_t *)(v12 + 16)) : *(_QWORD *)(v12 + 16);
  if (v13 <= v5
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 5) != 1
    || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v11 + 93024) + 32))(*(_QWORD *)(v11 + 93024)))
  {
    return 0xFFFFFFFFLL;
  }
  v18 = (unsigned int *)(JSC::BufferMemoryHandle::memory(*(JSC::BufferMemoryHandle **)(*(_QWORD *)(a1 + 64) + 8)) + v5);
  if (a5 < 0)
    v19 = INFINITY;
  else
    v19 = (double)a5 / 1000.0 / 1000.0 / 1000.0;
  v20 = atomic_load(&JSC::WaiterListManager::singleton(void)::onceKey);
  if (v20 != -1)
  {
    v23 = &v21;
    v22 = &v23;
    std::__call_once(&JSC::WaiterListManager::singleton(void)::onceKey, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::WaiterListManager::singleton(void)::$_0 &&>>);
  }
  return JSC::WaiterListManager::waitSyncImpl<int>((char *)&JSC::WaiterListManager::singleton(void)::manager, v11, v18, a4, v14, v15, v16, v17, v19);
}

uint64_t operationMemoryAtomicWait64(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  double v19;
  unint64_t v20;
  char v21;
  char **v22;
  char *v23;

  v5 = a3 + (unint64_t)a2;
  if ((v5 & 7) != 0)
    return 0xFFFFFFFFLL;
  v8 = *(_QWORD *)(a1 + 64);
  if (!v8)
    return 0xFFFFFFFFLL;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(v8 + 8);
  v13 = *(_BYTE *)(v12 + 5) ? atomic_load((unint64_t *)(v12 + 16)) : *(_QWORD *)(v12 + 16);
  if (v13 <= v5
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 5) != 1
    || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v11 + 93024) + 32))(*(_QWORD *)(v11 + 93024)))
  {
    return 0xFFFFFFFFLL;
  }
  v18 = (unint64_t *)(JSC::BufferMemoryHandle::memory(*(JSC::BufferMemoryHandle **)(*(_QWORD *)(a1 + 64) + 8))
                           + v5);
  if (a5 < 0)
    v19 = INFINITY;
  else
    v19 = (double)a5 / 1000.0 / 1000.0 / 1000.0;
  v20 = atomic_load(&JSC::WaiterListManager::singleton(void)::onceKey);
  if (v20 != -1)
  {
    v23 = &v21;
    v22 = &v23;
    std::__call_once(&JSC::WaiterListManager::singleton(void)::onceKey, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::WaiterListManager::singleton(void)::$_0 &&>>);
  }
  return JSC::WaiterListManager::waitSyncImpl<long long>((char *)&JSC::WaiterListManager::singleton(void)::manager, v11, v18, a4, v14, v15, v16, v17, v19);
}

uint64_t operationMemoryAtomicNotify(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  JSC::BufferMemoryHandle *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  char v18;
  char **v19;
  char *v20;

  v4 = a3 + (unint64_t)a2;
  if ((v4 & 3) != 0)
    return 0xFFFFFFFFLL;
  v6 = *(_QWORD *)(a1 + 64);
  if (!v6)
    return 0xFFFFFFFFLL;
  LODWORD(v7) = a4;
  v8 = *(_QWORD *)(v6 + 8);
  v9 = *(_BYTE *)(v8 + 5) ? atomic_load((unint64_t *)(v8 + 16)) : *(_QWORD *)(v8 + 16);
  if (v4 >= v9)
    return 0xFFFFFFFFLL;
  v10 = *(JSC::BufferMemoryHandle **)(*(_QWORD *)(a1 + 64) + 8);
  if (*((_BYTE *)v10 + 5) != 1)
    return 0;
  v16 = (void *)(JSC::BufferMemoryHandle::memory(v10) + v4);
  if ((int)v7 < 0)
    v7 = 0xFFFFFFFFLL;
  else
    v7 = v7;
  v17 = atomic_load(&JSC::WaiterListManager::singleton(void)::onceKey);
  if (v17 != -1)
  {
    v20 = &v18;
    v19 = &v20;
    std::__call_once(&JSC::WaiterListManager::singleton(void)::onceKey, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::WaiterListManager::singleton(void)::$_0 &&>>);
  }
  return JSC::WaiterListManager::notifyWaiter((JSC::WaiterListManager *)&JSC::WaiterListManager::singleton(void)::manager, v16, v7, v11, v12, v13, v14, v15);
}

uint64_t JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(uint64_t a1, JSC::B3::Value *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t casual;
  _QWORD *v16;
  char **v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v12)
  {
    v13 = (_BYTE *)(v12 + 8856);
    *(_BYTE *)(v12 + 8856) = 1;
    v14 = *(unsigned int *)(v12 + 8872);
    if ((_DWORD)v14)
    {
      *(_DWORD *)(v12 + 8872) = v14 - *(_DWORD *)(v12 + 8876);
      casual = *(_QWORD *)(v12 + 8864) - v14;
LABEL_4:
      *v13 = 0;
      goto LABEL_5;
    }
    v21 = *(_QWORD *)(v12 + 8896);
    v22 = *(_QWORD *)(v12 + 8880);
    if (v21)
    {
LABEL_9:
      v23 = __clz(v21);
      *(_QWORD *)(v12 + 8896) = v21 & ~(0x8000000000000000 >> v23);
      casual = v22 + 16 * v23;
      goto LABEL_4;
    }
    if (*(_BYTE *)(v12 + 8861) == 6)
    {
      v25 = *(_DWORD *)(v12 + 8892);
      v26 = *(unsigned int *)(v12 + 8888);
      if (v26 < v25)
      {
        *(_QWORD *)&v13[8 * v26 + 56] = 0;
        v27 = (unint64_t *)(v12 + 8 * v26 + 8920);
        v28 = v25 - 1 - v26;
        while (v28)
        {
          v22 += 1024;
          v30 = *v27++;
          v29 = v30;
          LODWORD(v26) = v26 + 1;
          --v28;
          if (v30)
          {
            v21 = __rbit64(v29);
            *(_DWORD *)(v12 + 8888) = v26;
            *(_QWORD *)(v12 + 8880) = v22;
            goto LABEL_9;
          }
        }
        *(_DWORD *)(v12 + 8888) = v25;
      }
    }
    *v13 = 0;
  }
  casual = bmalloc_allocate_casual(64, 1);
LABEL_5:
  *(_QWORD *)casual = off_1E357F5F0;
  *(_DWORD *)(casual + 8) = -1;
  *(_WORD *)(casual + 12) = 62;
  *(_DWORD *)(casual + 16) = *(_DWORD *)(a5 + 16);
  *(_BYTE *)(casual + 20) = 3;
  *(_QWORD *)(casual + 24) = a3;
  *(_QWORD *)(casual + 32) = 0;
  v16 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)casual);
  *v16 = a4;
  v16[1] = a5;
  v16[2] = a6;
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)casual);
  v31 = casual;
  v17 = (char **)(a1 + 8);
  v18 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v18 == *(_DWORD *)(a1 + 16))
  {
    v24 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17, v18 + 1, (unint64_t)&v31);
    v18 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v18) = *(_QWORD *)v24;
    v19 = v31;
  }
  else
  {
    *(_QWORD *)&(*v17)[8 * v18] = casual;
    v19 = casual;
  }
  *(_DWORD *)(a1 + 20) = v18 + 1;
  *(_QWORD *)(v19 + 32) = a1;
  return casual;
}

unint64_t operationWasmArrayNew(JSC::Wasm *this, JSC::Wasm::Instance *a2, uint64_t a3, uint64_t a4, const JSC::Wasm::Type *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)this + 1) + 40) = vars0;
  return JSC::Wasm::arrayNew(this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t operationWasmArrayNewVector(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, const JSC::Wasm::Type *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *(_QWORD *)(a1[1] + 40) = vars0;
  return JSC::Wasm::arrayNew(a1, a2, a3, a4, a5, a6, a7, a8);
}

unsigned int *JSC::Wasm::OMGIRGenerator::emitArrayNullCheck(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  JSC::B3::Value *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *result;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v6 = a1[11];
  v7 = (JSC::B3::Value *)a1[7];
  if (*a1)
    v8 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v8 = 0;
  v9 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v9 + 8) = -1;
  *(_WORD *)(v9 + 12) = 4;
  *(_DWORD *)(v9 + 16) = 2;
  *(_BYTE *)(v9 + 20) = 0;
  *(_QWORD *)(v9 + 24) = v8;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)v9 = off_1E357DA88;
  *(_QWORD *)(v9 + 40) = 2;
  JSC::B3::Procedure::addValueImpl(v7, (JSC::B3::Value *)v9);
  v28 = v9;
  v10 = (_QWORD *)(v6 + 8);
  v11 = *(unsigned int *)(v6 + 20);
  if ((_DWORD)v11 == *(_DWORD *)(v6 + 16))
  {
    v25 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v6 + 8), v11 + 1, (unint64_t)&v28);
    v11 = *(unsigned int *)(v6 + 20);
    *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v11) = *(_QWORD *)v25;
    v12 = v28;
  }
  else
  {
    *(_QWORD *)(*v10 + 8 * v11) = v9;
    v12 = v9;
  }
  *(_DWORD *)(v6 + 20) = v11 + 1;
  *(_QWORD *)(v12 + 32) = v6;
  v13 = (JSC::B3::Value *)WTF::fastMalloc((WTF *)0x38);
  JSC::B3::Value::Value<>((uint64_t)v13, 0, 51, 2, v8, a2, v9);
  JSC::B3::Procedure::addValueImpl(v7, v13);
  v28 = (uint64_t)v13;
  v14 = *(unsigned int *)(v6 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v6 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v6 + 8), v14 + 1, (unint64_t)&v28);
    v14 = *(unsigned int *)(v6 + 20);
    *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v14) = *(_QWORD *)v26;
    v15 = (JSC::B3::Value *)v28;
  }
  else
  {
    *(_QWORD *)(*v10 + 8 * v14) = v13;
    v15 = v13;
  }
  *(_DWORD *)(v6 + 20) = v14 + 1;
  *((_QWORD *)v15 + 4) = v6;
  v16 = WTF::fastMalloc((WTF *)0x98);
  *(_QWORD *)v16 = off_1E357F5F0;
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 88;
  *(_DWORD *)(v16 + 16) = 0;
  *(_BYTE *)(v16 + 20) = 4;
  *(_QWORD *)(v16 + 24) = v8;
  *(_QWORD *)(v16 + 32) = 0;
  v17 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v16);
  *v17 = v17 + 2;
  v17[1] = 3;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  *(_QWORD *)(v16 + 104) = 0;
  *(_QWORD *)v16 = off_1E357D550;
  v28 = (uint64_t)v13;
  v29 = 0;
  v30 = 0;
  JSC::B3::StackmapValue::append((__int128 *)v16, (uint64_t)v13, (unint64_t)&v29);
  JSC::B3::Procedure::addValueImpl(v7, (JSC::B3::Value *)v16);
  v28 = v16;
  v18 = *(unsigned int *)(v6 + 20);
  if ((_DWORD)v18 == *(_DWORD *)(v6 + 16))
  {
    v27 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v6 + 8), v18 + 1, (unint64_t)&v28);
    v18 = *(unsigned int *)(v6 + 20);
    *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v18) = *(_QWORD *)v27;
    v19 = v28;
  }
  else
  {
    *(_QWORD *)(*v10 + 8 * v18) = v16;
    v19 = v16;
  }
  *(_DWORD *)(v6 + 20) = v18 + 1;
  *(_QWORD *)(v19 + 32) = v6;
  v20 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v20 + 8) = 1;
  *(_QWORD *)v20 = off_1E35B6418;
  *(_QWORD *)(v20 + 16) = a1;
  *(_DWORD *)(v20 + 24) = a3;
  result = *(unsigned int **)(v16 + 56);
  *(_QWORD *)(v16 + 56) = v20;
  if (result)
  {
    v22 = result + 2;
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::pushArrayNewFromSegment(_QWORD *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v12;
  JSC::B3::Value *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::B3::Value *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  char **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  char **v38;
  uint64_t v39;
  uint64_t v40;
  JSC::B3::Value *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  JSC::B3::Value *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *PushVariable;
  uint64_t v55;
  JSC::B3::Value *v56;
  unint64_t v57;
  uint64_t v58;
  char **v59;
  uint64_t v60;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v71;
  char **v72;
  uint64_t v73;
  uint64_t v74;

  v12 = a1[11];
  v13 = (JSC::B3::Value *)a1[7];
  if (*a1)
    v14 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v14 = 0;
  v71 = a1[59];
  v15 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v15 + 8) = -1;
  *(_WORD *)(v15 + 12) = 3;
  *(_DWORD *)(v15 + 16) = 1;
  *(_BYTE *)(v15 + 20) = 0;
  *(_QWORD *)(v15 + 24) = v14;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)v15 = off_1E357D8E0;
  *(_DWORD *)(v15 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v13, (JSC::B3::Value *)v15);
  v74 = v15;
  v16 = *(unsigned int *)(v12 + 20);
  if ((_DWORD)v16 == *(_DWORD *)(v12 + 16))
  {
    v62 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v12 + 8), v16 + 1, (unint64_t)&v74);
    v16 = *(unsigned int *)(v12 + 20);
    *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8 * v16) = *(_QWORD *)v62;
    v17 = v74;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8 * v16) = v15;
    v17 = v15;
  }
  v72 = (char **)(v12 + 8);
  v73 = v12;
  *(_DWORD *)(v12 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v12;
  v18 = a1[11];
  v19 = (JSC::B3::Value *)a1[7];
  if (*a1)
    v20 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 3;
  *(_DWORD *)(v21 + 16) = 1;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357D8E0;
  *(_DWORD *)(v21 + 40) = a4;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v74 = v21;
  v22 = (char **)(v18 + 8);
  v23 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v23 == *(_DWORD *)(v18 + 16))
  {
    v63 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v22, v23 + 1, (unint64_t)&v74);
    v23 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v23) = *(_QWORD *)v63;
    v24 = v74;
  }
  else
  {
    *(_QWORD *)&(*v22)[8 * v23] = v21;
    v24 = v21;
  }
  *(_DWORD *)(v18 + 20) = v23 + 1;
  *(_QWORD *)(v24 + 32) = v18;
  v25 = a1[11];
  v26 = (JSC::B3::Value *)a1[7];
  if (*a1)
    v27 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v27 = 0;
  v28 = WTF::fastMalloc((WTF *)0x30);
  v29 = *(_DWORD *)(a5 + 4);
  *(_DWORD *)(v28 + 8) = -1;
  *(_WORD *)(v28 + 12) = 10;
  *(_DWORD *)(v28 + 16) = v29;
  *(_BYTE *)(v28 + 20) = 0;
  *(_QWORD *)(v28 + 24) = v27;
  *(_QWORD *)(v28 + 32) = 0;
  *(_QWORD *)v28 = off_1E357F0F8;
  *(_QWORD *)(v28 + 40) = a5;
  JSC::B3::Procedure::addValueImpl(v26, (JSC::B3::Value *)v28);
  v74 = v28;
  v30 = (char **)(v25 + 8);
  v31 = *(unsigned int *)(v25 + 20);
  if ((_DWORD)v31 == *(_DWORD *)(v25 + 16))
  {
    v64 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30, v31 + 1, (unint64_t)&v74);
    v31 = *(unsigned int *)(v25 + 20);
    *(_QWORD *)(*(_QWORD *)(v25 + 8) + 8 * v31) = *(_QWORD *)v64;
    v32 = v74;
  }
  else
  {
    *(_QWORD *)&(*v30)[8 * v31] = v28;
    v32 = v28;
  }
  *(_DWORD *)(v25 + 20) = v31 + 1;
  *(_QWORD *)(v32 + 32) = v25;
  v33 = a1[11];
  v34 = (JSC::B3::Value *)a1[7];
  if (*a1)
    v35 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v35 = 0;
  v36 = WTF::fastMalloc((WTF *)0x30);
  v37 = *(_DWORD *)(a6 + 4);
  *(_DWORD *)(v36 + 8) = -1;
  *(_WORD *)(v36 + 12) = 10;
  *(_DWORD *)(v36 + 16) = v37;
  *(_BYTE *)(v36 + 20) = 0;
  *(_QWORD *)(v36 + 24) = v35;
  *(_QWORD *)(v36 + 32) = 0;
  *(_QWORD *)v36 = off_1E357F0F8;
  *(_QWORD *)(v36 + 40) = a6;
  JSC::B3::Procedure::addValueImpl(v34, (JSC::B3::Value *)v36);
  v74 = v36;
  v38 = (char **)(v33 + 8);
  v39 = *(unsigned int *)(v33 + 20);
  if ((_DWORD)v39 == *(_DWORD *)(v33 + 16))
  {
    v65 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v38, v39 + 1, (unint64_t)&v74);
    v39 = *(unsigned int *)(v33 + 20);
    *(_QWORD *)(*(_QWORD *)(v33 + 8) + 8 * v39) = *(_QWORD *)v65;
    v40 = v74;
  }
  else
  {
    *(_QWORD *)&(*v38)[8 * v39] = v36;
    v40 = v36;
  }
  *(_DWORD *)(v33 + 20) = v39 + 1;
  *(_QWORD *)(v40 + 32) = v33;
  v41 = (JSC::B3::Value *)a1[7];
  if (*a1)
    v42 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v42 = 0;
  v43 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v43 + 8) = -1;
  *(_WORD *)(v43 + 12) = 4;
  *(_DWORD *)(v43 + 16) = 2;
  *(_BYTE *)(v43 + 20) = 0;
  *(_QWORD *)(v43 + 24) = v42;
  *(_QWORD *)(v43 + 32) = 0;
  *(_QWORD *)(v43 + 40) = a2;
  *(_QWORD *)v43 = off_1E357E2D0;
  JSC::B3::Procedure::addValueImpl(v41, (JSC::B3::Value *)v43);
  v74 = v43;
  v44 = *(unsigned int *)(v73 + 20);
  if ((_DWORD)v44 == *(_DWORD *)(v73 + 16))
  {
    v66 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v72, v44 + 1, (unint64_t)&v74);
    v44 = *(unsigned int *)(v73 + 20);
    *(_QWORD *)(*(_QWORD *)(v73 + 8) + 8 * v44) = *(_QWORD *)v66;
    v45 = v74;
  }
  else
  {
    *(_QWORD *)&(*v72)[8 * v44] = v43;
    v45 = v43;
  }
  *(_DWORD *)(v73 + 20) = v44 + 1;
  *(_QWORD *)(v45 + 32) = v73;
  if (*a1)
    v46 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v46 = 0;
  v47 = (JSC::B3::Value *)a1[7];
  v48 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v48 = off_1E357F5F0;
  *(_DWORD *)(v48 + 8) = -1;
  *(_WORD *)(v48 + 12) = 82;
  *(_DWORD *)(v48 + 16) = 2;
  *(_BYTE *)(v48 + 20) = 4;
  *(_QWORD *)(v48 + 24) = v46;
  *(_QWORD *)(v48 + 32) = 0;
  v49 = JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v48);
  *(_QWORD *)v49 = v49 + 16;
  *(_QWORD *)(v49 + 8) = 3;
  v50 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v49 + 8) = 6;
  *(_QWORD *)v49 = v50;
  v51 = *(unsigned int *)(v49 + 12);
  *(_QWORD *)(v50 + 8 * v51) = v43;
  *(_QWORD *)(*(_QWORD *)v49 + 8 * (v51 + 1)) = v71;
  *(_QWORD *)(*(_QWORD *)v49 + 8 * (v51 + 2)) = v15;
  *(_QWORD *)(*(_QWORD *)v49 + 8 * (v51 + 3)) = v21;
  *(_QWORD *)(*(_QWORD *)v49 + 8 * (v51 + 4)) = v28;
  *(_QWORD *)(*(_QWORD *)v49 + 8 * (v51 + 5)) = v36;
  *(_DWORD *)(v49 + 12) = v51 + 6;
  *(_QWORD *)v48 = &unk_1E357CF78;
  *(_OWORD *)(v48 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v48 + 56) = 0xFFFFFFFF00000000;
  if (!*(_DWORD *)(v48 + 76))
  {
    __break(0xC471u);
    JUMPOUT(0x198D8EE88);
  }
  JSC::B3::Procedure::addValueImpl(v47, (JSC::B3::Value *)v48);
  v74 = v48;
  v52 = *(unsigned int *)(v73 + 20);
  if ((_DWORD)v52 == *(_DWORD *)(v73 + 16))
  {
    v67 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v72, v52 + 1, (unint64_t)&v74);
    v52 = *(unsigned int *)(v73 + 20);
    *(_QWORD *)(*(_QWORD *)(v73 + 8) + 8 * v52) = *(_QWORD *)v67;
    v53 = v74;
  }
  else
  {
    *(_QWORD *)&(*v72)[8 * v52] = v48;
    v53 = v48;
  }
  *(_DWORD *)(v73 + 20) = v52 + 1;
  *(_QWORD *)(v53 + 32) = v73;
  JSC::Wasm::OMGIRGenerator::emitArrayNullCheck(a1, v48, a7);
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)a1, *(_DWORD *)(v48 + 16));
  v55 = a1[11];
  v56 = (JSC::B3::Value *)a1[7];
  if (*a1)
    v57 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v57 = 0;
  v58 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v58 + 8) = -1;
  *(_WORD *)(v58 + 12) = 9;
  *(_DWORD *)(v58 + 16) = 0;
  *(_BYTE *)(v58 + 20) = 1;
  *(_QWORD *)(v58 + 24) = v57;
  *(_QWORD *)(v58 + 32) = 0;
  *(_QWORD *)v58 = off_1E357F0F8;
  *(_QWORD *)(v58 + 40) = PushVariable;
  *(_QWORD *)(v58 + 48) = v48;
  JSC::B3::Procedure::addValueImpl(v56, (JSC::B3::Value *)v58);
  v74 = v58;
  v59 = (char **)(v55 + 8);
  v60 = *(unsigned int *)(v55 + 20);
  if ((_DWORD)v60 == *(_DWORD *)(v55 + 16))
  {
    v68 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v59, v60 + 1, (unint64_t)&v74);
    v60 = *(unsigned int *)(v55 + 20);
    *(_QWORD *)(*(_QWORD *)(v55 + 8) + 8 * v60) = *(_QWORD *)v68;
    v58 = v74;
  }
  else
  {
    *(_QWORD *)&(*v59)[8 * v60] = v58;
  }
  *(_DWORD *)(v55 + 20) = v60 + 1;
  *(_QWORD *)(v58 + 32) = v55;
  return PushVariable;
}

unint64_t operationWasmArrayNewEmpty(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, const JSC::Wasm::Type *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  JSC::Wasm::TypeDefinition *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  unint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  BOOL v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  BOOL v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t (*v55)(uint64_t *);
  uint64_t *v56;
  uint64_t (*v57)(uint64_t *);
  uint64_t *v58;
  uint64_t (*v59)(uint64_t *);
  uint64_t *v60;
  uint64_t (*v61)(uint64_t *);
  uint64_t *v62;
  uint64_t (*v63)(uint64_t *);
  uint64_t *v64;
  uint64_t (*v65)(uint64_t *);
  uint64_t *v66;
  unsigned int *v67;
  WTF *v68;
  unint64_t CachedUnrolling;
  const JSC::Wasm::TypeDefinition *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  JSC::Wasm::TypeInformation *v76;
  WTF *v77;
  __int128 v78;
  int v79;
  uint64_t v80;
  int v81;
  unsigned int *v82;
  __int128 v83;
  int v84;
  uint64_t v85;
  int v86;
  unsigned int *v87;
  __int128 v88;
  int v89;
  uint64_t v90;
  int v91;
  unsigned int *v92;
  __int128 v93;
  int v94;
  uint64_t v95;
  int v96;
  WTF *v97;
  __int128 v98;
  int v99;
  uint64_t v100;
  int v101;
  unsigned int *v102;
  __int128 v103;
  int v104;
  uint64_t v105;
  int v106;
  _DWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t vars0;

  v113 = *MEMORY[0x1E0C80C00];
  v8 = (JSC *)a1[1];
  *((_QWORD *)v8 + 5) = vars0;
  v9 = *(_QWORD *)(a1[7] + 8);
  if (*(_DWORD *)(v9 + 284) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198D8F75CLL);
  }
  v10 = a3;
  v11 = a1[4];
  v12 = *(unsigned int **)(*(_QWORD *)(v9 + 272) + 8 * a2);
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v9 = *(_QWORD *)(a1[7] + 8);
  }
  if (*(_DWORD *)(v9 + 100) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198D8F764);
  }
  v14 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(v9 + 88) + 8 * a2);
  if (*((_DWORD *)v14 + 8) == 4)
  {
    v76 = *(JSC::Wasm::TypeInformation **)(*(_QWORD *)(v9 + 88) + 8 * a2);
    v67 = (unsigned int *)*((_QWORD *)v14 + 1);
    v68 = *(WTF **)v67;
    v14 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v67 + 8) + 8 * v67[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v14))
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v76, (unint64_t)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      if ((_BYTE)a2)
      {
        v14 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v14 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v14, v68, a3, a4, a5, a6, a7, a8);
        JSC::Wasm::TypeInformation::addCachedUnrolling(v76, v14, v70, v71, v72, v73, v74, v75);
      }
    }
  }
  if (*((_DWORD *)v14 + 8) == 5)
    v14 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v14 + 1);
  v15 = (uint64_t *)*((_QWORD *)v14 + 1);
  v17 = *v15;
  v16 = v15[1];
  v18 = *((_DWORD *)v15 + 4);
  v111 = *(uint64_t *)((char *)v15 + 20);
  v112 = *((_DWORD *)v15 + 7);
  if (v18)
  {
    if (v17 == 248)
    {
      v19 = 1;
    }
    else
    {
      if (v17 != 247)
      {
        __break(0xC471u);
        JUMPOUT(0x198D8F6E4);
      }
      v19 = 2;
    }
  }
  else
  {
    v19 = 4;
    switch((char)v17)
    {
      case -5:
        v19 = 16;
        break;
      case -4:
      case -2:
        v19 = 8;
        break;
      case -3:
      case -1:
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198D8F754);
    }
  }
  if (v19 * (unint64_t)v10 <= 0x40000000)
  {
    if (v18 != 1)
    {
      switch((char)v17)
      {
        case -5:
          if (v10)
          {
            v27 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * v10) | 8));
            *v27 = v10;
            bzero(v27 + 2, 16 * v10);
          }
          else
          {
            v27 = 0;
          }
          v107 = v27;
          v48 = *(_QWORD *)(v11 + 1280);
          if ((v48 & 1) != 0)
          {
            v65 = *(uint64_t (**)(uint64_t *))(v48 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v11 & 8) != 0)
              v66 = (uint64_t *)(v11 - 16);
            else
              v66 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFC000 | 8);
            v108 = *v66;
            v109 = v11;
            v110 = v11 + 1280;
            v48 = v65(&v108);
          }
          *(_QWORD *)&v78 = v17;
          *((_QWORD *)&v78 + 1) = v16;
          v79 = v18;
          v80 = v111;
          v81 = v112;
          if (v12)
          {
            do
              v49 = __ldaxr(v12);
            while (__stlxr(v49 + 1, v12));
          }
          v77 = (WTF *)v12;
          v24 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v8, (JSC::VM *)v48, &v78, v10, (uint64_t *)&v107, (unsigned int **)&v77, a7, a8);
          v39 = (unsigned int *)v77;
          v77 = 0;
          if (v39)
          {
            do
            {
              v50 = __ldaxr(v39);
              v41 = --v50 == 0;
            }
            while (__stlxr(v50, v39));
            goto LABEL_82;
          }
          break;
        case -4:
        case -2:
          if (v10)
          {
            v22 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v10 + 8));
            *v22 = v10;
            bzero(v22 + 2, 8 * v10);
          }
          else
          {
            v22 = 0;
          }
          v107 = v22;
          v42 = *(_QWORD *)(v11 + 1280);
          if ((v42 & 1) != 0)
          {
            v61 = *(uint64_t (**)(uint64_t *))(v42 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v11 & 8) != 0)
              v62 = (uint64_t *)(v11 - 16);
            else
              v62 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFC000 | 8);
            v108 = *v62;
            v109 = v11;
            v110 = v11 + 1280;
            v42 = v61(&v108);
          }
          *(_QWORD *)&v88 = v17;
          *((_QWORD *)&v88 + 1) = v16;
          v89 = v18;
          v90 = v111;
          v91 = v112;
          if (v12)
          {
            do
              v43 = __ldaxr(v12);
            while (__stlxr(v43 + 1, v12));
          }
          v87 = v12;
          v24 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v8, (JSC::VM *)v42, &v88, v10, (uint64_t *)&v107, &v87, a7, a8);
          v39 = v87;
          v87 = 0;
          if (v39)
          {
            do
            {
              v44 = __ldaxr(v39);
              v41 = --v44 == 0;
            }
            while (__stlxr(v44, v39));
            goto LABEL_82;
          }
          break;
        case -3:
        case -1:
          if (v10)
          {
            v26 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v10 + 4));
            *v26 = v10;
            bzero(v26 + 1, 4 * v10);
          }
          else
          {
            v26 = 0;
          }
          v107 = v26;
          v45 = *(_QWORD *)(v11 + 1280);
          if ((v45 & 1) != 0)
          {
            v63 = *(uint64_t (**)(uint64_t *))(v45 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v11 & 8) != 0)
              v64 = (uint64_t *)(v11 - 16);
            else
              v64 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFC000 | 8);
            v108 = *v64;
            v109 = v11;
            v110 = v11 + 1280;
            v45 = v63(&v108);
          }
          *(_QWORD *)&v93 = v17;
          *((_QWORD *)&v93 + 1) = v16;
          v95 = v111;
          v94 = v18;
          v96 = v112;
          if (v12)
          {
            do
              v46 = __ldaxr(v12);
            while (__stlxr(v46 + 1, v12));
          }
          v92 = v12;
          v24 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v8, (JSC::VM *)v45, &v93, v10, (uint64_t *)&v107, &v92, a7, a8);
          v39 = v92;
          v92 = 0;
          if (v39)
          {
            do
            {
              v47 = __ldaxr(v39);
              v41 = --v47 == 0;
            }
            while (__stlxr(v47, v39));
            goto LABEL_82;
          }
          break;
        default:
          if (v17 - 227 >= 2)
          {
            __break(0xC471u);
            JUMPOUT(0x198D8F734);
          }
          if (v10)
          {
            v25 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v10 + 8));
            *v25 = v10;
            memset_pattern16(v25 + 2, &unk_199153030, 8 * v10);
          }
          else
          {
            v25 = 0;
          }
          v107 = v25;
          v37 = *(_QWORD *)(v11 + 1280);
          if ((v37 & 1) != 0)
          {
            v59 = *(uint64_t (**)(uint64_t *))(v37 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v11 & 8) != 0)
              v60 = (uint64_t *)(v11 - 16);
            else
              v60 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFC000 | 8);
            v108 = *v60;
            v109 = v11;
            v110 = v11 + 1280;
            v37 = v59(&v108);
          }
          *(_QWORD *)&v83 = v17;
          *((_QWORD *)&v83 + 1) = v16;
          v84 = v18;
          v85 = v111;
          v86 = v112;
          if (v12)
          {
            do
              v38 = __ldaxr(v12);
            while (__stlxr(v38 + 1, v12));
          }
          v82 = v12;
          v24 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v8, (JSC::VM *)v37, &v83, v10, (uint64_t *)&v107, &v82, a7, a8);
          v39 = v82;
          v82 = 0;
          if (v39)
          {
            do
            {
              v40 = __ldaxr(v39);
              v41 = --v40 == 0;
            }
            while (__stlxr(v40, v39));
LABEL_82:
            if (v41)
            {
              atomic_store(1u, v39);
              WTF::fastFree((unint64_t)v39, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
            }
          }
          break;
      }
      v51 = (unint64_t)v107;
      v107 = 0;
      if (v51)
        WTF::fastFree(v51, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      if (!v24)
        v24 = 2;
      goto LABEL_88;
    }
    v20 = v17 & 0xFFFFFFFFFFFFFF00;
    if (v17 == 247)
    {
      if (v10)
      {
        v23 = (_DWORD *)WTF::fastMalloc((WTF *)(2 * v10 + 4));
        *v23 = v10;
        bzero(v23 + 1, 2 * v10);
      }
      else
      {
        v23 = 0;
      }
      v107 = v23;
      v33 = *(_QWORD *)(v11 + 1280);
      if ((v33 & 1) != 0)
      {
        v57 = *(uint64_t (**)(uint64_t *))(v33 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v11 & 8) != 0)
          v58 = (uint64_t *)(v11 - 16);
        else
          v58 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFC000 | 8);
        v108 = *v58;
        v109 = v11;
        v110 = v11 + 1280;
        v33 = v57(&v108);
      }
      *(_QWORD *)&v98 = v20 | 0xF7;
      *((_QWORD *)&v98 + 1) = v16;
      v100 = v111;
      v99 = 1;
      v101 = v112;
      if (v12)
      {
        do
          v34 = __ldaxr(v12);
        while (__stlxr(v34 + 1, v12));
      }
      v97 = (WTF *)v12;
      v24 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v8, (JSC::VM *)v33, &v98, v10, (uint64_t *)&v107, (unsigned int **)&v97, a7, a8);
      v30 = (unsigned int *)v97;
      v97 = 0;
      if (v30)
      {
        do
        {
          v35 = __ldaxr(v30);
          v32 = --v35 == 0;
        }
        while (__stlxr(v35, v30));
LABEL_50:
        if (v32)
        {
          atomic_store(1u, v30);
          WTF::fastFree((unint64_t)v30, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
        }
      }
    }
    else
    {
      if (v17 != 248)
      {
        v24 = 0;
        if (!v12)
          return v24;
        goto LABEL_89;
      }
      if (v10)
      {
        v21 = (_DWORD *)WTF::fastMalloc((WTF *)(v10 + 4));
        *v21 = v10;
        bzero(v21 + 1, v10);
      }
      else
      {
        v21 = 0;
      }
      v107 = v21;
      v28 = *(_QWORD *)(v11 + 1280);
      if ((v28 & 1) != 0)
      {
        v55 = *(uint64_t (**)(uint64_t *))(v28 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v11 & 8) != 0)
          v56 = (uint64_t *)(v11 - 16);
        else
          v56 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFC000 | 8);
        v108 = *v56;
        v109 = v11;
        v110 = v11 + 1280;
        v28 = v55(&v108);
      }
      *(_QWORD *)&v103 = v20 | 0xF8;
      *((_QWORD *)&v103 + 1) = v16;
      v105 = v111;
      v104 = 1;
      v106 = v112;
      if (v12)
      {
        do
          v29 = __ldaxr(v12);
        while (__stlxr(v29 + 1, v12));
      }
      v102 = v12;
      v24 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v8, (JSC::VM *)v28, &v103, v10, (uint64_t *)&v107, &v102, a7, a8);
      v30 = v102;
      v102 = 0;
      if (v30)
      {
        do
        {
          v31 = __ldaxr(v30);
          v32 = --v31 == 0;
        }
        while (__stlxr(v31, v30));
        goto LABEL_50;
      }
    }
    v36 = (unint64_t)v107;
    v107 = 0;
    if (v36)
    {
      WTF::fastFree(v36, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      if (!v12)
        return v24;
      goto LABEL_89;
    }
LABEL_88:
    if (!v12)
      return v24;
    goto LABEL_89;
  }
  v24 = 2;
  if (!v12)
    return v24;
  do
  {
LABEL_89:
    v52 = __ldaxr(v12);
    v53 = v52 - 1;
  }
  while (__stlxr(v53, v12));
  if (!v53)
  {
    atomic_store(1u, v12);
    WTF::fastFree((unint64_t)v12, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  }
  return v24;
}

uint64_t operationWasmArrayNewData(JSC::Wasm *this, JSC::Wasm::Instance *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)this + 1) + 40) = vars0;
  return JSC::Wasm::arrayNewData(this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t operationWasmArrayNewElem(JSC::Wasm *this, JSC::Wasm::Instance *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)this + 1) + 40) = vars0;
  return JSC::Wasm::arrayNewElem(this, a2, a3, a4, a5, a6, a7, a8);
}

char **JSC::Wasm::OMGIRGenerator::emitArraySetUnchecked(JSC::Wasm::OMGIRGenerator *this, void *a2, JSC::B3::Value *a3, JSC::B3::Value *a4, JSC::B3::Value *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::B3::Value *v10;
  unint64_t v12;
  unsigned int v13;
  JSC::Wasm::TypeDefinition *v14;
  unsigned int v15;
  unsigned int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  unint64_t v21;
  int v22;
  unsigned __int8 v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t casual;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::B3::Value *v35;
  unint64_t v36;
  uint64_t v37;
  char **v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  JSC::B3::Value *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  JSC::B3::Value *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char **result;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  JSC::B3::Value *v67;
  unint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  JSC::B3::Value *v75;
  unint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char v87;
  char v88;
  uint64_t v89;
  JSC::B3::Value *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char **v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unsigned int v115;
  uint64_t v116;
  unint64_t *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unsigned int v121;
  unint64_t *v122;
  uint64_t v123;
  unint64_t v124;
  unsigned int *v125;
  WTF *v126;
  unint64_t CachedUnrolling;
  const JSC::Wasm::TypeDefinition *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t StatusReg;
  uint64_t v137;
  unint64_t v138;
  JSC::B3::Value *v139;
  unsigned __int8 v140;
  int v141;
  uint64_t v142;

  v8 = *((_QWORD *)this + 2);
  if (*(_DWORD *)(v8 + 100) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198D905D0);
  }
  v10 = a3;
  v12 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + 8 * a2);
  do
    v13 = __ldaxr((unsigned int *)v12);
  while (__stlxr(v13 + 1, (unsigned int *)v12));
  v14 = (JSC::Wasm::TypeDefinition *)v12;
  if (*(_DWORD *)(v12 + 32) == 4)
  {
    v125 = *(unsigned int **)(v12 + 8);
    v126 = *(WTF **)v125;
    v14 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v125 + 8) + 8 * v125[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v14))
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v12, (unint64_t)a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
      if ((_BYTE)a2)
      {
        v14 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v14 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v14, v126, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v12, v14, v128, v129, v130, v131, v132, v133);
      }
      v10 = a3;
    }
  }
  if (*((_DWORD *)v14 + 8) == 5)
    v14 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v14 + 1);
  do
  {
    v15 = __ldaxr((unsigned int *)v12);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, (unsigned int *)v12));
  if (!v16)
  {
    atomic_store(1u, (unsigned int *)v12);
    WTF::fastFree(v12, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  }
  if (*((_BYTE *)this + 32) == 1 || *(_BYTE *)(*((_QWORD *)this + 2) + 112))
    v17 = 579;
  else
    v17 = 67;
  v18 = *((_QWORD *)v14 + 1);
  v19 = *((_QWORD *)this + 11);
  v20 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v21 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v21 = 0;
  v22 = *(_DWORD *)(v18 + 16);
  v23 = *(_BYTE *)v18;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v24 = *(_QWORD *)(StatusReg + 752);
  if (v24)
  {
    v25 = (_BYTE *)(v24 + 9040);
    *(_BYTE *)(v24 + 9040) = 1;
    v26 = *(unsigned int *)(v24 + 9056);
    if ((_DWORD)v26)
    {
      *(_DWORD *)(v24 + 9056) = v26 - *(_DWORD *)(v24 + 9060);
      casual = *(_QWORD *)(v24 + 9048) - v26;
LABEL_19:
      *v25 = 0;
      goto LABEL_20;
    }
    v28 = *(_QWORD *)(v24 + 9080);
    v29 = *(_QWORD *)(v24 + 9064);
    if (v28)
    {
LABEL_18:
      v30 = __clz(v28);
      *(_QWORD *)(v24 + 9080) = v28 & ~(0x8000000000000000 >> v30);
      casual = v29 + 16 * v30;
      goto LABEL_19;
    }
    if (*(_BYTE *)(v24 + 9045) == 6)
    {
      v103 = *(_DWORD *)(v24 + 9076);
      v104 = *(unsigned int *)(v24 + 9072);
      if (v104 < v103)
      {
        *(_QWORD *)&v25[8 * v104 + 56] = 0;
        v105 = (unint64_t *)(v24 + 8 * v104 + 9104);
        v106 = v103 - 1 - v104;
        while (v106)
        {
          v29 += 1024;
          v108 = *v105++;
          v107 = v108;
          LODWORD(v104) = v104 + 1;
          --v106;
          if (v108)
          {
            v28 = __rbit64(v107);
            *(_DWORD *)(v24 + 9072) = v104;
            *(_QWORD *)(v24 + 9064) = v29;
            v10 = a3;
            goto LABEL_18;
          }
        }
        *(_DWORD *)(v24 + 9072) = v103;
        v10 = a3;
      }
    }
    *v25 = 0;
  }
  casual = bmalloc_allocate_casual(72, 1);
LABEL_20:
  JSC::B3::Value::Value<>(casual, 0, v17, 2, 1, v21, (uint64_t)v10);
  *(_QWORD *)casual = off_1E357E4C8;
  *(_DWORD *)(casual + 40) = 64;
  *(_OWORD *)(casual + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(v20, (JSC::B3::Value *)casual);
  v142 = casual;
  v31 = (char **)(v19 + 8);
  v32 = *(unsigned int *)(v19 + 20);
  if ((_DWORD)v32 == *(_DWORD *)(v19 + 16))
  {
    v45 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31, v32 + 1, (unint64_t)&v142);
    v32 = *(unsigned int *)(v19 + 20);
    *(_QWORD *)(*(_QWORD *)(v19 + 8) + 8 * v32) = *(_QWORD *)v45;
    v33 = v142;
  }
  else
  {
    *(_QWORD *)&(*v31)[8 * v32] = casual;
    v33 = casual;
  }
  *(_DWORD *)(v19 + 20) = v32 + 1;
  *(_QWORD *)(v33 + 32) = v19;
  v34 = *((_QWORD *)this + 11);
  v35 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v36 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v36 = 0;
  v37 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v37 = off_1E357F5F0;
  *(_DWORD *)(v37 + 8) = -1;
  *(_WORD *)(v37 + 12) = 43;
  *(_DWORD *)(v37 + 16) = 2;
  *(_BYTE *)(v37 + 20) = 1;
  *(_QWORD *)(v37 + 24) = v36;
  *(_QWORD *)(v37 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v37, 1, (uint64_t)a4);
  JSC::B3::Procedure::addValueImpl(v35, (JSC::B3::Value *)v37);
  v142 = v37;
  v38 = (char **)(v34 + 8);
  v39 = *(unsigned int *)(v34 + 20);
  if ((_DWORD)v39 == *(_DWORD *)(v34 + 16))
  {
    v46 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v38, v39 + 1, (unint64_t)&v142);
    v39 = *(unsigned int *)(v34 + 20);
    *(_QWORD *)(*(_QWORD *)(v34 + 8) + 8 * v39) = *(_QWORD *)v46;
    v40 = v142;
  }
  else
  {
    *(_QWORD *)&(*v38)[8 * v39] = v37;
    v40 = v37;
  }
  *(_DWORD *)(v34 + 20) = v39 + 1;
  *(_QWORD *)(v40 + 32) = v34;
  if (*(_QWORD *)this)
    v41 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v41 = 0;
  v42 = *((_QWORD *)this + 11);
  v43 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (v22 == 1 && (v23 + 9) < 2u)
  {
    v44 = 4;
  }
  else
  {
    v44 = 4;
    switch(v23)
    {
      case 0xFBu:
      case 0xFCu:
      case 0xFEu:
        goto LABEL_35;
      case 0xFDu:
      case 0xFFu:
        break;
      default:
        if (v23 - 227 >= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x198D905A8);
        }
LABEL_35:
        v44 = 8;
        break;
    }
  }
  v138 = v41;
  v47 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 2u, v44, 0, 0);
  v139 = v43;
  if (*(_QWORD *)this)
    v48 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v48 = 0;
  v49 = *((_QWORD *)this + 11);
  v50 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  v140 = v23;
  v141 = v22;
  v137 = v47;
  if (v22)
  {
    if (v23 == 248)
    {
      v51 = 1;
    }
    else
    {
      if (v23 != 247)
      {
        __break(0xC471u);
        JUMPOUT(0x198D90588);
      }
      v51 = 2;
    }
  }
  else
  {
    v51 = 4;
    switch(v23)
    {
      case 0xFBu:
        v51 = 16;
        break;
      case 0xFCu:
      case 0xFEu:
        goto LABEL_46;
      case 0xFDu:
      case 0xFFu:
        break;
      default:
        if (v23 - 227 >= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x198D905C8);
        }
LABEL_46:
        v51 = 8;
        break;
    }
  }
  v52 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 2u, v51, 0, 0);
  v53 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v53 = off_1E357F5F0;
  *(_DWORD *)(v53 + 8) = -1;
  *(_WORD *)(v53 + 12) = 16;
  *(_DWORD *)(v53 + 16) = 2;
  *(_BYTE *)(v53 + 20) = 2;
  *(_QWORD *)(v53 + 24) = v48;
  *(_QWORD *)(v53 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v53, 2, v37, v52);
  JSC::B3::Procedure::addValueImpl(v50, (JSC::B3::Value *)v53);
  v142 = v53;
  v54 = (char **)(v49 + 8);
  v55 = *(unsigned int *)(v49 + 20);
  if ((_DWORD)v55 == *(_DWORD *)(v49 + 16))
  {
    v81 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v54, v55 + 1, (unint64_t)&v142);
    v55 = *(unsigned int *)(v49 + 20);
    *(_QWORD *)(*(_QWORD *)(v49 + 8) + 8 * v55) = *(_QWORD *)v81;
    v56 = v142;
  }
  else
  {
    *(_QWORD *)&(*v54)[8 * v55] = v53;
    v56 = v53;
  }
  *(_DWORD *)(v49 + 20) = v55 + 1;
  *(_QWORD *)(v56 + 32) = v49;
  v57 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v57 = off_1E357F5F0;
  *(_DWORD *)(v57 + 8) = -1;
  *(_WORD *)(v57 + 12) = 14;
  *(_DWORD *)(v57 + 16) = 2;
  *(_BYTE *)(v57 + 20) = 2;
  *(_QWORD *)(v57 + 24) = v138;
  *(_QWORD *)(v57 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v57, 2, v137, v53);
  JSC::B3::Procedure::addValueImpl(v139, (JSC::B3::Value *)v57);
  v142 = v57;
  v58 = (_QWORD *)(v42 + 8);
  v59 = *(unsigned int *)(v42 + 20);
  if ((_DWORD)v59 == *(_DWORD *)(v42 + 16))
  {
    v82 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v42 + 8), v59 + 1, (unint64_t)&v142);
    v59 = *(unsigned int *)(v42 + 20);
    *(_QWORD *)(*(_QWORD *)(v42 + 8) + 8 * v59) = *(_QWORD *)v82;
    v60 = v142;
  }
  else
  {
    *(_QWORD *)(*v58 + 8 * v59) = v57;
    v60 = v57;
  }
  *(_DWORD *)(v42 + 20) = v59 + 1;
  *(_QWORD *)(v60 + 32) = v42;
  v61 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v61 = off_1E357F5F0;
  *(_DWORD *)(v61 + 8) = -1;
  *(_WORD *)(v61 + 12) = 14;
  *(_DWORD *)(v61 + 16) = 2;
  *(_BYTE *)(v61 + 20) = 2;
  *(_QWORD *)(v61 + 24) = v138;
  *(_QWORD *)(v61 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v61, 2, casual, v57);
  result = (char **)JSC::B3::Procedure::addValueImpl(v139, (JSC::B3::Value *)v61);
  v142 = v61;
  v63 = *(unsigned int *)(v42 + 20);
  if ((_DWORD)v63 == *(_DWORD *)(v42 + 16))
  {
    result = (char **)WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v42 + 8), v63 + 1, (unint64_t)&v142);
    v63 = *(unsigned int *)(v42 + 20);
    *(_QWORD *)(*(_QWORD *)(v42 + 8) + 8 * v63) = *result;
    v64 = v142;
  }
  else
  {
    *(_QWORD *)(*v58 + 8 * v63) = v61;
    v64 = v61;
  }
  *(_DWORD *)(v42 + 20) = v63 + 1;
  *(_QWORD *)(v64 + 32) = v42;
  if (v141 == 1)
  {
    if (v140 == 247)
    {
      if (*((_BYTE *)this + 32) == 1 || *(_BYTE *)(*((_QWORD *)this + 2) + 112))
        v65 = 581;
      else
        v65 = 69;
      v66 = *((_QWORD *)this + 11);
      v67 = (JSC::B3::Value *)*((_QWORD *)this + 7);
      if (*(_QWORD *)this)
        v68 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
      else
        v68 = 0;
      v69 = *(_QWORD *)(StatusReg + 752);
      if (!v69)
        goto LABEL_159;
      v70 = (_BYTE *)(v69 + 9040);
      *(_BYTE *)(v69 + 9040) = 1;
      v97 = *(unsigned int *)(v69 + 9056);
      if ((_DWORD)v97)
      {
        *(_DWORD *)(v69 + 9056) = v97 - *(_DWORD *)(v69 + 9060);
        v72 = *(_QWORD *)(v69 + 9048) - v97;
        goto LABEL_101;
      }
      v98 = *(_QWORD *)(v69 + 9080);
      v99 = *(_QWORD *)(v69 + 9064);
      if (v98)
      {
LABEL_100:
        v100 = __clz(v98);
        *(_QWORD *)(v69 + 9080) = v98 & ~(0x8000000000000000 >> v100);
        v72 = v99 + 16 * v100;
        goto LABEL_101;
      }
      if (*(_BYTE *)(v69 + 9045) == 6)
      {
        v121 = *(_DWORD *)(v69 + 9076);
        v116 = *(unsigned int *)(v69 + 9072);
        if (v116 < v121)
        {
          *(_QWORD *)&v70[8 * v116 + 56] = 0;
          v122 = (unint64_t *)(v69 + 8 * v116 + 9104);
          v123 = v121 - 1 - v116;
          while (v123)
          {
            v99 += 1024;
            v124 = *v122++;
            v119 = v124;
            LODWORD(v116) = v116 + 1;
            --v123;
            if (v124)
            {
LABEL_135:
              v98 = __rbit64(v119);
              *(_DWORD *)(v69 + 9072) = v116;
              *(_QWORD *)(v69 + 9064) = v99;
              goto LABEL_100;
            }
          }
          *(_DWORD *)(v69 + 9072) = v121;
        }
      }
    }
    else
    {
      if (v140 != 248)
        return result;
      if (*((_BYTE *)this + 32) == 1 || *(_BYTE *)(*((_QWORD *)this + 2) + 112))
        v65 = 580;
      else
        v65 = 68;
      v66 = *((_QWORD *)this + 11);
      v67 = (JSC::B3::Value *)*((_QWORD *)this + 7);
      if (*(_QWORD *)this)
        v68 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
      else
        v68 = 0;
      v69 = *(_QWORD *)(StatusReg + 752);
      if (!v69)
        goto LABEL_159;
      v70 = (_BYTE *)(v69 + 9040);
      *(_BYTE *)(v69 + 9040) = 1;
      v71 = *(unsigned int *)(v69 + 9056);
      if ((_DWORD)v71)
      {
        *(_DWORD *)(v69 + 9056) = v71 - *(_DWORD *)(v69 + 9060);
        v72 = *(_QWORD *)(v69 + 9048) - v71;
LABEL_101:
        *v70 = 0;
LABEL_102:
        *(_QWORD *)v72 = off_1E357F5F0;
        *(_DWORD *)(v72 + 8) = -1;
        *(_WORD *)(v72 + 12) = v65;
        *(_DWORD *)(v72 + 16) = 0;
        *(_BYTE *)(v72 + 20) = 2;
        *(_QWORD *)(v72 + 24) = v68;
        *(_QWORD *)(v72 + 32) = 0;
        JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v72, 2, (uint64_t)a5, v61);
        *(_QWORD *)v72 = off_1E357E4C8;
        *(_DWORD *)(v72 + 40) = 0;
        *(_OWORD *)(v72 + 44) = xmmword_19914F690;
        JSC::B3::Procedure::addValueImpl(v67, (JSC::B3::Value *)v72);
        v142 = v72;
        result = (char **)(v66 + 8);
        v101 = *(unsigned int *)(v66 + 20);
        if ((_DWORD)v101 == *(_DWORD *)(v66 + 16))
        {
          result = (char **)WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v101 + 1, (unint64_t)&v142);
          v101 = *(unsigned int *)(v66 + 20);
          *(_QWORD *)(*(_QWORD *)(v66 + 8) + 8 * v101) = *result;
          v72 = v142;
        }
        else
        {
          *(_QWORD *)&(*result)[8 * v101] = v72;
        }
        *(_DWORD *)(v66 + 20) = v101 + 1;
        *(_QWORD *)(v72 + 32) = v66;
        return result;
      }
      v98 = *(_QWORD *)(v69 + 9080);
      v99 = *(_QWORD *)(v69 + 9064);
      if (v98)
        goto LABEL_100;
      if (*(_BYTE *)(v69 + 9045) == 6)
      {
        v115 = *(_DWORD *)(v69 + 9076);
        v116 = *(unsigned int *)(v69 + 9072);
        if (v116 < v115)
        {
          *(_QWORD *)&v70[8 * v116 + 56] = 0;
          v117 = (unint64_t *)(v69 + 8 * v116 + 9104);
          v118 = v115 - 1 - v116;
          while (v118)
          {
            v99 += 1024;
            v120 = *v117++;
            v119 = v120;
            LODWORD(v116) = v116 + 1;
            --v118;
            if (v120)
              goto LABEL_135;
          }
          *(_DWORD *)(v69 + 9072) = v115;
        }
      }
    }
    *v70 = 0;
LABEL_159:
    v72 = bmalloc_allocate_casual(80, 1);
    goto LABEL_102;
  }
  if (*((_BYTE *)this + 32) == 1 || *(_BYTE *)(*((_QWORD *)this + 2) + 112))
    v73 = 582;
  else
    v73 = 70;
  v74 = *((_QWORD *)this + 11);
  v75 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v76 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v76 = 0;
  v77 = *(_QWORD *)(StatusReg + 752);
  if (!v77)
    goto LABEL_148;
  v78 = (_BYTE *)(v77 + 9040);
  *(_BYTE *)(v77 + 9040) = 1;
  v79 = *(unsigned int *)(v77 + 9056);
  if (!(_DWORD)v79)
  {
    v83 = *(_QWORD *)(v77 + 9080);
    v84 = *(_QWORD *)(v77 + 9064);
    if (v83)
    {
LABEL_74:
      v85 = __clz(v83);
      *(_QWORD *)(v77 + 9080) = v83 & ~(0x8000000000000000 >> v85);
      v80 = v84 + 16 * v85;
      goto LABEL_75;
    }
    if (*(_BYTE *)(v77 + 9045) == 6)
    {
      v109 = *(_DWORD *)(v77 + 9076);
      v110 = *(unsigned int *)(v77 + 9072);
      if (v110 < v109)
      {
        *(_QWORD *)&v78[8 * v110 + 56] = 0;
        v111 = (unint64_t *)(v77 + 8 * v110 + 9104);
        v112 = v109 - 1 - v110;
        while (v112)
        {
          v84 += 1024;
          v114 = *v111++;
          v113 = v114;
          LODWORD(v110) = v110 + 1;
          --v112;
          if (v114)
          {
            v83 = __rbit64(v113);
            *(_DWORD *)(v77 + 9072) = v110;
            *(_QWORD *)(v77 + 9064) = v84;
            goto LABEL_74;
          }
        }
        *(_DWORD *)(v77 + 9072) = v109;
      }
    }
    *v78 = 0;
LABEL_148:
    v80 = bmalloc_allocate_casual(80, 1);
    goto LABEL_76;
  }
  *(_DWORD *)(v77 + 9056) = v79 - *(_DWORD *)(v77 + 9060);
  v80 = *(_QWORD *)(v77 + 9048) - v79;
LABEL_75:
  *v78 = 0;
LABEL_76:
  *(_QWORD *)v80 = off_1E357F5F0;
  *(_DWORD *)(v80 + 8) = -1;
  *(_WORD *)(v80 + 12) = v73;
  *(_DWORD *)(v80 + 16) = 0;
  *(_BYTE *)(v80 + 20) = 2;
  *(_QWORD *)(v80 + 24) = v76;
  *(_QWORD *)(v80 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v80, 2, (uint64_t)a5, v61);
  *(_QWORD *)v80 = off_1E357E4C8;
  *(_DWORD *)(v80 + 40) = 0;
  *(_OWORD *)(v80 + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(v75, (JSC::B3::Value *)v80);
  v142 = v80;
  result = (char **)(v74 + 8);
  v86 = *(unsigned int *)(v74 + 20);
  if ((_DWORD)v86 == *(_DWORD *)(v74 + 16))
  {
    result = (char **)WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v86 + 1, (unint64_t)&v142);
    v86 = *(unsigned int *)(v74 + 20);
    *(_QWORD *)(*(_QWORD *)(v74 + 8) + 8 * v86) = *result;
    v80 = v142;
  }
  else
  {
    *(_QWORD *)&(*result)[8 * v86] = v80;
  }
  *(_DWORD *)(v74 + 20) = v86 + 1;
  *(_QWORD *)(v80 + 32) = v74;
  v87 = v140;
  if (v141)
    v87 = -1;
  if (BYTE1(dword_1ECF4C7B0))
    v88 = 29;
  else
    v88 = 17;
  if ((v88 + v87) <= 1u)
  {
    v89 = *((_QWORD *)this + 11);
    v90 = (JSC::B3::Value *)*((_QWORD *)this + 7);
    if (*(_QWORD *)this)
      v91 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
    else
      v91 = 0;
    v92 = *((_QWORD *)this + 59);
    v93 = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)(v93 + 8) = -1;
    *(_WORD *)(v93 + 12) = 67;
    *(_DWORD *)(v93 + 16) = 2;
    *(_BYTE *)(v93 + 20) = 1;
    *(_QWORD *)(v93 + 24) = v91;
    *(_QWORD *)(v93 + 32) = 0;
    *(_QWORD *)(v93 + 64) = v92;
    *(_QWORD *)v93 = off_1E357E4C8;
    *(_DWORD *)(v93 + 40) = 24;
    *(_OWORD *)(v93 + 44) = xmmword_19914F690;
    JSC::B3::Procedure::addValueImpl(v90, (JSC::B3::Value *)v93);
    v142 = v93;
    v94 = (char **)(v89 + 8);
    v95 = *(unsigned int *)(v89 + 20);
    if ((_DWORD)v95 == *(_DWORD *)(v89 + 16))
    {
      v102 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v94, v95 + 1, (unint64_t)&v142);
      v95 = *(unsigned int *)(v89 + 20);
      *(_QWORD *)(*(_QWORD *)(v89 + 8) + 8 * v95) = *(_QWORD *)v102;
      v96 = v142;
    }
    else
    {
      *(_QWORD *)&(*v94)[8 * v95] = v93;
      v96 = v93;
    }
    *(_DWORD *)(v89 + 20) = v95 + 1;
    *(_QWORD *)(v96 + 32) = v89;
    return (char **)JSC::Wasm::OMGIRGenerator::emitWriteBarrier(this, a3, (JSC::B3::Value *)v93);
  }
  return result;
}

JSC::B3::Value *JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(uint64_t a1, JSC::B3::Value *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int16 v11;
  JSC::B3::Value *Space;
  char **v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  char *v17;
  JSC::B3::Value *v18;

  v11 = a3;
  Space = (JSC::B3::Value *)JSC::B3::Value::allocateSpace(a3, 40);
  JSC::B3::Value::Value<JSC::B3::Value*>((uint64_t)Space, v11, 2, a4, a5, a6);
  JSC::B3::Procedure::addValueImpl(a2, Space);
  v18 = Space;
  v13 = (char **)(a1 + 8);
  v14 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(a1 + 16))
  {
    v17 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v18);
    v14 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v14) = *(_QWORD *)v17;
    v15 = v18;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = Space;
    v15 = Space;
  }
  *(_DWORD *)(a1 + 20) = v14 + 1;
  *((_QWORD *)v15 + 4) = a1;
  return Space;
}

uint64_t operationWasmArrayFill(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t __c, size_t __len)
{
  unint64_t v5;
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) = vars0;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v5 = 0;
  }
  else if (*(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    v5 = 0;
  }
  else
  {
    v5 = a2;
  }
  if (__CFADD__(a3, (_DWORD)__len) || *(_QWORD *)(v5 + 56) < (unint64_t)(a3 + __len))
    return 0;
  JSC::JSWebAssemblyArray::fill(v5, a3, __c, __len);
  return 1;
}

uint64_t operationWasmArrayFillVector(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) = vars0;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v6 = 0;
  }
  else if (*(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    v6 = 0;
  }
  else
  {
    v6 = a2;
  }
  if (__CFADD__(a3, a6) || *(_QWORD *)(v6 + 56) < (unint64_t)(a3 + a6))
    return 0;
  if (!a6)
    return 1;
  v8 = *(_QWORD *)(v6 + 64);
  if (v8)
    v9 = v8 + 8;
  else
    v9 = 0;
  v10 = (_QWORD *)(v9 + 16 * a3);
  v11 = a6 + 1;
  result = 1;
  do
  {
    *v10 = a4;
    v10[1] = a5;
    v10 += 2;
    --v11;
  }
  while (v11 > 1);
  return result;
}

uint64_t operationWasmArrayCopy(int a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5, unsigned int a6)
{
  JSC::JSWebAssemblyArray *v6;

  if ((a2 & 0xFFFE000000000002) != 0)
  {
    a2 = 0;
  }
  else if (*(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    a2 = 0;
  }
  if (((unint64_t)a4 & 0xFFFE000000000002) != 0)
  {
    v6 = 0;
  }
  else if (a4[5] <= 0x16u)
  {
    v6 = 0;
  }
  else
  {
    v6 = (JSC::JSWebAssemblyArray *)a4;
  }
  if (__CFADD__(a3, a6)
    || *(_QWORD *)(a2 + 56) < (unint64_t)(a3 + a6)
    || __CFADD__(a5, a6)
    || *((_QWORD *)v6 + 7) < (unint64_t)(a5 + a6))
  {
    return 0;
  }
  JSC::JSWebAssemblyArray::copy(v6, (JSC::JSWebAssemblyArray *)a2, a3, a5, a6);
  return 1;
}

uint64_t JSC::Wasm::OMGIRGenerator::callWasmOperation<unsigned long long (*)(JSC::Wasm::Instance *,long long,unsigned int,unsigned int,unsigned int,unsigned int),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Const32Value *,JSC::B3::Value *,JSC::B3::Value *>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  JSC::B3::Value *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  char *v36;
  char **v37;
  JSC::B3::Value *v39;
  uint64_t v40;

  v16 = (JSC::B3::Value *)a1[7];
  if (*a1)
    v17 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v17 = 0;
  v18 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v18 + 8) = -1;
  *(_WORD *)(v18 + 12) = 4;
  *(_DWORD *)(v18 + 16) = 2;
  *(_BYTE *)(v18 + 20) = 0;
  *(_QWORD *)(v18 + 24) = v17;
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v18 + 40) = a3;
  *(_QWORD *)v18 = off_1E357E2D0;
  JSC::B3::Procedure::addValueImpl(v16, (JSC::B3::Value *)v18);
  v40 = v18;
  v19 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v19 == *(_DWORD *)(a2 + 16))
  {
    v35 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a2 + 8), v19 + 1, (unint64_t)&v40);
    v19 = *(unsigned int *)(a2 + 20);
    *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v19) = *(_QWORD *)v35;
    v20 = v40;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v19) = v18;
    v20 = v18;
  }
  v21 = a8;
  v22 = a7;
  v23 = a6;
  v37 = (char **)(a2 + 8);
  *(_DWORD *)(a2 + 20) = v19 + 1;
  *(_QWORD *)(v20 + 32) = a2;
  if (*a1)
    v24 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v24 = 0;
  v39 = (JSC::B3::Value *)a1[7];
  v25 = *a4;
  v26 = *a5;
  v27 = *v23;
  v28 = *v22;
  v29 = *v21;
  v30 = *a9;
  v31 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v31 = off_1E357F5F0;
  *(_DWORD *)(v31 + 8) = -1;
  *(_WORD *)(v31 + 12) = 82;
  *(_DWORD *)(v31 + 16) = 1;
  *(_BYTE *)(v31 + 20) = 4;
  *(_QWORD *)(v31 + 24) = v24;
  *(_QWORD *)(v31 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>((JSC::B3::Value *)v31, 4, v18, v25, v26, v27, v28, v29, v30);
  *(_QWORD *)v31 = &unk_1E357CF78;
  *(_OWORD *)(v31 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v31 + 56) = 0xFFFFFFFF00000000;
  if (!*(_DWORD *)(v31 + 76))
  {
    __break(0xC471u);
    JUMPOUT(0x198D90AE8);
  }
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v31);
  v40 = v31;
  v32 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v32 == *(_DWORD *)(a2 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v37, v32 + 1, (unint64_t)&v40);
    v32 = *(unsigned int *)(a2 + 20);
    *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v32) = *(_QWORD *)v36;
    v33 = v40;
  }
  else
  {
    *(_QWORD *)&(*v37)[8 * v32] = v31;
    v33 = v31;
  }
  *(_DWORD *)(a2 + 20) = v32 + 1;
  *(_QWORD *)(v33 + 32) = a2;
  return v31;
}

BOOL operationWasmArrayInitElem(JSC::Wasm *a1, unint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::arrayInitElem(a1, a2, a3, a4, a5, a6, a7, a8);
}

BOOL operationWasmArrayInitData(JSC::Wasm *a1, unint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  return JSC::Wasm::arrayInitData(a1, a2, a3, a4, a5, a6);
}

uint64_t JSC::Wasm::OMGIRGenerator::callWasmOperation<long long (*)(JSC::Wasm::Instance *,unsigned int),JSC::B3::Value *,JSC::B3::Const32Value *>(_QWORD *a1, uint64_t a2, int a3, uint64_t *a4, uint64_t *a5)
{
  JSC::B3::Value *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  char *v26;
  uint64_t v27;

  v10 = (JSC::B3::Value *)a1[7];
  if (*a1)
    v11 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v11 = 0;
  v12 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v12 + 8) = -1;
  *(_WORD *)(v12 + 12) = 4;
  *(_DWORD *)(v12 + 16) = 2;
  *(_BYTE *)(v12 + 20) = 0;
  *(_QWORD *)(v12 + 24) = v11;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = operationWasmStructNewEmpty;
  *(_QWORD *)v12 = off_1E357E2D0;
  JSC::B3::Procedure::addValueImpl(v10, (JSC::B3::Value *)v12);
  v27 = v12;
  v13 = (_QWORD *)(a2 + 8);
  v14 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(a2 + 16))
  {
    v25 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a2 + 8), v14 + 1, (unint64_t)&v27);
    v14 = *(unsigned int *)(a2 + 20);
    *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v14) = *(_QWORD *)v25;
    v15 = v27;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v14) = v12;
    v15 = v12;
  }
  *(_DWORD *)(a2 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = a2;
  if (*a1)
    v16 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v16 = 0;
  v17 = (JSC::B3::Value *)a1[7];
  v18 = *a4;
  v19 = *a5;
  v20 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v20 = off_1E357F5F0;
  *(_DWORD *)(v20 + 8) = -1;
  *(_WORD *)(v20 + 12) = 82;
  *(_DWORD *)(v20 + 16) = a3;
  *(_BYTE *)(v20 + 20) = 4;
  *(_QWORD *)(v20 + 24) = v16;
  *(_QWORD *)(v20 + 32) = 0;
  v21 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v20);
  v21[2] = v12;
  *v21 = v21 + 2;
  v21[3] = v18;
  v21[4] = v19;
  v21[1] = 0x300000003;
  *(_QWORD *)v20 = &unk_1E357CF78;
  *(_OWORD *)(v20 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v20 + 56) = 0xFFFFFFFF00000000;
  if (!*(_DWORD *)(v20 + 76))
  {
    __break(0xC471u);
    JUMPOUT(0x198D90D64);
  }
  JSC::B3::Procedure::addValueImpl(v17, (JSC::B3::Value *)v20);
  v27 = v20;
  v22 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v22 == *(_DWORD *)(a2 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a2 + 8), v22 + 1, (unint64_t)&v27);
    v22 = *(unsigned int *)(a2 + 20);
    *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v22) = *(_QWORD *)v26;
    v23 = v27;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v22) = v20;
    v23 = v20;
  }
  *(_DWORD *)(a2 + 20) = v22 + 1;
  *(_QWORD *)(v23 + 32) = a2;
  return v20;
}

uint64_t operationWasmStructNewEmpty(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t (*v29)(_QWORD *);
  _QWORD *v30;
  WTF *v31;
  _QWORD var38[8];

  *(_QWORD *)(*(_QWORD *)(result + 8) + 40) = var38[7];
  v8 = *(_QWORD *)(*(_QWORD *)(result + 56) + 8);
  if (*(_DWORD *)(v8 + 284) <= a2)
  {
    __break(0xC471u);
    return result;
  }
  v10 = *(_QWORD *)(result + 24);
  v11 = *(_QWORD *)(result + 32);
  v12 = *(unsigned int **)(*(_QWORD *)(v8 + 272) + 8 * a2);
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = *(_QWORD *)(v11 + 1424);
  if ((v14 & 1) != 0)
  {
    v29 = *(uint64_t (**)(_QWORD *))(v14 & 0xFFFFFFFFFFFFFFFCLL);
    v30 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v11 & 8) != 0)
      v30 = (_QWORD *)(v11 - 16);
    var38[0] = *v30;
    var38[1] = v11;
    var38[2] = v11 + 1424;
    v14 = v29(var38);
    if (v12)
      goto LABEL_6;
  }
  else if (v12)
  {
    do
LABEL_6:
      v15 = __ldaxr(v12);
    while (__stlxr(v15 + 1, v12));
  }
  v31 = (WTF *)v12;
  v23 = JSC::JSWebAssemblyStruct::tryCreate(v11, v14, v10, a2, (const JSC::Wasm::Type *)&v31, a6, a7, a8);
  v24 = (unsigned int *)v31;
  v31 = 0;
  if (!v24)
    goto LABEL_10;
  do
  {
    v25 = __ldaxr(v24);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v24));
  if (!v26)
  {
    atomic_store(1u, v24);
    WTF::fastFree((unint64_t)v24, v16, v17, v18, v19, v20, v21, v22);
    if (v12)
      goto LABEL_11;
  }
  else
  {
LABEL_10:
    if (v12)
    {
      do
      {
LABEL_11:
        v27 = __ldaxr(v12);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v12));
      if (!v28)
      {
        atomic_store(1u, v12);
        WTF::fastFree((unint64_t)v12, v16, v17, v18, v19, v20, v21, v22);
      }
    }
  }
  if (v23)
    return v23;
  else
    return 2;
}

JSC::B3::Value *JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Kind,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Value *,int>(uint64_t a1, JSC::B3::Value *a2, __int16 a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  JSC::B3::Value *Space;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  char *v20;
  JSC::B3::Value *v21;

  Space = (JSC::B3::Value *)JSC::B3::Value::allocateSpace(a3, 64);
  v15 = JSC::B3::Value::Value<>((uint64_t)Space, 0, a3, a4, 1, a5, a6);
  *(_QWORD *)v15 = off_1E357E4C8;
  *(_DWORD *)(v15 + 40) = a7;
  *(_OWORD *)(v15 + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(a2, Space);
  v21 = Space;
  v16 = (char **)(a1 + 8);
  v17 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v17 == *(_DWORD *)(a1 + 16))
  {
    v20 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v16, v17 + 1, (unint64_t)&v21);
    v17 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v17) = *(_QWORD *)v20;
    v18 = v21;
  }
  else
  {
    *(_QWORD *)&(*v16)[8 * v17] = Space;
    v18 = Space;
  }
  *(_DWORD *)(a1 + 20) = v17 + 1;
  *((_QWORD *)v18 + 4) = a1;
  return Space;
}

char **JSC::Wasm::OMGIRGenerator::emitRefTestOrCast@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, signed int a5@<W4>, unsigned int a6@<W5>, WTF **a7@<X6>, uint64_t *a8@<X8>)
{
  JSC::B3::Procedure **v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  char **v22;
  uint64_t v23;
  uint64_t v24;
  WTF *PushVariable;
  uint64_t v26;
  JSC::B3::Value *v27;
  unint64_t v28;
  uint64_t v29;
  char **v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  JSC::B3::Value *v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  JSC::B3::Value *v44;
  unint64_t v45;
  uint64_t v46;
  char **v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  JSC::B3::Value *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  JSC::B3::Value *v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char **v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  JSC::B3::Value *v100;
  uint64_t v101;
  unint64_t v102;
  unsigned int v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  JSC::Wasm::TypeDefinition *v113;
  int v114;
  uint64_t v115;
  JSC::B3::Value *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  JSC::B3::Value *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  JSC::B3::Value *v130;
  unint64_t v131;
  uint64_t v132;
  int v133;
  char **v134;
  uint64_t v135;
  uint64_t v136;
  JSC::B3::Value *v137;
  uint64_t v138;
  JSC::B3::Value *v139;
  unint64_t v140;
  uint64_t v141;
  JSC::B3::Value *v142;
  char **v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  JSC::B3::Value *v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  char **v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  JSC::B3::Value *v156;
  unint64_t v157;
  uint64_t v158;
  char **v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  JSC::Wasm::TypeDefinition *v163;
  int v164;
  unsigned int v165;
  JSC::B3::Value *v166;
  uint64_t *v167;
  char *v168;
  char *v169;
  char *v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  char **v174;
  uint64_t v175;
  uint64_t v176;
  JSC::B3::Value *v177;
  uint64_t v178;
  _QWORD *v179;
  char **v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int *v184;
  unsigned int *v185;
  unsigned int v186;
  unsigned int v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  JSC::B3::Value *v191;
  uint64_t v192;
  uint64_t v193;
  char **v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  JSC::B3::Value *v198;
  unint64_t v199;
  JSC::B3::Value *v200;
  uint64_t v201;
  char **v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  JSC::B3::Value *v217;
  unint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  JSC::B3::Value *v223;
  JSC::B3::Value *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  JSC::B3::Value *v228;
  unint64_t v229;
  uint64_t v230;
  int v231;
  JSC::B3::Value *v232;
  char **v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  JSC::B3::Value *v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char **v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  _QWORD **v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  JSC::B3::Value *v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char **v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  unint64_t v279;
  JSC::B3::Value *v280;
  WTF *v281;
  uint64_t v282;
  JSC::B3::Value *v283;
  unint64_t v284;
  uint64_t v285;
  char **result;
  uint64_t v287;
  char *v288;
  char *v289;
  char *v290;
  JSC::B3::Value *v291;
  unint64_t v292;
  uint64_t v293;
  int v294;
  char **v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  JSC::B3::Value *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  JSC::B3::Value *v304;
  unint64_t v305;
  uint64_t v306;
  int v307;
  char **v308;
  uint64_t v309;
  uint64_t v310;
  JSC::B3::Value *v311;
  uint64_t v312;
  JSC::B3::Value *v313;
  unint64_t v314;
  uint64_t v315;
  JSC::B3::Value *v316;
  char **v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t *v320;
  uint64_t v321;
  JSC::B3::Value *v322;
  unint64_t v323;
  uint64_t v324;
  int v325;
  char **v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  JSC::B3::Value *v330;
  unint64_t v331;
  uint64_t v332;
  char **v333;
  uint64_t v334;
  uint64_t v335;
  unsigned int v336;
  char *v337;
  char *v338;
  char *v339;
  char *v340;
  char *v341;
  char *v342;
  char *v343;
  char *v344;
  char *v345;
  char *v346;
  char *v347;
  char *v348;
  unint64_t v349;
  uint64_t v350;
  _QWORD *v351;
  char **v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unsigned int *v357;
  unsigned int *v358;
  unsigned int v359;
  unsigned int v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  char *v366;
  uint64_t v367;
  JSC::B3::Value *v368;
  unint64_t v369;
  uint64_t v370;
  int v371;
  char **v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  JSC::B3::Value *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t *v379;
  uint64_t v380;
  JSC::B3::Value *v381;
  unint64_t v382;
  uint64_t v383;
  int v384;
  _QWORD *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  JSC::B3::Value *v393;
  unint64_t v394;
  uint64_t v395;
  JSC::B3::Value *v396;
  char **v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t *v400;
  uint64_t *v401;
  uint64_t v402;
  JSC::B3::Value *v403;
  unint64_t v404;
  uint64_t v405;
  int v406;
  _QWORD *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  JSC::B3::Value *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t *v414;
  uint64_t v415;
  uint64_t *v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  _QWORD **v421;
  uint64_t v422;
  _QWORD *v423;
  uint64_t v424;
  _QWORD *v425;
  uint64_t v426;
  _QWORD *v427;
  uint64_t v428;
  JSC::B3::Value *v429;
  unint64_t v430;
  uint64_t v431;
  int v432;
  _QWORD *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  JSC::B3::Value *v437;
  int v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  JSC::B3::Value *v442;
  unint64_t v443;
  uint64_t v444;
  JSC::B3::Value *v445;
  char **v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t *v449;
  uint64_t v450;
  uint64_t *v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  uint64_t v455;
  uint64_t v456;
  _QWORD *v457;
  uint64_t v458;
  _QWORD *v459;
  uint64_t v460;
  _QWORD *v461;
  uint64_t v462;
  JSC::B3::Value *v463;
  unint64_t v464;
  uint64_t v465;
  JSC::B3::Value *v466;
  char **v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t *v470;
  uint64_t v471;
  uint64_t *v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  _QWORD *v481;
  uint64_t v482;
  _QWORD *v483;
  uint64_t v484;
  _QWORD *v485;
  uint64_t v486;
  uint64_t v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t v490;
  _QWORD *v491;
  uint64_t v492;
  char *v493;
  char *v494;
  char *v495;
  _QWORD *v496;
  uint64_t v497;
  _QWORD *v498;
  uint64_t v499;
  JSC::B3::Value *v500;
  unint64_t v501;
  uint64_t v502;
  int v503;
  _QWORD *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  JSC::B3::Value *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t *v511;
  uint64_t v512;
  JSC::B3::Value *v513;
  unint64_t v514;
  uint64_t v515;
  int v516;
  char **v517;
  uint64_t v518;
  uint64_t v519;
  char *v520;
  char *v521;
  char *v522;
  char *v523;
  char *v524;
  char *v525;
  char *v526;
  char *v527;
  char *v528;
  char *v529;
  char *v530;
  char *v531;
  char *v532;
  char *v533;
  char *v534;
  char *v535;
  char *v536;
  char *v537;
  char *v538;
  char *v539;
  char *v540;
  _QWORD *v541;
  _QWORD *v542;
  _QWORD *v543;
  _QWORD *v544;
  _QWORD *v545;
  _QWORD *v546;
  _QWORD *v547;
  _QWORD *v548;
  _QWORD *v549;
  _QWORD *v550;
  _QWORD *v551;
  _QWORD *v552;
  _QWORD *v553;
  _QWORD *v554;
  _QWORD *v555;
  _QWORD *v556;
  _QWORD *v557;
  unsigned int *v558;
  WTF *v559;
  unint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  unint64_t CachedUnrolling;
  uint64_t v568;
  uint64_t v569;
  const JSC::Wasm::Type *v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  char v574;
  unsigned int *v575;
  WTF *v576;
  unint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  unint64_t v584;
  uint64_t v585;
  uint64_t v586;
  const JSC::Wasm::Type *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  char v591;
  const JSC::Wasm::TypeDefinition *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  const JSC::Wasm::TypeDefinition *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t *v604;
  uint64_t v605;
  WTF **v607;
  uint64_t *v610;
  uint64_t *v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t *v615;
  uint64_t *v616;
  uint64_t v617;
  uint64_t *v618;
  char v619;
  uint64_t v620;
  char v621;

  if (a2)
  {
    v11 = (JSC::B3::Procedure **)(a1 + 56);
    v12 = JSC::B3::Procedure::addBlock(a8, *(JSC::B3::Procedure **)(a1 + 56), 1.0);
    v14 = JSC::B3::Procedure::addBlock(v13, *v11, 1.0);
    v604 = (uint64_t *)(a1 + 56);
    v616 = JSC::B3::Procedure::addBlock(v15, *v11, 1.0);
    v605 = (uint64_t)v14;
    v610 = v14;
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 88);
    v18 = *(JSC::B3::Value **)(a1 + 56);
    if (*(_QWORD *)a1)
      v19 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
    else
      v19 = 0;
    v20 = WTF::fastMalloc((WTF *)0x30);
    v21 = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(v20 + 8) = -1;
    *(_WORD *)(v20 + 12) = 10;
    *(_DWORD *)(v20 + 16) = v21;
    *(_BYTE *)(v20 + 20) = 0;
    *(_QWORD *)(v20 + 24) = v19;
    *(_QWORD *)(v20 + 32) = 0;
    *(_QWORD *)v20 = off_1E357F0F8;
    *(_QWORD *)(v20 + 40) = a3;
    JSC::B3::Procedure::addValueImpl(v18, (JSC::B3::Value *)v20);
    v620 = v20;
    v22 = (char **)(v17 + 8);
    v23 = *(unsigned int *)(v17 + 20);
    if ((_DWORD)v23 == *(_DWORD *)(v17 + 16))
    {
      v341 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v22, v23 + 1, (unint64_t)&v620);
      v23 = *(unsigned int *)(v17 + 20);
      *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v23) = *(_QWORD *)v341;
      v24 = v620;
    }
    else
    {
      *(_QWORD *)&(*v22)[8 * v23] = v20;
      v24 = v20;
    }
    *(_DWORD *)(v17 + 20) = v23 + 1;
    *(_QWORD *)(v24 + 32) = v17;
    PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable(a1, *(_DWORD *)(v20 + 16));
    v26 = *(_QWORD *)(a1 + 88);
    v27 = *(JSC::B3::Value **)(a1 + 56);
    if (*(_QWORD *)a1)
      v28 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
    else
      v28 = 0;
    v29 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v29 + 8) = -1;
    *(_WORD *)(v29 + 12) = 9;
    *(_DWORD *)(v29 + 16) = 0;
    *(_BYTE *)(v29 + 20) = 1;
    *(_QWORD *)(v29 + 24) = v28;
    *(_QWORD *)(v29 + 32) = 0;
    *(_QWORD *)v29 = off_1E357F0F8;
    *(_QWORD *)(v29 + 40) = PushVariable;
    *(_QWORD *)(v29 + 48) = v20;
    JSC::B3::Procedure::addValueImpl(v27, (JSC::B3::Value *)v29);
    v620 = v29;
    v30 = (char **)(v26 + 8);
    v31 = *(unsigned int *)(v26 + 20);
    if ((_DWORD)v31 == *(_DWORD *)(v26 + 16))
    {
      v342 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30, v31 + 1, (unint64_t)&v620);
      v31 = *(unsigned int *)(v26 + 20);
      *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8 * v31) = *(_QWORD *)v342;
      v29 = v620;
    }
    else
    {
      *(_QWORD *)&(*v30)[8 * v31] = v29;
    }
    v32 = (uint64_t *)(v31 + 1);
    *(_DWORD *)(v26 + 20) = (_DWORD)v32;
    *(_QWORD *)(v29 + 32) = v26;
    *a7 = PushVariable;
    v604 = (uint64_t *)(a1 + 56);
    v12 = JSC::B3::Procedure::addBlock(v32, *(JSC::B3::Procedure **)(a1 + 56), 1.0);
    v616 = 0;
    v610 = 0;
    v605 = (uint64_t)v12;
  }
  v607 = a7;
  v617 = a1;
  v33 = JSC::B3::Procedure::addBlock(v16, *(JSC::B3::Procedure **)(a1 + 56), 1.0);
  v611 = JSC::B3::Procedure::addBlock(v34, *(JSC::B3::Procedure **)(a1 + 56), 1.0);
  v35 = *(_QWORD *)(a1 + 88);
  v36 = *(JSC::B3::Value **)(a1 + 56);
  v615 = (uint64_t *)a1;
  if (*(_QWORD *)a1)
    v37 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
  else
    v37 = 0;
  v38 = WTF::fastMalloc((WTF *)0x30);
  v39 = *(_DWORD *)(a3 + 4);
  *(_DWORD *)(v38 + 8) = -1;
  *(_WORD *)(v38 + 12) = 10;
  *(_DWORD *)(v38 + 16) = v39;
  *(_BYTE *)(v38 + 20) = 0;
  *(_QWORD *)(v38 + 24) = v37;
  *(_QWORD *)(v38 + 32) = 0;
  *(_QWORD *)v38 = off_1E357F0F8;
  *(_QWORD *)(v38 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v36, (JSC::B3::Value *)v38);
  v620 = v38;
  v40 = (_QWORD *)(v35 + 8);
  v41 = *(unsigned int *)(v35 + 20);
  v612 = (uint64_t)v12;
  v613 = a3;
  if ((_DWORD)v41 == *(_DWORD *)(v35 + 16))
  {
    v168 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v35 + 8), v41 + 1, (unint64_t)&v620);
    v41 = *(unsigned int *)(v35 + 20);
    *(_QWORD *)(*(_QWORD *)(v35 + 8) + 8 * v41) = *(_QWORD *)v168;
    v42 = v620;
  }
  else
  {
    *(_QWORD *)(*v40 + 8 * v41) = v38;
    v42 = v38;
  }
  *(_DWORD *)(v35 + 20) = v41 + 1;
  *(_QWORD *)(v42 + 32) = v35;
  v43 = *(_QWORD *)(a1 + 88);
  v44 = *(JSC::B3::Value **)(a1 + 56);
  if (*v615)
    v45 = *(_QWORD *)(*v615 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v615 + 14992) << 32);
  else
    v45 = 0;
  v46 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v46 + 8) = -1;
  *(_WORD *)(v46 + 12) = 4;
  *(_DWORD *)(v46 + 16) = 2;
  *(_BYTE *)(v46 + 20) = 0;
  *(_QWORD *)(v46 + 24) = v45;
  *(_QWORD *)(v46 + 32) = 0;
  *(_QWORD *)v46 = off_1E357DA88;
  *(_QWORD *)(v46 + 40) = 2;
  JSC::B3::Procedure::addValueImpl(v44, (JSC::B3::Value *)v46);
  v620 = v46;
  v47 = (char **)(v43 + 8);
  v48 = *(unsigned int *)(v43 + 20);
  if ((_DWORD)v48 == *(_DWORD *)(v43 + 16))
  {
    v169 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v47, v48 + 1, (unint64_t)&v620);
    v48 = *(unsigned int *)(v43 + 20);
    *(_QWORD *)(*(_QWORD *)(v43 + 8) + 8 * v48) = *(_QWORD *)v169;
    v49 = v620;
  }
  else
  {
    *(_QWORD *)&(*v47)[8 * v48] = v46;
    v49 = v46;
  }
  v50 = a2;
  *(_DWORD *)(v43 + 20) = v48 + 1;
  *(_QWORD *)(v49 + 32) = v43;
  v51 = (JSC::B3::Value *)WTF::fastMalloc((WTF *)0x38);
  JSC::B3::Value::Value<>((uint64_t)v51, 0, 51, 2, v37, v38, v46);
  JSC::B3::Procedure::addValueImpl(v36, v51);
  v620 = (uint64_t)v51;
  v53 = *(unsigned int *)(v35 + 20);
  if ((_DWORD)v53 == *(_DWORD *)(v35 + 16))
  {
    v170 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v35 + 8), v53 + 1, (unint64_t)&v620);
    v53 = *(unsigned int *)(v35 + 20);
    *(_QWORD *)(*(_QWORD *)(v35 + 8) + 8 * v53) = *(_QWORD *)v170;
    v54 = v620;
  }
  else
  {
    *(_QWORD *)(*v40 + 8 * v53) = v51;
    v54 = (uint64_t)v51;
  }
  v55 = (uint64_t)v611;
  v56 = v612;
  v57 = (uint64_t)v610;
  *(_DWORD *)(v35 + 20) = v53 + 1;
  *(_QWORD *)(v54 + 32) = v35;
  v58 = (uint64_t)v615;
  v59 = v615[11];
  v60 = v615[7];
  if (*v615)
    v61 = *(_QWORD *)(*v615 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v615 + 14992) << 32);
  else
    v61 = 0;
  v620 = (uint64_t)v33;
  v621 = 0;
  v618 = v611;
  v619 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v59, v60, 155, v61, (uint64_t)v51, &v620, (uint64_t *)&v618, v52);
  v65 = v615[11];
  v620 = v65;
  v66 = v33 + 3;
  v67 = *((unsigned int *)v33 + 9);
  if ((_DWORD)v67)
  {
    v68 = (_QWORD *)*v66;
    v69 = *((unsigned int *)v33 + 9);
    while (*v68 != v65)
    {
      ++v68;
      if (!--v69)
        goto LABEL_28;
    }
  }
  else
  {
LABEL_28:
    if ((_DWORD)v67 == *((_DWORD *)v33 + 8))
    {
      v541 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v66, v67 + 1, (unint64_t)&v620);
      v67 = *((unsigned int *)v33 + 9);
      *(_QWORD *)(v33[3] + 8 * v67) = *v541;
    }
    else
    {
      *(_QWORD *)(*v66 + 8 * v67) = v65;
    }
    *((_DWORD *)v33 + 9) = v67 + 1;
    v65 = v615[11];
  }
  v620 = v65;
  v70 = v611 + 3;
  v71 = *((unsigned int *)v611 + 9);
  if ((_DWORD)v71)
  {
    v72 = (_QWORD *)*v70;
    v73 = *((unsigned int *)v611 + 9);
    while (*v72 != v65)
    {
      ++v72;
      if (!--v73)
        goto LABEL_35;
    }
  }
  else
  {
LABEL_35:
    if ((_DWORD)v71 == *((_DWORD *)v611 + 8))
    {
      v542 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v70, v71 + 1, (unint64_t)&v620);
      v71 = *((unsigned int *)v611 + 9);
      *(_QWORD *)(v611[3] + 8 * v71) = *v542;
    }
    else
    {
      *(_QWORD *)(*v70 + 8 * v71) = v65;
    }
    *((_DWORD *)v611 + 9) = v71 + 1;
  }
  v615[11] = (uint64_t)v33;
  if (a2)
  {
    if (a4)
      v74 = (uint64_t)v610;
    else
      v74 = (uint64_t)v616;
    v75 = v615[7];
    if (*v615)
      v76 = *(_QWORD *)(*v615 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v615 + 14992) << 32);
    else
      v76 = 0;
    v620 = v74;
    v621 = 0;
    JSC::B3::BasicBlock::appendNewControlValue((uint64_t)v33, v75, 154, v76, &v620, v62, v63, v64);
  }
  else
  {
    if ((a4 & 1) == 0)
    {
      v80 = (JSC::B3::Value *)v615[7];
      v81 = *v615 ? *(_QWORD *)(*v615 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v615 + 14992) << 32) : 0;
      v82 = WTF::fastMalloc((WTF *)0xD8);
      *(_QWORD *)v82 = off_1E357F5F0;
      *(_DWORD *)(v82 + 8) = -1;
      *(_WORD *)(v82 + 12) = 83;
      *(_DWORD *)(v82 + 16) = 0;
      *(_BYTE *)(v82 + 20) = 4;
      *(_QWORD *)(v82 + 24) = v81;
      *(_QWORD *)(v82 + 32) = 0;
      v83 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v82);
      *v83 = v83 + 2;
      v83[1] = 3;
      *(_OWORD *)(v82 + 40) = 0u;
      *(_OWORD *)(v82 + 56) = 0u;
      *(_OWORD *)(v82 + 72) = 0u;
      *(_OWORD *)(v82 + 88) = 0u;
      *(_QWORD *)(v82 + 104) = 0;
      *(_QWORD *)v82 = off_1E357E700;
      *(_OWORD *)(v82 + 112) = xmmword_1991243D0;
      *(_QWORD *)(v82 + 152) = 0;
      *(_QWORD *)(v82 + 128) = 0xFFFFFFFF00000000;
      *(_QWORD *)(v82 + 136) = v82 + 152;
      *(_WORD *)(v82 + 168) = 0;
      *(_BYTE *)(v82 + 160) = 0;
      *(_QWORD *)(v82 + 144) = 0x100000001;
      JSC::B3::Procedure::addValueImpl(v80, (JSC::B3::Value *)v82);
      v620 = v82;
      v84 = (char **)(v33 + 1);
      v85 = *((unsigned int *)v33 + 5);
      if ((_DWORD)v85 == *((_DWORD *)v33 + 4))
      {
        v493 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v84, v85 + 1, (unint64_t)&v620);
        v85 = *((unsigned int *)v33 + 5);
        *(_QWORD *)(v33[1] + 8 * v85) = *(_QWORD *)v493;
        v86 = v620;
      }
      else
      {
        *(_QWORD *)&(*v84)[8 * v85] = v82;
        v86 = v82;
      }
      v55 = (uint64_t)v611;
      *((_DWORD *)v33 + 5) = v85 + 1;
      *(_QWORD *)(v86 + 32) = v33;
      v87 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)(v87 + 8) = 1;
      *(_QWORD *)v87 = off_1E35B65D0;
      *(_QWORD *)(v87 + 16) = v615;
      v88 = *(unsigned int **)(v82 + 56);
      *(_QWORD *)(v82 + 56) = v87;
      if (v88)
      {
        v89 = v88 + 2;
        do
        {
          v90 = __ldaxr(v89);
          v91 = v90 - 1;
        }
        while (__stlxr(v91, v89));
        if (!v91)
        {
          atomic_store(1u, v88 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v88 + 8))(v88);
        }
      }
    }
    v92 = v615[11];
    v93 = v615[7];
    if (*v615)
      v94 = *(_QWORD *)(*v615 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v615 + 14992) << 32);
    else
      v94 = 0;
    v620 = v612;
    v621 = 0;
    JSC::B3::BasicBlock::appendNewControlValue(v92, v93, 154, v94, &v620, v62, v63, v64);
    v74 = v612;
  }
  v95 = v615[11];
  v620 = v95;
  v96 = (_QWORD *)(v74 + 24);
  v97 = *(unsigned int *)(v74 + 36);
  if ((_DWORD)v97)
  {
    v98 = (_QWORD *)*v96;
    v99 = *(unsigned int *)(v74 + 36);
    while (*v98 != v95)
    {
      ++v98;
      if (!--v99)
        goto LABEL_62;
    }
  }
  else
  {
LABEL_62:
    if ((_DWORD)v97 == *(_DWORD *)(v74 + 32))
    {
      v543 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v96, v97 + 1, (unint64_t)&v620);
      v97 = *(unsigned int *)(v74 + 36);
      *(_QWORD *)(*(_QWORD *)(v74 + 24) + 8 * v97) = *v543;
    }
    else
    {
      *(_QWORD *)(*v96 + 8 * v97) = v95;
    }
    *(_DWORD *)(v74 + 36) = v97 + 1;
  }
  v615[11] = v55;
  if (a5 < 0xFFFFFFC1)
  {
    v110 = v615[2];
    if (*(unsigned int *)(v110 + 100) <= (unint64_t)a5)
    {
      __break(0xC471u);
      JUMPOUT(0x198D94328);
    }
    v111 = *(_QWORD *)(*(_QWORD *)(v110 + 88) + 8 * a5);
    v112 = JSC::B3::Procedure::addBlock(v604, (JSC::B3::Procedure *)*v604, 1.0);
    v113 = (JSC::Wasm::TypeDefinition *)v111;
    if (*(_DWORD *)(v111 + 32) == 4)
    {
      v558 = *(unsigned int **)(v111 + 8);
      v559 = *(WTF **)v558;
      v113 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v558 + 8) + 8 * v558[2]);
      if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v113))
      {
        CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v111, v560, v561, v562, v563, v564, v565, v566);
        if (v574)
        {
          v113 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
        }
        else
        {
          v113 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v113, v559, v568, v569, v570, v571, v572, v573);
          JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v111, v113, v592, v593, v594, v595, v596, v597);
        }
        v58 = (uint64_t)v615;
        v50 = a2;
      }
    }
    v114 = *((_DWORD *)v113 + 8);
    if (v114 == 5)
      v114 = *(_DWORD *)(**((_QWORD **)v113 + 1) + 32);
    v115 = *(_QWORD *)(v58 + 88);
    v116 = *(JSC::B3::Value **)(v58 + 56);
    v117 = *(_QWORD *)v58;
    if (v114)
    {
      if (v117)
        v118 = *(_QWORD *)(v117 + 15000) | ((unint64_t)*(unsigned __int8 *)(v117 + 14992) << 32);
      else
        v118 = 0;
      v119 = WTF::fastMalloc((WTF *)0x30);
      v120 = *(_DWORD *)(v613 + 4);
      *(_DWORD *)(v119 + 8) = -1;
      *(_WORD *)(v119 + 12) = 10;
      *(_DWORD *)(v119 + 16) = v120;
      *(_BYTE *)(v119 + 20) = 0;
      *(_QWORD *)(v119 + 24) = v118;
      *(_QWORD *)(v119 + 32) = 0;
      *(_QWORD *)v119 = off_1E357F0F8;
      *(_QWORD *)(v119 + 40) = v613;
      JSC::B3::Procedure::addValueImpl(v116, (JSC::B3::Value *)v119);
      v620 = v119;
      v121 = (_QWORD *)(v115 + 8);
      v122 = *(unsigned int *)(v115 + 20);
      if ((_DWORD)v122 == *(_DWORD *)(v115 + 16))
      {
        v343 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v115 + 8), v122 + 1, (unint64_t)&v620);
        v122 = *(unsigned int *)(v115 + 20);
        *(_QWORD *)(*(_QWORD *)(v115 + 8) + 8 * v122) = *(_QWORD *)v343;
        v123 = v620;
      }
      else
      {
        *(_QWORD *)(*v121 + 8 * v122) = v119;
        v123 = v119;
      }
      *(_DWORD *)(v115 + 20) = v122 + 1;
      *(_QWORD *)(v123 + 32) = v115;
      v124 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)v58, 2u, 0xFFFE000000000002, 0, 0);
      v125 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(22, v118, v119, v124);
      JSC::B3::Procedure::addValueImpl(v116, v125);
      v620 = (uint64_t)v125;
      v126 = *(unsigned int *)(v115 + 20);
      if ((_DWORD)v126 == *(_DWORD *)(v115 + 16))
      {
        v344 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v115 + 8), v126 + 1, (unint64_t)&v620);
        v126 = *(unsigned int *)(v115 + 20);
        *(_QWORD *)(*(_QWORD *)(v115 + 8) + 8 * v126) = *(_QWORD *)v344;
        v127 = v620;
      }
      else
      {
        *(_QWORD *)(*v121 + 8 * v126) = v125;
        v127 = (uint64_t)v125;
      }
      v128 = (uint64_t *)(v126 + 1);
      *(_DWORD *)(v115 + 20) = (_DWORD)v128;
      *(_QWORD *)(v127 + 32) = v115;
      JSC::Wasm::OMGIRGenerator::emitCheckOrBranchForCast<JSC::Wasm::OMGIRGenerator::emitRefTestOrCast(JSC::Wasm::OMGIRGenerator::CastKind,JSC::B3::Variable *,BOOL,int,BOOL,JSC::B3::Variable *&)::$_0>((_QWORD *)v58, v50, (uint64_t)v125, &v617, (uint64_t)v616, v128);
      v129 = *(_QWORD *)(v58 + 88);
      v130 = *(JSC::B3::Value **)(v58 + 56);
      if (*(_QWORD *)v58)
        v131 = *(_QWORD *)(*(_QWORD *)v58 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v58 + 14992) << 32);
      else
        v131 = 0;
      v132 = WTF::fastMalloc((WTF *)0x30);
      v133 = *(_DWORD *)(v613 + 4);
      *(_DWORD *)(v132 + 8) = -1;
      *(_WORD *)(v132 + 12) = 10;
      *(_DWORD *)(v132 + 16) = v133;
      *(_BYTE *)(v132 + 20) = 0;
      *(_QWORD *)(v132 + 24) = v131;
      *(_QWORD *)(v132 + 32) = 0;
      *(_QWORD *)v132 = off_1E357F0F8;
      *(_QWORD *)(v132 + 40) = v613;
      JSC::B3::Procedure::addValueImpl(v130, (JSC::B3::Value *)v132);
      v620 = v132;
      v134 = (char **)(v129 + 8);
      v135 = *(unsigned int *)(v129 + 20);
      if ((_DWORD)v135 == *(_DWORD *)(v129 + 16))
      {
        v345 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v134, v135 + 1, (unint64_t)&v620);
        v135 = *(unsigned int *)(v129 + 20);
        *(_QWORD *)(*(_QWORD *)(v129 + 8) + 8 * v135) = *(_QWORD *)v345;
        v136 = v620;
      }
      else
      {
        *(_QWORD *)&(*v134)[8 * v135] = v132;
        v136 = v132;
      }
      *(_DWORD *)(v129 + 20) = v135 + 1;
      *(_QWORD *)(v136 + 32) = v129;
      v137 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Value *,int>((JSC::B3::BasicBlock *)v129, v130, 63, 1, v131, v132, 5);
      v138 = *(_QWORD *)(v58 + 88);
      v139 = *(JSC::B3::Value **)(v58 + 56);
      if (*(_QWORD *)v58)
        v140 = *(_QWORD *)(*(_QWORD *)v58 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v58 + 14992) << 32);
      else
        v140 = 0;
      v141 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)v58, 1u, 0x4BuLL, 0, 0);
      v142 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, v140, (uint64_t)v137, v141);
      JSC::B3::Procedure::addValueImpl(v139, v142);
      v620 = (uint64_t)v142;
      v143 = (char **)(v138 + 8);
      v144 = *(unsigned int *)(v138 + 20);
      if ((_DWORD)v144 == *(_DWORD *)(v138 + 16))
      {
        v346 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v143, v144 + 1, (unint64_t)&v620);
        v144 = *(unsigned int *)(v138 + 20);
        *(_QWORD *)(*(_QWORD *)(v138 + 8) + 8 * v144) = *(_QWORD *)v346;
        v145 = v620;
      }
      else
      {
        *(_QWORD *)&(*v143)[8 * v144] = v142;
        v145 = (uint64_t)v142;
      }
      v146 = (uint64_t *)(v144 + 1);
      *(_DWORD *)(v138 + 20) = (_DWORD)v146;
      *(_QWORD *)(v145 + 32) = v138;
      JSC::Wasm::OMGIRGenerator::emitCheckOrBranchForCast<JSC::Wasm::OMGIRGenerator::emitRefTestOrCast(JSC::Wasm::OMGIRGenerator::CastKind,JSC::B3::Variable *,BOOL,int,BOOL,JSC::B3::Variable *&)::$_0>((_QWORD *)v58, v50, (uint64_t)v142, &v617, (uint64_t)v616, v146);
      v147 = *(_QWORD *)(v58 + 88);
      v148 = *(JSC::B3::Value **)(v58 + 56);
      if (*(_QWORD *)v58)
        v149 = *(_QWORD *)(*(_QWORD *)v58 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v58 + 14992) << 32);
      else
        v149 = 0;
      v150 = WTF::fastMalloc((WTF *)0x30);
      v151 = *(_DWORD *)(v613 + 4);
      *(_DWORD *)(v150 + 8) = -1;
      *(_WORD *)(v150 + 12) = 10;
      *(_DWORD *)(v150 + 16) = v151;
      *(_BYTE *)(v150 + 20) = 0;
      *(_QWORD *)(v150 + 24) = v149;
      *(_QWORD *)(v150 + 32) = 0;
      *(_QWORD *)v150 = off_1E357F0F8;
      *(_QWORD *)(v150 + 40) = v613;
      JSC::B3::Procedure::addValueImpl(v148, (JSC::B3::Value *)v150);
      v620 = v150;
      v152 = (char **)(v147 + 8);
      v153 = *(unsigned int *)(v147 + 20);
      if ((_DWORD)v153 == *(_DWORD *)(v147 + 16))
      {
        v347 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v152, v153 + 1, (unint64_t)&v620);
        v153 = *(unsigned int *)(v147 + 20);
        *(_QWORD *)(*(_QWORD *)(v147 + 8) + 8 * v153) = *(_QWORD *)v347;
        v154 = v620;
      }
      else
      {
        *(_QWORD *)&(*v152)[8 * v153] = v150;
        v154 = v150;
      }
      *(_DWORD *)(v147 + 20) = v153 + 1;
      *(_QWORD *)(v154 + 32) = v147;
      v155 = *(_QWORD *)(v58 + 88);
      v156 = *(JSC::B3::Value **)(v58 + 56);
      if (*(_QWORD *)v58)
        v157 = *(_QWORD *)(*(_QWORD *)v58 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v58 + 14992) << 32);
      else
        v157 = 0;
      v158 = WTF::fastMalloc((WTF *)0x48);
      *(_DWORD *)(v158 + 8) = -1;
      *(_WORD *)(v158 + 12) = 67;
      *(_DWORD *)(v158 + 16) = 2;
      *(_BYTE *)(v158 + 20) = 1;
      *(_QWORD *)(v158 + 24) = v157;
      *(_QWORD *)(v158 + 32) = 0;
      *(_QWORD *)(v158 + 64) = v150;
      *(_QWORD *)v158 = off_1E357E4C8;
      *(_DWORD *)(v158 + 40) = 16;
      *(_OWORD *)(v158 + 44) = xmmword_19914F690;
      JSC::B3::Procedure::addValueImpl(v156, (JSC::B3::Value *)v158);
      v620 = v158;
      v159 = (char **)(v155 + 8);
      v160 = *(unsigned int *)(v155 + 20);
      if ((_DWORD)v160 == *(_DWORD *)(v155 + 16))
      {
        v348 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v159, v160 + 1, (unint64_t)&v620);
        v160 = *(unsigned int *)(v155 + 20);
        *(_QWORD *)(*(_QWORD *)(v155 + 8) + 8 * v160) = *(_QWORD *)v348;
        v161 = v620;
      }
      else
      {
        *(_QWORD *)&(*v159)[8 * v160] = v158;
        v161 = v158;
      }
      v162 = a2;
      *(_DWORD *)(v155 + 20) = v160 + 1;
      *(_QWORD *)(v161 + 32) = v155;
      if (*(_DWORD *)(v111 + 32) == 4)
      {
        v575 = *(unsigned int **)(v111 + 8);
        v576 = *(WTF **)v575;
        v163 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v575 + 8) + 8 * v575[2]);
        if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v163))
        {
          v584 = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v111, v577, v578, v579, v580, v581, v582, v583);
          if (v591)
          {
            v163 = (JSC::Wasm::TypeDefinition *)v584;
          }
          else
          {
            v163 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v163, v576, v585, v586, v587, v588, v589, v590);
            JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v111, v163, v598, v599, v600, v601, v602, v603);
          }
          v58 = (uint64_t)v615;
          v162 = a2;
        }
      }
      else
      {
        v163 = (JSC::Wasm::TypeDefinition *)v111;
      }
      v164 = *((_DWORD *)v163 + 8);
      if (v164 == 5)
        v164 = *(_DWORD *)(**((_QWORD **)v163 + 1) + 32);
      if (v164 == 2)
        v165 = 1;
      else
        v165 = 2;
      v166 = JSC::Wasm::OMGIRGenerator::emitNotRTTKind((uint64_t *)v58, v158, v165);
      JSC::Wasm::OMGIRGenerator::emitCheckOrBranchForCast<JSC::Wasm::OMGIRGenerator::emitRefTestOrCast(JSC::Wasm::OMGIRGenerator::CastKind,JSC::B3::Variable *,BOOL,int,BOOL,JSC::B3::Variable *&)::$_0>((_QWORD *)v58, v162, (uint64_t)v166, &v617, (uint64_t)v616, v167);
    }
    else
    {
      if (v117)
        v171 = *(_QWORD *)(v117 + 15000) | ((unint64_t)*(unsigned __int8 *)(v117 + 14992) << 32);
      else
        v171 = 0;
      v172 = WTF::fastMalloc((WTF *)0x30);
      v173 = *(_DWORD *)(v613 + 4);
      *(_DWORD *)(v172 + 8) = -1;
      *(_WORD *)(v172 + 12) = 10;
      *(_DWORD *)(v172 + 16) = v173;
      *(_BYTE *)(v172 + 20) = 0;
      *(_QWORD *)(v172 + 24) = v171;
      *(_QWORD *)(v172 + 32) = 0;
      *(_QWORD *)v172 = off_1E357F0F8;
      *(_QWORD *)(v172 + 40) = v613;
      JSC::B3::Procedure::addValueImpl(v116, (JSC::B3::Value *)v172);
      v620 = v172;
      v174 = (char **)(v115 + 8);
      v175 = *(unsigned int *)(v115 + 20);
      if ((_DWORD)v175 == *(_DWORD *)(v115 + 16))
      {
        v494 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v174, v175 + 1, (unint64_t)&v620);
        v175 = *(unsigned int *)(v115 + 20);
        *(_QWORD *)(*(_QWORD *)(v115 + 8) + 8 * v175) = *(_QWORD *)v494;
        v176 = v620;
      }
      else
      {
        *(_QWORD *)&(*v174)[8 * v175] = v172;
        v176 = v172;
      }
      *(_DWORD *)(v115 + 20) = v175 + 1;
      *(_QWORD *)(v176 + 32) = v115;
      v177 = *(JSC::B3::Value **)(v58 + 56);
      v178 = *(_QWORD *)(v58 + 88);
      v158 = WTF::fastMalloc((WTF *)0xD8);
      *(_QWORD *)v158 = off_1E357F5F0;
      *(_DWORD *)(v158 + 8) = -1;
      *(_WORD *)(v158 + 12) = 83;
      *(_DWORD *)(v158 + 16) = 2;
      *(_BYTE *)(v158 + 20) = 4;
      *(_QWORD *)(v158 + 24) = 0;
      *(_QWORD *)(v158 + 32) = 0;
      v179 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v158);
      *v179 = v179 + 2;
      v179[1] = 3;
      *(_OWORD *)(v158 + 40) = 0u;
      *(_OWORD *)(v158 + 56) = 0u;
      *(_OWORD *)(v158 + 72) = 0u;
      *(_OWORD *)(v158 + 88) = 0u;
      *(_QWORD *)(v158 + 104) = 0;
      *(_QWORD *)v158 = off_1E357E700;
      *(_OWORD *)(v158 + 112) = xmmword_1991243D0;
      *(_QWORD *)(v158 + 152) = 0;
      *(_QWORD *)(v158 + 128) = 0xFFFFFFFF00000000;
      *(_QWORD *)(v158 + 136) = v158 + 152;
      *(_WORD *)(v158 + 168) = 0;
      *(_BYTE *)(v158 + 160) = 3;
      *(_QWORD *)(v158 + 144) = 0x100000001;
      JSC::B3::Procedure::addValueImpl(v177, (JSC::B3::Value *)v158);
      v620 = v158;
      v180 = (char **)(v178 + 8);
      v181 = *(unsigned int *)(v178 + 20);
      if ((_DWORD)v181 == *(_DWORD *)(v178 + 16))
      {
        v495 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v180, v181 + 1, (unint64_t)&v620);
        v181 = *(unsigned int *)(v178 + 20);
        *(_QWORD *)(*(_QWORD *)(v178 + 8) + 8 * v181) = *(_QWORD *)v495;
        v182 = v620;
      }
      else
      {
        *(_QWORD *)&(*v180)[8 * v181] = v158;
        v182 = v158;
      }
      *(_DWORD *)(v178 + 20) = v181 + 1;
      *(_QWORD *)(v182 + 32) = v178;
      v620 = 0;
      v621 = 3;
      JSC::B3::StackmapValue::append((__int128 *)v158, v172, (unint64_t)&v620);
      v183 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)(v183 + 8) = 1;
      *(_QWORD *)v183 = off_1E35B65F8;
      v184 = *(unsigned int **)(v158 + 56);
      *(_QWORD *)(v158 + 56) = v183;
      if (v184)
      {
        v185 = v184 + 2;
        do
        {
          v186 = __ldaxr(v185);
          v187 = v186 - 1;
        }
        while (__stlxr(v187, v185));
        if (!v187)
        {
          atomic_store(1u, v184 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v184 + 8))(v184);
        }
      }
    }
    if (*(_QWORD *)v58)
      v188 = *(_QWORD *)(*(_QWORD *)v58 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v58 + 14992) << 32);
    else
      v188 = 0;
    v189 = *(_QWORD *)(v58 + 16);
    if (*(unsigned int *)(v189 + 284) <= (unint64_t)a5)
    {
      __break(0xC471u);
      JUMPOUT(0x198D94330);
    }
    v190 = *(_QWORD *)(v58 + 88);
    v191 = *(JSC::B3::Value **)(v58 + 56);
    v192 = *(_QWORD *)(*(_QWORD *)(v189 + 272) + 8 * a5);
    v193 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v193 + 8) = -1;
    *(_WORD *)(v193 + 12) = 4;
    *(_DWORD *)(v193 + 16) = 2;
    *(_BYTE *)(v193 + 20) = 0;
    *(_QWORD *)(v193 + 24) = v188;
    *(_QWORD *)(v193 + 32) = 0;
    *(_QWORD *)(v193 + 40) = v192;
    *(_QWORD *)v193 = off_1E357E2D0;
    JSC::B3::Procedure::addValueImpl(v191, (JSC::B3::Value *)v193);
    v620 = v193;
    v194 = (char **)(v190 + 8);
    v195 = *(unsigned int *)(v190 + 20);
    if ((_DWORD)v195 == *(_DWORD *)(v190 + 16))
    {
      v337 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v194, v195 + 1, (unint64_t)&v620);
      v195 = *(unsigned int *)(v190 + 20);
      *(_QWORD *)(*(_QWORD *)(v190 + 8) + 8 * v195) = *(_QWORD *)v337;
      v196 = v620;
    }
    else
    {
      *(_QWORD *)&(*v194)[8 * v195] = v193;
      v196 = v193;
    }
    v57 = (uint64_t)v610;
    *(_DWORD *)(v190 + 20) = v195 + 1;
    *(_QWORD *)(v196 + 32) = v190;
    v197 = *(_QWORD *)(v58 + 88);
    v198 = *(JSC::B3::Value **)(v58 + 56);
    v50 = a2;
    if (*(_QWORD *)v58)
      v199 = *(_QWORD *)(*(_QWORD *)v58 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v58 + 14992) << 32);
    else
      v199 = 0;
    v200 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, v199, v158, v193);
    JSC::B3::Procedure::addValueImpl(v198, v200);
    v620 = (uint64_t)v200;
    v202 = (char **)(v197 + 8);
    v203 = *(unsigned int *)(v197 + 20);
    if ((_DWORD)v203 == *(_DWORD *)(v197 + 16))
    {
      v338 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v202, v203 + 1, (unint64_t)&v620);
      v203 = *(unsigned int *)(v197 + 20);
      *(_QWORD *)(*(_QWORD *)(v197 + 8) + 8 * v203) = *(_QWORD *)v338;
      v204 = v620;
    }
    else
    {
      *(_QWORD *)&(*v202)[8 * v203] = v200;
      v204 = (uint64_t)v200;
    }
    *(_DWORD *)(v197 + 20) = v203 + 1;
    *(_QWORD *)(v204 + 32) = v197;
    v205 = *(_QWORD *)(v58 + 88);
    v206 = *(_QWORD *)(v58 + 56);
    if (*(_QWORD *)v58)
      v207 = *(_QWORD *)(*(_QWORD *)v58 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v58 + 14992) << 32);
    else
      v207 = 0;
    v620 = v605;
    v621 = 0;
    v618 = v112;
    v619 = 0;
    JSC::B3::BasicBlock::appendNewControlValue(v205, v206, 155, v207, (uint64_t)v200, &v620, (uint64_t *)&v618, v201);
    v208 = *(_QWORD *)(v58 + 88);
    v620 = v208;
    v209 = (_QWORD *)(v605 + 24);
    v210 = *(unsigned int *)(v605 + 36);
    if ((_DWORD)v210)
    {
      v211 = (_QWORD *)*v209;
      v212 = *(unsigned int *)(v605 + 36);
      while (*v211 != v208)
      {
        ++v211;
        if (!--v212)
          goto LABEL_142;
      }
    }
    else
    {
LABEL_142:
      if ((_DWORD)v210 == *(_DWORD *)(v605 + 32))
      {
        v547 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v209, v210 + 1, (unint64_t)&v620);
        v210 = *(unsigned int *)(v605 + 36);
        *(_QWORD *)(*(_QWORD *)(v605 + 24) + 8 * v210) = *v547;
      }
      else
      {
        *(_QWORD *)(*v209 + 8 * v210) = v208;
      }
      *(_DWORD *)(v605 + 36) = v210 + 1;
      v208 = *(_QWORD *)(v58 + 88);
    }
    v620 = v208;
    v213 = v112 + 3;
    v214 = *((unsigned int *)v112 + 9);
    if ((_DWORD)v214)
    {
      v215 = (_QWORD *)*v213;
      v216 = *((unsigned int *)v112 + 9);
      while (*v215 != v208)
      {
        ++v215;
        if (!--v216)
          goto LABEL_149;
      }
    }
    else
    {
LABEL_149:
      if ((_DWORD)v214 == *((_DWORD *)v112 + 8))
      {
        v548 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v213, v214 + 1, (unint64_t)&v620);
        v214 = *((unsigned int *)v112 + 9);
        *(_QWORD *)(v112[3] + 8 * v214) = *v548;
      }
      else
      {
        *(_QWORD *)(*v213 + 8 * v214) = v208;
      }
      *((_DWORD *)v112 + 9) = v214 + 1;
    }
    *(_QWORD *)(v58 + 88) = v112;
    v217 = *(JSC::B3::Value **)(v58 + 56);
    if (*(_QWORD *)v58)
      v218 = *(_QWORD *)(*(_QWORD *)v58 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v58 + 14992) << 32);
    else
      v218 = 0;
    v219 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v219 + 8) = -1;
    *(_WORD *)(v219 + 12) = 4;
    *(_DWORD *)(v219 + 16) = 2;
    *(_BYTE *)(v219 + 20) = 0;
    *(_QWORD *)(v219 + 24) = v218;
    *(_QWORD *)(v219 + 32) = 0;
    *(_QWORD *)(v219 + 40) = operationWasmIsSubRTT;
    *(_QWORD *)v219 = off_1E357E2D0;
    JSC::B3::Procedure::addValueImpl(v217, (JSC::B3::Value *)v219);
    v620 = v219;
    v220 = v112 + 1;
    v221 = *((unsigned int *)v112 + 5);
    if ((_DWORD)v221 == *((_DWORD *)v112 + 4))
    {
      v339 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v112 + 1, v221 + 1, (unint64_t)&v620);
      v221 = *((unsigned int *)v112 + 5);
      *(_QWORD *)(v112[1] + 8 * v221) = *(_QWORD *)v339;
      v222 = v620;
    }
    else
    {
      *(_QWORD *)(*v220 + 8 * v221) = v219;
      v222 = v219;
    }
    *((_DWORD *)v112 + 5) = v221 + 1;
    *(_QWORD *)(v222 + 32) = v112;
    v223 = JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::ConstPtrValue *,JSC::B3::Value *,JSC::B3::Value *>(v217, 1, v218, v219, v158, v193);
    v224 = v223;
    v620 = (uint64_t)v223;
    v225 = *((unsigned int *)v112 + 5);
    if ((_DWORD)v225 == *((_DWORD *)v112 + 4))
    {
      v340 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v112 + 1, v225 + 1, (unint64_t)&v620);
      v225 = *((unsigned int *)v112 + 5);
      *(_QWORD *)(v112[1] + 8 * v225) = *(_QWORD *)v340;
      v226 = v620;
    }
    else
    {
      *(_QWORD *)(*v220 + 8 * v225) = v223;
      v226 = (uint64_t)v223;
    }
    *((_DWORD *)v112 + 5) = v225 + 1;
    *(_QWORD *)(v226 + 32) = v112;
    v227 = *(_QWORD *)(v58 + 88);
    v228 = *(JSC::B3::Value **)(v58 + 56);
    if (*(_QWORD *)v58)
      v229 = *(_QWORD *)(*(_QWORD *)v58 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v58 + 14992) << 32);
    else
      v229 = 0;
    v56 = v612;
    v230 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)v58, 1u, 0, 0, 0);
    v231 = 51;
LABEL_161:
    v232 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v231, v229, (uint64_t)v224, v230);
    JSC::B3::Procedure::addValueImpl(v228, v232);
    v620 = (uint64_t)v232;
    v233 = (char **)(v227 + 8);
    v234 = *(unsigned int *)(v227 + 20);
    if ((_DWORD)v234 == *(_DWORD *)(v227 + 16))
    {
      v290 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v233, v234 + 1, (unint64_t)&v620);
      v234 = *(unsigned int *)(v227 + 20);
      *(_QWORD *)(*(_QWORD *)(v227 + 8) + 8 * v234) = *(_QWORD *)v290;
      v235 = v620;
    }
    else
    {
      *(_QWORD *)&(*v233)[8 * v234] = v232;
      v235 = (uint64_t)v232;
    }
    v236 = (uint64_t *)(v234 + 1);
    *(_DWORD *)(v227 + 20) = (_DWORD)v236;
    *(_QWORD *)(v235 + 32) = v227;
LABEL_164:
    JSC::Wasm::OMGIRGenerator::emitCheckOrBranchForCast<JSC::Wasm::OMGIRGenerator::emitRefTestOrCast(JSC::Wasm::OMGIRGenerator::CastKind,JSC::B3::Variable *,BOOL,int,BOOL,JSC::B3::Variable *&)::$_0>((_QWORD *)v58, v50, (uint64_t)v232, &v617, (uint64_t)v616, v236);
LABEL_165:
    if (v50)
    {
      v109 = *(uint64_t **)(v58 + 88);
      v103 = a6;
LABEL_167:
      v237 = *(_QWORD *)(v58 + 56);
      if (*(_QWORD *)v58)
        v238 = *(_QWORD *)(*(_QWORD *)v58 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v58 + 14992) << 32);
      else
        v238 = 0;
      v620 = v57;
      v621 = 0;
      JSC::B3::BasicBlock::appendNewControlValue((uint64_t)v109, v237, 154, v238, &v620, v77, v78, v79);
      v239 = *(_QWORD *)(v58 + 88);
      v620 = v239;
      v240 = (_QWORD *)(v57 + 24);
      v241 = *(unsigned int *)(v57 + 36);
      if ((_DWORD)v241)
      {
        v242 = (_QWORD *)*v240;
        v243 = *(unsigned int *)(v57 + 36);
        while (*v242 != v239)
        {
          ++v242;
          if (!--v243)
            goto LABEL_173;
        }
      }
      else
      {
LABEL_173:
        if ((_DWORD)v241 == *(_DWORD *)(v57 + 32))
        {
          v544 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v240, v241 + 1, (unint64_t)&v620);
          v241 = *(unsigned int *)(v57 + 36);
          *(_QWORD *)(*(_QWORD *)(v57 + 24) + 8 * v241) = *v544;
        }
        else
        {
          *(_QWORD *)(*v240 + 8 * v241) = v239;
        }
        *(_DWORD *)(v57 + 36) = v241 + 1;
      }
      *(_QWORD *)(v58 + 88) = v57;
      v244 = *(JSC::B3::Value **)(v58 + 56);
      if (*(_QWORD *)v58)
        v245 = *(_QWORD *)(*(_QWORD *)v58 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v58 + 14992) << 32);
      else
        v245 = 0;
      v246 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)v58, 1u, v103 ^ 1, 0, 0);
      v247 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v247 + 8) = -1;
      *(_WORD *)(v247 + 12) = 152;
      *(_DWORD *)(v247 + 16) = 0;
      *(_BYTE *)(v247 + 20) = 1;
      *(_QWORD *)v247 = &unk_1E357EDA0;
      *(_QWORD *)(v247 + 40) = 0;
      *(_QWORD *)(v247 + 48) = v246;
      *(_QWORD *)(v247 + 24) = v245;
      *(_QWORD *)(v247 + 32) = 0;
      JSC::B3::Procedure::addValueImpl(v244, (JSC::B3::Value *)v247);
      v620 = v247;
      v251 = (char **)(v57 + 8);
      v252 = *(unsigned int *)(v57 + 20);
      if ((_DWORD)v252 == *(_DWORD *)(v57 + 16))
      {
        v288 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v251, v252 + 1, (unint64_t)&v620);
        v252 = *(unsigned int *)(v57 + 20);
        *(_QWORD *)(*(_QWORD *)(v57 + 8) + 8 * v252) = *(_QWORD *)v288;
        v253 = v620;
      }
      else
      {
        *(_QWORD *)&(*v251)[8 * v252] = v247;
        v253 = v247;
      }
      *(_DWORD *)(v57 + 20) = v252 + 1;
      *(_QWORD *)(v253 + 32) = v57;
      v254 = *(_QWORD *)(v58 + 88);
      v255 = *(_QWORD *)(v58 + 56);
      if (*(_QWORD *)v58)
        v256 = *(_QWORD *)(*(_QWORD *)v58 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v58 + 14992) << 32);
      else
        v256 = 0;
      v620 = v56;
      v621 = 0;
      JSC::B3::BasicBlock::appendNewControlValue(v254, v255, 154, v256, &v620, v248, v249, v250);
      v257 = *(_QWORD *)(v58 + 88);
      v620 = v257;
      v258 = (_QWORD **)(v56 + 24);
      v259 = *(unsigned int *)(v56 + 36);
      if ((_DWORD)v259)
      {
        v260 = *v258;
        v261 = *(unsigned int *)(v56 + 36);
        while (*v260 != v257)
        {
          ++v260;
          if (!--v261)
            goto LABEL_186;
        }
      }
      else
      {
LABEL_186:
        if ((_DWORD)v259 == *(_DWORD *)(v56 + 32))
        {
          v545 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v56 + 24, v259 + 1, (unint64_t)&v620);
          v259 = *(unsigned int *)(v56 + 36);
          *(_QWORD *)(*(_QWORD *)(v56 + 24) + 8 * v259) = *v545;
        }
        else
        {
          (*v258)[v259] = v257;
        }
        *(_DWORD *)(v56 + 36) = v259 + 1;
      }
      *(_QWORD *)(v58 + 88) = v616;
      v262 = *(JSC::B3::Value **)(v58 + 56);
      if (*(_QWORD *)v58)
        v263 = *(_QWORD *)(*(_QWORD *)v58 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v58 + 14992) << 32);
      else
        v263 = 0;
      v264 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)v58, 1u, v103, 0, 0);
      v265 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v265 + 8) = -1;
      *(_WORD *)(v265 + 12) = 152;
      *(_DWORD *)(v265 + 16) = 0;
      *(_BYTE *)(v265 + 20) = 1;
      *(_QWORD *)v265 = &unk_1E357EDA0;
      *(_QWORD *)(v265 + 40) = 0;
      *(_QWORD *)(v265 + 48) = v264;
      *(_QWORD *)(v265 + 24) = v263;
      *(_QWORD *)(v265 + 32) = 0;
      JSC::B3::Procedure::addValueImpl(v262, (JSC::B3::Value *)v265);
      v620 = v265;
      v269 = (char **)(v616 + 1);
      v270 = *((unsigned int *)v616 + 5);
      if ((_DWORD)v270 == *((_DWORD *)v616 + 4))
      {
        v289 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v269, v270 + 1, (unint64_t)&v620);
        v270 = *((unsigned int *)v616 + 5);
        *(_QWORD *)(v616[1] + 8 * v270) = *(_QWORD *)v289;
        v271 = v620;
      }
      else
      {
        *(_QWORD *)&(*v269)[8 * v270] = v265;
        v271 = v265;
      }
      *((_DWORD *)v616 + 5) = v270 + 1;
      *(_QWORD *)(v271 + 32) = v616;
      v272 = *(_QWORD *)(v58 + 88);
      v273 = *(_QWORD *)(v58 + 56);
      if (*(_QWORD *)v58)
        v274 = *(_QWORD *)(*(_QWORD *)v58 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v58 + 14992) << 32);
      else
        v274 = 0;
      v620 = v56;
      v621 = 0;
      JSC::B3::BasicBlock::appendNewControlValue(v272, v273, 154, v274, &v620, v266, v267, v268);
      v275 = *(_QWORD *)(v58 + 88);
      v620 = v275;
      v276 = *(unsigned int *)(v56 + 36);
      if ((_DWORD)v276)
      {
        v277 = *v258;
        v278 = *(unsigned int *)(v56 + 36);
        while (*v277 != v275)
        {
          ++v277;
          if (!--v278)
            goto LABEL_199;
        }
      }
      else
      {
LABEL_199:
        if ((_DWORD)v276 == *(_DWORD *)(v56 + 32))
        {
          v546 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v56 + 24, v276 + 1, (unint64_t)&v620);
          v276 = *(unsigned int *)(v56 + 36);
          *(_QWORD *)(*(_QWORD *)(v56 + 24) + 8 * v276) = *v546;
        }
        else
        {
          (*v258)[v276] = v275;
        }
        *(_DWORD *)(v56 + 36) = v276 + 1;
      }
      *(_QWORD *)(v58 + 88) = v56;
      if (*(_QWORD *)v58)
        v279 = *(_QWORD *)(*(_QWORD *)v58 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v58 + 14992) << 32);
      else
        v279 = 0;
      v280 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin>((JSC::B3::BasicBlock *)v56, *(JSC::B3::Value **)(v58 + 56), 153, 1, v279);
      *(_QWORD *)(v247 + 40) = v280;
      *(_QWORD *)(v265 + 40) = v280;
      v281 = JSC::Wasm::OMGIRGenerator::getPushVariable(v58, *((_DWORD *)v280 + 4));
      v282 = *(_QWORD *)(v58 + 88);
      v283 = *(JSC::B3::Value **)(v58 + 56);
      if (*(_QWORD *)v58)
        v284 = *(_QWORD *)(*(_QWORD *)v58 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v58 + 14992) << 32);
      else
        v284 = 0;
      v285 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v285 + 8) = -1;
      *(_WORD *)(v285 + 12) = 9;
      *(_DWORD *)(v285 + 16) = 0;
      *(_BYTE *)(v285 + 20) = 1;
      *(_QWORD *)(v285 + 24) = v284;
      *(_QWORD *)(v285 + 32) = 0;
      *(_QWORD *)v285 = off_1E357F0F8;
      *(_QWORD *)(v285 + 40) = v281;
      *(_QWORD *)(v285 + 48) = v280;
      JSC::B3::Procedure::addValueImpl(v283, (JSC::B3::Value *)v285);
      v620 = v285;
      result = (char **)(v282 + 8);
      v287 = *(unsigned int *)(v282 + 20);
      if ((_DWORD)v287 == *(_DWORD *)(v282 + 16))
      {
        result = (char **)WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v287 + 1, (unint64_t)&v620);
        v287 = *(unsigned int *)(v282 + 20);
        *(_QWORD *)(*(_QWORD *)(v282 + 8) + 8 * v287) = *result;
        v285 = v620;
      }
      else
      {
        *(_QWORD *)&(*result)[8 * v287] = v285;
      }
      *(_DWORD *)(v282 + 20) = v287 + 1;
      *(_QWORD *)(v285 + 32) = v282;
      *v607 = v281;
      return result;
    }
  }
  else
  {
    switch((char)a5)
    {
      case -22:
      case -21:
        v291 = (JSC::B3::Value *)v615[7];
        if (*v615)
          v292 = *(_QWORD *)(*v615 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v615 + 14992) << 32);
        else
          v292 = 0;
        v293 = WTF::fastMalloc((WTF *)0x30);
        v294 = *(_DWORD *)(v613 + 4);
        *(_DWORD *)(v293 + 8) = -1;
        *(_WORD *)(v293 + 12) = 10;
        *(_DWORD *)(v293 + 16) = v294;
        *(_BYTE *)(v293 + 20) = 0;
        *(_QWORD *)(v293 + 24) = v292;
        *(_QWORD *)(v293 + 32) = 0;
        *(_QWORD *)v293 = off_1E357F0F8;
        *(_QWORD *)(v293 + 40) = v613;
        JSC::B3::Procedure::addValueImpl(v291, (JSC::B3::Value *)v293);
        v620 = v293;
        v295 = (char **)(v611 + 1);
        v296 = *((unsigned int *)v611 + 5);
        if ((_DWORD)v296 == *((_DWORD *)v611 + 4))
        {
          v520 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v611 + 1, v296 + 1, (unint64_t)&v620);
          v296 = *((unsigned int *)v611 + 5);
          *(_QWORD *)(v611[1] + 8 * v296) = *(_QWORD *)v520;
          v297 = v620;
        }
        else
        {
          *(_QWORD *)&(*v295)[8 * v296] = v293;
          v297 = v293;
        }
        *((_DWORD *)v611 + 5) = v296 + 1;
        *(_QWORD *)(v297 + 32) = v611;
        v298 = JSC::Wasm::OMGIRGenerator::constant(v615, 2u, 0xFFFE000000000002, 0, 0);
        v299 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(22, v292, v293, v298);
        JSC::B3::Procedure::addValueImpl(v291, v299);
        v620 = (uint64_t)v299;
        v300 = *((unsigned int *)v611 + 5);
        if ((_DWORD)v300 == *((_DWORD *)v611 + 4))
        {
          v521 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v295, v300 + 1, (unint64_t)&v620);
          v300 = *((unsigned int *)v611 + 5);
          *(_QWORD *)(v611[1] + 8 * v300) = *(_QWORD *)v521;
          v301 = v620;
        }
        else
        {
          *(_QWORD *)&(*v295)[8 * v300] = v299;
          v301 = (uint64_t)v299;
        }
        v302 = (uint64_t *)(v300 + 1);
        *((_DWORD *)v611 + 5) = (_DWORD)v302;
        *(_QWORD *)(v301 + 32) = v611;
        JSC::Wasm::OMGIRGenerator::emitCheckOrBranchForCast<JSC::Wasm::OMGIRGenerator::emitRefTestOrCast(JSC::Wasm::OMGIRGenerator::CastKind,JSC::B3::Variable *,BOOL,int,BOOL,JSC::B3::Variable *&)::$_0>(v615, a2, (uint64_t)v299, &v617, (uint64_t)v616, v302);
        v303 = v615[11];
        v304 = (JSC::B3::Value *)v615[7];
        if (*v615)
          v305 = *(_QWORD *)(*v615 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v615 + 14992) << 32);
        else
          v305 = 0;
        v306 = WTF::fastMalloc((WTF *)0x30);
        v307 = *(_DWORD *)(v613 + 4);
        *(_DWORD *)(v306 + 8) = -1;
        *(_WORD *)(v306 + 12) = 10;
        *(_DWORD *)(v306 + 16) = v307;
        *(_BYTE *)(v306 + 20) = 0;
        *(_QWORD *)(v306 + 24) = v305;
        *(_QWORD *)(v306 + 32) = 0;
        *(_QWORD *)v306 = off_1E357F0F8;
        *(_QWORD *)(v306 + 40) = v613;
        JSC::B3::Procedure::addValueImpl(v304, (JSC::B3::Value *)v306);
        v620 = v306;
        v308 = (char **)(v303 + 8);
        v309 = *(unsigned int *)(v303 + 20);
        if ((_DWORD)v309 == *(_DWORD *)(v303 + 16))
        {
          v522 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v308, v309 + 1, (unint64_t)&v620);
          v309 = *(unsigned int *)(v303 + 20);
          *(_QWORD *)(*(_QWORD *)(v303 + 8) + 8 * v309) = *(_QWORD *)v522;
          v310 = v620;
        }
        else
        {
          *(_QWORD *)&(*v308)[8 * v309] = v306;
          v310 = v306;
        }
        *(_DWORD *)(v303 + 20) = v309 + 1;
        *(_QWORD *)(v310 + 32) = v303;
        v311 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Value *,int>((JSC::B3::BasicBlock *)v303, v304, 63, 1, v305, v306, 5);
        v312 = v615[11];
        v313 = (JSC::B3::Value *)v615[7];
        if (*v615)
          v314 = *(_QWORD *)(*v615 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v615 + 14992) << 32);
        else
          v314 = 0;
        v315 = JSC::Wasm::OMGIRGenerator::constant(v615, 1u, 0x4BuLL, 0, 0);
        v316 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, v314, (uint64_t)v311, v315);
        JSC::B3::Procedure::addValueImpl(v313, v316);
        v620 = (uint64_t)v316;
        v317 = (char **)(v312 + 8);
        v318 = *(unsigned int *)(v312 + 20);
        if ((_DWORD)v318 == *(_DWORD *)(v312 + 16))
        {
          v523 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v317, v318 + 1, (unint64_t)&v620);
          v318 = *(unsigned int *)(v312 + 20);
          *(_QWORD *)(*(_QWORD *)(v312 + 8) + 8 * v318) = *(_QWORD *)v523;
          v319 = v620;
        }
        else
        {
          *(_QWORD *)&(*v317)[8 * v318] = v316;
          v319 = (uint64_t)v316;
        }
        v320 = (uint64_t *)(v318 + 1);
        *(_DWORD *)(v312 + 20) = (_DWORD)v320;
        *(_QWORD *)(v319 + 32) = v312;
        JSC::Wasm::OMGIRGenerator::emitCheckOrBranchForCast<JSC::Wasm::OMGIRGenerator::emitRefTestOrCast(JSC::Wasm::OMGIRGenerator::CastKind,JSC::B3::Variable *,BOOL,int,BOOL,JSC::B3::Variable *&)::$_0>(v615, a2, (uint64_t)v316, &v617, (uint64_t)v616, v320);
        v321 = v615[11];
        v322 = (JSC::B3::Value *)v615[7];
        if (*v615)
          v323 = *(_QWORD *)(*v615 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v615 + 14992) << 32);
        else
          v323 = 0;
        v324 = WTF::fastMalloc((WTF *)0x30);
        v325 = *(_DWORD *)(v613 + 4);
        *(_DWORD *)(v324 + 8) = -1;
        *(_WORD *)(v324 + 12) = 10;
        *(_DWORD *)(v324 + 16) = v325;
        *(_BYTE *)(v324 + 20) = 0;
        *(_QWORD *)(v324 + 24) = v323;
        *(_QWORD *)(v324 + 32) = 0;
        *(_QWORD *)v324 = off_1E357F0F8;
        *(_QWORD *)(v324 + 40) = v613;
        JSC::B3::Procedure::addValueImpl(v322, (JSC::B3::Value *)v324);
        v620 = v324;
        v326 = (char **)(v321 + 8);
        v327 = *(unsigned int *)(v321 + 20);
        if ((_DWORD)v327 == *(_DWORD *)(v321 + 16))
        {
          v524 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v326, v327 + 1, (unint64_t)&v620);
          v327 = *(unsigned int *)(v321 + 20);
          *(_QWORD *)(*(_QWORD *)(v321 + 8) + 8 * v327) = *(_QWORD *)v524;
          v328 = v620;
        }
        else
        {
          *(_QWORD *)&(*v326)[8 * v327] = v324;
          v328 = v324;
        }
        *(_DWORD *)(v321 + 20) = v327 + 1;
        *(_QWORD *)(v328 + 32) = v321;
        v329 = v615[11];
        v330 = (JSC::B3::Value *)v615[7];
        if (*v615)
          v331 = *(_QWORD *)(*v615 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v615 + 14992) << 32);
        else
          v331 = 0;
        v332 = WTF::fastMalloc((WTF *)0x48);
        *(_DWORD *)(v332 + 8) = -1;
        *(_WORD *)(v332 + 12) = 67;
        *(_DWORD *)(v332 + 16) = 2;
        *(_BYTE *)(v332 + 20) = 1;
        *(_QWORD *)(v332 + 24) = v331;
        *(_QWORD *)(v332 + 32) = 0;
        *(_QWORD *)(v332 + 64) = v324;
        *(_QWORD *)v332 = off_1E357E4C8;
        *(_DWORD *)(v332 + 40) = 16;
        *(_OWORD *)(v332 + 44) = xmmword_19914F690;
        JSC::B3::Procedure::addValueImpl(v330, (JSC::B3::Value *)v332);
        v620 = v332;
        v333 = (char **)(v329 + 8);
        v334 = *(unsigned int *)(v329 + 20);
        if ((_DWORD)v334 == *(_DWORD *)(v329 + 16))
        {
          v525 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v333, v334 + 1, (unint64_t)&v620);
          v334 = *(unsigned int *)(v329 + 20);
          *(_QWORD *)(*(_QWORD *)(v329 + 8) + 8 * v334) = *(_QWORD *)v525;
          v335 = v620;
        }
        else
        {
          *(_QWORD *)&(*v333)[8 * v334] = v332;
          v335 = v332;
        }
        v50 = a2;
        *(_DWORD *)(v329 + 20) = v334 + 1;
        *(_QWORD *)(v335 + 32) = v329;
        if (a5 == 234)
          v336 = 1;
        else
          v336 = 2;
        v232 = JSC::Wasm::OMGIRGenerator::emitNotRTTKind(v615, v332, v336);
        goto LABEL_164;
      case -20:
        v368 = (JSC::B3::Value *)v615[7];
        if (*v615)
          v369 = *(_QWORD *)(*v615 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v615 + 14992) << 32);
        else
          v369 = 0;
        v370 = WTF::fastMalloc((WTF *)0x30);
        v371 = *(_DWORD *)(v613 + 4);
        *(_DWORD *)(v370 + 8) = -1;
        *(_WORD *)(v370 + 12) = 10;
        *(_DWORD *)(v370 + 16) = v371;
        *(_BYTE *)(v370 + 20) = 0;
        *(_QWORD *)(v370 + 24) = v369;
        *(_QWORD *)(v370 + 32) = 0;
        *(_QWORD *)v370 = off_1E357F0F8;
        *(_QWORD *)(v370 + 40) = v613;
        JSC::B3::Procedure::addValueImpl(v368, (JSC::B3::Value *)v370);
        v620 = v370;
        v372 = (char **)(v611 + 1);
        v373 = *((unsigned int *)v611 + 5);
        if ((_DWORD)v373 == *((_DWORD *)v611 + 4))
        {
          v527 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v611 + 1, v373 + 1, (unint64_t)&v620);
          v373 = *((unsigned int *)v611 + 5);
          *(_QWORD *)(v611[1] + 8 * v373) = *(_QWORD *)v527;
          v374 = v620;
        }
        else
        {
          *(_QWORD *)&(*v372)[8 * v373] = v370;
          v374 = v370;
        }
        *((_DWORD *)v611 + 5) = v373 + 1;
        *(_QWORD *)(v374 + 32) = v611;
        v375 = JSC::Wasm::OMGIRGenerator::constant(v615, 2u, 0xFFFE000000000000, 0, 0);
        v376 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(58, v369, v370, v375);
        JSC::B3::Procedure::addValueImpl(v368, v376);
        v620 = (uint64_t)v376;
        v377 = *((unsigned int *)v611 + 5);
        if ((_DWORD)v377 == *((_DWORD *)v611 + 4))
        {
          v528 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v372, v377 + 1, (unint64_t)&v620);
          v377 = *((unsigned int *)v611 + 5);
          *(_QWORD *)(v611[1] + 8 * v377) = *(_QWORD *)v528;
          v378 = v620;
        }
        else
        {
          *(_QWORD *)&(*v372)[8 * v377] = v376;
          v378 = (uint64_t)v376;
        }
        v379 = (uint64_t *)(v377 + 1);
        *((_DWORD *)v611 + 5) = (_DWORD)v379;
        *(_QWORD *)(v378 + 32) = v611;
        JSC::Wasm::OMGIRGenerator::emitCheckOrBranchForCast<JSC::Wasm::OMGIRGenerator::emitRefTestOrCast(JSC::Wasm::OMGIRGenerator::CastKind,JSC::B3::Variable *,BOOL,int,BOOL,JSC::B3::Variable *&)::$_0>(v615, a2, (uint64_t)v376, &v617, (uint64_t)v616, v379);
        v380 = v615[11];
        v381 = (JSC::B3::Value *)v615[7];
        if (*v615)
          v382 = *(_QWORD *)(*v615 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v615 + 14992) << 32);
        else
          v382 = 0;
        v383 = WTF::fastMalloc((WTF *)0x30);
        v384 = *(_DWORD *)(v613 + 4);
        *(_DWORD *)(v383 + 8) = -1;
        *(_WORD *)(v383 + 12) = 10;
        *(_DWORD *)(v383 + 16) = v384;
        *(_BYTE *)(v383 + 20) = 0;
        *(_QWORD *)(v383 + 24) = v382;
        *(_QWORD *)(v383 + 32) = 0;
        *(_QWORD *)v383 = off_1E357F0F8;
        *(_QWORD *)(v383 + 40) = v613;
        JSC::B3::Procedure::addValueImpl(v381, (JSC::B3::Value *)v383);
        v620 = v383;
        v385 = (_QWORD *)(v380 + 8);
        v386 = *(unsigned int *)(v380 + 20);
        if ((_DWORD)v386 == *(_DWORD *)(v380 + 16))
        {
          v529 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v380 + 8), v386 + 1, (unint64_t)&v620);
          v386 = *(unsigned int *)(v380 + 20);
          *(_QWORD *)(*(_QWORD *)(v380 + 8) + 8 * v386) = *(_QWORD *)v529;
          v387 = v620;
        }
        else
        {
          *(_QWORD *)(*v385 + 8 * v386) = v383;
          v387 = v383;
        }
        *(_DWORD *)(v380 + 20) = v386 + 1;
        *(_QWORD *)(v387 + 32) = v380;
        v388 = WTF::fastMalloc((WTF *)0x30);
        v224 = (JSC::B3::Value *)v388;
        *(_QWORD *)v388 = off_1E357F5F0;
        *(_DWORD *)(v388 + 8) = -1;
        *(_WORD *)(v388 + 12) = 44;
        if (*(_DWORD *)(v383 + 16) == 2)
          v389 = 1;
        else
          v389 = 3;
        *(_DWORD *)(v388 + 16) = v389;
        *(_BYTE *)(v388 + 20) = 1;
        *(_QWORD *)(v388 + 24) = v382;
        *(_QWORD *)(v388 + 32) = 0;
        JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v388, 1, v383);
        JSC::B3::Procedure::addValueImpl(v381, v224);
        v620 = (uint64_t)v224;
        v390 = *(unsigned int *)(v380 + 20);
        if ((_DWORD)v390 == *(_DWORD *)(v380 + 16))
        {
          v530 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v380 + 8), v390 + 1, (unint64_t)&v620);
          v390 = *(unsigned int *)(v380 + 20);
          *(_QWORD *)(*(_QWORD *)(v380 + 8) + 8 * v390) = *(_QWORD *)v530;
          v391 = v620;
        }
        else
        {
          *(_QWORD *)(*v385 + 8 * v390) = v224;
          v391 = (uint64_t)v224;
        }
        *(_DWORD *)(v380 + 20) = v390 + 1;
        *(_QWORD *)(v391 + 32) = v380;
        v392 = v615[11];
        v393 = (JSC::B3::Value *)v615[7];
        if (*v615)
          v394 = *(_QWORD *)(*v615 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v615 + 14992) << 32);
        else
          v394 = 0;
        v395 = JSC::Wasm::OMGIRGenerator::constant(v615, 1u, 0x3FFFFFFFuLL, 0, 0);
        v396 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(54, v394, (uint64_t)v224, v395);
        JSC::B3::Procedure::addValueImpl(v393, v396);
        v620 = (uint64_t)v396;
        v397 = (char **)(v392 + 8);
        v398 = *(unsigned int *)(v392 + 20);
        if ((_DWORD)v398 == *(_DWORD *)(v392 + 16))
        {
          v531 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v397, v398 + 1, (unint64_t)&v620);
          v398 = *(unsigned int *)(v392 + 20);
          *(_QWORD *)(*(_QWORD *)(v392 + 8) + 8 * v398) = *(_QWORD *)v531;
          v399 = v620;
        }
        else
        {
          *(_QWORD *)&(*v397)[8 * v398] = v396;
          v399 = (uint64_t)v396;
        }
        v400 = (uint64_t *)(v398 + 1);
        *(_DWORD *)(v392 + 20) = (_DWORD)v400;
        *(_QWORD *)(v399 + 32) = v392;
        JSC::Wasm::OMGIRGenerator::emitCheckOrBranchForCast<JSC::Wasm::OMGIRGenerator::emitRefTestOrCast(JSC::Wasm::OMGIRGenerator::CastKind,JSC::B3::Variable *,BOOL,int,BOOL,JSC::B3::Variable *&)::$_0>(v615, a2, (uint64_t)v396, &v617, (uint64_t)v616, v400);
        v227 = v615[11];
        v228 = (JSC::B3::Value *)v615[7];
        if (*v615)
          v229 = *(_QWORD *)(*v615 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v615 + 14992) << 32);
        else
          v229 = 0;
        v230 = JSC::Wasm::OMGIRGenerator::constant(v615, 1u, 0xFFFFFFFFC0000000, 0, 0);
        v231 = 53;
        goto LABEL_161;
      case -19:
        v401 = JSC::B3::Procedure::addBlock((uint64_t *)(a5 - 234), (JSC::B3::Procedure *)v615[7], 1.0);
        v402 = v615[11];
        v403 = (JSC::B3::Value *)v615[7];
        if (*v615)
          v404 = *(_QWORD *)(*v615 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v615 + 14992) << 32);
        else
          v404 = 0;
        v405 = WTF::fastMalloc((WTF *)0x30);
        v406 = *(_DWORD *)(v613 + 4);
        *(_DWORD *)(v405 + 8) = -1;
        *(_WORD *)(v405 + 12) = 10;
        *(_DWORD *)(v405 + 16) = v406;
        *(_BYTE *)(v405 + 20) = 0;
        *(_QWORD *)(v405 + 24) = v404;
        *(_QWORD *)(v405 + 32) = 0;
        *(_QWORD *)v405 = off_1E357F0F8;
        *(_QWORD *)(v405 + 40) = v613;
        JSC::B3::Procedure::addValueImpl(v403, (JSC::B3::Value *)v405);
        v620 = v405;
        v407 = (_QWORD *)(v402 + 8);
        v408 = *(unsigned int *)(v402 + 20);
        if ((_DWORD)v408 == *(_DWORD *)(v402 + 16))
        {
          v532 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v402 + 8), v408 + 1, (unint64_t)&v620);
          v408 = *(unsigned int *)(v402 + 20);
          *(_QWORD *)(*(_QWORD *)(v402 + 8) + 8 * v408) = *(_QWORD *)v532;
          v409 = v620;
        }
        else
        {
          *(_QWORD *)(*v407 + 8 * v408) = v405;
          v409 = v405;
        }
        *(_DWORD *)(v402 + 20) = v408 + 1;
        *(_QWORD *)(v409 + 32) = v402;
        v410 = JSC::Wasm::OMGIRGenerator::constant(v615, 2u, 0xFFFE000000000000, 0, 0);
        v411 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(58, v404, v405, v410);
        JSC::B3::Procedure::addValueImpl(v403, v411);
        v620 = (uint64_t)v411;
        v412 = *(unsigned int *)(v402 + 20);
        if ((_DWORD)v412 == *(_DWORD *)(v402 + 16))
        {
          v533 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v402 + 8), v412 + 1, (unint64_t)&v620);
          v412 = *(unsigned int *)(v402 + 20);
          *(_QWORD *)(*(_QWORD *)(v402 + 8) + 8 * v412) = *(_QWORD *)v533;
          v413 = v620;
        }
        else
        {
          *(_QWORD *)(*v407 + 8 * v412) = v411;
          v413 = (uint64_t)v411;
        }
        v414 = (uint64_t *)(v412 + 1);
        *(_DWORD *)(v402 + 20) = (_DWORD)v414;
        *(_QWORD *)(v413 + 32) = v402;
        v416 = JSC::B3::Procedure::addBlock(v414, (JSC::B3::Procedure *)v615[7], 1.0);
        v417 = v615[11];
        v418 = v615[7];
        if (*v615)
          v419 = *(_QWORD *)(*v615 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v615 + 14992) << 32);
        else
          v419 = 0;
        v620 = (uint64_t)v401;
        v621 = 0;
        v618 = v416;
        v619 = 0;
        JSC::B3::BasicBlock::appendNewControlValue(v417, v418, 155, v419, (uint64_t)v411, &v620, (uint64_t *)&v618, v415);
        v420 = v615[11];
        v620 = v420;
        v421 = (_QWORD **)(v401 + 3);
        v422 = *((unsigned int *)v401 + 9);
        if (!(_DWORD)v422)
          goto LABEL_304;
        v423 = *v421;
        v424 = *((unsigned int *)v401 + 9);
        while (*v423 != v420)
        {
          ++v423;
          if (!--v424)
          {
LABEL_304:
            if ((_DWORD)v422 == *((_DWORD *)v401 + 8))
            {
              v550 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v401 + 3), v422 + 1, (unint64_t)&v620);
              v422 = *((unsigned int *)v401 + 9);
              *(_QWORD *)(v401[3] + 8 * v422) = *v550;
            }
            else
            {
              (*v421)[v422] = v420;
            }
            *((_DWORD *)v401 + 9) = v422 + 1;
            v420 = v615[11];
            break;
          }
        }
        v620 = v420;
        v425 = v416 + 3;
        v426 = *((unsigned int *)v416 + 9);
        if ((_DWORD)v426)
        {
          v427 = (_QWORD *)*v425;
          v428 = *((unsigned int *)v416 + 9);
          while (*v427 != v420)
          {
            ++v427;
            if (!--v428)
              goto LABEL_311;
          }
        }
        else
        {
LABEL_311:
          if ((_DWORD)v426 == *((_DWORD *)v416 + 8))
          {
            v551 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v425, v426 + 1, (unint64_t)&v620);
            v426 = *((unsigned int *)v416 + 9);
            *(_QWORD *)(v416[3] + 8 * v426) = *v551;
          }
          else
          {
            *(_QWORD *)(*v425 + 8 * v426) = v420;
          }
          *((_DWORD *)v416 + 9) = v426 + 1;
        }
        v615[11] = (uint64_t)v416;
        v429 = (JSC::B3::Value *)v615[7];
        if (*v615)
          v430 = *(_QWORD *)(*v615 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v615 + 14992) << 32);
        else
          v430 = 0;
        v431 = WTF::fastMalloc((WTF *)0x30);
        v432 = *(_DWORD *)(v613 + 4);
        *(_DWORD *)(v431 + 8) = -1;
        *(_WORD *)(v431 + 12) = 10;
        *(_DWORD *)(v431 + 16) = v432;
        *(_BYTE *)(v431 + 20) = 0;
        *(_QWORD *)(v431 + 24) = v430;
        *(_QWORD *)(v431 + 32) = 0;
        *(_QWORD *)v431 = off_1E357F0F8;
        *(_QWORD *)(v431 + 40) = v613;
        JSC::B3::Procedure::addValueImpl(v429, (JSC::B3::Value *)v431);
        v620 = v431;
        v433 = v416 + 1;
        v434 = *((unsigned int *)v416 + 5);
        if ((_DWORD)v434 == *((_DWORD *)v416 + 4))
        {
          v534 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v416 + 1, v434 + 1, (unint64_t)&v620);
          v434 = *((unsigned int *)v416 + 5);
          *(_QWORD *)(v416[1] + 8 * v434) = *(_QWORD *)v534;
          v435 = v620;
        }
        else
        {
          *(_QWORD *)(*v433 + 8 * v434) = v431;
          v435 = v431;
        }
        *((_DWORD *)v416 + 5) = v434 + 1;
        *(_QWORD *)(v435 + 32) = v416;
        v436 = WTF::fastMalloc((WTF *)0x30);
        v437 = (JSC::B3::Value *)v436;
        *(_QWORD *)v436 = off_1E357F5F0;
        *(_DWORD *)(v436 + 8) = -1;
        *(_WORD *)(v436 + 12) = 44;
        if (*(_DWORD *)(v431 + 16) == 2)
          v438 = 1;
        else
          v438 = 3;
        *(_DWORD *)(v436 + 16) = v438;
        *(_BYTE *)(v436 + 20) = 1;
        *(_QWORD *)(v436 + 24) = v430;
        *(_QWORD *)(v436 + 32) = 0;
        JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v436, 1, v431);
        JSC::B3::Procedure::addValueImpl(v429, v437);
        v620 = (uint64_t)v437;
        v439 = *((unsigned int *)v416 + 5);
        if ((_DWORD)v439 == *((_DWORD *)v416 + 4))
        {
          v535 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v416 + 1, v439 + 1, (unint64_t)&v620);
          v439 = *((unsigned int *)v416 + 5);
          *(_QWORD *)(v416[1] + 8 * v439) = *(_QWORD *)v535;
          v440 = v620;
        }
        else
        {
          *(_QWORD *)(*v433 + 8 * v439) = v437;
          v440 = (uint64_t)v437;
        }
        *((_DWORD *)v416 + 5) = v439 + 1;
        *(_QWORD *)(v440 + 32) = v416;
        v441 = v615[11];
        v442 = (JSC::B3::Value *)v615[7];
        if (*v615)
          v443 = *(_QWORD *)(*v615 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v615 + 14992) << 32);
        else
          v443 = 0;
        v444 = JSC::Wasm::OMGIRGenerator::constant(v615, 1u, 0x3FFFFFFFuLL, 0, 0);
        v445 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(54, v443, (uint64_t)v437, v444);
        JSC::B3::Procedure::addValueImpl(v442, v445);
        v620 = (uint64_t)v445;
        v446 = (char **)(v441 + 8);
        v447 = *(unsigned int *)(v441 + 20);
        if ((_DWORD)v447 == *(_DWORD *)(v441 + 16))
        {
          v536 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v446, v447 + 1, (unint64_t)&v620);
          v447 = *(unsigned int *)(v441 + 20);
          *(_QWORD *)(*(_QWORD *)(v441 + 8) + 8 * v447) = *(_QWORD *)v536;
          v448 = v620;
        }
        else
        {
          *(_QWORD *)&(*v446)[8 * v447] = v445;
          v448 = (uint64_t)v445;
        }
        v449 = (uint64_t *)(v447 + 1);
        *(_DWORD *)(v441 + 20) = (_DWORD)v449;
        *(_QWORD *)(v448 + 32) = v441;
        v451 = JSC::B3::Procedure::addBlock(v449, (JSC::B3::Procedure *)v615[7], 1.0);
        v452 = v615[11];
        v453 = v615[7];
        if (*v615)
          v454 = *(_QWORD *)(*v615 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v615 + 14992) << 32);
        else
          v454 = 0;
        v620 = (uint64_t)v401;
        v621 = 0;
        v618 = v451;
        v619 = 0;
        JSC::B3::BasicBlock::appendNewControlValue(v452, v453, 155, v454, (uint64_t)v445, &v620, (uint64_t *)&v618, v450);
        v455 = v615[11];
        v620 = v455;
        v456 = *((unsigned int *)v401 + 9);
        if ((_DWORD)v456)
        {
          v457 = *v421;
          v458 = *((unsigned int *)v401 + 9);
          while (*v457 != v455)
          {
            ++v457;
            if (!--v458)
              goto LABEL_333;
          }
        }
        else
        {
LABEL_333:
          if ((_DWORD)v456 == *((_DWORD *)v401 + 8))
          {
            v552 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v401 + 3), v456 + 1, (unint64_t)&v620);
            v456 = *((unsigned int *)v401 + 9);
            *(_QWORD *)(v401[3] + 8 * v456) = *v552;
          }
          else
          {
            (*v421)[v456] = v455;
          }
          *((_DWORD *)v401 + 9) = v456 + 1;
          v455 = v615[11];
        }
        v620 = v455;
        v459 = v451 + 3;
        v460 = *((unsigned int *)v451 + 9);
        if ((_DWORD)v460)
        {
          v461 = (_QWORD *)*v459;
          v462 = *((unsigned int *)v451 + 9);
          while (*v461 != v455)
          {
            ++v461;
            if (!--v462)
              goto LABEL_340;
          }
        }
        else
        {
LABEL_340:
          if ((_DWORD)v460 == *((_DWORD *)v451 + 8))
          {
            v553 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v459, v460 + 1, (unint64_t)&v620);
            v460 = *((unsigned int *)v451 + 9);
            *(_QWORD *)(v451[3] + 8 * v460) = *v553;
          }
          else
          {
            *(_QWORD *)(*v459 + 8 * v460) = v455;
          }
          *((_DWORD *)v451 + 9) = v460 + 1;
        }
        v615[11] = (uint64_t)v451;
        v463 = (JSC::B3::Value *)v615[7];
        if (*v615)
          v464 = *(_QWORD *)(*v615 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v615 + 14992) << 32);
        else
          v464 = 0;
        v465 = JSC::Wasm::OMGIRGenerator::constant(v615, 1u, 0xFFFFFFFFC0000000, 0, 0);
        v466 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(53, v464, (uint64_t)v437, v465);
        JSC::B3::Procedure::addValueImpl(v463, v466);
        v620 = (uint64_t)v466;
        v467 = (char **)(v451 + 1);
        v468 = *((unsigned int *)v451 + 5);
        if ((_DWORD)v468 == *((_DWORD *)v451 + 4))
        {
          v537 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v467, v468 + 1, (unint64_t)&v620);
          v468 = *((unsigned int *)v451 + 5);
          *(_QWORD *)(v451[1] + 8 * v468) = *(_QWORD *)v537;
          v469 = v620;
        }
        else
        {
          *(_QWORD *)&(*v467)[8 * v468] = v466;
          v469 = (uint64_t)v466;
        }
        v470 = (uint64_t *)(v468 + 1);
        *((_DWORD *)v451 + 5) = (_DWORD)v470;
        *(_QWORD *)(v469 + 32) = v451;
        v472 = JSC::B3::Procedure::addBlock(v470, (JSC::B3::Procedure *)v615[7], 1.0);
        v473 = v615[11];
        v474 = v615[7];
        if (*v615)
          v475 = *(_QWORD *)(*v615 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v615 + 14992) << 32);
        else
          v475 = 0;
        v50 = a2;
        v620 = (uint64_t)v401;
        v621 = 0;
        v618 = v472;
        v619 = 0;
        JSC::B3::BasicBlock::appendNewControlValue(v473, v474, 155, v475, (uint64_t)v466, &v620, (uint64_t *)&v618, v471);
        v479 = v615[11];
        v620 = v479;
        v480 = *((unsigned int *)v401 + 9);
        if ((_DWORD)v480)
        {
          v481 = *v421;
          v482 = *((unsigned int *)v401 + 9);
          while (*v481 != v479)
          {
            ++v481;
            if (!--v482)
              goto LABEL_353;
          }
        }
        else
        {
LABEL_353:
          if ((_DWORD)v480 == *((_DWORD *)v401 + 8))
          {
            v554 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v401 + 3), v480 + 1, (unint64_t)&v620);
            v480 = *((unsigned int *)v401 + 9);
            *(_QWORD *)(v401[3] + 8 * v480) = *v554;
          }
          else
          {
            (*v421)[v480] = v479;
          }
          *((_DWORD *)v401 + 9) = v480 + 1;
          v479 = v615[11];
        }
        v620 = v479;
        v483 = v472 + 3;
        v484 = *((unsigned int *)v472 + 9);
        if ((_DWORD)v484)
        {
          v485 = (_QWORD *)*v483;
          v486 = *((unsigned int *)v472 + 9);
          while (*v485 != v479)
          {
            ++v485;
            if (!--v486)
              goto LABEL_360;
          }
        }
        else
        {
LABEL_360:
          if ((_DWORD)v484 == *((_DWORD *)v472 + 8))
          {
            v555 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v483, v484 + 1, (unint64_t)&v620);
            v484 = *((unsigned int *)v472 + 9);
            *(_QWORD *)(v472[3] + 8 * v484) = *v555;
          }
          else
          {
            *(_QWORD *)(*v483 + 8 * v484) = v479;
          }
          *((_DWORD *)v472 + 9) = v484 + 1;
        }
        v615[11] = (uint64_t)v472;
        v487 = v615[7];
        if (*v615)
          v488 = *(_QWORD *)(*v615 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v615 + 14992) << 32);
        else
          v488 = 0;
        v620 = v605;
        v621 = 0;
        JSC::B3::BasicBlock::appendNewControlValue((uint64_t)v472, v487, 154, v488, &v620, v476, v477, v478);
        v489 = v615[11];
        v620 = v489;
        v490 = *((unsigned int *)v401 + 9);
        if ((_DWORD)v490)
        {
          v491 = *v421;
          v492 = *((unsigned int *)v401 + 9);
          while (*v491 != v489)
          {
            ++v491;
            if (!--v492)
              goto LABEL_369;
          }
          v58 = (uint64_t)v615;
        }
        else
        {
LABEL_369:
          if ((_DWORD)v490 == *((_DWORD *)v401 + 8))
          {
            v556 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v401 + 3), v490 + 1, (unint64_t)&v620);
            v490 = *((unsigned int *)v401 + 9);
            *(_QWORD *)(v401[3] + 8 * v490) = *v556;
          }
          else
          {
            (*v421)[v490] = v489;
          }
          *((_DWORD *)v401 + 9) = v490 + 1;
          v58 = (uint64_t)v615;
          v489 = v615[11];
        }
        v620 = v489;
        v496 = (_QWORD *)(v605 + 24);
        v497 = *(unsigned int *)(v605 + 36);
        if ((_DWORD)v497)
        {
          v498 = (_QWORD *)*v496;
          v499 = *(unsigned int *)(v605 + 36);
          while (*v498 != v489)
          {
            ++v498;
            if (!--v499)
              goto LABEL_380;
          }
        }
        else
        {
LABEL_380:
          if ((_DWORD)v497 == *(_DWORD *)(v605 + 32))
          {
            v557 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v496, v497 + 1, (unint64_t)&v620);
            v497 = *(unsigned int *)(v605 + 36);
            *(_QWORD *)(*(_QWORD *)(v605 + 24) + 8 * v497) = *v557;
          }
          else
          {
            *(_QWORD *)(*v496 + 8 * v497) = v489;
          }
          *(_DWORD *)(v605 + 36) = v497 + 1;
        }
        *(_QWORD *)(v58 + 88) = v401;
        v500 = *(JSC::B3::Value **)(v58 + 56);
        if (*(_QWORD *)v58)
          v501 = *(_QWORD *)(*(_QWORD *)v58 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v58 + 14992) << 32);
        else
          v501 = 0;
        v502 = WTF::fastMalloc((WTF *)0x30);
        v503 = *(_DWORD *)(v613 + 4);
        *(_DWORD *)(v502 + 8) = -1;
        *(_WORD *)(v502 + 12) = 10;
        *(_DWORD *)(v502 + 16) = v503;
        *(_BYTE *)(v502 + 20) = 0;
        *(_QWORD *)(v502 + 24) = v501;
        *(_QWORD *)(v502 + 32) = 0;
        *(_QWORD *)v502 = off_1E357F0F8;
        *(_QWORD *)(v502 + 40) = v613;
        JSC::B3::Procedure::addValueImpl(v500, (JSC::B3::Value *)v502);
        v620 = v502;
        v504 = v401 + 1;
        v505 = *((unsigned int *)v401 + 5);
        if ((_DWORD)v505 == *((_DWORD *)v401 + 4))
        {
          v538 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v401 + 1, v505 + 1, (unint64_t)&v620);
          v505 = *((unsigned int *)v401 + 5);
          *(_QWORD *)(v401[1] + 8 * v505) = *(_QWORD *)v538;
          v506 = v620;
        }
        else
        {
          *(_QWORD *)(*v504 + 8 * v505) = v502;
          v506 = v502;
        }
        *((_DWORD *)v401 + 5) = v505 + 1;
        *(_QWORD *)(v506 + 32) = v401;
        v507 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)v58, 2u, 0xFFFE000000000002, 0, 0);
        v508 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(22, v501, v502, v507);
        JSC::B3::Procedure::addValueImpl(v500, v508);
        v620 = (uint64_t)v508;
        v509 = *((unsigned int *)v401 + 5);
        if ((_DWORD)v509 == *((_DWORD *)v401 + 4))
        {
          v539 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v401 + 1, v509 + 1, (unint64_t)&v620);
          v509 = *((unsigned int *)v401 + 5);
          *(_QWORD *)(v401[1] + 8 * v509) = *(_QWORD *)v539;
          v510 = v620;
        }
        else
        {
          *(_QWORD *)(*v504 + 8 * v509) = v508;
          v510 = (uint64_t)v508;
        }
        v511 = (uint64_t *)(v509 + 1);
        *((_DWORD *)v401 + 5) = (_DWORD)v511;
        *(_QWORD *)(v510 + 32) = v401;
        JSC::Wasm::OMGIRGenerator::emitCheckOrBranchForCast<JSC::Wasm::OMGIRGenerator::emitRefTestOrCast(JSC::Wasm::OMGIRGenerator::CastKind,JSC::B3::Variable *,BOOL,int,BOOL,JSC::B3::Variable *&)::$_0>((_QWORD *)v58, a2, (uint64_t)v508, &v617, (uint64_t)v616, v511);
        v512 = *(_QWORD *)(v58 + 88);
        v513 = *(JSC::B3::Value **)(v58 + 56);
        if (*(_QWORD *)v58)
          v514 = *(_QWORD *)(*(_QWORD *)v58 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v58 + 14992) << 32);
        else
          v514 = 0;
        v56 = v612;
        v515 = WTF::fastMalloc((WTF *)0x30);
        v516 = *(_DWORD *)(v613 + 4);
        *(_DWORD *)(v515 + 8) = -1;
        *(_WORD *)(v515 + 12) = 10;
        *(_DWORD *)(v515 + 16) = v516;
        *(_BYTE *)(v515 + 20) = 0;
        *(_QWORD *)(v515 + 24) = v514;
        *(_QWORD *)(v515 + 32) = 0;
        *(_QWORD *)v515 = off_1E357F0F8;
        *(_QWORD *)(v515 + 40) = v613;
        JSC::B3::Procedure::addValueImpl(v513, (JSC::B3::Value *)v515);
        v620 = v515;
        v517 = (char **)(v512 + 8);
        v518 = *(unsigned int *)(v512 + 20);
        if ((_DWORD)v518 == *(_DWORD *)(v512 + 16))
        {
          v540 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v517, v518 + 1, (unint64_t)&v620);
          v518 = *(unsigned int *)(v512 + 20);
          *(_QWORD *)(*(_QWORD *)(v512 + 8) + 8 * v518) = *(_QWORD *)v540;
          v519 = v620;
        }
        else
        {
          *(_QWORD *)&(*v517)[8 * v518] = v515;
          v519 = v515;
        }
        *(_DWORD *)(v512 + 20) = v518 + 1;
        *(_QWORD *)(v519 + 32) = v512;
        v224 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Value *,int>((JSC::B3::BasicBlock *)v512, v513, 63, 1, v514, v515, 5);
        v227 = *(_QWORD *)(v58 + 88);
        v228 = *(JSC::B3::Value **)(v58 + 56);
        if (*(_QWORD *)v58)
          v229 = *(_QWORD *)(*(_QWORD *)v58 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v58 + 14992) << 32);
        else
          v229 = 0;
        v230 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)v58, 1u, 0x4BuLL, 0, 0);
        v231 = 52;
        goto LABEL_161;
      case -18:
      case -17:
      case -16:
        goto LABEL_165;
      case -15:
      case -14:
      case -13:
        v100 = (JSC::B3::Value *)v615[7];
        v101 = *v615;
        if (a2)
        {
          if (v101)
            v102 = *(_QWORD *)(v101 + 15000) | ((unint64_t)*(unsigned __int8 *)(v101 + 14992) << 32);
          else
            v102 = 0;
          v103 = a6;
          v620 = (uint64_t)v616;
          v621 = 0;
          JSC::B3::BasicBlock::appendNewControlValue(v55, (uint64_t)v100, 154, v102, &v620, v77, v78, v79);
          v104 = v615[11];
          v620 = v104;
          v105 = v616 + 3;
          v106 = *((unsigned int *)v616 + 9);
          if ((_DWORD)v106)
          {
            v107 = (_QWORD *)*v105;
            v108 = *((unsigned int *)v616 + 9);
            while (*v107 != v104)
            {
              ++v107;
              if (!--v108)
                goto LABEL_74;
            }
          }
          else
          {
LABEL_74:
            if ((_DWORD)v106 == *((_DWORD *)v616 + 8))
            {
              v549 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v105, v106 + 1, (unint64_t)&v620);
              v106 = *((unsigned int *)v616 + 9);
              *(_QWORD *)(v616[3] + 8 * v106) = *v549;
            }
            else
            {
              *(_QWORD *)(*v105 + 8 * v106) = v104;
            }
            v106 = (v106 + 1);
            *((_DWORD *)v616 + 9) = v106;
          }
          v109 = JSC::B3::Procedure::addBlock((uint64_t *)v106, (JSC::B3::Procedure *)v615[7], 1.0);
          v615[11] = (uint64_t)v109;
          goto LABEL_167;
        }
        if (v101)
          v349 = *(_QWORD *)(v101 + 15000) | ((unint64_t)*(unsigned __int8 *)(v101 + 14992) << 32);
        else
          v349 = 0;
        v350 = WTF::fastMalloc((WTF *)0xD8);
        *(_QWORD *)v350 = off_1E357F5F0;
        *(_DWORD *)(v350 + 8) = -1;
        *(_WORD *)(v350 + 12) = 83;
        *(_DWORD *)(v350 + 16) = 0;
        *(_BYTE *)(v350 + 20) = 4;
        *(_QWORD *)(v350 + 24) = v349;
        *(_QWORD *)(v350 + 32) = 0;
        v351 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v350);
        *v351 = v351 + 2;
        v351[1] = 3;
        *(_OWORD *)(v350 + 40) = 0u;
        *(_OWORD *)(v350 + 56) = 0u;
        *(_OWORD *)(v350 + 72) = 0u;
        *(_OWORD *)(v350 + 88) = 0u;
        *(_QWORD *)(v350 + 104) = 0;
        *(_QWORD *)v350 = off_1E357E700;
        *(_OWORD *)(v350 + 112) = xmmword_1991243D0;
        *(_QWORD *)(v350 + 152) = 0;
        *(_QWORD *)(v350 + 128) = 0xFFFFFFFF00000000;
        *(_QWORD *)(v350 + 136) = v350 + 152;
        *(_WORD *)(v350 + 168) = 0;
        *(_BYTE *)(v350 + 160) = 0;
        *(_QWORD *)(v350 + 144) = 0x100000001;
        JSC::B3::Procedure::addValueImpl(v100, (JSC::B3::Value *)v350);
        v620 = v350;
        v352 = (char **)(v55 + 8);
        v353 = *(unsigned int *)(v55 + 20);
        if ((_DWORD)v353 == *(_DWORD *)(v55 + 16))
        {
          v526 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v352, v353 + 1, (unint64_t)&v620);
          v353 = *(unsigned int *)(v55 + 20);
          *(_QWORD *)(*(_QWORD *)(v55 + 8) + 8 * v353) = *(_QWORD *)v526;
          v354 = v620;
        }
        else
        {
          *(_QWORD *)&(*v352)[8 * v353] = v350;
          v354 = v350;
        }
        *(_DWORD *)(v55 + 20) = v353 + 1;
        *(_QWORD *)(v354 + 32) = v55;
        v355 = WTF::fastMalloc((WTF *)0x18);
        v356 = v617;
        *(_DWORD *)(v355 + 8) = 1;
        *(_QWORD *)v355 = off_1E35B65D0;
        *(_QWORD *)(v355 + 16) = v356;
        v357 = *(unsigned int **)(v350 + 56);
        *(_QWORD *)(v350 + 56) = v355;
        if (v357)
        {
          v358 = v357 + 2;
          do
          {
            v359 = __ldaxr(v358);
            v360 = v359 - 1;
          }
          while (__stlxr(v360, v358));
          if (!v360)
          {
            atomic_store(1u, v357 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v357 + 8))(v357);
          }
        }
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198D94320);
    }
  }
  v361 = *(_QWORD *)(v58 + 88);
  v362 = *(_QWORD *)(v58 + 56);
  if (*(_QWORD *)v58)
    v363 = *(_QWORD *)(*(_QWORD *)v58 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v58 + 14992) << 32);
  else
    v363 = 0;
  v620 = v56;
  v621 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v361, v362, 154, v363, &v620, v77, v78, v79);
  v364 = *(_QWORD *)(v58 + 88);
  v620 = v364;
  result = (char **)(v56 + 24);
  v365 = *(unsigned int *)(v56 + 36);
  if ((_DWORD)v365)
  {
    v366 = *result;
    v367 = *(unsigned int *)(v56 + 36);
    while (*(_QWORD *)v366 != v364)
    {
      v366 += 8;
      if (!--v367)
        goto LABEL_266;
    }
  }
  else
  {
LABEL_266:
    if ((_DWORD)v365 == *(_DWORD *)(v56 + 32))
    {
      result = (char **)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v365 + 1, (unint64_t)&v620);
      v365 = *(unsigned int *)(v56 + 36);
      *(_QWORD *)(*(_QWORD *)(v56 + 24) + 8 * v365) = *result;
    }
    else
    {
      *(_QWORD *)&(*result)[8 * v365] = v364;
    }
    *(_DWORD *)(v56 + 36) = v365 + 1;
  }
  *(_QWORD *)(v58 + 88) = v56;
  return result;
}

unsigned int *JSC::Wasm::OMGIRGenerator::emitCheckOrBranchForCast<JSC::Wasm::OMGIRGenerator::emitRefTestOrCast(JSC::Wasm::OMGIRGenerator::CastKind,JSC::B3::Variable *,BOOL,int,BOOL,JSC::B3::Variable *&)::$_0>@<X0>(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int *result;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  JSC::B3::Value *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  char *v37;
  _QWORD *v38;
  uint64_t *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  if (a2)
  {
    v10 = JSC::B3::Procedure::addBlock(a6, (JSC::B3::Procedure *)a1[7], 1.0);
    v11 = a1[11];
    v12 = a1[7];
    if (*a1)
      v13 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
    else
      v13 = 0;
    v41 = a5;
    LOBYTE(v42) = 0;
    v39 = v10;
    v40 = 0;
    JSC::B3::BasicBlock::appendNewControlValue(v11, v12, 155, v13, a3, &v41, (uint64_t *)&v39, v9);
    v14 = a1[11];
    v41 = v14;
    v15 = (_QWORD *)(a5 + 24);
    v16 = *(unsigned int *)(a5 + 36);
    if ((_DWORD)v16)
    {
      v17 = (_QWORD *)*v15;
      v18 = *(unsigned int *)(a5 + 36);
      while (*v17 != v14)
      {
        ++v17;
        if (!--v18)
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      if ((_DWORD)v16 == *(_DWORD *)(a5 + 32))
      {
        v38 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, v16 + 1, (unint64_t)&v41);
        v16 = *(unsigned int *)(a5 + 36);
        *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8 * v16) = *v38;
      }
      else
      {
        *(_QWORD *)(*v15 + 8 * v16) = v14;
      }
      *(_DWORD *)(a5 + 36) = v16 + 1;
      v14 = a1[11];
    }
    v41 = v14;
    result = (unsigned int *)(v10 + 3);
    v20 = *((unsigned int *)v10 + 9);
    if ((_DWORD)v20)
    {
      v21 = *(_QWORD **)result;
      v22 = *((unsigned int *)v10 + 9);
      while (*v21 != v14)
      {
        ++v21;
        if (!--v22)
          goto LABEL_15;
      }
    }
    else
    {
LABEL_15:
      if ((_DWORD)v20 == *((_DWORD *)v10 + 8))
      {
        result = (unsigned int *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v20 + 1, (unint64_t)&v41);
        v20 = *((unsigned int *)v10 + 9);
        *(_QWORD *)(v10[3] + 8 * v20) = *(_QWORD *)result;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)result + 8 * v20) = v14;
      }
      *((_DWORD *)v10 + 9) = v20 + 1;
    }
    a1[11] = v10;
  }
  else
  {
    v24 = a1[11];
    v25 = (JSC::B3::Value *)a1[7];
    if (*a1)
      v26 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
    else
      v26 = 0;
    v27 = WTF::fastMalloc((WTF *)0x98);
    *(_QWORD *)v27 = off_1E357F5F0;
    *(_DWORD *)(v27 + 8) = -1;
    *(_WORD *)(v27 + 12) = 88;
    *(_DWORD *)(v27 + 16) = 0;
    *(_BYTE *)(v27 + 20) = 4;
    *(_QWORD *)(v27 + 24) = v26;
    *(_QWORD *)(v27 + 32) = 0;
    v28 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v27);
    *v28 = v28 + 2;
    v28[1] = 3;
    *(_OWORD *)(v27 + 40) = 0u;
    *(_OWORD *)(v27 + 56) = 0u;
    *(_OWORD *)(v27 + 72) = 0u;
    *(_OWORD *)(v27 + 88) = 0u;
    *(_QWORD *)(v27 + 104) = 0;
    *(_QWORD *)v27 = off_1E357D550;
    v42 = 0;
    v43 = 0;
    JSC::B3::StackmapValue::append((__int128 *)v27, a3, (unint64_t)&v42);
    JSC::B3::Procedure::addValueImpl(v25, (JSC::B3::Value *)v27);
    v41 = v27;
    v29 = (char **)(v24 + 8);
    v30 = *(unsigned int *)(v24 + 20);
    if ((_DWORD)v30 == *(_DWORD *)(v24 + 16))
    {
      v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29, v30 + 1, (unint64_t)&v41);
      v30 = *(unsigned int *)(v24 + 20);
      *(_QWORD *)(*(_QWORD *)(v24 + 8) + 8 * v30) = *(_QWORD *)v37;
      v31 = v41;
    }
    else
    {
      *(_QWORD *)&(*v29)[8 * v30] = v27;
      v31 = v27;
    }
    *(_DWORD *)(v24 + 20) = v30 + 1;
    *(_QWORD *)(v31 + 32) = v24;
    v32 = WTF::fastMalloc((WTF *)0x18);
    v33 = *a4;
    *(_DWORD *)(v32 + 8) = 1;
    *(_QWORD *)v32 = off_1E35B65D0;
    *(_QWORD *)(v32 + 16) = v33;
    result = *(unsigned int **)(v27 + 56);
    *(_QWORD *)(v27 + 56) = v32;
    if (result)
    {
      v34 = result + 2;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

JSC::B3::Value *JSC::Wasm::OMGIRGenerator::emitNotRTTKind(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  JSC::B3::BasicBlock *v5;
  __int16 v6;
  unint64_t v7;
  JSC::B3::Value *v8;
  uint64_t v9;
  JSC::B3::Value *v10;
  unint64_t v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  char **v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  char *v18;
  JSC::B3::Value *v19;

  v5 = (JSC::B3::BasicBlock *)a1[11];
  if (*((_BYTE *)a1 + 32) == 1 || *(_BYTE *)(a1[2] + 112))
    v6 = 575;
  else
    v6 = 63;
  if (*a1)
    v7 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v7 = 0;
  v8 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value *,int>(v5, (JSC::B3::Value *)a1[7], v6, v7, a2, 4);
  v9 = a1[11];
  v10 = (JSC::B3::Value *)a1[7];
  if (*a1)
    v11 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::constant(a1, 1u, a3, 0, 0);
  v13 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, v11, (uint64_t)v8, v12);
  JSC::B3::Procedure::addValueImpl(v10, v13);
  v19 = v13;
  v14 = (char **)(v9 + 8);
  v15 = *(unsigned int *)(v9 + 20);
  if ((_DWORD)v15 == *(_DWORD *)(v9 + 16))
  {
    v18 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v15 + 1, (unint64_t)&v19);
    v15 = *(unsigned int *)(v9 + 20);
    *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v15) = *(_QWORD *)v18;
    v16 = v19;
  }
  else
  {
    *(_QWORD *)&(*v14)[8 * v15] = v13;
    v16 = v13;
  }
  *(_DWORD *)(v9 + 20) = v15 + 1;
  *((_QWORD *)v16 + 4) = v9;
  return v13;
}

BOOL operationWasmIsSubRTT(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;

  v2 = *(_DWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(a2 + 8);
  if (!v3)
  {
    v4 = -1;
    return *(_QWORD *)(a1 + 8 * (v4 + v2) + 16) == a2;
  }
  if (v2 <= v3)
    return 0;
  v4 = ~v3;
  return *(_QWORD *)(a1 + 8 * (v4 + v2) + 16) == a2;
}

JSC::B3::Value *JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value *,int>(JSC::B3::BasicBlock *a1, JSC::B3::Value *a2, __int16 a3, uint64_t a4, uint64_t a5, int a6)
{
  JSC::B3::Value *Space;
  uint64_t v13;

  Space = (JSC::B3::Value *)JSC::B3::Value::allocateSpace(a3, 64);
  v13 = JSC::B3::Value::Value<>((uint64_t)Space, 0, a3, 1, 1, a4, a5);
  *(_QWORD *)v13 = off_1E357E4C8;
  *(_DWORD *)(v13 + 40) = a6;
  *(_OWORD *)(v13 + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(a2, Space);
  JSC::B3::BasicBlock::append(a1, Space);
  return Space;
}

unint64_t operationWasmAnyConvertExtern(unint64_t result)
{
  double v1;
  BOOL v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;

  *(_QWORD *)&v1 = result - 0x2000000000000;
  v2 = result - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL
    && ((result - 0x2000000000000) & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL;
  if (v2 && (double)(int)v1 == v1 && ((*(_QWORD *)&v1 & 0x8000000000000000) == 0 || (int)v1))
  {
    v3 = (*(_QWORD *)&v1 >> 52) & 0x7FFLL;
    if ((v3 - 1023) > 0x53)
    {
      v4 = 0;
      return v4 | 0xFFFE000000000000;
    }
    v5 = *(_QWORD *)&v1 >> (51 - (*(_QWORD *)&v1 >> 52));
    if (v3 > 0x433)
      LODWORD(v5) = result << ((*(_QWORD *)&v1 >> 52) - 51);
    if (v3 >= 0x41F)
      v6 = v5;
    else
      v6 = (((1 << ((*(_QWORD *)&v1 >> 52) + 1)) - 1) & v5) + (1 << ((*(_QWORD *)&v1 >> 52) + 1));
    if (v1 >= 0.0)
      v4 = v6;
    else
      v4 = -v6;
    if ((int)(v4 + 0x40000000) >= 0)
      return v4 | 0xFFFE000000000000;
  }
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addSelect(JSC::Wasm::OMGIRGenerator *this, JSC::B3::Variable *a2, JSC::B3::Variable *a3, JSC::B3::Variable *a4, JSC::B3::Variable **a5, WTF **a6)
{
  uint64_t v11;
  JSC::B3::Value *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  WTF *result;

  v11 = *((_QWORD *)a2 + 11);
  v12 = (JSC::B3::Value *)*((_QWORD *)a2 + 7);
  if (*(_QWORD *)a2)
    v13 = *(_QWORD *)(*(_QWORD *)a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a2 + 14992) << 32);
  else
    v13 = 0;
  v14 = JSC::Wasm::OMGIRGenerator::get(a2, a3);
  v15 = JSC::Wasm::OMGIRGenerator::get(a2, a4);
  v16 = JSC::Wasm::OMGIRGenerator::get(a2, (JSC::B3::Variable *)a5);
  v17 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(v11, v12, v13, v14, v15, v16);
  result = JSC::Wasm::OMGIRGenerator::push(a2, v17);
  *a6 = result;
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 8) = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addConstant(uint64_t *a1, unsigned __int8 a2, uint64_t a3, unint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  WTF *PushVariable;
  uint64_t v9;
  JSC::B3::Value *v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  uint64_t v14;
  char *v16;
  uint64_t v17;

  v6 = JSC::Wasm::toB3Type(a2);
  v7 = JSC::Wasm::OMGIRGenerator::constant(a1, v6, a4, 0, 0);
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)a1, *(_DWORD *)(v7 + 16));
  v9 = a1[11];
  v10 = (JSC::B3::Value *)a1[7];
  if (*a1)
    v11 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v11 = 0;
  v12 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v12 + 8) = -1;
  *(_WORD *)(v12 + 12) = 9;
  *(_DWORD *)(v12 + 16) = 0;
  *(_BYTE *)(v12 + 20) = 1;
  *(_QWORD *)(v12 + 24) = v11;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)v12 = off_1E357F0F8;
  *(_QWORD *)(v12 + 40) = PushVariable;
  *(_QWORD *)(v12 + 48) = v7;
  JSC::B3::Procedure::addValueImpl(v10, (JSC::B3::Value *)v12);
  v17 = v12;
  v13 = (char **)(v9 + 8);
  v14 = *(unsigned int *)(v9 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v9 + 16))
  {
    v16 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v17);
    v14 = *(unsigned int *)(v9 + 20);
    *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v14) = *(_QWORD *)v16;
    v12 = v17;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = v12;
  }
  *(_DWORD *)(v9 + 20) = v14 + 1;
  *(_QWORD *)(v12 + 32) = v9;
  return PushVariable;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::emitEntryTierUpCheck(void)::$_0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = *a2;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E35B6620;
  *(_QWORD *)(v4 + 16) = v5;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t JSC::Wasm::OMGIRGenerator::loadFromScratchBuffer(uint64_t a1, _DWORD *a2, uint64_t a3, unsigned int a4)
{
  JSC::B3::Value *v5;
  char v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;

  v5 = *(JSC::B3::Value **)(a1 + 56);
  if (HIBYTE(dword_1ECF4C7B0))
  {
    if (HIBYTE(word_1ECF4C79E))
    {
      v6 = 4;
    }
    else if (*((_BYTE *)v5 + 212))
    {
      v6 = 4;
    }
    else
    {
      v6 = 3;
    }
  }
  else
  {
    v6 = 3;
  }
  v7 = *a2;
  *a2 = v7 + 1;
  if (a4 >= 0x80000000)
    v8 = 0x80000000;
  else
    v8 = a4;
  if (v8 - 1 >= 5)
  {
    __break(0xC471u);
    JUMPOUT(0x198D94C98);
  }
  v9 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    v9 = *(_QWORD *)(v9 + 15000) | ((unint64_t)*(unsigned __int8 *)(v9 + 14992) << 32);
  return JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,unsigned long>(*(JSC::B3::BasicBlock **)(a1 + 88), v5, a4, v9, a3, v7 << v6);
}

uint64_t JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,unsigned long>(JSC::B3::BasicBlock *a1, JSC::B3::Value *a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t Space;

  Space = JSC::B3::Value::allocateSpace(67, 64);
  *(_DWORD *)(Space + 8) = -1;
  *(_WORD *)(Space + 12) = 67;
  *(_DWORD *)(Space + 16) = a3;
  *(_BYTE *)(Space + 20) = 1;
  *(_QWORD *)(Space + 24) = a4;
  *(_QWORD *)(Space + 32) = 0;
  *(_QWORD *)(Space + 64) = a5;
  *(_QWORD *)Space = off_1E357E4C8;
  *(_DWORD *)(Space + 40) = a6;
  *(_OWORD *)(Space + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)Space);
  JSC::B3::BasicBlock::append(a1, (JSC::B3::Value *)Space);
  return Space;
}

char *JSC::Wasm::OMGIRGenerator::connectControlAtEntrypoint(char *result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  char *v11;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v11 = result;
  if (*(_DWORD *)(a5 + 12))
  {
    v14 = 0;
    v15 = 16;
    do
    {
      v16 = *(_QWORD *)(*(_QWORD *)a5 + v15);
      v17 = JSC::Wasm::OMGIRGenerator::loadFromScratchBuffer((uint64_t)v11, a2, a3, *(_DWORD *)(v16 + 4));
      result = (char *)*((_QWORD *)v11 + 11);
      v18 = (JSC::B3::Value *)*((_QWORD *)v11 + 7);
      v19 = *(_QWORD *)v11;
      if (a7)
      {
        if (v19)
          v20 = *(_QWORD *)(v19 + 15000) | ((unint64_t)*(unsigned __int8 *)(v19 + 14992) << 32);
        else
          v20 = 0;
        if (v14 >= *(unsigned int *)(a4 + 52))
        {
          __break(0xC471u);
          return result;
        }
        result = (char *)JSC::B3::BasicBlock::appendNew<JSC::B3::UpsilonValue,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>((uint64_t)result, v18, v20, v17, *(_QWORD *)(*(_QWORD *)(a4 + 40) + 8 * v14));
      }
      else
      {
        if (v19)
          v21 = *(_QWORD *)(v19 + 15000) | ((unint64_t)*(unsigned __int8 *)(v19 + 14992) << 32);
        else
          v21 = 0;
        result = JSC::B3::BasicBlock::appendNew<JSC::B3::VariableValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Variable *,JSC::B3::Value *>((uint64_t)result, v18, v21, v16, v17);
      }
      ++v14;
      v15 += 24;
    }
    while (v14 < *(unsigned int *)(a5 + 12));
  }
  if (a4 != a6 && *(_DWORD *)a4 == 5)
  {
    v22 = JSC::Wasm::OMGIRGenerator::loadFromScratchBuffer((uint64_t)v11, a2, a3, 2u);
    if (*(_QWORD *)v11)
      v23 = *(_QWORD *)(*(_QWORD *)v11 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v11 + 14992) << 32);
    else
      v23 = 0;
    return JSC::B3::BasicBlock::appendNew<JSC::B3::VariableValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Variable *,JSC::B3::Value *>(*((_QWORD *)v11 + 11), *((JSC::B3::Procedure **)v11 + 7), v23, *(_QWORD *)(a4 + 72), v22);
  }
  return result;
}

char *JSC::Wasm::OMGIRGenerator::set(JSC::Wasm::OMGIRGenerator *this, JSC::B3::BasicBlock *a2, JSC::B3::Variable *a3, JSC::B3::Value *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (this)
    v9 = *((_QWORD *)this + 1875) | ((unint64_t)*((unsigned __int8 *)this + 14992) << 32);
  else
    v9 = 0;
  v10 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v10 + 8) = -1;
  *(_WORD *)(v10 + 12) = 9;
  *(_DWORD *)(v10 + 16) = 0;
  *(_BYTE *)(v10 + 20) = 1;
  *(_QWORD *)(v10 + 24) = v9;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)v10 = off_1E357F0F8;
  *(_QWORD *)(v10 + 40) = a4;
  *(_QWORD *)(v10 + 48) = a5;
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)v10);
  return JSC::B3::BasicBlock::append(a3, (JSC::B3::Value *)v10);
}

void *JSC::Wasm::splitStack<WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>(void *result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  __int128 v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE v22[384];

  v10 = a2[3] - (_DWORD)result;
  v11 = result;
  v20 = v22;
  v21 = 16;
  if (result >= 0x11)
  {
    if (result >= 0xAAAAAAB)
    {
      __break(0xC471u);
      return result;
    }
    LODWORD(v21) = 24 * (int)result / 0x18u;
    v20 = (_BYTE *)WTF::fastMalloc((WTF *)(24 * result));
    v15 = 0;
    goto LABEL_11;
  }
  if ((_DWORD)result)
  {
    v15 = 0;
LABEL_11:
    v16 = 24 * v10;
    do
    {
      v17 = *(_QWORD *)a2 + v16;
      v18 = &v20[24 * v15];
      v19 = *(_OWORD *)v17;
      *((_QWORD *)v18 + 2) = *(_QWORD *)(v17 + 16);
      *(_OWORD *)v18 = v19;
      v15 = ++HIDWORD(v21);
      v16 += 24;
      --v11;
    }
    while (v11);
  }
  result = (void *)(a3 + 16);
  v12 = *(_QWORD *)a3;
  if (*(_QWORD *)a3 != a3 + 16)
  {
    if (v12)
    {
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
    result = (void *)(a3 + 16);
    *(_QWORD *)a3 = a3 + 16;
  }
  if (v20 == v22)
  {
    v13 = HIDWORD(v21);
    if (HIDWORD(v21))
      result = memcpy(result, v22, 24 * ((24 * (unint64_t)HIDWORD(v21) - 24) / 0x18) + 24);
    v14 = v21;
  }
  else
  {
    *(_QWORD *)a3 = v20;
    v14 = v21;
    v13 = HIDWORD(v21);
  }
  *(_DWORD *)(a3 + 8) = v14;
  *(_DWORD *)(a3 + 12) = v13;
  a2[3] = v10;
  return result;
}

JSC::Wasm::OMGIRGenerator *JSC::Wasm::OMGIRGenerator::unifyValuesWithBlock(JSC::Wasm::OMGIRGenerator *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  JSC::Wasm::OMGIRGenerator *v6;
  uint64_t v7;

  v3 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v3)
  {
    v6 = result;
    v7 = 0;
    while (v3 + v7 - 1 < (unint64_t)*(unsigned int *)(a3 + 52))
    {
      result = (JSC::Wasm::OMGIRGenerator *)JSC::Wasm::OMGIRGenerator::unify(v6, *(JSC::B3::Value **)(*(_QWORD *)(a3 + 40) + 8 * v3 - 8 + 8 * v7), *(JSC::B3::Variable **)(*(_QWORD *)a2+ 24 * (v7 + *(unsigned int *)(a2 + 12))- 8));
      --v7;
      if (!(v3 + v7))
        return result;
    }
    __break(0xC471u);
  }
  return result;
}

char **JSC::Wasm::OMGIRGenerator::addCatchToUnreachable@<X0>(_BYTE *a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  char **result;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  JSC::B3::BasicBlock *v15;
  JSC::B3::Value *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  WTF *PushVariable;
  uint64_t v21;
  JSC::B3::Value *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  result = (char **)JSC::Wasm::OMGIRGenerator::emitCatchImpl((uint64_t)a2, 0, a5, a3, a7);
  v31 = a4 + 8;
  v32 = (uint64_t)result;
  if (*(_DWORD *)(a4 + 32))
    v11 = 0;
  else
    v11 = a4 + 8;
  if (*(_DWORD *)(v11 + 8))
  {
    v12 = 0;
    v13 = 0;
    v30 = a4;
    do
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 16 * (v13 + *(_DWORD *)(a4 + 20)));
      v15 = (JSC::B3::BasicBlock *)a2[11];
      v16 = (JSC::B3::Value *)a2[7];
      v17 = JSC::Wasm::toB3Type(v14);
      v33 = v14;
      if (*a2)
        v18 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
      else
        v18 = 0;
      v19 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,unsigned long>(v15, v16, v17, v18, v32, 8 * v12);
      PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)a2, *(_DWORD *)(v19 + 16));
      v21 = a2[11];
      v22 = (JSC::B3::Value *)a2[7];
      if (*a2)
        v23 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
      else
        v23 = 0;
      v24 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v24 + 8) = -1;
      *(_WORD *)(v24 + 12) = 9;
      *(_DWORD *)(v24 + 16) = 0;
      *(_BYTE *)(v24 + 20) = 1;
      *(_QWORD *)(v24 + 24) = v23;
      *(_QWORD *)(v24 + 32) = 0;
      *(_QWORD *)v24 = off_1E357F0F8;
      *(_QWORD *)(v24 + 40) = PushVariable;
      *(_QWORD *)(v24 + 48) = v19;
      JSC::B3::Procedure::addValueImpl(v22, (JSC::B3::Value *)v24);
      v34 = v24;
      result = (char **)(v21 + 8);
      v25 = *(unsigned int *)(v21 + 20);
      if ((_DWORD)v25 == *(_DWORD *)(v21 + 16))
      {
        result = (char **)WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v25 + 1, (unint64_t)&v34);
        v25 = *(unsigned int *)(v21 + 20);
        *(_QWORD *)(*(_QWORD *)(v21 + 8) + 8 * v25) = *result;
        v24 = v34;
      }
      else
      {
        *(_QWORD *)&(*result)[8 * v25] = v24;
      }
      a4 = v30;
      *(_DWORD *)(v21 + 20) = v25 + 1;
      *(_QWORD *)(v24 + 32) = v21;
      v34 = (uint64_t)PushVariable;
      v26 = *(unsigned int *)(a6 + 12);
      if ((_DWORD)v26 == *(_DWORD *)(a6 + 8))
      {
        result = (char **)WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a6, v26 + 1, (unint64_t)&v34);
        v26 = *(unsigned int *)(a6 + 12);
        *(_QWORD *)(*(_QWORD *)a6 + 8 * v26) = *result;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a6 + 8 * v26) = PushVariable;
      }
      *(_DWORD *)(a6 + 12) = v26 + 1;
      if (v33 == 251)
        v27 = 2;
      else
        v27 = 1;
      v12 += v27;
      ++v13;
      v28 = v31;
      if (*(_DWORD *)(v30 + 32))
        v28 = 0;
    }
    while (v13 < *(_DWORD *)(v28 + 8));
  }
  *a1 = 0;
  a1[8] = 0;
  return result;
}

_QWORD *JSC::Wasm::OMGIRGenerator::preparePatchpointForExceptions(_QWORD *this, char **a2, JSC::B3::PatchpointValue *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  JSC::B3::Value *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  JSC::B3::Value *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  char *v47;
  char *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  JSC::B3::StackmapValue *v61;
  WTF *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  _QWORD *v70;
  char v71;
  uint64_t v72;
  WTF *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;

  v5 = this;
  v6 = this[14];
  v7 = this;
  if (v6)
  {
    v7 = this;
    do
      v7 = (_QWORD *)v7[13];
    while (v7[14]);
  }
  v8 = *((_DWORD *)v7 + 127);
  if (v8 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    *((_DWORD *)v7 + 127) = v8 + 1;
    if (*((_DWORD *)this + 126))
    {
      v75 = 0;
      v76 = 0;
      if (*this)
        v65 = *(_QWORD *)(*this + 15000) | ((unint64_t)*(unsigned __int8 *)(*this + 14992) << 32);
      else
        v65 = 0;
      v73 = 0;
      v74 = 0;
      v11 = this;
      v70 = this;
      do
      {
        v12 = HIDWORD(v74);
        if (HIDWORD(v74) == (_DWORD)v74)
        {
          WTF::Vector<JSC::Wasm::OMGIRGenerator *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::OMGIRGenerator *&>((uint64_t)&v73, (unint64_t)&v70);
        }
        else
        {
          *((_QWORD *)v73 + HIDWORD(v74)) = v11;
          HIDWORD(v74) = v12 + 1;
        }
        v11 = (_QWORD *)v70[14];
        v70 = v11;
      }
      while (v11);
      v61 = a3;
      WTF::Vector<JSC::Wasm::OMGIRGenerator *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reverse((uint64_t *)&v73);
      v62 = v73;
      if (HIDWORD(v74))
      {
        v20 = (uint64_t)v73;
        v63 = (char *)v73 + 8 * HIDWORD(v74);
        v21 = a2 + 1;
        do
        {
          v64 = v20;
          v66 = *(_QWORD **)v20;
          v22 = *(unsigned int *)(*(_QWORD *)v20 + 188);
          if ((_DWORD)v22)
          {
            v23 = (uint64_t *)v66[22];
            v24 = 8 * v22;
            do
            {
              v25 = *v23;
              v72 = 0;
              v26 = (JSC::B3::Value *)v5[7];
              v27 = WTF::fastMalloc((WTF *)0x30);
              v28 = *(_DWORD *)(v25 + 4);
              *(_DWORD *)(v27 + 8) = -1;
              *(_WORD *)(v27 + 12) = 10;
              *(_DWORD *)(v27 + 16) = v28;
              *(_BYTE *)(v27 + 20) = 0;
              *(_QWORD *)(v27 + 24) = v65;
              *(_QWORD *)(v27 + 32) = 0;
              *(_QWORD *)v27 = off_1E357F0F8;
              *(_QWORD *)(v27 + 40) = v25;
              JSC::B3::Procedure::addValueImpl(v26, (JSC::B3::Value *)v27);
              v70 = (_QWORD *)v27;
              v29 = *((unsigned int *)a2 + 5);
              if ((_DWORD)v29 == *((_DWORD *)a2 + 4))
              {
                v32 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 1, v29 + 1, (unint64_t)&v70);
                v29 = *((unsigned int *)a2 + 5);
                *(_QWORD *)&a2[1][8 * v29] = *(_QWORD *)v32;
                v30 = v70;
              }
              else
              {
                *(_QWORD *)(*v21 + 8 * v29) = v27;
                v30 = (_QWORD *)v27;
              }
              *((_DWORD *)a2 + 5) = v29 + 1;
              v30[4] = a2;
              v72 = v27;
              v31 = HIDWORD(v76);
              if (HIDWORD(v76) == (_DWORD)v76)
              {
                v33 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v75, HIDWORD(v76) + 1, (unint64_t)&v72);
                v31 = HIDWORD(v76);
                *(_QWORD *)&v75[8 * HIDWORD(v76)] = *(_QWORD *)v33;
              }
              else
              {
                *(_QWORD *)&v75[8 * HIDWORD(v76)] = v27;
              }
              HIDWORD(v76) = v31 + 1;
              ++v23;
              v24 -= 8;
            }
            while (v24);
          }
          v34 = *v66;
          if (*(_DWORD *)(*v66 + 468))
          {
            v35 = 0;
            do
            {
              v67 = *(_QWORD *)(v34 + 456);
              v68 = v35;
              v69 = (unsigned int *)(v67 + 888 * v35);
              v36 = v69[3];
              if ((_DWORD)v36)
              {
                v37 = 24 * v36;
                v38 = (uint64_t *)(*(_QWORD *)v69 + 16);
                do
                {
                  if (*v5)
                    v39 = *(_QWORD *)(*v5 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v5 + 14992) << 32);
                  else
                    v39 = 0;
                  v40 = *v38;
                  v41 = (JSC::B3::Value *)v5[7];
                  v42 = WTF::fastMalloc((WTF *)0x30);
                  v43 = *(_DWORD *)(v40 + 4);
                  *(_DWORD *)(v42 + 8) = -1;
                  *(_WORD *)(v42 + 12) = 10;
                  *(_DWORD *)(v42 + 16) = v43;
                  *(_BYTE *)(v42 + 20) = 0;
                  *(_QWORD *)(v42 + 24) = v39;
                  *(_QWORD *)(v42 + 32) = 0;
                  *(_QWORD *)v42 = off_1E357F0F8;
                  *(_QWORD *)(v42 + 40) = v40;
                  JSC::B3::Procedure::addValueImpl(v41, (JSC::B3::Value *)v42);
                  v70 = (_QWORD *)v42;
                  v44 = *((unsigned int *)a2 + 5);
                  if ((_DWORD)v44 == *((_DWORD *)a2 + 4))
                  {
                    v48 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 1, v44 + 1, (unint64_t)&v70);
                    v44 = *((unsigned int *)a2 + 5);
                    *(_QWORD *)&a2[1][8 * v44] = *(_QWORD *)v48;
                    v45 = v70;
                  }
                  else
                  {
                    *(_QWORD *)(*v21 + 8 * v44) = v42;
                    v45 = (_QWORD *)v42;
                  }
                  *((_DWORD *)a2 + 5) = v44 + 1;
                  v45[4] = a2;
                  v70 = (_QWORD *)v42;
                  v46 = HIDWORD(v76);
                  if (HIDWORD(v76) == (_DWORD)v76)
                  {
                    v47 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v75, HIDWORD(v76) + 1, (unint64_t)&v70);
                    v46 = HIDWORD(v76);
                    *(_QWORD *)&v75[8 * HIDWORD(v76)] = *(_QWORD *)v47;
                  }
                  else
                  {
                    *(_QWORD *)&v75[8 * HIDWORD(v76)] = v42;
                  }
                  HIDWORD(v76) = v46 + 1;
                  v38 += 3;
                  v37 -= 24;
                }
                while (v37);
              }
              if (v69[202] == 5)
              {
                v49 = JSC::Wasm::OMGIRGenerator::get((JSC::Wasm::OMGIRGenerator *)*v5, (JSC::B3::BasicBlock *)v5[7], (JSC::B3::Variable *)a2, *(_QWORD *)(v67 + 888 * v68 + 880));
                v70 = (_QWORD *)v49;
                v50 = HIDWORD(v76);
                if (HIDWORD(v76) == (_DWORD)v76)
                {
                  WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>((uint64_t)&v75, (unint64_t)&v70);
                }
                else
                {
                  *(_QWORD *)&v75[8 * HIDWORD(v76)] = v49;
                  HIDWORD(v76) = v50 + 1;
                }
              }
              v35 = v68 + 1;
              v34 = *v66;
            }
            while (v68 + 1 < (unint64_t)*(unsigned int *)(*v66 + 468));
          }
          v51 = *(unsigned int *)(v34 + 68);
          if ((_DWORD)v51)
          {
            v52 = 24 * v51;
            v53 = (uint64_t *)(*(_QWORD *)(v34 + 56) + 16);
            do
            {
              v54 = JSC::Wasm::OMGIRGenerator::get((JSC::Wasm::OMGIRGenerator *)*v5, (JSC::B3::BasicBlock *)v5[7], (JSC::B3::Variable *)a2, *v53);
              v70 = (_QWORD *)v54;
              v55 = HIDWORD(v76);
              if (HIDWORD(v76) == (_DWORD)v76)
              {
                WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>((uint64_t)&v75, (unint64_t)&v70);
              }
              else
              {
                *(_QWORD *)&v75[8 * HIDWORD(v76)] = v54;
                HIDWORD(v76) = v55 + 1;
              }
              v53 += 3;
              v52 -= 24;
            }
            while (v52);
          }
          v20 = v64 + 8;
        }
        while ((char *)(v64 + 8) != v63);
      }
      *((_BYTE *)v61 + 113) = 1;
      v70 = 0;
      v71 = 2;
      if (HIDWORD(v76))
      {
        v56 = (uint64_t *)v75;
        v57 = 8 * HIDWORD(v76);
        do
        {
          v58 = *v56++;
          JSC::B3::StackmapValue::append((__int128 *)v61, v58, (unint64_t)&v70);
          v57 -= 8;
        }
        while (v57);
      }
      v59 = v5;
      if (v5[14])
      {
        v59 = v5;
        do
          v59 = (_QWORD *)v59[13];
        while (v59[14]);
      }
      v9 = *((unsigned __int16 *)v5 + 232);
      v10 = *((unsigned int *)v59 + 127);
      if (v62)
        WTF::fastFree((unint64_t)v62, v13, v14, v15, v16, v17, v18, v19);
      v60 = v75;
      if (v75)
      {
        v75 = 0;
        LODWORD(v76) = 0;
        WTF::fastFree((unint64_t)v60, v13, v14, v15, v16, v17, v18, v19);
      }
    }
    else
    {
      v9 = *((unsigned __int16 *)this + 232);
      if (v6)
      {
        do
          v5 = (_QWORD *)v5[13];
        while (v5[14]);
      }
      v10 = *((unsigned int *)v5 + 127);
    }
    return (_QWORD *)(v9 | (unint64_t)(v10 << 32));
  }
  return this;
}

uint64_t *WTF::Vector<JSC::Wasm::OMGIRGenerator *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reverse(uint64_t *result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((unsigned int *)result + 3);
  if (v1 >= 2)
  {
    v2 = 0;
    v3 = (v1 - 1);
    do
    {
      if (8 * v1 == v2 || v3 >= v1)
      {
        __break(0xC471u);
        JUMPOUT(0x198D959E0);
      }
      v4 = *result;
      v5 = *(_QWORD *)(*result + v2);
      *(_QWORD *)(v4 + v2) = *(_QWORD *)(*result + 8 * v3);
      *(_QWORD *)(v4 + 8 * v3--) = v5;
      v2 += 8;
    }
    while (8 * (v1 >> 1) != v2);
  }
  return result;
}

uint64_t JSC::Wasm::OMGIRGenerator::get(JSC::Wasm::OMGIRGenerator *this, JSC::B3::BasicBlock *a2, JSC::B3::Variable *a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  int v9;

  if (this)
    v7 = *((_QWORD *)this + 1875) | ((unint64_t)*((unsigned __int8 *)this + 14992) << 32);
  else
    v7 = 0;
  v8 = WTF::fastMalloc((WTF *)0x30);
  v9 = *(_DWORD *)(a4 + 4);
  *(_DWORD *)(v8 + 8) = -1;
  *(_WORD *)(v8 + 12) = 10;
  *(_DWORD *)(v8 + 16) = v9;
  *(_BYTE *)(v8 + 20) = 0;
  *(_QWORD *)(v8 + 24) = v7;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)v8 = off_1E357F0F8;
  *(_QWORD *)(v8 + 40) = a4;
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)v8);
  JSC::B3::BasicBlock::append(a3, (JSC::B3::Value *)v8);
  return v8;
}

uint64_t JSC::Wasm::OMGIRGenerator::emitCatchImpl@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  _DWORD *v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  __int128 *v44;
  _OWORD *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  unint64_t StatusReg;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  const void *v98;
  void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  const void *v111;
  void *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unint64_t *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t casual;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v141;
  unint64_t v142;
  int v143;
  uint64_t v144;
  char v145;
  unsigned int v146;
  unsigned int v147;
  unint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  char **v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  JSC::B3::Value *v156;
  unint64_t v157;
  uint64_t v158;
  char **v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  JSC::B3::Value *v167;
  uint64_t v168;
  uint64_t v169;
  char **v170;
  uint64_t v171;
  char *v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v181;
  JSC::B3::Value *v182;
  char *v183;
  WTF *v184;
  WTF *v185;
  _DWORD *v186;
  int v187;
  JSC::B3::Value *v188;
  uint64_t v189;
  _QWORD *v190;
  unint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  _BYTE v196[28];
  _QWORD v197[2];

  v8 = a1;
  v9 = JSC::B3::Procedure::addBlock(a5, *(JSC::B3::Procedure **)(a1 + 56), 1.0);
  *(_QWORD *)(v8 + 88) = v9;
  v10 = (_QWORD *)(v8 + 64);
  v11 = *(unsigned int *)(v8 + 76);
  if ((_DWORD)v11 == *(_DWORD *)(v8 + 72))
  {
    v12 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v11 + 1, v8 + 88);
    v11 = *(unsigned int *)(v8 + 76);
    *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * v11) = *v12;
  }
  else
  {
    *(_QWORD *)(*v10 + 8 * v11) = v9;
  }
  *(_DWORD *)(v8 + 76) = v11 + 1;
  *(_DWORD *)(v8 + 512) = *(_DWORD *)(a3 + 16);
  v186 = (_DWORD *)a3;
  if (*(_DWORD *)a3 == 4)
  {
    v13 = *(_QWORD *)(v8 + 112);
    v14 = v8;
    if (a2)
    {
      if (v13)
      {
        v14 = v8;
        do
          v14 = *(_QWORD *)(v14 + 104);
        while (*(_QWORD *)(v14 + 112));
      }
      v15 = *(_DWORD *)(v14 + 508);
      if (v15 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x198D96800);
      }
      v16 = v15 + 1;
      *(_DWORD *)(v14 + 508) = v15 + 1;
      v17 = *(_DWORD **)(v8 + 56);
      v18 = WTF::fastMalloc((WTF *)8);
      *(_DWORD *)(v18 + 4) = 2;
      *(_QWORD *)v196 = v18;
      v26 = JSC::B3::SparseCollection<JSC::B3::Variable>::add(v17, v196);
      v27 = *(_QWORD *)v196;
      *(_QWORD *)v196 = 0;
      if (v27)
        WTF::fastFree(v27, v19, v20, v21, v22, v23, v24, v25);
      v28 = v186;
      *v186 = 5;
      v186[17] = 1;
    }
    else
    {
      if (v13)
      {
        v14 = v8;
        do
          v14 = *(_QWORD *)(v14 + 104);
        while (*(_QWORD *)(v14 + 112));
      }
      v29 = *(_DWORD *)(v14 + 508);
      if (v29 == -1)
      {
        __break(0xC471u);
LABEL_181:
        JUMPOUT(0x198D967B0);
      }
      v16 = v29 + 1;
      *(_DWORD *)(v14 + 508) = v29 + 1;
      v30 = *(_DWORD **)(v8 + 56);
      v31 = WTF::fastMalloc((WTF *)8);
      *(_DWORD *)(v31 + 4) = 2;
      *(_QWORD *)v196 = v31;
      v26 = JSC::B3::SparseCollection<JSC::B3::Variable>::add(v30, v196);
      v39 = *(_QWORD *)v196;
      *(_QWORD *)v196 = 0;
      if (v39)
        WTF::fastFree(v39, v32, v33, v34, v35, v36, v37, v38);
      v28 = v186;
      *v186 = 5;
      v186[17] = 0;
    }
    v28[15] = v16;
    *((_QWORD *)v28 + 9) = v26;
    a3 = (uint64_t)v28;
  }
  else
  {
    v16 = *(_DWORD *)(a3 + 60);
  }
  v40 = *(_DWORD *)(a3 + 56);
  v41 = (_QWORD *)(v8 + 528);
  v42 = *(_DWORD *)(v8 + 504);
  *(_DWORD *)v196 = a2 != 0;
  *(_DWORD *)&v196[4] = v40;
  *(_DWORD *)&v196[8] = v16;
  *(_QWORD *)&v196[12] = 0;
  *(_DWORD *)&v196[20] = v42;
  *(_DWORD *)&v196[24] = a4;
  v43 = *(unsigned int *)(v8 + 540);
  if ((_DWORD)v43 == *(_DWORD *)(v8 + 536))
  {
    v44 = (__int128 *)WTF::Vector<JSC::Wasm::UnlinkedHandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v43 + 1, (unint64_t)v196);
    v45 = (_OWORD *)(*(_QWORD *)(v8 + 528) + 28 * *(unsigned int *)(v8 + 540));
    v46 = *v44;
    v47 = *(__int128 *)((char *)v44 + 12);
  }
  else
  {
    v45 = (_OWORD *)(*v41 + 28 * v43);
    v46 = *(_OWORD *)v196;
    v47 = *(_OWORD *)&v196[12];
  }
  *(_OWORD *)((char *)v45 + 12) = v47;
  *v45 = v46;
  ++*(_DWORD *)(v8 + 540);
  JSC::Wasm::OMGIRGenerator::reloadMemoryRegistersFromInstance((unsigned int *)v8, *(_DWORD *)(*(_QWORD *)(v8 + 16) + 104), *(_QWORD *)(v8 + 472), *(_QWORD *)(v8 + 88));
  v194 = JSC::B3::BasicBlock::appendNew<JSC::B3::ArgumentRegValue,JSC::B3::Origin,JSC::ARM64Registers::RegisterID>(*(JSC::B3::BasicBlock **)(v8 + 88), *(JSC::B3::Value **)(v8 + 56), 0);
  v182 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::ArgumentRegValue,JSC::B3::Origin,JSC::ARM64Registers::RegisterID>(*(JSC::B3::BasicBlock **)(v8 + 88), *(JSC::B3::Value **)(v8 + 56), 1);
  v181 = JSC::B3::BasicBlock::appendNew<JSC::B3::ArgumentRegValue,JSC::B3::Origin,JSC::ARM64Registers::RegisterID>(*(JSC::B3::BasicBlock **)(v8 + 88), *(JSC::B3::Value **)(v8 + 56), 2);
  v48 = 0;
  LODWORD(v49) = 0;
  v195 = 0;
  *(_OWORD *)v196 = 0uLL;
  v50 = v8;
  v197[0] = v8;
  do
  {
    if ((_DWORD)v49 == *(_DWORD *)&v196[8])
    {
      v51 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v196, v49 + 1, (unint64_t)v197);
      LODWORD(v52) = *(_DWORD *)&v196[12];
      v48 = *(_QWORD *)v196;
      *(_QWORD *)(*(_QWORD *)v196 + 8 * *(unsigned int *)&v196[12]) = *(_QWORD *)v51;
    }
    else
    {
      *(_QWORD *)(v48 + 8 * v49) = v50;
      LODWORD(v52) = v49;
    }
    v49 = (v52 + 1);
    *(_DWORD *)&v196[12] = v52 + 1;
    v50 = *(_QWORD *)(v197[0] + 112);
    v197[0] = v50;
  }
  while (v50);
  if (v49 > 1)
  {
    v53 = 0;
    v184 = *(WTF **)v196;
    v52 = v52;
    v54 = *(_QWORD *)v196;
    do
    {
      if (8 * v49 == v53)
      {
        __break(0xC471u);
        JUMPOUT(0x198D967F0);
      }
      if (v52 >= v49)
      {
        __break(0xC471u);
        JUMPOUT(0x198D967F8);
      }
      v55 = *(_QWORD *)(v54 + v53);
      *(_QWORD *)(v54 + v53) = *(_QWORD *)(v54 + 8 * v52);
      *(_QWORD *)(v54 + 8 * v52--) = v55;
      v53 += 8;
    }
    while (8 * (v49 >> 1) != v53);
  }
  else
  {
    v184 = *(WTF **)v196;
  }
  if ((_DWORD)v49)
  {
    v56 = v184;
    v183 = (char *)v184 + 8 * v49;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v190 = (_QWORD *)v8;
    v191 = StatusReg;
    while (1)
    {
      v185 = v56;
      v58 = *(_QWORD *)v56;
      v59 = *(unsigned int *)(v58 + 188);
      v60 = v195;
      v189 = v58;
      if ((_DWORD)v59)
        break;
LABEL_124:
      v195 = v60;
      v135 = v189;
      a3 = (uint64_t)v186;
      if (!*(_DWORD *)(*(_QWORD *)v189 + 468))
        goto LABEL_174;
      v136 = 0;
      v137 = (uint64_t *)(*(_QWORD *)v189 + 456);
      do
      {
        v138 = *v137;
        v139 = *v137 + 888 * v136;
        if (*(_DWORD *)(v139 + 12))
        {
          v142 = 0;
          v143 = v195;
          v144 = 16;
          v187 = v195;
          do
          {
            if (HIBYTE(dword_1ECF4C7B0))
            {
              if (HIBYTE(word_1ECF4C79E))
              {
                v145 = 4;
              }
              else if (*(_BYTE *)(*(_QWORD *)(v8 + 56) + 212))
              {
                v145 = 4;
              }
              else
              {
                v145 = 3;
              }
            }
            else
            {
              v145 = 3;
            }
            v146 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v139 + v144) + 4);
            if (v146 >= 0x80000000)
              v147 = 0x80000000;
            else
              v147 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v139 + v144) + 4);
            if (v147 - 1 >= 5)
            {
              __break(0xC471u);
              JUMPOUT(0x198D967D0);
            }
            v193 = *(_QWORD *)(*(_QWORD *)v139 + v144);
            v188 = *(JSC::B3::Value **)(v8 + 56);
            if (*(_QWORD *)v8)
              v148 = *(_QWORD *)(*(_QWORD *)v8 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v8
                                                                                                  + 14992) << 32);
            else
              v148 = 0;
            v149 = *(_QWORD *)(v8 + 88);
            v150 = (v143 + (_DWORD)v142) << v145;
            v151 = WTF::fastMalloc((WTF *)0x48);
            *(_DWORD *)(v151 + 8) = -1;
            *(_WORD *)(v151 + 12) = 67;
            *(_DWORD *)(v151 + 16) = v146;
            *(_BYTE *)(v151 + 20) = 1;
            *(_QWORD *)(v151 + 24) = v148;
            *(_QWORD *)(v151 + 32) = 0;
            *(_QWORD *)(v151 + 64) = v194;
            *(_QWORD *)v151 = off_1E357E4C8;
            *(_DWORD *)(v151 + 40) = v150;
            *(_OWORD *)(v151 + 44) = xmmword_19914F690;
            JSC::B3::Procedure::addValueImpl(v188, (JSC::B3::Value *)v151);
            v197[0] = v151;
            v152 = (char **)(v149 + 8);
            v153 = *(unsigned int *)(v149 + 20);
            if ((_DWORD)v153 == *(_DWORD *)(v149 + 16))
            {
              v161 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v152, v153 + 1, (unint64_t)v197);
              v153 = *(unsigned int *)(v149 + 20);
              *(_QWORD *)(*(_QWORD *)(v149 + 8) + 8 * v153) = *(_QWORD *)v161;
              v154 = v197[0];
            }
            else
            {
              *(_QWORD *)&(*v152)[8 * v153] = v151;
              v154 = v151;
            }
            *(_DWORD *)(v149 + 20) = v153 + 1;
            *(_QWORD *)(v154 + 32) = v149;
            v155 = v190[11];
            v156 = (JSC::B3::Value *)v190[7];
            if (*v190)
              v157 = *(_QWORD *)(*v190 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v190 + 14992) << 32);
            else
              v157 = 0;
            v158 = WTF::fastMalloc((WTF *)0x38);
            *(_DWORD *)(v158 + 8) = -1;
            *(_WORD *)(v158 + 12) = 9;
            *(_DWORD *)(v158 + 16) = 0;
            *(_BYTE *)(v158 + 20) = 1;
            *(_QWORD *)(v158 + 24) = v157;
            *(_QWORD *)(v158 + 32) = 0;
            *(_QWORD *)v158 = off_1E357F0F8;
            *(_QWORD *)(v158 + 40) = v193;
            *(_QWORD *)(v158 + 48) = v151;
            JSC::B3::Procedure::addValueImpl(v156, (JSC::B3::Value *)v158);
            v197[0] = v158;
            v159 = (char **)(v155 + 8);
            v160 = *(unsigned int *)(v155 + 20);
            if ((_DWORD)v160 == *(_DWORD *)(v155 + 16))
            {
              v162 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v159, v160 + 1, (unint64_t)v197);
              v160 = *(unsigned int *)(v155 + 20);
              *(_QWORD *)(*(_QWORD *)(v155 + 8) + 8 * v160) = *(_QWORD *)v162;
              v158 = v197[0];
            }
            else
            {
              *(_QWORD *)&(*v159)[8 * v160] = v158;
            }
            v143 = v187;
            *(_DWORD *)(v155 + 20) = v160 + 1;
            *(_QWORD *)(v158 + 32) = v155;
            ++v142;
            v144 += 24;
            v135 = v189;
            v8 = (uint64_t)v190;
          }
          while (v142 < *(unsigned int *)(v139 + 12));
          v195 = v187 + v142;
          a3 = (uint64_t)v186;
        }
        if (v139 + 808 != a3 && *(_DWORD *)(v139 + 808) == 5)
        {
          v163 = JSC::Wasm::OMGIRGenerator::loadFromScratchBuffer(v8, &v195, v194, 2u);
          if (*(_QWORD *)v8)
            v164 = *(_QWORD *)(*(_QWORD *)v8 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v8 + 14992) << 32);
          else
            v164 = 0;
          v165 = v8;
          v166 = *(_QWORD *)(v8 + 88);
          v167 = *(JSC::B3::Value **)(v165 + 56);
          v168 = *(_QWORD *)(v138 + 888 * v136 + 880);
          v169 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v169 + 8) = -1;
          *(_WORD *)(v169 + 12) = 9;
          *(_DWORD *)(v169 + 16) = 0;
          *(_BYTE *)(v169 + 20) = 1;
          *(_QWORD *)(v169 + 24) = v164;
          *(_QWORD *)(v169 + 32) = 0;
          *(_QWORD *)v169 = off_1E357F0F8;
          *(_QWORD *)(v169 + 40) = v168;
          *(_QWORD *)(v169 + 48) = v163;
          JSC::B3::Procedure::addValueImpl(v167, (JSC::B3::Value *)v169);
          v197[0] = v169;
          v170 = (char **)(v166 + 8);
          v171 = *(unsigned int *)(v166 + 20);
          if ((_DWORD)v171 == *(_DWORD *)(v166 + 16))
          {
            v172 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v170, v171 + 1, (unint64_t)v197);
            v171 = *(unsigned int *)(v166 + 20);
            *(_QWORD *)(*(_QWORD *)(v166 + 8) + 8 * v171) = *(_QWORD *)v172;
            v169 = v197[0];
          }
          else
          {
            *(_QWORD *)&(*v170)[8 * v171] = v169;
          }
          *(_DWORD *)(v166 + 20) = v171 + 1;
          *(_QWORD *)(v169 + 32) = v166;
          v135 = v189;
          v8 = (uint64_t)v190;
        }
        ++v136;
        v137 = (uint64_t *)(*(_QWORD *)v135 + 456);
        v141 = *(unsigned int *)(*(_QWORD *)v135 + 468);
      }
      while (v136 < v141);
      if (!(_DWORD)v141)
      {
LABEL_174:
        __break(0xC471u);
        JUMPOUT(0x198D967D8);
      }
      JSC::Wasm::OMGIRGenerator::connectControlAtEntrypoint((char *)v8, &v195, v194, *(_QWORD *)(*(_QWORD *)v135 + 456) + 888 * v141 - 80, *(_QWORD *)v135 + 56, a3, 0);
      StatusReg = v191;
      v56 = (WTF *)((char *)v185 + 8);
      if ((char *)v185 + 8 == v183)
        goto LABEL_169;
    }
    v61 = *(uint64_t **)(v58 + 176);
    v192 = &v61[v59];
    while (1)
    {
      v62 = *(_QWORD *)(v8 + 56);
      if (HIBYTE(dword_1ECF4C7B0))
      {
        if (HIBYTE(word_1ECF4C79E))
        {
          v63 = 4;
        }
        else if (*(_BYTE *)(v62 + 212))
        {
          v63 = 4;
        }
        else
        {
          v63 = 3;
        }
      }
      else
      {
        v63 = 3;
      }
      v64 = *v61;
      v65 = *(_DWORD *)(*v61 + 4);
      if (v65 >= 0x80000000)
        v66 = 0x80000000;
      else
        v66 = *(_DWORD *)(*v61 + 4);
      if (v66 - 1 >= 5)
      {
        __break(0xC471u);
        goto LABEL_181;
      }
      if (*(_QWORD *)v8)
        v67 = *(_QWORD *)(*(_QWORD *)v8 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v8 + 14992) << 32);
      else
        v67 = 0;
      v68 = *(_QWORD *)(v8 + 88);
      v69 = *(_QWORD *)(StatusReg + 752);
      if (v69)
      {
        v70 = (_BYTE *)(v69 + 9040);
        *(_BYTE *)(v69 + 9040) = 1;
        v71 = *(unsigned int *)(v69 + 9056);
        if ((_DWORD)v71)
        {
          *(_DWORD *)(v69 + 9056) = v71 - *(_DWORD *)(v69 + 9060);
          v72 = *(_QWORD *)(v69 + 9048) - v71;
LABEL_56:
          *v70 = 0;
          goto LABEL_57;
        }
        v73 = *(_QWORD *)(v69 + 9080);
        v74 = *(_QWORD *)(v69 + 9064);
        if (v73)
        {
LABEL_55:
          v75 = __clz(v73);
          *(_QWORD *)(v69 + 9080) = v73 & ~(0x8000000000000000 >> v75);
          v72 = v74 + 16 * v75;
          goto LABEL_56;
        }
        if (*(_BYTE *)(v69 + 9045) == 6)
        {
          v121 = *(_DWORD *)(v69 + 9076);
          v122 = *(unsigned int *)(v69 + 9072);
          if (v122 < v121)
          {
            *(_QWORD *)&v70[8 * v122 + 56] = 0;
            v123 = (unint64_t *)(v69 + 8 * v122 + 9104);
            v124 = v121 - 1 - v122;
            while (v124)
            {
              v74 += 1024;
              v126 = *v123++;
              v125 = v126;
              LODWORD(v122) = v122 + 1;
              --v124;
              if (v126)
              {
                v73 = __rbit64(v125);
                *(_DWORD *)(v69 + 9072) = v122;
                *(_QWORD *)(v69 + 9064) = v74;
                goto LABEL_55;
              }
            }
            *(_DWORD *)(v69 + 9072) = v121;
          }
        }
        *v70 = 0;
      }
      casual = bmalloc_allocate_casual(72, 1);
      StatusReg = v191;
      v72 = casual;
LABEL_57:
      *(_DWORD *)(v72 + 8) = -1;
      *(_WORD *)(v72 + 12) = 67;
      *(_DWORD *)(v72 + 16) = v65;
      *(_BYTE *)(v72 + 20) = 1;
      *(_QWORD *)(v72 + 24) = v67;
      *(_QWORD *)(v72 + 32) = 0;
      *(_QWORD *)(v72 + 64) = v194;
      *(_QWORD *)v72 = off_1E357E4C8;
      *(_DWORD *)(v72 + 40) = v60 << v63;
      *(_OWORD *)(v72 + 44) = xmmword_19914F690;
      v76 = *(unsigned int *)(v62 + 92);
      if ((_DWORD)v76)
      {
        v77 = *(_QWORD *)(*(_QWORD *)(v62 + 80) + 8 * v76 - 8);
        *(_DWORD *)(v62 + 92) = v76 - 1;
        v78 = *(_QWORD *)(v62 + 64);
      }
      else
      {
        v77 = *(unsigned int *)(v62 + 76);
        if ((_DWORD)v77 == *(_DWORD *)(v62 + 72))
        {
          v95 = v77 + (v77 >> 2);
          if (v95 >= 0x10)
            v96 = v95 + 1;
          else
            v96 = 16;
          if (v96 <= v77 + 1)
            v97 = v77 + 1;
          else
            v97 = v96;
          if (v97 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x198D967E0);
          }
          v98 = *(const void **)(v62 + 64);
          v99 = (void *)WTF::fastMalloc((WTF *)(8 * v97));
          *(_DWORD *)(v62 + 72) = v97;
          *(_QWORD *)(v62 + 64) = v99;
          memcpy(v99, v98, 8 * v77);
          v8 = (uint64_t)v190;
          if (v98)
          {
            if (*(const void **)(v62 + 64) == v98)
            {
              *(_QWORD *)(v62 + 64) = 0;
              *(_DWORD *)(v62 + 72) = 0;
            }
            WTF::fastFree((unint64_t)v98, v100, v101, v102, v103, v104, v105, v106);
          }
          v107 = *(unsigned int *)(v62 + 76);
          v78 = *(_QWORD *)(v62 + 64);
          *(_QWORD *)(v78 + 8 * v107) = 0;
          *(_DWORD *)(v62 + 76) = v107 + 1;
          StatusReg = v191;
        }
        else
        {
          v78 = *(_QWORD *)(v62 + 64);
          *(_QWORD *)(v78 + 8 * v77) = 0;
          *(_DWORD *)(v62 + 76) = v77 + 1;
        }
      }
      *(_DWORD *)(v72 + 8) = v77;
      *(_QWORD *)(v78 + 8 * v77) = v72;
      v197[0] = v72;
      v79 = (_QWORD *)(v68 + 8);
      v80 = *(unsigned int *)(v68 + 20);
      if ((_DWORD)v80 == *(_DWORD *)(v68 + 16))
      {
        v93 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v68 + 8), v80 + 1, (unint64_t)v197);
        StatusReg = v191;
        v80 = *(unsigned int *)(v68 + 20);
        *(_QWORD *)(*(_QWORD *)(v68 + 8) + 8 * v80) = *(_QWORD *)v93;
        v81 = v197[0];
      }
      else
      {
        *(_QWORD *)(*v79 + 8 * v80) = v72;
        v81 = v72;
      }
      *(_DWORD *)(v68 + 20) = v80 + 1;
      *(_QWORD *)(v81 + 32) = v68;
      v82 = *(_QWORD *)(StatusReg + 752);
      if (!v82)
        goto LABEL_120;
      v83 = (_BYTE *)(v82 + 8856);
      *(_BYTE *)(v82 + 8856) = 1;
      v84 = *(unsigned int *)(v82 + 8872);
      if ((_DWORD)v84)
      {
        *(_DWORD *)(v82 + 8872) = v84 - *(_DWORD *)(v82 + 8876);
        v85 = *(_QWORD *)(v82 + 8864) - v84;
      }
      else
      {
        v86 = *(_QWORD *)(v82 + 8896);
        v87 = *(_QWORD *)(v82 + 8880);
        if (!v86)
        {
          if (*(_BYTE *)(v82 + 8861) == 6)
          {
            v127 = *(_DWORD *)(v82 + 8892);
            v128 = *(unsigned int *)(v82 + 8888);
            if (v128 < v127)
            {
              *(_QWORD *)&v83[8 * v128 + 56] = 0;
              v129 = (unint64_t *)(v82 + 8 * v128 + 8920);
              v130 = v127 - 1 - v128;
              while (v130)
              {
                v87 += 1024;
                v132 = *v129++;
                v131 = v132;
                LODWORD(v128) = v128 + 1;
                --v130;
                if (v132)
                {
                  v86 = __rbit64(v131);
                  *(_DWORD *)(v82 + 8888) = v128;
                  *(_QWORD *)(v82 + 8880) = v87;
                  goto LABEL_67;
                }
              }
              *(_DWORD *)(v82 + 8888) = v127;
            }
          }
          *v83 = 0;
LABEL_120:
          v134 = bmalloc_allocate_casual(56, 1);
          StatusReg = v191;
          v85 = v134;
          goto LABEL_69;
        }
LABEL_67:
        v88 = __clz(v86);
        *(_QWORD *)(v82 + 8896) = v86 & ~(0x8000000000000000 >> v88);
        v85 = v87 + 16 * v88;
      }
      *v83 = 0;
LABEL_69:
      *(_DWORD *)(v85 + 8) = -1;
      *(_WORD *)(v85 + 12) = 9;
      *(_DWORD *)(v85 + 16) = 0;
      *(_BYTE *)(v85 + 20) = 1;
      *(_QWORD *)(v85 + 24) = 0;
      *(_QWORD *)(v85 + 32) = 0;
      *(_QWORD *)v85 = off_1E357F0F8;
      *(_QWORD *)(v85 + 40) = v64;
      *(_QWORD *)(v85 + 48) = v72;
      v89 = *(unsigned int *)(v62 + 92);
      if ((_DWORD)v89)
      {
        v90 = *(_QWORD *)(*(_QWORD *)(v62 + 80) + 8 * v89 - 8);
        *(_DWORD *)(v62 + 92) = v89 - 1;
        v91 = *(_QWORD *)(v62 + 64);
      }
      else
      {
        v90 = *(unsigned int *)(v62 + 76);
        if ((_DWORD)v90 == *(_DWORD *)(v62 + 72))
        {
          v108 = v90 + (v90 >> 2);
          if (v108 >= 0x10)
            v109 = v108 + 1;
          else
            v109 = 16;
          if (v109 <= v90 + 1)
            v110 = v90 + 1;
          else
            v110 = v109;
          if (v110 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x198D967E8);
          }
          v111 = *(const void **)(v62 + 64);
          v112 = (void *)WTF::fastMalloc((WTF *)(8 * v110));
          *(_DWORD *)(v62 + 72) = v110;
          *(_QWORD *)(v62 + 64) = v112;
          memcpy(v112, v111, 8 * v90);
          v8 = (uint64_t)v190;
          if (v111)
          {
            if (*(const void **)(v62 + 64) == v111)
            {
              *(_QWORD *)(v62 + 64) = 0;
              *(_DWORD *)(v62 + 72) = 0;
            }
            WTF::fastFree((unint64_t)v111, v113, v114, v115, v116, v117, v118, v119);
          }
          v120 = *(unsigned int *)(v62 + 76);
          v91 = *(_QWORD *)(v62 + 64);
          *(_QWORD *)(v91 + 8 * v120) = 0;
          *(_DWORD *)(v62 + 76) = v120 + 1;
          StatusReg = v191;
        }
        else
        {
          v91 = *(_QWORD *)(v62 + 64);
          *(_QWORD *)(v91 + 8 * v90) = 0;
          *(_DWORD *)(v62 + 76) = v90 + 1;
        }
      }
      *(_DWORD *)(v85 + 8) = v90;
      *(_QWORD *)(v91 + 8 * v90) = v85;
      v197[0] = v85;
      v92 = *(unsigned int *)(v68 + 20);
      if ((_DWORD)v92 == *(_DWORD *)(v68 + 16))
      {
        v94 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v68 + 8), v92 + 1, (unint64_t)v197);
        StatusReg = v191;
        v92 = *(unsigned int *)(v68 + 20);
        *(_QWORD *)(*(_QWORD *)(v68 + 8) + 8 * v92) = *(_QWORD *)v94;
        v85 = v197[0];
      }
      else
      {
        *(_QWORD *)(*v79 + 8 * v92) = v85;
      }
      ++v60;
      *(_DWORD *)(v68 + 20) = v92 + 1;
      *(_QWORD *)(v85 + 32) = v68;
      if (++v61 == v192)
        goto LABEL_124;
    }
  }
LABEL_169:
  JSC::Wasm::OMGIRGenerator::set((JSC::Wasm::OMGIRGenerator *)v8, *(JSC::B3::Variable **)(a3 + 72), v182);
  if (v184)
    WTF::fastFree((unint64_t)v184, v173, v174, v175, v176, v177, v178, v179);
  return v181;
}

char *JSC::Wasm::OMGIRGenerator::set(JSC::Wasm::OMGIRGenerator *this, JSC::B3::Variable *a2, JSC::B3::Value *a3)
{
  JSC::B3::BasicBlock *v5;
  JSC::B3::Value *v6;
  unint64_t v7;
  uint64_t v8;

  v5 = (JSC::B3::BasicBlock *)*((_QWORD *)this + 11);
  v6 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v7 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v7 = 0;
  v8 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v8 + 8) = -1;
  *(_WORD *)(v8 + 12) = 9;
  *(_DWORD *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 20) = 1;
  *(_QWORD *)(v8 + 24) = v7;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)v8 = off_1E357F0F8;
  *(_QWORD *)(v8 + 40) = a2;
  *(_QWORD *)(v8 + 48) = a3;
  JSC::B3::Procedure::addValueImpl(v6, (JSC::B3::Value *)v8);
  return JSC::B3::BasicBlock::append(v5, (JSC::B3::Value *)v8);
}

_OWORD *JSC::Wasm::OMGIRGenerator::addDelegateToUnreachable(_OWORD *result, uint64_t a2, int a3, int a4, int a5)
{
  _BYTE *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[28];

  v6 = result;
  v7 = *(_QWORD *)(a2 + 112);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 504);
    v9 = a2;
    do
      v9 = *(_QWORD *)(v9 + 104);
    while (*(_QWORD *)(v9 + 112));
    if (a3 == 4)
      v8 = a4;
  }
  else
  {
    if (a3 == 4)
      v8 = a4;
    else
      v8 = 0;
    v9 = a2;
  }
  v10 = *(_DWORD *)(v9 + 508);
  if (v10 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    v11 = v10 + 1;
    *(_DWORD *)(v9 + 508) = v11;
    result = (_OWORD *)(a2 + 528);
    v12 = *(_DWORD *)(a2 + 504);
    *(_DWORD *)v17 = 2;
    *(_DWORD *)&v17[4] = a5;
    *(_DWORD *)&v17[8] = v11;
    *(_QWORD *)&v17[12] = 0;
    *(_DWORD *)&v17[20] = v12;
    *(_DWORD *)&v17[24] = v8;
    v13 = *(unsigned int *)(a2 + 540);
    if ((_DWORD)v13 == *(_DWORD *)(a2 + 536))
    {
      result = (_OWORD *)WTF::Vector<JSC::Wasm::UnlinkedHandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v13 + 1, (unint64_t)v17);
      v14 = (_OWORD *)(*(_QWORD *)(a2 + 528) + 28 * *(unsigned int *)(a2 + 540));
      v15 = *result;
      v16 = *(_OWORD *)((char *)result + 12);
    }
    else
    {
      v14 = (_OWORD *)(*(_QWORD *)result + 28 * v13);
      v15 = *(_OWORD *)v17;
      v16 = *(_OWORD *)&v17[12];
    }
    *(_OWORD *)((char *)v14 + 12) = v16;
    *v14 = v15;
    ++*(_DWORD *)(a2 + 540);
    *v6 = 0;
    v6[8] = 0;
  }
  return result;
}

void JSC::Wasm::OMGIRGenerator::addReturn(_BYTE *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  JSC::B3::Value *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unsigned __int8 **v49;
  JSC::B3::Value *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  _BYTE *v61;
  uint64_t v62;
  char **v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t i;
  _DWORD *v67;
  int v68;
  WTF *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  WTF *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t j;
  WTF *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  JSC::B3::Value *v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  JSC::B3::Value *v93;
  uint64_t v94;
  int v95;
  char *v96;
  unint64_t v97;
  _BYTE *v98;
  JSC::B3::BasicBlock *v99;
  unsigned int v100;
  WTF *v101;
  char v102;
  char v103[32];
  WTF *v104;
  int v105;
  WTF *v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  _BYTE v110[9];

  if (a2[12])
  {
    v6 = *(_QWORD *)(*a2 + 14952);
    if (*(_DWORD *)(v6 + 32))
      v7 = 0;
    else
      v7 = v6 + 8;
    v8 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
    if (v8 != -1)
    {
      *(_QWORD *)v103 = v110;
      v101 = (WTF *)v103;
      std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v101, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
    }
    v9 = *(_QWORD *)(*a2 + 14952);
    if (*(_DWORD *)(v9 + 32))
      v10 = 0;
    else
      v10 = (unsigned __int8 **)(v9 + 8);
    JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v10, 1, v103);
    v14 = v108;
    if (*(_DWORD *)(a3 + 12) >= v108)
    {
      if (v108 != *(_DWORD *)(v7 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x198D97170);
      }
      v15 = a2 + 17;
      v16 = *((_DWORD *)a2 + 37);
      if (v108 && !v16)
      {
        v65 = 0;
        for (i = 0; i < v108; ++i)
        {
          v67 = (_DWORD *)a2[7];
          v68 = JSC::Wasm::toB3Type(*(_QWORD *)(*(_QWORD *)v7 + v65));
          v69 = (WTF *)WTF::fastMalloc((WTF *)8);
          *((_DWORD *)v69 + 1) = v68;
          v101 = v69;
          v74 = (WTF *)JSC::B3::SparseCollection<JSC::B3::Variable>::add(v67, &v101);
          v75 = v101;
          v101 = 0;
          if (v75)
            WTF::fastFree((unint64_t)v75, v70, v71, v72, v73, v11, v12, v13);
          v101 = v74;
          v76 = *((unsigned int *)a2 + 37);
          if ((_DWORD)v76 == *((_DWORD *)a2 + 36))
          {
            v77 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a2 + 17), v76 + 1, (unint64_t)&v101);
            v76 = *((unsigned int *)a2 + 37);
            *(_QWORD *)(a2[17] + 8 * v76) = *v77;
          }
          else
          {
            *(_QWORD *)(*v15 + 8 * v76) = v74;
          }
          v16 = v76 + 1;
          *((_DWORD *)a2 + 37) = v76 + 1;
          v14 = v108;
          v65 += 16;
        }
      }
      if (v16 != v14)
      {
        __break(0xC471u);
        JUMPOUT(0x198D97190);
      }
      if (!v14)
      {
LABEL_16:
        v17 = a2[11];
        v18 = a2[7];
        if (*a2)
          v19 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
        else
          v19 = 0;
        v101 = (WTF *)a2[12];
        v102 = 0;
        JSC::B3::BasicBlock::appendNewControlValue(v17, v18, 154, v19, (uint64_t *)&v101, v11, v12, v13);
        *a1 = 0;
        a1[8] = 0;
        goto LABEL_19;
      }
      v29 = a3;
      v30 = 0;
      v100 = *(_DWORD *)(v29 + 12) - v14;
      v98 = a1;
      while (1)
      {
        v31 = *a2;
        v32 = *a2 ? *(_QWORD *)(v31 + 15000) | ((unint64_t)*(unsigned __int8 *)(v31 + 14992) << 32) : 0;
        if (v30 >= *((unsigned int *)a2 + 37))
          break;
        if (v31)
          v33 = *(_QWORD *)(v31 + 15000) | ((unint64_t)*(unsigned __int8 *)(v31 + 14992) << 32);
        else
          v33 = 0;
        v34 = a2[11];
        v35 = (JSC::B3::Value *)a2[7];
        v36 = *(_QWORD *)(*v15 + 8 * v30);
        v37 = *(_QWORD *)(*(_QWORD *)v29 + 24 * (v100 + v30) + 16);
        v38 = WTF::fastMalloc((WTF *)0x30);
        v39 = *(_DWORD *)(v37 + 4);
        *(_DWORD *)(v38 + 8) = -1;
        *(_WORD *)(v38 + 12) = 10;
        *(_DWORD *)(v38 + 16) = v39;
        *(_BYTE *)(v38 + 20) = 0;
        *(_QWORD *)(v38 + 24) = v33;
        *(_QWORD *)(v38 + 32) = 0;
        *(_QWORD *)v38 = off_1E357F0F8;
        *(_QWORD *)(v38 + 40) = v37;
        JSC::B3::Procedure::addValueImpl(v35, (JSC::B3::Value *)v38);
        v101 = (WTF *)v38;
        v40 = (_QWORD *)(v34 + 8);
        v41 = *(unsigned int *)(v34 + 20);
        if ((_DWORD)v41 == *(_DWORD *)(v34 + 16))
        {
          v45 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v34 + 8), v41 + 1, (unint64_t)&v101);
          v41 = *(unsigned int *)(v34 + 20);
          *(_QWORD *)(*(_QWORD *)(v34 + 8) + 8 * v41) = *(_QWORD *)v45;
          v42 = v101;
        }
        else
        {
          *(_QWORD *)(*v40 + 8 * v41) = v38;
          v42 = (WTF *)v38;
        }
        *(_DWORD *)(v34 + 20) = v41 + 1;
        *((_QWORD *)v42 + 4) = v34;
        v43 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v43 + 8) = -1;
        *(_WORD *)(v43 + 12) = 9;
        *(_DWORD *)(v43 + 16) = 0;
        *(_BYTE *)(v43 + 20) = 1;
        *(_QWORD *)(v43 + 24) = v32;
        *(_QWORD *)(v43 + 32) = 0;
        *(_QWORD *)v43 = off_1E357F0F8;
        *(_QWORD *)(v43 + 40) = v36;
        *(_QWORD *)(v43 + 48) = v38;
        JSC::B3::Procedure::addValueImpl(v35, (JSC::B3::Value *)v43);
        v101 = (WTF *)v43;
        v44 = *(unsigned int *)(v34 + 20);
        if ((_DWORD)v44 == *(_DWORD *)(v34 + 16))
        {
          v46 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v34 + 8), v44 + 1, (unint64_t)&v101);
          v44 = *(unsigned int *)(v34 + 20);
          *(_QWORD *)(*(_QWORD *)(v34 + 8) + 8 * v44) = *(_QWORD *)v46;
          v43 = (uint64_t)v101;
        }
        else
        {
          *(_QWORD *)(*v40 + 8 * v44) = v43;
        }
        v15 = a2 + 17;
        a1 = v98;
        *(_DWORD *)(v34 + 20) = v44 + 1;
        *(_QWORD *)(v43 + 32) = v34;
        if (++v30 >= v108)
          goto LABEL_16;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x198D97150);
  }
  v47 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v47 != -1)
  {
    *(_QWORD *)v103 = v110;
    v101 = (WTF *)v103;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v101, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  v48 = *(_QWORD *)(*a2 + 14952);
  if (*(_DWORD *)(v48 + 32))
    v49 = 0;
  else
    v49 = (unsigned __int8 **)(v48 + 8);
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v49, 1, v103);
  v50 = (JSC::B3::Value *)a2[7];
  if (*a2)
    v51 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
  else
    v51 = 0;
  v52 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v52 = off_1E357F5F0;
  *(_DWORD *)(v52 + 8) = -1;
  *(_WORD *)(v52 + 12) = 83;
  *(_DWORD *)(v52 + 16) = 0;
  *(_BYTE *)(v52 + 20) = 4;
  *(_QWORD *)(v52 + 24) = v51;
  *(_QWORD *)(v52 + 32) = 0;
  v53 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v52);
  *v53 = v53 + 2;
  v53[1] = 3;
  *(_OWORD *)(v52 + 40) = 0u;
  *(_OWORD *)(v52 + 56) = 0u;
  *(_OWORD *)(v52 + 72) = 0u;
  *(_OWORD *)(v52 + 88) = 0u;
  *(_QWORD *)(v52 + 104) = 0;
  *(_QWORD *)v52 = off_1E357E700;
  *(_OWORD *)(v52 + 112) = xmmword_1991243D0;
  *(_QWORD *)(v52 + 152) = 0;
  *(_QWORD *)(v52 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v52 + 136) = v52 + 152;
  *(_WORD *)(v52 + 168) = 0;
  *(_BYTE *)(v52 + 160) = 0;
  *(_QWORD *)(v52 + 144) = 0x100000001;
  JSC::B3::Procedure::addValueImpl(v50, (JSC::B3::Value *)v52);
  v54 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v54 + 8) = 1;
  *(_QWORD *)v54 = off_1E35B6710;
  v55 = *(unsigned int **)(v52 + 56);
  *(_QWORD *)(v52 + 56) = v54;
  if (v55)
  {
    v56 = v55 + 2;
    do
    {
      v57 = __ldaxr(v56);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v56));
    if (!v58)
    {
      atomic_store(1u, v55 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v55 + 8))(v55);
    }
  }
  *(_BYTE *)(v52 + 112) = 1;
  v59 = *(_DWORD *)(a3 + 12);
  v60 = v59 - v108;
  if (v59 < v108)
  {
    __break(0xC471u);
    JUMPOUT(0x198D971DCLL);
  }
  v61 = a1;
  if (v108)
  {
    v78 = (_QWORD *)a3;
    v79 = 0;
    for (j = 0; j < v108; ++j)
    {
      v81 = *(WTF **)((char *)v106 + v79);
      v82 = *((unsigned __int8 *)v106 + v79 + 8);
      v101 = 0;
      switch(v82)
      {
        case 2:
          v102 = 9;
          v101 = v81;
          break;
        case 0:
          v102 = 7;
          v91 = v81 & 0x7F;
          goto LABEL_69;
        case 3:
          v102 = 10;
          v101 = v81;
          goto LABEL_70;
        case 1:
          v102 = 7;
          v91 = ((_BYTE)v81 + 32) & 0x7F;
LABEL_69:
          LOBYTE(v101) = v91;
LABEL_70:
          v92 = *(_QWORD *)(*v78 + 24 * (v60 + j) + 16);
          if (*a2)
            v97 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
          else
            v97 = 0;
          v99 = (JSC::B3::BasicBlock *)a2[11];
          v93 = (JSC::B3::Value *)a2[7];
          v94 = WTF::fastMalloc((WTF *)0x30);
          v95 = *(_DWORD *)(v92 + 4);
          *(_DWORD *)(v94 + 8) = -1;
          *(_WORD *)(v94 + 12) = 10;
          *(_DWORD *)(v94 + 16) = v95;
          *(_BYTE *)(v94 + 20) = 0;
          *(_QWORD *)(v94 + 24) = v97;
          *(_QWORD *)(v94 + 32) = 0;
          *(_QWORD *)v94 = off_1E357F0F8;
          *(_QWORD *)(v94 + 40) = v92;
          JSC::B3::Procedure::addValueImpl(v93, (JSC::B3::Value *)v94);
          JSC::B3::BasicBlock::append(v99, (JSC::B3::Value *)v94);
          JSC::B3::StackmapValue::append((__int128 *)v52, v94, (unint64_t)&v101);
          goto LABEL_65;
        default:
          if (v102 != 9)
            goto LABEL_70;
          break;
      }
      v83 = a2[11];
      v84 = a2[7];
      v85 = JSC::Wasm::OMGIRGenerator::framePointer((JSC::Wasm::OMGIRGenerator *)a2);
      v86 = JSC::Wasm::OMGIRGenerator::constant(a2, 2u, (unint64_t)v101, 0, 0);
      v87 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v83, v84, 14, 0, v85, v86);
      v88 = a2[11];
      v89 = (JSC::B3::Value *)a2[7];
      v90 = JSC::Wasm::OMGIRGenerator::get((JSC::Wasm::OMGIRGenerator *)a2, *(JSC::B3::Variable **)(*v78 + 24 * (v60 + j) + 16));
      JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>(v88, v89, 0, v90, v87);
LABEL_65:
      v79 += 24;
    }
  }
  v62 = a2[11];
  v101 = (WTF *)v52;
  v63 = (char **)(v62 + 8);
  v64 = *(unsigned int *)(v62 + 20);
  if ((_DWORD)v64 == *(_DWORD *)(v62 + 16))
  {
    v96 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v63, v64 + 1, (unint64_t)&v101);
    v64 = *(unsigned int *)(v62 + 20);
    *(_QWORD *)(*(_QWORD *)(v62 + 8) + 8 * v64) = *(_QWORD *)v96;
    v52 = (uint64_t)v101;
  }
  else
  {
    *(_QWORD *)&(*v63)[8 * v64] = v52;
  }
  *(_DWORD *)(v62 + 20) = v64 + 1;
  *(_QWORD *)(v52 + 32) = v62;
  *v61 = 0;
  v61[8] = 0;
LABEL_19:
  v27 = v106;
  if (&v109 != (uint64_t *)v106 && v106)
  {
    v106 = 0;
    v107 = 0;
    WTF::fastFree((unint64_t)v27, v20, v21, v22, v23, v24, v25, v26);
  }
  v28 = v104;
  if (v104)
  {
    v104 = 0;
    v105 = 0;
    WTF::fastFree((unint64_t)v28, v20, v21, v22, v23, v24, v25, v26);
  }
}

_QWORD *JSC::Wasm::OMGIRGenerator::addBranch(_QWORD *result, JSC::Wasm::OMGIRGenerator *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int BranchHint;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v63;
  char *v64;
  char *v65;
  _QWORD *v66;
  uint64_t v67;
  BOOL v68;
  char v69;
  uint64_t *v70;
  uint64_t v71;
  char v72;

  v11 = result;
  v12 = a3[13];
  if (!(_DWORD)v12)
  {
LABEL_2:
    v13 = (uint64_t *)(a3 + 8);
    v15 = *a3;
    v14 = (uint64_t *)(a3 + 6);
    if (v15 != 2)
      v13 = v14;
    v16 = *v13;
    v17 = *((_QWORD *)a2 + 2);
    v18 = *(_QWORD *)a2;
    v19 = *(_QWORD *)(*(_QWORD *)a2 + 15000);
    v20 = *(_QWORD *)(v17 + 256);
    if (!v20
      || ((v67 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Wasm::BranchHintMap>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Wasm::BranchHintMap>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Wasm::BranchHintMap,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::Wasm::BranchHintMap>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,JSC::Wasm::BranchHintMap,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::Wasm::BranchHintMap>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>(*(_QWORD *)(v17 + 256), *((_DWORD *)a2 + 9)), v17 = v20 + 16 * *(unsigned int *)(v20 - 4), v67)? (v68 = v67 == v17): (v68 = 1), v68))
    {
      LOBYTE(BranchHint) = 0;
    }
    else
    {
      BranchHint = JSC::Wasm::BranchHintMap::getBranchHint(*(JSC::Wasm::BranchHintMap **)(v67 + 8), v19);
      if (BranchHint != 1)
      {
        v17 = 1;
        v68 = BranchHint == 0;
        LOBYTE(BranchHint) = 0;
        v22 = v68;
LABEL_7:
        if (!a4)
        {
          v23 = *((_QWORD *)a2 + 11);
          v24 = *((_QWORD *)a2 + 7);
          v25 = v19 | ((unint64_t)*(unsigned __int8 *)(v18 + 14992) << 32);
          v71 = v16;
          v72 = v22;
          JSC::B3::BasicBlock::appendNewControlValue(v23, v24, 154, v25, &v71, a6, a7, a8);
          v26 = *((_QWORD *)a2 + 11);
          v71 = v26;
          result = (_QWORD *)(v16 + 24);
          v27 = *(unsigned int *)(v16 + 36);
          if ((_DWORD)v27)
          {
            v28 = (_QWORD *)*result;
            v29 = *(unsigned int *)(v16 + 36);
            while (*v28 != v26)
            {
              ++v28;
              if (!--v29)
                goto LABEL_12;
            }
          }
          else
          {
LABEL_12:
            if ((_DWORD)v27 == *(_DWORD *)(v16 + 32))
            {
              result = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v27 + 1, (unint64_t)&v71);
              v27 = *(unsigned int *)(v16 + 36);
              *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * v27) = *result;
            }
            else
            {
              *(_QWORD *)(*result + 8 * v27) = v26;
            }
            *(_DWORD *)(v16 + 36) = v27 + 1;
          }
LABEL_41:
          *v11 = 0;
          v11[8] = 0;
          return result;
        }
        v69 = BranchHint;
        v70 = JSC::B3::Procedure::addBlock((uint64_t *)v17, *((JSC::B3::Procedure **)a2 + 7), 1.0);
        v30 = *((_QWORD *)a2 + 11);
        v31 = (JSC::B3::Value *)*((_QWORD *)a2 + 7);
        if (*(_QWORD *)a2)
          v32 = *(_QWORD *)(*(_QWORD *)a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a2 + 14992) << 32);
        else
          v32 = 0;
        v33 = WTF::fastMalloc((WTF *)0x30);
        v34 = *(_DWORD *)(a4 + 4);
        *(_DWORD *)(v33 + 8) = -1;
        *(_WORD *)(v33 + 12) = 10;
        *(_DWORD *)(v33 + 16) = v34;
        *(_BYTE *)(v33 + 20) = 0;
        *(_QWORD *)(v33 + 24) = v32;
        *(_QWORD *)(v33 + 32) = 0;
        *(_QWORD *)v33 = off_1E357F0F8;
        *(_QWORD *)(v33 + 40) = a4;
        JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
        v71 = v33;
        v35 = (_QWORD *)(v30 + 8);
        v36 = *(unsigned int *)(v30 + 20);
        if ((_DWORD)v36 == *(_DWORD *)(v30 + 16))
        {
          v64 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v30 + 8), v36 + 1, (unint64_t)&v71);
          v36 = *(unsigned int *)(v30 + 20);
          *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v36) = *(_QWORD *)v64;
          v37 = v71;
        }
        else
        {
          *(_QWORD *)(*v35 + 8 * v36) = v33;
          v37 = v33;
        }
        *(_DWORD *)(v30 + 20) = v36 + 1;
        *(_QWORD *)(v37 + 32) = v30;
        v38 = WTF::fastMalloc((WTF *)0x30);
        *(_QWORD *)v38 = off_1E357F5F0;
        *(_DWORD *)(v38 + 8) = -1;
        *(_WORD *)(v38 + 12) = 155;
        *(_DWORD *)(v38 + 16) = 0;
        *(_BYTE *)(v38 + 20) = 1;
        *(_QWORD *)(v38 + 24) = v32;
        *(_QWORD *)(v38 + 32) = 0;
        JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v38, 1, v33);
        JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v38);
        v71 = v38;
        v45 = *(unsigned int *)(v30 + 20);
        if ((_DWORD)v45 == *(_DWORD *)(v30 + 16))
        {
          v65 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v30 + 8), v45 + 1, (unint64_t)&v71);
          v45 = *(unsigned int *)(v30 + 20);
          *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v45) = *(_QWORD *)v65;
          v38 = v71;
        }
        else
        {
          *(_QWORD *)(*v35 + 8 * v45) = v38;
        }
        *(_DWORD *)(v30 + 20) = v45 + 1;
        *(_QWORD *)(v38 + 32) = v30;
        v46 = *((_QWORD *)a2 + 11);
        v47 = (uint64_t *)(v46 + 56);
        v48 = *(_DWORD *)(v46 + 68);
        if (v48 >= 2)
        {
          v49 = *v47;
        }
        else
        {
          if (*(_DWORD *)(v46 + 64) >= 2u)
          {
            v49 = *v47;
            goto LABEL_24;
          }
          WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, (void *)2, v39, v40, v41, v42, v43, v44);
          v48 = *(_DWORD *)(v46 + 68);
          v49 = *(_QWORD *)(v46 + 56);
          if (v48 != 2)
          {
LABEL_24:
            v50 = 16 * v48;
            v51 = v69;
            do
            {
              v52 = v49 + v50;
              *(_QWORD *)v52 = 0;
              *(_BYTE *)(v52 + 8) = 0;
              v50 += 16;
            }
            while (v50 != 32);
            goto LABEL_26;
          }
        }
        v51 = v69;
LABEL_26:
        *(_DWORD *)(v46 + 68) = 2;
        *(_QWORD *)v49 = v16;
        *(_BYTE *)(v49 + 8) = v22;
        v53 = *(_QWORD *)(v46 + 56);
        *(_QWORD *)(v53 + 16) = v70;
        *(_BYTE *)(v53 + 24) = v51;
        v54 = *((_QWORD *)a2 + 11);
        v71 = v54;
        v55 = (_QWORD *)(v16 + 24);
        v56 = *(unsigned int *)(v16 + 36);
        if ((_DWORD)v56)
        {
          v57 = (_QWORD *)*v55;
          v58 = *(unsigned int *)(v16 + 36);
          while (*v57 != v54)
          {
            ++v57;
            if (!--v58)
              goto LABEL_30;
          }
        }
        else
        {
LABEL_30:
          if ((_DWORD)v56 == *(_DWORD *)(v16 + 32))
          {
            v66 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v55, v56 + 1, (unint64_t)&v71);
            v56 = *(unsigned int *)(v16 + 36);
            *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * v56) = *v66;
          }
          else
          {
            *(_QWORD *)(*v55 + 8 * v56) = v54;
          }
          *(_DWORD *)(v16 + 36) = v56 + 1;
          v54 = *((_QWORD *)a2 + 11);
        }
        v71 = v54;
        result = v70 + 3;
        v59 = *((unsigned int *)v70 + 9);
        if ((_DWORD)v59)
        {
          v60 = (_QWORD *)*result;
          v61 = *((unsigned int *)v70 + 9);
          while (*v60 != v54)
          {
            ++v60;
            if (!--v61)
              goto LABEL_37;
          }
        }
        else
        {
LABEL_37:
          if ((_DWORD)v59 == *((_DWORD *)v70 + 8))
          {
            result = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v59 + 1, (unint64_t)&v71);
            v59 = *((unsigned int *)v70 + 9);
            *(_QWORD *)(v70[3] + 8 * v59) = *result;
          }
          else
          {
            *(_QWORD *)(*result + 8 * v59) = v54;
          }
          *((_DWORD *)v70 + 9) = v59 + 1;
        }
        *((_QWORD *)a2 + 11) = v70;
        goto LABEL_41;
      }
    }
    v22 = 0;
    goto LABEL_7;
  }
  v63 = 0;
  while (v12 + v63 - 1 < (unint64_t)a3[13])
  {
    result = JSC::Wasm::OMGIRGenerator::unify(a2, *(JSC::B3::Value **)(*((_QWORD *)a3 + 5) + 8 * v12 - 8 + 8 * v63), *(JSC::B3::Variable **)(*(_QWORD *)a5 + 24 * (v63 + *(unsigned int *)(a5 + 12)) - 8));
    --v63;
    if (!(v12 + v63))
      goto LABEL_2;
  }
  __break(0xC471u);
  return result;
}

char **JSC::Wasm::OMGIRGenerator::addBranchNull(uint64_t a1, _QWORD *a2, int *a3, uint64_t a4, uint64_t a5, int a6, WTF **a7)
{
  uint64_t v9;
  JSC::B3::Value *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  uint64_t v23;
  uint64_t v24;
  int *Space;
  uint64_t v26;
  int *v27;
  WTF *PushVariable;
  uint64_t v29;
  JSC::B3::Value *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char **result;
  uint64_t v37;
  int v38;
  uint64_t v39;
  JSC::B3::Value *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  char **v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v48;
  JSC::B3::Value *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char v59;
  unsigned __int8 v60;
  uint64_t v64;
  char v65;

  v9 = a2[11];
  v10 = (JSC::B3::Value *)a2[7];
  if (a6)
    v11 = 52;
  else
    v11 = 51;
  v59 = a6;
  v60 = v11;
  if (*a2)
    v12 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *(_DWORD *)(a4 + 4);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a4;
  JSC::B3::Procedure::addValueImpl(v10, (JSC::B3::Value *)v13);
  v64 = v13;
  v15 = (_QWORD *)(v9 + 8);
  v16 = *(unsigned int *)(v9 + 20);
  v57 = a4;
  if ((_DWORD)v16 == *(_DWORD *)(v9 + 16))
  {
    v53 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v9 + 8), v16 + 1, (unint64_t)&v64);
    v16 = *(unsigned int *)(v9 + 20);
    *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v16) = *(_QWORD *)v53;
    v17 = v64;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v9 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v9;
  v18 = a2[11];
  v19 = (JSC::B3::Value *)a2[7];
  if (*a2)
    v20 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 4;
  *(_DWORD *)(v21 + 16) = 2;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357DA88;
  *(_QWORD *)(v21 + 40) = 2;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v64 = v21;
  v22 = (char **)(v18 + 8);
  v23 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v23 == *(_DWORD *)(v18 + 16))
  {
    v54 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v22, v23 + 1, (unint64_t)&v64);
    v23 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v23) = *(_QWORD *)v54;
    v24 = v64;
  }
  else
  {
    *(_QWORD *)&(*v22)[8 * v23] = v21;
    v24 = v21;
  }
  *(_DWORD *)(v18 + 20) = v23 + 1;
  *(_QWORD *)(v24 + 32) = v18;
  Space = (int *)JSC::B3::Value::allocateSpace(v60, 40);
  JSC::B3::Value::Value<JSC::B3::Value*,JSC::B3::Const64Value *>((uint64_t)Space, v60, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v10, (JSC::B3::Value *)Space);
  v64 = (uint64_t)Space;
  v26 = *(unsigned int *)(v9 + 20);
  if ((_DWORD)v26 == *(_DWORD *)(v9 + 16))
  {
    v55 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v9 + 8), v26 + 1, (unint64_t)&v64);
    v26 = *(unsigned int *)(v9 + 20);
    *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v26) = *(_QWORD *)v55;
    v27 = (int *)v64;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v26) = Space;
    v27 = Space;
  }
  *(_DWORD *)(v9 + 20) = v26 + 1;
  *((_QWORD *)v27 + 4) = v9;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)a2, Space[4]);
  v29 = a2[11];
  v30 = (JSC::B3::Value *)a2[7];
  if (*a2)
    v31 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
  else
    v31 = 0;
  v32 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v32 + 8) = -1;
  *(_WORD *)(v32 + 12) = 9;
  *(_DWORD *)(v32 + 16) = 0;
  *(_BYTE *)(v32 + 20) = 1;
  *(_QWORD *)(v32 + 24) = v31;
  *(_QWORD *)(v32 + 32) = 0;
  *(_QWORD *)v32 = off_1E357F0F8;
  *(_QWORD *)(v32 + 40) = PushVariable;
  *(_QWORD *)(v32 + 48) = Space;
  JSC::B3::Procedure::addValueImpl(v30, (JSC::B3::Value *)v32);
  v64 = v32;
  result = (char **)(v29 + 8);
  v37 = *(unsigned int *)(v29 + 20);
  if ((_DWORD)v37 == *(_DWORD *)(v29 + 16))
  {
    result = (char **)WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v37 + 1, (unint64_t)&v64);
    v37 = *(unsigned int *)(v29 + 20);
    *(_QWORD *)(*(_QWORD *)(v29 + 8) + 8 * v37) = *result;
    v32 = v64;
  }
  else
  {
    *(_QWORD *)&(*result)[8 * v37] = v32;
  }
  *(_DWORD *)(v29 + 20) = v37 + 1;
  *(_QWORD *)(v32 + 32) = v29;
  v38 = *((_DWORD *)a2 + 128);
  if (v38)
  {
    *((_DWORD *)a2 + 128) = v38 - 1;
    result = (char **)JSC::Wasm::OMGIRGenerator::addBranch(&v64, (JSC::Wasm::OMGIRGenerator *)a2, a3, (uint64_t)PushVariable, a5, v33, v34, v35);
    if (v65)
    {
      *(_QWORD *)a1 = v64;
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      if ((v59 & 1) == 0)
      {
        v39 = a2[11];
        v40 = (JSC::B3::Value *)a2[7];
        if (*a2)
          v41 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
        else
          v41 = 0;
        v42 = WTF::fastMalloc((WTF *)0x30);
        v43 = *(_DWORD *)(v57 + 4);
        *(_DWORD *)(v42 + 8) = -1;
        *(_WORD *)(v42 + 12) = 10;
        *(_DWORD *)(v42 + 16) = v43;
        *(_BYTE *)(v42 + 20) = 0;
        *(_QWORD *)(v42 + 24) = v41;
        *(_QWORD *)(v42 + 32) = 0;
        *(_QWORD *)v42 = off_1E357F0F8;
        *(_QWORD *)(v42 + 40) = v57;
        JSC::B3::Procedure::addValueImpl(v40, (JSC::B3::Value *)v42);
        v64 = v42;
        v44 = (char **)(v39 + 8);
        v45 = *(unsigned int *)(v39 + 20);
        if ((_DWORD)v45 == *(_DWORD *)(v39 + 16))
        {
          v56 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v44, v45 + 1, (unint64_t)&v64);
          v45 = *(unsigned int *)(v39 + 20);
          *(_QWORD *)(*(_QWORD *)(v39 + 8) + 8 * v45) = *(_QWORD *)v56;
          v46 = v64;
        }
        else
        {
          *(_QWORD *)&(*v44)[8 * v45] = v42;
          v46 = v42;
        }
        *(_DWORD *)(v39 + 20) = v45 + 1;
        *(_QWORD *)(v46 + 32) = v39;
        v47 = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)a2, *(_DWORD *)(v42 + 16));
        v48 = a2[11];
        v49 = (JSC::B3::Value *)a2[7];
        if (*a2)
          v50 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
        else
          v50 = 0;
        v51 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v51 + 8) = -1;
        *(_WORD *)(v51 + 12) = 9;
        *(_DWORD *)(v51 + 16) = 0;
        *(_BYTE *)(v51 + 20) = 1;
        *(_QWORD *)(v51 + 24) = v50;
        *(_QWORD *)(v51 + 32) = 0;
        *(_QWORD *)v51 = off_1E357F0F8;
        *(_QWORD *)(v51 + 40) = v47;
        *(_QWORD *)(v51 + 48) = v42;
        JSC::B3::Procedure::addValueImpl(v49, (JSC::B3::Value *)v51);
        v64 = v51;
        result = (char **)(v48 + 8);
        v52 = *(unsigned int *)(v48 + 20);
        if ((_DWORD)v52 == *(_DWORD *)(v48 + 16))
        {
          result = (char **)WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v52 + 1, (unint64_t)&v64);
          v52 = *(unsigned int *)(v48 + 20);
          *(_QWORD *)(*(_QWORD *)(v48 + 8) + 8 * v52) = *result;
          v51 = v64;
        }
        else
        {
          *(_QWORD *)&(*result)[8 * v52] = v51;
        }
        *(_DWORD *)(v48 + 20) = v52 + 1;
        *(_QWORD *)(v51 + 32) = v48;
        *a7 = v47;
      }
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 8) = 0;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::Wasm::OMGIRGenerator::addSwitch(uint64_t result, JSC::Wasm::OMGIRGenerator *a2, JSC::B3::Variable *a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v40;
  unint64_t v41;
  uint64_t v42;
  char v43;

  v40 = (_BYTE *)result;
  v10 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v10)
  {
    v11 = 0;
    while (1)
    {
      v12 = *(_QWORD *)(*(_QWORD *)a4 + 8 * v11);
      v13 = *(unsigned int *)(v12 + 52);
      if ((_DWORD)v13)
        break;
LABEL_4:
      if (++v11 >= v10)
        goto LABEL_10;
    }
    v14 = 0;
    while (v13 + v14 - 1 < (unint64_t)*(unsigned int *)(v12 + 52))
    {
      result = (uint64_t)JSC::Wasm::OMGIRGenerator::unify(a2, *(JSC::B3::Value **)(*(_QWORD *)(v12 + 40) + 8 * v13 - 8 + 8 * v14), *(JSC::B3::Variable **)(*(_QWORD *)a6 + 24 * (v14 + *(unsigned int *)(a6 + 12)) - 8));
      --v14;
      if (!(v13 + v14))
      {
        v10 = *(unsigned int *)(a4 + 12);
        goto LABEL_4;
      }
    }
    __break(0xC471u);
  }
  else
  {
LABEL_10:
    JSC::Wasm::OMGIRGenerator::unifyValuesWithBlock(a2, a6, (uint64_t)a5);
    v15 = *((_QWORD *)a2 + 11);
    v16 = (JSC::B3::Value *)*((_QWORD *)a2 + 7);
    if (*(_QWORD *)a2)
      v17 = *(_QWORD *)(*(_QWORD *)a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a2 + 14992) << 32);
    else
      v17 = 0;
    v18 = JSC::Wasm::OMGIRGenerator::get(a2, a3);
    v19 = JSC::B3::BasicBlock::appendNew<JSC::B3::SwitchValue,JSC::B3::Origin,JSC::B3::Value *>(v15, v16, v17, v18);
    v26 = v19;
    v27 = (unint64_t *)(a5 + 8);
    v29 = *a5;
    v28 = (unint64_t *)(a5 + 6);
    if (v29 != 2)
      v27 = v28;
    v41 = *v27;
    LOBYTE(v42) = 0;
    result = JSC::B3::SwitchValue::setFallThrough(v19, (unint64_t)&v41, v20, v21, v22, v23, v24, v25);
    if (*(_DWORD *)(a4 + 12))
    {
      v35 = 0;
      do
      {
        v36 = *(_DWORD **)(*(_QWORD *)a4 + 8 * v35);
        if (*v36 == 2)
          v37 = 8;
        else
          v37 = 6;
        v38 = *(_QWORD *)&v36[v37];
        v41 = v35;
        v42 = v38;
        v43 = 0;
        result = (uint64_t)JSC::B3::SwitchValue::appendCase(v26, *(_QWORD *)(v26 + 32), &v41, v30, v31, v32, v33, v34);
        ++v35;
      }
      while (v35 < *(unsigned int *)(a4 + 12));
    }
    *v40 = 0;
    v40[8] = 0;
  }
  return result;
}

void JSC::Wasm::OMGIRGenerator::endBlock(_BYTE *a1, JSC::Wasm::OMGIRGenerator *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;

  if (*(_DWORD *)(a3 + 808) != 2 && (v12 = *(unsigned int *)(a3 + 860), (_DWORD)v12))
  {
    v26 = 0;
    while (v12 + v26 - 1 < (unint64_t)*(unsigned int *)(a3 + 860))
    {
      JSC::Wasm::OMGIRGenerator::unify(a2, *(JSC::B3::Value **)(*(_QWORD *)(a3 + 848) + 8 * v12 - 8 + 8 * v26), *(JSC::B3::Variable **)(*(_QWORD *)a4 + 24 * (v26 + *(unsigned int *)(a4 + 12)) - 8));
      --v26;
      if (!(v12 + v26))
        goto LABEL_3;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_3:
    v13 = *((_QWORD *)a2 + 11);
    v14 = *((_QWORD *)a2 + 7);
    if (*(_QWORD *)a2)
      v15 = *(_QWORD *)(*(_QWORD *)a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a2 + 14992) << 32);
    else
      v15 = 0;
    v28 = *(_QWORD *)(a3 + 832);
    v29 = 0;
    JSC::B3::BasicBlock::appendNewControlValue(v13, v14, 154, v15, &v28, a6, a7, a8);
    v20 = *(_QWORD *)(a3 + 832);
    v21 = *((_QWORD *)a2 + 11);
    v28 = v21;
    v22 = (_QWORD *)(v20 + 24);
    v23 = *(unsigned int *)(v20 + 36);
    if ((_DWORD)v23)
    {
      v24 = (_QWORD *)*v22;
      v25 = *(unsigned int *)(v20 + 36);
      while (*v24 != v21)
      {
        ++v24;
        if (!--v25)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      if ((_DWORD)v23 == *(_DWORD *)(v20 + 32))
      {
        v27 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v28);
        v23 = *(unsigned int *)(v20 + 36);
        *(_QWORD *)(*(_QWORD *)(v20 + 24) + 8 * v23) = *v27;
      }
      else
      {
        *(_QWORD *)(*v22 + 8 * v23) = v21;
      }
      *(_DWORD *)(v20 + 36) = v23 + 1;
    }
    JSC::Wasm::OMGIRGenerator::addEndToUnreachable(a1, (uint64_t)a2, a3, a4, v16, v17, v18, v19);
  }
}

void JSC::Wasm::OMGIRGenerator::addEndToUnreachable(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  WTF *PushVariable;
  uint64_t v25;
  JSC::B3::Value *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char **v34;
  uint64_t v35;
  unsigned int v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  JSC::B3::Value *v52;
  WTF *v53;
  unsigned int v54;
  _QWORD *v55;
  uint64_t v56;
  __int128 v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;

  v11 = *(_QWORD *)(a3 + 832);
  *(_QWORD *)(a2 + 88) = v11;
  *(_DWORD *)(a2 + 512) = *(_DWORD *)(a3 + 824);
  v12 = *(_DWORD *)(a3 + 808);
  if ((v12 - 4) >= 2)
  {
    if (!v12)
    {
      v59 = *(_QWORD *)(a3 + 840);
      v60 = *(_QWORD *)(a2 + 56);
      if (*(_QWORD *)a2)
        v61 = *(_QWORD *)(*(_QWORD *)a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a2 + 14992) << 32);
      else
        v61 = 0;
      *(_QWORD *)&v65 = v11;
      BYTE8(v65) = 0;
      JSC::B3::BasicBlock::appendNewControlValue(v59, v60, 154, v61, (uint64_t *)&v65, a6, a7, a8);
      JSC::B3::BasicBlock::addPredecessor(*(JSC::B3::BasicBlock **)(a2 + 88), *(JSC::B3::BasicBlock **)(a3 + 840));
      v12 = *(_DWORD *)(a3 + 808);
    }
    if (v12 != 2)
      goto LABEL_4;
    v40 = *(_DWORD *)(a2 + 172);
    if (!v40)
    {
      __break(0xC471u);
      JUMPOUT(0x198D983C0);
    }
    *(_DWORD *)(a2 + 172) = v40 - 1;
    v41 = *(_QWORD *)(a3 + 816);
    if (!*(_DWORD *)(v41 + 12))
      goto LABEL_5;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    while (1)
    {
      if (v44 >= *(unsigned int *)(a4 + 12))
      {
        v48 = (uint64_t *)(*(_QWORD *)v41 + v43);
        v49 = *v48;
        v50 = v48[1];
        *(_QWORD *)&v65 = v49;
        *((_QWORD *)&v65 + 1) = v50;
        v51 = JSC::Wasm::toB3Type(v49);
        v52 = (JSC::B3::Value *)JSC::Wasm::OMGIRGenerator::constant((uint64_t *)a2, v51, 0xBBADBEEFuLL, 0, 0);
        v53 = JSC::Wasm::OMGIRGenerator::push((JSC::Wasm::OMGIRGenerator *)a2, v52);
        v66 = (uint64_t)v53;
        v54 = *(_DWORD *)(a3 + 12);
        if (v54 != *(_DWORD *)(a3 + 8))
        {
          v55 = (_QWORD *)(*(_QWORD *)a3 + 24 * v54);
          *v55 = v49;
          v55[1] = v50;
          v55[2] = v53;
LABEL_33:
          ++*(_DWORD *)(a3 + 12);
          goto LABEL_34;
        }
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::B3::Variable *>(a3, &v65, &v66, a4, a5, a6, a7, a8);
      }
      else
      {
        v45 = *(_DWORD *)(a2 + 512);
        if (v45 == -1)
          goto LABEL_47;
        *(_DWORD *)(a2 + 512) = v45 + 1;
        v46 = *(_QWORD *)a4 + v42;
        v47 = *(_DWORD *)(a3 + 12);
        if (v47 != *(_DWORD *)(a3 + 8))
        {
          v56 = *(_QWORD *)a3 + 24 * v47;
          v57 = *(_OWORD *)v46;
          *(_QWORD *)(v56 + 16) = *(_QWORD *)(v46 + 16);
          *(_OWORD *)v56 = v57;
          goto LABEL_33;
        }
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::FunctionParserTypes<JSC::Wasm::LLIntGenerator::ControlType,JSC::VirtualRegister,JSC::CallLinkInfoBase::CallType>::TypedExpression&>(a3, v46, a3, a4, a5, a6, a7, a8);
      }
LABEL_34:
      ++v44;
      v41 = *(_QWORD *)(a3 + 816);
      v43 += 16;
      v42 += 24;
      if (v44 >= *(unsigned int *)(v41 + 12))
        goto LABEL_5;
    }
  }
  v58 = *(_DWORD *)(a2 + 504);
  if (!v58)
  {
    __break(0xC471u);
    JUMPOUT(0x198D983C8);
  }
  *(_DWORD *)(a2 + 504) = v58 - 1;
LABEL_4:
  if (*(_DWORD *)(*(_QWORD *)(a3 + 816) + 12))
  {
    v14 = 0;
    v15 = 0;
    v62 = a1;
    while (v15 < *(unsigned int *)(a3 + 860))
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a3 + 848) + 8 * v15);
      v17 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)&v65 = v16;
      v18 = (char **)(v17 + 8);
      v19 = *(unsigned int *)(v17 + 20);
      if ((_DWORD)v19 == *(_DWORD *)(v17 + 16))
      {
        v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18, v19 + 1, (unint64_t)&v65);
        v19 = *(unsigned int *)(v17 + 20);
        *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v19) = *(_QWORD *)v38;
        v20 = v65;
      }
      else
      {
        *(_QWORD *)&(*v18)[8 * v19] = v16;
        v20 = v16;
      }
      *(_DWORD *)(v17 + 20) = v19 + 1;
      *(_QWORD *)(v20 + 32) = v17;
      v21 = (_QWORD *)(**(_QWORD **)(a3 + 816) + v14);
      v23 = v21[1];
      *(_QWORD *)&v65 = *v21;
      v22 = v65;
      *((_QWORD *)&v65 + 1) = v23;
      PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable(a2, *(_DWORD *)(v16 + 16));
      v25 = *(_QWORD *)(a2 + 88);
      v26 = *(JSC::B3::Value **)(a2 + 56);
      v63 = v23;
      v64 = v22;
      if (*(_QWORD *)a2)
        v27 = *(_QWORD *)(*(_QWORD *)a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a2 + 14992) << 32);
      else
        v27 = 0;
      v28 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v28 + 8) = -1;
      *(_WORD *)(v28 + 12) = 9;
      *(_DWORD *)(v28 + 16) = 0;
      *(_BYTE *)(v28 + 20) = 1;
      *(_QWORD *)(v28 + 24) = v27;
      *(_QWORD *)(v28 + 32) = 0;
      *(_QWORD *)v28 = off_1E357F0F8;
      *(_QWORD *)(v28 + 40) = PushVariable;
      *(_QWORD *)(v28 + 48) = v16;
      JSC::B3::Procedure::addValueImpl(v26, (JSC::B3::Value *)v28);
      v66 = v28;
      v34 = (char **)(v25 + 8);
      v35 = *(unsigned int *)(v25 + 20);
      if ((_DWORD)v35 == *(_DWORD *)(v25 + 16))
      {
        v39 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, v35 + 1, (unint64_t)&v66);
        v35 = *(unsigned int *)(v25 + 20);
        *(_QWORD *)(*(_QWORD *)(v25 + 8) + 8 * v35) = *(_QWORD *)v39;
        v28 = v66;
      }
      else
      {
        *(_QWORD *)&(*v34)[8 * v35] = v28;
      }
      a1 = v62;
      *(_DWORD *)(v25 + 20) = v35 + 1;
      *(_QWORD *)(v28 + 32) = v25;
      v66 = (uint64_t)PushVariable;
      v36 = *(_DWORD *)(a3 + 12);
      if (v36 == *(_DWORD *)(a3 + 8))
      {
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::B3::Variable *>(a3, &v65, &v66, v29, v30, v31, v32, v33);
      }
      else
      {
        v37 = (_QWORD *)(*(_QWORD *)a3 + 24 * v36);
        *v37 = v64;
        v37[1] = v63;
        v37[2] = PushVariable;
        ++*(_DWORD *)(a3 + 12);
      }
      ++v15;
      v14 += 16;
      if (v15 >= *(unsigned int *)(*(_QWORD *)(a3 + 816) + 12))
        goto LABEL_5;
    }
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x198D983B8);
  }
LABEL_5:
  if (*(_DWORD *)(a3 + 808) == 3)
  {
    JSC::Wasm::OMGIRGenerator::addReturn(a1, (_QWORD *)a2, a3);
  }
  else
  {
    *a1 = 0;
    a1[8] = 0;
  }
}

char *JSC::Wasm::OMGIRGenerator::createTailCallPatchpoint(JSC::B3::BasicBlock *,JSC::Wasm::CallInformation,JSC::Wasm::CallInformation,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::$_0::operator()(char *result, uint64_t a2, int a3)
{
  int v3;
  unint64_t v4;
  char *v6;
  JSC::Wasm::OMGIRGenerator *v7;
  uint64_t v8;
  JSC::B3::Value *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  JSC::B3::Value *v25;
  char **v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  JSC::B3::Value *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unsigned int v34;
  int v35;
  BOOL v36;
  int v37;
  WTF *v38;

  v3 = *((_DWORD *)result + 4);
  v4 = (v3 + a3);
  if (__OFADD__(v3, a3))
  {
    __break(0xC471u);
  }
  else
  {
    v6 = result;
    v7 = *(JSC::Wasm::OMGIRGenerator **)result;
    if ((v4 & 0x80000000) != 0)
    {
      v14 = *(_QWORD *)(*((_QWORD *)v7 + 7) + 160);
      v15 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v15 = 8;
      *(_BYTE *)(v15 + 4) = 0;
      *(_DWORD *)(v15 + 8) = -1;
      *(_QWORD *)(v15 + 16) = 0;
      v38 = (WTF *)v15;
      v23 = JSC::B3::SparseCollection<JSC::B3::Air::Special>::add(v14 + 64, (uint64_t *)&v38);
      v24 = v38;
      v38 = 0;
      if (v24)
        WTF::fastFree((unint64_t)v24, v16, v17, v18, v19, v20, v21, v22);
      if (*(_BYTE *)(v14 + 196))
      {
        v34 = *(_DWORD *)v23;
        v35 = 4;
        if (*(_DWORD *)v23 > 4u)
          v35 = 8;
        v36 = v34 >= 2;
        if (v34 == 2)
          v37 = 2;
        else
          v37 = v35;
        if (!v36)
          v37 = 1;
        *(_DWORD *)(v14 + 184) = (((v37 + *(_DWORD *)(v14 + 184) + 7) & -v37) + 15) & 0xFFFFFFF0;
      }
      *(_QWORD *)(v23 + 16) = (int)v4;
      v8 = *((_QWORD *)v6 + 1);
      v25 = (JSC::B3::Value *)*((_QWORD *)v7 + 7);
      v12 = WTF::fastMalloc((WTF *)0x30);
      *(_DWORD *)(v12 + 8) = -1;
      *(_WORD *)(v12 + 12) = 11;
      *(_DWORD *)(v12 + 16) = 2;
      *(_BYTE *)(v12 + 20) = 0;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0;
      *(_QWORD *)v12 = &unk_1E357E8A8;
      *(_QWORD *)(v12 + 40) = v23;
      v13 = v25;
    }
    else
    {
      v8 = *((_QWORD *)result + 1);
      v9 = (JSC::B3::Value *)*((_QWORD *)v7 + 7);
      v10 = JSC::Wasm::OMGIRGenerator::framePointer(*(JSC::Wasm::OMGIRGenerator **)result);
      v11 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)v7, 2u, v4, 0, 0);
      v12 = JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(14, 0, v10, v11);
      v13 = v9;
    }
    JSC::B3::Procedure::addValueImpl(v13, (JSC::B3::Value *)v12);
    v38 = (WTF *)v12;
    v26 = (char **)(v8 + 8);
    v27 = *(unsigned int *)(v8 + 20);
    if ((_DWORD)v27 == *(_DWORD *)(v8 + 16))
    {
      v33 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26, v27 + 1, (unint64_t)&v38);
      v27 = *(unsigned int *)(v8 + 20);
      *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v27) = *(_QWORD *)v33;
      v28 = v38;
    }
    else
    {
      *(_QWORD *)&(*v26)[8 * v27] = v12;
      v28 = (WTF *)v12;
    }
    *(_DWORD *)(v8 + 20) = v27 + 1;
    *((_QWORD *)v28 + 4) = v8;
    v29 = *((_QWORD *)v6 + 1);
    v30 = (JSC::B3::Value *)*((_QWORD *)v7 + 7);
    v31 = WTF::fastMalloc((WTF *)0x50);
    *(_QWORD *)v31 = off_1E357F5F0;
    *(_DWORD *)(v31 + 8) = -1;
    *(_WORD *)(v31 + 12) = 70;
    *(_DWORD *)(v31 + 16) = 0;
    *(_BYTE *)(v31 + 20) = 2;
    *(_QWORD *)(v31 + 24) = 0;
    *(_QWORD *)(v31 + 32) = 0;
    JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v31, 2, a2, v12);
    *(_QWORD *)v31 = off_1E357E4C8;
    *(_DWORD *)(v31 + 40) = 0;
    *(_OWORD *)(v31 + 44) = xmmword_19914F690;
    JSC::B3::Procedure::addValueImpl(v30, (JSC::B3::Value *)v31);
    v38 = (WTF *)v31;
    result = (char *)(v29 + 8);
    v32 = *(unsigned int *)(v29 + 20);
    if ((_DWORD)v32 == *(_DWORD *)(v29 + 16))
    {
      result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v32 + 1, (unint64_t)&v38);
      v32 = *(unsigned int *)(v29 + 20);
      *(_QWORD *)(*(_QWORD *)(v29 + 8) + 8 * v32) = *(_QWORD *)result;
      v31 = (uint64_t)v38;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)result + 8 * v32) = v31;
    }
    *(_DWORD *)(v29 + 20) = v32 + 1;
    *(_QWORD *)(v31 + 32) = v29;
  }
  return result;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parse(JSC::Wasm *a1, uint64_t a2, double a3, float a4)
{
  unint64_t v4;
  uint64_t v5;
  JSC::Wasm *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 **v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  _DWORD *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  JSC::B3::Value *v51;
  uint64_t v52;
  char **v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  char *v57;
  WTF *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  BOOL v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  JSC::B3::Procedure *v89;
  int v90;
  uint64_t *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  WTF *v108;
  int v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  WTF *v113;
  __int128 v114;
  WTF *v115;
  WTF *v116;
  JSC::Wasm::WasmOpcodeCounter *v117;
  _BYTE *v118;
  unint64_t v119;
  unint64_t v120;
  WTF::AtomStringImpl *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  int v130;
  double v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  unint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  const void *v141;
  void *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  const void *v152;
  void *v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _DWORD *v161;
  int v162;
  _DWORD *v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _DWORD *v171;
  void *v172;
  uint64_t v173;
  JSC::B3::Value *v174;
  unsigned int v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  _DWORD *v186;
  char **v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  __int128 *v191;
  _DWORD *v192;
  int v193;
  _DWORD *v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _DWORD *v202;
  void *v203;
  char v204;
  unint64_t v205;
  uint64_t v206;
  JSC::B3::Value *v207;
  unsigned int v208;
  uint64_t v209;
  _DWORD *v210;
  char **v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  char *v215;
  unint64_t *v216;
  uint64_t v217;
  uint64_t *v218;
  unsigned __int8 **v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unsigned int v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  JSC::B3::Value *v234;
  uint64_t v235;
  WTF *v236;
  int v237;
  char **v238;
  uint64_t v239;
  WTF *v240;
  uint64_t v241;
  JSC::B3::Value *v242;
  uint64_t v243;
  JSC::B3::Value *v244;
  int v245;
  char **v246;
  uint64_t v247;
  WTF *v248;
  _DWORD *v249;
  int v250;
  WTF *v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _DWORD *v259;
  WTF *v260;
  JSC::B3::Value *v261;
  uint64_t v262;
  char **v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  char *v267;
  char *v268;
  WTF::AtomStringImpl *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  WTF *v276;
  WTF *v277;
  const void *v278;
  uint64_t v279;
  const void **v280;
  void *v281;
  void *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  const void *v291;
  const void *v292;
  uint64_t v293;
  float v294;
  void *v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  _BYTE *v304;
  __int128 v305;
  uint64_t v306;
  _BYTE *v307;
  __int128 v308;
  uint64_t v309;
  JSC::B3::Value *v310;
  uint64_t v311;
  uint64_t v312;
  JSC::B3::Value *v313;
  uint64_t v314;
  uint64_t v315;
  unsigned int v316;
  uint64_t v317;
  JSC::B3::Value *v318;
  uint64_t v319;
  const void *v320;
  const void **v321;
  void *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  BOOL v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unsigned int v336;
  WTF::AtomStringImpl *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  float v344;
  void **v345;
  void *v346;
  uint64_t v347;
  void *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  const void *v355;
  void *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  void *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  void *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unsigned int *v378;
  unsigned int v379;
  unsigned int v380;
  unint64_t v381;
  int v382;
  int v383;
  char *v384;
  unint64_t *v385;
  uint64_t v386;
  const void **v387;
  unint64_t v388;
  int v389;
  char *v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  JSC::Wasm *v394;
  uint64_t *v395;
  void (**v396)(JSC::B3::VariableValue *__hidden);
  unint64_t v397;
  WTF *v398;
  WTF *v399;
  char v400;
  char v401;
  void *__dst[2];
  _BYTE v403[16];
  WTF *v404;
  int v405;
  unsigned int v406;
  WTF *v407;
  int v408;
  uint64_t v409;
  WTF *v410;
  uint64_t v411;
  _BYTE v412[384];
  int v413;
  _OWORD v414[2];
  uint64_t v415;
  WTF *v416;
  int v417;
  int v418;
  __int128 v419;
  uint64_t v420;

  v7 = a1;
  v8 = *(_QWORD *)(a2 + 14952);
  if (*(_DWORD *)(v8 + 32))
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("type signature was not a function signature", (unint64_t *)a2, 44, __dst, a4);
LABEL_282:
    *(void **)v7 = __dst[0];
    *((_BYTE *)v7 + 8) = 1;
    return;
  }
  v394 = a1;
  v9 = v8 + 8;
  v10 = *(unsigned int *)(v8 + 16);
  v11 = *(_QWORD *)(a2 + 48);
  if (*(_DWORD *)(v11 + 184) >= v10)
    goto LABEL_9;
  if (v10 >> 29)
  {
LABEL_278:
    v7 = v394;
    JSC::Wasm::OMGIRGenerator::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))__dst, *(_DWORD *)(v9 + 8), a3, a4);
    if (__dst[0])
    {
      if (*(_DWORD *)__dst[0] == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)__dst[0], v337, v338, v339, v340, v341, v342, v343);
        WTF::fastFree(v363, v364, v365, v366, v367, v368, v369, v370);
      }
      else
      {
        *(_DWORD *)__dst[0] -= 2;
      }
    }
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>("can't add ", (unint64_t *)a2, 11, *(_DWORD *)(v8 + 16), " arguments to Function", 23, __dst, v344);
    goto LABEL_282;
  }
  v12 = *(const void **)(v11 + 176);
  v13 = *(unsigned int *)(v11 + 188);
  WTF::tryFastMalloc((WTF *)(8 * v10), __dst);
  v14 = __dst[0];
  if (!__dst[0])
  {
    if (*(_DWORD *)(v8 + 32))
      v9 = 0;
    goto LABEL_278;
  }
  *(_DWORD *)(v11 + 184) = v10;
  *(_QWORD *)(v11 + 176) = v14;
  a1 = (JSC::Wasm *)memcpy(v14, v12, 8 * v13);
  if (v12)
  {
    if (*(const void **)(v11 + 176) == v12)
    {
      *(_QWORD *)(v11 + 176) = 0;
      *(_DWORD *)(v11 + 184) = 0;
    }
    WTF::fastFree((unint64_t)v12, v15, v16, v17, v18, v19, v20, v21);
  }
LABEL_9:
  if (*(_DWORD *)(v8 + 32))
    v22 = 0;
  else
    v22 = v8 + 8;
  v23 = *(unsigned int *)(v22 + 8);
  if (*(_DWORD *)(v11 + 184) < v23)
    a1 = (JSC::Wasm *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11 + 176, v23);
  *(_DWORD *)(v11 + 188) = v23;
  if (!*(_QWORD *)(v11 + 112))
  {
    v218 = JSC::Wasm::wasmCallingConvention(a1);
    if (*(_DWORD *)(v8 + 32))
      v219 = 0;
    else
      v219 = (unsigned __int8 **)(v8 + 8);
    v5 = 1;
    JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)v218, v219, 1, (char *)__dst);
    if (*(_DWORD *)(v8 + 32))
      v227 = 0;
    else
      v227 = v8 + 8;
    v228 = v8;
    if (!*(_DWORD *)(v227 + 8))
    {
LABEL_197:
      JSC::Wasm::CallInformation::~CallInformation((JSC::Wasm::CallInformation *)__dst, v220, v221, v222, v223, v224, v225, v226);
      v8 = v228;
      goto LABEL_45;
    }
    v23 = 0;
    v229 = 0;
    v396 = off_1E357F0F8;
    v393 = v228;
    while (1)
    {
      v230 = JSC::Wasm::toB3Type(*(_QWORD *)(*(_QWORD *)(v228 + 8) + 16
                                                                   * (v229 + *(_DWORD *)(v228 + 20))));
      if (v229 >= v406)
      {
        __break(0xC471u);
        JUMPOUT(0x198D99E94);
      }
      v231 = v230;
      v232 = *(_QWORD *)((char *)v404 + v23);
      v398 = (WTF *)v23;
      if (*((_BYTE *)v404 + v23 + 8))
      {
        if (*((_BYTE *)v404 + v23 + 8) != 1)
        {
          v309 = *(_QWORD *)(v11 + 88);
          v310 = *(JSC::B3::Value **)(v11 + 56);
          v311 = JSC::Wasm::OMGIRGenerator::framePointer((JSC::Wasm::OMGIRGenerator *)v11);
          v312 = JSC::B3::BasicBlock::appendNew<JSC::B3::Const64Value,JSC::B3::Origin,long>(*(_QWORD *)(v11 + 88), *(JSC::B3::Value **)(v11 + 56), v232);
          v313 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Const64Value *>(v309, v310, 0, v311, v312);
          v314 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *>(*(_QWORD *)(v11 + 88), *(JSC::B3::Procedure **)(v11 + 56), v231, 0, (uint64_t)v313);
LABEL_237:
          v244 = (JSC::B3::Value *)v314;
          goto LABEL_184;
        }
        if (v230 >= 0x80000000)
          v316 = 0x80000000;
        else
          v316 = v230;
        v317 = *(_QWORD *)(v11 + 88);
        v318 = *(JSC::B3::Value **)(v11 + 56);
        if (v316 == 5)
          v319 = JSC::B3::BasicBlock::appendNew<JSC::B3::ArgumentRegValue,JSC::B3::Origin,JSC::ARM64Registers::FPRegisterID,JSC::B3::ArgumentRegValue::VectorTag>(v317, v318, v232);
        else
          v319 = JSC::B3::BasicBlock::appendNew<JSC::B3::ArgumentRegValue,JSC::B3::Origin,JSC::ARM64Registers::FPRegisterID>(v317, v318, v232);
        v244 = (JSC::B3::Value *)v319;
        if (v231 == 3)
        {
          v314 = (uint64_t)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(*(_QWORD *)(v11 + 88), *(JSC::B3::Value **)(v11 + 56), 44, 0, v319);
          goto LABEL_237;
        }
      }
      else
      {
        v233 = *(_QWORD *)(v11 + 88);
        v234 = *(JSC::B3::Value **)(v11 + 56);
        v235 = WTF::fastMalloc((WTF *)0x30);
        v236 = (WTF *)v235;
        *(_DWORD *)(v235 + 8) = -1;
        if ((v232 & 0x60) != 0)
          v237 = 4;
        else
          v237 = 2;
        *(_WORD *)(v235 + 12) = 12;
        *(_DWORD *)(v235 + 16) = v237;
        *(_BYTE *)(v235 + 20) = 0;
        *(_QWORD *)(v235 + 24) = 0;
        *(_QWORD *)(v235 + 32) = 0;
        *(_QWORD *)v235 = &unk_1E357D2C8;
        *(_BYTE *)(v235 + 40) = v232 & 0x7F;
        JSC::B3::Procedure::addValueImpl(v234, (JSC::B3::Value *)v235);
        v399 = v236;
        v238 = (char **)(v233 + 8);
        v239 = *(unsigned int *)(v233 + 20);
        if ((_DWORD)v239 == *(_DWORD *)(v233 + 16))
        {
          v267 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v238, v239 + 1, (unint64_t)&v399);
          v239 = *(unsigned int *)(v233 + 20);
          *(_QWORD *)(*(_QWORD *)(v233 + 8) + 8 * v239) = *(_QWORD *)v267;
          v240 = v399;
        }
        else
        {
          *(_QWORD *)&(*v238)[8 * v239] = v236;
          v240 = v236;
        }
        v5 = 1;
        *(_DWORD *)(v233 + 20) = v239 + 1;
        *((_QWORD *)v240 + 4) = v233;
        if (v231 == 1)
        {
          v241 = *(_QWORD *)(v11 + 88);
          v242 = *(JSC::B3::Value **)(v11 + 56);
          v243 = WTF::fastMalloc((WTF *)0x30);
          v244 = (JSC::B3::Value *)v243;
          *(_QWORD *)v243 = off_1E357F5F0;
          *(_DWORD *)(v243 + 8) = -1;
          *(_WORD *)(v243 + 12) = 44;
          if (*((_DWORD *)v236 + 4) == 2)
            v245 = 1;
          else
            v245 = 3;
          *(_DWORD *)(v243 + 16) = v245;
          *(_BYTE *)(v243 + 20) = 1;
          *(_QWORD *)(v243 + 24) = 0;
          *(_QWORD *)(v243 + 32) = 0;
          JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v243, 1, (uint64_t)v236);
          JSC::B3::Procedure::addValueImpl(v242, v244);
          v399 = v244;
          v246 = (char **)(v241 + 8);
          v247 = *(unsigned int *)(v241 + 20);
          if ((_DWORD)v247 == *(_DWORD *)(v241 + 16))
          {
            v268 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v246, v247 + 1, (unint64_t)&v399);
            v247 = *(unsigned int *)(v241 + 20);
            *(_QWORD *)(*(_QWORD *)(v241 + 8) + 8 * v247) = *(_QWORD *)v268;
            v248 = v399;
          }
          else
          {
            *(_QWORD *)&(*v246)[8 * v247] = v244;
            v248 = v244;
          }
          *(_DWORD *)(v241 + 20) = v247 + 1;
          *((_QWORD *)v248 + 4) = v241;
        }
        else
        {
          v244 = v236;
        }
      }
LABEL_184:
      v249 = *(_DWORD **)(v11 + 56);
      v250 = *((_DWORD *)v244 + 4);
      v251 = (WTF *)WTF::fastMalloc((WTF *)8);
      *((_DWORD *)v251 + 1) = v250;
      v399 = v251;
      v259 = JSC::B3::SparseCollection<JSC::B3::Variable>::add(v249, &v399);
      v260 = v399;
      v399 = 0;
      if (v260)
        WTF::fastFree((unint64_t)v260, v252, v253, v254, v255, v256, v257, v258);
      if (v229 >= *(unsigned int *)(v11 + 188))
        goto LABEL_342;
      *(_QWORD *)(*(_QWORD *)(v11 + 176) + 8 * v229) = v259;
      v4 = *(_QWORD *)(v11 + 88);
      v261 = *(JSC::B3::Value **)(v11 + 56);
      v262 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v262 + 8) = -1;
      *(_WORD *)(v262 + 12) = 9;
      *(_DWORD *)(v262 + 16) = 0;
      *(_BYTE *)(v262 + 20) = 1;
      *(_QWORD *)(v262 + 24) = 0;
      *(_QWORD *)(v262 + 32) = 0;
      *(_QWORD *)v262 = off_1E357F0F8;
      *(_QWORD *)(v262 + 40) = v259;
      *(_QWORD *)(v262 + 48) = v244;
      JSC::B3::Procedure::addValueImpl(v261, (JSC::B3::Value *)v262);
      v399 = (WTF *)v262;
      v263 = (char **)(v4 + 8);
      v264 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v264 == *(_DWORD *)(v4 + 16))
      {
        v266 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v263, v264 + 1, (unint64_t)&v399);
        v264 = *(unsigned int *)(v4 + 20);
        *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v264) = *(_QWORD *)v266;
        v262 = (uint64_t)v399;
      }
      else
      {
        *(_QWORD *)&(*v263)[8 * v264] = v262;
      }
      *(_DWORD *)(v4 + 20) = v264 + 1;
      *(_QWORD *)(v262 + 32) = v4;
      ++v229;
      v228 = v393;
      if (*(_DWORD *)(v393 + 32))
        v265 = 0;
      else
        v265 = v9;
      v23 = (unint64_t)v398 + 24;
      if (v229 >= *(unsigned int *)(v265 + 8))
        goto LABEL_197;
    }
  }
  if (*(_DWORD *)(v8 + 32))
    v24 = 0;
  else
    v24 = v8 + 8;
  if (*(_DWORD *)(v11 + 132) != *(_DWORD *)(v24 + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x198D99B44);
  }
  v25 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v25 != -1)
  {
    __dst[0] = &v401;
    v399 = (WTF *)__dst;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v399, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (*(_DWORD *)(v8 + 32))
    v26 = 0;
  else
    v26 = (unsigned __int8 **)(v8 + 8);
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v26, 1, (char *)__dst);
  if (*(_DWORD *)(v8 + 32))
    v35 = 0;
  else
    v35 = v8 + 8;
  if (*(_DWORD *)(v35 + 8))
  {
    v4 = 0;
    while (1)
    {
      v5 = v9;
      v36 = v8;
      v37 = JSC::Wasm::toB3Type(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 16 * (v4 + *(_DWORD *)(v8 + 20))));
      if (v4 >= *(unsigned int *)(v11 + 132))
      {
        __break(0xC471u);
        JUMPOUT(0x198D99E7CLL);
      }
      v38 = v37;
      v39 = *(_QWORD *)(*(_QWORD *)(v11 + 120) + 8 * v4);
      if (*(_DWORD *)(v39 + 16) != v37)
        break;
      v40 = *(_DWORD **)(v11 + 56);
      v41 = (WTF *)WTF::fastMalloc((WTF *)8);
      *((_DWORD *)v41 + 1) = v38;
      v399 = v41;
      v23 = (unint64_t)JSC::B3::SparseCollection<JSC::B3::Variable>::add(v40, &v399);
      v49 = v399;
      v399 = 0;
      if (v49)
        WTF::fastFree((unint64_t)v49, v42, v43, v44, v45, v46, v47, v48);
      if (v4 >= *(unsigned int *)(v11 + 188))
      {
        __break(0xC471u);
        JUMPOUT(0x198D99E84);
      }
      *(_QWORD *)(*(_QWORD *)(v11 + 176) + 8 * v4) = v23;
      v50 = *(_QWORD *)(v11 + 88);
      v51 = *(JSC::B3::Value **)(v11 + 56);
      v52 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v52 + 8) = -1;
      *(_WORD *)(v52 + 12) = 9;
      *(_DWORD *)(v52 + 16) = 0;
      *(_BYTE *)(v52 + 20) = 1;
      *(_QWORD *)(v52 + 24) = 0;
      *(_QWORD *)(v52 + 32) = 0;
      *(_QWORD *)v52 = off_1E357F0F8;
      *(_QWORD *)(v52 + 40) = v23;
      *(_QWORD *)(v52 + 48) = v39;
      JSC::B3::Procedure::addValueImpl(v51, (JSC::B3::Value *)v52);
      v399 = (WTF *)v52;
      v53 = (char **)(v50 + 8);
      v54 = *(unsigned int *)(v50 + 20);
      if ((_DWORD)v54 == *(_DWORD *)(v50 + 16))
      {
        v57 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53, v54 + 1, (unint64_t)&v399);
        v54 = *(unsigned int *)(v50 + 20);
        *(_QWORD *)(*(_QWORD *)(v50 + 8) + 8 * v54) = *(_QWORD *)v57;
        v52 = (uint64_t)v399;
      }
      else
      {
        *(_QWORD *)&(*v53)[8 * v54] = v52;
      }
      v8 = v36;
      *(_DWORD *)(v50 + 20) = v54 + 1;
      *(_QWORD *)(v52 + 32) = v50;
      ++v4;
      v55 = *(_DWORD *)(v36 + 32);
      v9 = v5;
      if (v55)
        v56 = 0;
      else
        v56 = v5;
      if (v4 >= *(unsigned int *)(v56 + 8))
        goto LABEL_42;
    }
LABEL_342:
    __break(0xC471u);
    JUMPOUT(0x198D99964);
  }
LABEL_42:
  v58 = v407;
  if (&v409 != (uint64_t *)v407 && v407)
  {
    v407 = 0;
    v408 = 0;
    WTF::fastFree((unint64_t)v58, v27, v28, v29, v30, v31, v32, v33);
  }
  v59 = (unint64_t)v404;
  if (v404)
  {
    v404 = 0;
    v405 = 0;
    WTF::fastFree(v59, v27, v28, v29, v30, v31, v32, v33);
  }
LABEL_45:
  v60 = *(_QWORD *)(a2 + 16);
  v61 = *(_QWORD *)a2;
  v62 = v60 > *(_QWORD *)a2;
  v63 = v60 - *(_QWORD *)a2;
  if (!v62)
    goto LABEL_332;
  v64 = 0;
  LODWORD(v65) = 0;
  v66 = 0;
  v67 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = v61 + 1;
  v68 = v67 + v61;
  v69 = v61 + 2;
  v70 = 5;
  while (1)
  {
    v71 = *(char *)(v68 + v64);
    v66 |= (v71 & 0x7F) << v65;
    if ((v71 & 0x80000000) == 0)
      break;
    if (v63 >= 5)
      v289 = 5;
    else
      v289 = v63;
    if (v289 - 1 == v64)
      goto LABEL_332;
    v123 = v69 + v64;
    v124 = v64 + 1;
    *(_QWORD *)a2 = v69 + v64;
    v65 = (v65 + 7);
    v64 = v124;
    if (v63 == v124)
      goto LABEL_214;
  }
  if ((_DWORD)v64 == 4 && *(unsigned __int8 *)(v68 + v64) >= 0x10u)
  {
LABEL_332:
    v384 = "can't get local groups count";
    v385 = (unint64_t *)a2;
    v386 = 29;
LABEL_333:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v384, v385, v386, __dst, v34);
    goto LABEL_160;
  }
  v72 = a2 + 14680;
  v73 = *(unsigned int *)(v8 + 16);
  v74 = *(_DWORD *)(a2 + 14688);
  if (v74 < v73)
  {
    v278 = *(const void **)(a2 + 14680);
    v279 = *(unsigned int *)(a2 + 14692);
    if (v73 >= 0x11)
    {
      if (!(v73 >> 28))
      {
        v280 = (const void **)(a2 + 14680);
        WTF::tryFastMalloc((WTF *)(16 * v73), __dst);
        v281 = __dst[0];
        if (__dst[0])
        {
          *(_DWORD *)(a2 + 14688) = v73;
          *(_QWORD *)(a2 + 14680) = v281;
          goto LABEL_206;
        }
        LODWORD(v73) = *(_DWORD *)(v8 + 16);
      }
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>("can't allocate enough memory for function's ", (unint64_t *)a2, 45, v73, " arguments", 11, __dst, v34);
      goto LABEL_160;
    }
    v280 = (const void **)(a2 + 14680);
    v281 = (void *)(a2 + 14696);
    *(_QWORD *)(a2 + 14680) = a2 + 14696;
    *(_DWORD *)(a2 + 14688) = 16;
LABEL_206:
    memcpy(v281, v278, 16 * v279);
    if ((const void *)(a2 + 14696) != v278 && v278)
    {
      if (*v280 == v278)
      {
        *(_QWORD *)(a2 + 14680) = 0;
        *(_DWORD *)(a2 + 14688) = 0;
      }
      WTF::fastFree((unint64_t)v278, v282, v283, v284, v285, v286, v287, v288);
    }
    v73 = *(unsigned int *)(v8 + 16);
    v74 = *(_DWORD *)(a2 + 14688);
    v72 = (uint64_t)v280;
  }
  v75 = *(unsigned int *)(a2 + 14692);
  if (v73 + v75 > (unint64_t)v74)
  {
    v320 = *(const void **)(a2 + 14680);
    v321 = (const void **)v72;
    WTF::VectorBuffer<JSC::Wasm::Type,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(v72, v73 + v75);
    memcpy(*(void **)(a2 + 14680), v320, 16 * v75);
    v72 = (uint64_t)v321;
    if ((const void *)(a2 + 14696) != v320)
    {
      if (v320)
      {
        if (*v321 == v320)
        {
          *(_QWORD *)(a2 + 14680) = 0;
          *(_DWORD *)(a2 + 14688) = 0;
        }
        WTF::fastFree((unint64_t)v320, v322, v323, v324, v325, v326, v327, v328);
        v72 = (uint64_t)v321;
      }
    }
  }
  if ((_DWORD)v73)
  {
    v76 = 0;
    v77 = *(_DWORD *)(a2 + 14692);
    do
    {
      *(_OWORD *)(*(_QWORD *)(a2 + 14680) + 16 * v77) = *(_OWORD *)(*(_QWORD *)(v8 + 8)
                                                                    + 16 * (v76 + *(_DWORD *)(v8 + 20)));
      v77 = *(_DWORD *)(a2 + 14692) + 1;
      *(_DWORD *)(a2 + 14692) = v77;
      ++v76;
    }
    while (v73 != v76);
  }
  v4 = *(unsigned int *)(v8 + 16);
  v5 = (uint64_t)g_config;
  if (v66)
  {
    v387 = (const void **)v72;
    v27 = 0;
    LODWORD(v29) = 0;
    v59 = 50001;
    v396 = off_1E357F0F8;
    while (1)
    {
      v64 = *(_QWORD *)(a2 + 16);
      v63 = *(_QWORD *)a2;
      v69 = v64 - *(_QWORD *)a2;
      if (v64 <= *(_QWORD *)a2)
        goto LABEL_336;
      v68 = 0;
      v70 = 0;
      LODWORD(v23) = 0;
      v65 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v63 + 1;
      v123 = v65 + v63;
      v124 = v63 - v64;
LABEL_97:
      v125 = *(char *)(v123 + v68);
      v23 = ((v125 & 0x7F) << v70) | v23;
      if (v125 < 0)
      {
        while (1)
        {
          v290 = 5;
          if (v69 < 5)
            v290 = v69;
          if (v290 - 1 == v68)
            break;
          *(_QWORD *)a2 = v63 + v68++ + 2;
          v70 += 7;
          if (v124 + v68)
            goto LABEL_97;
LABEL_214:
          __break(1u);
        }
LABEL_336:
        v215 = "can't get Function's number of locals in group ";
        v216 = (unint64_t *)a2;
        v217 = 48;
LABEL_159:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int>(v215, v216, v217, v29, __dst, v34);
LABEL_160:
        *(void **)v394 = __dst[0];
        *((_BYTE *)v394 + 8) = 1;
        return;
      }
      if ((_DWORD)v68 == 4 && *(unsigned __int8 *)(v123 + v68) >= 0x10u)
        goto LABEL_336;
      v126 = v4 + v23;
      if (v126 >= v59)
      {
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long>("Function's number of locals is too big ", (unint64_t *)a2, 40, v126, " maximum ", 10, 50000, __dst, v34);
        goto LABEL_160;
      }
      v391 = v29;
      v390 = v27;
      if (v63 + v68 + 1 >= v64)
        goto LABEL_158;
      v127 = *(_QWORD *)(a2 + 14960);
      v128 = v63 + v68;
      *(_QWORD *)a2 = v128 + 2;
      v129 = *(char *)(v128 + v65 + 1);
      if ((v129 & 0x80000000) != 0)
        goto LABEL_158;
      v130 = v129 | (v129 >> 6 << 7);
      if (!JSC::Wasm::isValidTypeKind<signed char>((char)(v129 | ((v129 >> 6) << 7))))
        goto LABEL_158;
      if (!*(_BYTE *)(v5 + 0x7B1))
        break;
      v132 = (char)v130 + 22;
      if (v132 <= 9)
      {
        v397 = (char)v130;
        if (((1 << v132) & 0x39F) == 0 || *(_BYTE *)(v5 + 0x7B2))
        {
          v133 = 227;
          goto LABEL_260;
        }
      }
      if ((v130 + 29) >= 2u)
        goto LABEL_106;
      LODWORD(__dst[0]) = 0;
      if (!WTF::LEBDecoder::decodeInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, (int *)__dst))
        goto LABEL_158;
      if (((uint64_t)__dst[0] & 0x80000000) != 0)
      {
        v397 = SLODWORD(__dst[0]);
        if ((unint64_t)(SLODWORD(__dst[0]) + 22) > 9
          || ((1 << (LOBYTE(__dst[0]) + 22)) & 0x39F) != 0 && !*(_BYTE *)(v5 + 0x7B2))
        {
          goto LABEL_158;
        }
        goto LABEL_107;
      }
      if (LODWORD(__dst[0]) >= *(_DWORD *)(v127 + 100))
      {
        if (!*(_BYTE *)(a2 + 32))
          goto LABEL_158;
        v336 = *(_DWORD *)(a2 + 36);
        if (LODWORD(__dst[0]) < v336 || LODWORD(__dst[0]) >= *(_DWORD *)(a2 + 40))
          goto LABEL_158;
LABEL_308:
        JSC::Wasm::TypeInformation::getPlaceholderProjection((JSC::Wasm::TypeInformation *)(LODWORD(__dst[0]) - v336), v331, v332, v333, v334, v335, (unsigned int **)__dst);
        v378 = (unsigned int *)__dst[0];
        __dst[0] = 0;
        v397 = (unint64_t)v378;
        if (v378)
        {
          do
          {
            v379 = __ldaxr((unsigned int *)v397);
            v380 = v379 - 1;
          }
          while (__stlxr(v380, (unsigned int *)v397));
          if (!v380)
          {
            v381 = v397;
            atomic_store(1u, (unsigned int *)v397);
            WTF::fastFree(v381, v371, v372, v373, v374, v375, v376, v377);
          }
        }
        goto LABEL_107;
      }
      if (*(_BYTE *)(a2 + 32))
      {
        v336 = *(_DWORD *)(a2 + 36);
        if (LODWORD(__dst[0]) >= v336)
          goto LABEL_308;
      }
      v397 = *(_QWORD *)(*(_QWORD *)(v127 + 88) + 8 * LODWORD(__dst[0]));
LABEL_107:
      v133 = v130;
      if (v130 - 252 < 4)
        goto LABEL_108;
      if (v130 - 239 < 2)
      {
        if (*(_BYTE *)(v5 + 0x7B1))
          goto LABEL_158;
        goto LABEL_108;
      }
      if (v130 == 251)
      {
        if (!*(_BYTE *)(v5 + 0x7B3))
          goto LABEL_158;
        v133 = 251;
        goto LABEL_108;
      }
      if (v130 - 227 > 1)
        goto LABEL_158;
LABEL_260:
      if (*(_BYTE *)(v5 + 0x7B1))
        v329 = v397 == 0;
      else
        v329 = 1;
      if (v329)
      {
LABEL_158:
        v215 = "can't get Function local's type in group ";
        v216 = (unint64_t *)a2;
        v217 = 42;
        LODWORD(v29) = v391;
        goto LABEL_159;
      }
      v330 = v390;
      if (v133 == 228)
        v330 = v390 + 1;
      v390 = v330;
      if (v133 == 228)
        v133 = 228;
      else
        v133 = 227;
LABEL_108:
      if (v126 > *(unsigned int *)(a2 + 14688))
      {
        v291 = (const void *)(a2 + 14696);
        v292 = *(const void **)(a2 + 14680);
        v293 = *(unsigned int *)(a2 + 14692);
        if (v126 < 0x11)
        {
          *(_QWORD *)(a2 + 14680) = v291;
          *(_DWORD *)(a2 + 14688) = 16;
          v295 = (void *)(a2 + 14696);
        }
        else
        {
          WTF::tryFastMalloc((WTF *)(16 * v126), __dst);
          v295 = __dst[0];
          if (!__dst[0])
          {
            JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral>("can't allocate enough memory for function's ", (unint64_t *)a2, 45, v126, " locals", 8, __dst, v294);
            goto LABEL_160;
          }
          *(_DWORD *)(a2 + 14688) = v126;
          *(_QWORD *)(a2 + 14680) = v295;
        }
        memcpy(v295, v292, 16 * v293);
        if (v291 != v292 && v292)
        {
          if (*v387 == v292)
          {
            *(_QWORD *)(a2 + 14680) = 0;
            *(_DWORD *)(a2 + 14688) = 0;
          }
          WTF::fastFree((unint64_t)v292, v296, v297, v298, v299, v300, v301, v302);
        }
      }
      v134 = *(unsigned int *)(a2 + 14692);
      if (v134 + v23 > *(unsigned int *)(a2 + 14688))
      {
        v355 = *(const void **)(a2 + 14680);
        WTF::VectorBuffer<JSC::Wasm::Type,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>((uint64_t)v387, v134 + v23);
        memcpy(*(void **)(a2 + 14680), v355, 16 * v134);
        if ((const void *)(a2 + 14696) != v355)
        {
          if (v355)
          {
            if (*v387 == v355)
            {
              *(_QWORD *)(a2 + 14680) = 0;
              *(_DWORD *)(a2 + 14688) = 0;
            }
            WTF::fastFree((unint64_t)v355, v356, v357, v358, v359, v360, v361, v362);
          }
        }
      }
      v388 = v126;
      v389 = v66;
      if ((_DWORD)v23)
      {
        v135 = *(_DWORD *)(a2 + 14692);
        v136 = v23;
        do
        {
          v137 = (uint64_t *)(*(_QWORD *)(a2 + 14680) + 16 * v135);
          *v137 = v133;
          v137[1] = v397;
          v135 = *(_DWORD *)(a2 + 14692) + 1;
          *(_DWORD *)(a2 + 14692) = v135;
          --v136;
        }
        while (v136);
      }
      v138 = *(_QWORD *)(a2 + 48);
      v139 = *(unsigned int *)(v138 + 188);
      v140 = v139 + v23;
      if (v139 + v23 > *(unsigned int *)(v138 + 184))
      {
        if (v140 >> 29
          || (v141 = *(const void **)(v138 + 176), WTF::tryFastMalloc((WTF *)(8 * v140), __dst),
                                                   (v142 = __dst[0]) == 0))
        {
          JSC::Wasm::OMGIRGenerator::fail<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))__dst, v139 + v23, v131, v34);
          goto LABEL_160;
        }
        *(_DWORD *)(v138 + 184) = v140;
        *(_QWORD *)(v138 + 176) = v142;
        memcpy(v142, v141, 8 * v139);
        if (v141)
        {
          if (*(const void **)(v138 + 176) == v141)
          {
            *(_QWORD *)(v138 + 176) = 0;
            *(_DWORD *)(v138 + 184) = 0;
          }
          WTF::fastFree((unint64_t)v141, v143, v144, v145, v146, v147, v148, v149);
        }
      }
      v150 = *(unsigned int *)(v138 + 188);
      v151 = v150 + v23;
      if (v150 + v23 > *(unsigned int *)(v138 + 184))
      {
        if (v151 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x198D99E8CLL);
        }
        v152 = *(const void **)(v138 + 176);
        v153 = (void *)WTF::fastMalloc((WTF *)(8 * v151));
        *(_DWORD *)(v138 + 184) = v151;
        *(_QWORD *)(v138 + 176) = v153;
        memcpy(v153, v152, 8 * v150);
        if (v152)
        {
          if (*(const void **)(v138 + 176) == v152)
          {
            *(_QWORD *)(v138 + 176) = 0;
            *(_DWORD *)(v138 + 184) = 0;
          }
          WTF::fastFree((unint64_t)v152, v154, v155, v156, v157, v158, v159, v160);
        }
      }
      v392 = v8;
      if ((_DWORD)v23)
      {
        if (v133 == 251)
        {
          v395 = (uint64_t *)(v138 + 248);
          do
          {
            v161 = *(_DWORD **)(v138 + 56);
            v162 = JSC::Wasm::toB3Type(v133);
            v163 = (_DWORD *)WTF::fastMalloc((WTF *)8);
            v163[1] = v162;
            __dst[0] = v163;
            v171 = JSC::B3::SparseCollection<JSC::B3::Variable>::add(v161, __dst);
            v172 = __dst[0];
            __dst[0] = 0;
            if (v172)
              WTF::fastFree((unint64_t)v172, v164, v165, v166, v167, v168, v169, v170);
            v173 = *(_QWORD *)(v138 + 88);
            v174 = *(JSC::B3::Value **)(v138 + 56);
            v175 = JSC::Wasm::toB3Type(v133);
            if (v175 >= 0x80000000)
              v176 = 0x80000000;
            else
              v176 = v175;
            if (v176 != 5)
            {
              __break(0xC471u);
              JUMPOUT(0x198D99E38);
            }
            v182 = (void *)JSC::B3::Procedure::add<JSC::B3::Const128Value,JSC::B3::Origin,JSC::v128_u>(*(_QWORD *)(v138 + 56), 0, 0, 0);
            __dst[0] = 0;
            __dst[1] = v182;
            v183 = *(unsigned int *)(v138 + 260);
            if ((_DWORD)v183 == *(_DWORD *)(v138 + 256))
            {
              v191 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v395, (void *)(v183 + 1), (unint64_t)__dst, v177, v178, v179, v180, v181);
              v183 = *(unsigned int *)(v138 + 260);
              v184 = *(_QWORD *)(v138 + 248);
              v185 = *v191;
            }
            else
            {
              v184 = *v395;
              v185 = *(_OWORD *)__dst;
            }
            *(_OWORD *)(v184 + 16 * v183) = v185;
            ++*(_DWORD *)(v138 + 260);
            v186 = (_DWORD *)WTF::fastMalloc((WTF *)0x38);
            v186[2] = -1;
            *((_WORD *)v186 + 6) = 9;
            v186[4] = 0;
            *((_BYTE *)v186 + 20) = 1;
            *((_QWORD *)v186 + 3) = 0;
            *((_QWORD *)v186 + 4) = 0;
            *(_QWORD *)v186 = v396;
            *((_QWORD *)v186 + 5) = v171;
            *((_QWORD *)v186 + 6) = v182;
            JSC::B3::Procedure::addValueImpl(v174, (JSC::B3::Value *)v186);
            __dst[0] = v186;
            v187 = (char **)(v173 + 8);
            v188 = *(unsigned int *)(v173 + 20);
            if ((_DWORD)v188 == *(_DWORD *)(v173 + 16))
            {
              v190 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v187, v188 + 1, (unint64_t)__dst);
              v188 = *(unsigned int *)(v173 + 20);
              *(_QWORD *)(*(_QWORD *)(v173 + 8) + 8 * v188) = *(_QWORD *)v190;
              v186 = __dst[0];
            }
            else
            {
              *(_QWORD *)&(*v187)[8 * v188] = v186;
            }
            *(_DWORD *)(v173 + 20) = v188 + 1;
            *((_QWORD *)v186 + 4) = v173;
            v189 = *(unsigned int *)(v138 + 188);
            *(_QWORD *)(*(_QWORD *)(v138 + 176) + 8 * v189) = v171;
            *(_DWORD *)(v138 + 188) = v189 + 1;
            --v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v192 = *(_DWORD **)(v138 + 56);
            v193 = JSC::Wasm::toB3Type(v133);
            v194 = (_DWORD *)WTF::fastMalloc((WTF *)8);
            v194[1] = v193;
            __dst[0] = v194;
            v202 = JSC::B3::SparseCollection<JSC::B3::Variable>::add(v192, __dst);
            v203 = __dst[0];
            __dst[0] = 0;
            if (v203)
              WTF::fastFree((unint64_t)v203, v195, v196, v197, v198, v199, v200, v201);
            if (*(_BYTE *)(v5 + 0x7B1))
              v204 = 29;
            else
              v204 = 17;
            v205 = 2 * ((v204 + v133) < 2u);
            v206 = *(_QWORD *)(v138 + 88);
            v207 = *(JSC::B3::Value **)(v138 + 56);
            v208 = JSC::Wasm::toB3Type(v133);
            v209 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)v138, v208, v205, 0, 1);
            v210 = (_DWORD *)WTF::fastMalloc((WTF *)0x38);
            v210[2] = -1;
            *((_WORD *)v210 + 6) = 9;
            v210[4] = 0;
            *((_BYTE *)v210 + 20) = 1;
            *((_QWORD *)v210 + 3) = 0;
            *((_QWORD *)v210 + 4) = 0;
            *(_QWORD *)v210 = off_1E357F0F8;
            *((_QWORD *)v210 + 5) = v202;
            *((_QWORD *)v210 + 6) = v209;
            JSC::B3::Procedure::addValueImpl(v207, (JSC::B3::Value *)v210);
            __dst[0] = v210;
            v211 = (char **)(v206 + 8);
            v212 = *(unsigned int *)(v206 + 20);
            if ((_DWORD)v212 == *(_DWORD *)(v206 + 16))
            {
              v214 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v211, v212 + 1, (unint64_t)__dst);
              v212 = *(unsigned int *)(v206 + 20);
              *(_QWORD *)(*(_QWORD *)(v206 + 8) + 8 * v212) = *(_QWORD *)v214;
              v210 = __dst[0];
            }
            else
            {
              *(_QWORD *)&(*v211)[8 * v212] = v210;
            }
            *(_DWORD *)(v206 + 20) = v212 + 1;
            *((_QWORD *)v210 + 4) = v206;
            v213 = *(unsigned int *)(v138 + 188);
            *(_QWORD *)(*(_QWORD *)(v138 + 176) + 8 * v213) = v202;
            *(_DWORD *)(v138 + 188) = v213 + 1;
            --v23;
          }
          while (v23);
        }
      }
      LODWORD(v29) = v391 + 1;
      v66 = v389;
      v8 = v392;
      v4 = v388;
      v27 = v390;
      v59 = 50001;
      if (v391 + 1 == v389)
        goto LABEL_57;
    }
    if ((v130 + 29) < 2u)
      goto LABEL_158;
LABEL_106:
    v397 = 0;
    goto LABEL_107;
  }
  v27 = 0;
LABEL_57:
  if (*(_BYTE *)(v5 + 0x7B1))
  {
    if ((unint64_t)v27 > *(unsigned int *)(a2 + 14976))
    {
      v345 = (void **)(a2 + 14968);
      v346 = *(void **)(a2 + 14968);
      v347 = *(unsigned int *)(a2 + 14980);
      if (!WTF::VectorBufferBase<unsigned int,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(a2 + 14968, (unint64_t)v27))
      {
        v384 = "can't allocate enough memory for tracking function's local initialization";
        v385 = (unint64_t *)a2;
        v386 = 74;
        goto LABEL_333;
      }
      memcpy(*v345, v346, 4 * v347);
      if (v346)
      {
        if (*v345 == v346)
        {
          *(_QWORD *)(a2 + 14968) = 0;
          *(_DWORD *)(a2 + 14976) = 0;
        }
        WTF::fastFree((unint64_t)v346, v348, v349, v350, v351, v352, v353, v354);
      }
    }
    v78 = (uint64_t *)(a2 + 14984);
    v79 = *(_QWORD *)(a2 + 14984);
    if (v79 < 0)
      v80 = 63;
    else
      v80 = *(_QWORD *)(2 * v79);
    if (v80 < v4)
      WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(a2 + 14984), v4, 0);
    v81 = *(unsigned int *)(v8 + 16);
    if ((_DWORD)v81)
    {
      v82 = 0;
      v83 = *(_DWORD *)(v8 + 20);
      v84 = *(_QWORD *)(v8 + 8);
      do
      {
        if (*(unsigned __int8 *)(v84 + 16 * (v83 + v82)) == 228)
        {
          if (*v78 >= 0)
            v315 = 2 * *v78 + 8;
          else
            v315 = a2 + 14984;
          *(_QWORD *)(v315 + ((v82 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v82;
        }
        ++v82;
      }
      while (v81 != v82);
    }
  }
  v85 = (uint64_t *)(a2 + 456);
  __dst[0] = v403;
  __dst[1] = (void *)16;
  v410 = (WTF *)v412;
  v411 = 16;
  v413 = 0;
  v86 = *(_QWORD *)(a2 + 48);
  v87 = *(_QWORD *)(a2 + 14952);
  if (*(_DWORD *)(v87 + 32))
    v88 = 0;
  else
    v88 = v87 + 8;
  v89 = *(JSC::B3::Procedure **)(v86 + 56);
  v90 = *(_DWORD *)(v86 + 512);
  v91 = JSC::B3::Procedure::addBlock((uint64_t *)v86, v89, 1.0);
  JSC::Wasm::OMGIRGenerator::ControlData::ControlData((uint64_t)v414, v89, 0, v88, 3, v90, (uint64_t)v91, 0);
  v99 = *(_DWORD *)(a2 + 468);
  if (v99 == *(_DWORD *)(a2 + 464))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry>(a2 + 456, (unint64_t)__dst);
  }
  else
  {
    v100 = *v85;
    v101 = *v85 + 888 * v99;
    v102 = v101 + 16;
    *(_QWORD *)v101 = v101 + 16;
    *(_QWORD *)(v101 + 8) = 16;
    v103 = __dst[0];
    if (__dst[0] == v403)
    {
      if (HIDWORD(__dst[1]))
      {
        v303 = 24 * HIDWORD(__dst[1]);
        v304 = v403;
        do
        {
          v305 = *(_OWORD *)v304;
          *(_QWORD *)(v102 + 16) = *((_QWORD *)v304 + 2);
          *(_OWORD *)v102 = v305;
          v102 += 24;
          v304 += 24;
          v303 -= 24;
        }
        while (v303);
      }
    }
    else
    {
      __dst[0] = v403;
      *(_QWORD *)v101 = v103;
      v382 = (int)__dst[1];
      LODWORD(__dst[1]) = 16;
      *(_DWORD *)(v101 + 8) = v382;
    }
    v104 = HIDWORD(__dst[1]);
    HIDWORD(__dst[1]) = 0;
    *(_DWORD *)(v101 + 12) = v104;
    v105 = v100 + 888 * v99;
    v106 = v105 + 416;
    *(_QWORD *)(v105 + 400) = v105 + 416;
    v107 = (_DWORD *)(v105 + 412);
    *(_QWORD *)(v105 + 408) = 16;
    v108 = v410;
    if (v410 == (WTF *)v412)
    {
      if (HIDWORD(v411))
      {
        v306 = 24 * HIDWORD(v411);
        v307 = v412;
        do
        {
          v308 = *(_OWORD *)v307;
          *(_QWORD *)(v106 + 16) = *((_QWORD *)v307 + 2);
          *(_OWORD *)v106 = v308;
          v106 += 24;
          v307 += 24;
          v306 -= 24;
        }
        while (v306);
      }
    }
    else
    {
      v410 = (WTF *)v412;
      *(_QWORD *)(v105 + 400) = v108;
      v383 = v411;
      LODWORD(v411) = 16;
      *(_DWORD *)(v105 + 408) = v383;
    }
    v109 = HIDWORD(v411);
    HIDWORD(v411) = 0;
    *v107 = v109;
    v110 = v100 + 888 * v99;
    *(_DWORD *)(v110 + 800) = v413;
    v111 = v414[0];
    v112 = v414[1];
    *(_QWORD *)(v110 + 840) = v415;
    *(_OWORD *)(v110 + 808) = v111;
    *(_OWORD *)(v110 + 824) = v112;
    *(_QWORD *)(v110 + 856) = 0;
    *(_QWORD *)(v110 + 848) = 0;
    v113 = v416;
    v416 = 0;
    *(_QWORD *)(v110 + 848) = v113;
    LODWORD(v113) = v417;
    v417 = 0;
    *(_DWORD *)(v110 + 856) = (_DWORD)v113;
    LODWORD(v113) = v418;
    v418 = 0;
    *(_DWORD *)(v110 + 860) = (_DWORD)v113;
    v114 = v419;
    *(_QWORD *)(v110 + 880) = v420;
    *(_OWORD *)(v110 + 864) = v114;
    ++*(_DWORD *)(a2 + 468);
  }
  v115 = v416;
  if (v416)
  {
    v416 = 0;
    v417 = 0;
    WTF::fastFree((unint64_t)v115, v92, v93, v94, v95, v96, v97, v98);
  }
  v116 = v410;
  if (v412 != (_BYTE *)v410 && v410)
  {
    v410 = 0;
    LODWORD(v411) = 0;
    WTF::fastFree((unint64_t)v116, v92, v93, v94, v95, v96, v97, v98);
  }
  v117 = (JSC::Wasm::WasmOpcodeCounter *)__dst[0];
  if (v403 != __dst[0] && __dst[0])
  {
    __dst[0] = 0;
    LODWORD(__dst[1]) = 0;
    WTF::fastFree((unint64_t)v117, v92, v93, v94, v95, v96, v97, v98);
  }
  if (!*(_DWORD *)(a2 + 468))
  {
LABEL_93:
    *(_BYTE *)v394 = 0;
    *((_BYTE *)v394 + 8) = 0;
    return;
  }
  v118 = (_BYTE *)(a2 + 14992);
  while (1)
  {
    v119 = *(_QWORD *)a2;
    *(_QWORD *)(a2 + 15000) = *(_QWORD *)a2;
    if (v119 >= *(_QWORD *)(a2 + 16))
    {
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't decode opcode", (unint64_t *)a2, 20, &v399, *(float *)&v112);
      goto LABEL_199;
    }
    *(_QWORD *)a2 = v119 + 1;
    v120 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v119);
    if (v120 == 255
      || ((JSC::Wasm::isValidOpType<unsigned char>(unsigned char)::valid[v120 >> 3] >> (v120 & 7)) & 1) == 0)
    {
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char>("invalid opcode ", (unint64_t *)a2, 16, v120, &v399, *(float *)&v112);
LABEL_199:
      v400 = 1;
      goto LABEL_201;
    }
    *v118 = v120;
    if (*(_BYTE *)(v5 + 0x78E))
    {
      JSC::Wasm::WasmOpcodeCounter::singleton(v117);
      JSC::Wasm::WasmOpcodeCounter::increment((uint64_t)&JSC::Wasm::WasmOpcodeCounter::singleton(void)::counter, *v118);
    }
    if (*(_DWORD *)(a2 + 15008))
      JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseUnreachableExpression(__dst, a2, v93, v120, v95, v96, v97, v98, *(double *)&v114, *(double *)&v112);
    else
      v117 = (JSC::Wasm::WasmOpcodeCounter *)JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseExpression(__dst, a2);
    if (LOBYTE(__dst[1]))
      break;
    if (!*(_DWORD *)(a2 + 468))
      goto LABEL_93;
  }
  v276 = (WTF *)__dst[0];
  __dst[0] = 0;
  v399 = v276;
  v400 = 1;
  std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)__dst, v121, v93, v122, v95, v96, v97, v98);
LABEL_201:
  v277 = v399;
  v399 = 0;
  *(_QWORD *)v394 = v277;
  *((_BYTE *)v394 + 8) = 1;
  std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v399, v269, v270, v271, v272, v273, v274, v275);
}

void JSC::Wasm::OMGIRGenerator::addCall(_BYTE *a1, _QWORD *a2, unsigned int a3, unsigned __int8 **a4, uint64_t a5, uint64_t a6, int a7)
{
  unint64_t v13;
  WTF ***v14;
  unsigned __int8 **v15;
  unsigned __int8 **v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned __int8 **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unsigned int v27;
  JSC::B3::Value *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  uint64_t *v51;
  unint64_t v52;
  const void *v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  __int16 v85;
  unsigned __int8 *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  unsigned int v93;
  JSC::B3::Procedure *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _BYTE *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  JSC::Wasm::OMGIRGenerator *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  const JSC::Wasm::Type *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t casual;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  JSC::Wasm::TypeInformation *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF::AtomStringImpl *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  JSC::B3::Value *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  JSC::Wasm::TypeInformation *v179;
  uint64_t v180;
  uint64_t v181;
  WTF ***v182;
  unint64_t v183;
  WTF ***v184;
  uint64_t v185;
  _QWORD *v186;
  int v187;
  _BYTE *v188;
  unsigned int v189;
  unint64_t v190;
  _QWORD *v191;
  int v192;
  uint64_t v193;
  JSC::B3::Value *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int **v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  WTF *PushVariable;
  unint64_t v226;
  uint64_t v227;
  JSC::B3::Value *v228;
  uint64_t v229;
  char **v230;
  uint64_t v231;
  uint64_t v232;
  JSC::Wasm::TypeInformation *v233;
  uint64_t v234;
  WTF ***v235;
  char *v236;
  _QWORD *v237;
  int v238;
  unsigned int v239;
  unint64_t v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  char **v245;
  uint64_t v246;
  uint64_t v247;
  __int128 v248;
  unsigned int v249;
  unsigned int *v250;
  unsigned int *v251;
  unsigned int v252;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int *v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int *v265;
  unsigned int *v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int *v269;
  unsigned int v270;
  BOOL v271;
  char *v272;
  char *v273;
  char *v274;
  char *v275;
  __int128 v276;
  unsigned int v277;
  unsigned int *v278;
  unsigned int *v279;
  unsigned int v280;
  uint64_t v281;
  unsigned int v282;
  uint64_t v283;
  int v284;
  BOOL v285;
  int v286;
  unsigned int *v287;
  unsigned int v288;
  uint64_t v289;
  void *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int v297;
  unsigned int *v298;
  unsigned int v299;
  unsigned int *v300;
  unsigned int *v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int *v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int *v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t *v317;
  unint64_t v318;
  _QWORD *v319;
  _QWORD *v320;
  unsigned int *v321;
  unsigned int *v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int v325;
  WTF *v326;
  WTF *v328;
  WTF *v329;
  WTF *v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t *v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unsigned __int8 **v338;
  void *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  uint64_t v347;
  void *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  __int128 v362;
  unsigned int v363;
  unsigned int *v364;
  unsigned int *v365;
  unsigned int v366;
  void *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unsigned int v374;
  unsigned int v375;
  unsigned int v376;
  unsigned int v377;
  unsigned int *v378;
  uint64_t v379;
  void *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  void *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  __int128 v394;
  unsigned int v395;
  unsigned int *v396;
  unsigned int *v397;
  unsigned int v398;
  unsigned int v399;
  unsigned int v400;
  unsigned int v401;
  unsigned int v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  __int128 *v406;
  unsigned int v407;
  uint64_t v408;
  _OWORD *v409;
  __int128 v410;
  uint64_t v411;
  unsigned int *v412;
  unsigned int v413;
  uint64_t v414;
  WTF *v415;
  unint64_t CachedUnrolling;
  const JSC::Wasm::TypeDefinition *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  __int128 v425;
  WTF ***v426;
  unsigned int v427;
  uint64_t *v428;
  uint64_t v429;
  _BYTE *v430;
  JSC::Wasm::TypeInformation *v431;
  unsigned int *v432;
  _QWORD v433[2];
  _BYTE v434[96];
  _BYTE v435[89];
  uint64_t v436;
  unsigned int *v437;
  WTF *v438;
  unsigned int *v439;
  WTF *v440;
  _QWORD v441[2];
  _BYTE v442[96];
  _BYTE v443[96];
  __int128 v444;
  unsigned int *v445;
  unsigned int *v446;
  _QWORD *v447;
  unsigned __int8 **v448;
  uint64_t v449;
  _QWORD *v450;
  uint64_t *v451;
  BOOL *v452;
  BOOL *v453;
  int *v454;
  uint64_t v455;
  uint64_t v456;
  unsigned int v457;
  char v458[32];
  WTF *v459;
  int v460;
  WTF *v461;
  int v462;
  uint64_t v463;
  char v464[32];
  WTF *v465;
  int v466;
  WTF *v467;
  int v468;
  uint64_t v469;
  char v470[32];
  unint64_t v471;
  int v472;
  uint64_t *v473;
  int v474;
  uint64_t v475;
  uint64_t v476;
  int v477;
  BOOL v478;
  unsigned int v479;
  char v480;
  __int128 *v481;

  v479 = a3;
  v478 = a7 == 5;
  v13 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v13 != -1)
  {
    *(_QWORD *)v470 = v458;
    *(_QWORD *)v464 = v470;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, v464, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  v477 = 0;
  v14 = (WTF ***)(a4 + 1);
  if (*((_DWORD *)a4 + 8))
    v15 = 0;
  else
    v15 = a4 + 1;
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v15, 0, v470);
  if (*((_DWORD *)a4 + 8))
    v16 = 0;
  else
    v16 = a4 + 1;
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v16, 1, v464);
  if ((unint64_t)(v476 + 15) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198D9B9B4);
  }
  v17 = a2[2];
  v18 = *((unsigned int *)a2 + 9);
  if (*(_DWORD *)(v17 + 52) <= v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198D9B9BCLL);
  }
  v19 = (v476 + 15) & 0xFFFFFFF0;
  v20 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 8 * v18);
  if (*(_DWORD *)(v20 + 32))
    v21 = 0;
  else
    v21 = (unsigned __int8 **)(v20 + 8);
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v21, 1, v458);
  v457 = 0;
  v456 = 0;
  if (v478)
  {
    *((_BYTE *)a2 + 457) = 1;
    v335 = a2[2];
    v336 = *((unsigned int *)a2 + 9);
    if (*(_DWORD *)(v335 + 52) <= v336)
    {
      __break(0xC471u);
      JUMPOUT(0x198D9BA34);
    }
    v337 = *(_QWORD *)(*(_QWORD *)(v335 + 40) + 8 * v336);
    if (*(_DWORD *)(v337 + 32))
      v338 = 0;
    else
      v338 = (unsigned __int8 **)(v337 + 8);
    JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v338, 1, (char *)&v450);
    if ((unint64_t)(v455 + 15) >> 31)
    {
      __break(0xC471u);
LABEL_389:
      JUMPOUT(0x198D9B688);
    }
    v346 = ((v455 + 15) & 0xFFFFFFF0) - v19;
    v477 = v346;
    if (v346 >= *((_DWORD *)a2 + 115))
      v346 = *((_DWORD *)a2 + 115);
    *((_DWORD *)a2 + 115) = v346;
    JSC::Wasm::CallInformation::~CallInformation((JSC::Wasm::CallInformation *)&v450, v339, v340, v341, v342, v343, v344, v345);
  }
  else
  {
    *((_BYTE *)a2 + 456) = 1;
    *(_QWORD *)&v444 = a4;
    if (*((_DWORD *)a4 + 8))
      v26 = 0;
    else
      v26 = a4 + 1;
    v27 = v26[3];
    if (v27 == 1)
    {
      v27 = JSC::Wasm::toB3Type(**(_QWORD **)v26);
    }
    else if (v27)
    {
      v446 = (unsigned int *)&v444;
      v447 = a2;
      WTF::HashMap<JSC::Wasm::TypeDefinition const*,JSC::B3::Type,WTF::DefaultHash<JSC::Wasm::TypeDefinition const*>,WTF::HashTraits<JSC::Wasm::TypeDefinition const*>,WTF::HashTraits<JSC::B3::Type>,WTF::HashTableTraits>::ensure<JSC::Wasm::OMGIRGenerator::toB3ResultType(JSC::Wasm::TypeDefinition const*)::$_0>((uint64_t)&v450, a2 + 29, (uint64_t *)&v444, (uint64_t **)&v446, v22, v23, v24, v25);
      v27 = *((_DWORD *)v450 + 2);
    }
    v457 = v27;
  }
  v446 = &v457;
  v447 = a2;
  v448 = a4;
  v449 = a6;
  v28 = (JSC::B3::Value *)a2[7];
  v29 = *((_QWORD *)v28 + 20);
  v30 = *(_DWORD *)(v29 + 188);
  if (v30 <= v19)
    v30 = v19;
  *(_DWORD *)(v29 + 188) = v30;
  v31 = a2[2];
  v32 = v479;
  v33 = *(_DWORD *)(v31 + 36);
  v34 = v479 >= v33;
  v35 = v479 - v33;
  if (!v34)
  {
    v450 = a2;
    v451 = &v456;
    v452 = &v478;
    v453 = (BOOL *)&v477;
    v239 = *(_DWORD *)(a5 + 12);
    if (*((_DWORD *)a2 + 124) > v239)
      v239 = *((_DWORD *)a2 + 124);
    *((_DWORD *)a2 + 124) = v239;
    if (*a2)
      v240 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
    else
      v240 = 0;
    if (v32 >= 0x1111110)
    {
      __break(0xC471u);
      JUMPOUT(0x198D9B800);
    }
    v241 = a2[11];
    v242 = 120 * v32 + 168;
    v243 = a2[59];
    v244 = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)(v244 + 8) = -1;
    *(_WORD *)(v244 + 12) = 67;
    *(_DWORD *)(v244 + 16) = 2;
    *(_BYTE *)(v244 + 20) = 1;
    *(_QWORD *)(v244 + 24) = v240;
    *(_QWORD *)(v244 + 32) = 0;
    *(_QWORD *)(v244 + 64) = v243;
    *(_QWORD *)v244 = off_1E357E4C8;
    *(_DWORD *)(v244 + 40) = v242;
    *(_OWORD *)(v244 + 44) = xmmword_19914F690;
    JSC::B3::Procedure::addValueImpl(v28, (JSC::B3::Value *)v244);
    *(_QWORD *)&v444 = v244;
    v245 = (char **)(v241 + 8);
    v246 = *(unsigned int *)(v241 + 20);
    if ((_DWORD)v246 == *(_DWORD *)(v241 + 16))
    {
      v334 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v245, v246 + 1, (unint64_t)&v444);
      v246 = *(unsigned int *)(v241 + 20);
      *(_QWORD *)(*(_QWORD *)(v241 + 8) + 8 * v246) = *(_QWORD *)v334;
      v247 = v444;
    }
    else
    {
      *(_QWORD *)&(*v245)[8 * v246] = v244;
      v247 = v244;
    }
    *(_DWORD *)(v241 + 20) = v246 + 1;
    *(_QWORD *)(v247 + 32) = v241;
    v456 = v244;
    if (!v478)
    {
      JSC::Wasm::OMGIRGenerator::createCallPatchpoint((uint64_t *)&v444, (uint64_t)a2, a2[11], 0, v457, (uint64_t)v470, a5);
      v248 = v444;
      if (*((_QWORD *)&v444 + 1))
      {
        do
          v249 = __ldaxr(*((unsigned int **)&v248 + 1));
        while (__stlxr(v249 + 1, *((unsigned int **)&v248 + 1)));
      }
      v438 = (WTF *)*((_QWORD *)&v248 + 1);
      v250 = v445;
      if (v445)
      {
        v251 = v445 + 2;
        do
          v252 = __ldaxr(v251);
        while (__stlxr(v252 + 1, v251));
        v437 = v250;
        JSC::Wasm::OMGIRGenerator::addCall(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_1::operator()((uint64_t *)&v450, (JSC::B3::StackmapValue *)v248, (unsigned int **)&v438, &v437);
        v437 = 0;
        do
        {
          v260 = __ldaxr(v251);
          v261 = v260 - 1;
        }
        while (__stlxr(v261, v251));
        if (!v261)
        {
          atomic_store(1u, v250 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v250 + 8))(v250);
        }
      }
      else
      {
        v437 = 0;
        JSC::Wasm::OMGIRGenerator::addCall(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_1::operator()((uint64_t *)&v450, (JSC::B3::StackmapValue *)v248, (unsigned int **)&v438, &v437);
        v437 = 0;
      }
      v262 = (unsigned int *)v438;
      v438 = 0;
      if (v262)
      {
        do
        {
          v263 = __ldaxr(v262);
          v264 = v263 - 1;
        }
        while (__stlxr(v264, v262));
        if (!v264)
        {
          atomic_store(1u, v262);
          WTF::fastFree((unint64_t)v262, v253, v254, v255, v256, v257, v258, v259);
        }
      }
      if (v457)
        JSC::Wasm::OMGIRGenerator::addCall(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_0::operator()((char **)&v446, v444);
      JSC::Wasm::OMGIRGenerator::restoreWebAssemblyGlobalState((uint64_t)a2, a2[2] + 104, a2[59], a2[11]);
      *a1 = 0;
      a1[8] = 0;
      v265 = v445;
      v445 = 0;
      if (v265)
      {
        v266 = v265 + 2;
        do
        {
          v267 = __ldaxr(v266);
          v268 = v267 - 1;
        }
        while (__stlxr(v268, v266));
        if (!v268)
        {
          atomic_store(1u, v265 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v265 + 8))(v265);
        }
      }
      v269 = (unsigned int *)*((_QWORD *)&v444 + 1);
      *((_QWORD *)&v444 + 1) = 0;
      if (v269)
      {
        do
        {
          v270 = __ldaxr(v269);
          v271 = --v270 == 0;
        }
        while (__stlxr(v270, v269));
        goto LABEL_271;
      }
      goto LABEL_273;
    }
    v379 = a2[11];
    JSC::Wasm::CallInformation::CallInformation((JSC::Wasm::CallInformation *)v443, (const JSC::Wasm::CallInformation *)v458);
    JSC::Wasm::CallInformation::CallInformation((JSC::Wasm::CallInformation *)v442, (const JSC::Wasm::CallInformation *)v464);
    v441[0] = 0;
    v441[1] = 0;
    JSC::Wasm::OMGIRGenerator::createTailCallPatchpoint((uint64_t *)&v444, (JSC::Wasm::OMGIRGenerator *)a2, v379, (uint64_t)v443, (uint64_t)v442, a5, (uint64_t)v441);
    JSC::Wasm::CallInformation::~CallInformation((JSC::Wasm::CallInformation *)v442, v380, v381, v382, v383, v384, v385, v386);
    JSC::Wasm::CallInformation::~CallInformation((JSC::Wasm::CallInformation *)v443, v387, v388, v389, v390, v391, v392, v393);
    v394 = v444;
    if (*((_QWORD *)&v444 + 1))
    {
      do
        v395 = __ldaxr(*((unsigned int **)&v394 + 1));
      while (__stlxr(v395 + 1, *((unsigned int **)&v394 + 1)));
    }
    v440 = (WTF *)*((_QWORD *)&v394 + 1);
    v396 = v445;
    if (v445)
    {
      v397 = v445 + 2;
      do
        v398 = __ldaxr(v397);
      while (__stlxr(v398 + 1, v397));
      v439 = v396;
      JSC::Wasm::OMGIRGenerator::addCall(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_1::operator()((uint64_t *)&v450, (JSC::B3::StackmapValue *)v394, (unsigned int **)&v440, &v439);
      v439 = 0;
      do
      {
        v399 = __ldaxr(v397);
        v400 = v399 - 1;
      }
      while (__stlxr(v400, v397));
      if (!v400)
      {
        atomic_store(1u, v396 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v396 + 8))(v396);
      }
    }
    else
    {
      v439 = 0;
      JSC::Wasm::OMGIRGenerator::addCall(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_1::operator()((uint64_t *)&v450, (JSC::B3::StackmapValue *)v394, (unsigned int **)&v440, &v439);
      v439 = 0;
    }
    v378 = (unsigned int *)v440;
    v440 = 0;
    if (!v378)
      goto LABEL_327;
    do
    {
      v401 = __ldaxr(v378);
      v402 = v401 - 1;
    }
    while (__stlxr(v402, v378));
    if (v402)
    {
LABEL_327:
      *a1 = 0;
      a1[8] = 0;
      std::tuple<JSC::B3::PatchpointValue *,WTF::Box<JSC::Wasm::PatchpointExceptionHandle>,WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>>>::~tuple((uint64_t)&v444, v367, v368, v369, v370, v371, v372, v373);
      goto LABEL_273;
    }
    atomic_store(1u, v378);
LABEL_370:
    WTF::fastFree((unint64_t)v378, v367, v368, v369, v370, v371, v372, v373);
    goto LABEL_327;
  }
  v436 = a2[26];
  v450 = a2;
  v451 = &v436;
  v452 = (BOOL *)&v479;
  v453 = &v478;
  v454 = &v477;
  if (v478)
  {
    v347 = a2[11];
    JSC::Wasm::CallInformation::CallInformation((JSC::Wasm::CallInformation *)v435, (const JSC::Wasm::CallInformation *)v458);
    JSC::Wasm::CallInformation::CallInformation((JSC::Wasm::CallInformation *)v434, (const JSC::Wasm::CallInformation *)v464);
    v433[0] = 0;
    v433[1] = 0;
    JSC::Wasm::OMGIRGenerator::createTailCallPatchpoint((uint64_t *)&v444, (JSC::Wasm::OMGIRGenerator *)a2, v347, (uint64_t)v435, (uint64_t)v434, a5, (uint64_t)v433);
    JSC::Wasm::CallInformation::~CallInformation((JSC::Wasm::CallInformation *)v434, v348, v349, v350, v351, v352, v353, v354);
    JSC::Wasm::CallInformation::~CallInformation((JSC::Wasm::CallInformation *)v435, v355, v356, v357, v358, v359, v360, v361);
    v362 = v444;
    if (*((_QWORD *)&v444 + 1))
    {
      do
        v363 = __ldaxr(*((unsigned int **)&v362 + 1));
      while (__stlxr(v363 + 1, *((unsigned int **)&v362 + 1)));
    }
    v364 = v445;
    if (v445)
    {
      v365 = v445 + 2;
      do
        v366 = __ldaxr(v365);
      while (__stlxr(v366 + 1, v365));
      v432 = v364;
      JSC::Wasm::OMGIRGenerator::addCall(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_2::operator()((uint64_t *)&v450, v362, *((unsigned int **)&v362 + 1), &v432);
      v432 = 0;
      do
      {
        v374 = __ldaxr(v365);
        v375 = v374 - 1;
      }
      while (__stlxr(v375, v365));
      if (!v375)
      {
        atomic_store(1u, v364 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v364 + 8))(v364);
      }
    }
    else
    {
      v432 = 0;
      JSC::Wasm::OMGIRGenerator::addCall(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_2::operator()((uint64_t *)&v450, v362, *((unsigned int **)&v362 + 1), &v432);
      v432 = 0;
    }
    if (!*((_QWORD *)&v362 + 1))
      goto LABEL_327;
    do
    {
      v376 = __ldaxr(*((unsigned int **)&v362 + 1));
      v377 = v376 - 1;
    }
    while (__stlxr(v377, *((unsigned int **)&v362 + 1)));
    if (v377)
      goto LABEL_327;
    atomic_store(1u, *((unsigned int **)&v362 + 1));
    v378 = (unsigned int *)*((_QWORD *)&v362 + 1);
    goto LABEL_370;
  }
  v431 = (JSC::Wasm::TypeInformation *)a4;
  if (a7 != 1 || v479 - *((_DWORD *)a2 + 125) == *((_DWORD *)a2 + 9))
    goto LABEL_215;
  if (*(_DWORD *)(v31 + 132) <= v35)
  {
    __break(0xC471u);
    JUMPOUT(0x198D9B9C4);
  }
  v36 = *(_QWORD *)(*(_QWORD *)(v31 + 120) + 40 * v35 + 8) - *(_QWORD *)(*(_QWORD *)(v31 + 120) + 40 * v35) + 1;
  if (v36 <= 1)
  {
LABEL_342:
    __break(0xC471u);
    goto LABEL_389;
  }
  if (v36 >= qword_1ECF4C4D0)
    goto LABEL_215;
  v37 = *((unsigned __int8 *)a2 + 33);
  if (v37 - 4 >= 2)
  {
    if (v37 <= 9 && ((1 << v37) & 0x3CF) != 0)
      goto LABEL_215;
    __break(1u);
    goto LABEL_342;
  }
  v38 = *((_DWORD *)a2 + 38);
  if (v38 >= HIDWORD(xmmword_1ECF4C4C0) || *(_DWORD *)(a2[13] + 156) >= HIDWORD(qword_1ECF4C4D0))
    goto LABEL_215;
  if (v38 >= 2)
  {
    v221 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v221)
      v221 = WTF::Thread::initializeCurrentTLS(0);
    if ((unint64_t)&v423 < *(_QWORD *)(v221 + 24) + 0x10000)
      goto LABEL_215;
    v31 = a2[2];
    v32 = v479;
  }
  v39 = v32;
  v40 = *(_QWORD *)(v31 + 328);
  v41 = (unint64_t *)(2 * v40);
  if (v40 < 0)
    v42 = 63;
  else
    v42 = *v41;
  if (v42 <= v39
    || ((v43 = v41 + 1, v40 >= 0) ? (v44 = v43) : (v44 = (_QWORD *)(v31 + 328)),
        ((*(_QWORD *)((char *)v44 + ((v39 >> 3) & 0x1FFFFFF8)) >> v39) & 1) == 0))
  {
    v45 = v39 - *(_DWORD *)(v31 + 36);
    if (*(_DWORD *)(v31 + 132) <= v45)
    {
      __break(0xC471u);
      JUMPOUT(0x198D9B9D4);
    }
    v46 = *(_QWORD *)(*(_QWORD *)(v31 + 120) + 40 * v45 + 8) - *(_QWORD *)(*(_QWORD *)(v31 + 120) + 40 * v45) + 1;
    if (v46 <= 1)
    {
      __break(0xC471u);
      JUMPOUT(0x198D9B778);
    }
    v47 = a2[13];
    v48 = *(unsigned int *)(v47 + 156);
    v34 = __CFADD__(v48, v46);
    v49 = v48 + v46;
    if (v34 || HIDWORD(v49))
    {
      __break(0xC471u);
      JUMPOUT(0x198D9B9CCLL);
    }
    v424 = a6;
    v430 = a1;
    *(_DWORD *)(v47 + 156) = v49;
    v50 = *((_DWORD *)a2 + 125);
    v51 = (uint64_t *)*(unsigned int *)(a5 + 12);
    v426 = v14;
    if ((_DWORD)v51)
    {
      LODWORD(v429) = v50;
      v52 = 0;
      v53 = 0;
      v54 = 0;
      v55 = *(uint64_t **)a5;
      v56 = 8 * (_QWORD)v51;
      do
      {
        if (*a2)
          v57 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
        else
          v57 = 0;
        v58 = JSC::B3::BasicBlock::appendNew<JSC::B3::VariableValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Variable *>((JSC::B3::BasicBlock *)a2[11], (JSC::B3::Value *)a2[7], v57, *v55);
        v59 = v58;
        if (v52 == v54)
        {
          v60 = v52 + (v52 >> 2);
          if (v60 >= 0x10)
            v61 = v60 + 1;
          else
            v61 = 16;
          if (v61 <= v52 + 1)
            v54 = v52 + 1;
          else
            v54 = v61;
          if (v54 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x198D9BA2CLL);
          }
          v62 = (void *)WTF::fastMalloc((WTF *)(8 * v54));
          v54 = v54;
          memcpy(v62, v53, 8 * v52);
          if (v53)
          {
            if (v62 == v53)
            {
              v54 = 0;
              v62 = 0;
            }
            WTF::fastFree((unint64_t)v53, v63, v64, v65, v66, v67, v68, v69);
          }
          v53 = v62;
          *((_QWORD *)v62 + v52++) = v59;
        }
        else
        {
          *((_QWORD *)v53 + v52++) = v58;
        }
        ++v55;
        v56 -= 8;
      }
      while (v56);
      v50 = v429;
    }
    else
    {
      LODWORD(v52) = 0;
      LODWORD(v54) = 0;
      v53 = 0;
    }
    v428 = JSC::B3::Procedure::addBlock(v51, (JSC::B3::Procedure *)a2[7], 1.0);
    if (a2[14])
    {
      v237 = a2;
      do
        v237 = (_QWORD *)v237[13];
      while (v237[14]);
      v238 = *((_DWORD *)v237 + 127);
      if (v238 != -1)
      {
        *((_DWORD *)v237 + 127) = v238 + 1;
        v72 = a2;
        do
          v72 = (_QWORD *)v72[13];
        while (v72[14]);
        v71 = *((_DWORD *)v72 + 127);
LABEL_69:
        if (v71 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x198D9B9DCLL);
        }
        v73 = (v39 - v50);
        v427 = v71 + 1;
        *((_DWORD *)v72 + 127) = v71 + 1;
        v74 = a2[2];
        if (*(_DWORD *)(v74 + 132) <= v73)
        {
          __break(0xC471u);
          JUMPOUT(0x198D9B9E4);
        }
        v75 = *(_QWORD *)(v74 + 120);
        v76 = (unsigned __int8 *)(a2[1] + 128);
        *(_QWORD *)&v444 = v76;
        BYTE8(v444) = 1;
        if (__ldaxr(v76))
        {
          __clrex();
        }
        else if (!__stxr(1u, v76))
        {
LABEL_74:
          v84 = *(_DWORD **)(JSC::Wasm::CalleeGroup::wasmEntrypointCalleeFromFunctionIndexSpace((_QWORD *)a2[1], (uint64_t)&v444, *((_DWORD *)a2 + 125) + (int)v73)+ 24);
          if (v84)
            v85 = *v84 != 0;
          else
            v85 = 0;
          v429 = v73;
          if (!BYTE8(v444))
            goto LABEL_84;
          v86 = (unsigned __int8 *)v444;
          v87 = __ldxr((unsigned __int8 *)v444);
          if (v87 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v444))
              goto LABEL_84;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v86, 0, v78, v79, v80, v81, v82, v83);
LABEL_84:
          v88 = a2[13];
          v89 = a2[1];
          v90 = WTF::fastMalloc((WTF *)0x248);
          v91 = v85 | 0x100;
          *(_QWORD *)v90 = 0;
          *(_QWORD *)(v90 + 8) = v89;
          v92 = *(_QWORD *)(v88 + 16);
          *(_QWORD *)(v90 + 16) = v92;
          *(_QWORD *)(v90 + 24) = a2[3];
          *(_BYTE *)(v90 + 32) = *(_BYTE *)(v88 + 32);
          *(_BYTE *)(v90 + 33) = 4;
          v93 = v429;
          *(_DWORD *)(v90 + 36) = v429;
          *(_DWORD *)(v90 + 40) = -1;
          *(_QWORD *)(v90 + 48) = 0;
          v94 = *(JSC::B3::Procedure **)(v88 + 56);
          *(_QWORD *)(v90 + 56) = v94;
          *(_QWORD *)(v90 + 64) = 0;
          *(_QWORD *)(v90 + 72) = 0;
          v95 = v428;
          *(_QWORD *)(v90 + 88) = 0;
          *(_QWORD *)(v90 + 96) = v95;
          *(_QWORD *)(v90 + 104) = v88;
          *(_QWORD *)(v90 + 112) = a2;
          *(_QWORD *)(v90 + 120) = v53;
          *(_DWORD *)(v90 + 128) = v54;
          *(_DWORD *)(v90 + 132) = v52;
          *(_QWORD *)(v90 + 136) = 0;
          *(_QWORD *)(v90 + 144) = 0;
          *(_DWORD *)(v90 + 152) = *((_DWORD *)a2 + 38) + 1;
          *(_DWORD *)(v90 + 204) = 0;
          *(_OWORD *)(v90 + 188) = 0u;
          *(_OWORD *)(v90 + 172) = 0u;
          *(_OWORD *)(v90 + 156) = 0u;
          v96 = *(_QWORD *)(v88 + 208);
          *(_QWORD *)(v90 + 224) = 0;
          *(_QWORD *)(v90 + 232) = 0;
          *(_QWORD *)(v90 + 208) = v96;
          *(_QWORD *)(v90 + 216) = 0;
          *(_QWORD *)(v90 + 240) = v94;
          *(_QWORD *)(v90 + 248) = v90 + 264;
          *(_QWORD *)(v90 + 256) = 8;
          *(_DWORD *)(v90 + 460) = 0;
          *(_WORD *)(v90 + 456) = 0;
          *(_OWORD *)(v90 + 392) = 0u;
          *(_OWORD *)(v90 + 408) = 0u;
          *(_OWORD *)(v90 + 424) = 0u;
          *(_OWORD *)(v90 + 440) = 0u;
          *(_WORD *)(v90 + 464) = v91;
          *(_QWORD *)(v90 + 480) = 0;
          *(_QWORD *)(v90 + 488) = 0;
          *(_QWORD *)(v90 + 472) = 0;
          *(_DWORD *)(v90 + 496) = 0;
          *(_DWORD *)(v90 + 500) = *(_DWORD *)(v92 + 36);
          *(_DWORD *)(v90 + 504) = *((_DWORD *)a2 + 126);
          *(_OWORD *)(v90 + 568) = 0u;
          *(_OWORD *)(v90 + 540) = 0u;
          *(_OWORD *)(v90 + 556) = 0u;
          *(_OWORD *)(v90 + 508) = 0u;
          *(_OWORD *)(v90 + 524) = 0u;
          *(_QWORD *)(v90 + 80) = JSC::B3::Procedure::addBlock((uint64_t *)(v90 + 508), v94, 1.0);
          v98 = JSC::B3::Procedure::addBlock(v97, *(JSC::B3::Procedure **)(v90 + 56), 1.0);
          *(_QWORD *)&v444 = v98;
          v106 = *(unsigned int *)(v90 + 76);
          if ((_DWORD)v106 == *(_DWORD *)(v90 + 72))
          {
            v107 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v90 + 64, v106 + 1, (unint64_t)&v444);
            v106 = *(unsigned int *)(v90 + 76);
            *(_QWORD *)(*(_QWORD *)(v90 + 64) + 8 * v106) = *v107;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v90 + 64) + 8 * v106) = v98;
          }
          v108 = v430;
          *(_DWORD *)(v90 + 76) = v106 + 1;
          if ((_DWORD)v106 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x198D9B9ECLL);
          }
          *(_QWORD *)(v90 + 88) = **(_QWORD **)(v90 + 64);
          *(_QWORD *)(v90 + 472) = *(_QWORD *)(v88 + 472);
          *(_OWORD *)(v90 + 480) = *(_OWORD *)(v88 + 480);
          if (*((_BYTE *)a2 + 465) && *((_BYTE *)a2 + 464))
            *(_WORD *)(v90 + 464) = 257;
          v109 = a2 + 69;
          *(_QWORD *)&v444 = v90;
          v110 = *((unsigned int *)a2 + 141);
          if ((_DWORD)v110 == *((_DWORD *)a2 + 140))
          {
            v215 = (uint64_t *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v109, v110 + 1, (unint64_t)&v444);
            v110 = *((unsigned int *)a2 + 141);
            v216 = a2[69];
            v217 = *v215;
            *v215 = 0;
            *(_QWORD *)(v216 + 8 * v110) = v217;
          }
          else
          {
            v111 = *v109;
            *(_QWORD *)&v444 = 0;
            *(_QWORD *)(v111 + 8 * v110) = v90;
          }
          v112 = v110 + 1;
          *((_DWORD *)a2 + 141) = v112;
          v113 = (JSC::Wasm::OMGIRGenerator *)v444;
          *(_QWORD *)&v444 = 0;
          if (v113)
          {
            JSC::Wasm::OMGIRGenerator::~OMGIRGenerator(v113, v99, v100, v101, v102, v103, v104, v105);
            WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
            v112 = *((_DWORD *)a2 + 141);
          }
          if (!v112)
          {
            __break(0xC471u);
            JUMPOUT(0x198D9B9F4);
          }
          v122 = *(_QWORD *)(a2[69] + 8 * v112 - 8);
          v123 = v75 + 40 * v93;
          v124 = a2[2];
          casual = bmalloc_allocate_casual(15016, 1);
          v133 = *(_QWORD *)(v123 + 16);
          v134 = *(unsigned int *)(v123 + 28);
          *(_QWORD *)casual = 0;
          *(_QWORD *)(casual + 8) = v133;
          *(_QWORD *)(casual + 16) = v134;
          v135 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
          if (v135 != -1)
          {
            *(_QWORD *)&v444 = &v480;
            v481 = &v444;
            std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v481, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
          }
          *(_QWORD *)(casual + 24) = JSC::Wasm::TypeInformation::singleton(void)::theOne;
          *(_BYTE *)(casual + 32) = 0;
          *(_DWORD *)(casual + 36) = 0;
          *(_DWORD *)(casual + 40) = 0;
          *(_QWORD *)(casual + 48) = v122;
          *(_QWORD *)(casual + 56) = casual + 72;
          *(_QWORD *)(casual + 64) = 16;
          *(_QWORD *)(casual + 456) = casual + 472;
          *(_QWORD *)(casual + 464) = 16;
          *(_QWORD *)(casual + 14680) = casual + 14696;
          *(_QWORD *)(casual + 14688) = 16;
          v136 = v431;
          if (*((_DWORD *)v431 + 8) == 4)
          {
            v415 = **v426;
            v136 = *(JSC::Wasm::TypeInformation **)(*((_QWORD *)v415 + 1) + 8 * *((unsigned int *)*v426 + 2));
            if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v136))
            {
              CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v431, (unint64_t)v125, v126, v127, (uint64_t)v128, v129, v130, v131);
              if ((_BYTE)v125)
              {
                v136 = (JSC::Wasm::TypeInformation *)CachedUnrolling;
              }
              else
              {
                v136 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v136, v415, v126, v127, v128, v129, v130, v131);
                JSC::Wasm::TypeInformation::addCachedUnrolling(v431, v136, v417, v418, v419, v420, v421, v422);
              }
              v108 = v430;
            }
          }
          if (*((_DWORD *)v136 + 8) == 5)
            v136 = (JSC::Wasm::TypeInformation *)**((_QWORD **)v136 + 1);
          v137 = a2 + 71;
          *(_QWORD *)(casual + 14952) = v136;
          *(_QWORD *)(casual + 14960) = v124;
          *(_OWORD *)(casual + 14968) = 0u;
          *(_QWORD *)(casual + 14984) = 0x8000000000000000;
          *(_BYTE *)(casual + 14992) = 0;
          *(_OWORD *)(casual + 15000) = 0u;
          **(_QWORD **)(casual + 48) = casual;
          *(_QWORD *)&v444 = casual;
          v138 = *((unsigned int *)a2 + 145);
          if ((_DWORD)v138 == *((_DWORD *)a2 + 144))
          {
            v218 = (uint64_t *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a2 + 71), v138 + 1, (unint64_t)&v444);
            v138 = *((unsigned int *)a2 + 145);
            v219 = a2[71];
            v220 = *v218;
            *v218 = 0;
            *(_QWORD *)(v219 + 8 * v138) = v220;
          }
          else
          {
            v139 = *v137;
            *(_QWORD *)&v444 = 0;
            *(_QWORD *)(v139 + 8 * v138) = casual;
          }
          v140 = v138 + 1;
          *((_DWORD *)a2 + 145) = v140;
          v141 = v444;
          *(_QWORD *)&v444 = 0;
          if (v141)
          {
            v142 = JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::~FunctionParser(v141, v125, v126, v127, (uint64_t)v128, v129, v130, v131);
            WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
            v140 = *((_DWORD *)a2 + 145);
          }
          if (!v140)
          {
            __break(0xC471u);
            JUMPOUT(0x198D9B9FCLL);
          }
          JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parse((int)&v444, *(_QWORD *)(*v137 + 8 * v140 - 8));
          if (BYTE8(v444))
          {
            v414 = v444;
            *(_QWORD *)&v444 = 0;
            *(_QWORD *)v108 = v414;
            v108[8] = 1;
            std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v444, v150, v151, v152, v153, v154, v155, v156);
          }
          else
          {
            JSC::Wasm::OMGIRGenerator::insertConstants((JSC::Wasm::OMGIRGenerator *)v122);
            if (*(_DWORD *)(v122 + 76) >= 2u)
            {
              v403 = 1;
              do
              {
                *(_QWORD *)&v444 = 0;
                v404 = *(_QWORD *)(*(_QWORD *)(v122 + 64) + 8 * v403);
                *(_QWORD *)&v444 = v404;
                v405 = *((unsigned int *)a2 + 19);
                if ((_DWORD)v405 == *((_DWORD *)a2 + 18))
                {
                  WTF::Vector<JSC::B3::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::BasicBlock *>((uint64_t)(a2 + 8), (unint64_t)&v444);
                }
                else
                {
                  *(_QWORD *)(a2[8] + 8 * v405) = v404;
                  *((_DWORD *)a2 + 19) = v405 + 1;
                }
                ++v403;
              }
              while (v403 < *(unsigned int *)(v122 + 76));
            }
            v160 = *(unsigned int *)(v122 + 540);
            v161 = v160 + *((unsigned int *)a2 + 135);
            if (v161 > *((unsigned int *)a2 + 134))
            {
              WTF::Vector<JSC::Wasm::UnlinkedHandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a2 + 66), v161);
              v160 = *(unsigned int *)(v122 + 540);
            }
            if ((_DWORD)v160)
            {
              v406 = *(__int128 **)(v122 + 528);
              v407 = *((_DWORD *)a2 + 135);
              v408 = 28 * v160;
              do
              {
                v409 = (_OWORD *)(a2[66] + 28 * v407);
                v410 = *v406;
                *(_OWORD *)((char *)v409 + 12) = *(__int128 *)((char *)v406 + 12);
                *v409 = v410;
                v407 = *((_DWORD *)a2 + 135) + 1;
                *((_DWORD *)a2 + 135) = v407;
                v406 = (__int128 *)((char *)v406 + 28);
                v408 -= 28;
              }
              while (v408);
              if (*(_DWORD *)(v122 + 540))
                *((_WORD *)a2 + 232) = 257;
            }
            if (*(_DWORD *)(v122 + 508))
            {
              __break(0xC471u);
              JUMPOUT(0x198D9B7B8);
            }
            if (*a2)
              v162 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
            else
              v162 = 0;
            if (!*(_DWORD *)(v122 + 76))
            {
              __break(0xC471u);
              JUMPOUT(0x198D9BA0CLL);
            }
            v163 = *(_QWORD *)(v122 + 80);
            v164 = a2[7];
            *(_QWORD *)&v444 = **(_QWORD **)(v122 + 64);
            BYTE8(v444) = 0;
            JSC::B3::BasicBlock::appendNewControlValue(v163, v164, 154, v162, (uint64_t *)&v444, v157, v158, v159);
            *((_BYTE *)a2 + 456) |= *(_BYTE *)(v122 + 456);
            *((_BYTE *)a2 + 457) |= *(_BYTE *)(v122 + 457);
            v165 = a2[11];
            v166 = (JSC::B3::Value *)a2[7];
            if (*a2)
              v167 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
            else
              v167 = 0;
            v168 = JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>(a2[7], v167, v427);
            v169 = v168;
            *(_QWORD *)&v444 = v168;
            v170 = (_QWORD *)(v165 + 8);
            v171 = *(unsigned int *)(v165 + 20);
            if ((_DWORD)v171 == *(_DWORD *)(v165 + 16))
            {
              v272 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v165 + 8), v171 + 1, (unint64_t)&v444);
              v171 = *(unsigned int *)(v165 + 20);
              *(_QWORD *)(*(_QWORD *)(v165 + 8) + 8 * v171) = *(_QWORD *)v272;
              v172 = v444;
            }
            else
            {
              *(_QWORD *)(*v170 + 8 * v171) = v168;
              v172 = v168;
            }
            *(_DWORD *)(v165 + 20) = v171 + 1;
            *(_QWORD *)(v172 + 32) = v165;
            v173 = JSC::Wasm::OMGIRGenerator::framePointer((JSC::Wasm::OMGIRGenerator *)a2);
            v174 = WTF::fastMalloc((WTF *)0x50);
            *(_QWORD *)v174 = off_1E357F5F0;
            *(_DWORD *)(v174 + 8) = -1;
            *(_WORD *)(v174 + 12) = 70;
            *(_DWORD *)(v174 + 16) = 0;
            *(_BYTE *)(v174 + 20) = 2;
            *(_QWORD *)(v174 + 24) = v167;
            *(_QWORD *)(v174 + 32) = 0;
            JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v174, 2, v169, v173);
            *(_QWORD *)v174 = off_1E357E4C8;
            *(_DWORD *)(v174 + 40) = 36;
            v425 = xmmword_19914F690;
            *(_OWORD *)(v174 + 44) = xmmword_19914F690;
            JSC::B3::Procedure::addValueImpl(v166, (JSC::B3::Value *)v174);
            *(_QWORD *)&v444 = v174;
            v178 = *(unsigned int *)(v165 + 20);
            if ((_DWORD)v178 == *(_DWORD *)(v165 + 16))
            {
              v273 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v165 + 8), v178 + 1, (unint64_t)&v444);
              v178 = *(unsigned int *)(v165 + 20);
              *(_QWORD *)(*(_QWORD *)(v165 + 8) + 8 * v178) = *(_QWORD *)v273;
              v174 = v444;
            }
            else
            {
              *(_QWORD *)(*v170 + 8 * v178) = v174;
            }
            v179 = v431;
            *(_DWORD *)(v165 + 20) = v178 + 1;
            *(_QWORD *)(v174 + 32) = v165;
            v180 = a2[11];
            v181 = a2[7];
            v182 = v426;
            if (*a2)
              v183 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
            else
              v183 = 0;
            *(_QWORD *)&v444 = *(_QWORD *)(v122 + 80);
            BYTE8(v444) = 0;
            JSC::B3::BasicBlock::appendNewControlValue(v180, v181, 154, v183, (uint64_t *)&v444, v175, v176, v177);
            a2[11] = v428;
            if (*((_DWORD *)v179 + 8))
              v184 = 0;
            else
              v184 = v182;
            if (*((_DWORD *)v184 + 3))
            {
              v222 = 0;
              do
              {
                if (*a2)
                  v223 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
                else
                  v223 = 0;
                if (v222 >= *(unsigned int *)(v122 + 148))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198D9BA24);
                }
                v224 = JSC::B3::BasicBlock::appendNew<JSC::B3::VariableValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Variable *>((JSC::B3::BasicBlock *)a2[11], (JSC::B3::Value *)a2[7], v223, *(_QWORD *)(*(_QWORD *)(v122 + 136) + 8 * v222));
                PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)a2, *(_DWORD *)(v224 + 16));
                if (*a2)
                  v226 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
                else
                  v226 = 0;
                v227 = a2[11];
                v228 = (JSC::B3::Value *)a2[7];
                v229 = WTF::fastMalloc((WTF *)0x38);
                *(_DWORD *)(v229 + 8) = -1;
                *(_WORD *)(v229 + 12) = 9;
                *(_DWORD *)(v229 + 16) = 0;
                *(_BYTE *)(v229 + 20) = 1;
                *(_QWORD *)(v229 + 24) = v226;
                *(_QWORD *)(v229 + 32) = 0;
                *(_QWORD *)v229 = off_1E357F0F8;
                *(_QWORD *)(v229 + 40) = PushVariable;
                *(_QWORD *)(v229 + 48) = v224;
                JSC::B3::Procedure::addValueImpl(v228, (JSC::B3::Value *)v229);
                *(_QWORD *)&v444 = v229;
                v230 = (char **)(v227 + 8);
                v231 = *(unsigned int *)(v227 + 20);
                if ((_DWORD)v231 == *(_DWORD *)(v227 + 16))
                {
                  v236 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v230, v231 + 1, (unint64_t)&v444);
                  v231 = *(unsigned int *)(v227 + 20);
                  *(_QWORD *)(*(_QWORD *)(v227 + 8) + 8 * v231) = *(_QWORD *)v236;
                  v229 = v444;
                }
                else
                {
                  *(_QWORD *)&(*v230)[8 * v231] = v229;
                }
                v232 = v424;
                v233 = v431;
                *(_DWORD *)(v227 + 20) = v231 + 1;
                *(_QWORD *)(v229 + 32) = v227;
                *(_QWORD *)&v444 = PushVariable;
                v234 = *(unsigned int *)(v232 + 12);
                if ((_DWORD)v234 == *(_DWORD *)(v232 + 8))
                {
                  WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ICStatusContext *>(v232, (unint64_t)&v444);
                }
                else
                {
                  *(_QWORD *)(*(_QWORD *)v232 + 8 * v234) = PushVariable;
                  *(_DWORD *)(v232 + 12) = v234 + 1;
                }
                ++v222;
                v235 = v426;
                if (*((_DWORD *)v233 + 8))
                  v235 = 0;
              }
              while (v222 < *((unsigned int *)v235 + 3));
            }
            v185 = a2[14];
            v186 = a2;
            if (v185)
            {
              v186 = a2;
              do
                v186 = (_QWORD *)v186[13];
              while (v186[14]);
            }
            v187 = *((_DWORD *)v186 + 127);
            v188 = v430;
            if (v187 == -1)
            {
              __break(0xC471u);
              JUMPOUT(0x198D9BA14);
            }
            v189 = v187 + 1;
            *((_DWORD *)v186 + 127) = v187 + 1;
            if (*a2)
              v190 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
            else
              v190 = 0;
            v191 = a2;
            if (v185)
            {
              v191 = a2;
              do
                v191 = (_QWORD *)v191[13];
              while (v191[14]);
            }
            v192 = *((_DWORD *)v191 + 127);
            if (v192 == -1)
            {
              __break(0xC471u);
              JUMPOUT(0x198D9BA1CLL);
            }
            v193 = a2[11];
            v194 = (JSC::B3::Value *)a2[7];
            *((_DWORD *)v191 + 127) = v192 + 1;
            v195 = JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)v194, v190, v192 + 1);
            v196 = v195;
            *(_QWORD *)&v444 = v195;
            v197 = (_QWORD *)(v193 + 8);
            v198 = *(unsigned int *)(v193 + 20);
            if ((_DWORD)v198 == *(_DWORD *)(v193 + 16))
            {
              v274 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v193 + 8), v198 + 1, (unint64_t)&v444);
              v198 = *(unsigned int *)(v193 + 20);
              *(_QWORD *)(*(_QWORD *)(v193 + 8) + 8 * v198) = *(_QWORD *)v274;
              v199 = v444;
            }
            else
            {
              *(_QWORD *)(*v197 + 8 * v198) = v195;
              v199 = v195;
            }
            *(_DWORD *)(v193 + 20) = v198 + 1;
            *(_QWORD *)(v199 + 32) = v193;
            v200 = JSC::Wasm::OMGIRGenerator::framePointer((JSC::Wasm::OMGIRGenerator *)a2);
            v201 = WTF::fastMalloc((WTF *)0x50);
            *(_QWORD *)v201 = off_1E357F5F0;
            *(_DWORD *)(v201 + 8) = -1;
            *(_WORD *)(v201 + 12) = 70;
            *(_DWORD *)(v201 + 16) = 0;
            *(_BYTE *)(v201 + 20) = 2;
            *(_QWORD *)(v201 + 24) = v190;
            *(_QWORD *)(v201 + 32) = 0;
            JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v201, 2, v196, v200);
            *(_QWORD *)v201 = off_1E357E4C8;
            *(_DWORD *)(v201 + 40) = 36;
            *(_OWORD *)(v201 + 44) = v425;
            JSC::B3::Procedure::addValueImpl(v194, (JSC::B3::Value *)v201);
            *(_QWORD *)&v444 = v201;
            v209 = *(unsigned int *)(v193 + 20);
            if ((_DWORD)v209 == *(_DWORD *)(v193 + 16))
            {
              v275 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v193 + 8), v209 + 1, (unint64_t)&v444);
              v209 = *(unsigned int *)(v193 + 20);
              *(_QWORD *)(*(_QWORD *)(v193 + 8) + 8 * v209) = *(_QWORD *)v275;
              v201 = v444;
            }
            else
            {
              *(_QWORD *)(*v197 + 8 * v209) = v201;
            }
            v210 = v429;
            *(_DWORD *)(v193 + 20) = v209 + 1;
            *(_QWORD *)(v201 + 32) = v193;
            v211 = a2[3];
            v212 = *((_DWORD *)a2 + 125) + v210;
            v213 = *(unsigned int *)(v211 + 100);
            if (!(_DWORD)v213)
            {
              v333 = (uint64_t *)(v211 + 88);
              v202 = (unsigned int **)(a2[2] + 248);
              if (*(_DWORD *)(v211 + 96))
              {
                v411 = *v333;
                v412 = *v202;
                do
                  v413 = __ldaxr(v412);
                while (__stlxr(v413 + 1, v412));
                *(_QWORD *)(v411 + 8 * v213) = v412;
                ++*(_DWORD *)(v211 + 100);
              }
              else
              {
                WTF::Vector<WTF::Ref<JSC::Wasm::NameSection,WTF::RawPtrTraits<JSC::Wasm::NameSection>,WTF::DefaultRefDerefTraits<JSC::Wasm::NameSection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<JSC::Wasm::NameSection,WTF::RawPtrTraits<JSC::Wasm::NameSection>,WTF::DefaultRefDerefTraits<JSC::Wasm::NameSection>> const&>((uint64_t)v333, (unint64_t)v202);
              }
            }
            *(_QWORD *)&v444 = __PAIR64__(v189, v427);
            *((_QWORD *)&v444 + 1) = v212;
            v214 = *(unsigned int *)(v211 + 84);
            if ((_DWORD)v214 == *(_DWORD *)(v211 + 80))
            {
              WTF::Vector<JSC::Wasm::WasmCodeOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::WasmCodeOrigin>(v211 + 72, (unint64_t)&v444);
            }
            else
            {
              *(_OWORD *)(*(_QWORD *)(v211 + 72) + 16 * v214) = v444;
              ++*(_DWORD *)(v211 + 84);
            }
            *v188 = 0;
            v188[8] = 0;
          }
          goto LABEL_273;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v76);
        goto LABEL_74;
      }
    }
    else
    {
      v70 = *((_DWORD *)a2 + 127);
      if (v70 != -1)
      {
        v71 = v70 + 1;
        *((_DWORD *)a2 + 127) = v70 + 1;
        v72 = a2;
        goto LABEL_69;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x198D9BA04);
  }
LABEL_215:
  JSC::Wasm::OMGIRGenerator::createCallPatchpoint((uint64_t *)&v444, (uint64_t)a2, a2[11], 0, v457, (uint64_t)v470, a5);
  v276 = v444;
  if (*((_QWORD *)&v444 + 1))
  {
    do
      v277 = __ldaxr(*((unsigned int **)&v276 + 1));
    while (__stlxr(v277 + 1, *((unsigned int **)&v276 + 1)));
  }
  v278 = v445;
  if (v445)
  {
    v279 = v445 + 2;
    do
      v280 = __ldaxr(v279);
    while (__stlxr(v280 + 1, v279));
  }
  v281 = (uint64_t)v450;
  if (*((_QWORD *)&v276 + 1))
  {
    do
      v282 = __ldaxr(*((unsigned int **)&v276 + 1));
    while (__stlxr(v282 + 1, *((unsigned int **)&v276 + 1)));
  }
  v283 = *v451;
  v284 = *(_DWORD *)v452;
  v285 = *v453;
  v286 = *v454;
  if (v278)
  {
    v287 = v278 + 2;
    do
      v288 = __ldaxr(v287);
    while (__stlxr(v288 + 1, v287));
  }
  v289 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v289 + 8) = 1;
  *(_QWORD *)v289 = &off_1E35B5DA0;
  *(_QWORD *)(v289 + 16) = v281;
  if (*((_QWORD *)&v276 + 1))
  {
    do
      v297 = __ldaxr(*((unsigned int **)&v276 + 1));
    while (__stlxr(v297 + 1, *((unsigned int **)&v276 + 1)));
  }
  *(_QWORD *)(v289 + 24) = *((_QWORD *)&v276 + 1);
  *(_QWORD *)(v289 + 32) = v283;
  *(_DWORD *)(v289 + 40) = v284;
  *(_BYTE *)(v289 + 44) = v285;
  *(_DWORD *)(v289 + 48) = v286;
  if (v278)
  {
    v298 = v278 + 2;
    do
      v299 = __ldaxr(v298);
    while (__stlxr(v299 + 1, v298));
  }
  *(_QWORD *)(v289 + 56) = v278;
  v300 = *(unsigned int **)(v276 + 56);
  *(_QWORD *)(v276 + 56) = v289;
  if (v300)
  {
    v301 = v300 + 2;
    do
    {
      v302 = __ldaxr(v301);
      v303 = v302 - 1;
    }
    while (__stlxr(v303, v301));
    if (!v303)
    {
      atomic_store(1u, v300 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v300 + 8))(v300);
    }
  }
  if (v278)
  {
    v304 = v278 + 2;
    do
    {
      v305 = __ldaxr(v304);
      v306 = v305 - 1;
    }
    while (__stlxr(v306, v304));
    if (!v306)
    {
      atomic_store(1u, v278 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v278 + 8))(v278);
    }
  }
  if (*((_QWORD *)&v276 + 1))
  {
    do
    {
      v307 = __ldaxr(*((unsigned int **)&v276 + 1));
      v308 = v307 - 1;
    }
    while (__stlxr(v308, *((unsigned int **)&v276 + 1)));
    if (!v308)
    {
      atomic_store(1u, *((unsigned int **)&v276 + 1));
      WTF::fastFree(*((unint64_t *)&v276 + 1), v290, v291, v292, v293, v294, v295, v296);
    }
  }
  if (v278)
  {
    v309 = v278 + 2;
    do
    {
      v310 = __ldaxr(v309);
      v311 = v310 - 1;
    }
    while (__stlxr(v311, v309));
    if (!v311)
    {
      atomic_store(1u, v278 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v278 + 8))(v278);
    }
  }
  if (*((_QWORD *)&v276 + 1))
  {
    do
    {
      v312 = __ldaxr(*((unsigned int **)&v276 + 1));
      v313 = v312 - 1;
    }
    while (__stlxr(v313, *((unsigned int **)&v276 + 1)));
    if (!v313)
    {
      atomic_store(1u, *((unsigned int **)&v276 + 1));
      WTF::fastFree(*((unint64_t *)&v276 + 1), v290, v291, v292, v293, v294, v295, v296);
    }
  }
  if (*((_BYTE *)a2 + 32) == 1)
  {
    v314 = v444;
LABEL_255:
    *(_QWORD *)(v314 + 80) |= 0x800000uLL;
    goto LABEL_256;
  }
  v314 = v444;
  if (*(_BYTE *)(a2[2] + 112))
    goto LABEL_255;
LABEL_256:
  JSC::Wasm::OMGIRGenerator::addCall(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_0::operator()((char **)&v446, v314);
  v315 = a2[2];
  v316 = *(_QWORD *)(v315 + 328);
  v317 = (unint64_t *)(2 * v316);
  if (v316 < 0)
    v318 = 63;
  else
    v318 = *v317;
  if (v318 > v479)
  {
    v319 = v317 + 1;
    v320 = v316 >= 0 ? v319 : (_QWORD *)(v315 + 328);
    if (((*(_QWORD *)((char *)v320 + (((unint64_t)v479 >> 3) & 0x1FFFFFF8)) >> v479) & 1) != 0)
      JSC::Wasm::OMGIRGenerator::restoreWebAssemblyGlobalState((uint64_t)a2, v315 + 104, a2[59], a2[11]);
  }
  *a1 = 0;
  a1[8] = 0;
  v321 = v445;
  v445 = 0;
  if (v321)
  {
    v322 = v321 + 2;
    do
    {
      v323 = __ldaxr(v322);
      v324 = v323 - 1;
    }
    while (__stlxr(v324, v322));
    if (!v324)
    {
      atomic_store(1u, v321 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v321 + 8))(v321);
    }
  }
  v269 = (unsigned int *)*((_QWORD *)&v444 + 1);
  *((_QWORD *)&v444 + 1) = 0;
  if (v269)
  {
    do
    {
      v325 = __ldaxr(v269);
      v271 = --v325 == 0;
    }
    while (__stlxr(v325, v269));
LABEL_271:
    if (v271)
    {
      atomic_store(1u, v269);
      WTF::fastFree((unint64_t)v269, v202, v203, v204, v205, v206, v207, v208);
    }
  }
LABEL_273:
  v326 = v461;
  if (&v463 != (uint64_t *)v461 && v461 != 0)
  {
    v461 = 0;
    v462 = 0;
    WTF::fastFree((unint64_t)v326, v202, v203, v204, v205, v206, v207, v208);
  }
  v328 = v459;
  if (v459)
  {
    v459 = 0;
    v460 = 0;
    WTF::fastFree((unint64_t)v328, v202, v203, v204, v205, v206, v207, v208);
  }
  v329 = v467;
  if (&v469 != (uint64_t *)v467 && v467)
  {
    v467 = 0;
    v468 = 0;
    WTF::fastFree((unint64_t)v329, v202, v203, v204, v205, v206, v207, v208);
  }
  v330 = v465;
  if (v465)
  {
    v465 = 0;
    v466 = 0;
    WTF::fastFree((unint64_t)v330, v202, v203, v204, v205, v206, v207, v208);
  }
  v331 = (unint64_t)v473;
  if (&v475 != v473 && v473)
  {
    v473 = 0;
    v474 = 0;
    WTF::fastFree(v331, v202, v203, v204, v205, v206, v207, v208);
  }
  v332 = v471;
  if (v471)
  {
    v471 = 0;
    v472 = 0;
    WTF::fastFree(v332, v202, v203, v204, v205, v206, v207, v208);
  }
}

void JSC::Wasm::OMGIRGenerator::addCall(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_1::operator()(uint64_t *a1, JSC::B3::StackmapValue *this, unsigned int **a3, unsigned int **a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  char v16;
  int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  v8 = *((_DWORD *)this + 13);
  v9 = *a1;
  v10 = *(_QWORD *)a1[1];
  v43 = 8;
  v44 = 7;
  JSC::B3::StackmapValue::append((__int128 *)this, v10, (unint64_t)&v43);
  *((_QWORD *)this + 10) |= 0xC80000uLL;
  v11 = *((_DWORD *)this + 4);
  if (v11 < 0)
  {
    v41 = *(_QWORD *)(v9 + 56);
    v42 = v11 & 0x7FFFFFFF;
    if (v42 >= *(_DWORD *)(v41 + 44))
    {
      __break(0xC471u);
      return;
    }
    v12 = *(_DWORD *)(*(_QWORD *)(v41 + 32) + 16 * v42 + 12);
  }
  else
  {
    v12 = (v11 - 1) < 5;
  }
  v13 = *a3;
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  v15 = v12 + v8;
  v16 = *(_BYTE *)a1[2];
  v17 = *(_DWORD *)a1[3];
  v18 = *a4;
  if (v18)
  {
    v19 = v18 + 2;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
  }
  v21 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v21 + 8) = 1;
  *(_QWORD *)v21 = &off_1E35B5D78;
  *(_QWORD *)(v21 + 16) = v9;
  *(_DWORD *)(v21 + 24) = v15;
  if (v13)
  {
    do
      v29 = __ldaxr(v13);
    while (__stlxr(v29 + 1, v13));
  }
  *(_QWORD *)(v21 + 32) = v13;
  *(_BYTE *)(v21 + 40) = v16;
  *(_DWORD *)(v21 + 44) = v17;
  if (v18)
  {
    v30 = v18 + 2;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
  }
  *(_QWORD *)(v21 + 48) = v18;
  v32 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v21;
  if (!v32)
    goto LABEL_17;
  v33 = v32 + 2;
  do
  {
    v34 = __ldaxr(v33);
    v35 = v34 - 1;
  }
  while (__stlxr(v35, v33));
  if (!v35)
  {
    atomic_store(1u, v32 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
    if (v18)
      goto LABEL_18;
  }
  else
  {
LABEL_17:
    if (v18)
    {
LABEL_18:
      v36 = v18 + 2;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        atomic_store(1u, v18 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
      }
    }
  }
  if (v13)
  {
    do
    {
      v39 = __ldaxr(v13);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v13));
    if (!v40)
    {
      atomic_store(1u, v13);
      WTF::fastFree((unint64_t)v13, v22, v23, v24, v25, v26, v27, v28);
    }
  }
}

char **JSC::Wasm::OMGIRGenerator::addCall(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_0::operator()(char **result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  uint64_t v20;
  WTF *PushVariable;
  uint64_t v22;
  JSC::B3::Value *v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  JSC::B3::Value *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char **v42;
  uint64_t v44;

  v2 = *(_DWORD *)*result;
  if (v2 >= 0x80000000)
    v3 = 0x80000000;
  else
    v3 = *(_DWORD *)*result;
  if (v3)
  {
    v4 = result[1];
    if (v3 == 0x80000000)
    {
      v5 = *((_QWORD *)v4 + 7);
      v6 = v2 & 0x7FFFFFFF;
      if (v6 >= *(_DWORD *)(v5 + 44))
      {
        __break(0xC471u);
        goto LABEL_46;
      }
      v7 = result[2];
      if (*((_DWORD *)v7 + 8))
        v8 = 0;
      else
        v8 = v7 + 8;
      if (*((_DWORD *)v8 + 3))
      {
        v9 = 0;
        v10 = *(_QWORD *)(v5 + 32) + 16 * v6;
        v42 = result;
        while (1)
        {
          v11 = *(_QWORD *)v4
              ? *(_QWORD *)(*(_QWORD *)v4 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v4 + 14992) << 32)
              : 0;
          if (v9 >= *(unsigned int *)(v10 + 12))
            break;
          v12 = (uint64_t)result[3];
          v13 = *((_QWORD *)v4 + 11);
          v14 = (JSC::B3::Value *)*((_QWORD *)v4 + 7);
          v15 = v10;
          v16 = *(_DWORD *)(*(_QWORD *)v10 + 4 * v9);
          v17 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v17 + 8) = -1;
          *(_WORD *)(v17 + 12) = 84;
          *(_DWORD *)(v17 + 16) = v16;
          *(_BYTE *)(v17 + 20) = 1;
          *(_QWORD *)(v17 + 24) = v11;
          *(_QWORD *)(v17 + 32) = 0;
          *(_QWORD *)(v17 + 48) = a2;
          *(_QWORD *)v17 = &unk_1E357E128;
          *(_DWORD *)(v17 + 40) = v9;
          JSC::B3::Procedure::addValueImpl(v14, (JSC::B3::Value *)v17);
          v44 = v17;
          v18 = (char **)(v13 + 8);
          v19 = *(unsigned int *)(v13 + 20);
          if ((_DWORD)v19 == *(_DWORD *)(v13 + 16))
          {
            v31 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18, v19 + 1, (unint64_t)&v44);
            v19 = *(unsigned int *)(v13 + 20);
            *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8 * v19) = *(_QWORD *)v31;
            v20 = v44;
          }
          else
          {
            *(_QWORD *)&(*v18)[8 * v19] = v17;
            v20 = v17;
          }
          *(_DWORD *)(v13 + 20) = v19 + 1;
          *(_QWORD *)(v20 + 32) = v13;
          PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)v4, *(_DWORD *)(v17 + 16));
          v22 = *((_QWORD *)v4 + 11);
          v23 = (JSC::B3::Value *)*((_QWORD *)v4 + 7);
          if (*(_QWORD *)v4)
            v24 = *(_QWORD *)(*(_QWORD *)v4 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v4 + 14992) << 32);
          else
            v24 = 0;
          v25 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v25 + 8) = -1;
          *(_WORD *)(v25 + 12) = 9;
          *(_DWORD *)(v25 + 16) = 0;
          *(_BYTE *)(v25 + 20) = 1;
          *(_QWORD *)(v25 + 24) = v24;
          *(_QWORD *)(v25 + 32) = 0;
          *(_QWORD *)v25 = off_1E357F0F8;
          *(_QWORD *)(v25 + 40) = PushVariable;
          *(_QWORD *)(v25 + 48) = v17;
          JSC::B3::Procedure::addValueImpl(v23, (JSC::B3::Value *)v25);
          v44 = v25;
          v26 = (char **)(v22 + 8);
          v27 = *(unsigned int *)(v22 + 20);
          if ((_DWORD)v27 == *(_DWORD *)(v22 + 16))
          {
            v32 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26, v27 + 1, (unint64_t)&v44);
            v27 = *(unsigned int *)(v22 + 20);
            *(_QWORD *)(*(_QWORD *)(v22 + 8) + 8 * v27) = *(_QWORD *)v32;
            v25 = v44;
          }
          else
          {
            *(_QWORD *)&(*v26)[8 * v27] = v25;
          }
          v10 = v15;
          *(_DWORD *)(v22 + 20) = v27 + 1;
          *(_QWORD *)(v25 + 32) = v22;
          v44 = (uint64_t)PushVariable;
          v28 = *(unsigned int *)(v12 + 12);
          if ((_DWORD)v28 == *(_DWORD *)(v12 + 8))
          {
            v33 = (_QWORD *)WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, v28 + 1, (unint64_t)&v44);
            v28 = *(unsigned int *)(v12 + 12);
            *(_QWORD *)(*(_QWORD *)v12 + 8 * v28) = *v33;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v12 + 8 * v28) = PushVariable;
          }
          result = v42;
          *(_DWORD *)(v12 + 12) = v28 + 1;
          ++v9;
          v29 = v42[2];
          if (*((_DWORD *)v29 + 8))
            v30 = 0;
          else
            v30 = v29 + 8;
          if (v9 >= *((unsigned int *)v30 + 3))
            return result;
        }
        __break(0xC471u);
LABEL_46:
        JUMPOUT(0x198D9C058);
      }
    }
    else
    {
      v34 = (uint64_t)result[3];
      v35 = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)result[1], *(_DWORD *)(a2 + 16));
      v36 = *((_QWORD *)v4 + 11);
      v37 = (JSC::B3::Value *)*((_QWORD *)v4 + 7);
      if (*(_QWORD *)v4)
        v38 = *(_QWORD *)(*(_QWORD *)v4 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v4 + 14992) << 32);
      else
        v38 = 0;
      v39 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v39 + 8) = -1;
      *(_WORD *)(v39 + 12) = 9;
      *(_DWORD *)(v39 + 16) = 0;
      *(_BYTE *)(v39 + 20) = 1;
      *(_QWORD *)(v39 + 24) = v38;
      *(_QWORD *)(v39 + 32) = 0;
      *(_QWORD *)v39 = off_1E357F0F8;
      *(_QWORD *)(v39 + 40) = v35;
      *(_QWORD *)(v39 + 48) = a2;
      JSC::B3::Procedure::addValueImpl(v37, (JSC::B3::Value *)v39);
      v44 = v39;
      result = (char **)(v36 + 8);
      v40 = *(unsigned int *)(v36 + 20);
      if ((_DWORD)v40 == *(_DWORD *)(v36 + 16))
      {
        result = (char **)WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v40 + 1, (unint64_t)&v44);
        v40 = *(unsigned int *)(v36 + 20);
        *(_QWORD *)(*(_QWORD *)(v36 + 8) + 8 * v40) = *result;
        v39 = v44;
      }
      else
      {
        *(_QWORD *)&(*result)[8 * v40] = v39;
      }
      *(_DWORD *)(v36 + 20) = v40 + 1;
      *(_QWORD *)(v39 + 32) = v36;
      v44 = (uint64_t)v35;
      v41 = *(unsigned int *)(v34 + 12);
      if ((_DWORD)v41 == *(_DWORD *)(v34 + 8))
      {
        result = (char **)WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, v41 + 1, (unint64_t)&v44);
        v41 = *(unsigned int *)(v34 + 12);
        *(_QWORD *)(*(_QWORD *)v34 + 8 * v41) = *result;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)v34 + 8 * v41) = v35;
      }
      *(_DWORD *)(v34 + 12) = v41 + 1;
    }
  }
  return result;
}

void JSC::Wasm::OMGIRGenerator::addCall(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_2::operator()(uint64_t *a1, uint64_t a2, unsigned int *a3, unsigned int **a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  char v10;
  int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;

  v6 = *a1;
  if (a3)
  {
    do
      v7 = __ldaxr(a3);
    while (__stlxr(v7 + 1, a3));
  }
  v8 = *(_QWORD *)a1[1];
  v9 = *(_DWORD *)a1[2];
  v10 = *(_BYTE *)a1[3];
  v11 = *(_DWORD *)a1[4];
  v12 = *a4;
  if (*a4)
  {
    v13 = v12 + 2;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  v15 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)v15 = &off_1E35B5DA0;
  *(_QWORD *)(v15 + 16) = v6;
  if (a3)
  {
    do
      v23 = __ldaxr(a3);
    while (__stlxr(v23 + 1, a3));
  }
  *(_QWORD *)(v15 + 24) = a3;
  *(_QWORD *)(v15 + 32) = v8;
  *(_DWORD *)(v15 + 40) = v9;
  *(_BYTE *)(v15 + 44) = v10;
  *(_DWORD *)(v15 + 48) = v11;
  if (v12)
  {
    v24 = v12 + 2;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
  }
  *(_QWORD *)(v15 + 56) = v12;
  v26 = *(unsigned int **)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v15;
  if (!v26)
    goto LABEL_15;
  v27 = v26 + 2;
  do
  {
    v28 = __ldaxr(v27);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, v27));
  if (!v29)
  {
    atomic_store(1u, v26 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
    if (!v12)
      goto LABEL_20;
  }
  else
  {
LABEL_15:
    if (!v12)
      goto LABEL_20;
  }
  v30 = v12 + 2;
  do
  {
    v31 = __ldaxr(v30);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v30));
  if (!v32)
  {
    atomic_store(1u, v12 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
  }
LABEL_20:
  if (a3)
  {
    do
    {
      v33 = __ldaxr(a3);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, a3));
    if (!v34)
    {
      atomic_store(1u, a3);
      WTF::fastFree((unint64_t)a3, v16, v17, v18, v19, v20, v21, v22);
    }
  }
}

void JSC::Wasm::OMGIRGenerator::addCallIndirect(_BYTE *a1, JSC::Wasm::OMGIRGenerator *this, unsigned int a3, JSC::Wasm::TypeInformation *a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;
  JSC::B3::Variable *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  JSC::B3::Value *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  JSC::B3::Value *v44;
  unint64_t v45;
  uint64_t v46;
  JSC::B3::BasicBlock *v47;
  JSC::B3::Value *v48;
  unint64_t v49;
  uint64_t v50;
  JSC::B3::Value *v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  JSC::B3::BasicBlock *v60;
  JSC::B3::Value *v61;
  unint64_t v62;
  JSC::B3::Value *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  JSC::B3::Value *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  _BYTE *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  JSC::B3::Value *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  JSC::B3::Value *v127;
  uint64_t v128;
  JSC::B3::Value *v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  JSC::B3::Value *v133;
  JSC::B3::Value *v134;
  JSC::B3::Value *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t *v161;
  int v162;
  JSC::B3::Value *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  JSC::B3::Value *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned __int8 **v172;
  _BYTE *v173;
  unsigned int *v174;
  uint64_t *v175;
  char v176;
  JSC::Wasm::OMGIRGenerator *v177;
  char v178;

  v7 = *(unsigned int *)(a5 + 12);
  if (!(_DWORD)v7)
  {
    __break(0xC471u);
    JUMPOUT(0x198D9CE30);
  }
  v15 = *(JSC::B3::Variable **)(*(_QWORD *)a5 + 8 * v7 - 8);
  *(_DWORD *)(a5 + 12) = v7 - 1;
  v16 = JSC::Wasm::OMGIRGenerator::get(this, v15);
  v17 = JSC::Wasm::TypeDefinition::expand((unint64_t)a4);
  v18 = *(_DWORD *)(a5 + 12);
  if (*((_DWORD *)this + 124) > v18)
    v18 = *((_DWORD *)this + 124);
  *((_DWORD *)this + 124) = v18;
  if (*(_QWORD *)this)
    v19 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v19 = 0;
  v20 = 120 * *((unsigned int *)this + 125) + 8 * a3 + 152;
  if (v20 >> 31
    || (v172 = (unsigned __int8 **)v17,
        v173 = a1,
        v21 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,int>(*((JSC::B3::BasicBlock **)this + 11), *((JSC::B3::Value **)this + 7), v19, *((_QWORD *)this + 59), v20), v22 = *((_QWORD *)this + 2), *(_DWORD *)(v22 + 204) <= a3))
  {
    __break(0xC471u);
    JUMPOUT(0x198D9CD28);
  }
  v23 = v21;
  v24 = *(_QWORD *)(v22 + 192);
  v25 = *(_QWORD *)(v24 + 48 * a3 + 4);
  v170 = a6;
  if ((v25 & 0xFF00000000) == 0 || *(_DWORD *)(v24 + 48 * a3) != (_DWORD)v25)
  {
    if (*(_QWORD *)this)
      v93 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
    else
      v93 = 0;
    v27 = (uint64_t)JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Value *,int>(*((JSC::B3::BasicBlock **)this + 11), *((JSC::B3::Value **)this + 7), 67, 1, v93, v21, 4);
    goto LABEL_13;
  }
  if (*(_QWORD *)this)
    v26 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v26 = 0;
  v27 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 1u, *(_QWORD *)(v24 + 48 * a3 + 4), v26, 1);
  if (*(_BYTE *)(v24 + 48 * a3 + 12)
    || ((v154 = *((_QWORD *)this + 11), v155 = *((_QWORD *)this + 7), !*(_QWORD *)this)
      ? (v156 = 0)
      : (v156 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this
                                                                                               + 14992) << 32)),
        v157 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 2u, 0x38uLL, 0, 0),
        (v29 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v154, v155, 14, v156, v23, v157)) == 0))
  {
LABEL_13:
    if (*(_QWORD *)this)
      v28 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
    else
      v28 = 0;
    v29 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,int>(*((JSC::B3::BasicBlock **)this + 11), *((JSC::B3::Value **)this + 7), v28, v23, 48);
  }
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(*((_QWORD *)this + 11), *((_QWORD *)this + 7), 59, v32, v16, v27);
  v34 = JSC::B3::BasicBlock::appendNew<JSC::B3::CheckValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value *>(v30, v31, v32, v33);
  v177 = this;
  JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addCallIndirect(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_0>(v34, (uint64_t *)&v177);
  if (*(_QWORD *)this)
    v35 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v35 = 0;
  v36 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(*((_QWORD *)this + 11), *((JSC::B3::Value **)this + 7), 43, v35, v16);
  v37 = *((_QWORD *)this + 11);
  v38 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v39 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v39 = 0;
  v40 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 2u, 0x30uLL, 0, 0);
  v41 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v37, v38, 16, v39, (uint64_t)v36, v40);
  v42 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v37, v38, 14, v39, v29, v41);
  if (*(_QWORD *)this)
    v43 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v43 = 0;
  v44 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Value *,int>(*((JSC::B3::BasicBlock **)this + 11), *((JSC::B3::Value **)this + 7), 67, 2, v43, v42, 0);
  if (*(_QWORD *)this)
    v45 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v45 = 0;
  v46 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,int>(*((JSC::B3::BasicBlock **)this + 11), *((JSC::B3::Value **)this + 7), v45, v42, 8);
  v47 = (JSC::B3::BasicBlock *)*((_QWORD *)this + 11);
  v48 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  v171 = v46;
  if (*(_QWORD *)this)
    v49 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v49 = 0;
  v50 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,int>(v47, v48, v49, v42, 16);
  v51 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::MemoryValue*>(v47, v48, v49, v50);
  if (*(_QWORD *)this)
    v52 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v52 = 0;
  v166 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,int>(*((JSC::B3::BasicBlock **)this + 11), *((JSC::B3::Value **)this + 7), v52, v42, 24);
  if (*(_QWORD *)this)
    v53 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v53 = 0;
  v169 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,int>(*((JSC::B3::BasicBlock **)this + 11), *((JSC::B3::Value **)this + 7), v53, v42, 32);
  v54 = a7;
  if (*(_QWORD *)this)
    v55 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v55 = 0;
  v168 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,int>(*((JSC::B3::BasicBlock **)this + 11), *((JSC::B3::Value **)this + 7), v55, v42, 40);
  v57 = JSC::B3::Procedure::addBlock(v56, *((JSC::B3::Procedure **)this + 7), 1.0);
  v59 = JSC::B3::Procedure::addBlock(v58, *((JSC::B3::Procedure **)this + 7), 1.0);
  v60 = (JSC::B3::BasicBlock *)*((_QWORD *)this + 11);
  v61 = v51;
  if (*(_QWORD *)this)
    v62 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v62 = 0;
  v63 = JSC::B3::Procedure::add<JSC::B3::Const64Value,JSC::B3::Origin,unsigned long>(*((JSC::B3::Value **)this + 7), v62, (uint64_t)a4);
  JSC::B3::BasicBlock::append(v60, v63);
  if (*(_QWORD *)this)
    v64 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v64 = 0;
  v65 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(*((_QWORD *)this + 11), *((_QWORD *)this + 7), 51, v64, (uint64_t)v44, (uint64_t)v63);
  v67 = *((_QWORD *)this + 11);
  v68 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v69 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v69 = 0;
  v177 = (JSC::Wasm::OMGIRGenerator *)v57;
  v178 = 0;
  v175 = v59;
  v176 = 1;
  JSC::B3::BasicBlock::appendNewControlValue(v67, v68, 155, v69, v65, (uint64_t *)&v177, (uint64_t *)&v175, v66);
  *((_QWORD *)this + 11) = v59;
  v70 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v71 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v71 = 0;
  v72 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 2u, 0, 0, 0);
  v73 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t)v59, (uint64_t)v70, 51, v71, (uint64_t)v44, v72);
  v74 = JSC::B3::BasicBlock::appendNew<JSC::B3::CheckValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value *>((uint64_t)v59, v70, v71, v73);
  v177 = this;
  JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addCallIndirect(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_1>(v74, (uint64_t *)&v177);
  v79 = JSC::B3::Procedure::addBlock(v75, *((JSC::B3::Procedure **)this + 7), 1.0);
  if (!BYTE2(dword_1ECF4C7B0) || JSC::Wasm::TypeDefinition::isFinalType(a4))
  {
    v80 = *((_QWORD *)this + 11);
    v81 = *((_QWORD *)this + 7);
    v82 = v54;
    v83 = v173;
    v84 = (uint64_t)v61;
    if (*(_QWORD *)this)
      v85 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
    else
      v85 = 0;
    v86 = v169;
    v87 = v170;
    v88 = (WTF *)v168;
    v177 = (JSC::Wasm::OMGIRGenerator *)v79;
    v178 = 0;
    JSC::B3::BasicBlock::appendNewControlValue(v80, v81, 154, v85, (uint64_t *)&v177, v76, v77, v78);
  }
  else
  {
    if (*(_QWORD *)this)
      v94 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
    else
      v94 = 0;
    v164 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Value *,unsigned int>(*((_QWORD *)this + 11), *((JSC::B3::Procedure **)this + 7), v94, v166);
    if (*(_QWORD *)this)
      v95 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
    else
      v95 = 0;
    v163 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(*((_QWORD *)this + 11), *((JSC::B3::Value **)this + 7), 43, v95, v164);
    v96 = *((_QWORD *)this + 11);
    v97 = (JSC::B3::Value *)*((_QWORD *)this + 7);
    if (*(_QWORD *)this)
      v98 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
    else
      v98 = 0;
    v99 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 2u, 0x10uLL, 0, 0);
    v167 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v96, v97, 14, v98, v166, v99);
    JSC::Wasm::TypeInformation::getCanonicalRTT(a4, v100, v101, v102, v103, v104, v105, &v174);
    v161 = JSC::B3::Procedure::addBlock(v106, *((JSC::B3::Procedure **)this + 7), 1.0);
    v107 = *((_QWORD *)this + 11);
    v108 = *((_QWORD *)this + 7);
    if (*(_QWORD *)this)
      v109 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
    else
      v109 = 0;
    v82 = v54;
    v110 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 1u, 0, 0, 0);
    v111 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v107, v108, 57, v109, v164, v110);
    v177 = (JSC::Wasm::OMGIRGenerator *)v161;
    v178 = 0;
    v175 = v79;
    v176 = 1;
    JSC::B3::BasicBlock::appendNewControlValue(v107, v108, 155, v109, v111, (uint64_t *)&v177, (uint64_t *)&v175, v112);
    *((_QWORD *)this + 11) = v161;
    v114 = JSC::B3::Procedure::addBlock(v113, *((JSC::B3::Procedure **)this + 7), 1.0);
    v118 = (uint64_t)v114;
    v119 = v174[2];
    v120 = *((_QWORD *)this + 11);
    v121 = *((_QWORD *)this + 7);
    v122 = *(_QWORD *)this;
    v162 = v119;
    if ((_DWORD)v119)
    {
      if (v122)
        v123 = *(_QWORD *)(v122 + 15000) | ((unint64_t)*(unsigned __int8 *)(v122 + 14992) << 32);
      else
        v123 = 0;
      v124 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 1u, v119, 0, 0);
      v125 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v120, v121, 57, v123, v164, v124);
      v177 = (JSC::Wasm::OMGIRGenerator *)v118;
      v178 = 0;
      v175 = v79;
      v176 = 1;
      JSC::B3::BasicBlock::appendNewControlValue(v120, v121, 155, v123, v125, (uint64_t *)&v177, (uint64_t *)&v175, v126);
    }
    else
    {
      if (v122)
        v158 = *(_QWORD *)(v122 + 15000) | ((unint64_t)*(unsigned __int8 *)(v122 + 14992) << 32);
      else
        v158 = 0;
      v177 = (JSC::Wasm::OMGIRGenerator *)v114;
      v178 = 0;
      JSC::B3::BasicBlock::appendNewControlValue(v120, v121, 154, v158, (uint64_t *)&v177, v115, v116, v117);
    }
    *((_QWORD *)this + 11) = v118;
    if (*(_QWORD *)this)
      v160 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
    else
      v160 = 0;
    v165 = v118;
    v127 = (JSC::B3::Value *)*((_QWORD *)this + 7);
    v159 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 2u, 8uLL, 0, 0);
    v128 = *((_QWORD *)this + 11);
    v129 = (JSC::B3::Value *)*((_QWORD *)this + 7);
    if (*(_QWORD *)this)
      v130 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
    else
      v130 = 0;
    if (v162)
      v131 = v174[2] + 1;
    else
      v131 = 1;
    v132 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 2u, v131, 0, 0);
    v133 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v128, v129, 15, v130, (uint64_t)v163, v132);
    v134 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v165, v127, 16, v160, v159, (uint64_t)v133);
    v135 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v165, v127, 14, v160, (uint64_t)v167, (uint64_t)v134);
    if (*(_QWORD *)this)
      v136 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
    else
      v136 = 0;
    v137 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *>(*((_QWORD *)this + 11), *((JSC::B3::Procedure **)this + 7), 2, v136, (uint64_t)v135);
    v138 = *((_QWORD *)this + 11);
    v139 = *((_QWORD *)this + 7);
    if (*(_QWORD *)this)
      v140 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
    else
      v140 = 0;
    v141 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 2u, (unint64_t)v174, 0, 0);
    v142 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v138, v139, 51, v140, v137, v141);
    v177 = (JSC::Wasm::OMGIRGenerator *)v57;
    v178 = 0;
    v175 = v79;
    v176 = 1;
    JSC::B3::BasicBlock::appendNewControlValue(v138, v139, 155, v140, v142, (uint64_t *)&v177, (uint64_t *)&v175, v143);
    v83 = v173;
    v151 = v174;
    v174 = 0;
    v84 = (uint64_t)v61;
    v86 = v169;
    v87 = v170;
    v88 = (WTF *)v168;
    if (v151)
    {
      do
      {
        v152 = __ldaxr(v151);
        v153 = v152 - 1;
      }
      while (__stlxr(v153, v151));
      if (!v153)
      {
        atomic_store(1u, v151);
        WTF::fastFree((unint64_t)v151, v144, v145, v146, v147, v148, v149, v150);
      }
    }
  }
  *((_QWORD *)this + 11) = v79;
  if (*(_QWORD *)this)
    v89 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v89 = 0;
  v90 = JSC::B3::BasicBlock::appendNew<JSC::B3::PatchpointValue,JSC::B3::TypeKind,JSC::B3::Origin>((uint64_t)v79, *((JSC::B3::Value **)this + 7), 0, v89);
  v177 = this;
  JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addCallIndirect(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_2>(v90, (uint64_t *)&v177);
  *(_BYTE *)(v90 + 112) = 1;
  *((_QWORD *)this + 11) = v57;
  if (*(_QWORD *)this)
    v91 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v91 = 0;
  v92 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *>((uint64_t)v57, *((JSC::B3::Procedure **)this + 7), 2, v91, v171);
  JSC::Wasm::OMGIRGenerator::emitIndirectCall(v83, (JSC::B3::Procedure **)this, v86, v92, v84, v88, v172, a5, v87, v82);
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addCallIndirect(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = *a2;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E35B6760;
  *(_QWORD *)(v4 + 16) = v5;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

JSC::B3::Value *JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::MemoryValue*>(JSC::B3::BasicBlock *a1, JSC::B3::Value *a2, uint64_t a3, uint64_t a4)
{
  JSC::B3::Value *v6;
  JSC::B3::Value *v7;

  JSC::B3::Value::allocate<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::MemoryValue*>(a3, a4);
  v7 = v6;
  JSC::B3::Procedure::addValueImpl(a2, v6);
  JSC::B3::BasicBlock::append(a1, v7);
  return v7;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addCallIndirect(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_1>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = *a2;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E35B6788;
  *(_QWORD *)(v4 + 16) = v5;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Value *,unsigned int>(uint64_t a1, JSC::B3::Procedure *this, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t casual;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v8)
  {
    v9 = (_BYTE *)(v8 + 9040);
    *(_BYTE *)(v8 + 9040) = 1;
    v10 = *(unsigned int *)(v8 + 9056);
    if ((_DWORD)v10)
    {
      *(_DWORD *)(v8 + 9056) = v10 - *(_DWORD *)(v8 + 9060);
      casual = *(_QWORD *)(v8 + 9048) - v10;
LABEL_6:
      *v9 = 0;
      goto LABEL_7;
    }
    v12 = *(_QWORD *)(v8 + 9080);
    v13 = *(_QWORD *)(v8 + 9064);
    if (v12)
    {
LABEL_5:
      v14 = __clz(v12);
      *(_QWORD *)(v8 + 9080) = v12 & ~(0x8000000000000000 >> v14);
      casual = v13 + 16 * v14;
      goto LABEL_6;
    }
    if (*(_BYTE *)(v8 + 9045) == 6)
    {
      v20 = *(_DWORD *)(v8 + 9076);
      v21 = *(unsigned int *)(v8 + 9072);
      if (v21 < v20)
      {
        *(_QWORD *)&v9[8 * v21 + 56] = 0;
        v22 = (unint64_t *)(v8 + 8 * v21 + 9104);
        v23 = v20 - 1 - v21;
        while (v23)
        {
          v13 += 1024;
          v25 = *v22++;
          v24 = v25;
          LODWORD(v21) = v21 + 1;
          --v23;
          if (v25)
          {
            v12 = __rbit64(v24);
            *(_DWORD *)(v8 + 9072) = v21;
            *(_QWORD *)(v8 + 9064) = v13;
            goto LABEL_5;
          }
        }
        *(_DWORD *)(v8 + 9072) = v20;
      }
    }
    *v9 = 0;
  }
  casual = bmalloc_allocate_casual(72, 1);
LABEL_7:
  *(_DWORD *)(casual + 8) = -1;
  *(_WORD *)(casual + 12) = 67;
  *(_DWORD *)(casual + 16) = 1;
  *(_BYTE *)(casual + 20) = 1;
  *(_QWORD *)(casual + 24) = a3;
  *(_QWORD *)(casual + 32) = 0;
  *(_QWORD *)(casual + 64) = a4;
  *(_QWORD *)casual = off_1E357E4C8;
  *(_DWORD *)(casual + 40) = 8;
  *(_OWORD *)(casual + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(this, (JSC::B3::Value *)casual);
  v26 = casual;
  v15 = (char **)(a1 + 8);
  v16 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v16 == *(_DWORD *)(a1 + 16))
  {
    v19 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v16 + 1, (unint64_t)&v26);
    v16 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v16) = *(_QWORD *)v19;
    v17 = v26;
  }
  else
  {
    *(_QWORD *)&(*v15)[8 * v16] = casual;
    v17 = casual;
  }
  *(_DWORD *)(a1 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = a1;
  return casual;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addCallIndirect(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_2>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = *a2;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E35B67B0;
  *(_QWORD *)(v4 + 16) = v5;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

_QWORD *JSC::Wasm::OMGIRGenerator::unify(JSC::Wasm::OMGIRGenerator *this, JSC::B3::Value *a2, JSC::B3::Variable *a3)
{
  uint64_t v5;
  JSC::B3::Value *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v5 = *((_QWORD *)this + 11);
  v6 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v7 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v7 = 0;
  v8 = WTF::fastMalloc((WTF *)0x30);
  v9 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v8 + 8) = -1;
  *(_WORD *)(v8 + 12) = 10;
  *(_DWORD *)(v8 + 16) = v9;
  *(_BYTE *)(v8 + 20) = 0;
  *(_QWORD *)(v8 + 24) = v7;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)v8 = off_1E357F0F8;
  *(_QWORD *)(v8 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v6, (JSC::B3::Value *)v8);
  v17 = v8;
  v10 = (_QWORD *)(v5 + 8);
  v11 = *(unsigned int *)(v5 + 20);
  if ((_DWORD)v11 == *(_DWORD *)(v5 + 16))
  {
    v16 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v5 + 8), v11 + 1, (unint64_t)&v17);
    v11 = *(unsigned int *)(v5 + 20);
    *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v11) = *(_QWORD *)v16;
    v12 = v17;
  }
  else
  {
    *(_QWORD *)(*v10 + 8 * v11) = v8;
    v12 = v8;
  }
  *(_DWORD *)(v5 + 20) = v11 + 1;
  *(_QWORD *)(v12 + 32) = v5;
  v13 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 152;
  *(_DWORD *)(v13 + 16) = 0;
  *(_BYTE *)(v13 + 20) = 1;
  *(_QWORD *)(v13 + 24) = v7;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = &unk_1E357EDA0;
  *(_QWORD *)(v13 + 40) = a2;
  *(_QWORD *)(v13 + 48) = v8;
  result = JSC::B3::Procedure::addValueImpl(v6, (JSC::B3::Value *)v13);
  v17 = v13;
  v15 = *(unsigned int *)(v5 + 20);
  if ((_DWORD)v15 == *(_DWORD *)(v5 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v5 + 8), v15 + 1, (unint64_t)&v17);
    v15 = *(unsigned int *)(v5 + 20);
    *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v15) = *result;
    v13 = v17;
  }
  else
  {
    *(_QWORD *)(*v10 + 8 * v15) = v13;
  }
  *(_DWORD *)(v5 + 20) = v15 + 1;
  *(_QWORD *)(v13 + 32) = v5;
  return result;
}

void JSC::Wasm::parseAndCompileOMG(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10, unsigned int a11, __int16 a12, int a13, int a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::B3::Procedure **v24;
  JSC::B3::Procedure **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  JSC::CCallHelpers *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  JSC::B3::Procedure *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  JSC::B3::Procedure **v71;
  JSC::B3::Procedure **v72;
  double v73;
  float v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  JSC::B3::Procedure *v96;
  JSC::B3::Procedure *v97;
  JSC::B3::Procedure *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  JSC::CCallHelpers *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  JSC::B3::Procedure *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  void *v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  BOOL v179;
  int v180[2];
  uint64_t v181;
  JSC::B3::Procedure *v182[1877];
  JSC::B3::Procedure *v183[13];
  JSC::B3::Procedure **v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  int v188;
  JSC::Wasm::InternalFunction *v189;
  uint64_t v190[2];
  double v191[6];

  v14 = MEMORY[0x1E0C80A78](a1, a2);
  v16 = v15;
  v177 = v17;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v176 = v14;
  JSC::CompilerTimingScope::CompilerTimingScope(v191, (uint64_t)"B3", 3, (uint64_t)"Total OMG compilation", 22);
  JSC::Wasm::Thunks::stub((uint64_t *)JSC::Wasm::thunks, (void (*)(uint64_t))JSC::Wasm::catchInWasmThunkGenerator, v28, v29, v30, v31, v32, v190);
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v190, v33, v34, v35, v36, v37, v38, v39);
  v40 = WTF::fastMalloc((WTF *)0x50);
  *(_OWORD *)v40 = 0u;
  *(_OWORD *)(v40 + 16) = 0u;
  *(_OWORD *)(v40 + 32) = 0u;
  *(_OWORD *)(v40 + 48) = 0u;
  *(_OWORD *)(v40 + 64) = 0u;
  v189 = (JSC::Wasm::InternalFunction *)v40;
  v41 = (JSC::CCallHelpers *)WTF::fastMalloc((WTF *)0x160);
  v182[0] = JSC::CCallHelpers::CCallHelpers(v41, 0);
  std::unique_ptr<JSC::CCallHelpers>::operator=[abi:sn180100]((uint64_t *)(v27 + 8), (uint64_t *)v182, v42, v43, v44, v45, v46, v47);
  std::unique_ptr<JSC::CCallHelpers>::~unique_ptr[abi:sn180100]((uint64_t *)v182, v48, v49, v50, v51, v52, v53, v54);
  v55 = (uint64_t)g_config;
  v178 = v21;
  if (HIBYTE(dword_1ECF4C7B0))
  {
    if (HIBYTE(word_1ECF4C79E))
    {
      v56 = 1;
    }
    else
    {
      if (*(_DWORD *)(v16 + 132) <= a11)
      {
        __break(0xC471u);
LABEL_37:
        JUMPOUT(0x198D9D818);
      }
      v56 = *(_BYTE *)(*(_QWORD *)(v16 + 120) + 40 * a11 + 32) & 1;
    }
  }
  else
  {
    v56 = 0;
  }
  v57 = (JSC::B3::Procedure *)WTF::fastMalloc((WTF *)0xD8);
  v182[0] = (JSC::B3::Procedure *)JSC::B3::Procedure::Procedure(v57, v56);
  std::unique_ptr<JSC::B3::Procedure>::operator=[abi:sn180100]((JSC::B3::Procedure **)(v27 + 24), v182, v58, v59, v60, v61, v62, v63);
  std::unique_ptr<JSC::B3::Procedure>::~unique_ptr[abi:sn180100](v182, v64, v65, v66, v67, v68, v69, v70);
  v71 = *(JSC::B3::Procedure ***)(v27 + 24);
  if (JSC::Wasm::shouldDumpIRFor((JSC::Wasm *)(*(_DWORD *)(v16 + 36) + a11)))
    goto LABEL_30;
  while (1)
  {
    if (*(_BYTE *)(v55 + 0x5E2))
      JSC::B3::Procedure::setNeedsPCToOriginMap((uint64_t)v71);
    JSC::B3::Procedure::setOriginPrinter<JSC::Wasm::parseAndCompileOMG(JSC::Wasm::CompilationContext &,JSC::Wasm::OptimizingJITCallee &,JSC::Wasm::FunctionData const&,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::Wasm::CalleeGroup &,JSC::Wasm::ModuleInformation const&,JSC::MemoryMode,JSC::Wasm::CompilationMode,unsigned int,std::optional<BOOL>,unsigned int,JSC::Wasm::TierUpCount *)::$_0>((uint64_t)v71);
    *((_BYTE *)v71 + 208) = 0;
    JSC::B3::Procedure::setOptLevel((uint64_t)v71, *(_DWORD *)(v55 + 0x6D0));
    v55 = 1;
    *((_BYTE *)v71[20] + 198) = 1;
    v72 = v25;
    JSC::Wasm::OMGIRGenerator::OMGIRGenerator((uint64_t)v183, v177, v16, (uint64_t)v25, (uint64_t)v71, v19, v40 + 72, a9, a10, a11, a12, 0, a14);
    JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::FunctionParser((uint64_t)v182, (uint64_t)v183, *(_QWORD *)(v23 + 16), *(unsigned int *)(v23 + 28), v178, v16);
    JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parse((JSC::Wasm *)v180, (uint64_t)v182, v73, v74);
    if ((_BYTE)v181)
    {
      v175 = *(_QWORD *)v180;
      *(_QWORD *)v180 = 0;
      *(_QWORD *)v176 = v175;
      *(_DWORD *)(v176 + 8) = 1;
      std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v180, v75, v76, v77, v78, v79, v80, v81);
      goto LABEL_20;
    }
    std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v180, v75, v76, v77, v78, v79, v80, v81);
    JSC::Wasm::OMGIRGenerator::insertEntrySwitch((JSC::Wasm::OMGIRGenerator *)v183, v82, v83, v84, v85, v86, v87, v88);
    JSC::Wasm::OMGIRGenerator::insertConstants((JSC::Wasm::OMGIRGenerator *)v183);
    JSC::B3::Procedure::resetReachability((JSC::B3::Procedure *)v71, v89, v90, v91, v92, v93, v94, v95);
    JSC::B3::estimateStaticExecutionCounts((JSC::B3 *)v71, v96);
    JSC::B3::fixSSA(v71, v97);
    if (JSC::shouldDumpDisassemblyFor(a10))
    {
      v160 = (uint64_t)v71[20];
      v161 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
      *v161 = 0;
      v161[1] = 0;
      v161[2] = 0;
      v161[3] = -1;
      v161[4] = -1;
      *(_QWORD *)v180 = v161;
      JSC::B3::Air::Code::setDisassembler(v160, (uint64_t *)v180, v162, v163, v164, v165, v166, v167);
      std::unique_ptr<JSC::B3::Air::Disassembler>::~unique_ptr[abi:sn180100]((unint64_t *)v180, v168, v169, v170, v171, v172, v173, v174);
    }
    JSC::B3::prepareForGeneration(v71, v98, v99, v100, v101, v102, v103, v104);
    JSC::B3::generate((JSC::B3::Air::GenerateAndAllocateRegisters ***)v71, *(JSC::B3::Procedure **)(v27 + 8), v105, v106, v107, v108, v109, v110);
    v111 = v71[19];
    v71[19] = 0;
    *(_QWORD *)v180 = v111;
    std::unique_ptr<JSC::OpaqueByproducts>::operator=[abi:sn180100]((unint64_t *)(v27 + 16), (unint64_t *)v180, v112, v113, v114, v115, v116, v117);
    std::unique_ptr<JSC::OpaqueByproducts>::~unique_ptr[abi:sn180100]((unint64_t *)v180, v118, v119, v120, v121, v122, v123, v124);
    JSC::B3::Procedure::calleeSaveRegisterAtOffsetList((JSC::B3::Procedure *)v71, v180);
    v132 = *(_QWORD *)v180;
    *(_QWORD *)v180 = 0;
    v133 = *(_QWORD *)(v40 + 56);
    *(_QWORD *)(v40 + 56) = v132;
    v71 = v183;
    if (v133)
    {
      WTF::fastFree(v133, v125, v126, v127, v128, v129, v130, v131);
      v135 = *(_QWORD *)v180;
      *(_QWORD *)(v40 + 64) = v181;
      *(_QWORD *)v180 = 0;
      if (v135)
        WTF::fastFree(v135, v134, v126, v127, v128, v129, v130, v131);
    }
    else
    {
      *(_QWORD *)(v40 + 64) = v181;
    }
    v25 = v183;
    if (v184 != v183)
    {
      __break(0xC471u);
      goto LABEL_37;
    }
    WTF::HashMap<JSC::CallSiteIndex,WTF::FixedVector<JSC::Wasm::OSREntryValue>,WTF::DefaultHash<JSC::CallSiteIndex>,WTF::HashTraits<JSC::CallSiteIndex>,WTF::HashTraits<WTF::FixedVector<JSC::Wasm::OSREntryValue>>,WTF::HashTableTraits>::operator=((uint64_t *)v40, &v185, v126, v127, v128, v129, v130, v131);
    if (v184 != v183)
    {
      __break(0xC471u);
      JUMPOUT(0x198D9D838);
    }
    v143 = *(_QWORD *)(v40 + 8);
    if (v143)
    {
      *(_QWORD *)(v40 + 8) = 0;
      *(_DWORD *)(v40 + 16) = 0;
      WTF::fastFree(v143, v136, v137, v138, v139, v140, v141, v142);
    }
    v144 = v186;
    v186 = 0;
    *(_QWORD *)(v40 + 8) = v144;
    LODWORD(v144) = v187;
    v187 = 0;
    *(_DWORD *)(v40 + 16) = v144;
    LODWORD(v144) = v188;
    v188 = 0;
    *(_DWORD *)(v40 + 20) = v144;
    if (a10 == 4)
      goto LABEL_19;
    if (a10 <= 9u)
      break;
LABEL_29:
    __break(1u);
LABEL_30:
    JSC::B3::Procedure::setShouldDumpIR((uint64_t)v71);
  }
  if (((1 << a10) & 0x28) == 0)
  {
    if (((1 << a10) & 0x3C7) != 0)
      goto LABEL_19;
    goto LABEL_29;
  }
  v180[0] = 0;
  v179 = 0;
  JSC::Wasm::OMGIRGenerator::computeStackCheckSize(v183, &v179, v180);
  if (v179)
    v159 = v180[0];
  else
    v159 = -1;
  *((_DWORD *)v72 + 28) = v159;
LABEL_19:
  v189 = 0;
  *(_QWORD *)v176 = v40;
  *(_DWORD *)(v176 + 8) = 0;
LABEL_20:
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::~FunctionParser((uint64_t)v182, v136, v137, v138, v139, v140, v141, v142);
  JSC::Wasm::OMGIRGenerator::~OMGIRGenerator((JSC::Wasm::OMGIRGenerator *)v183, v145, v146, v147, v148, v149, v150, v151);
  std::unique_ptr<JSC::Wasm::InternalFunction>::~unique_ptr[abi:sn180100](&v189, v152, v153, v154, v155, v156, v157, v158);
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v191);
}

uint64_t *std::unique_ptr<JSC::CCallHelpers>::operator=[abi:sn180100](uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    v11 = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler(v10, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  return a1;
}

JSC::B3::Procedure **std::unique_ptr<JSC::B3::Procedure>::operator=[abi:sn180100](JSC::B3::Procedure **a1, JSC::B3::Procedure **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Procedure *v9;
  JSC::B3::Procedure *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    JSC::B3::Procedure::~Procedure(v10, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  return a1;
}

JSC::B3::Procedure **std::unique_ptr<JSC::B3::Procedure>::~unique_ptr[abi:sn180100](JSC::B3::Procedure **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Procedure *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    JSC::B3::Procedure::~Procedure(v9, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  return a1;
}

uint64_t JSC::Wasm::shouldDumpIRFor(JSC::Wasm *this)
{
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  v2 = atomic_load(&_MergedGlobals_53);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&_MergedGlobals_53, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::shouldDumpIRFor::$_0 &&>>);
  }
  if (byte_1ECF59048)
    return JSC::FunctionAllowlist::containsWasmFunction((JSC::FunctionAllowlist *)&unk_1ECF59040, this);
  else
    return 0;
}

unsigned int *JSC::B3::Procedure::setOriginPrinter<JSC::Wasm::parseAndCompileOMG(JSC::Wasm::CompilationContext &,JSC::Wasm::OptimizingJITCallee &,JSC::Wasm::FunctionData const&,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::Wasm::CalleeGroup &,JSC::Wasm::ModuleInformation const&,JSC::MemoryMode,JSC::Wasm::CompilationMode,unsigned int,std::optional<BOOL>,unsigned int,JSC::Wasm::TierUpCount *)::$_0>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E35B6800;
  result = *(unsigned int **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v2;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::FunctionParser(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  JSC::Wasm::TypeDefinition *v11;
  unsigned int *v13;
  WTF *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t CachedUnrolling;
  uint64_t v23;
  uint64_t v24;
  const JSC::Wasm::Type *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  const JSC::Wasm::TypeDefinition *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char **v37;
  char *v38;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  v10 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v10 != -1)
  {
    v38 = &v36;
    v37 = &v38;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v37, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  *(_QWORD *)(a1 + 24) = JSC::Wasm::TypeInformation::singleton(void)::theOne;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a1 + 72;
  *(_QWORD *)(a1 + 64) = 16;
  *(_QWORD *)(a1 + 456) = a1 + 472;
  *(_QWORD *)(a1 + 464) = 16;
  *(_QWORD *)(a1 + 14680) = a1 + 14696;
  *(_QWORD *)(a1 + 14688) = 16;
  if (*(_DWORD *)(a5 + 32) == 4)
  {
    v13 = *(unsigned int **)(a5 + 8);
    v14 = *(WTF **)v13;
    v11 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v13 + 8) + 8 * v13[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v11))
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)a5, v15, v16, v17, v18, v19, v20, v21);
      if (v29)
      {
        v11 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v11 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v11, v14, v23, v24, v25, v26, v27, v28);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)a5, v11, v30, v31, v32, v33, v34, v35);
      }
    }
  }
  else
  {
    v11 = (JSC::Wasm::TypeDefinition *)a5;
  }
  if (*((_DWORD *)v11 + 8) == 5)
    v11 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v11 + 1);
  *(_QWORD *)(a1 + 14952) = v11;
  *(_OWORD *)(a1 + 14968) = 0u;
  *(_QWORD *)(a1 + 14960) = a6;
  *(_QWORD *)(a1 + 14984) = 0x8000000000000000;
  *(_BYTE *)(a1 + 14992) = 0;
  *(_OWORD *)(a1 + 15000) = 0u;
  **(_QWORD **)(a1 + 48) = a1;
  return a1;
}

void JSC::B3::Air::Code::setDisassembler(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v9 = *a2;
  *a2 = 0;
  v10 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v9;
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      *(_QWORD *)(v10 + 8) = 0;
      *(_DWORD *)(v10 + 16) = 0;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
    if (*(_QWORD *)v10)
      WTF::fastFree(*(_QWORD *)v10 - 16, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_BYTE *)(a1 + 197) = 1;
}

unint64_t *std::unique_ptr<JSC::B3::Air::Disassembler>::~unique_ptr[abi:sn180100](unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    if (*(_QWORD *)v9)
      WTF::fastFree(*(_QWORD *)v9 - 16, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

unint64_t *std::unique_ptr<JSC::OpaqueByproducts>::operator=[abi:sn180100](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    v11 = *(unsigned int *)(v10 + 12);
    if ((_DWORD)v11)
    {
      v14 = *(uint64_t **)v10;
      v15 = 8 * v11;
      do
      {
        v16 = *v14;
        *v14 = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
    v12 = *(_QWORD *)v10;
    if (*(_QWORD *)v10)
    {
      *(_QWORD *)v10 = 0;
      *(_DWORD *)(v10 + 8) = 0;
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

unint64_t *std::unique_ptr<JSC::OpaqueByproducts>::~unique_ptr[abi:sn180100](unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = *(unsigned int *)(v9 + 12);
    if ((_DWORD)v10)
    {
      v13 = *(uint64_t **)v9;
      v14 = 8 * v10;
      do
      {
        v15 = *v13;
        *v13 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
    v11 = *(_QWORD *)v9;
    if (*(_QWORD *)v9)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t *WTF::HashMap<JSC::CallSiteIndex,WTF::FixedVector<JSC::Wasm::OSREntryValue>,WTF::DefaultHash<JSC::CallSiteIndex>,WTF::HashTraits<JSC::CallSiteIndex>,WTF::HashTraits<WTF::FixedVector<JSC::Wasm::OSREntryValue>>,WTF::HashTableTraits>::operator=(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    v12 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v12)
    {
      v13 = (unint64_t *)(v10 + 8);
      do
      {
        if (*((_DWORD *)v13 - 2) != -2)
        {
          v14 = *v13;
          *v13 = 0;
          if (v14)
            WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
        }
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

unsigned int *JSC::Wasm::OMGIRGenerator::emitChecksForModOrDiv(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t v9;
  JSC::B3::Value *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *result;
  unint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v8 = *(_DWORD *)(a3 + 16);
  v9 = a1[11];
  v10 = (JSC::B3::Value *)a1[7];
  if (*a1)
    v11 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::constant(a1, *(_DWORD *)(a3 + 16), 0, 0, 0);
  v13 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v9, (uint64_t)v10, 51, v11, a4, v12);
  v14 = JSC::B3::BasicBlock::appendNew<JSC::B3::CheckValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value *>(v9, v10, v11, v13);
  v29 = a1;
  result = JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::emitChecksForModOrDiv(JSC::B3::Opcode,JSC::B3::Value *,JSC::B3::Value *)::$_0>(v14, (uint64_t *)&v29);
  if (a2 == 17)
  {
    if (v8 == 1)
      v16 = 0xFFFFFFFF80000000;
    else
      v16 = 0x8000000000000000;
    v17 = a1[11];
    v18 = (JSC::B3::Value *)a1[7];
    if (*a1)
      v19 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
    else
      v19 = 0;
    v20 = JSC::Wasm::OMGIRGenerator::constant(a1, v8, v16, 0, 0);
    v21 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v17, (uint64_t)v18, 51, v19, a3, v20);
    v22 = a1[11];
    v23 = a1[7];
    if (*a1)
      v24 = *(_QWORD *)(*a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a1 + 14992) << 32);
    else
      v24 = 0;
    v25 = JSC::Wasm::OMGIRGenerator::constant(a1, v8, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
    v26 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v22, v23, 51, v24, a4, v25);
    v27 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v17, (uint64_t)v18, 22, v19, v21, v26);
    v28 = JSC::B3::BasicBlock::appendNew<JSC::B3::CheckValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value *>(v17, v18, v19, v27);
    v29 = a1;
    return JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::emitChecksForModOrDiv(JSC::B3::Opcode,JSC::B3::Value *,JSC::B3::Value *)::$_1>(v28, (uint64_t *)&v29);
  }
  return result;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::emitChecksForModOrDiv(JSC::B3::Opcode,JSC::B3::Value *,JSC::B3::Value *)::$_0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = *a2;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E35B6828;
  *(_QWORD *)(v4 + 16) = v5;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::emitChecksForModOrDiv(JSC::B3::Opcode,JSC::B3::Value *,JSC::B3::Value *)::$_1>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = *a2;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E35B6850;
  *(_QWORD *)(v4 + 16) = v5;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI32DivS@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  JSC::B3::Value *v12;
  WTF *result;

  v9 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v10 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  JSC::Wasm::OMGIRGenerator::emitChecksForModOrDiv((uint64_t *)this, 17, v9, v10);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(*((_QWORD *)this + 11), *((_QWORD *)this + 7), 17, v11, v9, v10);
  result = JSC::Wasm::OMGIRGenerator::push(this, v12);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32RemS@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  JSC::B3::Value *v27;
  WTF *PushVariable;
  uint64_t v29;
  JSC::B3::Value *v30;
  unint64_t v31;
  uint64_t v32;
  char *result;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v37 = v13;
  v15 = (char **)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v35 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v16 + 1, (unint64_t)&v37);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v35;
    v17 = v37;
  }
  else
  {
    *(_QWORD *)&(*v15)[8 * v16] = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v37 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v37);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v36;
    v25 = v37;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  JSC::Wasm::OMGIRGenerator::emitChecksForModOrDiv((uint64_t *)this, 19, v13, v21);
  if (*(_QWORD *)this)
    v26 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v26 = 0;
  v27 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(*((JSC::B3::BasicBlock **)this + 11), *((JSC::B3::Value **)this + 7), 275, v26, v13, v21);
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *((_DWORD *)v27 + 4));
  v29 = *((_QWORD *)this + 11);
  v30 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v31 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v31 = 0;
  v32 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v32 + 8) = -1;
  *(_WORD *)(v32 + 12) = 9;
  *(_DWORD *)(v32 + 16) = 0;
  *(_BYTE *)(v32 + 20) = 1;
  *(_QWORD *)(v32 + 24) = v31;
  *(_QWORD *)(v32 + 32) = 0;
  *(_QWORD *)v32 = off_1E357F0F8;
  *(_QWORD *)(v32 + 40) = PushVariable;
  *(_QWORD *)(v32 + 48) = v27;
  JSC::B3::Procedure::addValueImpl(v30, (JSC::B3::Value *)v32);
  v37 = v32;
  result = (char *)(v29 + 8);
  v34 = *(unsigned int *)(v29 + 20);
  if ((_DWORD)v34 == *(_DWORD *)(v29 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v34 + 1, (unint64_t)&v37);
    v34 = *(unsigned int *)(v29 + 20);
    *(_QWORD *)(*(_QWORD *)(v29 + 8) + 8 * v34) = *(_QWORD *)result;
    v32 = v37;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v34) = v32;
  }
  *(_DWORD *)(v29 + 20) = v34 + 1;
  *(_QWORD *)(v32 + 32) = v29;
  *a4 = PushVariable;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI32DivU@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  JSC::B3::Value *v12;
  WTF *result;

  v9 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v10 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  JSC::Wasm::OMGIRGenerator::emitChecksForModOrDiv((uint64_t *)this, 18, v9, v10);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(*((_QWORD *)this + 11), *((_QWORD *)this + 7), 18, v11, v9, v10);
  result = JSC::Wasm::OMGIRGenerator::push(this, v12);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI32RemU@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  JSC::B3::Value *v12;
  WTF *result;

  v9 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v10 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  JSC::Wasm::OMGIRGenerator::emitChecksForModOrDiv((uint64_t *)this, 20, v9, v10);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(*((_QWORD *)this + 11), *((_QWORD *)this + 7), 20, v11, v9, v10);
  result = JSC::Wasm::OMGIRGenerator::push(this, v12);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64DivS@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::B3::Value *v27;
  unint64_t v28;
  int *v29;
  char **v30;
  uint64_t v31;
  int *v32;
  WTF *PushVariable;
  uint64_t v34;
  JSC::B3::Value *v35;
  unint64_t v36;
  uint64_t v37;
  char *result;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v43 = v13;
  v15 = (char **)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v16 + 1, (unint64_t)&v43);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v40;
    v17 = v43;
  }
  else
  {
    *(_QWORD *)&(*v15)[8 * v16] = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v43 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v41 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v43);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v41;
    v25 = v43;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  JSC::Wasm::OMGIRGenerator::emitChecksForModOrDiv((uint64_t *)this, 17, v13, v21);
  v26 = *((_QWORD *)this + 11);
  v27 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v28 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v28 = 0;
  v29 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(17, v28, v13, v21);
  JSC::B3::Procedure::addValueImpl(v27, (JSC::B3::Value *)v29);
  v43 = (uint64_t)v29;
  v30 = (char **)(v26 + 8);
  v31 = *(unsigned int *)(v26 + 20);
  if ((_DWORD)v31 == *(_DWORD *)(v26 + 16))
  {
    v42 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30, v31 + 1, (unint64_t)&v43);
    v31 = *(unsigned int *)(v26 + 20);
    *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8 * v31) = *(_QWORD *)v42;
    v32 = (int *)v43;
  }
  else
  {
    *(_QWORD *)&(*v30)[8 * v31] = v29;
    v32 = v29;
  }
  *(_DWORD *)(v26 + 20) = v31 + 1;
  *((_QWORD *)v32 + 4) = v26;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v29[4]);
  v34 = *((_QWORD *)this + 11);
  v35 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v36 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v36 = 0;
  v37 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v37 + 8) = -1;
  *(_WORD *)(v37 + 12) = 9;
  *(_DWORD *)(v37 + 16) = 0;
  *(_BYTE *)(v37 + 20) = 1;
  *(_QWORD *)(v37 + 24) = v36;
  *(_QWORD *)(v37 + 32) = 0;
  *(_QWORD *)v37 = off_1E357F0F8;
  *(_QWORD *)(v37 + 40) = PushVariable;
  *(_QWORD *)(v37 + 48) = v29;
  JSC::B3::Procedure::addValueImpl(v35, (JSC::B3::Value *)v37);
  v43 = v37;
  result = (char *)(v34 + 8);
  v39 = *(unsigned int *)(v34 + 20);
  if ((_DWORD)v39 == *(_DWORD *)(v34 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v39 + 1, (unint64_t)&v43);
    v39 = *(unsigned int *)(v34 + 20);
    *(_QWORD *)(*(_QWORD *)(v34 + 8) + 8 * v39) = *(_QWORD *)result;
    v37 = v43;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v39) = v37;
  }
  *(_DWORD *)(v34 + 20) = v39 + 1;
  *(_QWORD *)(v37 + 32) = v34;
  *a4 = PushVariable;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64RemS@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  JSC::B3::Value *v27;
  WTF *PushVariable;
  uint64_t v29;
  JSC::B3::Value *v30;
  unint64_t v31;
  uint64_t v32;
  char *result;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v37 = v13;
  v15 = (char **)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v35 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v16 + 1, (unint64_t)&v37);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v35;
    v17 = v37;
  }
  else
  {
    *(_QWORD *)&(*v15)[8 * v16] = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v37 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v37);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v36;
    v25 = v37;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  JSC::Wasm::OMGIRGenerator::emitChecksForModOrDiv((uint64_t *)this, 19, v13, v21);
  if (*(_QWORD *)this)
    v26 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v26 = 0;
  v27 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(*((JSC::B3::BasicBlock **)this + 11), *((JSC::B3::Value **)this + 7), 275, v26, v13, v21);
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *((_DWORD *)v27 + 4));
  v29 = *((_QWORD *)this + 11);
  v30 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v31 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v31 = 0;
  v32 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v32 + 8) = -1;
  *(_WORD *)(v32 + 12) = 9;
  *(_DWORD *)(v32 + 16) = 0;
  *(_BYTE *)(v32 + 20) = 1;
  *(_QWORD *)(v32 + 24) = v31;
  *(_QWORD *)(v32 + 32) = 0;
  *(_QWORD *)v32 = off_1E357F0F8;
  *(_QWORD *)(v32 + 40) = PushVariable;
  *(_QWORD *)(v32 + 48) = v27;
  JSC::B3::Procedure::addValueImpl(v30, (JSC::B3::Value *)v32);
  v37 = v32;
  result = (char *)(v29 + 8);
  v34 = *(unsigned int *)(v29 + 20);
  if ((_DWORD)v34 == *(_DWORD *)(v29 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v34 + 1, (unint64_t)&v37);
    v34 = *(unsigned int *)(v29 + 20);
    *(_QWORD *)(*(_QWORD *)(v29 + 8) + 8 * v34) = *(_QWORD *)result;
    v32 = v37;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v34) = v32;
  }
  *(_DWORD *)(v29 + 20) = v34 + 1;
  *(_QWORD *)(v32 + 32) = v29;
  *a4 = PushVariable;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI64DivU@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  JSC::B3::Value *v12;
  WTF *result;

  v9 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v10 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  JSC::Wasm::OMGIRGenerator::emitChecksForModOrDiv((uint64_t *)this, 18, v9, v10);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(*((_QWORD *)this + 11), *((_QWORD *)this + 7), 18, v11, v9, v10);
  result = JSC::Wasm::OMGIRGenerator::push(this, v12);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64RemU@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::B3::Value *v27;
  unint64_t v28;
  int *v29;
  char **v30;
  uint64_t v31;
  int *v32;
  WTF *PushVariable;
  uint64_t v34;
  JSC::B3::Value *v35;
  unint64_t v36;
  uint64_t v37;
  char *result;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v43 = v13;
  v15 = (char **)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v16 + 1, (unint64_t)&v43);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v40;
    v17 = v43;
  }
  else
  {
    *(_QWORD *)&(*v15)[8 * v16] = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v43 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v41 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v43);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v41;
    v25 = v43;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  JSC::Wasm::OMGIRGenerator::emitChecksForModOrDiv((uint64_t *)this, 20, v13, v21);
  v26 = *((_QWORD *)this + 11);
  v27 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v28 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v28 = 0;
  v29 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(20, v28, v13, v21);
  JSC::B3::Procedure::addValueImpl(v27, (JSC::B3::Value *)v29);
  v43 = (uint64_t)v29;
  v30 = (char **)(v26 + 8);
  v31 = *(unsigned int *)(v26 + 20);
  if ((_DWORD)v31 == *(_DWORD *)(v26 + 16))
  {
    v42 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30, v31 + 1, (unint64_t)&v43);
    v31 = *(unsigned int *)(v26 + 20);
    *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8 * v31) = *(_QWORD *)v42;
    v32 = (int *)v43;
  }
  else
  {
    *(_QWORD *)&(*v30)[8 * v31] = v29;
    v32 = v29;
  }
  *(_DWORD *)(v26 + 20) = v31 + 1;
  *((_QWORD *)v32 + 4) = v26;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v29[4]);
  v34 = *((_QWORD *)this + 11);
  v35 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v36 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v36 = 0;
  v37 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v37 + 8) = -1;
  *(_WORD *)(v37 + 12) = 9;
  *(_DWORD *)(v37 + 16) = 0;
  *(_BYTE *)(v37 + 20) = 1;
  *(_QWORD *)(v37 + 24) = v36;
  *(_QWORD *)(v37 + 32) = 0;
  *(_QWORD *)v37 = off_1E357F0F8;
  *(_QWORD *)(v37 + 40) = PushVariable;
  *(_QWORD *)(v37 + 48) = v29;
  JSC::B3::Procedure::addValueImpl(v35, (JSC::B3::Value *)v37);
  v43 = v37;
  result = (char *)(v34 + 8);
  v39 = *(unsigned int *)(v34 + 20);
  if ((_DWORD)v39 == *(_DWORD *)(v34 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v39 + 1, (unint64_t)&v43);
    v39 = *(unsigned int *)(v34 + 20);
    *(_QWORD *)(*(_QWORD *)(v34 + 8) + 8 * v39) = *(_QWORD *)result;
    v37 = v43;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v39) = v37;
  }
  *(_DWORD *)(v34 + 20) = v39 + 1;
  *(_QWORD *)(v37 + 32) = v34;
  *a4 = PushVariable;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32Ctz@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char v39;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v38 = v11;
  v13 = (char **)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v38);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v36;
    v15 = v38;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = *((_QWORD *)this + 11);
  v17 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v18 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v18 = 0;
  v19 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v19 = off_1E357F5F0;
  *(_DWORD *)(v19 + 8) = -1;
  *(_WORD *)(v19 + 12) = 83;
  *(_DWORD *)(v19 + 16) = 1;
  *(_BYTE *)(v19 + 20) = 4;
  *(_QWORD *)(v19 + 24) = v18;
  *(_QWORD *)(v19 + 32) = 0;
  v20 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v19);
  *v20 = v20 + 2;
  v20[1] = 3;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_QWORD *)(v19 + 104) = 0;
  *(_OWORD *)(v19 + 112) = xmmword_1991243D0;
  *(_QWORD *)v19 = off_1E357E700;
  *(_QWORD *)(v19 + 152) = 0;
  *(_QWORD *)(v19 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v19 + 136) = v19 + 152;
  *(_WORD *)(v19 + 168) = 0;
  *(_BYTE *)(v19 + 160) = 3;
  *(_QWORD *)(v19 + 144) = 0x100000001;
  JSC::B3::Procedure::addValueImpl(v17, (JSC::B3::Value *)v19);
  v38 = v19;
  v21 = (char **)(v16 + 8);
  v22 = *(unsigned int *)(v16 + 20);
  if ((_DWORD)v22 == *(_DWORD *)(v16 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)&v38);
    v22 = *(unsigned int *)(v16 + 20);
    *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8 * v22) = *(_QWORD *)v37;
    v23 = v38;
  }
  else
  {
    *(_QWORD *)&(*v21)[8 * v22] = v19;
    v23 = v19;
  }
  *(_DWORD *)(v16 + 20) = v22 + 1;
  *(_QWORD *)(v23 + 32) = v16;
  v38 = 0;
  v39 = 3;
  JSC::B3::StackmapValue::append((__int128 *)v19, v11, (unint64_t)&v38);
  v24 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v24 + 8) = 1;
  *(_QWORD *)v24 = off_1E35B6878;
  v25 = *(unsigned int **)(v19 + 56);
  *(_QWORD *)(v19 + 56) = v24;
  if (v25)
  {
    v26 = v25 + 2;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v25 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
    }
  }
  *(_QWORD *)(v19 + 112) = 0;
  *(_QWORD *)(v19 + 120) = 0;
  *(_QWORD *)(v19 + 128) = 0;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v19 + 16));
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v19;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v38 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v38);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v38;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64Ctz@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char v39;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v38 = v11;
  v13 = (char **)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v38);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v36;
    v15 = v38;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = *((_QWORD *)this + 11);
  v17 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v18 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v18 = 0;
  v19 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v19 = off_1E357F5F0;
  *(_DWORD *)(v19 + 8) = -1;
  *(_WORD *)(v19 + 12) = 83;
  *(_DWORD *)(v19 + 16) = 2;
  *(_BYTE *)(v19 + 20) = 4;
  *(_QWORD *)(v19 + 24) = v18;
  *(_QWORD *)(v19 + 32) = 0;
  v20 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v19);
  *v20 = v20 + 2;
  v20[1] = 3;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_QWORD *)(v19 + 104) = 0;
  *(_OWORD *)(v19 + 112) = xmmword_1991243D0;
  *(_QWORD *)v19 = off_1E357E700;
  *(_QWORD *)(v19 + 152) = 0;
  *(_QWORD *)(v19 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v19 + 136) = v19 + 152;
  *(_WORD *)(v19 + 168) = 0;
  *(_BYTE *)(v19 + 160) = 3;
  *(_QWORD *)(v19 + 144) = 0x100000001;
  JSC::B3::Procedure::addValueImpl(v17, (JSC::B3::Value *)v19);
  v38 = v19;
  v21 = (char **)(v16 + 8);
  v22 = *(unsigned int *)(v16 + 20);
  if ((_DWORD)v22 == *(_DWORD *)(v16 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)&v38);
    v22 = *(unsigned int *)(v16 + 20);
    *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8 * v22) = *(_QWORD *)v37;
    v23 = v38;
  }
  else
  {
    *(_QWORD *)&(*v21)[8 * v22] = v19;
    v23 = v19;
  }
  *(_DWORD *)(v16 + 20) = v22 + 1;
  *(_QWORD *)(v23 + 32) = v16;
  v38 = 0;
  v39 = 3;
  JSC::B3::StackmapValue::append((__int128 *)v19, v11, (unint64_t)&v38);
  v24 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v24 + 8) = 1;
  *(_QWORD *)v24 = off_1E35B68A0;
  v25 = *(unsigned int **)(v19 + 56);
  *(_QWORD *)(v19 + 56) = v24;
  if (v25)
  {
    v26 = v25 + 2;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v25 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
    }
  }
  *(_QWORD *)(v19 + 112) = 0;
  *(_QWORD *)(v19 + 120) = 0;
  *(_QWORD *)(v19 + 128) = 0;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v19 + 16));
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v19;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v38 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v38);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v38;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32Popcnt@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char v39;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v38 = v11;
  v13 = (char **)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v38);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v36;
    v15 = v38;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = *((_QWORD *)this + 11);
  v17 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v18 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v18 = 0;
  v19 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v19 = off_1E357F5F0;
  *(_DWORD *)(v19 + 8) = -1;
  *(_WORD *)(v19 + 12) = 83;
  *(_DWORD *)(v19 + 16) = 1;
  *(_BYTE *)(v19 + 20) = 4;
  *(_QWORD *)(v19 + 24) = v18;
  *(_QWORD *)(v19 + 32) = 0;
  v20 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v19);
  *v20 = v20 + 2;
  v20[1] = 3;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_QWORD *)(v19 + 104) = 0;
  *(_OWORD *)(v19 + 112) = xmmword_1991243D0;
  *(_QWORD *)v19 = off_1E357E700;
  *(_QWORD *)(v19 + 152) = 0;
  *(_QWORD *)(v19 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v19 + 136) = v19 + 152;
  *(_WORD *)(v19 + 168) = 0;
  *(_BYTE *)(v19 + 160) = 3;
  *(_QWORD *)(v19 + 144) = 0x100000001;
  JSC::B3::Procedure::addValueImpl(v17, (JSC::B3::Value *)v19);
  v38 = v19;
  v21 = (char **)(v16 + 8);
  v22 = *(unsigned int *)(v16 + 20);
  if ((_DWORD)v22 == *(_DWORD *)(v16 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)&v38);
    v22 = *(unsigned int *)(v16 + 20);
    *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8 * v22) = *(_QWORD *)v37;
    v23 = v38;
  }
  else
  {
    *(_QWORD *)&(*v21)[8 * v22] = v19;
    v23 = v19;
  }
  *(_DWORD *)(v16 + 20) = v22 + 1;
  *(_QWORD *)(v23 + 32) = v16;
  v38 = 0;
  v39 = 3;
  JSC::B3::StackmapValue::append((__int128 *)v19, v11, (unint64_t)&v38);
  *(_BYTE *)(v19 + 169) = 1;
  v24 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v24 + 8) = 1;
  *(_QWORD *)v24 = off_1E35B68C8;
  v25 = *(unsigned int **)(v19 + 56);
  *(_QWORD *)(v19 + 56) = v24;
  if (v25)
  {
    v26 = v25 + 2;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v25 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
    }
  }
  *(_QWORD *)(v19 + 112) = 0;
  *(_QWORD *)(v19 + 120) = 0;
  *(_QWORD *)(v19 + 128) = 0;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v19 + 16));
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v19;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v38 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v38);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v38;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

uint64_t operationPopcount32(__int32 a1, int8x8_t a2)
{
  uint8x8_t v2;

  a2.i32[0] = a1;
  v2 = (uint8x8_t)vcnt_s8(a2);
  v2.i16[0] = vaddlv_u8(v2);
  return v2.u32[0];
}

char *JSC::Wasm::OMGIRGenerator::addI64Popcnt@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char v39;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v38 = v11;
  v13 = (char **)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v38);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v36;
    v15 = v38;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = *((_QWORD *)this + 11);
  v17 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v18 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v18 = 0;
  v19 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v19 = off_1E357F5F0;
  *(_DWORD *)(v19 + 8) = -1;
  *(_WORD *)(v19 + 12) = 83;
  *(_DWORD *)(v19 + 16) = 2;
  *(_BYTE *)(v19 + 20) = 4;
  *(_QWORD *)(v19 + 24) = v18;
  *(_QWORD *)(v19 + 32) = 0;
  v20 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v19);
  *v20 = v20 + 2;
  v20[1] = 3;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_QWORD *)(v19 + 104) = 0;
  *(_OWORD *)(v19 + 112) = xmmword_1991243D0;
  *(_QWORD *)v19 = off_1E357E700;
  *(_QWORD *)(v19 + 152) = 0;
  *(_QWORD *)(v19 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v19 + 136) = v19 + 152;
  *(_WORD *)(v19 + 168) = 0;
  *(_BYTE *)(v19 + 160) = 3;
  *(_QWORD *)(v19 + 144) = 0x100000001;
  JSC::B3::Procedure::addValueImpl(v17, (JSC::B3::Value *)v19);
  v38 = v19;
  v21 = (char **)(v16 + 8);
  v22 = *(unsigned int *)(v16 + 20);
  if ((_DWORD)v22 == *(_DWORD *)(v16 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)&v38);
    v22 = *(unsigned int *)(v16 + 20);
    *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8 * v22) = *(_QWORD *)v37;
    v23 = v38;
  }
  else
  {
    *(_QWORD *)&(*v21)[8 * v22] = v19;
    v23 = v19;
  }
  *(_DWORD *)(v16 + 20) = v22 + 1;
  *(_QWORD *)(v23 + 32) = v16;
  v38 = 0;
  v39 = 3;
  JSC::B3::StackmapValue::append((__int128 *)v19, v11, (unint64_t)&v38);
  *(_BYTE *)(v19 + 169) = 1;
  v24 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v24 + 8) = 1;
  *(_QWORD *)v24 = off_1E35B68F0;
  v25 = *(unsigned int **)(v19 + 56);
  *(_QWORD *)(v19 + 56) = v24;
  if (v25)
  {
    v26 = v25 + 2;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v25 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
    }
  }
  *(_QWORD *)(v19 + 112) = 0;
  *(_QWORD *)(v19 + 120) = 0;
  *(_QWORD *)(v19 + 128) = 0;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v19 + 16));
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v19;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v38 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v38);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v38;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

uint64_t operationPopcount64(uint64_t a1)
{
  uint8x8_t v1;

  v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

WTF *JSC::Wasm::OMGIRGenerator::addF64ConvertUI64@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF *result;
  uint64_t v11;
  char v12;

  v7 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  if (*(_QWORD *)this)
    v8 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v8 = 0;
  v9 = JSC::B3::BasicBlock::appendNew<JSC::B3::PatchpointValue,JSC::B3::TypeKind,JSC::B3::Origin>(*((_QWORD *)this + 11), *((JSC::B3::Value **)this + 7), 4, v8);
  *(_QWORD *)(v9 + 64) |= 0x30000uLL;
  *(_QWORD *)(v9 + 80) |= 0x30000uLL;
  v11 = 0;
  v12 = 3;
  JSC::B3::StackmapValue::append((__int128 *)v9, v7, (unint64_t)&v11);
  JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addF64ConvertUI64(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>(v9);
  *(_QWORD *)(v9 + 112) = 0;
  *(_QWORD *)(v9 + 120) = 0;
  *(_QWORD *)(v9 + 128) = 0;
  result = JSC::Wasm::OMGIRGenerator::push(this, (JSC::B3::Value *)v9);
  *a3 = result;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addF64ConvertUI64(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E35B6918;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v2;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addF32ConvertUI64@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF *result;
  uint64_t v11;
  char v12;

  v7 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  if (*(_QWORD *)this)
    v8 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v8 = 0;
  v9 = JSC::B3::BasicBlock::appendNew<JSC::B3::PatchpointValue,JSC::B3::TypeKind,JSC::B3::Origin>(*((_QWORD *)this + 11), *((JSC::B3::Value **)this + 7), 3, v8);
  *(_QWORD *)(v9 + 64) |= 0x30000uLL;
  *(_QWORD *)(v9 + 80) |= 0x30000uLL;
  v11 = 0;
  v12 = 3;
  JSC::B3::StackmapValue::append((__int128 *)v9, v7, (unint64_t)&v11);
  JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addF32ConvertUI64(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>(v9);
  *(_QWORD *)(v9 + 112) = 0;
  *(_QWORD *)(v9 + 120) = 0;
  *(_QWORD *)(v9 + 128) = 0;
  result = JSC::Wasm::OMGIRGenerator::push(this, (JSC::B3::Value *)v9);
  *a3 = result;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addF32ConvertUI64(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E35B6940;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v2;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF64Nearest@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char v39;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v38 = v11;
  v13 = (char **)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v38);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v36;
    v15 = v38;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = *((_QWORD *)this + 11);
  v17 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v18 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v18 = 0;
  v19 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v19 = off_1E357F5F0;
  *(_DWORD *)(v19 + 8) = -1;
  *(_WORD *)(v19 + 12) = 83;
  *(_DWORD *)(v19 + 16) = 4;
  *(_BYTE *)(v19 + 20) = 4;
  *(_QWORD *)(v19 + 24) = v18;
  *(_QWORD *)(v19 + 32) = 0;
  v20 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v19);
  *v20 = v20 + 2;
  v20[1] = 3;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_QWORD *)(v19 + 104) = 0;
  *(_OWORD *)(v19 + 112) = xmmword_1991243D0;
  *(_QWORD *)v19 = off_1E357E700;
  *(_QWORD *)(v19 + 152) = 0;
  *(_QWORD *)(v19 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v19 + 136) = v19 + 152;
  *(_WORD *)(v19 + 168) = 0;
  *(_BYTE *)(v19 + 160) = 3;
  *(_QWORD *)(v19 + 144) = 0x100000001;
  JSC::B3::Procedure::addValueImpl(v17, (JSC::B3::Value *)v19);
  v38 = v19;
  v21 = (char **)(v16 + 8);
  v22 = *(unsigned int *)(v16 + 20);
  if ((_DWORD)v22 == *(_DWORD *)(v16 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)&v38);
    v22 = *(unsigned int *)(v16 + 20);
    *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8 * v22) = *(_QWORD *)v37;
    v23 = v38;
  }
  else
  {
    *(_QWORD *)&(*v21)[8 * v22] = v19;
    v23 = v19;
  }
  *(_DWORD *)(v16 + 20) = v22 + 1;
  *(_QWORD *)(v23 + 32) = v16;
  v38 = 0;
  v39 = 3;
  JSC::B3::StackmapValue::append((__int128 *)v19, v11, (unint64_t)&v38);
  v24 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v24 + 8) = 1;
  *(_QWORD *)v24 = off_1E35B6968;
  v25 = *(unsigned int **)(v19 + 56);
  *(_QWORD *)(v19 + 56) = v24;
  if (v25)
  {
    v26 = v25 + 2;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v25 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
    }
  }
  *(_QWORD *)(v19 + 112) = 0;
  *(_QWORD *)(v19 + 120) = 0;
  *(_QWORD *)(v19 + 128) = 0;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v19 + 16));
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v19;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v38 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v38);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v38;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF32Nearest@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char v39;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v38 = v11;
  v13 = (char **)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v38);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v36;
    v15 = v38;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = *((_QWORD *)this + 11);
  v17 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v18 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v18 = 0;
  v19 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v19 = off_1E357F5F0;
  *(_DWORD *)(v19 + 8) = -1;
  *(_WORD *)(v19 + 12) = 83;
  *(_DWORD *)(v19 + 16) = 3;
  *(_BYTE *)(v19 + 20) = 4;
  *(_QWORD *)(v19 + 24) = v18;
  *(_QWORD *)(v19 + 32) = 0;
  v20 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v19);
  *v20 = v20 + 2;
  v20[1] = 3;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_QWORD *)(v19 + 104) = 0;
  *(_QWORD *)v19 = off_1E357E700;
  *(_OWORD *)(v19 + 112) = xmmword_1991243D0;
  *(_QWORD *)(v19 + 152) = 0;
  *(_QWORD *)(v19 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v19 + 136) = v19 + 152;
  *(_WORD *)(v19 + 168) = 0;
  *(_BYTE *)(v19 + 160) = 3;
  *(_QWORD *)(v19 + 144) = 0x100000001;
  JSC::B3::Procedure::addValueImpl(v17, (JSC::B3::Value *)v19);
  v38 = v19;
  v21 = (char **)(v16 + 8);
  v22 = *(unsigned int *)(v16 + 20);
  if ((_DWORD)v22 == *(_DWORD *)(v16 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)&v38);
    v22 = *(unsigned int *)(v16 + 20);
    *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8 * v22) = *(_QWORD *)v37;
    v23 = v38;
  }
  else
  {
    *(_QWORD *)&(*v21)[8 * v22] = v19;
    v23 = v19;
  }
  *(_DWORD *)(v16 + 20) = v22 + 1;
  *(_QWORD *)(v23 + 32) = v16;
  v38 = 0;
  v39 = 3;
  JSC::B3::StackmapValue::append((__int128 *)v19, v11, (unint64_t)&v38);
  v24 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v24 + 8) = 1;
  *(_QWORD *)v24 = off_1E35B6990;
  v25 = *(unsigned int **)(v19 + 56);
  *(_QWORD *)(v19 + 56) = v24;
  if (v25)
  {
    v26 = v25 + 2;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v25 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
    }
  }
  *(_QWORD *)(v19 + 112) = 0;
  *(_QWORD *)(v19 + 120) = 0;
  *(_QWORD *)(v19 + 128) = 0;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v19 + 16));
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v19;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v38 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v38);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v38;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF64Trunc@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char v39;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v38 = v11;
  v13 = (char **)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v38);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v36;
    v15 = v38;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = *((_QWORD *)this + 11);
  v17 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v18 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v18 = 0;
  v19 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v19 = off_1E357F5F0;
  *(_DWORD *)(v19 + 8) = -1;
  *(_WORD *)(v19 + 12) = 83;
  *(_DWORD *)(v19 + 16) = 4;
  *(_BYTE *)(v19 + 20) = 4;
  *(_QWORD *)(v19 + 24) = v18;
  *(_QWORD *)(v19 + 32) = 0;
  v20 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v19);
  *v20 = v20 + 2;
  v20[1] = 3;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_QWORD *)(v19 + 104) = 0;
  *(_OWORD *)(v19 + 112) = xmmword_1991243D0;
  *(_QWORD *)v19 = off_1E357E700;
  *(_QWORD *)(v19 + 152) = 0;
  *(_QWORD *)(v19 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v19 + 136) = v19 + 152;
  *(_WORD *)(v19 + 168) = 0;
  *(_BYTE *)(v19 + 160) = 3;
  *(_QWORD *)(v19 + 144) = 0x100000001;
  JSC::B3::Procedure::addValueImpl(v17, (JSC::B3::Value *)v19);
  v38 = v19;
  v21 = (char **)(v16 + 8);
  v22 = *(unsigned int *)(v16 + 20);
  if ((_DWORD)v22 == *(_DWORD *)(v16 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)&v38);
    v22 = *(unsigned int *)(v16 + 20);
    *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8 * v22) = *(_QWORD *)v37;
    v23 = v38;
  }
  else
  {
    *(_QWORD *)&(*v21)[8 * v22] = v19;
    v23 = v19;
  }
  *(_DWORD *)(v16 + 20) = v22 + 1;
  *(_QWORD *)(v23 + 32) = v16;
  v38 = 0;
  v39 = 3;
  JSC::B3::StackmapValue::append((__int128 *)v19, v11, (unint64_t)&v38);
  v24 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v24 + 8) = 1;
  *(_QWORD *)v24 = off_1E35B69B8;
  v25 = *(unsigned int **)(v19 + 56);
  *(_QWORD *)(v19 + 56) = v24;
  if (v25)
  {
    v26 = v25 + 2;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v25 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
    }
  }
  *(_QWORD *)(v19 + 112) = 0;
  *(_QWORD *)(v19 + 120) = 0;
  *(_QWORD *)(v19 + 128) = 0;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v19 + 16));
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v19;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v38 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v38);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v38;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF32Trunc@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char v39;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v38 = v11;
  v13 = (char **)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v38);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v36;
    v15 = v38;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = *((_QWORD *)this + 11);
  v17 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v18 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v18 = 0;
  v19 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v19 = off_1E357F5F0;
  *(_DWORD *)(v19 + 8) = -1;
  *(_WORD *)(v19 + 12) = 83;
  *(_DWORD *)(v19 + 16) = 3;
  *(_BYTE *)(v19 + 20) = 4;
  *(_QWORD *)(v19 + 24) = v18;
  *(_QWORD *)(v19 + 32) = 0;
  v20 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v19);
  *v20 = v20 + 2;
  v20[1] = 3;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_QWORD *)(v19 + 104) = 0;
  *(_QWORD *)v19 = off_1E357E700;
  *(_OWORD *)(v19 + 112) = xmmword_1991243D0;
  *(_QWORD *)(v19 + 152) = 0;
  *(_QWORD *)(v19 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v19 + 136) = v19 + 152;
  *(_WORD *)(v19 + 168) = 0;
  *(_BYTE *)(v19 + 160) = 3;
  *(_QWORD *)(v19 + 144) = 0x100000001;
  JSC::B3::Procedure::addValueImpl(v17, (JSC::B3::Value *)v19);
  v38 = v19;
  v21 = (char **)(v16 + 8);
  v22 = *(unsigned int *)(v16 + 20);
  if ((_DWORD)v22 == *(_DWORD *)(v16 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)&v38);
    v22 = *(unsigned int *)(v16 + 20);
    *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8 * v22) = *(_QWORD *)v37;
    v23 = v38;
  }
  else
  {
    *(_QWORD *)&(*v21)[8 * v22] = v19;
    v23 = v19;
  }
  *(_DWORD *)(v16 + 20) = v22 + 1;
  *(_QWORD *)(v23 + 32) = v16;
  v38 = 0;
  v39 = 3;
  JSC::B3::StackmapValue::append((__int128 *)v19, v11, (unint64_t)&v38);
  v24 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v24 + 8) = 1;
  *(_QWORD *)v24 = off_1E35B69E0;
  v25 = *(unsigned int **)(v19 + 56);
  *(_QWORD *)(v19 + 56) = v24;
  if (v25)
  {
    v26 = v25 + 2;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v25 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
    }
  }
  *(_QWORD *)(v19 + 112) = 0;
  *(_QWORD *)(v19 + 120) = 0;
  *(_QWORD *)(v19 + 128) = 0;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v19 + 16));
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v19;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v38 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v38);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v38;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI32TruncSF64@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  WTF *result;
  JSC::Wasm::OMGIRGenerator *v27;
  char v28;

  v7 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v8 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 4u, 0x41E0000000000000uLL, 0, 0);
  v9 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 4u, 0xC1E0000000200000, 0, 0);
  v10 = *((_QWORD *)this + 11);
  v11 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(*((_QWORD *)this + 11), *((_QWORD *)this + 7), 53, v12, v7, v8);
  if (*(_QWORD *)this)
    v14 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v14 = 0;
  v15 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(*((_QWORD *)this + 11), *((_QWORD *)this + 7), 54, v14, v7, v9);
  v16 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v10, v11, 22, v12, v13, v15);
  v17 = *((_QWORD *)this + 11);
  v18 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v19 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v19 = 0;
  v20 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 1u, 0, 0, 0);
  v21 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v17, v18, 51, v19, v16, v20);
  if (*(_QWORD *)this)
    v22 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v22 = 0;
  v23 = JSC::B3::BasicBlock::appendNew<JSC::B3::CheckValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value *>(*((_QWORD *)this + 11), *((JSC::B3::Value **)this + 7), v22, v21);
  v27 = this;
  JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addI32TruncSF64(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>(v23, (uint64_t *)&v27);
  if (*(_QWORD *)this)
    v24 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v24 = 0;
  v25 = JSC::B3::BasicBlock::appendNew<JSC::B3::PatchpointValue,JSC::B3::TypeKind,JSC::B3::Origin>(*((_QWORD *)this + 11), *((JSC::B3::Value **)this + 7), 1, v24);
  v27 = 0;
  v28 = 3;
  JSC::B3::StackmapValue::append((__int128 *)v25, v7, (unint64_t)&v27);
  JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addI32TruncSF64(JSC::B3::Variable *,JSC::B3::Variable *&)::$_1>(v25);
  *(_QWORD *)(v25 + 112) = 0;
  *(_QWORD *)(v25 + 120) = 0;
  *(_QWORD *)(v25 + 128) = 0;
  result = JSC::Wasm::OMGIRGenerator::push(this, (JSC::B3::Value *)v25);
  *a3 = result;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addI32TruncSF64(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = *a2;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E35B6A08;
  *(_QWORD *)(v4 + 16) = v5;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addI32TruncSF64(JSC::B3::Variable *,JSC::B3::Variable *&)::$_1>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E35B6A30;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v2;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32TruncSF32@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  JSC::B3::Value *v21;
  _QWORD *v22;
  uint64_t v23;
  JSC::B3::Value *v24;
  uint64_t v25;
  JSC::B3::Value *v26;
  unint64_t v27;
  JSC::B3::Value *v28;
  char **v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  JSC::B3::Value *v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  uint64_t v35;
  JSC::B3::Value *v36;
  unint64_t v37;
  uint64_t v38;
  JSC::B3::Value *v39;
  char **v40;
  uint64_t v41;
  JSC::B3::Value *v42;
  uint64_t v43;
  JSC::B3::Value *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  JSC::B3::Value *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  WTF *PushVariable;
  uint64_t v70;
  JSC::B3::Value *v71;
  unint64_t v72;
  uint64_t v73;
  char *result;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  JSC::B3::Variable **v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  char v87;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v84 = a4;
  v85 = v11;
  v13 = (char **)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v76 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v85);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v76;
    v15 = v85;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 3u, 0x4F000000uLL, 0, 0);
  v17 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 3u, 0xCF000000uLL, 0, 0);
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(53, v20, v11, v16);
  JSC::B3::Procedure::addValueImpl(v19, v21);
  v85 = (uint64_t)v21;
  v22 = (_QWORD *)(v18 + 8);
  v23 = *(unsigned int *)(v18 + 20);
  v83 = a3;
  if ((_DWORD)v23 == *(_DWORD *)(v18 + 16))
  {
    v77 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v18 + 8), v23 + 1, (unint64_t)&v85);
    v23 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v23) = *(_QWORD *)v77;
    v24 = (JSC::B3::Value *)v85;
  }
  else
  {
    *(_QWORD *)(*v22 + 8 * v23) = v21;
    v24 = v21;
  }
  *(_DWORD *)(v18 + 20) = v23 + 1;
  *((_QWORD *)v24 + 4) = v18;
  v25 = *((_QWORD *)this + 11);
  v26 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v27 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v27 = 0;
  v28 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(56, v27, v11, v17);
  JSC::B3::Procedure::addValueImpl(v26, v28);
  v85 = (uint64_t)v28;
  v29 = (char **)(v25 + 8);
  v30 = *(unsigned int *)(v25 + 20);
  if ((_DWORD)v30 == *(_DWORD *)(v25 + 16))
  {
    v78 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29, v30 + 1, (unint64_t)&v85);
    v30 = *(unsigned int *)(v25 + 20);
    *(_QWORD *)(*(_QWORD *)(v25 + 8) + 8 * v30) = *(_QWORD *)v78;
    v31 = (JSC::B3::Value *)v85;
  }
  else
  {
    *(_QWORD *)&(*v29)[8 * v30] = v28;
    v31 = v28;
  }
  *(_DWORD *)(v25 + 20) = v30 + 1;
  *((_QWORD *)v31 + 4) = v25;
  v32 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(22, v20, (uint64_t)v21, (uint64_t)v28);
  JSC::B3::Procedure::addValueImpl(v19, v32);
  v85 = (uint64_t)v32;
  v33 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v33 == *(_DWORD *)(v18 + 16))
  {
    v79 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v18 + 8), v33 + 1, (unint64_t)&v85);
    v33 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v33) = *(_QWORD *)v79;
    v34 = (JSC::B3::Value *)v85;
  }
  else
  {
    *(_QWORD *)(*v22 + 8 * v33) = v32;
    v34 = v32;
  }
  *(_DWORD *)(v18 + 20) = v33 + 1;
  *((_QWORD *)v34 + 4) = v18;
  v35 = *((_QWORD *)this + 11);
  v36 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v37 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v37 = 0;
  v38 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 1u, 0, 0, 0);
  v39 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, v37, (uint64_t)v32, v38);
  JSC::B3::Procedure::addValueImpl(v36, v39);
  v85 = (uint64_t)v39;
  v40 = (char **)(v35 + 8);
  v41 = *(unsigned int *)(v35 + 20);
  if ((_DWORD)v41 == *(_DWORD *)(v35 + 16))
  {
    v80 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v40, v41 + 1, (unint64_t)&v85);
    v41 = *(unsigned int *)(v35 + 20);
    *(_QWORD *)(*(_QWORD *)(v35 + 8) + 8 * v41) = *(_QWORD *)v80;
    v42 = (JSC::B3::Value *)v85;
  }
  else
  {
    *(_QWORD *)&(*v40)[8 * v41] = v39;
    v42 = v39;
  }
  *(_DWORD *)(v35 + 20) = v41 + 1;
  *((_QWORD *)v42 + 4) = v35;
  v43 = *((_QWORD *)this + 11);
  v44 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v45 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v45 = 0;
  v46 = WTF::fastMalloc((WTF *)0x98);
  *(_QWORD *)v46 = off_1E357F5F0;
  *(_DWORD *)(v46 + 8) = -1;
  *(_WORD *)(v46 + 12) = 88;
  *(_DWORD *)(v46 + 16) = 0;
  *(_BYTE *)(v46 + 20) = 4;
  *(_QWORD *)(v46 + 24) = v45;
  *(_QWORD *)(v46 + 32) = 0;
  v47 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v46);
  *v47 = v47 + 2;
  v47[1] = 3;
  *(_OWORD *)(v46 + 40) = 0u;
  *(_OWORD *)(v46 + 56) = 0u;
  *(_OWORD *)(v46 + 72) = 0u;
  *(_OWORD *)(v46 + 88) = 0u;
  *(_QWORD *)(v46 + 104) = 0;
  *(_QWORD *)v46 = off_1E357D550;
  v85 = (uint64_t)v39;
  v86 = 0;
  v87 = 0;
  JSC::B3::StackmapValue::append((__int128 *)v46, (uint64_t)v39, (unint64_t)&v86);
  JSC::B3::Procedure::addValueImpl(v44, (JSC::B3::Value *)v46);
  v85 = v46;
  v48 = (char **)(v43 + 8);
  v49 = *(unsigned int *)(v43 + 20);
  if ((_DWORD)v49 == *(_DWORD *)(v43 + 16))
  {
    v81 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v48, v49 + 1, (unint64_t)&v85);
    v49 = *(unsigned int *)(v43 + 20);
    *(_QWORD *)(*(_QWORD *)(v43 + 8) + 8 * v49) = *(_QWORD *)v81;
    v50 = v85;
  }
  else
  {
    *(_QWORD *)&(*v48)[8 * v49] = v46;
    v50 = v46;
  }
  *(_DWORD *)(v43 + 20) = v49 + 1;
  *(_QWORD *)(v50 + 32) = v43;
  v51 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v51 + 8) = 1;
  *(_QWORD *)v51 = off_1E35B6A58;
  *(_QWORD *)(v51 + 16) = this;
  v52 = *(unsigned int **)(v46 + 56);
  *(_QWORD *)(v46 + 56) = v51;
  if (v52)
  {
    v53 = v52 + 2;
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      atomic_store(1u, v52 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 8))(v52);
    }
  }
  v56 = *((_QWORD *)this + 11);
  v57 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v58 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v58 = 0;
  v59 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v59 = off_1E357F5F0;
  *(_DWORD *)(v59 + 8) = -1;
  *(_WORD *)(v59 + 12) = 83;
  *(_DWORD *)(v59 + 16) = 1;
  *(_BYTE *)(v59 + 20) = 4;
  *(_QWORD *)(v59 + 24) = v58;
  *(_QWORD *)(v59 + 32) = 0;
  v60 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v59);
  *v60 = v60 + 2;
  v60[1] = 3;
  *(_OWORD *)(v59 + 40) = 0u;
  *(_OWORD *)(v59 + 56) = 0u;
  *(_OWORD *)(v59 + 72) = 0u;
  *(_OWORD *)(v59 + 88) = 0u;
  *(_QWORD *)(v59 + 104) = 0;
  *(_OWORD *)(v59 + 112) = xmmword_1991243D0;
  *(_QWORD *)v59 = off_1E357E700;
  *(_QWORD *)(v59 + 152) = 0;
  *(_QWORD *)(v59 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v59 + 136) = v59 + 152;
  *(_WORD *)(v59 + 168) = 0;
  *(_BYTE *)(v59 + 160) = 3;
  *(_QWORD *)(v59 + 144) = 0x100000001;
  JSC::B3::Procedure::addValueImpl(v57, (JSC::B3::Value *)v59);
  v85 = v59;
  v61 = (char **)(v56 + 8);
  v62 = *(unsigned int *)(v56 + 20);
  if ((_DWORD)v62 == *(_DWORD *)(v56 + 16))
  {
    v82 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v61, v62 + 1, (unint64_t)&v85);
    v62 = *(unsigned int *)(v56 + 20);
    *(_QWORD *)(*(_QWORD *)(v56 + 8) + 8 * v62) = *(_QWORD *)v82;
    v63 = v85;
  }
  else
  {
    *(_QWORD *)&(*v61)[8 * v62] = v59;
    v63 = v59;
  }
  *(_DWORD *)(v56 + 20) = v62 + 1;
  *(_QWORD *)(v63 + 32) = v56;
  v85 = 0;
  LOBYTE(v86) = 3;
  JSC::B3::StackmapValue::append((__int128 *)v59, v11, (unint64_t)&v85);
  v64 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v64 + 8) = 1;
  *(_QWORD *)v64 = off_1E35B6A80;
  v65 = *(unsigned int **)(v59 + 56);
  *(_QWORD *)(v59 + 56) = v64;
  if (v65)
  {
    v66 = v65 + 2;
    do
    {
      v67 = __ldaxr(v66);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v66));
    if (!v68)
    {
      atomic_store(1u, v65 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v65 + 8))(v65);
    }
  }
  *(_QWORD *)(v59 + 112) = 0;
  *(_QWORD *)(v59 + 120) = 0;
  *(_QWORD *)(v59 + 128) = 0;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v59 + 16));
  v70 = *((_QWORD *)this + 11);
  v71 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v72 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v72 = 0;
  v73 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v73 + 8) = -1;
  *(_WORD *)(v73 + 12) = 9;
  *(_DWORD *)(v73 + 16) = 0;
  *(_BYTE *)(v73 + 20) = 1;
  *(_QWORD *)(v73 + 24) = v72;
  *(_QWORD *)(v73 + 32) = 0;
  *(_QWORD *)v73 = off_1E357F0F8;
  *(_QWORD *)(v73 + 40) = PushVariable;
  *(_QWORD *)(v73 + 48) = v59;
  JSC::B3::Procedure::addValueImpl(v71, (JSC::B3::Value *)v73);
  v85 = v73;
  result = (char *)(v70 + 8);
  v75 = *(unsigned int *)(v70 + 20);
  if ((_DWORD)v75 == *(_DWORD *)(v70 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v75 + 1, (unint64_t)&v85);
    v75 = *(unsigned int *)(v70 + 20);
    *(_QWORD *)(*(_QWORD *)(v70 + 8) + 8 * v75) = *(_QWORD *)result;
    v73 = v85;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v75) = v73;
  }
  *(_DWORD *)(v70 + 20) = v75 + 1;
  *(_QWORD *)(v73 + 32) = v70;
  *v83 = PushVariable;
  *v84 = 0;
  v84[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32TruncUF64@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  JSC::B3::Value *v21;
  _QWORD *v22;
  uint64_t v23;
  JSC::B3::Value *v24;
  uint64_t v25;
  JSC::B3::Value *v26;
  unint64_t v27;
  JSC::B3::Value *v28;
  char **v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  JSC::B3::Value *v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  uint64_t v35;
  JSC::B3::Value *v36;
  unint64_t v37;
  uint64_t v38;
  JSC::B3::Value *v39;
  char **v40;
  uint64_t v41;
  JSC::B3::Value *v42;
  uint64_t v43;
  JSC::B3::Value *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  JSC::B3::Value *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  WTF *PushVariable;
  uint64_t v70;
  JSC::B3::Value *v71;
  unint64_t v72;
  uint64_t v73;
  char *result;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  JSC::B3::Variable **v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  char v87;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v84 = a4;
  v85 = v11;
  v13 = (char **)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v76 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v85);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v76;
    v15 = v85;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 4u, 0x41F0000000000000uLL, 0, 0);
  v17 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 4u, 0xBFF0000000000000, 0, 0);
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(53, v20, v11, v16);
  JSC::B3::Procedure::addValueImpl(v19, v21);
  v85 = (uint64_t)v21;
  v22 = (_QWORD *)(v18 + 8);
  v23 = *(unsigned int *)(v18 + 20);
  v83 = a3;
  if ((_DWORD)v23 == *(_DWORD *)(v18 + 16))
  {
    v77 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v18 + 8), v23 + 1, (unint64_t)&v85);
    v23 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v23) = *(_QWORD *)v77;
    v24 = (JSC::B3::Value *)v85;
  }
  else
  {
    *(_QWORD *)(*v22 + 8 * v23) = v21;
    v24 = v21;
  }
  *(_DWORD *)(v18 + 20) = v23 + 1;
  *((_QWORD *)v24 + 4) = v18;
  v25 = *((_QWORD *)this + 11);
  v26 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v27 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v27 = 0;
  v28 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(54, v27, v11, v17);
  JSC::B3::Procedure::addValueImpl(v26, v28);
  v85 = (uint64_t)v28;
  v29 = (char **)(v25 + 8);
  v30 = *(unsigned int *)(v25 + 20);
  if ((_DWORD)v30 == *(_DWORD *)(v25 + 16))
  {
    v78 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29, v30 + 1, (unint64_t)&v85);
    v30 = *(unsigned int *)(v25 + 20);
    *(_QWORD *)(*(_QWORD *)(v25 + 8) + 8 * v30) = *(_QWORD *)v78;
    v31 = (JSC::B3::Value *)v85;
  }
  else
  {
    *(_QWORD *)&(*v29)[8 * v30] = v28;
    v31 = v28;
  }
  *(_DWORD *)(v25 + 20) = v30 + 1;
  *((_QWORD *)v31 + 4) = v25;
  v32 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(22, v20, (uint64_t)v21, (uint64_t)v28);
  JSC::B3::Procedure::addValueImpl(v19, v32);
  v85 = (uint64_t)v32;
  v33 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v33 == *(_DWORD *)(v18 + 16))
  {
    v79 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v18 + 8), v33 + 1, (unint64_t)&v85);
    v33 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v33) = *(_QWORD *)v79;
    v34 = (JSC::B3::Value *)v85;
  }
  else
  {
    *(_QWORD *)(*v22 + 8 * v33) = v32;
    v34 = v32;
  }
  *(_DWORD *)(v18 + 20) = v33 + 1;
  *((_QWORD *)v34 + 4) = v18;
  v35 = *((_QWORD *)this + 11);
  v36 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v37 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v37 = 0;
  v38 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 1u, 0, 0, 0);
  v39 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, v37, (uint64_t)v32, v38);
  JSC::B3::Procedure::addValueImpl(v36, v39);
  v85 = (uint64_t)v39;
  v40 = (char **)(v35 + 8);
  v41 = *(unsigned int *)(v35 + 20);
  if ((_DWORD)v41 == *(_DWORD *)(v35 + 16))
  {
    v80 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v40, v41 + 1, (unint64_t)&v85);
    v41 = *(unsigned int *)(v35 + 20);
    *(_QWORD *)(*(_QWORD *)(v35 + 8) + 8 * v41) = *(_QWORD *)v80;
    v42 = (JSC::B3::Value *)v85;
  }
  else
  {
    *(_QWORD *)&(*v40)[8 * v41] = v39;
    v42 = v39;
  }
  *(_DWORD *)(v35 + 20) = v41 + 1;
  *((_QWORD *)v42 + 4) = v35;
  v43 = *((_QWORD *)this + 11);
  v44 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v45 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v45 = 0;
  v46 = WTF::fastMalloc((WTF *)0x98);
  *(_QWORD *)v46 = off_1E357F5F0;
  *(_DWORD *)(v46 + 8) = -1;
  *(_WORD *)(v46 + 12) = 88;
  *(_DWORD *)(v46 + 16) = 0;
  *(_BYTE *)(v46 + 20) = 4;
  *(_QWORD *)(v46 + 24) = v45;
  *(_QWORD *)(v46 + 32) = 0;
  v47 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v46);
  *v47 = v47 + 2;
  v47[1] = 3;
  *(_OWORD *)(v46 + 40) = 0u;
  *(_OWORD *)(v46 + 56) = 0u;
  *(_OWORD *)(v46 + 72) = 0u;
  *(_OWORD *)(v46 + 88) = 0u;
  *(_QWORD *)(v46 + 104) = 0;
  *(_QWORD *)v46 = off_1E357D550;
  v85 = (uint64_t)v39;
  v86 = 0;
  v87 = 0;
  JSC::B3::StackmapValue::append((__int128 *)v46, (uint64_t)v39, (unint64_t)&v86);
  JSC::B3::Procedure::addValueImpl(v44, (JSC::B3::Value *)v46);
  v85 = v46;
  v48 = (char **)(v43 + 8);
  v49 = *(unsigned int *)(v43 + 20);
  if ((_DWORD)v49 == *(_DWORD *)(v43 + 16))
  {
    v81 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v48, v49 + 1, (unint64_t)&v85);
    v49 = *(unsigned int *)(v43 + 20);
    *(_QWORD *)(*(_QWORD *)(v43 + 8) + 8 * v49) = *(_QWORD *)v81;
    v50 = v85;
  }
  else
  {
    *(_QWORD *)&(*v48)[8 * v49] = v46;
    v50 = v46;
  }
  *(_DWORD *)(v43 + 20) = v49 + 1;
  *(_QWORD *)(v50 + 32) = v43;
  v51 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v51 + 8) = 1;
  *(_QWORD *)v51 = off_1E35B6AA8;
  *(_QWORD *)(v51 + 16) = this;
  v52 = *(unsigned int **)(v46 + 56);
  *(_QWORD *)(v46 + 56) = v51;
  if (v52)
  {
    v53 = v52 + 2;
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      atomic_store(1u, v52 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 8))(v52);
    }
  }
  v56 = *((_QWORD *)this + 11);
  v57 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v58 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v58 = 0;
  v59 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v59 = off_1E357F5F0;
  *(_DWORD *)(v59 + 8) = -1;
  *(_WORD *)(v59 + 12) = 83;
  *(_DWORD *)(v59 + 16) = 1;
  *(_BYTE *)(v59 + 20) = 4;
  *(_QWORD *)(v59 + 24) = v58;
  *(_QWORD *)(v59 + 32) = 0;
  v60 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v59);
  *v60 = v60 + 2;
  v60[1] = 3;
  *(_OWORD *)(v59 + 40) = 0u;
  *(_OWORD *)(v59 + 56) = 0u;
  *(_OWORD *)(v59 + 72) = 0u;
  *(_OWORD *)(v59 + 88) = 0u;
  *(_QWORD *)(v59 + 104) = 0;
  *(_OWORD *)(v59 + 112) = xmmword_1991243D0;
  *(_QWORD *)v59 = off_1E357E700;
  *(_QWORD *)(v59 + 152) = 0;
  *(_QWORD *)(v59 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v59 + 136) = v59 + 152;
  *(_WORD *)(v59 + 168) = 0;
  *(_BYTE *)(v59 + 160) = 3;
  *(_QWORD *)(v59 + 144) = 0x100000001;
  JSC::B3::Procedure::addValueImpl(v57, (JSC::B3::Value *)v59);
  v85 = v59;
  v61 = (char **)(v56 + 8);
  v62 = *(unsigned int *)(v56 + 20);
  if ((_DWORD)v62 == *(_DWORD *)(v56 + 16))
  {
    v82 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v61, v62 + 1, (unint64_t)&v85);
    v62 = *(unsigned int *)(v56 + 20);
    *(_QWORD *)(*(_QWORD *)(v56 + 8) + 8 * v62) = *(_QWORD *)v82;
    v63 = v85;
  }
  else
  {
    *(_QWORD *)&(*v61)[8 * v62] = v59;
    v63 = v59;
  }
  *(_DWORD *)(v56 + 20) = v62 + 1;
  *(_QWORD *)(v63 + 32) = v56;
  v85 = 0;
  LOBYTE(v86) = 3;
  JSC::B3::StackmapValue::append((__int128 *)v59, v11, (unint64_t)&v85);
  v64 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v64 + 8) = 1;
  *(_QWORD *)v64 = off_1E35B6AD0;
  v65 = *(unsigned int **)(v59 + 56);
  *(_QWORD *)(v59 + 56) = v64;
  if (v65)
  {
    v66 = v65 + 2;
    do
    {
      v67 = __ldaxr(v66);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v66));
    if (!v68)
    {
      atomic_store(1u, v65 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v65 + 8))(v65);
    }
  }
  *(_QWORD *)(v59 + 112) = 0;
  *(_QWORD *)(v59 + 120) = 0;
  *(_QWORD *)(v59 + 128) = 0;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v59 + 16));
  v70 = *((_QWORD *)this + 11);
  v71 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v72 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v72 = 0;
  v73 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v73 + 8) = -1;
  *(_WORD *)(v73 + 12) = 9;
  *(_DWORD *)(v73 + 16) = 0;
  *(_BYTE *)(v73 + 20) = 1;
  *(_QWORD *)(v73 + 24) = v72;
  *(_QWORD *)(v73 + 32) = 0;
  *(_QWORD *)v73 = off_1E357F0F8;
  *(_QWORD *)(v73 + 40) = PushVariable;
  *(_QWORD *)(v73 + 48) = v59;
  JSC::B3::Procedure::addValueImpl(v71, (JSC::B3::Value *)v73);
  v85 = v73;
  result = (char *)(v70 + 8);
  v75 = *(unsigned int *)(v70 + 20);
  if ((_DWORD)v75 == *(_DWORD *)(v70 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v75 + 1, (unint64_t)&v85);
    v75 = *(unsigned int *)(v70 + 20);
    *(_QWORD *)(*(_QWORD *)(v70 + 8) + 8 * v75) = *(_QWORD *)result;
    v73 = v85;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v75) = v73;
  }
  *(_DWORD *)(v70 + 20) = v75 + 1;
  *(_QWORD *)(v73 + 32) = v70;
  *v83 = PushVariable;
  *v84 = 0;
  v84[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32TruncUF32@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  JSC::B3::Value *v21;
  _QWORD *v22;
  uint64_t v23;
  JSC::B3::Value *v24;
  uint64_t v25;
  JSC::B3::Value *v26;
  unint64_t v27;
  JSC::B3::Value *v28;
  char **v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  JSC::B3::Value *v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  uint64_t v35;
  JSC::B3::Value *v36;
  unint64_t v37;
  uint64_t v38;
  JSC::B3::Value *v39;
  char **v40;
  uint64_t v41;
  JSC::B3::Value *v42;
  uint64_t v43;
  JSC::B3::Value *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  JSC::B3::Value *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  WTF *PushVariable;
  uint64_t v70;
  JSC::B3::Value *v71;
  unint64_t v72;
  uint64_t v73;
  char *result;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  JSC::B3::Variable **v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  char v87;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v84 = a4;
  v85 = v11;
  v13 = (char **)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v76 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v85);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v76;
    v15 = v85;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 3u, 0x4F800000uLL, 0, 0);
  v17 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 3u, 0xBF800000uLL, 0, 0);
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(53, v20, v11, v16);
  JSC::B3::Procedure::addValueImpl(v19, v21);
  v85 = (uint64_t)v21;
  v22 = (_QWORD *)(v18 + 8);
  v23 = *(unsigned int *)(v18 + 20);
  v83 = a3;
  if ((_DWORD)v23 == *(_DWORD *)(v18 + 16))
  {
    v77 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v18 + 8), v23 + 1, (unint64_t)&v85);
    v23 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v23) = *(_QWORD *)v77;
    v24 = (JSC::B3::Value *)v85;
  }
  else
  {
    *(_QWORD *)(*v22 + 8 * v23) = v21;
    v24 = v21;
  }
  *(_DWORD *)(v18 + 20) = v23 + 1;
  *((_QWORD *)v24 + 4) = v18;
  v25 = *((_QWORD *)this + 11);
  v26 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v27 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v27 = 0;
  v28 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(54, v27, v11, v17);
  JSC::B3::Procedure::addValueImpl(v26, v28);
  v85 = (uint64_t)v28;
  v29 = (char **)(v25 + 8);
  v30 = *(unsigned int *)(v25 + 20);
  if ((_DWORD)v30 == *(_DWORD *)(v25 + 16))
  {
    v78 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29, v30 + 1, (unint64_t)&v85);
    v30 = *(unsigned int *)(v25 + 20);
    *(_QWORD *)(*(_QWORD *)(v25 + 8) + 8 * v30) = *(_QWORD *)v78;
    v31 = (JSC::B3::Value *)v85;
  }
  else
  {
    *(_QWORD *)&(*v29)[8 * v30] = v28;
    v31 = v28;
  }
  *(_DWORD *)(v25 + 20) = v30 + 1;
  *((_QWORD *)v31 + 4) = v25;
  v32 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(22, v20, (uint64_t)v21, (uint64_t)v28);
  JSC::B3::Procedure::addValueImpl(v19, v32);
  v85 = (uint64_t)v32;
  v33 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v33 == *(_DWORD *)(v18 + 16))
  {
    v79 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v18 + 8), v33 + 1, (unint64_t)&v85);
    v33 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v33) = *(_QWORD *)v79;
    v34 = (JSC::B3::Value *)v85;
  }
  else
  {
    *(_QWORD *)(*v22 + 8 * v33) = v32;
    v34 = v32;
  }
  *(_DWORD *)(v18 + 20) = v33 + 1;
  *((_QWORD *)v34 + 4) = v18;
  v35 = *((_QWORD *)this + 11);
  v36 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v37 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v37 = 0;
  v38 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 1u, 0, 0, 0);
  v39 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, v37, (uint64_t)v32, v38);
  JSC::B3::Procedure::addValueImpl(v36, v39);
  v85 = (uint64_t)v39;
  v40 = (char **)(v35 + 8);
  v41 = *(unsigned int *)(v35 + 20);
  if ((_DWORD)v41 == *(_DWORD *)(v35 + 16))
  {
    v80 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v40, v41 + 1, (unint64_t)&v85);
    v41 = *(unsigned int *)(v35 + 20);
    *(_QWORD *)(*(_QWORD *)(v35 + 8) + 8 * v41) = *(_QWORD *)v80;
    v42 = (JSC::B3::Value *)v85;
  }
  else
  {
    *(_QWORD *)&(*v40)[8 * v41] = v39;
    v42 = v39;
  }
  *(_DWORD *)(v35 + 20) = v41 + 1;
  *((_QWORD *)v42 + 4) = v35;
  v43 = *((_QWORD *)this + 11);
  v44 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v45 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v45 = 0;
  v46 = WTF::fastMalloc((WTF *)0x98);
  *(_QWORD *)v46 = off_1E357F5F0;
  *(_DWORD *)(v46 + 8) = -1;
  *(_WORD *)(v46 + 12) = 88;
  *(_DWORD *)(v46 + 16) = 0;
  *(_BYTE *)(v46 + 20) = 4;
  *(_QWORD *)(v46 + 24) = v45;
  *(_QWORD *)(v46 + 32) = 0;
  v47 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v46);
  *v47 = v47 + 2;
  v47[1] = 3;
  *(_OWORD *)(v46 + 40) = 0u;
  *(_OWORD *)(v46 + 56) = 0u;
  *(_OWORD *)(v46 + 72) = 0u;
  *(_OWORD *)(v46 + 88) = 0u;
  *(_QWORD *)(v46 + 104) = 0;
  *(_QWORD *)v46 = off_1E357D550;
  v85 = (uint64_t)v39;
  v86 = 0;
  v87 = 0;
  JSC::B3::StackmapValue::append((__int128 *)v46, (uint64_t)v39, (unint64_t)&v86);
  JSC::B3::Procedure::addValueImpl(v44, (JSC::B3::Value *)v46);
  v85 = v46;
  v48 = (char **)(v43 + 8);
  v49 = *(unsigned int *)(v43 + 20);
  if ((_DWORD)v49 == *(_DWORD *)(v43 + 16))
  {
    v81 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v48, v49 + 1, (unint64_t)&v85);
    v49 = *(unsigned int *)(v43 + 20);
    *(_QWORD *)(*(_QWORD *)(v43 + 8) + 8 * v49) = *(_QWORD *)v81;
    v50 = v85;
  }
  else
  {
    *(_QWORD *)&(*v48)[8 * v49] = v46;
    v50 = v46;
  }
  *(_DWORD *)(v43 + 20) = v49 + 1;
  *(_QWORD *)(v50 + 32) = v43;
  v51 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v51 + 8) = 1;
  *(_QWORD *)v51 = off_1E35B6AF8;
  *(_QWORD *)(v51 + 16) = this;
  v52 = *(unsigned int **)(v46 + 56);
  *(_QWORD *)(v46 + 56) = v51;
  if (v52)
  {
    v53 = v52 + 2;
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      atomic_store(1u, v52 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 8))(v52);
    }
  }
  v56 = *((_QWORD *)this + 11);
  v57 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v58 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v58 = 0;
  v59 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v59 = off_1E357F5F0;
  *(_DWORD *)(v59 + 8) = -1;
  *(_WORD *)(v59 + 12) = 83;
  *(_DWORD *)(v59 + 16) = 1;
  *(_BYTE *)(v59 + 20) = 4;
  *(_QWORD *)(v59 + 24) = v58;
  *(_QWORD *)(v59 + 32) = 0;
  v60 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v59);
  *v60 = v60 + 2;
  v60[1] = 3;
  *(_OWORD *)(v59 + 40) = 0u;
  *(_OWORD *)(v59 + 56) = 0u;
  *(_OWORD *)(v59 + 72) = 0u;
  *(_OWORD *)(v59 + 88) = 0u;
  *(_QWORD *)(v59 + 104) = 0;
  *(_OWORD *)(v59 + 112) = xmmword_1991243D0;
  *(_QWORD *)v59 = off_1E357E700;
  *(_QWORD *)(v59 + 152) = 0;
  *(_QWORD *)(v59 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v59 + 136) = v59 + 152;
  *(_WORD *)(v59 + 168) = 0;
  *(_BYTE *)(v59 + 160) = 3;
  *(_QWORD *)(v59 + 144) = 0x100000001;
  JSC::B3::Procedure::addValueImpl(v57, (JSC::B3::Value *)v59);
  v85 = v59;
  v61 = (char **)(v56 + 8);
  v62 = *(unsigned int *)(v56 + 20);
  if ((_DWORD)v62 == *(_DWORD *)(v56 + 16))
  {
    v82 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v61, v62 + 1, (unint64_t)&v85);
    v62 = *(unsigned int *)(v56 + 20);
    *(_QWORD *)(*(_QWORD *)(v56 + 8) + 8 * v62) = *(_QWORD *)v82;
    v63 = v85;
  }
  else
  {
    *(_QWORD *)&(*v61)[8 * v62] = v59;
    v63 = v59;
  }
  *(_DWORD *)(v56 + 20) = v62 + 1;
  *(_QWORD *)(v63 + 32) = v56;
  v85 = 0;
  LOBYTE(v86) = 3;
  JSC::B3::StackmapValue::append((__int128 *)v59, v11, (unint64_t)&v85);
  v64 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v64 + 8) = 1;
  *(_QWORD *)v64 = off_1E35B6B20;
  v65 = *(unsigned int **)(v59 + 56);
  *(_QWORD *)(v59 + 56) = v64;
  if (v65)
  {
    v66 = v65 + 2;
    do
    {
      v67 = __ldaxr(v66);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v66));
    if (!v68)
    {
      atomic_store(1u, v65 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v65 + 8))(v65);
    }
  }
  *(_QWORD *)(v59 + 112) = 0;
  *(_QWORD *)(v59 + 120) = 0;
  *(_QWORD *)(v59 + 128) = 0;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v59 + 16));
  v70 = *((_QWORD *)this + 11);
  v71 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v72 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v72 = 0;
  v73 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v73 + 8) = -1;
  *(_WORD *)(v73 + 12) = 9;
  *(_DWORD *)(v73 + 16) = 0;
  *(_BYTE *)(v73 + 20) = 1;
  *(_QWORD *)(v73 + 24) = v72;
  *(_QWORD *)(v73 + 32) = 0;
  *(_QWORD *)v73 = off_1E357F0F8;
  *(_QWORD *)(v73 + 40) = PushVariable;
  *(_QWORD *)(v73 + 48) = v59;
  JSC::B3::Procedure::addValueImpl(v71, (JSC::B3::Value *)v73);
  v85 = v73;
  result = (char *)(v70 + 8);
  v75 = *(unsigned int *)(v70 + 20);
  if ((_DWORD)v75 == *(_DWORD *)(v70 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v75 + 1, (unint64_t)&v85);
    v75 = *(unsigned int *)(v70 + 20);
    *(_QWORD *)(*(_QWORD *)(v70 + 8) + 8 * v75) = *(_QWORD *)result;
    v73 = v85;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v75) = v73;
  }
  *(_DWORD *)(v70 + 20) = v75 + 1;
  *(_QWORD *)(v73 + 32) = v70;
  *v83 = PushVariable;
  *v84 = 0;
  v84[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI64TruncSF64@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  WTF *result;
  JSC::Wasm::OMGIRGenerator *v27;
  char v28;

  v7 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v8 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 4u, 0x43E0000000000000uLL, 0, 0);
  v9 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 4u, 0xC3E0000000000000, 0, 0);
  v10 = *((_QWORD *)this + 11);
  v11 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(*((_QWORD *)this + 11), *((_QWORD *)this + 7), 53, v12, v7, v8);
  if (*(_QWORD *)this)
    v14 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v14 = 0;
  v15 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(*((_QWORD *)this + 11), *((_QWORD *)this + 7), 56, v14, v7, v9);
  v16 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v10, v11, 22, v12, v13, v15);
  v17 = *((_QWORD *)this + 11);
  v18 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v19 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v19 = 0;
  v20 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 1u, 0, 0, 0);
  v21 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v17, v18, 51, v19, v16, v20);
  if (*(_QWORD *)this)
    v22 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v22 = 0;
  v23 = JSC::B3::BasicBlock::appendNew<JSC::B3::CheckValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value *>(*((_QWORD *)this + 11), *((JSC::B3::Value **)this + 7), v22, v21);
  v27 = this;
  JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addI64TruncSF64(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>(v23, (uint64_t *)&v27);
  if (*(_QWORD *)this)
    v24 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v24 = 0;
  v25 = JSC::B3::BasicBlock::appendNew<JSC::B3::PatchpointValue,JSC::B3::TypeKind,JSC::B3::Origin>(*((_QWORD *)this + 11), *((JSC::B3::Value **)this + 7), 2, v24);
  v27 = 0;
  v28 = 3;
  JSC::B3::StackmapValue::append((__int128 *)v25, v7, (unint64_t)&v27);
  JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addI64TruncSF64(JSC::B3::Variable *,JSC::B3::Variable *&)::$_1>(v25);
  *(_QWORD *)(v25 + 112) = 0;
  *(_QWORD *)(v25 + 120) = 0;
  *(_QWORD *)(v25 + 128) = 0;
  result = JSC::Wasm::OMGIRGenerator::push(this, (JSC::B3::Value *)v25);
  *a3 = result;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addI64TruncSF64(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = *a2;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E35B6B48;
  *(_QWORD *)(v4 + 16) = v5;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addI64TruncSF64(JSC::B3::Variable *,JSC::B3::Variable *&)::$_1>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E35B6B70;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v2;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64TruncUF64@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  JSC::B3::Value *v21;
  _QWORD *v22;
  uint64_t v23;
  JSC::B3::Value *v24;
  uint64_t v25;
  JSC::B3::Value *v26;
  unint64_t v27;
  JSC::B3::Value *v28;
  char **v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  JSC::B3::Value *v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  uint64_t v35;
  JSC::B3::Value *v36;
  unint64_t v37;
  uint64_t v38;
  JSC::B3::Value *v39;
  char **v40;
  uint64_t v41;
  JSC::B3::Value *v42;
  uint64_t v43;
  JSC::B3::Value *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  JSC::B3::Value *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  WTF *PushVariable;
  uint64_t v70;
  JSC::B3::Value *v71;
  unint64_t v72;
  uint64_t v73;
  char *result;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  JSC::B3::Variable **v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  char v87;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v84 = a4;
  v85 = v11;
  v13 = (char **)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v76 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v85);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v76;
    v15 = v85;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 4u, 0x43F0000000000000uLL, 0, 0);
  v17 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 4u, 0xBFF0000000000000, 0, 0);
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(53, v20, v11, v16);
  JSC::B3::Procedure::addValueImpl(v19, v21);
  v85 = (uint64_t)v21;
  v22 = (_QWORD *)(v18 + 8);
  v23 = *(unsigned int *)(v18 + 20);
  v83 = a3;
  if ((_DWORD)v23 == *(_DWORD *)(v18 + 16))
  {
    v77 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v18 + 8), v23 + 1, (unint64_t)&v85);
    v23 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v23) = *(_QWORD *)v77;
    v24 = (JSC::B3::Value *)v85;
  }
  else
  {
    *(_QWORD *)(*v22 + 8 * v23) = v21;
    v24 = v21;
  }
  *(_DWORD *)(v18 + 20) = v23 + 1;
  *((_QWORD *)v24 + 4) = v18;
  v25 = *((_QWORD *)this + 11);
  v26 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v27 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v27 = 0;
  v28 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(54, v27, v11, v17);
  JSC::B3::Procedure::addValueImpl(v26, v28);
  v85 = (uint64_t)v28;
  v29 = (char **)(v25 + 8);
  v30 = *(unsigned int *)(v25 + 20);
  if ((_DWORD)v30 == *(_DWORD *)(v25 + 16))
  {
    v78 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29, v30 + 1, (unint64_t)&v85);
    v30 = *(unsigned int *)(v25 + 20);
    *(_QWORD *)(*(_QWORD *)(v25 + 8) + 8 * v30) = *(_QWORD *)v78;
    v31 = (JSC::B3::Value *)v85;
  }
  else
  {
    *(_QWORD *)&(*v29)[8 * v30] = v28;
    v31 = v28;
  }
  *(_DWORD *)(v25 + 20) = v30 + 1;
  *((_QWORD *)v31 + 4) = v25;
  v32 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(22, v20, (uint64_t)v21, (uint64_t)v28);
  JSC::B3::Procedure::addValueImpl(v19, v32);
  v85 = (uint64_t)v32;
  v33 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v33 == *(_DWORD *)(v18 + 16))
  {
    v79 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v18 + 8), v33 + 1, (unint64_t)&v85);
    v33 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v33) = *(_QWORD *)v79;
    v34 = (JSC::B3::Value *)v85;
  }
  else
  {
    *(_QWORD *)(*v22 + 8 * v33) = v32;
    v34 = v32;
  }
  *(_DWORD *)(v18 + 20) = v33 + 1;
  *((_QWORD *)v34 + 4) = v18;
  v35 = *((_QWORD *)this + 11);
  v36 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v37 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v37 = 0;
  v38 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 1u, 0, 0, 0);
  v39 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, v37, (uint64_t)v32, v38);
  JSC::B3::Procedure::addValueImpl(v36, v39);
  v85 = (uint64_t)v39;
  v40 = (char **)(v35 + 8);
  v41 = *(unsigned int *)(v35 + 20);
  if ((_DWORD)v41 == *(_DWORD *)(v35 + 16))
  {
    v80 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v40, v41 + 1, (unint64_t)&v85);
    v41 = *(unsigned int *)(v35 + 20);
    *(_QWORD *)(*(_QWORD *)(v35 + 8) + 8 * v41) = *(_QWORD *)v80;
    v42 = (JSC::B3::Value *)v85;
  }
  else
  {
    *(_QWORD *)&(*v40)[8 * v41] = v39;
    v42 = v39;
  }
  *(_DWORD *)(v35 + 20) = v41 + 1;
  *((_QWORD *)v42 + 4) = v35;
  v43 = *((_QWORD *)this + 11);
  v44 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v45 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v45 = 0;
  v46 = WTF::fastMalloc((WTF *)0x98);
  *(_QWORD *)v46 = off_1E357F5F0;
  *(_DWORD *)(v46 + 8) = -1;
  *(_WORD *)(v46 + 12) = 88;
  *(_DWORD *)(v46 + 16) = 0;
  *(_BYTE *)(v46 + 20) = 4;
  *(_QWORD *)(v46 + 24) = v45;
  *(_QWORD *)(v46 + 32) = 0;
  v47 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v46);
  *v47 = v47 + 2;
  v47[1] = 3;
  *(_OWORD *)(v46 + 40) = 0u;
  *(_OWORD *)(v46 + 56) = 0u;
  *(_OWORD *)(v46 + 72) = 0u;
  *(_OWORD *)(v46 + 88) = 0u;
  *(_QWORD *)(v46 + 104) = 0;
  *(_QWORD *)v46 = off_1E357D550;
  v85 = (uint64_t)v39;
  v86 = 0;
  v87 = 0;
  JSC::B3::StackmapValue::append((__int128 *)v46, (uint64_t)v39, (unint64_t)&v86);
  JSC::B3::Procedure::addValueImpl(v44, (JSC::B3::Value *)v46);
  v85 = v46;
  v48 = (char **)(v43 + 8);
  v49 = *(unsigned int *)(v43 + 20);
  if ((_DWORD)v49 == *(_DWORD *)(v43 + 16))
  {
    v81 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v48, v49 + 1, (unint64_t)&v85);
    v49 = *(unsigned int *)(v43 + 20);
    *(_QWORD *)(*(_QWORD *)(v43 + 8) + 8 * v49) = *(_QWORD *)v81;
    v50 = v85;
  }
  else
  {
    *(_QWORD *)&(*v48)[8 * v49] = v46;
    v50 = v46;
  }
  *(_DWORD *)(v43 + 20) = v49 + 1;
  *(_QWORD *)(v50 + 32) = v43;
  v51 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v51 + 8) = 1;
  *(_QWORD *)v51 = off_1E35B6B98;
  *(_QWORD *)(v51 + 16) = this;
  v52 = *(unsigned int **)(v46 + 56);
  *(_QWORD *)(v46 + 56) = v51;
  if (v52)
  {
    v53 = v52 + 2;
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      atomic_store(1u, v52 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 8))(v52);
    }
  }
  v56 = *((_QWORD *)this + 11);
  v57 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v58 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v58 = 0;
  v59 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v59 = off_1E357F5F0;
  *(_DWORD *)(v59 + 8) = -1;
  *(_WORD *)(v59 + 12) = 83;
  *(_DWORD *)(v59 + 16) = 2;
  *(_BYTE *)(v59 + 20) = 4;
  *(_QWORD *)(v59 + 24) = v58;
  *(_QWORD *)(v59 + 32) = 0;
  v60 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v59);
  *v60 = v60 + 2;
  v60[1] = 3;
  *(_OWORD *)(v59 + 40) = 0u;
  *(_OWORD *)(v59 + 56) = 0u;
  *(_OWORD *)(v59 + 72) = 0u;
  *(_OWORD *)(v59 + 88) = 0u;
  *(_QWORD *)(v59 + 104) = 0;
  *(_OWORD *)(v59 + 112) = xmmword_1991243D0;
  *(_QWORD *)v59 = off_1E357E700;
  *(_QWORD *)(v59 + 152) = 0;
  *(_QWORD *)(v59 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v59 + 136) = v59 + 152;
  *(_WORD *)(v59 + 168) = 0;
  *(_BYTE *)(v59 + 160) = 3;
  *(_QWORD *)(v59 + 144) = 0x100000001;
  JSC::B3::Procedure::addValueImpl(v57, (JSC::B3::Value *)v59);
  v85 = v59;
  v61 = (char **)(v56 + 8);
  v62 = *(unsigned int *)(v56 + 20);
  if ((_DWORD)v62 == *(_DWORD *)(v56 + 16))
  {
    v82 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v61, v62 + 1, (unint64_t)&v85);
    v62 = *(unsigned int *)(v56 + 20);
    *(_QWORD *)(*(_QWORD *)(v56 + 8) + 8 * v62) = *(_QWORD *)v82;
    v63 = v85;
  }
  else
  {
    *(_QWORD *)&(*v61)[8 * v62] = v59;
    v63 = v59;
  }
  *(_DWORD *)(v56 + 20) = v62 + 1;
  *(_QWORD *)(v63 + 32) = v56;
  v85 = 0;
  LOBYTE(v86) = 3;
  JSC::B3::StackmapValue::append((__int128 *)v59, v11, (unint64_t)&v85);
  *(_QWORD *)(v59 + 64) |= 0x30000uLL;
  *(_QWORD *)(v59 + 80) |= 0x30000uLL;
  v64 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v64 + 8) = 1;
  *(_QWORD *)v64 = off_1E35B6BC0;
  v65 = *(unsigned int **)(v59 + 56);
  *(_QWORD *)(v59 + 56) = v64;
  if (v65)
  {
    v66 = v65 + 2;
    do
    {
      v67 = __ldaxr(v66);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v66));
    if (!v68)
    {
      atomic_store(1u, v65 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v65 + 8))(v65);
    }
  }
  *(_QWORD *)(v59 + 112) = 0;
  *(_QWORD *)(v59 + 120) = 0;
  *(_QWORD *)(v59 + 128) = 0;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v59 + 16));
  v70 = *((_QWORD *)this + 11);
  v71 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v72 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v72 = 0;
  v73 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v73 + 8) = -1;
  *(_WORD *)(v73 + 12) = 9;
  *(_DWORD *)(v73 + 16) = 0;
  *(_BYTE *)(v73 + 20) = 1;
  *(_QWORD *)(v73 + 24) = v72;
  *(_QWORD *)(v73 + 32) = 0;
  *(_QWORD *)v73 = off_1E357F0F8;
  *(_QWORD *)(v73 + 40) = PushVariable;
  *(_QWORD *)(v73 + 48) = v59;
  JSC::B3::Procedure::addValueImpl(v71, (JSC::B3::Value *)v73);
  v85 = v73;
  result = (char *)(v70 + 8);
  v75 = *(unsigned int *)(v70 + 20);
  if ((_DWORD)v75 == *(_DWORD *)(v70 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v75 + 1, (unint64_t)&v85);
    v75 = *(unsigned int *)(v70 + 20);
    *(_QWORD *)(*(_QWORD *)(v70 + 8) + 8 * v75) = *(_QWORD *)result;
    v73 = v85;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v75) = v73;
  }
  *(_DWORD *)(v70 + 20) = v75 + 1;
  *(_QWORD *)(v73 + 32) = v70;
  *v83 = PushVariable;
  *v84 = 0;
  v84[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI64TruncSF32@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  WTF *result;
  JSC::Wasm::OMGIRGenerator *v27;
  char v28;

  v7 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v8 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 3u, 0x5F000000uLL, 0, 0);
  v9 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 3u, 0xDF000000uLL, 0, 0);
  v10 = *((_QWORD *)this + 11);
  v11 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(*((_QWORD *)this + 11), *((_QWORD *)this + 7), 53, v12, v7, v8);
  if (*(_QWORD *)this)
    v14 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v14 = 0;
  v15 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(*((_QWORD *)this + 11), *((_QWORD *)this + 7), 56, v14, v7, v9);
  v16 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v10, v11, 22, v12, v13, v15);
  v17 = *((_QWORD *)this + 11);
  v18 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v19 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v19 = 0;
  v20 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 1u, 0, 0, 0);
  v21 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v17, v18, 51, v19, v16, v20);
  if (*(_QWORD *)this)
    v22 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v22 = 0;
  v23 = JSC::B3::BasicBlock::appendNew<JSC::B3::CheckValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value *>(*((_QWORD *)this + 11), *((JSC::B3::Value **)this + 7), v22, v21);
  v27 = this;
  JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addI64TruncSF32(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>(v23, (uint64_t *)&v27);
  if (*(_QWORD *)this)
    v24 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v24 = 0;
  v25 = JSC::B3::BasicBlock::appendNew<JSC::B3::PatchpointValue,JSC::B3::TypeKind,JSC::B3::Origin>(*((_QWORD *)this + 11), *((JSC::B3::Value **)this + 7), 2, v24);
  v27 = 0;
  v28 = 3;
  JSC::B3::StackmapValue::append((__int128 *)v25, v7, (unint64_t)&v27);
  JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addI64TruncSF32(JSC::B3::Variable *,JSC::B3::Variable *&)::$_1>(v25);
  *(_QWORD *)(v25 + 112) = 0;
  *(_QWORD *)(v25 + 120) = 0;
  *(_QWORD *)(v25 + 128) = 0;
  result = JSC::Wasm::OMGIRGenerator::push(this, (JSC::B3::Value *)v25);
  *a3 = result;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addI64TruncSF32(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = *a2;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E35B6BE8;
  *(_QWORD *)(v4 + 16) = v5;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::addI64TruncSF32(JSC::B3::Variable *,JSC::B3::Variable *&)::$_1>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E35B6C10;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v2;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64TruncUF32@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  JSC::B3::Value *v21;
  _QWORD *v22;
  uint64_t v23;
  JSC::B3::Value *v24;
  uint64_t v25;
  JSC::B3::Value *v26;
  unint64_t v27;
  JSC::B3::Value *v28;
  char **v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  JSC::B3::Value *v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  uint64_t v35;
  JSC::B3::Value *v36;
  unint64_t v37;
  uint64_t v38;
  JSC::B3::Value *v39;
  char **v40;
  uint64_t v41;
  JSC::B3::Value *v42;
  uint64_t v43;
  JSC::B3::Value *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  JSC::B3::Value *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  WTF *PushVariable;
  uint64_t v70;
  JSC::B3::Value *v71;
  unint64_t v72;
  uint64_t v73;
  char *result;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  JSC::B3::Variable **v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  char v87;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v84 = a4;
  v85 = v11;
  v13 = (char **)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v76 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v85);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v76;
    v15 = v85;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 3u, 0x5F800000uLL, 0, 0);
  v17 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 3u, 0xBF800000uLL, 0, 0);
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(53, v20, v11, v16);
  JSC::B3::Procedure::addValueImpl(v19, v21);
  v85 = (uint64_t)v21;
  v22 = (_QWORD *)(v18 + 8);
  v23 = *(unsigned int *)(v18 + 20);
  v83 = a3;
  if ((_DWORD)v23 == *(_DWORD *)(v18 + 16))
  {
    v77 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v18 + 8), v23 + 1, (unint64_t)&v85);
    v23 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v23) = *(_QWORD *)v77;
    v24 = (JSC::B3::Value *)v85;
  }
  else
  {
    *(_QWORD *)(*v22 + 8 * v23) = v21;
    v24 = v21;
  }
  *(_DWORD *)(v18 + 20) = v23 + 1;
  *((_QWORD *)v24 + 4) = v18;
  v25 = *((_QWORD *)this + 11);
  v26 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v27 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v27 = 0;
  v28 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(54, v27, v11, v17);
  JSC::B3::Procedure::addValueImpl(v26, v28);
  v85 = (uint64_t)v28;
  v29 = (char **)(v25 + 8);
  v30 = *(unsigned int *)(v25 + 20);
  if ((_DWORD)v30 == *(_DWORD *)(v25 + 16))
  {
    v78 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29, v30 + 1, (unint64_t)&v85);
    v30 = *(unsigned int *)(v25 + 20);
    *(_QWORD *)(*(_QWORD *)(v25 + 8) + 8 * v30) = *(_QWORD *)v78;
    v31 = (JSC::B3::Value *)v85;
  }
  else
  {
    *(_QWORD *)&(*v29)[8 * v30] = v28;
    v31 = v28;
  }
  *(_DWORD *)(v25 + 20) = v30 + 1;
  *((_QWORD *)v31 + 4) = v25;
  v32 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(22, v20, (uint64_t)v21, (uint64_t)v28);
  JSC::B3::Procedure::addValueImpl(v19, v32);
  v85 = (uint64_t)v32;
  v33 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v33 == *(_DWORD *)(v18 + 16))
  {
    v79 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v18 + 8), v33 + 1, (unint64_t)&v85);
    v33 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v33) = *(_QWORD *)v79;
    v34 = (JSC::B3::Value *)v85;
  }
  else
  {
    *(_QWORD *)(*v22 + 8 * v33) = v32;
    v34 = v32;
  }
  *(_DWORD *)(v18 + 20) = v33 + 1;
  *((_QWORD *)v34 + 4) = v18;
  v35 = *((_QWORD *)this + 11);
  v36 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v37 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v37 = 0;
  v38 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 1u, 0, 0, 0);
  v39 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, v37, (uint64_t)v32, v38);
  JSC::B3::Procedure::addValueImpl(v36, v39);
  v85 = (uint64_t)v39;
  v40 = (char **)(v35 + 8);
  v41 = *(unsigned int *)(v35 + 20);
  if ((_DWORD)v41 == *(_DWORD *)(v35 + 16))
  {
    v80 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v40, v41 + 1, (unint64_t)&v85);
    v41 = *(unsigned int *)(v35 + 20);
    *(_QWORD *)(*(_QWORD *)(v35 + 8) + 8 * v41) = *(_QWORD *)v80;
    v42 = (JSC::B3::Value *)v85;
  }
  else
  {
    *(_QWORD *)&(*v40)[8 * v41] = v39;
    v42 = v39;
  }
  *(_DWORD *)(v35 + 20) = v41 + 1;
  *((_QWORD *)v42 + 4) = v35;
  v43 = *((_QWORD *)this + 11);
  v44 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v45 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v45 = 0;
  v46 = WTF::fastMalloc((WTF *)0x98);
  *(_QWORD *)v46 = off_1E357F5F0;
  *(_DWORD *)(v46 + 8) = -1;
  *(_WORD *)(v46 + 12) = 88;
  *(_DWORD *)(v46 + 16) = 0;
  *(_BYTE *)(v46 + 20) = 4;
  *(_QWORD *)(v46 + 24) = v45;
  *(_QWORD *)(v46 + 32) = 0;
  v47 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v46);
  *v47 = v47 + 2;
  v47[1] = 3;
  *(_OWORD *)(v46 + 40) = 0u;
  *(_OWORD *)(v46 + 56) = 0u;
  *(_OWORD *)(v46 + 72) = 0u;
  *(_OWORD *)(v46 + 88) = 0u;
  *(_QWORD *)(v46 + 104) = 0;
  *(_QWORD *)v46 = off_1E357D550;
  v85 = (uint64_t)v39;
  v86 = 0;
  v87 = 0;
  JSC::B3::StackmapValue::append((__int128 *)v46, (uint64_t)v39, (unint64_t)&v86);
  JSC::B3::Procedure::addValueImpl(v44, (JSC::B3::Value *)v46);
  v85 = v46;
  v48 = (char **)(v43 + 8);
  v49 = *(unsigned int *)(v43 + 20);
  if ((_DWORD)v49 == *(_DWORD *)(v43 + 16))
  {
    v81 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v48, v49 + 1, (unint64_t)&v85);
    v49 = *(unsigned int *)(v43 + 20);
    *(_QWORD *)(*(_QWORD *)(v43 + 8) + 8 * v49) = *(_QWORD *)v81;
    v50 = v85;
  }
  else
  {
    *(_QWORD *)&(*v48)[8 * v49] = v46;
    v50 = v46;
  }
  *(_DWORD *)(v43 + 20) = v49 + 1;
  *(_QWORD *)(v50 + 32) = v43;
  v51 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v51 + 8) = 1;
  *(_QWORD *)v51 = off_1E35B6C38;
  *(_QWORD *)(v51 + 16) = this;
  v52 = *(unsigned int **)(v46 + 56);
  *(_QWORD *)(v46 + 56) = v51;
  if (v52)
  {
    v53 = v52 + 2;
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      atomic_store(1u, v52 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 8))(v52);
    }
  }
  v56 = *((_QWORD *)this + 11);
  v57 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v58 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v58 = 0;
  v59 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v59 = off_1E357F5F0;
  *(_DWORD *)(v59 + 8) = -1;
  *(_WORD *)(v59 + 12) = 83;
  *(_DWORD *)(v59 + 16) = 2;
  *(_BYTE *)(v59 + 20) = 4;
  *(_QWORD *)(v59 + 24) = v58;
  *(_QWORD *)(v59 + 32) = 0;
  v60 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v59);
  *v60 = v60 + 2;
  v60[1] = 3;
  *(_OWORD *)(v59 + 40) = 0u;
  *(_OWORD *)(v59 + 56) = 0u;
  *(_OWORD *)(v59 + 72) = 0u;
  *(_OWORD *)(v59 + 88) = 0u;
  *(_QWORD *)(v59 + 104) = 0;
  *(_OWORD *)(v59 + 112) = xmmword_1991243D0;
  *(_QWORD *)v59 = off_1E357E700;
  *(_QWORD *)(v59 + 152) = 0;
  *(_QWORD *)(v59 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v59 + 136) = v59 + 152;
  *(_WORD *)(v59 + 168) = 0;
  *(_BYTE *)(v59 + 160) = 3;
  *(_QWORD *)(v59 + 144) = 0x100000001;
  JSC::B3::Procedure::addValueImpl(v57, (JSC::B3::Value *)v59);
  v85 = v59;
  v61 = (char **)(v56 + 8);
  v62 = *(unsigned int *)(v56 + 20);
  if ((_DWORD)v62 == *(_DWORD *)(v56 + 16))
  {
    v82 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v61, v62 + 1, (unint64_t)&v85);
    v62 = *(unsigned int *)(v56 + 20);
    *(_QWORD *)(*(_QWORD *)(v56 + 8) + 8 * v62) = *(_QWORD *)v82;
    v63 = v85;
  }
  else
  {
    *(_QWORD *)&(*v61)[8 * v62] = v59;
    v63 = v59;
  }
  *(_DWORD *)(v56 + 20) = v62 + 1;
  *(_QWORD *)(v63 + 32) = v56;
  v85 = 0;
  LOBYTE(v86) = 3;
  JSC::B3::StackmapValue::append((__int128 *)v59, v11, (unint64_t)&v85);
  *(_QWORD *)(v59 + 64) |= 0x30000uLL;
  *(_QWORD *)(v59 + 80) |= 0x30000uLL;
  v64 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v64 + 8) = 1;
  *(_QWORD *)v64 = off_1E35B6C60;
  v65 = *(unsigned int **)(v59 + 56);
  *(_QWORD *)(v59 + 56) = v64;
  if (v65)
  {
    v66 = v65 + 2;
    do
    {
      v67 = __ldaxr(v66);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v66));
    if (!v68)
    {
      atomic_store(1u, v65 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v65 + 8))(v65);
    }
  }
  *(_QWORD *)(v59 + 112) = 0;
  *(_QWORD *)(v59 + 120) = 0;
  *(_QWORD *)(v59 + 128) = 0;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v59 + 16));
  v70 = *((_QWORD *)this + 11);
  v71 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v72 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v72 = 0;
  v73 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v73 + 8) = -1;
  *(_WORD *)(v73 + 12) = 9;
  *(_DWORD *)(v73 + 16) = 0;
  *(_BYTE *)(v73 + 20) = 1;
  *(_QWORD *)(v73 + 24) = v72;
  *(_QWORD *)(v73 + 32) = 0;
  *(_QWORD *)v73 = off_1E357F0F8;
  *(_QWORD *)(v73 + 40) = PushVariable;
  *(_QWORD *)(v73 + 48) = v59;
  JSC::B3::Procedure::addValueImpl(v71, (JSC::B3::Value *)v73);
  v85 = v73;
  result = (char *)(v70 + 8);
  v75 = *(unsigned int *)(v70 + 20);
  if ((_DWORD)v75 == *(_DWORD *)(v70 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v75 + 1, (unint64_t)&v85);
    v75 = *(unsigned int *)(v70 + 20);
    *(_QWORD *)(*(_QWORD *)(v70 + 8) + 8 * v75) = *(_QWORD *)result;
    v73 = v85;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v75) = v73;
  }
  *(_DWORD *)(v70 + 20) = v75 + 1;
  *(_QWORD *)(v73 + 32) = v70;
  *v83 = PushVariable;
  *v84 = 0;
  v84[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32Add@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  WTF *PushVariable;
  uint64_t v32;
  JSC::B3::Value *v33;
  unint64_t v34;
  uint64_t v35;
  char *result;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  JSC::B3::Value *v41;
  _BYTE *v42;
  JSC::B3::Variable **v43;
  uint64_t v44;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v43 = a4;
  v44 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v41 = v11;
  v42 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v44);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v38;
    v17 = v44;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v44 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v39 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v44);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v39;
    v25 = v44;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(14, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v41, (JSC::B3::Value *)v26);
  v44 = v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v44);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v40;
    v28 = v44;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *(_QWORD *)(v28 + 32) = v10;
  v29 = *(_DWORD *)(v26 + 16);
  if (v29 >= 0x80000000)
    v30 = 0x80000000;
  else
    v30 = *(_DWORD *)(v26 + 16);
  if (v30 - 3 <= 1)
    *(_WORD *)(v26 + 12) = 1038;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v29);
  v32 = *((_QWORD *)this + 11);
  v33 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v34 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v34 = 0;
  v35 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v35 + 8) = -1;
  *(_WORD *)(v35 + 12) = 9;
  *(_DWORD *)(v35 + 16) = 0;
  *(_BYTE *)(v35 + 20) = 1;
  *(_QWORD *)(v35 + 24) = v34;
  *(_QWORD *)(v35 + 32) = 0;
  *(_QWORD *)v35 = off_1E357F0F8;
  *(_QWORD *)(v35 + 40) = PushVariable;
  *(_QWORD *)(v35 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v33, (JSC::B3::Value *)v35);
  v44 = v35;
  result = (char *)(v32 + 8);
  v37 = *(unsigned int *)(v32 + 20);
  if ((_DWORD)v37 == *(_DWORD *)(v32 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v37 + 1, (unint64_t)&v44);
    v37 = *(unsigned int *)(v32 + 20);
    *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8 * v37) = *(_QWORD *)result;
    v35 = v44;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v37) = v35;
  }
  *(_DWORD *)(v32 + 20) = v37 + 1;
  *(_QWORD *)(v35 + 32) = v32;
  *v43 = PushVariable;
  *v42 = 0;
  v42[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32Sub@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  WTF *PushVariable;
  uint64_t v32;
  JSC::B3::Value *v33;
  unint64_t v34;
  uint64_t v35;
  char *result;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  JSC::B3::Value *v41;
  _BYTE *v42;
  JSC::B3::Variable **v43;
  uint64_t v44;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v43 = a4;
  v44 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v41 = v11;
  v42 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v44);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v38;
    v17 = v44;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v44 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v39 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v44);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v39;
    v25 = v44;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(15, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v41, (JSC::B3::Value *)v26);
  v44 = v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v44);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v40;
    v28 = v44;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *(_QWORD *)(v28 + 32) = v10;
  v29 = *(_DWORD *)(v26 + 16);
  if (v29 >= 0x80000000)
    v30 = 0x80000000;
  else
    v30 = *(_DWORD *)(v26 + 16);
  if (v30 - 3 <= 1)
    *(_WORD *)(v26 + 12) = 1039;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v29);
  v32 = *((_QWORD *)this + 11);
  v33 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v34 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v34 = 0;
  v35 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v35 + 8) = -1;
  *(_WORD *)(v35 + 12) = 9;
  *(_DWORD *)(v35 + 16) = 0;
  *(_BYTE *)(v35 + 20) = 1;
  *(_QWORD *)(v35 + 24) = v34;
  *(_QWORD *)(v35 + 32) = 0;
  *(_QWORD *)v35 = off_1E357F0F8;
  *(_QWORD *)(v35 + 40) = PushVariable;
  *(_QWORD *)(v35 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v33, (JSC::B3::Value *)v35);
  v44 = v35;
  result = (char *)(v32 + 8);
  v37 = *(unsigned int *)(v32 + 20);
  if ((_DWORD)v37 == *(_DWORD *)(v32 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v37 + 1, (unint64_t)&v44);
    v37 = *(unsigned int *)(v32 + 20);
    *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8 * v37) = *(_QWORD *)result;
    v35 = v44;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v37) = v35;
  }
  *(_DWORD *)(v32 + 20) = v37 + 1;
  *(_QWORD *)(v35 + 32) = v32;
  *v43 = PushVariable;
  *v42 = 0;
  v42[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32Mul@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  WTF *PushVariable;
  uint64_t v32;
  JSC::B3::Value *v33;
  unint64_t v34;
  uint64_t v35;
  char *result;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  JSC::B3::Value *v41;
  _BYTE *v42;
  JSC::B3::Variable **v43;
  uint64_t v44;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v43 = a4;
  v44 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v41 = v11;
  v42 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v44);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v38;
    v17 = v44;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v44 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v39 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v44);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v39;
    v25 = v44;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(16, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v41, (JSC::B3::Value *)v26);
  v44 = v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v44);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v40;
    v28 = v44;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *(_QWORD *)(v28 + 32) = v10;
  v29 = *(_DWORD *)(v26 + 16);
  if (v29 >= 0x80000000)
    v30 = 0x80000000;
  else
    v30 = *(_DWORD *)(v26 + 16);
  if (v30 - 3 <= 1)
    *(_WORD *)(v26 + 12) = 1040;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v29);
  v32 = *((_QWORD *)this + 11);
  v33 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v34 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v34 = 0;
  v35 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v35 + 8) = -1;
  *(_WORD *)(v35 + 12) = 9;
  *(_DWORD *)(v35 + 16) = 0;
  *(_BYTE *)(v35 + 20) = 1;
  *(_QWORD *)(v35 + 24) = v34;
  *(_QWORD *)(v35 + 32) = 0;
  *(_QWORD *)v35 = off_1E357F0F8;
  *(_QWORD *)(v35 + 40) = PushVariable;
  *(_QWORD *)(v35 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v33, (JSC::B3::Value *)v35);
  v44 = v35;
  result = (char *)(v32 + 8);
  v37 = *(unsigned int *)(v32 + 20);
  if ((_DWORD)v37 == *(_DWORD *)(v32 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v37 + 1, (unint64_t)&v44);
    v37 = *(unsigned int *)(v32 + 20);
    *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8 * v37) = *(_QWORD *)result;
    v35 = v44;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v37) = v35;
  }
  *(_DWORD *)(v32 + 20) = v37 + 1;
  *(_QWORD *)(v35 + 32) = v32;
  *v43 = PushVariable;
  *v42 = 0;
  v42[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32And@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(22, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32Or@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(23, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32Xor@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(24, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32Shl@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(25, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32ShrU@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(27, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI32ShrS@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v13 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v14 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v9, v10, 26, v11, v12, v13);
  result = JSC::Wasm::OMGIRGenerator::push(this, v14);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32Rotr@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(28, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32Rotl@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(29, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32Eq@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32Ne@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32LtS@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(53, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI32LeS@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v13 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v14 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v9, v10, 55, v11, v12, v13);
  result = JSC::Wasm::OMGIRGenerator::push(this, v14);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32LtU@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(58, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI32LeU@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v13 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v14 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v9, v10, 60, v11, v12, v13);
  result = JSC::Wasm::OMGIRGenerator::push(this, v14);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI32GtS@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v13 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v14 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v9, v10, 54, v11, v12, v13);
  result = JSC::Wasm::OMGIRGenerator::push(this, v14);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI32GeS@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v13 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v14 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v9, v10, 56, v11, v12, v13);
  result = JSC::Wasm::OMGIRGenerator::push(this, v14);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32GtU@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(57, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI32GeU@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v13 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v14 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v9, v10, 59, v11, v12, v13);
  result = JSC::Wasm::OMGIRGenerator::push(this, v14);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32Clz@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *PushVariable;
  uint64_t v20;
  JSC::B3::Value *v21;
  unint64_t v22;
  uint64_t v23;
  char *result;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v28 = v11;
  v13 = (_QWORD *)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v14 + 1, (unint64_t)&v28);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v26;
    v15 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v14) = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v16 = off_1E357F5F0;
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 30;
  *(_DWORD *)(v16 + 16) = *(_DWORD *)(v11 + 16);
  *(_BYTE *)(v16 + 20) = 1;
  *(_QWORD *)(v16 + 24) = v10;
  *(_QWORD *)(v16 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v16, 1, v11);
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v16);
  v28 = v16;
  v17 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v17 == *(_DWORD *)(v8 + 16))
  {
    v27 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v17 + 1, (unint64_t)&v28);
    v17 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v17) = *(_QWORD *)v27;
    v18 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v17) = v16;
    v18 = v16;
  }
  *(_DWORD *)(v8 + 20) = v17 + 1;
  *(_QWORD *)(v18 + 32) = v8;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v16 + 16));
  v20 = *((_QWORD *)this + 11);
  v21 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v22 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v22 = 0;
  v23 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v23 + 8) = -1;
  *(_WORD *)(v23 + 12) = 9;
  *(_DWORD *)(v23 + 16) = 0;
  *(_BYTE *)(v23 + 20) = 1;
  *(_QWORD *)(v23 + 24) = v22;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)v23 = off_1E357F0F8;
  *(_QWORD *)(v23 + 40) = PushVariable;
  *(_QWORD *)(v23 + 48) = v16;
  JSC::B3::Procedure::addValueImpl(v21, (JSC::B3::Value *)v23);
  v28 = v23;
  result = (char *)(v20 + 8);
  v25 = *(unsigned int *)(v20 + 20);
  if ((_DWORD)v25 == *(_DWORD *)(v20 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v25 + 1, (unint64_t)&v28);
    v25 = *(unsigned int *)(v20 + 20);
    *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v25) = *(_QWORD *)result;
    v23 = v28;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v25) = v23;
  }
  *(_DWORD *)(v20 + 20) = v25 + 1;
  *(_QWORD *)(v23 + 32) = v20;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32Eqz@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  JSC::B3::Value *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  WTF *PushVariable;
  uint64_t v21;
  JSC::B3::Value *v22;
  unint64_t v23;
  uint64_t v24;
  char *result;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v8 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 1u, 0, 0, 0);
  v9 = *((_QWORD *)this + 11);
  v10 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = WTF::fastMalloc((WTF *)0x30);
  v13 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v12 + 8) = -1;
  *(_WORD *)(v12 + 12) = 10;
  *(_DWORD *)(v12 + 16) = v13;
  *(_BYTE *)(v12 + 20) = 0;
  *(_QWORD *)(v12 + 24) = v11;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)v12 = off_1E357F0F8;
  *(_QWORD *)(v12 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v10, (JSC::B3::Value *)v12);
  v29 = v12;
  v14 = (_QWORD *)(v9 + 8);
  v15 = *(unsigned int *)(v9 + 20);
  if ((_DWORD)v15 == *(_DWORD *)(v9 + 16))
  {
    v27 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v9 + 8), v15 + 1, (unint64_t)&v29);
    v15 = *(unsigned int *)(v9 + 20);
    *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v15) = *(_QWORD *)v27;
    v16 = v29;
  }
  else
  {
    *(_QWORD *)(*v14 + 8 * v15) = v12;
    v16 = v12;
  }
  *(_DWORD *)(v9 + 20) = v15 + 1;
  *(_QWORD *)(v16 + 32) = v9;
  v17 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, v11, v8, v12);
  JSC::B3::Procedure::addValueImpl(v10, (JSC::B3::Value *)v17);
  v29 = (uint64_t)v17;
  v18 = *(unsigned int *)(v9 + 20);
  if ((_DWORD)v18 == *(_DWORD *)(v9 + 16))
  {
    v28 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v9 + 8), v18 + 1, (unint64_t)&v29);
    v18 = *(unsigned int *)(v9 + 20);
    *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v18) = *(_QWORD *)v28;
    v19 = (int *)v29;
  }
  else
  {
    *(_QWORD *)(*v14 + 8 * v18) = v17;
    v19 = v17;
  }
  *(_DWORD *)(v9 + 20) = v18 + 1;
  *((_QWORD *)v19 + 4) = v9;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v17[4]);
  v21 = *((_QWORD *)this + 11);
  v22 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v23 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v23 = 0;
  v24 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v24 + 8) = -1;
  *(_WORD *)(v24 + 12) = 9;
  *(_DWORD *)(v24 + 16) = 0;
  *(_BYTE *)(v24 + 20) = 1;
  *(_QWORD *)(v24 + 24) = v23;
  *(_QWORD *)(v24 + 32) = 0;
  *(_QWORD *)v24 = off_1E357F0F8;
  *(_QWORD *)(v24 + 40) = PushVariable;
  *(_QWORD *)(v24 + 48) = v17;
  JSC::B3::Procedure::addValueImpl(v22, (JSC::B3::Value *)v24);
  v29 = v24;
  result = (char *)(v21 + 8);
  v26 = *(unsigned int *)(v21 + 20);
  if ((_DWORD)v26 == *(_DWORD *)(v21 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v26 + 1, (unint64_t)&v29);
    v26 = *(unsigned int *)(v21 + 20);
    *(_QWORD *)(*(_QWORD *)(v21 + 8) + 8 * v26) = *(_QWORD *)result;
    v24 = v29;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v26) = v24;
  }
  *(_DWORD *)(v21 + 20) = v26 + 1;
  *(_QWORD *)(v24 + 32) = v21;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI64Add@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v13 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v14 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v9, v10, 14, v11, v12, v13);
  v15 = *(_DWORD *)(v14 + 16);
  if (v15 >= 0x80000000)
    v15 = 0x80000000;
  if (v15 - 3 <= 1)
    *(_WORD *)(v14 + 12) = 1038;
  result = JSC::Wasm::OMGIRGenerator::push(this, (JSC::B3::Value *)v14);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI64Sub@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v13 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v14 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v9, v10, 15, v11, v12, v13);
  v15 = *(_DWORD *)(v14 + 16);
  if (v15 >= 0x80000000)
    v15 = 0x80000000;
  if (v15 - 3 <= 1)
    *(_WORD *)(v14 + 12) = 1039;
  result = JSC::Wasm::OMGIRGenerator::push(this, (JSC::B3::Value *)v14);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI64Mul@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v13 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v14 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v9, v10, 16, v11, v12, v13);
  v15 = *(_DWORD *)(v14 + 16);
  if (v15 >= 0x80000000)
    v15 = 0x80000000;
  if (v15 - 3 <= 1)
    *(_WORD *)(v14 + 12) = 1040;
  result = JSC::Wasm::OMGIRGenerator::push(this, (JSC::B3::Value *)v14);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI64And@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v13 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v14 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v9, v10, 22, v11, v12, v13);
  result = JSC::Wasm::OMGIRGenerator::push(this, v14);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64Or@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(23, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64Xor@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(24, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64Shl@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  JSC::B3::Value *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  int v19;
  uint64_t v20;
  JSC::B3::Value *v21;
  uint64_t v22;
  JSC::B3::Value *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  int *v32;
  WTF *PushVariable;
  uint64_t v34;
  JSC::B3::Value *v35;
  unint64_t v36;
  uint64_t v37;
  char *result;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v45;

  v9 = *((_QWORD *)this + 11);
  v10 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = WTF::fastMalloc((WTF *)0x30);
  v13 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v12 + 8) = -1;
  *(_WORD *)(v12 + 12) = 10;
  *(_DWORD *)(v12 + 16) = v13;
  *(_BYTE *)(v12 + 20) = 0;
  *(_QWORD *)(v12 + 24) = v11;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)v12 = off_1E357F0F8;
  *(_QWORD *)(v12 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v10, (JSC::B3::Value *)v12);
  v45 = v12;
  v14 = (_QWORD *)(v9 + 8);
  v15 = *(unsigned int *)(v9 + 20);
  if ((_DWORD)v15 == *(_DWORD *)(v9 + 16))
  {
    v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v9 + 8), v15 + 1, (unint64_t)&v45);
    v15 = *(unsigned int *)(v9 + 20);
    *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v15) = *(_QWORD *)v40;
    v16 = v45;
  }
  else
  {
    *(_QWORD *)(*v14 + 8 * v15) = v12;
    v16 = v12;
  }
  *(_DWORD *)(v9 + 20) = v15 + 1;
  *(_QWORD *)(v16 + 32) = v9;
  v17 = WTF::fastMalloc((WTF *)0x30);
  v18 = (JSC::B3::Value *)v17;
  *(_QWORD *)v17 = off_1E357F5F0;
  *(_DWORD *)(v17 + 8) = -1;
  *(_WORD *)(v17 + 12) = 44;
  if (*(_DWORD *)(v12 + 16) == 2)
    v19 = 1;
  else
    v19 = 3;
  *(_DWORD *)(v17 + 16) = v19;
  *(_BYTE *)(v17 + 20) = 1;
  *(_QWORD *)(v17 + 24) = v11;
  *(_QWORD *)(v17 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v17, 1, v12);
  JSC::B3::Procedure::addValueImpl(v10, v18);
  v45 = (uint64_t)v18;
  v20 = *(unsigned int *)(v9 + 20);
  if ((_DWORD)v20 == *(_DWORD *)(v9 + 16))
  {
    v41 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v9 + 8), v20 + 1, (unint64_t)&v45);
    v20 = *(unsigned int *)(v9 + 20);
    *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v20) = *(_QWORD *)v41;
    v21 = (JSC::B3::Value *)v45;
  }
  else
  {
    *(_QWORD *)(*v14 + 8 * v20) = v18;
    v21 = v18;
  }
  *(_DWORD *)(v9 + 20) = v20 + 1;
  *((_QWORD *)v21 + 4) = v9;
  v22 = *((_QWORD *)this + 11);
  v23 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v24 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v24 = 0;
  v25 = WTF::fastMalloc((WTF *)0x30);
  v26 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v25 + 8) = -1;
  *(_WORD *)(v25 + 12) = 10;
  *(_DWORD *)(v25 + 16) = v26;
  *(_BYTE *)(v25 + 20) = 0;
  *(_QWORD *)(v25 + 24) = v24;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)v25 = off_1E357F0F8;
  *(_QWORD *)(v25 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v23, (JSC::B3::Value *)v25);
  v45 = v25;
  v27 = (_QWORD *)(v22 + 8);
  v28 = *(unsigned int *)(v22 + 20);
  if ((_DWORD)v28 == *(_DWORD *)(v22 + 16))
  {
    v42 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v22 + 8), v28 + 1, (unint64_t)&v45);
    v28 = *(unsigned int *)(v22 + 20);
    *(_QWORD *)(*(_QWORD *)(v22 + 8) + 8 * v28) = *(_QWORD *)v42;
    v29 = v45;
  }
  else
  {
    *(_QWORD *)(*v27 + 8 * v28) = v25;
    v29 = v25;
  }
  *(_DWORD *)(v22 + 20) = v28 + 1;
  *(_QWORD *)(v29 + 32) = v22;
  v30 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(25, v24, v25, (uint64_t)v18);
  JSC::B3::Procedure::addValueImpl(v23, (JSC::B3::Value *)v30);
  v45 = (uint64_t)v30;
  v31 = *(unsigned int *)(v22 + 20);
  if ((_DWORD)v31 == *(_DWORD *)(v22 + 16))
  {
    v43 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v22 + 8), v31 + 1, (unint64_t)&v45);
    v31 = *(unsigned int *)(v22 + 20);
    *(_QWORD *)(*(_QWORD *)(v22 + 8) + 8 * v31) = *(_QWORD *)v43;
    v32 = (int *)v45;
  }
  else
  {
    *(_QWORD *)(*v27 + 8 * v31) = v30;
    v32 = v30;
  }
  *(_DWORD *)(v22 + 20) = v31 + 1;
  *((_QWORD *)v32 + 4) = v22;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v30[4]);
  v34 = *((_QWORD *)this + 11);
  v35 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v36 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v36 = 0;
  v37 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v37 + 8) = -1;
  *(_WORD *)(v37 + 12) = 9;
  *(_DWORD *)(v37 + 16) = 0;
  *(_BYTE *)(v37 + 20) = 1;
  *(_QWORD *)(v37 + 24) = v36;
  *(_QWORD *)(v37 + 32) = 0;
  *(_QWORD *)v37 = off_1E357F0F8;
  *(_QWORD *)(v37 + 40) = PushVariable;
  *(_QWORD *)(v37 + 48) = v30;
  JSC::B3::Procedure::addValueImpl(v35, (JSC::B3::Value *)v37);
  v45 = v37;
  result = (char *)(v34 + 8);
  v39 = *(unsigned int *)(v34 + 20);
  if ((_DWORD)v39 == *(_DWORD *)(v34 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v39 + 1, (unint64_t)&v45);
    v39 = *(unsigned int *)(v34 + 20);
    *(_QWORD *)(*(_QWORD *)(v34 + 8) + 8 * v39) = *(_QWORD *)result;
    v37 = v45;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v39) = v37;
  }
  *(_DWORD *)(v34 + 20) = v39 + 1;
  *(_QWORD *)(v37 + 32) = v34;
  *a4 = PushVariable;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI64ShrU@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  JSC::B3::Value *v10;
  unint64_t v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v13 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(v9, v10, 44, v11, v12);
  v14 = *((_QWORD *)this + 11);
  v15 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v16 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v16 = 0;
  v17 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v18 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v14, v15, 27, v16, v17, (uint64_t)v13);
  result = JSC::Wasm::OMGIRGenerator::push(this, v18);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI64ShrS@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  JSC::B3::Value *v10;
  unint64_t v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v13 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(v9, v10, 44, v11, v12);
  v14 = *((_QWORD *)this + 11);
  v15 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v16 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v16 = 0;
  v17 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v18 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v14, v15, 26, v16, v17, (uint64_t)v13);
  result = JSC::Wasm::OMGIRGenerator::push(this, v18);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64Rotr@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  JSC::B3::Value *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  int v19;
  uint64_t v20;
  JSC::B3::Value *v21;
  uint64_t v22;
  JSC::B3::Value *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  int *v32;
  WTF *PushVariable;
  uint64_t v34;
  JSC::B3::Value *v35;
  unint64_t v36;
  uint64_t v37;
  char *result;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v45;

  v9 = *((_QWORD *)this + 11);
  v10 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = WTF::fastMalloc((WTF *)0x30);
  v13 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v12 + 8) = -1;
  *(_WORD *)(v12 + 12) = 10;
  *(_DWORD *)(v12 + 16) = v13;
  *(_BYTE *)(v12 + 20) = 0;
  *(_QWORD *)(v12 + 24) = v11;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)v12 = off_1E357F0F8;
  *(_QWORD *)(v12 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v10, (JSC::B3::Value *)v12);
  v45 = v12;
  v14 = (_QWORD *)(v9 + 8);
  v15 = *(unsigned int *)(v9 + 20);
  if ((_DWORD)v15 == *(_DWORD *)(v9 + 16))
  {
    v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v9 + 8), v15 + 1, (unint64_t)&v45);
    v15 = *(unsigned int *)(v9 + 20);
    *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v15) = *(_QWORD *)v40;
    v16 = v45;
  }
  else
  {
    *(_QWORD *)(*v14 + 8 * v15) = v12;
    v16 = v12;
  }
  *(_DWORD *)(v9 + 20) = v15 + 1;
  *(_QWORD *)(v16 + 32) = v9;
  v17 = WTF::fastMalloc((WTF *)0x30);
  v18 = (JSC::B3::Value *)v17;
  *(_QWORD *)v17 = off_1E357F5F0;
  *(_DWORD *)(v17 + 8) = -1;
  *(_WORD *)(v17 + 12) = 44;
  if (*(_DWORD *)(v12 + 16) == 2)
    v19 = 1;
  else
    v19 = 3;
  *(_DWORD *)(v17 + 16) = v19;
  *(_BYTE *)(v17 + 20) = 1;
  *(_QWORD *)(v17 + 24) = v11;
  *(_QWORD *)(v17 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v17, 1, v12);
  JSC::B3::Procedure::addValueImpl(v10, v18);
  v45 = (uint64_t)v18;
  v20 = *(unsigned int *)(v9 + 20);
  if ((_DWORD)v20 == *(_DWORD *)(v9 + 16))
  {
    v41 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v9 + 8), v20 + 1, (unint64_t)&v45);
    v20 = *(unsigned int *)(v9 + 20);
    *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v20) = *(_QWORD *)v41;
    v21 = (JSC::B3::Value *)v45;
  }
  else
  {
    *(_QWORD *)(*v14 + 8 * v20) = v18;
    v21 = v18;
  }
  *(_DWORD *)(v9 + 20) = v20 + 1;
  *((_QWORD *)v21 + 4) = v9;
  v22 = *((_QWORD *)this + 11);
  v23 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v24 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v24 = 0;
  v25 = WTF::fastMalloc((WTF *)0x30);
  v26 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v25 + 8) = -1;
  *(_WORD *)(v25 + 12) = 10;
  *(_DWORD *)(v25 + 16) = v26;
  *(_BYTE *)(v25 + 20) = 0;
  *(_QWORD *)(v25 + 24) = v24;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)v25 = off_1E357F0F8;
  *(_QWORD *)(v25 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v23, (JSC::B3::Value *)v25);
  v45 = v25;
  v27 = (_QWORD *)(v22 + 8);
  v28 = *(unsigned int *)(v22 + 20);
  if ((_DWORD)v28 == *(_DWORD *)(v22 + 16))
  {
    v42 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v22 + 8), v28 + 1, (unint64_t)&v45);
    v28 = *(unsigned int *)(v22 + 20);
    *(_QWORD *)(*(_QWORD *)(v22 + 8) + 8 * v28) = *(_QWORD *)v42;
    v29 = v45;
  }
  else
  {
    *(_QWORD *)(*v27 + 8 * v28) = v25;
    v29 = v25;
  }
  *(_DWORD *)(v22 + 20) = v28 + 1;
  *(_QWORD *)(v29 + 32) = v22;
  v30 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(28, v24, v25, (uint64_t)v18);
  JSC::B3::Procedure::addValueImpl(v23, (JSC::B3::Value *)v30);
  v45 = (uint64_t)v30;
  v31 = *(unsigned int *)(v22 + 20);
  if ((_DWORD)v31 == *(_DWORD *)(v22 + 16))
  {
    v43 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v22 + 8), v31 + 1, (unint64_t)&v45);
    v31 = *(unsigned int *)(v22 + 20);
    *(_QWORD *)(*(_QWORD *)(v22 + 8) + 8 * v31) = *(_QWORD *)v43;
    v32 = (int *)v45;
  }
  else
  {
    *(_QWORD *)(*v27 + 8 * v31) = v30;
    v32 = v30;
  }
  *(_DWORD *)(v22 + 20) = v31 + 1;
  *((_QWORD *)v32 + 4) = v22;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v30[4]);
  v34 = *((_QWORD *)this + 11);
  v35 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v36 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v36 = 0;
  v37 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v37 + 8) = -1;
  *(_WORD *)(v37 + 12) = 9;
  *(_DWORD *)(v37 + 16) = 0;
  *(_BYTE *)(v37 + 20) = 1;
  *(_QWORD *)(v37 + 24) = v36;
  *(_QWORD *)(v37 + 32) = 0;
  *(_QWORD *)v37 = off_1E357F0F8;
  *(_QWORD *)(v37 + 40) = PushVariable;
  *(_QWORD *)(v37 + 48) = v30;
  JSC::B3::Procedure::addValueImpl(v35, (JSC::B3::Value *)v37);
  v45 = v37;
  result = (char *)(v34 + 8);
  v39 = *(unsigned int *)(v34 + 20);
  if ((_DWORD)v39 == *(_DWORD *)(v34 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v39 + 1, (unint64_t)&v45);
    v39 = *(unsigned int *)(v34 + 20);
    *(_QWORD *)(*(_QWORD *)(v34 + 8) + 8 * v39) = *(_QWORD *)result;
    v37 = v45;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v39) = v37;
  }
  *(_DWORD *)(v34 + 20) = v39 + 1;
  *(_QWORD *)(v37 + 32) = v34;
  *a4 = PushVariable;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64Rotl@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  JSC::B3::Value *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  int v19;
  uint64_t v20;
  JSC::B3::Value *v21;
  uint64_t v22;
  JSC::B3::Value *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  int *v32;
  WTF *PushVariable;
  uint64_t v34;
  JSC::B3::Value *v35;
  unint64_t v36;
  uint64_t v37;
  char *result;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v45;

  v9 = *((_QWORD *)this + 11);
  v10 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = WTF::fastMalloc((WTF *)0x30);
  v13 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v12 + 8) = -1;
  *(_WORD *)(v12 + 12) = 10;
  *(_DWORD *)(v12 + 16) = v13;
  *(_BYTE *)(v12 + 20) = 0;
  *(_QWORD *)(v12 + 24) = v11;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)v12 = off_1E357F0F8;
  *(_QWORD *)(v12 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v10, (JSC::B3::Value *)v12);
  v45 = v12;
  v14 = (_QWORD *)(v9 + 8);
  v15 = *(unsigned int *)(v9 + 20);
  if ((_DWORD)v15 == *(_DWORD *)(v9 + 16))
  {
    v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v9 + 8), v15 + 1, (unint64_t)&v45);
    v15 = *(unsigned int *)(v9 + 20);
    *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v15) = *(_QWORD *)v40;
    v16 = v45;
  }
  else
  {
    *(_QWORD *)(*v14 + 8 * v15) = v12;
    v16 = v12;
  }
  *(_DWORD *)(v9 + 20) = v15 + 1;
  *(_QWORD *)(v16 + 32) = v9;
  v17 = WTF::fastMalloc((WTF *)0x30);
  v18 = (JSC::B3::Value *)v17;
  *(_QWORD *)v17 = off_1E357F5F0;
  *(_DWORD *)(v17 + 8) = -1;
  *(_WORD *)(v17 + 12) = 44;
  if (*(_DWORD *)(v12 + 16) == 2)
    v19 = 1;
  else
    v19 = 3;
  *(_DWORD *)(v17 + 16) = v19;
  *(_BYTE *)(v17 + 20) = 1;
  *(_QWORD *)(v17 + 24) = v11;
  *(_QWORD *)(v17 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v17, 1, v12);
  JSC::B3::Procedure::addValueImpl(v10, v18);
  v45 = (uint64_t)v18;
  v20 = *(unsigned int *)(v9 + 20);
  if ((_DWORD)v20 == *(_DWORD *)(v9 + 16))
  {
    v41 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v9 + 8), v20 + 1, (unint64_t)&v45);
    v20 = *(unsigned int *)(v9 + 20);
    *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v20) = *(_QWORD *)v41;
    v21 = (JSC::B3::Value *)v45;
  }
  else
  {
    *(_QWORD *)(*v14 + 8 * v20) = v18;
    v21 = v18;
  }
  *(_DWORD *)(v9 + 20) = v20 + 1;
  *((_QWORD *)v21 + 4) = v9;
  v22 = *((_QWORD *)this + 11);
  v23 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v24 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v24 = 0;
  v25 = WTF::fastMalloc((WTF *)0x30);
  v26 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v25 + 8) = -1;
  *(_WORD *)(v25 + 12) = 10;
  *(_DWORD *)(v25 + 16) = v26;
  *(_BYTE *)(v25 + 20) = 0;
  *(_QWORD *)(v25 + 24) = v24;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)v25 = off_1E357F0F8;
  *(_QWORD *)(v25 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v23, (JSC::B3::Value *)v25);
  v45 = v25;
  v27 = (_QWORD *)(v22 + 8);
  v28 = *(unsigned int *)(v22 + 20);
  if ((_DWORD)v28 == *(_DWORD *)(v22 + 16))
  {
    v42 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v22 + 8), v28 + 1, (unint64_t)&v45);
    v28 = *(unsigned int *)(v22 + 20);
    *(_QWORD *)(*(_QWORD *)(v22 + 8) + 8 * v28) = *(_QWORD *)v42;
    v29 = v45;
  }
  else
  {
    *(_QWORD *)(*v27 + 8 * v28) = v25;
    v29 = v25;
  }
  *(_DWORD *)(v22 + 20) = v28 + 1;
  *(_QWORD *)(v29 + 32) = v22;
  v30 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(29, v24, v25, (uint64_t)v18);
  JSC::B3::Procedure::addValueImpl(v23, (JSC::B3::Value *)v30);
  v45 = (uint64_t)v30;
  v31 = *(unsigned int *)(v22 + 20);
  if ((_DWORD)v31 == *(_DWORD *)(v22 + 16))
  {
    v43 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v22 + 8), v31 + 1, (unint64_t)&v45);
    v31 = *(unsigned int *)(v22 + 20);
    *(_QWORD *)(*(_QWORD *)(v22 + 8) + 8 * v31) = *(_QWORD *)v43;
    v32 = (int *)v45;
  }
  else
  {
    *(_QWORD *)(*v27 + 8 * v31) = v30;
    v32 = v30;
  }
  *(_DWORD *)(v22 + 20) = v31 + 1;
  *((_QWORD *)v32 + 4) = v22;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v30[4]);
  v34 = *((_QWORD *)this + 11);
  v35 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v36 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v36 = 0;
  v37 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v37 + 8) = -1;
  *(_WORD *)(v37 + 12) = 9;
  *(_DWORD *)(v37 + 16) = 0;
  *(_BYTE *)(v37 + 20) = 1;
  *(_QWORD *)(v37 + 24) = v36;
  *(_QWORD *)(v37 + 32) = 0;
  *(_QWORD *)v37 = off_1E357F0F8;
  *(_QWORD *)(v37 + 40) = PushVariable;
  *(_QWORD *)(v37 + 48) = v30;
  JSC::B3::Procedure::addValueImpl(v35, (JSC::B3::Value *)v37);
  v45 = v37;
  result = (char *)(v34 + 8);
  v39 = *(unsigned int *)(v34 + 20);
  if ((_DWORD)v39 == *(_DWORD *)(v34 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v39 + 1, (unint64_t)&v45);
    v39 = *(unsigned int *)(v34 + 20);
    *(_QWORD *)(*(_QWORD *)(v34 + 8) + 8 * v39) = *(_QWORD *)result;
    v37 = v45;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v39) = v37;
  }
  *(_DWORD *)(v34 + 20) = v39 + 1;
  *(_QWORD *)(v37 + 32) = v34;
  *a4 = PushVariable;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI64Ne@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v13 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v14 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v9, v10, 52, v11, v12, v13);
  result = JSC::Wasm::OMGIRGenerator::push(this, v14);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI64LtS@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v13 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v14 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v9, v10, 53, v11, v12, v13);
  result = JSC::Wasm::OMGIRGenerator::push(this, v14);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64LeS@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(55, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI64LtU@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v13 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v14 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v9, v10, 58, v11, v12, v13);
  result = JSC::Wasm::OMGIRGenerator::push(this, v14);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64LeU@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(60, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64GtS@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(54, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64GeS@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(56, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI64GtU@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v13 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v14 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v9, v10, 57, v11, v12, v13);
  result = JSC::Wasm::OMGIRGenerator::push(this, v14);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64GeU@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(59, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64Clz@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *PushVariable;
  uint64_t v20;
  JSC::B3::Value *v21;
  unint64_t v22;
  uint64_t v23;
  char *result;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v28 = v11;
  v13 = (_QWORD *)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v14 + 1, (unint64_t)&v28);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v26;
    v15 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v14) = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v16 = off_1E357F5F0;
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 30;
  *(_DWORD *)(v16 + 16) = *(_DWORD *)(v11 + 16);
  *(_BYTE *)(v16 + 20) = 1;
  *(_QWORD *)(v16 + 24) = v10;
  *(_QWORD *)(v16 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v16, 1, v11);
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v16);
  v28 = v16;
  v17 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v17 == *(_DWORD *)(v8 + 16))
  {
    v27 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v17 + 1, (unint64_t)&v28);
    v17 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v17) = *(_QWORD *)v27;
    v18 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v17) = v16;
    v18 = v16;
  }
  *(_DWORD *)(v8 + 20) = v17 + 1;
  *(_QWORD *)(v18 + 32) = v8;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v16 + 16));
  v20 = *((_QWORD *)this + 11);
  v21 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v22 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v22 = 0;
  v23 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v23 + 8) = -1;
  *(_WORD *)(v23 + 12) = 9;
  *(_DWORD *)(v23 + 16) = 0;
  *(_BYTE *)(v23 + 20) = 1;
  *(_QWORD *)(v23 + 24) = v22;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)v23 = off_1E357F0F8;
  *(_QWORD *)(v23 + 40) = PushVariable;
  *(_QWORD *)(v23 + 48) = v16;
  JSC::B3::Procedure::addValueImpl(v21, (JSC::B3::Value *)v23);
  v28 = v23;
  result = (char *)(v20 + 8);
  v25 = *(unsigned int *)(v20 + 20);
  if ((_DWORD)v25 == *(_DWORD *)(v20 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v25 + 1, (unint64_t)&v28);
    v25 = *(unsigned int *)(v20 + 20);
    *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v25) = *(_QWORD *)result;
    v23 = v28;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v25) = v23;
  }
  *(_DWORD *)(v20 + 20) = v25 + 1;
  *(_QWORD *)(v23 + 32) = v20;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64Eqz@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  JSC::B3::Value *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  WTF *PushVariable;
  uint64_t v21;
  JSC::B3::Value *v22;
  unint64_t v23;
  uint64_t v24;
  char *result;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v8 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 2u, 0, 0, 0);
  v9 = *((_QWORD *)this + 11);
  v10 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = WTF::fastMalloc((WTF *)0x30);
  v13 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v12 + 8) = -1;
  *(_WORD *)(v12 + 12) = 10;
  *(_DWORD *)(v12 + 16) = v13;
  *(_BYTE *)(v12 + 20) = 0;
  *(_QWORD *)(v12 + 24) = v11;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)v12 = off_1E357F0F8;
  *(_QWORD *)(v12 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v10, (JSC::B3::Value *)v12);
  v29 = v12;
  v14 = (_QWORD *)(v9 + 8);
  v15 = *(unsigned int *)(v9 + 20);
  if ((_DWORD)v15 == *(_DWORD *)(v9 + 16))
  {
    v27 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v9 + 8), v15 + 1, (unint64_t)&v29);
    v15 = *(unsigned int *)(v9 + 20);
    *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v15) = *(_QWORD *)v27;
    v16 = v29;
  }
  else
  {
    *(_QWORD *)(*v14 + 8 * v15) = v12;
    v16 = v12;
  }
  *(_DWORD *)(v9 + 20) = v15 + 1;
  *(_QWORD *)(v16 + 32) = v9;
  v17 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, v11, v8, v12);
  JSC::B3::Procedure::addValueImpl(v10, (JSC::B3::Value *)v17);
  v29 = (uint64_t)v17;
  v18 = *(unsigned int *)(v9 + 20);
  if ((_DWORD)v18 == *(_DWORD *)(v9 + 16))
  {
    v28 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v9 + 8), v18 + 1, (unint64_t)&v29);
    v18 = *(unsigned int *)(v9 + 20);
    *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v18) = *(_QWORD *)v28;
    v19 = (int *)v29;
  }
  else
  {
    *(_QWORD *)(*v14 + 8 * v18) = v17;
    v19 = v17;
  }
  *(_DWORD *)(v9 + 20) = v18 + 1;
  *((_QWORD *)v19 + 4) = v9;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v17[4]);
  v21 = *((_QWORD *)this + 11);
  v22 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v23 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v23 = 0;
  v24 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v24 + 8) = -1;
  *(_WORD *)(v24 + 12) = 9;
  *(_DWORD *)(v24 + 16) = 0;
  *(_BYTE *)(v24 + 20) = 1;
  *(_QWORD *)(v24 + 24) = v23;
  *(_QWORD *)(v24 + 32) = 0;
  *(_QWORD *)v24 = off_1E357F0F8;
  *(_QWORD *)(v24 + 40) = PushVariable;
  *(_QWORD *)(v24 + 48) = v17;
  JSC::B3::Procedure::addValueImpl(v22, (JSC::B3::Value *)v24);
  v29 = v24;
  result = (char *)(v21 + 8);
  v26 = *(unsigned int *)(v21 + 20);
  if ((_DWORD)v26 == *(_DWORD *)(v21 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v26 + 1, (unint64_t)&v29);
    v26 = *(unsigned int *)(v21 + 20);
    *(_QWORD *)(*(_QWORD *)(v21 + 8) + 8 * v26) = *(_QWORD *)result;
    v24 = v29;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v26) = v24;
  }
  *(_DWORD *)(v21 + 20) = v26 + 1;
  *(_QWORD *)(v24 + 32) = v21;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF32Add@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  WTF *PushVariable;
  uint64_t v32;
  JSC::B3::Value *v33;
  unint64_t v34;
  uint64_t v35;
  char *result;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  JSC::B3::Value *v41;
  _BYTE *v42;
  JSC::B3::Variable **v43;
  uint64_t v44;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v43 = a4;
  v44 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v41 = v11;
  v42 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v44);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v38;
    v17 = v44;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v44 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v39 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v44);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v39;
    v25 = v44;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(14, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v41, (JSC::B3::Value *)v26);
  v44 = v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v44);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v40;
    v28 = v44;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *(_QWORD *)(v28 + 32) = v10;
  v29 = *(_DWORD *)(v26 + 16);
  if (v29 >= 0x80000000)
    v30 = 0x80000000;
  else
    v30 = *(_DWORD *)(v26 + 16);
  if (v30 - 3 <= 1)
    *(_WORD *)(v26 + 12) = 1038;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v29);
  v32 = *((_QWORD *)this + 11);
  v33 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v34 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v34 = 0;
  v35 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v35 + 8) = -1;
  *(_WORD *)(v35 + 12) = 9;
  *(_DWORD *)(v35 + 16) = 0;
  *(_BYTE *)(v35 + 20) = 1;
  *(_QWORD *)(v35 + 24) = v34;
  *(_QWORD *)(v35 + 32) = 0;
  *(_QWORD *)v35 = off_1E357F0F8;
  *(_QWORD *)(v35 + 40) = PushVariable;
  *(_QWORD *)(v35 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v33, (JSC::B3::Value *)v35);
  v44 = v35;
  result = (char *)(v32 + 8);
  v37 = *(unsigned int *)(v32 + 20);
  if ((_DWORD)v37 == *(_DWORD *)(v32 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v37 + 1, (unint64_t)&v44);
    v37 = *(unsigned int *)(v32 + 20);
    *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8 * v37) = *(_QWORD *)result;
    v35 = v44;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v37) = v35;
  }
  *(_DWORD *)(v32 + 20) = v37 + 1;
  *(_QWORD *)(v35 + 32) = v32;
  *v43 = PushVariable;
  *v42 = 0;
  v42[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF32Sub@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  WTF *PushVariable;
  uint64_t v32;
  JSC::B3::Value *v33;
  unint64_t v34;
  uint64_t v35;
  char *result;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  JSC::B3::Value *v41;
  _BYTE *v42;
  JSC::B3::Variable **v43;
  uint64_t v44;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v43 = a4;
  v44 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v41 = v11;
  v42 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v44);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v38;
    v17 = v44;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v44 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v39 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v44);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v39;
    v25 = v44;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(15, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v41, (JSC::B3::Value *)v26);
  v44 = v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v44);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v40;
    v28 = v44;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *(_QWORD *)(v28 + 32) = v10;
  v29 = *(_DWORD *)(v26 + 16);
  if (v29 >= 0x80000000)
    v30 = 0x80000000;
  else
    v30 = *(_DWORD *)(v26 + 16);
  if (v30 - 3 <= 1)
    *(_WORD *)(v26 + 12) = 1039;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v29);
  v32 = *((_QWORD *)this + 11);
  v33 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v34 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v34 = 0;
  v35 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v35 + 8) = -1;
  *(_WORD *)(v35 + 12) = 9;
  *(_DWORD *)(v35 + 16) = 0;
  *(_BYTE *)(v35 + 20) = 1;
  *(_QWORD *)(v35 + 24) = v34;
  *(_QWORD *)(v35 + 32) = 0;
  *(_QWORD *)v35 = off_1E357F0F8;
  *(_QWORD *)(v35 + 40) = PushVariable;
  *(_QWORD *)(v35 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v33, (JSC::B3::Value *)v35);
  v44 = v35;
  result = (char *)(v32 + 8);
  v37 = *(unsigned int *)(v32 + 20);
  if ((_DWORD)v37 == *(_DWORD *)(v32 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v37 + 1, (unint64_t)&v44);
    v37 = *(unsigned int *)(v32 + 20);
    *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8 * v37) = *(_QWORD *)result;
    v35 = v44;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v37) = v35;
  }
  *(_DWORD *)(v32 + 20) = v37 + 1;
  *(_QWORD *)(v35 + 32) = v32;
  *v43 = PushVariable;
  *v42 = 0;
  v42[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF32Mul@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  WTF *PushVariable;
  uint64_t v32;
  JSC::B3::Value *v33;
  unint64_t v34;
  uint64_t v35;
  char *result;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  JSC::B3::Value *v41;
  _BYTE *v42;
  JSC::B3::Variable **v43;
  uint64_t v44;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v43 = a4;
  v44 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v41 = v11;
  v42 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v44);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v38;
    v17 = v44;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v44 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v39 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v44);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v39;
    v25 = v44;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(16, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v41, (JSC::B3::Value *)v26);
  v44 = v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v44);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v40;
    v28 = v44;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *(_QWORD *)(v28 + 32) = v10;
  v29 = *(_DWORD *)(v26 + 16);
  if (v29 >= 0x80000000)
    v30 = 0x80000000;
  else
    v30 = *(_DWORD *)(v26 + 16);
  if (v30 - 3 <= 1)
    *(_WORD *)(v26 + 12) = 1040;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v29);
  v32 = *((_QWORD *)this + 11);
  v33 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v34 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v34 = 0;
  v35 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v35 + 8) = -1;
  *(_WORD *)(v35 + 12) = 9;
  *(_DWORD *)(v35 + 16) = 0;
  *(_BYTE *)(v35 + 20) = 1;
  *(_QWORD *)(v35 + 24) = v34;
  *(_QWORD *)(v35 + 32) = 0;
  *(_QWORD *)v35 = off_1E357F0F8;
  *(_QWORD *)(v35 + 40) = PushVariable;
  *(_QWORD *)(v35 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v33, (JSC::B3::Value *)v35);
  v44 = v35;
  result = (char *)(v32 + 8);
  v37 = *(unsigned int *)(v32 + 20);
  if ((_DWORD)v37 == *(_DWORD *)(v32 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v37 + 1, (unint64_t)&v44);
    v37 = *(unsigned int *)(v32 + 20);
    *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8 * v37) = *(_QWORD *)result;
    v35 = v44;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v37) = v35;
  }
  *(_DWORD *)(v32 + 20) = v37 + 1;
  *(_QWORD *)(v35 + 32) = v32;
  *v43 = PushVariable;
  *v42 = 0;
  v42[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF32Div@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  WTF *PushVariable;
  uint64_t v32;
  JSC::B3::Value *v33;
  unint64_t v34;
  uint64_t v35;
  char *result;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  JSC::B3::Value *v41;
  _BYTE *v42;
  JSC::B3::Variable **v43;
  uint64_t v44;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v43 = a4;
  v44 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v41 = v11;
  v42 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v44);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v38;
    v17 = v44;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v44 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v39 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v44);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v39;
    v25 = v44;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(17, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v41, (JSC::B3::Value *)v26);
  v44 = v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v44);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v40;
    v28 = v44;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *(_QWORD *)(v28 + 32) = v10;
  v29 = *(_DWORD *)(v26 + 16);
  if (v29 >= 0x80000000)
    v30 = 0x80000000;
  else
    v30 = *(_DWORD *)(v26 + 16);
  if (v30 - 3 <= 1)
    *(_WORD *)(v26 + 12) = 1041;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v29);
  v32 = *((_QWORD *)this + 11);
  v33 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v34 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v34 = 0;
  v35 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v35 + 8) = -1;
  *(_WORD *)(v35 + 12) = 9;
  *(_DWORD *)(v35 + 16) = 0;
  *(_BYTE *)(v35 + 20) = 1;
  *(_QWORD *)(v35 + 24) = v34;
  *(_QWORD *)(v35 + 32) = 0;
  *(_QWORD *)v35 = off_1E357F0F8;
  *(_QWORD *)(v35 + 40) = PushVariable;
  *(_QWORD *)(v35 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v33, (JSC::B3::Value *)v35);
  v44 = v35;
  result = (char *)(v32 + 8);
  v37 = *(unsigned int *)(v32 + 20);
  if ((_DWORD)v37 == *(_DWORD *)(v32 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v37 + 1, (unint64_t)&v44);
    v37 = *(unsigned int *)(v32 + 20);
    *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8 * v37) = *(_QWORD *)result;
    v35 = v44;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v37) = v35;
  }
  *(_DWORD *)(v32 + 20) = v37 + 1;
  *(_QWORD *)(v35 + 32) = v32;
  *v43 = PushVariable;
  *v42 = 0;
  v42[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF32Min@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(36, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF32Max@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(35, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF32Abs@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *PushVariable;
  uint64_t v20;
  JSC::B3::Value *v21;
  unint64_t v22;
  uint64_t v23;
  char *result;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v28 = v11;
  v13 = (_QWORD *)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v14 + 1, (unint64_t)&v28);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v26;
    v15 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v14) = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v16 = off_1E357F5F0;
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 31;
  *(_DWORD *)(v16 + 16) = *(_DWORD *)(v11 + 16);
  *(_BYTE *)(v16 + 20) = 1;
  *(_QWORD *)(v16 + 24) = v10;
  *(_QWORD *)(v16 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v16, 1, v11);
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v16);
  v28 = v16;
  v17 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v17 == *(_DWORD *)(v8 + 16))
  {
    v27 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v17 + 1, (unint64_t)&v28);
    v17 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v17) = *(_QWORD *)v27;
    v18 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v17) = v16;
    v18 = v16;
  }
  *(_DWORD *)(v8 + 20) = v17 + 1;
  *(_QWORD *)(v18 + 32) = v8;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v16 + 16));
  v20 = *((_QWORD *)this + 11);
  v21 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v22 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v22 = 0;
  v23 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v23 + 8) = -1;
  *(_WORD *)(v23 + 12) = 9;
  *(_DWORD *)(v23 + 16) = 0;
  *(_BYTE *)(v23 + 20) = 1;
  *(_QWORD *)(v23 + 24) = v22;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)v23 = off_1E357F0F8;
  *(_QWORD *)(v23 + 40) = PushVariable;
  *(_QWORD *)(v23 + 48) = v16;
  JSC::B3::Procedure::addValueImpl(v21, (JSC::B3::Value *)v23);
  v28 = v23;
  result = (char *)(v20 + 8);
  v25 = *(unsigned int *)(v20 + 20);
  if ((_DWORD)v25 == *(_DWORD *)(v20 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v25 + 1, (unint64_t)&v28);
    v25 = *(unsigned int *)(v20 + 20);
    *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v25) = *(_QWORD *)result;
    v23 = v28;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v25) = v23;
  }
  *(_DWORD *)(v20 + 20) = v25 + 1;
  *(_QWORD *)(v23 + 32) = v20;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF32Neg@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *PushVariable;
  uint64_t v20;
  JSC::B3::Value *v21;
  unint64_t v22;
  uint64_t v23;
  char *result;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v28 = v11;
  v13 = (_QWORD *)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v14 + 1, (unint64_t)&v28);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v26;
    v15 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v14) = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v16 = off_1E357F5F0;
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 21;
  *(_DWORD *)(v16 + 16) = *(_DWORD *)(v11 + 16);
  *(_BYTE *)(v16 + 20) = 1;
  *(_QWORD *)(v16 + 24) = v10;
  *(_QWORD *)(v16 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v16, 1, v11);
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v16);
  v28 = v16;
  v17 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v17 == *(_DWORD *)(v8 + 16))
  {
    v27 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v17 + 1, (unint64_t)&v28);
    v17 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v17) = *(_QWORD *)v27;
    v18 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v17) = v16;
    v18 = v16;
  }
  *(_DWORD *)(v8 + 20) = v17 + 1;
  *(_QWORD *)(v18 + 32) = v8;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v16 + 16));
  v20 = *((_QWORD *)this + 11);
  v21 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v22 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v22 = 0;
  v23 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v23 + 8) = -1;
  *(_WORD *)(v23 + 12) = 9;
  *(_DWORD *)(v23 + 16) = 0;
  *(_BYTE *)(v23 + 20) = 1;
  *(_QWORD *)(v23 + 24) = v22;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)v23 = off_1E357F0F8;
  *(_QWORD *)(v23 + 40) = PushVariable;
  *(_QWORD *)(v23 + 48) = v16;
  JSC::B3::Procedure::addValueImpl(v21, (JSC::B3::Value *)v23);
  v28 = v23;
  result = (char *)(v20 + 8);
  v25 = *(unsigned int *)(v20 + 20);
  if ((_DWORD)v25 == *(_DWORD *)(v20 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v25 + 1, (unint64_t)&v28);
    v25 = *(unsigned int *)(v20 + 20);
    *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v25) = *(_QWORD *)result;
    v23 = v28;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v25) = v23;
  }
  *(_DWORD *)(v20 + 20) = v25 + 1;
  *(_QWORD *)(v23 + 32) = v20;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF32Copysign@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  JSC::B3::Value *v24;
  uint64_t v25;
  uint64_t v26;
  JSC::B3::Value *v27;
  unint64_t v28;
  JSC::B3::Value *v29;
  char **v30;
  uint64_t v31;
  JSC::B3::Value *v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  JSC::B3::Value *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  JSC::B3::Value *v47;
  uint64_t v48;
  uint64_t v49;
  JSC::B3::Value *v50;
  unint64_t v51;
  JSC::B3::Value *v52;
  char **v53;
  uint64_t v54;
  JSC::B3::Value *v55;
  uint64_t v56;
  JSC::B3::Value *v57;
  unint64_t v58;
  JSC::B3::Value *v59;
  char **v60;
  uint64_t v61;
  JSC::B3::Value *v62;
  uint64_t v63;
  JSC::B3::Value *v64;
  unint64_t v65;
  uint64_t v66;
  int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  char **v71;
  uint64_t v72;
  int *v73;
  WTF *PushVariable;
  uint64_t v75;
  JSC::B3::Value *v76;
  unint64_t v77;
  uint64_t v78;
  char *result;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  JSC::B3::Value *v89;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v89 = (JSC::B3::Value *)v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v81 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v89);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v81;
    v17 = (uint64_t)v89;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = WTF::fastMalloc((WTF *)0x30);
  v19 = (JSC::B3::Value *)v18;
  *(_QWORD *)v18 = off_1E357F5F0;
  *(_DWORD *)(v18 + 8) = -1;
  *(_WORD *)(v18 + 12) = 37;
  v20 = *(_DWORD *)(v13 + 16);
  if (v20 >= 0x80000000)
    v20 = 0x80000000;
  v21 = v20 - 1;
  if (v21 > 3)
    v22 = 0;
  else
    v22 = dword_19914FDF0[v21];
  *(_DWORD *)(v18 + 16) = v22;
  *(_BYTE *)(v18 + 20) = 1;
  *(_QWORD *)(v18 + 24) = v12;
  *(_QWORD *)(v18 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v18, 1, v13);
  JSC::B3::Procedure::addValueImpl(v11, v19);
  v89 = v19;
  v23 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v23 == *(_DWORD *)(v10 + 16))
  {
    v82 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v23 + 1, (unint64_t)&v89);
    v23 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v23) = *(_QWORD *)v82;
    v24 = v89;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v23) = v19;
    v24 = v19;
  }
  *(_DWORD *)(v10 + 20) = v23 + 1;
  *((_QWORD *)v24 + 4) = v10;
  v25 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 1u, 0x80000000uLL, 0, 0);
  v26 = *((_QWORD *)this + 11);
  v27 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v28 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v28 = 0;
  v29 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(22, v28, (uint64_t)v19, v25);
  JSC::B3::Procedure::addValueImpl(v27, v29);
  v89 = v29;
  v30 = (char **)(v26 + 8);
  v31 = *(unsigned int *)(v26 + 20);
  if ((_DWORD)v31 == *(_DWORD *)(v26 + 16))
  {
    v83 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30, v31 + 1, (unint64_t)&v89);
    v31 = *(unsigned int *)(v26 + 20);
    *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8 * v31) = *(_QWORD *)v83;
    v32 = v89;
  }
  else
  {
    *(_QWORD *)&(*v30)[8 * v31] = v29;
    v32 = v29;
  }
  *(_DWORD *)(v26 + 20) = v31 + 1;
  *((_QWORD *)v32 + 4) = v26;
  v33 = *((_QWORD *)this + 11);
  v34 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v35 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v35 = 0;
  v36 = WTF::fastMalloc((WTF *)0x30);
  v37 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v36 + 8) = -1;
  *(_WORD *)(v36 + 12) = 10;
  *(_DWORD *)(v36 + 16) = v37;
  *(_BYTE *)(v36 + 20) = 0;
  *(_QWORD *)(v36 + 24) = v35;
  *(_QWORD *)(v36 + 32) = 0;
  *(_QWORD *)v36 = off_1E357F0F8;
  *(_QWORD *)(v36 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v34, (JSC::B3::Value *)v36);
  v89 = (JSC::B3::Value *)v36;
  v38 = (_QWORD *)(v33 + 8);
  v39 = *(unsigned int *)(v33 + 20);
  if ((_DWORD)v39 == *(_DWORD *)(v33 + 16))
  {
    v84 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v33 + 8), v39 + 1, (unint64_t)&v89);
    v39 = *(unsigned int *)(v33 + 20);
    *(_QWORD *)(*(_QWORD *)(v33 + 8) + 8 * v39) = *(_QWORD *)v84;
    v40 = (uint64_t)v89;
  }
  else
  {
    *(_QWORD *)(*v38 + 8 * v39) = v36;
    v40 = v36;
  }
  *(_DWORD *)(v33 + 20) = v39 + 1;
  *(_QWORD *)(v40 + 32) = v33;
  v41 = WTF::fastMalloc((WTF *)0x30);
  v42 = (JSC::B3::Value *)v41;
  *(_QWORD *)v41 = off_1E357F5F0;
  *(_DWORD *)(v41 + 8) = -1;
  *(_WORD *)(v41 + 12) = 37;
  v43 = *(_DWORD *)(v36 + 16);
  if (v43 >= 0x80000000)
    v43 = 0x80000000;
  v44 = v43 - 1;
  if (v44 > 3)
    v45 = 0;
  else
    v45 = dword_19914FDF0[v44];
  *(_DWORD *)(v41 + 16) = v45;
  *(_BYTE *)(v41 + 20) = 1;
  *(_QWORD *)(v41 + 24) = v35;
  *(_QWORD *)(v41 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v41, 1, v36);
  JSC::B3::Procedure::addValueImpl(v34, v42);
  v89 = v42;
  v46 = *(unsigned int *)(v33 + 20);
  if ((_DWORD)v46 == *(_DWORD *)(v33 + 16))
  {
    v85 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v33 + 8), v46 + 1, (unint64_t)&v89);
    v46 = *(unsigned int *)(v33 + 20);
    *(_QWORD *)(*(_QWORD *)(v33 + 8) + 8 * v46) = *(_QWORD *)v85;
    v47 = v89;
  }
  else
  {
    *(_QWORD *)(*v38 + 8 * v46) = v42;
    v47 = v42;
  }
  *(_DWORD *)(v33 + 20) = v46 + 1;
  *((_QWORD *)v47 + 4) = v33;
  v48 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 1u, 0x7FFFFFFFuLL, 0, 0);
  v49 = *((_QWORD *)this + 11);
  v50 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v51 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v51 = 0;
  v52 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(22, v51, (uint64_t)v42, v48);
  JSC::B3::Procedure::addValueImpl(v50, v52);
  v89 = v52;
  v53 = (char **)(v49 + 8);
  v54 = *(unsigned int *)(v49 + 20);
  if ((_DWORD)v54 == *(_DWORD *)(v49 + 16))
  {
    v86 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53, v54 + 1, (unint64_t)&v89);
    v54 = *(unsigned int *)(v49 + 20);
    *(_QWORD *)(*(_QWORD *)(v49 + 8) + 8 * v54) = *(_QWORD *)v86;
    v55 = v89;
  }
  else
  {
    *(_QWORD *)&(*v53)[8 * v54] = v52;
    v55 = v52;
  }
  *(_DWORD *)(v49 + 20) = v54 + 1;
  *((_QWORD *)v55 + 4) = v49;
  v56 = *((_QWORD *)this + 11);
  v57 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v58 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v58 = 0;
  v59 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(23, v58, (uint64_t)v29, (uint64_t)v52);
  JSC::B3::Procedure::addValueImpl(v57, v59);
  v89 = v59;
  v60 = (char **)(v56 + 8);
  v61 = *(unsigned int *)(v56 + 20);
  if ((_DWORD)v61 == *(_DWORD *)(v56 + 16))
  {
    v87 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v60, v61 + 1, (unint64_t)&v89);
    v61 = *(unsigned int *)(v56 + 20);
    *(_QWORD *)(*(_QWORD *)(v56 + 8) + 8 * v61) = *(_QWORD *)v87;
    v62 = v89;
  }
  else
  {
    *(_QWORD *)&(*v60)[8 * v61] = v59;
    v62 = v59;
  }
  *(_DWORD *)(v56 + 20) = v61 + 1;
  *((_QWORD *)v62 + 4) = v56;
  v63 = *((_QWORD *)this + 11);
  v64 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v65 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v65 = 0;
  v66 = WTF::fastMalloc((WTF *)0x30);
  v67 = (int *)v66;
  *(_QWORD *)v66 = off_1E357F5F0;
  *(_DWORD *)(v66 + 8) = -1;
  *(_WORD *)(v66 + 12) = 37;
  v68 = *((_DWORD *)v59 + 4);
  if (v68 >= 0x80000000)
    v68 = 0x80000000;
  v69 = v68 - 1;
  if (v69 > 3)
    v70 = 0;
  else
    v70 = dword_19914FDF0[v69];
  *(_DWORD *)(v66 + 16) = v70;
  *(_BYTE *)(v66 + 20) = 1;
  *(_QWORD *)(v66 + 24) = v65;
  *(_QWORD *)(v66 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v66, 1, (uint64_t)v59);
  JSC::B3::Procedure::addValueImpl(v64, (JSC::B3::Value *)v67);
  v89 = (JSC::B3::Value *)v67;
  v71 = (char **)(v63 + 8);
  v72 = *(unsigned int *)(v63 + 20);
  if ((_DWORD)v72 == *(_DWORD *)(v63 + 16))
  {
    v88 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v71, v72 + 1, (unint64_t)&v89);
    v72 = *(unsigned int *)(v63 + 20);
    *(_QWORD *)(*(_QWORD *)(v63 + 8) + 8 * v72) = *(_QWORD *)v88;
    v73 = (int *)v89;
  }
  else
  {
    *(_QWORD *)&(*v71)[8 * v72] = v67;
    v73 = v67;
  }
  *(_DWORD *)(v63 + 20) = v72 + 1;
  *((_QWORD *)v73 + 4) = v63;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v67[4]);
  v75 = *((_QWORD *)this + 11);
  v76 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v77 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v77 = 0;
  v78 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v78 + 8) = -1;
  *(_WORD *)(v78 + 12) = 9;
  *(_DWORD *)(v78 + 16) = 0;
  *(_BYTE *)(v78 + 20) = 1;
  *(_QWORD *)(v78 + 24) = v77;
  *(_QWORD *)(v78 + 32) = 0;
  *(_QWORD *)v78 = off_1E357F0F8;
  *(_QWORD *)(v78 + 40) = PushVariable;
  *(_QWORD *)(v78 + 48) = v67;
  JSC::B3::Procedure::addValueImpl(v76, (JSC::B3::Value *)v78);
  v89 = (JSC::B3::Value *)v78;
  result = (char *)(v75 + 8);
  v80 = *(unsigned int *)(v75 + 20);
  if ((_DWORD)v80 == *(_DWORD *)(v75 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v80 + 1, (unint64_t)&v89);
    v80 = *(unsigned int *)(v75 + 20);
    *(_QWORD *)(*(_QWORD *)(v75 + 8) + 8 * v80) = *(_QWORD *)result;
    v78 = (uint64_t)v89;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v80) = v78;
  }
  *(_DWORD *)(v75 + 20) = v80 + 1;
  *(_QWORD *)(v78 + 32) = v75;
  *a4 = PushVariable;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF32Ceil@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *PushVariable;
  uint64_t v20;
  JSC::B3::Value *v21;
  unint64_t v22;
  uint64_t v23;
  char *result;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v28 = v11;
  v13 = (_QWORD *)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v14 + 1, (unint64_t)&v28);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v26;
    v15 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v14) = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v16 = off_1E357F5F0;
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 32;
  *(_DWORD *)(v16 + 16) = *(_DWORD *)(v11 + 16);
  *(_BYTE *)(v16 + 20) = 1;
  *(_QWORD *)(v16 + 24) = v10;
  *(_QWORD *)(v16 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v16, 1, v11);
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v16);
  v28 = v16;
  v17 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v17 == *(_DWORD *)(v8 + 16))
  {
    v27 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v17 + 1, (unint64_t)&v28);
    v17 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v17) = *(_QWORD *)v27;
    v18 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v17) = v16;
    v18 = v16;
  }
  *(_DWORD *)(v8 + 20) = v17 + 1;
  *(_QWORD *)(v18 + 32) = v8;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v16 + 16));
  v20 = *((_QWORD *)this + 11);
  v21 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v22 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v22 = 0;
  v23 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v23 + 8) = -1;
  *(_WORD *)(v23 + 12) = 9;
  *(_DWORD *)(v23 + 16) = 0;
  *(_BYTE *)(v23 + 20) = 1;
  *(_QWORD *)(v23 + 24) = v22;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)v23 = off_1E357F0F8;
  *(_QWORD *)(v23 + 40) = PushVariable;
  *(_QWORD *)(v23 + 48) = v16;
  JSC::B3::Procedure::addValueImpl(v21, (JSC::B3::Value *)v23);
  v28 = v23;
  result = (char *)(v20 + 8);
  v25 = *(unsigned int *)(v20 + 20);
  if ((_DWORD)v25 == *(_DWORD *)(v20 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v25 + 1, (unint64_t)&v28);
    v25 = *(unsigned int *)(v20 + 20);
    *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v25) = *(_QWORD *)result;
    v23 = v28;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v25) = v23;
  }
  *(_DWORD *)(v20 + 20) = v25 + 1;
  *(_QWORD *)(v23 + 32) = v20;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF32Floor@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *PushVariable;
  uint64_t v20;
  JSC::B3::Value *v21;
  unint64_t v22;
  uint64_t v23;
  char *result;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v28 = v11;
  v13 = (_QWORD *)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v14 + 1, (unint64_t)&v28);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v26;
    v15 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v14) = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v16 = off_1E357F5F0;
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 33;
  *(_DWORD *)(v16 + 16) = *(_DWORD *)(v11 + 16);
  *(_BYTE *)(v16 + 20) = 1;
  *(_QWORD *)(v16 + 24) = v10;
  *(_QWORD *)(v16 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v16, 1, v11);
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v16);
  v28 = v16;
  v17 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v17 == *(_DWORD *)(v8 + 16))
  {
    v27 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v17 + 1, (unint64_t)&v28);
    v17 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v17) = *(_QWORD *)v27;
    v18 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v17) = v16;
    v18 = v16;
  }
  *(_DWORD *)(v8 + 20) = v17 + 1;
  *(_QWORD *)(v18 + 32) = v8;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v16 + 16));
  v20 = *((_QWORD *)this + 11);
  v21 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v22 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v22 = 0;
  v23 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v23 + 8) = -1;
  *(_WORD *)(v23 + 12) = 9;
  *(_DWORD *)(v23 + 16) = 0;
  *(_BYTE *)(v23 + 20) = 1;
  *(_QWORD *)(v23 + 24) = v22;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)v23 = off_1E357F0F8;
  *(_QWORD *)(v23 + 40) = PushVariable;
  *(_QWORD *)(v23 + 48) = v16;
  JSC::B3::Procedure::addValueImpl(v21, (JSC::B3::Value *)v23);
  v28 = v23;
  result = (char *)(v20 + 8);
  v25 = *(unsigned int *)(v20 + 20);
  if ((_DWORD)v25 == *(_DWORD *)(v20 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v25 + 1, (unint64_t)&v28);
    v25 = *(unsigned int *)(v20 + 20);
    *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v25) = *(_QWORD *)result;
    v23 = v28;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v25) = v23;
  }
  *(_DWORD *)(v20 + 20) = v25 + 1;
  *(_QWORD *)(v23 + 32) = v20;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF32Sqrt@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *PushVariable;
  uint64_t v20;
  JSC::B3::Value *v21;
  unint64_t v22;
  uint64_t v23;
  char *result;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v28 = v11;
  v13 = (_QWORD *)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v14 + 1, (unint64_t)&v28);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v26;
    v15 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v14) = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v16 = off_1E357F5F0;
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 34;
  *(_DWORD *)(v16 + 16) = *(_DWORD *)(v11 + 16);
  *(_BYTE *)(v16 + 20) = 1;
  *(_QWORD *)(v16 + 24) = v10;
  *(_QWORD *)(v16 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v16, 1, v11);
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v16);
  v28 = v16;
  v17 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v17 == *(_DWORD *)(v8 + 16))
  {
    v27 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v17 + 1, (unint64_t)&v28);
    v17 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v17) = *(_QWORD *)v27;
    v18 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v17) = v16;
    v18 = v16;
  }
  *(_DWORD *)(v8 + 20) = v17 + 1;
  *(_QWORD *)(v18 + 32) = v8;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v16 + 16));
  v20 = *((_QWORD *)this + 11);
  v21 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v22 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v22 = 0;
  v23 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v23 + 8) = -1;
  *(_WORD *)(v23 + 12) = 9;
  *(_DWORD *)(v23 + 16) = 0;
  *(_BYTE *)(v23 + 20) = 1;
  *(_QWORD *)(v23 + 24) = v22;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)v23 = off_1E357F0F8;
  *(_QWORD *)(v23 + 40) = PushVariable;
  *(_QWORD *)(v23 + 48) = v16;
  JSC::B3::Procedure::addValueImpl(v21, (JSC::B3::Value *)v23);
  v28 = v23;
  result = (char *)(v20 + 8);
  v25 = *(unsigned int *)(v20 + 20);
  if ((_DWORD)v25 == *(_DWORD *)(v20 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v25 + 1, (unint64_t)&v28);
    v25 = *(unsigned int *)(v20 + 20);
    *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v25) = *(_QWORD *)result;
    v23 = v28;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v25) = v23;
  }
  *(_DWORD *)(v20 + 20) = v25 + 1;
  *(_QWORD *)(v23 + 32) = v20;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addF32Eq@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v13 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v14 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v9, v10, 51, v11, v12, v13);
  result = JSC::Wasm::OMGIRGenerator::push(this, v14);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addF32Ne@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v13 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v14 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v9, v10, 52, v11, v12, v13);
  result = JSC::Wasm::OMGIRGenerator::push(this, v14);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF32Lt@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(53, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF32Le@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(55, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF32Gt@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(54, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF32Ge@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(56, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addF64Add@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v13 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v14 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v9, v10, 14, v11, v12, v13);
  v15 = *(_DWORD *)(v14 + 16);
  if (v15 >= 0x80000000)
    v15 = 0x80000000;
  if (v15 - 3 <= 1)
    *(_WORD *)(v14 + 12) = 1038;
  result = JSC::Wasm::OMGIRGenerator::push(this, (JSC::B3::Value *)v14);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF64Sub@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  WTF *PushVariable;
  uint64_t v32;
  JSC::B3::Value *v33;
  unint64_t v34;
  uint64_t v35;
  char *result;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  JSC::B3::Value *v41;
  _BYTE *v42;
  JSC::B3::Variable **v43;
  uint64_t v44;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v43 = a4;
  v44 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v41 = v11;
  v42 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v44);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v38;
    v17 = v44;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v44 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v39 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v44);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v39;
    v25 = v44;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(15, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v41, (JSC::B3::Value *)v26);
  v44 = v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v44);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v40;
    v28 = v44;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *(_QWORD *)(v28 + 32) = v10;
  v29 = *(_DWORD *)(v26 + 16);
  if (v29 >= 0x80000000)
    v30 = 0x80000000;
  else
    v30 = *(_DWORD *)(v26 + 16);
  if (v30 - 3 <= 1)
    *(_WORD *)(v26 + 12) = 1039;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v29);
  v32 = *((_QWORD *)this + 11);
  v33 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v34 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v34 = 0;
  v35 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v35 + 8) = -1;
  *(_WORD *)(v35 + 12) = 9;
  *(_DWORD *)(v35 + 16) = 0;
  *(_BYTE *)(v35 + 20) = 1;
  *(_QWORD *)(v35 + 24) = v34;
  *(_QWORD *)(v35 + 32) = 0;
  *(_QWORD *)v35 = off_1E357F0F8;
  *(_QWORD *)(v35 + 40) = PushVariable;
  *(_QWORD *)(v35 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v33, (JSC::B3::Value *)v35);
  v44 = v35;
  result = (char *)(v32 + 8);
  v37 = *(unsigned int *)(v32 + 20);
  if ((_DWORD)v37 == *(_DWORD *)(v32 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v37 + 1, (unint64_t)&v44);
    v37 = *(unsigned int *)(v32 + 20);
    *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8 * v37) = *(_QWORD *)result;
    v35 = v44;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v37) = v35;
  }
  *(_DWORD *)(v32 + 20) = v37 + 1;
  *(_QWORD *)(v35 + 32) = v32;
  *v43 = PushVariable;
  *v42 = 0;
  v42[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addF64Mul@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v13 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v14 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v9, v10, 16, v11, v12, v13);
  v15 = *(_DWORD *)(v14 + 16);
  if (v15 >= 0x80000000)
    v15 = 0x80000000;
  if (v15 - 3 <= 1)
    *(_WORD *)(v14 + 12) = 1040;
  result = JSC::Wasm::OMGIRGenerator::push(this, (JSC::B3::Value *)v14);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addF64Div@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v13 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v14 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v9, v10, 17, v11, v12, v13);
  v15 = *(_DWORD *)(v14 + 16);
  if (v15 >= 0x80000000)
    v15 = 0x80000000;
  if (v15 - 3 <= 1)
    *(_WORD *)(v14 + 12) = 1041;
  result = JSC::Wasm::OMGIRGenerator::push(this, (JSC::B3::Value *)v14);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF64Min@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(36, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF64Max@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(35, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF64Abs@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *PushVariable;
  uint64_t v20;
  JSC::B3::Value *v21;
  unint64_t v22;
  uint64_t v23;
  char *result;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v28 = v11;
  v13 = (_QWORD *)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v14 + 1, (unint64_t)&v28);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v26;
    v15 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v14) = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v16 = off_1E357F5F0;
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 31;
  *(_DWORD *)(v16 + 16) = *(_DWORD *)(v11 + 16);
  *(_BYTE *)(v16 + 20) = 1;
  *(_QWORD *)(v16 + 24) = v10;
  *(_QWORD *)(v16 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v16, 1, v11);
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v16);
  v28 = v16;
  v17 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v17 == *(_DWORD *)(v8 + 16))
  {
    v27 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v17 + 1, (unint64_t)&v28);
    v17 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v17) = *(_QWORD *)v27;
    v18 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v17) = v16;
    v18 = v16;
  }
  *(_DWORD *)(v8 + 20) = v17 + 1;
  *(_QWORD *)(v18 + 32) = v8;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v16 + 16));
  v20 = *((_QWORD *)this + 11);
  v21 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v22 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v22 = 0;
  v23 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v23 + 8) = -1;
  *(_WORD *)(v23 + 12) = 9;
  *(_DWORD *)(v23 + 16) = 0;
  *(_BYTE *)(v23 + 20) = 1;
  *(_QWORD *)(v23 + 24) = v22;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)v23 = off_1E357F0F8;
  *(_QWORD *)(v23 + 40) = PushVariable;
  *(_QWORD *)(v23 + 48) = v16;
  JSC::B3::Procedure::addValueImpl(v21, (JSC::B3::Value *)v23);
  v28 = v23;
  result = (char *)(v20 + 8);
  v25 = *(unsigned int *)(v20 + 20);
  if ((_DWORD)v25 == *(_DWORD *)(v20 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v25 + 1, (unint64_t)&v28);
    v25 = *(unsigned int *)(v20 + 20);
    *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v25) = *(_QWORD *)result;
    v23 = v28;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v25) = v23;
  }
  *(_DWORD *)(v20 + 20) = v25 + 1;
  *(_QWORD *)(v23 + 32) = v20;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF64Neg@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *PushVariable;
  uint64_t v20;
  JSC::B3::Value *v21;
  unint64_t v22;
  uint64_t v23;
  char *result;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v28 = v11;
  v13 = (_QWORD *)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v14 + 1, (unint64_t)&v28);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v26;
    v15 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v14) = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v16 = off_1E357F5F0;
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 21;
  *(_DWORD *)(v16 + 16) = *(_DWORD *)(v11 + 16);
  *(_BYTE *)(v16 + 20) = 1;
  *(_QWORD *)(v16 + 24) = v10;
  *(_QWORD *)(v16 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v16, 1, v11);
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v16);
  v28 = v16;
  v17 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v17 == *(_DWORD *)(v8 + 16))
  {
    v27 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v17 + 1, (unint64_t)&v28);
    v17 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v17) = *(_QWORD *)v27;
    v18 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v17) = v16;
    v18 = v16;
  }
  *(_DWORD *)(v8 + 20) = v17 + 1;
  *(_QWORD *)(v18 + 32) = v8;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v16 + 16));
  v20 = *((_QWORD *)this + 11);
  v21 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v22 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v22 = 0;
  v23 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v23 + 8) = -1;
  *(_WORD *)(v23 + 12) = 9;
  *(_DWORD *)(v23 + 16) = 0;
  *(_BYTE *)(v23 + 20) = 1;
  *(_QWORD *)(v23 + 24) = v22;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)v23 = off_1E357F0F8;
  *(_QWORD *)(v23 + 40) = PushVariable;
  *(_QWORD *)(v23 + 48) = v16;
  JSC::B3::Procedure::addValueImpl(v21, (JSC::B3::Value *)v23);
  v28 = v23;
  result = (char *)(v20 + 8);
  v25 = *(unsigned int *)(v20 + 20);
  if ((_DWORD)v25 == *(_DWORD *)(v20 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v25 + 1, (unint64_t)&v28);
    v25 = *(unsigned int *)(v20 + 20);
    *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v25) = *(_QWORD *)result;
    v23 = v28;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v25) = v23;
  }
  *(_DWORD *)(v20 + 20) = v25 + 1;
  *(_QWORD *)(v23 + 32) = v20;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF64Copysign@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  JSC::B3::Value *v24;
  uint64_t v25;
  uint64_t v26;
  JSC::B3::Value *v27;
  unint64_t v28;
  JSC::B3::Value *v29;
  char **v30;
  uint64_t v31;
  JSC::B3::Value *v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  JSC::B3::Value *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  JSC::B3::Value *v47;
  uint64_t v48;
  uint64_t v49;
  JSC::B3::Value *v50;
  unint64_t v51;
  JSC::B3::Value *v52;
  char **v53;
  uint64_t v54;
  JSC::B3::Value *v55;
  uint64_t v56;
  JSC::B3::Value *v57;
  unint64_t v58;
  JSC::B3::Value *v59;
  char **v60;
  uint64_t v61;
  JSC::B3::Value *v62;
  uint64_t v63;
  JSC::B3::Value *v64;
  unint64_t v65;
  uint64_t v66;
  int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  char **v71;
  uint64_t v72;
  int *v73;
  WTF *PushVariable;
  uint64_t v75;
  JSC::B3::Value *v76;
  unint64_t v77;
  uint64_t v78;
  char *result;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  JSC::B3::Value *v89;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v89 = (JSC::B3::Value *)v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v81 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v89);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v81;
    v17 = (uint64_t)v89;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = WTF::fastMalloc((WTF *)0x30);
  v19 = (JSC::B3::Value *)v18;
  *(_QWORD *)v18 = off_1E357F5F0;
  *(_DWORD *)(v18 + 8) = -1;
  *(_WORD *)(v18 + 12) = 37;
  v20 = *(_DWORD *)(v13 + 16);
  if (v20 >= 0x80000000)
    v20 = 0x80000000;
  v21 = v20 - 1;
  if (v21 > 3)
    v22 = 0;
  else
    v22 = dword_19914FDF0[v21];
  *(_DWORD *)(v18 + 16) = v22;
  *(_BYTE *)(v18 + 20) = 1;
  *(_QWORD *)(v18 + 24) = v12;
  *(_QWORD *)(v18 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v18, 1, v13);
  JSC::B3::Procedure::addValueImpl(v11, v19);
  v89 = v19;
  v23 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v23 == *(_DWORD *)(v10 + 16))
  {
    v82 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v23 + 1, (unint64_t)&v89);
    v23 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v23) = *(_QWORD *)v82;
    v24 = v89;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v23) = v19;
    v24 = v19;
  }
  *(_DWORD *)(v10 + 20) = v23 + 1;
  *((_QWORD *)v24 + 4) = v10;
  v25 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 2u, 0x8000000000000000, 0, 0);
  v26 = *((_QWORD *)this + 11);
  v27 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v28 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v28 = 0;
  v29 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(22, v28, (uint64_t)v19, v25);
  JSC::B3::Procedure::addValueImpl(v27, v29);
  v89 = v29;
  v30 = (char **)(v26 + 8);
  v31 = *(unsigned int *)(v26 + 20);
  if ((_DWORD)v31 == *(_DWORD *)(v26 + 16))
  {
    v83 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30, v31 + 1, (unint64_t)&v89);
    v31 = *(unsigned int *)(v26 + 20);
    *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8 * v31) = *(_QWORD *)v83;
    v32 = v89;
  }
  else
  {
    *(_QWORD *)&(*v30)[8 * v31] = v29;
    v32 = v29;
  }
  *(_DWORD *)(v26 + 20) = v31 + 1;
  *((_QWORD *)v32 + 4) = v26;
  v33 = *((_QWORD *)this + 11);
  v34 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v35 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v35 = 0;
  v36 = WTF::fastMalloc((WTF *)0x30);
  v37 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v36 + 8) = -1;
  *(_WORD *)(v36 + 12) = 10;
  *(_DWORD *)(v36 + 16) = v37;
  *(_BYTE *)(v36 + 20) = 0;
  *(_QWORD *)(v36 + 24) = v35;
  *(_QWORD *)(v36 + 32) = 0;
  *(_QWORD *)v36 = off_1E357F0F8;
  *(_QWORD *)(v36 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v34, (JSC::B3::Value *)v36);
  v89 = (JSC::B3::Value *)v36;
  v38 = (_QWORD *)(v33 + 8);
  v39 = *(unsigned int *)(v33 + 20);
  if ((_DWORD)v39 == *(_DWORD *)(v33 + 16))
  {
    v84 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v33 + 8), v39 + 1, (unint64_t)&v89);
    v39 = *(unsigned int *)(v33 + 20);
    *(_QWORD *)(*(_QWORD *)(v33 + 8) + 8 * v39) = *(_QWORD *)v84;
    v40 = (uint64_t)v89;
  }
  else
  {
    *(_QWORD *)(*v38 + 8 * v39) = v36;
    v40 = v36;
  }
  *(_DWORD *)(v33 + 20) = v39 + 1;
  *(_QWORD *)(v40 + 32) = v33;
  v41 = WTF::fastMalloc((WTF *)0x30);
  v42 = (JSC::B3::Value *)v41;
  *(_QWORD *)v41 = off_1E357F5F0;
  *(_DWORD *)(v41 + 8) = -1;
  *(_WORD *)(v41 + 12) = 37;
  v43 = *(_DWORD *)(v36 + 16);
  if (v43 >= 0x80000000)
    v43 = 0x80000000;
  v44 = v43 - 1;
  if (v44 > 3)
    v45 = 0;
  else
    v45 = dword_19914FDF0[v44];
  *(_DWORD *)(v41 + 16) = v45;
  *(_BYTE *)(v41 + 20) = 1;
  *(_QWORD *)(v41 + 24) = v35;
  *(_QWORD *)(v41 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v41, 1, v36);
  JSC::B3::Procedure::addValueImpl(v34, v42);
  v89 = v42;
  v46 = *(unsigned int *)(v33 + 20);
  if ((_DWORD)v46 == *(_DWORD *)(v33 + 16))
  {
    v85 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v33 + 8), v46 + 1, (unint64_t)&v89);
    v46 = *(unsigned int *)(v33 + 20);
    *(_QWORD *)(*(_QWORD *)(v33 + 8) + 8 * v46) = *(_QWORD *)v85;
    v47 = v89;
  }
  else
  {
    *(_QWORD *)(*v38 + 8 * v46) = v42;
    v47 = v42;
  }
  *(_DWORD *)(v33 + 20) = v46 + 1;
  *((_QWORD *)v47 + 4) = v33;
  v48 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)this, 2u, 0x7FFFFFFFFFFFFFFFuLL, 0, 0);
  v49 = *((_QWORD *)this + 11);
  v50 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v51 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v51 = 0;
  v52 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(22, v51, (uint64_t)v42, v48);
  JSC::B3::Procedure::addValueImpl(v50, v52);
  v89 = v52;
  v53 = (char **)(v49 + 8);
  v54 = *(unsigned int *)(v49 + 20);
  if ((_DWORD)v54 == *(_DWORD *)(v49 + 16))
  {
    v86 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53, v54 + 1, (unint64_t)&v89);
    v54 = *(unsigned int *)(v49 + 20);
    *(_QWORD *)(*(_QWORD *)(v49 + 8) + 8 * v54) = *(_QWORD *)v86;
    v55 = v89;
  }
  else
  {
    *(_QWORD *)&(*v53)[8 * v54] = v52;
    v55 = v52;
  }
  *(_DWORD *)(v49 + 20) = v54 + 1;
  *((_QWORD *)v55 + 4) = v49;
  v56 = *((_QWORD *)this + 11);
  v57 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v58 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v58 = 0;
  v59 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(23, v58, (uint64_t)v29, (uint64_t)v52);
  JSC::B3::Procedure::addValueImpl(v57, v59);
  v89 = v59;
  v60 = (char **)(v56 + 8);
  v61 = *(unsigned int *)(v56 + 20);
  if ((_DWORD)v61 == *(_DWORD *)(v56 + 16))
  {
    v87 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v60, v61 + 1, (unint64_t)&v89);
    v61 = *(unsigned int *)(v56 + 20);
    *(_QWORD *)(*(_QWORD *)(v56 + 8) + 8 * v61) = *(_QWORD *)v87;
    v62 = v89;
  }
  else
  {
    *(_QWORD *)&(*v60)[8 * v61] = v59;
    v62 = v59;
  }
  *(_DWORD *)(v56 + 20) = v61 + 1;
  *((_QWORD *)v62 + 4) = v56;
  v63 = *((_QWORD *)this + 11);
  v64 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v65 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v65 = 0;
  v66 = WTF::fastMalloc((WTF *)0x30);
  v67 = (int *)v66;
  *(_QWORD *)v66 = off_1E357F5F0;
  *(_DWORD *)(v66 + 8) = -1;
  *(_WORD *)(v66 + 12) = 37;
  v68 = *((_DWORD *)v59 + 4);
  if (v68 >= 0x80000000)
    v68 = 0x80000000;
  v69 = v68 - 1;
  if (v69 > 3)
    v70 = 0;
  else
    v70 = dword_19914FDF0[v69];
  *(_DWORD *)(v66 + 16) = v70;
  *(_BYTE *)(v66 + 20) = 1;
  *(_QWORD *)(v66 + 24) = v65;
  *(_QWORD *)(v66 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v66, 1, (uint64_t)v59);
  JSC::B3::Procedure::addValueImpl(v64, (JSC::B3::Value *)v67);
  v89 = (JSC::B3::Value *)v67;
  v71 = (char **)(v63 + 8);
  v72 = *(unsigned int *)(v63 + 20);
  if ((_DWORD)v72 == *(_DWORD *)(v63 + 16))
  {
    v88 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v71, v72 + 1, (unint64_t)&v89);
    v72 = *(unsigned int *)(v63 + 20);
    *(_QWORD *)(*(_QWORD *)(v63 + 8) + 8 * v72) = *(_QWORD *)v88;
    v73 = (int *)v89;
  }
  else
  {
    *(_QWORD *)&(*v71)[8 * v72] = v67;
    v73 = v67;
  }
  *(_DWORD *)(v63 + 20) = v72 + 1;
  *((_QWORD *)v73 + 4) = v63;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v67[4]);
  v75 = *((_QWORD *)this + 11);
  v76 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v77 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v77 = 0;
  v78 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v78 + 8) = -1;
  *(_WORD *)(v78 + 12) = 9;
  *(_DWORD *)(v78 + 16) = 0;
  *(_BYTE *)(v78 + 20) = 1;
  *(_QWORD *)(v78 + 24) = v77;
  *(_QWORD *)(v78 + 32) = 0;
  *(_QWORD *)v78 = off_1E357F0F8;
  *(_QWORD *)(v78 + 40) = PushVariable;
  *(_QWORD *)(v78 + 48) = v67;
  JSC::B3::Procedure::addValueImpl(v76, (JSC::B3::Value *)v78);
  v89 = (JSC::B3::Value *)v78;
  result = (char *)(v75 + 8);
  v80 = *(unsigned int *)(v75 + 20);
  if ((_DWORD)v80 == *(_DWORD *)(v75 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v80 + 1, (unint64_t)&v89);
    v80 = *(unsigned int *)(v75 + 20);
    *(_QWORD *)(*(_QWORD *)(v75 + 8) + 8 * v80) = *(_QWORD *)result;
    v78 = (uint64_t)v89;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v80) = v78;
  }
  *(_DWORD *)(v75 + 20) = v80 + 1;
  *(_QWORD *)(v78 + 32) = v75;
  *a4 = PushVariable;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF64Ceil@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *PushVariable;
  uint64_t v20;
  JSC::B3::Value *v21;
  unint64_t v22;
  uint64_t v23;
  char *result;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v28 = v11;
  v13 = (_QWORD *)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v14 + 1, (unint64_t)&v28);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v26;
    v15 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v14) = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v16 = off_1E357F5F0;
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 32;
  *(_DWORD *)(v16 + 16) = *(_DWORD *)(v11 + 16);
  *(_BYTE *)(v16 + 20) = 1;
  *(_QWORD *)(v16 + 24) = v10;
  *(_QWORD *)(v16 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v16, 1, v11);
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v16);
  v28 = v16;
  v17 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v17 == *(_DWORD *)(v8 + 16))
  {
    v27 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v17 + 1, (unint64_t)&v28);
    v17 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v17) = *(_QWORD *)v27;
    v18 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v17) = v16;
    v18 = v16;
  }
  *(_DWORD *)(v8 + 20) = v17 + 1;
  *(_QWORD *)(v18 + 32) = v8;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v16 + 16));
  v20 = *((_QWORD *)this + 11);
  v21 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v22 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v22 = 0;
  v23 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v23 + 8) = -1;
  *(_WORD *)(v23 + 12) = 9;
  *(_DWORD *)(v23 + 16) = 0;
  *(_BYTE *)(v23 + 20) = 1;
  *(_QWORD *)(v23 + 24) = v22;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)v23 = off_1E357F0F8;
  *(_QWORD *)(v23 + 40) = PushVariable;
  *(_QWORD *)(v23 + 48) = v16;
  JSC::B3::Procedure::addValueImpl(v21, (JSC::B3::Value *)v23);
  v28 = v23;
  result = (char *)(v20 + 8);
  v25 = *(unsigned int *)(v20 + 20);
  if ((_DWORD)v25 == *(_DWORD *)(v20 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v25 + 1, (unint64_t)&v28);
    v25 = *(unsigned int *)(v20 + 20);
    *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v25) = *(_QWORD *)result;
    v23 = v28;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v25) = v23;
  }
  *(_DWORD *)(v20 + 20) = v25 + 1;
  *(_QWORD *)(v23 + 32) = v20;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF64Floor@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *PushVariable;
  uint64_t v20;
  JSC::B3::Value *v21;
  unint64_t v22;
  uint64_t v23;
  char *result;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v28 = v11;
  v13 = (_QWORD *)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v14 + 1, (unint64_t)&v28);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v26;
    v15 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v14) = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v16 = off_1E357F5F0;
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 33;
  *(_DWORD *)(v16 + 16) = *(_DWORD *)(v11 + 16);
  *(_BYTE *)(v16 + 20) = 1;
  *(_QWORD *)(v16 + 24) = v10;
  *(_QWORD *)(v16 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v16, 1, v11);
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v16);
  v28 = v16;
  v17 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v17 == *(_DWORD *)(v8 + 16))
  {
    v27 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v17 + 1, (unint64_t)&v28);
    v17 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v17) = *(_QWORD *)v27;
    v18 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v17) = v16;
    v18 = v16;
  }
  *(_DWORD *)(v8 + 20) = v17 + 1;
  *(_QWORD *)(v18 + 32) = v8;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v16 + 16));
  v20 = *((_QWORD *)this + 11);
  v21 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v22 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v22 = 0;
  v23 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v23 + 8) = -1;
  *(_WORD *)(v23 + 12) = 9;
  *(_DWORD *)(v23 + 16) = 0;
  *(_BYTE *)(v23 + 20) = 1;
  *(_QWORD *)(v23 + 24) = v22;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)v23 = off_1E357F0F8;
  *(_QWORD *)(v23 + 40) = PushVariable;
  *(_QWORD *)(v23 + 48) = v16;
  JSC::B3::Procedure::addValueImpl(v21, (JSC::B3::Value *)v23);
  v28 = v23;
  result = (char *)(v20 + 8);
  v25 = *(unsigned int *)(v20 + 20);
  if ((_DWORD)v25 == *(_DWORD *)(v20 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v25 + 1, (unint64_t)&v28);
    v25 = *(unsigned int *)(v20 + 20);
    *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v25) = *(_QWORD *)result;
    v23 = v28;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v25) = v23;
  }
  *(_DWORD *)(v20 + 20) = v25 + 1;
  *(_QWORD *)(v23 + 32) = v20;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF64Sqrt@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *PushVariable;
  uint64_t v20;
  JSC::B3::Value *v21;
  unint64_t v22;
  uint64_t v23;
  char *result;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v28 = v11;
  v13 = (_QWORD *)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v14 + 1, (unint64_t)&v28);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v26;
    v15 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v14) = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v16 = off_1E357F5F0;
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 34;
  *(_DWORD *)(v16 + 16) = *(_DWORD *)(v11 + 16);
  *(_BYTE *)(v16 + 20) = 1;
  *(_QWORD *)(v16 + 24) = v10;
  *(_QWORD *)(v16 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v16, 1, v11);
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v16);
  v28 = v16;
  v17 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v17 == *(_DWORD *)(v8 + 16))
  {
    v27 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v17 + 1, (unint64_t)&v28);
    v17 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v17) = *(_QWORD *)v27;
    v18 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v17) = v16;
    v18 = v16;
  }
  *(_DWORD *)(v8 + 20) = v17 + 1;
  *(_QWORD *)(v18 + 32) = v8;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v16 + 16));
  v20 = *((_QWORD *)this + 11);
  v21 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v22 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v22 = 0;
  v23 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v23 + 8) = -1;
  *(_WORD *)(v23 + 12) = 9;
  *(_DWORD *)(v23 + 16) = 0;
  *(_BYTE *)(v23 + 20) = 1;
  *(_QWORD *)(v23 + 24) = v22;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)v23 = off_1E357F0F8;
  *(_QWORD *)(v23 + 40) = PushVariable;
  *(_QWORD *)(v23 + 48) = v16;
  JSC::B3::Procedure::addValueImpl(v21, (JSC::B3::Value *)v23);
  v28 = v23;
  result = (char *)(v20 + 8);
  v25 = *(unsigned int *)(v20 + 20);
  if ((_DWORD)v25 == *(_DWORD *)(v20 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v25 + 1, (unint64_t)&v28);
    v25 = *(unsigned int *)(v20 + 20);
    *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v25) = *(_QWORD *)result;
    v23 = v28;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v25) = v23;
  }
  *(_DWORD *)(v20 + 20) = v25 + 1;
  *(_QWORD *)(v23 + 32) = v20;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF64Eq@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addF64Ne@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  WTF *result;

  v9 = *((_QWORD *)this + 11);
  v10 = *((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v11 = 0;
  v12 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v13 = JSC::Wasm::OMGIRGenerator::get(this, a3);
  v14 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v9, v10, 52, v11, v12, v13);
  result = JSC::Wasm::OMGIRGenerator::push(this, v14);
  *a4 = result;
  *a5 = 0;
  a5[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF64Lt@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(53, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF64Le@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(55, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF64Gt@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(54, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF64Ge@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable *a3@<X2>, JSC::B3::Variable **a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  WTF *PushVariable;
  uint64_t v30;
  JSC::B3::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char *result;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  JSC::B3::Value *v39;
  _BYTE *v40;
  JSC::B3::Variable **v41;
  uint64_t v42;

  v10 = *((_QWORD *)this + 11);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 10;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)v13 = off_1E357F0F8;
  *(_QWORD *)(v13 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
  v41 = a4;
  v42 = v13;
  v15 = (_QWORD *)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  v39 = v11;
  v40 = a5;
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v16 + 1, (unint64_t)&v42);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v36;
    v17 = v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = *((_QWORD *)this + 11);
  v19 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v20 = 0;
  v21 = WTF::fastMalloc((WTF *)0x30);
  v22 = *((_DWORD *)a3 + 1);
  *(_DWORD *)(v21 + 8) = -1;
  *(_WORD *)(v21 + 12) = 10;
  *(_DWORD *)(v21 + 16) = v22;
  *(_BYTE *)(v21 + 20) = 0;
  *(_QWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)v21 = off_1E357F0F8;
  *(_QWORD *)(v21 + 40) = a3;
  JSC::B3::Procedure::addValueImpl(v19, (JSC::B3::Value *)v21);
  v42 = v21;
  v23 = (char **)(v18 + 8);
  v24 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v18 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v24) = *(_QWORD *)v37;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v18 + 20) = v24 + 1;
  *(_QWORD *)(v25 + 32) = v18;
  v26 = (int *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(56, v12, v13, v21);
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v26);
  v42 = (uint64_t)v26;
  v27 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v27 == *(_DWORD *)(v10 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 8), v27 + 1, (unint64_t)&v42);
    v27 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v27) = *(_QWORD *)v38;
    v28 = (int *)v42;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v27) = v26;
    v28 = v26;
  }
  *(_DWORD *)(v10 + 20) = v27 + 1;
  *((_QWORD *)v28 + 4) = v10;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v26[4]);
  v30 = *((_QWORD *)this + 11);
  v31 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v32 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v32 = 0;
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 9;
  *(_DWORD *)(v33 + 16) = 0;
  *(_BYTE *)(v33 + 20) = 1;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)v33 = off_1E357F0F8;
  *(_QWORD *)(v33 + 40) = PushVariable;
  *(_QWORD *)(v33 + 48) = v26;
  JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
  v42 = v33;
  result = (char *)(v30 + 8);
  v35 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v30 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v35 + 1, (unint64_t)&v42);
    v35 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v35) = *(_QWORD *)result;
    v33 = v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v35) = v33;
  }
  *(_DWORD *)(v30 + 20) = v35 + 1;
  *(_QWORD *)(v33 + 32) = v30;
  *v41 = PushVariable;
  *v40 = 0;
  v40[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI32WrapI64@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  JSC::B3::Value *v8;
  unint64_t v9;
  uint64_t v10;
  JSC::B3::Value *v11;
  WTF *result;

  v7 = *((_QWORD *)this + 11);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v9 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v9 = 0;
  v10 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v11 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(v7, v8, 44, v9, v10);
  result = JSC::Wasm::OMGIRGenerator::push(this, v11);
  *a3 = result;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addI64ExtendSI32@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  JSC::B3::Value *v8;
  unint64_t v9;
  uint64_t v10;
  JSC::B3::Value *v11;
  WTF *result;

  v7 = *((_QWORD *)this + 11);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v9 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v9 = 0;
  v10 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v11 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(v7, v8, 42, v9, v10);
  result = JSC::Wasm::OMGIRGenerator::push(this, v11);
  *a3 = result;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64ExtendUI32@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *PushVariable;
  uint64_t v20;
  JSC::B3::Value *v21;
  unint64_t v22;
  uint64_t v23;
  char *result;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v28 = v11;
  v13 = (_QWORD *)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v14 + 1, (unint64_t)&v28);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v26;
    v15 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v14) = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v16 = off_1E357F5F0;
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 43;
  *(_DWORD *)(v16 + 16) = 2;
  *(_BYTE *)(v16 + 20) = 1;
  *(_QWORD *)(v16 + 24) = v10;
  *(_QWORD *)(v16 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v16, 1, v11);
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v16);
  v28 = v16;
  v17 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v17 == *(_DWORD *)(v8 + 16))
  {
    v27 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v17 + 1, (unint64_t)&v28);
    v17 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v17) = *(_QWORD *)v27;
    v18 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v17) = v16;
    v18 = v16;
  }
  *(_DWORD *)(v8 + 20) = v17 + 1;
  *(_QWORD *)(v18 + 32) = v8;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v16 + 16));
  v20 = *((_QWORD *)this + 11);
  v21 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v22 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v22 = 0;
  v23 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v23 + 8) = -1;
  *(_WORD *)(v23 + 12) = 9;
  *(_DWORD *)(v23 + 16) = 0;
  *(_BYTE *)(v23 + 20) = 1;
  *(_QWORD *)(v23 + 24) = v22;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)v23 = off_1E357F0F8;
  *(_QWORD *)(v23 + 40) = PushVariable;
  *(_QWORD *)(v23 + 48) = v16;
  JSC::B3::Procedure::addValueImpl(v21, (JSC::B3::Value *)v23);
  v28 = v23;
  result = (char *)(v20 + 8);
  v25 = *(unsigned int *)(v20 + 20);
  if ((_DWORD)v25 == *(_DWORD *)(v20 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v25 + 1, (unint64_t)&v28);
    v25 = *(unsigned int *)(v20 + 20);
    *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v25) = *(_QWORD *)result;
    v23 = v28;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v25) = v23;
  }
  *(_DWORD *)(v20 + 20) = v25 + 1;
  *(_QWORD *)(v23 + 32) = v20;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addF32ConvertSI32@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  JSC::B3::Value *v8;
  unint64_t v9;
  uint64_t v10;
  JSC::B3::Value *v11;
  WTF *result;

  v7 = *((_QWORD *)this + 11);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v9 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v9 = 0;
  v10 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v11 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(v7, v8, 48, v9, v10);
  result = JSC::Wasm::OMGIRGenerator::push(this, v11);
  *a3 = result;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addF32ConvertUI32@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  JSC::B3::Value *v8;
  unint64_t v9;
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  JSC::B3::Value *v13;
  WTF *result;

  v7 = *((_QWORD *)this + 11);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v9 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v9 = 0;
  v10 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v11 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(v7, v8, 43, v9, v10);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(*((_QWORD *)this + 11), *((JSC::B3::Value **)this + 7), 48, v12, (uint64_t)v11);
  result = JSC::Wasm::OMGIRGenerator::push(this, v13);
  *a3 = result;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addF32ConvertSI64@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  JSC::B3::Value *v8;
  unint64_t v9;
  uint64_t v10;
  JSC::B3::Value *v11;
  WTF *result;

  v7 = *((_QWORD *)this + 11);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v9 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v9 = 0;
  v10 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v11 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(v7, v8, 48, v9, v10);
  result = JSC::Wasm::OMGIRGenerator::push(this, v11);
  *a3 = result;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addF32DemoteF64@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  JSC::B3::Value *v8;
  unint64_t v9;
  uint64_t v10;
  JSC::B3::Value *v11;
  unsigned int v12;
  WTF *result;

  v7 = *((_QWORD *)this + 11);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v9 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v9 = 0;
  v10 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v11 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(v7, v8, 50, v9, v10);
  v12 = *((_DWORD *)v11 + 4);
  if (v12 >= 0x80000000)
    v12 = 0x80000000;
  if (v12 - 3 <= 1)
    *((_WORD *)v11 + 6) = 1074;
  result = JSC::Wasm::OMGIRGenerator::push(this, v11);
  *a3 = result;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addF32ReinterpretI32@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  JSC::B3::Value *v8;
  unint64_t v9;
  uint64_t v10;
  JSC::B3::Value *v11;
  WTF *result;

  v7 = *((_QWORD *)this + 11);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v9 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v9 = 0;
  v10 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v11 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(v7, v8, 37, v9, v10);
  result = JSC::Wasm::OMGIRGenerator::push(this, v11);
  *a3 = result;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addF64ConvertSI32@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  JSC::B3::Value *v8;
  unint64_t v9;
  uint64_t v10;
  JSC::B3::Value *v11;
  WTF *result;

  v7 = *((_QWORD *)this + 11);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v9 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v9 = 0;
  v10 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v11 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(v7, v8, 47, v9, v10);
  result = JSC::Wasm::OMGIRGenerator::push(this, v11);
  *a3 = result;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addF64ConvertUI32@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  JSC::B3::Value *v8;
  unint64_t v9;
  uint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  JSC::B3::Value *v13;
  WTF *result;

  v7 = *((_QWORD *)this + 11);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v9 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v9 = 0;
  v10 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v11 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(v7, v8, 43, v9, v10);
  if (*(_QWORD *)this)
    v12 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v12 = 0;
  v13 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(*((_QWORD *)this + 11), *((JSC::B3::Value **)this + 7), 47, v12, (uint64_t)v11);
  result = JSC::Wasm::OMGIRGenerator::push(this, v13);
  *a3 = result;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addF64ConvertSI64@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  JSC::B3::Value *v8;
  unint64_t v9;
  uint64_t v10;
  JSC::B3::Value *v11;
  WTF *result;

  v7 = *((_QWORD *)this + 11);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v9 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v9 = 0;
  v10 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v11 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(v7, v8, 47, v9, v10);
  result = JSC::Wasm::OMGIRGenerator::push(this, v11);
  *a3 = result;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::addF64PromoteF32@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  JSC::B3::Value *v8;
  unint64_t v9;
  uint64_t v10;
  JSC::B3::Value *v11;
  unsigned int v12;
  WTF *result;

  v7 = *((_QWORD *)this + 11);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v9 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v9 = 0;
  v10 = JSC::Wasm::OMGIRGenerator::get(this, a2);
  v11 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(v7, v8, 49, v9, v10);
  v12 = *((_DWORD *)v11 + 4);
  if (v12 >= 0x80000000)
    v12 = 0x80000000;
  if (v12 - 3 <= 1)
    *((_WORD *)v11 + 6) = 1073;
  result = JSC::Wasm::OMGIRGenerator::push(this, v11);
  *a3 = result;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addF64ReinterpretI64@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int *v22;
  WTF *PushVariable;
  uint64_t v24;
  JSC::B3::Value *v25;
  unint64_t v26;
  uint64_t v27;
  char *result;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v32 = v11;
  v13 = (_QWORD *)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v30 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v14 + 1, (unint64_t)&v32);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v30;
    v15 = v32;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v14) = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = WTF::fastMalloc((WTF *)0x30);
  v17 = (int *)v16;
  *(_QWORD *)v16 = off_1E357F5F0;
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 37;
  v18 = *(_DWORD *)(v11 + 16);
  if (v18 >= 0x80000000)
    v18 = 0x80000000;
  v19 = v18 - 1;
  if (v19 > 3)
    v20 = 0;
  else
    v20 = dword_19914FDF0[v19];
  *(_DWORD *)(v16 + 16) = v20;
  *(_BYTE *)(v16 + 20) = 1;
  *(_QWORD *)(v16 + 24) = v10;
  *(_QWORD *)(v16 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v16, 1, v11);
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v17);
  v32 = (uint64_t)v17;
  v21 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v21 == *(_DWORD *)(v8 + 16))
  {
    v31 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v21 + 1, (unint64_t)&v32);
    v21 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v21) = *(_QWORD *)v31;
    v22 = (int *)v32;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v21) = v17;
    v22 = v17;
  }
  *(_DWORD *)(v8 + 20) = v21 + 1;
  *((_QWORD *)v22 + 4) = v8;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v17[4]);
  v24 = *((_QWORD *)this + 11);
  v25 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v26 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v26 = 0;
  v27 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v27 + 8) = -1;
  *(_WORD *)(v27 + 12) = 9;
  *(_DWORD *)(v27 + 16) = 0;
  *(_BYTE *)(v27 + 20) = 1;
  *(_QWORD *)(v27 + 24) = v26;
  *(_QWORD *)(v27 + 32) = 0;
  *(_QWORD *)v27 = off_1E357F0F8;
  *(_QWORD *)(v27 + 40) = PushVariable;
  *(_QWORD *)(v27 + 48) = v17;
  JSC::B3::Procedure::addValueImpl(v25, (JSC::B3::Value *)v27);
  v32 = v27;
  result = (char *)(v24 + 8);
  v29 = *(unsigned int *)(v24 + 20);
  if ((_DWORD)v29 == *(_DWORD *)(v24 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v29 + 1, (unint64_t)&v32);
    v29 = *(unsigned int *)(v24 + 20);
    *(_QWORD *)(*(_QWORD *)(v24 + 8) + 8 * v29) = *(_QWORD *)result;
    v27 = v32;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v29) = v27;
  }
  *(_DWORD *)(v24 + 20) = v29 + 1;
  *(_QWORD *)(v27 + 32) = v24;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32ReinterpretF32@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int *v22;
  WTF *PushVariable;
  uint64_t v24;
  JSC::B3::Value *v25;
  unint64_t v26;
  uint64_t v27;
  char *result;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v32 = v11;
  v13 = (_QWORD *)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v30 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v14 + 1, (unint64_t)&v32);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v30;
    v15 = v32;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v14) = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = WTF::fastMalloc((WTF *)0x30);
  v17 = (int *)v16;
  *(_QWORD *)v16 = off_1E357F5F0;
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 37;
  v18 = *(_DWORD *)(v11 + 16);
  if (v18 >= 0x80000000)
    v18 = 0x80000000;
  v19 = v18 - 1;
  if (v19 > 3)
    v20 = 0;
  else
    v20 = dword_19914FDF0[v19];
  *(_DWORD *)(v16 + 16) = v20;
  *(_BYTE *)(v16 + 20) = 1;
  *(_QWORD *)(v16 + 24) = v10;
  *(_QWORD *)(v16 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v16, 1, v11);
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v17);
  v32 = (uint64_t)v17;
  v21 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v21 == *(_DWORD *)(v8 + 16))
  {
    v31 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v21 + 1, (unint64_t)&v32);
    v21 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v21) = *(_QWORD *)v31;
    v22 = (int *)v32;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v21) = v17;
    v22 = v17;
  }
  *(_DWORD *)(v8 + 20) = v21 + 1;
  *((_QWORD *)v22 + 4) = v8;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v17[4]);
  v24 = *((_QWORD *)this + 11);
  v25 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v26 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v26 = 0;
  v27 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v27 + 8) = -1;
  *(_WORD *)(v27 + 12) = 9;
  *(_DWORD *)(v27 + 16) = 0;
  *(_BYTE *)(v27 + 20) = 1;
  *(_QWORD *)(v27 + 24) = v26;
  *(_QWORD *)(v27 + 32) = 0;
  *(_QWORD *)v27 = off_1E357F0F8;
  *(_QWORD *)(v27 + 40) = PushVariable;
  *(_QWORD *)(v27 + 48) = v17;
  JSC::B3::Procedure::addValueImpl(v25, (JSC::B3::Value *)v27);
  v32 = v27;
  result = (char *)(v24 + 8);
  v29 = *(unsigned int *)(v24 + 20);
  if ((_DWORD)v29 == *(_DWORD *)(v24 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v29 + 1, (unint64_t)&v32);
    v29 = *(unsigned int *)(v24 + 20);
    *(_QWORD *)(*(_QWORD *)(v24 + 8) + 8 * v29) = *(_QWORD *)result;
    v27 = v32;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v29) = v27;
  }
  *(_DWORD *)(v24 + 20) = v29 + 1;
  *(_QWORD *)(v27 + 32) = v24;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64ReinterpretF64@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int *v22;
  WTF *PushVariable;
  uint64_t v24;
  JSC::B3::Value *v25;
  unint64_t v26;
  uint64_t v27;
  char *result;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v32 = v11;
  v13 = (_QWORD *)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v30 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v14 + 1, (unint64_t)&v32);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v30;
    v15 = v32;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v14) = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = WTF::fastMalloc((WTF *)0x30);
  v17 = (int *)v16;
  *(_QWORD *)v16 = off_1E357F5F0;
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 37;
  v18 = *(_DWORD *)(v11 + 16);
  if (v18 >= 0x80000000)
    v18 = 0x80000000;
  v19 = v18 - 1;
  if (v19 > 3)
    v20 = 0;
  else
    v20 = dword_19914FDF0[v19];
  *(_DWORD *)(v16 + 16) = v20;
  *(_BYTE *)(v16 + 20) = 1;
  *(_QWORD *)(v16 + 24) = v10;
  *(_QWORD *)(v16 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v16, 1, v11);
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v17);
  v32 = (uint64_t)v17;
  v21 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v21 == *(_DWORD *)(v8 + 16))
  {
    v31 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v21 + 1, (unint64_t)&v32);
    v21 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v21) = *(_QWORD *)v31;
    v22 = (int *)v32;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v21) = v17;
    v22 = v17;
  }
  *(_DWORD *)(v8 + 20) = v21 + 1;
  *((_QWORD *)v22 + 4) = v8;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, v17[4]);
  v24 = *((_QWORD *)this + 11);
  v25 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v26 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v26 = 0;
  v27 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v27 + 8) = -1;
  *(_WORD *)(v27 + 12) = 9;
  *(_DWORD *)(v27 + 16) = 0;
  *(_BYTE *)(v27 + 20) = 1;
  *(_QWORD *)(v27 + 24) = v26;
  *(_QWORD *)(v27 + 32) = 0;
  *(_QWORD *)v27 = off_1E357F0F8;
  *(_QWORD *)(v27 + 40) = PushVariable;
  *(_QWORD *)(v27 + 48) = v17;
  JSC::B3::Procedure::addValueImpl(v25, (JSC::B3::Value *)v27);
  v32 = v27;
  result = (char *)(v24 + 8);
  v29 = *(unsigned int *)(v24 + 20);
  if ((_DWORD)v29 == *(_DWORD *)(v24 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v29 + 1, (unint64_t)&v32);
    v29 = *(unsigned int *)(v24 + 20);
    *(_QWORD *)(*(_QWORD *)(v24 + 8) + 8 * v29) = *(_QWORD *)result;
    v27 = v32;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v29) = v27;
  }
  *(_DWORD *)(v24 + 20) = v29 + 1;
  *(_QWORD *)(v27 + 32) = v24;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32Extend8S@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *PushVariable;
  uint64_t v20;
  JSC::B3::Value *v21;
  unint64_t v22;
  uint64_t v23;
  char *result;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v28 = v11;
  v13 = (_QWORD *)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v14 + 1, (unint64_t)&v28);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v26;
    v15 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v14) = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v16 = off_1E357F5F0;
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 38;
  *(_DWORD *)(v16 + 16) = 1;
  *(_BYTE *)(v16 + 20) = 1;
  *(_QWORD *)(v16 + 24) = v10;
  *(_QWORD *)(v16 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v16, 1, v11);
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v16);
  v28 = v16;
  v17 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v17 == *(_DWORD *)(v8 + 16))
  {
    v27 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v17 + 1, (unint64_t)&v28);
    v17 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v17) = *(_QWORD *)v27;
    v18 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v17) = v16;
    v18 = v16;
  }
  *(_DWORD *)(v8 + 20) = v17 + 1;
  *(_QWORD *)(v18 + 32) = v8;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v16 + 16));
  v20 = *((_QWORD *)this + 11);
  v21 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v22 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v22 = 0;
  v23 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v23 + 8) = -1;
  *(_WORD *)(v23 + 12) = 9;
  *(_DWORD *)(v23 + 16) = 0;
  *(_BYTE *)(v23 + 20) = 1;
  *(_QWORD *)(v23 + 24) = v22;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)v23 = off_1E357F0F8;
  *(_QWORD *)(v23 + 40) = PushVariable;
  *(_QWORD *)(v23 + 48) = v16;
  JSC::B3::Procedure::addValueImpl(v21, (JSC::B3::Value *)v23);
  v28 = v23;
  result = (char *)(v20 + 8);
  v25 = *(unsigned int *)(v20 + 20);
  if ((_DWORD)v25 == *(_DWORD *)(v20 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v25 + 1, (unint64_t)&v28);
    v25 = *(unsigned int *)(v20 + 20);
    *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v25) = *(_QWORD *)result;
    v23 = v28;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v25) = v23;
  }
  *(_DWORD *)(v20 + 20) = v25 + 1;
  *(_QWORD *)(v23 + 32) = v20;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI32Extend16S@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  JSC::B3::Value *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *PushVariable;
  uint64_t v20;
  JSC::B3::Value *v21;
  unint64_t v22;
  uint64_t v23;
  char *result;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v8 = *((_QWORD *)this + 11);
  v9 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v10 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v10 = 0;
  v11 = WTF::fastMalloc((WTF *)0x30);
  v12 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 10;
  *(_DWORD *)(v11 + 16) = v12;
  *(_BYTE *)(v11 + 20) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v11);
  v28 = v11;
  v13 = (_QWORD *)(v8 + 8);
  v14 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v8 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v14 + 1, (unint64_t)&v28);
    v14 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v14) = *(_QWORD *)v26;
    v15 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v14) = v11;
    v15 = v11;
  }
  *(_DWORD *)(v8 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v8;
  v16 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v16 = off_1E357F5F0;
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 39;
  *(_DWORD *)(v16 + 16) = 1;
  *(_BYTE *)(v16 + 20) = 1;
  *(_QWORD *)(v16 + 24) = v10;
  *(_QWORD *)(v16 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v16, 1, v11);
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v16);
  v28 = v16;
  v17 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v17 == *(_DWORD *)(v8 + 16))
  {
    v27 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v8 + 8), v17 + 1, (unint64_t)&v28);
    v17 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v17) = *(_QWORD *)v27;
    v18 = v28;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v17) = v16;
    v18 = v16;
  }
  *(_DWORD *)(v8 + 20) = v17 + 1;
  *(_QWORD *)(v18 + 32) = v8;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v16 + 16));
  v20 = *((_QWORD *)this + 11);
  v21 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v22 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v22 = 0;
  v23 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v23 + 8) = -1;
  *(_WORD *)(v23 + 12) = 9;
  *(_DWORD *)(v23 + 16) = 0;
  *(_BYTE *)(v23 + 20) = 1;
  *(_QWORD *)(v23 + 24) = v22;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)v23 = off_1E357F0F8;
  *(_QWORD *)(v23 + 40) = PushVariable;
  *(_QWORD *)(v23 + 48) = v16;
  JSC::B3::Procedure::addValueImpl(v21, (JSC::B3::Value *)v23);
  v28 = v23;
  result = (char *)(v20 + 8);
  v25 = *(unsigned int *)(v20 + 20);
  if ((_DWORD)v25 == *(_DWORD *)(v20 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v25 + 1, (unint64_t)&v28);
    v25 = *(unsigned int *)(v20 + 20);
    *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v25) = *(_QWORD *)result;
    v23 = v28;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v25) = v23;
  }
  *(_DWORD *)(v20 + 20) = v25 + 1;
  *(_QWORD *)(v23 + 32) = v20;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64Extend8S@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  JSC::B3::Value *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  int v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  uint64_t v20;
  JSC::B3::Value *v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::B3::Value *v28;
  unint64_t v29;
  uint64_t v30;
  char **v31;
  uint64_t v32;
  uint64_t v33;
  WTF *PushVariable;
  uint64_t v35;
  JSC::B3::Value *v36;
  unint64_t v37;
  uint64_t v38;
  char *result;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v46;

  v7 = *((_QWORD *)this + 11);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v9 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v9 = 0;
  v10 = WTF::fastMalloc((WTF *)0x30);
  v11 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v10 + 8) = -1;
  *(_WORD *)(v10 + 12) = 10;
  *(_DWORD *)(v10 + 16) = v11;
  *(_BYTE *)(v10 + 20) = 0;
  *(_QWORD *)(v10 + 24) = v9;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)v10 = off_1E357F0F8;
  *(_QWORD *)(v10 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v8, (JSC::B3::Value *)v10);
  v46 = v10;
  v12 = (_QWORD *)(v7 + 8);
  v13 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v13 == *(_DWORD *)(v7 + 16))
  {
    v41 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v7 + 8), v13 + 1, (unint64_t)&v46);
    v13 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v13) = *(_QWORD *)v41;
    v14 = v46;
  }
  else
  {
    *(_QWORD *)(*v12 + 8 * v13) = v10;
    v14 = v10;
  }
  *(_DWORD *)(v7 + 20) = v13 + 1;
  *(_QWORD *)(v14 + 32) = v7;
  v15 = WTF::fastMalloc((WTF *)0x30);
  v16 = (JSC::B3::Value *)v15;
  *(_QWORD *)v15 = off_1E357F5F0;
  *(_DWORD *)(v15 + 8) = -1;
  *(_WORD *)(v15 + 12) = 44;
  if (*(_DWORD *)(v10 + 16) == 2)
    v17 = 1;
  else
    v17 = 3;
  *(_DWORD *)(v15 + 16) = v17;
  *(_BYTE *)(v15 + 20) = 1;
  *(_QWORD *)(v15 + 24) = v9;
  *(_QWORD *)(v15 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v15, 1, v10);
  JSC::B3::Procedure::addValueImpl(v8, v16);
  v46 = (uint64_t)v16;
  v18 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v18 == *(_DWORD *)(v7 + 16))
  {
    v42 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v7 + 8), v18 + 1, (unint64_t)&v46);
    v18 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v18) = *(_QWORD *)v42;
    v19 = (JSC::B3::Value *)v46;
  }
  else
  {
    *(_QWORD *)(*v12 + 8 * v18) = v16;
    v19 = v16;
  }
  *(_DWORD *)(v7 + 20) = v18 + 1;
  *((_QWORD *)v19 + 4) = v7;
  v20 = *((_QWORD *)this + 11);
  v21 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v22 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v22 = 0;
  v23 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v23 = off_1E357F5F0;
  *(_DWORD *)(v23 + 8) = -1;
  *(_WORD *)(v23 + 12) = 38;
  *(_DWORD *)(v23 + 16) = 1;
  *(_BYTE *)(v23 + 20) = 1;
  *(_QWORD *)(v23 + 24) = v22;
  *(_QWORD *)(v23 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v23, 1, (uint64_t)v16);
  JSC::B3::Procedure::addValueImpl(v21, (JSC::B3::Value *)v23);
  v46 = v23;
  v24 = (char **)(v20 + 8);
  v25 = *(unsigned int *)(v20 + 20);
  if ((_DWORD)v25 == *(_DWORD *)(v20 + 16))
  {
    v43 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24, v25 + 1, (unint64_t)&v46);
    v25 = *(unsigned int *)(v20 + 20);
    *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v25) = *(_QWORD *)v43;
    v26 = v46;
  }
  else
  {
    *(_QWORD *)&(*v24)[8 * v25] = v23;
    v26 = v23;
  }
  *(_DWORD *)(v20 + 20) = v25 + 1;
  *(_QWORD *)(v26 + 32) = v20;
  v27 = *((_QWORD *)this + 11);
  v28 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v29 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v29 = 0;
  v30 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v30 = off_1E357F5F0;
  *(_DWORD *)(v30 + 8) = -1;
  *(_WORD *)(v30 + 12) = 42;
  *(_DWORD *)(v30 + 16) = 2;
  *(_BYTE *)(v30 + 20) = 1;
  *(_QWORD *)(v30 + 24) = v29;
  *(_QWORD *)(v30 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v30, 1, v23);
  JSC::B3::Procedure::addValueImpl(v28, (JSC::B3::Value *)v30);
  v46 = v30;
  v31 = (char **)(v27 + 8);
  v32 = *(unsigned int *)(v27 + 20);
  if ((_DWORD)v32 == *(_DWORD *)(v27 + 16))
  {
    v44 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31, v32 + 1, (unint64_t)&v46);
    v32 = *(unsigned int *)(v27 + 20);
    *(_QWORD *)(*(_QWORD *)(v27 + 8) + 8 * v32) = *(_QWORD *)v44;
    v33 = v46;
  }
  else
  {
    *(_QWORD *)&(*v31)[8 * v32] = v30;
    v33 = v30;
  }
  *(_DWORD *)(v27 + 20) = v32 + 1;
  *(_QWORD *)(v33 + 32) = v27;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v30 + 16));
  v35 = *((_QWORD *)this + 11);
  v36 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v37 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v37 = 0;
  v38 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v38 + 8) = -1;
  *(_WORD *)(v38 + 12) = 9;
  *(_DWORD *)(v38 + 16) = 0;
  *(_BYTE *)(v38 + 20) = 1;
  *(_QWORD *)(v38 + 24) = v37;
  *(_QWORD *)(v38 + 32) = 0;
  *(_QWORD *)v38 = off_1E357F0F8;
  *(_QWORD *)(v38 + 40) = PushVariable;
  *(_QWORD *)(v38 + 48) = v30;
  JSC::B3::Procedure::addValueImpl(v36, (JSC::B3::Value *)v38);
  v46 = v38;
  result = (char *)(v35 + 8);
  v40 = *(unsigned int *)(v35 + 20);
  if ((_DWORD)v40 == *(_DWORD *)(v35 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v40 + 1, (unint64_t)&v46);
    v40 = *(unsigned int *)(v35 + 20);
    *(_QWORD *)(*(_QWORD *)(v35 + 8) + 8 * v40) = *(_QWORD *)result;
    v38 = v46;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v40) = v38;
  }
  *(_DWORD *)(v35 + 20) = v40 + 1;
  *(_QWORD *)(v38 + 32) = v35;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64Extend16S@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  JSC::B3::Value *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  int v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  uint64_t v20;
  JSC::B3::Value *v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::B3::Value *v28;
  unint64_t v29;
  uint64_t v30;
  char **v31;
  uint64_t v32;
  uint64_t v33;
  WTF *PushVariable;
  uint64_t v35;
  JSC::B3::Value *v36;
  unint64_t v37;
  uint64_t v38;
  char *result;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v46;

  v7 = *((_QWORD *)this + 11);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v9 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v9 = 0;
  v10 = WTF::fastMalloc((WTF *)0x30);
  v11 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v10 + 8) = -1;
  *(_WORD *)(v10 + 12) = 10;
  *(_DWORD *)(v10 + 16) = v11;
  *(_BYTE *)(v10 + 20) = 0;
  *(_QWORD *)(v10 + 24) = v9;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)v10 = off_1E357F0F8;
  *(_QWORD *)(v10 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v8, (JSC::B3::Value *)v10);
  v46 = v10;
  v12 = (_QWORD *)(v7 + 8);
  v13 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v13 == *(_DWORD *)(v7 + 16))
  {
    v41 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v7 + 8), v13 + 1, (unint64_t)&v46);
    v13 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v13) = *(_QWORD *)v41;
    v14 = v46;
  }
  else
  {
    *(_QWORD *)(*v12 + 8 * v13) = v10;
    v14 = v10;
  }
  *(_DWORD *)(v7 + 20) = v13 + 1;
  *(_QWORD *)(v14 + 32) = v7;
  v15 = WTF::fastMalloc((WTF *)0x30);
  v16 = (JSC::B3::Value *)v15;
  *(_QWORD *)v15 = off_1E357F5F0;
  *(_DWORD *)(v15 + 8) = -1;
  *(_WORD *)(v15 + 12) = 44;
  if (*(_DWORD *)(v10 + 16) == 2)
    v17 = 1;
  else
    v17 = 3;
  *(_DWORD *)(v15 + 16) = v17;
  *(_BYTE *)(v15 + 20) = 1;
  *(_QWORD *)(v15 + 24) = v9;
  *(_QWORD *)(v15 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v15, 1, v10);
  JSC::B3::Procedure::addValueImpl(v8, v16);
  v46 = (uint64_t)v16;
  v18 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v18 == *(_DWORD *)(v7 + 16))
  {
    v42 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v7 + 8), v18 + 1, (unint64_t)&v46);
    v18 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v18) = *(_QWORD *)v42;
    v19 = (JSC::B3::Value *)v46;
  }
  else
  {
    *(_QWORD *)(*v12 + 8 * v18) = v16;
    v19 = v16;
  }
  *(_DWORD *)(v7 + 20) = v18 + 1;
  *((_QWORD *)v19 + 4) = v7;
  v20 = *((_QWORD *)this + 11);
  v21 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v22 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v22 = 0;
  v23 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v23 = off_1E357F5F0;
  *(_DWORD *)(v23 + 8) = -1;
  *(_WORD *)(v23 + 12) = 39;
  *(_DWORD *)(v23 + 16) = 1;
  *(_BYTE *)(v23 + 20) = 1;
  *(_QWORD *)(v23 + 24) = v22;
  *(_QWORD *)(v23 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v23, 1, (uint64_t)v16);
  JSC::B3::Procedure::addValueImpl(v21, (JSC::B3::Value *)v23);
  v46 = v23;
  v24 = (char **)(v20 + 8);
  v25 = *(unsigned int *)(v20 + 20);
  if ((_DWORD)v25 == *(_DWORD *)(v20 + 16))
  {
    v43 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24, v25 + 1, (unint64_t)&v46);
    v25 = *(unsigned int *)(v20 + 20);
    *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v25) = *(_QWORD *)v43;
    v26 = v46;
  }
  else
  {
    *(_QWORD *)&(*v24)[8 * v25] = v23;
    v26 = v23;
  }
  *(_DWORD *)(v20 + 20) = v25 + 1;
  *(_QWORD *)(v26 + 32) = v20;
  v27 = *((_QWORD *)this + 11);
  v28 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v29 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v29 = 0;
  v30 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v30 = off_1E357F5F0;
  *(_DWORD *)(v30 + 8) = -1;
  *(_WORD *)(v30 + 12) = 42;
  *(_DWORD *)(v30 + 16) = 2;
  *(_BYTE *)(v30 + 20) = 1;
  *(_QWORD *)(v30 + 24) = v29;
  *(_QWORD *)(v30 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v30, 1, v23);
  JSC::B3::Procedure::addValueImpl(v28, (JSC::B3::Value *)v30);
  v46 = v30;
  v31 = (char **)(v27 + 8);
  v32 = *(unsigned int *)(v27 + 20);
  if ((_DWORD)v32 == *(_DWORD *)(v27 + 16))
  {
    v44 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31, v32 + 1, (unint64_t)&v46);
    v32 = *(unsigned int *)(v27 + 20);
    *(_QWORD *)(*(_QWORD *)(v27 + 8) + 8 * v32) = *(_QWORD *)v44;
    v33 = v46;
  }
  else
  {
    *(_QWORD *)&(*v31)[8 * v32] = v30;
    v33 = v30;
  }
  *(_DWORD *)(v27 + 20) = v32 + 1;
  *(_QWORD *)(v33 + 32) = v27;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v30 + 16));
  v35 = *((_QWORD *)this + 11);
  v36 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v37 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v37 = 0;
  v38 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v38 + 8) = -1;
  *(_WORD *)(v38 + 12) = 9;
  *(_DWORD *)(v38 + 16) = 0;
  *(_BYTE *)(v38 + 20) = 1;
  *(_QWORD *)(v38 + 24) = v37;
  *(_QWORD *)(v38 + 32) = 0;
  *(_QWORD *)v38 = off_1E357F0F8;
  *(_QWORD *)(v38 + 40) = PushVariable;
  *(_QWORD *)(v38 + 48) = v30;
  JSC::B3::Procedure::addValueImpl(v36, (JSC::B3::Value *)v38);
  v46 = v38;
  result = (char *)(v35 + 8);
  v40 = *(unsigned int *)(v35 + 20);
  if ((_DWORD)v40 == *(_DWORD *)(v35 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v40 + 1, (unint64_t)&v46);
    v40 = *(unsigned int *)(v35 + 20);
    *(_QWORD *)(*(_QWORD *)(v35 + 8) + 8 * v40) = *(_QWORD *)result;
    v38 = v46;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v40) = v38;
  }
  *(_DWORD *)(v35 + 20) = v40 + 1;
  *(_QWORD *)(v38 + 32) = v35;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

char *JSC::Wasm::OMGIRGenerator::addI64Extend32S@<X0>(JSC::Wasm::OMGIRGenerator *this@<X0>, JSC::B3::Variable *a2@<X1>, JSC::B3::Variable **a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  JSC::B3::Value *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  int v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  uint64_t v20;
  JSC::B3::Value *v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  uint64_t v26;
  WTF *PushVariable;
  uint64_t v28;
  JSC::B3::Value *v29;
  unint64_t v30;
  uint64_t v31;
  char *result;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v38;

  v7 = *((_QWORD *)this + 11);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v9 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v9 = 0;
  v10 = WTF::fastMalloc((WTF *)0x30);
  v11 = *((_DWORD *)a2 + 1);
  *(_DWORD *)(v10 + 8) = -1;
  *(_WORD *)(v10 + 12) = 10;
  *(_DWORD *)(v10 + 16) = v11;
  *(_BYTE *)(v10 + 20) = 0;
  *(_QWORD *)(v10 + 24) = v9;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)v10 = off_1E357F0F8;
  *(_QWORD *)(v10 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v8, (JSC::B3::Value *)v10);
  v38 = v10;
  v12 = (_QWORD *)(v7 + 8);
  v13 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v13 == *(_DWORD *)(v7 + 16))
  {
    v34 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v7 + 8), v13 + 1, (unint64_t)&v38);
    v13 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v13) = *(_QWORD *)v34;
    v14 = v38;
  }
  else
  {
    *(_QWORD *)(*v12 + 8 * v13) = v10;
    v14 = v10;
  }
  *(_DWORD *)(v7 + 20) = v13 + 1;
  *(_QWORD *)(v14 + 32) = v7;
  v15 = WTF::fastMalloc((WTF *)0x30);
  v16 = (JSC::B3::Value *)v15;
  *(_QWORD *)v15 = off_1E357F5F0;
  *(_DWORD *)(v15 + 8) = -1;
  *(_WORD *)(v15 + 12) = 44;
  if (*(_DWORD *)(v10 + 16) == 2)
    v17 = 1;
  else
    v17 = 3;
  *(_DWORD *)(v15 + 16) = v17;
  *(_BYTE *)(v15 + 20) = 1;
  *(_QWORD *)(v15 + 24) = v9;
  *(_QWORD *)(v15 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v15, 1, v10);
  JSC::B3::Procedure::addValueImpl(v8, v16);
  v38 = (uint64_t)v16;
  v18 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v18 == *(_DWORD *)(v7 + 16))
  {
    v35 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v7 + 8), v18 + 1, (unint64_t)&v38);
    v18 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v18) = *(_QWORD *)v35;
    v19 = (JSC::B3::Value *)v38;
  }
  else
  {
    *(_QWORD *)(*v12 + 8 * v18) = v16;
    v19 = v16;
  }
  *(_DWORD *)(v7 + 20) = v18 + 1;
  *((_QWORD *)v19 + 4) = v7;
  v20 = *((_QWORD *)this + 11);
  v21 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v22 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v22 = 0;
  v23 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v23 = off_1E357F5F0;
  *(_DWORD *)(v23 + 8) = -1;
  *(_WORD *)(v23 + 12) = 42;
  *(_DWORD *)(v23 + 16) = 2;
  *(_BYTE *)(v23 + 20) = 1;
  *(_QWORD *)(v23 + 24) = v22;
  *(_QWORD *)(v23 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v23, 1, (uint64_t)v16);
  JSC::B3::Procedure::addValueImpl(v21, (JSC::B3::Value *)v23);
  v38 = v23;
  v24 = (char **)(v20 + 8);
  v25 = *(unsigned int *)(v20 + 20);
  if ((_DWORD)v25 == *(_DWORD *)(v20 + 16))
  {
    v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24, v25 + 1, (unint64_t)&v38);
    v25 = *(unsigned int *)(v20 + 20);
    *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v25) = *(_QWORD *)v36;
    v26 = v38;
  }
  else
  {
    *(_QWORD *)&(*v24)[8 * v25] = v23;
    v26 = v23;
  }
  *(_DWORD *)(v20 + 20) = v25 + 1;
  *(_QWORD *)(v26 + 32) = v20;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)this, *(_DWORD *)(v23 + 16));
  v28 = *((_QWORD *)this + 11);
  v29 = (JSC::B3::Value *)*((_QWORD *)this + 7);
  if (*(_QWORD *)this)
    v30 = *(_QWORD *)(*(_QWORD *)this + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + 14992) << 32);
  else
    v30 = 0;
  v31 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v31 + 8) = -1;
  *(_WORD *)(v31 + 12) = 9;
  *(_DWORD *)(v31 + 16) = 0;
  *(_BYTE *)(v31 + 20) = 1;
  *(_QWORD *)(v31 + 24) = v30;
  *(_QWORD *)(v31 + 32) = 0;
  *(_QWORD *)v31 = off_1E357F0F8;
  *(_QWORD *)(v31 + 40) = PushVariable;
  *(_QWORD *)(v31 + 48) = v23;
  JSC::B3::Procedure::addValueImpl(v29, (JSC::B3::Value *)v31);
  v38 = v31;
  result = (char *)(v28 + 8);
  v33 = *(unsigned int *)(v28 + 20);
  if ((_DWORD)v33 == *(_DWORD *)(v28 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v33 + 1, (unint64_t)&v38);
    v33 = *(unsigned int *)(v28 + 20);
    *(_QWORD *)(*(_QWORD *)(v28 + 8) + 8 * v33) = *(_QWORD *)result;
    v31 = v38;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v33) = v31;
  }
  *(_DWORD *)(v28 + 20) = v33 + 1;
  *(_QWORD *)(v31 + 32) = v28;
  *a3 = PushVariable;
  *a4 = 0;
  a4[8] = 0;
  return result;
}

uint64_t JSC::Wasm::OMGPlan::OMGPlan(uint64_t result, uint64_t a2, uint64_t *a3, int a4, __int16 a5, unsigned int a6, uint64_t *a7)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;

  v7 = *(unsigned int **)(*a3 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *(_DWORD *)(result + 8) = 1;
  *(_WORD *)(result + 12) = 0;
  *(_BYTE *)(result + 14) = 0;
  *(_QWORD *)(result + 16) = v7;
  *(_QWORD *)(result + 24) = result + 40;
  *(_QWORD *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = 0;
  v9 = *a7;
  *a7 = 0;
  v10 = *(_QWORD **)(result + 24);
  *v10 = a2;
  v10[1] = v9;
  *(_QWORD *)(result + 32) = 0x100000001;
  *(_QWORD *)result = off_1E35B5C78;
  v11 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 72) = v11;
  v12 = *(unsigned int **)(v11 + 8 * a6 + 16);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *(_QWORD *)(result + 80) = v12;
  *(_BYTE *)(result + 88) = 0;
  *(_WORD *)(result + 89) = a5;
  *(_DWORD *)(result + 92) = a4;
  *(_BYTE *)(result + 12) = a6;
  return result;
}

uint64_t *JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(JSC::Wasm::OMGPlan *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::initializeAllowlistFlag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::initializeAllowlistFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::$_0 &&>>);
  }
  return &JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::omgAllowlist;
}

WTF *JSC::Wasm::OMGPlan::dumpDisassembly(JSC::Wasm::OMGPlan *this, JSC::Wasm::CompilationContext *a2, JSC::LinkBuffer *a3, int a4, const JSC::Wasm::TypeDefinition *a5, unsigned int a6)
{
  WTF *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  int8x16_t *v18;
  uint64_t v19;
  unsigned int v20;
  const char *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF::StringImpl *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  int8x16_t *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t *v40;
  WTF::PrintStream *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t);
  uint64_t (**v59)(uint64_t, uint64_t);
  JSC::Wasm::NameSection **v60;
  JSC::Wasm::CompilationContext *v61;
  const char **v62;
  const char *v63;
  unsigned int *v64;
  WTF::StringImpl *v65;
  WTF *v66;
  const char *v67;
  WTF::StringImpl *v68;
  int8x16_t *v69;
  int8x16_t *v70;
  int v71;
  JSC::Wasm::NameSection *v72;

  v71 = a4;
  if (*(_BYTE *)(*((_QWORD *)a2 + 3) + 211) || JSC::shouldDumpDisassemblyFor(4))
  {
    JSC::Wasm::TypeDefinition::toString(a5, (uint64_t *)&v68);
    WTF::String::ascii((WTF::String *)&v68, &v69);
    v17 = 0;
    if (v69)
      v18 = v69 + 1;
    else
      v18 = 0;
    v70 = v18;
    v19 = *(_QWORD *)(*((_QWORD *)this + 2) + 248);
    if (*(_DWORD *)(v19 + 52) > a6)
      v17 = (const char *)(*(_QWORD *)(v19 + 40) + 16 * a6);
    do
      v20 = __ldaxr((unsigned int *)v19);
    while (__stlxr(v20 + 1, (unsigned int *)v19));
    v63 = v17;
    v64 = (unsigned int *)v19;
    JSC::Wasm::IndexOrName::IndexOrName((unint64_t *)&v58, a6, (unint64_t *)&v63, v12, v13, v14, v15, v16);
    JSC::Wasm::makeString((uint64_t *)&v58, (uint64_t *)&v65);
    WTF::String::ascii((WTF::String *)&v65, (int8x16_t **)&v66);
    if (v66)
      v21 = (char *)v66 + 16;
    else
      v21 = 0;
    v67 = v21;
    WTF::dataLog<char [49],unsigned int,char [3],char const*,char [7],char const*,char [2]>(&v71, (const char **)&v70, &v67);
    v29 = v66;
    v66 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 1)
        WTF::fastFree((unint64_t)v29, v22, v23, v24, v25, v26, v27, v28);
      else
        --*(_DWORD *)v29;
    }
    v30 = v65;
    v65 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
      {
        WTF::StringImpl::~StringImpl(v30, (WTF::AtomStringImpl *)v22, v23, v24, v25, v26, v27, v28);
        WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
      }
      else
      {
        *(_DWORD *)v30 -= 2;
      }
    }
    v31 = (unsigned int *)v59;
    v59 = 0;
    if (v31)
    {
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v31);
        v72 = (JSC::Wasm::NameSection *)v31;
        WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v72, v22, v23, v24, v25, v26, v27, v28);
      }
    }
    v34 = v64;
    v64 = 0;
    if (v34)
    {
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        atomic_store(1u, v34);
        v72 = (JSC::Wasm::NameSection *)v34;
        WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v72, v22, v23, v24, v25, v26, v27, v28);
      }
    }
    v37 = v69;
    v69 = 0;
    if (v37)
    {
      if (v37->i32[0] == 1)
        WTF::fastFree((unint64_t)v37, v22, v23, v24, v25, v26, v27, v28);
      else
        --v37->i32[0];
    }
    v38 = v68;
    v68 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
      {
        WTF::StringImpl::~StringImpl(v38, (WTF::AtomStringImpl *)v22, v23, v24, v25, v26, v27, v28);
        WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
      }
      else
      {
        *(_DWORD *)v38 -= 2;
      }
    }
  }
  result = (WTF *)JSC::shouldDumpDisassemblyFor(4);
  if ((_DWORD)result)
  {
    v39 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 160);
    v40 = *(uint64_t **)(v39 + 312);
    v72 = 0;
    v58 = WTF::ScopedLambdaFunctor<void ()(JSC::B3::Air::Inst &),JSC::Wasm::OMGPlan::dumpDisassembly(JSC::Wasm::CompilationContext &,JSC::LinkBuffer &,unsigned int,JSC::Wasm::TypeDefinition const&,unsigned int)::$_0>::implFunction;
    v59 = &v58;
    v60 = &v72;
    v61 = a2;
    v62 = &v63;
    v63 = "b3    ";
    v41 = (WTF::PrintStream *)WTF::dataFile(result);
    result = (WTF *)JSC::B3::Air::Disassembler::dump(v40, v39, v41, a3, "Air        ", "asm              ", (uint64_t)&v58);
    *((_BYTE *)a3 + 170) = 1;
  }
  return result;
}

void JSC::Wasm::OMGPlan::work(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  const JSC::Wasm::TypeDefinition *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  JSC::LinkBuffer *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _BOOL4 v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  JSC::Compilation *v41;
  JSC::Compilation *v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  WTF::StringImpl *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  WTF *v73;
  WTF::StringImpl *v74;
  WTF *v75;
  WTF *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unsigned __int8 *v85;
  uint64_t v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int **v100;
  unsigned int *v101;
  uint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  JSC::ExecutableAllocator *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD *v119;
  uint64_t v120;
  unsigned int *v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  unint64_t v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int *v135;
  unsigned int v136;
  unsigned __int8 *v137;
  unsigned int v138;
  unsigned int v139;
  unint64_t v140;
  int v141;
  unsigned __int8 *v142;
  int v143;
  unsigned __int8 *v144;
  WTF::AtomStringImpl *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  WTF *v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  WTF::AtomStringImpl *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  WTF *v176;
  unsigned int *v177;
  unsigned int v178;
  unsigned int v179;
  unint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _DWORD *v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int *v207;
  unsigned int v208;
  unsigned __int8 *v209;
  unsigned int v210;
  unsigned int v211;
  unint64_t v212;
  int v213;
  unsigned __int8 *v214;
  WTF::StringImpl *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  WTF::StringImpl *v222;
  WTF::StringImpl *v223;
  int v224;
  unsigned __int8 *v225;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  WTF *v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int v242;
  unint64_t v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int *v269;
  uint64_t v270;
  unsigned int *v271;
  WTF::StringImpl *v272;
  WTF *v273;
  WTF::StringImpl *v274;
  WTF *v275;
  unsigned __int8 *v276;
  char v277;
  WTF *v278;
  uint64_t v279;
  JSC::Compilation *v280;
  WTF *v281;
  uint64_t v282;
  WTF::StringImpl *v283;
  WTF::StringImpl *v284;
  int v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  uint64_t v290;
  WTF *v291;
  uint64_t v292;
  _QWORD *v293;
  unsigned __int8 ***v294;
  unsigned __int8 **v295;
  WTF::StringImpl *v296;
  unsigned int *v297;
  char v298;
  uint64_t v299;

  v299 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(unsigned int *)(a1 + 92);
  if (*(_DWORD *)(v1 + 132) <= v2)
    goto LABEL_212;
  if (*(_DWORD *)(v1 + 52) <= v2)
  {
    __break(0xC471u);
LABEL_214:
    JUMPOUT(0x198DB4454);
  }
  v4 = *(_QWORD *)(v1 + 120) + 40 * v2;
  v5 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 36) + v2);
  v6 = (const JSC::Wasm::TypeDefinition *)JSC::Wasm::TypeDefinition::expand(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * v2));
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 248);
  if (*(_DWORD *)(v7 + 52) > v5)
    v8 = (WTF::StringImpl *)(*(_QWORD *)(v7 + 40) + 16 * v5);
  else
    v8 = 0;
  do
    v9 = __ldaxr((unsigned int *)v7);
  while (__stlxr(v9 + 1, (unsigned int *)v7));
  v296 = v8;
  v297 = (unsigned int *)v7;
  JSC::Wasm::OMGCallee::create((uint64_t *)&v293, v5, (unint64_t *)&v296);
  v17 = v297;
  v297 = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      *(_QWORD *)&v286 = v17;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::NameSection **)&v286, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  v291 = 0;
  v292 = 0;
  v290 = 0;
  v288 = 0u;
  v289 = 0u;
  v286 = 0u;
  v287 = 0u;
  v20 = v293;
  JSC::Wasm::parseAndCompileOMG((uint64_t)&v284, (uint64_t)&v286, (uint64_t)v293, v4, (uint64_t)v6, (uint64_t)&v291, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 12), 4u, *(_DWORD *)(a1 + 92), *(_WORD *)(a1 + 89), 0, -1);
  if (v285)
  {
    v214 = (unsigned __int8 *)(a1 + 13);
    if (__ldaxr((unsigned __int8 *)(a1 + 13)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v214))
    {
      goto LABEL_168;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 13);
LABEL_168:
    if (v285 == 1)
    {
      v216 = v284;
      if (v284)
        *(_DWORD *)v284 += 2;
      v283 = v216;
      WTF::makeString<WTF::String,WTF::ASCIILiteral,unsigned int>((uint64_t *)&v283, "when trying to tier up ", 24, *(_DWORD *)(a1 + 92), (int **)&v296);
      JSC::Wasm::Plan::fail(a1, (WTF::AtomStringImpl *)&v296, 2, v217, v218, v219, v220, v221);
      v222 = v296;
      v296 = 0;
      if (v222)
      {
        if (*(_DWORD *)v222 == 2)
        {
          WTF::StringImpl::~StringImpl(v222, v162, v163, v164, v165, v166, v167, v168);
          WTF::fastFree(v243, v244, v245, v246, v247, v248, v249, v250);
        }
        else
        {
          *(_DWORD *)v222 -= 2;
        }
      }
      v223 = v283;
      v283 = 0;
      if (v223)
      {
        if (*(_DWORD *)v223 == 2)
        {
          WTF::StringImpl::~StringImpl(v223, v162, v163, v164, v165, v166, v167, v168);
          WTF::fastFree(v251, v252, v253, v254, v255, v256, v257, v258);
        }
        else
        {
          *(_DWORD *)v223 -= 2;
        }
      }
      v224 = __ldxr(v214);
      if (v224 == 1)
      {
        if (!__stlxr(0, v214))
          goto LABEL_119;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 13), 0, v163, v164, v165, v166, v167, v168);
      goto LABEL_119;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_212:
    __break(0xC471u);
    JUMPOUT(0x198DB458CLL);
  }
  v280 = 0;
  v281 = 0;
  v282 = 0;
  JSC::LinkBuffer::LinkBuffer((uint64_t)&v296, *((uint64_t *)&v286 + 1), (uint64_t)v20, 14, 0);
  if (!v298)
  {
    v225 = (unsigned __int8 *)(a1 + 13);
    if (__ldaxr((unsigned __int8 *)(a1 + 13)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v225))
    {
LABEL_183:
      WTF::makeString<WTF::ASCIILiteral,unsigned int>((uint64_t)"Out of executable memory while tiering up function at index ", 61, *(_DWORD *)(a1 + 92), (int **)&v278);
      JSC::Wasm::Plan::fail(a1, (WTF::AtomStringImpl *)&v278, 1, v227, v228, v229, v230, v231);
      v232 = v278;
      v278 = 0;
      if (v232)
      {
        if (*(_DWORD *)v232 == 2)
        {
          WTF::StringImpl::~StringImpl(v232, v146, v147, v148, v149, v150, v151, v152);
          WTF::fastFree(v259, v260, v261, v262, v263, v264, v265, v266);
        }
        else
        {
          *(_DWORD *)v232 -= 2;
        }
      }
      v233 = __ldxr(v225);
      if (v233 == 1)
      {
        if (!__stlxr(0, v225))
          goto LABEL_118;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 13), 0, v147, v148, v149, v150, v151, v152);
      goto LABEL_118;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 13);
    goto LABEL_183;
  }
  v25 = (uint64_t *)v284;
  v278 = 0;
  v279 = 0;
  JSC::Wasm::computeExceptionHandlerLocations((uint64_t)&v278, (uint64_t)v284, (uint64_t)&v286, &v296, v21, v22, v23, v24);
  JSC::Wasm::computePCToCodeOriginMap((JSC::Wasm *)&v286, (JSC::Wasm::CompilationContext *)&v296, v26, v27, v28, v29, v30, v31);
  JSC::Wasm::OMGPlan::dumpDisassembly((JSC::Wasm::OMGPlan *)a1, (JSC::Wasm::CompilationContext *)&v286, (JSC::LinkBuffer *)&v296, *(_DWORD *)(a1 + 92), v6, v5);
  v32 = *(unsigned __int8 *)(*((_QWORD *)&v287 + 1) + 211);
  v33 = (v32 | byte_1ECF4C289) != 0;
  if (v32 | byte_1ECF4C289)
  {
    v234 = *(unsigned int *)(a1 + 92);
    JSC::Wasm::TypeDefinition::toString(v6, (uint64_t *)&v274);
    WTF::String::ascii((WTF::String *)&v274, (int8x16_t **)&v275);
    v240 = 0;
    v241 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 248);
    if (*(_DWORD *)(v241 + 52) > v5)
      v240 = *(_QWORD *)(v241 + 40) + 16 * v5;
    do
      v242 = __ldaxr((unsigned int *)v241);
    while (__stlxr(v242 + 1, (unsigned int *)v241));
    v268 = v240;
    v269 = (unsigned int *)v241;
    JSC::Wasm::IndexOrName::IndexOrName((unint64_t *)&v270, v5, (unint64_t *)&v268, v235, v236, v237, v238, v239);
    JSC::Wasm::makeString(&v270, (uint64_t *)&v272);
    WTF::String::ascii((WTF::String *)&v272, (int8x16_t **)&v273);
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)2367,unsigned int,char const*,char const*>((uint64_t)&v296, v32 != 0, 0, 0, "WebAssembly OMG function[%i] %s name %s", v234, &v276);
  }
  else
  {
    JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v296, 0, 0, &v276);
  }
  std::make_unique[abi:sn180100]<JSC::Compilation,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)2367>,std::unique_ptr<JSC::OpaqueByproducts>>(&v294, (uint64_t *)&v276, (uint64_t *)&v287);
  v41 = (JSC::Compilation *)v294;
  v294 = 0;
  v42 = v280;
  v280 = v41;
  if (v42)
  {
    JSC::Compilation::~Compilation(v42, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
  }
  std::unique_ptr<JSC::Compilation>::~unique_ptr[abi:sn180100]((JSC::Compilation **)&v294, v34, v35, v36, v37, v38, v39, v40);
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v276, v51, v52, v53, v54, v55, v56, v57);
  if (v33)
  {
    v65 = v273;
    v273 = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 1)
        WTF::fastFree((unint64_t)v65, v58, v59, v60, v61, v62, v63, v64);
      else
        --*(_DWORD *)v65;
    }
    v66 = v272;
    v272 = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
      {
        WTF::StringImpl::~StringImpl(v66, (WTF::AtomStringImpl *)v58, v59, v60, v61, v62, v63, v64);
        WTF::fastFree(v180, v181, v182, v183, v184, v185, v186, v187);
      }
      else
      {
        *(_DWORD *)v66 -= 2;
      }
    }
    v67 = v271;
    v271 = 0;
    if (v67)
    {
      do
      {
        v68 = __ldaxr(v67);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, v67));
      if (!v69)
      {
        atomic_store(1u, v67);
        v295 = (unsigned __int8 **)v67;
        WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::NameSection **)&v295, v58, v59, v60, v61, v62, v63, v64);
      }
    }
    v70 = v269;
    v269 = 0;
    if (v70)
    {
      do
      {
        v71 = __ldaxr(v70);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, v70));
      if (!v72)
      {
        atomic_store(1u, v70);
        v295 = (unsigned __int8 **)v70;
        WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::NameSection **)&v295, v58, v59, v60, v61, v62, v63, v64);
      }
    }
    v73 = v275;
    v275 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 1)
        WTF::fastFree((unint64_t)v73, v58, v59, v60, v61, v62, v63, v64);
      else
        --*(_DWORD *)v73;
    }
    v74 = v274;
    v274 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
      {
        WTF::StringImpl::~StringImpl(v74, (WTF::AtomStringImpl *)v58, v59, v60, v61, v62, v63, v64);
        WTF::fastFree(v188, v189, v190, v191, v192, v193, v194, v195);
      }
      else
      {
        *(_DWORD *)v74 -= 2;
      }
    }
  }
  v75 = (WTF *)v25[7];
  v25[7] = 0;
  v76 = v281;
  v281 = v75;
  if (v76)
    WTF::fastFree((unint64_t)v76, v58, v59, v60, v61, v62, v63, v64);
  v282 = v25[8];
  v77 = v293;
  JSC::Wasm::OptimizingJITCallee::setEntrypoint(v293, &v280, (uint64_t)&v291, v25, (uint64_t)(v25 + 1), (uint64_t)&v278, v63, v64);
  v276 = 0;
  v295 = &v276;
  JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>((uint64_t)v77, (uint64_t **)&v295);
  v83 = v276;
  v84 = *((_QWORD *)&v288 + 1);
  if (*((_QWORD *)&v288 + 1))
  {
    *((_QWORD *)&v288 + 1) = 0;
    v267 = v84;
    JSC::NativeCalleeRegistry::addPCToCodeOriginMap((uint64_t)&JSC::calleeRegistry, (uint64_t)v77, &v267);
    WTF::Box<JSC::PCToCodeOriginMap>::~Box((unint64_t *)&v267, v197, v198, v199, v200, v201, v202, v203);
  }
  v85 = (unsigned __int8 *)(*(_QWORD *)(a1 + 80) + 128);
  v276 = v85;
  v277 = 1;
  if (__ldaxr(v85))
  {
    __clrex();
  }
  else if (!__stxr(1u, v85))
  {
    goto LABEL_44;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v85);
LABEL_44:
  v87 = *(_QWORD *)(a1 + 80);
  v88 = *(_DWORD *)(a1 + 92);
  v89 = (unsigned int *)v293;
  do
    v90 = __ldaxr(v89);
  while (__stlxr(v90 + 1, v89));
  v295 = (unsigned __int8 **)v89;
  JSC::Wasm::CalleeGroup::setOMGCallee(v87, v88, (unsigned int **)&v295, v78, v79, v80, v81, v82);
  v98 = (unsigned int *)v295;
  v295 = 0;
  if (v98)
  {
    do
    {
      v129 = __ldaxr(v98);
      v130 = v129 - 1;
    }
    while (__stlxr(v130, v98));
    if (!v130)
    {
      atomic_store(1u, v98);
      JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v98, v91, v92, v93, v94, v95, v96, v97);
    }
  }
  v100 = (unsigned int **)(v293 + 4);
  v99 = (unsigned int *)v293[4];
  if (v99)
    v101 = v99 + 2;
  else
    v101 = 0;
  if (v99)
    v102 = (uint64_t)&v99[8 * *v99 + 2];
  else
    v102 = 0;
  for (; v101 != (unsigned int *)v102; v101 += 8)
  {
    v103 = *((_QWORD *)v101 + 2);
    v104 = *(_QWORD **)(a1 + 80);
    if (v103 < *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 36))
    {
      v196 = (_DWORD *)v104[9];
      if (*v196 <= v103)
      {
        __break(0xC471u);
        JUMPOUT(0x198DB4520);
      }
      v105 = 0;
      v107 = *(uint64_t **)&v196[4 * v103 + 2];
    }
    else
    {
      v105 = JSC::Wasm::CalleeGroup::wasmEntrypointCalleeFromFunctionIndexSpace(v104, (uint64_t)&v276, v103);
      v106 = JSC::Wasm::CalleeGroup::wasmEntrypointCalleeFromFunctionIndexSpace(*(_QWORD **)(a1 + 80), (uint64_t)&v276, v101[4]);
      v294 = &v295;
      v295 = 0;
      JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>(v106, (uint64_t **)&v294);
      v107 = (uint64_t *)v295;
    }
    v108 = *(JSC::ExecutableAllocator **)v101;
    if (*((_BYTE *)v101 + 8))
    {
      if (*((_BYTE *)v101 + 8) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198DB4570);
      }
      JSC::ARM64Assembler::relinkJumpOrCall<(JSC::ARM64Assembler::BranchType)0>(*(JSC::ExecutableAllocator **)v101, *(_QWORD *)v101, (unint64_t)v107);
    }
    else
    {
      v108 = (JSC::ExecutableAllocator *)((char *)v108 - 4);
      JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>(v108, (unint64_t)v108, (unint64_t)v107);
    }
    sys_icache_invalidate(v108, 4uLL);
    if (v105)
      v109 = (v105 - qword_1ECF4C080) | 3;
    else
      v109 = 0;
    JSC::ARM64Assembler::linkPointer(*((JSC::ARM64Assembler **)v101 + 3), v109, (void *)1);
  }
  JSC::Wasm::CallsiteCollection::addCallsites(*(_QWORD *)(a1 + 80) + 88, (uint64_t)&v276, *(_QWORD *)(a1 + 80), v100);
  JSC::Wasm::CallsiteCollection::updateCallsitesToCallUs((unsigned __int8 *)(*(_QWORD *)(a1 + 80) + 88), (uint64_t)&v276, *(_QWORD *)(a1 + 80), (unint64_t)v83, *(_DWORD *)(a1 + 92), v5, v110, v111);
  v119 = *(_DWORD **)(*(_QWORD *)(a1 + 80) + 24);
  if (!v119 || !*v119)
    goto LABEL_84;
  v120 = *(unsigned int *)(a1 + 92);
  if (*v119 <= v120)
  {
    v112 = "/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.app/Contents/Develo"
           "per/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/wtf/TrailingArray.h";
    v113 = "reference WTF::TrailingArray<WTF::EmbeddedFixedVector<WTF::RefPtr<JSC::Wasm::BBQCallee>>, WTF::RefPtr<JSC::Wa"
           "sm::BBQCallee>>::at [Derived = WTF::EmbeddedFixedVector<WTF::RefPtr<JSC::Wasm::BBQCallee>>, T ="
           " WTF::RefPtr<JSC::Wasm::BBQCallee>]";
    v124 = 146;
    v114 = 139;
    __break(0xC471u);
    goto LABEL_194;
  }
  v83 = *(unsigned __int8 **)&v119[2 * v120 + 2];
  if (!v83)
    goto LABEL_84;
  v5 = *((_QWORD *)v83 + 15) + 12;
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
LABEL_69:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v5);
    goto LABEL_70;
  }
  if (__stxr(1u, (unsigned __int8 *)v5))
    goto LABEL_69;
LABEL_70:
  v122 = (unsigned int *)v293;
  do
    v123 = __ldaxr(v122);
  while (__stlxr(v123 + 1, v122));
  v124 = *((_QWORD *)v83 + 14);
  *((_QWORD *)v83 + 14) = v122;
  if (v124)
  {
    do
    {
      v125 = __ldaxr((unsigned int *)v124);
      v126 = v125 - 1;
    }
    while (__stlxr(v126, (unsigned int *)v124));
    if (!v126)
      goto LABEL_195;
  }
  while (1)
  {
    v127 = *(unsigned __int8 *)(a1 + 12);
    if (v127 < 2)
      break;
LABEL_194:
    __break(1u);
LABEL_195:
    atomic_store(1u, (unsigned int *)v124);
    JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v124, (uint64_t)v112, (uint64_t)v113, v114, v115, v116, v117, v118);
  }
  *(_BYTE *)(*((_QWORD *)v83 + 15) + v127 + 13) = 2;
  v128 = __ldxr((unsigned __int8 *)v5);
  if (v128 != 1)
  {
    __clrex();
    goto LABEL_83;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_83:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v5, 0, (uint64_t)v113, v114, v115, v116, v117, v118);
LABEL_84:
  v131 = *(_QWORD *)(a1 + 80);
  if (!byte_1ECF4C798)
    goto LABEL_85;
  v204 = *(_QWORD *)(v131 + 32);
  if (!v204)
    goto LABEL_160;
  v205 = *(unsigned int *)(a1 + 92);
  if (*(_DWORD *)(v204 + 4) <= v205)
  {
    __break(0xC471u);
    JUMPOUT(0x198DB4540);
  }
  v83 = *(unsigned __int8 **)(v204 + 8 * v205 + 8);
  v5 = (uint64_t)(v83 + 188);
  if (__ldaxr(v83 + 188))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_148;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v83 + 188));
LABEL_148:
  v207 = (unsigned int *)v293;
  do
    v208 = __ldaxr(v207);
  while (__stlxr(v208 + 1, v207));
  v209 = &v83[8 * *(unsigned __int8 *)(a1 + 12)];
  v124 = *((_QWORD *)v209 + 5);
  *((_QWORD *)v209 + 5) = v207;
  if (v124)
  {
    do
    {
      v210 = __ldaxr((unsigned int *)v124);
      v211 = v210 - 1;
    }
    while (__stlxr(v211, (unsigned int *)v124));
    if (!v211)
    {
      atomic_store(1u, (unsigned int *)v124);
      JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v124, (uint64_t)v112, (uint64_t)v113, v114, v115, v116, v117, v118);
    }
  }
  v212 = *(unsigned __int8 *)(a1 + 12);
  if (v212 >= 2)
    goto LABEL_194;
  v83[v212 + 189] = 2;
  v213 = __ldxr((unsigned __int8 *)v5);
  if (v213 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
      goto LABEL_160;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v83 + 188, 0, (uint64_t)v113, v114, v115, v116, v117, v118);
LABEL_160:
  if (byte_1ECF4C798)
    goto LABEL_102;
  v131 = *(_QWORD *)(a1 + 80);
LABEL_85:
  v132 = *(_QWORD *)(v131 + 40);
  if (!v132)
    goto LABEL_102;
  v133 = *(unsigned int *)(a1 + 92);
  if (*(_DWORD *)(v132 + 4) <= v133)
  {
    __break(0xC471u);
    goto LABEL_214;
  }
  v83 = *(unsigned __int8 **)(v132 + 8 * v133 + 8);
  v5 = (uint64_t)(v83 + 116);
  if (__ldaxr(v83 + 116))
  {
    __clrex();
LABEL_89:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v83 + 116));
    goto LABEL_90;
  }
  if (__stxr(1u, (unsigned __int8 *)v5))
    goto LABEL_89;
LABEL_90:
  v135 = (unsigned int *)v293;
  do
    v136 = __ldaxr(v135);
  while (__stlxr(v136 + 1, v135));
  v137 = &v83[8 * *(unsigned __int8 *)(a1 + 12)];
  v124 = *((_QWORD *)v137 + 18);
  *((_QWORD *)v137 + 18) = v135;
  if (v124)
  {
    do
    {
      v138 = __ldaxr((unsigned int *)v124);
      v139 = v138 - 1;
    }
    while (__stlxr(v139, (unsigned int *)v124));
    if (!v139)
    {
      atomic_store(1u, (unsigned int *)v124);
      JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v124, (uint64_t)v112, (uint64_t)v113, v114, v115, v116, v117, v118);
    }
  }
  v140 = *(unsigned __int8 *)(a1 + 12);
  if (v140 >= 2)
    goto LABEL_194;
  v83[v140 + 117] = 2;
  v141 = __ldxr((unsigned __int8 *)v5);
  if (v141 != 1)
  {
    __clrex();
    goto LABEL_101;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_101:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v83 + 116, 0, (uint64_t)v113, v114, v115, v116, v117, v118);
LABEL_102:
  if (!v277)
    goto LABEL_108;
  v142 = v276;
  v143 = __ldxr(v276);
  if (v143 != 1)
  {
    __clrex();
    goto LABEL_107;
  }
  if (__stlxr(0, v276))
LABEL_107:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v142, 0, (uint64_t)v113, v114, v115, v116, v117, v118);
LABEL_108:
  v144 = (unsigned __int8 *)(a1 + 13);
  if (__ldaxr((unsigned __int8 *)(a1 + 13)))
  {
    __clrex();
    goto LABEL_110;
  }
  if (__stxr(1u, v144))
LABEL_110:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 13);
  *(_BYTE *)(a1 + 88) = 1;
  JSC::Wasm::Plan::runCompletionTasks((JSC::Wasm::Plan *)a1, v112, (uint64_t)v113, v114, v115, v116, v117, v118);
  v153 = __ldxr(v144);
  if (v153 == 1)
  {
    if (!__stlxr(0, v144))
      goto LABEL_116;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 13), 0, v147, v148, v149, v150, v151, v152);
LABEL_116:
  v154 = v278;
  if (v278)
  {
    v278 = 0;
    LODWORD(v279) = 0;
    WTF::fastFree((unint64_t)v154, v146, v147, v148, v149, v150, v151, v152);
  }
LABEL_118:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v296, v146, v147, v148, v149, v150, v151, v152);
  JSC::Wasm::Entrypoint::~Entrypoint((JSC::Wasm::Entrypoint *)&v280, v155, v156, v157, v158, v159, v160, v161);
LABEL_119:
  if (v285 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E35B5DE0[v285])(&v296, &v284);
  JSC::Wasm::CompilationContext::~CompilationContext((JSC::Wasm::CompilationContext *)&v286, v162, v163, v164, v165, v166, v167, v168);
  v176 = v291;
  if (v291)
  {
    v291 = 0;
    LODWORD(v292) = 0;
    WTF::fastFree((unint64_t)v176, v169, v170, v171, v172, v173, v174, v175);
  }
  v177 = (unsigned int *)v293;
  v293 = 0;
  if (v177)
  {
    do
    {
      v178 = __ldaxr(v177);
      v179 = v178 - 1;
    }
    while (__stlxr(v179, v177));
    if (!v179)
    {
      atomic_store(1u, v177);
      JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v177, (uint64_t)v169, v170, v171, v172, v173, v174, v175);
    }
  }
}

double JSC::Wasm::OMGCallee::create(uint64_t *a1, unint64_t a2, unint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v6 = WTF::fastMalloc((WTF *)0x68);
  v11 = JSC::Wasm::JITCallee::JITCallee(v6, 4, a2, a3, v7, v8, v9, v10);
  *(_QWORD *)(v11 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *a1 = v11;
  return result;
}

uint64_t JSC::Wasm::Plan::fail(uint64_t result, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!*(_QWORD *)(result + 56))
  {
    v8 = a3;
    v9 = result;
    v10 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    v11 = *(WTF::StringImpl **)(result + 56);
    *(_QWORD *)(v9 + 56) = v10;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
      }
      else
      {
        *(_DWORD *)v11 -= 2;
      }
    }
    *(_BYTE *)(v9 + 64) = v8;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
  }
  return result;
}

void JSC::Wasm::computeExceptionHandlerLocations(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v57;
  WTF *v58;
  WTF *v59;
  uint64_t v60;
  unint64_t v61;

  v59 = 0;
  v60 = 0;
  v12 = *(_QWORD *)(a3 + 24);
  if (v12)
  {
    v13 = *(unsigned int *)(v12 + 200);
    v14 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v14)
    {
      v15 = *(_DWORD **)(a2 + 8);
      v16 = 28 * v14;
      v17 = 1;
      do
      {
        if (*v15 == 2)
        {
          v61 = 0;
          v18 = *(unsigned int *)(a1 + 12);
          if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
            *(_QWORD *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)) = *(_QWORD *)WTF::Vector<JSC::DFG::RegisteredStructure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v18 + 1, (unint64_t)&v61);
          else
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = 0;
          ++*(_DWORD *)(a1 + 12);
        }
        else
        {
          if (v17 >= v13)
          {
            __break(0xC471u);
            JUMPOUT(0x198DB4B20);
          }
          v19 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 160);
          if (*(unsigned int *)(v19 + 268) <= v17)
          {
            __break(0xC471u);
            JUMPOUT(0x198DB4B30);
          }
          v20 = *(_DWORD *)(*(_QWORD *)(v19 + 256) + 4 * v17);
          if (v20 < 4)
            v21 = 0;
          else
            v21 = *(_DWORD *)((v20 & 0xFFFFFFFC) + a4[3] - 4);
          v22 = (v20 - v21);
          v23 = a4[23];
          v24 = v22 + v23;
          if (v23 > v24 || v23 + a4[1] < v24)
          {
            __break(0xC471u);
            JUMPOUT(0x198DB4AE0);
          }
          v61 = v24;
          v26 = *(unsigned int *)(a1 + 12);
          if ((_DWORD)v26 == *(_DWORD *)(a1 + 8))
            *(_QWORD *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)) = *(_QWORD *)WTF::Vector<JSC::DFG::RegisteredStructure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v26 + 1, (unint64_t)&v61);
          else
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v24;
          ++*(_DWORD *)(a1 + 12);
          ++v17;
        }
        v15 += 7;
        v16 -= 28;
      }
      while (v16);
    }
    else
    {
      v17 = 1;
    }
    if (v17 < v13)
    {
      while (1)
      {
        v50 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 160);
        if (v17 >= *(unsigned int *)(v50 + 268))
        {
          __break(0xC471u);
          JUMPOUT(0x198DB4B28);
        }
        v51 = *(_DWORD *)(*(_QWORD *)(v50 + 256) + 4 * v17);
        v52 = v51 < 4 ? 0 : *(_DWORD *)((v51 & 0xFFFFFFFC) + a4[3] - 4);
        v53 = (v51 - v52);
        v54 = a4[23];
        v55 = v53 + v54;
        if (v54 > v55 || v54 + a4[1] < v55)
          break;
        v61 = v55;
        if (HIDWORD(v60) == (_DWORD)v60)
        {
          v57 = (_QWORD *)WTF::Vector<JSC::DFG::RegisteredStructure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v59, HIDWORD(v60) + 1, (unint64_t)&v61);
          *((_QWORD *)v59 + HIDWORD(v60)) = *v57;
        }
        else
        {
          *((_QWORD *)v59 + HIDWORD(v60)) = v55;
        }
        ++HIDWORD(v60);
        if (v13 == ++v17)
          goto LABEL_77;
      }
LABEL_83:
      __break(0xC471u);
      JUMPOUT(0x198DB4AA0);
    }
  }
  else
  {
    v27 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v27)
    {
      v28 = 0;
      v29 = *(int **)(a2 + 24);
      v30 = 4 * v27;
      do
      {
        v31 = *v29;
        if (*v29 < 4)
          v32 = 0;
        else
          v32 = *(_DWORD *)((v31 & 0xFFFFFFFC) + a4[3] - 4);
        v33 = (v31 - v32);
        v34 = a4[23];
        v35 = v33 + v34;
        if (v34 > v35 || v34 + a4[1] < v35)
        {
          __break(0xC471u);
          JUMPOUT(0x198DB4AC0);
        }
        v61 = v35;
        if (v28 == (_DWORD)v60)
        {
          v37 = (_QWORD *)WTF::Vector<JSC::DFG::RegisteredStructure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v59, v28 + 1, (unint64_t)&v61);
          *((_QWORD *)v59 + HIDWORD(v60)) = *v37;
        }
        else
        {
          *((_QWORD *)v59 + v28) = v35;
        }
        v28 = ++HIDWORD(v60);
        ++v29;
        v30 -= 4;
      }
      while (v30);
    }
    v38 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v38)
    {
      v39 = 0;
      v40 = *(_DWORD **)(a2 + 8);
      v41 = 28 * v38;
      do
      {
        if (*v40 == 2)
        {
          v61 = 0;
          v42 = *(unsigned int *)(a1 + 12);
          if ((_DWORD)v42 == *(_DWORD *)(a1 + 8))
            *(_QWORD *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)) = *(_QWORD *)WTF::Vector<JSC::DFG::RegisteredStructure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v42 + 1, (unint64_t)&v61);
          else
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = 0;
        }
        else
        {
          if (*(_DWORD *)(a3 + 68) <= v39)
            goto LABEL_83;
          v43 = *(_DWORD *)(*(_QWORD *)(a3 + 56) + 4 * v39);
          if (v43 < 4)
            v44 = 0;
          else
            v44 = *(_DWORD *)((v43 & 0xFFFFFFFC) + a4[3] - 4);
          v45 = (v43 - v44);
          v46 = a4[23];
          v47 = v45 + v46;
          if (v46 > v47 || v46 + a4[1] < v47)
          {
            __break(0xC471u);
            JUMPOUT(0x198DB4B00);
          }
          v61 = v47;
          v49 = *(unsigned int *)(a1 + 12);
          if ((_DWORD)v49 == *(_DWORD *)(a1 + 8))
            *(_QWORD *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)) = *(_QWORD *)WTF::Vector<JSC::DFG::RegisteredStructure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v49 + 1, (unint64_t)&v61);
          else
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v49) = v47;
          ++v39;
        }
        ++*(_DWORD *)(a1 + 12);
        v40 += 7;
        v41 -= 28;
      }
      while (v41);
    }
  }
LABEL_77:
  v58 = v59;
  if (v59)
  {
    v59 = 0;
    LODWORD(v60) = 0;
    WTF::fastFree((unint64_t)v58, (void *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::Wasm::CalleeGroup::setOMGCallee(uint64_t a1, unsigned int a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v11;
  unsigned int v12;
  uint64_t result;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;

  v11 = *(unsigned int **)(a1 + 16);
  if (!v11 || (v12 = *v11) == 0)
  {
    WTF::FixedVector<WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<JSC::Wasm::BBQCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::BBQCallee>>>::FixedVector(&v29, *(unsigned int *)(a1 + 4));
    v14 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29;
    v29 = 0;
    v30 = v14;
    WTF::FixedVector<WTF::RefPtr<JSC::Wasm::Callee,WTF::RawPtrTraits<JSC::Wasm::Callee>,WTF::DefaultRefDerefTraits<JSC::Wasm::Callee>>>::~FixedVector(&v30, v15, v16, v17, v18, v19, v20, v21);
    WTF::FixedVector<WTF::RefPtr<JSC::Wasm::Callee,WTF::RawPtrTraits<JSC::Wasm::Callee>,WTF::DefaultRefDerefTraits<JSC::Wasm::Callee>>>::~FixedVector(&v29, v22, v23, v24, v25, v26, v27, v28);
    v11 = *(unsigned int **)(a1 + 16);
    v12 = *v11;
  }
  if (v12 > a2)
    return (uint64_t)WTF::RefPtr<JSC::Wasm::OMGCallee,WTF::RawPtrTraits<JSC::Wasm::OMGCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::OMGCallee>>::operator=<JSC::Wasm::OMGCallee>((unsigned int **)&v11[2 * a2 + 2], a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = 146;
  __break(0xC471u);
  return result;
}

void JSC::Wasm::OMGPlan::complete(JSC::Wasm::Plan *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((_BYTE *)this + 88) = 1;
  JSC::Wasm::Plan::runCompletionTasks(this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::Wasm::Entrypoint::~Entrypoint(JSC::Wasm::Entrypoint *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  JSC::Compilation *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(JSC::Compilation **)this;
  *(_QWORD *)this = 0;
  if (v10)
  {
    JSC::Compilation::~Compilation(v10, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
  }
}

uint64_t JSC::Wasm::OSREntryPlan::OSREntryPlan(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5, __int16 a6, int a7, unsigned int a8, uint64_t *a9)
{
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;

  v9 = *(unsigned int **)(*a3 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_DWORD *)(result + 8) = 1;
  *(_WORD *)(result + 12) = 0;
  *(_BYTE *)(result + 14) = 0;
  *(_QWORD *)(result + 16) = v9;
  *(_QWORD *)(result + 24) = result + 40;
  *(_QWORD *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = 0;
  v11 = *a9;
  *a9 = 0;
  v12 = *(_QWORD **)(result + 24);
  *v12 = a2;
  v12[1] = v11;
  *(_QWORD *)(result + 32) = 0x100000001;
  *(_QWORD *)result = off_1E35B5CC0;
  v13 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 72) = v13;
  v14 = *(unsigned int **)(v13 + 8 * a8 + 16);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *(_QWORD *)(result + 80) = v14;
  v16 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 88) = v16;
  *(_BYTE *)(result + 96) = 0;
  *(_WORD *)(result + 97) = a6;
  *(_DWORD *)(result + 100) = a5;
  *(_DWORD *)(result + 104) = a7;
  *(_BYTE *)(result + 12) = a8;
  return result;
}

uint64_t JSC::Wasm::OSREntryPlan::OSREntryPlan(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5, __int16 a6, int a7, unsigned int a8, uint64_t *a9)
{
  return JSC::Wasm::OSREntryPlan::OSREntryPlan(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

WTF *JSC::Wasm::OSREntryPlan::dumpDisassembly(JSC::Wasm::OSREntryPlan *this, JSC::Wasm::CompilationContext *a2, JSC::LinkBuffer *a3, int a4, const JSC::Wasm::TypeDefinition *a5, unsigned int a6)
{
  uint64_t v11;
  WTF *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  int8x16_t *v19;
  uint64_t v20;
  unsigned int v21;
  const char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  WTF::StringImpl *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  int8x16_t *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t *v41;
  WTF::PrintStream *v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t);
  uint64_t (**v60)(uint64_t, uint64_t);
  JSC::Wasm::NameSection **v61;
  JSC::Wasm::CompilationContext *v62;
  const char **v63;
  const char *v64;
  unsigned int *v65;
  WTF::StringImpl *v66;
  WTF *v67;
  const char *v68;
  WTF::StringImpl *v69;
  int8x16_t *v70;
  int8x16_t *v71;
  int v72;
  JSC::Wasm::NameSection *v73;

  v72 = a4;
  if (*(_BYTE *)(*((_QWORD *)this + 11) + 6))
    v11 = 5;
  else
    v11 = 3;
  if (*(_BYTE *)(*((_QWORD *)a2 + 3) + 211) || JSC::shouldDumpDisassemblyFor(v11))
  {
    JSC::Wasm::TypeDefinition::toString(a5, (uint64_t *)&v69);
    WTF::String::ascii((WTF::String *)&v69, &v70);
    v18 = 0;
    if (v70)
      v19 = v70 + 1;
    else
      v19 = 0;
    v71 = v19;
    v20 = *(_QWORD *)(*((_QWORD *)this + 2) + 248);
    if (*(_DWORD *)(v20 + 52) > a6)
      v18 = (const char *)(*(_QWORD *)(v20 + 40) + 16 * a6);
    do
      v21 = __ldaxr((unsigned int *)v20);
    while (__stlxr(v21 + 1, (unsigned int *)v20));
    v64 = v18;
    v65 = (unsigned int *)v20;
    JSC::Wasm::IndexOrName::IndexOrName((unint64_t *)&v59, a6, (unint64_t *)&v64, v13, v14, v15, v16, v17);
    JSC::Wasm::makeString((uint64_t *)&v59, (uint64_t *)&v66);
    WTF::String::ascii((WTF::String *)&v66, (int8x16_t **)&v67);
    if (v67)
      v22 = (char *)v67 + 16;
    else
      v22 = 0;
    v68 = v22;
    WTF::dataLog<char [60],unsigned int,char [3],char const*,char [7],char const*,char [2]>(&v72, (const char **)&v71, &v68);
    v30 = v67;
    v67 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
      else
        --*(_DWORD *)v30;
    }
    v31 = v66;
    v66 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, (WTF::AtomStringImpl *)v23, v24, v25, v26, v27, v28, v29);
        WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
    v32 = (unsigned int *)v60;
    v60 = 0;
    if (v32)
    {
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        atomic_store(1u, v32);
        v73 = (JSC::Wasm::NameSection *)v32;
        WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v73, v23, v24, v25, v26, v27, v28, v29);
      }
    }
    v35 = v65;
    v65 = 0;
    if (v35)
    {
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        atomic_store(1u, v35);
        v73 = (JSC::Wasm::NameSection *)v35;
        WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v73, v23, v24, v25, v26, v27, v28, v29);
      }
    }
    v38 = v70;
    v70 = 0;
    if (v38)
    {
      if (v38->i32[0] == 1)
        WTF::fastFree((unint64_t)v38, v23, v24, v25, v26, v27, v28, v29);
      else
        --v38->i32[0];
    }
    v39 = v69;
    v69 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
      {
        WTF::StringImpl::~StringImpl(v39, (WTF::AtomStringImpl *)v23, v24, v25, v26, v27, v28, v29);
        WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
      }
      else
      {
        *(_DWORD *)v39 -= 2;
      }
    }
  }
  result = (WTF *)JSC::shouldDumpDisassemblyFor(v11);
  if ((_DWORD)result)
  {
    v40 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 160);
    v41 = *(uint64_t **)(v40 + 312);
    v73 = 0;
    v59 = WTF::ScopedLambdaFunctor<void ()(JSC::B3::Air::Inst &),JSC::Wasm::OSREntryPlan::dumpDisassembly(JSC::Wasm::CompilationContext &,JSC::LinkBuffer &,unsigned int,JSC::Wasm::TypeDefinition const&,unsigned int)::$_0>::implFunction;
    v60 = &v59;
    v61 = &v73;
    v62 = a2;
    v63 = &v64;
    v64 = "b3    ";
    v42 = (WTF::PrintStream *)WTF::dataFile(result);
    result = (WTF *)JSC::B3::Air::Disassembler::dump(v41, v40, v42, a3, "Air        ", "asm              ", (uint64_t)&v59);
    *((_BYTE *)a3 + 170) = 1;
  }
  return result;
}

void JSC::Wasm::OSREntryPlan::work(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  const JSC::Wasm::TypeDefinition *v6;
  char v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  _BOOL4 v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::Compilation *v36;
  JSC::Compilation *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  WTF::StringImpl *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  WTF *v68;
  WTF::StringImpl *v69;
  WTF *v70;
  WTF *v71;
  _QWORD *v72;
  unsigned __int8 *v73;
  unsigned int *v75;
  unsigned int **v76;
  unsigned int *v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  JSC::Wasm::NameSection *v82;
  unint64_t v83;
  _DWORD *v84;
  JSC::Wasm *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unsigned __int8 *v95;
  unsigned int *v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  unsigned int *v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  unint64_t v112;
  unsigned __int8 *v113;
  int v114;
  unsigned __int8 *v115;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  WTF *v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WTF::AtomStringImpl *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WTF *v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int *v152;
  unsigned int v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int v156;
  unint64_t v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned __int8 *v174;
  WTF::StringImpl *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  int v184;
  unsigned __int8 *v185;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  WTF *v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int *v228;
  uint64_t v229;
  unsigned int *v230;
  WTF::StringImpl *v231;
  WTF *v232;
  WTF::StringImpl *v233;
  WTF *v234;
  unsigned __int8 *v235;
  char v236;
  WTF *v237;
  uint64_t v238;
  JSC::Compilation *v239;
  WTF *v240;
  uint64_t v241;
  WTF::StringImpl *v242;
  _DWORD *v243;
  int v244;
  __int128 v245;
  _OWORD v246[3];
  uint64_t v247;
  WTF *v248;
  uint64_t v249;
  uint64_t v250;
  JSC::Wasm::NameSection **v251;
  JSC::Wasm::NameSection *v252;
  WTF::StringImpl *v253;
  unsigned int *v254;
  char v255;
  uint64_t v256;

  v256 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(unsigned int *)(a1 + 100);
  if (*(_DWORD *)(v1 + 132) <= v2)
  {
    __break(0xC471u);
    JUMPOUT(0x198DB5A90);
  }
  if (*(_DWORD *)(v1 + 52) <= v2)
  {
    __break(0xC471u);
    JUMPOUT(0x198DB5A98);
  }
  v4 = *(_QWORD *)(v1 + 120) + 40 * v2;
  v5 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 36) + v2);
  v6 = (const JSC::Wasm::TypeDefinition *)JSC::Wasm::TypeDefinition::expand(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * v2));
  if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 6))
    v7 = 5;
  else
    v7 = 3;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 248);
  if (*(_DWORD *)(v8 + 52) > v5)
    v9 = (WTF::StringImpl *)(*(_QWORD *)(v8 + 40) + 16 * v5);
  else
    v9 = 0;
  do
    v10 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v10 + 1, (unsigned int *)v8));
  v253 = v9;
  v254 = (unsigned int *)v8;
  JSC::Wasm::OSREntryCallee::create(&v250, v7, v5, (unint64_t *)&v253, *(_DWORD *)(a1 + 104));
  v18 = v254;
  v254 = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      *(_QWORD *)&v245 = v18;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::NameSection **)&v245, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  v248 = 0;
  v249 = 0;
  v247 = 0;
  v245 = 0u;
  memset(v246, 0, sizeof(v246));
  v21 = v250;
  JSC::Wasm::parseAndCompileOMG((uint64_t)&v243, (uint64_t)&v245, v250, v4, (uint64_t)v6, (uint64_t)&v248, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 12), v7, *(_DWORD *)(a1 + 100), *(_WORD *)(a1 + 97), 0, *(_DWORD *)(a1 + 104));
  if (!v244)
  {
    v239 = 0;
    v240 = 0;
    v241 = 0;
    JSC::LinkBuffer::LinkBuffer((uint64_t)&v253, *((uint64_t *)&v245 + 1), v21, 14, 0);
    if (v255)
    {
      v26 = v243;
      v237 = 0;
      v238 = 0;
      JSC::Wasm::computeExceptionHandlerLocations((uint64_t)&v237, (uint64_t)v243, (uint64_t)&v245, &v253, v22, v23, v24, v25);
      JSC::Wasm::OSREntryPlan::dumpDisassembly((JSC::Wasm::OSREntryPlan *)a1, (JSC::Wasm::CompilationContext *)&v245, (JSC::LinkBuffer *)&v253, *(_DWORD *)(a1 + 100), v6, v5);
      v27 = *(unsigned __int8 *)(*((_QWORD *)&v246[0] + 1) + 211);
      v28 = (v27 | byte_1ECF4C289) != 0;
      if (v27 | byte_1ECF4C289)
      {
        v194 = *(unsigned int *)(a1 + 100);
        JSC::Wasm::TypeDefinition::toString(v6, (uint64_t *)&v233);
        WTF::String::ascii((WTF::String *)&v233, (int8x16_t **)&v234);
        v200 = 0;
        v201 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 248);
        if (*(_DWORD *)(v201 + 52) > v5)
          v200 = *(_QWORD *)(v201 + 40) + 16 * v5;
        do
          v202 = __ldaxr((unsigned int *)v201);
        while (__stlxr(v202 + 1, (unsigned int *)v201));
        v227 = v200;
        v228 = (unsigned int *)v201;
        JSC::Wasm::IndexOrName::IndexOrName((unint64_t *)&v229, v5, (unint64_t *)&v227, v195, v196, v197, v198, v199);
        JSC::Wasm::makeString(&v229, (uint64_t *)&v231);
        WTF::String::ascii((WTF::String *)&v231, (int8x16_t **)&v232);
        JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)2367,unsigned int,char const*,char const*>((uint64_t)&v253, v27 != 0, 0, 0, "WebAssembly OMGForOSREntry function[%i] %s name %s", v194, &v235);
      }
      else
      {
        JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v253, 0, 0, &v235);
      }
      std::make_unique[abi:sn180100]<JSC::Compilation,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)2367>,std::unique_ptr<JSC::OpaqueByproducts>>(&v251, (uint64_t *)&v235, (uint64_t *)v246);
      v36 = (JSC::Compilation *)v251;
      v251 = 0;
      v37 = v239;
      v239 = v36;
      if (v37)
      {
        JSC::Compilation::~Compilation(v37, v29, v30, v31, v32, v33, v34, v35);
        WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
      }
      std::unique_ptr<JSC::Compilation>::~unique_ptr[abi:sn180100]((JSC::Compilation **)&v251, v29, v30, v31, v32, v33, v34, v35);
      JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v235, v46, v47, v48, v49, v50, v51, v52);
      if (v28)
      {
        v60 = v232;
        v232 = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 1)
            WTF::fastFree((unint64_t)v60, v53, v54, v55, v56, v57, v58, v59);
          else
            --*(_DWORD *)v60;
        }
        v61 = v231;
        v231 = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
          {
            WTF::StringImpl::~StringImpl(v61, (WTF::AtomStringImpl *)v53, v54, v55, v56, v57, v58, v59);
            WTF::fastFree(v158, v159, v160, v161, v162, v163, v164, v165);
          }
          else
          {
            *(_DWORD *)v61 -= 2;
          }
        }
        v62 = v230;
        v230 = 0;
        if (v62)
        {
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (!v64)
          {
            atomic_store(1u, v62);
            v252 = (JSC::Wasm::NameSection *)v62;
            WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v252, v53, v54, v55, v56, v57, v58, v59);
          }
        }
        v65 = v228;
        v228 = 0;
        if (v65)
        {
          do
          {
            v66 = __ldaxr(v65);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, v65));
          if (!v67)
          {
            atomic_store(1u, v65);
            v252 = (JSC::Wasm::NameSection *)v65;
            WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v252, v53, v54, v55, v56, v57, v58, v59);
          }
        }
        v68 = v234;
        v234 = 0;
        if (v68)
        {
          if (*(_DWORD *)v68 == 1)
            WTF::fastFree((unint64_t)v68, v53, v54, v55, v56, v57, v58, v59);
          else
            --*(_DWORD *)v68;
        }
        v69 = v233;
        v233 = 0;
        if (v69)
        {
          if (*(_DWORD *)v69 == 2)
          {
            WTF::StringImpl::~StringImpl(v69, (WTF::AtomStringImpl *)v53, v54, v55, v56, v57, v58, v59);
            WTF::fastFree(v166, v167, v168, v169, v170, v171, v172, v173);
          }
          else
          {
            *(_DWORD *)v69 -= 2;
          }
        }
      }
      v70 = (WTF *)*((_QWORD *)v26 + 7);
      *((_QWORD *)v26 + 7) = 0;
      v71 = v240;
      v240 = v70;
      if (v71)
        WTF::fastFree((unint64_t)v71, v53, v54, v55, v56, v57, v58, v59);
      v241 = *((_QWORD *)v26 + 8);
      v72 = (_QWORD *)v250;
      *(_DWORD *)(v250 + 104) = v26[18];
      JSC::Wasm::OptimizingJITCallee::setEntrypoint(v72, &v239, (uint64_t)&v248, (uint64_t *)v26, (uint64_t)(v26 + 2), (uint64_t)&v237, v58, v59);
      v73 = (unsigned __int8 *)(*(_QWORD *)(a1 + 80) + 128);
      v235 = v73;
      v236 = 1;
      if (__ldaxr(v73))
      {
        __clrex();
      }
      else if (!__stxr(1u, v73))
      {
LABEL_45:
        v76 = (unsigned int **)(v250 + 32);
        v75 = *(unsigned int **)(v250 + 32);
        if (v75)
          v77 = v75 + 2;
        else
          v77 = 0;
        if (v75)
          v78 = (uint64_t)&v75[8 * *v75 + 2];
        else
          v78 = 0;
        for (; v77 != (unsigned int *)v78; v77 += 8)
        {
          v79 = *((_QWORD *)v77 + 2);
          v80 = *(_QWORD **)(a1 + 80);
          if (v79 < *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 36))
          {
            v84 = (_DWORD *)v80[9];
            if (*v84 <= v79)
            {
              __break(0xC471u);
              JUMPOUT(0x198DB5A34);
            }
            v81 = 0;
            v82 = *(JSC::Wasm::NameSection **)&v84[4 * v79 + 2];
          }
          else
          {
            v81 = JSC::Wasm::CalleeGroup::wasmEntrypointCalleeFromFunctionIndexSpace(v80, (uint64_t)&v235, v79);
            v251 = &v252;
            v252 = 0;
            JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>(v81, (uint64_t **)&v251);
            v82 = v252;
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::repatchNearCall<(WTF::PtrTag)64376,(WTF::PtrTag)64376>(*(JSC::ExecutableAllocator **)v77, *((_QWORD *)v77 + 1), (unint64_t)v82);
          if (v81)
            v83 = (v81 - qword_1ECF4C080) | 3;
          else
            v83 = 0;
          JSC::ARM64Assembler::linkPointer(*((JSC::ARM64Assembler **)v77 + 3), v83, (void *)1);
        }
        v85 = (JSC::Wasm *)JSC::Wasm::CallsiteCollection::addCallsites(*(_QWORD *)(a1 + 80) + 88, (uint64_t)&v235, *(_QWORD *)(a1 + 80), v76);
        JSC::Wasm::resetInstructionCacheOnAllThreads(v85);
        __dmb(0xAu);
        v93 = *(_QWORD *)(a1 + 88);
        v94 = *(unsigned __int8 *)(v93 + 6);
        if (v94 == 2)
        {
          v95 = (unsigned __int8 *)(*(_QWORD *)(v93 + 120) + 12);
          if (__ldaxr(v95))
          {
            __clrex();
          }
          else if (!__stxr(1u, v95))
          {
            goto LABEL_64;
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v95);
LABEL_64:
          v97 = (unsigned int *)v250;
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 + 1, v97));
          v99 = *(unsigned int **)(v93 + 104);
          *(_QWORD *)(v93 + 104) = v97;
          if (v99)
          {
            do
            {
              v100 = __ldaxr(v99);
              v101 = v100 - 1;
            }
            while (__stlxr(v101, v99));
            if (!v101)
              goto LABEL_173;
          }
          while (1)
          {
            v102 = *(_QWORD *)(v93 + 120);
            v103 = *(unsigned int *)(a1 + 104);
            if (v103 >> 4 >= *(unsigned int *)(v102 + 44))
              goto LABEL_189;
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v102 + 32) + 8 * (v103 >> 4)) + (v103 & 0xF)) = 1;
            v104 = *(unsigned __int8 *)(a1 + 12);
            if (v104 < 2)
              break;
LABEL_172:
            __break(1u);
LABEL_173:
            atomic_store(1u, v99);
            JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v99, (uint64_t)v86, v87, v88, v89, v90, v91, v92);
          }
          *(_BYTE *)(v102 + v104 + 15) = 2;
LABEL_72:
          v105 = __ldxr(v95);
          if (v105 == 1)
          {
            if (!__stlxr(0, v95))
            {
LABEL_90:
              if (!v236)
                goto LABEL_99;
              v113 = v235;
              v114 = __ldxr(v235);
              if (v114 == 1)
              {
                if (!__stlxr(0, v235))
                {
LABEL_99:
                  v115 = (unsigned __int8 *)(a1 + 13);
                  if (__ldaxr((unsigned __int8 *)(a1 + 13)))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, v115))
                  {
LABEL_102:
                    *(_BYTE *)(a1 + 96) = 1;
                    JSC::Wasm::Plan::runCompletionTasks((JSC::Wasm::Plan *)a1, v86, v87, v88, v89, v90, v91, v92);
                    v124 = __ldxr(v115);
                    if (v124 == 1)
                    {
                      if (!__stlxr(0, v115))
                      {
LABEL_107:
                        v125 = v237;
                        if (v237)
                        {
                          v237 = 0;
                          LODWORD(v238) = 0;
                          WTF::fastFree((unint64_t)v125, v117, v118, v119, v120, v121, v122, v123);
                        }
                        goto LABEL_109;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 13), 0, v118, v119, v120, v121, v122, v123);
                    goto LABEL_107;
                  }
                  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 13);
                  goto LABEL_102;
                }
              }
              else
              {
                __clrex();
              }
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v113, 0, v87, v88, v89, v90, v91, v92);
              goto LABEL_99;
            }
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v95, 0, v87, v88, v89, v90, v91, v92);
          goto LABEL_90;
        }
        if (*(_BYTE *)(v93 + 6))
        {
          if (v94 == 1)
          {
            v95 = (unsigned __int8 *)(v93 + 188);
            if (__ldaxr((unsigned __int8 *)(v93 + 188)))
            {
              __clrex();
            }
            else if (!__stxr(1u, v95))
            {
              goto LABEL_80;
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v93 + 188);
LABEL_80:
            v107 = (unsigned int *)v250;
            do
              v108 = __ldaxr(v107);
            while (__stlxr(v108 + 1, v107));
            v109 = v93 + 8 * *(unsigned __int8 *)(a1 + 12);
            v99 = *(unsigned int **)(v109 + 56);
            *(_QWORD *)(v109 + 56) = v107;
            if (v99)
            {
              do
              {
                v110 = __ldaxr(v99);
                v111 = v110 - 1;
              }
              while (__stlxr(v111, v99));
              if (!v111)
              {
                atomic_store(1u, v99);
                JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v99, (uint64_t)v86, v87, v88, v89, v90, v91, v92);
              }
            }
            v112 = *(unsigned __int8 *)(a1 + 12);
            if (v112 >= 2)
              goto LABEL_172;
            *(_BYTE *)(v93 + v112 + 191) = 2;
            goto LABEL_72;
          }
LABEL_189:
          __break(0xC471u);
          JUMPOUT(0x198DB571CLL);
        }
        v95 = (unsigned __int8 *)(v93 + 116);
        if (__ldaxr((unsigned __int8 *)(v93 + 116)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v95))
        {
          goto LABEL_126;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v93 + 116);
LABEL_126:
        v152 = (unsigned int *)v250;
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 + 1, v152));
        v154 = v93 + 8 * *(unsigned __int8 *)(a1 + 12);
        v99 = *(unsigned int **)(v154 + 160);
        *(_QWORD *)(v154 + 160) = v152;
        if (v99)
        {
          do
          {
            v155 = __ldaxr(v99);
            v156 = v155 - 1;
          }
          while (__stlxr(v156, v99));
          if (!v156)
          {
            atomic_store(1u, v99);
            JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v99, (uint64_t)v86, v87, v88, v89, v90, v91, v92);
          }
        }
        v157 = *(unsigned __int8 *)(a1 + 12);
        if (v157 >= 2)
          goto LABEL_172;
        *(_BYTE *)(v93 + v157 + 119) = 2;
        goto LABEL_72;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v73);
      goto LABEL_45;
    }
    v185 = (unsigned __int8 *)(a1 + 13);
    if (__ldaxr((unsigned __int8 *)(a1 + 13)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v185))
    {
LABEL_162:
      WTF::makeString<WTF::ASCIILiteral,unsigned int>((uint64_t)"Out of executable memory while tiering up function at index ", 61, *(_DWORD *)(a1 + 100), (int **)&v237);
      JSC::Wasm::Plan::fail(a1, (WTF::AtomStringImpl *)&v237, 0, v187, v188, v189, v190, v191);
      v192 = v237;
      v237 = 0;
      if (v192)
      {
        if (*(_DWORD *)v192 == 2)
        {
          WTF::StringImpl::~StringImpl(v192, (WTF::AtomStringImpl *)v117, v118, v119, v120, v121, v122, v123);
          WTF::fastFree(v219, v220, v221, v222, v223, v224, v225, v226);
        }
        else
        {
          *(_DWORD *)v192 -= 2;
        }
      }
      v193 = __ldxr(v185);
      if (v193 == 1)
      {
        if (!__stlxr(0, v185))
          goto LABEL_109;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 13), 0, v118, v119, v120, v121, v122, v123);
LABEL_109:
      JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v253, v117, v118, v119, v120, v121, v122, v123);
      JSC::Wasm::Entrypoint::~Entrypoint((JSC::Wasm::Entrypoint *)&v239, v126, v127, v128, v129, v130, v131, v132);
      goto LABEL_110;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 13);
    goto LABEL_162;
  }
  v174 = (unsigned __int8 *)(a1 + 13);
  if (__ldaxr((unsigned __int8 *)(a1 + 13)))
  {
    __clrex();
LABEL_146:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 13);
    goto LABEL_147;
  }
  if (__stxr(1u, v174))
    goto LABEL_146;
LABEL_147:
  if (v244 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_189;
  }
  v176 = (WTF::StringImpl *)v243;
  if (v243)
    *v243 += 2;
  v242 = v176;
  WTF::makeString<WTF::String,WTF::ASCIILiteral,unsigned int>((uint64_t *)&v242, "when trying to tier up ", 24, *(_DWORD *)(a1 + 100), (int **)&v253);
  JSC::Wasm::Plan::fail(a1, (WTF::AtomStringImpl *)&v253, 0, v177, v178, v179, v180, v181);
  v182 = v253;
  v253 = 0;
  if (v182)
  {
    if (*(_DWORD *)v182 == 2)
    {
      WTF::StringImpl::~StringImpl(v182, v133, v134, v135, v136, v137, v138, v139);
      WTF::fastFree(v203, v204, v205, v206, v207, v208, v209, v210);
    }
    else
    {
      *(_DWORD *)v182 -= 2;
    }
  }
  v183 = v242;
  v242 = 0;
  if (v183)
  {
    if (*(_DWORD *)v183 == 2)
    {
      WTF::StringImpl::~StringImpl(v183, v133, v134, v135, v136, v137, v138, v139);
      WTF::fastFree(v211, v212, v213, v214, v215, v216, v217, v218);
    }
    else
    {
      *(_DWORD *)v183 -= 2;
    }
  }
  v184 = __ldxr(v174);
  if (v184 != 1)
  {
    __clrex();
    goto LABEL_175;
  }
  if (__stlxr(0, v174))
LABEL_175:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 13), 0, v134, v135, v136, v137, v138, v139);
LABEL_110:
  if (v244 != -1)
    ((void (*)(WTF::StringImpl **, _DWORD **))off_1E35B5DE0[v244])(&v253, &v243);
  JSC::Wasm::CompilationContext::~CompilationContext((JSC::Wasm::CompilationContext *)&v245, v133, v134, v135, v136, v137, v138, v139);
  v147 = v248;
  if (v248)
  {
    v248 = 0;
    LODWORD(v249) = 0;
    WTF::fastFree((unint64_t)v147, v140, v141, v142, v143, v144, v145, v146);
  }
  v148 = (unsigned int *)v250;
  v250 = 0;
  if (v148)
  {
    do
    {
      v149 = __ldaxr(v148);
      v150 = v149 - 1;
    }
    while (__stlxr(v150, v148));
    if (!v150)
    {
      atomic_store(1u, v148);
      JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v148, (uint64_t)v140, v141, v142, v143, v144, v145, v146);
    }
  }
}

double JSC::Wasm::OSREntryCallee::create(uint64_t *a1, char a2, unint64_t a3, unint64_t *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;

  v10 = WTF::fastMalloc((WTF *)0x78);
  v15 = JSC::Wasm::JITCallee::JITCallee(v10, a2, a3, a4, v11, v12, v13, v14);
  result = 0.0;
  *(_OWORD *)(v15 + 92) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_DWORD *)(v15 + 108) = a5;
  *(_DWORD *)(v15 + 112) = 0;
  *a1 = v15;
  return result;
}

void JSC::Wasm::OSREntryPlan::complete(JSC::Wasm::Plan *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((_BYTE *)this + 96) = 1;
  JSC::Wasm::Plan::runCompletionTasks(this, a2, a3, a4, a5, a6, a7, a8);
}

void *JSC::Wasm::WasmOpcodeCounter::singleton(JSC::Wasm::WasmOpcodeCounter *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&JSC::Wasm::WasmOpcodeCounter::singleton(void)::onceKey);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&JSC::Wasm::WasmOpcodeCounter::singleton(void)::onceKey, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::WasmOpcodeCounter::singleton(void)::$_0 &&>>);
  }
  return &JSC::Wasm::WasmOpcodeCounter::singleton(void)::counter;
}

void JSC::Wasm::WasmOpcodeCounter::increment(uint64_t a1, unsigned __int8 a2)
{
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  char v7;
  char **v8;
  char *v9;

  v4 = atomic_load(&JSC::Wasm::WasmOpcodeCounter::registerDispatch(void)::registerFlag);
  if (v4 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&JSC::Wasm::WasmOpcodeCounter::registerDispatch(void)::registerFlag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::WasmOpcodeCounter::registerDispatch(void)::$_0 &&>>);
  }
  v5 = (unint64_t *)(a1 + 8 * a2 + 704);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
}

void JSC::Wasm::WasmOpcodeCounter::increment(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  char v7;
  char **v8;
  char *v9;

  v4 = atomic_load(&JSC::Wasm::WasmOpcodeCounter::registerDispatch(void)::registerFlag);
  if (v4 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&JSC::Wasm::WasmOpcodeCounter::registerDispatch(void)::registerFlag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::WasmOpcodeCounter::registerDispatch(void)::$_0 &&>>);
  }
  v5 = (unint64_t *)(a1 + 8 * a2 + 952);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
}

uint64_t JSC::Wasm::loadValuesIntoBuffer(uint64_t result, unsigned int **a2, uint64_t a3, int a4)
{
  unsigned int *v4;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  unsigned int *v12;
  char *v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  unsigned int v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;

  v30 = 0;
  v4 = *a2;
  if (*a2)
  {
    v7 = result;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = a4 == 0;
    while (1)
    {
      if (*v4 <= v10)
        return result;
      v12 = &v4[v8];
      v13 = (char *)&v4[v8 + 2];
      if (BYTE1(qword_1ECF4C332))
      {
        v28 = a4;
        v29 = v12[5];
        result = WTF::dataLog<char [22],unsigned int,char [3],JSC::B3::Type,char [2],JSC::Wasm::OSREntryValue,char [2]>(&v30, &v29, (JSC::B3::ValueRep *)&v4[v8 + 2]);
        a4 = v28;
      }
      v14 = *((unsigned __int8 *)v12 + 16);
      if ((v14 - 6) > 2)
        break;
      v18 = *v13;
      if ((*v13 & 0x60) == 0)
      {
        v20 = v4[v8 + 5];
        if (v20 >= 0x80000000)
          v20 = 0x80000000;
        if (v20 - 3 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198DB5F50);
        }
        v21 = *(_QWORD *)(*(_QWORD *)v7 + 8 * (v18 & 0x7F));
LABEL_27:
        *(_QWORD *)(a3 + 8 * (v10 << v11)) = v21;
        goto LABEL_14;
      }
      if ((*v13 & 0x60) != 0x20)
        goto LABEL_51;
      v19 = v4[v8 + 5];
      if (v19 >= 0x80000000)
        v19 = 0x80000000;
      if (v19 - 3 < 2)
      {
        v23 = (v18 & 0x7F) - 32;
        v24 = *(_QWORD *)v7 + 280;
        v25 = (uint64_t *)(v24 + 16 * v23);
        v26 = (uint64_t *)(v24 + 8 * v23);
        if (!a4)
          v26 = v25;
        v27 = *v26;
        goto LABEL_28;
      }
      if (v19 != 5)
      {
LABEL_51:
        __break(0xC471u);
        JUMPOUT(0x198DB5E58);
      }
      if (a4)
      {
        __break(0xC471u);
        JUMPOUT(0x198DB5F30);
      }
      *(_OWORD *)(a3 + 8 * v9) = *(_OWORD *)(*(_QWORD *)v7 + 16 * (char)((v18 & 0x7F) - 32) + 280);
LABEL_14:
      v30 = ++v10;
      v4 = *a2;
      v9 += 2;
      v8 += 4;
      if (!*a2)
        return result;
    }
    if (v14 == 9)
    {
      v15 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 232) + *(_QWORD *)v13);
      v16 = (_DWORD *)(a3 + 8 * (v10 << v11));
      v17 = v4[v8 + 5];
      if (v17 >= 0x80000000)
        v17 = 0x80000000;
      switch(v17)
      {
        case 3u:
          *v16 = *v15;
          break;
        case 4u:
          *(_QWORD *)v16 = *(_QWORD *)v15;
          break;
        case 5u:
          *(_OWORD *)v16 = *(_OWORD *)v15;
          break;
        default:
          *(_QWORD *)v16 = *(_QWORD *)v15;
          break;
      }
      goto LABEL_14;
    }
    if (v14 != 11)
      goto LABEL_51;
    v22 = v4[v8 + 5];
    if (v22 >= 0x80000000)
      v22 = 0x80000000;
    switch(v22)
    {
      case 3u:
        *(_DWORD *)(a3 + 8 * (v10 << v11)) = *(_QWORD *)v13;
        goto LABEL_14;
      case 4u:
        v27 = *(_QWORD *)v13;
LABEL_28:
        *(_QWORD *)(a3 + 8 * (v10 << v11)) = v27;
        goto LABEL_14;
      case 5u:
        __break(0xC471u);
        JUMPOUT(0x198DB5F70);
    }
    v21 = *(_QWORD *)v13;
    goto LABEL_27;
  }
  return result;
}

void operationWasmTriggerTierUpNow(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _DWORD *v11;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  double v21;
  double v22;
  int v23;
  double v24;
  float v25;
  float v26;
  const void *v27;
  int v28;

  v28 = a2;
  v10 = *(_QWORD *)(a1[7] + 8 * *(unsigned __int8 *)(*(_QWORD *)(a1[8] + 8) + 6) + 16);
  v11 = *(_DWORD **)(v10 + 72);
  if (v11)
  {
    LODWORD(v11) = *v11;
    v12 = (_DWORD)v11 + a2;
    if (__CFADD__((_DWORD)v11, (_DWORD)a2))
    {
      __break(0xC471u);
      JUMPOUT(0x198DB6180);
    }
  }
  else
  {
    v12 = a2;
  }
  v13 = v12 - (_DWORD)v11;
  v14 = *(unsigned int **)(v10 + 24);
  if (*v14 <= v13)
  {
    __break(0xC471u);
    JUMPOUT(0x198DB61A0);
  }
  v15 = *(_QWORD **)&v14[2 * v13 + 2];
  v16 = v15[15];
  if (dword_1ECF4C708 >= 2)
  {
    if (qword_1ECF4C718 > a2 || HIDWORD(qword_1ECF4C718) < a2)
    {
      if (dword_1ECF4C708 == 2)
        goto LABEL_30;
    }
    else if (dword_1ECF4C708 != 2)
    {
      goto LABEL_30;
    }
  }
  if (BYTE1(qword_1ECF4C332))
  {
    v27 = (const void *)v15[14];
    WTF::dataLog<char [23],unsigned int,char [25],JSC::Wasm::TierUpCount,char [2],WTF::RawPointer,char [2]>(&v28, v16, &v27);
  }
  v17 = v15[14];
  LODWORD(v27) = a2;
  if (v17)
    goto LABEL_8;
  v20 = *(_DWORD *)(v16 + 8);
  v21 = (double)v20;
  v22 = *(float *)(v16 + 4) + (double)*(int *)v16;
  v23 = (int)xmmword_1ECF4C524 >= v20 ? *(_DWORD *)(v16 + 8) : xmmword_1ECF4C524;
  if (v22 >= v21 + (double)v23 * -0.5)
    goto LABEL_8;
  if (v20 != 0x7FFFFFFF)
  {
    v24 = v21 - v22;
    if (v24 > 0.0)
    {
      if (v24 > (double)(int)xmmword_1ECF4C524)
        v24 = (double)(int)xmmword_1ECF4C524;
      *(_DWORD *)v16 = (int)-v24;
      v25 = v22 + v24;
      *(float *)(v16 + 4) = v25;
      goto LABEL_23;
    }
    *(_DWORD *)v16 = 0;
    v26 = v22;
    *(float *)(v16 + 4) = v26;
LABEL_8:
    v18 = (_DWORD *)v15[3];
    if (v18)
      v19 = (*v18 != 0) | 0x100;
    else
      v19 = 256;
    JSC::Wasm::triggerOMGReplacementCompile((JSC::Wasm::TierUpCount *)v16, v17, a1, v10, a2, v19, a7, a8);
    goto LABEL_11;
  }
  *(_DWORD *)(v16 + 8) = 0x7FFFFFFF;
  *(_QWORD *)v16 = 0x80000000;
LABEL_23:
  if (BYTE1(qword_1ECF4C332))
  {
    WTF::dataLog<char [27],JSC::Wasm::TierUpCount,char [6],unsigned int,char [2]>(v16, &v27);
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<char [30],unsigned int,char [6],char [2]>(&v27);
  }
LABEL_11:
  if (!v15[14])
    return;
  if (!*(_QWORD *)(v16 + 24))
  {
    if (!BYTE1(qword_1ECF4C332))
      goto LABEL_30;
    WTF::dataLog<char [65],unsigned int,char [2]>(&v28);
    goto LABEL_38;
  }
  if (v15[13])
  {
    if (!BYTE1(qword_1ECF4C332))
    {
LABEL_30:
      *(_DWORD *)(v16 + 8) = 0x7FFFFFFF;
      *(_QWORD *)v16 = 0x80000000;
      return;
    }
    WTF::dataLog<char [61],unsigned int,char [2]>(&v28);
LABEL_38:
    LODWORD(v27) = a2;
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<unsigned int,char [35],char [2]>(&v27);
    goto LABEL_30;
  }
}

uint64_t JSC::Wasm::shouldTriggerOMGCompile(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  double v5;
  double v6;
  int v7;
  double v8;
  float v9;
  float v10;
  int v11;

  v11 = a3;
  if (a2)
    return 1;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = (double)v4;
  v6 = *(float *)(a1 + 4) + (double)*(int *)a1;
  v7 = (int)xmmword_1ECF4C524 >= v4 ? *(_DWORD *)(a1 + 8) : xmmword_1ECF4C524;
  if (v6 >= v5 + (double)v7 * -0.5)
    return 1;
  if (v4 != 0x7FFFFFFF)
  {
    v8 = v5 - v6;
    if (v8 > 0.0)
    {
      if (v8 > (double)(int)xmmword_1ECF4C524)
        v8 = (double)(int)xmmword_1ECF4C524;
      *(_DWORD *)a1 = (int)-v8;
      v9 = v6 + v8;
      *(float *)(a1 + 4) = v9;
      goto LABEL_12;
    }
    *(_DWORD *)a1 = 0;
    v10 = v6;
    *(float *)(a1 + 4) = v10;
    return 1;
  }
  *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
  *(_QWORD *)a1 = 0x80000000;
LABEL_12:
  if (BYTE1(qword_1ECF4C332))
  {
    WTF::dataLog<char [27],JSC::Wasm::TierUpCount,char [6],unsigned int,char [2]>(a1, &v11);
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<char [30],unsigned int,char [6],char [2]>(&v11);
  }
  return 0;
}

void JSC::Wasm::triggerOMGReplacementCompile(JSC::Wasm::TierUpCount *this, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v9;
  uint64_t *v12;
  unsigned __int8 *v13;
  int v15;
  int v16;
  double v17;
  float v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  _DWORD *v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  int v40;
  double v41;
  int v42;
  float v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned __int8 *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int *v58;
  int v59;
  uint64_t v60;
  int v61;
  char v62;
  uint64_t *v63;

  v59 = a5;
  if (a2)
  {
    JSC::Wasm::TierUpCount::optimizeSoon(this, a5);
    return;
  }
  v9 = a6;
  v12 = (uint64_t *)*(unsigned __int8 *)(*(_QWORD *)(a3[8] + 8) + 6);
  v13 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 12);
LABEL_7:
  if (v12 >= 2)
  {
    __break(1u);
LABEL_62:
    WTF::dataLog<char [27],unsigned int,char [2]>(&v59);
    goto LABEL_27;
  }
  v15 = 1;
  if (*((_BYTE *)v12 + (_QWORD)this + 13))
  {
    if (*((_BYTE *)v12 + (_QWORD)this + 13) == 1)
    {
      LODWORD(v60) = v59;
      if (BYTE1(qword_1ECF4C332))
        WTF::dataLog<unsigned int,char [32],char [2]>(&v60);
      v16 = DWORD2(xmmword_1ECF4C6D8);
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 2) = v16;
      if (v16 == 0x7FFFFFFF)
      {
        *((_DWORD *)this + 2) = 0x7FFFFFFF;
        *(_DWORD *)this = 0x80000000;
      }
      else if (v16 <= 0)
      {
        *((_DWORD *)this + 1) = 0;
      }
      else
      {
        v17 = (double)v16;
        if ((double)v16 > (double)(int)xmmword_1ECF4C524)
          v17 = (double)(int)xmmword_1ECF4C524;
        *(_DWORD *)this = (int)-v17;
        v18 = v17;
        *((float *)this + 1) = v18;
      }
      v15 = 1;
      v19 = 1;
    }
    else
    {
      v19 = 0;
    }
  }
  else
  {
    v19 = 0;
    *((_BYTE *)v12 + (_QWORD)this + 13) = 1;
    v15 = 0;
  }
  v20 = __ldxr(v13);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, v13))
LABEL_24:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 12, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (((v15 | v19) & 1) != 0)
    return;
  v12 = g_config;
  if (BYTE1(qword_1ECF4C332))
    goto LABEL_62;
LABEL_27:
  v21 = WTF::fastMalloc((WTF *)0x60);
  v22 = a3[1];
  v23 = (unsigned int *)a3[7];
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 + 1, v23));
  v63 = (uint64_t *)v23;
  v25 = v59;
  v26 = *(unsigned __int8 *)(a4 + 8);
  v27 = (_DWORD *)WTF::fastMalloc((WTF *)0x10);
  v27[2] = 1;
  *(_QWORD *)v27 = off_1E35B5C50;
  v60 = (uint64_t)v27;
  JSC::Wasm::OMGPlan::OMGPlan(v21, v22, (uint64_t *)&v63, v25, v9, v26, &v60);
  v28 = (unsigned int *)v60;
  v60 = 0;
  if (v28)
  {
    v29 = v28 + 2;
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v28 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
    }
  }
  v32 = (unsigned int *)v63;
  v63 = 0;
  if (v32)
  {
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v32);
      v60 = (uint64_t)v32;
      WTF::ThreadSafeRefCounted<JSC::Wasm::Module,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::Module **)&v60);
    }
  }
  v35 = atomic_load(&JSC::Wasm::ensureWorklist(void)::initializeWorklist);
  if (v35 != -1)
  {
    v60 = (uint64_t)&v62;
    v63 = &v60;
    std::__call_once(&JSC::Wasm::ensureWorklist(void)::initializeWorklist, &v63, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::ensureWorklist(void)::$_0 &&>>);
  }
  v36 = JSC::Wasm::globalWorklist;
  v37 = (unsigned int *)(v21 + 8);
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 + 1, v37));
  v58 = (unsigned int *)v21;
  JSC::Wasm::Worklist::enqueue(v36, &v58);
  v39 = v58;
  v58 = 0;
  if (v39)
  {
    v46 = v39 + 2;
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
    {
      atomic_store(1u, v39 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 8))(v39);
    }
  }
  if (*((_BYTE *)v12 + 1124))
  {
    LODWORD(v60) = v59;
    if (*((_BYTE *)v12 + 819))
      WTF::dataLog<unsigned int,char [32],char [2]>(&v60);
    v40 = *((_DWORD *)v12 + 440);
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = v40;
    if (v40 == 0x7FFFFFFF)
    {
      *((_DWORD *)this + 2) = 0x7FFFFFFF;
      *(_DWORD *)this = 0x80000000;
    }
    else if (v40 <= 0)
    {
      *((_DWORD *)this + 1) = 0;
    }
    else
    {
      v41 = (double)v40;
      v42 = *((_DWORD *)v12 + 329);
      if (v41 > (double)v42)
        v41 = (double)v42;
      *(_DWORD *)this = (int)-v41;
      v43 = v41;
      *((float *)this + 1) = v43;
    }
    goto LABEL_51;
  }
  v49 = (unsigned __int8 *)(v21 + 13);
  if (__ldaxr((unsigned __int8 *)(v21 + 13)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v49))
  {
    goto LABEL_67;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v21 + 13);
LABEL_67:
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21) & 1) == 0)
  {
    v60 = 0x7FF0000000000000;
    v61 = 0;
    WTF::Condition::waitUntilUnchecked<WTF::Lock>(v21 + 14, (unsigned __int8 *)(v21 + 13), (WTF::TimeWithDynamicClockType *)&v60);
  }
  v57 = __ldxr(v49);
  if (v57 == 1)
  {
    if (!__stlxr(0, v49))
      goto LABEL_51;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v21 + 13), 0, v51, v52, v53, v54, v55, v56);
  do
  {
LABEL_51:
    v44 = __ldaxr(v37);
    v45 = v44 - 1;
  }
  while (__stlxr(v45, v37));
  if (!v45)
  {
    atomic_store(1u, (unsigned int *)(v21 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
}

void operationWasmTriggerOSREntryNow(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::Wasm **v9;
  unsigned __int8 *v10;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  JSC::Wasm *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  double v40;
  double v41;
  int v42;
  double v43;
  float v44;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  JSC::Wasm *v56;
  __int16 v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  float v97;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  JSC::Wasm *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int *v109;
  unsigned int *v110;
  unsigned int *v111;
  JSC::Wasm *v112[4];
  _QWORD *v113;
  unsigned int v114;
  unsigned int v115;

  v12 = *a1;
  v13 = *(unsigned int **)(a1[1] + 8);
  v14 = *v13;
  v15 = v13[1];
  v115 = *v13;
  v114 = v15;
  v16 = *(_QWORD **)(v12 + 152);
  v113 = v16;
  v17 = *(unsigned __int8 *)(*(_QWORD *)(v16[8] + 8) + 6);
  v18 = *(_QWORD *)(v16[7] + 8 * v17 + 16);
  v19 = *(_DWORD **)(v18 + 72);
  if (v19)
  {
    LODWORD(v19) = *v19;
    v20 = (_DWORD)v19 + v14;
    if (__CFADD__((_DWORD)v19, v14))
    {
      __break(0xC471u);
      JUMPOUT(0x198DB6EF0);
    }
  }
  else
  {
    v20 = v14;
  }
  v21 = v20 - (_DWORD)v19;
  v22 = *(unsigned int **)(v18 + 24);
  if (*v22 <= v21)
  {
    __break(0xC471u);
    goto LABEL_143;
  }
  v9 = *(JSC::Wasm ***)&v22[2 * v21 + 2];
  v8 = (uint64_t)v9[15];
  v10 = (unsigned __int8 *)g_config;
  if (dword_1ECF4C708 < 2)
    goto LABEL_5;
  if (qword_1ECF4C718 > v14 || HIDWORD(qword_1ECF4C718) < v14)
  {
    if (dword_1ECF4C708 != 2)
      goto LABEL_5;
LABEL_153:
    *(_DWORD *)(v8 + 8) = 0x7FFFFFFF;
    *(_QWORD *)v8 = 0x80000000;
LABEL_27:
    *(_QWORD *)(v12 + 64) = 0;
    return;
  }
  if (dword_1ECF4C708 != 2)
    goto LABEL_153;
LABEL_5:
  if (BYTE1(qword_1ECF4C332))
    goto LABEL_144;
  while (1)
  {
    if (!v10[1749])
    {
      if (JSC::Wasm::shouldTriggerOMGCompile(v8, (uint64_t)v9[14], v115))
      {
        v106 = v9[3];
        if (v106)
          v107 = (*(_DWORD *)v106 != 0) | 0x100;
        else
          v107 = 256;
        JSC::Wasm::triggerOMGReplacementCompile((JSC::Wasm::TierUpCount *)v8, (uint64_t)v9[14], v16, v18, v115, v107, v104, v105);
      }
      if (!v9[14] || *(_QWORD *)(v8 + 24) && !v9[13])
        goto LABEL_26;
      LODWORD(v112[0]) = v115;
      if (v10[819])
        WTF::dataLog<unsigned int,char [35],char [2]>(v112);
      *(_DWORD *)(v8 + 8) = 0x7FFFFFFF;
      *(_QWORD *)v8 = 0x80000000;
      return;
    }
    v108 = (uint64_t)v13;
    v10 = (unsigned __int8 *)(v8 + 12);
    if (__ldaxr((unsigned __int8 *)(v8 + 12)))
    {
      __clrex();
LABEL_9:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 12);
      goto LABEL_10;
    }
    if (__stxr(1u, v10))
      goto LABEL_9;
LABEL_10:
    if (v17 < 2)
      break;
LABEL_143:
    __break(1u);
LABEL_144:
    v112[0] = v9[14];
    WTF::dataLog<char [28],unsigned int,char [13],unsigned int,char [24],JSC::Wasm::TierUpCount,char [2],WTF::RawPointer,char [2]>(&v115, &v114, v8, (const void **)v112);
  }
  v24 = v8 + 15;
  v25 = *(unsigned __int8 *)(v8 + 15 + v17);
  v26 = __ldxr(v10);
  if (v26 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v10))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 12), 0, a3, a4, a5, a6, a7, a8);
  v27 = (unint64_t)v114 >> 4;
  if (v27 >= *(unsigned int *)(v8 + 44))
  {
    __break(0xC471u);
    JUMPOUT(0x198DB7040);
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 8 * v27) + (v114 & 0xF)) != 2)
  {
    v28 = 0;
    goto LABEL_19;
  }
  if (__ldaxr(v10))
  {
    __clrex();
    goto LABEL_111;
  }
  if (__stxr(1u, v10))
LABEL_111:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 12);
  v99 = (unint64_t)v114 >> 4;
  if (v99 >= *(unsigned int *)(v8 + 44))
  {
    __break(0xC471u);
    JUMPOUT(0x198DB7048);
  }
  v100 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8 * v99);
  v101 = v114 & 0xF;
  v102 = *(unsigned __int8 *)(v100 + v101);
  v28 = v102 == 2;
  if (v102 == 2)
    *(_BYTE *)(v100 + v101) = 0;
  v103 = __ldxr(v10);
  if (v103 != 1)
  {
    __clrex();
    goto LABEL_128;
  }
  if (__stlxr(0, v10))
LABEL_128:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 12), 0, a3, a4, a5, a6, a7, a8);
LABEL_19:
  if (v25 == 1)
  {
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<char [37],unsigned int,char [2]>(&v115);
    goto LABEL_84;
  }
  v29 = (uint64_t)v9[13];
  if (v29 && *(_DWORD *)(v29 + 108) == v114)
    goto LABEL_122;
  v30 = (uint64_t)v9[14];
  LODWORD(v112[0]) = v115;
  if (v30
    || ((v39 = *(_DWORD *)(v8 + 8),
         v40 = (double)v39,
         v41 = *(float *)(v8 + 4) + (double)*(int *)v8,
         (int)xmmword_1ECF4C524 >= v39)
      ? (v42 = *(_DWORD *)(v8 + 8))
      : (v42 = xmmword_1ECF4C524),
        v41 >= v40 + (double)v42 * -0.5))
  {
LABEL_22:
    if (v28)
      goto LABEL_43;
    v31 = v9[3];
    if (v31)
      LODWORD(v31) = *(_DWORD *)v31 != 0;
    JSC::Wasm::triggerOMGReplacementCompile((JSC::Wasm::TierUpCount *)v8, v30, v16, v18, v115, v31 | 0x100, a7, a8);
    if (v9[14])
    {
      v29 = (uint64_t)v9[13];
      if (!v29)
      {
        v112[0] = (JSC::Wasm *)v8;
        v112[1] = (JSC::Wasm *)&v114;
        v112[2] = (JSC::Wasm *)v9;
        v112[3] = (JSC::Wasm *)&v115;
        if (!operationWasmTriggerOSREntryNow::$_2::operator()((uint64_t *)v112, v32, v33, v34, v35, v36, v37, v38))goto LABEL_44;
        goto LABEL_84;
      }
LABEL_121:
      if (*(_DWORD *)(v29 + 108) != v114)
      {
        LODWORD(v112[0]) = v115;
        if (!BYTE1(qword_1ECF4C332))
          goto LABEL_103;
        goto LABEL_126;
      }
LABEL_122:
      if ((operationWasmTriggerOSREntryNow::$_1::operator()((uint64_t)&v113, v29) & 1) == 0)
        goto LABEL_26;
      v90 = (uint64_t)v16;
      v91 = (uint64_t)a1;
      v92 = (uint64_t)v9;
      v93 = (unsigned int *)v29;
      goto LABEL_124;
    }
LABEL_26:
    v12 = *a1;
    goto LABEL_27;
  }
  if (v39 == 0x7FFFFFFF)
  {
    *(_DWORD *)(v8 + 8) = 0x7FFFFFFF;
    *(_QWORD *)v8 = 0x80000000;
    goto LABEL_40;
  }
  v43 = v40 - v41;
  if (v43 <= 0.0)
  {
    *(_DWORD *)v8 = 0;
    v97 = v41;
    *(float *)(v8 + 4) = v97;
    goto LABEL_22;
  }
  if (v43 > (double)(int)xmmword_1ECF4C524)
    v43 = (double)(int)xmmword_1ECF4C524;
  *(_DWORD *)v8 = (int)-v43;
  v44 = v41 + v43;
  *(float *)(v8 + 4) = v44;
LABEL_40:
  if (BYTE1(qword_1ECF4C332))
  {
    WTF::dataLog<char [27],JSC::Wasm::TierUpCount,char [6],unsigned int,char [2]>(v8, v112);
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<char [30],unsigned int,char [6],char [2]>(v112);
  }
  if (!v28)
    goto LABEL_26;
  v29 = (uint64_t)v9[13];
LABEL_43:
  if (v29)
    goto LABEL_121;
LABEL_44:
  if (__ldaxr(v10))
  {
    __clrex();
    goto LABEL_46;
  }
  if (__stxr(1u, v10))
LABEL_46:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 12);
  if (*(_BYTE *)(v24 + v17))
  {
    v86 = __ldxr(v10);
    if (v86 == 1)
    {
      if (!__stlxr(0, v10))
        goto LABEL_83;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 12), 0, a3, a4, a5, a6, a7, a8);
    goto LABEL_83;
  }
  *(_BYTE *)(v24 + v17) = 1;
  v46 = *(_QWORD *)(v8 + 24);
  if (v46)
  {
    v47 = 0;
    v48 = *(unsigned int *)(v8 + 44);
    do
    {
      if (v47 >> 4 >= v48)
      {
        __break(0xC471u);
        JUMPOUT(0x198DB7038);
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 8 * (v47 >> 4)) + (v47 & 0xF)) = 0;
      ++v47;
    }
    while (v46 != v47);
  }
  v49 = __ldxr(v10);
  if (v49 != 1)
  {
    __clrex();
    goto LABEL_56;
  }
  if (__stlxr(0, v10))
LABEL_56:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 12), 0, a3, a4, a5, a6, a7, a8);
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<char [19],unsigned int,char [2]>(&v115);
  v50 = WTF::fastMalloc((WTF *)0x70);
  v51 = v16[1];
  v52 = (unsigned int *)v16[7];
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 + 1, v52));
  v111 = v52;
  do
    v54 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v54 + 1, (unsigned int *)v9));
  v112[0] = (JSC::Wasm *)v9;
  v55 = v115;
  v56 = v9[3];
  if (v56)
    v57 = (*(_DWORD *)v56 != 0) | 0x100;
  else
    v57 = 256;
  v58 = v114;
  v59 = *(unsigned __int8 *)(v18 + 8);
  v60 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v60 + 8) = 1;
  *(_QWORD *)v60 = off_1E35B5C50;
  v110 = (unsigned int *)v60;
  JSC::Wasm::OSREntryPlan::OSREntryPlan(v50, v51, (uint64_t *)&v111, (uint64_t *)v112, v55, v57, v58, v59, (uint64_t *)&v110);
  v68 = v110;
  v110 = 0;
  if (v68)
  {
    v69 = v68 + 2;
    do
    {
      v70 = __ldaxr(v69);
      v71 = v70 - 1;
    }
    while (__stlxr(v71, v69));
    if (!v71)
    {
      atomic_store(1u, v68 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v68 + 8))(v68);
    }
  }
  v72 = (unsigned int *)v112[0];
  v112[0] = 0;
  if (v72)
  {
    do
    {
      v73 = __ldaxr(v72);
      v74 = v73 - 1;
    }
    while (__stlxr(v74, v72));
    if (!v74)
    {
      atomic_store(1u, v72);
      JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v72, v61, v62, v63, v64, v65, v66, v67);
    }
  }
  v75 = v111;
  v111 = 0;
  if (v75)
  {
    do
    {
      v84 = __ldaxr(v75);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v75));
    if (!v85)
    {
      atomic_store(1u, v75);
      v112[0] = (JSC::Wasm *)v75;
      WTF::ThreadSafeRefCounted<JSC::Wasm::Module,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v112);
    }
  }
  v76 = JSC::Wasm::ensureWorklist((JSC::Wasm *)v72);
  v77 = (unsigned int *)v50;
  v78 = (unsigned int *)(v50 + 8);
  do
    v79 = __ldaxr(v78);
  while (__stlxr(v79 + 1, v78));
  v109 = v77;
  JSC::Wasm::Worklist::enqueue(v76, &v109);
  v80 = v109;
  v109 = 0;
  if (v80)
  {
    v94 = v80 + 2;
    do
    {
      v95 = __ldaxr(v94);
      v96 = v95 - 1;
    }
    while (__stlxr(v96, v94));
    if (!v96)
    {
      atomic_store(1u, v80 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v80 + 8))(v80);
    }
  }
  if (byte_1ECF4C464)
    JSC::Wasm::TierUpCount::setOptimizationThresholdBasedOnCompilationResult(v8, v115);
  else
    JSC::Wasm::Plan::waitForCompletion((JSC::Wasm::Plan *)v77);
  do
  {
    v81 = __ldaxr(v78);
    v82 = v81 - 1;
  }
  while (__stlxr(v82, v78));
  if (!v82)
  {
    atomic_store(1u, v77 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v77 + 8))(v77);
  }
LABEL_83:
  v83 = (unsigned int *)v9[13];
  if (!v83)
  {
LABEL_84:
    JSC::Wasm::TierUpCount::setOptimizationThresholdBasedOnCompilationResult(v8, v115);
    goto LABEL_26;
  }
  if (v83[27] != v114)
  {
    LODWORD(v112[0]) = v115;
    if (!BYTE1(qword_1ECF4C332))
    {
LABEL_103:
      *(_DWORD *)(v8 + 8) = 0x7FFFFFFF;
      *(_QWORD *)v8 = 0x80000000;
      goto LABEL_26;
    }
LABEL_126:
    WTF::dataLog<unsigned int,char [35],char [2]>(v112);
    goto LABEL_103;
  }
  if ((operationWasmTriggerOSREntryNow::$_1::operator()((uint64_t)&v113, (uint64_t)v9[13]) & 1) == 0)
    goto LABEL_26;
  v90 = (uint64_t)v16;
  v91 = (uint64_t)a1;
  v92 = (uint64_t)v9;
  v93 = v83;
LABEL_124:
  JSC::Wasm::doOSREntry(v90, v91, v92, v93, v108, v87, v88, v89);
}

uint64_t JSC::Wasm::TierUpCount::setOptimizationThresholdBasedOnCompilationResult(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  double v4;
  float v5;
  int v6;

  v2 = result;
  v6 = a2;
  if (BYTE1(qword_1ECF4C332))
    result = WTF::dataLog<unsigned int,char [32],char [2]>(&v6);
  v3 = DWORD2(xmmword_1ECF4C6D8);
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = v3;
  if (v3 == 0x7FFFFFFF)
  {
    *(_DWORD *)(v2 + 8) = 0x7FFFFFFF;
    *(_DWORD *)v2 = 0x80000000;
  }
  else if (v3 <= 0)
  {
    *(_DWORD *)(v2 + 4) = 0;
  }
  else
  {
    v4 = (double)v3;
    if ((double)v3 > (double)(int)xmmword_1ECF4C524)
      v4 = (double)(int)xmmword_1ECF4C524;
    *(_DWORD *)v2 = (int)-v4;
    v5 = v4;
    *(float *)(v2 + 4) = v5;
  }
  return result;
}

uint64_t operationWasmTriggerOSREntryNow::$_1::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  BOOL v5;
  BOOL v6;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t *v11;

  v2 = *(int *)(a2 + 112);
  if ((_DWORD)v2 == -1)
    return 1;
  v3 = (char *)&v8 - v2;
  v4 = *(char **)(*(_QWORD *)a1 + 16);
  if (v3 < (char *)&v8)
  {
    v5 = v3 >= v4;
    v6 = v3 == v4;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  if (!v6 && v5)
    return 1;
  if (BYTE1(qword_1ECF4C332))
  {
    v11 = &v8;
    v9 = v4;
    v10 = v3;
    WTF::dataLog<char [47],WTF::RawHex,char [5],WTF::RawHex,char [21],WTF::RawHex,char [2]>("Skipping OMG loop tier up due to stack check; ",
      (const void **)&v11,
      " -> ",
      (const void **)&v10,
      " is past soft limit ",
      (const void **)&v9,
      "\n");
  }
  return 0;
}

uint64_t JSC::Wasm::doOSREntry(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  unint64_t v13;
  unsigned int **v14;
  uint64_t result;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int **v33;
  unsigned int *v34;

  v12 = a4[26];
  v14 = (unsigned int **)(a5 + 8);
  v13 = *(_QWORD *)(a5 + 8);
  if (v13)
    v13 = *(unsigned int *)v13;
  if (v13 << (*(_DWORD *)(a3 + 172) == 0) != v12)
    goto LABEL_31;
  result = JSC::Wasm::Context::scratchBufferForSize((JSC::Wasm::Context *)(*(_QWORD *)(a1 + 8) + 41464), v12, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (result)
  {
    v16 = result;
    if (BYTE1(qword_1ECF4C332))
    {
      LODWORD(v33) = *(_DWORD *)a5;
      v34 = a4;
      WTF::dataLog<unsigned int,char [34],WTF::RawPointer,char [2]>(&v33, (const void **)&v34);
    }
    JSC::Wasm::loadValuesIntoBuffer(a2, v14, v16, *(_DWORD *)(a3 + 172));
    v33 = &v34;
    v34 = 0;
    JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::calleeSaveRegisters(void)::$_0>((_BYTE *)a3, &v33);
    v17 = *(unsigned int **)v34;
    if (*(_QWORD *)v34)
      v18 = (uint64_t *)(*(_QWORD *)v34 + 8);
    else
      v18 = 0;
    if (v17)
      v19 = *(_QWORD *)v34 + 8 + 8 * *v17;
    else
      v19 = 0;
    if (v18 != (uint64_t *)v19)
    {
      v20 = *(_QWORD *)a2;
      v21 = *(_QWORD *)a2 + 280;
      if (*(_DWORD *)(a3 + 172))
      {
        while (1)
        {
          v22 = *v18;
          v23 = *v18 & 0x7F;
          if (v23 >= 0x40)
            break;
          if (((1 << v23) & 0xA0000000) == 0)
          {
            v24 = *(_QWORD *)(v20 + 232);
            v25 = (v22 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
            if ((v22 & 0x60) != 0)
              *(_QWORD *)(v21 + ((((*v18 & 0x7F) << 56) - 0x2000000000000000) >> 53)) = *(_QWORD *)(v24 + v25);
            else
              *(_QWORD *)(v20 + 8 * v23) = *(_QWORD *)(v24 + v25);
          }
          if (++v18 == (uint64_t *)v19)
            goto LABEL_28;
        }
      }
      else
      {
        while (1)
        {
          v27 = *v18;
          v28 = *v18 & 0x7F;
          if (v28 > 0x3F)
            break;
          if (((1 << v28) & 0xA0000000) == 0)
          {
            v29 = *(_QWORD *)(v20 + 232);
            v30 = (v27 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
            if ((v27 & 0x60) != 0)
              *(_QWORD *)(v21 + ((((*v18 & 0x7F) << 56) - 0x2000000000000000) >> 52)) = *(_QWORD *)(v29 + v30);
            else
              *(_QWORD *)(v20 + 8 * v28) = *(_QWORD *)(v29 + v30);
          }
          if (++v18 == (uint64_t *)v19)
            goto LABEL_28;
        }
      }
      __break(1u);
LABEL_31:
      __break(0xC471u);
      JUMPOUT(0x198DB73E0);
    }
LABEL_28:
    v31 = *(_QWORD **)(*(_QWORD *)a2 + 232);
    *(_QWORD *)(*(_QWORD *)a2 + 232) = *v31;
    v32 = *(_QWORD *)a2;
    *(_QWORD *)(v32 + 240) = v31[1];
    *(_QWORD *)(v32 + 248) = v31 + 2;
    **(_QWORD **)a2 = v16;
    v33 = &v34;
    v34 = 0;
    result = JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>((uint64_t)a4, (uint64_t **)&v33);
    v26 = v34;
  }
  else
  {
    v26 = 0;
  }
  *(_QWORD *)(*(_QWORD *)a2 + 64) = v26;
  return result;
}

uint64_t operationWasmTriggerOSREntryNow::$_2::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v11;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;

  v8 = *a1;
  v9 = *(unsigned int *)a1[1];
  if (*(_DWORD *)(*a1 + 60) <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x198DB7584);
  }
  v24 = *(_DWORD *)(*(_QWORD *)(v8 + 48) + 4 * v9);
  v11 = (unsigned __int8 *)(v8 + 12);
  if (__ldaxr((unsigned __int8 *)(v8 + 12)))
  {
    __clrex();
LABEL_5:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11);
    goto LABEL_6;
  }
  if (__stxr(1u, v11))
    goto LABEL_5;
LABEL_6:
  v13 = v24;
  if (*(_BYTE *)(a1[2] + 168))
    v14 = 1;
  else
    v14 = v24 == 0xFFFFFFFFLL;
  if (v14)
  {
    v15 = 0;
    goto LABEL_21;
  }
  v16 = *a1;
  v17 = *(unsigned int *)(*a1 + 44);
  while (1)
  {
    v18 = v13 >> 4;
    if (v13 >> 4 >= v17)
    {
      __break(0xC471u);
      goto LABEL_31;
    }
    v19 = v13 & 0xF;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 8 * v18) + v19) != 2)
      break;
    if (*(unsigned int *)(v16 + 60) <= v13)
    {
      __break(0xC471u);
      JUMPOUT(0x198DB757CLL);
    }
    v13 = *(unsigned int *)(*(_QWORD *)(v16 + 48) + 4 * v13);
    if ((_DWORD)v13 == -1)
    {
      v15 = 0;
      v24 = -1;
      goto LABEL_21;
    }
  }
  v24 = v13;
  if (BYTE1(qword_1ECF4C332))
  {
    v22 = v13 >> 4;
    v23 = v13 & 0xF;
    WTF::dataLog<char [22],unsigned int,char [5],unsigned int,char [32],unsigned int,char [28],char [2]>((_DWORD *)a1[1], (_DWORD *)a1[3], &v24);
    v18 = v22;
    v19 = v23;
    v16 = *a1;
    v17 = *(unsigned int *)(*a1 + 44);
  }
  if (v18 >= v17)
  {
    __break(0xC471u);
LABEL_31:
    JUMPOUT(0x198DB7574);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 8 * v18) + v19) = 2;
  v15 = 1;
LABEL_21:
  v20 = __ldxr(v11);
  if (v20 == 1)
  {
    if (!__stlxr(0, v11))
      return v15;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, a3, a4, a5, a6, a7, a8);
  return v15;
}

void JSC::Wasm::Plan::waitForCompletion(JSC::Wasm::Plan *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v2 = (unsigned __int8 *)this + 13;
  if (__ldaxr((unsigned __int8 *)this + 13))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 13);
LABEL_5:
  if (((*(uint64_t (**)(JSC::Wasm::Plan *))(*(_QWORD *)this + 40))(this) & 1) == 0)
  {
    v11 = 0x7FF0000000000000;
    v12 = 0;
    WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)this + 14, v2, (WTF::TimeWithDynamicClockType *)&v11);
  }
  v10 = __ldxr(v2);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v2))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v4, v5, v6, v7, v8, v9);
}

uint64_t operationWasmLoopOSREnterBBQJIT(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  unint64_t v19;

  v2 = **(uint64_t ***)a1;
  v3 = *v2;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 232) + 24);
  v5 = qword_1ECF4C080;
  result = JSC::Wasm::TierUpCount::osrEntryData(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v2);
  if (*(_DWORD *)(result + 4) != (_DWORD)v3)
  {
    __break(0xC471u);
    JUMPOUT(0x198DB77C4);
  }
  v7 = *(unsigned int **)(result + 8);
  if (v7)
    v8 = v7 + 2;
  else
    v8 = 0;
  if (v7)
    v9 = (uint64_t)&v7[4 * *v7 + 2];
  else
    v9 = 0;
  if (v8 != (unsigned int *)v9)
  {
    v10 = *(uint64_t ***)a1;
    v11 = *(_QWORD *)a1 + 280;
    v12 = 1;
    do
    {
      v13 = v2[v12];
      v14 = *((unsigned __int8 *)v8 + 8);
      if ((v14 - 6) <= 2)
      {
        v18 = *(_BYTE *)v8;
        if ((*(_BYTE *)v8 & 0x60) == 0x20)
        {
          *(double *)(v11 + 8 * (char)((v18 & 0x7F) - 32)) = (double)v13;
        }
        else if ((*(_BYTE *)v8 & 0x60) == 0)
        {
          v10[v18 & 0x7F] = (uint64_t *)v13;
        }
      }
      else if (v14 == 9)
      {
        v15 = v8[3];
        if (v15 >= 0x80000000)
          v15 = 0x80000000;
        result = v15 - 1;
        v16 = v10[29];
        v17 = *(_QWORD *)v8;
        switch((int)result)
        {
          case 0:
          case 2:
            *(_DWORD *)((char *)v16 + v17) = v13;
            break;
          case 1:
          case 3:
            *(uint64_t *)((char *)v16 + v17) = v13;
            break;
          case 4:
            __break(0xC471u);
            JUMPOUT(0x198DB7804);
          default:
            __break(0xC471u);
            JUMPOUT(0x198DB77E4);
        }
      }
      v8 += 4;
      ++v12;
    }
    while (v8 != (unsigned int *)v9);
  }
  v19 = (v4 & 0xFFFFFFFFFFFFFFFCLL) + v5;
  if (v3 >= (unint64_t)*(unsigned int *)(v19 + 156))
  {
    __break(0xC471u);
    JUMPOUT(0x198DB780CLL);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 64) = *(_QWORD *)(*(_QWORD *)(v19 + 144) + 8 * v3);
  return result;
}

uint64_t operationWasmUnwind(uint64_t a1, uint64_t a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC *v8;
  JSC::VM *vars0;

  v8 = *(JSC **)(a1 + 8);
  *((_QWORD *)v8 + 5) = vars0;
  JSC::genericUnwind(v8, vars0, a3, a4, a5, a6, a7, a8);
  return *((_QWORD *)v8 + 11311);
}

uint64_t operationConvertToI64(uint64_t a1, JSC::Structure *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGlobalObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  JSC::Structure *var18[4];

  v9 = *(JSC::JSGlobalObject **)(a1 + 32);
  *(JSC::Structure **)(*(_QWORD *)(a1 + 8) + 40) = var18[3];
  var18[0] = a2;
  v10 = *((_QWORD *)v9 + 7);
  JSC::JSValue::toBigInt(var18, v9, a3, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v10 + 80))
  {
    v21 = *(_DWORD *)(v10 + 80);
    if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
    {
      v22 = v11;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v12, v13, v14, v15, v16, v17);
      v11 = v22;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (!*(_DWORD *)(v11 + 8))
    return 0;
  v18 = *(_QWORD *)(v11 + 24);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v18 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v19 = *(_QWORD *)v18;
  if (*(_BYTE *)(v11 + 16))
    return -v19;
  else
    return v19;
}

void operationConvertToF64(uint64_t a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGlobalObject *v10;
  JSC::JSObject *var8[2];

  v10 = *(JSC::JSGlobalObject **)(a1 + 32);
  *(JSC::JSObject **)(*(_QWORD *)(a1 + 8) + 40) = var8[1];
  var8[0] = a2;
  if ((unint64_t)a2 < 0xFFFE000000000000 && (unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    JSC::JSValue::toNumberSlowCase(var8, v10, a3, a4, a5, a6, a7, a8, a9);
}

JSC::JSObject *operationConvertToI32(uint64_t a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGlobalObject *v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  JSC::JSObject *var8[2];

  v10 = *(JSC::JSGlobalObject **)(a1 + 32);
  *(JSC::JSObject **)(*(_QWORD *)(a1 + 8) + 40) = var8[1];
  var8[0] = a2;
  if ((unint64_t)a2 < 0xFFFE000000000000)
  {
    v12 = (unint64_t)a2 - 0x2000000000000;
    if (v12 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase(var8, v10, a3, a4, a5, a6, a7, a8, a9);
      v12 = v16;
    }
    v13 = (v12 >> 52) & 0x7FF;
    if ((v13 - 1023) <= 0x53)
    {
      v14 = v12 >> (51 - (v12 >> 52));
      if (v13 > 0x433)
        LODWORD(v14) = v12 << ((v12 >> 52) - 51);
      if (v13 >= 0x41F)
        v15 = v14;
      else
        v15 = (((1 << ((v12 >> 52) + 1)) - 1) & v14) + (1 << ((v12 >> 52) + 1));
      if ((v12 & 0x8000000000000000) == 0)
        return (JSC::JSObject *)v15;
      else
        return (JSC::JSObject *)-v15;
    }
    else
    {
      return 0;
    }
  }
  return a2;
}

float operationConvertToF32(uint64_t a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGlobalObject *v10;
  unint64_t v11;
  double v12;
  JSC::JSObject *var8[2];

  v10 = *(JSC::JSGlobalObject **)(a1 + 32);
  *(JSC::JSObject **)(*(_QWORD *)(a1 + 8) + 40) = var8[1];
  var8[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    return (float)(int)a2;
  }
  else
  {
    v11 = (unint64_t)a2 - 0x2000000000000;
    if (v11 > 0xFFFBFFFFFFFFFFFFLL)
      JSC::JSValue::toNumberSlowCase(var8, v10, a3, a4, a5, a6, a7, a8, a9);
    else
      return *(double *)&v11;
  }
  return v12;
}

uint64_t operationConvertToFuncref(uint64_t a1, uint64_t a2, uint64_t a3)
{
  JSC::VM **v3;
  unint64_t v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v11;
  JSC::VM *var8[2];

  v3 = *(JSC::VM ***)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 32);
  v3[5] = var8[1];
  var8[0] = (JSC::VM *)v3;
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) < 0x17u)
    goto LABEL_5;
  v5 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C));
  if (v5 == &JSC::WebAssemblyFunction::s_info)
  {
    v6 = 0;
    v7 = a3;
    goto LABEL_7;
  }
  if (v5 == &JSC::WebAssemblyWrapperFunction::s_info)
  {
    v7 = 0;
    v6 = a3;
  }
  else
  {
LABEL_5:
    if (a3 != 2)
    {
      JSC::throwTypeError(v4, var8, (uint64_t)"Funcref value is not a function", 32);
      return 0;
    }
    v6 = 0;
    v7 = 0;
  }
LABEL_7:
  v8 = *(_QWORD *)(a2 + 8);
  if (BYTE1(dword_1ECF4C7B0))
    v9 = (*(_BYTE *)v8 + 29) > 1u;
  else
    v9 = 1;
  if (!v9)
  {
    v11 = *(_QWORD *)(v8 + 8);
    if (v11 <= 0xFFFFFFFFFFFFFFC0 && a3 != 2)
    {
      if (!v7)
        v7 = v6;
      if (v11 != *(_QWORD *)(v7 + 40))
        return JSC::throwTypeError(v4, var8, (uint64_t)"Argument function did not match the reference type", 51);
    }
  }
  return a3;
}

unint64_t operationConvertToAnyref(uint64_t a1, uint64_t a2, unint64_t a3, __n128 a4, __n128 a5)
{
  JSC::VM **v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  double v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  JSC::VM *var18[4];

  v6 = *(JSC::VM ***)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 32);
  v6[5] = var18[3];
  var18[0] = (JSC::VM *)v6;
  v8 = *(char **)(a2 + 8);
  v9 = *((_QWORD *)v8 + 1);
  v10 = *v8;
  *(_QWORD *)&v11 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL
    && (*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    a4.n128_u64[0] = a3 - 0x2000000000000;
    a5.n128_f64[0] = (double)(int)v11;
    if (a5.n128_f64[0] == v11 && ((*(_QWORD *)&v11 & 0x8000000000000000) == 0 || (int)v11))
    {
      v12 = (*(_QWORD *)&v11 >> 52) & 0x7FFLL;
      if ((v12 - 1023) > 0x53)
      {
        v13 = 0;
LABEL_17:
        a3 = v13 | 0xFFFE000000000000;
        goto LABEL_18;
      }
      v14 = *(_QWORD *)&v11 >> (51 - (*(_QWORD *)&v11 >> 52));
      if (v12 > 0x433)
        LODWORD(v14) = a3 << ((*(_QWORD *)&v11 >> 52) - 51);
      if (v12 >= 0x41F)
        v15 = v14;
      else
        v15 = (((1 << ((*(_QWORD *)&v11 >> 52) + 1)) - 1) & v14) + (1 << ((*(_QWORD *)&v11 >> 52) + 1));
      if (v11 >= 0.0)
        v13 = v15;
      else
        v13 = -v15;
      if ((int)(v13 + 0x40000000) >= 0)
        goto LABEL_17;
    }
  }
LABEL_18:
  if ((((uint64_t (*)(unint64_t, _QWORD, uint64_t, __n128, __n128))JSC::Wasm::TypeInformation::castReference)(a3, ((v10 + 29) < 0xEu) & (0x3001u >> (v10 + 29)), v9, a4, a5) & 1) == 0)
  {
    JSC::throwTypeError(v7, var18, (uint64_t)"Argument value did not match reference type", 44);
    return 0;
  }
  return a3;
}

uint64_t operationConvertToBigInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::JSBigInt *v9;
  uint64_t vars0;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(JSC::JSBigInt **)(a1 + 32);
  *(_QWORD *)(v8 + 40) = vars0;
  return JSC::JSBigInt::createFrom(v9, a2, a3, a4, a5, a6, a7, a8);
}

void operationIterateResults(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  JSC::VM *v8;
  unint64_t v9;
  unsigned __int8 **v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  JSC::VM *v39;
  unint64_t v40;
  uint64_t Index;
  uint64_t v42;
  int v43;
  unint64_t OutOfMemoryError;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  JSC::Exception *v51;
  _QWORD *v52;
  WTF *i;
  char v54;
  unsigned int v55;
  int v56;
  JSC::VM *v57;
  JSC::VM *v58;
  uint64_t v59;
  unint64_t v60;
  JSC::JSGlobalObject *v61;
  uint64_t v62;
  uint64_t v63;
  const WTF::String *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  JSC::Exception *v72;
  WTF::StringImpl *v73;
  unint64_t v74;
  unint64_t v75;
  unsigned __int8 *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  char v85;
  unsigned int v86;
  BOOL v89;
  BOOL v90;
  double v91;
  uint64_t v92;
  unsigned int v93;
  char **v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  unsigned int v104;
  int v105;
  char *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF *v128;
  WTF *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _BOOL4 v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  JSC::Exception *v146;
  _QWORD *v147;
  int v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  const char *v152;
  uint64_t v153;
  JSC::VMTraps *v154;
  char *v157;
  uint64_t v158;
  _OWORD *v159;
  _OWORD v160[4];
  uint64_t v161;
  WTF *v162;
  char v163[32];
  WTF *v164;
  int v165;
  WTF *v166;
  int v167;
  unsigned int v168;
  uint64_t v169;
  JSC::VM *v170;
  WTF::StringImpl *v171[3];
  uint64_t var60[13];

  v8 = *(JSC::VM **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)v8 + 5) = var60[12];
  v170 = v8;
  v10 = (unsigned __int8 **)(a2 + 8);
  if (*(_DWORD *)(a2 + 32))
    v11 = 0;
  else
    v11 = a2 + 8;
  v12 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v12 != -1)
  {
    *(_QWORD *)v163 = v171;
    v157 = v163;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v157, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (*(_DWORD *)(a2 + 32))
    v13 = 0;
  else
    v13 = v10;
  v14 = JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v13, 1, v163);
  v20 = 0;
  v21 = 0;
  if (v168)
  {
    v21 = 0;
    v20 = 0;
    for (i = v166; i != (WTF *)((char *)v166 + 24 * v168); i = (WTF *)((char *)i + 24))
    {
      v54 = *(_BYTE *)i;
      if (*((_BYTE *)i + 8))
      {
        if (*((_BYTE *)i + 8) == 1)
        {
          v55 = (v54 + 32) & 0x7F;
          if (v55 >= 0x40)
          {
LABEL_285:
            __break(1u);
            goto LABEL_286;
          }
          v21 |= 1 << v55;
          if (*((unsigned __int8 *)i + 16) >= 4u && (v55 & 0x60) == 0x20)
            v20 |= 1 << v55;
        }
      }
      else
      {
        if ((*(_BYTE *)i & 0x40) != 0)
          goto LABEL_285;
        v21 |= 1 << v54;
      }
    }
  }
  JSC::RegisterAtOffsetList::RegisterAtOffsetList((unsigned int **)&v162, v21, v20, 1);
  LOBYTE(v157) = 0;
  v158 = 0x800000000;
  v159 = (_OWORD *)((char *)v160 + 8);
  v29 = 0uLL;
  memset(v160, 0, sizeof(v160));
  v161 = 0;
  v30 = *(unsigned int *)(v11 + 12);
  if (v30 >= 9
    && ((v30 & 0x80000000) != 0
     || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v158, v30)))
  {
    LOBYTE(v157) = 1;
  }
  v31 = *(_QWORD *)(v9 + 56);
  if ((a3 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a3 + 5) == 36)
  {
    v32 = *(unsigned __int8 *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 8);
    v33 = (v32 & 0x10) != 0 ? ((v32 & 0xE) + 10) >> 1 : (v32 >> 1) & 7;
    v34 = *(_DWORD *)(v9 + 4 * v33 + 852);
    v35 = v34 ? 16 * (v34 & 0xFFFFFFFE) : 0;
    if (v35 == 16 * (*(_DWORD *)a3 & 0xFFFFFFFE))
    {
      v36 = *(_QWORD *)(v9 + 2216);
      v37 = (v36 & 1) != 0 ? (v36 >> 1) & 3 : *(unsigned __int8 *)(v36 + 4);
      if (v37 != 2)
      {
        v38 = 0;
        v5 = v31 + 64;
        v39 = v170;
        while (1)
        {
          if ((*(_BYTE *)(a3 + 4) & 0xE) != 0)
            v40 = *(unsigned int *)(*(_QWORD *)(a3 + 8) - 8);
          else
            v40 = 0;
          if (v38 >= v40)
            goto LABEL_75;
          Index = JSC::JSObject::getIndex((JSC::JSObject *)a3, (JSC::JSGlobalObject *)v9, v38, v23, v24, v25, v26, v27);
          if (*(_DWORD *)(v31 + 80))
          {
            v43 = *(_DWORD *)(v31 + 80);
            if ((v43 & 0x27) != 0 && (v43 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v31 + 64), 7u, v22, v23, v24, v25, v26, v27);
            if (*(_QWORD *)(v31 + 16))
              goto LABEL_75;
          }
          v42 = v158;
          if (v158 >= *(_DWORD *)(v11 + 12))
            goto LABEL_34;
          if ((_DWORD)v158 == HIDWORD(v158))
          {
            if (v158 >> 30
              || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v158, 2 * (int)v158))
            {
              LOBYTE(v157) = 1;
LABEL_43:
              OutOfMemoryError = JSC::createOutOfMemoryError(v9, (JSC::JSGlobalObject *)v30);
              v51 = (JSC::Exception *)OutOfMemoryError;
              if ((OutOfMemoryError & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16
                                                                        * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                        + 0x4C)))
              {
                v51 = (JSC::Exception *)JSC::Exception::create((uint64_t)v39, (JSC::VM *)OutOfMemoryError, 0, v45, v46, v47, v48, v49);
              }
              JSC::VM::throwException(v39, (JSC::JSGlobalObject *)v9, v51, v50, v45, v46, v47, v48, v49);
              goto LABEL_34;
            }
            v42 = v158;
          }
          else if (v159 == (_OWORD *)((char *)v160 + 8) || !v159)
          {
            *((_QWORD *)v159 + v158) = Index;
            LODWORD(v158) = v42 + 1;
            goto LABEL_33;
          }
          *((_QWORD *)v159 + v42) = Index;
          LODWORD(v158) = v42 + 1;
          if (!*(_QWORD *)&v160[0] && (Index & 0xFFFE000000000002) == 0 && Index)
          {
            v52 = (_QWORD *)(Index & 0xFFFFFFFFFFFFC000 | 8);
            if ((Index & 8) != 0)
              v52 = (_QWORD *)(Index - 16);
            *(_QWORD *)&v160[0] = *v52 + 560;
            var60[0] = (uint64_t)&v158;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v160[0], var60, v23, v24, v25, v26, v27, (uint64_t)v171);
          }
LABEL_33:
          if ((_BYTE)v157)
            goto LABEL_43;
LABEL_34:
          ++v38;
          if (*(_QWORD *)(v31 + 16))
          {
            v56 = *(_DWORD *)(v9 + 1000);
            if (v56)
              v57 = (JSC::VM *)(16 * (v56 & 0xFFFFFFFE));
            else
              v57 = 0;
            v58 = JSC::JSArrayIterator::create(v31, v57, a3, 0xFFFE000000000001, v24, v25, v26, v27);
            v59 = (uint64_t)v58;
            v60 = v38 | 0xFFFE000000000000;
            v29.n128_f64[0] = (double)v38;
            if ((v38 & 0x80000000) != 0)
              v60 = COERCE__INT64((double)v38) + 0x2000000000000;
            *((_QWORD *)v58 + 2) = v60;
            v61 = (JSC::JSGlobalObject *)v9;
            goto LABEL_74;
          }
        }
      }
    }
  }
  v130 = JSC::iteratorForIterable((JSC::VM **)v9, a3, v22, v23, v24, v25, v26, v27, (int8x16_t)v29);
  v23 = v130;
  v22 = v30;
  if (!*(_DWORD *)(v31 + 80))
    goto LABEL_230;
  v149 = v30;
  v150 = v130;
  v151 = *(_DWORD *)(v31 + 80);
  if ((v151 & 0x27) != 0 && (v151 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v31 + 64), 7u, v30, v130, v24, v25, v26, v27);
  v23 = v150;
  v22 = v149;
  if (!*(_QWORD *)(v31 + 16))
  {
LABEL_230:
    LODWORD(v38) = 0;
    v154 = (JSC::VMTraps *)v23;
    v39 = v170;
    while (1)
    {
      v131 = *(_QWORD *)(v9 + 56);
      v5 = v22;
      v132 = JSC::iteratorNext((JSC::JSGlobalObject *)v9, v23, v22, 0, v24, v25, v26, v27);
      if (*(_DWORD *)(v131 + 80))
      {
        v136 = *(_DWORD *)(v131 + 80);
        if ((v136 & 0x27) != 0 && (v136 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v131 + 64), 7u, v22, v23, v24, v25, v26, v27);
        if (*(_QWORD *)(v131 + 16))
          goto LABEL_252;
      }
      v133 = JSC::iteratorComplete((JSC::JSGlobalObject *)v9, v132, v22, v23, v24, v25, v26, v27, (int8x16_t)v29);
      if (!*(_DWORD *)(v131 + 80))
        goto LABEL_233;
      v137 = *(_DWORD *)(v131 + 80);
      if ((v137 & 0x27) != 0 && (v137 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v131 + 64), 7u, v22, v23, v24, v25, v26, v27);
      if (*(_QWORD *)(v131 + 16))
      {
LABEL_252:
        v30 = 0;
      }
      else
      {
LABEL_233:
        if (v133)
          v30 = 6;
        else
          v30 = v132;
      }
      if (*(_QWORD *)(v31 + 16) || v30 == 6)
        goto LABEL_75;
      v134 = JSC::iteratorValue((JSC::JSGlobalObject *)v9, v30, v22, v23, v24, v25, v26, v27, (int8x16_t)v29);
      if (*(_DWORD *)(v31 + 80))
      {
        v138 = *(_DWORD *)(v31 + 80);
        if ((v138 & 0x27) != 0 && (v138 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v31 + 64), 7u, v22, v23, v24, v25, v26, v27);
        if (*(_QWORD *)(v31 + 16))
          goto LABEL_75;
      }
      v135 = v158;
      if (v158 >= *(_DWORD *)(v11 + 12))
        goto LABEL_245;
      if ((_DWORD)v158 == HIDWORD(v158))
      {
        if (v158 >> 30
          || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v158, 2 * (int)v158))
        {
          LOBYTE(v157) = 1;
LABEL_259:
          v139 = JSC::createOutOfMemoryError(v9, (JSC::JSGlobalObject *)v30);
          v146 = (JSC::Exception *)v139;
          if ((v139 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)v139 & 0xFFFFFFFE) + 0x4C)))
          {
            v146 = (JSC::Exception *)JSC::Exception::create((uint64_t)v39, (JSC::VM *)v139, 0, v140, v141, v142, v143, v144);
          }
          JSC::VM::throwException(v39, (JSC::JSGlobalObject *)v9, v146, v145, v140, v141, v142, v143, v144);
          goto LABEL_245;
        }
        v135 = v158;
      }
      else if (v159 == (_OWORD *)((char *)v160 + 8) || !v159)
      {
        *((_QWORD *)v159 + v158) = v134;
        LODWORD(v158) = v135 + 1;
        goto LABEL_244;
      }
      *((_QWORD *)v159 + v135) = v134;
      LODWORD(v158) = v135 + 1;
      if (!*(_QWORD *)&v160[0] && (v134 & 0xFFFE000000000002) == 0 && v134)
      {
        v147 = (_QWORD *)(v134 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v134 & 8) != 0)
          v147 = (_QWORD *)(v134 - 16);
        *(_QWORD *)&v160[0] = *v147 + 560;
        var60[0] = (uint64_t)&v158;
        WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v160[0], var60, v23, v24, v25, v26, v27, (uint64_t)v171);
      }
LABEL_244:
      if ((_BYTE)v157)
        goto LABEL_259;
LABEL_245:
      LODWORD(v38) = v38 + 1;
      v23 = (uint64_t)v154;
      v22 = v5;
      if (*(_QWORD *)(v31 + 16))
      {
        v61 = (JSC::JSGlobalObject *)v9;
        v59 = (uint64_t)v154;
LABEL_74:
        JSC::iteratorClose(v61, v59, v22, v23, v24, v25, v26, v27, (int8x16_t)v29);
        goto LABEL_75;
      }
    }
  }
  LODWORD(v38) = 0;
  v39 = v170;
LABEL_75:
  v62 = a5;
  if (!*((_DWORD *)v39 + 20))
    goto LABEL_83;
  v148 = *((_DWORD *)v39 + 20);
  if ((v148 & 0x27) != 0 && (v148 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v39 + 64), 7u, v22, v23, v24, v25, v26, v27);
  if (!*((_QWORD *)v39 + 2))
  {
LABEL_83:
    if ((_BYTE)v157)
    {
      v63 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v63 = 0x2000000002;
      *(_QWORD *)(v63 + 8) = "JS results to Wasm are too large";
      *(_DWORD *)(v63 + 16) = 4;
      v171[0] = (WTF::StringImpl *)v63;
      v65 = JSC::createOutOfMemoryError(v9, v171, v64);
      v72 = (JSC::Exception *)v65;
      if ((v65 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v65 & 0xFFFFFFFE) + 0x4C)))
      {
        v72 = (JSC::Exception *)JSC::Exception::create((uint64_t)v39, (JSC::VM *)v65, 0, v66, v67, v68, v69, v70);
      }
      JSC::VM::throwException(v39, (JSC::JSGlobalObject *)v9, v72, v71, v66, v67, v68, v69, v70);
      v73 = v171[0];
      v171[0] = 0;
      if (v73)
      {
        if (*(_DWORD *)v73 == 2)
        {
          WTF::StringImpl::~StringImpl(v73, (WTF::AtomStringImpl *)v30, v22, v23, v24, v25, v26, v27);
          WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
        }
        else
        {
          *(_DWORD *)v73 -= 2;
        }
      }
      goto LABEL_223;
    }
    if ((_DWORD)v38 != *(_DWORD *)(v11 + 12))
    {
      v152 = "Incorrect number of values returned to Wasm from JS";
      v119 = v9;
      v153 = 52;
      goto LABEL_221;
    }
    if ((_DWORD)v158)
    {
      v74 = 0;
      while (1)
      {
        v75 = *((_QWORD *)v159 + v74);
        v171[0] = (WTF::StringImpl *)v75;
        v76 = (unsigned __int8 *)(*(_QWORD *)v11 + 16 * v74);
        v77 = *v76;
        switch(*v76)
        {
          case 0xFCu:
            if (v75 >= 0xFFFE000000000000)
            {
              v29.n128_f64[0] = (double)(int)v75;
            }
            else if (v75 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              JSC::JSValue::toNumberSlowCase(v171, (JSC::JSGlobalObject *)v9, v22, v23, v24, v25, v26, v27, (int8x16_t)v29);
            }
            else
            {
              v29.n128_u64[0] = v75 - 0x2000000000000;
            }
            v75 = v29.n128_u64[0];
            goto LABEL_188;
          case 0xFDu:
            if (v75 >= 0xFFFE000000000000)
            {
              v29.n128_f64[0] = (double)(int)v75;
            }
            else if (v75 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              JSC::JSValue::toNumberSlowCase(v171, (JSC::JSGlobalObject *)v9, v22, v23, v24, v25, v26, v27, (int8x16_t)v29);
            }
            else
            {
              v29.n128_u64[0] = v75 - 0x2000000000000;
            }
            v29.n128_f32[0] = v29.n128_f64[0];
            v75 = v29.n128_u32[0];
            goto LABEL_188;
          case 0xFEu:
            v78 = v5;
            v79 = *(_QWORD *)(v9 + 56);
            JSC::JSValue::toBigInt(v171, (JSC::JSGlobalObject *)v9, v22, v23, v24, v25, v26, v27, (int8x16_t)v29);
            v81 = v80;
            if (*(_DWORD *)(v79 + 80))
            {
              v105 = *(_DWORD *)(v79 + 80);
              if ((v105 & 0x27) != 0 && (v105 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v79 + 64), 7u, v22, v23, v24, v25, v26, v27);
              if (*(_QWORD *)(v79 + 16))
                goto LABEL_186;
            }
            if (!*(_DWORD *)(v81 + 8))
            {
LABEL_186:
              v75 = 0;
            }
            else
            {
              v82 = *(_QWORD *)(v81 + 24);
              if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                v82 = (v82 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              v83 = *(_QWORD *)v82;
              if (*(_BYTE *)(v81 + 16))
                v75 = -(uint64_t)v83;
              else
                v75 = v83;
            }
            v5 = v78;
            goto LABEL_188;
          case 0xFFu:
            if (v75 < 0xFFFE000000000000)
            {
              if (v75 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                JSC::JSValue::toNumberSlowCase(v171, (JSC::JSGlobalObject *)v9, v22, v23, v24, v25, v26, v27, (int8x16_t)v29);
              else
                v29.n128_u64[0] = v75 - 0x2000000000000;
              v99 = (v29.n128_u64[0] >> 52) & 0x7FF;
              v100 = v99 - 1023;
              v101 = v29.n128_u64[0] >> (51 - (v29.n128_u64[0] >> 52));
              if (v99 > 0x433)
                LODWORD(v101) = v29.n128_u64[0] << ((v29.n128_u64[0] >> 52) - 51);
              if (v99 >= 0x41F)
                v102 = v101;
              else
                v102 = (((1 << ((v29.n128_u64[0] >> 52) + 1)) - 1) & v101) + (1 << ((v29.n128_u64[0] >> 52) + 1));
              if (v29.n128_i64[0] >= 0)
                v84 = v102;
              else
                v84 = -v102;
              if (v100 > 0x53)
                v84 = 0;
            }
            else
            {
              v84 = v75;
            }
            v75 = v84;
            goto LABEL_188;
          default:
            if (BYTE1(dword_1ECF4C7B0))
              v85 = 29;
            else
              v85 = 17;
            if ((v85 + v77) > 1u)
            {
              __break(0xC471u);
              JUMPOUT(0x198DB8B7CLL);
            }
            v22 = *((_QWORD *)v76 + 1);
            if (BYTE1(dword_1ECF4C7B0))
            {
              v86 = (v77 + 29);
              if (v86 <= 1 && v22 == -17)
                goto LABEL_188;
              if (v86 <= 1 && v22 == -16)
                goto LABEL_137;
            }
            else
            {
              if (v77 == 239)
                goto LABEL_188;
              if (v77 == 240)
              {
LABEL_137:
                if ((v75 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v75 + 5) < 0x17u)
                {
LABEL_141:
                  if (v75 != 2)
                  {
                    v152 = "Funcref value is not a function";
                    v153 = 32;
LABEL_290:
                    v119 = v9;
LABEL_221:
                    JSC::throwTypeError(v119, &v170, (uint64_t)v152, v153);
                    goto LABEL_223;
                  }
                  v95 = 0;
                  v96 = 0;
                }
                else
                {
                  v94 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v75 & 0xFFFFFFFE) + 0x4C));
                  if (v94 == &JSC::WebAssemblyFunction::s_info)
                  {
                    v96 = 0;
                    v95 = v75;
                  }
                  else
                  {
                    if (v94 != &JSC::WebAssemblyWrapperFunction::s_info)
                      goto LABEL_141;
                    v95 = 0;
                    v96 = v75;
                  }
                }
                if ((v77 + 29) <= 1u && BYTE1(dword_1ECF4C7B0) != 0)
                {
                  if (v22 > 0xFFFFFFFFFFFFFFC0 || v75 == 2)
                  {
                    v62 = a5;
                  }
                  else
                  {
                    if (v95)
                      v98 = v95;
                    else
                      v98 = v96;
                    v62 = a5;
                    if (v22 != *(_QWORD *)(v98 + 40))
                    {
                      v152 = "Argument function did not match the reference type";
                      v153 = 51;
                      goto LABEL_290;
                    }
                  }
                }
                goto LABEL_188;
              }
            }
            if (BYTE2(dword_1ECF4C7B0))
              v89 = 1;
            else
              v89 = (v77 + 29) > 1u;
            v90 = v89 || BYTE1(dword_1ECF4C7B0) == 0;
            if (!v90 && v22 <= 0xFFFFFFFFFFFFFFC0)
              goto LABEL_137;
            *(_QWORD *)&v91 = v75 - 0x2000000000000;
            if (v75 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
              goto LABEL_179;
            if ((*(_QWORD *)&v91 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
              goto LABEL_179;
            v29.n128_u64[0] = v75 - 0x2000000000000;
            v28.n128_f64[0] = (double)(int)v91;
            if (v28.n128_f64[0] != v91 || (*(_QWORD *)&v91 & 0x8000000000000000) != 0 && !(int)v91)
              goto LABEL_179;
            v92 = (*(_QWORD *)&v91 >> 52) & 0x7FFLL;
            if ((v92 - 1023) <= 0x53)
            {
              v103 = *(_QWORD *)&v91 >> (51 - (*(_QWORD *)&v91 >> 52));
              if (v92 > 0x433)
                LODWORD(v103) = v75 << ((*(_QWORD *)&v91 >> 52) - 51);
              if (v92 >= 0x41F)
                v104 = v103;
              else
                v104 = (((1 << ((*(_QWORD *)&v91 >> 52) + 1)) - 1) & v103) + (1 << ((*(_QWORD *)&v91 >> 52) + 1));
              if (v91 >= 0.0)
                v93 = v104;
              else
                v93 = -v104;
              if ((int)(v93 + 0x40000000) < 0)
                goto LABEL_179;
            }
            else
            {
              v93 = 0;
            }
            v75 = v93 | 0xFFFE000000000000;
LABEL_179:
            v171[0] = (WTF::StringImpl *)v75;
            if (!((uint64_t (*)(__n128, __n128))JSC::Wasm::TypeInformation::castReference)(v29, v28))
            {
              v152 = "Argument value did not match reference type";
              v153 = 44;
              goto LABEL_290;
            }
            v75 = (unint64_t)v171[0];
LABEL_188:
            if (*((_DWORD *)v39 + 20))
            {
              v117 = *((_DWORD *)v39 + 20);
              if ((v117 & 0x27) != 0 && (v117 & 0x20) == 0)
              {
                v118 = v75;
                JSC::VMTraps::handleTraps((JSC::VM *)((char *)v39 + 64), 7u, v22, v23, v24, v25, v26, v27);
                v75 = v118;
              }
              if (*((_QWORD *)v39 + 2))
                goto LABEL_223;
            }
            if (v74 >= v168)
            {
              __break(0xC471u);
              JUMPOUT(0x198DB8BA8);
            }
            v106 = (char *)v166 + 24 * v74;
            v107 = *(_QWORD *)v106;
            v108 = v106[8];
            if (!v106[8])
              goto LABEL_193;
            v109 = v62;
            if (v108 == 1)
            {
              LOBYTE(v107) = v107 + 32;
LABEL_193:
              v110 = *(_DWORD *)v162;
              if (*(_DWORD *)v162 < 2u)
              {
                LODWORD(v111) = 0;
LABEL_203:
                if (v110 <= v111)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198DB8AA8);
                }
                v114 = *((_QWORD *)v162 + v111 + 1);
              }
              else
              {
                v111 = 0;
                v112 = *(unsigned int *)v162;
                while (1)
                {
                  v113 = v111 + ((v112 - 1) >> 1);
                  if (v110 <= v113)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198DB8A6CLL);
                  }
                  v114 = *((_QWORD *)v162 + v113 + 1);
                  if (((v107 ^ v114) & 0x7F) == 0)
                    break;
                  v115 = (v112 - 1) >> 1;
                  v112 -= v115 + 1;
                  if ((v107 & 0x7Fu) >= (v114 & 0x7Fu))
                  {
                    v116 = v115 + 1;
                  }
                  else
                  {
                    v112 = v115;
                    v116 = 0;
                  }
                  v111 += v116;
                  if (v112 <= 1)
                    goto LABEL_203;
                }
              }
              v107 = v114 >> 6;
              v109 = a4;
            }
            *(_QWORD *)(v109 + (v107 & 0xFFFFFFFFFFFFFFF8)) = v75;
            if (++v74 >= v158)
              goto LABEL_223;
            break;
        }
      }
    }
  }
LABEL_223:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v158, (void *)v30, v22, v23, v24, v25, v26, v27);
  v128 = v162;
  v162 = 0;
  if (v128)
    WTF::fastFree((unint64_t)v128, (void *)v21, v20, v15, v16, v17, v18, v19);
  v14 = v166;
  if (&v169 != (uint64_t *)v166)
  {
LABEL_286:
    if (v14)
    {
      v166 = 0;
      v167 = 0;
      WTF::fastFree((unint64_t)v14, (void *)v21, v20, v15, v16, v17, v18, v19);
    }
  }
  v129 = v164;
  if (v164)
  {
    v164 = 0;
    v165 = 0;
    WTF::fastFree((unint64_t)v129, (void *)v21, v20, v15, v16, v17, v18, v19);
  }
}

unint64_t operationAllocateResultsArray(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  JSC::VM *v11;
  uint64_t v12;
  unsigned __int8 **v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unint64_t UninitializedRestricted;
  unint64_t v19;
  unsigned __int8 **v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  unint64_t j;
  char *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  WTF *v42;
  WTF *v43;
  WTF *v44;
  WTF *i;
  char v47;
  unsigned int v48;
  WTF *v49[2];
  char v50[32];
  WTF *v51;
  int v52;
  WTF *v53;
  int v54;
  unsigned int v55;
  _QWORD v56[4];
  JSC::VM *v57;
  char v58;
  uint64_t vars0;

  v11 = *(JSC::VM **)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)v11 + 5) = vars0;
  v57 = v11;
  v13 = (unsigned __int8 **)(a2 + 8);
  if (*(_DWORD *)(a2 + 32))
    v14 = 0;
  else
    v14 = a2 + 8;
  v15 = (a3 >> 1) & 7;
  if ((a3 & 0x10) != 0)
    v15 = ((a3 & 0xE) + 10) >> 1;
  v16 = *(_DWORD *)(v12 + 4 * v15 + 892);
  if (v16)
    v17 = 16 * (v16 & 0xFFFFFFFE);
  else
    v17 = 0;
  UninitializedRestricted = JSC::JSArray::tryCreateUninitializedRestricted((uint64_t *)&v57, 0, v17, *(unsigned int *)(v14 + 12), a5, a6, a7, a8);
  if (!UninitializedRestricted)
  {
    __break(0xC471u);
LABEL_57:
    __break(1u);
LABEL_58:
    __dmb(0xAu);
    return v8;
  }
  v8 = UninitializedRestricted;
  v19 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v19 != -1)
  {
    *(_QWORD *)v50 = &v58;
    v49[0] = (WTF *)v50;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, v49, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (*(_DWORD *)(a2 + 32))
    v20 = 0;
  else
    v20 = v13;
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v20, 0, v50);
  v21 = 0;
  v22 = 0;
  if (v55)
  {
    v22 = 0;
    v21 = 0;
    for (i = v53; i != (WTF *)((char *)v53 + 24 * v55); i = (WTF *)((char *)i + 24))
    {
      v47 = *(_BYTE *)i;
      if (*((_BYTE *)i + 8))
      {
        if (*((_BYTE *)i + 8) == 1)
        {
          v48 = (v47 + 32) & 0x7F;
          if (v48 >= 0x40)
            goto LABEL_57;
          v22 |= 1 << v48;
          if (*((unsigned __int8 *)i + 16) >= 4u && (v48 & 0x60) == 0x20)
            v21 |= 1 << v48;
        }
      }
      else
      {
        if ((*(_BYTE *)i & 0x40) != 0)
          goto LABEL_57;
        v22 |= 1 << v47;
      }
    }
  }
  JSC::RegisterAtOffsetList::RegisterAtOffsetList((unsigned int **)v49, v22, v21, 1);
  if (*(_DWORD *)(v14 + 12))
  {
    for (j = 0; j < *(unsigned int *)(v14 + 12); ++j)
    {
      if (j >= v55)
        goto LABEL_61;
      v32 = (char *)v53 + 24 * j;
      v33 = *(_QWORD *)v32;
      v34 = v32[8];
      if (v34)
      {
        if (v34 != 1)
          goto LABEL_35;
        LOBYTE(v33) = v33 + 32;
      }
      v35 = *(_DWORD *)v49[0];
      if (*(_DWORD *)v49[0] >= 2u)
      {
        v36 = 0;
        v37 = *(unsigned int *)v49[0];
        while (1)
        {
          v38 = v36 + ((v37 - 1) >> 1);
          if (v35 <= v38)
            break;
          v39 = *((_QWORD *)v49[0] + v38 + 1);
          if (((v33 ^ v39) & 0x7F) == 0)
            goto LABEL_34;
          v40 = (v37 - 1) >> 1;
          v37 -= v40 + 1;
          if ((v33 & 0x7Fu) >= (v39 & 0x7Fu))
          {
            v41 = v40 + 1;
          }
          else
          {
            v37 = v40;
            v41 = 0;
          }
          v36 += v41;
          if (v37 <= 1)
            goto LABEL_32;
        }
LABEL_61:
        __break(0xC471u);
        JUMPOUT(0x198DB8EC0);
      }
      LODWORD(v36) = 0;
LABEL_32:
      if (v35 <= v36)
      {
        __break(0xC471u);
        JUMPOUT(0x198DB8EE0);
      }
      v39 = *((_QWORD *)v49[0] + v36 + 1);
LABEL_34:
      v33 = v56[3] + 4 * (v39 >> 8);
LABEL_35:
      JSC::JSObject::initializeIndex(v8, &v57, j, *(_QWORD *)(a4 + (v33 & 0xFFFFFFFFFFFFFFF8)), v26, v27, v28, v29, v30);
    }
  }
  v42 = v49[0];
  v49[0] = 0;
  if (v42)
    WTF::fastFree((unint64_t)v42, v23, v24, v25, v26, v27, v28, v29);
  v43 = v53;
  if (v56 != (_QWORD *)v53 && v53)
  {
    v53 = 0;
    v54 = 0;
    WTF::fastFree((unint64_t)v43, v23, v24, v25, v26, v27, v28, v29);
  }
  v44 = v51;
  if (v51)
  {
    v51 = 0;
    v52 = 0;
    WTF::fastFree((unint64_t)v44, v23, v24, v25, v26, v27, v28, v29);
  }
  if (*((_BYTE *)v57 + 755))
    goto LABEL_58;
  return v8;
}

BOOL JSC::Wasm::tableSet(JSC::Wasm *this, JSC::Wasm::Instance *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char **v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t *v16;
  unsigned int v17;
  unsigned int v18;

  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 8) + 204) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198DB9118);
  }
  v4 = *((_QWORD *)this + 15 * *((unsigned int *)this + 28) + a2 + 19);
  v5 = *(_DWORD *)(v4 + 4);
  if (v5 <= a3)
    return v5 > a3;
  if (*(_BYTE *)(v4 + 13) == 1)
  {
    if ((a4 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a4 + 5) < 0x17u)
    {
LABEL_16:
      if (a4 == 2)
      {
        if (!*(_QWORD *)(v4 + 40))
        {
          __break(0xC471u);
          JUMPOUT(0x198DB9158);
        }
        v11 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 48 * a3);
        *v11 = 0;
        v11[1] = 0;
        v11[2] = &JSC::Wasm::NullWasmCallee;
        v11[3] = 0;
        v11[4] = 0;
        v11[5] = 2;
      }
      return v5 > a3;
    }
    v10 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C));
    if (v10 == &JSC::WebAssemblyFunction::s_info)
    {
      if (*(_QWORD *)(v4 + 40))
        goto LABEL_23;
    }
    else
    {
      if (v10 != &JSC::WebAssemblyWrapperFunction::s_info)
        goto LABEL_16;
      if (*(_QWORD *)(v4 + 40))
      {
LABEL_23:
        v13 = *(_QWORD *)(*(_QWORD *)(a4 + 32) + 16);
        v14 = *(_QWORD *)(v4 + 48) + 48 * a3;
        v15 = *(_OWORD *)(a4 + 56);
        *(_OWORD *)v14 = *(_OWORD *)(a4 + 40);
        *(_OWORD *)(v14 + 16) = v15;
        *(_QWORD *)(v14 + 32) = v13;
        v6 = *(_QWORD *)(v4 + 40);
        v16 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v6 & 8) != 0)
          v16 = (uint64_t *)(v6 - 16);
        v9 = *v16;
        *(_QWORD *)(v14 + 40) = a4;
        if (v6)
          goto LABEL_10;
        return v5 > a3;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x198DB90A0);
  }
  if (!*(_BYTE *)(v4 + 13))
  {
    v6 = *(_QWORD *)(v4 + 40);
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198DB9138);
    }
    v7 = *(_QWORD *)(v4 + 48);
    v8 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v6 & 8) != 0)
      v8 = (uint64_t *)(v6 - 16);
    v9 = *v8;
    *(_QWORD *)(v7 + 8 * a3) = a4;
    if (a4)
    {
      if ((a4 & 0xFFFE000000000002) == 0)
      {
LABEL_10:
        if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v6 + 7))
        {
          v18 = a3;
          v17 = v5;
          JSC::Heap::writeBarrierSlowPath(v9 + 192, v6);
          v5 = v17;
          a3 = v18;
        }
      }
    }
  }
  return v5 > a3;
}

unint64_t operationWasmStructNew(JSC::Wasm *this, JSC::Wasm::Instance *a2, char a3, uint64_t a4, unint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)this + 1) + 40) = vars0;
  return JSC::Wasm::structNew(this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t operationWasmStructGet(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t result;
  int v11;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    v4 = v2 + 4;
  else
    v4 = 0;
  v7 = *(_QWORD *)(v3 + 8);
  v5 = v3 + 8;
  v6 = v7;
  if (*(_DWORD *)(v5 + 24) != 1)
    v5 = 0;
  v8 = (*(_DWORD *)(*(_QWORD *)v5 + 32 * *(unsigned int *)(v5 + 8) + 4 * a2) - 4);
  v9 = (unsigned __int8 *)(v6 + 32 * a2);
  if (*((_DWORD *)v9 + 4) == 1)
  {
    if (*v9 == 248)
      return *(unsigned __int8 *)(v4 + v8);
    else
      return *(unsigned __int16 *)(v4 + v8);
  }
  else
  {
    v11 = *v9;
    switch(v11)
    {
      case 252:
      case 254:
        goto LABEL_15;
      case 253:
      case 255:
        result = *(unsigned int *)(v4 + v8);
        break;
      default:
        if ((v11 - 227) < 2 || (v11 - 239) < 2)
LABEL_15:
          result = *(_QWORD *)(v4 + v8);
        else
          result = 0;
        break;
    }
  }
  return result;
}

uint64_t operationWasmStructSet(uint64_t result, unint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(result + 8) + 40) = vars0;
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
    v6 = v4 + 4;
  else
    v6 = 0;
  v9 = *(_QWORD *)(v5 + 8);
  v7 = v5 + 8;
  v8 = v9;
  if (*(_DWORD *)(v7 + 24) != 1)
    v7 = 0;
  v10 = (*(_DWORD *)(*(_QWORD *)v7 + 32 * *(unsigned int *)(v7 + 8) + 4 * a3) - 4);
  v11 = (unsigned __int8 *)(v8 + 32 * a3);
  if (*((_DWORD *)v11 + 4) == 1)
  {
    if (*v11 == 248)
      *(_BYTE *)(v6 + v10) = a4;
    else
      *(_WORD *)(v6 + v10) = a4;
  }
  else
  {
    v12 = *v11;
    if (v12 > 251)
    {
      switch(v12)
      {
        case 252:
        case 254:
          *(_QWORD *)(v6 + v10) = a4;
          break;
        case 253:
        case 255:
          *(_DWORD *)(v6 + v10) = a4;
          break;
        default:
          return result;
      }
    }
    else if ((v12 - 227) < 2 || (v12 - 234) < 2 || (v12 - 239) < 2)
    {
      v13 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a2 & 8) != 0)
        v13 = (uint64_t *)(a2 - 16);
      v14 = *v13;
      *(_QWORD *)(v6 + v10) = a4;
      if (a4
        && (a4 & 0xFFFE000000000002) == 0
        && *(_DWORD *)(v14 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        return JSC::Heap::writeBarrierSlowPath(v14 + 192, a2);
      }
    }
  }
  return result;
}

uint64_t operationWasmThrow(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  JSC *v9;
  unsigned int *v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  JSC::Exception *v41;
  JSC::CallFrame *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  uint64_t (*v58)(_QWORD *);
  _QWORD *v59;
  WTF *v60;
  _QWORD v61[3];
  JSC::VM *vars0;

  v8 = vars0;
  v9 = (JSC *)a1[1];
  *((_QWORD *)v9 + 5) = vars0;
  v10 = (unsigned int *)a1[18];
  if (*v10 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198DB959CLL);
  }
  v12 = a1[4];
  v13 = *(_QWORD *)&v10[2 * a2 + 2];
  v14 = *(_QWORD *)(v13 + 8);
  v15 = *(_DWORD *)(v14 + 32);
  if (v15)
    v16 = 0;
  else
    v16 = (uint64_t *)(v14 + 8);
  v17 = *((unsigned int *)v16 + 2);
  if (!(_DWORD)v17)
    goto LABEL_13;
  v18 = 0;
  v19 = *((_DWORD *)v16 + 3);
  v20 = *v16;
  do
  {
    if (*(unsigned __int8 *)(v20 + 16 * v19) == 251)
      v21 = 2;
    else
      v21 = 1;
    v18 += v21;
    ++v19;
    --v17;
  }
  while (v17);
  if (v18)
  {
    v22 = (WTF *)WTF::fastMalloc((WTF *)(8 * v18 + 8));
    *(_DWORD *)v22 = v18;
    v14 = *(_QWORD *)(v13 + 8);
    v15 = *(_DWORD *)(v14 + 32);
  }
  else
  {
LABEL_13:
    v22 = 0;
  }
  v60 = v22;
  v23 = (uint64_t *)(v14 + 8);
  if (v15)
    v24 = 0;
  else
    v24 = v23;
  v25 = *((unsigned int *)v24 + 2);
  if ((_DWORD)v25)
  {
    v26 = 0;
    v27 = *((_DWORD *)v24 + 3);
    v28 = *v24;
    while (1)
    {
      v29 = 0;
      v30 = v27;
      v31 = v25;
      do
      {
        if (*(unsigned __int8 *)(v28 + 16 * v30) == 251)
          v32 = 2;
        else
          v32 = 1;
        v29 += v32;
        ++v30;
        --v31;
      }
      while (v31);
      if (v29 <= v26)
        break;
      if (v26 >= *(unsigned int *)v22)
      {
        __break(0xC471u);
        JUMPOUT(0x198DB9564);
      }
      *((_QWORD *)v22 + v26 + 1) = *(_QWORD *)(a3 + 8 * v26);
      ++v26;
    }
  }
  v33 = *(_QWORD *)(v12 + 1312);
  if ((v33 & 1) != 0)
  {
    v58 = *(uint64_t (**)(_QWORD *))(v33 & 0xFFFFFFFFFFFFFFFCLL);
    v59 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v12 & 8) != 0)
      v59 = (_QWORD *)(v12 - 16);
    v61[0] = *v59;
    v61[1] = v12;
    v61[2] = v12 + 1312;
    v33 = v58(v61);
  }
  v34 = JSC::JSWebAssemblyException::create(v9, (JSC::VM *)v33, (unsigned int *)v13, (uint64_t *)&v60, a5, a6, a7, a8);
  v41 = (JSC::Exception *)v34;
  if ((v34 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C)))
  {
    v41 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, (JSC::VM *)v34, 0, v35, v36, v37, v38, v39);
  }
  JSC::VM::throwException(v9, (JSC::JSGlobalObject *)v12, v41, v40, v35, v36, v37, v38, v39);
  JSC::genericUnwind(v9, v8, v42, v43, v44, v45, v46, v47);
  v55 = *((_QWORD *)v9 + 11311);
  v56 = v60;
  v60 = 0;
  if (v56)
    WTF::fastFree((unint64_t)v56, v48, v49, v50, v51, v52, v53, v54);
  return v55;
}

unint64_t JSC::JSWebAssemblyException::create(JSC *this, JSC::VM *a2, unsigned int *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v12;
  unint64_t result;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v12 = (_QWORD *)*((_QWORD *)this + 5121);
  if (!v12)
    v12 = (_QWORD *)JSC::GCClient::Heap::webAssemblyExceptionSpaceSlow((JSC::Heap **)this + 4694);
  result = v12[3];
  if (result >= v12[4])
  {
    result = v12[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v12, (uint64_t)this + 192, 32, 0, 0, v18, v19, v20);
      goto LABEL_5;
    }
    v17 = *(_QWORD *)(result + 8) ^ v12[6];
    v12[4] = result + HIDWORD(v17);
    v12[5] = result + (int)v17;
  }
  v12[3] = result + 32;
LABEL_5:
  *(_DWORD *)result = 0;
  v14 = *((_DWORD *)a2 + 2);
  *(_DWORD *)result = (unint64_t)a2 >> 4;
  *(_DWORD *)(result + 4) = v14;
  *(_QWORD *)(result + 8) = 0;
  do
    v15 = __ldaxr(a3);
  while (__stlxr(v15 + 1, a3));
  *(_QWORD *)(result + 16) = a3;
  v16 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v16;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

uint64_t operationWasmRethrow(uint64_t a1, JSC::Exception *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::Exception *v9;
  JSC::VM *v10;
  JSC::JSGlobalObject *v11;
  JSC::CallFrame *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::VM *vars0;

  v9 = a2;
  v10 = *(JSC::VM **)(a1 + 8);
  *((_QWORD *)v10 + 5) = vars0;
  v11 = *(JSC::JSGlobalObject **)(a1 + 32);
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    v9 = (JSC::Exception *)JSC::Exception::create((uint64_t)v10, a2, 0, a5, a6, a7, a8, a9);
  }
  JSC::VM::throwException(v10, v11, v9, a3, a5, a6, a7, a8, a9);
  JSC::genericUnwind(v10, vars0, v12, v13, v14, v15, v16, v17);
  return *((_QWORD *)v10 + 11311);
}

uint64_t operationWasmToJSException(unint64_t *a1, JSC::JSGlobalObject *a2)
{
  JSC::VM *vars0;

  *(_QWORD *)(a1[1] + 40) = vars0;
  return JSC::Wasm::throwWasmToJSException(vars0, a2, a1);
}

uint64_t JSC::Wasm::throwWasmToJSException(JSC::VM *a1, JSC::JSGlobalObject *a2, unint64_t *a3)
{
  JSC::Heap ***v4;
  JSC::VM *v5;
  const char *v6;
  uint64_t v7;
  unint64_t StackOverflowError;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  unint64_t v15;
  int v16;
  int *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  JSC::CallFrame *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;

  v4 = (JSC::Heap ***)a3[4];
  v5 = (JSC::VM *)v4[7];
  if (a2 > 0x22)
    goto LABEL_7;
  if (((1 << (char)a2) & 0x600003000) == 0)
  {
    if (a2 == 11)
    {
      StackOverflowError = JSC::createStackOverflowError(a3[4], a2);
LABEL_8:
      v15 = StackOverflowError;
      goto LABEL_42;
    }
LABEL_7:
    StackOverflowError = JSC::createJSWebAssemblyRuntimeError(a3[4], v4[7], (int)a2);
    goto LABEL_8;
  }
  v6 = "Funcref must be an exported wasm function";
  v7 = 42;
  switch((int)a2)
  {
    case 12:
      break;
    case 13:
      v6 = "Unsupported use of struct or array type";
      v7 = 40;
      break;
    case 14:
      v6 = "Out of bounds array.get";
      goto LABEL_12;
    case 15:
      v6 = "Out of bounds array.set";
LABEL_12:
      v7 = 24;
      break;
    case 16:
      v6 = "Out of bounds array.fill";
      goto LABEL_15;
    case 17:
      v6 = "Out of bounds array.copy";
LABEL_15:
      v7 = 25;
      break;
    case 18:
      v6 = "Out of bounds array.init_elem";
      goto LABEL_25;
    case 19:
      v6 = "Out of bounds array.init_data";
      goto LABEL_25;
    case 20:
      v6 = "Failed to allocate new struct";
      goto LABEL_25;
    case 21:
      v6 = "Failed to allocate new array";
      v7 = 29;
      break;
    case 22:
      v6 = "Out of bounds or failed to allocate in array.new_elem";
      goto LABEL_36;
    case 23:
      v6 = "Out of bounds or failed to allocate in array.new_data";
      goto LABEL_36;
    case 24:
      v6 = "array.get to a null reference";
      goto LABEL_25;
    case 25:
      v6 = "array.set to a null reference";
      goto LABEL_25;
    case 26:
      v6 = "array.len to a null reference";
LABEL_25:
      v7 = 30;
      break;
    case 27:
      v6 = "array.fill to a null reference";
      goto LABEL_33;
    case 28:
      v6 = "array.copy to a null reference";
      goto LABEL_33;
    case 29:
      v6 = "array.init_elem to a null reference";
      goto LABEL_30;
    case 30:
      v6 = "array.init_data to a null reference";
LABEL_30:
      v7 = 36;
      break;
    case 31:
      v6 = "struct.get to a null reference";
      goto LABEL_33;
    case 32:
      v6 = "struct.set to a null reference";
LABEL_33:
      v7 = 31;
      break;
    case 33:
      v6 = "an exported wasm function cannot contain a v128 parameter or return value";
      v7 = 74;
      break;
    case 34:
      v6 = "a v128 parameter of a tag may not be accessed from JS";
LABEL_36:
      v7 = 54;
      break;
    default:
      v6 = "";
      v7 = 1;
      break;
  }
  v16 = v7 - 1;
  if (v7 == 1)
  {
    v17 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  else
  {
    v17 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
    *v17 = 2;
    v17[1] = v16;
    *((_QWORD *)v17 + 1) = v6;
    v17[4] = 4;
  }
  v36 = (WTF::StringImpl *)v17;
  v15 = JSC::createTypeError((unint64_t)v4, &v36, (const WTF::String *)a3);
  v20 = v36;
  v36 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v18, v19, v9, v10, v11, v12, v13);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
LABEL_42:
  if ((v15 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C)))
  {
    v15 = JSC::Exception::create((uint64_t)v5, (JSC::VM *)v15, 0, v9, v10, v11, v12, v13);
  }
  JSC::VM::throwException(v5, (JSC::JSGlobalObject *)v4, (JSC::Exception *)v15, v14, v9, v10, v11, v12, v13);
  JSC::genericUnwind(v5, a1, v21, v22, v23, v24, v25, v26);
  return *((_QWORD *)v5 + 11311);
}

void operationCrashDueToBBQStackOverflow()
{
  __break(0xC471u);
}

void operationCrashDueToOMGStackOverflow()
{
  __break(0xC471u);
}

uint64_t operationWasmRetrieveAndClearExceptionIfCatchable(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;

  v1 = *(_QWORD **)(a1 + 8);
  v2 = v1[2];
  if (v2)
  {
    v1[11310] = 0;
    v1[11312] = 0;
    result = *(_QWORD *)(v2 + 8);
    v1[2] = 0;
    v4 = (unsigned int *)(v1 + 10);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 & 0xFFFFFFEF, v4));
  }
  else
  {
    result = 1043;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::Wasm::arrayNewData(JSC::Wasm *this, JSC::Wasm::Instance *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int *v13;
  unsigned int v14;
  JSC::Wasm::TypeDefinition *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  unsigned int v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v50;
  WTF *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t CachedUnrolling;
  uint64_t v59;
  uint64_t v60;
  const JSC::Wasm::Type *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  const JSC::Wasm::TypeDefinition *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  JSC::Wasm::TypeInformation *v71;
  WTF *v72;
  _QWORD v73[2];
  int v74;
  uint64_t v75;
  int v76;
  unsigned int *v77;
  _QWORD v78[2];
  int v79;
  uint64_t v80;
  int v81;
  unsigned int *v82;
  _QWORD v83[2];
  int v84;
  uint64_t v85;
  int v86;
  unsigned int *v87;
  _QWORD v88[2];
  int v89;
  uint64_t v90;
  int v91;
  unsigned int *v92;
  _QWORD v93[2];
  int v94;
  uint64_t v95;
  int v96;
  _DWORD *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  if (*(_DWORD *)(v8 + 284) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198DBA090);
  }
  v13 = *(unsigned int **)(*(_QWORD *)(v8 + 272) + 8 * a2);
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    v8 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  }
  if (*(_DWORD *)(v8 + 100) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198DBA098);
  }
  v15 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(v8 + 88) + 8 * a2);
  if (*((_DWORD *)v15 + 8) == 4)
  {
    v71 = *(JSC::Wasm::TypeInformation **)(*(_QWORD *)(v8 + 88) + 8 * a2);
    v50 = (unsigned int *)*((_QWORD *)v15 + 1);
    v51 = *(WTF **)v50;
    v15 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v50 + 8) + 8 * v50[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v15))
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v71, v52, v53, v54, v55, v56, v57, a8);
      if (v64)
      {
        v15 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v15 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v15, v51, v59, v60, v61, v62, v63, a8);
        JSC::Wasm::TypeInformation::addCachedUnrolling(v71, v15, v65, v66, v67, v68, v69, v70);
      }
    }
  }
  if (*((_DWORD *)v15 + 8) == 5)
    v15 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v15 + 1);
  v16 = (uint64_t *)*((_QWORD *)v15 + 1);
  v17 = *v16;
  v18 = v16[1];
  v19 = *((_DWORD *)v16 + 4);
  v98 = *(uint64_t *)((char *)v16 + 20);
  v99 = *((_DWORD *)v16 + 7);
  if (v19 != 1)
  {
    switch((char)v17)
    {
      case -5:
        if (a4)
        {
          v25 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * a4) | 8));
          *v25 = a4;
          bzero(v25 + 2, 16 * a4);
        }
        else
        {
          v25 = 0;
        }
        v97 = v25;
        v73[0] = v17;
        v73[1] = v18;
        v74 = v19;
        v75 = v98;
        v76 = v99;
        if (v13)
        {
          do
            v44 = __ldaxr(v13);
          while (__stlxr(v44 + 1, v13));
        }
        v72 = (WTF *)v13;
        v34 = JSC::Wasm::createArrayFromDataSegment<JSC::v128_u>(this, (unsigned __int8 *)v73, a4, a3, a5, (uint64_t *)&v97, (unsigned int **)&v72, a8);
        v35 = (unsigned int *)v72;
        v72 = 0;
        if (!v35)
          goto LABEL_54;
        do
        {
          v45 = __ldaxr(v35);
          v37 = --v45 == 0;
        }
        while (__stlxr(v45, v35));
        break;
      case -4:
      case -2:
        if (a4)
        {
          v22 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * a4 + 8));
          *v22 = a4;
        }
        else
        {
          v22 = 0;
        }
        v97 = v22;
        v78[0] = v17;
        v78[1] = v18;
        v79 = v19;
        v80 = v98;
        v81 = v99;
        if (v13)
        {
          do
            v40 = __ldaxr(v13);
          while (__stlxr(v40 + 1, v13));
        }
        v77 = v13;
        v34 = JSC::Wasm::createArrayFromDataSegment<unsigned long long>(this, (unsigned __int8 *)v78, a4, a3, a5, (uint64_t *)&v97, &v77, a8);
        v35 = v77;
        v77 = 0;
        if (!v35)
          goto LABEL_54;
        do
        {
          v41 = __ldaxr(v35);
          v37 = --v41 == 0;
        }
        while (__stlxr(v41, v35));
        break;
      case -3:
      case -1:
        if (a4)
        {
          v24 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * a4 + 4));
          *v24 = a4;
        }
        else
        {
          v24 = 0;
        }
        v97 = v24;
        v83[0] = v17;
        v83[1] = v18;
        v84 = v19;
        v85 = v98;
        v86 = v99;
        if (v13)
        {
          do
            v42 = __ldaxr(v13);
          while (__stlxr(v42 + 1, v13));
        }
        v82 = v13;
        v34 = JSC::Wasm::createArrayFromDataSegment<unsigned int>(this, (unsigned __int8 *)v83, a4, a3, a5, (uint64_t *)&v97, &v82, a8);
        v35 = v82;
        v82 = 0;
        if (!v35)
          goto LABEL_54;
        do
        {
          v43 = __ldaxr(v35);
          v37 = --v43 == 0;
        }
        while (__stlxr(v43, v35));
        break;
      default:
        goto LABEL_65;
    }
    goto LABEL_52;
  }
  v20 = v17 & 0xFFFFFFFFFFFFFF00;
  if (v17 == 247)
  {
    if (a4)
    {
      v23 = (_DWORD *)WTF::fastMalloc((WTF *)(2 * a4 + 4));
      *v23 = a4;
    }
    else
    {
      v23 = 0;
    }
    v97 = v23;
    v88[0] = v20 | 0xF7;
    v88[1] = v18;
    v90 = v98;
    v89 = 1;
    v91 = v99;
    if (v13)
    {
      do
        v38 = __ldaxr(v13);
      while (__stlxr(v38 + 1, v13));
    }
    v87 = v13;
    v34 = JSC::Wasm::createArrayFromDataSegment<unsigned short>(this, (unsigned __int8 *)v88, a4, a3, a5, (uint64_t *)&v97, &v87, a8);
    v35 = v87;
    v87 = 0;
    if (v35)
    {
      do
      {
        v39 = __ldaxr(v35);
        v37 = --v39 == 0;
      }
      while (__stlxr(v39, v35));
LABEL_52:
      if (v37)
      {
        atomic_store(1u, v35);
        WTF::fastFree((unint64_t)v35, v27, v28, v29, v30, v31, v32, v33);
      }
    }
  }
  else
  {
    if (v17 != 248)
    {
LABEL_65:
      __break(0xC471u);
      JUMPOUT(0x198DBA088);
    }
    if (a4)
    {
      v21 = (_DWORD *)WTF::fastMalloc((WTF *)(a4 + 4));
      *v21 = a4;
    }
    else
    {
      v21 = 0;
    }
    v97 = v21;
    v93[0] = v20 | 0xF8;
    v93[1] = v18;
    v95 = v98;
    v94 = 1;
    v96 = v99;
    if (v13)
    {
      do
        v26 = __ldaxr(v13);
      while (__stlxr(v26 + 1, v13));
    }
    v92 = v13;
    v34 = JSC::Wasm::createArrayFromDataSegment<unsigned char>(this, (unsigned __int8 *)v93, a4, a3, a5, (uint64_t *)&v97, &v92, a8);
    v35 = v92;
    v92 = 0;
    if (v35)
    {
      do
      {
        v36 = __ldaxr(v35);
        v37 = --v36 == 0;
      }
      while (__stlxr(v36, v35));
      goto LABEL_52;
    }
  }
LABEL_54:
  v46 = (unint64_t)v97;
  v97 = 0;
  if (v46)
    WTF::fastFree(v46, v27, v28, v29, v30, v31, v32, v33);
  if (v13)
  {
    do
    {
      v47 = __ldaxr(v13);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v13));
    if (!v48)
    {
      atomic_store(1u, v13);
      WTF::fastFree((unint64_t)v13, v27, v28, v29, v30, v31, v32, v33);
    }
  }
  return v34;
}

uint64_t JSC::Wasm::arrayNewElem(JSC::Wasm *this, JSC::Wasm::Instance *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t ArrayFromElementSegment;
  WTF *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  WTF *v27;
  unsigned int v28;
  unsigned int v29;
  WTF *v31;
  WTF *v32;

  v8 = *((_QWORD *)this + 7);
  v9 = *(_QWORD *)(v8 + 8);
  if (*(_DWORD *)(v9 + 284) <= a2)
    goto LABEL_30;
  v10 = a5;
  v11 = a4;
  v12 = a3;
  v14 = *(unsigned int **)(*(_QWORD *)(v9 + 272) + 8 * a2);
  if (v14)
  {
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    v8 = *((_QWORD *)this + 7);
  }
  v16 = *(_QWORD *)(v8 + 8);
  if (*(_DWORD *)(v16 + 188) <= a3)
  {
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x198DBA25CLL);
  }
  v17 = (char *)this + 128;
  v18 = *((_QWORD *)this + 16);
  if (v18 >= 0)
    v17 = (char *)(2 * v18 + 8);
  if (((*(_QWORD *)&v17[((unint64_t)a3 >> 3) & 0x1FFFFFF8] >> a3) & 1) != 0
    && (v19 = *(_QWORD *)(v16 + 176)) != 0)
  {
    v20 = *(unsigned int *)(v19 + 80 * a3 + 60);
  }
  else
  {
    v20 = 0;
  }
  ArrayFromElementSegment = 2;
  if (!__CFADD__((_DWORD)a5, (_DWORD)a4) && v20 >= (a5 + a4))
  {
    if ((_DWORD)a4)
    {
      v22 = (WTF *)WTF::fastMalloc((WTF *)(8 * a4 + 8));
      *(_DWORD *)v22 = v11;
    }
    else
    {
      v22 = 0;
    }
    v32 = v22;
    if (v14)
    {
      do
        v23 = __ldaxr(v14);
      while (__stlxr(v23 + 1, v14));
    }
    v31 = (WTF *)v14;
    ArrayFromElementSegment = JSC::Wasm::createArrayFromElementSegment((uint64_t)this, v11, v12, v10, (uint64_t *)&v32, (unsigned int **)&v31, a7, a8);
    v24 = (unsigned int *)v31;
    v31 = 0;
    if (v24)
    {
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v24);
        WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      WTF::fastFree((unint64_t)v27, a2, a3, a4, a5, a6, a7, a8);
  }
  if (v14)
  {
    do
    {
      v28 = __ldaxr(v14);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v14));
    if (!v29)
    {
      atomic_store(1u, v14);
      WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return ArrayFromElementSegment;
}

uint64_t operationWasmArrayGet(uint64_t a1, int a2, JSC::JSWebAssemblyArray *a3, unsigned int a4)
{
  JSC::JSWebAssemblyArray *v4;
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) = vars0;
  if (((unint64_t)a3 & 0xFFFE000000000002) != 0)
  {
    v4 = 0;
  }
  else if (*((unsigned __int8 *)a3 + 5) <= 0x16u)
  {
    v4 = 0;
  }
  else
  {
    v4 = a3;
  }
  return JSC::JSWebAssemblyArray::get(v4, a4);
}

unint64_t operationWasmArraySet(uint64_t a1, int a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) = vars0;
  if ((a3 & 0xFFFE000000000002) != 0)
  {
    v5 = 0;
  }
  else if (*(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    v5 = 0;
  }
  else
  {
    v5 = a3;
  }
  return JSC::JSWebAssemblyArray::set(v5, a4, a5);
}

BOOL JSC::Wasm::arrayInitElem(JSC::Wasm *this, unint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Wasm::Instance *v9;
  _BOOL8 result;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v9 = 0;
  }
  else if (*(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    v9 = 0;
  }
  else
  {
    v9 = (JSC::Wasm::Instance *)a2;
  }
  if (__CFADD__(a3, (_DWORD)a6))
    return 0;
  if (*((_QWORD *)v9 + 7) < (unint64_t)(a3 + a6))
    return 0;
  v11 = a5 + a6;
  if (__CFADD__(a5, (_DWORD)a6))
    return 0;
  v12 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  if (*(_DWORD *)(v12 + 188) <= a4)
    goto LABEL_32;
  v13 = (char *)this + 128;
  v14 = *((_QWORD *)this + 16);
  if (v14 >= 0)
    v13 = (char *)(2 * v14 + 8);
  if (((*(_QWORD *)&v13[((unint64_t)a4 >> 3) & 0x1FFFFFF8] >> a4) & 1) == 0)
  {
    result = v11 == 0;
    if (!(_DWORD)a6 || v11)
      return result;
    v17 = 0;
LABEL_22:
    if (!*((_DWORD *)v9 + 10) && (unint64_t)*((unsigned __int8 *)v9 + 24) - 227 < 2)
    {
      v18 = *((_QWORD *)v9 + 8);
      if (v18)
        v19 = v18 + 8;
      else
        v19 = 0;
      JSC::Wasm::Instance::copyElementSegment((uint64_t)this, v17, a5, a6, v19 + 8 * a3, a6, a7, a8);
      v20 = *((_QWORD *)this + 1);
      if (*(_DWORD *)(v20 + 760) >= *((unsigned __int8 *)v9 + 7))
        JSC::Heap::writeBarrierSlowPath(v20 + 192, (unint64_t)v9);
      return 1;
    }
LABEL_32:
    __break(0xC471u);
    JUMPOUT(0x198DBA480);
  }
  v15 = *(_QWORD *)(v12 + 176);
  if (v15)
    v16 = *(_DWORD *)(v15 + 80 * a4 + 60);
  else
    v16 = 0;
  result = v11 <= v16;
  if ((_DWORD)a6 && v11 <= v16)
  {
    v17 = v15 + 80 * a4;
    goto LABEL_22;
  }
  return result;
}

BOOL JSC::Wasm::arrayInitData(JSC::Wasm *this, unint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  unint64_t v6;
  _BOOL8 result;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unsigned int v21;

  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v6 = 0;
  }
  else if (*(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    v6 = 0;
  }
  else
  {
    v6 = a2;
  }
  if (__CFADD__(a3, a6) || *(_QWORD *)(v6 + 56) < (unint64_t)(a3 + a6) || __CFADD__(a5, a6))
    return 0;
  v8 = *(_DWORD *)(v6 + 40);
  if (v8)
  {
    if (*(unsigned __int8 *)(v6 + 24) == 248)
    {
      v9 = 1;
    }
    else
    {
      if (*(unsigned __int8 *)(v6 + 24) != 247)
      {
        __break(0xC471u);
        JUMPOUT(0x198DBA6B4);
      }
      v9 = 2;
    }
    v10 = v9 * a6;
    if (v8 == 1 && (*(unsigned __int8 *)(v6 + 24) == 247 || *(unsigned __int8 *)(v6 + 24) == 248))
      goto LABEL_25;
  }
  else
  {
    v9 = 4;
    switch(*(_BYTE *)(v6 + 24))
    {
      case 0xFB:
        v9 = 16;
        break;
      case 0xFC:
      case 0xFE:
        v9 = 8;
        break;
      case 0xFD:
      case 0xFF:
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198DBA6D4);
    }
    v10 = v9 * a6;
  }
  v11 = *(unsigned __int8 *)(v6 + 24);
  if (v11 == 251 || v11 != 255 && v11 != 253)
  {
    v12 = *(_QWORD *)(v6 + 64);
    v13 = v12 + 8;
    goto LABEL_27;
  }
LABEL_25:
  v12 = *(_QWORD *)(v6 + 64);
  v13 = v12 + 4;
LABEL_27:
  if (v12)
    v14 = v13;
  else
    v14 = 0;
  v15 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  if (!*(_BYTE *)(v15 + 268) || *(_DWORD *)(v15 + 264) <= a4)
  {
    __break(0xC471u);
    JUMPOUT(0x198DBA694);
  }
  if (*(_DWORD *)(v15 + 172) <= a4)
  {
    __break(0xC471u);
    JUMPOUT(0x198DBA6DCLL);
  }
  v16 = *(_QWORD *)(v15 + 160) + 16 * a4;
  v18 = *((_QWORD *)this + 17);
  v17 = (char *)this + 136;
  v19 = 2 * v18 + 8;
  if (v18 >= 0)
    v20 = (char *)v19;
  else
    v20 = v17;
  if (((*(_QWORD *)&v20[((unint64_t)a4 >> 3) & 0x1FFFFFF8] >> a4) & 1) != 0)
    v21 = *(_DWORD *)(*(_QWORD *)v16 + 4);
  else
    v21 = 0;
  result = v10 + a5 <= v21;
  if (v10)
  {
    if (v10 + a5 <= v21)
    {
      memcpy((void *)(v14 + v9 * (unint64_t)a3), (const void *)(*(_QWORD *)v16 + a5 + 20), v10);
      return 1;
    }
  }
  return result;
}

uint64_t operationWasmRefTest(uint64_t result, uint64_t a2, int a3, signed int a4, int a5)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a4;
  if (a4 > 0xFFFFFFC0)
    return ((uint64_t (*)(uint64_t, BOOL, uint64_t))JSC::Wasm::TypeInformation::castReference)(a2, a3 != 0, v6) ^ a5;
  v7 = *(_QWORD *)(*(_QWORD *)(result + 56) + 8);
  if (*(unsigned int *)(v7 + 100) > (unint64_t)a4)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 8 * a4);
    return ((uint64_t (*)(uint64_t, BOOL, uint64_t))JSC::Wasm::TypeInformation::castReference)(a2, a3 != 0, v6) ^ a5;
  }
  __break(0xC471u);
  return result;
}

uint64_t operationWasmRefCast(uint64_t result, uint64_t a2, int a3, signed int a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a4;
  if (a4 <= 0xFFFFFFC0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(result + 56) + 8);
    if (*(unsigned int *)(v7 + 100) <= (unint64_t)a4)
    {
      __break(0xC471u);
      return result;
    }
    v6 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 8 * a4);
  }
  if (((uint64_t (*)(uint64_t, BOOL, uint64_t))JSC::Wasm::TypeInformation::castReference)(a2, a3 != 0, v6))return a2;
  else
    return 0;
}

uint64_t JSC::Wasm::Plan::Plan(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  JSC::Wasm::ModuleInformation *v6;
  uint64_t v7;
  _QWORD *v8;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E35B5D08;
  *(_WORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  v6 = (JSC::Wasm::ModuleInformation *)WTF::fastMalloc((WTF *)0x150);
  *(_QWORD *)(a1 + 16) = JSC::Wasm::ModuleInformation::ModuleInformation(v6);
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  v7 = *a3;
  *a3 = 0;
  v8 = *(_QWORD **)(a1 + 24);
  *v8 = a2;
  v8[1] = v7;
  *(_QWORD *)(a1 + 32) = 0x100000001;
  return a1;
}

void JSC::Wasm::Plan::runCompletionTasks(JSC::Wasm::Plan *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;

  v9 = *((unsigned int *)this + 9);
  if ((_DWORD)v9)
  {
    v10 = 16 * v9;
    v11 = (uint64_t *)(*((_QWORD *)this + 3) + 8);
    do
    {
      v12 = *v11;
      v11 += 2;
      (*(void (**)(uint64_t, JSC::Wasm::Plan *))(*(_QWORD *)v12 + 16))(v12, this);
      v10 -= 16;
    }
    while (v10);
  }
  if (*((_DWORD *)this + 8))
  {
    v13 = *((unsigned int *)this + 9);
    v14 = (_QWORD *)*((_QWORD *)this + 3);
    if ((_DWORD)v13)
    {
      v15 = &v14[2 * v13];
      do
      {
        v16 = (unsigned int *)v14[1];
        v14[1] = 0;
        if (v16)
        {
          v17 = v16 + 2;
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            atomic_store(1u, v16 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
          }
        }
        v14 += 2;
      }
      while (v14 != v15);
      *((_DWORD *)this + 9) = 0;
      v14 = (_QWORD *)*((_QWORD *)this + 3);
    }
    if ((_QWORD *)((char *)this + 40) != v14)
    {
      if (!v14)
      {
LABEL_20:
        *((_QWORD *)this + 3) = (char *)this + 40;
        *((_DWORD *)this + 8) = 1;
        goto LABEL_16;
      }
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
      WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
      v14 = (_QWORD *)*((_QWORD *)this + 3);
    }
    if (v14)
      goto LABEL_16;
    goto LABEL_20;
  }
LABEL_16:
  v20 = (unsigned __int8 *)this + 14;
  v21 = atomic_load((unsigned __int8 *)this + 14);
  if ((v21 & 1) != 0)
  {
    atomic_store(0, v20);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v20, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::Wasm::Plan::addCompletionTask(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;

  v6 = (unsigned __int8 *)(a1 + 13);
  if (__ldaxr((unsigned __int8 *)(a1 + 13)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 13);
    goto LABEL_4;
  }
  if (__stxr(1u, v6))
    goto LABEL_3;
LABEL_4:
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) & 1) != 0)
  {
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, a1);
  }
  else
  {
    v14 = *a3;
    *a3 = 0;
    v23 = a2;
    v24 = v14;
    v15 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 32))
    {
      WTF::Vector<std::pair<JSC::VM *,WTF::RefPtr<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>>>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<JSC::VM *,WTF::RefPtr<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>>>>>(a1 + 24, (unint64_t)&v23);
      v19 = v24;
      v24 = 0;
      if (v19)
      {
        v20 = v19 + 2;
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v19 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
        }
      }
    }
    else
    {
      v16 = v15 + 1;
      v17 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * v15);
      *v17 = a2;
      v17[1] = v14;
      *(_DWORD *)(a1 + 36) = v16;
    }
  }
  v18 = __ldxr(v6);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v6))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v6, 0, v8, v9, v10, v11, v12, v13);
}

uint64_t JSC::Wasm::Plan::tryRemoveContextAndCancelIfLast(JSC::Wasm::Plan *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  int v16;
  char *v17;
  char *v18;
  BOOL v19;
  char *v20;
  int64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;

  v10 = (unsigned __int8 *)this + 13;
  if (__ldaxr((unsigned __int8 *)this + 13))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 13);
LABEL_5:
  v12 = (char *)*((_QWORD *)this + 3);
  v13 = *((unsigned int *)this + 9);
  v14 = &v12[16 * v13];
  v15 = 0;
  v16 = 0;
  v17 = v14;
  if ((_DWORD)v13)
  {
    v18 = &v12[16 * v13];
    do
    {
      v19 = *(_QWORD *)v12 == (_QWORD)a2;
      if (*(JSC::VM **)v12 == a2)
      {
        v20 = v12;
        if (v18 != (char *)(*((_QWORD *)this + 3) + 16 * *((unsigned int *)this + 9)))
        {
          if (v17 == v12)
          {
            v20 = v18;
          }
          else
          {
            v21 = v12 - v17;
            memmove(v18, v17, v12 - v17);
            v20 = &v18[v21];
          }
        }
        v22 = (unsigned int *)*((_QWORD *)v12 + 1);
        *((_QWORD *)v12 + 1) = 0;
        if (v22)
        {
          v23 = v22 + 2;
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            atomic_store(1u, v22 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
          }
        }
        v17 = v12 + 16;
        ++v16;
        v18 = v20;
      }
      else
      {
        v20 = v18;
      }
      v15 |= v19;
      v12 += 16;
    }
    while (v12 < v14);
    v12 = (char *)*((_QWORD *)this + 3);
    LODWORD(v13) = *((_DWORD *)this + 9);
    v14 = v20;
  }
  v26 = &v12[16 * v13];
  if (v17 != v26)
  {
    memmove(v14, v17, v26 - v17);
    LODWORD(v13) = *((_DWORD *)this + 9);
  }
  *((_DWORD *)this + 9) = v13 - v16;
  if (!v15)
    goto LABEL_28;
  if (((*(uint64_t (**)(JSC::Wasm::Plan *))(*(_QWORD *)this + 40))(this) & 1) == 0)
  {
    v27 = *((_DWORD *)this + 9);
    if (v27 && (v27 != 1 || **((_QWORD **)this + 3)))
    {
LABEL_28:
      v28 = 0;
      goto LABEL_33;
    }
    v29 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v29 = 0x6300000002;
    *(_QWORD *)(v29 + 8) = "WebAssembly Plan was cancelled. If you see this error message please file a bug at bugs.webkit.org!";
    *(_DWORD *)(v29 + 16) = 4;
    if (*((_QWORD *)this + 7))
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v29, v30, v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      *((_QWORD *)this + 7) = v29;
      *((_BYTE *)this + 64) = 0;
      (*(void (**)(JSC::Wasm::Plan *))(*(_QWORD *)this + 48))(this);
    }
  }
  v28 = 1;
LABEL_33:
  v45 = __ldxr(v10);
  if (v45 == 1)
  {
    if (!__stlxr(0, v10))
      return v28;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  return v28;
}

void JSC::Wasm::Plan::~Plan(JSC::Wasm::Plan *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  JSC::Wasm::Plan *v11;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  JSC::Wasm::ModuleInformation *v32;

  *(_QWORD *)this = off_1E35B5D08;
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = *((unsigned int *)this + 9);
  if ((_DWORD)v10)
  {
    v24 = *((_QWORD *)this + 3);
    v25 = v24 + 16 * v10;
    do
    {
      v26 = *(unsigned int **)(v24 + 8);
      *(_QWORD *)(v24 + 8) = 0;
      if (v26)
      {
        v27 = v26 + 2;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, v26 + 2);
          v30 = v25;
          v31 = v24;
          (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
          v25 = v30;
          v24 = v31;
        }
      }
      v24 += 16;
    }
    while (v24 != v25);
  }
  v11 = (JSC::Wasm::Plan *)*((_QWORD *)this + 3);
  if ((JSC::Wasm::Plan *)((char *)this + 40) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      v32 = (JSC::Wasm::ModuleInformation *)v13;
      WTF::ThreadSafeRefCounted<JSC::Wasm::ModuleInformation,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v32);
    }
  }
}

void JSC::Wasm::OMGPlan::~OMGPlan(JSC::Wasm::OMGPlan *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  JSC::Wasm::Module *v15;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v15 = (JSC::Wasm::Module *)v9;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v15, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      v15 = (JSC::Wasm::Module *)v12;
      WTF::ThreadSafeRefCounted<JSC::Wasm::Module,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v15);
    }
  }
  JSC::Wasm::Plan::~Plan(this, a2, a3, a4, a5, a6, a7, a8);
}

{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::Wasm::Module *v23;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v23 = (JSC::Wasm::Module *)v9;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v23, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      v23 = (JSC::Wasm::Module *)v12;
      WTF::ThreadSafeRefCounted<JSC::Wasm::Module,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v23);
    }
  }
  JSC::Wasm::Plan::~Plan(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
}

BOOL JSC::Wasm::OMGPlan::hasWork(JSC::Wasm::OMGPlan *this)
{
  return *((_BYTE *)this + 88) == 0;
}

uint64_t JSC::Wasm::OMGPlan::multiThreaded(JSC::Wasm::OMGPlan *this)
{
  return 0;
}

uint64_t JSC::Wasm::OMGPlan::isComplete(JSC::Wasm::OMGPlan *this)
{
  return *((unsigned __int8 *)this + 88);
}

void JSC::Wasm::OSREntryPlan::~OSREntryPlan(JSC::Wasm::OSREntryPlan *this, JSC::Wasm::Callee *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  JSC::Wasm::Module *v18;

  v9 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v9, a3, a4, a5, a6, a7, a8);
      if (*(_BYTE *)(v9 + 4) == 1)
        JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      v18 = (JSC::Wasm::Module *)v12;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v18, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v15 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      v18 = (JSC::Wasm::Module *)v15;
      WTF::ThreadSafeRefCounted<JSC::Wasm::Module,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v18);
    }
  }
  JSC::Wasm::Plan::~Plan(this, a2, a3, a4, a5, a6, a7, a8);
}

{
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::Wasm::Module *v26;

  v9 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v9, a3, a4, a5, a6, a7, a8);
      if (*(_BYTE *)(v9 + 4) == 1)
        JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      v26 = (JSC::Wasm::Module *)v12;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v26, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v15 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      v26 = (JSC::Wasm::Module *)v15;
      WTF::ThreadSafeRefCounted<JSC::Wasm::Module,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v26);
    }
  }
  JSC::Wasm::Plan::~Plan(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
}

BOOL JSC::Wasm::OSREntryPlan::hasWork(JSC::Wasm::OSREntryPlan *this)
{
  return *((_BYTE *)this + 96) == 0;
}

uint64_t JSC::Wasm::OSREntryPlan::multiThreaded(JSC::Wasm::OSREntryPlan *this)
{
  return 0;
}

uint64_t JSC::Wasm::OSREntryPlan::isComplete(JSC::Wasm::OSREntryPlan *this)
{
  return *((unsigned __int8 *)this + 96);
}

uint64_t WTF::VectorBuffer<JSC::Wasm::ArgumentLocation,1ul,WTF::FastMalloc>::VectorBuffer(uint64_t result, unint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)result = result + 16;
  *(_DWORD *)(result + 8) = 1;
  *(_DWORD *)(result + 12) = a3;
  if (a2 >= 2)
  {
    v5 = result;
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = 24 * a2;
      v4 = WTF::fastMalloc((WTF *)(24 * a2));
      result = v5;
      *(_DWORD *)(v5 + 8) = (v3 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v5 = v4;
    }
  }
  return result;
}

WTF *JSC::Wasm::OMGIRGenerator::getPushVariable(uint64_t a1, int a2)
{
  uint64_t v2;
  WTF *v5;
  _DWORD *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  _QWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  unint64_t v29;
  _QWORD *v30;
  WTF *v31;

  v2 = *(unsigned int *)(a1 + 512);
  if ((_DWORD)v2 == -1)
  {
    __break(0xC471u);
    goto LABEL_21;
  }
  *(_DWORD *)(a1 + 512) = v2 + 1;
  if (v2 < *(_DWORD *)(a1 + 516))
  {
    if (*(_DWORD *)(a1 + 204) <= v2)
    {
      __break(0xC471u);
      JUMPOUT(0x198DBB324);
    }
    v5 = *(WTF **)(*(_QWORD *)(a1 + 192) + 8 * v2);
    if (*((_DWORD *)v5 + 1) == a2)
      return v5;
    v19 = *(_DWORD **)(a1 + 56);
    v20 = (WTF *)WTF::fastMalloc((WTF *)8);
    *((_DWORD *)v20 + 1) = a2;
    v31 = v20;
    v5 = (WTF *)JSC::B3::SparseCollection<JSC::B3::Variable>::add(v19, &v31);
    v28 = v31;
    v31 = 0;
    if (v28)
      WTF::fastFree((unint64_t)v28, v21, v22, v23, v24, v25, v26, v27);
    v29 = *(unsigned int *)(a1 + 512) - 1;
    if (HIDWORD(v29))
    {
      __break(0xC471u);
      JUMPOUT(0x198DBB32CLL);
    }
    if (v29 < *(unsigned int *)(a1 + 204))
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v29) = v5;
      return v5;
    }
    __break(0xC471u);
LABEL_21:
    JUMPOUT(0x198DBB31CLL);
  }
  *(_DWORD *)(a1 + 516) = v2 + 1;
  v7 = *(_DWORD **)(a1 + 56);
  v8 = (WTF *)WTF::fastMalloc((WTF *)8);
  *((_DWORD *)v8 + 1) = a2;
  v31 = v8;
  v5 = (WTF *)JSC::B3::SparseCollection<JSC::B3::Variable>::add(v7, &v31);
  v16 = v31;
  v31 = 0;
  if (v16)
    WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
  v31 = v5;
  v17 = (_QWORD *)(a1 + 192);
  v18 = *(unsigned int *)(a1 + 204);
  if ((_DWORD)v18 == *(_DWORD *)(a1 + 200))
  {
    v30 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v17, v18 + 1, (unint64_t)&v31);
    v18 = *(unsigned int *)(a1 + 204);
    *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v18) = *v30;
    v5 = v31;
  }
  else
  {
    *(_QWORD *)(*v17 + 8 * v18) = v5;
  }
  *(_DWORD *)(a1 + 204) = v18 + 1;
  return v5;
}

char *JSC::B3::BasicBlock::appendNew<JSC::B3::WasmBoundsCheckValue,JSC::B3::Origin,JSC::ARM64Registers::RegisterID,JSC::B3::Value *,unsigned int>(uint64_t a1, JSC::B3::Value *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  char *result;
  uint64_t v12;
  uint64_t v13;

  v10 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v10 = off_1E357F5F0;
  *(_DWORD *)(v10 + 8) = -1;
  *(_WORD *)(v10 + 12) = 89;
  *(_DWORD *)(v10 + 16) = 0;
  *(_BYTE *)(v10 + 20) = 1;
  *(_QWORD *)(v10 + 24) = a3;
  *(_QWORD *)(v10 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v10, 1, a4);
  *(_QWORD *)v10 = off_1E357F448;
  *(_DWORD *)(v10 + 40) = a5;
  *(_DWORD *)(v10 + 44) = 0;
  *(_BYTE *)(v10 + 48) = 23;
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)v10);
  v13 = v10;
  result = (char *)(a1 + 8);
  v12 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v12 == *(_DWORD *)(a1 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v12 + 1, (unint64_t)&v13);
    v12 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v12) = *(_QWORD *)result;
    v10 = v13;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v12) = v10;
  }
  *(_DWORD *)(a1 + 20) = v12 + 1;
  *(_QWORD *)(v10 + 32) = a1;
  return result;
}

char *JSC::B3::BasicBlock::appendNew<JSC::B3::WasmBoundsCheckValue,JSC::B3::Origin,JSC::B3::Value *,unsigned int,unsigned long>(uint64_t a1, JSC::B3::Value *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v12;
  char *result;
  uint64_t v14;
  uint64_t v15;

  v12 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v12 = off_1E357F5F0;
  *(_DWORD *)(v12 + 8) = -1;
  *(_WORD *)(v12 + 12) = 89;
  *(_DWORD *)(v12 + 16) = 0;
  *(_BYTE *)(v12 + 20) = 1;
  *(_QWORD *)(v12 + 24) = a3;
  *(_QWORD *)(v12 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v12, 1, a4);
  *(_QWORD *)v12 = off_1E357F448;
  *(_DWORD *)(v12 + 40) = a5;
  *(_DWORD *)(v12 + 44) = 1;
  *(_QWORD *)(v12 + 48) = a6;
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)v12);
  v15 = v12;
  result = (char *)(a1 + 8);
  v14 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(a1 + 16))
  {
    result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v14 + 1, (unint64_t)&v15);
    v14 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v14) = *(_QWORD *)result;
    v12 = v15;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v14) = v12;
  }
  *(_DWORD *)(a1 + 20) = v14 + 1;
  *(_QWORD *)(v12 + 32) = a1;
  return result;
}

JSC::B3::Value *JSC::Wasm::OMGIRGenerator::sanitizeAtomicResult(JSC::Wasm::ExtAtomicOpType,JSC::Wasm::Type,JSC::B3::Value *)::{lambda(JSC::B3::Value *)#1}::operator()(uint64_t a1, uint64_t *a2, JSC::B3::Value *a3)
{
  unsigned int v5;
  uint64_t v7;
  JSC::B3::Value *v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  char *v16;
  JSC::B3::Value *v17;

  v5 = 1 << JSC::Wasm::memoryLog2Alignment();
  if (v5 < 2)
  {
    v7 = a2[11];
    v8 = (JSC::B3::Value *)a2[7];
    if (*a2)
      v9 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
    else
      v9 = 0;
    v10 = a2;
    v11 = 255;
  }
  else
  {
    if (v5 != 2)
      return a3;
    v7 = a2[11];
    v8 = (JSC::B3::Value *)a2[7];
    if (*a2)
      v9 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
    else
      v9 = 0;
    v10 = a2;
    v11 = 0xFFFFLL;
  }
  v12 = JSC::Wasm::OMGIRGenerator::constant(v10, 1u, v11, 0, 0);
  a3 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(22, v9, (uint64_t)a3, v12);
  JSC::B3::Procedure::addValueImpl(v8, a3);
  v17 = a3;
  v13 = (char **)(v7 + 8);
  v14 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v7 + 16))
  {
    v16 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v17);
    v14 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v14) = *(_QWORD *)v16;
    v15 = v17;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = a3;
    v15 = a3;
  }
  *(_DWORD *)(v7 + 20) = v14 + 1;
  *((_QWORD *)v15 + 4) = v7;
  return a3;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::emitWriteBarrier(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;

  v9 = a2[50];
  if (v9 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v9 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v9) = -721208385;
  a2[50] += 4;
}

uint64_t JSC::Wasm::OMGIRGenerator::ControlData::ControlData(uint64_t a1, JSC::B3::Procedure *a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  int v13;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  JSC::B3::Value *v22;
  uint64_t v23;
  uint64_t v24;

  *(_DWORD *)a1 = a5;
  *(_QWORD *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 16) = a6;
  *(_QWORD *)(a1 + 24) = a7;
  *(_QWORD *)(a1 + 32) = a8;
  *(_QWORD *)(a1 + 40) = 0;
  v12 = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  if (a5 != 3 && (v13 = *(_DWORD *)(a4 + 8), *(_DWORD *)(a1 + 16) = a6 - v13, a5 == 2))
  {
    if (v13)
    {
      v20 = 0;
      do
      {
        v21 = JSC::Wasm::toB3Type(*(_QWORD *)(*(_QWORD *)a4 + 16 * (v20 + *(_DWORD *)(a4 + 12))));
        v22 = JSC::B3::Procedure::add<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin>(a2, v21, a3);
        v24 = (uint64_t)v22;
        v23 = *(unsigned int *)(a1 + 52);
        if ((_DWORD)v23 == *(_DWORD *)(a1 + 48))
        {
          WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>(v12, (unint64_t)&v24);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v23) = v22;
          *(_DWORD *)(a1 + 52) = v23 + 1;
        }
        ++v20;
      }
      while (v20 < *(_DWORD *)(a4 + 8));
    }
  }
  else if (*(_DWORD *)(a4 + 12))
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = JSC::Wasm::toB3Type(*(_QWORD *)(*(_QWORD *)a4 + v15));
      v18 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v18 = off_1E357F5F0;
      *(_DWORD *)(v18 + 8) = -1;
      *(_WORD *)(v18 + 12) = 153;
      *(_DWORD *)(v18 + 16) = v17;
      *(_BYTE *)(v18 + 20) = 0;
      *(_QWORD *)(v18 + 24) = a3;
      *(_QWORD *)(v18 + 32) = 0;
      JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)v18);
      v24 = v18;
      v19 = *(unsigned int *)(a1 + 52);
      if ((_DWORD)v19 == *(_DWORD *)(a1 + 48))
      {
        WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>(v12, (unint64_t)&v24);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v19) = v18;
        *(_DWORD *)(a1 + 52) = v19 + 1;
      }
      ++v16;
      v15 += 16;
    }
    while (v16 < *(unsigned int *)(a4 + 12));
  }
  return a1;
}

JSC::B3::Value *JSC::B3::Procedure::add<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin>(JSC::B3::Procedure *this, int a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t casual;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v6)
    goto LABEL_16;
  v7 = (_BYTE *)(v6 + 8672);
  *(_BYTE *)(v6 + 8672) = 1;
  v8 = *(unsigned int *)(v6 + 8688);
  if (!(_DWORD)v8)
  {
    v11 = *(_QWORD *)(v6 + 8712);
    v12 = *(_QWORD *)(v6 + 8696);
    if (v11)
    {
LABEL_7:
      v13 = __clz(v11);
      *(_QWORD *)(v6 + 8712) = v11 & ~(0x8000000000000000 >> v13);
      casual = v12 + 16 * v13;
      goto LABEL_4;
    }
    if (*(_BYTE *)(v6 + 8677) == 6)
    {
      v14 = *(_DWORD *)(v6 + 8708);
      v15 = *(unsigned int *)(v6 + 8704);
      if (v15 < v14)
      {
        *(_QWORD *)&v7[8 * v15 + 56] = 0;
        v16 = (unint64_t *)(v6 + 8 * v15 + 8736);
        v17 = v14 - 1 - v15;
        while (v17)
        {
          v12 += 1024;
          v19 = *v16++;
          v18 = v19;
          LODWORD(v15) = v15 + 1;
          --v17;
          if (v19)
          {
            v11 = __rbit64(v18);
            *(_DWORD *)(v6 + 8704) = v15;
            *(_QWORD *)(v6 + 8696) = v12;
            goto LABEL_7;
          }
        }
        *(_DWORD *)(v6 + 8704) = v14;
      }
    }
    *v7 = 0;
LABEL_16:
    casual = bmalloc_allocate_casual(48, 1);
    goto LABEL_5;
  }
  *(_DWORD *)(v6 + 8688) = v8 - *(_DWORD *)(v6 + 8692);
  casual = *(_QWORD *)(v6 + 8680) - v8;
LABEL_4:
  *v7 = 0;
LABEL_5:
  *(_QWORD *)casual = off_1E357F5F0;
  *(_DWORD *)(casual + 8) = -1;
  *(_WORD *)(casual + 12) = 153;
  *(_DWORD *)(casual + 16) = a2;
  *(_BYTE *)(casual + 20) = 0;
  *(_QWORD *)(casual + 24) = a3;
  *(_QWORD *)(casual + 32) = 0;
  return JSC::B3::Procedure::addValueImpl(this, (JSC::B3::Value *)casual);
}

uint64_t JSC::Wasm::BranchHintMap::getBranchHint(JSC::Wasm::BranchHintMap *this, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;

  if (!this)
    return 2;
  v2 = *((_DWORD *)this - 2);
  v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
  v5 = v2 & (v4 ^ HIWORD(v4));
  v6 = *((_DWORD *)this + 2 * v5);
  if (v6 != a2)
  {
    v7 = 1;
    while (v6 != -1)
    {
      v5 = ((_DWORD)v5 + v7) & v2;
      v6 = *((_DWORD *)this + 2 * v5);
      ++v7;
      if (v6 == a2)
        goto LABEL_8;
    }
    v5 = *((unsigned int *)this - 1);
  }
LABEL_8:
  if (v5 != *((_DWORD *)this - 1))
    return *((unsigned __int8 *)this + 8 * v5 + 4);
  else
    return 2;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Wasm::BranchHintMap>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Wasm::BranchHintMap>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Wasm::BranchHintMap,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::Wasm::BranchHintMap>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,JSC::Wasm::BranchHintMap,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::Wasm::BranchHintMap>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
    v5 = v2 & (v4 ^ HIWORD(v4));
    v6 = *(_DWORD *)(result + 16 * v5);
    if (v6 == a2)
    {
LABEL_6:
      result += 16 * v5;
    }
    else
    {
      v7 = 1;
      while (v6 != -1)
      {
        v5 = ((_DWORD)v5 + v7) & v2;
        v6 = *(_DWORD *)(result + 16 * v5);
        ++v7;
        if (v6 == a2)
          goto LABEL_6;
      }
      return 0;
    }
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addCall(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_1::operator() const(JSC::B3::PatchpointValue *,WTF::Box<JSC::Wasm::PatchpointExceptionHandle>,WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>>)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v9 = *(unsigned int **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addCall(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_1::operator() const(JSC::B3::PatchpointValue *,WTF::Box<JSC::Wasm::PatchpointExceptionHandle>,WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>>)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v9 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addCall(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_1::operator() const(JSC::B3::PatchpointValue *,WTF::Box<JSC::Wasm::PatchpointExceptionHandle>,WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>>)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;

  v11 = *(_QWORD **)(a1 + 16);
  v12 = *(_BYTE *)(a2 + 212);
  if (!v12)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v13 = *(_QWORD *)(a1 + 48);
  if (v13)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, a2, a3);
  v14 = *(_QWORD *)(a1 + 32);
  if (v14)
    JSC::Wasm::PatchpointExceptionHandle::generate<JSC::Wasm::OMGIRGenerator>(v14 + 4, a2, a3, v11, a5, a6, a7, a8);
  if (*(_BYTE *)(a1 + 40))
  {
    v15 = *(_DWORD *)(a2 + 200);
    if (v15 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      v15 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v15) = -129924503;
    v16 = *(_DWORD *)(a2 + 200);
    v17 = v16 + 4;
    *(_DWORD *)(a2 + 200) = v16 + 4;
    if ((v16 + 8) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      v17 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v17) = -134118423;
    v18 = *(_DWORD *)(a2 + 200);
    v19 = v18 + 4;
    *(_DWORD *)(a2 + 200) = v18 + 4;
    v20 = *(unsigned int *)(a1 + 24);
    if (*(_DWORD *)(a3 + 20) > v20)
    {
      v21 = *(_BYTE *)(*(_QWORD *)(a3 + 8) + 16 * v20);
      if ((v18 + 8) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
        v19 = *(_DWORD *)(a2 + 200);
      }
      v22 = (32 * (v21 & 0x1F)) | 0xD61F0000;
      goto LABEL_19;
    }
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x198DBBDB8);
  }
  v23 = *(unsigned int *)(a1 + 24);
  if (*(_DWORD *)(a3 + 20) <= v23)
    goto LABEL_20;
  v24 = *(_BYTE *)(*(_QWORD *)(a3 + 8) + 16 * v23);
  *(_DWORD *)(a2 + 208) = 0;
  v22 = (32 * (v24 & 0x1F)) | 0xD63F0000;
  v19 = *(_DWORD *)(a2 + 200);
  if (v19 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
    v19 = *(_DWORD *)(a2 + 200);
  }
LABEL_19:
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v19) = v22;
  *(_DWORD *)(a2 + 200) += 4;
  *(_BYTE *)(a2 + 212) = v12;
}

void JSC::Wasm::PatchpointExceptionHandle::generate<JSC::Wasm::OMGIRGenerator>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  WTF *v43;

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [23],unsigned int,char [24]>(a2, (_DWORD *)(a1 + 4));
  v12 = -1207811152;
  v13 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v13)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x198DBBF98);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v13, a2 + 264, (uint64_t)a4, a5, a6, a7, a8);
  }
  else
  {
    v12 = -1207811137;
  }
  v14 = *(_DWORD *)(a2 + 200);
  if (v14 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v13, a3, (uint64_t)a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v14) = v12;
  *(_DWORD *)(a2 + 200) += 4;
  if ((!*(_BYTE *)(a1 + 1) || *(_BYTE *)a1) && *(_BYTE *)(a1 + 12))
  {
    v15 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v15)
    {
      v17 = (unsigned int *)WTF::fastMalloc((WTF *)((16 * *(unsigned int *)(a1 + 8)) | 8));
      *v17 = v15;
      bzero(v17 + 2, 16 * v15);
      v42 = *(unsigned __int8 *)(a1 + 12);
      v43 = (WTF *)v17;
      if (!v42)
        goto LABEL_21;
      v16 = *(_DWORD *)(a1 + 8);
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v43 = 0;
    }
    v18 = *(_DWORD *)(a3 + 20);
    v19 = JSC::B3::StackmapValue::numChildren(*(JSC::B3::StackmapValue **)a3);
    if (*(_BYTE *)(a1 + 12))
    {
      v25 = 0;
      v26 = 0;
      v27 = (v18 - v16);
      v28 = v19 - *(_DWORD *)(a1 + 8);
      while (v26 < *(unsigned int *)(a1 + 8))
      {
        if (v27 + v26 >= *(unsigned int *)(a3 + 20))
          goto LABEL_28;
        v29 = *(_QWORD *)(a3 + 8);
        v30 = JSC::B3::StackmapValue::child(*(JSC::B3::StackmapValue **)a3, v28 + (int)v26);
        if (v26 >= *v17)
        {
          __break(0xC471u);
          JUMPOUT(0x198DBBFB8);
        }
        v31 = *(_DWORD *)(*(_QWORD *)v30 + 16);
        v32 = v29 + 16 * v27 + v25 * 4;
        v33 = &v17[v25];
        v34 = *(_QWORD *)v32;
        LODWORD(v32) = *(_DWORD *)(v32 + 8);
        *((_QWORD *)v33 + 1) = v34;
        v33[4] = v32;
        v33[5] = v31;
        ++v26;
        v25 += 4;
        if (!*(_BYTE *)(a1 + 12))
          goto LABEL_21;
      }
      goto LABEL_22;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    JSC::Wasm::OMGIRGenerator::addStackMap(a4, (void *)*(unsigned int *)(a1 + 4), (uint64_t *)&v43, v20, v21, v22, v23, v24);
    if (v43)
      WTF::fastFree((unint64_t)v43, v35, v36, v37, v38, v39, v40, v41);
  }
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [23],unsigned int,char [24]>(uint64_t a1, _DWORD *a2)
{
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v40 = off_1E3572250;
    v41 = (WTF *)v43;
    v42 = xmmword_199122F80;
    v43[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", "Store call site index ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%u", *a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", " at throw or call site.");
    v40[5]((WTF::StringPrintStream *)&v40);
    if (v41)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v41, v42, (uint64_t *)&v37);
      v11 = v37;
    }
    else
    {
      v11 = 0;
    }
    v12 = *(_DWORD *)(a1 + 200);
    v38 = v12;
    v37 = 0;
    v39 = v11;
    v13 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 224))
    {
      v14 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v13 + 1, (unint64_t)&v38);
      v15 = *(unsigned int *)(a1 + 228);
      v16 = *(_QWORD *)(a1 + 216) + 16 * v15;
      *(_DWORD *)v16 = *(_DWORD *)v14;
      v17 = *(_QWORD *)(v14 + 8);
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v16 + 8) = v17;
      v18 = v39;
      *(_DWORD *)(a1 + 228) = v15 + 1;
      v39 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::~StringImpl(v18, v4, v5, v6, v7, v8, v9, v10);
          WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
        }
        else
        {
          *(_DWORD *)v18 -= 2;
        }
      }
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 216) + 16 * v13;
      *(_DWORD *)v19 = v12;
      *(_QWORD *)(v19 + 8) = v11;
      *(_DWORD *)(a1 + 228) = v13 + 1;
    }
    v20 = v37;
    v37 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::~StringImpl(v20, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      }
      else
      {
        *(_DWORD *)v20 -= 2;
      }
    }
    if (v41 != (WTF *)v43)
      WTF::fastFree((unint64_t)v41, v4, v5, v6, v7, v8, v9, v10);
  }
}

void JSC::Wasm::OMGIRGenerator::addStackMap(_QWORD *a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;

  v9 = (int)a2;
  while (a1[14])
    a1 = (_QWORD *)a1[13];
  v10 = a1 + 65;
  v11 = a1[65];
  if (v11
    || (WTF::HashTable<JSC::CallSiteIndex,WTF::KeyValuePair<JSC::CallSiteIndex,WTF::FixedVector<JSC::Wasm::OSREntryValue>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CallSiteIndex,WTF::FixedVector<JSC::Wasm::OSREntryValue>>>,WTF::DefaultHash<JSC::CallSiteIndex>,WTF::HashMap<JSC::CallSiteIndex,WTF::FixedVector<JSC::Wasm::OSREntryValue>,WTF::DefaultHash<JSC::CallSiteIndex>,WTF::HashTraits<JSC::CallSiteIndex>,WTF::HashTraits<WTF::FixedVector<JSC::Wasm::OSREntryValue>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CallSiteIndex>>::rehash(a1 + 65, 8u), (v11 = *v10) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = 9 * ((~(v9 << 15) + v9) ^ ((~(v9 << 15) + v9) >> 10));
  v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
  v15 = v12 & (v14 ^ HIWORD(v14));
  v16 = v11 + 16 * v15;
  v17 = *(_DWORD *)v16;
  if (*(_DWORD *)v16 == -1)
  {
LABEL_15:
    *(_DWORD *)v16 = v9;
    v20 = *a3;
    *a3 = 0;
    v21 = *(_QWORD *)(v16 + 8);
    *(_QWORD *)(v16 + 8) = v20;
    if (v21)
      WTF::fastFree(v21, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v22 = *v10;
    if (*v10)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v24 = *v10;
    if (*v10)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 > 2 * v26)
        return;
    }
    else
    {
      if (3 * v27 > 4 * v26)
        return;
      if (!(_DWORD)v27)
      {
        v28 = 8;
        goto LABEL_30;
      }
    }
    v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
LABEL_30:
    WTF::HashTable<JSC::CallSiteIndex,WTF::KeyValuePair<JSC::CallSiteIndex,WTF::FixedVector<JSC::Wasm::OSREntryValue>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CallSiteIndex,WTF::FixedVector<JSC::Wasm::OSREntryValue>>>,WTF::DefaultHash<JSC::CallSiteIndex>,WTF::HashMap<JSC::CallSiteIndex,WTF::FixedVector<JSC::Wasm::OSREntryValue>,WTF::DefaultHash<JSC::CallSiteIndex>,WTF::HashTraits<JSC::CallSiteIndex>,WTF::HashTraits<WTF::FixedVector<JSC::Wasm::OSREntryValue>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CallSiteIndex>>::rehash(v10, v28);
    return;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v9)
  {
    if (v17 == -2)
      v18 = v16;
    v15 = (v15 + v19) & v12;
    v16 = v11 + 16 * v15;
    v17 = *(_DWORD *)v16;
    ++v19;
    if (*(_DWORD *)v16 == -1)
    {
      if (v18)
      {
        *(_DWORD *)v18 = -1;
        *(_QWORD *)(v18 + 8) = 0;
        --*(_DWORD *)(*v10 - 16);
        v16 = v18;
      }
      goto LABEL_15;
    }
  }
}

void WTF::HashTable<JSC::CallSiteIndex,WTF::KeyValuePair<JSC::CallSiteIndex,WTF::FixedVector<JSC::Wasm::OSREntryValue>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CallSiteIndex,WTF::FixedVector<JSC::Wasm::OSREntryValue>>>,WTF::DefaultHash<JSC::CallSiteIndex>,WTF::HashMap<JSC::CallSiteIndex,WTF::FixedVector<JSC::Wasm::OSREntryValue>,WTF::DefaultHash<JSC::CallSiteIndex>,WTF::HashTraits<JSC::CallSiteIndex>,WTF::HashTraits<WTF::FixedVector<JSC::Wasm::OSREntryValue>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CallSiteIndex>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v15 = a2;
    v16 = (_QWORD *)(v7 + 24);
    do
    {
      *((_DWORD *)v16 - 2) = -1;
      *v16 = 0;
      v16 += 2;
      --v15;
    }
    while (v15);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v17 = 0;
    while (1)
    {
      v18 = (int *)(v4 + 16 * v17);
      v19 = *v18;
      if (*v18 != -2)
      {
        if (v19 != -1)
        {
          v22 = *a1;
          if (*a1)
            v23 = *(_DWORD *)(v22 - 8);
          else
            v23 = 0;
          v24 = 0;
          v25 = 9 * ((v19 + ~(v19 << 15)) ^ ((v19 + ~(v19 << 15)) >> 10));
          v26 = ((v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11)) ^ (((v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11)) >> 16);
          do
          {
            v27 = v26 & v23;
            v26 = ++v24 + v27;
          }
          while (*(_DWORD *)(v22 + 16 * v27) != -1);
          v28 = v22 + 16 * v27;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v29)
            WTF::fastFree(v29, v8, v9, v10, v11, v12, v13, v14);
          *(_DWORD *)v28 = *v18;
          v30 = v4 + 16 * v17;
          v31 = *(_QWORD *)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          *(_QWORD *)(v28 + 8) = v31;
          v21 = *(_QWORD *)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          if (!v21)
            goto LABEL_22;
LABEL_21:
          WTF::fastFree(v21, v8, v9, v10, v11, v12, v13, v14);
          goto LABEL_22;
        }
        v20 = v4 + 16 * v17;
        v21 = *(_QWORD *)(v20 + 8);
        *(_QWORD *)(v20 + 8) = 0;
        if (v21)
          goto LABEL_21;
      }
LABEL_22:
      if (++v17 == v5)
        goto LABEL_25;
    }
  }
  if (v4)
LABEL_25:
    WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addCall(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_2::operator() const(JSC::B3::PatchpointValue *,WTF::Box<JSC::Wasm::PatchpointExceptionHandle>,WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>>)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v9 = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addCall(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_2::operator() const(JSC::B3::PatchpointValue *,WTF::Box<JSC::Wasm::PatchpointExceptionHandle>,WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>>)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v9 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addCall(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_2::operator() const(JSC::B3::PatchpointValue *,WTF::Box<JSC::Wasm::PatchpointExceptionHandle>,WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>>)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::AssemblerBuffer *v25;
  unsigned int i;
  unsigned int v27;
  uint64_t v28;
  JSC::AssemblerBuffer *v29;
  unsigned int j;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  const void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  JSC::AssemblerBuffer *v50;
  JSC::AssemblerBuffer *v51;
  uint64_t v52;
  unsigned int v53;

  v11 = *(_QWORD **)(a1 + 16);
  v12 = *(_BYTE *)(a2 + 212);
  if (!v12)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v13 = *(_QWORD *)(a1 + 56);
  if (v13)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, a2, a3);
  v14 = *(_QWORD *)(a1 + 24);
  if (v14)
    JSC::Wasm::PatchpointExceptionHandle::generate<JSC::Wasm::OMGIRGenerator>(v14 + 4, a2, a3, v11, a5, a6, a7, a8);
  if (*(_BYTE *)(a1 + 44))
  {
    v15 = *(_DWORD *)(a2 + 200);
    if (v15 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      v15 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v15) = -129924503;
    v16 = *(_DWORD *)(a2 + 200);
    v17 = v16 + 4;
    *(_DWORD *)(a2 + 200) = v16 + 4;
    if ((v16 + 8) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      v17 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v17) = -134118423;
    *(_DWORD *)(a2 + 200) += 4;
  }
  JSC::CCallHelpers::storeWasmCalleeCalleePatchable((JSC::CCallHelpers *)a2, a2, a3, a4, a5, a6, a7, a8, &v53);
  if (*(_BYTE *)(a1 + 44))
  {
    v25 = (JSC::AssemblerBuffer *)(a2 + 56);
    for (i = *(_DWORD *)(a2 + 200); (signed int)i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
    {
      if (i + 4 > *(_DWORD *)(a2 + 192))
      {
        v50 = v25;
        JSC::AssemblerBuffer::outOfLineGrow(v25, v18, v19, v20, v21, v22, v23, v24);
        v25 = v50;
        i = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
      i = *(_DWORD *)(a2 + 200) + 4;
    }
    v27 = i;
    if (i + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v25, v18, v19, v20, v21, v22, v23, v24);
      v27 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v27) = 335544320;
    *(_DWORD *)(a2 + 200) += 4;
    v28 = i | 0x700000000;
  }
  else
  {
    *(_DWORD *)(a2 + 208) = 0;
    v29 = (JSC::AssemblerBuffer *)(a2 + 56);
    for (j = *(_DWORD *)(a2 + 200); (signed int)j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
    {
      if (j + 4 > *(_DWORD *)(a2 + 192))
      {
        v51 = v29;
        JSC::AssemblerBuffer::outOfLineGrow(v29, v18, v19, v20, v21, v22, v23, v24);
        v29 = v51;
        j = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
      j = *(_DWORD *)(a2 + 200) + 4;
    }
    *(_DWORD *)(a2 + 208) = 0;
    if (j + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v29, v18, v19, v20, v21, v22, v23, v24);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -1811939328;
    v31 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v31;
    v28 = v31 | 0x300000000;
  }
  v52 = v28;
  v32 = *(_QWORD *)(a1 + 32);
  v33 = *(_DWORD *)(a1 + 40);
  v34 = v53;
  v35 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v35 + 8) = 1;
  *(_QWORD *)v35 = off_1E35B5DC8;
  *(_QWORD *)(v35 + 16) = v32;
  *(_QWORD *)(v35 + 24) = v52;
  *(_DWORD *)(v35 + 32) = v33;
  *(_DWORD *)(v35 + 36) = v34;
  v36 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v36 != *(_DWORD *)(a2 + 240))
  {
    v37 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v36);
LABEL_33:
    *v37 = v35;
    *(_DWORD *)(a2 + 244) = v36 + 1;
    *(_BYTE *)(a2 + 212) = v12;
    return;
  }
  v38 = v36 + (v36 >> 2);
  if (v38 >= 0x10)
    v39 = v38 + 1;
  else
    v39 = 16;
  if (v39 <= v36 + 1)
    v40 = v36 + 1;
  else
    v40 = v39;
  if (!(v40 >> 29))
  {
    v41 = *(const void **)(a2 + 232);
    v42 = (void *)WTF::fastMalloc((WTF *)(8 * v40));
    *(_DWORD *)(a2 + 240) = v40;
    *(_QWORD *)(a2 + 232) = v42;
    memcpy(v42, v41, 8 * v36);
    if (v41)
    {
      if (*(const void **)(a2 + 232) == v41)
      {
        *(_QWORD *)(a2 + 232) = 0;
        *(_DWORD *)(a2 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v41, v43, v44, v45, v46, v47, v48, v49);
    }
    v36 = *(unsigned int *)(a2 + 244);
    v37 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v36);
    goto LABEL_33;
  }
  __break(0xC471u);
}

void JSC::CCallHelpers::storeWasmCalleeCalleePatchable(JSC::CCallHelpers *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned int *a9@<X8>)
{
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)this, "Store Callee's wasm callee (patchable)");
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198DBCB58);
  }
  *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
  v11 = *((unsigned __int8 *)this + 272);
  v12 = *((_DWORD *)this + 50);
  for (*a9 = v12; (signed int)v12 < *((_DWORD *)this + 13); *a9 = v12)
  {
    if (v12 + 4 > *((_DWORD *)this + 48))
    {
      v21 = v11;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)this + 56), a2, a3, a4, a5, a6, a7, a8);
      v11 = v21;
      v12 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v12) = -721215457;
    v12 = *((_DWORD *)this + 50) + 4;
    *((_DWORD *)this + 50) = v12;
  }
  v13 = v11 & 0x1F;
  if (v12 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)this + 56), a2, a3, a4, a5, a6, a7, a8);
    v12 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v12) = v13 | 0xD2800000;
  v14 = *((_DWORD *)this + 50);
  v15 = v14 + 4;
  *((_DWORD *)this + 50) = v14 + 4;
  if ((v14 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)this + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v15) = v13 | 0xF2A00000;
  v16 = *((_DWORD *)this + 50);
  v17 = v16 + 4;
  *((_DWORD *)this + 50) = v16 + 4;
  if ((v16 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)this + 56), a2, a3, a4, a5, a6, a7, a8);
    v17 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v17) = v13 | 0xF2C00000;
  v18 = *((_DWORD *)this + 50);
  v19 = v18 + 4;
  *((_DWORD *)this + 50) = v18 + 4;
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198DBCBE8);
  }
  *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
  v20 = *((unsigned __int8 *)this + 272);
  if ((v18 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)this + 56), a2, a3, a4, a5, a6, a7, a8);
    v19 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v19) = v20 | 0xF80083E0;
  *((_DWORD *)this + 50) += 4;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::Wasm::OMGIRGenerator::addCall(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_2::operator() const(JSC::B3::PatchpointValue *,WTF::Box<JSC::Wasm::PatchpointExceptionHandle>,WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)>>>)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t result, _QWORD *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v2 = *(_DWORD *)(result + 24);
  if (v2 < 4)
    v3 = 0;
  else
    v3 = *(_DWORD *)((v2 & 0xFFFFFFFC) + a2[3] - 4);
  v4 = (v2 - v3);
  v5 = a2[23];
  v6 = v4 + v5;
  if (v5 > v4 + v5)
    goto LABEL_18;
  v7 = v5 + a2[1];
  if (v7 < v6)
    goto LABEL_18;
  v8 = *(_QWORD *)(result + 16);
  v9 = *(unsigned int *)(result + 32);
  v10 = ((unint64_t)*(unsigned int *)(result + 28) >> 2) & 1;
  *(_QWORD *)&v19 = v6;
  *((_QWORD *)&v19 + 1) = v10;
  *(_QWORD *)&v20 = v9;
  v11 = *(_DWORD *)(result + 36);
  v12 = v11 < 4 ? 0 : *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12) + v5;
  if (v5 > v13 || v7 < v13)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x198DBCD3CLL);
  }
  *((_QWORD *)&v20 + 1) = v13;
  v15 = *(unsigned int *)(v8 + 12);
  if ((_DWORD)v15 == *(_DWORD *)(v8 + 8))
  {
    result = WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v15 + 1, (unint64_t)&v19);
    v16 = (_OWORD *)(*(_QWORD *)v8 + 32 * *(unsigned int *)(v8 + 12));
    v17 = *(_OWORD *)result;
    v18 = *(_OWORD *)(result + 16);
  }
  else
  {
    v16 = (_OWORD *)(*(_QWORD *)v8 + 32 * v15);
    v17 = v19;
    v18 = v20;
  }
  *v16 = v17;
  v16[1] = v18;
  ++*(_DWORD *)(v8 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 32 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 27))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 32 * v10;
      v20 = (__int128 *)v5;
      do
      {
        v21 = *v20;
        v22 = v20[1];
        v20 += 2;
        *v11 = v21;
        v11[1] = v22;
        v11 += 2;
        v19 -= 32;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 27))
  {
    v6 = result;
    v7 = *(_QWORD *)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v17 = 32 * v8;
      v18 = (__int128 *)v7;
      do
      {
        v19 = *v18;
        v20 = v18[1];
        v18 += 2;
        *v9 = v19;
        v9[1] = v20;
        v9 += 2;
        v17 -= 32;
      }
      while (v17);
    }
    if (v7)
    {
      if (*(_QWORD *)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

JSC::FunctionAllowlist *std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::shouldDumpIRFor(unsigned int)::$_0 &&>>()
{
  return JSC::FunctionAllowlist::FunctionAllowlist((JSC::FunctionAllowlist *)&unk_1ECF59040, *((const char **)&xmmword_1ECF4C290 + 1));
}

uint64_t JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::~FunctionParser(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;

  v9 = *(_QWORD *)(a1 + 14984);
  if ((v9 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v9, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 14968);
  if (v10)
  {
    *(_QWORD *)(a1 + 14968) = 0;
    *(_DWORD *)(a1 + 14976) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *(_QWORD *)(a1 + 14680);
  if (a1 + 14696 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 14680) = 0;
    *(_DWORD *)(a1 + 14688) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = *(_DWORD *)(a1 + 468);
  if (v13)
    WTF::VectorTypeOperations<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry>::destruct(*(_QWORD **)(a1 + 456), (_QWORD *)(*(_QWORD *)(a1 + 456) + 888 * v13), a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 456);
  if (a1 + 472 != v14 && v14)
  {
    *(_QWORD *)(a1 + 456) = 0;
    *(_DWORD *)(a1 + 464) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(_QWORD *)(a1 + 56);
  if (a1 + 72 != v15 && v15)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::VectorTypeOperations<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry>::destruct(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = v9[106];
      if (v10)
      {
        v9[106] = 0;
        *((_DWORD *)v9 + 214) = 0;
        WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
      }
      v11 = v9[50];
      if (v9 + 52 != (_QWORD *)v11 && v11 != 0)
      {
        v9[50] = 0;
        *((_DWORD *)v9 + 102) = 0;
        WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
      }
      v13 = *v9;
      if (v9 + 2 != (_QWORD *)*v9 && v13 != 0)
      {
        *v9 = 0;
        *((_DWORD *)v9 + 2) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      v9 += 111;
    }
    while (v9 != a2);
  }
}

uint64_t JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry::~ControlEntry(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;

  v9 = *(_QWORD *)(a1 + 848);
  if (v9)
  {
    *(_QWORD *)(a1 + 848) = 0;
    *(_DWORD *)(a1 + 856) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *(_QWORD *)(a1 + 400);
  if (a1 + 416 != v10 && v10 != 0)
  {
    *(_QWORD *)(a1 + 400) = 0;
    *(_DWORD *)(a1 + 408) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *(_QWORD *)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v12 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void JSC::Wasm::OMGIRGenerator::~OMGIRGenerator(JSC::Wasm::OMGIRGenerator *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  JSC::Wasm::OMGIRGenerator **v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  JSC::Wasm::OMGIRGenerator *v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  JSC::Wasm::OMGIRGenerator *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;

  v9 = *((unsigned int *)this + 145);
  if ((_DWORD)v9)
  {
    v10 = (uint64_t *)*((_QWORD *)this + 71);
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        v13 = JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::~FunctionParser(v12, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v21 = *((_QWORD *)this + 71);
  if (v21)
  {
    *((_QWORD *)this + 71) = 0;
    *((_DWORD *)this + 144) = 0;
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
  }
  v22 = *((unsigned int *)this + 141);
  v23 = (JSC::Wasm::OMGIRGenerator **)*((_QWORD *)this + 69);
  if (!(_DWORD)v22)
  {
    if (!v23)
      goto LABEL_10;
LABEL_45:
    *((_QWORD *)this + 69) = 0;
    *((_DWORD *)this + 140) = 0;
    WTF::fastFree((unint64_t)v23, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_10;
  }
  v40 = 8 * v22;
  do
  {
    v41 = *v23;
    *v23 = 0;
    if (v41)
    {
      JSC::Wasm::OMGIRGenerator::~OMGIRGenerator(v41);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
    }
    ++v23;
    v40 -= 8;
  }
  while (v40);
  v23 = (JSC::Wasm::OMGIRGenerator **)*((_QWORD *)this + 69);
  if (v23)
    goto LABEL_45;
LABEL_10:
  v24 = (unsigned int *)*((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v24)
  {
    v25 = v24 + 2;
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v24 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
    }
  }
  v28 = *((_QWORD *)this + 66);
  if (v28)
  {
    *((_QWORD *)this + 66) = 0;
    *((_DWORD *)this + 134) = 0;
    WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
  }
  v29 = *((_QWORD *)this + 65);
  if (v29)
  {
    v50 = *(unsigned int *)(v29 - 4);
    if ((_DWORD)v50)
    {
      v51 = (unint64_t *)(v29 + 8);
      do
      {
        if (*((_DWORD *)v51 - 2) != -2)
        {
          v52 = *v51;
          *v51 = 0;
          if (v52)
            WTF::fastFree(v52, a2, a3, a4, a5, a6, a7, a8);
        }
        v51 += 2;
        --v50;
      }
      while (v50);
    }
    WTF::fastFree(v29 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v30 = (JSC::Wasm::OMGIRGenerator *)*((_QWORD *)this + 31);
  if ((JSC::Wasm::OMGIRGenerator *)((char *)this + 264) != v30 && v30 != 0)
  {
    *((_QWORD *)this + 31) = 0;
    *((_DWORD *)this + 64) = 0;
    WTF::fastFree((unint64_t)v30, a2, a3, a4, a5, a6, a7, a8);
  }
  v32 = *((_QWORD *)this + 29);
  if (v32)
    WTF::fastFree(v32 - 16, a2, a3, a4, a5, a6, a7, a8);
  v33 = *((_QWORD *)this + 28);
  if (v33)
    WTF::fastFree(v33 - 16, a2, a3, a4, a5, a6, a7, a8);
  v34 = *((_QWORD *)this + 24);
  if (v34)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v34, a2, a3, a4, a5, a6, a7, a8);
  }
  v35 = *((_QWORD *)this + 22);
  if (v35)
  {
    *((_QWORD *)this + 22) = 0;
    *((_DWORD *)this + 46) = 0;
    WTF::fastFree(v35, a2, a3, a4, a5, a6, a7, a8);
  }
  v36 = *((_QWORD *)this + 20);
  if (v36)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v36, a2, a3, a4, a5, a6, a7, a8);
  }
  v37 = *((_QWORD *)this + 17);
  if (v37)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v37, a2, a3, a4, a5, a6, a7, a8);
  }
  v38 = *((_QWORD *)this + 15);
  if (v38)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v38, a2, a3, a4, a5, a6, a7, a8);
  }
  v39 = *((_QWORD *)this + 8);
  if (v39)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v39, a2, a3, a4, a5, a6, a7, a8);
  }
}

void std::make_unique[abi:sn180100]<JSC::Compilation,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)2367>,std::unique_ptr<JSC::OpaqueByproducts>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v15 = *a2;
  v14 = (unsigned int *)a2[1];
  a2[1] = 0;
  v16 = *a3;
  *a3 = 0;
  *v13 = v15;
  if (v14)
  {
    do
      v17 = __ldaxr(v14);
    while (__stlxr(v17 + 1, v14));
    v13[1] = v14;
    v13[2] = v16;
    *a1 = v13;
    do
    {
      v18 = __ldaxr(v14);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v14));
    if (!v19)
    {
      atomic_store(1u, v14);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v14, v6, v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
  }
  else
  {
    v13[1] = 0;
    v13[2] = v16;
    *a1 = v13;
  }
}

unsigned int **WTF::RefPtr<JSC::Wasm::OMGCallee,WTF::RawPtrTraits<JSC::Wasm::OMGCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::OMGCallee>>::operator=<JSC::Wasm::OMGCallee>(unsigned int **a1, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

uint64_t WTF::dataLog<char [27],JSC::Wasm::TierUpCount,char [6],unsigned int,char [2]>(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "delayOMGCompile counter = ");
  WTF::PrintStream::printf(v6, "%lf/%lf, %d", *(float *)(a1 + 4) + (double)*(int *)a1, (double)*(int *)(a1 + 8), *(_DWORD *)a1);
  WTF::PrintStream::printf(v6, "%s", " for ");
  WTF::PrintStream::printf(v6, "%u", *a2);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [30],unsigned int,char [6],char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Choosing not to OMG-optimize ");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", " yet.");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::Wasm::TierUpCount::optimizeSoon(JSC::Wasm::TierUpCount *this, int a2)
{
  int v4;

  v4 = a2;
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<unsigned int,char [23],char [2]>(&v4);
  return JSC::ExecutionCounter<(JSC::CountingVariant)1>::setNewThreshold((uint64_t)this, SHIDWORD(xmmword_1ECF4C6D8), 0);
}

uint64_t WTF::dataLog<unsigned int,char [23],char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", ": OMG-optimizing soon.");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [27],unsigned int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "triggerOMGReplacement for ");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<unsigned int,char [35],char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", ": Not OMG-optimizing anytime soon.");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<unsigned int,char [32],char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", ": OMG-optimizing after warm-up.");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [47],WTF::RawHex,char [5],WTF::RawHex,char [21],WTF::RawHex,char [2]>(const char *a1, const void **a2, const char *a3, const void **a4, const char *a5, const void **a6, const char *a7)
{
  unint64_t v14;
  uint64_t v15;
  WTF::PrintStream *v16;
  char v18;
  char **v19;
  char *v20;

  v14 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v14 != -1)
  {
    v20 = &v18;
    v19 = &v20;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v15 = WTF::s_file;
  v16 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v16, "%s", a1);
  WTF::PrintStream::printf(v16, "%p", *a2);
  WTF::PrintStream::printf(v16, "%s", a3);
  WTF::PrintStream::printf(v16, "%p", *a4);
  WTF::PrintStream::printf(v16, "%s", a5);
  WTF::PrintStream::printf(v16, "%p", *a6);
  WTF::PrintStream::printf(v16, "%s", a7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
}

uint64_t WTF::dataLog<unsigned int,char [34],WTF::RawPointer,char [2]>(_DWORD *a1, const void **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%u", *a1);
  WTF::PrintStream::printf(v6, "%s", ":OMG OSR entry: got entry callee ");
  WTF::PrintStream::printf(v6, "%p", *a2);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [22],unsigned int,char [5],unsigned int,char [32],unsigned int,char [28],char [2]>(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "Inner-loop loopIndex#");
  WTF::PrintStream::printf(v8, "%u", *a1);
  WTF::PrintStream::printf(v8, "%s", " in ");
  WTF::PrintStream::printf(v8, "%u", *a2);
  WTF::PrintStream::printf(v8, "%s", " setting parent loop loopIndex#");
  WTF::PrintStream::printf(v8, "%u", *a3);
  WTF::PrintStream::printf(v8, "%s", "'s trigger and backing off.");
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t JSC::Wasm::createArrayFromDataSegment<unsigned char>(_QWORD *a1, unsigned __int8 *a2, unint64_t a3, unsigned int a4, unsigned int a5, uint64_t *a6, unsigned int **a7, uint64_t a8)
{
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  JSC *v27;
  unint64_t v28;
  unsigned int v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t (*v44)(__int128 *);
  _QWORD *v45;
  __int128 v46;
  __int128 v47;
  WTF *v48;
  __int128 v49;
  __int128 v50;

  if (*((_DWORD *)a2 + 4))
  {
    v13 = *a2;
    if (v13 == 248)
    {
      v14 = 1;
    }
    else
    {
      if (v13 != 247)
      {
        __break(0xC471u);
        JUMPOUT(0x198DBE088);
      }
      v14 = 2;
    }
  }
  else
  {
    v14 = 4;
    switch(*a2)
    {
      case 0xFBu:
        v14 = 16;
        break;
      case 0xFCu:
      case 0xFEu:
        v14 = 8;
        break;
      case 0xFDu:
      case 0xFFu:
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198DBE0A8);
    }
  }
  v15 = 2;
  if (!HIDWORD(a3) && ((v14 * (unint64_t)a3) & 0xFFFFFFFF00000000) == 0)
  {
    v16 = v14 * a3;
    if (__CFADD__(a5, v16))
      return 2;
    if (*a6)
      v17 = (void *)(*a6 + 4);
    else
      v17 = 0;
    v18 = *(_QWORD *)(a1[7] + 8);
    if (!*(_BYTE *)(v18 + 268) || *(_DWORD *)(v18 + 264) <= a4)
    {
      __break(0xC471u);
      JUMPOUT(0x198DBE068);
    }
    if (*(_DWORD *)(v18 + 172) <= a4)
    {
      __break(0xC471u);
      JUMPOUT(0x198DBE0B0);
    }
    v19 = *(_QWORD *)(v18 + 160) + 16 * a4;
    v20 = (uint64_t)(a1 + 17);
    v21 = a1[17];
    if (v21 >= 0)
      v20 = 2 * v21 + 8;
    if (((*(_QWORD *)(v20 + (((unint64_t)a4 >> 3) & 0x1FFFFFF8)) >> a4) & 1) != 0)
      v22 = *(_DWORD *)(*(_QWORD *)v19 + 4);
    else
      v22 = 0;
    v23 = v16 + a5;
    if (v16 && v23 <= v22)
      memcpy(v17, (const void *)(*(_QWORD *)v19 + a5 + 20), v16);
    if (v23 > v22)
    {
      return 2;
    }
    else
    {
      v46 = *(_OWORD *)a2;
      v47 = *((_OWORD *)a2 + 1);
      v24 = *a7;
      if (v24)
      {
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 + 1, v24));
      }
      v26 = *(_QWORD *)(a1[3] + 32);
      v27 = *(JSC **)(v26 + 56);
      v28 = *(_QWORD *)(v26 + 1280);
      if ((v28 & 1) != 0)
      {
        v44 = *(uint64_t (**)(__int128 *))(v28 & 0xFFFFFFFFFFFFFFFCLL);
        v45 = (_QWORD *)(v26 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v26 & 8) != 0)
          v45 = (_QWORD *)(v26 - 16);
        *(_QWORD *)&v49 = *v45;
        *((_QWORD *)&v49 + 1) = v26;
        *(_QWORD *)&v50 = v26 + 1280;
        v28 = v44(&v49);
      }
      v49 = v46;
      v50 = v47;
      if (v24)
      {
        do
          v29 = __ldaxr(v24);
        while (__stlxr(v29 + 1, v24));
      }
      v48 = (WTF *)v24;
      v37 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v27, (JSC::VM *)v28, &v49, a3, a6, (unsigned int **)&v48, (uint64_t)a7, a8);
      v38 = (unsigned int *)v48;
      v48 = 0;
      if (v38)
      {
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          atomic_store(1u, v38);
          WTF::fastFree((unint64_t)v38, v30, v31, v32, v33, v34, v35, v36);
        }
      }
      if (v37)
        v15 = v37;
      else
        v15 = 2;
      if (v24)
      {
        do
        {
          v41 = __ldaxr(v24);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v24));
        if (!v42)
        {
          atomic_store(1u, v24);
          WTF::fastFree((unint64_t)v24, v30, v31, v32, v33, v34, v35, v36);
        }
      }
    }
  }
  return v15;
}

uint64_t JSC::Wasm::createArrayFromDataSegment<unsigned short>(_QWORD *a1, unsigned __int8 *a2, unint64_t a3, unsigned int a4, unsigned int a5, uint64_t *a6, unsigned int **a7, uint64_t a8)
{
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  JSC *v27;
  unint64_t v28;
  unsigned int v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t (*v44)(__int128 *);
  _QWORD *v45;
  __int128 v46;
  __int128 v47;
  WTF *v48;
  __int128 v49;
  __int128 v50;

  if (*((_DWORD *)a2 + 4))
  {
    v13 = *a2;
    if (v13 == 248)
    {
      v14 = 1;
    }
    else
    {
      if (v13 != 247)
      {
        __break(0xC471u);
        JUMPOUT(0x198DBE3B4);
      }
      v14 = 2;
    }
  }
  else
  {
    v14 = 4;
    switch(*a2)
    {
      case 0xFBu:
        v14 = 16;
        break;
      case 0xFCu:
      case 0xFEu:
        v14 = 8;
        break;
      case 0xFDu:
      case 0xFFu:
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198DBE3D4);
    }
  }
  v15 = 2;
  if (!HIDWORD(a3) && ((v14 * (unint64_t)a3) & 0xFFFFFFFF00000000) == 0)
  {
    v16 = v14 * a3;
    if (__CFADD__(a5, v16))
      return 2;
    if (*a6)
      v17 = (void *)(*a6 + 4);
    else
      v17 = 0;
    v18 = *(_QWORD *)(a1[7] + 8);
    if (!*(_BYTE *)(v18 + 268) || *(_DWORD *)(v18 + 264) <= a4)
    {
      __break(0xC471u);
      JUMPOUT(0x198DBE394);
    }
    if (*(_DWORD *)(v18 + 172) <= a4)
    {
      __break(0xC471u);
      JUMPOUT(0x198DBE3DCLL);
    }
    v19 = *(_QWORD *)(v18 + 160) + 16 * a4;
    v20 = (uint64_t)(a1 + 17);
    v21 = a1[17];
    if (v21 >= 0)
      v20 = 2 * v21 + 8;
    if (((*(_QWORD *)(v20 + (((unint64_t)a4 >> 3) & 0x1FFFFFF8)) >> a4) & 1) != 0)
      v22 = *(_DWORD *)(*(_QWORD *)v19 + 4);
    else
      v22 = 0;
    v23 = v16 + a5;
    if (v16 && v23 <= v22)
      memcpy(v17, (const void *)(*(_QWORD *)v19 + a5 + 20), v16);
    if (v23 > v22)
    {
      return 2;
    }
    else
    {
      v46 = *(_OWORD *)a2;
      v47 = *((_OWORD *)a2 + 1);
      v24 = *a7;
      if (v24)
      {
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 + 1, v24));
      }
      v26 = *(_QWORD *)(a1[3] + 32);
      v27 = *(JSC **)(v26 + 56);
      v28 = *(_QWORD *)(v26 + 1280);
      if ((v28 & 1) != 0)
      {
        v44 = *(uint64_t (**)(__int128 *))(v28 & 0xFFFFFFFFFFFFFFFCLL);
        v45 = (_QWORD *)(v26 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v26 & 8) != 0)
          v45 = (_QWORD *)(v26 - 16);
        *(_QWORD *)&v49 = *v45;
        *((_QWORD *)&v49 + 1) = v26;
        *(_QWORD *)&v50 = v26 + 1280;
        v28 = v44(&v49);
      }
      v49 = v46;
      v50 = v47;
      if (v24)
      {
        do
          v29 = __ldaxr(v24);
        while (__stlxr(v29 + 1, v24));
      }
      v48 = (WTF *)v24;
      v37 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v27, (JSC::VM *)v28, &v49, a3, a6, (unsigned int **)&v48, (uint64_t)a7, a8);
      v38 = (unsigned int *)v48;
      v48 = 0;
      if (v38)
      {
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          atomic_store(1u, v38);
          WTF::fastFree((unint64_t)v38, v30, v31, v32, v33, v34, v35, v36);
        }
      }
      if (v37)
        v15 = v37;
      else
        v15 = 2;
      if (v24)
      {
        do
        {
          v41 = __ldaxr(v24);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v24));
        if (!v42)
        {
          atomic_store(1u, v24);
          WTF::fastFree((unint64_t)v24, v30, v31, v32, v33, v34, v35, v36);
        }
      }
    }
  }
  return v15;
}

uint64_t JSC::Wasm::createArrayFromDataSegment<unsigned int>(_QWORD *a1, unsigned __int8 *a2, unint64_t a3, unsigned int a4, unsigned int a5, uint64_t *a6, unsigned int **a7, uint64_t a8)
{
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  JSC *v27;
  unint64_t v28;
  unsigned int v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t (*v44)(__int128 *);
  _QWORD *v45;
  __int128 v46;
  __int128 v47;
  WTF *v48;
  __int128 v49;
  __int128 v50;

  if (*((_DWORD *)a2 + 4))
  {
    v13 = *a2;
    if (v13 == 248)
    {
      v14 = 1;
    }
    else
    {
      if (v13 != 247)
      {
        __break(0xC471u);
        JUMPOUT(0x198DBE6E0);
      }
      v14 = 2;
    }
  }
  else
  {
    v14 = 4;
    switch(*a2)
    {
      case 0xFBu:
        v14 = 16;
        break;
      case 0xFCu:
      case 0xFEu:
        v14 = 8;
        break;
      case 0xFDu:
      case 0xFFu:
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198DBE700);
    }
  }
  v15 = 2;
  if (!HIDWORD(a3) && ((v14 * (unint64_t)a3) & 0xFFFFFFFF00000000) == 0)
  {
    v16 = v14 * a3;
    if (__CFADD__(a5, v16))
      return 2;
    if (*a6)
      v17 = (void *)(*a6 + 4);
    else
      v17 = 0;
    v18 = *(_QWORD *)(a1[7] + 8);
    if (!*(_BYTE *)(v18 + 268) || *(_DWORD *)(v18 + 264) <= a4)
    {
      __break(0xC471u);
      JUMPOUT(0x198DBE6C0);
    }
    if (*(_DWORD *)(v18 + 172) <= a4)
    {
      __break(0xC471u);
      JUMPOUT(0x198DBE708);
    }
    v19 = *(_QWORD *)(v18 + 160) + 16 * a4;
    v20 = (uint64_t)(a1 + 17);
    v21 = a1[17];
    if (v21 >= 0)
      v20 = 2 * v21 + 8;
    if (((*(_QWORD *)(v20 + (((unint64_t)a4 >> 3) & 0x1FFFFFF8)) >> a4) & 1) != 0)
      v22 = *(_DWORD *)(*(_QWORD *)v19 + 4);
    else
      v22 = 0;
    v23 = v16 + a5;
    if (v16 && v23 <= v22)
      memcpy(v17, (const void *)(*(_QWORD *)v19 + a5 + 20), v16);
    if (v23 > v22)
    {
      return 2;
    }
    else
    {
      v46 = *(_OWORD *)a2;
      v47 = *((_OWORD *)a2 + 1);
      v24 = *a7;
      if (v24)
      {
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 + 1, v24));
      }
      v26 = *(_QWORD *)(a1[3] + 32);
      v27 = *(JSC **)(v26 + 56);
      v28 = *(_QWORD *)(v26 + 1280);
      if ((v28 & 1) != 0)
      {
        v44 = *(uint64_t (**)(__int128 *))(v28 & 0xFFFFFFFFFFFFFFFCLL);
        v45 = (_QWORD *)(v26 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v26 & 8) != 0)
          v45 = (_QWORD *)(v26 - 16);
        *(_QWORD *)&v49 = *v45;
        *((_QWORD *)&v49 + 1) = v26;
        *(_QWORD *)&v50 = v26 + 1280;
        v28 = v44(&v49);
      }
      v49 = v46;
      v50 = v47;
      if (v24)
      {
        do
          v29 = __ldaxr(v24);
        while (__stlxr(v29 + 1, v24));
      }
      v48 = (WTF *)v24;
      v37 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v27, (JSC::VM *)v28, &v49, a3, a6, (unsigned int **)&v48, (uint64_t)a7, a8);
      v38 = (unsigned int *)v48;
      v48 = 0;
      if (v38)
      {
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          atomic_store(1u, v38);
          WTF::fastFree((unint64_t)v38, v30, v31, v32, v33, v34, v35, v36);
        }
      }
      if (v37)
        v15 = v37;
      else
        v15 = 2;
      if (v24)
      {
        do
        {
          v41 = __ldaxr(v24);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v24));
        if (!v42)
        {
          atomic_store(1u, v24);
          WTF::fastFree((unint64_t)v24, v30, v31, v32, v33, v34, v35, v36);
        }
      }
    }
  }
  return v15;
}

uint64_t JSC::Wasm::createArrayFromDataSegment<unsigned long long>(_QWORD *a1, unsigned __int8 *a2, unint64_t a3, unsigned int a4, unsigned int a5, uint64_t *a6, unsigned int **a7, uint64_t a8)
{
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  JSC *v27;
  unint64_t v28;
  unsigned int v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t (*v44)(__int128 *);
  _QWORD *v45;
  __int128 v46;
  __int128 v47;
  WTF *v48;
  __int128 v49;
  __int128 v50;

  if (*((_DWORD *)a2 + 4))
  {
    v13 = *a2;
    if (v13 == 248)
    {
      v14 = 1;
    }
    else
    {
      if (v13 != 247)
      {
        __break(0xC471u);
        JUMPOUT(0x198DBEA0CLL);
      }
      v14 = 2;
    }
  }
  else
  {
    v14 = 4;
    switch(*a2)
    {
      case 0xFBu:
        v14 = 16;
        break;
      case 0xFCu:
      case 0xFEu:
        v14 = 8;
        break;
      case 0xFDu:
      case 0xFFu:
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198DBEA2CLL);
    }
  }
  v15 = 2;
  if (!HIDWORD(a3) && ((v14 * (unint64_t)a3) & 0xFFFFFFFF00000000) == 0)
  {
    v16 = v14 * a3;
    if (__CFADD__(a5, v16))
      return 2;
    if (*a6)
      v17 = (void *)(*a6 + 8);
    else
      v17 = 0;
    v18 = *(_QWORD *)(a1[7] + 8);
    if (!*(_BYTE *)(v18 + 268) || *(_DWORD *)(v18 + 264) <= a4)
    {
      __break(0xC471u);
      JUMPOUT(0x198DBE9ECLL);
    }
    if (*(_DWORD *)(v18 + 172) <= a4)
    {
      __break(0xC471u);
      JUMPOUT(0x198DBEA34);
    }
    v19 = *(_QWORD *)(v18 + 160) + 16 * a4;
    v20 = (uint64_t)(a1 + 17);
    v21 = a1[17];
    if (v21 >= 0)
      v20 = 2 * v21 + 8;
    if (((*(_QWORD *)(v20 + (((unint64_t)a4 >> 3) & 0x1FFFFFF8)) >> a4) & 1) != 0)
      v22 = *(_DWORD *)(*(_QWORD *)v19 + 4);
    else
      v22 = 0;
    v23 = v16 + a5;
    if (v16 && v23 <= v22)
      memcpy(v17, (const void *)(*(_QWORD *)v19 + a5 + 20), v16);
    if (v23 > v22)
    {
      return 2;
    }
    else
    {
      v46 = *(_OWORD *)a2;
      v47 = *((_OWORD *)a2 + 1);
      v24 = *a7;
      if (v24)
      {
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 + 1, v24));
      }
      v26 = *(_QWORD *)(a1[3] + 32);
      v27 = *(JSC **)(v26 + 56);
      v28 = *(_QWORD *)(v26 + 1280);
      if ((v28 & 1) != 0)
      {
        v44 = *(uint64_t (**)(__int128 *))(v28 & 0xFFFFFFFFFFFFFFFCLL);
        v45 = (_QWORD *)(v26 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v26 & 8) != 0)
          v45 = (_QWORD *)(v26 - 16);
        *(_QWORD *)&v49 = *v45;
        *((_QWORD *)&v49 + 1) = v26;
        *(_QWORD *)&v50 = v26 + 1280;
        v28 = v44(&v49);
      }
      v49 = v46;
      v50 = v47;
      if (v24)
      {
        do
          v29 = __ldaxr(v24);
        while (__stlxr(v29 + 1, v24));
      }
      v48 = (WTF *)v24;
      v37 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v27, (JSC::VM *)v28, &v49, a3, a6, (unsigned int **)&v48, (uint64_t)a7, a8);
      v38 = (unsigned int *)v48;
      v48 = 0;
      if (v38)
      {
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          atomic_store(1u, v38);
          WTF::fastFree((unint64_t)v38, v30, v31, v32, v33, v34, v35, v36);
        }
      }
      if (v37)
        v15 = v37;
      else
        v15 = 2;
      if (v24)
      {
        do
        {
          v41 = __ldaxr(v24);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v24));
        if (!v42)
        {
          atomic_store(1u, v24);
          WTF::fastFree((unint64_t)v24, v30, v31, v32, v33, v34, v35, v36);
        }
      }
    }
  }
  return v15;
}

uint64_t JSC::Wasm::createArrayFromDataSegment<JSC::v128_u>(_QWORD *a1, unsigned __int8 *a2, unint64_t a3, unsigned int a4, unsigned int a5, uint64_t *a6, unsigned int **a7, uint64_t a8)
{
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  JSC *v27;
  unint64_t v28;
  unsigned int v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t (*v44)(__int128 *);
  _QWORD *v45;
  __int128 v46;
  __int128 v47;
  WTF *v48;
  __int128 v49;
  __int128 v50;

  if (*((_DWORD *)a2 + 4))
  {
    v13 = *a2;
    if (v13 == 248)
    {
      v14 = 1;
    }
    else
    {
      if (v13 != 247)
      {
        __break(0xC471u);
        JUMPOUT(0x198DBED38);
      }
      v14 = 2;
    }
  }
  else
  {
    v14 = 4;
    switch(*a2)
    {
      case 0xFBu:
        v14 = 16;
        break;
      case 0xFCu:
      case 0xFEu:
        v14 = 8;
        break;
      case 0xFDu:
      case 0xFFu:
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198DBED58);
    }
  }
  v15 = 2;
  if (!HIDWORD(a3) && ((v14 * (unint64_t)a3) & 0xFFFFFFFF00000000) == 0)
  {
    v16 = v14 * a3;
    if (__CFADD__(a5, v16))
      return 2;
    if (*a6)
      v17 = (void *)(*a6 + 8);
    else
      v17 = 0;
    v18 = *(_QWORD *)(a1[7] + 8);
    if (!*(_BYTE *)(v18 + 268) || *(_DWORD *)(v18 + 264) <= a4)
    {
      __break(0xC471u);
      JUMPOUT(0x198DBED18);
    }
    if (*(_DWORD *)(v18 + 172) <= a4)
    {
      __break(0xC471u);
      JUMPOUT(0x198DBED60);
    }
    v19 = *(_QWORD *)(v18 + 160) + 16 * a4;
    v20 = (uint64_t)(a1 + 17);
    v21 = a1[17];
    if (v21 >= 0)
      v20 = 2 * v21 + 8;
    if (((*(_QWORD *)(v20 + (((unint64_t)a4 >> 3) & 0x1FFFFFF8)) >> a4) & 1) != 0)
      v22 = *(_DWORD *)(*(_QWORD *)v19 + 4);
    else
      v22 = 0;
    v23 = v16 + a5;
    if (v16 && v23 <= v22)
      memcpy(v17, (const void *)(*(_QWORD *)v19 + a5 + 20), v16);
    if (v23 > v22)
    {
      return 2;
    }
    else
    {
      v46 = *(_OWORD *)a2;
      v47 = *((_OWORD *)a2 + 1);
      v24 = *a7;
      if (v24)
      {
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 + 1, v24));
      }
      v26 = *(_QWORD *)(a1[3] + 32);
      v27 = *(JSC **)(v26 + 56);
      v28 = *(_QWORD *)(v26 + 1280);
      if ((v28 & 1) != 0)
      {
        v44 = *(uint64_t (**)(__int128 *))(v28 & 0xFFFFFFFFFFFFFFFCLL);
        v45 = (_QWORD *)(v26 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v26 & 8) != 0)
          v45 = (_QWORD *)(v26 - 16);
        *(_QWORD *)&v49 = *v45;
        *((_QWORD *)&v49 + 1) = v26;
        *(_QWORD *)&v50 = v26 + 1280;
        v28 = v44(&v49);
      }
      v49 = v46;
      v50 = v47;
      if (v24)
      {
        do
          v29 = __ldaxr(v24);
        while (__stlxr(v29 + 1, v24));
      }
      v48 = (WTF *)v24;
      v37 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v27, (JSC::VM *)v28, &v49, a3, a6, (unsigned int **)&v48, (uint64_t)a7, a8);
      v38 = (unsigned int *)v48;
      v48 = 0;
      if (v38)
      {
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          atomic_store(1u, v38);
          WTF::fastFree((unint64_t)v38, v30, v31, v32, v33, v34, v35, v36);
        }
      }
      if (v37)
        v15 = v37;
      else
        v15 = 2;
      if (v24)
      {
        do
        {
          v41 = __ldaxr(v24);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v24));
        if (!v42)
        {
          atomic_store(1u, v24);
          WTF::fastFree((unint64_t)v24, v30, v31, v32, v33, v34, v35, v36);
        }
      }
    }
  }
  return v15;
}

uint64_t JSC::Wasm::createArrayFromElementSegment(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t *a5, unsigned int **a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  JSC *v19;
  unint64_t v20;
  unsigned int v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t (*v35)(__int128 *);
  _QWORD *v36;
  WTF *v37;
  __int128 v38;
  uint64_t v39;
  char v40;

  v8 = *(_QWORD *)(*(_QWORD *)(result + 56) + 8);
  if (*(_DWORD *)(v8 + 188) <= a3)
  {
    __break(0xC471u);
    return result;
  }
  v12 = result;
  if (*a5)
    v13 = *a5 + 8;
  else
    v13 = 0;
  JSC::Wasm::Instance::copyElementSegment(result, *(_QWORD *)(v8 + 176) + 80 * a3, a4, a2, v13, (uint64_t)a6, a7, a8);
  v16 = *a6;
  if (v16)
  {
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v12 + 24) + 32);
  v19 = *(JSC **)(v18 + 56);
  v20 = *(_QWORD *)(v18 + 1280);
  if ((v20 & 1) != 0)
  {
    v35 = *(uint64_t (**)(__int128 *))(v20 & 0xFFFFFFFFFFFFFFFCLL);
    v36 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v18 & 8) != 0)
      v36 = (_QWORD *)(v18 - 16);
    *(_QWORD *)&v38 = *v36;
    *((_QWORD *)&v38 + 1) = v18;
    v39 = v18 + 1280;
    v20 = v35(&v38);
  }
  v38 = xmmword_19915A140;
  LODWORD(v39) = 0;
  v40 = 1;
  if (v16)
  {
    do
      v21 = __ldaxr(v16);
    while (__stlxr(v21 + 1, v16));
  }
  v37 = (WTF *)v16;
  v29 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v19, (JSC::VM *)v20, &v38, a2, a5, (unsigned int **)&v37, v14, v15);
  v30 = (unsigned int *)v37;
  v37 = 0;
  if (!v30)
    goto LABEL_13;
  do
  {
    v31 = __ldaxr(v30);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v30));
  if (!v32)
  {
    atomic_store(1u, v30);
    WTF::fastFree((unint64_t)v30, v22, v23, v24, v25, v26, v27, v28);
    if (v16)
      goto LABEL_14;
  }
  else
  {
LABEL_13:
    if (v16)
    {
      do
      {
LABEL_14:
        v33 = __ldaxr(v16);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v16));
      if (!v34)
      {
        atomic_store(1u, v16);
        WTF::fastFree((unint64_t)v16, v22, v23, v24, v25, v26, v27, v28);
      }
    }
  }
  if (v29)
    return v29;
  else
    return 2;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::restoreWasmContextInstance(JSC::B3::BasicBlock *,JSC::B3::Value *)::$_0>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  _QWORD *v13;

  if (*(_DWORD *)(a3 + 20))
  {
    v8 = **(_BYTE **)(a3 + 8);
    v9 = v8 & 0x7F;
    if (v9 != 19)
    {
      if (v9 == 31)
      {
        v10 = -1862269965;
      }
      else if (v9 == 63)
      {
        v10 = -763363309;
      }
      else
      {
        v10 = ((v8 & 0x1F) << 16) | 0xAA0003F3;
      }
      v12 = a2 + 50;
      v11 = a2[50];
      v13 = a2 + 14;
      if (v11 + 4 > a2[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v11 = *v12;
      }
      *(_DWORD *)(*v13 + v11) = v10;
      *v12 += 4;
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::ARM64Registers::RegisterID),JSC::Wasm::OMGIRGenerator::OMGIRGenerator(JSC::Wasm::CalleeGroup &,JSC::Wasm::ModuleInformation const&,JSC::Wasm::OptimizingJITCallee &,JSC::B3::Procedure &,WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int &,JSC::MemoryMode,JSC::Wasm::CompilationMode,unsigned int,std::optional<BOOL>,unsigned int,JSC::Wasm::TierUpCount *)::$_0>::run(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  uint64_t result;

  v9 = *(_BYTE *)(a2 + 212);
  if (!v9)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  result = JSC::Wasm::OMGIRGenerator::emitExceptionCheck((unsigned int *)a2, 0, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a2 + 212) = v9;
  return result;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::Code &),JSC::Wasm::OMGIRGenerator::OMGIRGenerator(JSC::Wasm::CalleeGroup &,JSC::Wasm::ModuleInformation const&,JSC::Wasm::OptimizingJITCallee &,JSC::B3::Procedure &,WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int &,JSC::MemoryMode,JSC::Wasm::CompilationMode,unsigned int,std::optional<BOOL>,unsigned int,JSC::Wasm::TierUpCount *)::$_4>::run(uint64_t a1, JSC::B3::Air *this, JSC::CCallHelpers *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  char v26;
  char **v27;
  char *v28;

  v8 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)(v8 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198DBF16CLL);
  }
  v10 = *((_BYTE *)this + 212);
  if (!v10)
    *((_DWORD *)this + 52) = 0;
  *((_BYTE *)this + 212) = 1;
  JSC::B3::Air::defaultPrologueGenerator(this, a3, a3, a4, a5, a6, a7, a8);
  v16 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v16 != -1)
  {
    v28 = &v26;
    v27 = &v28;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v27, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (!dword_1EE3430FC)
  {
    __break(0xC471u);
    JUMPOUT(0x198DBF184);
  }
  v17 = *(_BYTE *)qword_1EE3430F0;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (*(_QWORD *)(v8 + 24) - qword_1ECF4C080) | 3, *(char *)qword_1EE3430F0, v11, v12, v13, v14, v15);
  v25 = *((_DWORD *)this + 50);
  if (v25 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::B3::Air *)((char *)this + 56), v18, v19, v20, v21, v22, v23, v24);
    v25 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v25) = ((v17 & 0x1F) << 10) | 0xA90103B3;
  *((_DWORD *)this + 50) += 4;
  *((_BYTE *)this + 212) = v10;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::OMGIRGenerator(JSC::Wasm::CalleeGroup &,JSC::Wasm::ModuleInformation const&,JSC::Wasm::OptimizingJITCallee &,JSC::B3::Procedure &,WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int &,JSC::MemoryMode,JSC::Wasm::CompilationMode,unsigned int,std::optional<BOOL>,unsigned int,JSC::Wasm::TierUpCount *)::$_5>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE *v12;
  unsigned __int8 v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned __int8 *v22;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  BOOL v38;
  WTF *v39;
  int v41;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::ExecutableMemoryHandle *v58;
  WTF *v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  BOOL v63;
  int v64;
  unsigned __int8 *v65;
  char v66;

  v5 = *(_QWORD *)(a1 + 16);
  v64 = 0;
  v63 = 0;
  v6 = (unsigned __int8 *)JSC::Wasm::OMGIRGenerator::computeStackCheckSize((JSC::B3::Procedure **)v5, &v63, &v64);
  if (!v63)
    return;
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  if (*(_DWORD *)(a3 + 20) < 2u)
  {
    __break(0xC471u);
    JUMPOUT(0x198DBF46CLL);
  }
  v12 = *(_BYTE **)(a3 + 8);
  v13 = *v12 & 0x7F;
  v14 = v12[16] & 0x7F;
  v15 = *(unsigned __int8 *)(v5 + 33);
  if (v15 != 4)
  {
    if (v15 <= 9)
    {
      v41 = 1 << v15;
      if ((v41 & 0x28) != 0)
      {
        JSC::AssemblyHelpers::checkWasmStackOverflow(a2, v13, v64, v14, v7, v8, v9, v10, (uint64_t)&v59);
        v5 = JSC::Wasm::thunks;
        v6 = (unsigned __int8 *)(JSC::Wasm::thunks + 8);
        v65 = (unsigned __int8 *)(JSC::Wasm::thunks + 8);
        v66 = 1;
        if (__ldaxr((unsigned __int8 *)(JSC::Wasm::thunks + 8)))
        {
          __clrex();
LABEL_37:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v6);
LABEL_38:
          JSC::Wasm::Thunks::stub((uint64_t *)v5, (uint64_t)&v65, (void (*)(uint64_t))JSC::Wasm::crashDueToOMGStackOverflowGenerator, v14, v7, v8, v9, v10, &v57);
          if (v66)
          {
            v43 = v65;
            v44 = __ldxr(v65);
            if (v44 == 1)
            {
              if (!__stlxr(0, v65))
                goto LABEL_44;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v43, 0, v25, v26, v27, v28, v29, v30);
          }
LABEL_44:
          if (v61)
          {
            v45 = v57;
            v46 = (unsigned int *)v59;
            v47 = 12 * v61;
            do
            {
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26129>(v46, v45, a2, v26, v27, v28, v29, v30);
              v46 += 3;
              v47 -= 12;
            }
            while (v47);
          }
          v36 = (unsigned int *)v58;
          v58 = 0;
          if (!v36)
            goto LABEL_23;
          do
          {
            v48 = __ldaxr(v36);
            v38 = --v48 == 0;
          }
          while (__stlxr(v48, v36));
          goto LABEL_21;
        }
LABEL_36:
        if (!__stxr(1u, v6))
          goto LABEL_38;
        goto LABEL_37;
      }
      if ((v41 & 0x3C7) != 0)
        goto LABEL_6;
    }
    __break(1u);
    goto LABEL_36;
  }
LABEL_6:
  JSC::AssemblyHelpers::checkWasmStackOverflow(a2, v13, v64, v14, v7, v8, v9, v10, (uint64_t)&v59);
  v21 = (uint64_t *)JSC::Wasm::thunks;
  v22 = (unsigned __int8 *)(JSC::Wasm::thunks + 8);
  v65 = (unsigned __int8 *)(JSC::Wasm::thunks + 8);
  v66 = 1;
  if (__ldaxr((unsigned __int8 *)(JSC::Wasm::thunks + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v22))
  {
    goto LABEL_10;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v22);
LABEL_10:
  JSC::Wasm::Thunks::stub(v21, (uint64_t)&v65, (void (*)(uint64_t))JSC::Wasm::throwStackOverflowFromWasmThunkGenerator, v16, v17, v18, v19, v20, &v57);
  if (v66)
  {
    v31 = v65;
    v32 = __ldxr(v65);
    if (v32 == 1)
    {
      if (!__stlxr(0, v65))
        goto LABEL_16;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v31, 0, v25, v26, v27, v28, v29, v30);
  }
LABEL_16:
  if (v61)
  {
    v33 = v57;
    v34 = (unsigned int *)v59;
    v35 = 12 * v61;
    do
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26129>(v34, v33, a2, v26, v27, v28, v29, v30);
      v34 += 3;
      v35 -= 12;
    }
    while (v35);
  }
  v36 = (unsigned int *)v58;
  v58 = 0;
  if (!v36)
    goto LABEL_23;
  do
  {
    v37 = __ldaxr(v36);
    v38 = --v37 == 0;
  }
  while (__stlxr(v37, v36));
LABEL_21:
  if (v38)
  {
    atomic_store(1u, v36);
    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v36, (uint64_t)v24, v25, v26, v27, v28, v29, v30);
    WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
  }
LABEL_23:
  v39 = v59;
  if (&v62 != (uint64_t *)v59 && v59 != 0)
  {
    v59 = 0;
    v60 = 0;
    WTF::fastFree((unint64_t)v39, v24, v25, v26, v27, v28, v29, v30);
  }
  *(_BYTE *)(a2 + 212) = v11;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::restoreWebAssemblyGlobalState(JSC::Wasm::MemoryInformation const&,JSC::B3::Value *,JSC::B3::BasicBlock *)::$_0>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  _QWORD *v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  JSC::AssemblerBuffer *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;

  v8 = *(_DWORD *)(a3 + 20);
  if (!v8)
  {
    __break(0xC471u);
    return;
  }
  v11 = **(_BYTE **)(a3 + 8);
  v12 = v11 & 0x7F;
  if (v12 != 22)
  {
    if (v12 == 31)
    {
      v13 = -1862269962;
    }
    else if (v12 == 63)
    {
      v13 = -763363306;
    }
    else
    {
      v13 = ((v11 & 0x1F) << 16) | 0xAA0003F6;
    }
    v15 = a2 + 50;
    v14 = a2[50];
    v16 = a2 + 14;
    if (v14 + 4 > a2[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v14 = *v15;
    }
    *(_DWORD *)(*v16 + v14) = v13;
    *v15 += 4;
    v8 = *(_DWORD *)(a3 + 20);
  }
  if (v8 == 2)
  {
    v17 = *(_BYTE *)(*(_QWORD *)(a3 + 8) + 16);
    v18 = v17 & 0x7F;
    if (v18 != 23)
    {
      if (v18 == 31)
      {
        v26 = a2[50];
        v21 = a2 + 50;
        v20 = v26;
        v23 = (JSC::AssemblerBuffer *)(v21 - 36);
        v24 = v26 + 4;
        v25 = *(v21 - 2);
        v27 = -1862269962;
      }
      else
      {
        if (v18 != 63)
        {
          v19 = ((v17 & 0x1F) << 16) | 0xAA0003F7;
          v22 = a2[50];
          v21 = a2 + 50;
          v20 = v22;
          v23 = (JSC::AssemblerBuffer *)(v21 - 36);
          v24 = v22 + 4;
          v25 = *(v21 - 2);
LABEL_17:
          if (v24 > v25)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v23, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v20 = *v21;
          }
          *(_DWORD *)(*(_QWORD *)v23 + v20) = v19;
          *v21 += 4;
          return;
        }
        v28 = a2[50];
        v21 = a2 + 50;
        v20 = v28;
        v23 = (JSC::AssemblerBuffer *)(v21 - 36);
        v24 = v28 + 4;
        v25 = *(v21 - 2);
        v27 = -763363306;
      }
      v19 = v27 | 1;
      goto LABEL_17;
    }
  }
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::reloadMemoryRegistersFromInstance(JSC::Wasm::MemoryInformation const&,JSC::B3::Value *,JSC::B3::BasicBlock *)::$_0>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  char v10;
  int v11;
  unsigned int v12;

  v9 = *(_BYTE *)(a2 + 212);
  if (!v9)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  if (!*(_DWORD *)(a3 + 36) || !*(_DWORD *)(a3 + 20))
  {
    __break(0xC471u);
    JUMPOUT(0x198DBF6C8);
  }
  v10 = **(_BYTE **)(a3 + 24);
  v11 = **(unsigned __int8 **)(a3 + 8);
  v12 = *(_DWORD *)(a2 + 200);
  if (v12 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v12) = (32 * v11) | 0xA942DC16;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::AssemblyHelpers::cageConditionally((_DWORD *)a2, 0, 22, 23, v10, a6, a7, a8);
  *(_BYTE *)(a2 + 212) = v9;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::Code &),JSC::Wasm::OMGIRGenerator::insertEntrySwitch(void)::$_0>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t **);

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  v11 = 1;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::MacroAssemblerARM64::add64(a2, -*(_DWORD *)(a3 + 184), 29, 31, a5, a6, a7, a8);
  v16 = JSC::Wasm::buildEntryBufferForCatchNoSIMD;
  if (HIBYTE(dword_1ECF4C7B0))
  {
    if (HIBYTE(word_1ECF4C79E))
    {
      v11 = 0;
      v16 = JSC::Wasm::buildEntryBufferForCatchSIMD;
    }
    else
    {
      v11 = *(_BYTE *)(*(_QWORD *)(a3 + 8) + 212) == 0;
      if (*(_BYTE *)(*(_QWORD *)(a3 + 8) + 212))
        v16 = JSC::Wasm::buildEntryBufferForCatchSIMD;
    }
  }
  JSC::MacroAssembler::probe((_DWORD *)a2, (uint64_t)v16, 0, v11, v12, v13, v14, v15);
  *(_BYTE *)(a2 + 212) = v10;
}

uint64_t JSC::Wasm::buildEntryBufferForCatchSIMD(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v8 = (unsigned int **)JSC::Wasm::OptimizingJITCallee::stackmap((*(_QWORD *)((*a1)[29] + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080, *(_DWORD *)((*a1)[29] + 36));
  v9 = **a1;
  if (*v8)
    v10 = 16 * **v8;
  else
    v10 = 0;
  v11 = JSC::Wasm::Context::scratchBufferForSize((JSC::Wasm::Context *)(*(_QWORD *)((*a1)[19] + 8) + 41464), v10, v2, v3, v4, v5, v6, v7);
  result = JSC::Wasm::loadValuesIntoBuffer((uint64_t)a1, v8, v11, 0);
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::JSWebAssemblyException::s_info != (char **)(16
                                                       * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    v14 = 0;
  }
  else
  {
    v13 = *(_QWORD *)(v9 + 24);
    if (v13)
      v14 = v13 + 8;
    else
      v14 = 0;
  }
  v15 = *a1;
  *v15 = v11;
  v15[1] = v9;
  v15[2] = v14;
  return result;
}

uint64_t JSC::Wasm::buildEntryBufferForCatchNoSIMD(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v8 = (unsigned int **)JSC::Wasm::OptimizingJITCallee::stackmap((*(_QWORD *)((*a1)[29] + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080, *(_DWORD *)((*a1)[29] + 36));
  v9 = **a1;
  if (*v8)
    v10 = 8 * **v8;
  else
    v10 = 0;
  v11 = JSC::Wasm::Context::scratchBufferForSize((JSC::Wasm::Context *)(*(_QWORD *)((*a1)[19] + 8) + 41464), v10, v2, v3, v4, v5, v6, v7);
  result = JSC::Wasm::loadValuesIntoBuffer((uint64_t)a1, v8, v11, 1);
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::JSWebAssemblyException::s_info != (char **)(16
                                                       * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    v14 = 0;
  }
  else
  {
    v13 = *(_QWORD *)(v9 + 24);
    if (v13)
      v14 = v13 + 8;
    else
      v14 = 0;
  }
  v15 = *a1;
  *v15 = v11;
  v15[1] = v9;
  v15[2] = v14;
  return result;
}

_OWORD *WTF::HashTable<JSC::Wasm::TypeDefinition const*,WTF::KeyValuePair<JSC::Wasm::TypeDefinition const*,JSC::B3::Type>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Wasm::TypeDefinition const*,JSC::B3::Type>>,WTF::DefaultHash<JSC::Wasm::TypeDefinition const*>,WTF::HashMap<JSC::Wasm::TypeDefinition const*,JSC::B3::Type,WTF::DefaultHash<JSC::Wasm::TypeDefinition const*>,WTF::HashTraits<JSC::Wasm::TypeDefinition const*>,WTF::HashTraits<JSC::B3::Type>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Wasm::TypeDefinition const*>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_DWORD *)(v9 + 24);
    do
    {
      *((_QWORD *)v18 - 1) = 0;
      *v18 = 0;
      v18 += 4;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (_QWORD *)(v6 + 16 * v19);
      if ((unint64_t)(*v21 + 1) >= 2)
      {
        v22 = *a1;
        if (*a1)
          v23 = *(_DWORD *)(v22 - 8);
        else
          v23 = 0;
        v24 = (~(*v21 << 32) + *v21) ^ ((~(*v21 << 32) + *v21) >> 22);
        v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((unint64_t)(v24 + ~(v24 << 13)) >> 8));
        v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
        v27 = v23 & ((v26 >> 31) ^ v26);
        v28 = 1;
        do
        {
          v29 = v27;
          v30 = *(_QWORD *)(v22 + 16 * v27);
          v27 = (v27 + v28++) & v23;
        }
        while (v30);
        v31 = (_OWORD *)(v22 + 16 * v29);
        *v31 = *(_OWORD *)v21;
        if (v21 == a3)
          v20 = v31;
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::String,WTF::String>(uint64_t result, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v10;
  size_t v11;
  int v12;
  int v13;
  int v14;
  int *v15;
  BOOL v16;
  int v17;
  char v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  _BOOL4 v23;
  _BYTE *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  int8x16_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  char *v34;
  __int16 v35;
  _DWORD *v36;
  int8x16x2_t v37;
  int8x16x2_t v38;
  int8x16x2_t v39;

  v6 = a6;
  v7 = a5;
  v10 = (_QWORD *)result;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_3;
  }
  v11 = a3 - 1;
  if (!((unint64_t)(a3 - 1) >> 31))
  {
LABEL_3:
    if (a4)
    {
      v12 = *(_DWORD *)(a4 + 4);
      if (a5)
        goto LABEL_5;
    }
    else
    {
      v12 = 0;
      if (a5)
      {
LABEL_5:
        v13 = *(_DWORD *)(a5 + 4);
        if (a6)
        {
LABEL_6:
          v14 = *(_DWORD *)(a6 + 4);
LABEL_7:
          if ((v14 | v13) < 0)
            goto LABEL_49;
          v15 = 0;
          v16 = __OFADD__(v13, v14);
          v17 = v13 + v14;
          v18 = v16;
          if (v12 < 0 || (v18 & 1) != 0)
            goto LABEL_42;
          v16 = __OFADD__(v12, v17);
          v19 = v12 + v17;
          if (v16)
            goto LABEL_49;
          v20 = v11 + v19;
          if (__OFADD__((_DWORD)v11, v19))
            goto LABEL_49;
          if (a4 && (*(_BYTE *)(a4 + 16) & 4) == 0)
          {
            if (v20)
            {
              v21 = v20;
              goto LABEL_30;
            }
            goto LABEL_50;
          }
          if (a5)
          {
            v22 = *(_DWORD *)(a5 + 16);
            if (!a6 || (v22 & 4) == 0)
            {
              v21 = v20;
              v23 = v20 == 0;
              if ((v22 & 4) != 0)
              {
LABEL_23:
                if (v23)
                  goto LABEL_50;
                if ((v20 & 0x80000000) == 0)
                {
LABEL_25:
                  result = WTF::tryFastCompactMalloc((WTF *)(v21 + 20), &v36);
                  v15 = v36;
                  if (v36)
                  {
                    v24 = v36 + 5;
                    *v36 = 2;
                    v15[1] = v20;
                    *((_QWORD *)v15 + 1) = v15 + 5;
                    v15[4] = 4;
                    if ((_DWORD)v11 == 1)
                    {
                      *v24 = *(_BYTE *)a2;
                    }
                    else if ((_DWORD)v11)
                    {
                      memcpy(v15 + 5, a2, v11);
                    }
                    result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v24[v11], a4, v7, v6);
                  }
                  goto LABEL_42;
                }
LABEL_49:
                v15 = 0;
LABEL_42:
                *v10 = v15;
                return result;
              }
LABEL_29:
              if (!v23)
              {
LABEL_30:
                if (v20 <= 0x7FFFFFEF)
                {
                  result = WTF::tryFastCompactMalloc((WTF *)(2 * v21 + 20), &v36);
                  v15 = v36;
                  if (v36)
                  {
                    v25 = (char *)(v36 + 5);
                    *v36 = 2;
                    v15[1] = v20;
                    *((_QWORD *)v15 + 1) = v15 + 5;
                    v15[4] = 0;
                    v26 = (char *)v15 + 2 * v11 + 20;
                    if ((v11 & 0x7FFFFFC0) != 0)
                    {
                      v27 = &v25[2 * (v11 & 0x7FFFFFC0)];
                      v28 = 0uLL;
                      do
                      {
                        v37.val[0] = (int8x16_t)*a2;
                        v29 = *((int8x16_t *)a2 + 1);
                        v38.val[0] = (int8x16_t)a2[2];
                        v30 = a2[3];
                        a2 += 4;
                        v31 = v30;
                        v38.val[1] = 0uLL;
                        v39.val[0] = v29;
                        v37.val[1] = 0uLL;
                        v32 = v25;
                        vst2q_s8(v32, v37);
                        v32 += 32;
                        v39.val[1] = 0uLL;
                        vst2q_s8(v32, v39);
                        v33 = v25 + 64;
                        vst2q_s8(v33, v38);
                        v34 = v25 + 96;
                        vst2q_s8(v34, *(int8x16x2_t *)(&v28 - 1));
                        v25 += 128;
                      }
                      while (v25 != v27);
                      v25 = v27;
                    }
                    while (v25 != v26)
                    {
                      v35 = *(unsigned __int8 *)a2;
                      a2 = (_OWORD *)((char *)a2 + 1);
                      *(_WORD *)v25 = v35;
                      v25 += 2;
                    }
                    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v26, a4, v7, v6);
                  }
                  goto LABEL_42;
                }
                goto LABEL_49;
              }
LABEL_50:
              v15 = &WTF::StringImpl::s_emptyAtomString;
              WTF::StringImpl::s_emptyAtomString += 2;
              goto LABEL_42;
            }
          }
          else if (!a6)
          {
            if (!v20)
              goto LABEL_50;
            v7 = 0;
            v6 = 0;
            v21 = v20;
            if ((v20 & 0x80000000) == 0)
              goto LABEL_25;
            goto LABEL_49;
          }
          v21 = v20;
          v23 = v20 == 0;
          if ((*(_BYTE *)(a6 + 16) & 4) != 0)
            goto LABEL_23;
          goto LABEL_29;
        }
LABEL_45:
        v14 = 0;
        goto LABEL_7;
      }
    }
    v13 = 0;
    if (a6)
      goto LABEL_6;
    goto LABEL_45;
  }
  result = 124;
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Const32Value *,JSC::B3::Value *>(JSC::B3::Value *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v14 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v14 = off_1E357F5F0;
  *(_DWORD *)(v14 + 8) = -1;
  *(_WORD *)(v14 + 12) = 82;
  *(_DWORD *)(v14 + 16) = a2;
  *(_BYTE *)(v14 + 20) = 4;
  *(_QWORD *)(v14 + 24) = a3;
  *(_QWORD *)(v14 + 32) = 0;
  v15 = JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v14);
  *(_QWORD *)v15 = v15 + 16;
  *(_QWORD *)(v15 + 8) = 3;
  v16 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v15 = v16;
  v17 = *(unsigned int *)(v15 + 12);
  *(_QWORD *)(v16 + 8 * v17) = a4;
  *(_QWORD *)(*(_QWORD *)v15 + 8 * (v17 + 1)) = a5;
  *(_QWORD *)(*(_QWORD *)v15 + 8 * (v17 + 2)) = a6;
  *(_QWORD *)(*(_QWORD *)v15 + 8 * (v17 + 3)) = a7;
  *(_DWORD *)(v15 + 8) = 4;
  *(_DWORD *)(v15 + 12) = v17 + 4;
  *(_QWORD *)v14 = &unk_1E357CF78;
  *(_OWORD *)(v14 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v14 + 56) = 0xFFFFFFFF00000000;
  if (*(_DWORD *)(v14 + 76))
    return (uint64_t)JSC::B3::Procedure::addValueImpl(a1, (JSC::B3::Value *)v14);
  result = 60;
  __break(0xC471u);
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addTableGet(unsigned int,JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)1, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Const32Value *,JSC::B3::Value*,JSC::B3::Value*>(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v14 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v14 = off_1E357F5F0;
  *(_DWORD *)(v14 + 8) = -1;
  *(_WORD *)(v14 + 12) = 82;
  *(_DWORD *)(v14 + 16) = a1;
  *(_BYTE *)(v14 + 20) = 4;
  *(_QWORD *)(v14 + 24) = a2;
  *(_QWORD *)(v14 + 32) = 0;
  v15 = JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v14);
  *(_QWORD *)v15 = v15 + 16;
  *(_QWORD *)(v15 + 8) = 3;
  v16 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v15 = v16;
  v17 = *(unsigned int *)(v15 + 12);
  *(_QWORD *)(v16 + 8 * v17) = a3;
  *(_QWORD *)(*(_QWORD *)v15 + 8 * (v17 + 1)) = a4;
  *(_QWORD *)(*(_QWORD *)v15 + 8 * (v17 + 2)) = a5;
  *(_QWORD *)(*(_QWORD *)v15 + 8 * (v17 + 3)) = a6;
  *(_QWORD *)(*(_QWORD *)v15 + 8 * (v17 + 4)) = a7;
  *(_DWORD *)(v15 + 8) = 5;
  *(_DWORD *)(v15 + 12) = v17 + 5;
  *(_QWORD *)v14 = &unk_1E357CF78;
  *(_OWORD *)(v14 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v14 + 56) = 0xFFFFFFFF00000000;
  if (*(_DWORD *)(v14 + 76))
    return v14;
  result = 60;
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Value::Value<JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = 82;
  *(_DWORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 20) = 4;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  v13 = JSC::B3::Value::childrenAlloc((JSC::B3::Value *)a1);
  *(_QWORD *)v13 = v13 + 16;
  *(_QWORD *)(v13 + 8) = 3;
  v14 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v13 = v14;
  v15 = *(unsigned int *)(v13 + 12);
  *(_QWORD *)(v14 + 8 * v15) = a3;
  *(_QWORD *)(*(_QWORD *)v13 + 8 * (v15 + 1)) = a4;
  *(_QWORD *)(*(_QWORD *)v13 + 8 * (v15 + 2)) = a5;
  *(_QWORD *)(*(_QWORD *)v13 + 8 * (v15 + 3)) = a6;
  *(_QWORD *)(*(_QWORD *)v13 + 8 * (v15 + 4)) = a7;
  *(_DWORD *)(v13 + 8) = 5;
  *(_DWORD *)(v13 + 12) = v15 + 5;
  return a1;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addTableSet(unsigned int,JSC::B3::Variable *,JSC::B3::Variable *)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)1, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addRefAsNonNull(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)0x23, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addTableInit(unsigned int,unsigned int,JSC::B3::Variable *,JSC::B3::Variable *,JSC::B3::Variable *)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)1, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Const32Value *,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v16 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v16 = off_1E357F5F0;
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 82;
  *(_DWORD *)(v16 + 16) = a1;
  *(_BYTE *)(v16 + 20) = 4;
  *(_QWORD *)(v16 + 24) = a2;
  *(_QWORD *)(v16 + 32) = 0;
  v17 = JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v16);
  *(_QWORD *)v17 = v17 + 16;
  *(_QWORD *)(v17 + 8) = 3;
  v18 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v17 = v18;
  v19 = *(unsigned int *)(v17 + 12);
  *(_QWORD *)(v18 + 8 * v19) = a3;
  *(_QWORD *)(*(_QWORD *)v17 + 8 * (v19 + 1)) = a4;
  *(_QWORD *)(*(_QWORD *)v17 + 8 * (v19 + 2)) = a5;
  *(_QWORD *)(*(_QWORD *)v17 + 8 * (v19 + 3)) = a6;
  *(_QWORD *)(*(_QWORD *)v17 + 8 * (v19 + 4)) = a7;
  *(_QWORD *)(*(_QWORD *)v17 + 8 * (v19 + 5)) = a8;
  *(_DWORD *)(v17 + 8) = 6;
  *(_DWORD *)(v17 + 12) = v19 + 6;
  *(_QWORD *)v16 = &unk_1E357CF78;
  *(_OWORD *)(v16 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v16 + 56) = 0xFFFFFFFF00000000;
  if (*(_DWORD *)(v16 + 76))
    return v16;
  result = 60;
  __break(0xC471u);
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addTableFill(unsigned int,JSC::B3::Variable *,JSC::B3::Variable *,JSC::B3::Variable *)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)1, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addTableCopy(unsigned int,unsigned int,JSC::B3::Variable *,JSC::B3::Variable *,JSC::B3::Variable *)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)1, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addUnreachable(void)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)8, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::emitIndirectCall(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_0>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  if (!*(_DWORD *)(a3 + 20)
    || (v11 = **(_BYTE **)(a3 + 8),
        JSC::AssemblyHelpers::storeWasmContextInstance((_DWORD *)a2, v11 & 0x7F, a3, a4, a5, a6, a7, a8),
        !*(_DWORD *)(a3 + 36)))
  {
    __break(0xC471u);
    JUMPOUT(0x198DC03A8);
  }
  v19 = **(_BYTE **)(a3 + 24);
  v20 = *(_DWORD *)(a2 + 200);
  if (v20 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v12, v13, v14, v15, v16, v17, v18);
    v20 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v20) = (32 * v11) | 0xA942DC16;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::AssemblyHelpers::cageConditionally((_DWORD *)a2, 0, 22, 23, v19, v16, v17, v18);
  *(_BYTE *)(a2 + 212) = v10;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::emitIndirectCall(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_1>::~SharedTaskFunctor(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::emitIndirectCall(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_1>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::emitIndirectCall(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_1>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  char v20;

  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a2, a3);
  v14 = *(_DWORD *)(a2 + 200);
  if (v14 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v7, v8, v9, v10, v11, v12, v13);
    v14 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v14) = -129924503;
  v15 = *(_DWORD *)(a2 + 200);
  v16 = v15 + 4;
  *(_DWORD *)(a2 + 200) = v15 + 4;
  if ((v15 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v7, v8, v9, v10, v11, v12, v13);
    v16 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v16) = -134118423;
  v17 = *(_DWORD *)(a2 + 200);
  v18 = v17 + 4;
  *(_DWORD *)(a2 + 200) = v17 + 4;
  v19 = *(unsigned int *)(a1 + 24);
  if (*(_DWORD *)(a3 + 20) <= v19)
  {
    __break(0xC471u);
  }
  else
  {
    v20 = *(_BYTE *)(*(_QWORD *)(a3 + 8) + 16 * v19);
    if ((v17 + 8) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v7, v8, v9, v10, v11, v12, v13);
      v18 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v18) = (32 * (v20 & 0x1F)) | 0xD61F0000;
    *(_DWORD *)(a2 + 200) += 4;
    *(_BYTE *)(a2 + 212) = v6;
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::emitIndirectCall(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_2>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v9 = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::emitIndirectCall(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_2>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v9 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::emitIndirectCall(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_2>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  char v20;

  v11 = *(_QWORD **)(a1 + 16);
  v12 = *(_BYTE *)(a2 + 212);
  if (!v12)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v13 = *(_QWORD *)(a1 + 32);
  if (v13)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, a2, a3);
  v14 = *(_QWORD *)(a1 + 24);
  if (v14)
    JSC::Wasm::PatchpointExceptionHandle::generate<JSC::Wasm::OMGIRGenerator>(v14 + 4, a2, a3, v11, a5, a6, a7, a8);
  if (*(_DWORD *)(a3 + 20) <= (*(_DWORD *)(a1 + 40) + 1))
    goto LABEL_16;
  v15 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 8) + 16 * (*(_DWORD *)(a1 + 40) + 1));
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "< Store Callee's wasm callee");
  v16 = *(_DWORD *)(a2 + 200);
  if (v16 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
    v16 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v16) = v15 | 0xF80083E0;
  v17 = *(_DWORD *)(a2 + 200);
  v18 = v17 + 4;
  *(_DWORD *)(a2 + 200) = v17 + 4;
  v19 = *(unsigned int *)(a1 + 40);
  if (*(_DWORD *)(a3 + 20) <= v19)
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x198DC0854);
  }
  v20 = *(_BYTE *)(*(_QWORD *)(a3 + 8) + 16 * v19);
  *(_DWORD *)(a2 + 208) = 0;
  if ((v17 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
    v18 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v18) = (32 * (v20 & 0x1F)) | 0xD63F0000;
  *(_DWORD *)(a2 + 200) += 4;
  *(_BYTE *)(a2 + 212) = v12;
}

double JSC::B3::Value::allocate<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Value*,int>(int a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  __int16 v9;
  uint64_t Space;
  uint64_t v11;
  double result;

  v9 = a1;
  Space = JSC::B3::Value::allocateSpace(a1, 64);
  v11 = JSC::B3::Value::Value<>(Space, 0, v9, a2, 1, a3, a4);
  *(_QWORD *)v11 = off_1E357E4C8;
  *(_DWORD *)(v11 + 40) = a5;
  result = NAN;
  *(_OWORD *)(v11 + 44) = xmmword_19914F690;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addMemoryFill(JSC::B3::Variable *,JSC::B3::Variable *,JSC::B3::Variable *)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addMemoryInit(unsigned int,JSC::B3::Variable *,JSC::B3::Variable *,JSC::B3::Variable *)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addMemoryCopy(JSC::B3::Variable *,JSC::B3::Variable *,JSC::B3::Variable *)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, 0, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::setGlobal(unsigned int,JSC::B3::Variable *)::$_0>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;

  v9 = a2[50];
  if (v9 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v9 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v9) = -721208385;
  a2[50] += 4;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::load(JSC::Wasm::LoadOpType,JSC::B3::Variable *,JSC::B3::Variable *&,unsigned int)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::store(JSC::Wasm::StoreOpType,JSC::B3::Variable *,JSC::B3::Variable *,unsigned int)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::fixupPointerPlusOffsetForAtomicOps(JSC::Wasm::ExtAtomicOpType,JSC::B3::Value *,unsigned int)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::atomicLoad(JSC::Wasm::ExtAtomicOpType,JSC::Wasm::Type,JSC::B3::Variable *,JSC::B3::Variable *&,unsigned int)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::atomicStore(JSC::Wasm::ExtAtomicOpType,JSC::Wasm::Type,JSC::B3::Variable *,JSC::B3::Variable *,unsigned int)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::atomicBinaryRMW(JSC::Wasm::ExtAtomicOpType,JSC::Wasm::Type,JSC::B3::Variable *,JSC::B3::Variable *,JSC::B3::Variable *&,unsigned int)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::atomicCompareExchange(JSC::Wasm::ExtAtomicOpType,JSC::Wasm::Type,JSC::B3::Variable *,JSC::B3::Variable *,JSC::B3::Variable *,JSC::B3::Variable *&,unsigned int)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Const32Value *,JSC::B3::Value*,JSC::B3::Value*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v14 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v14 = off_1E357F5F0;
  *(_DWORD *)(v14 + 8) = -1;
  *(_WORD *)(v14 + 12) = 82;
  *(_DWORD *)(v14 + 16) = 1;
  *(_BYTE *)(v14 + 20) = 4;
  *(_QWORD *)(v14 + 24) = a1;
  *(_QWORD *)(v14 + 32) = 0;
  v15 = JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v14);
  *(_QWORD *)v15 = v15 + 16;
  *(_QWORD *)(v15 + 8) = 3;
  v16 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v15 = v16;
  v17 = *(unsigned int *)(v15 + 12);
  *(_QWORD *)(v16 + 8 * v17) = a2;
  *(_QWORD *)(*(_QWORD *)v15 + 8 * (v17 + 1)) = a3;
  *(_QWORD *)(*(_QWORD *)v15 + 8 * (v17 + 2)) = a4;
  *(_QWORD *)(*(_QWORD *)v15 + 8 * (v17 + 3)) = a5;
  *(_QWORD *)(*(_QWORD *)v15 + 8 * (v17 + 4)) = a6;
  *(_QWORD *)(*(_QWORD *)v15 + 8 * (v17 + 5)) = a7;
  *(_DWORD *)(v15 + 8) = 6;
  *(_DWORD *)(v15 + 12) = v17 + 6;
  *(_QWORD *)v14 = &unk_1E357CF78;
  *(_OWORD *)(v14 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v14 + 56) = 0xFFFFFFFF00000000;
  if (*(_DWORD *)(v14 + 76))
    return v14;
  result = 60;
  __break(0xC471u);
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::atomicWait(JSC::Wasm::ExtAtomicOpType,JSC::B3::Variable *,JSC::B3::Variable *,JSC::B3::Variable *,JSC::B3::Variable *&,unsigned int)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::atomicNotify(JSC::Wasm::ExtAtomicOpType,JSC::B3::Variable *,JSC::B3::Variable *,JSC::B3::Variable *&,unsigned int)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, 0, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::truncSaturated(JSC::Wasm::Ext1OpType,JSC::B3::Variable *,JSC::B3::Variable *&,JSC::Wasm::Type,JSC::Wasm::Type)::$_0>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  unsigned int v10;
  int v11;
  char v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  char v19;
  int v20;
  char v21;
  char v22;
  int v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  char v28;
  unsigned int v29;
  int v30;
  char v31;
  int v32;
  char v33;
  char v34;
  char v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;

  v9 = *(char **)(a3 + 8);
  v10 = *(_DWORD *)(a3 + 20);
  switch(*(_DWORD *)(a1 + 12))
  {
    case 0:
      if (v10 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198DC0F08);
      }
      v11 = (v9[16] & 0x7F) - 32;
      v12 = *v9;
      v13 = *(_DWORD *)(a2 + 200);
      if (v13 + 4 > *(_DWORD *)(a2 + 192))
      {
        v37 = v11;
        v45 = v12;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
        v11 = v37;
        v12 = v45;
        v13 = *(_DWORD *)(a2 + 200);
      }
      v14 = v12 & 0x1F | (32 * v11);
      v15 = 506986496;
      goto LABEL_28;
    case 1:
      if (v10 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198DC0F38);
      }
      v27 = (v9[16] & 0x7F) - 32;
      v28 = *v9;
      v13 = *(_DWORD *)(a2 + 200);
      if (v13 + 4 > *(_DWORD *)(a2 + 192))
      {
        v40 = v27;
        v48 = v28;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
        v27 = v40;
        v28 = v48;
        v13 = *(_DWORD *)(a2 + 200);
      }
      v14 = v28 & 0x1F | (32 * v27);
      v15 = 507052032;
      goto LABEL_28;
    case 2:
      if (v10 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198DC0F18);
      }
      v18 = (v9[16] & 0x7F) - 32;
      v19 = *v9;
      v13 = *(_DWORD *)(a2 + 200);
      if (v13 + 4 > *(_DWORD *)(a2 + 192))
      {
        v36 = v18;
        v44 = v19;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
        v18 = v36;
        v19 = v44;
        v13 = *(_DWORD *)(a2 + 200);
      }
      v14 = v19 & 0x1F | (32 * v18);
      v15 = 511180800;
      goto LABEL_28;
    case 3:
      if (v10 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198DC0F20);
      }
      v20 = (v9[16] & 0x7F) - 32;
      v21 = *v9;
      v13 = *(_DWORD *)(a2 + 200);
      if (v13 + 4 > *(_DWORD *)(a2 + 192))
      {
        v38 = v20;
        v46 = v21;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
        v20 = v38;
        v21 = v46;
        v13 = *(_DWORD *)(a2 + 200);
      }
      v14 = v21 & 0x1F | (32 * v20);
      v15 = 511246336;
LABEL_28:
      v29 = v14 | v15;
      goto LABEL_29;
    case 4:
      if (v10 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198DC0F10);
      }
      v16 = ((*v9 & 0x1F | (32 * (v9[16] & 0x7F))) - 1024) | 0x9E380000;
      v17 = *(_DWORD *)(a2 + 200);
      if (v17 + 4 > *(_DWORD *)(a2 + 192))
      {
        v43 = v16;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
        v16 = v43;
        v17 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v17) = v16;
      goto LABEL_30;
    case 5:
      v22 = *(_BYTE *)(a2 + 212);
      if (!v22)
        *(_DWORD *)(a2 + 208) = 0;
      *(_BYTE *)(a2 + 212) = 1;
      if (v10 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198DC0F48);
      }
      v30 = (v9[16] & 0x7F) - 32;
      v31 = *v9;
      v25 = *(_DWORD *)(a2 + 200);
      if (v25 + 4 > *(_DWORD *)(a2 + 192))
      {
        v41 = v30;
        v49 = v22;
        v35 = v31;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
        v31 = v35;
        v30 = v41;
        v22 = v49;
        v25 = *(_DWORD *)(a2 + 200);
      }
      v26 = v31 & 0x1F | (32 * v30) | 0x9E390000;
      goto LABEL_37;
    case 6:
      if (v10 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198DC0F50);
      }
      v32 = (v9[16] & 0x7F) - 32;
      v33 = *v9;
      v13 = *(_DWORD *)(a2 + 200);
      if (v13 + 4 > *(_DWORD *)(a2 + 192))
      {
        v42 = v32;
        v50 = v33;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
        v32 = v42;
        v33 = v50;
        v13 = *(_DWORD *)(a2 + 200);
      }
      v29 = v33 & 0x1F | (32 * v32) | 0x9E780000;
LABEL_29:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = v29;
LABEL_30:
      *(_DWORD *)(a2 + 200) += 4;
      break;
    case 7:
      v22 = *(_BYTE *)(a2 + 212);
      if (!v22)
        *(_DWORD *)(a2 + 208) = 0;
      *(_BYTE *)(a2 + 212) = 1;
      if (v10 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198DC0F30);
      }
      v23 = (v9[16] & 0x7F) - 32;
      v24 = *v9;
      v25 = *(_DWORD *)(a2 + 200);
      if (v25 + 4 > *(_DWORD *)(a2 + 192))
      {
        v39 = v23;
        v47 = v22;
        v34 = v24;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
        v24 = v34;
        v23 = v39;
        v22 = v47;
        v25 = *(_DWORD *)(a2 + 200);
      }
      v26 = v24 & 0x1F | (32 * v23) | 0x9E790000;
LABEL_37:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v25) = v26;
      *(_DWORD *)(a2 + 200) += 4;
      *(_BYTE *)(a2 + 212) = v22;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198DC0F00);
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addI31GetS(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)5, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addI31GetU(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)5, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::pushArrayNew(unsigned int,JSC::B3::Value *,JSC::B3::Variable *)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)0x15, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addArrayGet(JSC::Wasm::ExtGCOpType,unsigned int,JSC::B3::Variable *,JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)0x18, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addArrayGet(JSC::Wasm::ExtGCOpType,unsigned int,JSC::B3::Variable *,JSC::B3::Variable *,JSC::B3::Variable *&)::$_1>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)0xE, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::emitArrayNullCheck(JSC::B3::Value *,JSC::Wasm::ExceptionType)::$_0>::run(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)*(unsigned int *)(a1 + 24), a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addArraySet(unsigned int,JSC::B3::Variable *,JSC::B3::Variable *,JSC::B3::Variable *)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)0xF, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addArrayLen(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)0x1A, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addArrayFill(unsigned int,JSC::B3::Variable *,JSC::B3::Variable *,JSC::B3::Variable *,JSC::B3::Variable *)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)0x10, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addArrayCopy(unsigned int,JSC::B3::Variable *,JSC::B3::Variable *,unsigned int,JSC::B3::Variable *,JSC::B3::Variable *,JSC::B3::Variable *)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)0x11, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addArrayInitElem(unsigned int,JSC::B3::Variable *,JSC::B3::Variable *,unsigned int,JSC::B3::Variable *,JSC::B3::Variable *)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)0x12, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addArrayInitData(unsigned int,JSC::B3::Variable *,JSC::B3::Variable *,unsigned int,JSC::B3::Variable *,JSC::B3::Variable *)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)0x13, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addStructNew(unsigned int,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::B3::Variable *&)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)0x14, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addStructNewDefault(unsigned int,JSC::B3::Variable *&)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)0x14, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addStructGet(JSC::Wasm::ExtGCOpType,JSC::B3::Variable *,JSC::Wasm::StructType const&,unsigned int,JSC::B3::Variable *&)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)0x1F, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addStructSet(JSC::B3::Variable *,JSC::Wasm::StructType const&,unsigned int,JSC::B3::Variable *)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)0x20, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::emitRefTestOrCast(JSC::Wasm::OMGIRGenerator::CastKind,JSC::B3::Variable *,BOOL,int,BOOL,JSC::B3::Variable *&)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)0x24, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::emitLoadRTTFromFuncref(JSC::B3::Value *)::$_0>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  if (*(_DWORD *)(a3 + 20) <= 1u)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = *(char **)(a3 + 8);
    v10 = *v9;
    JSC::MacroAssemblerARM64::load32((uint64_t)a2, v9[16] & 0x7F | 0x4000000000, *v9 & 0x7F, a4, a5, a6, a7, a8);
    v18 = a2[50];
    if (v18 + 4 > a2[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), v11, v12, v13, v14, v15, v16, v17);
      v18 = a2[50];
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v18) = v10 & 0x1F | (32 * (v10 & 0x1F)) | 0xD37CEC00;
    a2[50] += 4;
  }
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::emitEntryTierUpCheck(void)::$_0>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::AssemblerBuffer *v38;
  uint64_t v39;
  JSC::AssemblerBuffer *v40;
  int v41;
  uint64_t v42;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  if (!*(_DWORD *)(a3 + 20))
  {
    __break(0xC471u);
    goto LABEL_27;
  }
  JSC::MacroAssemblerARM64::branchAdd32(a2, 5u, SHIDWORD(qword_1ECF4C6E8), **(_BYTE **)(a3 + 8) & 0x7F, a5, a6, a7, a8, (uint64_t)&v41);
  v19 = *(_DWORD *)(a2 + 200);
  if (v19 < *(_DWORD *)(a2 + 52))
  {
    v38 = (JSC::AssemblerBuffer *)(a2 + 56);
    do
    {
      if ((v19 + 4) > *(_DWORD *)(a2 + 192))
      {
        v39 = v10;
        v40 = v38;
        JSC::AssemblerBuffer::outOfLineGrow(v38, v12, v13, v14, v15, v16, v17, v18);
        v38 = v40;
        v10 = v39;
        v19 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v19) = -721215457;
      v19 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v19;
    }
    while (v19 < *(_DWORD *)(a2 + 52));
  }
  *(_DWORD *)(a2 + 208) = 0;
  v20 = v41;
  v21 = v42;
  v22 = *(_QWORD *)(a3 + 56);
  v23 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v23 + 8) = 1;
  *(_QWORD *)v23 = off_1E35B6648;
  *(_QWORD *)(v23 + 16) = v10;
  *(_DWORD *)(v23 + 24) = v20;
  *(_QWORD *)(v23 + 28) = v21;
  *(_DWORD *)(v23 + 36) = v19;
  v24 = *(unsigned int *)(v22 + 12);
  if ((_DWORD)v24 != *(_DWORD *)(v22 + 8))
  {
    v25 = (uint64_t *)(*(_QWORD *)v22 + 8 * v24);
    goto LABEL_7;
  }
  v26 = v24 + (v24 >> 2);
  if (v26 >= 0x10)
    v27 = v26 + 1;
  else
    v27 = 16;
  if (v27 <= v24 + 1)
    v28 = v24 + 1;
  else
    v28 = v27;
  if (v28 >> 29)
  {
    __break(0xC471u);
LABEL_27:
    JUMPOUT(0x198DC1354);
  }
  v29 = *(const void **)v22;
  v30 = (void *)WTF::fastMalloc((WTF *)(8 * v28));
  *(_DWORD *)(v22 + 8) = v28;
  *(_QWORD *)v22 = v30;
  memcpy(v30, v29, 8 * v24);
  if (v29)
  {
    if (*(const void **)v22 == v29)
    {
      *(_QWORD *)v22 = 0;
      *(_DWORD *)(v22 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v29, v31, v32, v33, v34, v35, v36, v37);
  }
  v24 = *(unsigned int *)(v22 + 12);
  v25 = (uint64_t *)(*(_QWORD *)v22 + 8 * v24);
LABEL_7:
  *v25 = v23;
  *(_DWORD *)(v22 + 12) = v24 + 1;
  *(_BYTE *)(a2 + 212) = v11;
}

unsigned int *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::Wasm::OMGIRGenerator::emitEntryTierUpCheck(void)::$_0::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::Wasm::OMGIRGenerator::emitEntryTierUpCheck(void)::$_0::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const JSC::RegisterSet *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  void (*v28)(uint64_t);
  unsigned __int8 *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  JSC::ExecutableMemoryHandle *v69;
  __int128 v70;
  unsigned __int8 *v71;
  uint64_t v72;

  v10 = *(_QWORD *)(a1 + 16);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 24), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v70 = xmmword_19915A5E0;
  v16 = (const JSC::RegisterSet *)JSC::ScratchRegisterAllocator::preserveRegistersToStackForCall((JSC::ScratchRegisterAllocator *)a2, (JSC::AssemblyHelpers *)&v70, 0, v11, v12, v13, v14, v15);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(a2, (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v10 + 36), 8, v17, v18, v19, v20, v21);
  v27 = (uint64_t *)JSC::Wasm::thunks;
  if (HIBYTE(dword_1ECF4C7B0) && (HIBYTE(word_1ECF4C79E) || *(_BYTE *)(*(_QWORD *)(v10 + 56) + 212)))
    v28 = (void (*)(uint64_t))JSC::Wasm::triggerOMGEntryTierUpThunkGeneratorSIMD;
  else
    v28 = (void (*)(uint64_t))JSC::Wasm::triggerOMGEntryTierUpThunkGeneratorNoSIMD;
  v29 = (unsigned __int8 *)(JSC::Wasm::thunks + 8);
  v71 = (unsigned __int8 *)(JSC::Wasm::thunks + 8);
  LOBYTE(v72) = 1;
  if (__ldaxr((unsigned __int8 *)(JSC::Wasm::thunks + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v29))
  {
    goto LABEL_10;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v29);
LABEL_10:
  JSC::Wasm::Thunks::stub(v27, (uint64_t)&v71, v28, v22, v23, v24, v25, v26, &v68);
  if (!(_BYTE)v72)
    goto LABEL_16;
  v38 = v71;
  v39 = __ldxr(v71);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v71))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v38, 0, v32, v33, v34, v35, v36, v37);
LABEL_16:
  v40 = v68;
  a2[52] = 0;
  v41 = a2[50];
  if (v41 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), v31, v32, v33, v34, v35, v36, v37);
    v41 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v41) = -1811939328;
  v42 = a2[50] + 4;
  a2[50] = v42;
  v71 = (unsigned __int8 *)(v42 | 0x300000000);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Call::linkThunk<(WTF::PtrTag)26129>((unsigned int *)&v71, v40, (uint64_t)a2, v33, v34, v35, v36, v37);
  v50 = (unsigned int *)v69;
  v69 = 0;
  if (v50)
  {
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
    {
      atomic_store(1u, v50);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v50, v43, v44, v45, v46, v47, v48, v49);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
  }
  v71 = 0;
  v72 = 0;
  JSC::ScratchRegisterAllocator::restoreRegistersFromStackForCall((JSC::ScratchRegisterAllocator *)a2, (JSC::AssemblyHelpers *)&v70, (const JSC::RegisterSet *)&v71, v16, 0, v47, v48, v49);
  LODWORD(v71) = *(_DWORD *)(a1 + 36);
  return JSC::MacroAssembler::jump((uint64_t)a2, (unsigned int *)&v71, v53, v54, v55, v56, v57, v58);
}

uint64_t JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Call::linkThunk<(WTF::PtrTag)26129>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;

  result = a3 + 32;
  v11 = *a1;
  if ((a1[1] & 4) != 0)
  {
    LOBYTE(v19) = -1;
    *(_QWORD *)&v18 = v11;
    *((_QWORD *)&v18 + 1) = a2;
    *(_WORD *)((char *)&v19 + 1) = 65;
    BYTE3(v19) = 15;
    v12 = 128;
  }
  else
  {
    LOBYTE(v19) = -1;
    *(_WORD *)((char *)&v19 + 1) = 65;
    BYTE3(v19) = 15;
    *(_QWORD *)&v18 = v11 - 4;
    *((_QWORD *)&v18 + 1) = a2;
    v12 = 384;
  }
  WORD2(v19) = v12;
  v13 = *(unsigned int *)(a3 + 44);
  if ((_DWORD)v13 == *(_DWORD *)(a3 + 40))
  {
    result = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v13 + 1, (unint64_t)&v18, a4, a5, a6, a7, a8);
    v14 = *(_QWORD *)(a3 + 32) + 24 * *(unsigned int *)(a3 + 44);
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = -1;
    v17 = (((*(unsigned __int8 *)(v14 + 19) >> 4) & 0xF) << 20) | 0xF0041;
    *(_WORD *)(v14 + 17) = 65;
    *(_BYTE *)(v14 + 19) = BYTE2(v17);
    *(_WORD *)(v14 + 20) &= 0xFC00u;
    v15 = *(_OWORD *)result;
    v16 = *(_QWORD *)(result + 16);
  }
  else
  {
    v14 = *(_QWORD *)result + 24 * v13;
    v15 = v18;
    v16 = v19;
  }
  *(_QWORD *)(v14 + 16) = v16;
  *(_OWORD *)v14 = v15;
  ++*(_DWORD *)(a3 + 44);
  return result;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::emitLoopTierUpCheck(unsigned int,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const&)::$_0>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x8_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int i;
  int v36;
  unsigned int v37;
  unsigned int *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  char v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  const void *v69;
  void *v70;
  char v71;
  WTF *v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;

  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_BYTE *)(a2 + 212);
  if (!v12)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v13 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
  v14 = *(unsigned __int8 *)(a2 + 304);
  JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a2, v13, a2 + 296, a4, a5, a6, a7, a8);
  v23 = *(_DWORD *)(a2 + 200);
  if (v23 + 4 > *(_DWORD *)(a2 + 192))
  {
    v22 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v15, v16, v17, v18, v19, v20, v21).n128_u64[0];
    v23 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v23) = v14 & 0x1F | 0x387F6A20;
  *(_DWORD *)(a2 + 200) += 4;
  if (v14 == 17)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198DC19D0);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
  }
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a2, 1, 17, v18, v19, v20, v21, (uint64_t)&v75, v22);
  if (!*(_DWORD *)(a3 + 20))
  {
    __break(0xC471u);
    JUMPOUT(0x198DC1A34);
  }
  JSC::MacroAssemblerARM64::branchAdd32(a2, 5u, qword_1ECF4C6E8, **(_BYTE **)(a3 + 8) & 0x7F, v24, v25, v26, v27, (uint64_t)&v73);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v28, v29, v30, v31, v32, v33, v34);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v36 = JSC::B3::StackmapValue::numChildren(*(JSC::B3::StackmapValue **)a3);
  v37 = v36 - 1;
  if (v36 == 1)
  {
    v38 = 0;
  }
  else
  {
    v38 = (unsigned int *)WTF::fastMalloc((WTF *)((16 * (v36 - 1)) | 8));
    *v38 = v37;
    bzero(v38 + 2, 16 * v37);
  }
  v72 = (WTF *)v38;
  if (JSC::B3::StackmapValue::numChildren(*(JSC::B3::StackmapValue **)a3) >= 2)
  {
    v39 = 0;
    v40 = 1;
    while (1)
    {
      if (v40 >= *(unsigned int *)(a3 + 20))
      {
        __break(0xC471u);
        JUMPOUT(0x198DC1A24);
      }
      v41 = *(_QWORD *)(a3 + 8);
      v42 = JSC::B3::StackmapValue::child(*(JSC::B3::StackmapValue **)a3, v40);
      v43 = v40 - 1;
      if (v43 >= *v38)
        break;
      v44 = *(_DWORD *)(*(_QWORD *)v42 + 16);
      v45 = &v38[v39];
      v46 = *(_DWORD *)(v41 + v39 * 4 + 24);
      *((_QWORD *)v45 + 1) = *(_QWORD *)(v41 + v39 * 4 + 16);
      v45[4] = v46;
      v45[5] = v44;
      v39 += 4;
      v40 = v43 + 2;
      if (v40 >= JSC::B3::StackmapValue::numChildren(*(JSC::B3::StackmapValue **)a3))
        goto LABEL_17;
    }
    __break(0xC471u);
LABEL_44:
    JUMPOUT(0x198DC197CLL);
  }
LABEL_17:
  v71 = v12;
  JSC::Wasm::TierUpCount::addOSREntryData(*(_QWORD *)(v11 + 48), *(_DWORD *)(v11 + 36), *(_DWORD *)(a1 + 32), (uint64_t *)&v72);
  v48 = v47;
  v49 = v75;
  v50 = v76;
  v51 = v73;
  v52 = v74;
  v53 = *(_DWORD *)(a1 + 36);
  v54 = *(_QWORD *)(a3 + 56);
  v62 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v62 + 8) = 1;
  *(_QWORD *)v62 = off_1E35B6698;
  *(_DWORD *)(v62 + 16) = v49;
  *(_QWORD *)(v62 + 20) = v50;
  *(_DWORD *)(v62 + 28) = v51;
  *(_QWORD *)(v62 + 32) = v52;
  *(_QWORD *)(v62 + 40) = v48;
  *(_DWORD *)(v62 + 48) = v53;
  *(_DWORD *)(v62 + 52) = i;
  v63 = *(unsigned int *)(v54 + 12);
  if ((_DWORD)v63 == *(_DWORD *)(v54 + 8))
  {
    v66 = v63 + (v63 >> 2);
    if (v66 >= 0x10)
      v67 = v66 + 1;
    else
      v67 = 16;
    if (v67 <= v63 + 1)
      v68 = v63 + 1;
    else
      v68 = v67;
    v65 = v71;
    if (v68 >> 29)
    {
      __break(0xC471u);
      goto LABEL_44;
    }
    v69 = *(const void **)v54;
    v70 = (void *)WTF::fastMalloc((WTF *)(8 * v68));
    *(_DWORD *)(v54 + 8) = v68;
    *(_QWORD *)v54 = v70;
    memcpy(v70, v69, 8 * v63);
    if (v69)
    {
      if (*(const void **)v54 == v69)
      {
        *(_QWORD *)v54 = 0;
        *(_DWORD *)(v54 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v69, v55, v56, v57, v58, v59, v60, v61);
    }
    v63 = *(unsigned int *)(v54 + 12);
    v64 = (uint64_t *)(*(_QWORD *)v54 + 8 * v63);
  }
  else
  {
    v64 = (uint64_t *)(*(_QWORD *)v54 + 8 * v63);
    v65 = v71;
  }
  *v64 = v62;
  *(_DWORD *)(v54 + 12) = v63 + 1;
  if (v72)
    WTF::fastFree((unint64_t)v72, v55, v56, v57, v58, v59, v60, v61);
  *(_BYTE *)(a2 + 212) = v65;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::Wasm::OMGIRGenerator::emitLoopTierUpCheck(unsigned int,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::Wasm::OMGIRGenerator::emitLoopTierUpCheck(unsigned int,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41[3];

  v10 = (unsigned int *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 28), a2, v12, v13, v14, v15, v16, v17);
  JSC::MacroAssembler::probe((_DWORD *)a2, (uint64_t)operationWasmTriggerOSREntryNow, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), v18, v19, v20, v21);
  JSC::MacroAssemblerARM64::branchTest64(a2, 0, 8, 0xFFFFFFFFLL, v22, v23, v24, v25, (uint64_t)v41, v26);
  v40 = *(_DWORD *)(a1 + 52);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v41, &v40, a2, v27, v28, v29, v30, v31);
  v39 = *(_DWORD *)(a2 + 200);
  if (v39 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v32, v33, v34, v35, v36, v37, v38);
    v39 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v39) = -702611200;
  *(_DWORD *)(a2 + 200) += 4;
  *(_BYTE *)(a2 + 212) = v11;
}

uint64_t WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;

  v9 = result + 16;
  v8 = *(_QWORD *)result;
  if (*(_QWORD *)result != result + 16)
  {
    v17 = result + 16;
    v18 = a2;
    if (v8)
    {
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 0;
      v16 = result;
      WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
      result = v16;
    }
    v9 = v17;
    *(_QWORD *)result = v17;
    a2 = v18;
  }
  v10 = *(__int128 **)a2;
  if (*(_DWORD **)a2 == a2 + 4)
  {
    v11 = a2[3];
    if ((_DWORD)v11)
    {
      v14 = 24 * v11;
      do
      {
        v15 = *v10;
        *(_QWORD *)(v9 + 16) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v9 = v15;
        v9 += 24;
        v10 = (__int128 *)((char *)v10 + 24);
        v14 -= 24;
      }
      while (v14);
    }
    v12 = a2[2];
  }
  else
  {
    *(_QWORD *)a2 = a2 + 4;
    *(_QWORD *)result = v10;
    v12 = a2[2];
    a2[2] = 16;
  }
  *(_DWORD *)(result + 8) = v12;
  v13 = a2[3];
  a2[3] = 0;
  *(_DWORD *)(result + 12) = v13;
  return result;
}

char *WTF::Vector<JSC::Wasm::OMGIRGenerator *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::OMGIRGenerator *&>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  result = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *(_QWORD *)result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

void WTF::Vector<JSC::Wasm::UnlinkedHandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _OWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x924924A)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)a1;
      v7 = *(unsigned int *)(a1 + 12);
      v8 = 28 * v4;
      v9 = (_OWORD *)WTF::fastMalloc((WTF *)(28 * v4));
      *(_DWORD *)(a1 + 8) = v8 / 0x1C;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v7)
      {
        v17 = 28 * v7;
        v18 = (__int128 *)v6;
        do
        {
          v19 = *v18;
          *(_OWORD *)((char *)v9 + 12) = *(__int128 *)((char *)v18 + 12);
          *v9 = v19;
          v9 = (_OWORD *)((char *)v9 + 28);
          v18 = (__int128 *)((char *)v18 + 28);
          v17 -= 28;
        }
        while (v17);
      }
      if (v6)
      {
        if (*(_QWORD *)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addThrow(unsigned int,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> &)::$_0>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  JSC::ARM64LogicalImmediate *v45;

  v10 = *(_QWORD **)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::Wasm::PatchpointExceptionHandle::generate<JSC::Wasm::OMGIRGenerator>(a1 + 28, a2, a3, v10, a5, a6, a7, a8);
  LODWORD(v45) = *(_DWORD *)(a1 + 24);
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [20],unsigned int>(a2, "throw impl, index: ", &v45);
  v19 = *(_DWORD *)(a2 + 200);
  if (v19 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v12, v13, v14, v15, v16, v17, v18);
    v19 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v19) = -129990648;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::AssemblyHelpers::copyCalleeSavesToVMEntryFrameCalleeSavesBuffer((char *)a2, 8, v13, v14, v15, v16, v17, v18);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v45, 1, v20, v21, v22, v23, v24);
  v32 = *(_DWORD *)(a2 + 200);
  if (v32 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v25, v26, v27, v28, v29, v30, v31);
    v32 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v32) = -1862269982;
  *(_DWORD *)(a2 + 200) += 4;
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198DC1F10);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  v33 = *(_BYTE *)(a2 + 272);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)operationWasmThrow, v33, v27, v28, v29, v30, v31);
  *(_DWORD *)(a2 + 208) = 0;
  v41 = (32 * (v33 & 0x1F)) | 0xD63F0000;
  v42 = *(_DWORD *)(a2 + 200);
  if (v42 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v34, v35, v36, v37, v38, v39, v40);
    v42 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v42) = v41;
  v43 = *(_DWORD *)(a2 + 200);
  v44 = v43 + 4;
  *(_DWORD *)(a2 + 200) = v43 + 4;
  if ((v43 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v34, v35, v36, v37, v38, v39, v40);
    v44 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v44) = -702611456;
  *(_DWORD *)(a2 + 200) += 4;
  *(_BYTE *)(a2 + 212) = v11;
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [20],unsigned int>(uint64_t a1, const char *a2, _DWORD *a3)
{
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  void (**v41)(WTF::StringPrintStream *__hidden);
  WTF *v42;
  __int128 v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v41 = off_1E3572250;
    v42 = (WTF *)v44;
    v43 = xmmword_199122F80;
    v44[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v41, "%s", a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v41, "%u", *a3);
    v41[5]((WTF::StringPrintStream *)&v41);
    if (v42)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v42, v43, (uint64_t *)&v38);
      v12 = v38;
    }
    else
    {
      v12 = 0;
    }
    v13 = *(_DWORD *)(a1 + 200);
    v39 = v13;
    v38 = 0;
    v40 = v12;
    v14 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 224))
    {
      v15 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v14 + 1, (unint64_t)&v39);
      v16 = *(unsigned int *)(a1 + 228);
      v17 = *(_QWORD *)(a1 + 216) + 16 * v16;
      *(_DWORD *)v17 = *(_DWORD *)v15;
      v18 = *(_QWORD *)(v15 + 8);
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v17 + 8) = v18;
      v19 = v40;
      *(_DWORD *)(a1 + 228) = v16 + 1;
      v40 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
        {
          WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
          WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
        }
        else
        {
          *(_DWORD *)v19 -= 2;
        }
      }
    }
    else
    {
      v20 = *(_QWORD *)(a1 + 216) + 16 * v14;
      *(_DWORD *)v20 = v13;
      *(_QWORD *)(v20 + 8) = v12;
      *(_DWORD *)(a1 + 228) = v14 + 1;
    }
    v21 = v38;
    v38 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::~StringImpl(v21, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
    if (v42 != (WTF *)v44)
      WTF::fastFree((unint64_t)v42, v5, v6, v7, v8, v9, v10, v11);
  }
}

void JSC::AssemblyHelpers::copyCalleeSavesToVMEntryFrameCalleeSavesBuffer(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::MacroAssemblerARM64::load64((uint64_t)a1, a2 | 0x3000000000, a2, a4, a5, a6, a7, a8);
  JSC::AssemblyHelpers::copyCalleeSavesToEntryFrameCalleeSavesBufferImpl(a1, a2);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addRethrow(unsigned int,JSC::Wasm::OMGIRGenerator::ControlData &)::$_0>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;

  v9 = *(_QWORD **)(a1 + 16);
  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::Wasm::PatchpointExceptionHandle::generate<JSC::Wasm::OMGIRGenerator>(a1 + 24, a2, a3, v9, a5, a6, a7, a8);
  v18 = *(_DWORD *)(a2 + 200);
  if (v18 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v11, v12, v13, v14, v15, v16, v17);
    v18 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v18) = -129990648;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::AssemblyHelpers::copyCalleeSavesToVMEntryFrameCalleeSavesBuffer((char *)a2, 8, v12, v13, v14, v15, v16, v17);
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198DC228CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  v24 = *(_BYTE *)(a2 + 272);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)operationWasmRethrow, v24, v19, v20, v21, v22, v23);
  *(_DWORD *)(a2 + 208) = 0;
  v32 = (32 * (v24 & 0x1F)) | 0xD63F0000;
  v33 = *(_DWORD *)(a2 + 200);
  if (v33 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v25, v26, v27, v28, v29, v30, v31);
    v33 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v33) = v32;
  v34 = *(_DWORD *)(a2 + 200);
  v35 = v34 + 4;
  *(_DWORD *)(a2 + 200) = v34 + 4;
  if ((v34 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v25, v26, v27, v28, v29, v30, v31);
    v35 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v35) = -702611456;
  *(_DWORD *)(a2 + 200) += 4;
  *(_BYTE *)(a2 + 212) = v10;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addReturn(JSC::Wasm::OMGIRGenerator::ControlData const&,WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const&)::$_0>::run(uint64_t a1, JSC::CCallHelpers *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Air::Code::emitEpilogue(*(JSC::B3::Air::Code **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 48) + 8) + 160), a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::B3::Variable *>(uint64_t a1, _OWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;

  v11 = *(unsigned int *)(a1 + 8);
  v12 = *(unsigned int *)(a1 + 12);
  v13 = v11 + (v11 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= v12 + 1)
    v15 = v12 + 1;
  else
    v15 = v14;
  if (v15 <= v11)
  {
LABEL_14:
    v19 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12);
    v20 = *a3;
    *(_OWORD *)v19 = *a2;
    *(_QWORD *)(v19 + 16) = v20;
    ++*(_DWORD *)(a1 + 12);
    return;
  }
  v16 = *(_QWORD *)a1;
  if (v15 < 0x11)
  {
    v18 = a1 + 16;
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 16;
    goto LABEL_12;
  }
  if (v15 < 0xAAAAAAB)
  {
    v17 = 24 * v15;
    v18 = WTF::fastMalloc((WTF *)(24 * v15));
    *(_DWORD *)(a1 + 8) = (v17 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v18;
LABEL_12:
    if ((_DWORD)v12)
    {
      v21 = 24 * v12;
      v22 = v16;
      do
      {
        v23 = *(_OWORD *)v22;
        *(_QWORD *)(v18 + 16) = *(_QWORD *)(v22 + 16);
        *(_OWORD *)v18 = v23;
        v18 += 24;
        v22 += 24;
        v21 -= 24;
      }
      while (v21);
    }
    if (a1 + 16 != v16 && v16)
    {
      if (*(_QWORD *)a1 == v16)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    goto LABEL_14;
  }
  __break(0xC471u);
}

__n128 WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::ValueRep>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v9;
  __n128 result;

  v9 = (__n128 *)WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  result = *v9;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v9;
  return result;
}

uint64_t WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v25;
  __int128 *v26;
  __int128 v27;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 16 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v8 - v10) >> 4);
      if (v15 < 2)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 1;
        goto LABEL_31;
      }
      if (!(v15 >> 28))
      {
        v16 = WTF::fastMalloc((WTF *)(16 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_31:
        v23 = 0;
        do
        {
          *(_OWORD *)(v16 + v23) = *(_OWORD *)(v10 + v23);
          v23 += 16;
        }
        while (16 * v11 != v23);
        if (a1 + 16 != v10 && v10)
        {
          if (*(_QWORD *)a1 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
        }
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v8 - v10) >> 4);
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x198DC2620);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v20 = (unint64_t)a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (v20 < 2)
    {
      v22 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
      if (!(_DWORD)v21)
        goto LABEL_25;
    }
    else
    {
      if (v20 >> 28)
        goto LABEL_43;
      v22 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v20));
      *(_DWORD *)(a1 + 8) = v20;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v21)
        goto LABEL_25;
    }
    v25 = 16 * v21;
    v26 = (__int128 *)v10;
    do
    {
      v27 = *v26++;
      *v22++ = v27;
      v25 -= 16;
    }
    while (v25);
LABEL_25:
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::createTailCallPatchpoint(JSC::B3::BasicBlock *,JSC::Wasm::CallInformation,JSC::Wasm::CallInformation,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::$_1>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;

  v9 = *(_QWORD *)(a1 + 160);
  if (a1 + 176 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 160) = 0;
    *(_DWORD *)(a1 + 168) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *(_QWORD *)(a1 + 144);
  if (v11)
  {
    *(_QWORD *)(a1 + 144) = 0;
    *(_DWORD *)(a1 + 152) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *(_QWORD *)(a1 + 64);
  if (a1 + 80 != v12 && v12 != 0)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 48);
  if (v14)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::createTailCallPatchpoint(JSC::B3::BasicBlock *,JSC::Wasm::CallInformation,JSC::Wasm::CallInformation,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::$_1>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  unint64_t v11;
  WTF *v12;
  unint64_t v14;

  v9 = (WTF *)*((_QWORD *)this + 20);
  if ((WTF *)((char *)this + 176) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 18);
  if (v11)
  {
    *((_QWORD *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = (WTF *)*((_QWORD *)this + 8);
  if ((WTF *)((char *)this + 80) != v12 && v12 != 0)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)this + 6);
  if (v14)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::createTailCallPatchpoint(JSC::B3::BasicBlock *,JSC::Wasm::CallInformation,JSC::Wasm::CallInformation,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::$_1>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int *v13;
  WTF *v14;
  WTF *v15;
  unsigned int *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51[2];

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 48) + 8) + 160);
  v9 = *(unsigned int *)(v8 + 184);
  if ((v9 & 0x80000000) != 0)
  {
    __break(0xC471u);
    goto LABEL_46;
  }
  v10 = *(_DWORD *)(a1 + 208);
  v11 = v9 + v10;
  if (__OFADD__((_DWORD)v9, v10))
  {
    __break(0xC471u);
    JUMPOUT(0x198DC295CLL);
  }
  v13 = *(unsigned int **)(v8 + 200);
  if (v13)
  {
    v49 = *(unsigned int *)(v8 + 184);
    v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 48) + 8) + 160);
    v46 = *v13;
    v48 = v13 + 2;
    v14 = (WTF *)WTF::fastMalloc((WTF *)(8 * v46 + 8));
    *(_DWORD *)v14 = v46;
    if ((_DWORD)v46)
    {
      v47 = 0;
      do
      {
        *(_QWORD *)((char *)v14 + v47 * 4 + 8) = *(_QWORD *)&v48[v47];
        v47 += 2;
      }
      while (2 * v46 != v47);
    }
    v9 = v49;
    v8 = v50;
  }
  else
  {
    v14 = 0;
  }
  v15 = *(WTF **)(v8 + 208);
  v51[0] = v14;
  v51[1] = v15;
  v16 = *(unsigned int **)(v8 + 232);
  if (v16)
  {
    v17 = v14 ? (uint64_t *)((char *)v14 + 8) : 0;
    v18 = v14 ? (uint64_t)v14 + 8 * *(unsigned int *)v14 + 8 : 0;
    if (v17 != (uint64_t *)v18)
    {
      v19 = (*((_QWORD *)v16 + 2) + *v16) << 6;
      do
      {
        v20 = *v17;
        v21 = *v17 & 0x7F | 0x80;
        if ((*v17 & 0x60) == 0x20)
        {
          v22 = 128;
        }
        else
        {
          v21 = *v17;
          v22 = 0;
        }
        if ((v20 & 0x80) == 0)
        {
          v21 = *v17;
          v22 = 0;
        }
        *v17++ = ((v20 & 0xFFFFFFFFFFFFFF00) + v19) & 0xFFFFFFFFFFFFFF00 | v21 & 0x7F | v22;
      }
      while (v17 != (uint64_t *)v18);
      v14 = v51[0];
    }
  }
  if (v14)
    v23 = (uint64_t *)((char *)v14 + 8);
  else
    v23 = 0;
  if (v14)
    v24 = (uint64_t)v14 + 8 * *(unsigned int *)v14 + 8;
  else
    v24 = 0;
  if (v23 != (uint64_t *)v24)
  {
    v25 = v9 << 6;
    do
    {
      v26 = *v23;
      v27 = *v23 & 0x7F | 0x80;
      if ((*v23 & 0x60) == 0x20)
      {
        v28 = 128;
      }
      else
      {
        v27 = *v23;
        v28 = 0;
      }
      if ((v26 & 0x80) == 0)
      {
        v27 = *v23;
        v28 = 0;
      }
      *v23++ = ((v26 & 0xFFFFFFFFFFFFFF00) + v25) & 0xFFFFFFFFFFFFFF00 | v27 & 0x7F | v28;
    }
    while (v23 != (uint64_t *)v24);
  }
  JSC::AssemblyHelpers::emitRestore(a2, (_DWORD **)v51, 31, a4, a5, a6, a7, a8);
  if (__OFSUB__(v11, 8))
  {
    __break(0xC471u);
LABEL_46:
    JUMPOUT(0x198DC2954);
  }
  JSC::MacroAssemblerARM64::load64((uint64_t)a2, ((unint64_t)(v11 - 8) << 32) | 0x1F, 30, v29, v30, v31, v32, v33);
  JSC::MacroAssemblerARM64::add64((uint64_t)a2, v11, 31, 31, v34, v35, v36, v37);
  v45 = v51[0];
  v51[0] = 0;
  if (v45)
    WTF::fastFree((unint64_t)v45, v38, v39, v40, v41, v42, v43, v44);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseUnreachableExpression(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, double a10)
{
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  WTF **v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  unsigned int v35;
  int v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  char *v61;
  unint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  int v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  int v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  unint64_t *v85;
  uint64_t v86;
  WTF **v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  unsigned int v93;
  float v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF *v105;
  unsigned int *v106;
  uint64_t *v107;
  double v109;
  int v110;
  BOOL v111;
  int v112;
  char *v113;
  char *v114;
  unint64_t *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  WTF::AtomStringImpl *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF::AtomStringImpl *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  unint64_t v158;
  _BOOL8 v159;
  double v160;
  int v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  float v169;
  double v170;
  double v171;
  uint8x8_t v172;
  int v173;
  _BYTE *v174;
  unint64_t *v175;
  int v176;
  double v177;
  float v178;
  double v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  int v193;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  WTF *v202;
  WTF::AtomStringImpl *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  WTF *v228;
  uint64_t v229;
  char *v230;
  unint64_t *v231;
  uint64_t v232;
  char *v233;
  unint64_t *v234;
  uint64_t v235;
  char *v236;
  unint64_t v237;
  WTF *v238;
  unint64_t v239;
  uint64_t v240;
  WTF *v241;
  WTF **v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  float v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unsigned __int8 v260;
  __int128 v261;
  _BYTE v262[384];
  WTF *v263;
  uint64_t v264;
  _BYTE v265[384];
  WTF *v266;
  int v267;
  unsigned int v268;
  _BYTE v269[392];
  int v270;
  JSC::Wasm::FunctionSignature *v271;
  int v272;
  uint64_t v273;
  WTF *v274;
  int v275;
  int v276;
  unsigned int v277;

  if (*(_BYTE *)(a2 + 14992) != 11)
  {
    switch(*(_BYTE *)(a2 + 14992))
    {
      case 0:
      case 1:
      case 0xF:
      case 0x1A:
      case 0x1B:
      case 0x45:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x4F:
      case 0x50:
      case 0x51:
      case 0x52:
      case 0x53:
      case 0x54:
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x59:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x98:
      case 0x99:
      case 0x9A:
      case 0x9B:
      case 0x9C:
      case 0x9D:
      case 0x9E:
      case 0x9F:
      case 0xA0:
      case 0xA1:
      case 0xA2:
      case 0xA3:
      case 0xA4:
      case 0xA5:
      case 0xA6:
      case 0xA7:
      case 0xA8:
      case 0xA9:
      case 0xAA:
      case 0xAB:
      case 0xAC:
      case 0xAD:
      case 0xAE:
      case 0xAF:
      case 0xB0:
      case 0xB1:
      case 0xB2:
      case 0xB3:
      case 0xB4:
      case 0xB5:
      case 0xB6:
      case 0xB7:
      case 0xB8:
      case 0xB9:
      case 0xBA:
      case 0xBB:
      case 0xBC:
      case 0xBD:
      case 0xBE:
      case 0xBF:
      case 0xC0:
      case 0xC1:
      case 0xC2:
      case 0xC3:
      case 0xC4:
      case 0xD0:
      case 0xD1:
      case 0xD3:
      case 0xD4:
        goto LABEL_23;
      case 2:
      case 3:
      case 4:
      case 6:
        ++*(_DWORD *)(a2 + 15008);
        *(_QWORD *)&v261 = 0;
        JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseBlockSignatureAndNotifySIMDUseIfNeeded(&v263, (unint64_t *)a2, &v261);
        v66 = v264;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v263, v67, v68, v69, v70, v71, v72, v73);
        if (!v66)
          goto LABEL_37;
        v61 = "can't get inline type for ";
        v62 = (unint64_t *)a2;
        v63 = 27;
        goto LABEL_244;
      case 5:
        if (*(_DWORD *)(a2 + 15008) >= 2u)
          goto LABEL_23;
        v48 = *(unsigned int *)(a2 + 468);
        if (!(_DWORD)v48)
        {
          __break(0xC471u);
          JUMPOUT(0x198DC4B24);
        }
        v49 = v48 - 1;
        v50 = *(_QWORD *)(a2 + 456);
        *(_DWORD *)(a2 + 15008) = 0;
        v51 = v50 + 888 * v49;
        if (!*(_DWORD *)(v51 + 808))
        {
          v52 = *(_QWORD *)(a2 + 48);
          v53 = v50 + 888 * v49;
          *(_DWORD *)(v52 + 512) = *(_DWORD *)(*(_QWORD *)(v53 + 816) + 8) + *(_DWORD *)(v53 + 824);
          *(_QWORD *)(v52 + 88) = *(_QWORD *)(v53 + 840);
          *(_DWORD *)(v51 + 808) = 1;
          *(_QWORD *)(v53 + 840) = 0;
          LOBYTE(v263) = 0;
          LOBYTE(v264) = 0;
          std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v263, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=(a2 + 56, (_DWORD *)(v53 + 400), v54, v55, v56, v57, v58, v59);
          goto LABEL_23;
        }
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [37]>((void (***)(WTF::StringPrintStream *__hidden))&v263);
        goto LABEL_233;
      case 7:
        LODWORD(v259) = 0;
        JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseExceptionIndex((uint64_t)&v263, (unint64_t *)a2, (unsigned int *)&v259, a9, *(float *)&a10);
        if ((_BYTE)v264)
          goto LABEL_245;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v263, v76, v77, v78, v79, v80, v81, v82);
        v88 = *(_QWORD *)(a2 + 14960);
        v89 = v259;
        v90 = *(unsigned int *)(v88 + 68);
        if (v90 <= v259)
        {
          v92 = v259 - v90;
          if (v92 >= *(unsigned int *)(v88 + 84))
          {
            __break(0xC471u);
            JUMPOUT(0x198DC4B4CLL);
          }
          v91 = (_QWORD *)(v88 + 72);
        }
        else
        {
          v91 = (_QWORD *)(v88 + 56);
          v92 = v259;
        }
        v181 = JSC::Wasm::TypeDefinition::expand(*(_QWORD *)(*v91 + 8 * v92));
        if (*(_DWORD *)(a2 + 15008) >= 2u)
          goto LABEL_23;
        v188 = *(_DWORD *)(a2 + 468);
        if (!v188)
        {
          __break(0xC471u);
          JUMPOUT(0x198DC4B54);
        }
        v189 = v181;
        v190 = *(_QWORD *)(a2 + 456) + 888 * v188;
        v193 = *(_DWORD *)(v190 - 80);
        v192 = v190 - 80;
        v191 = v193;
        if (v193 != 4 && (v191 != 5 || *(_DWORD *)(v192 + 68) != 0))
          goto LABEL_468;
        *(_DWORD *)(a2 + 15008) = 0;
        v263 = (WTF *)v265;
        v264 = 16;
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=(a2 + 56, &v263, v182, v183, v184, v185, v186, v187);
        v202 = v263;
        if (v265 != (_BYTE *)v263 && v263)
        {
          v263 = 0;
          LODWORD(v264) = 0;
          WTF::fastFree((unint64_t)v202, v195, v196, v197, v198, v199, v200, v201);
        }
        v263 = (WTF *)v265;
        v264 = 8;
        JSC::Wasm::OMGIRGenerator::addCatchToUnreachable(&v261, *(_QWORD **)(a2 + 48), v89, v189, v192, (uint64_t)&v263, &qword_199123000);
        if (BYTE8(v261))
        {
          v255 = v261;
          *(_QWORD *)&v261 = 0;
          *(_QWORD *)a1 = v255;
          a1[8] = 1;
          std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v261, v203, v204, v205, v206, v207, v208, v209);
        }
        else
        {
          std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v261, v203, v204, v205, v206, v207, v208, v209);
          if (*(_DWORD *)(v189 + 32))
            v217 = 0;
          else
            v217 = v189 + 8;
          v218 = *(_DWORD *)(v217 + 8);
          if (HIDWORD(v264) != v218)
          {
            __break(0xC471u);
            JUMPOUT(0x198DC4A08);
          }
          if (v218)
          {
            v219 = 0;
            v220 = 0;
            do
            {
              v221 = (uint64_t *)(*(_QWORD *)(v189 + 8) + 16 * (v220 + *(_DWORD *)(v189 + 20)));
              v222 = *v221;
              v223 = v221[1];
              *(_QWORD *)&v261 = v222;
              *((_QWORD *)&v261 + 1) = v223;
              if (v220 >= HIDWORD(v264))
              {
                __break(0xC471u);
                JUMPOUT(0x198DC4B2CLL);
              }
              v211 = (uint64_t *)((char *)v263 + v219);
              v224 = *(_DWORD *)(a2 + 68);
              if (v224 == *(_DWORD *)(a2 + 64))
              {
                v258 = v220;
                WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::B3::Variable *>(a2 + 56, &v261, v211, v212, v213, v214, v215, v216);
                v220 = v258;
              }
              else
              {
                v225 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 24 * v224);
                v226 = *v211;
                *v225 = v222;
                v225[1] = v223;
                v225[2] = v226;
                ++*(_DWORD *)(a2 + 68);
              }
              ++v220;
              if (*(_DWORD *)(v189 + 32))
                v227 = 0;
              else
                v227 = v189 + 8;
              v219 += 8;
            }
            while (v220 < *(unsigned int *)(v227 + 8));
          }
          *a1 = 0;
          a1[8] = 0;
        }
        v228 = v263;
        if (v265 != (_BYTE *)v263 && v263)
        {
          v263 = 0;
          LODWORD(v264) = 0;
          WTF::fastFree((unint64_t)v228, v210, (uint64_t)v211, v212, v213, v214, v215, v216);
        }
        return;
      case 8:
        JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseExceptionIndex((uint64_t)&v263, (unint64_t *)a2, (unsigned int *)&v261, a9, *(float *)&a10);
        goto LABEL_48;
      case 9:
        LODWORD(v259) = 0;
        JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseBranchTarget(&v263, a2, (unsigned int *)&v259, 0, a9, *(float *)&a10, a5, a6, a7);
        if ((_BYTE)v264)
          goto LABEL_245;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v263, v76, v77, v78, v79, v80, v81, v82);
        v164 = *(unsigned int *)(a2 + 468);
        v165 = ~(unint64_t)v259;
        v111 = __CFADD__(v165, v164);
        v166 = v165 + v164;
        if (!v111)
        {
          __break(0xC471u);
          JUMPOUT(0x198DC4B34);
        }
        if (*(_DWORD *)(*(_QWORD *)(a2 + 456) + 888 * v166 + 808) == 5)
          goto LABEL_23;
        v167 = "rethrow doesn't refer to a catch block";
        v168 = 39;
        goto LABEL_474;
      case 0xC:
      case 0xD:
        v75 = *(_DWORD *)(a2 + 15008);
        goto LABEL_47;
      case 0xE:
        LODWORD(v261) = 0;
        LODWORD(v259) = 0;
        if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v261))
        {
          if ((_DWORD)v261)
          {
            if ((_DWORD)v261 == -1)
            {
              v230 = "br_table's number of targets is too big ";
              v231 = (unint64_t *)a2;
              v232 = 41;
              v173 = -1;
              goto LABEL_192;
            }
            v93 = 0;
            do
            {
              if (!WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v259))
              {
                v113 = "can't get ";
                v114 = "th target for br_table in unreachable context";
                v115 = (unint64_t *)a2;
                v116 = 11;
                v117 = v93;
                v118 = 46;
                goto LABEL_304;
              }
              ++v93;
            }
            while (v93 < v261);
          }
          if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v259))
            goto LABEL_23;
          v84 = "can't get default target for br_table in unreachable context";
          v85 = (unint64_t *)a2;
          v86 = 61;
        }
        else
        {
          v84 = "can't get the number of targets for br_table in unreachable context";
LABEL_460:
          v85 = (unint64_t *)a2;
          v86 = 68;
        }
        goto LABEL_307;
      case 0x10:
        goto LABEL_135;
      case 0x11:
        goto LABEL_59;
      case 0x12:
        if (!HIBYTE(word_1ECF4C7B4))
          goto LABEL_457;
LABEL_135:
        JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseFunctionIndex(&v263, (unint64_t *)a2, (unsigned int *)&v261, a9, *(float *)&a10, a4, a5, a6, a7);
        goto LABEL_48;
      case 0x13:
        if (HIBYTE(word_1ECF4C7B4))
        {
LABEL_59:
          LODWORD(v261) = 0;
          LODWORD(v259) = 0;
          if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v261))
          {
            if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v259))
              goto LABEL_23;
            v84 = "can't get call_indirect's reserved byte in unreachable context";
            v85 = (unint64_t *)a2;
            v86 = 63;
          }
          else
          {
            v84 = "can't get call_indirect's signature index in unreachable context";
            v85 = (unint64_t *)a2;
            v86 = 65;
          }
        }
        else
        {
LABEL_457:
          v84 = "wasm tail calls are not enabled";
          v85 = (unint64_t *)a2;
          v86 = 32;
        }
        goto LABEL_307;
      case 0x14:
        if (BYTE1(dword_1ECF4C7B0))
        {
          LODWORD(v261) = 0;
          if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v261))
          {
LABEL_37:
            v74 = 0;
            *a1 = 0;
            goto LABEL_38;
          }
          v84 = "can't call_ref's signature index in unreachable context";
          v85 = (unint64_t *)a2;
          v86 = 56;
        }
        else
        {
          v84 = "function references are not enabled";
          v85 = (unint64_t *)a2;
          v86 = 36;
        }
        goto LABEL_307;
      case 0x18:
        if (*(_DWORD *)(a2 + 468) == 1)
        {
          v84 = "can't use delegate at the top-level of a function";
          v85 = (unint64_t *)a2;
          v86 = 50;
          goto LABEL_307;
        }
        v277 = 0;
        JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::parseDelegateTarget((uint64_t)&v263, a2, &v277, *(_DWORD *)(a2 + 15008), a9, *(float *)&a10);
        if ((_BYTE)v264)
        {
LABEL_245:
          v241 = v263;
          v263 = 0;
          *(_QWORD *)a1 = v241;
          a1[8] = 1;
          v242 = &v263;
          goto LABEL_246;
        }
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v263, v76, v77, v78, v79, v80, v81, v82);
        v12 = *(_DWORD *)(a2 + 15008);
        if (v12 != 1)
          goto LABEL_22;
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v263, (_DWORD *)(a2 + 456), v120, v121, v122, v123, v124, v125);
        if (v270 == 4)
        {
          v126 = *(unsigned int *)(a2 + 468);
          v127 = ~(unint64_t)v277;
          v111 = __CFADD__(v127, v126);
          v128 = v127 + v126;
          if (!v111)
          {
            __break(0xC471u);
            JUMPOUT(0x198DC4B44);
          }
          v129 = *(_QWORD *)(a2 + 456) + 888 * v128;
          v130 = *(_DWORD *)(v129 + 808);
          if ((v130 - 5) > 0xFFFFFFFD)
          {
            JSC::Wasm::OMGIRGenerator::addDelegateToUnreachable(&v261, *(_QWORD *)(a2 + 48), v130, *(_DWORD *)(v129 + 872), v276);
            if (!BYTE8(v261))
            {
              std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v261, v131, v132, v133, v134, v135, v136, v137);
              *(_QWORD *)&v261 = v262;
              *((_QWORD *)&v261 + 1) = 16;
              JSC::Wasm::OMGIRGenerator::addEndToUnreachable(&v259, *(_QWORD *)(a2 + 48), (uint64_t)&v263, (uint64_t)&v261, v138, v139, v140, v141);
              v149 = v260;
              if (v260)
              {
                v257 = v259;
                v259 = 0;
                *(_QWORD *)a1 = v257;
                a1[8] = 1;
                std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v259, v142, v143, v144, v145, v146, v147, v148);
              }
              else
              {
                std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v259, v142, v143, v144, v145, v146, v147, v148);
                WTF::VectorBuffer<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::FastMalloc>::swap(a2 + 56, (uint64_t)&v263, *(unsigned int *)(a2 + 68), HIDWORD(v264));
                v157 = *(_DWORD *)(a2 + 68);
                *(_DWORD *)(a2 + 68) = HIDWORD(v264);
                HIDWORD(v264) = v157;
              }
              v158 = v261;
              if (v262 != (_BYTE *)v261 && (_QWORD)v261)
              {
                *(_QWORD *)&v261 = 0;
                DWORD2(v261) = 0;
                WTF::fastFree(v158, v150, v151, v152, v153, v154, v155, v156);
              }
              JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry::~ControlEntry((uint64_t)&v263, v150, v151, v152, v153, v154, v155, v156);
              if (!v149)
                goto LABEL_21;
              return;
            }
            v256 = v261;
            *(_QWORD *)&v261 = 0;
            *(_QWORD *)a1 = v256;
            a1[8] = 1;
            std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v261, v131, v132, v133, v134, v135, v136, v137);
LABEL_481:
            JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry::~ControlEntry((uint64_t)&v263, v248, v249, v250, v251, v252, v253, v254);
            return;
          }
          JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<char [34]>((void (***)(WTF::StringPrintStream *__hidden))&v261);
        }
        else
        {
          JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [35]>((void (***)(WTF::StringPrintStream *__hidden))&v261);
        }
        *(_QWORD *)a1 = v261;
        a1[8] = 1;
        goto LABEL_481;
      case 0x19:
        if (*(_DWORD *)(a2 + 15008) >= 2u)
          goto LABEL_23;
        v95 = *(unsigned int *)(a2 + 468);
        if (!(_DWORD)v95)
        {
          __break(0xC471u);
          JUMPOUT(0x198DC4B3CLL);
        }
        v96 = v95 - 1;
        v97 = *(_QWORD *)(a2 + 456);
        *(_DWORD *)(a2 + 15008) = 0;
        v263 = (WTF *)v265;
        v264 = 16;
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=(a2 + 56, &v263, a3, a4, a5, a6, a7, a8);
        v105 = v263;
        if (v265 != (_BYTE *)v263 && v263)
        {
          v263 = 0;
          LODWORD(v264) = 0;
          WTF::fastFree((unint64_t)v105, v98, v99, v100, v101, v102, v103, v104);
        }
        v106 = (unsigned int *)(v97 + 888 * v96 + 808);
        v107 = (uint64_t *)*v106;
        if ((_DWORD)v107 != 4 && ((_DWORD)v107 != 5 || *(_DWORD *)(v97 + 888 * v96 + 876) != 0))
        {
LABEL_468:
          JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [38]>((void (***)(WTF::StringPrintStream *__hidden))&v263);
          goto LABEL_233;
        }
        JSC::Wasm::OMGIRGenerator::emitCatchImpl(*(_QWORD *)(a2 + 48), 1, (uint64_t)v106, 0, v107);
        LOBYTE(v263) = 0;
        LOBYTE(v264) = 0;
LABEL_49:
        v87 = &v263;
        goto LABEL_50;
      case 0x1C:
        JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseAnnotatedSelectImmediates(&v261, a2, (uint64_t)&v263, a9, *(float *)&a10);
        if (BYTE8(v261))
        {
          v244 = v261;
          *(_QWORD *)&v261 = 0;
          *(_QWORD *)a1 = v244;
          a1[8] = 1;
          v242 = (WTF **)&v261;
LABEL_246:
          std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v242, v76, v77, v78, v79, v80, v81, v82);
          return;
        }
        v87 = (WTF **)&v261;
LABEL_50:
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v87, v76, v77, v78, v79, v80, v81, v82);
        goto LABEL_23;
      case 0x20:
        LODWORD(v261) = 0;
        JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseIndexForLocal(&v263, a2, (unsigned int *)&v261, a9, *(float *)&a10);
        if ((_BYTE)v264)
          goto LABEL_245;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v263, v76, v77, v78, v79, v80, v81, v82);
        JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::checkLocalInitialized((uint64_t)&v263, a2, v261, v177, v178);
        goto LABEL_48;
      case 0x21:
      case 0x22:
        LODWORD(v261) = 0;
        JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseIndexForLocal(&v263, a2, (unsigned int *)&v261, a9, *(float *)&a10);
        if ((_BYTE)v264)
          goto LABEL_245;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v263, v76, v77, v78, v79, v80, v81, v82);
        JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::pushLocalInitialized(a2, v261);
        goto LABEL_23;
      case 0x23:
      case 0x24:
        JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseIndexForGlobal(&v263, (unint64_t *)a2, (unsigned int *)&v261, a9, *(float *)&a10);
        goto LABEL_48;
      case 0x25:
      case 0x26:
        LODWORD(v261) = 0;
        if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v261))
          goto LABEL_23;
        v84 = "can't parse table index";
        v85 = (unint64_t *)a2;
        v86 = 24;
        goto LABEL_307;
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
        LODWORD(v261) = 0;
        if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v261))
        {
          if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v261))
            goto LABEL_23;
          v61 = "can't get second immediate for ";
          v62 = (unint64_t *)a2;
          v63 = 32;
        }
        else
        {
          v61 = "can't get first immediate for ";
          v62 = (unint64_t *)a2;
          v63 = 31;
        }
LABEL_244:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,JSC::Wasm::OpType,WTF::ASCIILiteral>(v61, v62, v63, " in unreachable context", 24, &v263, v60);
        goto LABEL_233;
      case 0x3F:
      case 0x40:
        v83 = *(_QWORD *)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
        {
          v84 = "can't parse reserved byte for grow_memory/current_memory";
          v85 = (unint64_t *)a2;
          v86 = 57;
        }
        else
        {
          *(_QWORD *)a2 = v83 + 1;
          if (!*(_BYTE *)(*(_QWORD *)(a2 + 8) + v83))
            goto LABEL_23;
          v84 = "reserved byte for grow_memory/current_memory must be zero";
          v85 = (unint64_t *)a2;
          v86 = 58;
        }
        goto LABEL_307;
      case 0x41:
        LODWORD(v261) = 0;
        if (!WTF::LEBDecoder::decodeInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, (int *)&v261))
          goto LABEL_128;
        goto LABEL_37;
      case 0x42:
        v263 = 0;
        if (WTF::LEBDecoder::decodeInt64(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, (uint64_t *)&v263))
          goto LABEL_37;
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,JSC::Wasm::OpType,WTF::ASCIILiteral>("can't get immediate for ", (unint64_t *)a2, 25, " in unreachable context", 24, &v261, v169);
        goto LABEL_475;
      case 0x43:
        v119 = *(_QWORD *)a2 + 4;
        if (*(_QWORD *)(a2 + 16) >= v119)
          goto LABEL_137;
        v84 = "can't parse 32-bit floating-point constant";
        goto LABEL_306;
      case 0x44:
        v119 = *(_QWORD *)a2 + 8;
        if (*(_QWORD *)(a2 + 16) >= v119)
        {
LABEL_137:
          *(_QWORD *)a2 = v119;
          goto LABEL_23;
        }
        v84 = "can't parse 64-bit floating-point constant";
LABEL_306:
        v85 = (unint64_t *)a2;
        v86 = 43;
        goto LABEL_307;
      case 0xD2:
        LODWORD(v261) = 0;
        if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v261))
          goto LABEL_37;
LABEL_128:
        v61 = "can't get immediate for ";
        v62 = (unint64_t *)a2;
        v63 = 25;
        goto LABEL_244;
      case 0xD5:
      case 0xD6:
        v75 = 0;
LABEL_47:
        JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseBranchTarget(&v263, a2, (unsigned int *)&v261, v75, a9, *(float *)&a10, a5, a6, a7);
LABEL_48:
        if (!(_BYTE)v264)
          goto LABEL_49;
        goto LABEL_245;
      case 0xFB:
        if (BYTE2(dword_1ECF4C7B0))
        {
          LODWORD(v259) = 0;
          v159 = WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v259);
          if (v159)
          {
            v161 = v259;
            if (BYTE5(qword_1ECF4C789))
            {
              JSC::Wasm::WasmOpcodeCounter::singleton((JSC::Wasm::WasmOpcodeCounter *)v159);
              JSC::Wasm::WasmOpcodeCounter::increment((uint64_t)&JSC::Wasm::WasmOpcodeCounter::singleton(void)::counter, v161);
            }
            switch(v161)
            {
              case 0:
                v233 = "struct.new";
                v234 = (unint64_t *)a2;
                v235 = 11;
                goto LABEL_212;
              case 1:
                v233 = "struct.new_default";
                v234 = (unint64_t *)a2;
                v235 = 19;
LABEL_212:
                JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseStructTypeIndex(&v263, v234, &v261, v233, v235, v160, *(float *)&a10);
                goto LABEL_48;
              case 2:
                v236 = "struct.get";
                goto LABEL_210;
              case 5:
                v236 = "struct.set";
LABEL_210:
                JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseStructTypeIndexAndFieldIndex((uint64_t)&v263, (unint64_t *)a2, (unsigned int *)&v261, v236, 11, v160, *(float *)&a10);
                goto LABEL_48;
              case 6:
                LODWORD(v261) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v261))
                  goto LABEL_37;
                v84 = "can't get type index immediate for array.new in unreachable context";
                goto LABEL_460;
              case 7:
                LODWORD(v261) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v261))
                  goto LABEL_37;
                v84 = "can't get type index immediate for array.new_default in unreachable context";
                goto LABEL_220;
              case 11:
                LODWORD(v261) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v261))
                  goto LABEL_37;
                v84 = "can't get type index immediate for array.get in unreachable context";
                goto LABEL_460;
              case 12:
                LODWORD(v261) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v261))
                  goto LABEL_37;
                v84 = "can't get type index immediate for array.get_s in unreachable context";
                goto LABEL_207;
              case 13:
                LODWORD(v261) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v261))
                  goto LABEL_37;
                v84 = "can't get type index immediate for array.get_u in unreachable context";
LABEL_207:
                v85 = (unint64_t *)a2;
                v86 = 70;
                goto LABEL_307;
              case 14:
                LODWORD(v261) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v261))
                  goto LABEL_37;
                v84 = "can't get type index immediate for array.set in unreachable context";
                goto LABEL_460;
              case 15:
              case 28:
              case 29:
              case 30:
                goto LABEL_23;
              case 16:
                LODWORD(v261) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v261))
                  goto LABEL_37;
                v84 = "can't get type index immediate for array.fill in unreachable context";
                v85 = (unint64_t *)a2;
                v86 = 69;
                goto LABEL_307;
              case 17:
                LODWORD(v261) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v261))
                {
                  if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v261))
                    goto LABEL_23;
                  v84 = "can't get second type index immediate for array.copy in unreachable context";
LABEL_220:
                  v85 = (unint64_t *)a2;
                  v86 = 76;
                }
                else
                {
                  v84 = "can't get first type index immediate for array.copy in unreachable context";
                  v85 = (unint64_t *)a2;
                  v86 = 75;
                }
                goto LABEL_307;
              case 18:
                LODWORD(v261) = 0;
                if (!WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v261))
                {
                  v84 = "can't get first type index immediate for array.init_data in unreachable context";
                  goto LABEL_493;
                }
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v261))
                  goto LABEL_23;
                v84 = "can't get second type index immediate for array.init_data in unreachable context";
                goto LABEL_230;
              case 19:
                LODWORD(v261) = 0;
                if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v261))
                {
                  if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v261))
                    goto LABEL_23;
                  v84 = "can't get second type index immediate for array.init_elem in unreachable context";
LABEL_230:
                  v85 = (unint64_t *)a2;
                  v86 = 81;
                }
                else
                {
                  v84 = "can't get first type index immediate for array.init_elem in unreachable context";
LABEL_493:
                  v85 = (unint64_t *)a2;
                  v86 = 80;
                }
                goto LABEL_307;
              case 20:
              case 21:
              case 22:
              case 23:
                if ((v161 & 0xFFFFFFFE) == 0x16)
                  v162 = "ref.cast";
                else
                  v162 = "ref.test";
                if (!BYTE1(dword_1ECF4C7B0))
                  goto LABEL_232;
                v163 = *(_QWORD *)(a2 + 14960);
                LODWORD(v263) = 0;
                if (!WTF::LEBDecoder::decodeInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, (int *)&v263))goto LABEL_232;
                if ((v263 & 0x80000000) != 0)
                {
                  v237 = (int)v263 + 22;
                  if (v237 <= 9 && (((1 << v237) & 0x39F) == 0 || BYTE2(dword_1ECF4C7B0)))
                    goto LABEL_23;
                }
                else if (v263 < *(_DWORD *)(v163 + 100)
                       || *(_BYTE *)(a2 + 32)
                       && v263 >= *(_DWORD *)(a2 + 36)
                       && v263 < *(_DWORD *)(a2 + 40))
                {
                  goto LABEL_23;
                }
LABEL_232:
                JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't get heap type for ", (unint64_t *)a2, 25, v162, 9, &v263, *(float *)&a10);
                goto LABEL_233;
              default:
                v173 = v259;
                v230 = "invalid extended GC op ";
                v231 = (unint64_t *)a2;
                v232 = 24;
                goto LABEL_192;
            }
          }
          v84 = "can't parse extended GC opcode";
          v85 = (unint64_t *)a2;
          v86 = 31;
        }
        else
        {
          v84 = "Wasm GC is not enabled";
          v85 = (unint64_t *)a2;
          v86 = 23;
        }
LABEL_307:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v84, v85, v86, &v263, *(float *)&a10);
LABEL_233:
        v238 = v263;
LABEL_234:
        *(_QWORD *)a1 = v238;
        v74 = 1;
LABEL_38:
        a1[8] = v74;
        return;
      case 0xFC:
        LODWORD(v259) = 0;
        if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v259))
        {
          v173 = v259;
          switch((int)v259)
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
              goto LABEL_23;
            case 8:
              JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseMemoryInitImmediates((uint64_t)&v263, (unint64_t *)a2, &v261, v179, *(float *)&a10);
              goto LABEL_48;
            case 9:
              JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseDataSegmentIndex(&v263, (unint64_t *)a2, (unsigned int *)&v261, v179, *(float *)&a10);
              goto LABEL_48;
            case 10:
              JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseMemoryCopyImmediates((uint64_t)&v263, (unint64_t *)a2, v179, *(float *)&a10);
              goto LABEL_48;
            case 11:
              JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseMemoryFillImmediate((uint64_t)&v263, (unint64_t *)a2, v179, *(float *)&a10);
              goto LABEL_48;
            case 12:
              JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseTableInitImmediates((uint64_t)&v263, (unint64_t *)a2, &v261, v179, *(float *)&a10);
              goto LABEL_48;
            case 13:
              JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseElementIndex((uint64_t)&v263, (unint64_t *)a2, (unsigned int *)&v261, v179, *(float *)&a10);
              goto LABEL_48;
            case 14:
              JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseTableCopyImmediates(&v263, (unint64_t *)a2, &v261, v179, *(float *)&a10);
              goto LABEL_48;
            case 15:
            case 16:
            case 17:
              JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseTableIndex((uint64_t)&v263, (unint64_t *)a2, (unsigned int *)&v261, v179, *(float *)&a10);
              goto LABEL_48;
            default:
              v230 = "invalid extended 0xfc op ";
              goto LABEL_191;
          }
        }
        v84 = "can't parse extended 0xfc opcode";
        goto LABEL_472;
      case 0xFD:
        if (!HIBYTE(dword_1ECF4C7B0))
        {
          v84 = "wasm-simd is not enabled";
          goto LABEL_477;
        }
        LODWORD(v261) = 0;
        if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v261))
        {
          v173 = v261;
          switch((int)v261)
          {
            case 0:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 40;
              goto LABEL_452;
            case 1:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 50;
              goto LABEL_452;
            case 2:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 14;
              goto LABEL_452;
            case 3:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 13;
              goto LABEL_452;
            case 4:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 61;
              goto LABEL_452;
            case 5:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 27;
              goto LABEL_452;
            case 6:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 37;
              goto LABEL_452;
            case 7:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 34;
              goto LABEL_452;
            case 8:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 56;
              goto LABEL_452;
            case 9:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 35;
              goto LABEL_452;
            case 10:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 70;
              goto LABEL_452;
            case 11:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 7;
              goto LABEL_452;
            case 12:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 19;
              goto LABEL_452;
            case 13:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 41;
              goto LABEL_294;
            case 14:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 52;
              goto LABEL_294;
            case 15:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 12;
              goto LABEL_294;
            case 16:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 12;
              goto LABEL_298;
            case 17:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 12;
              goto LABEL_302;
            case 18:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 12;
              goto LABEL_291;
            case 19:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 12;
              goto LABEL_275;
            case 20:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 12;
              goto LABEL_277;
            case 21:
            case 22:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 65;
              goto LABEL_294;
            case 23:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 66;
              goto LABEL_294;
            case 24:
            case 25:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 65;
              goto LABEL_298;
            case 26:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 66;
              goto LABEL_298;
            case 27:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 65;
              goto LABEL_302;
            case 28:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 66;
              goto LABEL_302;
            case 29:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 65;
              goto LABEL_291;
            case 30:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 66;
              goto LABEL_291;
            case 31:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 65;
              goto LABEL_275;
            case 32:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 66;
              goto LABEL_275;
            case 33:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 65;
              goto LABEL_277;
            case 34:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 66;
              goto LABEL_277;
            case 35:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 33;
              goto LABEL_294;
            case 36:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 22;
              goto LABEL_294;
            case 37:
            case 38:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 30;
              goto LABEL_294;
            case 39:
            case 40:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 4;
              goto LABEL_294;
            case 41:
            case 42:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 59;
              goto LABEL_294;
            case 43:
            case 44:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 15;
              goto LABEL_294;
            case 45:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 33;
              goto LABEL_298;
            case 46:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 22;
              goto LABEL_298;
            case 47:
            case 48:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 30;
              goto LABEL_298;
            case 49:
            case 50:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 4;
              goto LABEL_298;
            case 51:
            case 52:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 59;
              goto LABEL_298;
            case 53:
            case 54:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 15;
              goto LABEL_298;
            case 55:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 33;
              goto LABEL_302;
            case 56:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 22;
              goto LABEL_302;
            case 57:
            case 58:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 30;
              goto LABEL_302;
            case 59:
            case 60:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 4;
              goto LABEL_302;
            case 61:
            case 62:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 59;
              goto LABEL_302;
            case 63:
            case 64:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 15;
              goto LABEL_302;
            case 65:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 33;
              goto LABEL_275;
            case 66:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 22;
              goto LABEL_275;
            case 67:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 30;
              goto LABEL_275;
            case 68:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 4;
              goto LABEL_275;
            case 69:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 59;
              goto LABEL_275;
            case 70:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 15;
              goto LABEL_275;
            case 71:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 33;
              goto LABEL_277;
            case 72:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 22;
              goto LABEL_277;
            case 73:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 30;
              goto LABEL_277;
            case 74:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 4;
              goto LABEL_277;
            case 75:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 59;
              goto LABEL_277;
            case 76:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 15;
              goto LABEL_277;
            case 77:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 0;
              goto LABEL_452;
            case 78:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 6;
              goto LABEL_452;
            case 79:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 3;
              goto LABEL_452;
            case 80:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 60;
              goto LABEL_452;
            case 81:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 9;
              goto LABEL_452;
            case 82:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 72;
              goto LABEL_452;
            case 83:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 44;
              goto LABEL_452;
            case 84:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 16;
              goto LABEL_452;
            case 85:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 2;
              goto LABEL_452;
            case 86:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 46;
              goto LABEL_452;
            case 87:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 71;
              goto LABEL_452;
            case 88:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 8;
              goto LABEL_452;
            case 89:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 48;
              goto LABEL_452;
            case 90:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 25;
              goto LABEL_452;
            case 91:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 29;
              goto LABEL_452;
            case 92:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 64;
              goto LABEL_452;
            case 93:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 36;
LABEL_452:
              v243 = 0;
              goto LABEL_299;
            case 94:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 20;
              goto LABEL_277;
            case 95:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 38;
              goto LABEL_275;
            case 96:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 5;
              goto LABEL_294;
            case 97:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 75;
              goto LABEL_294;
            case 98:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 58;
              goto LABEL_294;
            case 99:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 57;
              goto LABEL_294;
            case 100:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 74;
              goto LABEL_294;
            case 101:
            case 102:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 39;
              goto LABEL_298;
            case 103:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 45;
              goto LABEL_275;
            case 104:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 55;
              goto LABEL_275;
            case 105:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 10;
              goto LABEL_275;
            case 106:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 49;
              goto LABEL_275;
            case 107:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 17;
              goto LABEL_294;
            case 108:
            case 109:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 68;
              goto LABEL_294;
            case 110:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 69;
              goto LABEL_294;
            case 111:
            case 112:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 1;
              goto LABEL_294;
            case 113:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 73;
              goto LABEL_294;
            case 114:
            case 115:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 42;
              goto LABEL_294;
            case 116:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 45;
              goto LABEL_277;
            case 117:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 55;
              goto LABEL_277;
            case 118:
            case 119:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 32;
              goto LABEL_294;
            case 120:
            case 121:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 43;
              goto LABEL_294;
            case 122:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 10;
              goto LABEL_277;
            case 123:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 31;
              goto LABEL_294;
            case 124:
            case 125:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 62;
              goto LABEL_294;
            case 126:
            case 127:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 62;
              goto LABEL_298;
            case 128:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 5;
              goto LABEL_298;
            case 129:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 75;
              goto LABEL_298;
            case 130:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 76;
              goto LABEL_298;
            case 131:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 57;
              goto LABEL_298;
            case 132:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 74;
              goto LABEL_298;
            case 133:
            case 134:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 39;
              goto LABEL_302;
            case 135:
            case 137:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 67;
              goto LABEL_298;
            case 136:
            case 138:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 28;
              goto LABEL_298;
            case 139:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 17;
              goto LABEL_298;
            case 140:
            case 141:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 68;
              goto LABEL_298;
            case 142:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 69;
              goto LABEL_298;
            case 143:
            case 144:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 1;
              goto LABEL_298;
            case 145:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 73;
              goto LABEL_298;
            case 146:
            case 147:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 42;
              goto LABEL_298;
            case 148:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 49;
              goto LABEL_277;
            case 149:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 47;
              goto LABEL_298;
            case 150:
            case 151:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 32;
              goto LABEL_298;
            case 152:
            case 153:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 43;
              goto LABEL_298;
            case 155:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 31;
              goto LABEL_298;
            case 156:
            case 158:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 51;
              goto LABEL_298;
            case 157:
            case 159:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 11;
LABEL_298:
              v243 = 2;
              goto LABEL_299;
            case 160:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 5;
              goto LABEL_302;
            case 161:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 75;
              goto LABEL_302;
            case 163:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 57;
              goto LABEL_302;
            case 164:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 74;
              goto LABEL_302;
            case 167:
            case 169:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 67;
              goto LABEL_302;
            case 168:
            case 170:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 28;
              goto LABEL_302;
            case 171:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 17;
              goto LABEL_302;
            case 172:
            case 173:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 68;
              goto LABEL_302;
            case 174:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 69;
              goto LABEL_302;
            case 177:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 73;
              goto LABEL_302;
            case 181:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 47;
              goto LABEL_302;
            case 182:
            case 183:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 32;
              goto LABEL_302;
            case 184:
            case 185:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 43;
              goto LABEL_302;
            case 186:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 18;
              goto LABEL_302;
            case 188:
            case 190:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 51;
              goto LABEL_302;
            case 189:
            case 191:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 11;
              goto LABEL_302;
            case 192:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 5;
              goto LABEL_291;
            case 193:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 75;
              goto LABEL_291;
            case 195:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 57;
              goto LABEL_291;
            case 196:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 74;
              goto LABEL_291;
            case 199:
            case 201:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 67;
              goto LABEL_291;
            case 200:
            case 202:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 28;
              goto LABEL_291;
            case 203:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 17;
              goto LABEL_291;
            case 204:
            case 205:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 68;
              goto LABEL_291;
            case 206:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 69;
              goto LABEL_291;
            case 209:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 73;
              goto LABEL_291;
            case 213:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 47;
              goto LABEL_291;
            case 214:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 33;
              goto LABEL_291;
            case 215:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 22;
              goto LABEL_291;
            case 216:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 30;
              goto LABEL_291;
            case 217:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 4;
              goto LABEL_291;
            case 218:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 59;
              goto LABEL_291;
            case 219:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 15;
              goto LABEL_291;
            case 220:
            case 222:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 51;
              goto LABEL_291;
            case 221:
            case 223:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 11;
LABEL_291:
              v243 = 4;
              goto LABEL_299;
            case 224:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 5;
              goto LABEL_275;
            case 225:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 75;
              goto LABEL_275;
            case 227:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 23;
              goto LABEL_275;
            case 228:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 69;
              goto LABEL_275;
            case 229:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 73;
              goto LABEL_275;
            case 230:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 47;
              goto LABEL_275;
            case 231:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 53;
              goto LABEL_275;
            case 232:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 32;
              goto LABEL_275;
            case 233:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 43;
              goto LABEL_275;
            case 234:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 24;
              goto LABEL_275;
            case 235:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 26;
              goto LABEL_275;
            case 236:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 5;
              goto LABEL_277;
            case 237:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 75;
              goto LABEL_277;
            case 239:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 23;
              goto LABEL_277;
            case 240:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 69;
              goto LABEL_277;
            case 241:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 73;
              goto LABEL_277;
            case 242:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 47;
              goto LABEL_277;
            case 243:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 53;
              goto LABEL_277;
            case 244:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 32;
              goto LABEL_277;
            case 245:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 43;
              goto LABEL_277;
            case 246:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 24;
              goto LABEL_277;
            case 247:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 26;
              goto LABEL_277;
            case 248:
            case 249:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 63;
              goto LABEL_275;
            case 250:
            case 251:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 21;
              goto LABEL_302;
            case 252:
            case 253:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 63;
              goto LABEL_277;
            case 254:
            case 255:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 54;
LABEL_302:
              v243 = 3;
              goto LABEL_299;
            case 256:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 77;
LABEL_294:
              v243 = 1;
              goto LABEL_299;
            case 257:
            case 258:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 78;
              goto LABEL_275;
            case 259:
            case 260:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 78;
              goto LABEL_277;
            case 261:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 79;
              goto LABEL_275;
            case 262:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 80;
LABEL_275:
              v243 = 5;
              goto LABEL_299;
            case 263:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 79;
              goto LABEL_277;
            case 264:
              v174 = a1;
              v175 = (unint64_t *)a2;
              v176 = 80;
LABEL_277:
              v243 = 6;
LABEL_299:
              JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::simd<false,void>(v174, v175, v176, v243, v170, a10, v171, v172);
              break;
            default:
              v230 = "invalid extended simd op ";
LABEL_191:
              v231 = (unint64_t *)a2;
              v232 = 26;
              goto LABEL_192;
          }
          return;
        }
        v84 = "can't parse wasm extended opcode";
LABEL_472:
        v85 = (unint64_t *)a2;
        v86 = 33;
        goto LABEL_307;
      case 0xFE:
        LODWORD(v259) = 0;
        if (!WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v259))
        {
          v84 = "can't parse atomic extended opcode";
          v85 = (unint64_t *)a2;
          v86 = 35;
          goto LABEL_307;
        }
        v110 = v259;
        v111 = (v259 - 16) >= 0x3F && v259 >= 3;
        if (v111)
        {
          if ((_DWORD)v259 == 3)
          {
            v239 = *(_QWORD *)a2;
            if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
            {
              v84 = "can't get flags";
              v85 = (unint64_t *)a2;
              v86 = 16;
              goto LABEL_307;
            }
            *(_QWORD *)a2 = v239 + 1;
            v240 = *(_QWORD *)(a2 + 8);
            if (!*(_BYTE *)(v240 + v239))
              goto LABEL_23;
            JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char>("flags should be 0x0 but got ", (unint64_t *)a2, 29, *(unsigned __int8 *)(v240 + v239), &v263, *(float *)&a10);
          }
          else
          {
            v230 = "invalid extended atomic op ";
            v231 = (unint64_t *)a2;
            v232 = 28;
            v173 = v259;
LABEL_192:
            JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int>(v230, v231, v232, v173, &v263, *(float *)&a10);
          }
        }
        else
        {
          if (*(_DWORD *)(*(_QWORD *)(a2 + 14960) + 104) == -1)
          {
            v167 = "atomic instruction without memory";
            v168 = 34;
LABEL_474:
            v263 = (WTF *)v167;
            v264 = v168;
            JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))&v261, (uint64_t)&v263, v109, *(float *)&a10);
LABEL_475:
            v238 = (WTF *)v261;
            goto LABEL_234;
          }
          LODWORD(v261) = 0;
          v277 = 0;
          if (!WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v261))
          {
            v84 = "can't get load alignment";
LABEL_477:
            v85 = (unint64_t *)a2;
            v86 = 25;
            goto LABEL_307;
          }
          v112 = v261;
          if (v112 != JSC::Wasm::memoryLog2Alignment())
          {
            v245 = 1 << v261;
            v246 = JSC::Wasm::memoryLog2Alignment();
            JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, v245, " does not match against atomic op's natural alignment ", 55, 1 << v246, &v263, v247);
            *(_QWORD *)a1 = v263;
            a1[8] = 1;
            return;
          }
          if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v277))
            goto LABEL_23;
          v113 = "can't get first immediate for atomic ";
          v114 = " in unreachable context";
          v115 = (unint64_t *)a2;
          v116 = 38;
          v117 = v110;
          v118 = 24;
LABEL_304:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(v113, v115, v116, v117, v114, v118, &v263, v94);
        }
        goto LABEL_233;
      default:
        __break(0xC471u);
        JUMPOUT(0x198DC34B4);
    }
  }
  v12 = *(_DWORD *)(a2 + 15008);
  if (v12 != 1)
  {
LABEL_22:
    *(_DWORD *)(a2 + 15008) = v12 - 1;
LABEL_23:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v263, (_DWORD *)(a2 + 456), a3, a4, a5, a6, a7, a8);
  if (v270)
  {
    *(_QWORD *)&v261 = v262;
    *((_QWORD *)&v261 + 1) = 16;
    JSC::Wasm::OMGIRGenerator::addEndToUnreachable(&v259, *(_QWORD *)(a2 + 48), (uint64_t)&v263, (uint64_t)&v261, v16, v17, v18, v19);
    v27 = v260;
    if (v260)
    {
      v229 = v259;
      v259 = 0;
      *(_QWORD *)a1 = v229;
      a1[8] = 1;
      std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v259, v20, v21, v22, v23, v24, v25, v26);
    }
    v28 = v261;
    if (v262 != (_BYTE *)v261 && (_QWORD)v261)
    {
      *(_QWORD *)&v261 = 0;
      DWORD2(v261) = 0;
      WTF::fastFree(v28, v20, v21, v22, v23, v24, v25, v26);
    }
    if (v27)
      goto LABEL_8;
  }
  else
  {
    v31 = (WTF **)(a2 + 56);
    v30 = *(_QWORD *)(a2 + 56);
    v32 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v32 + 512) = *((_DWORD *)v271 + 2) + v272;
    *(_QWORD *)(v32 + 88) = v273;
    v270 = 1;
    v273 = 0;
    v33 = a2 + 72;
    if (v30 != a2 + 72)
    {
      if (v30)
      {
        *(_QWORD *)(a2 + 56) = 0;
        *(_DWORD *)(a2 + 64) = 0;
        WTF::fastFree(v30, v13, v14, v15, v16, v17, v18, v19);
      }
      *v31 = (WTF *)v33;
    }
    v34 = v266;
    if (v266 == (WTF *)v269)
    {
      v35 = v268;
      if (v268)
      {
        v64 = 24 * v268;
        do
        {
          v65 = *(_OWORD *)v34;
          *(_QWORD *)(v33 + 16) = *((_QWORD *)v34 + 2);
          *(_OWORD *)v33 = v65;
          v33 += 24;
          v34 = (WTF *)((char *)v34 + 24);
          v64 -= 24;
        }
        while (v64);
      }
      v36 = v267;
    }
    else
    {
      v266 = (WTF *)v269;
      *v31 = v34;
      v36 = v267;
      v267 = 16;
      v35 = v268;
    }
    v268 = 0;
    *(_DWORD *)(a2 + 64) = v36;
    *(_DWORD *)(a2 + 68) = v35;
    JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::unify((uint64_t)&v261, a2, v271, v15, v16, v17, v18, v19);
    if (BYTE8(v261)
      || (JSC::Wasm::OMGIRGenerator::endBlock(&v261, *(JSC::Wasm::OMGIRGenerator **)(a2 + 48), (uint64_t)&v263, a2 + 56, v40, v41, v42, v43), BYTE8(v261)))
    {
      v180 = v261;
      *(_QWORD *)&v261 = 0;
      *(_QWORD *)a1 = v180;
      a1[8] = 1;
      std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v261, v37, v38, v39, v40, v41, v42, v43);
LABEL_8:
      v29 = 0;
      goto LABEL_16;
    }
  }
  WTF::VectorBuffer<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::FastMalloc>::swap(a2 + 56, (uint64_t)&v263, *(unsigned int *)(a2 + 68), HIDWORD(v264));
  v44 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = HIDWORD(v264);
  HIDWORD(v264) = v44;
  v29 = 1;
LABEL_16:
  v45 = v274;
  if (v274)
  {
    v274 = 0;
    v275 = 0;
    WTF::fastFree((unint64_t)v45, v20, v21, v22, v23, v24, v25, v26);
  }
  v46 = v266;
  if (v269 != (_BYTE *)v266 && v266)
  {
    v266 = 0;
    v267 = 0;
    WTF::fastFree((unint64_t)v46, v20, v21, v22, v23, v24, v25, v26);
  }
  v47 = v263;
  if (v265 != (_BYTE *)v263)
  {
    if (v263)
    {
      v263 = 0;
      LODWORD(v264) = 0;
      WTF::fastFree((unint64_t)v47, v20, v21, v22, v23, v24, v25, v26);
    }
  }
  if (v29)
  {
LABEL_21:
    v12 = *(_DWORD *)(a2 + 15008);
    goto LABEL_22;
  }
}

#error "198DC543C: too big function (funcsize=0)"

__n128 JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry::ControlEntry(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __n128 result;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  int v19;

  v2 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 16;
  v3 = (__int128 *)*a2;
  if ((uint64_t *)*a2 == a2 + 2)
  {
    v4 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v4)
    {
      v14 = 24 * v4;
      do
      {
        v15 = *v3;
        *(_QWORD *)(v2 + 16) = *((_QWORD *)v3 + 2);
        *(_OWORD *)v2 = v15;
        v2 += 24;
        v3 = (__int128 *)((char *)v3 + 24);
        v14 -= 24;
      }
      while (v14);
    }
  }
  else
  {
    *a2 = (uint64_t)(a2 + 2);
    *(_QWORD *)a1 = v3;
    v18 = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 16;
    *(_DWORD *)(a1 + 8) = v18;
  }
  v5 = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 12) = v5;
  v6 = a1 + 416;
  *(_QWORD *)(a1 + 400) = a1 + 416;
  *(_QWORD *)(a1 + 408) = 16;
  v7 = (uint64_t *)a2[50];
  if (v7 == a2 + 52)
  {
    v8 = *((unsigned int *)a2 + 103);
    if ((_DWORD)v8)
    {
      v16 = 24 * v8;
      do
      {
        v17 = *(_OWORD *)v7;
        *(_QWORD *)(v6 + 16) = v7[2];
        *(_OWORD *)v6 = v17;
        v6 += 24;
        v7 += 3;
        v16 -= 24;
      }
      while (v16);
    }
  }
  else
  {
    a2[50] = (uint64_t)(a2 + 52);
    *(_QWORD *)(a1 + 400) = v7;
    v19 = *((_DWORD *)a2 + 102);
    *((_DWORD *)a2 + 102) = 16;
    *(_DWORD *)(a1 + 408) = v19;
  }
  v9 = *((_DWORD *)a2 + 103);
  *((_DWORD *)a2 + 103) = 0;
  *(_DWORD *)(a1 + 412) = v9;
  *(_DWORD *)(a1 + 800) = *((_DWORD *)a2 + 200);
  v10 = *(_OWORD *)(a2 + 101);
  v11 = *(_OWORD *)(a2 + 103);
  *(_QWORD *)(a1 + 840) = a2[105];
  *(_OWORD *)(a1 + 808) = v10;
  *(_OWORD *)(a1 + 824) = v11;
  *(_QWORD *)(a1 + 856) = 0;
  *(_QWORD *)(a1 + 848) = 0;
  v12 = a2[106];
  a2[106] = 0;
  *(_QWORD *)(a1 + 848) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 214);
  *((_DWORD *)a2 + 214) = 0;
  *(_DWORD *)(a1 + 856) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 215);
  *((_DWORD *)a2 + 215) = 0;
  *(_DWORD *)(a1 + 860) = v12;
  result = *((__n128 *)a2 + 54);
  *(_QWORD *)(a1 + 880) = a2[110];
  *(__n128 *)(a1 + 864) = result;
  return result;
}

void WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry::ControlEntry(*(_QWORD *)a1 + 888 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
}

unint64_t WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 888 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

void WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(unsigned int **)a1;
    v4 = (unsigned int *)(*(_QWORD *)a1 + 888 * *(unsigned int *)(a1 + 12));
    WTF::VectorBuffer<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry>::move(v3, v4, *(_QWORD *)a1, v5, v6, v7, v8, v9);
    if ((unsigned int *)(a1 + 16) != v3 && v3 != 0)
    {
      if (*(unsigned int **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

uint64_t WTF::VectorBuffer<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  unsigned int v3;

  v2 = result;
  if (a2 < 0x11)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 16;
  }
  else
  {
    if (a2 >= 0x49CD43)
    {
      __break(0xC471u);
      JUMPOUT(0x198DEE33CLL);
    }
    v3 = 888 * a2;
    result = WTF::fastMalloc((WTF *)(888 * a2));
    *(_DWORD *)(v2 + 8) = v3 / 0x378;
    *(_QWORD *)v2 = result;
  }
  return result;
}

void WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry>::move(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int *v10;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  unsigned int v34;
  unsigned int v35;

  if (a1 != a2)
  {
    v8 = a3;
    v10 = a1;
    do
    {
      *(_QWORD *)v8 = v8 + 16;
      *(_QWORD *)(v8 + 8) = 16;
      v12 = v10 + 4;
      v11 = *(_QWORD *)v10;
      if (*(unsigned int **)v10 == v10 + 4)
      {
        v13 = v10[3];
        if ((_DWORD)v13)
        {
          v26 = 0;
          v27 = 24 * v13;
          do
          {
            v28 = v8 + v26;
            v29 = *(_OWORD *)(v11 + v26);
            *(_QWORD *)(v28 + 32) = *(_QWORD *)(v11 + v26 + 16);
            *(_OWORD *)(v28 + 16) = v29;
            v26 += 24;
          }
          while (v27 != v26);
        }
      }
      else
      {
        *(_QWORD *)v10 = v12;
        *(_QWORD *)v8 = v11;
        v34 = v10[2];
        v10[2] = 16;
        *(_DWORD *)(v8 + 8) = v34;
      }
      v14 = v10[3];
      v10[3] = 0;
      *(_DWORD *)(v8 + 12) = v14;
      *(_QWORD *)(v8 + 400) = v8 + 416;
      *(_QWORD *)(v8 + 408) = 16;
      v15 = (unsigned int *)*((_QWORD *)v10 + 50);
      v16 = v10 + 104;
      if (v15 == v10 + 104)
      {
        v17 = v10[103];
        if ((_DWORD)v17)
        {
          v30 = 0;
          v31 = 24 * v17;
          do
          {
            v32 = v8 + v30;
            v33 = *(_OWORD *)&v15[v30 / 4];
            *(_QWORD *)(v32 + 432) = *(_QWORD *)&v15[v30 / 4 + 4];
            *(_OWORD *)(v32 + 416) = v33;
            v30 += 24;
          }
          while (v31 != v30);
        }
      }
      else
      {
        *((_QWORD *)v10 + 50) = v16;
        *(_QWORD *)(v8 + 400) = v15;
        v35 = v10[102];
        v10[102] = 16;
        *(_DWORD *)(v8 + 408) = v35;
      }
      v18 = v10[103];
      v10[103] = 0;
      *(_DWORD *)(v8 + 412) = v18;
      *(_DWORD *)(v8 + 800) = v10[200];
      v19 = *(_OWORD *)(v10 + 202);
      v20 = *(_OWORD *)(v10 + 206);
      *(_QWORD *)(v8 + 840) = *((_QWORD *)v10 + 105);
      *(_OWORD *)(v8 + 808) = v19;
      *(_OWORD *)(v8 + 824) = v20;
      *(_QWORD *)(v8 + 856) = 0;
      *(_QWORD *)(v8 + 848) = 0;
      v21 = *((_QWORD *)v10 + 106);
      *((_QWORD *)v10 + 106) = 0;
      *(_QWORD *)(v8 + 848) = v21;
      LODWORD(v21) = v10[214];
      v10[214] = 0;
      *(_DWORD *)(v8 + 856) = v21;
      LODWORD(v21) = v10[215];
      v10[215] = 0;
      *(_DWORD *)(v8 + 860) = v21;
      v22 = *((_OWORD *)v10 + 54);
      *(_QWORD *)(v8 + 880) = *((_QWORD *)v10 + 110);
      *(_OWORD *)(v8 + 864) = v22;
      v23 = *((_QWORD *)v10 + 106);
      if (v23)
      {
        *((_QWORD *)v10 + 106) = 0;
        v10[214] = 0;
        WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
      }
      v24 = *((_QWORD *)v10 + 50);
      if (v16 != (unsigned int *)v24 && v24)
      {
        *((_QWORD *)v10 + 50) = 0;
        v10[102] = 0;
        WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
      }
      v25 = *(_QWORD *)v10;
      if (v12 != *(unsigned int **)v10)
      {
        if (v25)
        {
          *(_QWORD *)v10 = 0;
          v10[2] = 0;
          WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      v8 += 888;
      v10 += 222;
    }
    while (v10 != a2);
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseExceptionIndex(uint64_t a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  void (**v19)(WTF::StringPrintStream *__hidden);
  unint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];
  void (**v23)(WTF::StringPrintStream *__hidden);
  unsigned int v24;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 <= *a2)
    goto LABEL_16;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_16;
    LOBYTE(v17) = v16 + v9;
    *a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v24 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_16:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse exception index", a2, 28, v22, a5);
    v19 = (void (**)(WTF::StringPrintStream *__hidden))v22[0];
    goto LABEL_14;
  }
  v18 = *(unsigned int *)(a2[1870] + 84) + (unint64_t)*(unsigned int *)(a2[1870] + 68);
  if (v18 <= v11)
  {
    v22[0] = "exception index ";
    v22[1] = 17;
    v21[0] = " is invalid, limit is ";
    v21[1] = 23;
    v20 = v18;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v23, (uint64_t)v22, &v24, (uint64_t)v21, &v20, a4, a5);
    v19 = v23;
LABEL_14:
    *(_QWORD *)a1 = v19;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v11;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v33;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  int v40;

  v8 = a2[3];
  if (!(_DWORD)v8)
    goto LABEL_28;
  v10 = v8 - 1;
  v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)a2 + 888 * v10;
  v13 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 16;
  v14 = *(__int128 **)v12;
  if (*(_QWORD *)v12 == v12 + 16)
  {
    v15 = *(unsigned int *)(v12 + 12);
    if ((_DWORD)v15)
    {
      v35 = 24 * v15;
      do
      {
        v36 = *v14;
        *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v13 = v36;
        v13 += 24;
        v14 = (__int128 *)((char *)v14 + 24);
        v35 -= 24;
      }
      while (v35);
    }
  }
  else
  {
    *(_QWORD *)v12 = v12 + 16;
    *(_QWORD *)a1 = v14;
    v39 = *(_DWORD *)(v12 + 8);
    *(_DWORD *)(v12 + 8) = 16;
    *(_DWORD *)(a1 + 8) = v39;
    LODWORD(v15) = *(_DWORD *)(v12 + 12);
  }
  *(_DWORD *)(v12 + 12) = 0;
  *(_DWORD *)(a1 + 12) = v15;
  v16 = v11 + 888 * v10;
  v17 = a1 + 416;
  *(_QWORD *)(a1 + 400) = a1 + 416;
  *(_QWORD *)(a1 + 408) = 16;
  v18 = *(__int128 **)(v16 + 400);
  if (v18 == (__int128 *)(v16 + 416))
  {
    v19 = *(unsigned int *)(v11 + 888 * v10 + 412);
    if ((_DWORD)v19)
    {
      v37 = 24 * v19;
      do
      {
        v38 = *v18;
        *(_QWORD *)(v17 + 16) = *((_QWORD *)v18 + 2);
        *(_OWORD *)v17 = v38;
        v17 += 24;
        v18 = (__int128 *)((char *)v18 + 24);
        v37 -= 24;
      }
      while (v37);
    }
  }
  else
  {
    *(_QWORD *)(v16 + 400) = v16 + 416;
    *(_QWORD *)(a1 + 400) = v18;
    v19 = v11 + 888 * v10;
    v40 = *(_DWORD *)(v19 + 408);
    *(_DWORD *)(v19 + 408) = 16;
    *(_DWORD *)(a1 + 408) = v40;
    LODWORD(v19) = *(_DWORD *)(v19 + 412);
  }
  v20 = v11 + 888 * v10;
  *(_DWORD *)(v20 + 412) = 0;
  *(_DWORD *)(a1 + 412) = v19;
  *(_DWORD *)(a1 + 800) = *(_DWORD *)(v20 + 800);
  v21 = *(_OWORD *)(v20 + 808);
  v22 = *(_OWORD *)(v20 + 824);
  *(_QWORD *)(a1 + 840) = *(_QWORD *)(v20 + 840);
  *(_OWORD *)(a1 + 808) = v21;
  *(_OWORD *)(a1 + 824) = v22;
  v23 = *(_QWORD *)(v20 + 848);
  *(_QWORD *)(v20 + 848) = 0;
  *(_QWORD *)(a1 + 848) = v23;
  LODWORD(v23) = *(_DWORD *)(v20 + 856);
  *(_DWORD *)(v20 + 856) = 0;
  *(_DWORD *)(a1 + 856) = v23;
  LODWORD(v23) = *(_DWORD *)(v20 + 860);
  *(_DWORD *)(v20 + 860) = 0;
  *(_DWORD *)(a1 + 860) = v23;
  v24 = *(_OWORD *)(v20 + 864);
  *(_QWORD *)(a1 + 880) = *(_QWORD *)(v20 + 880);
  *(_OWORD *)(a1 + 864) = v24;
  v25 = a2[3];
  if (!(_DWORD)v25)
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x198DEE8E0);
  }
  v26 = v25 - 1;
  v27 = *(_QWORD *)a2;
  v28 = *(_QWORD *)a2 + 888 * (v25 - 1);
  v29 = *(_QWORD *)(v28 + 848);
  if (v29)
  {
    *(_QWORD *)(v28 + 848) = 0;
    *(_DWORD *)(v27 + 888 * v26 + 856) = 0;
    WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
  }
  v30 = v27 + 888 * v26;
  v31 = *(_QWORD *)(v30 + 400);
  if (v30 + 416 != v31 && v31 != 0)
  {
    *(_QWORD *)(v30 + 400) = 0;
    *(_DWORD *)(v27 + 888 * v26 + 408) = 0;
    WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
  }
  v33 = *(_QWORD *)v28;
  if (v28 + 16 != *(_QWORD *)v28 && v33 != 0)
  {
    *(_QWORD *)v28 = 0;
    *(_DWORD *)(v28 + 8) = 0;
    WTF::fastFree(v33, a2, a3, a4, a5, a6, a7, a8);
  }
  a2[3] = v26;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::unify(uint64_t a1, uint64_t a2, JSC::Wasm::FunctionSignature *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  double v16;
  float v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  WTF::StringImpl *v40;
  const char *v41;
  uint64_t v42;
  void (**v43)(WTF::StringPrintStream *__hidden);

  v11 = *((_DWORD *)a3 + 3);
  if (*(_DWORD *)(a2 + 68) == v11)
  {
    if (v11)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while ((JSC::Wasm::isSubtype(*(_QWORD *)(*(_QWORD *)(a2 + 56) + v12), *(_QWORD *)(*(_QWORD *)(a2 + 56) + v12 + 8), *(_QWORD *)(*(_QWORD *)a3 + v13), *(_QWORD *)(*(_QWORD *)a3 + v13 + 8), a5, a6, a7, a8) & 1) != 0)
      {
        ++v14;
        v13 += 16;
        v12 += 24;
        if (v14 >= *((unsigned int *)a3 + 3))
          goto LABEL_3;
      }
      v41 = "control flow returns with unexpected type. ";
      v42 = 44;
      v39 = *(_OWORD *)(*(_QWORD *)(a2 + 56) + v12);
      v36 = " is not a ";
      v37 = 11;
      v34 = *(_OWORD *)(*(_QWORD *)a3 + v13);
      JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(&v43, a2, (uint64_t)&v41, (JSC::Wasm::Type *)&v39, (uint64_t)&v36, (JSC::Wasm::Type *)&v34, *(double *)&v34, v15);
      *(_QWORD *)a1 = v43;
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
LABEL_3:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 8) = 0;
    }
  }
  else
  {
    v41 = " block with type: ";
    v42 = 19;
    JSC::Wasm::FunctionSignature::toString(a3, (uint64_t *)&v40);
    *(_QWORD *)&v39 = " returns: ";
    *((_QWORD *)&v39 + 1) = 11;
    v38 = *((_DWORD *)a3 + 3);
    v36 = " but stack has: ";
    v37 = 17;
    v35 = *(unsigned int *)(a2 + 68);
    *(_QWORD *)&v34 = " values";
    *((_QWORD *)&v34 + 1) = 8;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>(&v43, (uint64_t)&v41, (WTF::PrintStream *)&v40, (uint64_t)&v39, &v38, (uint64_t)&v36, &v35, (uint64_t)&v34, v16, v17);
    *(_QWORD *)a1 = v43;
    *(_BYTE *)(a1 + 8) = 1;
    v25 = v40;
    v40 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
      }
      else
      {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseBlockSignatureAndNotifySIMDUseIfNeeded(_BYTE *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  _BOOL4 v18;
  float v20;
  unint64_t v21;
  unint64_t v22;
  char *String;
  uint64_t v24;
  float v25;
  char *v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  unint64_t v31;

  v6 = a2[1870];
  v7 = *a2;
  v8 = a2[2];
  if (v7 >= v8 || (v9 = *(char *)(a2[1] + v7), (v9 & 0x80000000) != 0))
  {
LABEL_26:
    v31 = 0;
    if (WTF::LEBDecoder::decodeInt64(a2[1], v8, (uint64_t *)a2, (uint64_t *)&v31))
    {
      if ((v31 & 0x8000000000000000) != 0)
      {
        v26 = "Block-like instruction signature index is negative";
        v27 = a2;
        v28 = 51;
      }
      else
      {
        v21 = *(unsigned int *)(v6 + 100);
        if (v31 >= v21)
        {
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,long long,WTF::ASCIILiteral,unsigned int>("Block-like instruction signature index is out of bounds. Index: ", a2, 65, v31, " type index space: ", 20, v21, &v29, v20);
LABEL_44:
          v16 = 1;
          goto LABEL_31;
        }
        v22 = JSC::Wasm::TypeDefinition::expand(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 8 * v31));
        v16 = *(_DWORD *)(v22 + 32);
        if (!v16)
        {
          *a3 = v22 + 8;
          LOBYTE(v29) = 0;
LABEL_31:
          v30 = v16;
          goto LABEL_8;
        }
        v26 = "Block-like instruction signature index does not refer to a function type definition";
        v27 = a2;
        v28 = 84;
      }
    }
    else
    {
      v26 = "Block-like instruction doesn't return value type but can't decode type section index";
      v27 = a2;
      v28 = 85;
    }
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v26, v27, v28, &v29, v20);
    goto LABEL_44;
  }
  v10 = v9 | (v9 >> 6 << 7);
  v11 = (char)(v9 | ((v9 >> 6) << 7));
  if ((JSC::Wasm::isValidTypeKind<signed char>(v11) & 1) == 0)
  {
    v8 = a2[2];
    goto LABEL_26;
  }
  if (!BYTE1(dword_1ECF4C7B0))
    goto LABEL_5;
  v17 = (char)v10 + 22;
  if (v17 <= 9)
  {
    if (((1 << v17) & 0x39F) == 0)
    {
LABEL_20:
      JSC::Wasm::ParserBase::parseReftypeSignature((uint64_t)a2, v6, a3, (uint64_t)&v29, v12);
      v16 = v30;
      goto LABEL_8;
    }
    v18 = BYTE2(dword_1ECF4C7B0) != 0;
  }
  else
  {
    v18 = 0;
  }
  if ((v10 + 29) < 2u || v18)
    goto LABEL_20;
LABEL_5:
  v13 = v10 - 192;
  if (v13 > 0x3F)
    goto LABEL_35;
  if (((1 << (v10 + 64)) & 0xF000000000000001) == 0)
  {
    if (((1 << (v10 + 64)) & 0x1800000000000) != 0)
    {
      if (!BYTE1(dword_1ECF4C7B0))
        goto LABEL_7;
    }
    else if (v13 == 59 && HIBYTE(dword_1ECF4C7B0))
    {
      goto LABEL_7;
    }
LABEL_35:
    String = (char *)JSC::Wasm::makeString(v11);
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>("result type of block: ", a2, 23, String, v24, " is not a value type or Void", 29, &v29, v25);
    goto LABEL_36;
  }
LABEL_7:
  v14 = a2[3];
  v15 = JSC::Wasm::linearizeType(v11);
  v16 = 0;
  *a3 = *(_QWORD *)(v14 + 8 * v15 + 32);
  ++*a2;
  LOBYTE(v29) = 0;
  v30 = 0;
LABEL_8:
  if (v16 || !*a3)
  {
    *a1 = 0;
    a1[8] = 0;
    if (!v16)
      return;
LABEL_36:
    *(_QWORD *)a1 = v29;
    a1[8] = 1;
    return;
  }
  if (HIBYTE(dword_1ECF4C7B0)
    && !HIBYTE(word_1ECF4C79E)
    && *(_DWORD *)(*(_QWORD *)(a2[6] + 16) + 132) <= *(_DWORD *)(a2[6] + 36))
  {
    __break(0xC471u);
  }
  else
  {
    *a1 = 0;
    a1[8] = 0;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseIndexForLocal(_BYTE *a1, uint64_t a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  void (**v17)(WTF::StringPrintStream *__hidden);
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  void (**v21)(WTF::StringPrintStream *__hidden);
  unsigned int v22;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)a2;
  v8 = v6 - *(_QWORD *)a2;
  if (v6 > *(_QWORD *)a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a2 = v7 + 1;
    v13 = v12 + v7;
    v14 = v7 + 2;
    while (1)
    {
      v15 = *(char *)(v13 + v9);
      v11 |= (v15 & 0x7F) << v10;
      if ((v15 & 0x80000000) == 0)
        break;
      if (v8 >= 5)
        v16 = 5;
      else
        v16 = v8;
      if (v16 - 1 == v9)
        goto LABEL_17;
      *(_QWORD *)a2 = v14 + v9;
      v10 += 7;
      if (v8 == ++v9)
      {
        __break(1u);
LABEL_14:
        v20[0] = "attempt to use unknown local ";
        v20[1] = 30;
        v19[0] = ", the number of locals is ";
        v19[1] = 27;
        v18 = v8;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v21, (uint64_t)v20, &v22, (uint64_t)v19, &v18, a4, a5);
        v17 = v21;
        goto LABEL_15;
      }
    }
    v22 = v11;
    if ((_DWORD)v9 != 4 || v15 < 0x10u)
    {
      v8 = *(unsigned int *)(a2 + 14692);
      if (v8 > v11)
      {
        *a3 = v11;
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      goto LABEL_14;
    }
  }
LABEL_17:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get index for local", (unint64_t *)a2, 26, v20, a5);
  v17 = (void (**)(WTF::StringPrintStream *__hidden))v20[0];
LABEL_15:
  *(_QWORD *)a1 = v17;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::checkLocalInitialized(uint64_t a1, uint64_t a2, unsigned int a3, double a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[2];
  void (**v10)(WTF::StringPrintStream *__hidden);
  unsigned int v11;

  v11 = a3;
  if (BYTE1(dword_1ECF4C7B0))
  {
    if (*(_DWORD *)(a2 + 14692) <= a3)
    {
      __break(0xC471u);
      return;
    }
    if (*(unsigned __int8 *)(*(_QWORD *)(a2 + 14680) + 16 * a3) == 228)
    {
      v5 = a2 + 14984;
      v6 = *(_QWORD *)(a2 + 14984);
      if (v6 >= 0)
        v5 = 2 * v6 + 8;
      if (((*(_QWORD *)(v5 + (((unint64_t)a3 >> 3) & 0x1FFFFFF8)) >> a3) & 1) == 0)
      {
        v9[0] = "non-defaultable function local ";
        v9[1] = 32;
        v8[0] = " is accessed before initialization";
        v8[1] = 35;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v10, (uint64_t)v9, &v11, (uint64_t)v8, a4, a5);
        *(_QWORD *)a1 = v10;
        *(_BYTE *)(a1 + 8) = 1;
        return;
      }
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::pushLocalInitialized(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned int v12;

  v12 = a2;
  if (BYTE1(dword_1ECF4C7B0))
  {
    if (*(_DWORD *)(result + 14692) <= a2)
    {
      __break(0xC471u);
    }
    else if (*(unsigned __int8 *)(*(_QWORD *)(result + 14680) + 16 * a2) == 228)
    {
      v2 = *(_QWORD *)(result + 14984);
      v3 = 2 * v2;
      v4 = v2 >= 0 ? 2 * v2 + 8 : result + 14984;
      v5 = (unint64_t)a2 >> 6;
      v6 = 1 << a2;
      if ((*(_QWORD *)(v4 + 8 * v5) & (1 << a2)) == 0)
      {
        v11 = (uint64_t *)(result + 14984);
        v7 = *(unsigned int *)(result + 14980);
        if ((_DWORD)v7 == *(_DWORD *)(result + 14976))
        {
          result = WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(result + 14968, (unint64_t)&v12);
          v2 = *v11;
          v3 = 2 * *v11;
          v5 = (unint64_t)v12 >> 6;
          v6 = 1 << v12;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(result + 14968) + 4 * v7) = a2;
          ++*(_DWORD *)(result + 14980);
        }
        v8 = v3 + 8;
        v9 = v2 < 0;
        v10 = v11;
        if (!v9)
          v10 = (uint64_t *)v8;
        v10[v5] |= v6;
      }
    }
  }
  return result;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseIndexForGlobal(_BYTE *a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  void (**v17)(WTF::StringPrintStream *__hidden);
  unint64_t v18;
  _QWORD v19[2];
  void (**v20)(WTF::StringPrintStream *__hidden);
  unsigned int v21;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 > *a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = a2[1];
    *a2 = v7 + 1;
    v13 = v12 + v7;
    v14 = v7 + 2;
    while (1)
    {
      v15 = *(char *)(v13 + v9);
      v11 |= (v15 & 0x7F) << v10;
      if ((v15 & 0x80000000) == 0)
        break;
      if (v8 >= 5)
        v16 = 5;
      else
        v16 = v8;
      if (v16 - 1 == v9)
        goto LABEL_17;
      *a2 = v14 + v9;
      v10 += 7;
      if (v8 == ++v9)
      {
        __break(1u);
LABEL_14:
        v19[0] = " of unknown global, limit is ";
        v19[1] = 30;
        v18 = v8;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral,unsigned long>(&v20, &v21, (uint64_t)v19, &v18);
        v17 = v20;
        goto LABEL_15;
      }
    }
    v21 = v11;
    if ((_DWORD)v9 != 4 || v15 < 0x10u)
    {
      v8 = *(unsigned int *)(a2[1870] + 220);
      if (v8 > v11)
      {
        *a3 = v11;
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      goto LABEL_14;
    }
  }
LABEL_17:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get global's index", a2, 25, v19, a5);
  v17 = (void (**)(WTF::StringPrintStream *__hidden))v19[0];
LABEL_15:
  *(_QWORD *)a1 = v17;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseFunctionIndex(_BYTE *a1, unint64_t *a2, unsigned int *a3, double a4, float a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v10 = a2[2];
  v11 = *a2;
  v12 = v10 > *a2;
  v13 = v10 - *a2;
  if (v12)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = a2[1];
    *a2 = v11 + 1;
    v18 = v17 + v11;
    v19 = v11 + 2;
    while (1)
    {
      v20 = *(char *)(v18 + v14);
      v16 |= (v20 & 0x7F) << v15;
      if ((v20 & 0x80000000) == 0)
        break;
      if (v13 >= 5)
        v21 = 5;
      else
        v21 = v13;
      if (v21 - 1 == v14)
        goto LABEL_18;
      *a2 = v19 + v14;
      v15 += 7;
      if (v13 == ++v14)
      {
        __break(1u);
LABEL_15:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>("function index ", a2, 16, v16, " exceeds function index space ", 31, a9, &v22, a5);
        goto LABEL_16;
      }
    }
    if ((_DWORD)v14 != 4 || *(unsigned __int8 *)(v18 + v14) < 0x10u)
    {
      a9 = *(unsigned int *)(a2[1870] + 52) + (unint64_t)*(unsigned int *)(a2[1870] + 36);
      if (a9 > v16)
      {
        *a3 = v16;
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      goto LABEL_15;
    }
  }
LABEL_18:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse function index", a2, 27, &v22, a5);
LABEL_16:
  *(_QWORD *)a1 = v22;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseTableInitImmediates(uint64_t a1, unint64_t *a2, _DWORD *a3, double a4, float a5)
{
  double v8;
  float v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  unsigned int v15;

  v15 = 0;
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseElementIndex((uint64_t)&v13, a2, &v15, a4, a5);
  if (v14
    || (v12 = 0,
        JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseTableIndex((uint64_t)&v13, a2, &v12, v8, v9),
        (v10 = v14) != 0))
  {
    *(_QWORD *)a1 = v13;
    v10 = 1;
  }
  else
  {
    v11 = v12;
    *a3 = v15;
    a3[1] = v11;
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 8) = v10;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseElementIndex(uint64_t a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  void (**v19)(WTF::StringPrintStream *__hidden);
  unsigned int v20;
  _QWORD v21[2];
  _QWORD v22[2];
  void (**v23)(WTF::StringPrintStream *__hidden);
  unsigned int v24;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 <= *a2)
    goto LABEL_16;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_16;
    LOBYTE(v17) = v16 + v9;
    *a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v24 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_16:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse element index", a2, 26, v22, a5);
    v19 = (void (**)(WTF::StringPrintStream *__hidden))v22[0];
    goto LABEL_14;
  }
  v18 = *(_DWORD *)(a2[1870] + 188);
  if (v11 >= v18)
  {
    v22[0] = "element index ";
    v22[1] = 15;
    v21[0] = " is invalid, limit is ";
    v21[1] = 23;
    v20 = v18;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v23, (uint64_t)v22, &v24, (uint64_t)v21, &v20, a4, a5);
    v19 = v23;
LABEL_14:
    *(_QWORD *)a1 = v19;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v11;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseTableIndex(uint64_t a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  void (**v19)(WTF::StringPrintStream *__hidden);
  unsigned int v20;
  _QWORD v21[2];
  _QWORD v22[2];
  void (**v23)(WTF::StringPrintStream *__hidden);
  unsigned int v24;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 <= *a2)
    goto LABEL_16;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_16;
    LOBYTE(v17) = v16 + v9;
    *a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v24 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_16:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse table index", a2, 24, v22, a5);
    v19 = (void (**)(WTF::StringPrintStream *__hidden))v22[0];
    goto LABEL_14;
  }
  v18 = *(_DWORD *)(a2[1870] + 204);
  if (v11 >= v18)
  {
    v22[0] = "table index ";
    v22[1] = 13;
    v21[0] = " is invalid, limit is ";
    v21[1] = 23;
    v20 = v18;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v23, (uint64_t)v22, &v24, (uint64_t)v21, &v20, a4, a5);
    v19 = v23;
LABEL_14:
    *(_QWORD *)a1 = v19;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v11;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseTableCopyImmediates(_BYTE *a1, unint64_t *a2, _DWORD *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  void (**v30)(WTF::StringPrintStream *__hidden);
  unint64_t *v31;
  char *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  unsigned int v41;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 > *a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = a2[1];
    v13 = 5;
    if (v8 < 5)
      v13 = v6 - *a2;
    v14 = v13 - 1;
    *a2 = v7 + 1;
    while (1)
    {
      v15 = *(char *)(v12 + v7 + v9);
      LODWORD(v16) = (v15 & 0x7F) << v10;
      v11 |= v16;
      if ((v15 & 0x80000000) == 0)
        break;
      if (v14 == v9)
        goto LABEL_27;
      v17 = v7 + v9 + 2;
      *a2 = v17;
      ++v9;
      v10 += 7;
      if (v8 == v9)
      {
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
    }
    v41 = v11;
    if ((_DWORD)v9 != 4 || v15 < 0x10u)
    {
      v10 = *(_DWORD *)(a2[1870] + 204);
      if (v11 >= v10)
      {
        v38 = "table index ";
        v39 = 13;
        v36 = " is invalid, limit is ";
        v37 = 23;
        v35 = v10;
        v28 = &v41;
        v29 = &v35;
      }
      else
      {
        if (v6 <= v7 + v9 + 1)
          goto LABEL_29;
        v17 = 0;
        v18 = 0;
        LODWORD(v14) = 0;
        v19 = ~v9 + v8;
        v20 = 5;
        if (v19 < 5)
          v20 = v19;
        v21 = v7 + v9;
        *a2 = v7 + v9 + 2;
        v22 = v7 - v6;
        v23 = v12 + v7;
        v24 = v20 - 1;
        v25 = v22 + v9;
        while (1)
        {
          LODWORD(v16) = *(char *)(v23 + v17 + v9 + 1);
          LODWORD(v14) = ((v16 & 0x7F) << v18) | v14;
          if ((v16 & 0x80000000) == 0)
            break;
          if (v24 == v17)
            goto LABEL_29;
          v26 = v21 + v17;
          v27 = v25 + v17++;
          v16 = v26 + 3;
          *a2 = v16;
          v18 += 7;
          if (v27 == -2)
            goto LABEL_18;
        }
LABEL_19:
        v35 = v14;
        if ((_DWORD)v17 == 4 && v16 >= 0x10u)
        {
LABEL_29:
          v31 = a2;
          v32 = "can't parse source table index";
          v33 = 31;
          goto LABEL_30;
        }
        if (v14 < v10)
        {
          *a3 = v14;
          a3[1] = v11;
          *a1 = 0;
          a1[8] = 0;
          return;
        }
        v38 = "table index ";
        v39 = 13;
        v36 = " is invalid, limit is ";
        v37 = 23;
        v34 = v10;
        v28 = &v35;
        v29 = &v34;
      }
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v40, (uint64_t)&v38, v28, (uint64_t)&v36, v29, a4, a5);
      v30 = v40;
      goto LABEL_25;
    }
  }
LABEL_27:
  v31 = a2;
  v32 = "can't parse destination table index";
  v33 = 36;
LABEL_30:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v32, v31, v33, &v38, a5);
  v30 = (void (**)(WTF::StringPrintStream *__hidden))v38;
LABEL_25:
  *(_QWORD *)a1 = v30;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseMemoryInitImmediates(uint64_t a1, unint64_t *a2, _QWORD *a3, double a4, float a5)
{
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  char *v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;

  v26 = 0;
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseDataSegmentIndex(&v24, a2, &v26, a4, a5);
  if (v25)
    goto LABEL_16;
  v9 = a2[2];
  v10 = *a2;
  v11 = v9 - *a2;
  if (v9 <= *a2)
    goto LABEL_18;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = a2[1];
  v16 = 5;
  if (v11 < 5)
    v16 = v11;
  v17 = v16 - 1;
  *a2 = v10 + 1;
  v18 = v15 + v10;
  v19 = v10 + 2;
  while (1)
  {
    v20 = *(char *)(v18 + v12);
    v14 |= (v20 & 0x7F) << v13;
    if ((v20 & 0x80000000) == 0)
      break;
    if (v17 == v12)
      goto LABEL_18;
    LOBYTE(v20) = v19 + v12;
    *a2 = v19 + v12;
    v13 += 7;
    if (v11 == ++v12)
    {
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v12 == 4 && v20 >= 0x10u)
  {
LABEL_18:
    v21 = "can't parse unused";
    v22 = a2;
    v23 = 19;
    goto LABEL_15;
  }
  if (v14)
  {
    v21 = "memory.init invalid unsued byte";
    v22 = a2;
    v23 = 32;
LABEL_15:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v21, v22, v23, &v24, v8);
LABEL_16:
    *(_QWORD *)a1 = v24;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v26;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseDataSegmentIndex(_BYTE *a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  void (**v20)(WTF::StringPrintStream *__hidden);
  unsigned int v21;
  _QWORD v22[2];
  _QWORD v23[2];
  void (**v24)(WTF::StringPrintStream *__hidden);
  unsigned int v25;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 <= *a2)
    goto LABEL_18;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_18;
    LOBYTE(v17) = v16 + v9;
    *a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v25 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_18:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse data segment index", a2, 31, v23, a5);
    v20 = (void (**)(WTF::StringPrintStream *__hidden))v23[0];
  }
  else
  {
    v18 = a2[1870];
    if (*(_BYTE *)(v18 + 268))
    {
      v19 = *(_DWORD *)(v18 + 264);
      if (v11 < v19)
      {
        *a3 = v11;
        *a1 = 0;
        a1[8] = 0;
        return;
      }
    }
    else
    {
      v19 = 0;
    }
    v23[0] = "data segment index ";
    v23[1] = 20;
    v22[0] = " is invalid, limit is ";
    v22[1] = 23;
    v21 = v19;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v24, (uint64_t)v23, &v25, (uint64_t)v22, &v21, a4, a5);
    v20 = v24;
  }
  *(_QWORD *)a1 = v20;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseAnnotatedSelectImmediates(_BYTE *a1, uint64_t a2, uint64_t a3, double a4, float a5)
{
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t *v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  WTF *v49;
  WTF *v50;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)a2;
  v9 = v7 - *(_QWORD *)a2;
  if (v7 <= *(_QWORD *)a2)
    goto LABEL_73;
  v11 = 0;
  v12 = 0;
  LODWORD(v13) = 0;
  v14 = *(_QWORD *)(a2 + 8);
  if (v9 >= 5)
    v9 = 5;
  v15 = v9 - 1;
  *(_QWORD *)a2 = v8 + 1;
  while (1)
  {
    LODWORD(v16) = *(char *)(v14 + v8 + v11);
    LODWORD(v13) = ((v16 & 0x7F) << v12) | v13;
    if ((v16 & 0x80000000) == 0)
      break;
    if (v15 == v11)
      goto LABEL_73;
    v16 = v8 + v11 + 2;
    *(_QWORD *)a2 = v16;
    ++v11;
    v12 += 7;
    if (!(v8 - v7 + v11))
    {
LABEL_8:
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v11 == 4 && v16 >= 0x10u)
  {
LABEL_73:
    v28 = "select can't parse the size of annotation vector";
    v29 = (unint64_t *)a2;
    v30 = 49;
    goto LABEL_24;
  }
  if ((_DWORD)v13 != 1)
  {
    v28 = "select invalid result arity for";
    v29 = (unint64_t *)a2;
    v30 = 32;
    goto LABEL_24;
  }
  if (v8 + v11 + 1 >= v7)
    goto LABEL_23;
  v17 = *(_QWORD *)(a2 + 14960);
  v18 = (char *)(v8 + v11);
  *(_QWORD *)a2 = v18 + 2;
  v19 = v18[v14 + 1];
  if ((v19 & 0x80000000) != 0)
    goto LABEL_23;
  v20 = v19 | (v19 >> 6 << 7);
  if (!JSC::Wasm::isValidTypeKind<signed char>((char)(v19 | ((v19 >> 6) << 7))))
    goto LABEL_23;
  if (!BYTE1(dword_1ECF4C7B0))
  {
    if ((v20 + 29) < 2u)
      goto LABEL_23;
    goto LABEL_17;
  }
  v8 = (char)v20;
  v26 = (char)v20 + 22;
  if (v26 <= 9 && (((1 << v26) & 0x39F) == 0 || BYTE2(dword_1ECF4C7B0)))
  {
    v27 = 227;
LABEL_28:
    if (BYTE1(dword_1ECF4C7B0))
      v31 = v8 == 0;
    else
      v31 = 1;
    if (!v31)
      goto LABEL_19;
    goto LABEL_23;
  }
  if ((v20 + 29) < 2u)
  {
    v32 = *(_QWORD *)(a2 + 16);
    v14 = *(_QWORD *)a2;
    v7 = v32 - *(_QWORD *)a2;
    if (v32 <= *(_QWORD *)a2)
      goto LABEL_23;
    v11 = 0;
    LODWORD(v8) = 0;
    v33 = *(_QWORD *)(a2 + 8);
    v34 = 5;
    if (v7 < 5)
      v34 = v7;
    v13 = v34 - 1;
    *(_QWORD *)a2 = v14 + 1;
    v35 = v33 + v14;
    v36 = v14 + 2;
    LODWORD(v14) = 7;
    while (1)
    {
      v37 = *(char *)(v35 + v11);
      LOBYTE(v16) = v37 & 0x7F;
      v8 = ((v37 & 0x7F) << (v14 - 7)) | v8;
      if ((v37 & 0x80000000) == 0)
        break;
      if (v13 == v11)
        goto LABEL_23;
      *(_QWORD *)a2 = v36 + v11;
      v14 = (v14 + 7);
      if (v7 == ++v11)
        goto LABEL_8;
    }
    if ((_DWORD)v11 == 4)
    {
      if ((v37 & 0x40) == 0)
      {
        if (*(unsigned __int8 *)(v35 + v11) > 7u)
          goto LABEL_23;
        goto LABEL_45;
      }
      if ((v37 & 0xF8) != 0x78)
        goto LABEL_23;
    }
    if (v14 <= 0x1F && (v37 & 0x40) != 0)
    {
      LODWORD(v8) = v8 | (-1 << v14);
      goto LABEL_66;
    }
LABEL_45:
    if ((v8 & 0x80000000) == 0)
    {
      if (v8 >= *(_DWORD *)(v17 + 100))
      {
        if (!*(_BYTE *)(a2 + 32))
          goto LABEL_23;
        v38 = *(_DWORD *)(a2 + 36);
        if (v8 < v38 || v8 >= *(_DWORD *)(a2 + 40))
          goto LABEL_23;
      }
      else if (!*(_BYTE *)(a2 + 32) || (v38 = *(_DWORD *)(a2 + 36), v8 < v38))
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v17 + 88) + 8 * v8);
        goto LABEL_18;
      }
      JSC::Wasm::TypeInformation::getPlaceholderProjection((JSC::Wasm::TypeInformation *)(v8 - v38), v21, v22, v23, v24, v25, (unsigned int **)&v50);
      v8 = (int64_t)v50;
      v50 = 0;
      if (v8)
      {
        do
        {
          v46 = __ldaxr((unsigned int *)v8);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, (unsigned int *)v8));
        if (!v47)
        {
          atomic_store(1u, (unsigned int *)v8);
          v49 = (WTF *)v8;
          WTF::fastFree(v8, v39, v40, v41, v42, v43, v44, v45);
          v8 = (int64_t)v49;
        }
      }
      goto LABEL_18;
    }
LABEL_66:
    v8 = (int)v8;
    v48 = (int)v8 + 22;
    if (v48 > 9 || ((1 << v48) & 0x39F) != 0 && !BYTE2(dword_1ECF4C7B0))
      goto LABEL_23;
    goto LABEL_18;
  }
LABEL_17:
  v8 = 0;
LABEL_18:
  v27 = v20;
  if (v20 - 252 < 4)
  {
LABEL_19:
    *(_DWORD *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v27;
    *(_QWORD *)(a3 + 16) = v8;
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  if (v20 - 239 < 2)
  {
    if (!BYTE1(dword_1ECF4C7B0))
      goto LABEL_19;
  }
  else if (v20 == 251)
  {
    if (HIBYTE(dword_1ECF4C7B0))
    {
      v27 = 251;
      goto LABEL_19;
    }
  }
  else if (v20 - 227 < 2)
  {
    goto LABEL_28;
  }
LABEL_23:
  v28 = "select can't parse annotations";
  v29 = (unint64_t *)a2;
  v30 = 31;
LABEL_24:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v28, v29, v30, &v50, a5);
  *(_QWORD *)a1 = v50;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseStructTypeIndex(_BYTE *a1, unint64_t *a2, _DWORD *a3, char *a4, uint64_t a5, double a6, float a7)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  JSC::Wasm::TypeDefinition *v21;
  int v22;
  void (**v23)(WTF::StringPrintStream *__hidden);
  unsigned int *v24;
  WTF *v25;
  uint64_t v26;
  unsigned int v27;
  _BOOL4 hasRecursiveReference;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t CachedUnrolling;
  uint64_t v36;
  uint64_t v37;
  const JSC::Wasm::Type *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  const JSC::Wasm::TypeDefinition *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::Wasm::TypeInformation *v49;
  void (**v50[2])(WTF::StringPrintStream *__hidden);
  const char *v51;
  uint64_t v52;
  void (**v53)(WTF::StringPrintStream *__hidden);
  unsigned int v54;
  _QWORD v55[2];

  v55[0] = a4;
  v55[1] = a5;
  v8 = a2[2];
  v9 = *a2;
  v10 = v8 - *a2;
  if (v8 <= *a2)
    goto LABEL_25;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = a2[1];
  v15 = 5;
  if (v10 < 5)
    v15 = v10;
  v16 = v15 - 1;
  *a2 = v9 + 1;
  v17 = v14 + v9;
  v18 = v9 + 2;
  while (1)
  {
    v19 = *(char *)(v17 + v11);
    v13 |= (v19 & 0x7F) << v12;
    if ((v19 & 0x80000000) == 0)
      break;
    if (v16 == v11)
      goto LABEL_25;
    LOBYTE(v19) = v18 + v11;
    *a2 = v18 + v11;
    v12 += 7;
    if (v10 == ++v11)
    {
      __break(1u);
      break;
    }
  }
  v54 = v13;
  if ((_DWORD)v11 == 4 && v19 >= 0x10u)
  {
LABEL_25:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't get type index for ", a2, 26, a4, a5, &v51, a7);
    v23 = (void (**)(WTF::StringPrintStream *__hidden))v51;
  }
  else
  {
    v20 = a2[1870];
    if (v13 >= *(_DWORD *)(v20 + 100))
    {
      v51 = " index ";
      v52 = 8;
      v50[0] = (void (**)(WTF::StringPrintStream *__hidden))" is out of bound";
      v50[1] = (void (**)(WTF::StringPrintStream *__hidden))17;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v53, (uint64_t)v55, (uint64_t)&v51, &v54, (uint64_t)v50, a6, a7);
      v23 = v53;
    }
    else
    {
      v21 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(v20 + 88) + 8 * v13);
      if (*((_DWORD *)v21 + 8) == 4)
      {
        v49 = *(JSC::Wasm::TypeInformation **)(*(_QWORD *)(v20 + 88) + 8 * v13);
        v24 = (unsigned int *)*((_QWORD *)v21 + 1);
        v25 = *(WTF **)v24;
        v21 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v24 + 8) + 8 * v24[2]);
        v26 = (uint64_t)a3;
        v27 = v13;
        hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v21);
        v13 = v27;
        a3 = (_DWORD *)v26;
        if (hasRecursiveReference)
        {
          CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v49, v29, v26, v30, v31, v32, v33, v34);
          if (v42)
          {
            v21 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
          }
          else
          {
            v21 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v21, v25, v36, v37, v38, v39, v40, v41);
            JSC::Wasm::TypeInformation::addCachedUnrolling(v49, v21, v43, v44, v45, v46, v47, v48);
          }
          a3 = (_DWORD *)v26;
          v13 = v27;
        }
      }
      v22 = *((_DWORD *)v21 + 8);
      if (v22 == 5)
        v22 = *(_DWORD *)(**((_QWORD **)v21 + 1) + 32);
      if (v22 == 1)
      {
        *a3 = v13;
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      v51 = ": invalid type index ";
      v52 = 22;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int>(v50, (uint64_t)v55, (uint64_t)&v51, &v54, a6, a7);
      v23 = v50[0];
    }
  }
  *(_QWORD *)a1 = v23;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseStructTypeIndexAndFieldIndex(uint64_t a1, unint64_t *a2, unsigned int *a3, char *a4, uint64_t a5, double a6, float a7)
{
  float v12;
  unint64_t v13;
  unsigned int v14;
  JSC::Wasm::TypeDefinition *v15;
  int v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int *v31;
  WTF *v32;
  unsigned int v33;
  _BOOL4 hasRecursiveReference;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t CachedUnrolling;
  uint64_t v43;
  uint64_t v44;
  const JSC::Wasm::Type *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  const JSC::Wasm::TypeDefinition *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  JSC::Wasm::TypeInformation *v56;
  uint64_t v57;
  char v58;
  unsigned int v59;

  v59 = 0;
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseStructTypeIndex(&v57, a2, &v59, a4, a5, a6, a7);
  if (v58)
  {
LABEL_22:
    *(_QWORD *)a1 = v57;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v13 = a2[1870];
  v14 = v59;
  if (*(_DWORD *)(v13 + 100) > v59)
  {
    v15 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(v13 + 88) + 8 * v59);
    if (*((_DWORD *)v15 + 8) == 4)
    {
      v56 = *(JSC::Wasm::TypeInformation **)(*(_QWORD *)(v13 + 88) + 8 * v59);
      v31 = (unsigned int *)*((_QWORD *)v15 + 1);
      v32 = *(WTF **)v31;
      v15 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v31 + 8) + 8 * v31[2]);
      v33 = v59;
      hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v15);
      v14 = v33;
      if (hasRecursiveReference)
      {
        CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v56, v35, v36, v37, v38, v39, v40, v41);
        if (v49)
        {
          v15 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
        }
        else
        {
          v15 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v15, v32, v43, v44, v45, v46, v47, v48);
          JSC::Wasm::TypeInformation::addCachedUnrolling(v56, v15, v50, v51, v52, v53, v54, v55);
        }
        v14 = v33;
      }
    }
    v16 = *((_DWORD *)v15 + 8);
    if (v16 == 5)
    {
      v15 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v15 + 1);
      v16 = *((_DWORD *)v15 + 8);
    }
    if (v16 == 1)
      v17 = (char *)v15 + 8;
    else
      v17 = 0;
    v18 = a2[2];
    v19 = *a2;
    v20 = v18 > *a2;
    v21 = v18 - *a2;
    if (!v20)
      goto LABEL_29;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = a2[1];
    v26 = 5;
    if (v21 < 5)
      v26 = v21;
    v27 = v26 - 1;
    *a2 = v19 + 1;
    v28 = v25 + v19;
    v29 = v19 + 2;
    while (1)
    {
      v30 = *(char *)(v28 + v22);
      v24 |= (v30 & 0x7F) << v23;
      if ((v30 & 0x80000000) == 0)
        break;
      if (v27 == v22)
        goto LABEL_29;
      LOBYTE(v30) = v29 + v22;
      *a2 = v29 + v22;
      v23 += 7;
      if (v21 == ++v22)
      {
        __break(1u);
        break;
      }
    }
    if ((_DWORD)v22 != 4 || v30 < 0x10u)
    {
      if (v24 < *((_DWORD *)v17 + 2))
      {
        *a3 = v14;
        a3[1] = v24;
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 8) = 0;
        return;
      }
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(a4, a2, a5, " field immediate ", 18, v24, " is out of bounds", 18, &v57, v12);
    }
    else
    {
LABEL_29:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't get type index for ", a2, 26, a4, a5, &v57, v12);
    }
    goto LABEL_22;
  }
  __break(0xC471u);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::simd<false,void>(_BYTE *a1, unint64_t *a2, int a3, int a4, double a5, double a6, double a7, uint8x8_t a8)
{
  unsigned __int8 v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  char *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t *v23;
  int v24;
  unint64_t v25;
  __int8 v26;
  __int8 v27;
  __int8 v28;
  __int8 v29;
  uint8x16_t v30;
  uint8x8_t v31;
  unint64_t v32;
  int8x8_t v33;
  uint32x2_t v34;
  __int8 v35;
  uint8x8_t v36;
  uint16x4_t v37;
  unint64_t v38;
  int8x8_t v39;
  uint32x2_t v40;
  __int8 v41;
  uint8x8_t v42;
  uint16x4_t v43;
  __int8 v44;
  __int8 v45;
  __int8 v46;
  __int8 v47;
  uint8x8_t v48;
  __int8 v49;
  uint8x16_t v50;
  uint64_t v51;
  char v52;
  int v53;

  if ((a3 - 77) <= 3u && word_1ECF4C7B4 == 0)
  {
    v16 = "relaxed simd instructions not supported";
    v17 = a2;
    v18 = 40;
LABEL_35:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v16, v17, v18, &v51, *(float *)&a6);
    goto LABEL_37;
  }
  switch(a3)
  {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 15:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 26:
    case 28:
    case 30:
    case 31:
    case 32:
    case 33:
    case 38:
    case 39:
    case 42:
    case 43:
    case 44:
    case 45:
    case 47:
    case 49:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 57:
    case 58:
    case 59:
    case 60:
    case 62:
    case 63:
    case 67:
    case 68:
    case 69:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
      goto LABEL_6;
    case 2:
    case 16:
    case 46:
    case 71:
      if (a3 > 45)
      {
        if (a3 == 46)
        {
          v13 = 4;
        }
        else
        {
          if (a3 != 71)
          {
LABEL_74:
            __break(0xC471u);
            JUMPOUT(0x198DF0A38);
          }
          v13 = 2;
        }
      }
      else if (a3 == 2)
      {
        v13 = 8;
      }
      else
      {
        v13 = a3;
        if (a3 != 16)
          goto LABEL_74;
      }
      JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::simd<false,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v51, a3, a2, &v53, a5, *(float *)&a6);
      if (v52)
        goto LABEL_37;
      v21 = (v13 - 2) >> 1;
      if (v21 > 7 || ((1 << v21) & 0x8B) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198DF0A58);
      }
      goto LABEL_49;
    case 7:
      v11 = 7;
      goto LABEL_9;
    case 8:
    case 25:
    case 29:
    case 48:
      if (a3 > 28)
      {
        if (a3 == 29)
        {
          v13 = 2;
        }
        else
        {
          if (a3 != 48)
            goto LABEL_73;
          v13 = 8;
        }
      }
      else
      {
        if (a3 != 8)
        {
          if (a3 == 25)
          {
            v13 = 4;
            goto LABEL_40;
          }
LABEL_73:
          __break(0xC471u);
          JUMPOUT(0x198DF0A18);
        }
        v13 = 16;
      }
LABEL_40:
      JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::simd<false,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v51, a3, a2, &v53, a5, *(float *)&a6);
      if (v52)
        goto LABEL_37;
      v20 = (v13 - 2) >> 1;
      if (v20 > 7 || ((1 << v20) & 0x8B) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198DF05ECLL);
      }
LABEL_49:
      v22 = *a2;
      if (*a2 >= a2[2])
      {
LABEL_72:
        v16 = "Could not parse the lane index immediate byte.";
        v17 = a2;
        v18 = 47;
        goto LABEL_35;
      }
      *a2 = v22 + 1;
      if (*(unsigned __int8 *)(a2[1] + v22) < v13)
      {
LABEL_6:
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      v23 = a2;
      v24 = v13;
      v14 = v13;
LABEL_62:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char>("Lane index immediate is too large, saw ", v23, 40, v24, ", expected an ImmLaneIdx", 25, v14, &v51, *(float *)&a6);
LABEL_37:
      *(_QWORD *)a1 = v51;
      v12 = 1;
LABEL_11:
      a1[8] = v12;
      return;
    case 13:
    case 14:
    case 27:
    case 34:
    case 35:
    case 36:
    case 37:
    case 40:
    case 50:
    case 56:
    case 61:
    case 64:
    case 70:
      v11 = a3;
LABEL_9:
      JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::simd<false,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v51, v11, a2, &v53, a5, *(float *)&a6);
      v12 = v52;
      if (v52)
        goto LABEL_37;
      *a1 = 0;
      goto LABEL_11;
    case 19:
      v15 = *a2 + 16;
      if (a2[2] < v15)
      {
        v16 = "can't parse 128-bit vector constant";
        v17 = a2;
        v18 = 36;
        goto LABEL_35;
      }
      *a2 = v15;
      goto LABEL_6;
    case 41:
      v19 = *a2 + 16;
      if (a2[2] < v19)
      {
        v16 = "can't parse 128-bit shuffle immediate";
        v17 = a2;
        v18 = 38;
        goto LABEL_35;
      }
      v25 = a2[1] + *a2;
      LODWORD(a5) = *(_DWORD *)v25;
      v26 = *(_BYTE *)(v25 + 4);
      LODWORD(a6) = *(_DWORD *)(v25 + 5);
      v27 = *(_BYTE *)(v25 + 9);
      v28 = *(_BYTE *)(v25 + 10);
      v29 = *(_BYTE *)(v25 + 11);
      a8.i32[0] = *(_DWORD *)(v25 + 12);
      *a2 = v19;
      v30.i64[0] = vmovl_u8(*(uint8x8_t *)&a5).u64[0];
      v31 = (uint8x8_t)vmovl_u8(*(uint8x8_t *)&a6).u64[0];
      v32 = vmovl_u8(a8).u64[0];
      switch(a4)
      {
        case 0:
          __break(0xC471u);
          JUMPOUT(0x198DF0AF8);
        case 1:
          v44 = v31.i8[6];
          v45 = v31.i8[4];
          v46 = v31.i8[2];
          v47 = v31.i8[0];
          v48.i8[0] = v30.i8[0];
          v48.i8[1] = v30.i8[4];
          v48.i8[2] = v30.i8[6];
          v48.i8[3] = v26;
          v48.i8[4] = v47;
          v48.i8[5] = v46;
          v48.i8[6] = v45;
          v48.i8[7] = v44;
          if ((vmaxv_u8(vcgt_u8(v48, (uint8x8_t)0x1F1F1F1F1F1F1F1FLL)) & 1) != 0
            || (v32 | v30.i8[2] | BYTE2(v32) | BYTE4(v32) | BYTE6(v32) | v29 | v27 | v28) >= 0x20u)
          {
            goto LABEL_70;
          }
          goto LABEL_6;
        case 2:
          v49 = v30.i8[0];
          v30.i8[0] = v30.i8[2];
          v30.i8[1] = v49;
          v30.i8[2] = v30.i8[4];
          v30.i8[3] = v30.i8[6];
          v30.i8[4] = v26;
          v30.i8[5] = v31.i8[0];
          v30.i8[6] = v31.i8[2];
          v30.i8[7] = v31.i8[4];
          v30.i8[8] = v31.i8[6];
          v30.i8[9] = v27;
          v30.i8[10] = v28;
          v30.i8[11] = v29;
          v30.i8[12] = v32;
          v30.i8[13] = BYTE2(v32);
          v30.i8[14] = BYTE4(v32);
          v30.i8[15] = BYTE6(v32);
          v50.i64[0] = 0xF0F0F0F0F0F0F0FLL;
          v50.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          if ((vmaxvq_u8(vcgtq_u8(v30, v50)) & 1) != 0)
            goto LABEL_70;
          goto LABEL_6;
        case 3:
        case 5:
          v33.i32[0] = v30.u16[1];
          v33.i32[1] = v30.u16[0];
          v34 = vcgt_u32((uint32x2_t)0x800000008, (uint32x2_t)vand_s8(v33, (int8x8_t)0xFF000000FFLL));
          v35 = v31.i8[0];
          v31.i8[0] = v26;
          v31.i8[1] = v35;
          v31.i8[3] = v31.i8[4];
          v31.i8[4] = v31.i8[6];
          v31.i8[5] = v27;
          v31.i8[6] = v28;
          v31.i8[7] = v29;
          v36 = vcgt_u8(v31, (uint8x8_t)0x707070707070707);
          v36.i8[0] = vmaxv_u8(v36);
          v37 = vcgt_u16((uint16x4_t)(v32 & 0xFF00FF00FF00FFLL), (uint16x4_t)0x7000700070007);
          v37.i16[0] = vmaxv_u16(v37);
          if ((~v36.i32[0] & ~v37.i32[0] & v34.i32[0] & v34.i32[1] & 1) == 0
            || (v30.i8[4] | v30.i8[6]) >= 8u)
          {
            goto LABEL_70;
          }
          goto LABEL_6;
        case 4:
        case 6:
          v39.i32[0] = v30.u16[1];
          v39.i32[1] = v30.u16[0];
          v40 = vcgt_u32((uint32x2_t)0x400000004, (uint32x2_t)vand_s8(v39, (int8x8_t)0xFF000000FFLL));
          v41 = v31.i8[0];
          v31.i8[0] = v26;
          v31.i8[1] = v41;
          v31.i8[3] = v31.i8[4];
          v31.i8[4] = v31.i8[6];
          v31.i8[5] = v27;
          v31.i8[6] = v28;
          v31.i8[7] = v29;
          v42 = vcgt_u8(v31, (uint8x8_t)0x303030303030303);
          v42.i8[0] = vmaxv_u8(v42);
          v43 = vcgt_u16((uint16x4_t)(v32 & 0xFF00FF00FF00FFLL), (uint16x4_t)0x3000300030003);
          v43.i16[0] = vmaxv_u16(v43);
          if ((~v42.i32[0] & ~v43.i32[0] & v40.i32[0] & v40.i32[1] & 1) != 0
            && (v30.i8[4] | v30.i8[6]) < 4u)
          {
            goto LABEL_6;
          }
LABEL_70:
          JSC::Wasm::ParserBase::fail<>(a2, &v51);
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198DF0AD8);
      }
      goto LABEL_37;
    case 65:
      v14 = 16;
      switch(a4)
      {
        case 0:
          __break(0xC471u);
          JUMPOUT(0x198DF04B8);
        case 1:
          goto LABEL_59;
        case 2:
          goto LABEL_58;
        case 3:
        case 5:
          goto LABEL_29;
        case 4:
        case 6:
          goto LABEL_52;
        default:
          __break(0xC471u);
          JUMPOUT(0x198DF0A78);
      }
    case 66:
      v14 = 16;
      switch(a4)
      {
        case 0:
          __break(0xC471u);
          JUMPOUT(0x198DF0AB8);
        case 1:
          break;
        case 2:
LABEL_58:
          v14 = 8;
          break;
        case 3:
        case 5:
LABEL_29:
          v14 = 4;
          break;
        case 4:
        case 6:
LABEL_52:
          v14 = 2;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198DF0A98);
      }
LABEL_59:
      v38 = *a2;
      if (*a2 >= a2[2])
        goto LABEL_72;
      *a2 = v38 + 1;
      if (*(unsigned __int8 *)(a2[1] + v38) < v14)
        goto LABEL_6;
      v23 = a2;
      v24 = v14;
      goto LABEL_62;
    default:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,JSC::SIMDLaneOperationDump>("invalid simd op ", a2, 17, a3, &v51, *(float *)&a6);
      goto LABEL_37;
  }
}

void WTF::VectorBuffer<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::FastMalloc>::swap(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;

  v6 = *(_QWORD *)a1;
  v8 = a2 + 16;
  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a1 != a1 + 16)
  {
    if (v7 != v8)
    {
      *(_QWORD *)a1 = v7;
      *(_QWORD *)a2 = v6;
      goto LABEL_10;
    }
    *(_QWORD *)a2 = v6;
    *(_QWORD *)a1 = a1 + 16;
    a3 = 0;
LABEL_24:
    WTF::VectorBuffer<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::FastMalloc>::swapInlineBuffer(a1, a2, a3, a4);
    goto LABEL_10;
  }
  if (v7 != v8)
  {
    *(_QWORD *)a1 = v7;
    *(_QWORD *)a2 = v8;
    a4 = 0;
    goto LABEL_24;
  }
  if (a1 != a2)
  {
    if (a4 >= a3)
      v9 = a3;
    else
      v9 = a4;
    if (v9)
    {
      v13 = 0;
      v14 = 1;
      do
      {
        v15 = 3 * v13;
        v16 = (__int128 *)(v6 + 8 * v15);
        v17 = (__int128 *)(v7 + 8 * v15);
        v18 = *((_QWORD *)v16 + 2);
        v19 = *v16;
        v20 = *((_QWORD *)v17 + 2);
        *v16 = *v17;
        *((_QWORD *)v16 + 2) = v20;
        *v17 = v19;
        *((_QWORD *)v17 + 2) = v18;
        v13 = v14;
      }
      while (v9 > v14++);
    }
    v10 = (__int128 *)(v6 + 24 * v9);
    v11 = (__int128 *)(v7 + 24 * v9);
    if (a3 > a4)
    {
      v22 = 24 * a3 - 24 * v9;
      v23 = v11;
      v24 = v10;
      do
      {
        v25 = *v24;
        *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
        *v23 = v25;
        v23 = (__int128 *)((char *)v23 + 24);
        v24 = (__int128 *)((char *)v24 + 24);
        v22 -= 24;
      }
      while (v22);
    }
    if (a4 > a3)
    {
      v26 = 24 * a4 - 24 * v9;
      do
      {
        v27 = *v11;
        *((_QWORD *)v10 + 2) = *((_QWORD *)v11 + 2);
        *v10 = v27;
        v10 = (__int128 *)((char *)v10 + 24);
        v11 = (__int128 *)((char *)v11 + 24);
        v26 -= 24;
      }
      while (v26);
    }
  }
LABEL_10:
  v12 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = v12;
}

__n128 WTF::VectorBuffer<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::FastMalloc>::swapInlineBuffer(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  __n128 *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  __n128 *v12;
  __n128 *v13;
  unint64_t v14;
  __n128 result;
  unint64_t v16;
  uint64_t v18;
  __n128 *v19;
  __n128 *v20;
  uint64_t v21;

  if (a1 != a2)
  {
    v4 = a1 + 16;
    v5 = a2 + 16;
    if (a4 >= a3)
      v6 = a3;
    else
      v6 = a4;
    if (v6)
    {
      v9 = 0;
      v10 = 1;
      do
      {
        v11 = 3 * v9;
        v12 = (__n128 *)(v4 + 8 * v11);
        v13 = (__n128 *)(v5 + 8 * v11);
        v14 = v12[1].n128_u64[0];
        result = *v12;
        v16 = v13[1].n128_u64[0];
        *v12 = *v13;
        v12[1].n128_u64[0] = v16;
        *v13 = result;
        v13[1].n128_u64[0] = v14;
        v9 = v10;
      }
      while (v6 > v10++);
    }
    v7 = (__n128 *)(v4 + 24 * v6);
    v8 = (__n128 *)(v5 + 24 * v6);
    if (a3 > a4)
    {
      v18 = 24 * a3 - 24 * v6;
      v19 = v8;
      v20 = v7;
      do
      {
        result = *v20;
        v19[1].n128_u64[0] = v20[1].n128_u64[0];
        *v19 = result;
        v19 = (__n128 *)((char *)v19 + 24);
        v20 = (__n128 *)((char *)v20 + 24);
        v18 -= 24;
      }
      while (v18);
    }
    if (a4 > a3)
    {
      v21 = 24 * a4 - 24 * v6;
      do
      {
        result = *v8;
        v7[1].n128_u64[0] = v8[1].n128_u64[0];
        *v7 = result;
        v7 = (__n128 *)((char *)v7 + 24);
        v8 = (__n128 *)((char *)v8 + 24);
        v21 -= 24;
      }
      while (v21);
    }
  }
  return result;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, uint64_t a5, JSC::Wasm::Type *a6, double a7, float a8)
{
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  double v25;
  float v26;
  float v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  double v39;
  float v40;
  WTF *v41;
  WTF::PrintStream *v42;
  float v43;
  double v44;
  const WTF::String *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  const WTF::String *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  float v59;
  const WTF::String *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  float v67;
  const WTF::String *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  float v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  int v124;
  char v125;
  void (**v126)(WTF::StringPrintStream *__hidden);
  WTF *v127;
  __int128 v128;
  _BYTE v129[128];
  void (**v130)(WTF::StringPrintStream *__hidden);
  WTF *v131;
  __int128 v132;
  _BYTE v133[128];
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v126 = off_1E3572250;
  v127 = (WTF *)v129;
  v128 = xmmword_199122F80;
  v129[0] = 0;
  v130 = off_1E3572250;
  v131 = (WTF *)v133;
  v132 = xmmword_199122F80;
  v133[0] = 0;
  if (*(_QWORD *)a3)
  {
    v13 = *(_QWORD *)(a3 + 8);
    v14 = v13 != 0;
    v15 = v13 - 1;
    if (!v14)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v15, (uint64_t)&v123, a8);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v123 = (WTF::StringImpl *)v16;
    v124 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v130, "StringView", &v123);
  if (v124 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v124])(&v122, &v123);
  v130[5]((WTF::StringPrintStream *)&v130);
  v130[5]((WTF::StringPrintStream *)&v130);
  v24 = v131;
  if (!v131)
  {
    v122 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v131, v132, (uint64_t *)&v122);
  v24 = v131;
  if (v131 != (WTF *)v133)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v121, a2, a4, v25, v26);
  v130 = off_1E3572250;
  v131 = (WTF *)v133;
  v132 = xmmword_199122F80;
  v133[0] = 0;
  if (*(_QWORD *)a5)
  {
    v28 = *(_QWORD *)(a5 + 8);
    v14 = v28 != 0;
    v29 = v28 - 1;
    if (!v14)
      v29 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v29, (uint64_t)&v123, v27);
  }
  else
  {
    v30 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v30 = 1;
    *(_QWORD *)(v30 + 8) = 0;
    *(_BYTE *)(v30 + 16) = 0;
    v123 = (WTF::StringImpl *)v30;
    v124 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v130, "StringView", &v123);
  if (v124 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v124])(&v120, &v123);
  v130[5]((WTF::StringPrintStream *)&v130);
  v130[5]((WTF::StringPrintStream *)&v130);
  v38 = v131;
  if (!v131)
  {
    v123 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v131, v132, (uint64_t *)&v123);
  v38 = v131;
  if (v131 != (WTF *)v133)
LABEL_24:
    WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v120, a2, a6, v39, v40);
  v41 = (WTF *)((uint64_t (*)(_QWORD))v126[4])(&v126);
  v42 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v41 + 32))(v41);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v130, v43);
  WTF::printExpectedCStringHelper(v42, "StringView", &v130);
  if ((_DWORD)v131 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v131])(&v125, &v130);
  v44 = (*(double (**)(WTF *))(*(_QWORD *)v41 + 40))(v41);
  WTF::printInternal(v41, (WTF::PrintStream *)&v122, v45, v46, v47, v48, v49, v50, v44, v51);
  WTF::printInternal(v41, (WTF::PrintStream *)&v121, v52, v53, v54, v55, v56, v57, v58, v59);
  WTF::printInternal(v41, (WTF::PrintStream *)&v123, v60, v61, v62, v63, v64, v65, v66, v67);
  WTF::printInternal(v41, (WTF::PrintStream *)&v120, v68, v69, v70, v71, v72, v73, v74, v75);
  v126[5]((WTF::StringPrintStream *)&v126);
  v83 = v120;
  v120 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
    {
      WTF::StringImpl::~StringImpl(v83, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v83 -= 2;
    }
  }
  v84 = v123;
  v123 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  v85 = v121;
  v121 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = v122;
  v122 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v127;
  if (v127)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v127, v128, (uint64_t *)&v130);
    v87 = v127;
    *a1 = v130;
    if (v87 == (WTF *)v129)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v87, v76, v77, v78, v79, v80, v81, v82);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative(uint64_t *a1, uint64_t a2, JSC::Wasm::Type *this, double a4, float a5)
{
  char v7;
  BOOL v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  int v18;
  uint64_t v19;
  WTF::PrintStream *v20;
  float v21;
  unint64_t v22;
  const char *v23;
  WTF::PrintStream *v24;
  JSC::Wasm::TypeDefinition *v25;
  int v26;
  uint64_t v27;
  WTF::PrintStream *v28;
  float v29;
  char *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::PrintStream *v36;
  uint64_t v37;
  WTF::PrintStream *v38;
  float v39;
  uint64_t v40;
  WTF::PrintStream *v41;
  float v42;
  unsigned int *v43;
  WTF *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t CachedUnrolling;
  uint64_t v53;
  uint64_t v54;
  const JSC::Wasm::Type *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  const JSC::Wasm::TypeDefinition *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  char v68;
  void (**v69)(WTF::StringPrintStream *__hidden);
  WTF *v70;
  __int128 v71;
  _BYTE v72[128];
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (BYTE1(dword_1ECF4C7B0))
    v7 = 29;
  else
    v7 = 17;
  if (BYTE1(dword_1ECF4C7B0))
    v8 = (v7 + *(_BYTE *)this) > 1u;
  else
    v8 = 1;
  if (v8)
  {
    v69 = off_1E3572250;
    v70 = (WTF *)v72;
    v71 = xmmword_199122F80;
    v72[0] = 0;
    JSC::Wasm::Type::dump((uint64_t)this, (WTF::PrintStream *)&v69);
    v69[5]((WTF::StringPrintStream *)&v69);
    v16 = v70;
    if (v70)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v70, v71, a1);
      v16 = v70;
      if (v70 == (WTF *)v72)
        return;
LABEL_45:
      WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
      return;
    }
LABEL_44:
    *a1 = 0;
    goto LABEL_45;
  }
  v69 = off_1E3572250;
  v70 = (WTF *)v72;
  v71 = xmmword_199122F80;
  v72[0] = 0;
  WTF::StringImpl::utf8ForCharacters("(ref ", 5uLL, (uint64_t)&v66, a5);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v69, "StringView", &v66);
  if (v67 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
  v69[5]((WTF::StringPrintStream *)&v69);
  v69[5]((WTF::StringPrintStream *)&v69);
  v18 = *(unsigned __int8 *)this;
  if ((v18 - 239) < 2 || v18 == 227)
  {
    v19 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
    v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
    WTF::StringImpl::utf8ForCharacters("null ", 5uLL, (uint64_t)&v66, v21);
    WTF::printExpectedCStringHelper(v20, "StringView", &v66);
    if (v67 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    v69[5]((WTF::StringPrintStream *)&v69);
  }
  v22 = *((_QWORD *)this + 1);
  if (v22 < 0xFFFFFFFFFFFFFFC1)
  {
    v25 = (JSC::Wasm::TypeDefinition *)v22;
    if (*(_DWORD *)(v22 + 32) == 4)
    {
      v43 = *(unsigned int **)(v22 + 8);
      v44 = *(WTF **)v43;
      v25 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v43 + 8) + 8 * v43[2]);
      if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v25))
      {
        CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v22, v45, v46, v47, v48, v49, v50, v51);
        if (v59)
        {
          v25 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
        }
        else
        {
          v25 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v25, v44, v53, v54, v55, v56, v57, v58);
          JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v22, v25, v60, v61, v62, v63, v64, v65);
        }
      }
    }
    v26 = *((_DWORD *)v25 + 8);
    if (v26 == 5)
      v26 = *(_DWORD *)(**((_QWORD **)v25 + 1) + 32);
    if (v26 == 2)
    {
      v27 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
      v28 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
      v30 = "<array:";
      v31 = 7;
    }
    else if (v26)
    {
      v27 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
      v28 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
      v30 = "<struct:";
      v31 = 8;
    }
    else
    {
      v27 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
      v28 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
      v30 = "<func:";
      v31 = 6;
    }
    WTF::StringImpl::utf8ForCharacters(v30, v31, (uint64_t)&v66, v29);
    WTF::printExpectedCStringHelper(v28, "StringView", &v66);
    if (v67 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
    v69[5]((WTF::StringPrintStream *)&v69);
    v32 = *(_QWORD *)(a2 + 14960);
    v33 = *(unsigned int *)(v32 + 100);
    if ((_DWORD)v33)
    {
      v34 = 0;
      v35 = *(_QWORD *)(v32 + 88);
      while (*(_QWORD *)(v35 + 8 * v34) != v22)
      {
        if (v33 == ++v34)
          goto LABEL_35;
      }
    }
    else
    {
LABEL_35:
      v34 = -1;
    }
    v36 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v69[4])(&v69);
    WTF::PrintStream::printf(v36, "%lu", v34);
    v69[5]((WTF::StringPrintStream *)&v69);
    v37 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
    v38 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 32))(v37);
    WTF::StringImpl::utf8ForCharacters(">", 1uLL, (uint64_t)&v66, v39);
    WTF::printExpectedCStringHelper(v38, "StringView", &v66);
    if (v67 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 40))(v37);
  }
  else
  {
    if ((v22 + 22) >= 0xAu)
    {
      __break(0xC471u);
      return;
    }
    v23 = off_1E35B6CB8[(char)(v22 + 22)];
    v24 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v69[4])(&v69);
    WTF::PrintStream::printf(v24, "%s", v23);
  }
  v69[5]((WTF::StringPrintStream *)&v69);
  v40 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
  v41 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 32))(v40);
  WTF::StringImpl::utf8ForCharacters(")", 1uLL, (uint64_t)&v66, v42);
  WTF::printExpectedCStringHelper(v41, "StringView", &v66);
  if (v67 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
  (*(void (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
  v69[5]((WTF::StringPrintStream *)&v69);
  v16 = v70;
  if (!v70)
    goto LABEL_44;
  WTF::fromUTF8Impl<false>((unint64_t)v70, v71, a1);
  v16 = v70;
  if (v70 != (WTF *)v72)
    goto LABEL_45;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::simd<false,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(_BYTE *a1, unsigned __int8 a2, unint64_t *a3, _DWORD *a4, double a5, float a6)
{
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (**v31)(WTF::StringPrintStream *__hidden);
  char *v32;
  unint64_t *v33;
  uint64_t v34;
  void (**v35[2])(WTF::StringPrintStream *__hidden);
  void (**v36)(WTF::StringPrintStream *__hidden);
  unsigned int v37;
  const char *v38;
  uint64_t v39;
  unsigned int v40;

  if (a2 <= 0x37u)
  {
    switch(a2)
    {
      case 0x19u:
      case 0x23u:
      case 0x2Eu:
        goto LABEL_10;
      case 0x1Au:
      case 0x1Cu:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x26u:
      case 0x27u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Fu:
      case 0x31u:
        goto LABEL_46;
      case 0x1Bu:
      case 0x1Du:
      case 0x24u:
      case 0x25u:
      case 0x32u:
        goto LABEL_13;
      case 0x22u:
LABEL_12:
        v7 = 0;
        v40 = 0;
        goto LABEL_16;
      case 0x28u:
LABEL_37:
        v7 = 4;
        goto LABEL_15;
      case 0x30u:
        goto LABEL_14;
      default:
        switch(a2)
        {
          case 2u:
            goto LABEL_14;
          case 7u:
            goto LABEL_37;
          case 8u:
          case 0x10u:
            goto LABEL_12;
          case 0xDu:
          case 0xEu:
            goto LABEL_13;
          default:
            goto LABEL_46;
        }
    }
  }
  if (a2 > 0x45u)
  {
    if (a2 - 70 >= 2)
      goto LABEL_46;
LABEL_13:
    v7 = 3;
    goto LABEL_15;
  }
  if (a2 == 56)
  {
LABEL_14:
    v7 = 1;
    goto LABEL_15;
  }
  if (a2 == 61)
    goto LABEL_13;
  if (a2 != 64)
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x198DF1BCCLL);
  }
LABEL_10:
  v7 = 2;
LABEL_15:
  v40 = v7;
LABEL_16:
  if (*(_DWORD *)(a3[1870] + 104) == -1)
  {
    v38 = "simd memory instructions need a memory defined in the module";
    v39 = 61;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(v35, (uint64_t)&v38, a5, a6);
    v31 = v35[0];
  }
  else
  {
    v8 = a3[2];
    v9 = *a3;
    v10 = v8 - *a3;
    if (v8 <= *a3)
      goto LABEL_42;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = a3[1];
    v15 = 5;
    if (v10 < 5)
      v15 = v8 - *a3;
    v16 = v15 - 1;
    *a3 = v9 + 1;
    v17 = v14 + v9;
    while (1)
    {
      v18 = *(char *)(v17 + v11);
      v13 |= (v18 & 0x7F) << v12;
      if ((v18 & 0x80000000) == 0)
        break;
      if (v16 == v11)
        goto LABEL_42;
      v19 = v9 + v11 + 2;
      *a3 = v19;
      ++v11;
      v12 += 7;
      if (v10 == v11)
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v37 = v13;
    if ((_DWORD)v11 == 4 && v18 >= 0x10u)
    {
LABEL_42:
      v32 = "can't get simd memory op alignment";
      v33 = a3;
      v34 = 35;
LABEL_45:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v32, v33, v34, &v38, a6);
      v31 = (void (**)(WTF::StringPrintStream *__hidden))v38;
    }
    else
    {
      if (v8 <= v9 + v11 + 1)
        goto LABEL_44;
      v17 = 0;
      v20 = 0;
      v21 = 0;
      *a4 = 0;
      v22 = ~v11 + v10;
      v23 = 5;
      if (v22 < 5)
        v23 = v22;
      v24 = v9 + v11;
      *a3 = v9 + v11 + 2;
      v25 = v9 - v8;
      v26 = v14 + v9;
      v27 = v23 - 1;
      v28 = v25 + v11;
      while (1)
      {
        LODWORD(v19) = *(char *)(v26 + v17 + v11 + 1);
        v21 |= (v19 & 0x7F) << v20;
        *a4 = v21;
        if ((v19 & 0x80000000) == 0)
          break;
        if (v27 == v17)
          goto LABEL_44;
        v29 = v24 + v17;
        v30 = v28 + v17++;
        v19 = v29 + 3;
        *a3 = v19;
        v20 += 7;
        if (v30 == -2)
          goto LABEL_33;
      }
LABEL_34:
      if ((_DWORD)v17 == 4 && v19 >= 0x10u)
      {
LABEL_44:
        v32 = "can't get simd memory op offset";
        v33 = a3;
        v34 = 32;
        goto LABEL_45;
      }
      if (v13 <= v7)
      {
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      v38 = "alignment: ";
      v39 = 12;
      v35[0] = (void (**)(WTF::StringPrintStream *__hidden))" can't be larger than max alignment for simd operation: ";
      v35[1] = (void (**)(WTF::StringPrintStream *__hidden))57;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v36, (uint64_t)&v38, &v37, (uint64_t)v35, &v40, a5, a6);
      v31 = v36;
    }
  }
  *(_QWORD *)a1 = v31;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::binaryCase(uint64_t a1, uint64_t a2, char a3, void (*a4)(const char **__return_ptr, _QWORD *, uint64_t, uint64_t, void (***)(WTF::StringPrintStream *__hidden this)), uint64_t a5, uint64_t a6, uint64_t a7, double a8, float a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, unsigned __int8 a13, uint64_t a14)
{
  unsigned int v16;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  int v47;
  char v48;
  char v49;
  _QWORD *v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  _QWORD *v59;
  void (**v60)(WTF::StringPrintStream *__hidden);
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  unint64_t *v78;
  uint64_t v79;
  const char *v80;
  unsigned int v81;
  const char *v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (**v89)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  char v92;
  __int128 v93;
  const char *v94;
  uint64_t v95;

  *(_QWORD *)&v93 = a6;
  *((_QWORD *)&v93 + 1) = a7;
  v92 = a3;
  v16 = *(_DWORD *)(a2 + 68);
  if (!v16)
  {
    v77 = "binary right";
    v78 = (unint64_t *)a2;
    v79 = 13;
LABEL_33:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v78, 26, v77, v79, &v94, a9);
    *(_QWORD *)a1 = v94;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v21 = *(_QWORD *)(a2 + 48);
  v22 = *(_QWORD *)(a2 + 56) + 24 * v16;
  v23 = *(_QWORD *)(v22 - 24);
  v86 = *(_QWORD *)(v22 - 8);
  v87 = *(_QWORD *)(v22 - 16);
  *(_DWORD *)(a2 + 68) = v16 - 1;
  v94 = "WasmFunctionParser.h:";
  LODWORD(v95) = 21;
  LODWORD(v89) = 522;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v94, (unsigned int *)&v89, (int **)&v91);
  v31 = v91;
  if (!v91)
    goto LABEL_52;
  v32 = *(_DWORD *)(v21 + 512);
  if (!v32)
  {
    __break(0xC471u);
    JUMPOUT(0x198DF2004);
  }
  *(_DWORD *)(v21 + 512) = v32 - 1;
  v91 = 0;
  if (*(_DWORD *)v31 == 2)
  {
    WTF::StringImpl::~StringImpl(v31, v24, v25, v26, v27, v28, v29, v30);
    WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
  }
  else
  {
    *(_DWORD *)v31 -= 2;
  }
  v33 = *(_DWORD *)(a2 + 68);
  if (!v33)
  {
    v77 = "binary left";
    v78 = (unint64_t *)a2;
    v79 = 12;
    goto LABEL_33;
  }
  v85 = a7;
  v88 = a1;
  v34 = *(_QWORD *)(a2 + 48);
  v35 = *(_QWORD *)(a2 + 56) + 24 * v33;
  v37 = *(_QWORD *)(v35 - 24);
  v36 = *(_QWORD *)(v35 - 16);
  v38 = *(_QWORD *)(v35 - 8);
  *(_DWORD *)(a2 + 68) = v33 - 1;
  v94 = "WasmFunctionParser.h:";
  LODWORD(v95) = 21;
  LODWORD(v89) = 523;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v94, (unsigned int *)&v89, (int **)&v90);
  v46 = v90;
  if (!v90)
  {
    __break(0xC471u);
    JUMPOUT(0x198DF200CLL);
  }
  v47 = *(_DWORD *)(v34 + 512);
  if (!v47)
  {
LABEL_52:
    __break(0xC471u);
    JUMPOUT(0x198DF1FFCLL);
  }
  *(_DWORD *)(v34 + 512) = v47 - 1;
  v90 = 0;
  if (*(_DWORD *)v46 == 2)
  {
    WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
    WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
  }
  else
  {
    *(_DWORD *)v46 -= 2;
  }
  if (a11 != v37)
    goto LABEL_41;
  if (a11 - 239 < 2 || a11 == 227)
  {
    if (a12 == v36)
      v48 = ((a11 + 29) < 0xEu) & (0x3001u >> (a11 + 29));
    else
      v48 = 0;
    if ((v48 & 1) == 0)
      goto LABEL_41;
  }
  else
  {
    if (a12 == v36)
      v81 = ((a11 + 29) < 0xEu) & (0x3001u >> (a11 + 29));
    else
      v81 = 1;
    if (v81 == 1)
    {
LABEL_41:
      v82 = " left value type mismatch";
      v83 = 26;
LABEL_48:
      v94 = v82;
      v95 = v83;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(&v89, (uint64_t)&v92, (uint64_t)&v94);
      *(_QWORD *)v88 = v89;
      *(_BYTE *)(v88 + 8) = 1;
      return;
    }
  }
  if (a13 != v23)
  {
LABEL_47:
    v82 = " right value type mismatch";
    v83 = 27;
    goto LABEL_48;
  }
  if (a13 - 239 < 2 || a13 == 227)
  {
    if (a14 == v87)
      v49 = ((a13 + 29) < 0xEu) & (0x3001u >> (a13 + 29));
    else
      v49 = 0;
    if ((v49 & 1) == 0)
      goto LABEL_47;
  }
  else
  {
    if (a14 == v87)
      v84 = ((a13 + 29) < 0xEu) & (0x3001u >> (a13 + 29));
    else
      v84 = 1;
    if (v84 == 1)
      goto LABEL_47;
  }
  v89 = 0;
  v50 = (_QWORD *)(*(_QWORD *)(a2 + 48) + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(void (**)(const char **__return_ptr, _QWORD *, uint64_t, uint64_t, void (***)(WTF::StringPrintStream *__hidden)))(*v50 + a4);
  a4(&v94, v50, v38, v86, &v89);
  if ((_BYTE)v95)
  {
    v80 = v94;
    v94 = 0;
    *(_QWORD *)v88 = v80;
    *(_BYTE *)(v88 + 8) = 1;
    std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v94, v51, v52, v53, v54, v55, v56, v57);
  }
  else
  {
    v58 = *(_DWORD *)(a2 + 68);
    if (v58 == *(_DWORD *)(a2 + 64))
    {
      WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::B3::Variable *>(a2 + 56, &v93, (uint64_t *)&v89, v53, v54, v55, v56, v57);
    }
    else
    {
      v59 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 24 * v58);
      v60 = v89;
      *v59 = a6;
      v59[1] = v85;
      v59[2] = v60;
      ++*(_DWORD *)(a2 + 68);
    }
    *(_BYTE *)v88 = 0;
    *(_BYTE *)(v88 + 8) = 0;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::unaryCase(uint64_t a1, uint64_t a2, char a3, void (*a4)(const char **__return_ptr, _QWORD *, uint64_t, void (***)(WTF::StringPrintStream *__hidden this)), uint64_t a5, uint64_t a6, uint64_t a7, int a8, double a9, float a10, unsigned __int8 a11, uint64_t a12)
{
  unsigned int v14;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  char v33;
  _QWORD *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  _QWORD *v43;
  void (**v44)(WTF::StringPrintStream *__hidden);
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  unsigned int v54;
  void (**v55)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v56;
  char v57;
  __int128 v58;
  const char *v59;
  uint64_t v60;

  *(_QWORD *)&v58 = a6;
  *((_QWORD *)&v58 + 1) = a7;
  v57 = a3;
  v14 = *(_DWORD *)(a2 + 68);
  if (!v14)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "unary", 6, &v59, a10);
    *(_QWORD *)a1 = v59;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v19 = *(_QWORD *)(a2 + 48);
  v20 = *(_QWORD *)(a2 + 56) + 24 * v14;
  v22 = *(_QWORD *)(v20 - 24);
  v21 = *(_QWORD *)(v20 - 16);
  v23 = *(_QWORD *)(v20 - 8);
  *(_DWORD *)(a2 + 68) = v14 - 1;
  v59 = "WasmFunctionParser.h:";
  LODWORD(v60) = 21;
  LODWORD(v55) = 538;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v59, (unsigned int *)&v55, (int **)&v56);
  v31 = v56;
  if (!v56 || (v32 = *(_DWORD *)(v19 + 512)) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198DF2274);
  }
  *(_DWORD *)(v19 + 512) = v32 - 1;
  v56 = 0;
  if (*(_DWORD *)v31 == 2)
  {
    WTF::StringImpl::~StringImpl(v31, v24, v25, v26, v27, v28, v29, v30);
    WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
  }
  else
  {
    *(_DWORD *)v31 -= 2;
  }
  if (a11 != v22)
    goto LABEL_27;
  if (a11 - 239 < 2 || a11 == 227)
  {
    if (a12 == v21)
      v33 = ((a11 + 29) < 0xEu) & (0x3001u >> (a11 + 29));
    else
      v33 = 0;
    if ((v33 & 1) == 0)
      goto LABEL_27;
  }
  else
  {
    if (a12 == v21)
      v54 = ((a11 + 29) < 0xEu) & (0x3001u >> (a11 + 29));
    else
      v54 = 1;
    if (v54 == 1)
    {
LABEL_27:
      v59 = " value type mismatch";
      v60 = 21;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(&v55, (uint64_t)&v57, (uint64_t)&v59);
      *(_QWORD *)a1 = v55;
      *(_BYTE *)(a1 + 8) = 1;
      return;
    }
  }
  v55 = 0;
  v34 = (_QWORD *)(*(_QWORD *)(a2 + 48) + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(void (**)(const char **__return_ptr, _QWORD *, uint64_t, void (***)(WTF::StringPrintStream *__hidden)))(*v34 + a4);
  a4(&v59, v34, v23, &v55);
  if ((_BYTE)v60)
  {
    v53 = v59;
    v59 = 0;
    *(_QWORD *)a1 = v53;
    *(_BYTE *)(a1 + 8) = 1;
    std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v59, v35, v36, v37, v38, v39, v40, v41);
  }
  else
  {
    v42 = *(_DWORD *)(a2 + 68);
    if (v42 == *(_DWORD *)(a2 + 64))
    {
      WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::B3::Variable *>(a2 + 56, &v58, (uint64_t *)&v55, v37, v38, v39, v40, v41);
    }
    else
    {
      v43 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 24 * v42);
      v44 = v55;
      *v43 = a6;
      v43[1] = a7;
      v43[2] = v44;
      ++*(_DWORD *)(a2 + 68);
    }
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, double a5, float a6)
{
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  double v21;
  float v22;
  WTF *v23;
  WTF::PrintStream *v24;
  float v25;
  double v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  const WTF::String *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  float v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  int v70;
  char v71;
  void (**v72)(WTF::StringPrintStream *__hidden);
  WTF *v73;
  __int128 v74;
  _BYTE v75[128];
  void (**v76)(WTF::StringPrintStream *__hidden);
  WTF *v77;
  __int128 v78;
  _BYTE v79[128];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v72 = off_1E3572250;
  v73 = (WTF *)v75;
  v74 = xmmword_199122F80;
  v75[0] = 0;
  v76 = off_1E3572250;
  v77 = (WTF *)v79;
  v78 = xmmword_199122F80;
  v79[0] = 0;
  if (*(_QWORD *)a3)
  {
    v9 = *(_QWORD *)(a3 + 8);
    v10 = v9 != 0;
    v11 = v9 - 1;
    if (!v10)
      v11 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v11, (uint64_t)&v69, a6);
  }
  else
  {
    v12 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = 0;
    *(_BYTE *)(v12 + 16) = 0;
    v69 = (WTF::StringImpl *)v12;
    v70 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v76, "StringView", &v69);
  if (v70 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v70])(&v68, &v69);
  v76[5]((WTF::StringPrintStream *)&v76);
  v76[5]((WTF::StringPrintStream *)&v76);
  v20 = v77;
  if (!v77)
  {
    v69 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v77, v78, (uint64_t *)&v69);
  v20 = v77;
  if (v77 != (WTF *)v79)
LABEL_12:
    WTF::fastFree((unint64_t)v20, v13, v14, v15, v16, v17, v18, v19);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v68, a2, a4, v21, v22);
  v23 = (WTF *)((uint64_t (*)(_QWORD))v72[4])(&v72);
  v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v23 + 32))(v23);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v76, v25);
  WTF::printExpectedCStringHelper(v24, "StringView", &v76);
  if ((_DWORD)v77 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v77])(&v71, &v76);
  v26 = (*(double (**)(WTF *))(*(_QWORD *)v23 + 40))(v23);
  WTF::printInternal(v23, (WTF::PrintStream *)&v69, v27, v28, v29, v30, v31, v32, v26, v33);
  WTF::printInternal(v23, (WTF::PrintStream *)&v68, v34, v35, v36, v37, v38, v39, v40, v41);
  v72[5]((WTF::StringPrintStream *)&v72);
  v49 = v68;
  v68 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v69;
  v69 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = v73;
  if (v73)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v73, v74, (uint64_t *)&v76);
    v51 = v73;
    *a1 = v76;
    if (v51 == (WTF *)v75)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v51, v42, v43, v44, v45, v46, v47, v48);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::load(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, float a6, uint64_t a7, uint64_t a8, JSC::B3::Value *a9)
{
  unsigned int v9;
  char *v10;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  int v44;
  int v45;
  uint64_t v46;
  JSC::B3::Value *v47;
  unint64_t v48;
  char *v49;
  int v50;
  char **v51;
  uint64_t v52;
  const char *v53;
  unsigned int v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  JSC::B3::Value *v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  char **v64;
  uint64_t v65;
  const char *v66;
  void (**PushVariable)(WTF::StringPrintStream *__hidden);
  uint64_t v68;
  JSC::B3::Value *v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char **v77;
  uint64_t v78;
  unsigned int v79;
  _QWORD *v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  JSC::B3::Value *v84;
  unint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  char **v89;
  uint64_t v90;
  const char *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  JSC::B3::Value *v116;
  __int16 v117;
  unint64_t v118;
  int v119;
  JSC::B3::Value *v120;
  JSC::B3::BasicBlock *v121;
  JSC::B3::Value *v122;
  __int16 v123;
  unint64_t v124;
  uint64_t v125;
  char v126;
  float v127;
  const char *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  unsigned int v132;
  JSC::B3::Value *v133;
  JSC::B3::BasicBlock *v134;
  JSC::B3::Value *v135;
  __int16 v136;
  JSC::B3::BasicBlock *v137;
  JSC::B3::Value *v138;
  __int16 v139;
  unint64_t v140;
  JSC::B3::Value *v141;
  uint64_t v142;
  uint64_t v143;
  JSC::B3::Value *v144;
  unint64_t v145;
  int v146;
  unint64_t v147;
  JSC::B3::Value *v148;
  __int16 v149;
  unint64_t v150;
  __int16 v151;
  unint64_t v152;
  uint64_t v153;
  JSC::B3::Value *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  unint64_t *v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unsigned int v164;
  uint64_t v165;
  unint64_t *v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unsigned int v170;
  unint64_t *v171;
  uint64_t v172;
  unint64_t v173;
  JSC::B3::Value *v174;
  uint64_t casual;
  __int16 v176;
  JSC::B3::Value *v177;
  uint64_t v178;
  char *v179;
  unint64_t *v180;
  uint64_t v181;
  _BYTE *v182;
  uint64_t v183;
  WTF::StringImpl *v184;
  void (**v185)(WTF::StringPrintStream *__hidden);
  __int128 v186;
  const char *v187;
  uint64_t v188;

  *(_QWORD *)&v186 = a3;
  *((_QWORD *)&v186 + 1) = a4;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 14960) + 104) == -1)
  {
    v187 = "load instruction without memory";
    v188 = 32;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v185, (uint64_t)&v187, a5, a6);
LABEL_118:
    v128 = (const char *)v185;
LABEL_119:
    *(_QWORD *)a1 = v128;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)a2;
  v15 = v13 - *(_QWORD *)a2;
  if (v13 <= *(_QWORD *)a2)
  {
LABEL_199:
    v179 = "can't get load alignment";
    v180 = (unint64_t *)a2;
    v181 = 25;
LABEL_200:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v179, v180, v181, &v187, a6);
LABEL_116:
    v128 = v187;
    goto LABEL_119;
  }
  v16 = a3;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = v14 + 1;
  while (1)
  {
    v21 = *(char *)(v20 + v14 + v17);
    v19 |= (v21 & 0x7F) << v18;
    if ((v21 & 0x80000000) == 0)
      break;
    if (v15 >= 5)
      v111 = 5;
    else
      v111 = v15;
    if (v111 - 1 == v17)
      goto LABEL_199;
    *(_QWORD *)a2 = v14 + v17++ + 2;
    v18 += 7;
    if (v15 == v17)
    {
LABEL_88:
      __break(1u);
LABEL_89:
      v115 = *(_QWORD *)(a1 + 88);
      v116 = *(JSC::B3::Value **)(a1 + 56);
      if (*(_BYTE *)(a1 + 32) == 1 || *(_BYTE *)(*(_QWORD *)(a1 + 16) + 112))
        v117 = 579;
      else
        v117 = 67;
      if (*(_QWORD *)a1)
        v118 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
      else
        v118 = 0;
      v119 = 2;
LABEL_94:
      v120 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Kind,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Value *,int>(v115, v116, v117, v119, v118, (uint64_t)a9, v9);
LABEL_95:
      v63 = (uint64_t)v120;
      goto LABEL_38;
    }
  }
  if ((_DWORD)v17 == 4 && *(unsigned __int8 *)(v20 + v14 + v17) >= 0x10u)
    goto LABEL_199;
  v22 = (unsigned __int8 *)(a2 + 14992);
  v23 = *(unsigned __int8 *)(a2 + 14992);
  if ((v23 - 40) >= 0x17)
  {
    __break(0xC471u);
    JUMPOUT(0x198DF33CCLL);
  }
  if (v19 > dword_19915ABB8[(char)(v23 - 40)])
  {
    v125 = 1 << v19;
    v126 = JSC::Wasm::memoryLog2Alignment(v23);
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, v125, " exceeds load's natural alignment ", 35, 1 << v126, &v187, v127);
    *(_QWORD *)a1 = v187;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  if (v13 <= v14 + v17 + 1)
    goto LABEL_202;
  v24 = 0;
  v25 = 0;
  v9 = 0;
  v26 = v14 + v17;
  *(_QWORD *)a2 = v14 + v17 + 2;
  v27 = v14 - v13 + v17;
  v28 = v20 + v14;
  v29 = ~v17 + v15;
  while (1)
  {
    v30 = *(char *)(v28 + v24 + v17 + 1);
    v9 |= (v30 & 0x7F) << v25;
    if ((v30 & 0x80000000) == 0)
      break;
    if (v29 >= 5)
      v112 = 5;
    else
      v112 = v29;
    if (v112 - 1 == v24)
      goto LABEL_202;
    v113 = v26 + v24;
    v114 = v27 + v24++;
    *(_QWORD *)a2 = v113 + 3;
    v25 += 7;
    if (v114 == -2)
      goto LABEL_88;
  }
  if ((_DWORD)v24 == 4 && *(unsigned __int8 *)(v28 + v24 + v17 + 1) >= 0x10u)
  {
LABEL_202:
    v179 = "can't get load offset";
    v180 = (unint64_t *)a2;
    v181 = 22;
    goto LABEL_200;
  }
  v31 = *(_DWORD *)(a2 + 68);
  if (!v31)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "load pointer", 13, &v187, a6);
    goto LABEL_116;
  }
  v183 = a4;
  v32 = *(_QWORD *)(a2 + 48);
  v33 = *(_QWORD *)(a2 + 56) + 24 * v31;
  v34 = *(unsigned __int8 *)(v33 - 24);
  v35 = *(_QWORD *)(v33 - 8);
  *(_DWORD *)(a2 + 68) = v31 - 1;
  v187 = "WasmFunctionParser.h:";
  LODWORD(v188) = 21;
  LODWORD(v185) = 559;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v187, (unsigned int *)&v185, (int **)&v184);
  v43 = v184;
  if (!v184)
  {
    __break(0xC471u);
    JUMPOUT(0x198DF3534);
  }
  v44 = *(_DWORD *)(v32 + 512);
  if (!v44)
  {
    __break(0xC471u);
    JUMPOUT(0x198DF353CLL);
  }
  *(_DWORD *)(v32 + 512) = v44 - 1;
  v184 = 0;
  if (*(_DWORD *)v43 == 2)
  {
    WTF::StringImpl::~StringImpl(v43, v36, v37, v38, v39, v40, v41, v42);
    WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
  }
  else
  {
    *(_DWORD *)v43 -= 2;
  }
  if (v34 != 255)
  {
    v187 = " pointer type mismatch";
    v188 = 23;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(&v185, a2 + 14992, (uint64_t)&v187);
    goto LABEL_118;
  }
  v182 = (_BYTE *)a1;
  v185 = 0;
  a1 = *(_QWORD *)(a2 + 48);
  v45 = *v22;
  v46 = *(_QWORD *)(a1 + 88);
  v47 = *(JSC::B3::Value **)(a1 + 56);
  if (*(_QWORD *)a1)
    v48 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
  else
    v48 = 0;
  v49 = (char *)WTF::fastMalloc((WTF *)0x30);
  v50 = *(_DWORD *)(v35 + 4);
  *((_DWORD *)v49 + 2) = -1;
  *((_WORD *)v49 + 6) = 10;
  *((_DWORD *)v49 + 4) = v50;
  v49[20] = 0;
  *((_QWORD *)v49 + 3) = v48;
  *((_QWORD *)v49 + 4) = 0;
  *(_QWORD *)v49 = off_1E357F0F8;
  *((_QWORD *)v49 + 5) = v35;
  JSC::B3::Procedure::addValueImpl(v47, (JSC::B3::Value *)v49);
  v187 = v49;
  v51 = (char **)(v46 + 8);
  v52 = *(unsigned int *)(v46 + 20);
  if ((_DWORD)v52 == *(_DWORD *)(v46 + 16))
  {
    v95 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v51, v52 + 1, (unint64_t)&v187);
    v52 = *(unsigned int *)(v46 + 20);
    *(_QWORD *)(*(_QWORD *)(v46 + 8) + 8 * v52) = *(_QWORD *)v95;
    v53 = v187;
  }
  else
  {
    *(_QWORD *)&(*v51)[8 * v52] = v49;
    v53 = v49;
  }
  *(_DWORD *)(v46 + 20) = v52 + 1;
  *((_QWORD *)v53 + 4) = v46;
  v54 = v45 - 40;
  if ((v45 - 40) >= 0xE)
  {
    __break(0xC471u);
    JUMPOUT(0x198DF33ECLL);
  }
  if (__CFADD__(v9, dword_19915AB80[(char)v54]))
  {
    if (*(_QWORD *)a1)
      v129 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
    else
      v129 = 0;
    v130 = JSC::B3::BasicBlock::appendNew<JSC::B3::PatchpointValue,JSC::B3::TypeKind,JSC::B3::Origin>(*(_QWORD *)(a1 + 88), *(JSC::B3::Value **)(a1 + 56), 0, v129);
    v187 = (const char *)a1;
    JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::load(JSC::Wasm::LoadOpType,JSC::B3::Variable *,JSC::B3::Variable *&,unsigned int)::$_0>(v130, (uint64_t *)&v187);
    switch(v45)
    {
      case '(':
      case ',':
      case '-':
      case '.':
      case '/':
        v131 = (uint64_t *)a1;
        v132 = 1;
        goto LABEL_124;
      case ')':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
        v131 = (uint64_t *)a1;
        v132 = 2;
        goto LABEL_124;
      case '*':
        v131 = (uint64_t *)a1;
        v132 = 3;
        goto LABEL_124;
      case '+':
        v131 = (uint64_t *)a1;
        v132 = 4;
LABEL_124:
        v133 = (JSC::B3::Value *)JSC::Wasm::OMGIRGenerator::constant(v131, v132, 0, 0, 0);
        PushVariable = (void (**)(WTF::StringPrintStream *__hidden))JSC::Wasm::OMGIRGenerator::push((JSC::Wasm::OMGIRGenerator *)a1, v133);
        goto LABEL_43;
      default:
        PushVariable = 0;
        goto LABEL_44;
    }
  }
  if (v54 >= 0xE)
  {
    __break(0xC471u);
    JUMPOUT(0x198DF340CLL);
  }
  v55 = JSC::Wasm::OMGIRGenerator::emitCheckAndPreparePointer((JSC::Wasm::OMGIRGenerator *)a1, (JSC::B3::Value *)v49, v9, dword_19915AB80[(char)v54]);
  a9 = (JSC::B3::Value *)v55;
  if ((v9 & 0x80000000) != 0)
  {
    v153 = *(_QWORD *)(a1 + 88);
    v154 = *(JSC::B3::Value **)(a1 + 56);
    v155 = v55;
    if (*(_QWORD *)a1)
      v156 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
    else
      v156 = 0;
    v157 = JSC::B3::BasicBlock::appendNew<JSC::B3::Const64Value,JSC::B3::Origin,unsigned int>(*(_QWORD *)(a1 + 88), *(JSC::B3::Value **)(a1 + 56), v156, v9);
    a9 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Const64Value *>(v153, v154, v156, v155, v157);
    v9 = 0;
  }
  if (v45 == 40)
  {
    if (*(_BYTE *)(a1 + 32) == 1 || *(_BYTE *)(*(_QWORD *)(a1 + 16) + 112))
      v56 = 579;
    else
      v56 = 67;
    v57 = *(_QWORD *)(a1 + 88);
    v58 = *(JSC::B3::Value **)(a1 + 56);
    if (*(_QWORD *)a1)
      v59 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
    else
      v59 = 0;
    v60 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v60)
    {
      v61 = (_BYTE *)(v60 + 9040);
      *(_BYTE *)(v60 + 9040) = 1;
      v62 = *(unsigned int *)(v60 + 9056);
      if ((_DWORD)v62)
      {
        *(_DWORD *)(v60 + 9056) = v62 - *(_DWORD *)(v60 + 9060);
        v63 = *(_QWORD *)(v60 + 9048) - v62;
LABEL_34:
        *v61 = 0;
LABEL_35:
        JSC::B3::Value::Value<>(v63, 0, v56, 1, 1, v59, (uint64_t)a9);
        *(_QWORD *)v63 = off_1E357E4C8;
        *(_DWORD *)(v63 + 40) = v9;
        *(_OWORD *)(v63 + 44) = xmmword_19914F690;
        JSC::B3::Procedure::addValueImpl(v58, (JSC::B3::Value *)v63);
        v187 = (const char *)v63;
        v64 = (char **)(v57 + 8);
        v65 = *(unsigned int *)(v57 + 20);
        if ((_DWORD)v65 == *(_DWORD *)(v57 + 16))
        {
          v105 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v64, v65 + 1, (unint64_t)&v187);
          v65 = *(unsigned int *)(v57 + 20);
          *(_QWORD *)(*(_QWORD *)(v57 + 8) + 8 * v65) = *(_QWORD *)v105;
          v66 = v187;
        }
        else
        {
          *(_QWORD *)&(*v64)[8 * v65] = v63;
          v66 = (const char *)v63;
        }
        *(_DWORD *)(v57 + 20) = v65 + 1;
        *((_QWORD *)v66 + 4) = v57;
        goto LABEL_38;
      }
      v92 = *(_QWORD *)(v60 + 9080);
      v93 = *(_QWORD *)(v60 + 9064);
      if (v92)
      {
LABEL_60:
        v94 = __clz(v92);
        *(_QWORD *)(v60 + 9080) = v92 & ~(0x8000000000000000 >> v94);
        v63 = v93 + 16 * v94;
        goto LABEL_34;
      }
      if (*(_BYTE *)(v60 + 9045) == 6)
      {
        v158 = *(_DWORD *)(v60 + 9076);
        v159 = *(unsigned int *)(v60 + 9072);
        if (v159 < v158)
        {
          *(_QWORD *)&v61[8 * v159 + 56] = 0;
          v160 = (unint64_t *)(v60 + 8 * v159 + 9104);
          v161 = v158 - 1 - v159;
          while (v161)
          {
            v93 += 1024;
            v163 = *v160++;
            v162 = v163;
            LODWORD(v159) = v159 + 1;
            --v161;
            if (v163)
            {
              v92 = __rbit64(v162);
              *(_DWORD *)(v60 + 9072) = v159;
              *(_QWORD *)(v60 + 9064) = v93;
              goto LABEL_60;
            }
          }
          *(_DWORD *)(v60 + 9072) = v158;
        }
      }
      *v61 = 0;
    }
    v174 = a9;
    casual = bmalloc_allocate_casual(72, 1);
    a9 = v174;
    v63 = casual;
    goto LABEL_35;
  }
  switch(v45)
  {
    case ')':
      goto LABEL_89;
    case '*':
      v115 = *(_QWORD *)(a1 + 88);
      v116 = *(JSC::B3::Value **)(a1 + 56);
      if (*(_BYTE *)(a1 + 32) == 1 || *(_BYTE *)(*(_QWORD *)(a1 + 16) + 112))
        v117 = 579;
      else
        v117 = 67;
      if (*(_QWORD *)a1)
        v118 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
      else
        v118 = 0;
      v119 = 3;
      goto LABEL_94;
    case '+':
      v115 = *(_QWORD *)(a1 + 88);
      v116 = *(JSC::B3::Value **)(a1 + 56);
      if (*(_BYTE *)(a1 + 32) == 1 || *(_BYTE *)(*(_QWORD *)(a1 + 16) + 112))
        v117 = 579;
      else
        v117 = 67;
      if (*(_QWORD *)a1)
        v118 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
      else
        v118 = 0;
      v119 = 4;
      goto LABEL_94;
    case ',':
      if (*(_BYTE *)(a1 + 32) == 1 || *(_BYTE *)(*(_QWORD *)(a1 + 16) + 112))
      {
        v81 = v16;
        v82 = 576;
      }
      else
      {
        v81 = v16;
        v82 = 64;
      }
      v83 = *(_QWORD *)(a1 + 88);
      v84 = *(JSC::B3::Value **)(a1 + 56);
      if (*(_QWORD *)a1)
        v85 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
      else
        v85 = 0;
      v86 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v86)
        goto LABEL_197;
      v87 = (_BYTE *)(v86 + 9040);
      *(_BYTE *)(v86 + 9040) = 1;
      v106 = *(unsigned int *)(v86 + 9056);
      if ((_DWORD)v106)
      {
        *(_DWORD *)(v86 + 9056) = v106 - *(_DWORD *)(v86 + 9060);
        v63 = *(_QWORD *)(v86 + 9048) - v106;
        goto LABEL_55;
      }
      v107 = *(_QWORD *)(v86 + 9080);
      v108 = *(_QWORD *)(v86 + 9064);
      if (v107)
        goto LABEL_73;
      if (*(_BYTE *)(v86 + 9045) != 6)
        goto LABEL_196;
      v170 = *(_DWORD *)(v86 + 9076);
      v165 = *(unsigned int *)(v86 + 9072);
      if (v165 >= v170)
        goto LABEL_196;
      *(_QWORD *)&v87[8 * v165 + 56] = 0;
      v171 = (unint64_t *)(v86 + 8 * v165 + 9104);
      v172 = v170 - 1 - v165;
      while (v172)
      {
        v108 += 1024;
        v173 = *v171++;
        v168 = v173;
        LODWORD(v165) = v165 + 1;
        --v172;
        if (v173)
          goto LABEL_178;
      }
      *(_DWORD *)(v86 + 9072) = v170;
      goto LABEL_196;
    case '-':
      if (*(_BYTE *)(a1 + 32) == 1 || *(_BYTE *)(*(_QWORD *)(a1 + 16) + 112))
      {
        v81 = v16;
        v82 = 575;
      }
      else
      {
        v81 = v16;
        v82 = 63;
      }
      v83 = *(_QWORD *)(a1 + 88);
      v84 = *(JSC::B3::Value **)(a1 + 56);
      if (*(_QWORD *)a1)
        v85 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
      else
        v85 = 0;
      v86 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v86)
        goto LABEL_197;
      v87 = (_BYTE *)(v86 + 9040);
      *(_BYTE *)(v86 + 9040) = 1;
      v88 = *(unsigned int *)(v86 + 9056);
      if ((_DWORD)v88)
      {
        *(_DWORD *)(v86 + 9056) = v88 - *(_DWORD *)(v86 + 9060);
        v63 = *(_QWORD *)(v86 + 9048) - v88;
        goto LABEL_55;
      }
      v107 = *(_QWORD *)(v86 + 9080);
      v108 = *(_QWORD *)(v86 + 9064);
      if (v107)
        goto LABEL_73;
      if (*(_BYTE *)(v86 + 9045) != 6)
        goto LABEL_196;
      v164 = *(_DWORD *)(v86 + 9076);
      v165 = *(unsigned int *)(v86 + 9072);
      if (v165 >= v164)
        goto LABEL_196;
      *(_QWORD *)&v87[8 * v165 + 56] = 0;
      v166 = (unint64_t *)(v86 + 8 * v165 + 9104);
      v167 = v164 - 1 - v165;
      break;
    case '.':
      v121 = *(JSC::B3::BasicBlock **)(a1 + 88);
      v122 = *(JSC::B3::Value **)(a1 + 56);
      if (*(_BYTE *)(a1 + 32) == 1 || *(_BYTE *)(*(_QWORD *)(a1 + 16) + 112))
        v123 = 578;
      else
        v123 = 66;
      goto LABEL_108;
    case '/':
      v121 = *(JSC::B3::BasicBlock **)(a1 + 88);
      v122 = *(JSC::B3::Value **)(a1 + 56);
      if (*(_BYTE *)(a1 + 32) == 1 || *(_BYTE *)(*(_QWORD *)(a1 + 16) + 112))
        v123 = 577;
      else
        v123 = 65;
LABEL_108:
      if (*(_QWORD *)a1)
        v124 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
      else
        v124 = 0;
      v120 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value *,int>(v121, v122, v123, v124, (uint64_t)a9, v9);
      goto LABEL_95;
    case '0':
      v134 = *(JSC::B3::BasicBlock **)(a1 + 88);
      v135 = *(JSC::B3::Value **)(a1 + 56);
      if (*(_BYTE *)(a1 + 32) == 1 || *(_BYTE *)(*(_QWORD *)(a1 + 16) + 112))
        v136 = 576;
      else
        v136 = 64;
      goto LABEL_131;
    case '1':
      v137 = *(JSC::B3::BasicBlock **)(a1 + 88);
      v138 = *(JSC::B3::Value **)(a1 + 56);
      if (*(_BYTE *)(a1 + 32) == 1 || *(_BYTE *)(*(_QWORD *)(a1 + 16) + 112))
        v139 = 575;
      else
        v139 = 63;
      goto LABEL_139;
    case '2':
      v134 = *(JSC::B3::BasicBlock **)(a1 + 88);
      v135 = *(JSC::B3::Value **)(a1 + 56);
      if (*(_BYTE *)(a1 + 32) == 1 || *(_BYTE *)(*(_QWORD *)(a1 + 16) + 112))
        v136 = 578;
      else
        v136 = 66;
LABEL_131:
      if (*(_QWORD *)a1)
        v140 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
      else
        v140 = 0;
      v141 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value *,int>(v134, v135, v136, v140, (uint64_t)a9, v9);
      goto LABEL_134;
    case '3':
      v137 = *(JSC::B3::BasicBlock **)(a1 + 88);
      v138 = *(JSC::B3::Value **)(a1 + 56);
      if (*(_BYTE *)(a1 + 32) == 1 || *(_BYTE *)(*(_QWORD *)(a1 + 16) + 112))
        v139 = 577;
      else
        v139 = 65;
LABEL_139:
      if (*(_QWORD *)a1)
        v147 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
      else
        v147 = 0;
      v148 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value *,int>(v137, v138, v139, v147, (uint64_t)a9, v9);
      goto LABEL_142;
    case '4':
      if (*(_BYTE *)(a1 + 32) == 1 || *(_BYTE *)(*(_QWORD *)(a1 + 16) + 112))
        v151 = 579;
      else
        v151 = 67;
      if (*(_QWORD *)a1)
        v152 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
      else
        v152 = 0;
      v141 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Kind,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Value *,int>(*(_QWORD *)(a1 + 88), *(JSC::B3::Value **)(a1 + 56), v151, 1, v152, (uint64_t)a9, v9);
LABEL_134:
      v142 = (uint64_t)v141;
      v143 = *(_QWORD *)(a1 + 88);
      v144 = *(JSC::B3::Value **)(a1 + 56);
      if (*(_QWORD *)a1)
        v145 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
      else
        v145 = 0;
      v146 = 42;
      goto LABEL_145;
    case '5':
      if (*(_BYTE *)(a1 + 32) == 1 || *(_BYTE *)(*(_QWORD *)(a1 + 16) + 112))
        v149 = 579;
      else
        v149 = 67;
      if (*(_QWORD *)a1)
        v150 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
      else
        v150 = 0;
      v148 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Kind,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Value *,int>(*(_QWORD *)(a1 + 88), *(JSC::B3::Value **)(a1 + 56), v149, 1, v150, (uint64_t)a9, v9);
LABEL_142:
      v142 = (uint64_t)v148;
      v143 = *(_QWORD *)(a1 + 88);
      v144 = *(JSC::B3::Value **)(a1 + 56);
      if (*(_QWORD *)a1)
        v145 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
      else
        v145 = 0;
      v146 = 43;
LABEL_145:
      v120 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(v143, v144, v146, v145, v142);
      goto LABEL_95;
    default:
      __break(0xC471u);
      JUMPOUT(0x198DF30C0);
  }
  while (v167)
  {
    v108 += 1024;
    v169 = *v166++;
    v168 = v169;
    LODWORD(v165) = v165 + 1;
    --v167;
    if (v169)
    {
LABEL_178:
      v107 = __rbit64(v168);
      *(_DWORD *)(v86 + 9072) = v165;
      *(_QWORD *)(v86 + 9064) = v108;
LABEL_73:
      v109 = __clz(v107);
      *(_QWORD *)(v86 + 9080) = v107 & ~(0x8000000000000000 >> v109);
      v63 = v108 + 16 * v109;
LABEL_55:
      *v87 = 0;
      goto LABEL_56;
    }
  }
  *(_DWORD *)(v86 + 9072) = v164;
LABEL_196:
  *v87 = 0;
LABEL_197:
  v176 = v82;
  v177 = a9;
  v178 = bmalloc_allocate_casual(72, 1);
  a9 = v177;
  v82 = v176;
  v63 = v178;
LABEL_56:
  JSC::B3::Value::Value<>(v63, 0, v82, 1, 1, v85, (uint64_t)a9);
  *(_QWORD *)v63 = off_1E357E4C8;
  *(_DWORD *)(v63 + 40) = v9;
  *(_OWORD *)(v63 + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(v84, (JSC::B3::Value *)v63);
  v187 = (const char *)v63;
  v89 = (char **)(v83 + 8);
  v90 = *(unsigned int *)(v83 + 20);
  if ((_DWORD)v90 == *(_DWORD *)(v83 + 16))
  {
    v110 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v89, v90 + 1, (unint64_t)&v187);
    v90 = *(unsigned int *)(v83 + 20);
    *(_QWORD *)(*(_QWORD *)(v83 + 8) + 8 * v90) = *(_QWORD *)v110;
    v91 = v187;
  }
  else
  {
    *(_QWORD *)&(*v89)[8 * v90] = v63;
    v91 = (const char *)v63;
  }
  *(_DWORD *)(v83 + 20) = v90 + 1;
  *((_QWORD *)v91 + 4) = v83;
  v16 = v81;
LABEL_38:
  PushVariable = (void (**)(WTF::StringPrintStream *__hidden))JSC::Wasm::OMGIRGenerator::getPushVariable(a1, *(_DWORD *)(v63 + 16));
  v68 = *(_QWORD *)(a1 + 88);
  v69 = *(JSC::B3::Value **)(a1 + 56);
  if (*(_QWORD *)a1)
    v70 = *(_QWORD *)(*(_QWORD *)a1 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 14992) << 32);
  else
    v70 = 0;
  v71 = (char *)WTF::fastMalloc((WTF *)0x38);
  *((_DWORD *)v71 + 2) = -1;
  *((_WORD *)v71 + 6) = 9;
  *((_DWORD *)v71 + 4) = 0;
  v71[20] = 1;
  *((_QWORD *)v71 + 3) = v70;
  *((_QWORD *)v71 + 4) = 0;
  *(_QWORD *)v71 = v10 + 16;
  *((_QWORD *)v71 + 5) = PushVariable;
  *((_QWORD *)v71 + 6) = v63;
  JSC::B3::Procedure::addValueImpl(v69, (JSC::B3::Value *)v71);
  v187 = v71;
  v77 = (char **)(v68 + 8);
  v78 = *(unsigned int *)(v68 + 20);
  if ((_DWORD)v78 == *(_DWORD *)(v68 + 16))
  {
    v96 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v77, v78 + 1, (unint64_t)&v187);
    v78 = *(unsigned int *)(v68 + 20);
    *(_QWORD *)(*(_QWORD *)(v68 + 8) + 8 * v78) = *(_QWORD *)v96;
    v71 = (char *)v187;
  }
  else
  {
    *(_QWORD *)&(*v77)[8 * v78] = v71;
  }
  *(_DWORD *)(v68 + 20) = v78 + 1;
  *((_QWORD *)v71 + 4) = v68;
LABEL_43:
  v185 = PushVariable;
LABEL_44:
  v79 = *(_DWORD *)(a2 + 68);
  if (v79 == *(_DWORD *)(a2 + 64))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::B3::Variable *>(a2 + 56, &v186, (uint64_t *)&v185, v72, v73, v74, v75, v76);
  }
  else
  {
    v80 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 24 * v79);
    *v80 = v16;
    v80[1] = v183;
    v80[2] = PushVariable;
    ++*(_DWORD *)(a2 + 68);
  }
  *v182 = 0;
  v182[8] = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::store(_BYTE *a1, uint64_t a2, unsigned __int8 a3, _BYTE *a4, double a5, float a6)
{
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int v45;
  unsigned int v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  int v60;
  char v61;
  uint64_t v62;
  JSC::B3::Value *v63;
  unint64_t v64;
  int v65;
  char *v66;
  int v67;
  char **v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  JSC::B3::Value *v72;
  unint64_t v73;
  int v74;
  char **v75;
  uint64_t v76;
  const char *v77;
  unsigned int v78;
  __int16 v79;
  uint64_t v80;
  JSC::B3::Value *v81;
  unint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  char *casual;
  char **v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  __int16 v119;
  unint64_t v120;
  const char *v121;
  uint64_t v122;
  char v123;
  float v124;
  char *v125;
  unint64_t *v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  unint64_t *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  JSC::B3::Value *v139;
  unint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unint64_t *v143;
  uint64_t v144;
  unint64_t v145;
  unsigned int v146;
  char *v147;
  unint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  _BYTE *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  void (**v155)(WTF::StringPrintStream *__hidden);
  const char *v156;
  uint64_t v157;

  if (*(_DWORD *)(*(_QWORD *)(a2 + 14960) + 104) == -1)
  {
    v156 = "store instruction without memory";
    v157 = 33;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v155, (uint64_t)&v156, a5, a6);
    v121 = (const char *)v155;
LABEL_103:
    *(_QWORD *)a1 = v121;
    a1[8] = 1;
    return;
  }
  v10 = a2;
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)a2;
  v13 = v11 - *(_QWORD *)a2;
  if (v11 <= *(_QWORD *)a2)
    goto LABEL_146;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = v12 + 1;
  while (1)
  {
    v19 = *(char *)(v18 + v12 + v15);
    v17 |= (v19 & 0x7F) << v16;
    if ((v19 & 0x80000000) == 0)
      break;
    if (v13 >= 5)
      v112 = 5;
    else
      v112 = v13;
    if (v112 - 1 == v15)
      goto LABEL_146;
    *(_QWORD *)a2 = v12 + v15++ + 2;
    v16 += 7;
    if (v13 == v15)
    {
LABEL_82:
      __break(1u);
LABEL_83:
      if (*(_QWORD *)v8)
        v116 = *(_QWORD *)(*(_QWORD *)v8 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v8 + 14992) << 32);
      else
        v116 = 0;
      v10 = (uint64_t)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(*((_QWORD *)v8 + 11), *((JSC::B3::Value **)v8 + 7), 44, v116, v10);
LABEL_60:
      if (v8[32] == 1 || *(_BYTE *)(*((_QWORD *)v8 + 2) + 112))
        v79 = 580;
      else
        v79 = 68;
      v80 = *((_QWORD *)v8 + 11);
      v81 = (JSC::B3::Value *)*((_QWORD *)v8 + 7);
      if (*(_QWORD *)v8)
        v82 = *(_QWORD *)(*(_QWORD *)v8 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v8 + 14992) << 32);
      else
        v82 = 0;
      v83 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (v83)
      {
        v84 = (_BYTE *)(v83 + 9040);
        *(_BYTE *)(v83 + 9040) = 1;
        v95 = *(unsigned int *)(v83 + 9056);
        if ((_DWORD)v95)
        {
          *(_DWORD *)(v83 + 9056) = v95 - *(_DWORD *)(v83 + 9060);
          casual = (char *)(*(_QWORD *)(v83 + 9048) - v95);
LABEL_49:
          *v84 = 0;
LABEL_50:
          *(_QWORD *)casual = off_1E357F5F0;
          *((_DWORD *)casual + 2) = -1;
          *((_WORD *)casual + 6) = v79;
          *((_DWORD *)casual + 4) = 0;
          casual[20] = 2;
          *((_QWORD *)casual + 3) = v82;
          *((_QWORD *)casual + 4) = 0;
          JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)casual, 2, v10, v7);
          *(_QWORD *)casual = off_1E357E4C8;
          *((_DWORD *)casual + 10) = v6;
          *(_OWORD *)(casual + 44) = xmmword_19914F690;
          JSC::B3::Procedure::addValueImpl(v81, (JSC::B3::Value *)casual);
          v156 = casual;
          v87 = (char **)(v80 + 8);
          v88 = *(unsigned int *)(v80 + 20);
          if ((_DWORD)v88 == *(_DWORD *)(v80 + 16))
          {
            v94 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v87, v88 + 1, (unint64_t)&v156);
            v88 = *(unsigned int *)(v80 + 20);
            *(_QWORD *)(*(_QWORD *)(v80 + 8) + 8 * v88) = *(_QWORD *)v94;
            casual = (char *)v156;
          }
          else
          {
            *(_QWORD *)&(*v87)[8 * v88] = casual;
          }
          *(_DWORD *)(v80 + 20) = v88 + 1;
          *((_QWORD *)casual + 4) = v80;
LABEL_53:
          *a4 = 0;
          a4[8] = 0;
          return;
        }
        v89 = *(_QWORD *)(v83 + 9080);
        v90 = *(_QWORD *)(v83 + 9064);
        if (v89)
        {
LABEL_55:
          v91 = __clz(v89);
          *(_QWORD *)(v83 + 9080) = v89 & ~(0x8000000000000000 >> v91);
          casual = (char *)(v90 + 16 * v91);
          goto LABEL_49;
        }
        if (*(_BYTE *)(v83 + 9045) == 6)
        {
          v142 = *(_DWORD *)(v83 + 9076);
          v133 = *(unsigned int *)(v83 + 9072);
          if (v133 < v142)
          {
            *(_QWORD *)&v84[8 * v133 + 56] = 0;
            v143 = (unint64_t *)(v83 + 8 * v133 + 9104);
            v144 = v142 - 1 - v133;
            while (v144)
            {
              v90 += 1024;
              v145 = *v143++;
              v136 = v145;
              LODWORD(v133) = v133 + 1;
              --v144;
              if (v145)
              {
LABEL_114:
                v89 = __rbit64(v136);
                *(_DWORD *)(v83 + 9072) = v133;
                *(_QWORD *)(v83 + 9064) = v90;
                a4 = v152;
                goto LABEL_55;
              }
            }
            *(_DWORD *)(v83 + 9072) = v142;
          }
        }
        *v84 = 0;
        a4 = v152;
      }
LABEL_130:
      casual = (char *)bmalloc_allocate_casual(80, 1);
      goto LABEL_50;
    }
  }
  if ((_DWORD)v15 == 4 && *(unsigned __int8 *)(v18 + v12 + v15) >= 0x10u)
  {
LABEL_146:
    v147 = "can't get store alignment";
    v148 = (unint64_t *)v10;
    v149 = 26;
LABEL_147:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v147, v148, v149, &v156, a6);
    goto LABEL_102;
  }
  v20 = (unsigned __int8 *)(a2 + 14992);
  v21 = *(unsigned __int8 *)(a2 + 14992);
  if ((v21 - 40) >= 0x17)
  {
    __break(0xC471u);
    JUMPOUT(0x198DF4104);
  }
  if (v17 > dword_19915ABB8[(char)(v21 - 40)])
  {
    v122 = 1 << v17;
    v123 = JSC::Wasm::memoryLog2Alignment(v21);
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)v10, 16, v122, " exceeds store's natural alignment ", 36, 1 << v123, &v156, v124);
    *(_QWORD *)a1 = v156;
    a1[8] = 1;
    return;
  }
  if (v11 <= v12 + v15 + 1)
    goto LABEL_149;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = v12 + v15;
  *(_QWORD *)a2 = v12 + v15 + 2;
  v26 = v12 - v11 + v15;
  v27 = v18 + v12;
  v28 = ~v15 + v13;
  while (1)
  {
    v29 = *(char *)(v27 + v22 + v15 + 1);
    v24 |= (v29 & 0x7F) << v23;
    if ((v29 & 0x80000000) == 0)
      break;
    if (v28 >= 5)
      v113 = 5;
    else
      v113 = v28;
    if (v113 - 1 == v22)
      goto LABEL_149;
    v114 = v25 + v22;
    v115 = v26 + v22++;
    *(_QWORD *)a2 = v114 + 3;
    v23 += 7;
    if (v115 == -2)
      goto LABEL_82;
  }
  if ((_DWORD)v22 == 4 && *(unsigned __int8 *)(v27 + v22 + v15 + 1) >= 0x10u)
  {
LABEL_149:
    v147 = "can't get store offset";
    v148 = (unint64_t *)v10;
    v149 = 23;
    goto LABEL_147;
  }
  v30 = *(_DWORD *)(a2 + 68);
  if (!v30)
  {
    v125 = "store value";
    v126 = (unint64_t *)a2;
    v127 = 12;
LABEL_101:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v126, 26, v125, v127, &v156, a6);
LABEL_102:
    v121 = v156;
    goto LABEL_103;
  }
  v151 = v24;
  v32 = *(_QWORD *)(a2 + 48);
  v33 = *(_QWORD *)(a2 + 56) + 24 * v30;
  v35 = *(_QWORD *)(v33 - 24);
  v34 = *(_BYTE **)(v33 - 16);
  v36 = *(_QWORD *)(v33 - 8);
  *(_DWORD *)(a2 + 68) = v30 - 1;
  v156 = "WasmFunctionParser.h:";
  LODWORD(v157) = 21;
  LODWORD(v155) = 581;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v156, (unsigned int *)&v155, (int **)&v154);
  v44 = v154;
  if (!v154)
  {
    __break(0xC471u);
    JUMPOUT(0x198DF4184);
  }
  v45 = *(_DWORD *)(v32 + 512);
  if (!v45)
  {
    __break(0xC471u);
    JUMPOUT(0x198DF418CLL);
  }
  *(_DWORD *)(v32 + 512) = v45 - 1;
  v154 = 0;
  if (*(_DWORD *)v44 == 2)
  {
    WTF::StringImpl::~StringImpl(v44, v37, v38, v39, v40, v41, v42, v43);
    WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
  }
  else
  {
    *(_DWORD *)v44 -= 2;
  }
  v46 = *(_DWORD *)(v10 + 68);
  if (!v46)
  {
    v125 = "store pointer";
    v126 = (unint64_t *)v10;
    v127 = 14;
    goto LABEL_101;
  }
  v150 = v36;
  v47 = a4;
  v152 = a1;
  v48 = *(_QWORD *)(v10 + 48);
  v49 = *(_QWORD *)(v10 + 56) + 24 * v46;
  v50 = *(unsigned __int8 *)(v49 - 24);
  v51 = *(_QWORD *)(v49 - 8);
  *(_DWORD *)(v10 + 68) = v46 - 1;
  v156 = "WasmFunctionParser.h:";
  LODWORD(v157) = 21;
  LODWORD(v155) = 582;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v156, (unsigned int *)&v155, (int **)&v153);
  v59 = v153;
  if (!v153)
  {
    __break(0xC471u);
    JUMPOUT(0x198DF4194);
  }
  v60 = *(_DWORD *)(v48 + 512);
  if (!v60)
  {
    __break(0xC471u);
    JUMPOUT(0x198DF419CLL);
  }
  *(_DWORD *)(v48 + 512) = v60 - 1;
  v153 = 0;
  if (*(_DWORD *)v59 == 2)
  {
    WTF::StringImpl::~StringImpl(v59, v52, v53, v54, v55, v56, v57, v58);
    WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
  }
  else
  {
    *(_DWORD *)v59 -= 2;
  }
  if (v50 == 255)
  {
    if (a3 == v35)
    {
      if (a3 - 239 < 2 || a3 == 227)
      {
        if (v47 == v34)
          v61 = ((a3 + 29) < 0xEu) & (0x3001u >> (a3 + 29));
        else
          v61 = 0;
        if ((v61 & 1) == 0)
          goto LABEL_136;
      }
      else
      {
        if (v47 == v34)
          v146 = ((a3 + 29) < 0xEu) & (0x3001u >> (a3 + 29));
        else
          v146 = 1;
        if (v146 == 1)
          goto LABEL_136;
      }
      v8 = *(char **)(v10 + 48);
      v62 = *((_QWORD *)v8 + 11);
      v63 = (JSC::B3::Value *)*((_QWORD *)v8 + 7);
      if (*(_QWORD *)v8)
        v64 = *(_QWORD *)(*(_QWORD *)v8 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v8 + 14992) << 32);
      else
        v64 = 0;
      v6 = v151;
      v65 = *v20;
      v66 = (char *)WTF::fastMalloc((WTF *)0x30);
      v67 = *(_DWORD *)(v51 + 4);
      *((_DWORD *)v66 + 2) = -1;
      *((_WORD *)v66 + 6) = 10;
      *((_DWORD *)v66 + 4) = v67;
      v66[20] = 0;
      *((_QWORD *)v66 + 3) = v64;
      *((_QWORD *)v66 + 4) = 0;
      *(_QWORD *)v66 = off_1E357F0F8;
      *((_QWORD *)v66 + 5) = v51;
      JSC::B3::Procedure::addValueImpl(v63, (JSC::B3::Value *)v66);
      v156 = v66;
      v68 = (char **)(v62 + 8);
      v69 = *(unsigned int *)(v62 + 20);
      if ((_DWORD)v69 == *(_DWORD *)(v62 + 16))
      {
        v92 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v68, v69 + 1, (unint64_t)&v156);
        v69 = *(unsigned int *)(v62 + 20);
        *(_QWORD *)(*(_QWORD *)(v62 + 8) + 8 * v69) = *(_QWORD *)v92;
        v70 = v156;
      }
      else
      {
        *(_QWORD *)&(*v68)[8 * v69] = v66;
        v70 = v66;
      }
      *(_DWORD *)(v62 + 20) = v69 + 1;
      *((_QWORD *)v70 + 4) = v62;
      v71 = *((_QWORD *)v8 + 11);
      v72 = (JSC::B3::Value *)*((_QWORD *)v8 + 7);
      if (*(_QWORD *)v8)
        v73 = *(_QWORD *)(*(_QWORD *)v8 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v8 + 14992) << 32);
      else
        v73 = 0;
      v10 = WTF::fastMalloc((WTF *)0x30);
      v74 = *(_DWORD *)(v150 + 4);
      *(_DWORD *)(v10 + 8) = -1;
      *(_WORD *)(v10 + 12) = 10;
      *(_DWORD *)(v10 + 16) = v74;
      *(_BYTE *)(v10 + 20) = 0;
      *(_QWORD *)(v10 + 24) = v73;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)v10 = off_1E357F0F8;
      *(_QWORD *)(v10 + 40) = v150;
      JSC::B3::Procedure::addValueImpl(v72, (JSC::B3::Value *)v10);
      v156 = (const char *)v10;
      v75 = (char **)(v71 + 8);
      v76 = *(unsigned int *)(v71 + 20);
      if ((_DWORD)v76 == *(_DWORD *)(v71 + 16))
      {
        v93 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v75, v76 + 1, (unint64_t)&v156);
        v76 = *(unsigned int *)(v71 + 20);
        *(_QWORD *)(*(_QWORD *)(v71 + 8) + 8 * v76) = *(_QWORD *)v93;
        v77 = v156;
      }
      else
      {
        *(_QWORD *)&(*v75)[8 * v76] = v10;
        v77 = (const char *)v10;
      }
      a4 = v152;
      *(_DWORD *)(v71 + 20) = v76 + 1;
      *((_QWORD *)v77 + 4) = v71;
      v78 = v65 - 54;
      if ((v65 - 54) >= 9)
      {
        __break(0xC471u);
        JUMPOUT(0x198DF4124);
      }
      if (__CFADD__(v151, dword_19915AC14[(char)v78]))
      {
        if (*(_QWORD *)v8)
          v130 = *(_QWORD *)(*(_QWORD *)v8 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v8 + 14992) << 32);
        else
          v130 = 0;
        v131 = JSC::B3::BasicBlock::appendNew<JSC::B3::PatchpointValue,JSC::B3::TypeKind,JSC::B3::Origin>(*((_QWORD *)v8 + 11), *((JSC::B3::Value **)v8 + 7), 0, v130);
        v156 = v8;
        JSC::B3::StackmapValue::setGenerator<JSC::Wasm::OMGIRGenerator::store(JSC::Wasm::StoreOpType,JSC::B3::Variable *,JSC::B3::Variable *,unsigned int)::$_0>(v131, (uint64_t *)&v156);
        goto LABEL_53;
      }
      if (v78 >= 9)
      {
        __break(0xC471u);
        JUMPOUT(0x198DF4144);
      }
      v7 = JSC::Wasm::OMGIRGenerator::emitCheckAndPreparePointer((JSC::Wasm::OMGIRGenerator *)v8, (JSC::B3::Value *)v66, v151, dword_19915AC14[(char)v78]);
      if ((v151 & 0x80000000) != 0)
      {
        v138 = *((_QWORD *)v8 + 11);
        v139 = (JSC::B3::Value *)*((_QWORD *)v8 + 7);
        if (*(_QWORD *)v8)
          v140 = *(_QWORD *)(*(_QWORD *)v8 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v8 + 14992) << 32);
        else
          v140 = 0;
        v141 = JSC::B3::BasicBlock::appendNew<JSC::B3::Const64Value,JSC::B3::Origin,unsigned int>(*((_QWORD *)v8 + 11), *((JSC::B3::Value **)v8 + 7), v140, v151);
        v7 = (uint64_t)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Const64Value *>(v138, v139, v140, v7, v141);
        v6 = 0;
      }
      if (v78 >= 4)
      {
        switch(v65)
        {
          case ':':
            goto LABEL_60;
          case ';':
            goto LABEL_92;
          case '<':
            goto LABEL_83;
          case '=':
            if (*(_QWORD *)v8)
              v118 = *(_QWORD *)(*(_QWORD *)v8 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v8
                                                                                                  + 14992) << 32);
            else
              v118 = 0;
            v10 = (uint64_t)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(*((_QWORD *)v8 + 11), *((JSC::B3::Value **)v8 + 7), 44, v118, v10);
LABEL_92:
            if (v8[32] == 1 || *(_BYTE *)(*((_QWORD *)v8 + 2) + 112))
              v119 = 581;
            else
              v119 = 69;
            if (*(_QWORD *)v8)
              v120 = *(_QWORD *)(*(_QWORD *)v8 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v8
                                                                                                  + 14992) << 32);
            else
              v120 = 0;
            JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,int>(*((JSC::B3::BasicBlock **)v8 + 11), *((JSC::B3::Value **)v8 + 7), v119, v120, v10, v7, v6);
            goto LABEL_53;
          case '>':
            if (*(_QWORD *)v8)
              v117 = *(_QWORD *)(*(_QWORD *)v8 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v8
                                                                                                  + 14992) << 32);
            else
              v117 = 0;
            v10 = (uint64_t)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(*((_QWORD *)v8 + 11), *((JSC::B3::Value **)v8 + 7), 44, v117, v10);
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198DF3EA4);
        }
      }
      if (v8[32] == 1 || *(_BYTE *)(*((_QWORD *)v8 + 2) + 112))
        v79 = 582;
      else
        v79 = 70;
      v80 = *((_QWORD *)v8 + 11);
      v81 = (JSC::B3::Value *)*((_QWORD *)v8 + 7);
      if (*(_QWORD *)v8)
        v82 = *(_QWORD *)(*(_QWORD *)v8 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v8 + 14992) << 32);
      else
        v82 = 0;
      v83 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (v83)
      {
        v84 = (_BYTE *)(v83 + 9040);
        *(_BYTE *)(v83 + 9040) = 1;
        v85 = *(unsigned int *)(v83 + 9056);
        if ((_DWORD)v85)
        {
          *(_DWORD *)(v83 + 9056) = v85 - *(_DWORD *)(v83 + 9060);
          casual = (char *)(*(_QWORD *)(v83 + 9048) - v85);
          goto LABEL_49;
        }
        v89 = *(_QWORD *)(v83 + 9080);
        v90 = *(_QWORD *)(v83 + 9064);
        if (v89)
          goto LABEL_55;
        if (*(_BYTE *)(v83 + 9045) == 6)
        {
          v132 = *(_DWORD *)(v83 + 9076);
          v133 = *(unsigned int *)(v83 + 9072);
          if (v133 < v132)
          {
            *(_QWORD *)&v84[8 * v133 + 56] = 0;
            v134 = (unint64_t *)(v83 + 8 * v133 + 9104);
            v135 = v132 - 1 - v133;
            while (v135)
            {
              v90 += 1024;
              v137 = *v134++;
              v136 = v137;
              LODWORD(v133) = v133 + 1;
              --v135;
              if (v137)
                goto LABEL_114;
            }
            *(_DWORD *)(v83 + 9072) = v132;
            a4 = v152;
          }
        }
        *v84 = 0;
      }
      goto LABEL_130;
    }
LABEL_136:
    v128 = " value type mismatch";
    v129 = 21;
    goto LABEL_137;
  }
  v128 = " pointer type mismatch";
  v129 = 23;
LABEL_137:
  v156 = v128;
  v157 = v129;
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(&v155, v10 + 14992, (uint64_t)&v156);
  *(_QWORD *)v152 = v155;
  v152[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, uint64_t a5, char *a6, double a7, float a8)
{
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  double v25;
  float v26;
  float v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  char *String;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::PrintStream *v43;
  float v44;
  unsigned int v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  WTF *v55;
  WTF::PrintStream *v56;
  float v57;
  double v58;
  const WTF::String *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  const WTF::String *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  float v73;
  const WTF::String *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  float v81;
  const WTF::String *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  float v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  int v138;
  char v139;
  void (**v140)(WTF::StringPrintStream *__hidden);
  WTF *v141;
  __int128 v142;
  _BYTE v143[128];
  void (**v144)(WTF::StringPrintStream *__hidden);
  WTF *v145;
  __int128 v146;
  _BYTE v147[128];
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  if (*(_QWORD *)a3)
  {
    v13 = *(_QWORD *)(a3 + 8);
    v14 = v13 != 0;
    v15 = v13 - 1;
    if (!v14)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v15, (uint64_t)&v137, a8);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v137 = (WTF::StringImpl *)v16;
    v138 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v144, "StringView", &v137);
  if (v138 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v138])(&v136, &v137);
  v144[5]((WTF::StringPrintStream *)&v144);
  v144[5]((WTF::StringPrintStream *)&v144);
  v24 = v145;
  if (!v145)
  {
    v136 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v136);
  v24 = v145;
  if (v145 != (WTF *)v147)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v135, a2, a4, v25, v26);
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  if (*(_QWORD *)a5)
  {
    v28 = *(_QWORD *)(a5 + 8);
    v14 = v28 != 0;
    v29 = v28 - 1;
    if (!v14)
      v29 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v29, (uint64_t)&v137, v27);
  }
  else
  {
    v30 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v30 = 1;
    *(_QWORD *)(v30 + 8) = 0;
    *(_BYTE *)(v30 + 16) = 0;
    v137 = (WTF::StringImpl *)v30;
    v138 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v144, "StringView", &v137);
  if (v138 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v138])(&v134, &v137);
  v144[5]((WTF::StringPrintStream *)&v144);
  v144[5]((WTF::StringPrintStream *)&v144);
  v38 = v145;
  if (!v145)
  {
    v134 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v134);
  v38 = v145;
  if (v145 != (WTF *)v147)
LABEL_24:
    WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a6);
  v41 = v40;
  v42 = ((uint64_t (*)(_QWORD))v144[4])(&v144);
  v43 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
  if (String)
  {
    v45 = v41 - 1;
    if (!v41)
      v45 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v45, (uint64_t)&v137, v44);
  }
  else
  {
    v46 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v46 = 1;
    *(_QWORD *)(v46 + 8) = 0;
    *(_BYTE *)(v46 + 16) = 0;
    v137 = (WTF::StringImpl *)v46;
    v138 = 0;
  }
  WTF::printExpectedCStringHelper(v43, "StringView", &v137);
  if (v138 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v138])(&v139, &v137);
  (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
  v144[5]((WTF::StringPrintStream *)&v144);
  v144[5]((WTF::StringPrintStream *)&v144);
  v54 = v145;
  if (!v145)
  {
    v137 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v137);
  v54 = v145;
  if (v145 != (WTF *)v147)
LABEL_36:
    WTF::fastFree((unint64_t)v54, v47, v48, v49, v50, v51, v52, v53);
  v55 = (WTF *)((uint64_t (*)(_QWORD))v140[4])(&v140);
  v56 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v55 + 32))(v55);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v144, v57);
  WTF::printExpectedCStringHelper(v56, "StringView", &v144);
  if ((_DWORD)v145 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v145])(&v139, &v144);
  v58 = (*(double (**)(WTF *))(*(_QWORD *)v55 + 40))(v55);
  WTF::printInternal(v55, (WTF::PrintStream *)&v136, v59, v60, v61, v62, v63, v64, v58, v65);
  WTF::printInternal(v55, (WTF::PrintStream *)&v135, v66, v67, v68, v69, v70, v71, v72, v73);
  WTF::printInternal(v55, (WTF::PrintStream *)&v134, v74, v75, v76, v77, v78, v79, v80, v81);
  WTF::printInternal(v55, (WTF::PrintStream *)&v137, v82, v83, v84, v85, v86, v87, v88, v89);
  v140[5]((WTF::StringPrintStream *)&v140);
  v97 = v137;
  v137 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = v134;
  v134 = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
    {
      WTF::StringImpl::~StringImpl(v98, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v98 -= 2;
    }
  }
  v99 = v135;
  v135 = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
    {
      WTF::StringImpl::~StringImpl(v99, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v99 -= 2;
    }
  }
  v100 = v136;
  v136 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  v101 = v141;
  if (v141)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v144);
    v101 = v141;
    *a1 = v144;
    if (v101 == (WTF *)v143)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v101, v90, v91, v92, v93, v94, v95, v96);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [35],JSC::Wasm::Type,char [23],JSC::Wasm::Type,char [15]>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  float v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  WTF *v36;
  WTF::PrintStream *v37;
  float v38;
  double v39;
  const WTF::String *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  const WTF::String *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  float v70;
  const WTF::String *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  float v78;
  WTF::AtomStringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF *v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  char v137;
  void (**v138)(WTF::StringPrintStream *__hidden);
  WTF *v139;
  __int128 v140;
  _BYTE v141[128];
  void (**v142)(WTF::StringPrintStream *__hidden);
  unint64_t v143;
  __int128 v144;
  _BYTE v145[128];
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  v138 = off_1E3572250;
  v139 = (WTF *)v141;
  v140 = xmmword_199122F80;
  v141[0] = 0;
  v142 = off_1E3572250;
  v143 = (unint64_t)v145;
  v144 = xmmword_199122F80;
  v145[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v142, "%s", "table.init requires table's type \"");
  v142[5]((WTF::StringPrintStream *)&v142);
  v15 = v143;
  if (!v143)
  {
    v136 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v143, v144, (uint64_t *)&v136);
  v15 = v143;
  if ((_BYTE *)v143 != v145)
LABEL_5:
    WTF::fastFree(v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v135, a2, a3, v16, v17);
  v142 = off_1E3572250;
  v143 = (unint64_t)v145;
  v144 = xmmword_199122F80;
  v145[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v142, "%s", "\" and element's type \"");
  v142[5]((WTF::StringPrintStream *)&v142);
  v25 = v143;
  if (!v143)
  {
    v134 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v143, v144, (uint64_t *)&v134);
  v25 = v143;
  if ((_BYTE *)v143 != v145)
LABEL_10:
    WTF::fastFree(v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v133, a2, a4, v26, v27);
  v142 = off_1E3572250;
  v143 = (unint64_t)v145;
  v144 = xmmword_199122F80;
  v145[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v142, "%s", "\" are the same");
  v142[5]((WTF::StringPrintStream *)&v142);
  v35 = v143;
  if (!v143)
  {
    v132 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>(v143, v144, (uint64_t *)&v132);
  v35 = v143;
  if ((_BYTE *)v143 != v145)
LABEL_15:
    WTF::fastFree(v35, v28, v29, v30, v31, v32, v33, v34);
  v36 = (WTF *)((uint64_t (*)(_QWORD))v138[4])(&v138);
  v37 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v36 + 32))(v36);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v142, v38);
  WTF::printExpectedCStringHelper(v37, "StringView", &v142);
  if ((_DWORD)v143 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v143])(&v137, &v142);
  v39 = (*(double (**)(WTF *))(*(_QWORD *)v36 + 40))(v36);
  WTF::printInternal(v36, (WTF::PrintStream *)&v136, v40, v41, v42, v43, v44, v45, v39, v46);
  WTF::printInternal(v36, (WTF::PrintStream *)&v135, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v36, (WTF::PrintStream *)&v134, v55, v56, v57, v58, v59, v60, v61, v62);
  WTF::printInternal(v36, (WTF::PrintStream *)&v133, v63, v64, v65, v66, v67, v68, v69, v70);
  WTF::printInternal(v36, (WTF::PrintStream *)&v132, v71, v72, v73, v74, v75, v76, v77, v78);
  v138[5]((WTF::StringPrintStream *)&v138);
  v86 = v132;
  v132 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v133;
  v133 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = v134;
  v134 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  v89 = v135;
  v135 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
  v90 = v136;
  v136 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::~StringImpl(v90, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
    }
    else
    {
      *(_DWORD *)v90 -= 2;
    }
  }
  v91 = v139;
  if (v139)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v139, v140, (uint64_t *)&v142);
    v91 = v139;
    *a1 = v142;
    if (v91 == (WTF *)v141)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v91, v79, v80, v81, v82, v83, v84, v85);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [32],JSC::Wasm::Type,char [11],JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, const char *a3, JSC::Wasm::Type *a4, char *a5)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  float v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *String;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::PrintStream *v31;
  float v32;
  unsigned int v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  WTF *v43;
  WTF::PrintStream *v44;
  float v45;
  double v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  const WTF::String *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  float v61;
  const WTF::String *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  float v69;
  const WTF::String *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  float v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  int v126;
  char v127;
  void (**v128)(WTF::StringPrintStream *__hidden);
  WTF *v129;
  __int128 v130;
  _BYTE v131[128];
  void (**v132)(WTF::StringPrintStream *__hidden);
  unint64_t v133;
  __int128 v134;
  _BYTE v135[128];
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v128 = off_1E3572250;
  v129 = (WTF *)v131;
  v130 = xmmword_199122F80;
  v131[0] = 0;
  v132 = off_1E3572250;
  v133 = (unint64_t)v135;
  v134 = xmmword_199122F80;
  v135[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v132, "%s", a3);
  v132[5]((WTF::StringPrintStream *)&v132);
  v16 = v133;
  if (!v133)
  {
    v124 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v133, v134, (uint64_t *)&v124);
  v16 = v133;
  if ((_BYTE *)v133 != v135)
LABEL_5:
    WTF::fastFree(v16, v9, v10, v11, v12, v13, v14, v15);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v123, a2, a4, v17, v18);
  v132 = off_1E3572250;
  v133 = (unint64_t)v135;
  v134 = xmmword_199122F80;
  v135[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v132, "%s", " expected ");
  v132[5]((WTF::StringPrintStream *)&v132);
  v26 = v133;
  if (!v133)
  {
    v122 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v133, v134, (uint64_t *)&v122);
  v26 = v133;
  if ((_BYTE *)v133 != v135)
LABEL_10:
    WTF::fastFree(v26, v19, v20, v21, v22, v23, v24, v25);
  v132 = off_1E3572250;
  v133 = (unint64_t)v135;
  v134 = xmmword_199122F80;
  v135[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a5);
  v29 = v28;
  v30 = ((uint64_t (*)(_QWORD))v132[4])(&v132);
  v31 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
  if (String)
  {
    v33 = v29 - 1;
    if (!v29)
      v33 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v33, (uint64_t)&v125, v32);
  }
  else
  {
    v34 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v34 = 1;
    *(_QWORD *)(v34 + 8) = 0;
    *(_BYTE *)(v34 + 16) = 0;
    v125 = (WTF::StringImpl *)v34;
    v126 = 0;
  }
  WTF::printExpectedCStringHelper(v31, "StringView", &v125);
  if (v126 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v126])(&v127, &v125);
  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
  v132[5]((WTF::StringPrintStream *)&v132);
  v132[5]((WTF::StringPrintStream *)&v132);
  v42 = v133;
  if (!v133)
  {
    v125 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>(v133, v134, (uint64_t *)&v125);
  v42 = v133;
  if ((_BYTE *)v133 != v135)
LABEL_22:
    WTF::fastFree(v42, v35, v36, v37, v38, v39, v40, v41);
  v43 = (WTF *)((uint64_t (*)(_QWORD))v128[4])(&v128);
  v44 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v43 + 32))(v43);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v132, v45);
  WTF::printExpectedCStringHelper(v44, "StringView", &v132);
  if ((_DWORD)v133 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v133])(&v127, &v132);
  v46 = (*(double (**)(WTF *))(*(_QWORD *)v43 + 40))(v43);
  WTF::printInternal(v43, (WTF::PrintStream *)&v124, v47, v48, v49, v50, v51, v52, v46, v53);
  WTF::printInternal(v43, (WTF::PrintStream *)&v123, v54, v55, v56, v57, v58, v59, v60, v61);
  WTF::printInternal(v43, (WTF::PrintStream *)&v122, v62, v63, v64, v65, v66, v67, v68, v69);
  WTF::printInternal(v43, (WTF::PrintStream *)&v125, v70, v71, v72, v73, v74, v75, v76, v77);
  v128[5]((WTF::StringPrintStream *)&v128);
  v85 = v125;
  v125 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = v122;
  v122 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v123;
  v123 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = v124;
  v124 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  v89 = v129;
  if (v129)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v129, v130, (uint64_t *)&v132);
    v89 = v129;
    *a1 = v132;
    if (v89 == (WTF *)v131)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v89, v78, v79, v80, v81, v82, v83, v84);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [28],JSC::Wasm::Type,char [11],JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, char *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *String;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::PrintStream *v30;
  float v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  WTF *v42;
  WTF::PrintStream *v43;
  float v44;
  double v45;
  const WTF::String *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  const WTF::String *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  float v60;
  const WTF::String *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  float v68;
  const WTF::String *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  float v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF *v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  int v125;
  char v126;
  void (**v127)(WTF::StringPrintStream *__hidden);
  WTF *v128;
  __int128 v129;
  _BYTE v130[128];
  void (**v131)(WTF::StringPrintStream *__hidden);
  unint64_t v132;
  __int128 v133;
  _BYTE v134[128];
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v127 = off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%s", "memory.init length to type ");
  v131[5]((WTF::StringPrintStream *)&v131);
  v15 = v132;
  if (!v132)
  {
    v123 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v123);
  v15 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_5:
    WTF::fastFree(v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v122, a2, a3, v16, v17);
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%s", " expected ");
  v131[5]((WTF::StringPrintStream *)&v131);
  v25 = v132;
  if (!v132)
  {
    v121 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v121);
  v25 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_10:
    WTF::fastFree(v25, v18, v19, v20, v21, v22, v23, v24);
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a4);
  v28 = v27;
  v29 = ((uint64_t (*)(_QWORD))v131[4])(&v131);
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
  if (String)
  {
    v32 = v28 - 1;
    if (!v28)
      v32 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v32, (uint64_t)&v124, v31);
  }
  else
  {
    v33 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v33 = 1;
    *(_QWORD *)(v33 + 8) = 0;
    *(_BYTE *)(v33 + 16) = 0;
    v124 = (WTF::StringImpl *)v33;
    v125 = 0;
  }
  WTF::printExpectedCStringHelper(v30, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
  v131[5]((WTF::StringPrintStream *)&v131);
  v131[5]((WTF::StringPrintStream *)&v131);
  v41 = v132;
  if (!v132)
  {
    v124 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v124);
  v41 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_22:
    WTF::fastFree(v41, v34, v35, v36, v37, v38, v39, v40);
  v42 = (WTF *)((uint64_t (*)(_QWORD))v127[4])(&v127);
  v43 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v42 + 32))(v42);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v131, v44);
  WTF::printExpectedCStringHelper(v43, "StringView", &v131);
  if ((_DWORD)v132 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v132])(&v126, &v131);
  v45 = (*(double (**)(WTF *))(*(_QWORD *)v42 + 40))(v42);
  WTF::printInternal(v42, (WTF::PrintStream *)&v123, v46, v47, v48, v49, v50, v51, v45, v52);
  WTF::printInternal(v42, (WTF::PrintStream *)&v122, v53, v54, v55, v56, v57, v58, v59, v60);
  WTF::printInternal(v42, (WTF::PrintStream *)&v121, v61, v62, v63, v64, v65, v66, v67, v68);
  WTF::printInternal(v42, (WTF::PrintStream *)&v124, v69, v70, v71, v72, v73, v74, v75, v76);
  v127[5]((WTF::StringPrintStream *)&v127);
  v84 = v124;
  v124 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  v85 = v121;
  v121 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = v122;
  v122 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v123;
  v123 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = v128;
  if (v128)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v131);
    v88 = v128;
    *a1 = v131;
    if (v88 == (WTF *)v130)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v88, v77, v78, v79, v80, v81, v82, v83);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::truncSaturated(_BYTE *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, float a9)
{
  unsigned int v11;
  unsigned __int8 v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  float v29;
  WTF::StringImpl *v30;
  int v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  JSC::B3::Value *v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  char **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned int v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  unsigned int v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  JSC::B3::Value *v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  char v64;
  char **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t *v73;
  unsigned int v74;
  uint64_t v75;
  JSC::B3::Value *v76;
  unint64_t v77;
  JSC::B3::Value *v78;
  char **v79;
  uint64_t v80;
  uint64_t v81;
  JSC::B3::Value *v82;
  unint64_t v83;
  JSC::B3::Value *v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  JSC::B3::Value **v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  JSC::B3::Value *v93;
  unint64_t v94;
  JSC::B3::Value *v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  JSC::B3::Value **v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  JSC::B3::Value **v104;
  uint64_t v105;
  uint64_t v106;
  WTF *PushVariable;
  uint64_t v108;
  JSC::B3::Value *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char **v117;
  uint64_t v118;
  unsigned int v119;
  _QWORD *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  void (**v129)(WTF::StringPrintStream *__hidden);
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  JSC::B3::Value *v135;
  unint64_t v136;
  char **v137;
  uint64_t v138;
  JSC::B3::Procedure *v139;
  JSC::B3::Value *v140;
  uint64_t v141;
  JSC::B3::Procedure *v142;
  _BYTE *v143;
  _QWORD v145[2];
  uint64_t v146[2];
  void (**v147)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v148;
  _QWORD v149[2];
  __int128 v150;
  const char *v151;
  uint64_t v152;

  *(_QWORD *)&v150 = a4;
  *((_QWORD *)&v150 + 1) = a5;
  v149[0] = a6;
  v149[1] = a7;
  v11 = *(_DWORD *)(a2 + 68);
  if (!v11)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "unary", 6, &v151, a9);
    v129 = (void (**)(WTF::StringPrintStream *__hidden))v151;
LABEL_95:
    *(_QWORD *)a1 = v129;
    a1[8] = 1;
    return;
  }
  v13 = a6;
  v16 = *(_QWORD *)(a2 + 48);
  v17 = *(_QWORD *)(a2 + 56) + 24 * v11;
  v19 = *(_QWORD *)(v17 - 24);
  v18 = *(_QWORD *)(v17 - 16);
  v20 = *(_QWORD *)(v17 - 8);
  *(_DWORD *)(a2 + 68) = v11 - 1;
  v151 = "WasmFunctionParser.h:";
  LODWORD(v152) = 21;
  LODWORD(v146[0]) = 595;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v151, (unsigned int *)v146, (int **)&v148);
  v30 = v148;
  if (!v148)
  {
    __break(0xC471u);
    JUMPOUT(0x198DF5FF0);
  }
  v31 = *(_DWORD *)(v16 + 512);
  if (!v31)
  {
    __break(0xC471u);
    JUMPOUT(0x198DF5FF8);
  }
  *(_DWORD *)(v16 + 512) = v31 - 1;
  v148 = 0;
  if (*(_DWORD *)v30 == 2)
  {
    WTF::StringImpl::~StringImpl(v30, v21, v22, v23, v24, v25, v26, v27);
    WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
  }
  else
  {
    *(_DWORD *)v30 -= 2;
  }
  if (v13 != v19)
  {
LABEL_94:
    v151 = "trunc-saturated value type mismatch. Expected: ";
    v152 = 48;
    v146[0] = (uint64_t)" but expression stack has ";
    v146[1] = 27;
    v145[0] = v19;
    v145[1] = v18;
    JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(&v147, a2, (uint64_t)&v151, (JSC::Wasm::Type *)v149, (uint64_t)v146, (JSC::Wasm::Type *)v145, v28, v29);
    v129 = v147;
    goto LABEL_95;
  }
  if (v13 - 239 < 2 || v13 == 227)
  {
    if (a7 == v18)
      v32 = ((v13 + 29) < 0xEu) & (0x3001u >> (v13 + 29));
    else
      v32 = 0;
    if ((v32 & 1) == 0)
      goto LABEL_94;
  }
  else
  {
    if (a7 == v18)
      v130 = ((v13 + 29) < 0xEu) & (0x3001u >> (v13 + 29));
    else
      v130 = 1;
    if (v130 == 1)
      goto LABEL_94;
  }
  v146[0] = 0;
  v33 = *(uint64_t **)(a2 + 48);
  v34 = v33[11];
  v35 = (JSC::B3::Value *)v33[7];
  if (*v33)
    v36 = *(_QWORD *)(*v33 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v33 + 14992) << 32);
  else
    v36 = 0;
  v37 = WTF::fastMalloc((WTF *)0x30);
  v38 = *(_DWORD *)(v20 + 4);
  *(_DWORD *)(v37 + 8) = -1;
  *(_WORD *)(v37 + 12) = 10;
  *(_DWORD *)(v37 + 16) = v38;
  *(_BYTE *)(v37 + 20) = 0;
  *(_QWORD *)(v37 + 24) = v36;
  *(_QWORD *)(v37 + 32) = 0;
  *(_QWORD *)v37 = off_1E357F0F8;
  *(_QWORD *)(v37 + 40) = v20;
  JSC::B3::Procedure::addValueImpl(v35, (JSC::B3::Value *)v37);
  v151 = (const char *)v37;
  v39 = (char **)(v34 + 8);
  v40 = *(unsigned int *)(v34 + 20);
  if ((_DWORD)v40 == *(_DWORD *)(v34 + 16))
  {
    v45 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v39, v40 + 1, (unint64_t)&v151);
    v40 = *(unsigned int *)(v34 + 20);
    *(_QWORD *)(*(_QWORD *)(v34 + 8) + 8 * v40) = *(_QWORD *)v45;
    v41 = (uint64_t)v151;
  }
  else
  {
    *(_QWORD *)&(*v39)[8 * v40] = v37;
    v41 = v37;
  }
  *(_DWORD *)(v34 + 20) = v40 + 1;
  *(_QWORD *)(v41 + 32) = v34;
  switch(a3)
  {
    case 0:
      v141 = JSC::Wasm::OMGIRGenerator::constant(v33, 3u, 0x4F000000uLL, 0, 0);
      v42 = v33;
      v43 = 3;
      v44 = 3472883712;
      goto LABEL_28;
    case 1:
      v141 = JSC::Wasm::OMGIRGenerator::constant(v33, 3u, 0x4F800000uLL, 0, 0);
      v42 = v33;
      v43 = 3;
      v44 = 3212836864;
      goto LABEL_28;
    case 2:
      v141 = JSC::Wasm::OMGIRGenerator::constant(v33, 4u, 0x41E0000000000000uLL, 0, 0);
      v42 = v33;
      v43 = 4;
      v44 = 0xC1E0000000200000;
      goto LABEL_28;
    case 3:
      v141 = JSC::Wasm::OMGIRGenerator::constant(v33, 4u, 0x41F0000000000000uLL, 0, 0);
      v42 = v33;
      v43 = 4;
      v44 = 0xBFF0000000000000;
      goto LABEL_28;
    case 4:
      v141 = JSC::Wasm::OMGIRGenerator::constant(v33, 3u, 0x5F000000uLL, 0, 0);
      v42 = v33;
      v43 = 3;
      v44 = 3741319168;
      goto LABEL_28;
    case 5:
      v141 = JSC::Wasm::OMGIRGenerator::constant(v33, 3u, 0x5F800000uLL, 0, 0);
      v54 = v33;
      v55 = 3;
      v56 = 3212836864;
      goto LABEL_26;
    case 6:
      v141 = JSC::Wasm::OMGIRGenerator::constant(v33, 4u, 0x43E0000000000000uLL, 0, 0);
      v42 = v33;
      v43 = 4;
      v44 = 0xC3E0000000000000;
LABEL_28:
      v139 = (JSC::B3::Procedure *)JSC::Wasm::OMGIRGenerator::constant(v42, v43, v44, 0, 0);
      v57 = 0;
      break;
    case 7:
      v141 = JSC::Wasm::OMGIRGenerator::constant(v33, 4u, 0x43F0000000000000uLL, 0, 0);
      v54 = v33;
      v55 = 4;
      v56 = 0xBFF0000000000000;
LABEL_26:
      v139 = (JSC::B3::Procedure *)JSC::Wasm::OMGIRGenerator::constant(v54, v55, v56, 0, 0);
      v57 = 1;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198DF5FC8);
  }
  v142 = (JSC::B3::Procedure *)a2;
  v58 = v33[11];
  v59 = (JSC::B3::Value *)v33[7];
  v132 = a5;
  v60 = JSC::Wasm::toB3Type(a4);
  v143 = a1;
  if (*v33)
    v61 = *(_QWORD *)(*v33 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v33 + 14992) << 32);
  else
    v61 = 0;
  v62 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v62 = off_1E357F5F0;
  *(_DWORD *)(v62 + 8) = -1;
  *(_WORD *)(v62 + 12) = 83;
  *(_DWORD *)(v62 + 16) = v60;
  *(_BYTE *)(v62 + 20) = 4;
  *(_QWORD *)(v62 + 24) = v61;
  *(_QWORD *)(v62 + 32) = 0;
  v63 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v62);
  *v63 = v63 + 2;
  v63[1] = 3;
  *(_OWORD *)(v62 + 40) = 0u;
  *(_OWORD *)(v62 + 56) = 0u;
  *(_OWORD *)(v62 + 72) = 0u;
  *(_OWORD *)(v62 + 88) = 0u;
  *(_QWORD *)(v62 + 104) = 0;
  *(_QWORD *)v62 = off_1E357E700;
  *(_OWORD *)(v62 + 112) = xmmword_1991243D0;
  *(_QWORD *)(v62 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v62 + 136) = v62 + 152;
  *(_QWORD *)(v62 + 144) = 1;
  *(_WORD *)(v62 + 168) = 0;
  if ((v60 & 0x80000000) == 0)
  {
    if (v60)
      v64 = 3;
    else
      v64 = 0;
    *(_QWORD *)(v62 + 152) = 0;
    *(_BYTE *)(v62 + 160) = v64;
    *(_DWORD *)(v62 + 148) = 1;
  }
  JSC::B3::Procedure::addValueImpl(v59, (JSC::B3::Value *)v62);
  v151 = (const char *)v62;
  v65 = (char **)(v58 + 8);
  v66 = *(unsigned int *)(v58 + 20);
  if ((_DWORD)v66 == *(_DWORD *)(v58 + 16))
  {
    v121 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v65, v66 + 1, (unint64_t)&v151);
    v66 = *(unsigned int *)(v58 + 20);
    *(_QWORD *)(*(_QWORD *)(v58 + 8) + 8 * v66) = *(_QWORD *)v121;
    v67 = (uint64_t)v151;
  }
  else
  {
    *(_QWORD *)&(*v65)[8 * v66] = v62;
    v67 = v62;
  }
  *(_DWORD *)(v58 + 20) = v66 + 1;
  *(_QWORD *)(v67 + 32) = v58;
  v151 = 0;
  LOBYTE(v152) = 3;
  JSC::B3::StackmapValue::append((__int128 *)v62, v37, (unint64_t)&v151);
  if (v57)
  {
    *(_QWORD *)(v62 + 64) |= 0x30000uLL;
    *(_QWORD *)(v62 + 80) |= 0x30000uLL;
  }
  v68 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v68 = off_1E35B6328;
  *(_DWORD *)(v68 + 8) = 1;
  *(_DWORD *)(v68 + 12) = a3;
  v69 = *(unsigned int **)(v62 + 56);
  *(_QWORD *)(v62 + 56) = v68;
  if (v69)
  {
    v70 = v69 + 2;
    do
    {
      v71 = __ldaxr(v70);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, v70));
    if (!v72)
    {
      atomic_store(1u, v69 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v69 + 8))(v69);
    }
  }
  *(_QWORD *)(v62 + 112) = 0;
  *(_QWORD *)(v62 + 120) = 0;
  *(_QWORD *)(v62 + 128) = 0;
  switch(a3)
  {
    case 0:
    case 2:
      v134 = 1;
      v133 = JSC::Wasm::OMGIRGenerator::constant(v33, 1u, 0x7FFFFFFFuLL, 0, 0);
      v138 = JSC::Wasm::OMGIRGenerator::constant(v33, 1u, 0x80000000uLL, 0, 0);
      v131 = JSC::Wasm::OMGIRGenerator::constant(v33, 1u, 0, 0, 0);
      goto LABEL_51;
    case 1:
    case 3:
      v133 = JSC::Wasm::OMGIRGenerator::constant(v33, 1u, 0xFFFFFFFFuLL, 0, 0);
      v73 = v33;
      v74 = 1;
      goto LABEL_50;
    case 4:
    case 6:
      v133 = JSC::Wasm::OMGIRGenerator::constant(v33, 2u, 0x7FFFFFFFFFFFFFFFuLL, 0, 0);
      v138 = JSC::Wasm::OMGIRGenerator::constant(v33, 2u, 0x8000000000000000, 0, 0);
      v131 = JSC::Wasm::OMGIRGenerator::constant(v33, 2u, 0, 0, 0);
      v134 = 1;
      goto LABEL_51;
    case 5:
    case 7:
      v133 = JSC::Wasm::OMGIRGenerator::constant(v33, 2u, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
      v73 = v33;
      v74 = 2;
LABEL_50:
      v138 = JSC::Wasm::OMGIRGenerator::constant(v73, v74, 0, 0, 0);
      v131 = 0;
      v134 = 0;
LABEL_51:
      v75 = v33[11];
      v76 = (JSC::B3::Value *)v33[7];
      if (*v33)
        v77 = *(_QWORD *)(*v33 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v33 + 14992) << 32);
      else
        v77 = 0;
      v136 = v77;
      v78 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(54, v77, v37, (uint64_t)v139);
      JSC::B3::Procedure::addValueImpl(v76, v78);
      v151 = (const char *)v78;
      v79 = (char **)(v75 + 8);
      v80 = *(unsigned int *)(v75 + 20);
      v137 = (char **)(v75 + 8);
      v135 = v78;
      if ((_DWORD)v80 == *(_DWORD *)(v75 + 16))
      {
        v122 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v79, v80 + 1, (unint64_t)&v151);
        v80 = *(unsigned int *)(v75 + 20);
        *(_QWORD *)(*(_QWORD *)(v75 + 8) + 8 * v80) = *(_QWORD *)v122;
        v78 = (JSC::B3::Value *)v151;
      }
      else
      {
        *(_QWORD *)&(*v79)[8 * v80] = v78;
      }
      *(_DWORD *)(v75 + 20) = v80 + 1;
      *((_QWORD *)v78 + 4) = v75;
      v81 = v33[11];
      v82 = (JSC::B3::Value *)v33[7];
      if (*v33)
        v83 = *(_QWORD *)(*v33 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v33 + 14992) << 32);
      else
        v83 = 0;
      v84 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(53, v83, v37, v141);
      JSC::B3::Procedure::addValueImpl(v82, v84);
      v151 = (const char *)v84;
      v85 = (_QWORD *)(v81 + 8);
      v86 = *(unsigned int *)(v81 + 20);
      v140 = v76;
      if ((_DWORD)v86 == *(_DWORD *)(v81 + 16))
      {
        v123 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v81 + 8), v86 + 1, (unint64_t)&v151);
        v86 = *(unsigned int *)(v81 + 20);
        *(_QWORD *)(*(_QWORD *)(v81 + 8) + 8 * v86) = *(_QWORD *)v123;
        v87 = v151;
      }
      else
      {
        *(_QWORD *)(*v85 + 8 * v86) = v84;
        v87 = v84;
      }
      *(_DWORD *)(v81 + 20) = v86 + 1;
      v87[4] = v81;
      v88 = WTF::fastMalloc((WTF *)0x40);
      *(_QWORD *)v88 = off_1E357F5F0;
      *(_DWORD *)(v88 + 8) = -1;
      *(_WORD *)(v88 + 12) = 62;
      *(_DWORD *)(v88 + 16) = *(_DWORD *)(v62 + 16);
      *(_BYTE *)(v88 + 20) = 3;
      *(_QWORD *)(v88 + 24) = v83;
      *(_QWORD *)(v88 + 32) = 0;
      v89 = (JSC::B3::Value **)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v88);
      *v89 = v84;
      v89[1] = (JSC::B3::Value *)v62;
      v89[2] = (JSC::B3::Value *)v133;
      JSC::B3::Procedure::addValueImpl(v82, (JSC::B3::Value *)v88);
      v151 = (const char *)v88;
      v90 = *(unsigned int *)(v81 + 20);
      if ((_DWORD)v90 == *(_DWORD *)(v81 + 16))
      {
        v124 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v81 + 8), v90 + 1, (unint64_t)&v151);
        v90 = *(unsigned int *)(v81 + 20);
        *(_QWORD *)(*(_QWORD *)(v81 + 8) + 8 * v90) = *(_QWORD *)v124;
        v91 = (uint64_t)v151;
      }
      else
      {
        *(_QWORD *)(*v85 + 8 * v90) = v88;
        v91 = v88;
      }
      *(_DWORD *)(v81 + 20) = v90 + 1;
      *(_QWORD *)(v91 + 32) = v81;
      if (v134)
      {
        v92 = v33[11];
        v93 = (JSC::B3::Value *)v33[7];
        if (*v33)
          v94 = *(_QWORD *)(*v33 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v33 + 14992) << 32);
        else
          v94 = 0;
        v95 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, v94, v37, v37);
        JSC::B3::Procedure::addValueImpl(v93, v95);
        v151 = (const char *)v95;
        v96 = (_QWORD *)(v92 + 8);
        v97 = *(unsigned int *)(v92 + 20);
        if ((_DWORD)v97 == *(_DWORD *)(v92 + 16))
        {
          v127 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v92 + 8), v97 + 1, (unint64_t)&v151);
          v97 = *(unsigned int *)(v92 + 20);
          *(_QWORD *)(*(_QWORD *)(v92 + 8) + 8 * v97) = *(_QWORD *)v127;
          v98 = v151;
        }
        else
        {
          *(_QWORD *)(*v96 + 8 * v97) = v95;
          v98 = v95;
        }
        *(_DWORD *)(v92 + 20) = v97 + 1;
        v98[4] = v92;
        v99 = WTF::fastMalloc((WTF *)0x40);
        *(_QWORD *)v99 = off_1E357F5F0;
        *(_DWORD *)(v99 + 8) = -1;
        *(_WORD *)(v99 + 12) = 62;
        *(_DWORD *)(v99 + 16) = *(_DWORD *)(v138 + 16);
        *(_BYTE *)(v99 + 20) = 3;
        *(_QWORD *)(v99 + 24) = v94;
        *(_QWORD *)(v99 + 32) = 0;
        v100 = (JSC::B3::Value **)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v99);
        *v100 = v95;
        v100[1] = (JSC::B3::Value *)v138;
        v100[2] = (JSC::B3::Value *)v131;
        JSC::B3::Procedure::addValueImpl(v93, (JSC::B3::Value *)v99);
        v151 = (const char *)v99;
        v101 = *(unsigned int *)(v92 + 20);
        if ((_DWORD)v101 == *(_DWORD *)(v92 + 16))
        {
          v128 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v92 + 8), v101 + 1, (unint64_t)&v151);
          v101 = *(unsigned int *)(v92 + 20);
          *(_QWORD *)(*(_QWORD *)(v92 + 8) + 8 * v101) = *(_QWORD *)v128;
          v102 = (uint64_t)v151;
        }
        else
        {
          *(_QWORD *)(*v96 + 8 * v101) = v99;
          v102 = v99;
        }
        *(_DWORD *)(v92 + 20) = v101 + 1;
        *(_QWORD *)(v102 + 32) = v92;
      }
      else
      {
        v99 = v138;
      }
      v103 = WTF::fastMalloc((WTF *)0x40);
      *(_QWORD *)v103 = off_1E357F5F0;
      *(_DWORD *)(v103 + 8) = -1;
      *(_WORD *)(v103 + 12) = 62;
      *(_DWORD *)(v103 + 16) = *(_DWORD *)(v88 + 16);
      *(_BYTE *)(v103 + 20) = 3;
      *(_QWORD *)(v103 + 24) = v136;
      *(_QWORD *)(v103 + 32) = 0;
      v104 = (JSC::B3::Value **)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v103);
      *v104 = v135;
      v104[1] = (JSC::B3::Value *)v88;
      v104[2] = (JSC::B3::Value *)v99;
      JSC::B3::Procedure::addValueImpl(v140, (JSC::B3::Value *)v103);
      v151 = (const char *)v103;
      v105 = *(unsigned int *)(v75 + 20);
      if ((_DWORD)v105 == *(_DWORD *)(v75 + 16))
      {
        v125 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v137, v105 + 1, (unint64_t)&v151);
        v105 = *(unsigned int *)(v75 + 20);
        *(_QWORD *)(*(_QWORD *)(v75 + 8) + 8 * v105) = *(_QWORD *)v125;
        v106 = (uint64_t)v151;
      }
      else
      {
        *(_QWORD *)&(*v137)[8 * v105] = v103;
        v106 = v103;
      }
      *(_DWORD *)(v75 + 20) = v105 + 1;
      *(_QWORD *)(v106 + 32) = v75;
      PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)v33, *(_DWORD *)(v103 + 16));
      v108 = v33[11];
      v109 = (JSC::B3::Value *)v33[7];
      if (*v33)
        v110 = *(_QWORD *)(*v33 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v33 + 14992) << 32);
      else
        v110 = 0;
      v111 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v111 + 8) = -1;
      *(_WORD *)(v111 + 12) = 9;
      *(_DWORD *)(v111 + 16) = 0;
      *(_BYTE *)(v111 + 20) = 1;
      *(_QWORD *)(v111 + 24) = v110;
      *(_QWORD *)(v111 + 32) = 0;
      *(_QWORD *)v111 = off_1E357F0F8;
      *(_QWORD *)(v111 + 40) = PushVariable;
      *(_QWORD *)(v111 + 48) = v103;
      JSC::B3::Procedure::addValueImpl(v109, (JSC::B3::Value *)v111);
      v151 = (const char *)v111;
      v117 = (char **)(v108 + 8);
      v118 = *(unsigned int *)(v108 + 20);
      if ((_DWORD)v118 == *(_DWORD *)(v108 + 16))
      {
        v126 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v117, v118 + 1, (unint64_t)&v151);
        v118 = *(unsigned int *)(v108 + 20);
        *(_QWORD *)(*(_QWORD *)(v108 + 8) + 8 * v118) = *(_QWORD *)v126;
        v111 = (uint64_t)v151;
      }
      else
      {
        *(_QWORD *)&(*v117)[8 * v118] = v111;
      }
      *(_DWORD *)(v108 + 20) = v118 + 1;
      *(_QWORD *)(v111 + 32) = v108;
      v146[0] = (uint64_t)PushVariable;
      v119 = *((_DWORD *)v142 + 17);
      if (v119 == *((_DWORD *)v142 + 16))
      {
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::B3::Variable *>((uint64_t)v142 + 56, &v150, v146, v112, v113, v114, v115, v116);
      }
      else
      {
        v120 = (_QWORD *)(*((_QWORD *)v142 + 7) + 24 * v119);
        *v120 = a4;
        v120[1] = v132;
        v120[2] = PushVariable;
        ++*((_DWORD *)v142 + 17);
      }
      *v143 = 0;
      v143[8] = 0;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198DF5FE8);
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseArrayTypeDefinition(uint64_t a1, unint64_t *a2, char *a3, uint64_t a4, unsigned int a5, _DWORD *a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  JSC::Wasm::TypeInformation *v24;
  unint64_t v25;
  int v26;
  __int128 *v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  const char *v31;
  uint64_t v32;
  void (**v33)(WTF::StringPrintStream *__hidden);
  unsigned int *v34;
  WTF *v35;
  JSC::Wasm::TypeDefinition *v36;
  JSC::Wasm::TypeInformation *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 hasRecursiveReference;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t CachedUnrolling;
  uint64_t v46;
  uint64_t v47;
  const JSC::Wasm::Type *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  WTF *v53;
  const JSC::Wasm::TypeDefinition *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  _QWORD v61[2];
  const char *v62;
  uint64_t v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  _QWORD v65[2];

  v65[0] = a3;
  v65[1] = a4;
  v11 = a2[2];
  v12 = *a2;
  v13 = v11 - *a2;
  if (v11 <= *a2)
    goto LABEL_28;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = a2[1];
  *a6 = 0;
  v18 = 5;
  if (v13 < 5)
    v18 = v13;
  v19 = v18 - 1;
  *a2 = v12 + 1;
  v20 = v17 + v12;
  v21 = v12 + 2;
  while (1)
  {
    v22 = *(char *)(v20 + v14);
    v16 |= (v22 & 0x7F) << v15;
    *a6 = v16;
    if ((v22 & 0x80000000) == 0)
      break;
    if (v19 == v14)
      goto LABEL_28;
    LOBYTE(v22) = v21 + v14;
    *a2 = v21 + v14;
    v15 += 7;
    if (v13 == ++v14)
    {
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v14 == 4 && v22 >= 0x10u)
  {
LABEL_28:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't get type index for ", a2, 26, a3, a4, &v62, a10);
    v33 = (void (**)(WTF::StringPrintStream *__hidden))v62;
    goto LABEL_22;
  }
  v23 = a2[1870];
  if (v16 >= *(_DWORD *)(v23 + 100))
  {
    v62 = " index ";
    v63 = 8;
    v31 = " is out of bounds";
    v32 = 18;
LABEL_21:
    v61[0] = v31;
    v61[1] = v32;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v64, (uint64_t)v65, (uint64_t)&v62, a6, (uint64_t)v61, a9, a10);
    v33 = v64;
LABEL_22:
    *(_QWORD *)a1 = v33;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v24 = *(JSC::Wasm::TypeInformation **)(*(_QWORD *)(v23 + 88) + 8 * v16);
  v25 = (unint64_t)v24;
  if (*((_DWORD *)v24 + 8) == 4)
  {
    v34 = (unsigned int *)*((_QWORD *)v24 + 1);
    v35 = *(WTF **)v34;
    v36 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v34 + 8) + 8 * v34[2]);
    v37 = v24;
    v38 = (uint64_t)a6;
    v39 = a8;
    v40 = a7;
    v60 = a5;
    hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v36);
    a5 = v60;
    a7 = v40;
    a8 = v39;
    a6 = (_DWORD *)v38;
    v25 = (unint64_t)v36;
    v24 = v37;
    if (hasRecursiveReference)
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v37, v42, v43, v44, v60, v38, v40, v39);
      if (v52)
      {
        v25 = CachedUnrolling;
        a6 = (_DWORD *)v38;
        a8 = v39;
        a7 = v40;
        a5 = v60;
        v24 = v37;
      }
      else
      {
        v53 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v36, v35, v46, v47, v48, v49, v50, v51);
        JSC::Wasm::TypeInformation::addCachedUnrolling(v37, v53, v54, v55, v56, v57, v58, v59);
        v25 = (unint64_t)v53;
        v24 = v37;
        a6 = (_DWORD *)v38;
        a8 = v39;
        a7 = v40;
        a5 = v60;
      }
    }
  }
  v26 = *(_DWORD *)(v25 + 32);
  if (v26 == 5)
  {
    v25 = **(_QWORD **)(v25 + 8);
    v26 = *(_DWORD *)(v25 + 32);
  }
  if (v26 != 2)
  {
    v62 = " index ";
    v63 = 8;
    v31 = " does not reference an array definition";
    v32 = 40;
    goto LABEL_21;
  }
  v27 = *(__int128 **)(v25 + 8);
  v28 = *v27;
  v29 = *((_QWORD *)v27 + 2);
  *(_BYTE *)(a7 + 24) = *((_BYTE *)v27 + 24);
  *(_QWORD *)(a7 + 16) = v29;
  *(_OWORD *)a7 = v28;
  if (a5)
    v30 = -29;
  else
    v30 = -28;
  *(_BYTE *)a8 = v30;
  *(_QWORD *)(a8 + 8) = v24;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [25],JSC::Wasm::Type,char [11],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, const char *a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  double v17;
  float v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  double v27;
  float v28;
  WTF *v29;
  WTF::PrintStream *v30;
  float v31;
  double v32;
  const WTF::String *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  const WTF::String *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  float v47;
  const WTF::String *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  float v55;
  const WTF::String *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  float v63;
  WTF::AtomStringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  char v112;
  void (**v113)(WTF::StringPrintStream *__hidden);
  WTF *v114;
  __int128 v115;
  _BYTE v116[128];
  void (**v117)(WTF::StringPrintStream *__hidden);
  WTF *v118;
  __int128 v119;
  _BYTE v120[128];
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v113 = off_1E3572250;
  v114 = (WTF *)v116;
  v115 = xmmword_199122F80;
  v116[0] = 0;
  v117 = off_1E3572250;
  v118 = (WTF *)v120;
  v119 = xmmword_199122F80;
  v120[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v117, "%s", a3);
  v117[5]((WTF::StringPrintStream *)&v117);
  v16 = v118;
  if (!v118)
  {
    v111 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v118, v119, (uint64_t *)&v111);
  v16 = v118;
  if (v118 != (WTF *)v120)
LABEL_5:
    WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v110, a2, a4, v17, v18);
  v117 = off_1E3572250;
  v118 = (WTF *)v120;
  v119 = xmmword_199122F80;
  v120[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v117, "%s", " expected ");
  v117[5]((WTF::StringPrintStream *)&v117);
  v26 = v118;
  if (!v118)
  {
    v109 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v118, v119, (uint64_t *)&v109);
  v26 = v118;
  if (v118 != (WTF *)v120)
LABEL_10:
    WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v108, a2, a5, v27, v28);
  v29 = (WTF *)((uint64_t (*)(_QWORD))v113[4])(&v113);
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v29 + 32))(v29);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v117, v31);
  WTF::printExpectedCStringHelper(v30, "StringView", &v117);
  if ((_DWORD)v118 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v118])(&v112, &v117);
  v32 = (*(double (**)(WTF *))(*(_QWORD *)v29 + 40))(v29);
  WTF::printInternal(v29, (WTF::PrintStream *)&v111, v33, v34, v35, v36, v37, v38, v32, v39);
  WTF::printInternal(v29, (WTF::PrintStream *)&v110, v40, v41, v42, v43, v44, v45, v46, v47);
  WTF::printInternal(v29, (WTF::PrintStream *)&v109, v48, v49, v50, v51, v52, v53, v54, v55);
  WTF::printInternal(v29, (WTF::PrintStream *)&v108, v56, v57, v58, v59, v60, v61, v62, v63);
  v113[5]((WTF::StringPrintStream *)&v113);
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v111;
  v111 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      *(_DWORD *)v74 -= 2;
    }
  }
  v75 = v114;
  if (v114)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v114, v115, (uint64_t *)&v117);
    v75 = v114;
    *a1 = v117;
    if (v75 == (WTF *)v116)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v75, v64, v65, v66, v67, v68, v69, v70);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [48],JSC::Wasm::Type,char [25],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "argument type mismatch in array.new_fixed, got ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", ", expected a subtype of ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [64],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "array.new_data expected numeric, packed, or vector type; found ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [61],JSC::Wasm::Type,char [56],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "type mismatch in array.new_elem: segment elements have type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " but array.new_elem operation expects elements of type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

uint64_t JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::addReferencedFunctions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  unint64_t i;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;

  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  if (BYTE1(dword_1ECF4C7B0))
    v12 = 227;
  else
    v12 = 240;
  if (BYTE1(dword_1ECF4C7B0))
    v13 = -16;
  else
    v13 = 0;
  result = JSC::Wasm::isSubtype(v10, v11, v12, v13, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    v15 = *(unsigned int *)(a2 + 60);
    if ((_DWORD)v15)
    {
      for (i = 0; i < v15; ++i)
      {
        if (i >= v15)
        {
LABEL_29:
          __break(0xC471u);
          JUMPOUT(0x198DF6FC8);
        }
        if (*(_BYTE *)(*(_QWORD *)(a2 + 48) + i) == 1)
        {
          if (i >= *(unsigned int *)(a2 + 76))
            goto LABEL_29;
          v17 = *(_QWORD *)(a1 + 14960);
          v18 = *(_QWORD *)(v17 + 320);
          v19 = (unint64_t *)(2 * v18);
          if (v18 < 0)
            v20 = 63;
          else
            v20 = *v19;
          v21 = *(unsigned int *)(*(_QWORD *)(a2 + 64) + 8 * i);
          if (v20 > v21)
          {
            v22 = (_QWORD *)(v17 + 320);
            v23 = 1 << v21;
            v24 = v19 + 1;
            if (v18 >= 0)
              v25 = v24;
            else
              v25 = v22;
            v26 = (_QWORD *)((char *)v25 + ((v21 >> 3) & 0x1FFFFFF8));
            while (1)
            {
              v27 = *v26;
              if ((*v26 & v23) != 0)
                break;
              v28 = __ldxr(v26);
              if (v28 == v27)
              {
                if (!__stxr(v27 | v23, v26))
                  break;
              }
              else
              {
                __clrex();
              }
            }
            v15 = *(unsigned int *)(a2 + 60);
          }
        }
      }
    }
  }
  return result;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<WTF::ASCIILiteral,char [19],JSC::Wasm::Type,char [11],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5, double a6, float a7)
{
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  double v31;
  float v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  double v41;
  float v42;
  WTF *v43;
  WTF::PrintStream *v44;
  float v45;
  double v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  const WTF::String *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  float v61;
  const WTF::String *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  float v69;
  const WTF::String *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  float v77;
  const WTF::String *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  float v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF *v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  int v144;
  char v145;
  void (**v146)(WTF::StringPrintStream *__hidden);
  WTF *v147;
  __int128 v148;
  _BYTE v149[128];
  void (**v150)(WTF::StringPrintStream *__hidden);
  WTF *v151;
  __int128 v152;
  _BYTE v153[128];
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  v146 = off_1E3572250;
  v147 = (WTF *)v149;
  v148 = xmmword_199122F80;
  v149[0] = 0;
  v150 = off_1E3572250;
  v151 = (WTF *)v153;
  v152 = xmmword_199122F80;
  v153[0] = 0;
  if (*(_QWORD *)a3)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v12 = v11 != 0;
    v13 = v11 - 1;
    if (!v12)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v13, (uint64_t)&v143, a7);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v143 = (WTF::StringImpl *)v14;
    v144 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v150, "StringView", &v143);
  if (v144 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v144])(&v142, &v143);
  v150[5]((WTF::StringPrintStream *)&v150);
  v150[5]((WTF::StringPrintStream *)&v150);
  v22 = v151;
  if (!v151)
  {
    v143 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v151, v152, (uint64_t *)&v143);
  v22 = v151;
  if (v151 != (WTF *)v153)
LABEL_12:
    WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
  v150 = off_1E3572250;
  v151 = (WTF *)v153;
  v152 = xmmword_199122F80;
  v153[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v150, "%s", " arrayref to type ");
  v150[5]((WTF::StringPrintStream *)&v150);
  v30 = v151;
  if (!v151)
  {
    v142 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v151, v152, (uint64_t *)&v142);
  v30 = v151;
  if (v151 != (WTF *)v153)
LABEL_17:
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v141, a2, a4, v31, v32);
  v150 = off_1E3572250;
  v151 = (WTF *)v153;
  v152 = xmmword_199122F80;
  v153[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v150, "%s", " expected ");
  v150[5]((WTF::StringPrintStream *)&v150);
  v40 = v151;
  if (!v151)
  {
    v140 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v151, v152, (uint64_t *)&v140);
  v40 = v151;
  if (v151 != (WTF *)v153)
LABEL_22:
    WTF::fastFree((unint64_t)v40, v33, v34, v35, v36, v37, v38, v39);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v139, a2, a5, v41, v42);
  v43 = (WTF *)((uint64_t (*)(_QWORD))v146[4])(&v146);
  v44 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v43 + 32))(v43);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v150, v45);
  WTF::printExpectedCStringHelper(v44, "StringView", &v150);
  if ((_DWORD)v151 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v151])(&v145, &v150);
  v46 = (*(double (**)(WTF *))(*(_QWORD *)v43 + 40))(v43);
  WTF::printInternal(v43, (WTF::PrintStream *)&v143, v47, v48, v49, v50, v51, v52, v46, v53);
  WTF::printInternal(v43, (WTF::PrintStream *)&v142, v54, v55, v56, v57, v58, v59, v60, v61);
  WTF::printInternal(v43, (WTF::PrintStream *)&v141, v62, v63, v64, v65, v66, v67, v68, v69);
  WTF::printInternal(v43, (WTF::PrintStream *)&v140, v70, v71, v72, v73, v74, v75, v76, v77);
  WTF::printInternal(v43, (WTF::PrintStream *)&v139, v78, v79, v80, v81, v82, v83, v84, v85);
  v146[5]((WTF::StringPrintStream *)&v146);
  v93 = v139;
  v139 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
    {
      WTF::StringImpl::~StringImpl(v93, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v93 -= 2;
    }
  }
  v94 = v140;
  v140 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  v95 = v141;
  v141 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
  v96 = v142;
  v142 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = v143;
  v143 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = v147;
  if (v147)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v147, v148, (uint64_t *)&v150);
    v98 = v147;
    *a1 = v150;
    if (v98 == (WTF *)v149)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v98, v86, v87, v88, v89, v90, v91, v92);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [28],JSC::Wasm::Type,char [11],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "array.set arrayref to type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " expected ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [25],JSC::Wasm::Type,char [19]>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF::PrintStream *v25;
  float v26;
  double v27;
  const WTF::String *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  const WTF::String *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  float v42;
  const WTF::String *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  float v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  char v89;
  void (**v90)(WTF::StringPrintStream *__hidden);
  WTF *v91;
  __int128 v92;
  _BYTE v93[128];
  void (**v94)(WTF::StringPrintStream *__hidden);
  WTF *v95;
  __int128 v96;
  _BYTE v97[128];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v90 = off_1E3572250;
  v91 = (WTF *)v93;
  v92 = xmmword_199122F80;
  v93[0] = 0;
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", "array.len value to type ");
  v94[5]((WTF::StringPrintStream *)&v94);
  v13 = v95;
  if (!v95)
  {
    v88 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v88);
  v13 = v95;
  if (v95 != (WTF *)v97)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v87, a2, a3, v14, v15);
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", " expected arrayref");
  v94[5]((WTF::StringPrintStream *)&v94);
  v23 = v95;
  if (!v95)
  {
    v86 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v86);
  v23 = v95;
  if (v95 != (WTF *)v97)
LABEL_10:
    WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
  v24 = (WTF *)((uint64_t (*)(_QWORD))v90[4])(&v90);
  v25 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v24 + 32))(v24);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v94, v26);
  WTF::printExpectedCStringHelper(v25, "StringView", &v94);
  if ((_DWORD)v95 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v95])(&v89, &v94);
  v27 = (*(double (**)(WTF *))(*(_QWORD *)v24 + 40))(v24);
  WTF::printInternal(v24, (WTF::PrintStream *)&v88, v28, v29, v30, v31, v32, v33, v27, v34);
  WTF::printInternal(v24, (WTF::PrintStream *)&v87, v35, v36, v37, v38, v39, v40, v41, v42);
  WTF::printInternal(v24, (WTF::PrintStream *)&v86, v43, v44, v45, v46, v47, v48, v49, v50);
  v90[5]((WTF::StringPrintStream *)&v90);
  v58 = v86;
  v86 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v59 = v87;
  v87 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  v60 = v88;
  v88 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v61 = v91;
  if (v91)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v91, v92, (uint64_t *)&v94);
    v61 = v91;
    *a1 = v94;
    if (v61 == (WTF *)v93)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v61, v51, v52, v53, v54, v55, v56, v57);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [27],JSC::Wasm::Type,char [11],JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, char *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *String;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::PrintStream *v30;
  float v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  WTF *v42;
  WTF::PrintStream *v43;
  float v44;
  double v45;
  const WTF::String *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  const WTF::String *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  float v60;
  const WTF::String *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  float v68;
  const WTF::String *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  float v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF *v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  int v125;
  char v126;
  void (**v127)(WTF::StringPrintStream *__hidden);
  WTF *v128;
  __int128 v129;
  _BYTE v130[128];
  void (**v131)(WTF::StringPrintStream *__hidden);
  unint64_t v132;
  __int128 v133;
  _BYTE v134[128];
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v127 = off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%s", "array.fill offset to type ");
  v131[5]((WTF::StringPrintStream *)&v131);
  v15 = v132;
  if (!v132)
  {
    v123 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v123);
  v15 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_5:
    WTF::fastFree(v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v122, a2, a3, v16, v17);
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%s", " expected ");
  v131[5]((WTF::StringPrintStream *)&v131);
  v25 = v132;
  if (!v132)
  {
    v121 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v121);
  v25 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_10:
    WTF::fastFree(v25, v18, v19, v20, v21, v22, v23, v24);
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a4);
  v28 = v27;
  v29 = ((uint64_t (*)(_QWORD))v131[4])(&v131);
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
  if (String)
  {
    v32 = v28 - 1;
    if (!v28)
      v32 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v32, (uint64_t)&v124, v31);
  }
  else
  {
    v33 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v33 = 1;
    *(_QWORD *)(v33 + 8) = 0;
    *(_BYTE *)(v33 + 16) = 0;
    v124 = (WTF::StringImpl *)v33;
    v125 = 0;
  }
  WTF::printExpectedCStringHelper(v30, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
  v131[5]((WTF::StringPrintStream *)&v131);
  v131[5]((WTF::StringPrintStream *)&v131);
  v41 = v132;
  if (!v132)
  {
    v124 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v124);
  v41 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_22:
    WTF::fastFree(v41, v34, v35, v36, v37, v38, v39, v40);
  v42 = (WTF *)((uint64_t (*)(_QWORD))v127[4])(&v127);
  v43 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v42 + 32))(v42);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v131, v44);
  WTF::printExpectedCStringHelper(v43, "StringView", &v131);
  if ((_DWORD)v132 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v132])(&v126, &v131);
  v45 = (*(double (**)(WTF *))(*(_QWORD *)v42 + 40))(v42);
  WTF::printInternal(v42, (WTF::PrintStream *)&v123, v46, v47, v48, v49, v50, v51, v45, v52);
  WTF::printInternal(v42, (WTF::PrintStream *)&v122, v53, v54, v55, v56, v57, v58, v59, v60);
  WTF::printInternal(v42, (WTF::PrintStream *)&v121, v61, v62, v63, v64, v65, v66, v67, v68);
  WTF::printInternal(v42, (WTF::PrintStream *)&v124, v69, v70, v71, v72, v73, v74, v75, v76);
  v127[5]((WTF::StringPrintStream *)&v127);
  v84 = v124;
  v124 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  v85 = v121;
  v121 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = v122;
  v122 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v123;
  v123 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = v128;
  if (v128)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v131);
    v88 = v128;
    *a1 = v131;
    if (v88 == (WTF *)v130)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v88, v77, v78, v79, v80, v81, v82, v83);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [26],JSC::Wasm::Type,char [11],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "array.fill value to type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " expected ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [62],JSC::Wasm::Type,char [57],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "type mismatch in array.init_elem: segment elements have type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " but array.init_elem operation expects elements of type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseStructFieldManipulation(_BYTE *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, double a6, float a7)
{
  float v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(WTF::StringPrintStream *__hidden);
  void (**v15)(WTF::StringPrintStream *__hidden);
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  float v30;
  JSC::Wasm::TypeDefinition *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (**v45)(WTF::StringPrintStream *__hidden);
  unsigned int *v46;
  WTF *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t CachedUnrolling;
  uint64_t v56;
  uint64_t v57;
  const JSC::Wasm::Type *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  const JSC::Wasm::TypeDefinition *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  JSC::Wasm::TypeInformation *v69;
  _QWORD v70[2];
  void (**v71[2])(WTF::StringPrintStream *__hidden);
  const char *v72;
  uint64_t v73;
  void (**v74)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v75;
  unsigned int v76[2];
  _QWORD v77[2];
  uint64_t v78;
  unint64_t v79;

  v77[0] = a4;
  v77[1] = a5;
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseStructTypeIndexAndFieldIndex((uint64_t)&v78, (unint64_t *)a2, v76, a4, a5, a6, a7);
  if ((_BYTE)v79)
    goto LABEL_16;
  v11 = *(_DWORD *)(a2 + 68);
  if (!v11)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "struct reference", 17, &v78, v10);
LABEL_16:
    v45 = (void (**)(WTF::StringPrintStream *__hidden))v78;
    goto LABEL_19;
  }
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a2 + 56) + 24 * v11;
  v15 = *(void (***)(WTF::StringPrintStream *__hidden))(v13 - 24);
  v14 = *(void (***)(WTF::StringPrintStream *__hidden))(v13 - 16);
  v16 = *(_QWORD *)(v13 - 8);
  *(_DWORD *)(a2 + 68) = v11 - 1;
  v78 = (uint64_t)"WasmFunctionParser.h:";
  LODWORD(v79) = 21;
  LODWORD(v72) = 1581;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v78, (unsigned int *)&v72, (int **)&v75);
  v24 = v75;
  if (!v75)
    goto LABEL_26;
  v25 = *(_DWORD *)(v12 + 512);
  if (!v25)
  {
    __break(0xC471u);
    JUMPOUT(0x198DF8768);
  }
  *(_DWORD *)(v12 + 512) = v25 - 1;
  v75 = 0;
  if (*(_DWORD *)v24 == 2)
  {
    WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v24 -= 2;
  }
  v26 = *(_QWORD *)(a2 + 14960);
  v27 = v76[0];
  if (*(_DWORD *)(v26 + 100) <= v76[0])
  {
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x198DF8760);
  }
  v28 = *(_QWORD *)(v26 + 88);
  v78 = 227;
  v79 = *(_QWORD *)(v28 + 8 * v76[0]);
  if ((JSC::Wasm::isSubtype(v15, (unint64_t)v14, 227, v79, v20, v21, v22, v23) & 1) != 0)
  {
    v31 = *(JSC::Wasm::TypeDefinition **)(v28 + 8 * v27);
    if (*((_DWORD *)v31 + 8) == 4)
    {
      v69 = *(JSC::Wasm::TypeInformation **)(v28 + 8 * v27);
      v46 = (unsigned int *)*((_QWORD *)v31 + 1);
      v47 = *(WTF **)v46;
      v31 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v46 + 8) + 8 * v46[2]);
      if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v31))
      {
        CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v69, v48, v49, v50, v51, v52, v53, v54);
        if (v62)
        {
          v31 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
        }
        else
        {
          v31 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v31, v47, v56, v57, v58, v59, v60, v61);
          JSC::Wasm::TypeInformation::addCachedUnrolling(v69, v31, v63, v64, v65, v66, v67, v68);
        }
      }
    }
    v32 = *((_DWORD *)v31 + 8);
    if (v32 == 5)
    {
      v31 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v31 + 1);
      v32 = *((_DWORD *)v31 + 8);
    }
    if (v32 == 1)
    {
      *(_QWORD *)(a3 + 8) = v15;
      *(_QWORD *)(a3 + 16) = v14;
      *(_QWORD *)(a3 + 24) = v16;
      v33 = v76[1];
      *(_DWORD *)a3 = v27;
      *(_DWORD *)(a3 + 4) = v33;
      v34 = *((_QWORD *)v31 + 1) + 32 * v33;
      v35 = *(_QWORD *)(v34 + 16);
      v36 = *(_OWORD *)v34;
      *(_BYTE *)(a3 + 56) = *(_BYTE *)(v34 + 24);
      *(_OWORD *)(a3 + 32) = v36;
      *(_QWORD *)(a3 + 48) = v35;
      *a1 = 0;
      a1[8] = 0;
      return;
    }
    v72 = " type index points into a non struct type";
    v73 = 42;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral>(v71, (uint64_t)v77, (uint64_t)&v72, v29, v30);
    v45 = v71[0];
  }
  else
  {
    v72 = " structref to type ";
    v73 = 20;
    v71[0] = v15;
    v71[1] = v14;
    v70[0] = " expected ";
    v70[1] = 11;
    JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(&v74, a2, (uint64_t)v77, (uint64_t)&v72, (JSC::Wasm::Type *)v71, (uint64_t)v70, (JSC::Wasm::Type *)&v78, v29, v30);
    v45 = v74;
  }
LABEL_19:
  *(_QWORD *)a1 = v45;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, uint64_t a4, JSC::Wasm::Type *a5, uint64_t a6, double a7, float a8)
{
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  float v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  double v37;
  float v38;
  float v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  WTF::PrintStream *v52;
  float v53;
  double v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  const WTF::String *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  float v69;
  const WTF::String *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  float v77;
  const WTF::String *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  float v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  int v134;
  char v135;
  void (**v136)(WTF::StringPrintStream *__hidden);
  WTF *v137;
  __int128 v138;
  _BYTE v139[128];
  void (**v140)(WTF::StringPrintStream *__hidden);
  WTF *v141;
  __int128 v142;
  _BYTE v143[128];
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v136 = off_1E3572250;
  v137 = (WTF *)v139;
  v138 = xmmword_199122F80;
  v139[0] = 0;
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  if (*(_QWORD *)a3)
  {
    v13 = *(_QWORD *)(a3 + 8);
    v14 = v13 != 0;
    v15 = v13 - 1;
    if (!v14)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v15, (uint64_t)&v133, a8);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v133 = (WTF::StringImpl *)v16;
    v134 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v140, "StringView", &v133);
  if (v134 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v134])(&v132, &v133);
  v140[5]((WTF::StringPrintStream *)&v140);
  v140[5]((WTF::StringPrintStream *)&v140);
  v24 = v141;
  if (!v141)
  {
    v132 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v132);
  v24 = v141;
  if (v141 != (WTF *)v143)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  if (*(_QWORD *)a4)
  {
    v26 = *(_QWORD *)(a4 + 8);
    v14 = v26 != 0;
    v27 = v26 - 1;
    if (!v14)
      v27 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a4, v27, (uint64_t)&v133, v25);
  }
  else
  {
    v28 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = 0;
    *(_BYTE *)(v28 + 16) = 0;
    v133 = (WTF::StringImpl *)v28;
    v134 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v140, "StringView", &v133);
  if (v134 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v134])(&v131, &v133);
  v140[5]((WTF::StringPrintStream *)&v140);
  v140[5]((WTF::StringPrintStream *)&v140);
  v36 = v141;
  if (!v141)
  {
    v131 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v131);
  v36 = v141;
  if (v141 != (WTF *)v143)
LABEL_24:
    WTF::fastFree((unint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v130, a2, a5, v37, v38);
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  if (*(_QWORD *)a6)
  {
    v40 = *(_QWORD *)(a6 + 8);
    v14 = v40 != 0;
    v41 = v40 - 1;
    if (!v14)
      v41 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a6, v41, (uint64_t)&v133, v39);
  }
  else
  {
    v42 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v42 = 1;
    *(_QWORD *)(v42 + 8) = 0;
    *(_BYTE *)(v42 + 16) = 0;
    v133 = (WTF::StringImpl *)v42;
    v134 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v140, "StringView", &v133);
  if (v134 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v134])(&v135, &v133);
  v140[5]((WTF::StringPrintStream *)&v140);
  v140[5]((WTF::StringPrintStream *)&v140);
  v50 = v141;
  if (!v141)
  {
    v133 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v133);
  v50 = v141;
  if (v141 != (WTF *)v143)
LABEL_36:
    WTF::fastFree((unint64_t)v50, v43, v44, v45, v46, v47, v48, v49);
  v51 = (WTF *)((uint64_t (*)(_QWORD))v136[4])(&v136);
  v52 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v51 + 32))(v51);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v140, v53);
  WTF::printExpectedCStringHelper(v52, "StringView", &v140);
  if ((_DWORD)v141 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v141])(&v135, &v140);
  v54 = (*(double (**)(WTF *))(*(_QWORD *)v51 + 40))(v51);
  WTF::printInternal(v51, (WTF::PrintStream *)&v132, v55, v56, v57, v58, v59, v60, v54, v61);
  WTF::printInternal(v51, (WTF::PrintStream *)&v131, v62, v63, v64, v65, v66, v67, v68, v69);
  WTF::printInternal(v51, (WTF::PrintStream *)&v130, v70, v71, v72, v73, v74, v75, v76, v77);
  WTF::printInternal(v51, (WTF::PrintStream *)&v133, v78, v79, v80, v81, v82, v83, v84, v85);
  v136[5]((WTF::StringPrintStream *)&v136);
  v93 = v133;
  v133 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
    {
      WTF::StringImpl::~StringImpl(v93, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
    }
    else
    {
      *(_DWORD *)v93 -= 2;
    }
  }
  v94 = v130;
  v130 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  v95 = v131;
  v131 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
  v96 = v132;
  v132 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = v137;
  if (v137)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v137, v138, (uint64_t *)&v140);
    v97 = v137;
    *a1 = v140;
    if (v97 == (WTF *)v139)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v97, v86, v87, v88, v89, v90, v91, v92);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, uint64_t a5, double a6, float a7)
{
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  double v23;
  float v24;
  float v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  WTF *v37;
  WTF::PrintStream *v38;
  float v39;
  double v40;
  const WTF::String *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  const WTF::String *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  float v55;
  const WTF::String *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  float v63;
  WTF::AtomStringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  int v102;
  char v103;
  void (**v104)(WTF::StringPrintStream *__hidden);
  WTF *v105;
  __int128 v106;
  _BYTE v107[128];
  void (**v108)(WTF::StringPrintStream *__hidden);
  WTF *v109;
  __int128 v110;
  _BYTE v111[128];
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v104 = off_1E3572250;
  v105 = (WTF *)v107;
  v106 = xmmword_199122F80;
  v107[0] = 0;
  v108 = off_1E3572250;
  v109 = (WTF *)v111;
  v110 = xmmword_199122F80;
  v111[0] = 0;
  if (*(_QWORD *)a3)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v12 = v11 != 0;
    v13 = v11 - 1;
    if (!v12)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v13, (uint64_t)&v101, a7);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v101 = (WTF::StringImpl *)v14;
    v102 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v108, "StringView", &v101);
  if (v102 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v102])(&v100, &v101);
  v108[5]((WTF::StringPrintStream *)&v108);
  v108[5]((WTF::StringPrintStream *)&v108);
  v22 = v109;
  if (!v109)
  {
    v100 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v109, v110, (uint64_t *)&v100);
  v22 = v109;
  if (v109 != (WTF *)v111)
LABEL_12:
    WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v99, a2, a4, v23, v24);
  v108 = off_1E3572250;
  v109 = (WTF *)v111;
  v110 = xmmword_199122F80;
  v111[0] = 0;
  if (*(_QWORD *)a5)
  {
    v26 = *(_QWORD *)(a5 + 8);
    v12 = v26 != 0;
    v27 = v26 - 1;
    if (!v12)
      v27 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v27, (uint64_t)&v101, v25);
  }
  else
  {
    v28 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = 0;
    *(_BYTE *)(v28 + 16) = 0;
    v101 = (WTF::StringImpl *)v28;
    v102 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v108, "StringView", &v101);
  if (v102 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v102])(&v103, &v101);
  v108[5]((WTF::StringPrintStream *)&v108);
  v108[5]((WTF::StringPrintStream *)&v108);
  v36 = v109;
  if (!v109)
  {
    v101 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v109, v110, (uint64_t *)&v101);
  v36 = v109;
  if (v109 != (WTF *)v111)
LABEL_24:
    WTF::fastFree((unint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  v37 = (WTF *)((uint64_t (*)(_QWORD))v104[4])(&v104);
  v38 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v37 + 32))(v37);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v108, v39);
  WTF::printExpectedCStringHelper(v38, "StringView", &v108);
  if ((_DWORD)v109 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v109])(&v103, &v108);
  v40 = (*(double (**)(WTF *))(*(_QWORD *)v37 + 40))(v37);
  WTF::printInternal(v37, (WTF::PrintStream *)&v100, v41, v42, v43, v44, v45, v46, v40, v47);
  WTF::printInternal(v37, (WTF::PrintStream *)&v99, v48, v49, v50, v51, v52, v53, v54, v55);
  WTF::printInternal(v37, (WTF::PrintStream *)&v101, v56, v57, v58, v59, v60, v61, v62, v63);
  v104[5]((WTF::StringPrintStream *)&v104);
  v71 = v101;
  v101 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v99;
  v99 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v100;
  v100 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v105;
  if (v105)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v105, v106, (uint64_t *)&v108);
    v74 = v105;
    *a1 = v108;
    if (v74 == (WTF *)v107)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v64, v65, v66, v67, v68, v69, v70);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::checkBranchTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v9;
  JSC::Wasm::FunctionSignature *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  _QWORD *v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  int32x2_t v23;
  int64x2_t v24;
  int8x16_t v25;
  int8x16_t v26;
  double v27;
  float v28;
  uint64_t v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  WTF::StringImpl *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  int8x16_t v55;
  void (**v56)(WTF::StringPrintStream *__hidden);

  v9 = *(_DWORD *)a3 == 2;
  v10 = *(JSC::Wasm::FunctionSignature **)(a3 + 8);
  v11 = 12;
  if (*(_DWORD *)a3 == 2)
    v11 = 8;
  v12 = *(_DWORD *)((char *)v10 + v11);
  if (v12)
  {
    v15 = *(unsigned int *)(a2 + 68);
    if (v15 < v12)
    {
      v23 = vdup_n_s32(*(_DWORD *)a3 == 3);
      v24.i64[0] = v23.u32[0];
      v24.i64[1] = v23.u32[1];
      v25 = (int8x16_t)vdupq_n_s64(0x10uLL);
      v25.i64[0] = (uint64_t)"branch to block";
      v26 = (int8x16_t)vdupq_n_s64(0x17uLL);
      v26.i64[0] = (uint64_t)"branch out of function";
      v55 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v24, 0x3FuLL)), v26, v25);
      *(_QWORD *)&v54 = " on expression stack of size ";
      *((_QWORD *)&v54 + 1) = 30;
      v53 = v15;
      v51 = ", but block, ";
      v52 = 14;
      JSC::Wasm::FunctionSignature::toString(v10, (uint64_t *)&v50);
      *(_QWORD *)&v49 = " expects ";
      *((_QWORD *)&v49 + 1) = 10;
      v29 = 12;
      if (*(_DWORD *)a3 == 2)
        v29 = 8;
      v48 = *(_DWORD *)(*(_QWORD *)(a3 + 8) + v29);
      v46 = " values";
      v47 = 8;
      JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v56, (uint64_t)&v55, (uint64_t)&v54, &v53, (uint64_t)&v51, (WTF::PrintStream *)&v50, (uint64_t)&v49, &v48, v27, v28, (uint64_t)&v46);
      *(_QWORD *)a1 = v56;
      *(_BYTE *)(a1 + 8) = 1;
      v37 = v50;
      v50 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
        {
          WTF::StringImpl::~StringImpl(v37, v30, v31, v32, v33, v34, v35, v36);
          WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
        }
        else
        {
          *(_DWORD *)v37 -= 2;
        }
      }
    }
    else
    {
      v16 = 0;
      v17 = v15 - v12;
      while (1)
      {
        v18 = v9 ? *((_DWORD *)v10 + 3) + v16 : v16;
        v19 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 24 * (v17 + v16));
        if ((JSC::Wasm::isSubtype(*v19, v19[1], *(_QWORD *)(*(_QWORD *)v10 + 16 * v18), *(_QWORD *)(*(_QWORD *)v10 + 16 * v18 + 8), a5, a6, a7, a8) & 1) == 0)break;
        ++v16;
        v9 = *(_DWORD *)a3 == 2;
        v10 = *(JSC::Wasm::FunctionSignature **)(a3 + 8);
        if (*(_DWORD *)a3 == 2)
          v21 = 8;
        else
          v21 = 12;
        if (v16 >= *(unsigned int *)((char *)v10 + v21))
          goto LABEL_4;
      }
      LODWORD(v53) = v16;
      v55.i64[0] = (uint64_t)"branch's stack type is not a subtype of block's type branch target type. Stack value has type ";
      v55.i64[1] = 95;
      v54 = *(_OWORD *)(*(_QWORD *)(a2 + 56) + 24 * (v17 + v16));
      v51 = " but branch target expects a value of ";
      v52 = 39;
      v22 = *(_QWORD *)(a3 + 8);
      if (*(_DWORD *)a3 == 2)
        LODWORD(v16) = *(_DWORD *)(v22 + 12) + v16;
      v49 = *(_OWORD *)(*(_QWORD *)v22 + 16 * v16);
      v46 = " at index ";
      v47 = 11;
      JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,unsigned int>(&v56, a2, (uint64_t)&v55, (JSC::Wasm::Type *)&v54, (uint64_t)&v51, (JSC::Wasm::Type *)&v49, (uint64_t)&v46, &v53, *(double *)&v49, v20);
      *(_QWORD *)a1 = v56;
      *(_BYTE *)(a1 + 8) = 1;
    }
  }
  else
  {
LABEL_4:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::atomicLoad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, float a7)
{
  unsigned int v7;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  int v47;
  JSC::Wasm::OMGIRGenerator *v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  JSC::B3::Value *v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  char **v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  JSC::B3::Value *v62;
  unsigned int v63;
  uint64_t v64;
  __int16 v65;
  unint64_t v66;
  uint64_t v67;
  JSC::B3::Value *v68;
  unsigned int v69;
  char v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t casual;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  __int128 v79;
  char **v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (**PushVariable)(WTF::StringPrintStream *__hidden);
  uint64_t v85;
  JSC::B3::Value *v86;
  unint64_t v87;
  uint64_t v88;
  JSC::B3::Value *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char **v95;
  uint64_t v96;
  unsigned int v97;
  _QWORD *v98;
  char *v99;
  char *v100;
  char *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  float v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  uint64_t v113;
  JSC::B3::Value *v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  char **v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int *v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int v125;
  unint64_t v126;
  unint64_t v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  unint64_t *v136;
  uint64_t v137;
  __int16 v138;
  uint64_t v139;
  int v142;
  WTF::StringImpl *v143;
  void (**v144)(WTF::StringPrintStream *__hidden);
  __int128 v145;
  const char *v146;
  uint64_t v147;

  *(_QWORD *)&v145 = a4;
  *((_QWORD *)&v145 + 1) = a5;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 14960) + 104) == -1)
  {
    v146 = "atomic instruction without memory";
    v147 = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v144, (uint64_t)&v146, a6, a7);
LABEL_73:
    v112 = v144;
    goto LABEL_74;
  }
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)a2;
  v12 = v10 > *(_QWORD *)a2;
  v13 = v10 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_110;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = *(_QWORD *)(a2 + 8);
  v19 = 5;
  if (v13 < 5)
    v19 = v13;
  v20 = v19 - 1;
  *(_QWORD *)a2 = v11 + 1;
  v21 = v18 + v11;
  v22 = v11 + 2;
  while (1)
  {
    v23 = *(char *)(v21 + v15);
    v17 |= (v23 & 0x7F) << v16;
    if ((v23 & 0x80000000) == 0)
      break;
    if (v20 == v15)
      goto LABEL_110;
    LOBYTE(v24) = v22 + v15;
    *(_QWORD *)a2 = v22 + v15;
    v16 += 7;
    if (v13 == ++v15)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v15 == 4 && *(unsigned __int8 *)(v21 + v15) >= 0x10u)
  {
LABEL_110:
    v135 = "can't get load alignment";
    v136 = (unint64_t *)a2;
    v137 = 25;
LABEL_113:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v135, v136, v137, &v146, a7);
    goto LABEL_71;
  }
  if (v17 != JSC::Wasm::memoryLog2Alignment())
  {
    v110 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v17, " does not match against atomic op's natural alignment ", 55, 1 << v110, &v146, v111);
    *(_QWORD *)a1 = v146;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v25 = *(_QWORD *)(a2 + 16);
  v26 = *(_QWORD *)a2;
  v12 = v25 > *(_QWORD *)a2;
  v27 = v25 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_112;
  v15 = 0;
  v28 = 0;
  v7 = 0;
  v29 = *(_QWORD *)(a2 + 8);
  v30 = 5;
  if (v27 < 5)
    v30 = v27;
  v31 = v30 - 1;
  *(_QWORD *)a2 = v26 + 1;
  v32 = v29 + v26;
  v33 = v26 + 2;
  while (1)
  {
    v24 = *(char *)(v32 + v15);
    v7 |= (v24 & 0x7F) << v28;
    if ((v24 & 0x80000000) == 0)
      break;
    if (v31 == v15)
      goto LABEL_112;
    LOBYTE(v24) = v33 + v15;
    *(_QWORD *)a2 = v33 + v15;
    v28 += 7;
    if (v27 == ++v15)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v15 == 4 && v24 >= 0x10u)
  {
LABEL_112:
    v135 = "can't get load offset";
    v136 = (unint64_t *)a2;
    v137 = 22;
    goto LABEL_113;
  }
  v34 = *(_DWORD *)(a2 + 68);
  if (!v34)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "load pointer", 13, &v146, a7);
LABEL_71:
    v112 = (void (**)(WTF::StringPrintStream *__hidden))v146;
LABEL_74:
    *(_QWORD *)a1 = v112;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v35 = *(_QWORD *)(a2 + 48);
  v36 = *(_QWORD *)(a2 + 56) + 24 * v34;
  v37 = *(unsigned __int8 *)(v36 - 24);
  v38 = *(_QWORD *)(v36 - 8);
  *(_DWORD *)(a2 + 68) = v34 - 1;
  v146 = "WasmFunctionParser.h:";
  LODWORD(v147) = 21;
  LODWORD(v144) = 616;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v146, (unsigned int *)&v144, (int **)&v143);
  v46 = v143;
  if (!v143)
  {
    __break(0xC471u);
    JUMPOUT(0x198DF9DB8);
  }
  v47 = *(_DWORD *)(v35 + 512);
  if (!v47)
  {
    __break(0xC471u);
    JUMPOUT(0x198DF9DC0);
  }
  *(_DWORD *)(v35 + 512) = v47 - 1;
  v143 = 0;
  if (*(_DWORD *)v46 == 2)
  {
    WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
    WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
  }
  else
  {
    *(_DWORD *)v46 -= 2;
  }
  if (v37 != 255)
  {
    v142 = a3;
    v146 = " pointer type mismatch";
    v147 = 23;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral>(&v144, &v142, (uint64_t)&v146);
    goto LABEL_73;
  }
  v144 = 0;
  v48 = *(JSC::Wasm::OMGIRGenerator **)(a2 + 48);
  v49 = JSC::Wasm::memoryLog2Alignment();
  if (v49 > 3)
    v50 = 16;
  else
    v50 = dword_19915ADD0[1 << v49];
  if (!__CFADD__(v7, v50))
  {
    v139 = a1;
    v51 = *((_QWORD *)v48 + 11);
    v52 = (JSC::B3::Value *)*((_QWORD *)v48 + 7);
    if (*(_QWORD *)v48)
      v53 = *(_QWORD *)(*(_QWORD *)v48 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v48 + 14992) << 32);
    else
      v53 = 0;
    v54 = WTF::fastMalloc((WTF *)0x30);
    v55 = *(_DWORD *)(v38 + 4);
    *(_DWORD *)(v54 + 8) = -1;
    *(_WORD *)(v54 + 12) = 10;
    *(_DWORD *)(v54 + 16) = v55;
    *(_BYTE *)(v54 + 20) = 0;
    *(_QWORD *)(v54 + 24) = v53;
    *(_QWORD *)(v54 + 32) = 0;
    *(_QWORD *)v54 = off_1E357F0F8;
    *(_QWORD *)(v54 + 40) = v38;
    JSC::B3::Procedure::addValueImpl(v52, (JSC::B3::Value *)v54);
    v146 = (const char *)v54;
    v56 = (char **)(v51 + 8);
    v57 = *(unsigned int *)(v51 + 20);
    if ((_DWORD)v57 == *(_DWORD *)(v51 + 16))
    {
      v100 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v56, v57 + 1, (unint64_t)&v146);
      v57 = *(unsigned int *)(v51 + 20);
      *(_QWORD *)(*(_QWORD *)(v51 + 8) + 8 * v57) = *(_QWORD *)v100;
      v58 = (uint64_t)v146;
    }
    else
    {
      *(_QWORD *)&(*v56)[8 * v57] = v54;
      v58 = v54;
    }
    *(_DWORD *)(v51 + 20) = v57 + 1;
    *(_QWORD *)(v58 + 32) = v51;
    v59 = JSC::Wasm::memoryLog2Alignment();
    if (v59 > 3)
      v60 = 16;
    else
      v60 = dword_19915ADD0[1 << v59];
    v61 = JSC::Wasm::OMGIRGenerator::emitCheckAndPreparePointer(v48, (JSC::B3::Value *)v54, v7, v60);
    v62 = JSC::Wasm::OMGIRGenerator::fixupPointerPlusOffsetForAtomicOps((uint64_t *)v48, a3, v61, v7);
    v63 = JSC::Wasm::memoryLog2Alignment();
    if (v63 < 4)
    {
      v64 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)v48, qword_19915AC38[1 << v63], 0, 0, 0);
      if (*((_BYTE *)v48 + 32) == 1 || *(_BYTE *)(*((_QWORD *)v48 + 2) + 112))
        v65 = 585;
      else
        v65 = 73;
      v138 = v65;
      if (*(_QWORD *)v48)
        v66 = *(_QWORD *)(*(_QWORD *)v48 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v48 + 14992) << 32);
      else
        v66 = 0;
      v67 = *((_QWORD *)v48 + 11);
      v68 = (JSC::B3::Value *)*((_QWORD *)v48 + 7);
      v69 = JSC::Wasm::memoryLog2Alignment();
      if (v69 > 3)
        v70 = 4;
      else
        v70 = byte_19915ADF4[1 << v69];
      v71 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (v71)
      {
        v72 = (_BYTE *)(v71 + 9040);
        *(_BYTE *)(v71 + 9040) = 1;
        v73 = *(unsigned int *)(v71 + 9056);
        if ((_DWORD)v73)
        {
          *(_DWORD *)(v71 + 9056) = v73 - *(_DWORD *)(v71 + 9060);
          casual = *(_QWORD *)(v71 + 9048) - v73;
LABEL_53:
          *v72 = 0;
LABEL_54:
          v78 = *(_DWORD *)(v64 + 16);
          *(_QWORD *)casual = off_1E357F5F0;
          *(_DWORD *)(casual + 8) = -1;
          *(_WORD *)(casual + 12) = v138;
          *(_DWORD *)(casual + 16) = v78;
          *(_BYTE *)(casual + 20) = 2;
          *(_QWORD *)(casual + 24) = v66;
          *(_QWORD *)(casual + 32) = 0;
          JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)casual, 2, v64, (uint64_t)v62);
          *(_DWORD *)(casual + 40) = 0;
          *(_QWORD *)&v79 = 0xFFFFFFFF00000000;
          *((_QWORD *)&v79 + 1) = 0xFFFFFFFF00000000;
          *(_OWORD *)(casual + 44) = v79;
          *(_QWORD *)casual = off_1E357CDD0;
          *(_BYTE *)(casual + 60) = v70;
          JSC::B3::Procedure::addValueImpl(v68, (JSC::B3::Value *)casual);
          v146 = (const char *)casual;
          v80 = (char **)(v67 + 8);
          v81 = *(unsigned int *)(v67 + 20);
          if ((_DWORD)v81 == *(_DWORD *)(v67 + 16))
          {
            v101 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v80, v81 + 1, (unint64_t)&v146);
            v81 = *(unsigned int *)(v67 + 20);
            *(_QWORD *)(*(_QWORD *)(v67 + 8) + 8 * v81) = *(_QWORD *)v101;
            v82 = (uint64_t)v146;
          }
          else
          {
            *(_QWORD *)&(*v80)[8 * v81] = casual;
            v82 = casual;
          }
          a1 = v139;
          *(_DWORD *)(v67 + 20) = v81 + 1;
          *(_QWORD *)(v82 + 32) = v67;
          v83 = (uint64_t)JSC::Wasm::OMGIRGenerator::sanitizeAtomicResult((uint64_t *)v48, a3, a4, a5, (JSC::B3::Value *)casual);
          PushVariable = (void (**)(WTF::StringPrintStream *__hidden))JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)v48, *(_DWORD *)(v83 + 16));
          v85 = *((_QWORD *)v48 + 11);
          v86 = (JSC::B3::Value *)*((_QWORD *)v48 + 7);
          if (*(_QWORD *)v48)
            v87 = *(_QWORD *)(*(_QWORD *)v48 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v48
                                                                                                + 14992) << 32);
          else
            v87 = 0;
          v88 = WTF::fastMalloc((WTF *)0x38);
          v89 = (JSC::B3::Value *)v88;
          *(_DWORD *)(v88 + 8) = -1;
          *(_WORD *)(v88 + 12) = 9;
          *(_DWORD *)(v88 + 16) = 0;
          *(_BYTE *)(v88 + 20) = 1;
          *(_QWORD *)(v88 + 24) = v87;
          *(_QWORD *)(v88 + 32) = 0;
          goto LABEL_59;
        }
        v75 = *(_QWORD *)(v71 + 9080);
        v76 = *(_QWORD *)(v71 + 9064);
        if (v75)
        {
LABEL_52:
          v77 = __clz(v75);
          *(_QWORD *)(v71 + 9080) = v75 & ~(0x8000000000000000 >> v77);
          casual = v76 + 16 * v77;
          goto LABEL_53;
        }
        if (*(_BYTE *)(v71 + 9045) == 6)
        {
          v128 = *(_DWORD *)(v71 + 9076);
          v129 = *(unsigned int *)(v71 + 9072);
          if (v129 < v128)
          {
            *(_QWORD *)&v72[8 * v129 + 56] = 0;
            v130 = (unint64_t *)(v71 + 8 * v129 + 9104);
            v131 = v128 - 1 - v129;
            while (v131)
            {
              v76 += 1024;
              v133 = *v130++;
              v132 = v133;
              LODWORD(v129) = v129 + 1;
              --v131;
              if (v133)
              {
                v75 = __rbit64(v132);
                *(_DWORD *)(v71 + 9072) = v129;
                *(_QWORD *)(v71 + 9064) = v76;
                goto LABEL_52;
              }
            }
            *(_DWORD *)(v71 + 9072) = v128;
          }
        }
        *v72 = 0;
      }
      casual = bmalloc_allocate_casual(80, 1);
      goto LABEL_54;
    }
LABEL_120:
    __break(0xC471u);
    JUMPOUT(0x198DF9D7CLL);
  }
  v113 = *((_QWORD *)v48 + 11);
  v114 = (JSC::B3::Value *)*((_QWORD *)v48 + 7);
  if (*(_QWORD *)v48)
    v115 = *(_QWORD *)(*(_QWORD *)v48 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v48 + 14992) << 32);
  else
    v115 = 0;
  v116 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v116 = off_1E357F5F0;
  *(_DWORD *)(v116 + 8) = -1;
  *(_WORD *)(v116 + 12) = 83;
  *(_DWORD *)(v116 + 16) = 0;
  *(_BYTE *)(v116 + 20) = 4;
  *(_QWORD *)(v116 + 24) = v115;
  *(_QWORD *)(v116 + 32) = 0;
  v117 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v116);
  *v117 = v117 + 2;
  v117[1] = 3;
  *(_OWORD *)(v116 + 40) = 0u;
  *(_OWORD *)(v116 + 56) = 0u;
  *(_OWORD *)(v116 + 72) = 0u;
  *(_OWORD *)(v116 + 88) = 0u;
  *(_QWORD *)(v116 + 104) = 0;
  *(_QWORD *)v116 = off_1E357E700;
  *(_OWORD *)(v116 + 112) = xmmword_1991243D0;
  *(_QWORD *)(v116 + 152) = 0;
  *(_QWORD *)(v116 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v116 + 136) = v116 + 152;
  *(_WORD *)(v116 + 168) = 0;
  *(_BYTE *)(v116 + 160) = 0;
  *(_QWORD *)(v116 + 144) = 0x100000001;
  JSC::B3::Procedure::addValueImpl(v114, (JSC::B3::Value *)v116);
  v146 = (const char *)v116;
  v118 = (char **)(v113 + 8);
  v119 = *(unsigned int *)(v113 + 20);
  if ((_DWORD)v119 == *(_DWORD *)(v113 + 16))
  {
    v134 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v118, v119 + 1, (unint64_t)&v146);
    v119 = *(unsigned int *)(v113 + 20);
    *(_QWORD *)(*(_QWORD *)(v113 + 8) + 8 * v119) = *(_QWORD *)v134;
    v120 = (uint64_t)v146;
  }
  else
  {
    *(_QWORD *)&(*v118)[8 * v119] = v116;
    v120 = v116;
  }
  *(_DWORD *)(v113 + 20) = v119 + 1;
  *(_QWORD *)(v120 + 32) = v113;
  v121 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v121 + 8) = 1;
  *(_QWORD *)v121 = off_1E35B6238;
  *(_QWORD *)(v121 + 16) = v48;
  v122 = *(unsigned int **)(v116 + 56);
  *(_QWORD *)(v116 + 56) = v121;
  if (v122)
  {
    v123 = v122 + 2;
    do
    {
      v124 = __ldaxr(v123);
      v125 = v124 - 1;
    }
    while (__stlxr(v125, v123));
    if (!v125)
    {
      atomic_store(1u, v122 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v122 + 8))(v122);
    }
  }
  if (a4 == 254)
  {
    v83 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)v48, 2u, 0, 0, 0);
    PushVariable = (void (**)(WTF::StringPrintStream *__hidden))JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)v48, *(_DWORD *)(v83 + 16));
    v85 = *((_QWORD *)v48 + 11);
    v86 = (JSC::B3::Value *)*((_QWORD *)v48 + 7);
    if (*(_QWORD *)v48)
      v127 = *(_QWORD *)(*(_QWORD *)v48 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v48 + 14992) << 32);
    else
      v127 = 0;
    v88 = WTF::fastMalloc((WTF *)0x38);
    v89 = (JSC::B3::Value *)v88;
    *(_DWORD *)(v88 + 8) = -1;
    *(_WORD *)(v88 + 12) = 9;
    *(_DWORD *)(v88 + 16) = 0;
    *(_BYTE *)(v88 + 20) = 1;
    *(_QWORD *)(v88 + 24) = v127;
  }
  else
  {
    if (a4 != 255)
      goto LABEL_120;
    v83 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)v48, 1u, 0, 0, 0);
    PushVariable = (void (**)(WTF::StringPrintStream *__hidden))JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)v48, *(_DWORD *)(v83 + 16));
    v85 = *((_QWORD *)v48 + 11);
    v86 = (JSC::B3::Value *)*((_QWORD *)v48 + 7);
    if (*(_QWORD *)v48)
      v126 = *(_QWORD *)(*(_QWORD *)v48 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v48 + 14992) << 32);
    else
      v126 = 0;
    v88 = WTF::fastMalloc((WTF *)0x38);
    v89 = (JSC::B3::Value *)v88;
    *(_DWORD *)(v88 + 8) = -1;
    *(_WORD *)(v88 + 12) = 9;
    *(_DWORD *)(v88 + 16) = 0;
    *(_BYTE *)(v88 + 20) = 1;
    *(_QWORD *)(v88 + 24) = v126;
  }
  *(_QWORD *)(v88 + 32) = 0;
LABEL_59:
  *(_QWORD *)v88 = off_1E357F0F8;
  *(_QWORD *)(v88 + 40) = PushVariable;
  *(_QWORD *)(v88 + 48) = v83;
  JSC::B3::Procedure::addValueImpl(v86, v89);
  v146 = (const char *)v89;
  v95 = (char **)(v85 + 8);
  v96 = *(unsigned int *)(v85 + 20);
  if ((_DWORD)v96 == *(_DWORD *)(v85 + 16))
  {
    v99 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v95, v96 + 1, (unint64_t)&v146);
    v96 = *(unsigned int *)(v85 + 20);
    *(_QWORD *)(*(_QWORD *)(v85 + 8) + 8 * v96) = *(_QWORD *)v99;
    v89 = (JSC::B3::Value *)v146;
  }
  else
  {
    *(_QWORD *)&(*v95)[8 * v96] = v89;
  }
  *(_DWORD *)(v85 + 20) = v96 + 1;
  *((_QWORD *)v89 + 4) = v85;
  v144 = PushVariable;
  v97 = *(_DWORD *)(a2 + 68);
  if (v97 == *(_DWORD *)(a2 + 64))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::B3::Variable *>(a2 + 56, &v145, (uint64_t *)&v144, v90, v91, v92, v93, v94);
  }
  else
  {
    v98 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 24 * v97);
    *v98 = a4;
    v98[1] = a5;
    v98[2] = PushVariable;
    ++*(_DWORD *)(a2 + 68);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::atomicStore(_BYTE *a1, uint64_t a2, unsigned int a3, unsigned __int8 a4, uint64_t a5, double a6, float a7)
{
  unsigned int v7;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::AtomStringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  int v51;
  unsigned int v52;
  unsigned __int8 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  int v66;
  char v67;
  JSC::Wasm::OMGIRGenerator *v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  JSC::B3::Value *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  char **v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  JSC::B3::Value *v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  char **v88;
  uint64_t v89;
  uint64_t v90;
  JSC::B3::Value *v91;
  JSC::B3::Value *v92;
  __int16 v93;
  unint64_t v94;
  uint64_t v95;
  JSC::B3::Value *v96;
  unsigned int v97;
  char v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t casual;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  __int128 v107;
  char **v108;
  uint64_t v109;
  _BYTE *v110;
  char *v111;
  char *v112;
  char *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (**v130)(WTF::StringPrintStream *__hidden);
  char v131;
  float v132;
  char *v133;
  unint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  char **v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  unint64_t *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  JSC::B3::Value *v158;
  uint64_t v159;
  int v160;
  char **v161;
  uint64_t v162;
  const char *v163;
  char *v164;
  unsigned int v165;
  char *v166;
  unint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  _BYTE *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  void (**v174)(WTF::StringPrintStream *__hidden);
  const char *v175;
  uint64_t v176;

  if (*(_DWORD *)(*(_QWORD *)(a2 + 14960) + 104) == -1)
  {
    v175 = "atomic instruction without memory";
    v176 = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v174, (uint64_t)&v175, a6, a7);
    v130 = v174;
LABEL_86:
    *(_QWORD *)a1 = v130;
    a1[8] = 1;
    return;
  }
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)a2;
  v12 = v10 > *(_QWORD *)a2;
  v13 = v10 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_127;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = *(_QWORD *)(a2 + 8);
  v21 = 5;
  if (v13 < 5)
    v21 = v13;
  v22 = v21 - 1;
  *(_QWORD *)a2 = v11 + 1;
  v23 = v20 + v11;
  v24 = v11 + 2;
  while (1)
  {
    v25 = *(char *)(v23 + v17);
    v19 |= (v25 & 0x7F) << v18;
    if ((v25 & 0x80000000) == 0)
      break;
    if (v22 == v17)
      goto LABEL_127;
    LOBYTE(v26) = v24 + v17;
    *(_QWORD *)a2 = v24 + v17;
    v18 += 7;
    if (v13 == ++v17)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v17 == 4 && *(unsigned __int8 *)(v23 + v17) >= 0x10u)
  {
LABEL_127:
    v166 = "can't get store alignment";
    v167 = (unint64_t *)a2;
    v168 = 26;
LABEL_130:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v166, v167, v168, &v175, a7);
    goto LABEL_85;
  }
  if (v19 != JSC::Wasm::memoryLog2Alignment())
  {
    v131 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v19, " does not match against atomic op's natural alignment ", 55, 1 << v131, &v175, v132);
    *(_QWORD *)a1 = v175;
    a1[8] = 1;
    return;
  }
  v27 = *(_QWORD *)(a2 + 16);
  v28 = *(_QWORD *)a2;
  v12 = v27 > *(_QWORD *)a2;
  v29 = v27 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_129;
  v17 = 0;
  v30 = 0;
  v7 = 0;
  v31 = *(_QWORD *)(a2 + 8);
  v32 = 5;
  if (v29 < 5)
    v32 = v29;
  v33 = v32 - 1;
  *(_QWORD *)a2 = v28 + 1;
  v34 = v31 + v28;
  v35 = v28 + 2;
  while (1)
  {
    v26 = *(char *)(v34 + v17);
    v7 |= (v26 & 0x7F) << v30;
    if ((v26 & 0x80000000) == 0)
      break;
    if (v33 == v17)
      goto LABEL_129;
    LOBYTE(v26) = v35 + v17;
    *(_QWORD *)a2 = v35 + v17;
    v30 += 7;
    if (v29 == ++v17)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v17 == 4 && v26 >= 0x10u)
  {
LABEL_129:
    v166 = "can't get store offset";
    v167 = (unint64_t *)a2;
    v168 = 23;
    goto LABEL_130;
  }
  v36 = *(_DWORD *)(a2 + 68);
  if (!v36)
  {
    v133 = "store value";
    v134 = (unint64_t *)a2;
    v135 = 12;
LABEL_84:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v134, 26, v133, v135, &v175, a7);
LABEL_85:
    v130 = (void (**)(WTF::StringPrintStream *__hidden))v175;
    goto LABEL_86;
  }
  v170 = a3;
  v37 = a5;
  v38 = *(_QWORD *)(a2 + 48);
  v39 = *(_QWORD *)(a2 + 56) + 24 * v36;
  v40 = *(_QWORD *)(v39 - 24);
  v41 = *(_QWORD *)(v39 - 16);
  v42 = *(_QWORD *)(v39 - 8);
  *(_DWORD *)(a2 + 68) = v36 - 1;
  v175 = "WasmFunctionParser.h:";
  LODWORD(v176) = 21;
  LODWORD(v174) = 638;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v175, (unsigned int *)&v174, (int **)&v173);
  v50 = v173;
  if (!v173)
  {
    __break(0xC471u);
    goto LABEL_136;
  }
  v51 = *(_DWORD *)(v38 + 512);
  if (!v51)
  {
    __break(0xC471u);
    JUMPOUT(0x198DFA8F8);
  }
  *(_DWORD *)(v38 + 512) = v51 - 1;
  v173 = 0;
  if (*(_DWORD *)v50 == 2)
  {
    WTF::StringImpl::~StringImpl(v50, v43, v44, v45, v46, v47, v48, v49);
    WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
  }
  else
  {
    *(_DWORD *)v50 -= 2;
  }
  v52 = *(_DWORD *)(a2 + 68);
  if (!v52)
  {
    v133 = "store pointer";
    v134 = (unint64_t *)a2;
    v135 = 14;
    goto LABEL_84;
  }
  v169 = v42;
  v53 = a4;
  v171 = a1;
  v54 = *(_QWORD *)(a2 + 48);
  v55 = *(_QWORD *)(a2 + 56) + 24 * v52;
  v56 = *(unsigned __int8 *)(v55 - 24);
  v57 = *(_QWORD *)(v55 - 8);
  *(_DWORD *)(a2 + 68) = v52 - 1;
  v175 = "WasmFunctionParser.h:";
  LODWORD(v176) = 21;
  LODWORD(v174) = 639;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v175, (unsigned int *)&v174, (int **)&v172);
  v65 = v172;
  if (!v172)
  {
    __break(0xC471u);
    JUMPOUT(0x198DFA900);
  }
  v66 = *(_DWORD *)(v54 + 512);
  if (!v66)
  {
    __break(0xC471u);
LABEL_136:
    JUMPOUT(0x198DFA8F0);
  }
  *(_DWORD *)(v54 + 512) = v66 - 1;
  v172 = 0;
  if (*(_DWORD *)v65 == 2)
  {
    WTF::StringImpl::~StringImpl(v65, v58, v59, v60, v61, v62, v63, v64);
    WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
  }
  else
  {
    *(_DWORD *)v65 -= 2;
  }
  if (v56 == 255)
  {
    if (v53 != v40)
    {
LABEL_121:
      v136 = a2 + 14992;
      v137 = " value type mismatch";
      v138 = 21;
      goto LABEL_122;
    }
    if (v53 - 239 < 2 || v53 == 227)
    {
      if (v37 == v41)
        v67 = ((v53 + 29) < 0xEu) & (0x3001u >> (v53 + 29));
      else
        v67 = 0;
      if ((v67 & 1) == 0)
        goto LABEL_121;
    }
    else
    {
      if (v37 == v41)
        v165 = ((v53 + 29) < 0xEu) & (0x3001u >> (v53 + 29));
      else
        v165 = 1;
      if (v165 == 1)
        goto LABEL_121;
    }
    v68 = *(JSC::Wasm::OMGIRGenerator **)(a2 + 48);
    v69 = JSC::Wasm::memoryLog2Alignment();
    if (v69 > 3)
      v70 = 16;
    else
      v70 = dword_19915ADD0[1 << v69];
    v71 = *((_QWORD *)v68 + 11);
    v72 = (JSC::B3::Value *)*((_QWORD *)v68 + 7);
    v73 = *(_QWORD *)v68;
    if (__CFADD__(v7, v70))
    {
      if (v73)
        v139 = *(_QWORD *)(v73 + 15000) | ((unint64_t)*(unsigned __int8 *)(v73 + 14992) << 32);
      else
        v139 = 0;
      v110 = v171;
      v140 = WTF::fastMalloc((WTF *)0xD8);
      *(_QWORD *)v140 = off_1E357F5F0;
      *(_DWORD *)(v140 + 8) = -1;
      *(_WORD *)(v140 + 12) = 83;
      *(_DWORD *)(v140 + 16) = 0;
      *(_BYTE *)(v140 + 20) = 4;
      *(_QWORD *)(v140 + 24) = v139;
      *(_QWORD *)(v140 + 32) = 0;
      v141 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v140);
      *v141 = v141 + 2;
      v141[1] = 3;
      *(_OWORD *)(v140 + 40) = 0u;
      *(_OWORD *)(v140 + 56) = 0u;
      *(_OWORD *)(v140 + 72) = 0u;
      *(_OWORD *)(v140 + 88) = 0u;
      *(_QWORD *)(v140 + 104) = 0;
      *(_QWORD *)v140 = off_1E357E700;
      *(_OWORD *)(v140 + 112) = xmmword_1991243D0;
      *(_QWORD *)(v140 + 152) = 0;
      *(_QWORD *)(v140 + 128) = 0xFFFFFFFF00000000;
      *(_QWORD *)(v140 + 136) = v140 + 152;
      *(_WORD *)(v140 + 168) = 0;
      *(_BYTE *)(v140 + 160) = 0;
      *(_QWORD *)(v140 + 144) = 0x100000001;
      JSC::B3::Procedure::addValueImpl(v72, (JSC::B3::Value *)v140);
      v175 = (const char *)v140;
      v142 = (char **)(v71 + 8);
      v143 = *(unsigned int *)(v71 + 20);
      if ((_DWORD)v143 == *(_DWORD *)(v71 + 16))
      {
        v156 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v142, v143 + 1, (unint64_t)&v175);
        v143 = *(unsigned int *)(v71 + 20);
        *(_QWORD *)(*(_QWORD *)(v71 + 8) + 8 * v143) = *(_QWORD *)v156;
        v144 = (uint64_t)v175;
      }
      else
      {
        *(_QWORD *)&(*v142)[8 * v143] = v140;
        v144 = v140;
      }
      *(_DWORD *)(v71 + 20) = v143 + 1;
      *(_QWORD *)(v144 + 32) = v71;
      v145 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)(v145 + 8) = 1;
      *(_QWORD *)v145 = off_1E35B6260;
      *(_QWORD *)(v145 + 16) = v68;
      v146 = *(unsigned int **)(v140 + 56);
      *(_QWORD *)(v140 + 56) = v145;
      if (v146)
      {
        v147 = v146 + 2;
        do
        {
          v148 = __ldaxr(v147);
          v149 = v148 - 1;
        }
        while (__stlxr(v149, v147));
        if (!v149)
        {
          atomic_store(1u, v146 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v146 + 8))(v146);
        }
      }
      goto LABEL_74;
    }
    if (v73)
      v74 = *(_QWORD *)(v73 + 15000) | ((unint64_t)*(unsigned __int8 *)(v73 + 14992) << 32);
    else
      v74 = 0;
    v75 = WTF::fastMalloc((WTF *)0x30);
    v76 = *(_DWORD *)(v57 + 4);
    *(_DWORD *)(v75 + 8) = -1;
    *(_WORD *)(v75 + 12) = 10;
    *(_DWORD *)(v75 + 16) = v76;
    *(_BYTE *)(v75 + 20) = 0;
    *(_QWORD *)(v75 + 24) = v74;
    *(_QWORD *)(v75 + 32) = 0;
    *(_QWORD *)v75 = off_1E357F0F8;
    *(_QWORD *)(v75 + 40) = v57;
    JSC::B3::Procedure::addValueImpl(v72, (JSC::B3::Value *)v75);
    v175 = (const char *)v75;
    v77 = (char **)(v71 + 8);
    v78 = *(unsigned int *)(v71 + 20);
    if ((_DWORD)v78 == *(_DWORD *)(v71 + 16))
    {
      v111 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v77, v78 + 1, (unint64_t)&v175);
      v78 = *(unsigned int *)(v71 + 20);
      *(_QWORD *)(*(_QWORD *)(v71 + 8) + 8 * v78) = *(_QWORD *)v111;
      v79 = (uint64_t)v175;
    }
    else
    {
      *(_QWORD *)&(*v77)[8 * v78] = v75;
      v79 = v75;
    }
    *(_DWORD *)(v71 + 20) = v78 + 1;
    *(_QWORD *)(v79 + 32) = v71;
    v80 = JSC::Wasm::memoryLog2Alignment();
    if (v80 > 3)
      v81 = 16;
    else
      v81 = dword_19915ADD0[1 << v80];
    v82 = JSC::Wasm::OMGIRGenerator::emitCheckAndPreparePointer(v68, (JSC::B3::Value *)v75, v7, v81);
    v83 = *((_QWORD *)v68 + 11);
    v84 = (JSC::B3::Value *)*((_QWORD *)v68 + 7);
    if (*(_QWORD *)v68)
      v85 = *(_QWORD *)(*(_QWORD *)v68 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v68 + 14992) << 32);
    else
      v85 = 0;
    v86 = WTF::fastMalloc((WTF *)0x30);
    v87 = *(_DWORD *)(v169 + 4);
    *(_DWORD *)(v86 + 8) = -1;
    *(_WORD *)(v86 + 12) = 10;
    *(_DWORD *)(v86 + 16) = v87;
    *(_BYTE *)(v86 + 20) = 0;
    *(_QWORD *)(v86 + 24) = v85;
    *(_QWORD *)(v86 + 32) = 0;
    *(_QWORD *)v86 = off_1E357F0F8;
    *(_QWORD *)(v86 + 40) = v169;
    JSC::B3::Procedure::addValueImpl(v84, (JSC::B3::Value *)v86);
    v175 = (const char *)v86;
    v88 = (char **)(v83 + 8);
    v89 = *(unsigned int *)(v83 + 20);
    if ((_DWORD)v89 == *(_DWORD *)(v83 + 16))
    {
      v112 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v88, v89 + 1, (unint64_t)&v175);
      v89 = *(unsigned int *)(v83 + 20);
      *(_QWORD *)(*(_QWORD *)(v83 + 8) + 8 * v89) = *(_QWORD *)v112;
      v90 = (uint64_t)v175;
    }
    else
    {
      *(_QWORD *)&(*v88)[8 * v89] = v86;
      v90 = v86;
    }
    *(_DWORD *)(v83 + 20) = v89 + 1;
    *(_QWORD *)(v90 + 32) = v83;
    v91 = JSC::Wasm::OMGIRGenerator::fixupPointerPlusOffsetForAtomicOps((uint64_t *)v68, v170, v82, v7);
    if (v53 == 254 && ((1 << JSC::Wasm::memoryLog2Alignment()) - 5) >= 4)
    {
      v157 = *((_QWORD *)v68 + 11);
      v158 = (JSC::B3::Value *)*((_QWORD *)v68 + 7);
      v159 = WTF::fastMalloc((WTF *)0x30);
      v92 = (JSC::B3::Value *)v159;
      *(_QWORD *)v159 = off_1E357F5F0;
      *(_DWORD *)(v159 + 8) = -1;
      *(_WORD *)(v159 + 12) = 44;
      if (*(_DWORD *)(v86 + 16) == 2)
        v160 = 1;
      else
        v160 = 3;
      *(_DWORD *)(v159 + 16) = v160;
      *(_BYTE *)(v159 + 20) = 1;
      *(_QWORD *)(v159 + 24) = 0;
      *(_QWORD *)(v159 + 32) = 0;
      JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v159, 1, v86);
      JSC::B3::Procedure::addValueImpl(v158, v92);
      v175 = (const char *)v92;
      v161 = (char **)(v157 + 8);
      v162 = *(unsigned int *)(v157 + 20);
      if ((_DWORD)v162 == *(_DWORD *)(v157 + 16))
      {
        v164 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v161, v162 + 1, (unint64_t)&v175);
        v162 = *(unsigned int *)(v157 + 20);
        *(_QWORD *)(*(_QWORD *)(v157 + 8) + 8 * v162) = *(_QWORD *)v164;
        v163 = v175;
      }
      else
      {
        *(_QWORD *)&(*v161)[8 * v162] = v92;
        v163 = (const char *)v92;
      }
      *(_DWORD *)(v157 + 20) = v162 + 1;
      *((_QWORD *)v163 + 4) = v157;
    }
    else
    {
      v92 = (JSC::B3::Value *)v86;
    }
    if (*((_BYTE *)v68 + 32) == 1 || *(_BYTE *)(*((_QWORD *)v68 + 2) + 112))
      v93 = 590;
    else
      v93 = 78;
    if (*(_QWORD *)v68)
      v94 = *(_QWORD *)(*(_QWORD *)v68 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v68 + 14992) << 32);
    else
      v94 = 0;
    v95 = *((_QWORD *)v68 + 11);
    v96 = (JSC::B3::Value *)*((_QWORD *)v68 + 7);
    v97 = JSC::Wasm::memoryLog2Alignment();
    if (v97 > 3)
      v98 = 4;
    else
      v98 = byte_19915ADF4[1 << v97];
    v99 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v99)
    {
      v100 = (_BYTE *)(v99 + 9040);
      *(_BYTE *)(v99 + 9040) = 1;
      v101 = *(unsigned int *)(v99 + 9056);
      if ((_DWORD)v101)
      {
        *(_DWORD *)(v99 + 9056) = v101 - *(_DWORD *)(v99 + 9060);
        casual = *(_QWORD *)(v99 + 9048) - v101;
LABEL_70:
        *v100 = 0;
LABEL_71:
        v106 = *((_DWORD *)v92 + 4);
        *(_QWORD *)casual = off_1E357F5F0;
        *(_DWORD *)(casual + 8) = -1;
        *(_WORD *)(casual + 12) = v93;
        *(_DWORD *)(casual + 16) = v106;
        *(_BYTE *)(casual + 20) = 2;
        *(_QWORD *)(casual + 24) = v94;
        *(_QWORD *)(casual + 32) = 0;
        JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)casual, 2, (uint64_t)v92, (uint64_t)v91);
        *(_DWORD *)(casual + 40) = 0;
        *(_QWORD *)&v107 = 0xFFFFFFFF00000000;
        *((_QWORD *)&v107 + 1) = 0xFFFFFFFF00000000;
        *(_OWORD *)(casual + 44) = v107;
        *(_QWORD *)casual = off_1E357CDD0;
        *(_BYTE *)(casual + 60) = v98;
        JSC::B3::Procedure::addValueImpl(v96, (JSC::B3::Value *)casual);
        v175 = (const char *)casual;
        v108 = (char **)(v95 + 8);
        v109 = *(unsigned int *)(v95 + 20);
        if ((_DWORD)v109 == *(_DWORD *)(v95 + 16))
        {
          v113 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v108, v109 + 1, (unint64_t)&v175);
          v109 = *(unsigned int *)(v95 + 20);
          *(_QWORD *)(*(_QWORD *)(v95 + 8) + 8 * v109) = *(_QWORD *)v113;
          casual = (uint64_t)v175;
        }
        else
        {
          *(_QWORD *)&(*v108)[8 * v109] = casual;
        }
        v110 = v171;
        *(_DWORD *)(v95 + 20) = v109 + 1;
        *(_QWORD *)(casual + 32) = v95;
LABEL_74:
        *v110 = 0;
        v110[8] = 0;
        return;
      }
      v103 = *(_QWORD *)(v99 + 9080);
      v104 = *(_QWORD *)(v99 + 9064);
      if (v103)
      {
LABEL_69:
        v105 = __clz(v103);
        *(_QWORD *)(v99 + 9080) = v103 & ~(0x8000000000000000 >> v105);
        casual = v104 + 16 * v105;
        goto LABEL_70;
      }
      if (*(_BYTE *)(v99 + 9045) == 6)
      {
        v150 = *(_DWORD *)(v99 + 9076);
        v151 = *(unsigned int *)(v99 + 9072);
        if (v151 < v150)
        {
          *(_QWORD *)&v100[8 * v151 + 56] = 0;
          v152 = (unint64_t *)(v99 + 8 * v151 + 9104);
          v153 = v150 - 1 - v151;
          while (v153)
          {
            v104 += 1024;
            v155 = *v152++;
            v154 = v155;
            LODWORD(v151) = v151 + 1;
            --v153;
            if (v155)
            {
              v103 = __rbit64(v154);
              *(_DWORD *)(v99 + 9072) = v151;
              *(_QWORD *)(v99 + 9064) = v104;
              goto LABEL_69;
            }
          }
          *(_DWORD *)(v99 + 9072) = v150;
        }
      }
      *v100 = 0;
    }
    casual = bmalloc_allocate_casual(80, 1);
    goto LABEL_71;
  }
  v136 = a2 + 14992;
  v137 = " pointer type mismatch";
  v138 = 23;
LABEL_122:
  v175 = v137;
  v176 = v138;
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(&v174, v136, (uint64_t)&v175);
  *(_QWORD *)v171 = v174;
  v171[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::atomicBinaryRMW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, float a7)
{
  unsigned int v7;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  JSC::B3::Value *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  char **v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  JSC::B3::Value *v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  char **v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  JSC::B3::Value *v94;
  unint64_t v95;
  unsigned int v96;
  char v97;
  __int16 v98;
  uint64_t Space;
  int v100;
  __int128 v101;
  char **v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (**PushVariable)(WTF::StringPrintStream *__hidden);
  uint64_t v108;
  JSC::B3::Value *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char **v117;
  uint64_t v118;
  unsigned int v119;
  _QWORD *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void (**v141)(WTF::StringPrintStream *__hidden);
  char v142;
  float v143;
  char *v144;
  unint64_t *v145;
  uint64_t v146;
  void (**v147)(WTF::StringPrintStream *__hidden);
  const char *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  char **v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int *v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  JSC::B3::Value *v162;
  unint64_t v163;
  char **v164;
  char *v165;
  uint64_t v166;
  JSC::B3::Value *v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  char **v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  unsigned int v176;
  JSC::B3::Value *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  void (**v184)(WTF::StringPrintStream *__hidden);
  __int128 v185;
  const char *v186;
  uint64_t v187;

  *(_QWORD *)&v185 = a4;
  *((_QWORD *)&v185 + 1) = a5;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 14960) + 104) == -1)
  {
    v186 = "atomic instruction without memory";
    v187 = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v184, (uint64_t)&v186, a6, a7);
    v141 = v184;
LABEL_82:
    *(_QWORD *)a1 = v141;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)a2;
  v12 = v10 > *(_QWORD *)a2;
  v13 = v10 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_131;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = *(_QWORD *)(a2 + 8);
  v21 = 5;
  if (v13 < 5)
    v21 = v13;
  v22 = v21 - 1;
  *(_QWORD *)a2 = v11 + 1;
  v23 = v20 + v11;
  v24 = v11 + 2;
  while (1)
  {
    v25 = *(char *)(v23 + v17);
    v19 |= (v25 & 0x7F) << v18;
    if ((v25 & 0x80000000) == 0)
      break;
    if (v22 == v17)
      goto LABEL_131;
    LOBYTE(v26) = v24 + v17;
    *(_QWORD *)a2 = v24 + v17;
    v18 += 7;
    if (v13 == ++v17)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v17 == 4 && *(unsigned __int8 *)(v23 + v17) >= 0x10u)
  {
LABEL_131:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get load alignment", (unint64_t *)a2, 25, &v186, a7);
    v141 = (void (**)(WTF::StringPrintStream *__hidden))v186;
    goto LABEL_82;
  }
  if (v19 != JSC::Wasm::memoryLog2Alignment())
  {
    v142 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v19, " does not match against atomic op's natural alignment ", 55, 1 << v142, &v186, v143);
    *(_QWORD *)a1 = v186;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v178 = a1;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = *(_QWORD *)a2;
  v12 = v27 > *(_QWORD *)a2;
  v29 = v27 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_133;
  v17 = 0;
  v30 = 0;
  v7 = 0;
  v31 = *(_QWORD *)(a2 + 8);
  v32 = 5;
  if (v29 < 5)
    v32 = v29;
  v33 = v32 - 1;
  *(_QWORD *)a2 = v28 + 1;
  v34 = v31 + v28;
  v35 = v28 + 2;
  while (1)
  {
    v26 = *(char *)(v34 + v17);
    v7 |= (v26 & 0x7F) << v30;
    if ((v26 & 0x80000000) == 0)
      break;
    if (v33 == v17)
      goto LABEL_133;
    LOBYTE(v26) = v35 + v17;
    *(_QWORD *)a2 = v35 + v17;
    v30 += 7;
    if (v29 == ++v17)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v17 == 4 && v26 >= 0x10u)
  {
LABEL_133:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get load offset", (unint64_t *)a2, 22, &v186, a7);
    goto LABEL_87;
  }
  v36 = *(_DWORD *)(a2 + 68);
  if (!v36)
  {
    v144 = "value";
    v145 = (unint64_t *)a2;
    v146 = 6;
LABEL_86:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v145, 26, v144, v146, &v186, a7);
LABEL_87:
    v147 = (void (**)(WTF::StringPrintStream *__hidden))v186;
LABEL_125:
    *(_QWORD *)v178 = v147;
    *(_BYTE *)(v178 + 8) = 1;
    return;
  }
  v180 = a4;
  v37 = *(_QWORD *)(a2 + 48);
  v38 = *(_QWORD *)(a2 + 56) + 24 * v36;
  v40 = *(_QWORD *)(v38 - 24);
  v39 = *(_QWORD *)(v38 - 16);
  v41 = *(_QWORD *)(v38 - 8);
  *(_DWORD *)(a2 + 68) = v36 - 1;
  v186 = "WasmFunctionParser.h:";
  LODWORD(v187) = 21;
  LODWORD(v184) = 660;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v186, (unsigned int *)&v184, (int **)&v183);
  v49 = v183;
  if (!v183)
  {
    __break(0xC471u);
    JUMPOUT(0x198DFB5D8);
  }
  v50 = *(_DWORD *)(v37 + 512);
  if (!v50)
  {
    __break(0xC471u);
    JUMPOUT(0x198DFB5E0);
  }
  *(_DWORD *)(v37 + 512) = v50 - 1;
  v183 = 0;
  if (*(_DWORD *)v49 == 2)
  {
    WTF::StringImpl::~StringImpl(v49, v42, v43, v44, v45, v46, v47, v48);
    WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
  }
  else
  {
    *(_DWORD *)v49 -= 2;
  }
  v51 = *(_DWORD *)(a2 + 68);
  if (!v51)
  {
    v144 = "pointer";
    v145 = (unint64_t *)a2;
    v146 = 8;
    goto LABEL_86;
  }
  v179 = a5;
  v52 = *(_QWORD *)(a2 + 48);
  v53 = *(_QWORD *)(a2 + 56) + 24 * v51;
  v54 = *(unsigned __int8 *)(v53 - 24);
  v55 = *(_QWORD *)(v53 - 8);
  *(_DWORD *)(a2 + 68) = v51 - 1;
  v186 = "WasmFunctionParser.h:";
  LODWORD(v187) = 21;
  LODWORD(v184) = 661;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v186, (unsigned int *)&v184, (int **)&v182);
  v63 = v182;
  if (!v182)
  {
    __break(0xC471u);
    JUMPOUT(0x198DFB5E8);
  }
  v64 = *(_DWORD *)(v52 + 512);
  v65 = v180;
  if (!v64)
  {
    __break(0xC471u);
    JUMPOUT(0x198DFB5F0);
  }
  *(_DWORD *)(v52 + 512) = v64 - 1;
  v182 = 0;
  if (*(_DWORD *)v63 == 2)
  {
    WTF::StringImpl::~StringImpl(v63, v56, v57, v58, v59, v60, v61, v62);
    WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
  }
  else
  {
    *(_DWORD *)v63 -= 2;
  }
  if (v54 != 255)
  {
    v181 = a3;
    v148 = " pointer type mismatch";
    v149 = 23;
LABEL_124:
    v186 = v148;
    v187 = v149;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral>(&v184, &v181, (uint64_t)&v186);
    v147 = v184;
    goto LABEL_125;
  }
  v66 = v179;
  if (v180 != v40)
  {
LABEL_123:
    v181 = a3;
    v148 = " value type mismatch";
    v149 = 21;
    goto LABEL_124;
  }
  if (v180 - 239 < 2 || v180 == 227)
  {
    if (v179 == v39)
      v67 = ((v180 + 29) < 0xEu) & (0x3001u >> (v180 + 29));
    else
      v67 = 0;
    if ((v67 & 1) == 0)
      goto LABEL_123;
  }
  else
  {
    if (v179 == v39)
      v176 = ((v180 + 29) < 0xEu) & (0x3001u >> (v180 + 29));
    else
      v176 = 1;
    if (v176 == 1)
      goto LABEL_123;
  }
  v184 = 0;
  v68 = *(_QWORD *)(a2 + 48);
  v69 = JSC::Wasm::memoryLog2Alignment();
  if (v69 > 3)
    v70 = 16;
  else
    v70 = dword_19915ADD0[1 << v69];
  v71 = *(_QWORD *)(v68 + 88);
  v72 = *(JSC::B3::Value **)(v68 + 56);
  v73 = *(_QWORD *)v68;
  if (!__CFADD__(v7, v70))
  {
    if (v73)
      v74 = *(_QWORD *)(v73 + 15000) | ((unint64_t)*(unsigned __int8 *)(v73 + 14992) << 32);
    else
      v74 = 0;
    v75 = WTF::fastMalloc((WTF *)0x30);
    v76 = *(_DWORD *)(v55 + 4);
    *(_DWORD *)(v75 + 8) = -1;
    *(_WORD *)(v75 + 12) = 10;
    *(_DWORD *)(v75 + 16) = v76;
    *(_BYTE *)(v75 + 20) = 0;
    *(_QWORD *)(v75 + 24) = v74;
    *(_QWORD *)(v75 + 32) = 0;
    *(_QWORD *)v75 = off_1E357F0F8;
    *(_QWORD *)(v75 + 40) = v55;
    JSC::B3::Procedure::addValueImpl(v72, (JSC::B3::Value *)v75);
    v186 = (const char *)v75;
    v77 = (char **)(v71 + 8);
    v78 = *(unsigned int *)(v71 + 20);
    if ((_DWORD)v78 == *(_DWORD *)(v71 + 16))
    {
      v122 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v77, v78 + 1, (unint64_t)&v186);
      v78 = *(unsigned int *)(v71 + 20);
      *(_QWORD *)(*(_QWORD *)(v71 + 8) + 8 * v78) = *(_QWORD *)v122;
      v79 = (uint64_t)v186;
    }
    else
    {
      *(_QWORD *)&(*v77)[8 * v78] = v75;
      v79 = v75;
    }
    *(_DWORD *)(v71 + 20) = v78 + 1;
    *(_QWORD *)(v79 + 32) = v71;
    v80 = JSC::Wasm::memoryLog2Alignment();
    if (v80 > 3)
      v81 = 16;
    else
      v81 = dword_19915ADD0[1 << v80];
    v82 = JSC::Wasm::OMGIRGenerator::emitCheckAndPreparePointer((JSC::Wasm::OMGIRGenerator *)v68, (JSC::B3::Value *)v75, v7, v81);
    v83 = *(_QWORD *)(v68 + 88);
    v84 = *(JSC::B3::Value **)(v68 + 56);
    if (*(_QWORD *)v68)
      v85 = *(_QWORD *)(*(_QWORD *)v68 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v68 + 14992) << 32);
    else
      v85 = 0;
    v86 = WTF::fastMalloc((WTF *)0x30);
    v87 = *(_DWORD *)(v41 + 4);
    *(_DWORD *)(v86 + 8) = -1;
    *(_WORD *)(v86 + 12) = 10;
    *(_DWORD *)(v86 + 16) = v87;
    *(_BYTE *)(v86 + 20) = 0;
    *(_QWORD *)(v86 + 24) = v85;
    *(_QWORD *)(v86 + 32) = 0;
    *(_QWORD *)v86 = off_1E357F0F8;
    *(_QWORD *)(v86 + 40) = v41;
    JSC::B3::Procedure::addValueImpl(v84, (JSC::B3::Value *)v86);
    v186 = (const char *)v86;
    v88 = (char **)(v83 + 8);
    v89 = *(unsigned int *)(v83 + 20);
    if ((_DWORD)v89 == *(_DWORD *)(v83 + 16))
    {
      v123 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v88, v89 + 1, (unint64_t)&v186);
      v89 = *(unsigned int *)(v83 + 20);
      *(_QWORD *)(*(_QWORD *)(v83 + 8) + 8 * v89) = *(_QWORD *)v123;
      v90 = (uint64_t)v186;
    }
    else
    {
      *(_QWORD *)&(*v88)[8 * v89] = v86;
      v90 = v86;
    }
    *(_DWORD *)(v83 + 20) = v89 + 1;
    *(_QWORD *)(v90 + 32) = v83;
    v177 = JSC::Wasm::OMGIRGenerator::fixupPointerPlusOffsetForAtomicOps((uint64_t *)v68, a3, v82, v7);
    if ((a3 - 30) < 0x2A)
    {
      v91 = qword_19915AC80[(int)a3 - 30];
      if (v180 == 254 && ((1 << JSC::Wasm::memoryLog2Alignment()) - 5) >= 4)
      {
        v166 = *(_QWORD *)(v68 + 88);
        v167 = *(JSC::B3::Value **)(v68 + 56);
        v168 = WTF::fastMalloc((WTF *)0x30);
        v169 = v86;
        v86 = v168;
        *(_QWORD *)v168 = off_1E357F5F0;
        *(_DWORD *)(v168 + 8) = -1;
        *(_WORD *)(v168 + 12) = 44;
        if (*(_DWORD *)(v169 + 16) == 2)
          v170 = 1;
        else
          v170 = 3;
        *(_DWORD *)(v168 + 16) = v170;
        *(_BYTE *)(v168 + 20) = 1;
        *(_QWORD *)(v168 + 24) = 0;
        *(_QWORD *)(v168 + 32) = 0;
        JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v168, 1, v169);
        JSC::B3::Procedure::addValueImpl(v167, (JSC::B3::Value *)v86);
        v186 = (const char *)v86;
        v171 = (char **)(v166 + 8);
        v172 = *(unsigned int *)(v166 + 20);
        if ((_DWORD)v172 == *(_DWORD *)(v166 + 16))
        {
          v175 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v171, v172 + 1, (unint64_t)&v186);
          v172 = *(unsigned int *)(v166 + 20);
          *(_QWORD *)(*(_QWORD *)(v166 + 8) + 8 * v172) = *(_QWORD *)v175;
          v173 = (uint64_t)v186;
        }
        else
        {
          *(_QWORD *)&(*v171)[8 * v172] = v86;
          v173 = v86;
        }
        *(_DWORD *)(v166 + 20) = v172 + 1;
        *(_QWORD *)(v173 + 32) = v166;
      }
      if (*(_BYTE *)(v68 + 32) == 1 || *(_BYTE *)(*(_QWORD *)(v68 + 16) + 112))
        v92 = 512;
      else
        v92 = 0;
      v93 = *(_QWORD *)(v68 + 88);
      v94 = *(JSC::B3::Value **)(v68 + 56);
      if (*(_QWORD *)v68)
        v95 = *(_QWORD *)(*(_QWORD *)v68 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v68 + 14992) << 32);
      else
        v95 = 0;
      v96 = JSC::Wasm::memoryLog2Alignment();
      if (v96 > 3)
        v97 = 4;
      else
        v97 = byte_19915ADF4[1 << v96];
      v98 = v92 | v91;
      Space = JSC::B3::Value::allocateSpace(v91, 64);
      v100 = *(_DWORD *)(v86 + 16);
      *(_QWORD *)Space = off_1E357F5F0;
      *(_DWORD *)(Space + 8) = -1;
      *(_WORD *)(Space + 12) = v98;
      *(_DWORD *)(Space + 16) = v100;
      *(_BYTE *)(Space + 20) = 2;
      *(_QWORD *)(Space + 24) = v95;
      *(_QWORD *)(Space + 32) = 0;
      JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)Space, 2, v86, (uint64_t)v177);
      *(_DWORD *)(Space + 40) = 0;
      *(_QWORD *)&v101 = 0xFFFFFFFF00000000;
      *((_QWORD *)&v101 + 1) = 0xFFFFFFFF00000000;
      *(_OWORD *)(Space + 44) = v101;
      *(_QWORD *)Space = off_1E357CDD0;
      *(_BYTE *)(Space + 60) = v97;
      JSC::B3::Procedure::addValueImpl(v94, (JSC::B3::Value *)Space);
      v186 = (const char *)Space;
      v102 = (char **)(v93 + 8);
      v103 = *(unsigned int *)(v93 + 20);
      if ((_DWORD)v103 == *(_DWORD *)(v93 + 16))
      {
        v124 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v102, v103 + 1, (unint64_t)&v186);
        v103 = *(unsigned int *)(v93 + 20);
        *(_QWORD *)(*(_QWORD *)(v93 + 8) + 8 * v103) = *(_QWORD *)v124;
        v104 = (uint64_t)v186;
      }
      else
      {
        *(_QWORD *)&(*v102)[8 * v103] = Space;
        v104 = Space;
      }
      v66 = v179;
      v65 = v180;
      *(_DWORD *)(v93 + 20) = v103 + 1;
      *(_QWORD *)(v104 + 32) = v93;
      v105 = (uint64_t)JSC::Wasm::OMGIRGenerator::sanitizeAtomicResult((uint64_t *)v68, a3, v180, v179, (JSC::B3::Value *)Space);
      goto LABEL_68;
    }
LABEL_141:
    __break(0xC471u);
    JUMPOUT(0x198DFB5A4);
  }
  if (v73)
    v150 = *(_QWORD *)(v73 + 15000) | ((unint64_t)*(unsigned __int8 *)(v73 + 14992) << 32);
  else
    v150 = 0;
  v151 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v151 = off_1E357F5F0;
  *(_DWORD *)(v151 + 8) = -1;
  *(_WORD *)(v151 + 12) = 83;
  *(_DWORD *)(v151 + 16) = 0;
  *(_BYTE *)(v151 + 20) = 4;
  *(_QWORD *)(v151 + 24) = v150;
  *(_QWORD *)(v151 + 32) = 0;
  v152 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v151);
  *v152 = v152 + 2;
  v152[1] = 3;
  *(_OWORD *)(v151 + 40) = 0u;
  *(_OWORD *)(v151 + 56) = 0u;
  *(_OWORD *)(v151 + 72) = 0u;
  *(_OWORD *)(v151 + 88) = 0u;
  *(_QWORD *)(v151 + 104) = 0;
  *(_QWORD *)v151 = off_1E357E700;
  *(_OWORD *)(v151 + 112) = xmmword_1991243D0;
  *(_QWORD *)(v151 + 152) = 0;
  *(_QWORD *)(v151 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v151 + 136) = v151 + 152;
  *(_WORD *)(v151 + 168) = 0;
  *(_BYTE *)(v151 + 160) = 0;
  *(_QWORD *)(v151 + 144) = 0x100000001;
  JSC::B3::Procedure::addValueImpl(v72, (JSC::B3::Value *)v151);
  v186 = (const char *)v151;
  v153 = (char **)(v71 + 8);
  v154 = *(unsigned int *)(v71 + 20);
  if ((_DWORD)v154 == *(_DWORD *)(v71 + 16))
  {
    v165 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v153, v154 + 1, (unint64_t)&v186);
    v154 = *(unsigned int *)(v71 + 20);
    *(_QWORD *)(*(_QWORD *)(v71 + 8) + 8 * v154) = *(_QWORD *)v165;
    v155 = (uint64_t)v186;
  }
  else
  {
    *(_QWORD *)&(*v153)[8 * v154] = v151;
    v155 = v151;
  }
  *(_DWORD *)(v71 + 20) = v154 + 1;
  *(_QWORD *)(v155 + 32) = v71;
  v156 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v156 + 8) = 1;
  *(_QWORD *)v156 = off_1E35B6288;
  *(_QWORD *)(v156 + 16) = v68;
  v157 = *(unsigned int **)(v151 + 56);
  *(_QWORD *)(v151 + 56) = v156;
  if (v157)
  {
    v158 = v157 + 2;
    do
    {
      v159 = __ldaxr(v158);
      v160 = v159 - 1;
    }
    while (__stlxr(v160, v158));
    if (!v160)
    {
      atomic_store(1u, v157 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v157 + 8))(v157);
    }
  }
  if (v180 != 254)
  {
    if (v180 == 255)
    {
      v161 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)v68, 1u, 0, 0, 0);
      PushVariable = (void (**)(WTF::StringPrintStream *__hidden))JSC::Wasm::OMGIRGenerator::getPushVariable(v68, *(_DWORD *)(v161 + 16));
      v108 = *(_QWORD *)(v68 + 88);
      v162 = *(JSC::B3::Value **)(v68 + 56);
      if (*(_QWORD *)v68)
        v163 = *(_QWORD *)(*(_QWORD *)v68 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v68 + 14992) << 32);
      else
        v163 = 0;
      v111 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v111 + 8) = -1;
      *(_WORD *)(v111 + 12) = 9;
      *(_DWORD *)(v111 + 16) = 0;
      *(_BYTE *)(v111 + 20) = 1;
      *(_QWORD *)(v111 + 24) = v163;
      *(_QWORD *)(v111 + 32) = 0;
      *(_QWORD *)v111 = off_1E357F0F8;
      *(_QWORD *)(v111 + 40) = PushVariable;
      *(_QWORD *)(v111 + 48) = v161;
      JSC::B3::Procedure::addValueImpl(v162, (JSC::B3::Value *)v111);
      v186 = (const char *)v111;
      v164 = (char **)(v108 + 8);
      v118 = *(unsigned int *)(v108 + 20);
      if ((_DWORD)v118 == *(_DWORD *)(v108 + 16))
      {
        v174 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v164, v118 + 1, (unint64_t)&v186);
        v118 = *(unsigned int *)(v108 + 20);
        *(_QWORD *)(*(_QWORD *)(v108 + 8) + 8 * v118) = *(_QWORD *)v174;
        v111 = (uint64_t)v186;
      }
      else
      {
        *(_QWORD *)&(*v164)[8 * v118] = v111;
      }
      v66 = v179;
      goto LABEL_72;
    }
    goto LABEL_141;
  }
  v105 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)v68, 2u, 0, 0, 0);
LABEL_68:
  v106 = v105;
  PushVariable = (void (**)(WTF::StringPrintStream *__hidden))JSC::Wasm::OMGIRGenerator::getPushVariable(v68, *(_DWORD *)(v105 + 16));
  v108 = *(_QWORD *)(v68 + 88);
  v109 = *(JSC::B3::Value **)(v68 + 56);
  if (*(_QWORD *)v68)
    v110 = *(_QWORD *)(*(_QWORD *)v68 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v68 + 14992) << 32);
  else
    v110 = 0;
  v111 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v111 + 8) = -1;
  *(_WORD *)(v111 + 12) = 9;
  *(_DWORD *)(v111 + 16) = 0;
  *(_BYTE *)(v111 + 20) = 1;
  *(_QWORD *)(v111 + 24) = v110;
  *(_QWORD *)(v111 + 32) = 0;
  *(_QWORD *)v111 = off_1E357F0F8;
  *(_QWORD *)(v111 + 40) = PushVariable;
  *(_QWORD *)(v111 + 48) = v106;
  JSC::B3::Procedure::addValueImpl(v109, (JSC::B3::Value *)v111);
  v186 = (const char *)v111;
  v117 = (char **)(v108 + 8);
  v118 = *(unsigned int *)(v108 + 20);
  if ((_DWORD)v118 == *(_DWORD *)(v108 + 16))
  {
    v121 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v117, v118 + 1, (unint64_t)&v186);
    v118 = *(unsigned int *)(v108 + 20);
    *(_QWORD *)(*(_QWORD *)(v108 + 8) + 8 * v118) = *(_QWORD *)v121;
    v111 = (uint64_t)v186;
  }
  else
  {
    *(_QWORD *)&(*v117)[8 * v118] = v111;
  }
LABEL_72:
  *(_DWORD *)(v108 + 20) = v118 + 1;
  *(_QWORD *)(v111 + 32) = v108;
  v184 = PushVariable;
  v119 = *(_DWORD *)(a2 + 68);
  if (v119 == *(_DWORD *)(a2 + 64))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::B3::Variable *>(a2 + 56, &v185, (uint64_t *)&v184, v112, v113, v114, v115, v116);
  }
  else
  {
    v120 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 24 * v119);
    *v120 = v65;
    v120[1] = v66;
    v120[2] = PushVariable;
    ++*(_DWORD *)(a2 + 68);
  }
  *(_BYTE *)v178 = 0;
  *(_BYTE *)(v178 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::atomicWait(uint64_t a1, uint64_t a2, int a3, unsigned __int8 a4, uint64_t a5, double a6, float a7)
{
  int v7;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::AtomStringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  int v78;
  char v79;
  _QWORD *v80;
  uint64_t v81;
  JSC::B3::Value *v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  char **v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  JSC::B3::Value *v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  char **v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  JSC::B3::Value *v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  char **v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  JSC::B3::Value *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char **v110;
  uint64_t v111;
  uint64_t v112;
  JSC::B3::Value *v113;
  unint64_t v114;
  uint64_t v115;
  JSC::B3::Value *v116;
  uint64_t (*v117)(uint64_t, unsigned int, unsigned int, uint64_t, uint64_t);
  unint64_t v118;
  char **v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  JSC::B3::Value *v125;
  unint64_t v126;
  int *v127;
  uint64_t v128;
  _QWORD *v129;
  void (**PushVariable)(WTF::StringPrintStream *__hidden);
  uint64_t v131;
  JSC::B3::Value *v132;
  unint64_t v133;
  uint64_t v134;
  char **v135;
  uint64_t v136;
  uint64_t v137;
  JSC::B3::Value *v138;
  unint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  JSC::B3::Value *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int *v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  uint64_t v162;
  void (**v163)(WTF::StringPrintStream *__hidden);
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  void (**v199)(WTF::StringPrintStream *__hidden);
  char v200;
  float v201;
  char *v202;
  unint64_t *v203;
  uint64_t v204;
  const char *v205;
  uint64_t v206;
  unsigned int v207;
  char *v208;
  unint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  char **v216;
  uint64_t v217;
  int v218;
  WTF::StringImpl *v219;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221;
  void (**v222)(WTF::StringPrintStream *__hidden);
  const char *v223;
  uint64_t v224;
  char v225;

  if (*(_DWORD *)(*(_QWORD *)(a2 + 14960) + 104) == -1)
  {
    v223 = "atomic instruction without memory";
    v224 = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v222, (uint64_t)&v223, a6, a7);
    v199 = v222;
LABEL_122:
    *(_QWORD *)a1 = v199;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)a2;
  v12 = v10 > *(_QWORD *)a2;
  v13 = v10 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_144;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = *(_QWORD *)(a2 + 8);
  v21 = 5;
  if (v13 < 5)
    v21 = v13;
  v22 = v21 - 1;
  *(_QWORD *)a2 = v11 + 1;
  v23 = v20 + v11;
  v24 = v11 + 2;
  while (1)
  {
    v25 = *(char *)(v23 + v17);
    v19 |= (v25 & 0x7F) << v18;
    if ((v25 & 0x80000000) == 0)
      break;
    if (v22 == v17)
      goto LABEL_144;
    LOBYTE(v26) = v24 + v17;
    *(_QWORD *)a2 = v24 + v17;
    v18 += 7;
    if (v13 == ++v17)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v17 == 4 && *(unsigned __int8 *)(v23 + v17) >= 0x10u)
  {
LABEL_144:
    v208 = "can't get load alignment";
    v209 = (unint64_t *)a2;
    v210 = 25;
LABEL_147:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v208, v209, v210, &v223, a7);
    goto LABEL_121;
  }
  if (v19 != JSC::Wasm::memoryLog2Alignment())
  {
    v200 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v19, " does not match against atomic op's natural alignment ", 55, 1 << v200, &v223, v201);
    *(_QWORD *)a1 = v223;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v27 = *(_QWORD *)(a2 + 16);
  v28 = *(_QWORD *)a2;
  v12 = v27 > *(_QWORD *)a2;
  v29 = v27 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_146;
  v17 = 0;
  v30 = 0;
  v7 = 0;
  v31 = *(_QWORD *)(a2 + 8);
  v32 = 5;
  if (v29 < 5)
    v32 = v29;
  v33 = v32 - 1;
  *(_QWORD *)a2 = v28 + 1;
  v34 = v31 + v28;
  v35 = v28 + 2;
  while (1)
  {
    v26 = *(char *)(v34 + v17);
    v7 |= (v26 & 0x7F) << v30;
    if ((v26 & 0x80000000) == 0)
      break;
    if (v33 == v17)
      goto LABEL_146;
    LOBYTE(v26) = v35 + v17;
    *(_QWORD *)a2 = v35 + v17;
    v30 += 7;
    if (v29 == ++v17)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v17 == 4 && v26 >= 0x10u)
  {
LABEL_146:
    v208 = "can't get load offset";
    v209 = (unint64_t *)a2;
    v210 = 22;
    goto LABEL_147;
  }
  v36 = *(_DWORD *)(a2 + 68);
  if (!v36)
  {
    v202 = "timeout";
LABEL_119:
    v203 = (unint64_t *)a2;
    v204 = 8;
    goto LABEL_120;
  }
  v37 = *(_QWORD *)(a2 + 48);
  v38 = *(_QWORD *)(a2 + 56) + 24 * v36;
  v39 = *(unsigned __int8 *)(v38 - 24);
  v40 = *(_QWORD *)(v38 - 8);
  *(_DWORD *)(a2 + 68) = v36 - 1;
  v223 = "WasmFunctionParser.h:";
  LODWORD(v224) = 21;
  LODWORD(v222) = 712;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v223, (unsigned int *)&v222, (int **)&v221);
  v48 = v221;
  if (!v221)
  {
    __break(0xC471u);
    goto LABEL_154;
  }
  v49 = *(_DWORD *)(v37 + 512);
  if (!v49)
  {
    __break(0xC471u);
    JUMPOUT(0x198DFC4C0);
  }
  *(_DWORD *)(v37 + 512) = v49 - 1;
  v221 = 0;
  if (*(_DWORD *)v48 == 2)
  {
    WTF::StringImpl::~StringImpl(v48, v41, v42, v43, v44, v45, v46, v47);
    WTF::fastFree(v173, v174, v175, v176, v177, v178, v179, v180);
  }
  else
  {
    *(_DWORD *)v48 -= 2;
  }
  v50 = *(_DWORD *)(a2 + 68);
  if (!v50)
  {
    v202 = "value";
    v203 = (unint64_t *)a2;
    v204 = 6;
LABEL_120:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v203, 26, v202, v204, &v223, a7);
LABEL_121:
    v199 = (void (**)(WTF::StringPrintStream *__hidden))v223;
    goto LABEL_122;
  }
  v212 = v40;
  v213 = v39;
  v51 = a5;
  v52 = *(_QWORD *)(a2 + 48);
  v53 = *(_QWORD *)(a2 + 56) + 24 * v50;
  v54 = *(_QWORD *)(v53 - 24);
  v55 = *(_QWORD *)(v53 - 16);
  v211 = *(_QWORD *)(v53 - 8);
  *(_DWORD *)(a2 + 68) = v50 - 1;
  v223 = "WasmFunctionParser.h:";
  LODWORD(v224) = 21;
  LODWORD(v222) = 713;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v223, (unsigned int *)&v222, (int **)&v220);
  v63 = v220;
  if (!v220)
  {
    __break(0xC471u);
    JUMPOUT(0x198DFC4C8);
  }
  v64 = *(_DWORD *)(v52 + 512);
  if (!v64)
  {
    __break(0xC471u);
    JUMPOUT(0x198DFC4D0);
  }
  *(_DWORD *)(v52 + 512) = v64 - 1;
  v220 = 0;
  if (*(_DWORD *)v63 == 2)
  {
    WTF::StringImpl::~StringImpl(v63, v56, v57, v58, v59, v60, v61, v62);
    WTF::fastFree(v181, v182, v183, v184, v185, v186, v187, v188);
  }
  else
  {
    *(_DWORD *)v63 -= 2;
  }
  v65 = *(_DWORD *)(a2 + 68);
  if (!v65)
  {
    v202 = "pointer";
    goto LABEL_119;
  }
  v215 = a3;
  v217 = a1;
  v66 = *(_QWORD *)(a2 + 48);
  v67 = *(_QWORD *)(a2 + 56) + 24 * v65;
  v68 = *(unsigned __int8 *)(v67 - 24);
  v69 = *(_QWORD *)(v67 - 8);
  *(_DWORD *)(a2 + 68) = v65 - 1;
  v223 = "WasmFunctionParser.h:";
  LODWORD(v224) = 21;
  LODWORD(v222) = 714;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v223, (unsigned int *)&v222, (int **)&v219);
  v77 = v219;
  if (!v219)
  {
    __break(0xC471u);
    JUMPOUT(0x198DFC4D8);
  }
  v78 = *(_DWORD *)(v66 + 512);
  if (!v78)
  {
    __break(0xC471u);
LABEL_154:
    JUMPOUT(0x198DFC4B8);
  }
  *(_DWORD *)(v66 + 512) = v78 - 1;
  v219 = 0;
  if (*(_DWORD *)v77 == 2)
  {
    WTF::StringImpl::~StringImpl(v77, v70, v71, v72, v73, v74, v75, v76);
    WTF::fastFree(v189, v190, v191, v192, v193, v194, v195, v196);
  }
  else
  {
    *(_DWORD *)v77 -= 2;
  }
  if (v68 != 255)
  {
    v218 = v215;
    v205 = " pointer type mismatch";
LABEL_125:
    v206 = 23;
LABEL_132:
    v223 = v205;
    v224 = v206;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral>(&v222, &v218, (uint64_t)&v223);
    *(_QWORD *)v217 = v222;
    *(_BYTE *)(v217 + 8) = 1;
    return;
  }
  if (a4 != v54)
  {
LABEL_131:
    v218 = v215;
    v205 = " value type mismatch";
    v206 = 21;
    goto LABEL_132;
  }
  if (a4 - 239 < 2 || a4 == 227)
  {
    if (v51 == v55)
      v79 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
    else
      v79 = 0;
    if ((v79 & 1) == 0)
      goto LABEL_131;
  }
  else
  {
    if (v51 == v55)
      v207 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
    else
      v207 = 1;
    if (v207 == 1)
      goto LABEL_131;
  }
  if (v213 != 254)
  {
    v218 = v215;
    v205 = " timeout type mismatch";
    goto LABEL_125;
  }
  v222 = 0;
  v80 = *(_QWORD **)(a2 + 48);
  v81 = v80[11];
  v82 = (JSC::B3::Value *)v80[7];
  if (*v80)
    v83 = *(_QWORD *)(*v80 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v80 + 14992) << 32);
  else
    v83 = 0;
  v84 = WTF::fastMalloc((WTF *)0x30);
  v85 = *(_DWORD *)(v69 + 4);
  *(_DWORD *)(v84 + 8) = -1;
  *(_WORD *)(v84 + 12) = 10;
  *(_DWORD *)(v84 + 16) = v85;
  *(_BYTE *)(v84 + 20) = 0;
  *(_QWORD *)(v84 + 24) = v83;
  *(_QWORD *)(v84 + 32) = 0;
  *(_QWORD *)v84 = off_1E357F0F8;
  *(_QWORD *)(v84 + 40) = v69;
  JSC::B3::Procedure::addValueImpl(v82, (JSC::B3::Value *)v84);
  v223 = (const char *)v84;
  v86 = (char **)(v81 + 8);
  v87 = *(unsigned int *)(v81 + 20);
  if ((_DWORD)v87 == *(_DWORD *)(v81 + 16))
  {
    v164 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v86, v87 + 1, (unint64_t)&v223);
    v87 = *(unsigned int *)(v81 + 20);
    *(_QWORD *)(*(_QWORD *)(v81 + 8) + 8 * v87) = *(_QWORD *)v164;
    v88 = (uint64_t)v223;
  }
  else
  {
    *(_QWORD *)&(*v86)[8 * v87] = v84;
    v88 = v84;
  }
  *(_DWORD *)(v81 + 20) = v87 + 1;
  *(_QWORD *)(v88 + 32) = v81;
  v89 = v80[11];
  v90 = (JSC::B3::Value *)v80[7];
  if (*v80)
    v91 = *(_QWORD *)(*v80 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v80 + 14992) << 32);
  else
    v91 = 0;
  v92 = WTF::fastMalloc((WTF *)0x30);
  v93 = *(_DWORD *)(v211 + 4);
  *(_DWORD *)(v92 + 8) = -1;
  *(_WORD *)(v92 + 12) = 10;
  *(_DWORD *)(v92 + 16) = v93;
  *(_BYTE *)(v92 + 20) = 0;
  *(_QWORD *)(v92 + 24) = v91;
  *(_QWORD *)(v92 + 32) = 0;
  *(_QWORD *)v92 = off_1E357F0F8;
  *(_QWORD *)(v92 + 40) = v211;
  JSC::B3::Procedure::addValueImpl(v90, (JSC::B3::Value *)v92);
  v223 = (const char *)v92;
  v94 = (char **)(v89 + 8);
  v95 = *(unsigned int *)(v89 + 20);
  if ((_DWORD)v95 == *(_DWORD *)(v89 + 16))
  {
    v165 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v94, v95 + 1, (unint64_t)&v223);
    v95 = *(unsigned int *)(v89 + 20);
    *(_QWORD *)(*(_QWORD *)(v89 + 8) + 8 * v95) = *(_QWORD *)v165;
    v96 = (uint64_t)v223;
  }
  else
  {
    *(_QWORD *)&(*v94)[8 * v95] = v92;
    v96 = v92;
  }
  *(_DWORD *)(v89 + 20) = v95 + 1;
  *(_QWORD *)(v96 + 32) = v89;
  v97 = v80[11];
  v98 = (JSC::B3::Value *)v80[7];
  if (*v80)
    v99 = *(_QWORD *)(*v80 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v80 + 14992) << 32);
  else
    v99 = 0;
  v100 = WTF::fastMalloc((WTF *)0x30);
  v101 = *(_DWORD *)(v212 + 4);
  *(_DWORD *)(v100 + 8) = -1;
  *(_WORD *)(v100 + 12) = 10;
  *(_DWORD *)(v100 + 16) = v101;
  *(_BYTE *)(v100 + 20) = 0;
  *(_QWORD *)(v100 + 24) = v99;
  *(_QWORD *)(v100 + 32) = 0;
  *(_QWORD *)v100 = off_1E357F0F8;
  *(_QWORD *)(v100 + 40) = v212;
  JSC::B3::Procedure::addValueImpl(v98, (JSC::B3::Value *)v100);
  v223 = (const char *)v100;
  v102 = (char **)(v97 + 8);
  v103 = *(unsigned int *)(v97 + 20);
  if ((_DWORD)v103 == *(_DWORD *)(v97 + 16))
  {
    v166 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v102, v103 + 1, (unint64_t)&v223);
    v103 = *(unsigned int *)(v97 + 20);
    *(_QWORD *)(*(_QWORD *)(v97 + 8) + 8 * v103) = *(_QWORD *)v166;
    v104 = (uint64_t)v223;
  }
  else
  {
    *(_QWORD *)&(*v102)[8 * v103] = v100;
    v104 = v100;
  }
  *(_DWORD *)(v97 + 20) = v103 + 1;
  *(_QWORD *)(v104 + 32) = v97;
  v105 = v80[11];
  v106 = (JSC::B3::Value *)v80[7];
  v107 = *v80;
  v214 = v80[59];
  if (v215 == 1)
  {
    if (v107)
      v108 = *(_QWORD *)(v107 + 15000) | ((unint64_t)*(unsigned __int8 *)(v107 + 14992) << 32);
    else
      v108 = 0;
    v109 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v109 + 8) = -1;
    *(_WORD *)(v109 + 12) = 3;
    *(_DWORD *)(v109 + 16) = 1;
    *(_BYTE *)(v109 + 20) = 0;
    *(_QWORD *)(v109 + 24) = v108;
    *(_QWORD *)(v109 + 32) = 0;
    *(_QWORD *)v109 = off_1E357D8E0;
    *(_DWORD *)(v109 + 40) = v7;
    JSC::B3::Procedure::addValueImpl(v106, (JSC::B3::Value *)v109);
    v223 = (const char *)v109;
    v110 = (char **)(v105 + 8);
    v111 = *(unsigned int *)(v105 + 20);
    v216 = (char **)(v105 + 8);
    if ((_DWORD)v111 == *(_DWORD *)(v105 + 16))
    {
      v197 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v110, v111 + 1, (unint64_t)&v223);
      v111 = *(unsigned int *)(v105 + 20);
      *(_QWORD *)(*(_QWORD *)(v105 + 8) + 8 * v111) = *(_QWORD *)v197;
      v112 = (uint64_t)v223;
    }
    else
    {
      *(_QWORD *)&(*v110)[8 * v111] = v109;
      v112 = v109;
    }
    *(_DWORD *)(v105 + 20) = v111 + 1;
    *(_QWORD *)(v112 + 32) = v105;
    v113 = (JSC::B3::Value *)v80[7];
    if (*v80)
      v114 = *(_QWORD *)(*v80 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v80 + 14992) << 32);
    else
      v114 = 0;
    v115 = WTF::fastMalloc((WTF *)0x30);
    v116 = (JSC::B3::Value *)v115;
    *(_DWORD *)(v115 + 8) = -1;
    *(_WORD *)(v115 + 12) = 4;
    *(_DWORD *)(v115 + 16) = 2;
    *(_BYTE *)(v115 + 20) = 0;
    *(_QWORD *)(v115 + 24) = v114;
    *(_QWORD *)(v115 + 32) = 0;
    v117 = operationMemoryAtomicWait32;
  }
  else
  {
    if (v107)
      v118 = *(_QWORD *)(v107 + 15000) | ((unint64_t)*(unsigned __int8 *)(v107 + 14992) << 32);
    else
      v118 = 0;
    v109 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v109 + 8) = -1;
    *(_WORD *)(v109 + 12) = 3;
    *(_DWORD *)(v109 + 16) = 1;
    *(_BYTE *)(v109 + 20) = 0;
    *(_QWORD *)(v109 + 24) = v118;
    *(_QWORD *)(v109 + 32) = 0;
    *(_QWORD *)v109 = off_1E357D8E0;
    *(_DWORD *)(v109 + 40) = v7;
    JSC::B3::Procedure::addValueImpl(v106, (JSC::B3::Value *)v109);
    v223 = (const char *)v109;
    v119 = (char **)(v105 + 8);
    v120 = *(unsigned int *)(v105 + 20);
    v216 = (char **)(v105 + 8);
    if ((_DWORD)v120 == *(_DWORD *)(v105 + 16))
    {
      v198 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v119, v120 + 1, (unint64_t)&v223);
      v120 = *(unsigned int *)(v105 + 20);
      *(_QWORD *)(*(_QWORD *)(v105 + 8) + 8 * v120) = *(_QWORD *)v198;
      v121 = (uint64_t)v223;
    }
    else
    {
      *(_QWORD *)&(*v119)[8 * v120] = v109;
      v121 = v109;
    }
    *(_DWORD *)(v105 + 20) = v120 + 1;
    *(_QWORD *)(v121 + 32) = v105;
    v113 = (JSC::B3::Value *)v80[7];
    if (*v80)
      v122 = *(_QWORD *)(*v80 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v80 + 14992) << 32);
    else
      v122 = 0;
    v115 = WTF::fastMalloc((WTF *)0x30);
    v116 = (JSC::B3::Value *)v115;
    *(_DWORD *)(v115 + 8) = -1;
    *(_WORD *)(v115 + 12) = 4;
    *(_DWORD *)(v115 + 16) = 2;
    *(_BYTE *)(v115 + 20) = 0;
    *(_QWORD *)(v115 + 24) = v122;
    *(_QWORD *)(v115 + 32) = 0;
    v117 = operationMemoryAtomicWait64;
  }
  *(_QWORD *)(v115 + 40) = v117;
  *(_QWORD *)v115 = off_1E357E2D0;
  JSC::B3::Procedure::addValueImpl(v113, v116);
  v223 = (const char *)v116;
  v123 = *(unsigned int *)(v105 + 20);
  if ((_DWORD)v123 == *(_DWORD *)(v105 + 16))
  {
    v167 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v216, v123 + 1, (unint64_t)&v223);
    v123 = *(unsigned int *)(v105 + 20);
    *(_QWORD *)(*(_QWORD *)(v105 + 8) + 8 * v123) = *(_QWORD *)v167;
    v124 = v223;
  }
  else
  {
    *(_QWORD *)&(*v216)[8 * v123] = v116;
    v124 = v116;
  }
  *(_DWORD *)(v105 + 20) = v123 + 1;
  v124[4] = v105;
  v125 = (JSC::B3::Value *)v80[7];
  if (*v80)
    v126 = *(_QWORD *)(*v80 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v80 + 14992) << 32);
  else
    v126 = 0;
  v127 = (int *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Const32Value *,JSC::B3::Value*,JSC::B3::Value*>(v126, (uint64_t)v116, v214, v84, v109, v92, v100);
  JSC::B3::Procedure::addValueImpl(v125, (JSC::B3::Value *)v127);
  v223 = (const char *)v127;
  v128 = *(unsigned int *)(v105 + 20);
  if ((_DWORD)v128 == *(_DWORD *)(v105 + 16))
  {
    v168 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v216, v128 + 1, (unint64_t)&v223);
    v128 = *(unsigned int *)(v105 + 20);
    *(_QWORD *)(*(_QWORD *)(v105 + 8) + 8 * v128) = *(_QWORD *)v168;
    v129 = v223;
  }
  else
  {
    *(_QWORD *)&(*v216)[8 * v128] = v127;
    v129 = v127;
  }
  *(_DWORD *)(v105 + 20) = v128 + 1;
  v129[4] = v105;
  PushVariable = (void (**)(WTF::StringPrintStream *__hidden))JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)v80, v127[4]);
  v131 = v80[11];
  v132 = (JSC::B3::Value *)v80[7];
  if (*v80)
    v133 = *(_QWORD *)(*v80 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v80 + 14992) << 32);
  else
    v133 = 0;
  v134 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v134 + 8) = -1;
  *(_WORD *)(v134 + 12) = 9;
  *(_DWORD *)(v134 + 16) = 0;
  *(_BYTE *)(v134 + 20) = 1;
  *(_QWORD *)(v134 + 24) = v133;
  *(_QWORD *)(v134 + 32) = 0;
  *(_QWORD *)v134 = off_1E357F0F8;
  *(_QWORD *)(v134 + 40) = PushVariable;
  *(_QWORD *)(v134 + 48) = v127;
  JSC::B3::Procedure::addValueImpl(v132, (JSC::B3::Value *)v134);
  v223 = (const char *)v134;
  v135 = (char **)(v131 + 8);
  v136 = *(unsigned int *)(v131 + 20);
  if ((_DWORD)v136 == *(_DWORD *)(v131 + 16))
  {
    v169 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v135, v136 + 1, (unint64_t)&v223);
    v136 = *(unsigned int *)(v131 + 20);
    *(_QWORD *)(*(_QWORD *)(v131 + 8) + 8 * v136) = *(_QWORD *)v169;
    v134 = (uint64_t)v223;
  }
  else
  {
    *(_QWORD *)&(*v135)[8 * v136] = v134;
  }
  *(_DWORD *)(v131 + 20) = v136 + 1;
  *(_QWORD *)(v134 + 32) = v131;
  v222 = PushVariable;
  v137 = v80[11];
  v138 = (JSC::B3::Value *)v80[7];
  if (*v80)
    v139 = *(_QWORD *)(*v80 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v80 + 14992) << 32);
  else
    v139 = 0;
  v140 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v140 + 8) = -1;
  *(_WORD *)(v140 + 12) = 3;
  *(_DWORD *)(v140 + 16) = 1;
  *(_BYTE *)(v140 + 20) = 0;
  *(_QWORD *)(v140 + 24) = v139;
  *(_QWORD *)(v140 + 32) = 0;
  *(_QWORD *)v140 = off_1E357D8E0;
  *(_DWORD *)(v140 + 40) = 0;
  JSC::B3::Procedure::addValueImpl(v138, (JSC::B3::Value *)v140);
  v223 = (const char *)v140;
  v141 = (_QWORD *)(v137 + 8);
  v142 = *(unsigned int *)(v137 + 20);
  if ((_DWORD)v142 == *(_DWORD *)(v137 + 16))
  {
    v170 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v137 + 8), v142 + 1, (unint64_t)&v223);
    v142 = *(unsigned int *)(v137 + 20);
    *(_QWORD *)(*(_QWORD *)(v137 + 8) + 8 * v142) = *(_QWORD *)v170;
    v143 = (uint64_t)v223;
  }
  else
  {
    *(_QWORD *)(*v141 + 8 * v142) = v140;
    v143 = v140;
  }
  *(_DWORD *)(v137 + 20) = v142 + 1;
  *(_QWORD *)(v143 + 32) = v137;
  v144 = (JSC::B3::Value *)WTF::fastMalloc((WTF *)0x38);
  JSC::B3::Value::Value<>((uint64_t)v144, 0, 53, 2, v139, (uint64_t)v127, v140);
  JSC::B3::Procedure::addValueImpl(v138, v144);
  v223 = (const char *)v144;
  v145 = *(unsigned int *)(v137 + 20);
  if ((_DWORD)v145 == *(_DWORD *)(v137 + 16))
  {
    v171 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v137 + 8), v145 + 1, (unint64_t)&v223);
    v145 = *(unsigned int *)(v137 + 20);
    *(_QWORD *)(*(_QWORD *)(v137 + 8) + 8 * v145) = *(_QWORD *)v171;
    v146 = v223;
  }
  else
  {
    *(_QWORD *)(*v141 + 8 * v145) = v144;
    v146 = v144;
  }
  *(_DWORD *)(v137 + 20) = v145 + 1;
  v146[4] = v137;
  v147 = WTF::fastMalloc((WTF *)0x98);
  *(_QWORD *)v147 = off_1E357F5F0;
  *(_DWORD *)(v147 + 8) = -1;
  *(_WORD *)(v147 + 12) = 88;
  *(_DWORD *)(v147 + 16) = 0;
  *(_BYTE *)(v147 + 20) = 4;
  *(_QWORD *)(v147 + 24) = v139;
  *(_QWORD *)(v147 + 32) = 0;
  v148 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v147);
  *v148 = v148 + 2;
  v148[1] = 3;
  *(_OWORD *)(v147 + 40) = 0u;
  *(_OWORD *)(v147 + 56) = 0u;
  *(_OWORD *)(v147 + 72) = 0u;
  *(_OWORD *)(v147 + 88) = 0u;
  *(_QWORD *)(v147 + 104) = 0;
  *(_QWORD *)v147 = off_1E357D550;
  v223 = (const char *)v144;
  v224 = 0;
  v225 = 0;
  JSC::B3::StackmapValue::append((__int128 *)v147, (uint64_t)v144, (unint64_t)&v224);
  JSC::B3::Procedure::addValueImpl(v138, (JSC::B3::Value *)v147);
  v223 = (const char *)v147;
  v149 = *(unsigned int *)(v137 + 20);
  if ((_DWORD)v149 == *(_DWORD *)(v137 + 16))
  {
    v172 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v137 + 8), v149 + 1, (unint64_t)&v223);
    v149 = *(unsigned int *)(v137 + 20);
    *(_QWORD *)(*(_QWORD *)(v137 + 8) + 8 * v149) = *(_QWORD *)v172;
    v150 = (uint64_t)v223;
  }
  else
  {
    *(_QWORD *)(*v141 + 8 * v149) = v147;
    v150 = v147;
  }
  *(_DWORD *)(v137 + 20) = v149 + 1;
  *(_QWORD *)(v150 + 32) = v137;
  v156 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v156 + 8) = 1;
  *(_QWORD *)v156 = off_1E35B62D8;
  *(_QWORD *)(v156 + 16) = v80;
  v157 = *(unsigned int **)(v147 + 56);
  *(_QWORD *)(v147 + 56) = v156;
  if (v157)
  {
    v158 = v157 + 2;
    do
    {
      v159 = __ldaxr(v158);
      v160 = v159 - 1;
    }
    while (__stlxr(v160, v158));
    if (!v160)
    {
      atomic_store(1u, v157 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v157 + 8))(v157);
    }
  }
  v161 = *(_DWORD *)(a2 + 68);
  if (v161 == *(_DWORD *)(a2 + 64))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::B3::Variable *>(a2 + 56, &JSC::Wasm::Types::I32, (uint64_t *)&v222, v151, v152, v153, v154, v155);
  }
  else
  {
    v162 = *(_QWORD *)(a2 + 56) + 24 * v161;
    v163 = v222;
    *(_OWORD *)v162 = xmmword_19915A130;
    *(_QWORD *)(v162 + 16) = v163;
    ++*(_DWORD *)(a2 + 68);
  }
  *(_BYTE *)v217 = 0;
  *(_BYTE *)(v217 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::atomicCompareExchange(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, double a6, float a7)
{
  unsigned int v7;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::AtomStringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  uint64_t v86;
  JSC::B3::Value *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  char **v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  JSC::B3::Value *v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  char **v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  JSC::B3::Value *v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  char **v111;
  uint64_t v112;
  uint64_t v113;
  JSC::B3::Value *v114;
  unsigned int v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  char v119;
  JSC::B3::Value *v120;
  __int16 v121;
  uint64_t v122;
  JSC::B3::Value *v123;
  unint64_t v124;
  uint64_t v125;
  _BYTE *v126;
  uint64_t v127;
  uint64_t casual;
  uint64_t *v129;
  unsigned int v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  int v138;
  uint64_t *v139;
  __int128 v140;
  JSC::B3::Value *v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  JSC::B3::Value *v168;
  unint64_t v169;
  JSC::B3::Value *v170;
  char **v171;
  uint64_t v172;
  const char *v173;
  uint64_t v174;
  JSC::B3::Value *v175;
  uint64_t v176;
  int v177;
  char **v178;
  uint64_t v179;
  const char *v180;
  uint64_t v181;
  JSC::B3::Value *v182;
  uint64_t v183;
  JSC::B3::Value *v184;
  int v185;
  char **v186;
  uint64_t v187;
  _QWORD *v188;
  __int16 v189;
  JSC::B3::Value *v190;
  unint64_t v191;
  uint64_t v192;
  _BYTE *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  int v198;
  JSC::B3::Value **v199;
  __int128 v200;
  char **v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void (**PushVariable)(WTF::StringPrintStream *__hidden);
  uint64_t v207;
  JSC::B3::Value *v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char **v216;
  uint64_t v217;
  unsigned int v218;
  _QWORD *v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  void (**v225)(WTF::StringPrintStream *__hidden);
  char v226;
  float v227;
  char *v228;
  unint64_t *v229;
  uint64_t v230;
  const char *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  char **v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int *v240;
  unsigned int *v241;
  unsigned int v242;
  unsigned int v243;
  uint64_t v244;
  JSC::B3::Value *v245;
  unint64_t v246;
  char **v247;
  char *v248;
  unsigned int v249;
  uint64_t v250;
  unint64_t *v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unsigned int v255;
  uint64_t v256;
  unint64_t *v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  char *v261;
  unsigned int v262;
  unsigned int v263;
  char *v264;
  unint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  JSC::B3::Value *v268;
  uint64_t v269;
  char v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int v273;
  uint64_t v274;
  unsigned int v275;
  WTF::StringImpl *v276;
  WTF::StringImpl *v277;
  WTF::StringImpl *v278;
  void (**v279)(WTF::StringPrintStream *__hidden);
  __int128 v280;
  const char *v281;
  uint64_t v282;

  *(_QWORD *)&v280 = a4;
  *((_QWORD *)&v280 + 1) = a5;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 14960) + 104) == -1)
  {
    v281 = "atomic instruction without memory";
    v282 = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v279, (uint64_t)&v281, a6, a7);
    v225 = v279;
LABEL_162:
    *(_QWORD *)a1 = v225;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)a2;
  v12 = v10 > *(_QWORD *)a2;
  v13 = v10 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_227;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = *(_QWORD *)(a2 + 8);
  v21 = 5;
  if (v13 < 5)
    v21 = v13;
  v22 = v21 - 1;
  *(_QWORD *)a2 = v11 + 1;
  v23 = v20 + v11;
  v24 = v11 + 2;
  while (1)
  {
    v25 = *(char *)(v23 + v17);
    v19 |= (v25 & 0x7F) << v18;
    if ((v25 & 0x80000000) == 0)
      break;
    if (v22 == v17)
      goto LABEL_227;
    LOBYTE(v26) = v24 + v17;
    *(_QWORD *)a2 = v24 + v17;
    v18 += 7;
    if (v13 == ++v17)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v17 == 4 && *(unsigned __int8 *)(v23 + v17) >= 0x10u)
  {
LABEL_227:
    v264 = "can't get load alignment";
    v265 = (unint64_t *)a2;
    v266 = 25;
    goto LABEL_230;
  }
  if (v19 != JSC::Wasm::memoryLog2Alignment())
  {
    v226 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v19, " does not match against atomic op's natural alignment ", 55, 1 << v226, &v281, v227);
    *(_QWORD *)a1 = v281;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v27 = *(_QWORD *)(a2 + 16);
  v28 = *(_QWORD *)a2;
  v12 = v27 > *(_QWORD *)a2;
  v29 = v27 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_229;
  v17 = 0;
  v30 = 0;
  v7 = 0;
  v31 = *(_QWORD *)(a2 + 8);
  v32 = 5;
  if (v29 < 5)
    v32 = v29;
  v33 = v32 - 1;
  *(_QWORD *)a2 = v28 + 1;
  v34 = v31 + v28;
  v35 = v28 + 2;
  while (1)
  {
    v26 = *(char *)(v34 + v17);
    v7 |= (v26 & 0x7F) << v30;
    if ((v26 & 0x80000000) == 0)
      break;
    if (v33 == v17)
      goto LABEL_229;
    LOBYTE(v26) = v35 + v17;
    *(_QWORD *)a2 = v35 + v17;
    v30 += 7;
    if (v29 == ++v17)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v17 == 4 && v26 >= 0x10u)
  {
LABEL_229:
    v264 = "can't get load offset";
    v265 = (unint64_t *)a2;
    v266 = 22;
LABEL_230:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v264, v265, v266, &v281, a7);
LABEL_161:
    v225 = (void (**)(WTF::StringPrintStream *__hidden))v281;
    goto LABEL_162;
  }
  v36 = *(_DWORD *)(a2 + 68);
  if (!v36)
  {
    v228 = "value";
    v229 = (unint64_t *)a2;
    v230 = 6;
LABEL_160:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v229, 26, v228, v230, &v281, a7);
    goto LABEL_161;
  }
  v274 = a4;
  v37 = *(_QWORD *)(a2 + 48);
  v38 = *(_QWORD *)(a2 + 56) + 24 * v36;
  v40 = *(_QWORD *)(v38 - 24);
  v39 = *(_QWORD *)(v38 - 16);
  v41 = *(_QWORD *)(v38 - 8);
  *(_DWORD *)(a2 + 68) = v36 - 1;
  v281 = "WasmFunctionParser.h:";
  LODWORD(v282) = 21;
  LODWORD(v279) = 685;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v281, (unsigned int *)&v279, (int **)&v278);
  v49 = v278;
  if (!v278)
  {
    __break(0xC471u);
    JUMPOUT(0x198DFD85CLL);
  }
  v50 = *(_DWORD *)(v37 + 512);
  if (!v50)
  {
    __break(0xC471u);
    JUMPOUT(0x198DFD864);
  }
  *(_DWORD *)(v37 + 512) = v50 - 1;
  v278 = 0;
  if (*(_DWORD *)v49 == 2)
  {
    WTF::StringImpl::~StringImpl(v49, v42, v43, v44, v45, v46, v47, v48);
    WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
  }
  else
  {
    *(_DWORD *)v49 -= 2;
  }
  v51 = *(_DWORD *)(a2 + 68);
  if (!v51)
  {
    v228 = "expected";
    v229 = (unint64_t *)a2;
    v230 = 9;
    goto LABEL_160;
  }
  v269 = v41;
  v273 = a3;
  v52 = *(_QWORD *)(a2 + 48);
  v53 = *(_QWORD *)(a2 + 56) + 24 * v51;
  v55 = *(_QWORD *)(v53 - 24);
  v54 = *(_QWORD *)(v53 - 16);
  v267 = *(_QWORD *)(v53 - 8);
  *(_DWORD *)(a2 + 68) = v51 - 1;
  v281 = "WasmFunctionParser.h:";
  LODWORD(v282) = 21;
  LODWORD(v279) = 686;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v281, (unsigned int *)&v279, (int **)&v277);
  v63 = v277;
  if (!v277)
  {
    __break(0xC471u);
    JUMPOUT(0x198DFD86CLL);
  }
  v64 = *(_DWORD *)(v52 + 512);
  if (!v64)
  {
    __break(0xC471u);
    JUMPOUT(0x198DFD874);
  }
  *(_DWORD *)(v52 + 512) = v64 - 1;
  v277 = 0;
  if (*(_DWORD *)v63 == 2)
  {
    WTF::StringImpl::~StringImpl(v63, v56, v57, v58, v59, v60, v61, v62);
    WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
  }
  else
  {
    *(_DWORD *)v63 -= 2;
  }
  v65 = *(_DWORD *)(a2 + 68);
  if (!v65)
  {
    v228 = "pointer";
    v229 = (unint64_t *)a2;
    v230 = 8;
    goto LABEL_160;
  }
  v271 = a1;
  v272 = a5;
  v66 = *(_QWORD *)(a2 + 48);
  v67 = *(_QWORD *)(a2 + 56) + 24 * v65;
  v68 = *(unsigned __int8 *)(v67 - 24);
  v69 = *(_QWORD *)(v67 - 8);
  *(_DWORD *)(a2 + 68) = v65 - 1;
  v281 = "WasmFunctionParser.h:";
  LODWORD(v282) = 21;
  LODWORD(v279) = 687;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v281, (unsigned int *)&v279, (int **)&v276);
  v77 = v276;
  if (!v276)
  {
    __break(0xC471u);
    JUMPOUT(0x198DFD87CLL);
  }
  v78 = *(_DWORD *)(v66 + 512);
  v79 = v274;
  if (!v78)
  {
    __break(0xC471u);
    JUMPOUT(0x198DFD884);
  }
  *(_DWORD *)(v66 + 512) = v78 - 1;
  v276 = 0;
  if (*(_DWORD *)v77 == 2)
  {
    WTF::StringImpl::~StringImpl(v77, v70, v71, v72, v73, v74, v75, v76);
    WTF::fastFree(v158, v159, v160, v161, v162, v163, v164, v165);
  }
  else
  {
    *(_DWORD *)v77 -= 2;
  }
  v80 = v272;
  if (v68 != 255)
  {
    v275 = v273;
    v231 = " pointer type mismatch";
    v232 = 23;
LABEL_218:
    v281 = v231;
    v282 = v232;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral>(&v279, &v275, (uint64_t)&v281);
    *(_QWORD *)v271 = v279;
    *(_BYTE *)(v271 + 8) = 1;
    return;
  }
  if (v274 != v55)
  {
LABEL_211:
    v275 = v273;
    v231 = " expected type mismatch";
    v232 = 24;
    goto LABEL_218;
  }
  if (v274 - 239 < 2 || v274 == 227)
  {
    if (v272 == v54)
      v81 = ((v274 + 29) < 0xEu) & (0x3001u >> (v274 + 29));
    else
      v81 = 0;
    if ((v81 & 1) == 0)
      goto LABEL_211;
  }
  else
  {
    if (v272 == v54)
      v262 = ((v274 + 29) < 0xEu) & (0x3001u >> (v274 + 29));
    else
      v262 = 1;
    if (v262 == 1)
      goto LABEL_211;
  }
  if (v274 != v40)
  {
LABEL_217:
    v275 = v273;
    v231 = " value type mismatch";
    v232 = 21;
    goto LABEL_218;
  }
  if (v274 - 239 < 2 || v274 == 227)
  {
    if (v272 == v39)
      v82 = ((v274 + 29) < 0xEu) & (0x3001u >> (v274 + 29));
    else
      v82 = 0;
    if ((v82 & 1) == 0)
      goto LABEL_217;
  }
  else
  {
    if (v272 == v39)
      v263 = ((v274 + 29) < 0xEu) & (0x3001u >> (v274 + 29));
    else
      v263 = 1;
    if (v263 == 1)
      goto LABEL_217;
  }
  v279 = 0;
  v83 = *(_QWORD *)(a2 + 48);
  v84 = JSC::Wasm::memoryLog2Alignment();
  if (v84 > 3)
    v85 = 16;
  else
    v85 = dword_19915ADD0[1 << v84];
  v86 = *(_QWORD *)(v83 + 88);
  v87 = *(JSC::B3::Value **)(v83 + 56);
  v88 = *(_QWORD *)v83;
  if (!__CFADD__(v7, v85))
  {
    if (v88)
      v89 = *(_QWORD *)(v88 + 15000) | ((unint64_t)*(unsigned __int8 *)(v88 + 14992) << 32);
    else
      v89 = 0;
    v90 = WTF::fastMalloc((WTF *)0x30);
    v91 = *(_DWORD *)(v69 + 4);
    *(_DWORD *)(v90 + 8) = -1;
    *(_WORD *)(v90 + 12) = 10;
    *(_DWORD *)(v90 + 16) = v91;
    *(_BYTE *)(v90 + 20) = 0;
    *(_QWORD *)(v90 + 24) = v89;
    *(_QWORD *)(v90 + 32) = 0;
    *(_QWORD *)v90 = off_1E357F0F8;
    *(_QWORD *)(v90 + 40) = v69;
    JSC::B3::Procedure::addValueImpl(v87, (JSC::B3::Value *)v90);
    v281 = (const char *)v90;
    v92 = (char **)(v86 + 8);
    v93 = *(unsigned int *)(v86 + 20);
    if ((_DWORD)v93 == *(_DWORD *)(v86 + 16))
    {
      v132 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v92, v93 + 1, (unint64_t)&v281);
      v93 = *(unsigned int *)(v86 + 20);
      *(_QWORD *)(*(_QWORD *)(v86 + 8) + 8 * v93) = *(_QWORD *)v132;
      v94 = (uint64_t)v281;
    }
    else
    {
      *(_QWORD *)&(*v92)[8 * v93] = v90;
      v94 = v90;
    }
    *(_DWORD *)(v86 + 20) = v93 + 1;
    *(_QWORD *)(v94 + 32) = v86;
    v95 = JSC::Wasm::memoryLog2Alignment();
    if (v95 > 3)
      v96 = 16;
    else
      v96 = dword_19915ADD0[1 << v95];
    v97 = JSC::Wasm::OMGIRGenerator::emitCheckAndPreparePointer((JSC::Wasm::OMGIRGenerator *)v83, (JSC::B3::Value *)v90, v7, v96);
    v98 = *(_QWORD *)(v83 + 88);
    v99 = *(JSC::B3::Value **)(v83 + 56);
    if (*(_QWORD *)v83)
      v100 = *(_QWORD *)(*(_QWORD *)v83 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v83 + 14992) << 32);
    else
      v100 = 0;
    v101 = WTF::fastMalloc((WTF *)0x30);
    v102 = *(_DWORD *)(v267 + 4);
    *(_DWORD *)(v101 + 8) = -1;
    *(_WORD *)(v101 + 12) = 10;
    *(_DWORD *)(v101 + 16) = v102;
    *(_BYTE *)(v101 + 20) = 0;
    *(_QWORD *)(v101 + 24) = v100;
    *(_QWORD *)(v101 + 32) = 0;
    *(_QWORD *)v101 = off_1E357F0F8;
    *(_QWORD *)(v101 + 40) = v267;
    JSC::B3::Procedure::addValueImpl(v99, (JSC::B3::Value *)v101);
    v281 = (const char *)v101;
    v103 = (char **)(v98 + 8);
    v104 = *(unsigned int *)(v98 + 20);
    if ((_DWORD)v104 == *(_DWORD *)(v98 + 16))
    {
      v133 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v103, v104 + 1, (unint64_t)&v281);
      v104 = *(unsigned int *)(v98 + 20);
      *(_QWORD *)(*(_QWORD *)(v98 + 8) + 8 * v104) = *(_QWORD *)v133;
      v105 = (uint64_t)v281;
    }
    else
    {
      *(_QWORD *)&(*v103)[8 * v104] = v101;
      v105 = v101;
    }
    *(_DWORD *)(v98 + 20) = v104 + 1;
    *(_QWORD *)(v105 + 32) = v98;
    v106 = *(_QWORD *)(v83 + 88);
    v107 = *(JSC::B3::Value **)(v83 + 56);
    if (*(_QWORD *)v83)
      v108 = *(_QWORD *)(*(_QWORD *)v83 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v83 + 14992) << 32);
    else
      v108 = 0;
    v109 = WTF::fastMalloc((WTF *)0x30);
    v110 = *(_DWORD *)(v269 + 4);
    *(_DWORD *)(v109 + 8) = -1;
    *(_WORD *)(v109 + 12) = 10;
    *(_DWORD *)(v109 + 16) = v110;
    *(_BYTE *)(v109 + 20) = 0;
    *(_QWORD *)(v109 + 24) = v108;
    *(_QWORD *)(v109 + 32) = 0;
    *(_QWORD *)v109 = off_1E357F0F8;
    *(_QWORD *)(v109 + 40) = v269;
    JSC::B3::Procedure::addValueImpl(v107, (JSC::B3::Value *)v109);
    v281 = (const char *)v109;
    v111 = (char **)(v106 + 8);
    v112 = *(unsigned int *)(v106 + 20);
    if ((_DWORD)v112 == *(_DWORD *)(v106 + 16))
    {
      v134 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v111, v112 + 1, (unint64_t)&v281);
      v112 = *(unsigned int *)(v106 + 20);
      *(_QWORD *)(*(_QWORD *)(v106 + 8) + 8 * v112) = *(_QWORD *)v134;
      v113 = (uint64_t)v281;
    }
    else
    {
      *(_QWORD *)&(*v111)[8 * v112] = v109;
      v113 = v109;
    }
    *(_DWORD *)(v106 + 20) = v112 + 1;
    *(_QWORD *)(v113 + 32) = v106;
    v114 = JSC::Wasm::OMGIRGenerator::fixupPointerPlusOffsetForAtomicOps((uint64_t *)v83, v273, v97, v7);
    v115 = JSC::Wasm::memoryLog2Alignment();
    if (v115 > 3)
      v116 = 4;
    else
      v116 = byte_19915ADF4[1 << v115];
    v117 = JSC::Wasm::toB3Type(v274);
    if (v117 >= 0x80000000)
      v118 = 0x80000000;
    else
      v118 = v117;
    if (v118 >= 6)
      v119 = 0;
    else
      v119 = 0x40302030200uLL >> (8 * v118);
    if ((v119 & 7) == v116)
    {
      v270 = v116;
      if (*(_BYTE *)(v83 + 32) == 1 || *(_BYTE *)(*(_QWORD *)(v83 + 16) + 112))
      {
        v120 = v114;
        v121 = 584;
      }
      else
      {
        v120 = v114;
        v121 = 72;
      }
      v122 = *(_QWORD *)(v83 + 88);
      v123 = *(JSC::B3::Value **)(v83 + 56);
      if (*(_QWORD *)v83)
        v124 = *(_QWORD *)(*(_QWORD *)v83 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v83 + 14992) << 32);
      else
        v124 = 0;
      v125 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (v125)
      {
        v126 = (_BYTE *)(v125 + 9224);
        *(_BYTE *)(v125 + 9224) = 1;
        v127 = *(unsigned int *)(v125 + 9240);
        if ((_DWORD)v127)
        {
          *(_DWORD *)(v125 + 9240) = v127 - *(_DWORD *)(v125 + 9244);
          casual = *(_QWORD *)(v125 + 9232) - v127;
LABEL_100:
          *v126 = 0;
LABEL_101:
          v138 = *(_DWORD *)(v101 + 16);
          *(_QWORD *)casual = off_1E357F5F0;
          *(_DWORD *)(casual + 8) = -1;
          *(_WORD *)(casual + 12) = v121;
          *(_DWORD *)(casual + 16) = v138;
          *(_BYTE *)(casual + 20) = 3;
          *(_QWORD *)(casual + 24) = v124;
          *(_QWORD *)(casual + 32) = 0;
          v139 = (uint64_t *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)casual);
          *v139 = v101;
          v139[1] = v109;
          v139[2] = (uint64_t)v120;
          *(_DWORD *)(casual + 40) = 0;
          *(_QWORD *)&v140 = 0xFFFFFFFF00000000;
          *((_QWORD *)&v140 + 1) = 0xFFFFFFFF00000000;
          *(_OWORD *)(casual + 44) = v140;
          *(_QWORD *)casual = off_1E357CDD0;
          *(_BYTE *)(casual + 60) = v270;
          v141 = v123;
LABEL_140:
          JSC::B3::Procedure::addValueImpl(v141, (JSC::B3::Value *)casual);
          v281 = (const char *)casual;
          v201 = (char **)(v122 + 8);
          v202 = *(unsigned int *)(v122 + 20);
          if ((_DWORD)v202 == *(_DWORD *)(v122 + 16))
          {
            v221 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v201, v202 + 1, (unint64_t)&v281);
            v202 = *(unsigned int *)(v122 + 20);
            *(_QWORD *)(*(_QWORD *)(v122 + 8) + 8 * v202) = *(_QWORD *)v221;
            v203 = (uint64_t)v281;
          }
          else
          {
            *(_QWORD *)&(*v201)[8 * v202] = casual;
            v203 = casual;
          }
          v80 = v272;
          v79 = v274;
          *(_DWORD *)(v122 + 20) = v202 + 1;
          *(_QWORD *)(v203 + 32) = v122;
          v204 = (uint64_t)JSC::Wasm::OMGIRGenerator::sanitizeAtomicResult((uint64_t *)v83, v273, v274, v272, (JSC::B3::Value *)casual);
          goto LABEL_143;
        }
        v135 = *(_QWORD *)(v125 + 9264);
        v136 = *(_QWORD *)(v125 + 9248);
        if (v135)
        {
LABEL_99:
          v137 = __clz(v135);
          *(_QWORD *)(v125 + 9264) = v135 & ~(0x8000000000000000 >> v137);
          casual = v136 + 16 * v137;
          goto LABEL_100;
        }
        if (*(_BYTE *)(v125 + 9229) == 6)
        {
          v249 = *(_DWORD *)(v125 + 9260);
          v250 = *(unsigned int *)(v125 + 9256);
          if (v250 < v249)
          {
            *(_QWORD *)&v126[8 * v250 + 56] = 0;
            v251 = (unint64_t *)(v125 + 8 * v250 + 9288);
            v252 = v249 - 1 - v250;
            while (v252)
            {
              v136 += 1024;
              v254 = *v251++;
              v253 = v254;
              LODWORD(v250) = v250 + 1;
              --v252;
              if (v254)
              {
                v135 = __rbit64(v253);
                *(_DWORD *)(v125 + 9256) = v250;
                *(_QWORD *)(v125 + 9248) = v136;
                goto LABEL_99;
              }
            }
            *(_DWORD *)(v125 + 9256) = v249;
          }
        }
        *v126 = 0;
      }
      casual = bmalloc_allocate_casual(88, 1);
      goto LABEL_101;
    }
    if (v274 != 255)
    {
      if (v274 == 254)
      {
        switch(v116)
        {
          case 0:
            v129 = (uint64_t *)v83;
            v130 = 2;
            goto LABEL_106;
          case 1:
            v129 = (uint64_t *)v83;
            v130 = 2;
            goto LABEL_110;
          case 2:
            v129 = (uint64_t *)v83;
            v130 = 2;
            v166 = 0xFFFFFFFFLL;
            goto LABEL_111;
          case 3:
          case 4:
            __break(0xC471u);
            JUMPOUT(0x198DFD844);
          default:
            goto LABEL_94;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x198DFD824);
    }
    if (v116)
    {
      if (v116 != 1)
      {
        if ((v116 - 2) < 3)
        {
          __break(0xC471u);
          JUMPOUT(0x198DFD804);
        }
LABEL_94:
        v131 = 0;
LABEL_112:
        v167 = *(_QWORD *)(v83 + 88);
        v168 = *(JSC::B3::Value **)(v83 + 56);
        v268 = v114;
        if (*(_QWORD *)v83)
          v169 = *(_QWORD *)(*(_QWORD *)v83 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v83 + 14992) << 32);
        else
          v169 = 0;
        v170 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(22, v169, v131, v101);
        JSC::B3::Procedure::addValueImpl(v168, v170);
        v281 = (const char *)v170;
        v171 = (char **)(v167 + 8);
        v172 = *(unsigned int *)(v167 + 20);
        if ((_DWORD)v172 == *(_DWORD *)(v167 + 16))
        {
          v222 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v171, v172 + 1, (unint64_t)&v281);
          v172 = *(unsigned int *)(v167 + 20);
          *(_QWORD *)(*(_QWORD *)(v167 + 8) + 8 * v172) = *(_QWORD *)v222;
          v173 = v281;
        }
        else
        {
          *(_QWORD *)&(*v171)[8 * v172] = v170;
          v173 = (const char *)v170;
        }
        *(_DWORD *)(v167 + 20) = v172 + 1;
        *((_QWORD *)v173 + 4) = v167;
        if (v274 == 254)
        {
          v174 = *(_QWORD *)(v83 + 88);
          v175 = *(JSC::B3::Value **)(v83 + 56);
          v176 = WTF::fastMalloc((WTF *)0x30);
          v170 = (JSC::B3::Value *)v176;
          *(_QWORD *)v176 = off_1E357F5F0;
          *(_DWORD *)(v176 + 8) = -1;
          *(_WORD *)(v176 + 12) = 44;
          if (*(_DWORD *)(v101 + 16) == 2)
            v177 = 1;
          else
            v177 = 3;
          *(_DWORD *)(v176 + 16) = v177;
          *(_BYTE *)(v176 + 20) = 1;
          *(_QWORD *)(v176 + 24) = 0;
          *(_QWORD *)(v176 + 32) = 0;
          JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v176, 1, v101);
          JSC::B3::Procedure::addValueImpl(v175, v170);
          v281 = (const char *)v170;
          v178 = (char **)(v174 + 8);
          v179 = *(unsigned int *)(v174 + 20);
          if ((_DWORD)v179 == *(_DWORD *)(v174 + 16))
          {
            v223 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v178, v179 + 1, (unint64_t)&v281);
            v179 = *(unsigned int *)(v174 + 20);
            *(_QWORD *)(*(_QWORD *)(v174 + 8) + 8 * v179) = *(_QWORD *)v223;
            v180 = v281;
          }
          else
          {
            *(_QWORD *)&(*v178)[8 * v179] = v170;
            v180 = (const char *)v170;
          }
          *(_DWORD *)(v174 + 20) = v179 + 1;
          *((_QWORD *)v180 + 4) = v174;
          v181 = *(_QWORD *)(v83 + 88);
          v182 = *(JSC::B3::Value **)(v83 + 56);
          v183 = WTF::fastMalloc((WTF *)0x30);
          v184 = (JSC::B3::Value *)v183;
          *(_QWORD *)v183 = off_1E357F5F0;
          *(_DWORD *)(v183 + 8) = -1;
          *(_WORD *)(v183 + 12) = 44;
          if (*(_DWORD *)(v109 + 16) == 2)
            v185 = 1;
          else
            v185 = 3;
          *(_DWORD *)(v183 + 16) = v185;
          *(_BYTE *)(v183 + 20) = 1;
          *(_QWORD *)(v183 + 24) = 0;
          *(_QWORD *)(v183 + 32) = 0;
          JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v183, 1, v109);
          JSC::B3::Procedure::addValueImpl(v182, v184);
          v281 = (const char *)v184;
          v186 = (char **)(v181 + 8);
          v187 = *(unsigned int *)(v181 + 20);
          if ((_DWORD)v187 == *(_DWORD *)(v181 + 16))
          {
            v224 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v186, v187 + 1, (unint64_t)&v281);
            v187 = *(unsigned int *)(v181 + 20);
            *(_QWORD *)(*(_QWORD *)(v181 + 8) + 8 * v187) = *(_QWORD *)v224;
            v188 = v281;
          }
          else
          {
            *(_QWORD *)&(*v186)[8 * v187] = v184;
            v188 = v184;
          }
          *(_DWORD *)(v181 + 20) = v187 + 1;
          v188[4] = v181;
        }
        else
        {
          v184 = (JSC::B3::Value *)v109;
        }
        if (*(_BYTE *)(v83 + 32) == 1 || *(_BYTE *)(*(_QWORD *)(v83 + 16) + 112))
          v189 = 584;
        else
          v189 = 72;
        v122 = *(_QWORD *)(v83 + 88);
        v190 = *(JSC::B3::Value **)(v83 + 56);
        if (*(_QWORD *)v83)
          v191 = *(_QWORD *)(*(_QWORD *)v83 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v83 + 14992) << 32);
        else
          v191 = 0;
        v192 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
        if (v192)
        {
          v193 = (_BYTE *)(v192 + 9224);
          *(_BYTE *)(v192 + 9224) = 1;
          v194 = *(unsigned int *)(v192 + 9240);
          if ((_DWORD)v194)
          {
            *(_DWORD *)(v192 + 9240) = v194 - *(_DWORD *)(v192 + 9244);
            casual = *(_QWORD *)(v192 + 9232) - v194;
LABEL_138:
            *v193 = 0;
LABEL_139:
            v198 = *((_DWORD *)v170 + 4);
            *(_QWORD *)casual = off_1E357F5F0;
            *(_DWORD *)(casual + 8) = -1;
            *(_WORD *)(casual + 12) = v189;
            *(_DWORD *)(casual + 16) = v198;
            *(_BYTE *)(casual + 20) = 3;
            *(_QWORD *)(casual + 24) = v191;
            *(_QWORD *)(casual + 32) = 0;
            v199 = (JSC::B3::Value **)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)casual);
            *v199 = v170;
            v199[1] = v184;
            v199[2] = v268;
            *(_DWORD *)(casual + 40) = 0;
            *(_QWORD *)&v200 = 0xFFFFFFFF00000000;
            *((_QWORD *)&v200 + 1) = 0xFFFFFFFF00000000;
            *(_OWORD *)(casual + 44) = v200;
            *(_QWORD *)casual = off_1E357CDD0;
            *(_BYTE *)(casual + 60) = v116;
            v141 = v190;
            goto LABEL_140;
          }
          v195 = *(_QWORD *)(v192 + 9264);
          v196 = *(_QWORD *)(v192 + 9248);
          if (v195)
          {
LABEL_137:
            v197 = __clz(v195);
            *(_QWORD *)(v192 + 9264) = v195 & ~(0x8000000000000000 >> v197);
            casual = v196 + 16 * v197;
            goto LABEL_138;
          }
          if (*(_BYTE *)(v192 + 9229) == 6)
          {
            v255 = *(_DWORD *)(v192 + 9260);
            v256 = *(unsigned int *)(v192 + 9256);
            if (v256 < v255)
            {
              *(_QWORD *)&v193[8 * v256 + 56] = 0;
              v257 = (unint64_t *)(v192 + 8 * v256 + 9288);
              v258 = v255 - 1 - v256;
              while (v258)
              {
                v196 += 1024;
                v260 = *v257++;
                v259 = v260;
                LODWORD(v256) = v256 + 1;
                --v258;
                if (v260)
                {
                  v195 = __rbit64(v259);
                  *(_DWORD *)(v192 + 9256) = v256;
                  *(_QWORD *)(v192 + 9248) = v196;
                  goto LABEL_137;
                }
              }
              *(_DWORD *)(v192 + 9256) = v255;
            }
          }
          *v193 = 0;
        }
        casual = bmalloc_allocate_casual(88, 1);
        goto LABEL_139;
      }
      v129 = (uint64_t *)v83;
      v130 = 1;
LABEL_110:
      v166 = 0xFFFFLL;
    }
    else
    {
      v129 = (uint64_t *)v83;
      v130 = 1;
LABEL_106:
      v166 = 255;
    }
LABEL_111:
    v131 = JSC::Wasm::OMGIRGenerator::constant(v129, v130, v166, 0, 0);
    goto LABEL_112;
  }
  if (v88)
    v233 = *(_QWORD *)(v88 + 15000) | ((unint64_t)*(unsigned __int8 *)(v88 + 14992) << 32);
  else
    v233 = 0;
  v234 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v234 = off_1E357F5F0;
  *(_DWORD *)(v234 + 8) = -1;
  *(_WORD *)(v234 + 12) = 83;
  *(_DWORD *)(v234 + 16) = 0;
  *(_BYTE *)(v234 + 20) = 4;
  *(_QWORD *)(v234 + 24) = v233;
  *(_QWORD *)(v234 + 32) = 0;
  v235 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v234);
  *v235 = v235 + 2;
  v235[1] = 3;
  *(_OWORD *)(v234 + 40) = 0u;
  *(_OWORD *)(v234 + 56) = 0u;
  *(_OWORD *)(v234 + 72) = 0u;
  *(_OWORD *)(v234 + 88) = 0u;
  *(_QWORD *)(v234 + 104) = 0;
  *(_QWORD *)v234 = off_1E357E700;
  *(_OWORD *)(v234 + 112) = xmmword_1991243D0;
  *(_QWORD *)(v234 + 152) = 0;
  *(_QWORD *)(v234 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v234 + 136) = v234 + 152;
  *(_WORD *)(v234 + 168) = 0;
  *(_BYTE *)(v234 + 160) = 0;
  *(_QWORD *)(v234 + 144) = 0x100000001;
  JSC::B3::Procedure::addValueImpl(v87, (JSC::B3::Value *)v234);
  v281 = (const char *)v234;
  v236 = (char **)(v86 + 8);
  v237 = *(unsigned int *)(v86 + 20);
  if ((_DWORD)v237 == *(_DWORD *)(v86 + 16))
  {
    v248 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v236, v237 + 1, (unint64_t)&v281);
    v237 = *(unsigned int *)(v86 + 20);
    *(_QWORD *)(*(_QWORD *)(v86 + 8) + 8 * v237) = *(_QWORD *)v248;
    v238 = (uint64_t)v281;
  }
  else
  {
    *(_QWORD *)&(*v236)[8 * v237] = v234;
    v238 = v234;
  }
  *(_DWORD *)(v86 + 20) = v237 + 1;
  *(_QWORD *)(v238 + 32) = v86;
  v239 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v239 + 8) = 1;
  *(_QWORD *)v239 = off_1E35B62B0;
  *(_QWORD *)(v239 + 16) = v83;
  v240 = *(unsigned int **)(v234 + 56);
  *(_QWORD *)(v234 + 56) = v239;
  if (v240)
  {
    v241 = v240 + 2;
    do
    {
      v242 = __ldaxr(v241);
      v243 = v242 - 1;
    }
    while (__stlxr(v243, v241));
    if (!v243)
    {
      atomic_store(1u, v240 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v240 + 8))(v240);
    }
  }
  if (v274 != 254)
  {
    if (v274 != 255)
    {
      __break(0xC471u);
      JUMPOUT(0x198DFD8A4);
    }
    v244 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)v83, 1u, 0, 0, 0);
    PushVariable = (void (**)(WTF::StringPrintStream *__hidden))JSC::Wasm::OMGIRGenerator::getPushVariable(v83, *(_DWORD *)(v244 + 16));
    v207 = *(_QWORD *)(v83 + 88);
    v245 = *(JSC::B3::Value **)(v83 + 56);
    if (*(_QWORD *)v83)
      v246 = *(_QWORD *)(*(_QWORD *)v83 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v83 + 14992) << 32);
    else
      v246 = 0;
    v210 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v210 + 8) = -1;
    *(_WORD *)(v210 + 12) = 9;
    *(_DWORD *)(v210 + 16) = 0;
    *(_BYTE *)(v210 + 20) = 1;
    *(_QWORD *)(v210 + 24) = v246;
    *(_QWORD *)(v210 + 32) = 0;
    *(_QWORD *)v210 = off_1E357F0F8;
    *(_QWORD *)(v210 + 40) = PushVariable;
    *(_QWORD *)(v210 + 48) = v244;
    JSC::B3::Procedure::addValueImpl(v245, (JSC::B3::Value *)v210);
    v281 = (const char *)v210;
    v247 = (char **)(v207 + 8);
    v217 = *(unsigned int *)(v207 + 20);
    if ((_DWORD)v217 == *(_DWORD *)(v207 + 16))
    {
      v261 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v247, v217 + 1, (unint64_t)&v281);
      v217 = *(unsigned int *)(v207 + 20);
      *(_QWORD *)(*(_QWORD *)(v207 + 8) + 8 * v217) = *(_QWORD *)v261;
      v210 = (uint64_t)v281;
    }
    else
    {
      *(_QWORD *)&(*v247)[8 * v217] = v210;
    }
    v79 = v274;
    goto LABEL_147;
  }
  v204 = JSC::Wasm::OMGIRGenerator::constant((uint64_t *)v83, 2u, 0, 0, 0);
LABEL_143:
  v205 = v204;
  PushVariable = (void (**)(WTF::StringPrintStream *__hidden))JSC::Wasm::OMGIRGenerator::getPushVariable(v83, *(_DWORD *)(v204 + 16));
  v207 = *(_QWORD *)(v83 + 88);
  v208 = *(JSC::B3::Value **)(v83 + 56);
  if (*(_QWORD *)v83)
    v209 = *(_QWORD *)(*(_QWORD *)v83 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v83 + 14992) << 32);
  else
    v209 = 0;
  v210 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v210 + 8) = -1;
  *(_WORD *)(v210 + 12) = 9;
  *(_DWORD *)(v210 + 16) = 0;
  *(_BYTE *)(v210 + 20) = 1;
  *(_QWORD *)(v210 + 24) = v209;
  *(_QWORD *)(v210 + 32) = 0;
  *(_QWORD *)v210 = off_1E357F0F8;
  *(_QWORD *)(v210 + 40) = PushVariable;
  *(_QWORD *)(v210 + 48) = v205;
  JSC::B3::Procedure::addValueImpl(v208, (JSC::B3::Value *)v210);
  v281 = (const char *)v210;
  v216 = (char **)(v207 + 8);
  v217 = *(unsigned int *)(v207 + 20);
  if ((_DWORD)v217 == *(_DWORD *)(v207 + 16))
  {
    v220 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v216, v217 + 1, (unint64_t)&v281);
    v217 = *(unsigned int *)(v207 + 20);
    *(_QWORD *)(*(_QWORD *)(v207 + 8) + 8 * v217) = *(_QWORD *)v220;
    v210 = (uint64_t)v281;
  }
  else
  {
    *(_QWORD *)&(*v216)[8 * v217] = v210;
  }
LABEL_147:
  *(_DWORD *)(v207 + 20) = v217 + 1;
  *(_QWORD *)(v210 + 32) = v207;
  v279 = PushVariable;
  v218 = *(_DWORD *)(a2 + 68);
  if (v218 == *(_DWORD *)(a2 + 64))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::B3::Variable *>(a2 + 56, &v280, (uint64_t *)&v279, v211, v212, v213, v214, v215);
  }
  else
  {
    v219 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 24 * v218);
    *v219 = v79;
    v219[1] = v80;
    v219[2] = PushVariable;
    ++*(_DWORD *)(a2 + 68);
  }
  *(_BYTE *)v271 = 0;
  *(_BYTE *)(v271 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [29],JSC::Wasm::Type,char [27]>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF::PrintStream *v25;
  float v26;
  double v27;
  const WTF::String *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  const WTF::String *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  float v42;
  const WTF::String *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  float v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  char v89;
  void (**v90)(WTF::StringPrintStream *__hidden);
  WTF *v91;
  __int128 v92;
  _BYTE v93[128];
  void (**v94)(WTF::StringPrintStream *__hidden);
  WTF *v95;
  __int128 v96;
  _BYTE v97[128];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v90 = off_1E3572250;
  v91 = (WTF *)v93;
  v92 = xmmword_199122F80;
  v93[0] = 0;
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", "ref.as_non_null ref to type ");
  v94[5]((WTF::StringPrintStream *)&v94);
  v13 = v95;
  if (!v95)
  {
    v88 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v88);
  v13 = v95;
  if (v95 != (WTF *)v97)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v87, a2, a3, v14, v15);
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", " expected a reference type");
  v94[5]((WTF::StringPrintStream *)&v94);
  v23 = v95;
  if (!v95)
  {
    v86 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v86);
  v23 = v95;
  if (v95 != (WTF *)v97)
LABEL_10:
    WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
  v24 = (WTF *)((uint64_t (*)(_QWORD))v90[4])(&v90);
  v25 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v24 + 32))(v24);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v94, v26);
  WTF::printExpectedCStringHelper(v25, "StringView", &v94);
  if ((_DWORD)v95 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v95])(&v89, &v94);
  v27 = (*(double (**)(WTF *))(*(_QWORD *)v24 + 40))(v24);
  WTF::printInternal(v24, (WTF::PrintStream *)&v88, v28, v29, v30, v31, v32, v33, v27, v34);
  WTF::printInternal(v24, (WTF::PrintStream *)&v87, v35, v36, v37, v38, v39, v40, v41, v42);
  WTF::printInternal(v24, (WTF::PrintStream *)&v86, v43, v44, v45, v46, v47, v48, v49, v50);
  v90[5]((WTF::StringPrintStream *)&v90);
  v58 = v86;
  v86 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v59 = v87;
  v87 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  v60 = v88;
  v88 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v61 = v91;
  if (v91)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v91, v92, (uint64_t *)&v94);
    v61 = v91;
    *a1 = v94;
    if (v61 == (WTF *)v93)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v61, v51, v52, v53, v54, v55, v56, v57);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, JSC::Wasm::Type *a7, uint64_t a8, double a9, float a10, JSC::Wasm::Type *a11)
{
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  float v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  float v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  double v61;
  float v62;
  float v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  double v75;
  float v76;
  WTF *v77;
  WTF::PrintStream *v78;
  float v79;
  double v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  const WTF::String *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  float v95;
  const WTF::String *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  float v103;
  const WTF::String *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  float v111;
  const WTF::String *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  float v119;
  const WTF::String *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  double v126;
  float v127;
  const WTF::String *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  double v134;
  float v135;
  WTF::AtomStringImpl *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF *v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  int v215;
  char v216;
  void (**v217)(WTF::StringPrintStream *__hidden);
  WTF *v218;
  __int128 v219;
  _BYTE v220[128];
  void (**v221)(WTF::StringPrintStream *__hidden);
  unint64_t v222;
  __int128 v223;
  _BYTE v224[128];
  uint64_t v225;

  v225 = *MEMORY[0x1E0C80C00];
  v217 = off_1E3572250;
  v218 = (WTF *)v220;
  v219 = xmmword_199122F80;
  v220[0] = 0;
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  if (*(_QWORD *)a3)
  {
    v17 = *(_QWORD *)(a3 + 8);
    v18 = v17 != 0;
    v19 = v17 - 1;
    if (!v18)
      v19 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v19, (uint64_t)&v214, a10);
  }
  else
  {
    v20 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 8) = 0;
    *(_BYTE *)(v20 + 16) = 0;
    v214 = (WTF::StringImpl *)v20;
    v215 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v221, "StringView", &v214);
  if (v215 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v215])(&v213, &v214);
  v221[5]((WTF::StringPrintStream *)&v221);
  v221[5]((WTF::StringPrintStream *)&v221);
  v28 = v222;
  if (!v222)
  {
    v213 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v213);
  v28 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_12:
    WTF::fastFree(v28, v21, v22, v23, v24, v25, v26, v27);
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v221, "%u", *a4);
  v221[5]((WTF::StringPrintStream *)&v221);
  v36 = v222;
  if (!v222)
  {
    v212 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v212);
  v36 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_17:
    WTF::fastFree(v36, v29, v30, v31, v32, v33, v34, v35);
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  if (*(_QWORD *)a5)
  {
    v38 = *(_QWORD *)(a5 + 8);
    v18 = v38 != 0;
    v39 = v38 - 1;
    if (!v18)
      v39 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v39, (uint64_t)&v214, v37);
  }
  else
  {
    v40 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v40 = 1;
    *(_QWORD *)(v40 + 8) = 0;
    *(_BYTE *)(v40 + 16) = 0;
    v214 = (WTF::StringImpl *)v40;
    v215 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v221, "StringView", &v214);
  if (v215 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v215])(&v211, &v214);
  v221[5]((WTF::StringPrintStream *)&v221);
  v221[5]((WTF::StringPrintStream *)&v221);
  v48 = v222;
  if (!v222)
  {
    v211 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v211);
  v48 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_29:
    WTF::fastFree(v48, v41, v42, v43, v44, v45, v46, v47);
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  if (*(_QWORD *)a6)
  {
    v50 = *(_QWORD *)(a6 + 8);
    v18 = v50 != 0;
    v51 = v50 - 1;
    if (!v18)
      v51 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a6, v51, (uint64_t)&v214, v49);
  }
  else
  {
    v52 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v52 = 1;
    *(_QWORD *)(v52 + 8) = 0;
    *(_BYTE *)(v52 + 16) = 0;
    v214 = (WTF::StringImpl *)v52;
    v215 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v221, "StringView", &v214);
  if (v215 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v215])(&v210, &v214);
  v221[5]((WTF::StringPrintStream *)&v221);
  v221[5]((WTF::StringPrintStream *)&v221);
  v60 = v222;
  if (!v222)
  {
    v210 = 0;
    goto LABEL_41;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v210);
  v60 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_41:
    WTF::fastFree(v60, v53, v54, v55, v56, v57, v58, v59);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v209, a2, a7, v61, v62);
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  if (*(_QWORD *)a8)
  {
    v64 = *(_QWORD *)(a8 + 8);
    v18 = v64 != 0;
    v65 = v64 - 1;
    if (!v18)
      v65 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a8, v65, (uint64_t)&v214, v63);
  }
  else
  {
    v66 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v66 = 1;
    *(_QWORD *)(v66 + 8) = 0;
    *(_BYTE *)(v66 + 16) = 0;
    v214 = (WTF::StringImpl *)v66;
    v215 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v221, "StringView", &v214);
  if (v215 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v215])(&v208, &v214);
  v221[5]((WTF::StringPrintStream *)&v221);
  v221[5]((WTF::StringPrintStream *)&v221);
  v74 = v222;
  if (!v222)
  {
    v214 = 0;
    goto LABEL_53;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v214);
  v74 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_53:
    WTF::fastFree(v74, v67, v68, v69, v70, v71, v72, v73);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v208, a2, a11, v75, v76);
  v77 = (WTF *)((uint64_t (*)(_QWORD))v217[4])(&v217);
  v78 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v77 + 32))(v77);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v221, v79);
  WTF::printExpectedCStringHelper(v78, "StringView", &v221);
  if ((_DWORD)v222 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v216, &v221);
  v80 = (*(double (**)(WTF *))(*(_QWORD *)v77 + 40))(v77);
  WTF::printInternal(v77, (WTF::PrintStream *)&v213, v81, v82, v83, v84, v85, v86, v80, v87);
  WTF::printInternal(v77, (WTF::PrintStream *)&v212, v88, v89, v90, v91, v92, v93, v94, v95);
  WTF::printInternal(v77, (WTF::PrintStream *)&v211, v96, v97, v98, v99, v100, v101, v102, v103);
  WTF::printInternal(v77, (WTF::PrintStream *)&v210, v104, v105, v106, v107, v108, v109, v110, v111);
  WTF::printInternal(v77, (WTF::PrintStream *)&v209, v112, v113, v114, v115, v116, v117, v118, v119);
  WTF::printInternal(v77, (WTF::PrintStream *)&v214, v120, v121, v122, v123, v124, v125, v126, v127);
  WTF::printInternal(v77, (WTF::PrintStream *)&v208, v128, v129, v130, v131, v132, v133, v134, v135);
  v217[5]((WTF::StringPrintStream *)&v217);
  v143 = v208;
  v208 = 0;
  if (v143)
  {
    if (*(_DWORD *)v143 == 2)
    {
      WTF::StringImpl::~StringImpl(v143, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v143 -= 2;
    }
  }
  v144 = v214;
  v214 = 0;
  if (v144)
  {
    if (*(_DWORD *)v144 == 2)
    {
      WTF::StringImpl::~StringImpl(v144, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v159, v160, v161, v162, v163, v164, v165, v166);
    }
    else
    {
      *(_DWORD *)v144 -= 2;
    }
  }
  v145 = v209;
  v209 = 0;
  if (v145)
  {
    if (*(_DWORD *)v145 == 2)
    {
      WTF::StringImpl::~StringImpl(v145, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v167, v168, v169, v170, v171, v172, v173, v174);
    }
    else
    {
      *(_DWORD *)v145 -= 2;
    }
  }
  v146 = v210;
  v210 = 0;
  if (v146)
  {
    if (*(_DWORD *)v146 == 2)
    {
      WTF::StringImpl::~StringImpl(v146, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v175, v176, v177, v178, v179, v180, v181, v182);
    }
    else
    {
      *(_DWORD *)v146 -= 2;
    }
  }
  v147 = v211;
  v211 = 0;
  if (v147)
  {
    if (*(_DWORD *)v147 == 2)
    {
      WTF::StringImpl::~StringImpl(v147, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v183, v184, v185, v186, v187, v188, v189, v190);
    }
    else
    {
      *(_DWORD *)v147 -= 2;
    }
  }
  v148 = v212;
  v212 = 0;
  if (v148)
  {
    if (*(_DWORD *)v148 == 2)
    {
      WTF::StringImpl::~StringImpl(v148, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v191, v192, v193, v194, v195, v196, v197, v198);
    }
    else
    {
      *(_DWORD *)v148 -= 2;
    }
  }
  v149 = v213;
  v213 = 0;
  if (v149)
  {
    if (*(_DWORD *)v149 == 2)
    {
      WTF::StringImpl::~StringImpl(v149, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v199, v200, v201, v202, v203, v204, v205, v206);
    }
    else
    {
      *(_DWORD *)v149 -= 2;
    }
  }
  v150 = v218;
  if (v218)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v218, v219, (uint64_t *)&v221);
    v150 = v218;
    *a1 = v221;
    if (v150 == (WTF *)v220)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v150, v136, v137, v138, v139, v140, v141, v142);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, uint64_t a4, JSC::Wasm::Type *a5, uint64_t a6, JSC::Wasm::Type *a7, double a8, float a9)
{
  uint64_t v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  float v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  double v38;
  float v39;
  float v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  double v52;
  float v53;
  WTF *v54;
  WTF::PrintStream *v55;
  float v56;
  double v57;
  const WTF::String *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF *v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  int v156;
  char v157;
  void (**v158)(WTF::StringPrintStream *__hidden);
  WTF *v159;
  __int128 v160;
  _BYTE v161[128];
  void (**v162)(WTF::StringPrintStream *__hidden);
  WTF *v163;
  __int128 v164;
  _BYTE v165[128];
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  v158 = off_1E3572250;
  v159 = (WTF *)v161;
  v160 = xmmword_199122F80;
  v161[0] = 0;
  v162 = off_1E3572250;
  v163 = (WTF *)v165;
  v164 = xmmword_199122F80;
  v165[0] = 0;
  if (*(_QWORD *)a3)
  {
    v14 = *(_QWORD *)(a3 + 8);
    v15 = v14 != 0;
    v16 = v14 - 1;
    if (!v15)
      v16 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v16, (uint64_t)&v155, a9);
  }
  else
  {
    v17 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 8) = 0;
    *(_BYTE *)(v17 + 16) = 0;
    v155 = (WTF::StringImpl *)v17;
    v156 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v162, "StringView", &v155);
  if (v156 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v156])(&v154, &v155);
  v162[5]((WTF::StringPrintStream *)&v162);
  v162[5]((WTF::StringPrintStream *)&v162);
  v25 = v163;
  if (!v163)
  {
    v154 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v163, v164, (uint64_t *)&v154);
  v25 = v163;
  if (v163 != (WTF *)v165)
LABEL_12:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v162 = off_1E3572250;
  v163 = (WTF *)v165;
  v164 = xmmword_199122F80;
  v165[0] = 0;
  if (*(_QWORD *)a4)
  {
    v27 = *(_QWORD *)(a4 + 8);
    v15 = v27 != 0;
    v28 = v27 - 1;
    if (!v15)
      v28 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a4, v28, (uint64_t)&v155, v26);
  }
  else
  {
    v29 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v29 = 1;
    *(_QWORD *)(v29 + 8) = 0;
    *(_BYTE *)(v29 + 16) = 0;
    v155 = (WTF::StringImpl *)v29;
    v156 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v162, "StringView", &v155);
  if (v156 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v156])(&v153, &v155);
  v162[5]((WTF::StringPrintStream *)&v162);
  v162[5]((WTF::StringPrintStream *)&v162);
  v37 = v163;
  if (!v163)
  {
    v153 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v163, v164, (uint64_t *)&v153);
  v37 = v163;
  if (v163 != (WTF *)v165)
LABEL_24:
    WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v152, a2, a5, v38, v39);
  v162 = off_1E3572250;
  v163 = (WTF *)v165;
  v164 = xmmword_199122F80;
  v165[0] = 0;
  if (*(_QWORD *)a6)
  {
    v41 = *(_QWORD *)(a6 + 8);
    v15 = v41 != 0;
    v42 = v41 - 1;
    if (!v15)
      v42 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a6, v42, (uint64_t)&v155, v40);
  }
  else
  {
    v43 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v43 = 1;
    *(_QWORD *)(v43 + 8) = 0;
    *(_BYTE *)(v43 + 16) = 0;
    v155 = (WTF::StringImpl *)v43;
    v156 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v162, "StringView", &v155);
  if (v156 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v156])(&v151, &v155);
  v162[5]((WTF::StringPrintStream *)&v162);
  v162[5]((WTF::StringPrintStream *)&v162);
  v51 = v163;
  if (!v163)
  {
    v155 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v163, v164, (uint64_t *)&v155);
  v51 = v163;
  if (v163 != (WTF *)v165)
LABEL_36:
    WTF::fastFree((unint64_t)v51, v44, v45, v46, v47, v48, v49, v50);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v151, a2, a7, v52, v53);
  v54 = (WTF *)((uint64_t (*)(_QWORD))v158[4])(&v158);
  v55 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v54 + 32))(v54);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v162, v56);
  WTF::printExpectedCStringHelper(v55, "StringView", &v162);
  if ((_DWORD)v163 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v163])(&v157, &v162);
  v57 = (*(double (**)(WTF *))(*(_QWORD *)v54 + 40))(v54);
  WTF::printInternal(v54, (WTF::PrintStream *)&v154, v58, v59, v60, v61, v62, v63, v57, v64);
  WTF::printInternal(v54, (WTF::PrintStream *)&v153, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v54, (WTF::PrintStream *)&v152, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v54, (WTF::PrintStream *)&v155, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v54, (WTF::PrintStream *)&v151, v89, v90, v91, v92, v93, v94, v95, v96);
  v158[5]((WTF::StringPrintStream *)&v158);
  v104 = v151;
  v151 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v155;
  v155 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v152;
  v152 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v153;
  v153 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v154;
  v154 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v159;
  if (v159)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v159, v160, (uint64_t *)&v162);
    v109 = v159;
    *a1 = v162;
    if (v109 == (WTF *)v161)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v109, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [43],JSC::Wasm::Type,char [6],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "invalid type for call_ref value, expected ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " got ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [41],JSC::Wasm::Type,char [12],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "argument type mismatch in call_ref, got ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", ", expected ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [36],unsigned int,char [8],JSC::Wasm::Type,char [24],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  double v34;
  float v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  double v44;
  float v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  char v165;
  void (**v166)(WTF::StringPrintStream *__hidden);
  WTF *v167;
  __int128 v168;
  _BYTE v169[128];
  void (**v170)(WTF::StringPrintStream *__hidden);
  WTF *v171;
  __int128 v172;
  _BYTE v173[128];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v166 = off_1E3572250;
  v167 = (WTF *)v169;
  v168 = xmmword_199122F80;
  v169[0] = 0;
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", "Block expects the argument at index");
  v170[5]((WTF::StringPrintStream *)&v170);
  v17 = v171;
  if (!v171)
  {
    v164 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v164);
  v17 = v171;
  if (v171 != (WTF *)v173)
LABEL_5:
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%u", *a3);
  v170[5]((WTF::StringPrintStream *)&v170);
  v25 = v171;
  if (!v171)
  {
    v163 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v163);
  v25 = v171;
  if (v171 != (WTF *)v173)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " to be ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v33 = v171;
  if (!v171)
  {
    v162 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v162);
  v33 = v171;
  if (v171 != (WTF *)v173)
LABEL_15:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v161, a2, a4, v34, v35);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " but argument has type ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v43 = v171;
  if (!v171)
  {
    v160 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v160);
  v43 = v171;
  if (v171 != (WTF *)v173)
LABEL_20:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v159, a2, a5, v44, v45);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v166[4])(&v166);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v170, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v170);
  if ((_DWORD)v171 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v171])(&v165, &v170);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v164, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v163, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v162, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v161, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v160, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v46, (WTF::PrintStream *)&v159, v89, v90, v91, v92, v93, v94, v95, v96);
  v166[5]((WTF::StringPrintStream *)&v166);
  v104 = v159;
  v159 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v160;
  v160 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v161;
  v161 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v162;
  v162 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v163;
  v163 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v164;
  v164 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = v167;
  if (v167)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v167, v168, (uint64_t *)&v170);
    v110 = v167;
    *a1 = v170;
    if (v110 == (WTF *)v169)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v110, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [35],unsigned int,char [8],JSC::Wasm::Type,char [24],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  double v34;
  float v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  double v44;
  float v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  char v165;
  void (**v166)(WTF::StringPrintStream *__hidden);
  WTF *v167;
  __int128 v168;
  _BYTE v169[128];
  void (**v170)(WTF::StringPrintStream *__hidden);
  WTF *v171;
  __int128 v172;
  _BYTE v173[128];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v166 = off_1E3572250;
  v167 = (WTF *)v169;
  v168 = xmmword_199122F80;
  v169[0] = 0;
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", "Loop expects the argument at index");
  v170[5]((WTF::StringPrintStream *)&v170);
  v17 = v171;
  if (!v171)
  {
    v164 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v164);
  v17 = v171;
  if (v171 != (WTF *)v173)
LABEL_5:
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%u", *a3);
  v170[5]((WTF::StringPrintStream *)&v170);
  v25 = v171;
  if (!v171)
  {
    v163 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v163);
  v25 = v171;
  if (v171 != (WTF *)v173)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " to be ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v33 = v171;
  if (!v171)
  {
    v162 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v162);
  v33 = v171;
  if (v171 != (WTF *)v173)
LABEL_15:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v161, a2, a4, v34, v35);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " but argument has type ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v43 = v171;
  if (!v171)
  {
    v160 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v160);
  v43 = v171;
  if (v171 != (WTF *)v173)
LABEL_20:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v159, a2, a5, v44, v45);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v166[4])(&v166);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v170, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v170);
  if ((_DWORD)v171 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v171])(&v165, &v170);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v164, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v163, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v162, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v161, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v160, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v46, (WTF::PrintStream *)&v159, v89, v90, v91, v92, v93, v94, v95, v96);
  v166[5]((WTF::StringPrintStream *)&v166);
  v104 = v159;
  v159 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v160;
  v160 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v161;
  v161 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v162;
  v162 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v163;
  v163 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v164;
  v164 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = v167;
  if (v167)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v167, v168, (uint64_t *)&v170);
    v110 = v167;
    *a1 = v170;
    if (v110 == (WTF *)v169)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v110, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [31],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "if condition must be i32, got ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [34],unsigned int,char [8],JSC::Wasm::Type,char [24],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  double v34;
  float v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  double v44;
  float v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  char v165;
  void (**v166)(WTF::StringPrintStream *__hidden);
  WTF *v167;
  __int128 v168;
  _BYTE v169[128];
  void (**v170)(WTF::StringPrintStream *__hidden);
  WTF *v171;
  __int128 v172;
  _BYTE v173[128];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v166 = off_1E3572250;
  v167 = (WTF *)v169;
  v168 = xmmword_199122F80;
  v169[0] = 0;
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", "Try expects the argument at index");
  v170[5]((WTF::StringPrintStream *)&v170);
  v17 = v171;
  if (!v171)
  {
    v164 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v164);
  v17 = v171;
  if (v171 != (WTF *)v173)
LABEL_5:
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%u", *a3);
  v170[5]((WTF::StringPrintStream *)&v170);
  v25 = v171;
  if (!v171)
  {
    v163 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v163);
  v25 = v171;
  if (v171 != (WTF *)v173)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " to be ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v33 = v171;
  if (!v171)
  {
    v162 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v162);
  v33 = v171;
  if (v171 != (WTF *)v173)
LABEL_15:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v161, a2, a4, v34, v35);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " but argument has type ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v43 = v171;
  if (!v171)
  {
    v160 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v160);
  v43 = v171;
  if (v171 != (WTF *)v173)
LABEL_20:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v159, a2, a5, v44, v45);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v166[4])(&v166);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v170, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v170);
  if ((_DWORD)v171 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v171])(&v165, &v170);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v164, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v163, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v162, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v161, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v160, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v46, (WTF::PrintStream *)&v159, v89, v90, v91, v92, v93, v94, v95, v96);
  v166[5]((WTF::StringPrintStream *)&v166);
  v104 = v159;
  v159 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v160;
  v160 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v161;
  v161 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v162;
  v162 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v163;
  v163 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v164;
  v164 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = v167;
  if (v167)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v167, v168, (uint64_t *)&v170);
    v110 = v167;
    *a1 = v170;
    if (v110 == (WTF *)v169)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v110, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [58],unsigned int,char [8],JSC::Wasm::Type,char [24],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  double v34;
  float v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  double v44;
  float v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  char v165;
  void (**v166)(WTF::StringPrintStream *__hidden);
  WTF *v167;
  __int128 v168;
  _BYTE v169[128];
  void (**v170)(WTF::StringPrintStream *__hidden);
  WTF *v171;
  __int128 v172;
  _BYTE v173[128];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v166 = off_1E3572250;
  v167 = (WTF *)v169;
  v168 = xmmword_199122F80;
  v169[0] = 0;
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", "The exception being thrown expects the argument at index ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v17 = v171;
  if (!v171)
  {
    v164 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v164);
  v17 = v171;
  if (v171 != (WTF *)v173)
LABEL_5:
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%u", *a3);
  v170[5]((WTF::StringPrintStream *)&v170);
  v25 = v171;
  if (!v171)
  {
    v163 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v163);
  v25 = v171;
  if (v171 != (WTF *)v173)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " to be ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v33 = v171;
  if (!v171)
  {
    v162 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v162);
  v33 = v171;
  if (v171 != (WTF *)v173)
LABEL_15:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v161, a2, a4, v34, v35);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " but argument has type ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v43 = v171;
  if (!v171)
  {
    v160 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v160);
  v43 = v171;
  if (v171 != (WTF *)v173)
LABEL_20:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v159, a2, a5, v44, v45);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v166[4])(&v166);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v170, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v170);
  if ((_DWORD)v171 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v171])(&v165, &v170);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v164, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v163, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v162, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v161, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v160, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v46, (WTF::PrintStream *)&v159, v89, v90, v91, v92, v93, v94, v95, v96);
  v166[5]((WTF::StringPrintStream *)&v166);
  v104 = v159;
  v159 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v160;
  v160 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v161;
  v161 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v162;
  v162 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v163;
  v163 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v164;
  v164 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = v167;
  if (v167)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v167, v168, (uint64_t *)&v170);
    v110 = v167;
    *a1 = v170;
    if (v110 == (WTF *)v169)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v110, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [43],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "conditional branch with non-i32 condition ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void WTF::Vector<JSC::Wasm::OMGIRGenerator::ControlData *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendUsingFunctor<JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::parseExpression(void)::{lambda(unsigned long)#1},void>(uint64_t a1, uint64_t a2, WTF::StringImpl ***a3)
{
  unint64_t i;
  WTF::StringImpl **v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;

  WTF::Vector<JSC::Wasm::OMGIRGenerator::ControlData *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + a2);
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v7 = *a3;
      v8 = (unint64_t)(*a3)[2];
      v9 = (unint64_t)**a3;
      v10 = v8 > v9;
      v11 = v8 - v9;
      if (!v10)
        goto LABEL_33;
      v12 = 0;
      v13 = 0;
      LODWORD(v14) = 0;
      v15 = v7[1];
      *v7 = (WTF::StringImpl *)(v9 + 1);
      v16 = (uint64_t)v15 + v9;
      v17 = v9 + 2;
      while (1)
      {
        v18 = *(char *)(v16 + v12);
        v14 = ((v18 & 0x7F) << v13) | v14;
        if ((v18 & 0x80000000) == 0)
          break;
        if (v11 >= 5)
          v24 = 5;
        else
          v24 = v11;
        if (v24 - 1 == v12)
          goto LABEL_33;
        *v7 = (WTF::StringImpl *)(v17 + v12);
        v13 += 7;
        if (v11 == ++v12)
        {
          __break(1u);
          return;
        }
      }
      if ((_DWORD)v12 != 4 || *(unsigned __int8 *)(v16 + v12) < 0x10u)
      {
        v19 = *((unsigned int *)v7 + 117);
        if (v19 > v14)
        {
          v20 = __CFADD__(v19, ~v14);
          v21 = v19 + ~v14;
          if (!v20)
          {
            __break(0xC471u);
            return;
          }
          v22 = (uint64_t)v7[57] + 888 * v21 + 808;
          goto LABEL_12;
        }
        if (!*a3[1])
        {
          WTF::makeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>((uint64_t)"br_table's ", 12, i, (uint64_t)"th target ", 11, v14, (uint64_t)" exceeds control stack size ", 29, (int **)&v52, v19);
LABEL_24:
          v32 = a3[1];
          v33 = v52;
          v52 = 0;
          v34 = *v32;
          *v32 = v33;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
            {
              WTF::StringImpl::~StringImpl(v34, v25, v26, v27, v28, v29, v30, v31);
              WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
            }
            else
            {
              *(_DWORD *)v34 -= 2;
            }
          }
          v35 = v52;
          v52 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
            {
              WTF::StringImpl::~StringImpl(v35, v25, v26, v27, v28, v29, v30, v31);
              WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
            }
            else
            {
              *(_DWORD *)v35 -= 2;
            }
          }
        }
      }
      else
      {
LABEL_33:
        if (!*a3[1])
        {
          WTF::makeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>((uint64_t)"can't get ", 11, i, (uint64_t)"th target for br_table", 23, (int **)&v52);
          goto LABEL_24;
        }
      }
      v22 = 0;
LABEL_12:
      v23 = *(unsigned int *)(a1 + 12);
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v22;
      *(_DWORD *)(a1 + 12) = v23 + 1;
    }
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [33],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "br_table with non-i32 condition ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<char [51],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "grow_memory with non-i32 delta argument has type: ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::simd<true,void>(_BYTE *a1, uint64_t a2, int a3, int a4, char a5, uint64_t *a6, double a7, float a8)
{
  uint64_t v8;
  _BYTE *v9;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::B3::Procedure *v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  WTF::StringImpl *v45;
  int v46;
  _QWORD *v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::AtomStringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  int v63;
  _QWORD *v65;
  int v66;
  int v67;
  JSC::Wasm::OMGIRGenerator *v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  JSC::Wasm::OMGIRGenerator *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  JSC::B3::Value *v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  char **v80;
  uint64_t v81;
  void (**v82)(WTF::StringPrintStream *__hidden);
  int v83;
  __int16 v84;
  uint64_t v85;
  JSC::B3::Value *v86;
  unint64_t v87;
  JSC::B3::Value *v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::AtomStringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  float v107;
  WTF::StringImpl *v108;
  int v109;
  _BYTE *v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WTF::AtomStringImpl *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  double v125;
  float v126;
  WTF::StringImpl *v127;
  int v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  WTF::AtomStringImpl *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  WTF::StringImpl *v164;
  int v165;
  _QWORD *v167;
  int v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  JSC::B3::Procedure *v181;
  WTF::AtomStringImpl *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  float v189;
  WTF::StringImpl *v190;
  int v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  WTF::AtomStringImpl *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  WTF::StringImpl *v204;
  int v205;
  uint64_t v206;
  JSC::B3::Value *v207;
  unint64_t v208;
  char v209;
  uint64_t v210;
  int v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  JSC::B3::Value *v215;
  char v216;
  uint64_t v217;
  JSC::B3::Value *v218;
  unint64_t v219;
  char v220;
  uint64_t v221;
  int v222;
  char **v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _BYTE *v229;
  uint64_t v230;
  JSC::Wasm::OMGIRGenerator *v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  char v235;
  int v236;
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  JSC::B3::Procedure *v240;
  uint64_t v241;
  JSC::B3::Procedure *v242;
  WTF::AtomStringImpl *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  WTF::StringImpl *v250;
  int v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  WTF::AtomStringImpl *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  WTF::StringImpl *v265;
  int v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  WTF::AtomStringImpl *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  WTF::StringImpl *v281;
  int v282;
  _QWORD *v283;
  char v284;
  char v285;
  uint64_t v286;
  JSC::B3::Value *v287;
  unint64_t v288;
  uint64_t v289;
  int v290;
  _QWORD *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  JSC::B3::Value *v295;
  unint64_t v296;
  uint64_t v297;
  int v298;
  char **v299;
  uint64_t v300;
  uint64_t v301;
  char v302;
  uint64_t v303;
  JSC::B3::Value *v304;
  unint64_t v305;
  char v306;
  uint64_t v307;
  int v308;
  char **v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  void (**v316)(WTF::StringPrintStream *__hidden);
  uint64_t v317;
  JSC::B3::Value *v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char **v326;
  uint64_t v327;
  unsigned int v328;
  uint64_t v329;
  unsigned int v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  JSC::B3::Procedure *v334;
  WTF::AtomStringImpl *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  WTF::StringImpl *v342;
  int v343;
  unsigned int v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  WTF::AtomStringImpl *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  WTF::StringImpl *v356;
  int v357;
  _QWORD *v358;
  unsigned __int8 v359;
  uint64_t v360;
  JSC::B3::Value *v361;
  unint64_t v362;
  uint64_t v363;
  int v364;
  _QWORD *v365;
  uint64_t v366;
  uint64_t v367;
  JSC::B3::Value *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  JSC::B3::Value *v373;
  unint64_t v374;
  uint64_t v375;
  int v376;
  _QWORD *v377;
  uint64_t v378;
  uint64_t v379;
  JSC::B3::Value *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  JSC::B3::Value *v385;
  unint64_t v386;
  uint64_t v387;
  char **v388;
  uint64_t v389;
  uint64_t v390;
  void (**v391)(WTF::StringPrintStream *__hidden);
  uint64_t v392;
  JSC::B3::Value *v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  char **v401;
  uint64_t v402;
  unsigned int v403;
  uint64_t v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  JSC::B3::Procedure *v409;
  WTF::AtomStringImpl *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  WTF::StringImpl *v417;
  int v418;
  unsigned int v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  WTF::AtomStringImpl *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  WTF::StringImpl *v433;
  int v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unsigned int v440;
  uint64_t v441;
  void (**v442)(WTF::StringPrintStream *__hidden);
  int v443;
  int v444;
  int v445;
  unsigned int v446;
  unsigned int v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  WTF::AtomStringImpl *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  WTF::StringImpl *v459;
  int v460;
  JSC::Wasm::OMGIRGenerator *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  JSC::B3::Value *v465;
  unint64_t v466;
  uint64_t v467;
  int v468;
  char **v469;
  uint64_t v470;
  void (**v471)(WTF::StringPrintStream *__hidden);
  int v472;
  uint64_t v473;
  JSC::B3::Value *v474;
  __int16 v475;
  unint64_t v476;
  uint64_t v477;
  int v478;
  char **v479;
  uint64_t v480;
  void (**v481)(WTF::StringPrintStream *__hidden);
  unsigned int v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  WTF::AtomStringImpl *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  WTF::StringImpl *v494;
  int v495;
  _QWORD *v496;
  uint64_t v497;
  JSC::B3::Value *v498;
  unint64_t v499;
  uint64_t v500;
  int v501;
  char **v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  JSC::B3::Value *v506;
  unint64_t v507;
  uint64_t v508;
  char **v509;
  uint64_t v510;
  uint64_t v511;
  void (**v512)(WTF::StringPrintStream *__hidden);
  uint64_t v513;
  JSC::B3::Value *v514;
  unint64_t v515;
  uint64_t v516;
  char **v517;
  uint64_t v518;
  unsigned int v519;
  uint64_t *v520;
  unint64_t v521;
  char *v522;
  unint64_t *v523;
  uint64_t v524;
  unint64_t v525;
  unsigned int v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  JSC::B3::Procedure *v531;
  WTF::AtomStringImpl *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  WTF::StringImpl *v539;
  int v540;
  unsigned int v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  WTF::AtomStringImpl *v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  WTF::StringImpl *v555;
  int v556;
  unint64_t *v557;
  unsigned int v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  WTF::AtomStringImpl *v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  WTF::StringImpl *v571;
  int v572;
  _QWORD *v573;
  uint64_t v574;
  JSC::B3::Value *v575;
  unint64_t v576;
  uint64_t v577;
  int v578;
  _QWORD *v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  JSC::B3::Value *v583;
  unint64_t v584;
  uint64_t v585;
  int v586;
  char **v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  JSC::B3::Value *v591;
  unint64_t v592;
  uint64_t v593;
  int v594;
  char **v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t *v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  void (**v603)(WTF::StringPrintStream *__hidden);
  uint64_t v604;
  JSC::B3::Value *v605;
  unint64_t v606;
  _BYTE *v607;
  JSC::B3::Value *v608;
  unsigned int v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  WTF::AtomStringImpl *v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  double v622;
  float v623;
  WTF::StringImpl *v624;
  int v625;
  float v626;
  unsigned int v627;
  unint64_t v628;
  unsigned int v629;
  JSC::Wasm::OMGIRGenerator *v630;
  uint64_t v631;
  uint64_t v632;
  int v633;
  int v634;
  unsigned int v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  JSC::B3::Procedure *v639;
  WTF::AtomStringImpl *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  double v647;
  float v648;
  WTF::StringImpl *v649;
  int v650;
  unsigned int v651;
  unint64_t v652;
  unsigned int v653;
  JSC::Wasm::OMGIRGenerator *v654;
  uint64_t v655;
  uint64_t v656;
  int v657;
  int v658;
  int v659;
  char v660;
  uint64_t v661;
  JSC::B3::Value *v662;
  unint64_t v663;
  uint64_t v664;
  int v665;
  char **v666;
  uint64_t v667;
  void (**v668)(WTF::StringPrintStream *__hidden);
  int v669;
  __int16 v670;
  uint64_t v671;
  JSC::B3::Value *v672;
  unint64_t v673;
  JSC::B3::Value *v674;
  uint64_t v675;
  _BYTE *v676;
  uint64_t v677;
  uint64_t casual;
  unint64_t v679;
  uint64_t v680;
  unint64_t v681;
  char **v682;
  uint64_t v683;
  void (**v684)(WTF::StringPrintStream *__hidden);
  uint64_t v685;
  JSC::B3::Value *v686;
  unint64_t v687;
  uint64_t v688;
  char **v689;
  uint64_t v690;
  void (**v691)(WTF::StringPrintStream *__hidden);
  _BYTE *v692;
  WTF *v693;
  uint64_t v694;
  JSC::B3::Value *v695;
  unint64_t v696;
  void (**v697)(WTF::StringPrintStream *__hidden);
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  char **v703;
  uint64_t v704;
  unsigned int v705;
  uint64_t v706;
  uint64_t *v707;
  uint64_t v708;
  char *v709;
  char *v710;
  char *v711;
  char *v712;
  uint64_t v713;
  JSC::B3::Value *v714;
  unint64_t v715;
  uint64_t v716;
  int v717;
  char **v718;
  uint64_t v719;
  void (**v720)(WTF::StringPrintStream *__hidden);
  int v721;
  uint64_t v722;
  JSC::B3::Value *v723;
  __int16 v724;
  __int16 v725;
  unint64_t v726;
  JSC::B3::Value *v727;
  JSC::B3::Value *v728;
  uint64_t v729;
  char **v730;
  uint64_t v731;
  void (**v732)(WTF::StringPrintStream *__hidden);
  uint64_t v733;
  uint64_t v734;
  JSC::B3::Value *v735;
  unint64_t v736;
  uint64_t v737;
  char **v738;
  uint64_t v739;
  void (**v740)(WTF::StringPrintStream *__hidden);
  WTF *v741;
  uint64_t v742;
  JSC::B3::Value *v743;
  unint64_t v744;
  void (**v745)(WTF::StringPrintStream *__hidden);
  char **v746;
  uint64_t v747;
  unsigned int v748;
  uint64_t v749;
  uint64_t v750;
  JSC::B3::Value *v751;
  unint64_t v752;
  uint64_t v753;
  int v754;
  char **v755;
  uint64_t v756;
  void (**v757)(WTF::StringPrintStream *__hidden);
  int v758;
  __int16 v759;
  uint64_t v760;
  JSC::B3::Value *v761;
  unint64_t v762;
  JSC::B3::Value *v763;
  uint64_t v764;
  _BYTE *v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  JSC::B3::Value *v769;
  unint64_t v770;
  uint64_t v771;
  int v772;
  char **v773;
  uint64_t v774;
  void (**v775)(WTF::StringPrintStream *__hidden);
  int v776;
  uint64_t v777;
  JSC::B3::Value *v778;
  unint64_t v779;
  uint64_t v780;
  int v781;
  _QWORD *v782;
  uint64_t v783;
  void (**v784)(WTF::StringPrintStream *__hidden);
  uint64_t v785;
  uint64_t v786;
  void (**v787)(WTF::StringPrintStream *__hidden);
  __int16 v788;
  unint64_t v789;
  _BYTE *v790;
  uint64_t v791;
  JSC::B3::Value *v792;
  unint64_t v793;
  uint64_t v794;
  int v795;
  char **v796;
  uint64_t v797;
  void (**v798)(WTF::StringPrintStream *__hidden);
  int v799;
  uint64_t v800;
  JSC::B3::Value *v801;
  __int16 v802;
  __int16 v803;
  unint64_t v804;
  JSC::B3::Value *v805;
  JSC::B3::Value *v806;
  uint64_t v807;
  char **v808;
  uint64_t v809;
  void (**v810)(WTF::StringPrintStream *__hidden);
  uint64_t v811;
  JSC::B3::Value *v812;
  unint64_t v813;
  uint64_t v814;
  int v815;
  _QWORD *v816;
  uint64_t v817;
  void (**v818)(WTF::StringPrintStream *__hidden);
  uint64_t v819;
  uint64_t v820;
  void (**v821)(WTF::StringPrintStream *__hidden);
  WTF *v822;
  uint64_t v823;
  JSC::B3::Value *v824;
  unint64_t v825;
  void (**v826)(WTF::StringPrintStream *__hidden);
  char **v827;
  uint64_t v828;
  unsigned int v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  JSC::B3::Value *v833;
  unint64_t v834;
  uint64_t v835;
  int v836;
  char **v837;
  uint64_t v838;
  uint64_t v839;
  char v840;
  uint64_t v841;
  JSC::B3::Value *v842;
  unint64_t v843;
  unint64_t v844;
  char v845;
  uint64_t v846;
  int v847;
  char **v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  void (**v853)(WTF::StringPrintStream *__hidden);
  uint64_t v854;
  JSC::B3::Value *v855;
  unint64_t v856;
  uint64_t v857;
  char **v858;
  uint64_t v859;
  unsigned int v860;
  uint64_t v861;
  uint64_t *v862;
  char *v863;
  char *v864;
  char *v865;
  char *v866;
  char v867;
  uint64_t v868;
  JSC::B3::Value *v869;
  unint64_t v870;
  char v871;
  uint64_t v872;
  int v873;
  _QWORD *v874;
  uint64_t v875;
  uint64_t v876;
  int *Space;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  void (**PushVariable)(WTF::StringPrintStream *__hidden);
  uint64_t v883;
  JSC::B3::Value *v884;
  unint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  char **v892;
  uint64_t v893;
  unsigned int v894;
  uint64_t v895;
  _OWORD *v896;
  uint64_t v897;
  __int128 v898;
  char *v899;
  char *v900;
  char *v901;
  char *v902;
  char *v903;
  char *v904;
  char *v905;
  char *v906;
  char *v907;
  char *v908;
  char *v909;
  char *v910;
  char *v911;
  char *v912;
  char *v913;
  char v914;
  uint64_t v915;
  JSC::B3::Value *v916;
  unint64_t v917;
  char v918;
  uint64_t v919;
  int v920;
  _QWORD *v921;
  uint64_t v922;
  uint64_t v923;
  int *v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  JSC::B3::Value *v929;
  unint64_t v930;
  uint64_t v931;
  char **v932;
  uint64_t v933;
  unsigned int v934;
  unint64_t v935;
  uint64_t v936;
  unint64_t v937;
  char **v938;
  uint64_t v939;
  void (**v940)(WTF::StringPrintStream *__hidden);
  uint64_t v941;
  JSC::B3::Value *v942;
  unint64_t v943;
  uint64_t v944;
  _QWORD *v945;
  uint64_t v946;
  void (**v947)(WTF::StringPrintStream *__hidden);
  uint64_t v948;
  uint64_t v949;
  void (**v950)(WTF::StringPrintStream *__hidden);
  uint64_t v951;
  JSC::B3::Value *v952;
  unint64_t v953;
  void (**v954)(WTF::StringPrintStream *__hidden);
  char **v955;
  uint64_t v956;
  uint64_t v957;
  unint64_t v958;
  void *v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  unint64_t v966;
  void *v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  unint64_t v974;
  void *v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  unint64_t v982;
  void *v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  char *v990;
  char *v991;
  char *v992;
  uint64_t *v993;
  uint64_t v994;
  uint64_t v995;
  _QWORD *v996;
  uint64_t v997;
  JSC::B3::Value *v998;
  unint64_t v999;
  uint64_t v1000;
  char **v1001;
  uint64_t v1002;
  uint64_t v1003;
  WTF *v1004;
  uint64_t v1005;
  JSC::B3::Value *v1006;
  unint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  char **v1014;
  uint64_t v1015;
  unsigned int v1016;
  uint64_t v1017;
  unint64_t *v1018;
  unint64_t v1019;
  unint64_t v1020;
  unint64_t v1021;
  uint64_t v1022;
  unint64_t v1023;
  void *v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  char *v1031;
  char *v1032;
  char *v1033;
  char *v1034;
  char *v1035;
  char *v1036;
  char *v1037;
  char *v1038;
  char *v1039;
  char *v1040;
  char *v1041;
  char *v1042;
  char *v1043;
  char *v1044;
  char *v1045;
  char *v1046;
  char *v1047;
  char *v1048;
  char *v1049;
  unint64_t v1050;
  uint64_t v1051;
  unint64_t v1052;
  char **v1053;
  uint64_t v1054;
  void (**v1055)(WTF::StringPrintStream *__hidden);
  uint64_t v1056;
  JSC::B3::Value *v1057;
  unint64_t v1058;
  void (**v1059)(WTF::StringPrintStream *__hidden);
  char **v1060;
  uint64_t v1061;
  unint64_t v1062;
  void *v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  unint64_t v1070;
  void *v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  unint64_t v1078;
  void *v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  unint64_t v1086;
  void *v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  unint64_t v1094;
  void *v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  unint64_t v1102;
  void *v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  unint64_t v1110;
  void *v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  unint64_t v1118;
  void *v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  unint64_t v1126;
  void *v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  char *v1134;
  char *v1135;
  char *v1136;
  char *v1137;
  char *v1138;
  char *v1139;
  char *v1140;
  char *v1141;
  char *v1142;
  char *v1143;
  char *v1144;
  char *v1145;
  unint64_t v1146;
  unsigned int v1147;
  unsigned int v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  JSC::B3::Procedure *v1153;
  WTF::AtomStringImpl *v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  WTF::StringImpl *v1161;
  int v1162;
  unsigned int v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  WTF::AtomStringImpl *v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  WTF::StringImpl *v1178;
  int v1179;
  _QWORD *v1180;
  uint64_t v1181;
  JSC::B3::Value *v1182;
  unint64_t v1183;
  uint64_t v1184;
  int v1185;
  char **v1186;
  uint64_t v1187;
  uint64_t v1188;
  JSC::B3::Value *v1189;
  uint64_t v1190;
  JSC::B3::Value *v1191;
  unint64_t v1192;
  char v1193;
  uint64_t v1194;
  int v1195;
  char **v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  void (**v1202)(WTF::StringPrintStream *__hidden);
  uint64_t v1203;
  JSC::B3::Value *v1204;
  unint64_t v1205;
  uint64_t v1206;
  char **v1207;
  uint64_t v1208;
  unsigned int v1209;
  uint64_t v1210;
  char *v1211;
  char *v1212;
  char *v1213;
  char *v1214;
  unint64_t v1215;
  unsigned int v1216;
  unsigned int v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  WTF::AtomStringImpl *v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  WTF::StringImpl *v1230;
  int v1231;
  unint64_t *v1232;
  unint64_t v1233;
  unsigned int v1234;
  unint64_t v1235;
  unint64_t v1236;
  JSC::B3::Value *v1237;
  unint64_t v1238;
  char v1239;
  uint64_t v1240;
  int v1241;
  char **v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  char **v1246;
  uint64_t v1247;
  uint64_t v1248;
  void (**v1249)(WTF::StringPrintStream *__hidden);
  unint64_t v1250;
  JSC::B3::Value *v1251;
  unint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  char **v1259;
  uint64_t v1260;
  unint64_t v1261;
  unsigned int v1262;
  unint64_t *v1263;
  char *v1264;
  char *v1265;
  char *v1266;
  const char *v1267;
  uint64_t v1268;
  unint64_t v1269;
  void *v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  unint64_t v1277;
  void *v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  unint64_t v1285;
  void *v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  unint64_t v1293;
  void *v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  unint64_t v1301;
  void *v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  unint64_t v1309;
  void *v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  unint64_t v1317;
  void *v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  unint64_t v1325;
  void *v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  char *v1333;
  char *v1334;
  unsigned int v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  JSC::B3::Procedure *v1339;
  WTF::AtomStringImpl *v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  WTF::StringImpl *v1347;
  int v1348;
  unsigned int v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  WTF::AtomStringImpl *v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  WTF::StringImpl *v1361;
  int v1362;
  _QWORD *v1363;
  uint64_t v1364;
  JSC::B3::Value *v1365;
  unint64_t v1366;
  uint64_t v1367;
  char **v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  JSC::B3::Value *v1372;
  unint64_t v1373;
  uint64_t v1374;
  int v1375;
  char **v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  JSC::B3::Value *v1380;
  unint64_t v1381;
  uint64_t v1382;
  int v1383;
  char **v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t *v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  char **v1391;
  uint64_t v1392;
  unsigned int v1393;
  uint64_t v1394;
  char *v1395;
  char *v1396;
  char *v1397;
  char *v1398;
  char *v1399;
  unint64_t v1400;
  void *v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  unint64_t v1408;
  void *v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  char *v1416;
  unint64_t *v1417;
  uint64_t v1418;
  const char *v1419;
  uint64_t v1420;
  void (**v1421)(WTF::StringPrintStream *__hidden);
  void (**v1422)(WTF::StringPrintStream *__hidden);
  const char *v1423;
  JSC::B3::Value *v1424;
  char *v1425;
  uint64_t v1426;
  unsigned int v1427;
  uint64_t v1428;
  unint64_t *v1429;
  uint64_t v1430;
  unint64_t v1431;
  unint64_t v1432;
  unsigned int v1433;
  uint64_t v1434;
  unint64_t *v1435;
  uint64_t v1436;
  unint64_t v1437;
  unint64_t v1438;
  unsigned int v1439;
  uint64_t v1440;
  unint64_t *v1441;
  uint64_t v1442;
  unint64_t v1443;
  unint64_t v1444;
  JSC::B3::Value *v1445;
  uint64_t v1446;
  unsigned __int8 v1447;
  uint64_t v1448;
  int v1449;
  int v1450;
  char **v1451;
  unint64_t v1452;
  unsigned __int8 v1453;
  uint64_t v1454;
  char v1455;
  char v1456;
  char **v1457;
  unint64_t v1458;
  int v1459;
  char v1460;
  JSC::B3::Procedure *v1461;
  JSC::B3::Procedure *v1462;
  JSC::B3::Procedure *v1463;
  JSC::B3::Procedure *v1464;
  JSC::B3::Procedure *v1465;
  JSC::B3::Value *v1466;
  char v1467;
  char v1468;
  JSC::B3::Value *v1469;
  JSC::B3::Procedure *v1470;
  JSC::B3::Value *v1471;
  char **v1472;
  JSC::B3::Procedure *v1473;
  JSC::B3::Procedure *v1475;
  JSC::B3::Procedure *v1476;
  JSC::B3::Value *v1477;
  char v1478;
  JSC::B3::Procedure *v1479;
  char v1480;
  JSC::B3::Procedure *v1481;
  __int16 v1482;
  JSC::B3::Procedure *v1483;
  char v1484;
  char v1485;
  JSC::B3::Procedure *v1486;
  _BYTE *v1487;
  _BYTE *v1488;
  _BYTE *v1489;
  _BYTE *v1490;
  _BYTE *v1491;
  _BYTE *v1492;
  _BYTE *v1493;
  _BYTE *v1494;
  _BYTE *v1495;
  _BYTE *v1496;
  char v1498;
  WTF::StringImpl *v1499;
  WTF::StringImpl *v1500;
  WTF::StringImpl *v1501;
  WTF::StringImpl *v1502;
  WTF::StringImpl *v1503;
  WTF::StringImpl *v1504;
  WTF::StringImpl *v1505;
  WTF::StringImpl *v1506;
  WTF::StringImpl *v1507;
  WTF::StringImpl *v1508;
  WTF::StringImpl *v1509;
  WTF::StringImpl *v1510;
  WTF::StringImpl *v1511;
  WTF::StringImpl *v1512;
  WTF::StringImpl *v1513;
  WTF::StringImpl *v1514;
  WTF::StringImpl *v1515;
  WTF::StringImpl *v1516;
  WTF::StringImpl *v1517;
  WTF::StringImpl *v1518;
  WTF::StringImpl *v1519;
  WTF::StringImpl *v1520;
  WTF *v1521;
  __int128 v1522;
  uint64_t v1523;
  unsigned int v1524;
  WTF::StringImpl *v1525;
  WTF::StringImpl *v1526;
  WTF::StringImpl *v1527;
  WTF::StringImpl *v1528;
  WTF::StringImpl *v1529;
  void (**v1530)(WTF::StringPrintStream *__hidden);
  uint64_t v1531;
  JSC::B3::Value *v1532[3];

  v8 = a2;
  v9 = a1;
  if ((a3 - 77) <= 3u && word_1ECF4C7B4 == 0)
  {
    v522 = "relaxed simd instructions not supported";
    v523 = (unint64_t *)v8;
    v524 = 40;
  }
  else
  {
    switch(a3)
    {
      case 0:
      case 5:
      case 10:
      case 20:
      case 21:
      case 23:
      case 28:
      case 38:
      case 45:
      case 49:
      case 54:
      case 55:
      case 58:
      case 62:
      case 63:
      case 67:
      case 75:
      case 78:
        v49 = *(_DWORD *)(a2 + 68);
        if (!v49)
          goto LABEL_900;
        v50 = *(_QWORD *)(a2 + 48);
        v51 = *(_QWORD *)(a2 + 56) + 24 * v49;
        v52 = *(unsigned __int8 *)(v51 - 24);
        v54 = *(_QWORD *)(v51 - 16);
        v53 = *(_QWORD *)(v51 - 8);
        *(_DWORD *)(a2 + 68) = v49 - 1;
        *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
        DWORD2(v1522) = 21;
        LODWORD(v1530) = 1205;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1511);
        v62 = v1511;
        if (!v1511)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07110);
        }
        v63 = *(_DWORD *)(v50 + 512);
        if (!v63)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07118);
        }
        *(_DWORD *)(v50 + 512) = v63 - 1;
        v1511 = 0;
        if (*(_DWORD *)v62 == 2)
        {
          WTF::StringImpl::~StringImpl(v62, v55, v56, v57, v58, v59, v60, v61);
          WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
        }
        else
        {
          *(_DWORD *)v62 -= 2;
        }
        if (v52 != 251 || v54 != 0)
          goto LABEL_905;
        v1530 = 0;
        v65 = *(_QWORD **)(v8 + 48);
        v1488 = v9;
        if (a3 > 48)
        {
          if (a3 <= 74)
          {
            switch(a3)
            {
              case '6':
                v67 = 131;
                break;
              case '7':
                v67 = 127;
                break;
              case '8':
              case '9':
              case ';':
              case '<':
              case '=':
              case '@':
              case 'A':
              case 'B':
                goto LABEL_523;
              case ':':
                v67 = 125;
                break;
              case '>':
                v67 = 143;
                break;
              case '?':
                v67 = 129;
                break;
              case 'C':
                v67 = 134;
                break;
              default:
                if (a3 != 49)
                  goto LABEL_523;
                v67 = 132;
                break;
            }
            goto LABEL_567;
          }
          if (a3 != 75)
          {
            if (a3 == 78)
            {
              v67 = 147;
              goto LABEL_567;
            }
            goto LABEL_523;
          }
          v67 = 124;
        }
        else
        {
          if (a3 > 19)
          {
            v66 = a3 - 20;
            v67 = 137;
            switch(v66)
            {
              case 0:
                goto LABEL_567;
              case 1:
                v67 = 130;
                break;
              case 3:
                v67 = 133;
                break;
              case 8:
                v67 = 135;
                break;
              default:
                goto LABEL_523;
            }
            goto LABEL_567;
          }
          if (a3)
          {
            if (a3 != 5)
            {
              if (a3 == 10)
              {
                v67 = 128;
                goto LABEL_567;
              }
LABEL_523:
              v67 = 159;
              goto LABEL_567;
            }
            v67 = 123;
          }
          else
          {
            v67 = 116;
          }
        }
LABEL_567:
        v867 = a4 & 0x3F;
        v868 = v65[11];
        v869 = (JSC::B3::Value *)v65[7];
        if (*v65)
          v870 = *(_QWORD *)(*v65 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v65 + 14992) << 32);
        else
          v870 = 0;
        v871 = v867 | (a5 << 6);
        v872 = WTF::fastMalloc((WTF *)0x30);
        v873 = *(_DWORD *)(v53 + 4);
        *(_DWORD *)(v872 + 8) = -1;
        *(_WORD *)(v872 + 12) = 10;
        *(_DWORD *)(v872 + 16) = v873;
        *(_BYTE *)(v872 + 20) = 0;
        *(_QWORD *)(v872 + 24) = v870;
        *(_QWORD *)(v872 + 32) = 0;
        *(_QWORD *)v872 = off_1E357F0F8;
        *(_QWORD *)(v872 + 40) = v53;
        JSC::B3::Procedure::addValueImpl(v869, (JSC::B3::Value *)v872);
        *(_QWORD *)&v1522 = v872;
        v874 = (_QWORD *)(v868 + 8);
        v875 = *(unsigned int *)(v868 + 20);
        if ((_DWORD)v875 == *(_DWORD *)(v868 + 16))
        {
          v899 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v868 + 8), v875 + 1, (unint64_t)&v1522);
          v875 = *(unsigned int *)(v868 + 20);
          *(_QWORD *)(*(_QWORD *)(v868 + 8) + 8 * v875) = *(_QWORD *)v899;
          v876 = v1522;
        }
        else
        {
          *(_QWORD *)(*v874 + 8 * v875) = v872;
          v876 = v872;
        }
        *(_DWORD *)(v868 + 20) = v875 + 1;
        *(_QWORD *)(v876 + 32) = v868;
        Space = (int *)JSC::B3::Value::allocateSpace(v67, 48);
        v878 = JSC::B3::Value::Value<>((uint64_t)Space, 0, v67, 5, 1, v870, v872);
        *(_QWORD *)v878 = off_1E357EA50;
        *(_BYTE *)(v878 + 40) = v871;
        *(_BYTE *)(v878 + 41) = 0;
        JSC::B3::Procedure::addValueImpl(v869, (JSC::B3::Value *)Space);
        *(_QWORD *)&v1522 = Space;
        v879 = *(unsigned int *)(v868 + 20);
        if ((_DWORD)v879 == *(_DWORD *)(v868 + 16))
        {
          v900 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v868 + 8), v879 + 1, (unint64_t)&v1522);
          v879 = *(unsigned int *)(v868 + 20);
          *(_QWORD *)(*(_QWORD *)(v868 + 8) + 8 * v879) = *(_QWORD *)v900;
          v880 = v1522;
        }
        else
        {
          *(_QWORD *)(*v874 + 8 * v879) = Space;
          v880 = (uint64_t)Space;
        }
        v881 = a2;
        *(_DWORD *)(v868 + 20) = v879 + 1;
        *(_QWORD *)(v880 + 32) = v868;
        PushVariable = (void (**)(WTF::StringPrintStream *__hidden))JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)v65, Space[4]);
        v883 = v65[11];
        v884 = (JSC::B3::Value *)v65[7];
        if (*v65)
          v885 = *(_QWORD *)(*v65 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v65 + 14992) << 32);
        else
          v885 = 0;
        v607 = v1488;
        v886 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v886 + 8) = -1;
        *(_WORD *)(v886 + 12) = 9;
        *(_DWORD *)(v886 + 16) = 0;
        *(_BYTE *)(v886 + 20) = 1;
        *(_QWORD *)(v886 + 24) = v885;
        *(_QWORD *)(v886 + 32) = 0;
        *(_QWORD *)v886 = off_1E357F0F8;
        *(_QWORD *)(v886 + 40) = PushVariable;
        *(_QWORD *)(v886 + 48) = Space;
        JSC::B3::Procedure::addValueImpl(v884, (JSC::B3::Value *)v886);
        *(_QWORD *)&v1522 = v886;
        v892 = (char **)(v883 + 8);
        v893 = *(unsigned int *)(v883 + 20);
        if ((_DWORD)v893 == *(_DWORD *)(v883 + 16))
        {
          v901 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v892, v893 + 1, (unint64_t)&v1522);
          v893 = *(unsigned int *)(v883 + 20);
          *(_QWORD *)(*(_QWORD *)(v883 + 8) + 8 * v893) = *(_QWORD *)v901;
          v886 = v1522;
        }
        else
        {
          *(_QWORD *)&(*v892)[8 * v893] = v886;
        }
        *(_DWORD *)(v883 + 20) = v893 + 1;
        *(_QWORD *)(v886 + 32) = v883;
        v1530 = PushVariable;
        v894 = *(_DWORD *)(a2 + 68);
        if (v894 == *(_DWORD *)(a2 + 64))
        {
          v895 = a2 + 56;
LABEL_579:
          v896 = &JSC::Wasm::Types::V128;
LABEL_580:
          WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::B3::Variable *>(v895, v896, (uint64_t *)&v1530, v887, v888, v889, v890, v891);
        }
        else
        {
          v897 = *(_QWORD *)(a2 + 56) + 24 * v894;
          v898 = xmmword_19915A170;
LABEL_582:
          *(_OWORD *)v897 = v898;
          *(_QWORD *)(v897 + 16) = PushVariable;
          ++*(_DWORD *)(v881 + 68);
        }
LABEL_583:
        *v607 = 0;
        v607[8] = 0;
        return;
      case 1:
      case 3:
      case 6:
      case 9:
      case 18:
      case 24:
      case 26:
      case 31:
      case 32:
      case 39:
      case 42:
      case 43:
      case 47:
      case 52:
      case 53:
      case 60:
      case 69:
      case 73:
      case 76:
      case 77:
        v15 = *(_DWORD *)(a2 + 68);
        if (!v15)
          goto LABEL_900;
        v16 = *(_QWORD *)(a2 + 48);
        v17 = *(_QWORD *)(a2 + 56) + 24 * v15;
        v18 = *(unsigned __int8 *)(v17 - 24);
        v19 = *(_QWORD *)(v17 - 16);
        v20 = *(JSC::B3::Procedure **)(v17 - 8);
        *(_DWORD *)(a2 + 68) = v15 - 1;
        *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
        DWORD2(v1522) = 21;
        LODWORD(v1530) = 1305;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1503);
        v28 = v1503;
        if (!v1503)
        {
          __break(0xC471u);
          JUMPOUT(0x198E070F0);
        }
        v29 = *(_DWORD *)(v16 + 512);
        if (!v29)
        {
          __break(0xC471u);
          JUMPOUT(0x198E070F8);
        }
        *(_DWORD *)(v16 + 512) = v29 - 1;
        v1503 = 0;
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
          WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
        }
        else
        {
          *(_DWORD *)v28 -= 2;
        }
        v1473 = v20;
        v30 = *(_DWORD *)(v8 + 68);
        if (!v30)
          goto LABEL_900;
        v1487 = v9;
        v31 = *(_QWORD *)(v8 + 48);
        v32 = *(_QWORD *)(v8 + 56) + 24 * v30;
        v33 = v8;
        v34 = *(unsigned __int8 *)(v32 - 24);
        v35 = *(_QWORD *)(v32 - 16);
        v36 = *(_QWORD *)(v32 - 8);
        *(_DWORD *)(v33 + 68) = v30 - 1;
        *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
        DWORD2(v1522) = 21;
        LODWORD(v1530) = 1306;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1502);
        v45 = v1502;
        if (!v1502)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07100);
        }
        v46 = *(_DWORD *)(v31 + 512);
        if (!v46)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07108);
        }
        *(_DWORD *)(v31 + 512) = v46 - 1;
        v1502 = 0;
        if (*(_DWORD *)v45 == 2)
        {
          WTF::StringImpl::~StringImpl(v45, v37, v38, v39, v40, v41, v42, v43);
          WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
        }
        else
        {
          *(_DWORD *)v45 -= 2;
        }
        if (v34 != 251 || v35)
          goto LABEL_908;
        if (v18 != 251 || v19)
          goto LABEL_909;
        v1530 = 0;
        v47 = *(_QWORD **)(a2 + 48);
        if (a3 <= 38)
        {
          v48 = 117;
          switch(a3)
          {
            case 1:
              v48 = 106;
              break;
            case 2:
            case 4:
            case 5:
            case 7:
            case 8:
LABEL_269:
              v48 = 159;
              break;
            case 3:
              v48 = 118;
              break;
            case 6:
              break;
            case 9:
              v48 = 120;
              break;
            default:
              switch(a3)
              {
                case 24:
                  v48 = 113;
                  break;
                case 25:
                case 27:
                case 28:
                case 29:
                case 30:
                  goto LABEL_269;
                case 26:
                  v48 = 114;
                  break;
                case 31:
                  v48 = 140;
                  break;
                case 32:
                  v48 = 111;
                  break;
                default:
                  if (a3 != 18)
                    goto LABEL_269;
                  v48 = 109;
                  break;
              }
              break;
          }
        }
        else
        {
          switch(a3)
          {
            case '\'':
              v48 = 115;
              break;
            case '(':
            case ')':
            case ',':
            case '-':
            case '.':
            case '0':
            case '1':
            case '2':
            case '3':
              goto LABEL_269;
            case '*':
              v48 = 107;
              break;
            case '+':
              v48 = 112;
              break;
            case '/':
              v48 = 108;
              break;
            case '4':
              v48 = 145;
              break;
            case '5':
              v48 = 110;
              break;
            default:
              switch(a3)
              {
                case 'E':
                  v48 = 104;
                  break;
                case 'F':
                case 'G':
                case 'H':
                case 'J':
                case 'K':
                  goto LABEL_269;
                case 'I':
                  v48 = 105;
                  break;
                case 'L':
                  v48 = 144;
                  break;
                case 'M':
                  v48 = 146;
                  break;
                default:
                  if (a3 != 60)
                    goto LABEL_269;
                  v48 = 119;
                  break;
              }
              break;
          }
        }
        v832 = v47[11];
        v833 = (JSC::B3::Value *)v47[7];
        if (*v47)
          v834 = *(_QWORD *)(*v47 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v47 + 14992) << 32);
        else
          v834 = 0;
        v835 = WTF::fastMalloc((WTF *)0x30);
        v836 = *(_DWORD *)(v36 + 4);
        *(_DWORD *)(v835 + 8) = -1;
        *(_WORD *)(v835 + 12) = 10;
        *(_DWORD *)(v835 + 16) = v836;
        *(_BYTE *)(v835 + 20) = 0;
        *(_QWORD *)(v835 + 24) = v834;
        *(_QWORD *)(v835 + 32) = 0;
        *(_QWORD *)v835 = off_1E357F0F8;
        *(_QWORD *)(v835 + 40) = v36;
        JSC::B3::Procedure::addValueImpl(v833, (JSC::B3::Value *)v835);
        *(_QWORD *)&v1522 = v835;
        v837 = (char **)(v832 + 8);
        v838 = *(unsigned int *)(v832 + 20);
        v1457 = (char **)(v832 + 8);
        if ((_DWORD)v838 == *(_DWORD *)(v832 + 16))
        {
          v864 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v837, v838 + 1, (unint64_t)&v1522);
          v838 = *(unsigned int *)(v832 + 20);
          *(_QWORD *)(*(_QWORD *)(v832 + 8) + 8 * v838) = *(_QWORD *)v864;
          v839 = v1522;
        }
        else
        {
          *(_QWORD *)&(*v837)[8 * v838] = v835;
          v839 = v835;
        }
        v840 = a4 & 0x3F;
        *(_DWORD *)(v832 + 20) = v838 + 1;
        *(_QWORD *)(v839 + 32) = v832;
        v841 = v47[11];
        v842 = (JSC::B3::Value *)v47[7];
        v1469 = v833;
        v843 = v834;
        if (*v47)
          v844 = *(_QWORD *)(*v47 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v47 + 14992) << 32);
        else
          v844 = 0;
        v845 = v840 | (a5 << 6);
        v846 = WTF::fastMalloc((WTF *)0x30);
        v847 = *((_DWORD *)v1473 + 1);
        *(_DWORD *)(v846 + 8) = -1;
        *(_WORD *)(v846 + 12) = 10;
        *(_DWORD *)(v846 + 16) = v847;
        *(_BYTE *)(v846 + 20) = 0;
        *(_QWORD *)(v846 + 24) = v844;
        *(_QWORD *)(v846 + 32) = 0;
        *(_QWORD *)v846 = off_1E357F0F8;
        *(_QWORD *)(v846 + 40) = v1473;
        JSC::B3::Procedure::addValueImpl(v842, (JSC::B3::Value *)v846);
        *(_QWORD *)&v1522 = v846;
        v848 = (char **)(v841 + 8);
        v849 = *(unsigned int *)(v841 + 20);
        if ((_DWORD)v849 == *(_DWORD *)(v841 + 16))
        {
          v865 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v848, v849 + 1, (unint64_t)&v1522);
          v849 = *(unsigned int *)(v841 + 20);
          *(_QWORD *)(*(_QWORD *)(v841 + 8) + 8 * v849) = *(_QWORD *)v865;
          v850 = v1522;
        }
        else
        {
          *(_QWORD *)&(*v848)[8 * v849] = v846;
          v850 = v846;
        }
        *(_DWORD *)(v841 + 20) = v849 + 1;
        *(_QWORD *)(v850 + 32) = v841;
        v226 = JSC::B3::Value::allocateSpace(v48, 48);
        *(_QWORD *)v226 = off_1E357F5F0;
        *(_DWORD *)(v226 + 8) = -1;
        *(_WORD *)(v226 + 12) = v48;
        *(_DWORD *)(v226 + 16) = 5;
        *(_BYTE *)(v226 + 20) = 2;
        *(_QWORD *)(v226 + 24) = v843;
        *(_QWORD *)(v226 + 32) = 0;
        JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v226, 2, v835, v846);
        *(_QWORD *)v226 = off_1E357EA50;
        *(_BYTE *)(v226 + 40) = v845;
        *(_BYTE *)(v226 + 41) = 0;
        JSC::B3::Procedure::addValueImpl(v1469, (JSC::B3::Value *)v226);
        *(_QWORD *)&v1522 = v226;
        v851 = *(unsigned int *)(v832 + 20);
        if ((_DWORD)v851 == *(_DWORD *)(v832 + 16))
        {
          v866 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1457, v851 + 1, (unint64_t)&v1522);
          v851 = *(unsigned int *)(v832 + 20);
          *(_QWORD *)(*(_QWORD *)(v832 + 8) + 8 * v851) = *(_QWORD *)v866;
          v852 = v1522;
        }
        else
        {
          *(_QWORD *)&(*v1457)[8 * v851] = v226;
          v852 = v226;
        }
        v229 = v1487;
        v230 = a2;
        *(_DWORD *)(v832 + 20) = v851 + 1;
        *(_QWORD *)(v852 + 32) = v832;
        goto LABEL_553;
      case 2:
      case 16:
      case 46:
      case 71:
        v1524 = 0;
        v1522 = JSC::Wasm::Types::Void;
        if (a3 > 45)
        {
          if (a3 == 46)
          {
            v93 = 4;
          }
          else
          {
            if (a3 != 71)
            {
LABEL_1057:
              __break(0xC471u);
              JUMPOUT(0x198E06EE8);
            }
            v93 = 2;
          }
        }
        else if (a3 == 2)
        {
          v93 = 8;
        }
        else
        {
          v93 = a3;
          if (a3 != 16)
            goto LABEL_1057;
        }
        v635 = *(_DWORD *)(a2 + 68);
        if (!v635)
        {
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "vector", 7, &v1530, a8);
          goto LABEL_930;
        }
        v636 = *(_QWORD *)(a2 + 48);
        v637 = *(_QWORD *)(a2 + 56) + 24 * v635;
        v638 = *(unsigned __int8 *)(v637 - 24);
        v639 = *(JSC::B3::Procedure **)(v637 - 8);
        *(_DWORD *)(a2 + 68) = v635 - 1;
        v1530 = (void (**)(WTF::StringPrintStream *__hidden))"WasmFunctionParser.h:";
        LODWORD(v1531) = 21;
        LODWORD(v1532[0]) = 1001;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1530, (unsigned int *)v1532, (int **)&v1519);
        v649 = v1519;
        if (!v1519)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07150);
        }
        v650 = *(_DWORD *)(v636 + 512);
        if (!v650)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07158);
        }
        *(_DWORD *)(v636 + 512) = v650 - 1;
        v1519 = 0;
        if (*(_DWORD *)v649 == 2)
        {
          WTF::StringImpl::~StringImpl(v649, v640, v641, v642, v643, v644, v645, v646);
          WTF::fastFree(v974, v975, v976, v977, v978, v979, v980, v981);
        }
        else
        {
          *(_DWORD *)v649 -= 2;
        }
        if (v638 == 251)
        {
          JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v1530, a3, v8, &v1524, (uint64_t)&v1522, v647, v648);
          if (!(_BYTE)v1531)
          {
            v651 = (v93 - 2) >> 1;
            if (v651 > 7 || ((1 << v651) & 0x8B) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x198E06F48);
            }
            v652 = *(_QWORD *)v8;
            if (*(_QWORD *)v8 < *(_QWORD *)(v8 + 16))
            {
              *(_QWORD *)v8 = v652 + 1;
              v653 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + v652);
              if (v653 < v93)
              {
                v1521 = 0;
                v654 = *(JSC::Wasm::OMGIRGenerator **)(v8 + 48);
                v655 = v1523;
                v656 = v1524;
                v1483 = v639;
                v1468 = v653;
                if (a3 <= 45)
                {
                  if (a3 == 2)
                  {
                    v1456 = 2;
                    v657 = 65;
                    v1450 = 1;
                    v658 = 2;
                    goto LABEL_495;
                  }
                  if (a3 == 16)
                  {
                    v1450 = 1;
                    v657 = 63;
                    v1456 = 1;
                    v658 = 1;
LABEL_495:
                    v790 = v9;
                    v791 = *((_QWORD *)v654 + 11);
                    v792 = (JSC::B3::Value *)*((_QWORD *)v654 + 7);
                    if (*(_QWORD *)v654)
                      v793 = *(_QWORD *)(*(_QWORD *)v654 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v654 + 14992) << 32);
                    else
                      v793 = 0;
                    v794 = WTF::fastMalloc((WTF *)0x30);
                    v795 = *(_DWORD *)(v655 + 4);
                    *(_DWORD *)(v794 + 8) = -1;
                    *(_WORD *)(v794 + 12) = 10;
                    *(_DWORD *)(v794 + 16) = v795;
                    *(_BYTE *)(v794 + 20) = 0;
                    *(_QWORD *)(v794 + 24) = v793;
                    *(_QWORD *)(v794 + 32) = 0;
                    *(_QWORD *)v794 = off_1E357F0F8;
                    *(_QWORD *)(v794 + 40) = v655;
                    JSC::B3::Procedure::addValueImpl(v792, (JSC::B3::Value *)v794);
                    v1530 = (void (**)(WTF::StringPrintStream *__hidden))v794;
                    v796 = (char **)(v791 + 8);
                    v797 = *(unsigned int *)(v791 + 20);
                    if ((_DWORD)v797 == *(_DWORD *)(v791 + 16))
                    {
                      v909 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v796, v797 + 1, (unint64_t)&v1530);
                      v797 = *(unsigned int *)(v791 + 20);
                      *(_QWORD *)(*(_QWORD *)(v791 + 8) + 8 * v797) = *(_QWORD *)v909;
                      v798 = v1530;
                    }
                    else
                    {
                      *(_QWORD *)&(*v796)[8 * v797] = v794;
                      v798 = (void (**)(WTF::StringPrintStream *__hidden))v794;
                    }
                    v9 = v790;
                    *(_DWORD *)(v791 + 20) = v797 + 1;
                    v798[4] = (void (*)(WTF::StringPrintStream *__hidden))v791;
                    v1532[0] = (JSC::B3::Value *)JSC::Wasm::OMGIRGenerator::emitCheckAndPreparePointer(v654, (JSC::B3::Value *)v794, v656, v658);
                    v799 = JSC::Wasm::OMGIRGenerator::fixupPointerPlusOffset(v654, v1532, v656);
                    v800 = *((_QWORD *)v654 + 11);
                    v801 = (JSC::B3::Value *)*((_QWORD *)v654 + 7);
                    if (*((_BYTE *)v654 + 32) == 1 || *(_BYTE *)(*((_QWORD *)v654 + 2) + 112))
                      v802 = 512;
                    else
                      v802 = 0;
                    v803 = v802 | v657;
                    if (*(_QWORD *)v654)
                      v804 = *(_QWORD *)(*(_QWORD *)v654 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v654 + 14992) << 32);
                    else
                      v804 = 0;
                    v805 = v1532[0];
                    v806 = (JSC::B3::Value *)JSC::B3::Value::allocateSpace(v657, 64);
                    v807 = JSC::B3::Value::Value<>((uint64_t)v806, 0, v803, v1450, 1, v804, (uint64_t)v805);
                    *(_QWORD *)v807 = off_1E357E4C8;
                    *(_DWORD *)(v807 + 40) = v799;
                    *(_OWORD *)(v807 + 44) = xmmword_19914F690;
                    JSC::B3::Procedure::addValueImpl(v801, v806);
                    v1530 = (void (**)(WTF::StringPrintStream *__hidden))v806;
                    v808 = (char **)(v800 + 8);
                    v809 = *(unsigned int *)(v800 + 20);
                    if ((_DWORD)v809 == *(_DWORD *)(v800 + 16))
                    {
                      v910 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v808, v809 + 1, (unint64_t)&v1530);
                      v809 = *(unsigned int *)(v800 + 20);
                      *(_QWORD *)(*(_QWORD *)(v800 + 8) + 8 * v809) = *(_QWORD *)v910;
                      v810 = v1530;
                    }
                    else
                    {
                      *(_QWORD *)&(*v808)[8 * v809] = v806;
                      v810 = (void (**)(WTF::StringPrintStream *__hidden))v806;
                    }
                    v8 = a2;
                    *(_DWORD *)(v800 + 20) = v809 + 1;
                    v810[4] = (void (*)(WTF::StringPrintStream *__hidden))v800;
                    v811 = *((_QWORD *)v654 + 11);
                    v812 = (JSC::B3::Value *)*((_QWORD *)v654 + 7);
                    if (*(_QWORD *)v654)
                      v813 = *(_QWORD *)(*(_QWORD *)v654 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v654 + 14992) << 32);
                    else
                      v813 = 0;
                    v814 = WTF::fastMalloc((WTF *)0x30);
                    v815 = *((_DWORD *)v1483 + 1);
                    *(_DWORD *)(v814 + 8) = -1;
                    *(_WORD *)(v814 + 12) = 10;
                    *(_DWORD *)(v814 + 16) = v815;
                    *(_BYTE *)(v814 + 20) = 0;
                    *(_QWORD *)(v814 + 24) = v813;
                    *(_QWORD *)(v814 + 32) = 0;
                    *(_QWORD *)v814 = off_1E357F0F8;
                    *(_QWORD *)(v814 + 40) = v1483;
                    JSC::B3::Procedure::addValueImpl(v812, (JSC::B3::Value *)v814);
                    v1530 = (void (**)(WTF::StringPrintStream *__hidden))v814;
                    v816 = (_QWORD *)(v811 + 8);
                    v817 = *(unsigned int *)(v811 + 20);
                    if ((_DWORD)v817 == *(_DWORD *)(v811 + 16))
                    {
                      v911 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v811 + 8), v817 + 1, (unint64_t)&v1530);
                      v817 = *(unsigned int *)(v811 + 20);
                      *(_QWORD *)(*(_QWORD *)(v811 + 8) + 8 * v817) = *(_QWORD *)v911;
                      v818 = v1530;
                    }
                    else
                    {
                      *(_QWORD *)(*v816 + 8 * v817) = v814;
                      v818 = (void (**)(WTF::StringPrintStream *__hidden))v814;
                    }
                    *(_DWORD *)(v811 + 20) = v817 + 1;
                    v818[4] = (void (*)(WTF::StringPrintStream *__hidden))v811;
                    v819 = WTF::fastMalloc((WTF *)0x40);
                    *(_QWORD *)v819 = off_1E357F5F0;
                    *(_DWORD *)(v819 + 8) = -1;
                    *(_WORD *)(v819 + 12) = 91;
                    *(_DWORD *)(v819 + 16) = 5;
                    *(_BYTE *)(v819 + 20) = 2;
                    *(_QWORD *)(v819 + 24) = v813;
                    *(_QWORD *)(v819 + 32) = 0;
                    JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v819, 2, v814, (uint64_t)v806);
                    *(_QWORD *)v819 = off_1E357EA50;
                    *(_BYTE *)(v819 + 40) = v1456;
                    *(_BYTE *)(v819 + 41) = v1468;
                    JSC::B3::Procedure::addValueImpl(v812, (JSC::B3::Value *)v819);
                    v1530 = (void (**)(WTF::StringPrintStream *__hidden))v819;
                    v820 = *(unsigned int *)(v811 + 20);
                    if ((_DWORD)v820 == *(_DWORD *)(v811 + 16))
                    {
                      v912 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v811 + 8), v820 + 1, (unint64_t)&v1530);
                      v820 = *(unsigned int *)(v811 + 20);
                      *(_QWORD *)(*(_QWORD *)(v811 + 8) + 8 * v820) = *(_QWORD *)v912;
                      v821 = v1530;
                    }
                    else
                    {
                      *(_QWORD *)(*v816 + 8 * v820) = v819;
                      v821 = (void (**)(WTF::StringPrintStream *__hidden))v819;
                    }
                    *(_DWORD *)(v811 + 20) = v820 + 1;
                    v821[4] = (void (*)(WTF::StringPrintStream *__hidden))v811;
                    v822 = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)v654, *(_DWORD *)(v819 + 16));
                    v823 = *((_QWORD *)v654 + 11);
                    v824 = (JSC::B3::Value *)*((_QWORD *)v654 + 7);
                    if (*(_QWORD *)v654)
                      v825 = *(_QWORD *)(*(_QWORD *)v654 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v654 + 14992) << 32);
                    else
                      v825 = 0;
                    v826 = (void (**)(WTF::StringPrintStream *__hidden))WTF::fastMalloc((WTF *)0x38);
                    *((_DWORD *)v826 + 2) = -1;
                    *((_WORD *)v826 + 6) = 9;
                    *((_DWORD *)v826 + 4) = 0;
                    *((_BYTE *)v826 + 20) = 1;
                    v826[3] = (void (*)(WTF::StringPrintStream *__hidden))v825;
                    v826[4] = 0;
                    *v826 = (void (*)(WTF::StringPrintStream *__hidden))off_1E357F0F8;
                    v826[5] = (void (*)(WTF::StringPrintStream *__hidden))v822;
                    v826[6] = (void (*)(WTF::StringPrintStream *__hidden))v819;
                    JSC::B3::Procedure::addValueImpl(v824, (JSC::B3::Value *)v826);
                    v1530 = v826;
                    v827 = (char **)(v823 + 8);
                    v828 = *(unsigned int *)(v823 + 20);
                    if ((_DWORD)v828 == *(_DWORD *)(v823 + 16))
                    {
                      v913 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v827, v828 + 1, (unint64_t)&v1530);
                      v828 = *(unsigned int *)(v823 + 20);
                      *(_QWORD *)(*(_QWORD *)(v823 + 8) + 8 * v828) = *(_QWORD *)v913;
                      v826 = v1530;
                    }
                    else
                    {
                      *(_QWORD *)&(*v827)[8 * v828] = v826;
                    }
                    *(_DWORD *)(v823 + 20) = v828 + 1;
                    v826[4] = (void (*)(WTF::StringPrintStream *__hidden))v823;
                    v1521 = v822;
                    v829 = *(_DWORD *)(a2 + 68);
                    if (v829 != *(_DWORD *)(a2 + 64))
                    {
                      v830 = *(_QWORD *)(a2 + 56) + 24 * v829;
                      *(_OWORD *)v830 = xmmword_19915A170;
                      *(_QWORD *)(v830 + 16) = v822;
LABEL_671:
                      ++*(_DWORD *)(v8 + 68);
                      goto LABEL_672;
                    }
                    v329 = a2 + 56;
LABEL_517:
                    v520 = (uint64_t *)&v1521;
LABEL_518:
                    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::B3::Variable *>(v329, &JSC::Wasm::Types::V128, v520, v321, v322, v323, v324, v325);
                    goto LABEL_672;
                  }
LABEL_1063:
                  __break(0xC471u);
                  JUMPOUT(0x198E06FC8);
                }
                if (a3 == 46)
                {
                  v658 = 4;
                  v1456 = 3;
                  v657 = 67;
                  v659 = 1;
                }
                else
                {
                  if (a3 != 71)
                    goto LABEL_1063;
                  v658 = 8;
                  v1456 = 4;
                  v657 = 67;
                  v659 = 2;
                }
                v1450 = v659;
                goto LABEL_495;
              }
              goto LABEL_929;
            }
LABEL_1030:
            JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("Could not parse the lane index immediate byte.", (unint64_t *)v8, 47, &v1530, v626);
          }
LABEL_930:
          v608 = (JSC::B3::Value *)v1530;
          goto LABEL_359;
        }
        v1530 = (void (**)(WTF::StringPrintStream *__hidden))"load_lane input must be a vector";
        v1531 = 33;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))v1532, (uint64_t)&v1530, v647, v648);
        v608 = v1532[0];
        goto LABEL_359;
      case 4:
      case 15:
      case 30:
      case 59:
        v1460 = a4;
        v94 = *(_DWORD *)(a2 + 68);
        if (!v94)
          goto LABEL_900;
        v95 = *(_QWORD *)(a2 + 48);
        v96 = *(_QWORD *)(a2 + 56) + 24 * v94;
        v97 = *(unsigned __int8 *)(v96 - 24);
        v98 = *(_QWORD *)(v96 - 16);
        v99 = *(_QWORD *)(v96 - 8);
        *(_DWORD *)(a2 + 68) = v94 - 1;
        *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
        DWORD2(v1522) = 21;
        LODWORD(v1530) = 1247;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1507);
        v108 = v1507;
        if (!v1507)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07120);
        }
        v109 = *(_DWORD *)(v95 + 512);
        if (!v109)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07128);
        }
        *(_DWORD *)(v95 + 512) = v109 - 1;
        v1507 = 0;
        if (*(_DWORD *)v108 == 2)
        {
          WTF::StringImpl::~StringImpl(v108, v100, v101, v102, v103, v104, v105, v106);
          WTF::fastFree(v958, v959, v960, v961, v962, v963, v964, v965);
        }
        else
        {
          *(_DWORD *)v108 -= 2;
        }
        v110 = v9;
        v111 = *(_DWORD *)(v8 + 68);
        if (!v111)
          goto LABEL_914;
        v112 = *(_QWORD *)(v8 + 48);
        v113 = *(_QWORD *)(v8 + 56) + 24 * v111;
        v114 = *(unsigned __int8 *)(v113 - 24);
        v115 = v8;
        v117 = *(_QWORD *)(v113 - 16);
        v116 = *(_QWORD *)(v113 - 8);
        *(_DWORD *)(v115 + 68) = v111 - 1;
        *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
        DWORD2(v1522) = 21;
        LODWORD(v1530) = 1248;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1506);
        v127 = v1506;
        if (!v1506)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07130);
        }
        v128 = *(_DWORD *)(v112 + 512);
        if (!v128)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07138);
        }
        *(_DWORD *)(v112 + 512) = v128 - 1;
        v1506 = 0;
        if (*(_DWORD *)v127 == 2)
        {
          WTF::StringImpl::~StringImpl(v127, v118, v119, v120, v121, v122, v123, v124);
          WTF::fastFree(v982, v983, v984, v985, v986, v987, v988, v989);
        }
        else
        {
          *(_DWORD *)v127 -= 2;
        }
        if (v114 != 251 || v117)
          goto LABEL_916;
        if (v97 != 251 || v98)
          goto LABEL_917;
        v1530 = 0;
        v129 = a2;
        v130 = *(_QWORD **)(a2 + 48);
        v131 = *a6;
        v132 = v1460 & 0x3F | (a5 << 6);
        v133 = v116;
        v134 = v99;
        goto LABEL_249;
      case 7:
        v447 = *(_DWORD *)(a2 + 68);
        if (!v447)
        {
          v1416 = "val";
          goto LABEL_957;
        }
        v448 = *(_QWORD *)(a2 + 48);
        v449 = *(_QWORD *)(a2 + 56) + 24 * v447;
        v450 = *(unsigned __int8 *)(v449 - 24);
        v451 = *(_QWORD *)(v449 - 8);
        *(_DWORD *)(a2 + 68) = v447 - 1;
        *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
        DWORD2(v1522) = 21;
        LODWORD(v1530) = 960;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1520);
        v459 = v1520;
        if (!v1520)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07200);
        }
        v460 = *(_DWORD *)(v448 + 512);
        if (!v460)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07208);
        }
        *(_DWORD *)(v448 + 512) = v460 - 1;
        v1520 = 0;
        if (*(_DWORD *)v459 == 2)
        {
          WTF::StringImpl::~StringImpl(v459, v452, v453, v454, v455, v456, v457, v458);
          WTF::fastFree(v1269, v1270, v1271, v1272, v1273, v1274, v1275, v1276);
        }
        else
        {
          *(_DWORD *)v459 -= 2;
        }
        if (v450 != 251)
        {
          v1267 = "store vector must be v128";
          v1268 = 26;
          goto LABEL_907;
        }
        LODWORD(v1521) = 0;
        v1522 = JSC::Wasm::Types::Void;
        JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v1530, 7u, v8, &v1521, (uint64_t)&v1522, *(double *)&JSC::Wasm::Types::Void, a8);
        if ((_BYTE)v1531)
          goto LABEL_930;
        v461 = *(JSC::Wasm::OMGIRGenerator **)(v8 + 48);
        v462 = v1523;
        v463 = v1521;
        v464 = *((_QWORD *)v461 + 11);
        v465 = (JSC::B3::Value *)*((_QWORD *)v461 + 7);
        if (*(_QWORD *)v461)
          v466 = *(_QWORD *)(*(_QWORD *)v461 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v461
                                                                                                + 14992) << 32);
        else
          v466 = 0;
        v467 = WTF::fastMalloc((WTF *)0x30);
        v468 = *(_DWORD *)(v462 + 4);
        *(_DWORD *)(v467 + 8) = -1;
        *(_WORD *)(v467 + 12) = 10;
        *(_DWORD *)(v467 + 16) = v468;
        *(_BYTE *)(v467 + 20) = 0;
        *(_QWORD *)(v467 + 24) = v466;
        *(_QWORD *)(v467 + 32) = 0;
        *(_QWORD *)v467 = off_1E357F0F8;
        *(_QWORD *)(v467 + 40) = v462;
        JSC::B3::Procedure::addValueImpl(v465, (JSC::B3::Value *)v467);
        v1530 = (void (**)(WTF::StringPrintStream *__hidden))v467;
        v469 = (char **)(v464 + 8);
        v470 = *(unsigned int *)(v464 + 20);
        if ((_DWORD)v470 == *(_DWORD *)(v464 + 16))
        {
          v1140 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v469, v470 + 1, (unint64_t)&v1530);
          v470 = *(unsigned int *)(v464 + 20);
          *(_QWORD *)(*(_QWORD *)(v464 + 8) + 8 * v470) = *(_QWORD *)v1140;
          v471 = v1530;
        }
        else
        {
          *(_QWORD *)&(*v469)[8 * v470] = v467;
          v471 = (void (**)(WTF::StringPrintStream *__hidden))v467;
        }
        *(_DWORD *)(v464 + 20) = v470 + 1;
        v471[4] = (void (*)(WTF::StringPrintStream *__hidden))v464;
        v1532[0] = (JSC::B3::Value *)JSC::Wasm::OMGIRGenerator::emitCheckAndPreparePointer(v461, (JSC::B3::Value *)v467, v463, 16);
        v472 = JSC::Wasm::OMGIRGenerator::fixupPointerPlusOffset(v461, v1532, v463);
        v473 = *((_QWORD *)v461 + 11);
        v474 = (JSC::B3::Value *)*((_QWORD *)v461 + 7);
        if (*((_BYTE *)v461 + 32) == 1 || *(_BYTE *)(*((_QWORD *)v461 + 2) + 112))
          v475 = 582;
        else
          v475 = 70;
        if (*(_QWORD *)v461)
          v476 = *(_QWORD *)(*(_QWORD *)v461 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v461
                                                                                                + 14992) << 32);
        else
          v476 = 0;
        v477 = WTF::fastMalloc((WTF *)0x30);
        v478 = *(_DWORD *)(v451 + 4);
        *(_DWORD *)(v477 + 8) = -1;
        *(_WORD *)(v477 + 12) = 10;
        *(_DWORD *)(v477 + 16) = v478;
        *(_BYTE *)(v477 + 20) = 0;
        *(_QWORD *)(v477 + 24) = v476;
        *(_QWORD *)(v477 + 32) = 0;
        *(_QWORD *)v477 = off_1E357F0F8;
        *(_QWORD *)(v477 + 40) = v451;
        JSC::B3::Procedure::addValueImpl(v474, (JSC::B3::Value *)v477);
        v1530 = (void (**)(WTF::StringPrintStream *__hidden))v477;
        v479 = (char **)(v473 + 8);
        v480 = *(unsigned int *)(v473 + 20);
        if ((_DWORD)v480 == *(_DWORD *)(v473 + 16))
        {
          v1141 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v479, v480 + 1, (unint64_t)&v1530);
          v480 = *(unsigned int *)(v473 + 20);
          *(_QWORD *)(*(_QWORD *)(v473 + 8) + 8 * v480) = *(_QWORD *)v1141;
          v481 = v1530;
        }
        else
        {
          *(_QWORD *)&(*v479)[8 * v480] = v477;
          v481 = (void (**)(WTF::StringPrintStream *__hidden))v477;
        }
        *(_DWORD *)(v473 + 20) = v480 + 1;
        v481[4] = (void (*)(WTF::StringPrintStream *__hidden))v473;
        JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,int>((JSC::B3::BasicBlock *)v473, v474, v475, v476, v477, (uint64_t)v1532[0], v472);
        goto LABEL_672;
      case 8:
      case 25:
      case 29:
      case 48:
        LODWORD(v1521) = 0;
        v1522 = JSC::Wasm::Types::Void;
        if (a3 > 28)
        {
          if (a3 == 29)
          {
            v93 = 2;
          }
          else
          {
            if (a3 != 48)
              goto LABEL_1056;
            v93 = 8;
          }
        }
        else
        {
          if (a3 != 8)
          {
            if (a3 == 25)
            {
              v93 = 4;
              goto LABEL_362;
            }
LABEL_1056:
            __break(0xC471u);
            JUMPOUT(0x198E06EC8);
          }
          v93 = 16;
        }
LABEL_362:
        v610 = *(_DWORD *)(a2 + 68);
        if (v610)
        {
          v611 = *(_QWORD *)(a2 + 48);
          v612 = *(_QWORD *)(a2 + 56) + 24 * v610;
          v613 = *(unsigned __int8 *)(v612 - 24);
          v614 = *(_QWORD *)(v612 - 8);
          *(_DWORD *)(a2 + 68) = v610 - 1;
          v1530 = (void (**)(WTF::StringPrintStream *__hidden))"WasmFunctionParser.h:";
          LODWORD(v1531) = 21;
          LODWORD(v1532[0]) = 1043;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1530, (unsigned int *)v1532, (int **)&v1518);
          v624 = v1518;
          if (!v1518)
          {
            __break(0xC471u);
            JUMPOUT(0x198E07140);
          }
          v625 = *(_DWORD *)(v611 + 512);
          if (!v625)
          {
            __break(0xC471u);
            JUMPOUT(0x198E07148);
          }
          *(_DWORD *)(v611 + 512) = v625 - 1;
          v1518 = 0;
          if (*(_DWORD *)v624 == 2)
          {
            WTF::StringImpl::~StringImpl(v624, v615, v616, v617, v618, v619, v620, v621);
            WTF::fastFree(v966, v967, v968, v969, v970, v971, v972, v973);
          }
          else
          {
            *(_DWORD *)v624 -= 2;
          }
          if (v613 != 251)
          {
            v1530 = (void (**)(WTF::StringPrintStream *__hidden))"store_lane input must be a vector";
            v1531 = 34;
            JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))v1532, (uint64_t)&v1530, v622, v623);
            v1424 = v1532[0];
            goto LABEL_924;
          }
          JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v1530, a3, v8, &v1521, (uint64_t)&v1522, v622, v623);
          if (!(_BYTE)v1531)
          {
            v627 = (v93 - 2) >> 1;
            if (v627 > 7 || ((1 << v627) & 0x8B) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x198E06F28);
            }
            v628 = *(_QWORD *)v8;
            if (*(_QWORD *)v8 >= *(_QWORD *)(v8 + 16))
            {
              v9 = a1;
              goto LABEL_1030;
            }
            *(_QWORD *)v8 = v628 + 1;
            v629 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + v628);
            if (v629 >= v93)
            {
              v9 = a1;
LABEL_929:
              JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char>("Lane index immediate is too large, saw ", (unint64_t *)v8, 40, v93, ", expected an ImmLaneIdx", 25, v93, &v1530, v626);
              goto LABEL_930;
            }
            v630 = *(JSC::Wasm::OMGIRGenerator **)(v8 + 48);
            v631 = v1523;
            v632 = v1521;
            v1498 = v629;
            if (a3 > 28)
            {
              if (a3 == 29)
              {
                v1467 = 0;
                v633 = 8;
                v1455 = 4;
                v634 = 2;
                goto LABEL_476;
              }
              v1455 = 2;
              v1467 = 0x80;
              v1449 = 1;
              v1482 = 69;
              v633 = 2;
            }
            else
            {
              if (a3 != 8)
              {
                v1467 = 0;
                v633 = 4;
                v1455 = 3;
                v634 = 1;
LABEL_476:
                v1449 = v634;
                v1482 = 70;
                goto LABEL_477;
              }
              v1467 = 0x80;
              v1449 = 1;
              v1482 = 68;
              v1455 = 1;
              v633 = 1;
            }
LABEL_477:
            v768 = *((_QWORD *)v630 + 11);
            v769 = (JSC::B3::Value *)*((_QWORD *)v630 + 7);
            v1493 = a1;
            if (*(_QWORD *)v630)
              v770 = *(_QWORD *)(*(_QWORD *)v630 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v630 + 14992) << 32);
            else
              v770 = 0;
            v771 = WTF::fastMalloc((WTF *)0x30);
            v772 = *(_DWORD *)(v631 + 4);
            *(_DWORD *)(v771 + 8) = -1;
            *(_WORD *)(v771 + 12) = 10;
            *(_DWORD *)(v771 + 16) = v772;
            *(_BYTE *)(v771 + 20) = 0;
            *(_QWORD *)(v771 + 24) = v770;
            *(_QWORD *)(v771 + 32) = 0;
            *(_QWORD *)v771 = off_1E357F0F8;
            *(_QWORD *)(v771 + 40) = v631;
            JSC::B3::Procedure::addValueImpl(v769, (JSC::B3::Value *)v771);
            v1530 = (void (**)(WTF::StringPrintStream *__hidden))v771;
            v773 = (char **)(v768 + 8);
            v774 = *(unsigned int *)(v768 + 20);
            if ((_DWORD)v774 == *(_DWORD *)(v768 + 16))
            {
              v906 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v773, v774 + 1, (unint64_t)&v1530);
              v774 = *(unsigned int *)(v768 + 20);
              *(_QWORD *)(*(_QWORD *)(v768 + 8) + 8 * v774) = *(_QWORD *)v906;
              v775 = v1530;
            }
            else
            {
              *(_QWORD *)&(*v773)[8 * v774] = v771;
              v775 = (void (**)(WTF::StringPrintStream *__hidden))v771;
            }
            *(_DWORD *)(v768 + 20) = v774 + 1;
            v775[4] = (void (*)(WTF::StringPrintStream *__hidden))v768;
            v1532[0] = (JSC::B3::Value *)JSC::Wasm::OMGIRGenerator::emitCheckAndPreparePointer(v630, (JSC::B3::Value *)v771, v632, v633);
            v776 = JSC::Wasm::OMGIRGenerator::fixupPointerPlusOffset(v630, v1532, v632);
            v777 = *((_QWORD *)v630 + 11);
            v778 = (JSC::B3::Value *)*((_QWORD *)v630 + 7);
            if (*(_QWORD *)v630)
              v779 = *(_QWORD *)(*(_QWORD *)v630 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v630 + 14992) << 32);
            else
              v779 = 0;
            v780 = WTF::fastMalloc((WTF *)0x30);
            v781 = *(_DWORD *)(v614 + 4);
            *(_DWORD *)(v780 + 8) = -1;
            *(_WORD *)(v780 + 12) = 10;
            *(_DWORD *)(v780 + 16) = v781;
            *(_BYTE *)(v780 + 20) = 0;
            *(_QWORD *)(v780 + 24) = v779;
            *(_QWORD *)(v780 + 32) = 0;
            *(_QWORD *)v780 = off_1E357F0F8;
            *(_QWORD *)(v780 + 40) = v614;
            JSC::B3::Procedure::addValueImpl(v778, (JSC::B3::Value *)v780);
            v1530 = (void (**)(WTF::StringPrintStream *__hidden))v780;
            v782 = (_QWORD *)(v777 + 8);
            v783 = *(unsigned int *)(v777 + 20);
            if ((_DWORD)v783 == *(_DWORD *)(v777 + 16))
            {
              v907 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v777 + 8), v783 + 1, (unint64_t)&v1530);
              v783 = *(unsigned int *)(v777 + 20);
              *(_QWORD *)(*(_QWORD *)(v777 + 8) + 8 * v783) = *(_QWORD *)v907;
              v784 = v1530;
            }
            else
            {
              *(_QWORD *)(*v782 + 8 * v783) = v780;
              v784 = (void (**)(WTF::StringPrintStream *__hidden))v780;
            }
            *(_DWORD *)(v777 + 20) = v783 + 1;
            v784[4] = (void (*)(WTF::StringPrintStream *__hidden))v777;
            v785 = WTF::fastMalloc((WTF *)0x38);
            *(_DWORD *)(v785 + 8) = -1;
            *(_WORD *)(v785 + 12) = 90;
            *(_DWORD *)(v785 + 16) = v1449;
            *(_BYTE *)(v785 + 20) = 1;
            *(_QWORD *)(v785 + 24) = v779;
            *(_QWORD *)(v785 + 32) = 0;
            *(_QWORD *)(v785 + 48) = v780;
            *(_QWORD *)v785 = off_1E357EA50;
            *(_BYTE *)(v785 + 40) = v1467 | v1455;
            *(_BYTE *)(v785 + 41) = v1498;
            JSC::B3::Procedure::addValueImpl(v778, (JSC::B3::Value *)v785);
            v1530 = (void (**)(WTF::StringPrintStream *__hidden))v785;
            v786 = *(unsigned int *)(v777 + 20);
            if ((_DWORD)v786 == *(_DWORD *)(v777 + 16))
            {
              v908 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v777 + 8), v786 + 1, (unint64_t)&v1530);
              v786 = *(unsigned int *)(v777 + 20);
              *(_QWORD *)(*(_QWORD *)(v777 + 8) + 8 * v786) = *(_QWORD *)v908;
              v787 = v1530;
            }
            else
            {
              *(_QWORD *)(*v782 + 8 * v786) = v785;
              v787 = (void (**)(WTF::StringPrintStream *__hidden))v785;
            }
            *(_DWORD *)(v777 + 20) = v786 + 1;
            v787[4] = (void (*)(WTF::StringPrintStream *__hidden))v777;
            if (*((_BYTE *)v630 + 32) == 1 || *(_BYTE *)(*((_QWORD *)v630 + 2) + 112))
              v788 = 512;
            else
              v788 = 0;
            if (*(_QWORD *)v630)
              v789 = *(_QWORD *)(*(_QWORD *)v630 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v630 + 14992) << 32);
            else
              v789 = 0;
            JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,int>(*((JSC::B3::BasicBlock **)v630 + 11), *((JSC::B3::Value **)v630 + 7), v788 | v1482, v789, v785, (uint64_t)v1532[0], v776);
            *v1493 = 0;
            v1493[8] = 0;
            return;
          }
        }
        else
        {
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "vector", 7, &v1530, a8);
        }
        v1424 = (JSC::B3::Value *)v1530;
LABEL_924:
        *(_QWORD *)a1 = v1424;
        a1[8] = 1;
        return;
      case 11:
      case 51:
        v330 = *(_DWORD *)(a2 + 68);
        if (!v330)
        {
          v1416 = "rhs";
LABEL_957:
          v1417 = (unint64_t *)v8;
          v1418 = 4;
          goto LABEL_902;
        }
        v331 = *(_QWORD *)(a2 + 48);
        v332 = *(_QWORD *)(a2 + 56) + 24 * v330;
        v333 = *(unsigned __int8 *)(v332 - 24);
        v334 = *(JSC::B3::Procedure **)(v332 - 8);
        *(_DWORD *)(a2 + 68) = v330 - 1;
        *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
        DWORD2(v1522) = 21;
        LODWORD(v1530) = 920;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1526);
        v342 = v1526;
        if (!v1526)
        {
          __break(0xC471u);
          JUMPOUT(0x198E071C0);
        }
        v343 = *(_DWORD *)(v331 + 512);
        if (!v343)
        {
          __break(0xC471u);
          JUMPOUT(0x198E071C8);
        }
        *(_DWORD *)(v331 + 512) = v343 - 1;
        v1526 = 0;
        if (*(_DWORD *)v342 == 2)
        {
          WTF::StringImpl::~StringImpl(v342, v335, v336, v337, v338, v339, v340, v341);
          WTF::fastFree(v1078, v1079, v1080, v1081, v1082, v1083, v1084, v1085);
        }
        else
        {
          *(_DWORD *)v342 -= 2;
        }
        v1464 = v334;
        v344 = *(_DWORD *)(v8 + 68);
        if (!v344)
        {
          v1416 = "lhs";
          goto LABEL_957;
        }
        v345 = *(_QWORD *)(v8 + 48);
        v346 = *(_QWORD *)(v8 + 56) + 24 * v344;
        v347 = *(unsigned __int8 *)(v346 - 24);
        v348 = *(_QWORD *)(v346 - 8);
        *(_DWORD *)(v8 + 68) = v344 - 1;
        *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
        DWORD2(v1522) = 21;
        LODWORD(v1530) = 921;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1525);
        v356 = v1525;
        if (!v1525)
        {
          __break(0xC471u);
          JUMPOUT(0x198E071D0);
        }
        v357 = *(_DWORD *)(v345 + 512);
        if (!v357)
        {
          __break(0xC471u);
          JUMPOUT(0x198E071D8);
        }
        *(_DWORD *)(v345 + 512) = v357 - 1;
        v1525 = 0;
        if (*(_DWORD *)v356 == 2)
        {
          WTF::StringImpl::~StringImpl(v356, v349, v350, v351, v352, v353, v354, v355);
          WTF::fastFree(v1110, v1111, v1112, v1113, v1114, v1115, v1116, v1117);
        }
        else
        {
          *(_DWORD *)v356 -= 2;
        }
        if (v347 != 251)
        {
          v1267 = "extmul lhs vector must be v128";
LABEL_964:
          v1268 = 31;
LABEL_907:
          *(_QWORD *)&v1522 = v1267;
          *((_QWORD *)&v1522 + 1) = v1268;
          JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v1530, (uint64_t)&v1522, v44, a8);
          goto LABEL_930;
        }
        v1487 = v9;
        if (v333 != 251)
        {
          v1419 = "extmul rhs vector must be v128";
          v1420 = 31;
          goto LABEL_911;
        }
        v1530 = 0;
        v358 = *(_QWORD **)(v8 + 48);
        if (a3 == 51)
          v359 = -122;
        else
          v359 = -121;
        v360 = v358[11];
        v361 = (JSC::B3::Value *)v358[7];
        if (*v358)
          v362 = *(_QWORD *)(*v358 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v358 + 14992) << 32);
        else
          v362 = 0;
        v1478 = a4 & 0x3F | (a5 << 6);
        v363 = WTF::fastMalloc((WTF *)0x30);
        v364 = *(_DWORD *)(v348 + 4);
        *(_DWORD *)(v363 + 8) = -1;
        *(_WORD *)(v363 + 12) = 10;
        *(_DWORD *)(v363 + 16) = v364;
        *(_BYTE *)(v363 + 20) = 0;
        *(_QWORD *)(v363 + 24) = v362;
        *(_QWORD *)(v363 + 32) = 0;
        *(_QWORD *)v363 = off_1E357F0F8;
        *(_QWORD *)(v363 + 40) = v348;
        JSC::B3::Procedure::addValueImpl(v361, (JSC::B3::Value *)v363);
        *(_QWORD *)&v1522 = v363;
        v365 = (_QWORD *)(v360 + 8);
        v366 = *(unsigned int *)(v360 + 20);
        if ((_DWORD)v366 == *(_DWORD *)(v360 + 16))
        {
          v1039 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v360 + 8), v366 + 1, (unint64_t)&v1522);
          v366 = *(unsigned int *)(v360 + 20);
          *(_QWORD *)(*(_QWORD *)(v360 + 8) + 8 * v366) = *(_QWORD *)v1039;
          v367 = v1522;
        }
        else
        {
          *(_QWORD *)(*v365 + 8 * v366) = v363;
          v367 = v363;
        }
        *(_DWORD *)(v360 + 20) = v366 + 1;
        *(_QWORD *)(v367 + 32) = v360;
        v368 = (JSC::B3::Value *)JSC::B3::Value::allocateSpace(v359, 48);
        v369 = JSC::B3::Value::Value<>((uint64_t)v368, 0, v359, 5, 1, v362, v363);
        *(_QWORD *)v369 = off_1E357EA50;
        *(_BYTE *)(v369 + 40) = v1478;
        *(_BYTE *)(v369 + 41) = 0;
        JSC::B3::Procedure::addValueImpl(v361, v368);
        *(_QWORD *)&v1522 = v368;
        v370 = *(unsigned int *)(v360 + 20);
        if ((_DWORD)v370 == *(_DWORD *)(v360 + 16))
        {
          v1040 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v360 + 8), v370 + 1, (unint64_t)&v1522);
          v370 = *(unsigned int *)(v360 + 20);
          *(_QWORD *)(*(_QWORD *)(v360 + 8) + 8 * v370) = *(_QWORD *)v1040;
          v371 = v1522;
        }
        else
        {
          *(_QWORD *)(*v365 + 8 * v370) = v368;
          v371 = (uint64_t)v368;
        }
        *(_DWORD *)(v360 + 20) = v370 + 1;
        *(_QWORD *)(v371 + 32) = v360;
        v372 = v358[11];
        v373 = (JSC::B3::Value *)v358[7];
        if (*v358)
          v374 = *(_QWORD *)(*v358 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v358 + 14992) << 32);
        else
          v374 = 0;
        v375 = WTF::fastMalloc((WTF *)0x30);
        v376 = *((_DWORD *)v1464 + 1);
        *(_DWORD *)(v375 + 8) = -1;
        *(_WORD *)(v375 + 12) = 10;
        *(_DWORD *)(v375 + 16) = v376;
        *(_BYTE *)(v375 + 20) = 0;
        *(_QWORD *)(v375 + 24) = v374;
        *(_QWORD *)(v375 + 32) = 0;
        *(_QWORD *)v375 = off_1E357F0F8;
        *(_QWORD *)(v375 + 40) = v1464;
        JSC::B3::Procedure::addValueImpl(v373, (JSC::B3::Value *)v375);
        *(_QWORD *)&v1522 = v375;
        v377 = (_QWORD *)(v372 + 8);
        v378 = *(unsigned int *)(v372 + 20);
        if ((_DWORD)v378 == *(_DWORD *)(v372 + 16))
        {
          v1041 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v372 + 8), v378 + 1, (unint64_t)&v1522);
          v378 = *(unsigned int *)(v372 + 20);
          *(_QWORD *)(*(_QWORD *)(v372 + 8) + 8 * v378) = *(_QWORD *)v1041;
          v379 = v1522;
        }
        else
        {
          *(_QWORD *)(*v377 + 8 * v378) = v375;
          v379 = v375;
        }
        *(_DWORD *)(v372 + 20) = v378 + 1;
        *(_QWORD *)(v379 + 32) = v372;
        v380 = (JSC::B3::Value *)JSC::B3::Value::allocateSpace(v359, 48);
        v381 = JSC::B3::Value::Value<>((uint64_t)v380, 0, v359, 5, 1, v374, v375);
        *(_QWORD *)v381 = off_1E357EA50;
        *(_BYTE *)(v381 + 40) = v1478;
        *(_BYTE *)(v381 + 41) = 0;
        JSC::B3::Procedure::addValueImpl(v373, v380);
        *(_QWORD *)&v1522 = v380;
        v382 = *(unsigned int *)(v372 + 20);
        if ((_DWORD)v382 == *(_DWORD *)(v372 + 16))
        {
          v1042 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v372 + 8), v382 + 1, (unint64_t)&v1522);
          v382 = *(unsigned int *)(v372 + 20);
          *(_QWORD *)(*(_QWORD *)(v372 + 8) + 8 * v382) = *(_QWORD *)v1042;
          v383 = v1522;
        }
        else
        {
          *(_QWORD *)(*v377 + 8 * v382) = v380;
          v383 = (uint64_t)v380;
        }
        v229 = v1487;
        v230 = a2;
        *(_DWORD *)(v372 + 20) = v382 + 1;
        *(_QWORD *)(v383 + 32) = v372;
        v384 = v358[11];
        v385 = (JSC::B3::Value *)v358[7];
        if (*v358)
          v386 = *(_QWORD *)(*v358 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v358 + 14992) << 32);
        else
          v386 = 0;
        v387 = WTF::fastMalloc((WTF *)0x40);
        *(_QWORD *)v387 = off_1E357F5F0;
        *(_DWORD *)(v387 + 8) = -1;
        *(_WORD *)(v387 + 12) = 108;
        *(_DWORD *)(v387 + 16) = 5;
        *(_BYTE *)(v387 + 20) = 2;
        *(_QWORD *)(v387 + 24) = v386;
        *(_QWORD *)(v387 + 32) = 0;
        JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v387, 2, (uint64_t)v368, (uint64_t)v380);
        *(_QWORD *)v387 = off_1E357EA50;
        *(_BYTE *)(v387 + 40) = v1478;
        *(_BYTE *)(v387 + 41) = 0;
        JSC::B3::Procedure::addValueImpl(v385, (JSC::B3::Value *)v387);
        *(_QWORD *)&v1522 = v387;
        v388 = (char **)(v384 + 8);
        v389 = *(unsigned int *)(v384 + 20);
        if ((_DWORD)v389 == *(_DWORD *)(v384 + 16))
        {
          v1043 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v388, v389 + 1, (unint64_t)&v1522);
          v389 = *(unsigned int *)(v384 + 20);
          *(_QWORD *)(*(_QWORD *)(v384 + 8) + 8 * v389) = *(_QWORD *)v1043;
          v390 = v1522;
        }
        else
        {
          *(_QWORD *)&(*v388)[8 * v389] = v387;
          v390 = v387;
        }
        *(_DWORD *)(v384 + 20) = v389 + 1;
        *(_QWORD *)(v390 + 32) = v384;
        v391 = (void (**)(WTF::StringPrintStream *__hidden))JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)v358, *(_DWORD *)(v387 + 16));
        v392 = v358[11];
        v393 = (JSC::B3::Value *)v358[7];
        if (*v358)
          v394 = *(_QWORD *)(*v358 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v358 + 14992) << 32);
        else
          v394 = 0;
        v395 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v395 + 8) = -1;
        *(_WORD *)(v395 + 12) = 9;
        *(_DWORD *)(v395 + 16) = 0;
        *(_BYTE *)(v395 + 20) = 1;
        *(_QWORD *)(v395 + 24) = v394;
        *(_QWORD *)(v395 + 32) = 0;
        *(_QWORD *)v395 = off_1E357F0F8;
        *(_QWORD *)(v395 + 40) = v391;
        *(_QWORD *)(v395 + 48) = v387;
        JSC::B3::Procedure::addValueImpl(v393, (JSC::B3::Value *)v395);
        *(_QWORD *)&v1522 = v395;
        v401 = (char **)(v392 + 8);
        v402 = *(unsigned int *)(v392 + 20);
        if ((_DWORD)v402 == *(_DWORD *)(v392 + 16))
        {
          v1044 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v401, v402 + 1, (unint64_t)&v1522);
          v402 = *(unsigned int *)(v392 + 20);
          *(_QWORD *)(*(_QWORD *)(v392 + 8) + 8 * v402) = *(_QWORD *)v1044;
          v395 = v1522;
        }
        else
        {
          *(_QWORD *)&(*v401)[8 * v402] = v395;
        }
        *(_DWORD *)(v392 + 20) = v402 + 1;
        *(_QWORD *)(v395 + 32) = v392;
        v1530 = v391;
        v403 = *(_DWORD *)(a2 + 68);
        if (v403 != *(_DWORD *)(a2 + 64))
        {
          v404 = *(_QWORD *)(a2 + 56) + 24 * v403;
          *(_OWORD *)v404 = xmmword_19915A170;
          *(_QWORD *)(v404 + 16) = v391;
          goto LABEL_633;
        }
LABEL_558:
        v861 = v230 + 56;
        v862 = (uint64_t *)&v1530;
LABEL_559:
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::B3::Variable *>(v861, &JSC::Wasm::Types::V128, v862, v396, v397, v398, v399, v400);
LABEL_634:
        *v229 = 0;
        v229[8] = 0;
        return;
      case 12:
        v482 = *(_DWORD *)(a2 + 68);
        if (!v482)
        {
          v1416 = "select condition";
          v1417 = (unint64_t *)a2;
          v1418 = 17;
          goto LABEL_902;
        }
        v483 = *(_QWORD *)(a2 + 48);
        v484 = *(_QWORD *)(a2 + 56) + 24 * v482;
        v485 = *(unsigned __int8 *)(v484 - 24);
        v486 = *(_QWORD *)(v484 - 8);
        *(_DWORD *)(a2 + 68) = v482 - 1;
        *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
        DWORD2(v1522) = 21;
        LODWORD(v1530) = 862;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1529);
        v494 = v1529;
        if (!v1529)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07210);
        }
        v495 = *(_DWORD *)(v483 + 512);
        if (!v495)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07218);
        }
        *(_DWORD *)(v483 + 512) = v495 - 1;
        v1529 = 0;
        if (*(_DWORD *)v494 == 2)
        {
          WTF::StringImpl::~StringImpl(v494, v487, v488, v489, v490, v491, v492, v493);
          WTF::fastFree(v1277, v1278, v1279, v1280, v1281, v1282, v1283, v1284);
        }
        else
        {
          *(_DWORD *)v494 -= 2;
        }
        switch(a4)
        {
          case 1:
          case 2:
          case 3:
            if (v485 == 255)
              goto LABEL_297;
            goto LABEL_814;
          case 4:
            if (v485 != 254)
              goto LABEL_814;
            goto LABEL_297;
          case 5:
            if (v485 != 253)
              goto LABEL_814;
            goto LABEL_297;
          case 6:
            if (v485 != 252)
            {
LABEL_814:
              v1267 = "Wrong type to SIMD splat";
              v1268 = 25;
              goto LABEL_907;
            }
LABEL_297:
            v1530 = 0;
            v496 = *(_QWORD **)(v8 + 48);
            v497 = v496[11];
            v498 = (JSC::B3::Value *)v496[7];
            if (*v496)
              v499 = *(_QWORD *)(*v496 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v496 + 14992) << 32);
            else
              v499 = 0;
            v500 = WTF::fastMalloc((WTF *)0x30);
            v501 = *(_DWORD *)(v486 + 4);
            *(_DWORD *)(v500 + 8) = -1;
            *(_WORD *)(v500 + 12) = 10;
            *(_DWORD *)(v500 + 16) = v501;
            *(_BYTE *)(v500 + 20) = 0;
            *(_QWORD *)(v500 + 24) = v499;
            *(_QWORD *)(v500 + 32) = 0;
            *(_QWORD *)v500 = off_1E357F0F8;
            *(_QWORD *)(v500 + 40) = v486;
            JSC::B3::Procedure::addValueImpl(v498, (JSC::B3::Value *)v500);
            *(_QWORD *)&v1522 = v500;
            v502 = (char **)(v497 + 8);
            v503 = *(unsigned int *)(v497 + 20);
            if ((_DWORD)v503 == *(_DWORD *)(v497 + 16))
            {
              v1137 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v502, v503 + 1, (unint64_t)&v1522);
              v503 = *(unsigned int *)(v497 + 20);
              *(_QWORD *)(*(_QWORD *)(v497 + 8) + 8 * v503) = *(_QWORD *)v1137;
              v504 = v1522;
            }
            else
            {
              *(_QWORD *)&(*v502)[8 * v503] = v500;
              v504 = v500;
            }
            *(_DWORD *)(v497 + 20) = v503 + 1;
            *(_QWORD *)(v504 + 32) = v497;
            v505 = v496[11];
            v506 = (JSC::B3::Value *)v496[7];
            if (*v496)
              v507 = *(_QWORD *)(*v496 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v496 + 14992) << 32);
            else
              v507 = 0;
            v508 = WTF::fastMalloc((WTF *)0x38);
            *(_DWORD *)(v508 + 8) = -1;
            *(_WORD *)(v508 + 12) = 93;
            *(_DWORD *)(v508 + 16) = 5;
            *(_BYTE *)(v508 + 20) = 1;
            *(_QWORD *)(v508 + 24) = v507;
            *(_QWORD *)(v508 + 32) = 0;
            *(_QWORD *)(v508 + 48) = v500;
            *(_QWORD *)v508 = off_1E357EA50;
            *(_BYTE *)(v508 + 40) = a4;
            *(_BYTE *)(v508 + 41) = 0;
            JSC::B3::Procedure::addValueImpl(v506, (JSC::B3::Value *)v508);
            *(_QWORD *)&v1522 = v508;
            v509 = (char **)(v505 + 8);
            v510 = *(unsigned int *)(v505 + 20);
            if ((_DWORD)v510 == *(_DWORD *)(v505 + 16))
            {
              v1138 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v509, v510 + 1, (unint64_t)&v1522);
              v510 = *(unsigned int *)(v505 + 20);
              *(_QWORD *)(*(_QWORD *)(v505 + 8) + 8 * v510) = *(_QWORD *)v1138;
              v511 = v1522;
            }
            else
            {
              *(_QWORD *)&(*v509)[8 * v510] = v508;
              v511 = v508;
            }
            *(_DWORD *)(v505 + 20) = v510 + 1;
            *(_QWORD *)(v511 + 32) = v505;
            v512 = (void (**)(WTF::StringPrintStream *__hidden))JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)v496, *(_DWORD *)(v508 + 16));
            v513 = v496[11];
            v514 = (JSC::B3::Value *)v496[7];
            if (*v496)
              v515 = *(_QWORD *)(*v496 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v496 + 14992) << 32);
            else
              v515 = 0;
            v516 = WTF::fastMalloc((WTF *)0x38);
            *(_DWORD *)(v516 + 8) = -1;
            *(_WORD *)(v516 + 12) = 9;
            *(_DWORD *)(v516 + 16) = 0;
            *(_BYTE *)(v516 + 20) = 1;
            *(_QWORD *)(v516 + 24) = v515;
            *(_QWORD *)(v516 + 32) = 0;
            *(_QWORD *)v516 = off_1E357F0F8;
            *(_QWORD *)(v516 + 40) = v512;
            *(_QWORD *)(v516 + 48) = v508;
            JSC::B3::Procedure::addValueImpl(v514, (JSC::B3::Value *)v516);
            *(_QWORD *)&v1522 = v516;
            v517 = (char **)(v513 + 8);
            v518 = *(unsigned int *)(v513 + 20);
            if ((_DWORD)v518 == *(_DWORD *)(v513 + 16))
            {
              v1139 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v517, v518 + 1, (unint64_t)&v1522);
              v518 = *(unsigned int *)(v513 + 20);
              *(_QWORD *)(*(_QWORD *)(v513 + 8) + 8 * v518) = *(_QWORD *)v1139;
              v516 = v1522;
            }
            else
            {
              *(_QWORD *)&(*v517)[8 * v518] = v516;
            }
            *(_DWORD *)(v513 + 20) = v518 + 1;
            *(_QWORD *)(v516 + 32) = v513;
            v1530 = v512;
            v519 = *(_DWORD *)(v8 + 68);
            if (v519 == *(_DWORD *)(v8 + 64))
            {
              v329 = v8 + 56;
              goto LABEL_311;
            }
            v1022 = *(_QWORD *)(v8 + 56) + 24 * v519;
            *(_OWORD *)v1022 = xmmword_19915A170;
            *(_QWORD *)(v1022 + 16) = v512;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198E07068);
        }
        goto LABEL_671;
      case 13:
      case 14:
      case 27:
      case 37:
      case 50:
      case 61:
        v1524 = 0;
        v1522 = JSC::Wasm::Types::Void;
        JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v1530, a3, a2, &v1524, (uint64_t)&v1522, *(double *)&JSC::Wasm::Types::Void, a8);
        if ((_BYTE)v1531)
          goto LABEL_930;
        v1521 = 0;
        v68 = *(JSC::Wasm::OMGIRGenerator **)(v8 + 48);
        v69 = v1523;
        v70 = v1524;
        v1489 = v9;
        if (a3 > 36)
        {
          switch(a3)
          {
            case '%':
              v71 = 4;
              break;
            case '=':
              v71 = 3;
              break;
            case '2':
              v71 = 2;
              goto LABEL_401;
            default:
LABEL_1065:
              __break(0xC471u);
              JUMPOUT(0x198E07008);
          }
        }
        else
        {
          if (a3 == 13)
          {
            v71 = 3;
            goto LABEL_401;
          }
          if (a3 != 14)
          {
            if (a3 == 27)
            {
              v71 = 4;
LABEL_401:
              v660 = 64;
              goto LABEL_404;
            }
            goto LABEL_1065;
          }
          v71 = 2;
        }
        v660 = 0x80;
LABEL_404:
        v661 = *((_QWORD *)v68 + 11);
        v662 = (JSC::B3::Value *)*((_QWORD *)v68 + 7);
        if (*(_QWORD *)v68)
          v663 = *(_QWORD *)(*(_QWORD *)v68 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v68 + 14992) << 32);
        else
          v663 = 0;
        v664 = WTF::fastMalloc((WTF *)0x30);
        v665 = *(_DWORD *)(v69 + 4);
        *(_DWORD *)(v664 + 8) = -1;
        *(_WORD *)(v664 + 12) = 10;
        *(_DWORD *)(v664 + 16) = v665;
        *(_BYTE *)(v664 + 20) = 0;
        *(_QWORD *)(v664 + 24) = v663;
        *(_QWORD *)(v664 + 32) = 0;
        *(_QWORD *)v664 = off_1E357F0F8;
        *(_QWORD *)(v664 + 40) = v69;
        JSC::B3::Procedure::addValueImpl(v662, (JSC::B3::Value *)v664);
        v1530 = (void (**)(WTF::StringPrintStream *__hidden))v664;
        v666 = (char **)(v661 + 8);
        v667 = *(unsigned int *)(v661 + 20);
        if ((_DWORD)v667 == *(_DWORD *)(v661 + 16))
        {
          v709 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v666, v667 + 1, (unint64_t)&v1530);
          v667 = *(unsigned int *)(v661 + 20);
          *(_QWORD *)(*(_QWORD *)(v661 + 8) + 8 * v667) = *(_QWORD *)v709;
          v668 = v1530;
        }
        else
        {
          *(_QWORD *)&(*v666)[8 * v667] = v664;
          v668 = (void (**)(WTF::StringPrintStream *__hidden))v664;
        }
        *(_DWORD *)(v661 + 20) = v667 + 1;
        v668[4] = (void (*)(WTF::StringPrintStream *__hidden))v661;
        v1532[0] = (JSC::B3::Value *)JSC::Wasm::OMGIRGenerator::emitCheckAndPreparePointer(v68, (JSC::B3::Value *)v664, v70, 8);
        v669 = JSC::Wasm::OMGIRGenerator::fixupPointerPlusOffset(v68, v1532, v70);
        if (*((_BYTE *)v68 + 32) == 1 || *(_BYTE *)(*((_QWORD *)v68 + 2) + 112))
          v670 = 579;
        else
          v670 = 67;
        v671 = *((_QWORD *)v68 + 11);
        v672 = (JSC::B3::Value *)*((_QWORD *)v68 + 7);
        if (*(_QWORD *)v68)
          v673 = *(_QWORD *)(*(_QWORD *)v68 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v68 + 14992) << 32);
        else
          v673 = 0;
        v674 = v1532[0];
        v675 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
        if (v675)
        {
          v676 = (_BYTE *)(v675 + 9040);
          *(_BYTE *)(v675 + 9040) = 1;
          v677 = *(unsigned int *)(v675 + 9056);
          if ((_DWORD)v677)
          {
            *(_DWORD *)(v675 + 9056) = v677 - *(_DWORD *)(v675 + 9060);
            casual = *(_QWORD *)(v675 + 9048) - v677;
LABEL_417:
            *v676 = 0;
            goto LABEL_418;
          }
          v679 = *(_QWORD *)(v675 + 9080);
          v680 = *(_QWORD *)(v675 + 9064);
          if (v679)
          {
LABEL_416:
            v681 = __clz(v679);
            *(_QWORD *)(v675 + 9080) = v679 & ~(0x8000000000000000 >> v681);
            casual = v680 + 16 * v681;
            goto LABEL_417;
          }
          if (*(_BYTE *)(v675 + 9045) == 6)
          {
            v1427 = *(_DWORD *)(v675 + 9076);
            v1428 = *(unsigned int *)(v675 + 9072);
            if (v1428 < v1427)
            {
              *(_QWORD *)&v676[8 * v1428 + 56] = 0;
              v1429 = (unint64_t *)(v675 + 8 * v1428 + 9104);
              v1430 = v1427 - 1 - v1428;
              while (v1430)
              {
                v680 += 1024;
                v1432 = *v1429++;
                v1431 = v1432;
                LODWORD(v1428) = v1428 + 1;
                --v1430;
                if (v1432)
                {
                  v679 = __rbit64(v1431);
                  *(_DWORD *)(v675 + 9072) = v1428;
                  *(_QWORD *)(v675 + 9064) = v680;
                  goto LABEL_416;
                }
              }
              *(_DWORD *)(v675 + 9072) = v1427;
            }
          }
          *v676 = 0;
        }
        casual = bmalloc_allocate_casual(72, 1);
LABEL_418:
        JSC::B3::Value::Value<>(casual, 0, v670, 4, 1, v673, (uint64_t)v674);
        *(_QWORD *)casual = off_1E357E4C8;
        *(_DWORD *)(casual + 40) = v669;
        *(_OWORD *)(casual + 44) = xmmword_19914F690;
        JSC::B3::Procedure::addValueImpl(v672, (JSC::B3::Value *)casual);
        v1530 = (void (**)(WTF::StringPrintStream *__hidden))casual;
        v682 = (char **)(v671 + 8);
        v683 = *(unsigned int *)(v671 + 20);
        if ((_DWORD)v683 == *(_DWORD *)(v671 + 16))
        {
          v710 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v682, v683 + 1, (unint64_t)&v1530);
          v683 = *(unsigned int *)(v671 + 20);
          *(_QWORD *)(*(_QWORD *)(v671 + 8) + 8 * v683) = *(_QWORD *)v710;
          v684 = v1530;
        }
        else
        {
          *(_QWORD *)&(*v682)[8 * v683] = casual;
          v684 = (void (**)(WTF::StringPrintStream *__hidden))casual;
        }
        *(_DWORD *)(v671 + 20) = v683 + 1;
        v684[4] = (void (*)(WTF::StringPrintStream *__hidden))v671;
        v685 = *((_QWORD *)v68 + 11);
        v686 = (JSC::B3::Value *)*((_QWORD *)v68 + 7);
        if (*(_QWORD *)v68)
          v687 = *(_QWORD *)(*(_QWORD *)v68 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v68 + 14992) << 32);
        else
          v687 = 0;
        v688 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v688 + 8) = -1;
        *(_WORD *)(v688 + 12) = 134;
        *(_DWORD *)(v688 + 16) = 5;
        *(_BYTE *)(v688 + 20) = 1;
        *(_QWORD *)(v688 + 24) = v687;
        *(_QWORD *)(v688 + 32) = 0;
        *(_QWORD *)(v688 + 48) = casual;
        *(_QWORD *)v688 = off_1E357EA50;
        *(_BYTE *)(v688 + 40) = v71 | v660;
        *(_BYTE *)(v688 + 41) = 0;
        JSC::B3::Procedure::addValueImpl(v686, (JSC::B3::Value *)v688);
        v1530 = (void (**)(WTF::StringPrintStream *__hidden))v688;
        v689 = (char **)(v685 + 8);
        v690 = *(unsigned int *)(v685 + 20);
        if ((_DWORD)v690 == *(_DWORD *)(v685 + 16))
        {
          v711 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v689, v690 + 1, (unint64_t)&v1530);
          v690 = *(unsigned int *)(v685 + 20);
          *(_QWORD *)(*(_QWORD *)(v685 + 8) + 8 * v690) = *(_QWORD *)v711;
          v691 = v1530;
        }
        else
        {
          *(_QWORD *)&(*v689)[8 * v690] = v688;
          v691 = (void (**)(WTF::StringPrintStream *__hidden))v688;
        }
        v692 = v1489;
        *(_DWORD *)(v685 + 20) = v690 + 1;
        v691[4] = (void (*)(WTF::StringPrintStream *__hidden))v685;
        v693 = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)v68, *(_DWORD *)(v688 + 16));
        v694 = *((_QWORD *)v68 + 11);
        v695 = (JSC::B3::Value *)*((_QWORD *)v68 + 7);
        if (*(_QWORD *)v68)
          v696 = *(_QWORD *)(*(_QWORD *)v68 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v68 + 14992) << 32);
        else
          v696 = 0;
        v697 = (void (**)(WTF::StringPrintStream *__hidden))WTF::fastMalloc((WTF *)0x38);
        *((_DWORD *)v697 + 2) = -1;
        *((_WORD *)v697 + 6) = 9;
        *((_DWORD *)v697 + 4) = 0;
        *((_BYTE *)v697 + 20) = 1;
        v697[3] = (void (*)(WTF::StringPrintStream *__hidden))v696;
        v697[4] = 0;
        *v697 = (void (*)(WTF::StringPrintStream *__hidden))off_1E357F0F8;
        v697[5] = (void (*)(WTF::StringPrintStream *__hidden))v693;
        v697[6] = (void (*)(WTF::StringPrintStream *__hidden))v688;
        JSC::B3::Procedure::addValueImpl(v695, (JSC::B3::Value *)v697);
        v1530 = v697;
        v703 = (char **)(v694 + 8);
        v704 = *(unsigned int *)(v694 + 20);
        if ((_DWORD)v704 == *(_DWORD *)(v694 + 16))
        {
          v712 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v703, v704 + 1, (unint64_t)&v1530);
          v704 = *(unsigned int *)(v694 + 20);
          *(_QWORD *)(*(_QWORD *)(v694 + 8) + 8 * v704) = *(_QWORD *)v712;
          v697 = v1530;
        }
        else
        {
          *(_QWORD *)&(*v703)[8 * v704] = v697;
        }
        *(_DWORD *)(v694 + 20) = v704 + 1;
        v697[4] = (void (*)(WTF::StringPrintStream *__hidden))v694;
        v1521 = v693;
        v705 = *(_DWORD *)(a2 + 68);
        if (v705 == *(_DWORD *)(a2 + 64))
        {
          v706 = a2 + 56;
          v707 = (uint64_t *)&v1521;
LABEL_430:
          WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::B3::Variable *>(v706, &JSC::Wasm::Types::V128, v707, v698, v699, v700, v701, v702);
        }
        else
        {
          v708 = *(_QWORD *)(a2 + 56) + 24 * v705;
          *(_OWORD *)v708 = xmmword_19915A170;
          *(_QWORD *)(v708 + 16) = v693;
          ++*(_DWORD *)(a2 + 68);
        }
LABEL_432:
        *v692 = 0;
        v692[8] = 0;
        return;
      case 17:
      case 68:
        v177 = *(_DWORD *)(a2 + 68);
        if (!v177)
        {
          v1416 = "shift i32";
          v1417 = (unint64_t *)a2;
          v1418 = 10;
          goto LABEL_902;
        }
        v178 = *(_QWORD *)(a2 + 48);
        v179 = *(_QWORD *)(a2 + 56) + 24 * v177;
        v180 = *(unsigned __int8 *)(v179 - 24);
        v181 = *(JSC::B3::Procedure **)(v179 - 8);
        *(_DWORD *)(a2 + 68) = v177 - 1;
        *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
        DWORD2(v1522) = 21;
        LODWORD(v1530) = 899;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1528);
        v190 = v1528;
        if (!v1528)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07170);
        }
        v191 = *(_DWORD *)(v178 + 512);
        if (!v191)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07178);
        }
        *(_DWORD *)(v178 + 512) = v191 - 1;
        v1528 = 0;
        if (*(_DWORD *)v190 == 2)
        {
          WTF::StringImpl::~StringImpl(v190, v182, v183, v184, v185, v186, v187, v188);
          WTF::fastFree(v1062, v1063, v1064, v1065, v1066, v1067, v1068, v1069);
        }
        else
        {
          *(_DWORD *)v190 -= 2;
        }
        v1487 = v9;
        v192 = *(_DWORD *)(v8 + 68);
        if (!v192)
        {
          v1425 = "shift vector";
          v557 = (unint64_t *)v8;
          v1426 = 13;
          goto LABEL_942;
        }
        v193 = *(_QWORD *)(v8 + 48);
        v194 = *(_QWORD *)(v8 + 56) + 24 * v192;
        v195 = *(unsigned __int8 *)(v194 - 24);
        v196 = *(_QWORD *)(v194 - 8);
        *(_DWORD *)(v8 + 68) = v192 - 1;
        *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
        DWORD2(v1522) = 21;
        LODWORD(v1530) = 900;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1527);
        v204 = v1527;
        if (!v1527)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07180);
        }
        v205 = *(_DWORD *)(v193 + 512);
        if (!v205)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07188);
        }
        *(_DWORD *)(v193 + 512) = v205 - 1;
        v1527 = 0;
        if (*(_DWORD *)v204 == 2)
        {
          WTF::StringImpl::~StringImpl(v204, v197, v198, v199, v200, v201, v202, v203);
          WTF::fastFree(v1094, v1095, v1096, v1097, v1098, v1099, v1100, v1101);
        }
        else
        {
          *(_DWORD *)v204 -= 2;
        }
        if (v195 != 251)
        {
          v1419 = "Shift vector must be v128";
          v1420 = 26;
          goto LABEL_911;
        }
        if (v180 != 255)
        {
          v1419 = "Shift amount must be i32";
          v1420 = 25;
          goto LABEL_911;
        }
        v1530 = 0;
        v47 = *(_QWORD **)(v8 + 48);
        v206 = v47[11];
        v207 = (JSC::B3::Value *)v47[7];
        v1475 = v181;
        if (*v47)
          v208 = *(_QWORD *)(*v47 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v47 + 14992) << 32);
        else
          v208 = 0;
        if (a3 == 68)
          v209 = 122;
        else
          v209 = 121;
        v1453 = v209;
        v210 = WTF::fastMalloc((WTF *)0x30);
        v211 = *(_DWORD *)(v196 + 4);
        *(_DWORD *)(v210 + 8) = -1;
        *(_WORD *)(v210 + 12) = 10;
        *(_DWORD *)(v210 + 16) = v211;
        *(_BYTE *)(v210 + 20) = 0;
        *(_QWORD *)(v210 + 24) = v208;
        *(_QWORD *)(v210 + 32) = 0;
        *(_QWORD *)v210 = off_1E357F0F8;
        *(_QWORD *)(v210 + 40) = v196;
        JSC::B3::Procedure::addValueImpl(v207, (JSC::B3::Value *)v210);
        *(_QWORD *)&v1522 = v210;
        v212 = (_QWORD *)(v206 + 8);
        v213 = *(unsigned int *)(v206 + 20);
        v1461 = (JSC::B3::Procedure *)v208;
        if ((_DWORD)v213 == *(_DWORD *)(v206 + 16))
        {
          v1036 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v206 + 8), v213 + 1, (unint64_t)&v1522);
          v213 = *(unsigned int *)(v206 + 20);
          *(_QWORD *)(*(_QWORD *)(v206 + 8) + 8 * v213) = *(_QWORD *)v1036;
          v214 = v1522;
        }
        else
        {
          *(_QWORD *)(*v212 + 8 * v213) = v210;
          v214 = v210;
        }
        v215 = v207;
        v216 = a4 & 0x3F;
        *(_DWORD *)(v206 + 20) = v213 + 1;
        *(_QWORD *)(v214 + 32) = v206;
        v217 = v47[11];
        v218 = (JSC::B3::Value *)v47[7];
        if (*v47)
          v219 = *(_QWORD *)(*v47 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v47 + 14992) << 32);
        else
          v219 = 0;
        v220 = v216 | (a5 << 6);
        v221 = WTF::fastMalloc((WTF *)0x30);
        v222 = *((_DWORD *)v1475 + 1);
        *(_DWORD *)(v221 + 8) = -1;
        *(_WORD *)(v221 + 12) = 10;
        *(_DWORD *)(v221 + 16) = v222;
        *(_BYTE *)(v221 + 20) = 0;
        *(_QWORD *)(v221 + 24) = v219;
        *(_QWORD *)(v221 + 32) = 0;
        *(_QWORD *)v221 = off_1E357F0F8;
        *(_QWORD *)(v221 + 40) = v1475;
        JSC::B3::Procedure::addValueImpl(v218, (JSC::B3::Value *)v221);
        *(_QWORD *)&v1522 = v221;
        v223 = (char **)(v217 + 8);
        v224 = *(unsigned int *)(v217 + 20);
        if ((_DWORD)v224 == *(_DWORD *)(v217 + 16))
        {
          v1037 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v223, v224 + 1, (unint64_t)&v1522);
          v224 = *(unsigned int *)(v217 + 20);
          *(_QWORD *)(*(_QWORD *)(v217 + 8) + 8 * v224) = *(_QWORD *)v1037;
          v225 = v1522;
        }
        else
        {
          *(_QWORD *)&(*v223)[8 * v224] = v221;
          v225 = v221;
        }
        *(_DWORD *)(v217 + 20) = v224 + 1;
        *(_QWORD *)(v225 + 32) = v217;
        v226 = JSC::B3::Value::allocateSpace(v1453, 48);
        *(_QWORD *)v226 = off_1E357F5F0;
        *(_DWORD *)(v226 + 8) = -1;
        *(_WORD *)(v226 + 12) = v1453;
        *(_DWORD *)(v226 + 16) = 5;
        *(_BYTE *)(v226 + 20) = 2;
        *(_QWORD *)(v226 + 24) = v1461;
        *(_QWORD *)(v226 + 32) = 0;
        JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v226, 2, v210, v221);
        *(_QWORD *)v226 = off_1E357EA50;
        *(_BYTE *)(v226 + 40) = v220;
        *(_BYTE *)(v226 + 41) = 0;
        JSC::B3::Procedure::addValueImpl(v215, (JSC::B3::Value *)v226);
        *(_QWORD *)&v1522 = v226;
        v227 = *(unsigned int *)(v206 + 20);
        if ((_DWORD)v227 == *(_DWORD *)(v206 + 16))
        {
          v1038 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v206 + 8), v227 + 1, (unint64_t)&v1522);
          v227 = *(unsigned int *)(v206 + 20);
          *(_QWORD *)(*(_QWORD *)(v206 + 8) + 8 * v227) = *(_QWORD *)v1038;
          v228 = v1522;
        }
        else
        {
          *(_QWORD *)(*v212 + 8 * v227) = v226;
          v228 = v226;
        }
        v229 = v1487;
        v230 = a2;
        *(_DWORD *)(v206 + 20) = v227 + 1;
        *(_QWORD *)(v228 + 32) = v206;
LABEL_553:
        v853 = (void (**)(WTF::StringPrintStream *__hidden))JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)v47, *(_DWORD *)(v226 + 16));
        v854 = v47[11];
        v855 = (JSC::B3::Value *)v47[7];
        if (*v47)
          v856 = *(_QWORD *)(*v47 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v47 + 14992) << 32);
        else
          v856 = 0;
        v857 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v857 + 8) = -1;
        *(_WORD *)(v857 + 12) = 9;
        *(_DWORD *)(v857 + 16) = 0;
        *(_BYTE *)(v857 + 20) = 1;
        *(_QWORD *)(v857 + 24) = v856;
        *(_QWORD *)(v857 + 32) = 0;
        *(_QWORD *)v857 = off_1E357F0F8;
        *(_QWORD *)(v857 + 40) = v853;
        *(_QWORD *)(v857 + 48) = v226;
        JSC::B3::Procedure::addValueImpl(v855, (JSC::B3::Value *)v857);
        *(_QWORD *)&v1522 = v857;
        v858 = (char **)(v854 + 8);
        v859 = *(unsigned int *)(v854 + 20);
        if ((_DWORD)v859 == *(_DWORD *)(v854 + 16))
        {
          v863 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v858, v859 + 1, (unint64_t)&v1522);
          v859 = *(unsigned int *)(v854 + 20);
          *(_QWORD *)(*(_QWORD *)(v854 + 8) + 8 * v859) = *(_QWORD *)v863;
          v857 = v1522;
        }
        else
        {
          *(_QWORD *)&(*v858)[8 * v859] = v857;
        }
        *(_DWORD *)(v854 + 20) = v859 + 1;
        *(_QWORD *)(v857 + 32) = v854;
        v1530 = v853;
        v860 = *(_DWORD *)(v230 + 68);
        if (v860 == *(_DWORD *)(v230 + 64))
          goto LABEL_558;
        goto LABEL_632;
      case 19:
        v521 = *(_QWORD *)a2 + 16;
        if (*(_QWORD *)(a2 + 16) < v521)
        {
          v522 = "can't parse 128-bit vector constant";
          v523 = (unint64_t *)v8;
          v524 = 36;
          break;
        }
        v993 = (uint64_t *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
        v994 = *v993;
        v995 = v993[1];
        *(_QWORD *)a2 = v521;
        v996 = *(_QWORD **)(a2 + 48);
        v997 = v996[11];
        v998 = (JSC::B3::Value *)v996[7];
        if (*v996)
          v999 = *(_QWORD *)(*v996 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v996 + 14992) << 32);
        else
          v999 = 0;
        v1000 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v1000 + 8) = -1;
        *(_WORD *)(v1000 + 12) = 7;
        *(_DWORD *)(v1000 + 16) = 5;
        *(_BYTE *)(v1000 + 20) = 0;
        *(_QWORD *)(v1000 + 24) = v999;
        *(_QWORD *)(v1000 + 32) = 0;
        *(_QWORD *)v1000 = off_1E357D6F8;
        *(_QWORD *)(v1000 + 40) = v994;
        *(_QWORD *)(v1000 + 48) = v995;
        JSC::B3::Procedure::addValueImpl(v998, (JSC::B3::Value *)v1000);
        *(_QWORD *)&v1522 = v1000;
        v1001 = (char **)(v997 + 8);
        v1002 = *(unsigned int *)(v997 + 20);
        if ((_DWORD)v1002 == *(_DWORD *)(v997 + 16))
        {
          v1333 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1001, v1002 + 1, (unint64_t)&v1522);
          v1002 = *(unsigned int *)(v997 + 20);
          *(_QWORD *)(*(_QWORD *)(v997 + 8) + 8 * v1002) = *(_QWORD *)v1333;
          v1003 = v1522;
        }
        else
        {
          *(_QWORD *)&(*v1001)[8 * v1002] = v1000;
          v1003 = v1000;
        }
        *(_DWORD *)(v997 + 20) = v1002 + 1;
        *(_QWORD *)(v1003 + 32) = v997;
        v1004 = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)v996, *(_DWORD *)(v1000 + 16));
        v1005 = v996[11];
        v1006 = (JSC::B3::Value *)v996[7];
        if (*v996)
          v1007 = *(_QWORD *)(*v996 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v996 + 14992) << 32);
        else
          v1007 = 0;
        v1008 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v1008 + 8) = -1;
        *(_WORD *)(v1008 + 12) = 9;
        *(_DWORD *)(v1008 + 16) = 0;
        *(_BYTE *)(v1008 + 20) = 1;
        *(_QWORD *)(v1008 + 24) = v1007;
        *(_QWORD *)(v1008 + 32) = 0;
        *(_QWORD *)v1008 = off_1E357F0F8;
        *(_QWORD *)(v1008 + 40) = v1004;
        *(_QWORD *)(v1008 + 48) = v1000;
        JSC::B3::Procedure::addValueImpl(v1006, (JSC::B3::Value *)v1008);
        *(_QWORD *)&v1522 = v1008;
        v1014 = (char **)(v1005 + 8);
        v1015 = *(unsigned int *)(v1005 + 20);
        if ((_DWORD)v1015 == *(_DWORD *)(v1005 + 16))
        {
          v1334 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1014, v1015 + 1, (unint64_t)&v1522);
          v1015 = *(unsigned int *)(v1005 + 20);
          *(_QWORD *)(*(_QWORD *)(v1005 + 8) + 8 * v1015) = *(_QWORD *)v1334;
          v1008 = v1522;
        }
        else
        {
          *(_QWORD *)&(*v1014)[8 * v1015] = v1008;
        }
        *(_DWORD *)(v1005 + 20) = v1015 + 1;
        *(_QWORD *)(v1008 + 32) = v1005;
        *(_QWORD *)&v1522 = v1004;
        v1016 = *(_DWORD *)(v8 + 68);
        if (v1016 != *(_DWORD *)(v8 + 64))
        {
          v1017 = *(_QWORD *)(v8 + 56) + 24 * v1016;
          *(_OWORD *)v1017 = xmmword_19915A170;
          *(_QWORD *)(v1017 + 16) = v1004;
          goto LABEL_671;
        }
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::B3::Variable *>(v8 + 56, &JSC::Wasm::Types::V128, (uint64_t *)&v1522, v1009, v1010, v1011, v1012, v1013);
        goto LABEL_672;
      case 22:
      case 33:
        v405 = *(_DWORD *)(a2 + 68);
        if (!v405)
          goto LABEL_900;
        v406 = *(_QWORD *)(a2 + 48);
        v407 = *(_QWORD *)(a2 + 56) + 24 * v405;
        v408 = *(unsigned __int8 *)(v407 - 24);
        v409 = *(JSC::B3::Procedure **)(v407 - 8);
        v1479 = *(JSC::B3::Procedure **)(v407 - 16);
        *(_DWORD *)(a2 + 68) = v405 - 1;
        *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
        DWORD2(v1522) = 21;
        LODWORD(v1530) = 1267;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1505);
        v417 = v1505;
        if (!v1505)
        {
          __break(0xC471u);
          JUMPOUT(0x198E071E0);
        }
        v418 = *(_DWORD *)(v406 + 512);
        if (!v418)
        {
          __break(0xC471u);
          JUMPOUT(0x198E071E8);
        }
        *(_DWORD *)(v406 + 512) = v418 - 1;
        v1505 = 0;
        v1465 = v409;
        if (*(_DWORD *)v417 == 2)
        {
          WTF::StringImpl::~StringImpl(v417, v410, v411, v412, v413, v414, v415, v416);
          WTF::fastFree(v1086, v1087, v1088, v1089, v1090, v1091, v1092, v1093);
        }
        else
        {
          *(_DWORD *)v417 -= 2;
        }
        v110 = v9;
        v419 = *(_DWORD *)(v8 + 68);
        if (v419)
        {
          v420 = *(_QWORD *)(v8 + 48);
          v421 = *(_QWORD *)(v8 + 56) + 24 * v419;
          v422 = *(unsigned __int8 *)(v421 - 24);
          v423 = v8;
          v425 = *(_QWORD *)(v421 - 16);
          v424 = *(_QWORD *)(v421 - 8);
          *(_DWORD *)(v423 + 68) = v419 - 1;
          *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
          DWORD2(v1522) = 21;
          LODWORD(v1530) = 1268;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1504);
          v433 = v1504;
          if (!v1504)
          {
            __break(0xC471u);
            JUMPOUT(0x198E071F0);
          }
          v434 = *(_DWORD *)(v420 + 512);
          if (!v434)
          {
            __break(0xC471u);
            JUMPOUT(0x198E071F8);
          }
          *(_DWORD *)(v420 + 512) = v434 - 1;
          v1504 = 0;
          if (*(_DWORD *)v433 == 2)
          {
            WTF::StringImpl::~StringImpl(v433, v426, v427, v428, v429, v430, v431, v432);
            WTF::fastFree(v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125);
          }
          else
          {
            *(_DWORD *)v433 -= 2;
          }
          if (v422 != 251 || v425)
          {
LABEL_916:
            v1423 = "type mismatch for argument 1";
          }
          else
          {
            if (v408 == 251 && !v1479)
            {
              v1530 = 0;
              v129 = a2;
              v130 = *(_QWORD **)(a2 + 48);
              v131 = *a6;
              v132 = a4 & 0x3F | (a5 << 6);
              v133 = v424;
              v134 = (uint64_t)v1465;
LABEL_249:
              JSC::Wasm::OMGIRGenerator::addSIMDRelOp(&v1522, v130, v132, v133, v134, v131, (WTF **)&v1530);
              if (!BYTE8(v1522))
              {
                v440 = *(_DWORD *)(v129 + 68);
                if (v440 == *(_DWORD *)(v129 + 64))
                {
                  WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::B3::Variable *>(v129 + 56, &JSC::Wasm::Types::V128, (uint64_t *)&v1530, v435, v436, v437, v438, v439);
                }
                else
                {
                  v441 = *(_QWORD *)(v129 + 56) + 24 * v440;
                  v442 = v1530;
                  *(_OWORD *)v441 = xmmword_19915A170;
                  *(_QWORD *)(v441 + 16) = v442;
                  ++*(_DWORD *)(v129 + 68);
                }
                *v110 = 0;
                v110[8] = 0;
                return;
              }
              goto LABEL_915;
            }
LABEL_917:
            v1423 = "type mismatch for argument 0";
          }
          *(_QWORD *)&v1522 = v1423;
          *((_QWORD *)&v1522 + 1) = 29;
          JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v1530, (uint64_t)&v1522, v125, v126);
          v1422 = v1530;
          goto LABEL_919;
        }
LABEL_914:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)v8, 26, "vector argument", 16, &v1522, v107);
LABEL_915:
        v1422 = (void (**)(WTF::StringPrintStream *__hidden))v1522;
LABEL_919:
        *(_QWORD *)v110 = v1422;
        v110[8] = 1;
        return;
      case 34:
      case 35:
      case 40:
      case 56:
      case 70:
        v1524 = 0;
        v1522 = JSC::Wasm::Types::Void;
        JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v1530, a3, a2, &v1524, (uint64_t)&v1522, *(double *)&JSC::Wasm::Types::Void, a8);
        if ((_BYTE)v1531)
          goto LABEL_930;
        v1521 = 0;
        v72 = *(JSC::Wasm::OMGIRGenerator **)(v8 + 48);
        v73 = v1523;
        v74 = v1524;
        if (a3 <= 39)
        {
          if (a3 == 34)
          {
            v445 = 1;
            v444 = 63;
            v1480 = 1;
            v443 = 1;
          }
          else
          {
            if (a3 != 35)
              goto LABEL_1055;
            v443 = 4;
            v1480 = 3;
            v444 = 67;
            v445 = 1;
          }
        }
        else
        {
          switch(a3)
          {
            case 'F':
              v443 = 8;
              v1480 = 4;
              v444 = 67;
              v445 = 2;
              break;
            case '8':
              v1480 = 2;
              v444 = 65;
              v445 = 1;
              v443 = 2;
              break;
            case '(':
              v75 = *((_QWORD *)v72 + 11);
              v76 = (JSC::B3::Value *)*((_QWORD *)v72 + 7);
              if (*(_QWORD *)v72)
                v77 = *(_QWORD *)(*(_QWORD *)v72 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v72 + 14992) << 32);
              else
                v77 = 0;
              v78 = WTF::fastMalloc((WTF *)0x30);
              v79 = *(_DWORD *)(v73 + 4);
              *(_DWORD *)(v78 + 8) = -1;
              *(_WORD *)(v78 + 12) = 10;
              *(_DWORD *)(v78 + 16) = v79;
              *(_BYTE *)(v78 + 20) = 0;
              *(_QWORD *)(v78 + 24) = v77;
              *(_QWORD *)(v78 + 32) = 0;
              *(_QWORD *)v78 = off_1E357F0F8;
              *(_QWORD *)(v78 + 40) = v73;
              JSC::B3::Procedure::addValueImpl(v76, (JSC::B3::Value *)v78);
              v1530 = (void (**)(WTF::StringPrintStream *__hidden))v78;
              v80 = (char **)(v75 + 8);
              v81 = *(unsigned int *)(v75 + 20);
              if ((_DWORD)v81 == *(_DWORD *)(v75 + 16))
              {
                v1134 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v80, v81 + 1, (unint64_t)&v1530);
                v81 = *(unsigned int *)(v75 + 20);
                *(_QWORD *)(*(_QWORD *)(v75 + 8) + 8 * v81) = *(_QWORD *)v1134;
                v82 = v1530;
              }
              else
              {
                *(_QWORD *)&(*v80)[8 * v81] = v78;
                v82 = (void (**)(WTF::StringPrintStream *__hidden))v78;
              }
              *(_DWORD *)(v75 + 20) = v81 + 1;
              v82[4] = (void (*)(WTF::StringPrintStream *__hidden))v75;
              v1532[0] = (JSC::B3::Value *)JSC::Wasm::OMGIRGenerator::emitCheckAndPreparePointer(v72, (JSC::B3::Value *)v78, v74, 16);
              v83 = JSC::Wasm::OMGIRGenerator::fixupPointerPlusOffset(v72, v1532, v74);
              if (*((_BYTE *)v72 + 32) == 1 || *(_BYTE *)(*((_QWORD *)v72 + 2) + 112))
                v84 = 579;
              else
                v84 = 67;
              v85 = *((_QWORD *)v72 + 11);
              v86 = (JSC::B3::Value *)*((_QWORD *)v72 + 7);
              if (*(_QWORD *)v72)
                v87 = *(_QWORD *)(*(_QWORD *)v72 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v72 + 14992) << 32);
              else
                v87 = 0;
              v88 = v1532[0];
              v89 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
              if (v89)
              {
                v90 = (_BYTE *)(v89 + 9040);
                *(_BYTE *)(v89 + 9040) = 1;
                v91 = *(unsigned int *)(v89 + 9056);
                if ((_DWORD)v91)
                {
                  *(_DWORD *)(v89 + 9056) = v91 - *(_DWORD *)(v89 + 9060);
                  v92 = *(_QWORD *)(v89 + 9048) - v91;
LABEL_695:
                  *v90 = 0;
LABEL_696:
                  JSC::B3::Value::Value<>(v92, 0, v84, 5, 1, v87, (uint64_t)v88);
                  *(_QWORD *)v92 = off_1E357E4C8;
                  *(_DWORD *)(v92 + 40) = v83;
                  *(_OWORD *)(v92 + 44) = xmmword_19914F690;
                  JSC::B3::Procedure::addValueImpl(v86, (JSC::B3::Value *)v92);
                  v1530 = (void (**)(WTF::StringPrintStream *__hidden))v92;
                  v1053 = (char **)(v85 + 8);
                  v1054 = *(unsigned int *)(v85 + 20);
                  if ((_DWORD)v1054 == *(_DWORD *)(v85 + 16))
                  {
                    v1135 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1053, v1054 + 1, (unint64_t)&v1530);
                    v1054 = *(unsigned int *)(v85 + 20);
                    *(_QWORD *)(*(_QWORD *)(v85 + 8) + 8 * v1054) = *(_QWORD *)v1135;
                    v1055 = v1530;
                  }
                  else
                  {
                    *(_QWORD *)&(*v1053)[8 * v1054] = v92;
                    v1055 = (void (**)(WTF::StringPrintStream *__hidden))v92;
                  }
                  *(_DWORD *)(v85 + 20) = v1054 + 1;
                  v1055[4] = (void (*)(WTF::StringPrintStream *__hidden))v85;
                  v741 = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)v72, *(_DWORD *)(v92 + 16));
                  v1056 = *((_QWORD *)v72 + 11);
                  v1057 = (JSC::B3::Value *)*((_QWORD *)v72 + 7);
                  if (*(_QWORD *)v72)
                    v1058 = *(_QWORD *)(*(_QWORD *)v72 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v72 + 14992) << 32);
                  else
                    v1058 = 0;
                  v1059 = (void (**)(WTF::StringPrintStream *__hidden))WTF::fastMalloc((WTF *)0x38);
                  *((_DWORD *)v1059 + 2) = -1;
                  *((_WORD *)v1059 + 6) = 9;
                  *((_DWORD *)v1059 + 4) = 0;
                  *((_BYTE *)v1059 + 20) = 1;
                  v1059[3] = (void (*)(WTF::StringPrintStream *__hidden))v1058;
                  v1059[4] = 0;
                  *v1059 = (void (*)(WTF::StringPrintStream *__hidden))off_1E357F0F8;
                  v1059[5] = (void (*)(WTF::StringPrintStream *__hidden))v741;
                  v1059[6] = (void (*)(WTF::StringPrintStream *__hidden))v92;
                  JSC::B3::Procedure::addValueImpl(v1057, (JSC::B3::Value *)v1059);
                  v1530 = v1059;
                  v1060 = (char **)(v1056 + 8);
                  v1061 = *(unsigned int *)(v1056 + 20);
                  if ((_DWORD)v1061 == *(_DWORD *)(v1056 + 16))
                  {
                    v1136 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1060, v1061 + 1, (unint64_t)&v1530);
                    v1061 = *(unsigned int *)(v1056 + 20);
                    *(_QWORD *)(*(_QWORD *)(v1056 + 8) + 8 * v1061) = *(_QWORD *)v1136;
                    v1059 = v1530;
                  }
                  else
                  {
                    *(_QWORD *)&(*v1060)[8 * v1061] = v1059;
                  }
                  v733 = a2;
                  *(_DWORD *)(v1056 + 20) = v1061 + 1;
                  v1059[4] = (void (*)(WTF::StringPrintStream *__hidden))v1056;
LABEL_459:
                  v1521 = v741;
                  v748 = *(_DWORD *)(v733 + 68);
                  if (v748 != *(_DWORD *)(v733 + 64))
                  {
                    v749 = *(_QWORD *)(v733 + 56) + 24 * v748;
                    *(_OWORD *)v749 = xmmword_19915A170;
                    *(_QWORD *)(v749 + 16) = v741;
                    ++*(_DWORD *)(v733 + 68);
LABEL_672:
                    *v9 = 0;
                    v9[8] = 0;
                    return;
                  }
                  v329 = v733 + 56;
                  goto LABEL_517;
                }
                v1050 = *(_QWORD *)(v89 + 9080);
                v1051 = *(_QWORD *)(v89 + 9064);
                if (v1050)
                {
LABEL_694:
                  v1052 = __clz(v1050);
                  *(_QWORD *)(v89 + 9080) = v1050 & ~(0x8000000000000000 >> v1052);
                  v92 = v1051 + 16 * v1052;
                  goto LABEL_695;
                }
                if (*(_BYTE *)(v89 + 9045) == 6)
                {
                  v1439 = *(_DWORD *)(v89 + 9076);
                  v1440 = *(unsigned int *)(v89 + 9072);
                  if (v1440 < v1439)
                  {
                    *(_QWORD *)&v90[8 * v1440 + 56] = 0;
                    v1441 = (unint64_t *)(v89 + 8 * v1440 + 9104);
                    v1442 = v1439 - 1 - v1440;
                    while (v1442)
                    {
                      v1051 += 1024;
                      v1444 = *v1441++;
                      v1443 = v1444;
                      LODWORD(v1440) = v1440 + 1;
                      --v1442;
                      if (v1444)
                      {
                        v1050 = __rbit64(v1443);
                        *(_DWORD *)(v89 + 9072) = v1440;
                        *(_QWORD *)(v89 + 9064) = v1051;
                        goto LABEL_694;
                      }
                    }
                    *(_DWORD *)(v89 + 9072) = v1439;
                  }
                }
                *v90 = 0;
              }
              v92 = bmalloc_allocate_casual(72, 1);
              goto LABEL_696;
            default:
LABEL_1055:
              __break(0xC471u);
              JUMPOUT(0x198E06EA8);
          }
        }
        v1492 = v9;
        v713 = *((_QWORD *)v72 + 11);
        v714 = (JSC::B3::Value *)*((_QWORD *)v72 + 7);
        if (*(_QWORD *)v72)
          v715 = *(_QWORD *)(*(_QWORD *)v72 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v72 + 14992) << 32);
        else
          v715 = 0;
        v716 = WTF::fastMalloc((WTF *)0x30);
        v717 = *(_DWORD *)(v73 + 4);
        *(_DWORD *)(v716 + 8) = -1;
        *(_WORD *)(v716 + 12) = 10;
        *(_DWORD *)(v716 + 16) = v717;
        *(_BYTE *)(v716 + 20) = 0;
        *(_QWORD *)(v716 + 24) = v715;
        *(_QWORD *)(v716 + 32) = 0;
        *(_QWORD *)v716 = off_1E357F0F8;
        *(_QWORD *)(v716 + 40) = v73;
        JSC::B3::Procedure::addValueImpl(v714, (JSC::B3::Value *)v716);
        v1530 = (void (**)(WTF::StringPrintStream *__hidden))v716;
        v718 = (char **)(v713 + 8);
        v719 = *(unsigned int *)(v713 + 20);
        if ((_DWORD)v719 == *(_DWORD *)(v713 + 16))
        {
          v902 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v718, v719 + 1, (unint64_t)&v1530);
          v719 = *(unsigned int *)(v713 + 20);
          *(_QWORD *)(*(_QWORD *)(v713 + 8) + 8 * v719) = *(_QWORD *)v902;
          v720 = v1530;
        }
        else
        {
          *(_QWORD *)&(*v718)[8 * v719] = v716;
          v720 = (void (**)(WTF::StringPrintStream *__hidden))v716;
        }
        *(_DWORD *)(v713 + 20) = v719 + 1;
        v720[4] = (void (*)(WTF::StringPrintStream *__hidden))v713;
        v1532[0] = (JSC::B3::Value *)JSC::Wasm::OMGIRGenerator::emitCheckAndPreparePointer(v72, (JSC::B3::Value *)v716, v74, v443);
        v721 = JSC::Wasm::OMGIRGenerator::fixupPointerPlusOffset(v72, v1532, v74);
        v722 = *((_QWORD *)v72 + 11);
        v723 = (JSC::B3::Value *)*((_QWORD *)v72 + 7);
        if (*((_BYTE *)v72 + 32) == 1 || *(_BYTE *)(*((_QWORD *)v72 + 2) + 112))
          v724 = 512;
        else
          v724 = 0;
        v725 = v724 | v444;
        if (*(_QWORD *)v72)
          v726 = *(_QWORD *)(*(_QWORD *)v72 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v72 + 14992) << 32);
        else
          v726 = 0;
        v727 = v1532[0];
        v728 = (JSC::B3::Value *)JSC::B3::Value::allocateSpace(v444, 64);
        v729 = JSC::B3::Value::Value<>((uint64_t)v728, 0, v725, v445, 1, v726, (uint64_t)v727);
        *(_QWORD *)v729 = off_1E357E4C8;
        *(_DWORD *)(v729 + 40) = v721;
        *(_OWORD *)(v729 + 44) = xmmword_19914F690;
        JSC::B3::Procedure::addValueImpl(v723, v728);
        v1530 = (void (**)(WTF::StringPrintStream *__hidden))v728;
        v730 = (char **)(v722 + 8);
        v731 = *(unsigned int *)(v722 + 20);
        if ((_DWORD)v731 == *(_DWORD *)(v722 + 16))
        {
          v903 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v730, v731 + 1, (unint64_t)&v1530);
          v731 = *(unsigned int *)(v722 + 20);
          *(_QWORD *)(*(_QWORD *)(v722 + 8) + 8 * v731) = *(_QWORD *)v903;
          v732 = v1530;
        }
        else
        {
          *(_QWORD *)&(*v730)[8 * v731] = v728;
          v732 = (void (**)(WTF::StringPrintStream *__hidden))v728;
        }
        v9 = v1492;
        v733 = a2;
        *(_DWORD *)(v722 + 20) = v731 + 1;
        v732[4] = (void (*)(WTF::StringPrintStream *__hidden))v722;
        v734 = *((_QWORD *)v72 + 11);
        v735 = (JSC::B3::Value *)*((_QWORD *)v72 + 7);
        if (*(_QWORD *)v72)
          v736 = *(_QWORD *)(*(_QWORD *)v72 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v72 + 14992) << 32);
        else
          v736 = 0;
        v737 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v737 + 8) = -1;
        *(_WORD *)(v737 + 12) = 93;
        *(_DWORD *)(v737 + 16) = 5;
        *(_BYTE *)(v737 + 20) = 1;
        *(_QWORD *)(v737 + 24) = v736;
        *(_QWORD *)(v737 + 32) = 0;
        *(_QWORD *)(v737 + 48) = v728;
        *(_QWORD *)v737 = off_1E357EA50;
        *(_BYTE *)(v737 + 40) = v1480;
        *(_BYTE *)(v737 + 41) = 0;
        JSC::B3::Procedure::addValueImpl(v735, (JSC::B3::Value *)v737);
        v1530 = (void (**)(WTF::StringPrintStream *__hidden))v737;
        v738 = (char **)(v734 + 8);
        v739 = *(unsigned int *)(v734 + 20);
        if ((_DWORD)v739 == *(_DWORD *)(v734 + 16))
        {
          v904 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v738, v739 + 1, (unint64_t)&v1530);
          v739 = *(unsigned int *)(v734 + 20);
          *(_QWORD *)(*(_QWORD *)(v734 + 8) + 8 * v739) = *(_QWORD *)v904;
          v740 = v1530;
        }
        else
        {
          *(_QWORD *)&(*v738)[8 * v739] = v737;
          v740 = (void (**)(WTF::StringPrintStream *__hidden))v737;
        }
        *(_DWORD *)(v734 + 20) = v739 + 1;
        v740[4] = (void (*)(WTF::StringPrintStream *__hidden))v734;
        v741 = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)v72, *(_DWORD *)(v737 + 16));
        v742 = *((_QWORD *)v72 + 11);
        v743 = (JSC::B3::Value *)*((_QWORD *)v72 + 7);
        if (*(_QWORD *)v72)
          v744 = *(_QWORD *)(*(_QWORD *)v72 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v72 + 14992) << 32);
        else
          v744 = 0;
        v745 = (void (**)(WTF::StringPrintStream *__hidden))WTF::fastMalloc((WTF *)0x38);
        *((_DWORD *)v745 + 2) = -1;
        *((_WORD *)v745 + 6) = 9;
        *((_DWORD *)v745 + 4) = 0;
        *((_BYTE *)v745 + 20) = 1;
        v745[3] = (void (*)(WTF::StringPrintStream *__hidden))v744;
        v745[4] = 0;
        *v745 = (void (*)(WTF::StringPrintStream *__hidden))off_1E357F0F8;
        v745[5] = (void (*)(WTF::StringPrintStream *__hidden))v741;
        v745[6] = (void (*)(WTF::StringPrintStream *__hidden))v737;
        JSC::B3::Procedure::addValueImpl(v743, (JSC::B3::Value *)v745);
        v1530 = v745;
        v746 = (char **)(v742 + 8);
        v747 = *(unsigned int *)(v742 + 20);
        if ((_DWORD)v747 == *(_DWORD *)(v742 + 16))
        {
          v905 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v746, v747 + 1, (unint64_t)&v1530);
          v747 = *(unsigned int *)(v742 + 20);
          *(_QWORD *)(*(_QWORD *)(v742 + 8) + 8 * v747) = *(_QWORD *)v905;
          v745 = v1530;
        }
        else
        {
          *(_QWORD *)&(*v746)[8 * v747] = v745;
        }
        *(_DWORD *)(v742 + 20) = v747 + 1;
        v745[4] = (void (*)(WTF::StringPrintStream *__hidden))v742;
        goto LABEL_459;
      case 36:
      case 64:
        v1524 = 0;
        v1522 = JSC::Wasm::Types::Void;
        JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v1530, a3, a2, &v1524, (uint64_t)&v1522, *(double *)&JSC::Wasm::Types::Void, a8);
        if ((_BYTE)v1531)
          goto LABEL_930;
        v1521 = 0;
        v231 = *(JSC::Wasm::OMGIRGenerator **)(v8 + 48);
        v232 = v1523;
        v233 = v1524;
        v1491 = v9;
        if (a3 == 64)
        {
          v234 = 4;
          v235 = 5;
          v236 = 3;
        }
        else
        {
          if (a3 != 36)
          {
            __break(0xC471u);
            JUMPOUT(0x198E06F08);
          }
          v234 = 8;
          v235 = 6;
          v236 = 4;
        }
        v750 = *((_QWORD *)v231 + 11);
        v751 = (JSC::B3::Value *)*((_QWORD *)v231 + 7);
        if (*(_QWORD *)v231)
          v752 = *(_QWORD *)(*(_QWORD *)v231 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v231
                                                                                                + 14992) << 32);
        else
          v752 = 0;
        v753 = WTF::fastMalloc((WTF *)0x30);
        v754 = *(_DWORD *)(v232 + 4);
        *(_DWORD *)(v753 + 8) = -1;
        *(_WORD *)(v753 + 12) = 10;
        *(_DWORD *)(v753 + 16) = v754;
        *(_BYTE *)(v753 + 20) = 0;
        *(_QWORD *)(v753 + 24) = v752;
        *(_QWORD *)(v753 + 32) = 0;
        *(_QWORD *)v753 = off_1E357F0F8;
        *(_QWORD *)(v753 + 40) = v232;
        JSC::B3::Procedure::addValueImpl(v751, (JSC::B3::Value *)v753);
        v1530 = (void (**)(WTF::StringPrintStream *__hidden))v753;
        v755 = (char **)(v750 + 8);
        v756 = *(unsigned int *)(v750 + 20);
        if ((_DWORD)v756 == *(_DWORD *)(v750 + 16))
        {
          v1031 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v755, v756 + 1, (unint64_t)&v1530);
          v756 = *(unsigned int *)(v750 + 20);
          *(_QWORD *)(*(_QWORD *)(v750 + 8) + 8 * v756) = *(_QWORD *)v1031;
          v757 = v1530;
        }
        else
        {
          *(_QWORD *)&(*v755)[8 * v756] = v753;
          v757 = (void (**)(WTF::StringPrintStream *__hidden))v753;
        }
        *(_DWORD *)(v750 + 20) = v756 + 1;
        v757[4] = (void (*)(WTF::StringPrintStream *__hidden))v750;
        v1532[0] = (JSC::B3::Value *)JSC::Wasm::OMGIRGenerator::emitCheckAndPreparePointer(v231, (JSC::B3::Value *)v753, v233, v234);
        v758 = JSC::Wasm::OMGIRGenerator::fixupPointerPlusOffset(v231, v1532, v233);
        if (*((_BYTE *)v231 + 32) == 1 || *(_BYTE *)(*((_QWORD *)v231 + 2) + 112))
          v759 = 579;
        else
          v759 = 67;
        v760 = *((_QWORD *)v231 + 11);
        v761 = (JSC::B3::Value *)*((_QWORD *)v231 + 7);
        if (*(_QWORD *)v231)
          v762 = *(_QWORD *)(*(_QWORD *)v231 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v231
                                                                                                + 14992) << 32);
        else
          v762 = 0;
        v763 = v1532[0];
        v764 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
        if (!v764)
          goto LABEL_994;
        v765 = (_BYTE *)(v764 + 9040);
        *(_BYTE *)(v764 + 9040) = 1;
        v766 = *(unsigned int *)(v764 + 9056);
        if ((_DWORD)v766)
        {
          *(_DWORD *)(v764 + 9056) = v766 - *(_DWORD *)(v764 + 9060);
          v767 = *(_QWORD *)(v764 + 9048) - v766;
          goto LABEL_617;
        }
        v935 = *(_QWORD *)(v764 + 9080);
        v936 = *(_QWORD *)(v764 + 9064);
        if (v935)
          goto LABEL_616;
        if (*(_BYTE *)(v764 + 9045) == 6)
        {
          v1433 = *(_DWORD *)(v764 + 9076);
          v1434 = *(unsigned int *)(v764 + 9072);
          if (v1434 < v1433)
          {
            *(_QWORD *)&v765[8 * v1434 + 56] = 0;
            v1435 = (unint64_t *)(v764 + 8 * v1434 + 9104);
            v1436 = v1433 - 1 - v1434;
            while (v1436)
            {
              v936 += 1024;
              v1438 = *v1435++;
              v1437 = v1438;
              LODWORD(v1434) = v1434 + 1;
              --v1436;
              if (v1438)
              {
                v935 = __rbit64(v1437);
                *(_DWORD *)(v764 + 9072) = v1434;
                *(_QWORD *)(v764 + 9064) = v936;
LABEL_616:
                v937 = __clz(v935);
                *(_QWORD *)(v764 + 9080) = v935 & ~(0x8000000000000000 >> v937);
                v767 = v936 + 16 * v937;
LABEL_617:
                *v765 = 0;
                goto LABEL_618;
              }
            }
            *(_DWORD *)(v764 + 9072) = v1433;
          }
        }
        *v765 = 0;
LABEL_994:
        v1445 = v763;
        v1446 = bmalloc_allocate_casual(72, 1);
        v763 = v1445;
        v767 = v1446;
LABEL_618:
        JSC::B3::Value::Value<>(v767, 0, v759, v236, 1, v762, (uint64_t)v763);
        *(_QWORD *)v767 = off_1E357E4C8;
        *(_DWORD *)(v767 + 40) = v758;
        *(_OWORD *)(v767 + 44) = xmmword_19914F690;
        JSC::B3::Procedure::addValueImpl(v761, (JSC::B3::Value *)v767);
        v1530 = (void (**)(WTF::StringPrintStream *__hidden))v767;
        v938 = (char **)(v760 + 8);
        v939 = *(unsigned int *)(v760 + 20);
        if ((_DWORD)v939 == *(_DWORD *)(v760 + 16))
        {
          v1032 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v938, v939 + 1, (unint64_t)&v1530);
          v939 = *(unsigned int *)(v760 + 20);
          *(_QWORD *)(*(_QWORD *)(v760 + 8) + 8 * v939) = *(_QWORD *)v1032;
          v940 = v1530;
        }
        else
        {
          *(_QWORD *)&(*v938)[8 * v939] = v767;
          v940 = (void (**)(WTF::StringPrintStream *__hidden))v767;
        }
        *(_DWORD *)(v760 + 20) = v939 + 1;
        v940[4] = (void (*)(WTF::StringPrintStream *__hidden))v760;
        v941 = *((_QWORD *)v231 + 11);
        v942 = (JSC::B3::Value *)*((_QWORD *)v231 + 7);
        if (*(_QWORD *)v231)
          v943 = *(_QWORD *)(*(_QWORD *)v231 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v231
                                                                                                + 14992) << 32);
        else
          v943 = 0;
        v944 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v944 + 8) = -1;
        *(_WORD *)(v944 + 12) = 7;
        *(_DWORD *)(v944 + 16) = 5;
        *(_BYTE *)(v944 + 20) = 0;
        *(_QWORD *)(v944 + 24) = v943;
        *(_QWORD *)(v944 + 32) = 0;
        *(_QWORD *)v944 = off_1E357D6F8;
        *(_QWORD *)(v944 + 40) = 0;
        *(_QWORD *)(v944 + 48) = 0;
        JSC::B3::Procedure::addValueImpl(v942, (JSC::B3::Value *)v944);
        v1530 = (void (**)(WTF::StringPrintStream *__hidden))v944;
        v945 = (_QWORD *)(v941 + 8);
        v946 = *(unsigned int *)(v941 + 20);
        if ((_DWORD)v946 == *(_DWORD *)(v941 + 16))
        {
          v1033 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v941 + 8), v946 + 1, (unint64_t)&v1530);
          v946 = *(unsigned int *)(v941 + 20);
          *(_QWORD *)(*(_QWORD *)(v941 + 8) + 8 * v946) = *(_QWORD *)v1033;
          v947 = v1530;
        }
        else
        {
          *(_QWORD *)(*v945 + 8 * v946) = v944;
          v947 = (void (**)(WTF::StringPrintStream *__hidden))v944;
        }
        *(_DWORD *)(v941 + 20) = v946 + 1;
        v947[4] = (void (*)(WTF::StringPrintStream *__hidden))v941;
        v948 = WTF::fastMalloc((WTF *)0x40);
        *(_QWORD *)v948 = off_1E357F5F0;
        *(_DWORD *)(v948 + 8) = -1;
        *(_WORD *)(v948 + 12) = 91;
        *(_DWORD *)(v948 + 16) = 5;
        *(_BYTE *)(v948 + 20) = 2;
        *(_QWORD *)(v948 + 24) = v943;
        *(_QWORD *)(v948 + 32) = 0;
        JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v948, 2, v944, v767);
        *(_QWORD *)v948 = off_1E357EA50;
        *(_BYTE *)(v948 + 40) = v235;
        *(_BYTE *)(v948 + 41) = 0;
        JSC::B3::Procedure::addValueImpl(v942, (JSC::B3::Value *)v948);
        v1530 = (void (**)(WTF::StringPrintStream *__hidden))v948;
        v949 = *(unsigned int *)(v941 + 20);
        if ((_DWORD)v949 == *(_DWORD *)(v941 + 16))
        {
          v1034 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v941 + 8), v949 + 1, (unint64_t)&v1530);
          v949 = *(unsigned int *)(v941 + 20);
          *(_QWORD *)(*(_QWORD *)(v941 + 8) + 8 * v949) = *(_QWORD *)v1034;
          v950 = v1530;
        }
        else
        {
          *(_QWORD *)(*v945 + 8 * v949) = v948;
          v950 = (void (**)(WTF::StringPrintStream *__hidden))v948;
        }
        v229 = v1491;
        v230 = a2;
        *(_DWORD *)(v941 + 20) = v949 + 1;
        v950[4] = (void (*)(WTF::StringPrintStream *__hidden))v941;
        v853 = (void (**)(WTF::StringPrintStream *__hidden))JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)v231, *(_DWORD *)(v948 + 16));
        v951 = *((_QWORD *)v231 + 11);
        v952 = (JSC::B3::Value *)*((_QWORD *)v231 + 7);
        if (*(_QWORD *)v231)
          v953 = *(_QWORD *)(*(_QWORD *)v231 + 15000) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v231
                                                                                                + 14992) << 32);
        else
          v953 = 0;
        v954 = (void (**)(WTF::StringPrintStream *__hidden))WTF::fastMalloc((WTF *)0x38);
        *((_DWORD *)v954 + 2) = -1;
        *((_WORD *)v954 + 6) = 9;
        *((_DWORD *)v954 + 4) = 0;
        *((_BYTE *)v954 + 20) = 1;
        v954[3] = (void (*)(WTF::StringPrintStream *__hidden))v953;
        v954[4] = 0;
        *v954 = (void (*)(WTF::StringPrintStream *__hidden))off_1E357F0F8;
        v954[5] = (void (*)(WTF::StringPrintStream *__hidden))v853;
        v954[6] = (void (*)(WTF::StringPrintStream *__hidden))v948;
        JSC::B3::Procedure::addValueImpl(v952, (JSC::B3::Value *)v954);
        v1530 = v954;
        v955 = (char **)(v951 + 8);
        v956 = *(unsigned int *)(v951 + 20);
        if ((_DWORD)v956 == *(_DWORD *)(v951 + 16))
        {
          v1035 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v955, v956 + 1, (unint64_t)&v1530);
          v956 = *(unsigned int *)(v951 + 20);
          *(_QWORD *)(*(_QWORD *)(v951 + 8) + 8 * v956) = *(_QWORD *)v1035;
          v954 = v1530;
        }
        else
        {
          *(_QWORD *)&(*v955)[8 * v956] = v954;
        }
        *(_DWORD *)(v951 + 20) = v956 + 1;
        v954[4] = (void (*)(WTF::StringPrintStream *__hidden))v951;
        v1521 = (WTF *)v853;
        v860 = *(_DWORD *)(a2 + 68);
        if (v860 == *(_DWORD *)(a2 + 64))
        {
          v861 = a2 + 56;
          v862 = (uint64_t *)&v1521;
          goto LABEL_559;
        }
LABEL_632:
        v957 = *(_QWORD *)(v230 + 56) + 24 * v860;
        *(_OWORD *)v957 = xmmword_19915A170;
        *(_QWORD *)(v957 + 16) = v853;
LABEL_633:
        ++*(_DWORD *)(v230 + 68);
        goto LABEL_634;
      case 41:
        v525 = *(_QWORD *)a2 + 16;
        if (*(_QWORD *)(a2 + 16) < v525)
        {
          v522 = "can't parse 128-bit shuffle immediate";
          v523 = (unint64_t *)v8;
          v524 = 38;
          break;
        }
        v1018 = (unint64_t *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
        v1019 = *v1018;
        v1020 = v1018[1];
        *(_QWORD *)a2 = v525;
        v1021 = HIBYTE(v1019);
        switch(a4)
        {
          case 0:
            __break(0xC471u);
            JUMPOUT(0x198E070C8);
          case 1:
            if (v1019 <= 0x1Fu
              && BYTE1(v1019) <= 0x1Fu
              && BYTE2(v1019) <= 0x1Fu
              && BYTE3(v1019) <= 0x1Fu
              && BYTE4(v1019) <= 0x1Fu
              && BYTE5(v1019) <= 0x1Fu
              && BYTE6(v1019) <= 0x1Fu
              && v1021 <= 0x1F
              && (v1020 & 0xE0) == 0
              && (v1020 & 0xE000) == 0
              && (v1020 & 0xE00000) == 0
              && (v1020 & 0xE0000000) == 0
              && (v1020 & 0xE000000000) == 0
              && (v1020 & 0xE00000000000) == 0
              && (v1020 & 0xE0000000000000) == 0
              && !(v1020 >> 61))
            {
              goto LABEL_860;
            }
            goto LABEL_913;
          case 2:
            if (v1019 > 0xFu
              || BYTE1(v1019) > 0xFu
              || BYTE2(v1019) > 0xFu
              || BYTE3(v1019) > 0xFu
              || BYTE4(v1019) > 0xFu
              || BYTE5(v1019) > 0xFu
              || BYTE6(v1019) > 0xFu
              || v1021 > 0xF
              || (v1020 & 0xF0) != 0
              || (v1020 & 0xF000) != 0
              || (v1020 & 0xF00000) != 0
              || (v1020 & 0xF0000000) != 0
              || (v1020 & 0xF000000000) != 0
              || (v1020 & 0xF00000000000) != 0
              || (v1020 & 0xF0000000000000) != 0
              || v1020 >> 60)
            {
              goto LABEL_913;
            }
            goto LABEL_860;
          case 3:
          case 5:
            if (v1019 > 7u
              || BYTE1(v1019) > 7u
              || BYTE2(v1019) > 7u
              || BYTE3(v1019) > 7u
              || BYTE4(v1019) > 7u
              || BYTE5(v1019) > 7u
              || BYTE6(v1019) > 7u
              || v1021 > 7
              || (v1020 & 0xF8) != 0
              || (v1020 & 0xF800) != 0
              || (v1020 & 0xF80000) != 0
              || (v1020 & 0xF8000000) != 0
              || (v1020 & 0xF800000000) != 0
              || (v1020 & 0xF80000000000) != 0
              || (v1020 & 0xF8000000000000) != 0
              || v1020 >> 59)
            {
              goto LABEL_913;
            }
            goto LABEL_860;
          case 4:
          case 6:
            if (v1019 > 3u
              || BYTE1(v1019) > 3u
              || BYTE2(v1019) > 3u
              || BYTE3(v1019) > 3u
              || BYTE4(v1019) > 3u
              || BYTE5(v1019) > 3u
              || BYTE6(v1019) > 3u
              || v1021 > 3
              || (v1020 & 0xFC) != 0
              || (v1020 & 0xFC00) != 0
              || (v1020 & 0xFC0000) != 0
              || (v1020 & 0xFC000000) != 0
              || (v1020 & 0xFC00000000) != 0
              || (v1020 & 0xFC0000000000) != 0
              || (v1020 & 0xFC000000000000) != 0
              || v1020 >> 58)
            {
LABEL_913:
              JSC::Wasm::ParserBase::fail<>((unint64_t *)a2, &v1522);
              goto LABEL_358;
            }
LABEL_860:
            v1335 = *(_DWORD *)(a2 + 68);
            if (!v1335)
              goto LABEL_900;
            v1336 = *(_QWORD *)(a2 + 48);
            v1337 = *(_QWORD *)(a2 + 56) + 24 * v1335;
            v1338 = *(unsigned __int8 *)(v1337 - 24);
            v1339 = *(JSC::B3::Procedure **)(v1337 - 8);
            *(_DWORD *)(a2 + 68) = v1335 - 1;
            *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
            DWORD2(v1522) = 21;
            LODWORD(v1530) = 1111;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1517);
            v1347 = v1517;
            if (!v1517)
            {
              __break(0xC471u);
              JUMPOUT(0x198E07280);
            }
            v1348 = *(_DWORD *)(v1336 + 512);
            if (!v1348)
            {
              __break(0xC471u);
              JUMPOUT(0x198E07288);
            }
            *(_DWORD *)(v1336 + 512) = v1348 - 1;
            v1517 = 0;
            if (*(_DWORD *)v1347 == 2)
            {
              WTF::StringImpl::~StringImpl(v1347, v1340, v1341, v1342, v1343, v1344, v1345, v1346);
              WTF::fastFree(v1400, v1401, v1402, v1403, v1404, v1405, v1406, v1407);
            }
            else
            {
              *(_DWORD *)v1347 -= 2;
            }
            if (v1338 != 251)
              goto LABEL_963;
            v1349 = *(_DWORD *)(v8 + 68);
            if (!v1349)
              goto LABEL_900;
            v1350 = *(_QWORD *)(v8 + 48);
            v1351 = *(_QWORD *)(v8 + 56) + 24 * v1349;
            v1352 = *(unsigned __int8 *)(v1351 - 24);
            v1353 = *(_QWORD *)(v1351 - 8);
            *(_DWORD *)(v8 + 68) = v1349 - 1;
            *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
            DWORD2(v1522) = 21;
            LODWORD(v1530) = 1113;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1516);
            v1361 = v1516;
            if (!v1516)
            {
              __break(0xC471u);
              JUMPOUT(0x198E07290);
            }
            v1362 = *(_DWORD *)(v1350 + 512);
            if (!v1362)
            {
              __break(0xC471u);
              JUMPOUT(0x198E07298);
            }
            *(_DWORD *)(v1350 + 512) = v1362 - 1;
            v1516 = 0;
            if (*(_DWORD *)v1361 == 2)
            {
              WTF::StringImpl::~StringImpl(v1361, v1354, v1355, v1356, v1357, v1358, v1359, v1360);
              WTF::fastFree(v1408, v1409, v1410, v1411, v1412, v1413, v1414, v1415);
            }
            else
            {
              *(_DWORD *)v1361 -= 2;
            }
            if (v1352 != 251)
            {
LABEL_963:
              v1267 = "shuffle input must be a vector";
              goto LABEL_964;
            }
            v1486 = v1339;
            v1530 = 0;
            v1363 = *(_QWORD **)(v8 + 48);
            v1364 = v1363[11];
            v1365 = (JSC::B3::Value *)v1363[7];
            if (*v1363)
              v1366 = *(_QWORD *)(*v1363 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v1363 + 14992) << 32);
            else
              v1366 = 0;
            v1367 = WTF::fastMalloc((WTF *)0x38);
            *(_DWORD *)(v1367 + 8) = -1;
            *(_WORD *)(v1367 + 12) = 7;
            *(_DWORD *)(v1367 + 16) = 5;
            *(_BYTE *)(v1367 + 20) = 0;
            *(_QWORD *)(v1367 + 24) = v1366;
            *(_QWORD *)(v1367 + 32) = 0;
            *(_QWORD *)v1367 = off_1E357D6F8;
            *(_QWORD *)(v1367 + 40) = v1019;
            *(_QWORD *)(v1367 + 48) = v1020;
            JSC::B3::Procedure::addValueImpl(v1365, (JSC::B3::Value *)v1367);
            *(_QWORD *)&v1522 = v1367;
            v1368 = (char **)(v1364 + 8);
            v1369 = *(unsigned int *)(v1364 + 20);
            if ((_DWORD)v1369 == *(_DWORD *)(v1364 + 16))
            {
              v1396 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1368, v1369 + 1, (unint64_t)&v1522);
              v1369 = *(unsigned int *)(v1364 + 20);
              *(_QWORD *)(*(_QWORD *)(v1364 + 8) + 8 * v1369) = *(_QWORD *)v1396;
              v1370 = v1522;
            }
            else
            {
              *(_QWORD *)&(*v1368)[8 * v1369] = v1367;
              v1370 = v1367;
            }
            v1496 = v9;
            *(_DWORD *)(v1364 + 20) = v1369 + 1;
            *(_QWORD *)(v1370 + 32) = v1364;
            v1371 = v1363[11];
            v1372 = (JSC::B3::Value *)v1363[7];
            if (*v1363)
              v1373 = *(_QWORD *)(*v1363 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v1363 + 14992) << 32);
            else
              v1373 = 0;
            v1374 = WTF::fastMalloc((WTF *)0x30);
            v1375 = *(_DWORD *)(v1353 + 4);
            *(_DWORD *)(v1374 + 8) = -1;
            *(_WORD *)(v1374 + 12) = 10;
            *(_DWORD *)(v1374 + 16) = v1375;
            *(_BYTE *)(v1374 + 20) = 0;
            *(_QWORD *)(v1374 + 24) = v1373;
            *(_QWORD *)(v1374 + 32) = 0;
            *(_QWORD *)v1374 = off_1E357F0F8;
            *(_QWORD *)(v1374 + 40) = v1353;
            JSC::B3::Procedure::addValueImpl(v1372, (JSC::B3::Value *)v1374);
            *(_QWORD *)&v1522 = v1374;
            v1376 = (char **)(v1371 + 8);
            v1377 = *(unsigned int *)(v1371 + 20);
            v1472 = (char **)(v1371 + 8);
            if ((_DWORD)v1377 == *(_DWORD *)(v1371 + 16))
            {
              v1397 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1376, v1377 + 1, (unint64_t)&v1522);
              v1377 = *(unsigned int *)(v1371 + 20);
              *(_QWORD *)(*(_QWORD *)(v1371 + 8) + 8 * v1377) = *(_QWORD *)v1397;
              v1378 = v1522;
            }
            else
            {
              *(_QWORD *)&(*v1376)[8 * v1377] = v1374;
              v1378 = v1374;
            }
            *(_DWORD *)(v1371 + 20) = v1377 + 1;
            *(_QWORD *)(v1378 + 32) = v1371;
            v1379 = v1363[11];
            v1380 = (JSC::B3::Value *)v1363[7];
            if (*v1363)
              v1381 = *(_QWORD *)(*v1363 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v1363 + 14992) << 32);
            else
              v1381 = 0;
            v1382 = WTF::fastMalloc((WTF *)0x30);
            v1383 = *((_DWORD *)v1486 + 1);
            *(_DWORD *)(v1382 + 8) = -1;
            *(_WORD *)(v1382 + 12) = 10;
            *(_DWORD *)(v1382 + 16) = v1383;
            *(_BYTE *)(v1382 + 20) = 0;
            *(_QWORD *)(v1382 + 24) = v1381;
            *(_QWORD *)(v1382 + 32) = 0;
            *(_QWORD *)v1382 = off_1E357F0F8;
            *(_QWORD *)(v1382 + 40) = v1486;
            JSC::B3::Procedure::addValueImpl(v1380, (JSC::B3::Value *)v1382);
            *(_QWORD *)&v1522 = v1382;
            v1384 = (char **)(v1379 + 8);
            v1385 = *(unsigned int *)(v1379 + 20);
            if ((_DWORD)v1385 == *(_DWORD *)(v1379 + 16))
            {
              v1398 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1384, v1385 + 1, (unint64_t)&v1522);
              v1385 = *(unsigned int *)(v1379 + 20);
              *(_QWORD *)(*(_QWORD *)(v1379 + 8) + 8 * v1385) = *(_QWORD *)v1398;
              v1386 = v1522;
            }
            else
            {
              *(_QWORD *)&(*v1384)[8 * v1385] = v1382;
              v1386 = v1382;
            }
            *(_DWORD *)(v1379 + 20) = v1385 + 1;
            *(_QWORD *)(v1386 + 32) = v1379;
            v598 = WTF::fastMalloc((WTF *)0x58);
            *(_QWORD *)v598 = off_1E357F5F0;
            *(_DWORD *)(v598 + 8) = -1;
            *(_WORD *)(v598 + 12) = 145;
            *(_DWORD *)(v598 + 16) = 5;
            *(_BYTE *)(v598 + 20) = 3;
            *(_QWORD *)(v598 + 24) = v1373;
            *(_QWORD *)(v598 + 32) = 0;
            v1387 = (uint64_t *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v598);
            *v1387 = v1374;
            v1387[1] = v1382;
            v1387[2] = v1367;
            *(_QWORD *)v598 = off_1E357EA50;
            *(_BYTE *)(v598 + 40) = 1;
            *(_BYTE *)(v598 + 41) = 0;
            JSC::B3::Procedure::addValueImpl(v1372, (JSC::B3::Value *)v598);
            *(_QWORD *)&v1522 = v598;
            v1388 = *(unsigned int *)(v1371 + 20);
            if ((_DWORD)v1388 == *(_DWORD *)(v1371 + 16))
            {
              v1399 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1472, v1388 + 1, (unint64_t)&v1522);
              v1388 = *(unsigned int *)(v1371 + 20);
              *(_QWORD *)(*(_QWORD *)(v1371 + 8) + 8 * v1388) = *(_QWORD *)v1399;
              v1389 = v1522;
            }
            else
            {
              *(_QWORD *)&(*v1472)[8 * v1388] = v598;
              v1389 = v598;
            }
            v607 = v1496;
            v602 = a2;
            *(_DWORD *)(v1371 + 20) = v1388 + 1;
            *(_QWORD *)(v1389 + 32) = v1371;
            v603 = (void (**)(WTF::StringPrintStream *__hidden))JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)v1363, *(_DWORD *)(v598 + 16));
            v604 = v1363[11];
            v605 = (JSC::B3::Value *)v1363[7];
            if (*v1363)
              v606 = *(_QWORD *)(*v1363 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v1363 + 14992) << 32);
            else
              v606 = 0;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198E070E8);
        }
        goto LABEL_888;
      case 44:
      case 57:
      case 74:
        v151 = *(_DWORD *)(a2 + 68);
        if (!v151)
          goto LABEL_900;
        v152 = *(_QWORD *)(a2 + 48);
        v153 = *(_QWORD *)(a2 + 56) + 24 * v151;
        v154 = *(unsigned __int8 *)(v153 - 24);
        v156 = *(_QWORD *)(v153 - 16);
        v155 = *(_QWORD *)(v153 - 8);
        *(_DWORD *)(a2 + 68) = v151 - 1;
        *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
        DWORD2(v1522) = 21;
        LODWORD(v1530) = 1172;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1512);
        v164 = v1512;
        if (!v1512)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07160);
        }
        v165 = *(_DWORD *)(v152 + 512);
        if (!v165)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07168);
        }
        *(_DWORD *)(v152 + 512) = v165 - 1;
        v1512 = 0;
        if (*(_DWORD *)v164 == 2)
        {
          WTF::StringImpl::~StringImpl(v164, v157, v158, v159, v160, v161, v162, v163);
          WTF::fastFree(v1023, v1024, v1025, v1026, v1027, v1028, v1029, v1030);
        }
        else
        {
          *(_DWORD *)v164 -= 2;
        }
        if (v154 != 251 || v156 != 0)
          goto LABEL_905;
        v1530 = 0;
        v167 = *(_QWORD **)(v8 + 48);
        v1490 = v9;
        switch(a3)
        {
          case 'J':
            v168 = 141;
            break;
          case '9':
            v168 = 139;
            break;
          case ',':
            v168 = 138;
            break;
          default:
            v168 = 159;
            break;
        }
        v914 = a4 & 0x3F;
        v915 = v167[11];
        v916 = (JSC::B3::Value *)v167[7];
        if (*v167)
          v917 = *(_QWORD *)(*v167 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v167 + 14992) << 32);
        else
          v917 = 0;
        v918 = v914 | (a5 << 6);
        v919 = WTF::fastMalloc((WTF *)0x30);
        v920 = *(_DWORD *)(v155 + 4);
        *(_DWORD *)(v919 + 8) = -1;
        *(_WORD *)(v919 + 12) = 10;
        *(_DWORD *)(v919 + 16) = v920;
        *(_BYTE *)(v919 + 20) = 0;
        *(_QWORD *)(v919 + 24) = v917;
        *(_QWORD *)(v919 + 32) = 0;
        *(_QWORD *)v919 = off_1E357F0F8;
        *(_QWORD *)(v919 + 40) = v155;
        JSC::B3::Procedure::addValueImpl(v916, (JSC::B3::Value *)v919);
        *(_QWORD *)&v1522 = v919;
        v921 = (_QWORD *)(v915 + 8);
        v922 = *(unsigned int *)(v915 + 20);
        if ((_DWORD)v922 == *(_DWORD *)(v915 + 16))
        {
          v990 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v915 + 8), v922 + 1, (unint64_t)&v1522);
          v922 = *(unsigned int *)(v915 + 20);
          *(_QWORD *)(*(_QWORD *)(v915 + 8) + 8 * v922) = *(_QWORD *)v990;
          v923 = v1522;
        }
        else
        {
          *(_QWORD *)(*v921 + 8 * v922) = v919;
          v923 = v919;
        }
        *(_DWORD *)(v915 + 20) = v922 + 1;
        *(_QWORD *)(v923 + 32) = v915;
        v924 = (int *)JSC::B3::Value::allocateSpace(v168, 48);
        v925 = JSC::B3::Value::Value<>((uint64_t)v924, 0, v168, 1, 1, v917, v919);
        *(_QWORD *)v925 = off_1E357EA50;
        *(_BYTE *)(v925 + 40) = v918;
        *(_BYTE *)(v925 + 41) = 0;
        JSC::B3::Procedure::addValueImpl(v916, (JSC::B3::Value *)v924);
        *(_QWORD *)&v1522 = v924;
        v926 = *(unsigned int *)(v915 + 20);
        if ((_DWORD)v926 == *(_DWORD *)(v915 + 16))
        {
          v991 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v915 + 8), v926 + 1, (unint64_t)&v1522);
          v926 = *(unsigned int *)(v915 + 20);
          *(_QWORD *)(*(_QWORD *)(v915 + 8) + 8 * v926) = *(_QWORD *)v991;
          v927 = v1522;
        }
        else
        {
          *(_QWORD *)(*v921 + 8 * v926) = v924;
          v927 = (uint64_t)v924;
        }
        v881 = a2;
        *(_DWORD *)(v915 + 20) = v926 + 1;
        *(_QWORD *)(v927 + 32) = v915;
        PushVariable = (void (**)(WTF::StringPrintStream *__hidden))JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)v167, v924[4]);
        v928 = v167[11];
        v929 = (JSC::B3::Value *)v167[7];
        if (*v167)
          v930 = *(_QWORD *)(*v167 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v167 + 14992) << 32);
        else
          v930 = 0;
        v607 = v1490;
        v931 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v931 + 8) = -1;
        *(_WORD *)(v931 + 12) = 9;
        *(_DWORD *)(v931 + 16) = 0;
        *(_BYTE *)(v931 + 20) = 1;
        *(_QWORD *)(v931 + 24) = v930;
        *(_QWORD *)(v931 + 32) = 0;
        *(_QWORD *)v931 = off_1E357F0F8;
        *(_QWORD *)(v931 + 40) = PushVariable;
        *(_QWORD *)(v931 + 48) = v924;
        JSC::B3::Procedure::addValueImpl(v929, (JSC::B3::Value *)v931);
        *(_QWORD *)&v1522 = v931;
        v932 = (char **)(v928 + 8);
        v933 = *(unsigned int *)(v928 + 20);
        if ((_DWORD)v933 == *(_DWORD *)(v928 + 16))
        {
          v992 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v932, v933 + 1, (unint64_t)&v1522);
          v933 = *(unsigned int *)(v928 + 20);
          *(_QWORD *)(*(_QWORD *)(v928 + 8) + 8 * v933) = *(_QWORD *)v992;
          v931 = v1522;
        }
        else
        {
          *(_QWORD *)&(*v932)[8 * v933] = v931;
        }
        *(_DWORD *)(v928 + 20) = v933 + 1;
        *(_QWORD *)(v931 + 32) = v928;
        v1530 = PushVariable;
        v934 = *(_DWORD *)(a2 + 68);
        if (v934 == *(_DWORD *)(a2 + 64))
        {
          v895 = a2 + 56;
          v896 = &JSC::Wasm::Types::I32;
          goto LABEL_580;
        }
        v897 = *(_QWORD *)(a2 + 56) + 24 * v934;
        v898 = xmmword_19915A130;
        goto LABEL_582;
      case 65:
        v446 = 16;
        switch(a4)
        {
          case 0:
            __break(0xC471u);
            JUMPOUT(0x198E07048);
          case 1:
            break;
          case 2:
            v446 = 8;
            break;
          case 3:
          case 5:
            v446 = 4;
            break;
          case 4:
          case 6:
            v446 = 2;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198E070A8);
        }
        v1215 = *(_QWORD *)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
          goto LABEL_1048;
        *(_QWORD *)a2 = v1215 + 1;
        v1216 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v1215);
        if (v1216 >= v446)
          goto LABEL_940;
        v1217 = *(_DWORD *)(a2 + 68);
        if (!v1217)
          goto LABEL_900;
        v1218 = *(_QWORD *)(a2 + 48);
        v1219 = *(_QWORD *)(a2 + 56) + 24 * v1217;
        v1220 = *(unsigned __int8 *)(v1219 - 24);
        v1221 = *(_QWORD *)(v1219 - 16);
        v1222 = *(_QWORD *)(v1219 - 8);
        *(_DWORD *)(a2 + 68) = v1217 - 1;
        *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
        DWORD2(v1522) = 21;
        LODWORD(v1530) = 1132;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1515);
        v1230 = v1515;
        if (!v1515)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07270);
        }
        v1231 = *(_DWORD *)(v1218 + 512);
        if (!v1231)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07278);
        }
        *(_DWORD *)(v1218 + 512) = v1231 - 1;
        v1515 = 0;
        if (*(_DWORD *)v1230 == 2)
        {
          WTF::StringImpl::~StringImpl(v1230, v1223, v1224, v1225, v1226, v1227, v1228, v1229);
          WTF::fastFree(v1309, v1310, v1311, v1312, v1313, v1314, v1315, v1316);
        }
        else
        {
          *(_DWORD *)v1230 -= 2;
        }
        if (v1220 != 251 || v1221)
          goto LABEL_905;
        v1530 = 0;
        v1232 = *(unint64_t **)(a2 + 48);
        v1233 = *v1232;
        if (*v1232)
          v1233 = *(_QWORD *)(v1233 + 15000) | ((unint64_t)*(unsigned __int8 *)(v1233 + 14992) << 32);
        v1495 = v9;
        v1234 = a4 - 1;
        if ((a4 - 1) >= 6)
        {
          __break(0xC471u);
          JUMPOUT(0x198E06F68);
        }
        v1452 = v1233;
        v1235 = v1232[11];
        v1471 = (JSC::B3::Value *)v1232[7];
        v1459 = JSC::Wasm::toB3Type(qword_19915AE00[(char)v1234]);
        v1236 = v1232[11];
        v1237 = (JSC::B3::Value *)v1232[7];
        v1485 = v1216;
        if (*v1232)
          v1238 = *(_QWORD *)(*v1232 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v1232 + 14992) << 32);
        else
          v1238 = 0;
        v1239 = a4 | (a5 << 6);
        v1240 = WTF::fastMalloc((WTF *)0x30);
        v1241 = *(_DWORD *)(v1222 + 4);
        *(_DWORD *)(v1240 + 8) = -1;
        *(_WORD *)(v1240 + 12) = 10;
        *(_DWORD *)(v1240 + 16) = v1241;
        *(_BYTE *)(v1240 + 20) = 0;
        *(_QWORD *)(v1240 + 24) = v1238;
        *(_QWORD *)(v1240 + 32) = 0;
        *(_QWORD *)v1240 = off_1E357F0F8;
        *(_QWORD *)(v1240 + 40) = v1222;
        JSC::B3::Procedure::addValueImpl(v1237, (JSC::B3::Value *)v1240);
        *(_QWORD *)&v1522 = v1240;
        v1242 = (char **)(v1236 + 8);
        v1243 = *(unsigned int *)(v1236 + 20);
        if ((_DWORD)v1243 == *(_DWORD *)(v1236 + 16))
        {
          v1264 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1242, v1243 + 1, (unint64_t)&v1522);
          v1243 = *(unsigned int *)(v1236 + 20);
          *(_QWORD *)(*(_QWORD *)(v1236 + 8) + 8 * v1243) = *(_QWORD *)v1264;
          v1244 = v1522;
        }
        else
        {
          *(_QWORD *)&(*v1242)[8 * v1243] = v1240;
          v1244 = v1240;
        }
        v230 = a2;
        *(_DWORD *)(v1236 + 20) = v1243 + 1;
        *(_QWORD *)(v1244 + 32) = v1236;
        v1245 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v1245 + 8) = -1;
        *(_WORD *)(v1245 + 12) = 90;
        *(_DWORD *)(v1245 + 16) = v1459;
        *(_BYTE *)(v1245 + 20) = 1;
        *(_QWORD *)(v1245 + 24) = v1452;
        *(_QWORD *)(v1245 + 32) = 0;
        *(_QWORD *)(v1245 + 48) = v1240;
        *(_QWORD *)v1245 = off_1E357EA50;
        *(_BYTE *)(v1245 + 40) = v1239;
        *(_BYTE *)(v1245 + 41) = v1485;
        JSC::B3::Procedure::addValueImpl(v1471, (JSC::B3::Value *)v1245);
        *(_QWORD *)&v1522 = v1245;
        v1246 = (char **)(v1235 + 8);
        v1247 = *(unsigned int *)(v1235 + 20);
        if ((_DWORD)v1247 == *(_DWORD *)(v1235 + 16))
        {
          v1265 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1246, v1247 + 1, (unint64_t)&v1522);
          v1247 = *(unsigned int *)(v1235 + 20);
          *(_QWORD *)(*(_QWORD *)(v1235 + 8) + 8 * v1247) = *(_QWORD *)v1265;
          v1248 = v1522;
        }
        else
        {
          *(_QWORD *)&(*v1246)[8 * v1247] = v1245;
          v1248 = v1245;
        }
        *(_DWORD *)(v1235 + 20) = v1247 + 1;
        *(_QWORD *)(v1248 + 32) = v1235;
        v1249 = (void (**)(WTF::StringPrintStream *__hidden))JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)v1232, *(_DWORD *)(v1245 + 16));
        v1250 = v1232[11];
        v1251 = (JSC::B3::Value *)v1232[7];
        if (*v1232)
          v1252 = *(_QWORD *)(*v1232 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v1232 + 14992) << 32);
        else
          v1252 = 0;
        v229 = v1495;
        v1253 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v1253 + 8) = -1;
        *(_WORD *)(v1253 + 12) = 9;
        *(_DWORD *)(v1253 + 16) = 0;
        *(_BYTE *)(v1253 + 20) = 1;
        *(_QWORD *)(v1253 + 24) = v1252;
        *(_QWORD *)(v1253 + 32) = 0;
        *(_QWORD *)v1253 = off_1E357F0F8;
        *(_QWORD *)(v1253 + 40) = v1249;
        *(_QWORD *)(v1253 + 48) = v1245;
        JSC::B3::Procedure::addValueImpl(v1251, (JSC::B3::Value *)v1253);
        *(_QWORD *)&v1522 = v1253;
        v1259 = (char **)(v1250 + 8);
        v1260 = *(unsigned int *)(v1250 + 20);
        if ((_DWORD)v1260 == *(_DWORD *)(v1250 + 16))
        {
          v1266 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1259, v1260 + 1, (unint64_t)&v1522);
          v1260 = *(unsigned int *)(v1250 + 20);
          *(_QWORD *)(*(_QWORD *)(v1250 + 8) + 8 * v1260) = *(_QWORD *)v1266;
          v1253 = v1522;
        }
        else
        {
          *(_QWORD *)&(*v1259)[8 * v1260] = v1253;
        }
        *(_DWORD *)(v1250 + 20) = v1260 + 1;
        *(_QWORD *)(v1253 + 32) = v1250;
        v1530 = v1249;
        if (v1234 >= 6)
        {
          __break(0xC471u);
          JUMPOUT(0x198E06F88);
        }
        v1261 = qword_19915AE00[(char)v1234];
        v1522 = v1261;
        v1262 = *(_DWORD *)(a2 + 68);
        if (v1262 != *(_DWORD *)(a2 + 64))
        {
          v1263 = (unint64_t *)(*(_QWORD *)(a2 + 56) + 24 * v1262);
          *v1263 = v1261;
          v1263[1] = 0;
          v1263[2] = (unint64_t)v1249;
          goto LABEL_633;
        }
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type,JSC::B3::Variable *>(a2 + 56, &v1522, (uint64_t *)&v1530, v1254, v1255, v1256, v1257, v1258);
        goto LABEL_634;
      case 66:
        v446 = 16;
        switch(a4)
        {
          case 0:
            __break(0xC471u);
            JUMPOUT(0x198E07028);
          case 1:
            break;
          case 2:
            v446 = 8;
            break;
          case 3:
          case 5:
            v446 = 4;
            break;
          case 4:
          case 6:
            v446 = 2;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198E07088);
        }
        v1146 = *(_QWORD *)a2;
        if (*(_QWORD *)a2 < *(_QWORD *)(a2 + 16))
        {
          *(_QWORD *)a2 = v1146 + 1;
          v1147 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v1146);
          if (v1147 >= v446)
          {
LABEL_940:
            JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char>("Lane index immediate is too large, saw ", (unint64_t *)a2, 40, v446, ", expected an ImmLaneIdx", 25, v446, &v1522, a8);
          }
          else
          {
            v1148 = *(_DWORD *)(a2 + 68);
            if (v1148)
            {
              v1149 = *(_QWORD *)(a2 + 48);
              v1150 = *(_QWORD *)(a2 + 56) + 24 * v1148;
              v1152 = *(_QWORD *)(v1150 - 24);
              v1151 = *(_QWORD *)(v1150 - 16);
              v1153 = *(JSC::B3::Procedure **)(v1150 - 8);
              *(_DWORD *)(a2 + 68) = v1148 - 1;
              *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
              DWORD2(v1522) = 21;
              LODWORD(v1530) = 1152;
              WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1514);
              v1161 = v1514;
              if (!v1514)
              {
                __break(0xC471u);
                JUMPOUT(0x198E07250);
              }
              v1162 = *(_DWORD *)(v1149 + 512);
              if (!v1162)
              {
                __break(0xC471u);
                JUMPOUT(0x198E07258);
              }
              *(_DWORD *)(v1149 + 512) = v1162 - 1;
              v1514 = 0;
              if (*(_DWORD *)v1161 == 2)
              {
                WTF::StringImpl::~StringImpl(v1161, v1154, v1155, v1156, v1157, v1158, v1159, v1160);
                WTF::fastFree(v1301, v1302, v1303, v1304, v1305, v1306, v1307, v1308);
              }
              else
              {
                *(_DWORD *)v1161 -= 2;
              }
              v1470 = v1153;
              v1484 = v1147;
              v1163 = *(_DWORD *)(v8 + 68);
              if (v1163)
              {
                v1164 = v8;
                v1166 = v8 + 48;
                v1165 = *(_QWORD *)(v8 + 48);
                v1167 = *(_QWORD *)(v1166 + 8) + 24 * v1163;
                v1168 = *(unsigned __int8 *)(v1167 - 24);
                v1169 = *(_QWORD *)(v1167 - 16);
                v1170 = *(_QWORD *)(v1167 - 8);
                *(_DWORD *)(v1164 + 68) = v1163 - 1;
                *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
                DWORD2(v1522) = 21;
                LODWORD(v1530) = 1153;
                WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1513);
                v1178 = v1513;
                if (!v1513)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E07260);
                }
                v1179 = *(_DWORD *)(v1165 + 512);
                if (!v1179)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E07268);
                }
                *(_DWORD *)(v1165 + 512) = v1179 - 1;
                v1513 = 0;
                if (*(_DWORD *)v1178 == 2)
                {
                  WTF::StringImpl::~StringImpl(v1178, v1171, v1172, v1173, v1174, v1175, v1176, v1177);
                  WTF::fastFree(v1325, v1326, v1327, v1328, v1329, v1330, v1331, v1332);
                }
                else
                {
                  *(_DWORD *)v1178 -= 2;
                }
                if (v1168 != 251 || v1169)
                {
                  v1267 = "type mismatch for argument 1";
                }
                else
                {
                  if ((a4 - 1) >= 6)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E06FE8);
                  }
                  if ((0xFCFDFEFFFFFFuLL >> (8 * (a4 - 1))) == v1152
                    && !v1151)
                  {
                    v1530 = 0;
                    v1180 = *(_QWORD **)(a2 + 48);
                    v1181 = v1180[11];
                    v1182 = (JSC::B3::Value *)v1180[7];
                    if (*v1180)
                      v1183 = *(_QWORD *)(*v1180 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v1180 + 14992) << 32);
                    else
                      v1183 = 0;
                    v1184 = WTF::fastMalloc((WTF *)0x30);
                    v1185 = *(_DWORD *)(v1170 + 4);
                    *(_DWORD *)(v1184 + 8) = -1;
                    *(_WORD *)(v1184 + 12) = 10;
                    *(_DWORD *)(v1184 + 16) = v1185;
                    *(_BYTE *)(v1184 + 20) = 0;
                    *(_QWORD *)(v1184 + 24) = v1183;
                    *(_QWORD *)(v1184 + 32) = 0;
                    *(_QWORD *)v1184 = off_1E357F0F8;
                    *(_QWORD *)(v1184 + 40) = v1170;
                    JSC::B3::Procedure::addValueImpl(v1182, (JSC::B3::Value *)v1184);
                    *(_QWORD *)&v1522 = v1184;
                    v1186 = (char **)(v1181 + 8);
                    v1187 = *(unsigned int *)(v1181 + 20);
                    v1451 = (char **)(v1181 + 8);
                    v1458 = v1183;
                    if ((_DWORD)v1187 == *(_DWORD *)(v1181 + 16))
                    {
                      v1211 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1186, v1187 + 1, (unint64_t)&v1522);
                      v1187 = *(unsigned int *)(v1181 + 20);
                      *(_QWORD *)(*(_QWORD *)(v1181 + 8) + 8 * v1187) = *(_QWORD *)v1211;
                      v1188 = v1522;
                    }
                    else
                    {
                      *(_QWORD *)&(*v1186)[8 * v1187] = v1184;
                      v1188 = v1184;
                    }
                    v1189 = v1182;
                    *(_DWORD *)(v1181 + 20) = v1187 + 1;
                    *(_QWORD *)(v1188 + 32) = v1181;
                    v1190 = v1180[11];
                    v1191 = (JSC::B3::Value *)v1180[7];
                    v1494 = v9;
                    if (*v1180)
                      v1192 = *(_QWORD *)(*v1180 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v1180 + 14992) << 32);
                    else
                      v1192 = 0;
                    v1193 = a4 | (a5 << 6);
                    v1194 = WTF::fastMalloc((WTF *)0x30);
                    v1195 = *((_DWORD *)v1470 + 1);
                    *(_DWORD *)(v1194 + 8) = -1;
                    *(_WORD *)(v1194 + 12) = 10;
                    *(_DWORD *)(v1194 + 16) = v1195;
                    *(_BYTE *)(v1194 + 20) = 0;
                    *(_QWORD *)(v1194 + 24) = v1192;
                    *(_QWORD *)(v1194 + 32) = 0;
                    *(_QWORD *)v1194 = off_1E357F0F8;
                    *(_QWORD *)(v1194 + 40) = v1470;
                    JSC::B3::Procedure::addValueImpl(v1191, (JSC::B3::Value *)v1194);
                    *(_QWORD *)&v1522 = v1194;
                    v1196 = (char **)(v1190 + 8);
                    v1197 = *(unsigned int *)(v1190 + 20);
                    if ((_DWORD)v1197 == *(_DWORD *)(v1190 + 16))
                    {
                      v1212 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1196, v1197 + 1, (unint64_t)&v1522);
                      v1197 = *(unsigned int *)(v1190 + 20);
                      *(_QWORD *)(*(_QWORD *)(v1190 + 8) + 8 * v1197) = *(_QWORD *)v1212;
                      v1198 = v1522;
                    }
                    else
                    {
                      *(_QWORD *)&(*v1196)[8 * v1197] = v1194;
                      v1198 = v1194;
                    }
                    *(_DWORD *)(v1190 + 20) = v1197 + 1;
                    *(_QWORD *)(v1198 + 32) = v1190;
                    v1199 = WTF::fastMalloc((WTF *)0x40);
                    *(_QWORD *)v1199 = off_1E357F5F0;
                    *(_DWORD *)(v1199 + 8) = -1;
                    *(_WORD *)(v1199 + 12) = 91;
                    *(_DWORD *)(v1199 + 16) = 5;
                    *(_BYTE *)(v1199 + 20) = 2;
                    *(_QWORD *)(v1199 + 24) = v1458;
                    *(_QWORD *)(v1199 + 32) = 0;
                    JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v1199, 2, v1184, v1194);
                    *(_QWORD *)v1199 = off_1E357EA50;
                    *(_BYTE *)(v1199 + 40) = v1193;
                    *(_BYTE *)(v1199 + 41) = v1484;
                    JSC::B3::Procedure::addValueImpl(v1189, (JSC::B3::Value *)v1199);
                    *(_QWORD *)&v1522 = v1199;
                    v1200 = *(unsigned int *)(v1181 + 20);
                    if ((_DWORD)v1200 == *(_DWORD *)(v1181 + 16))
                    {
                      v1213 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1451, v1200 + 1, (unint64_t)&v1522);
                      v1200 = *(unsigned int *)(v1181 + 20);
                      *(_QWORD *)(*(_QWORD *)(v1181 + 8) + 8 * v1200) = *(_QWORD *)v1213;
                      v1201 = v1522;
                    }
                    else
                    {
                      *(_QWORD *)&(*v1451)[8 * v1200] = v1199;
                      v1201 = v1199;
                    }
                    v692 = v1494;
                    *(_DWORD *)(v1181 + 20) = v1200 + 1;
                    *(_QWORD *)(v1201 + 32) = v1181;
                    v1202 = (void (**)(WTF::StringPrintStream *__hidden))JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)v1180, *(_DWORD *)(v1199 + 16));
                    v1203 = v1180[11];
                    v1204 = (JSC::B3::Value *)v1180[7];
                    if (*v1180)
                      v1205 = *(_QWORD *)(*v1180 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v1180 + 14992) << 32);
                    else
                      v1205 = 0;
                    v1206 = WTF::fastMalloc((WTF *)0x38);
                    *(_DWORD *)(v1206 + 8) = -1;
                    *(_WORD *)(v1206 + 12) = 9;
                    *(_DWORD *)(v1206 + 16) = 0;
                    *(_BYTE *)(v1206 + 20) = 1;
                    *(_QWORD *)(v1206 + 24) = v1205;
                    *(_QWORD *)(v1206 + 32) = 0;
                    *(_QWORD *)v1206 = off_1E357F0F8;
                    *(_QWORD *)(v1206 + 40) = v1202;
                    *(_QWORD *)(v1206 + 48) = v1199;
                    JSC::B3::Procedure::addValueImpl(v1204, (JSC::B3::Value *)v1206);
                    *(_QWORD *)&v1522 = v1206;
                    v1207 = (char **)(v1203 + 8);
                    v1208 = *(unsigned int *)(v1203 + 20);
                    if ((_DWORD)v1208 == *(_DWORD *)(v1203 + 16))
                    {
                      v1214 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1207, v1208 + 1, (unint64_t)&v1522);
                      v1208 = *(unsigned int *)(v1203 + 20);
                      *(_QWORD *)(*(_QWORD *)(v1203 + 8) + 8 * v1208) = *(_QWORD *)v1214;
                      v1206 = v1522;
                    }
                    else
                    {
                      *(_QWORD *)&(*v1207)[8 * v1208] = v1206;
                    }
                    *(_DWORD *)(v1203 + 20) = v1208 + 1;
                    *(_QWORD *)(v1206 + 32) = v1203;
                    v1530 = v1202;
                    v1209 = *(_DWORD *)(a2 + 68);
                    if (v1209 == *(_DWORD *)(a2 + 64))
                    {
                      v706 = a2 + 56;
                      v707 = (uint64_t *)&v1530;
                      goto LABEL_430;
                    }
                    v1210 = *(_QWORD *)(a2 + 56) + 24 * v1209;
                    *(_OWORD *)v1210 = xmmword_19915A170;
                    *(_QWORD *)(v1210 + 16) = v1202;
                    ++*(_DWORD *)(a2 + 68);
                    goto LABEL_432;
                  }
LABEL_905:
                  v1267 = "type mismatch for argument 0";
                }
                v1268 = 29;
                goto LABEL_907;
              }
LABEL_900:
              v1416 = "vector argument";
            }
            else
            {
              v1416 = "scalar argument";
            }
            v1417 = (unint64_t *)v8;
            v1418 = 16;
LABEL_902:
            JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v1417, 26, v1416, v1418, &v1522, a8);
          }
LABEL_358:
          v608 = (JSC::B3::Value *)v1522;
LABEL_359:
          *(_QWORD *)v9 = v608;
          v9[8] = 1;
          return;
        }
LABEL_1048:
        v522 = "Could not parse the lane index immediate byte.";
        v523 = (unint64_t *)v8;
        v524 = 47;
        break;
      case 72:
        v526 = *(_DWORD *)(a2 + 68);
        if (!v526)
          goto LABEL_900;
        v527 = *(_QWORD *)(a2 + 48);
        v528 = *(_QWORD *)(a2 + 56) + 24 * v526;
        v529 = *(unsigned __int8 *)(v528 - 24);
        v530 = *(_QWORD *)(v528 - 16);
        v531 = *(JSC::B3::Procedure **)(v528 - 8);
        *(_DWORD *)(a2 + 68) = v526 - 1;
        *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
        DWORD2(v1522) = 21;
        LODWORD(v1530) = 1223;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1510);
        v539 = v1510;
        if (!v1510)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07220);
        }
        v540 = *(_DWORD *)(v527 + 512);
        if (!v540)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07228);
        }
        *(_DWORD *)(v527 + 512) = v540 - 1;
        v1510 = 0;
        if (*(_DWORD *)v539 == 2)
        {
          WTF::StringImpl::~StringImpl(v539, v532, v533, v534, v535, v536, v537, v538);
          WTF::fastFree(v1285, v1286, v1287, v1288, v1289, v1290, v1291, v1292);
        }
        else
        {
          *(_DWORD *)v539 -= 2;
        }
        v541 = *(_DWORD *)(v8 + 68);
        if (!v541)
          goto LABEL_900;
        v542 = *(_QWORD *)(v8 + 48);
        v543 = *(_QWORD *)(v8 + 56) + 24 * v541;
        v544 = *(unsigned __int8 *)(v543 - 24);
        v545 = v8;
        v546 = *(_QWORD *)(v543 - 16);
        v547 = *(_QWORD *)(v543 - 8);
        *(_DWORD *)(v545 + 68) = v541 - 1;
        *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
        DWORD2(v1522) = 21;
        LODWORD(v1530) = 1224;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1509);
        v555 = v1509;
        if (!v1509)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07230);
        }
        v556 = *(_DWORD *)(v542 + 512);
        if (!v556)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07238);
        }
        *(_DWORD *)(v542 + 512) = v556 - 1;
        v1509 = 0;
        if (*(_DWORD *)v555 == 2)
        {
          WTF::StringImpl::~StringImpl(v555, v548, v549, v550, v551, v552, v553, v554);
          WTF::fastFree(v1293, v1294, v1295, v1296, v1297, v1298, v1299, v1300);
        }
        else
        {
          *(_DWORD *)v555 -= 2;
        }
        v1481 = v531;
        v1487 = v9;
        v557 = (unint64_t *)a2;
        v558 = *(_DWORD *)(a2 + 68);
        if (!v558)
        {
          v1425 = "vector argument";
          goto LABEL_927;
        }
        v559 = *(_QWORD *)(a2 + 48);
        v560 = *(_QWORD *)(a2 + 56) + 24 * v558;
        v561 = *(unsigned __int8 *)(v560 - 24);
        v562 = *(_QWORD *)(v560 - 16);
        v563 = *(_QWORD *)(v560 - 8);
        *(_DWORD *)(a2 + 68) = v558 - 1;
        *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
        DWORD2(v1522) = 21;
        LODWORD(v1530) = 1225;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1508);
        v571 = v1508;
        if (!v1508)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07240);
        }
        v572 = *(_DWORD *)(v559 + 512);
        if (!v572)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07248);
        }
        *(_DWORD *)(v559 + 512) = v572 - 1;
        v1508 = 0;
        if (*(_DWORD *)v571 == 2)
        {
          WTF::StringImpl::~StringImpl(v571, v564, v565, v566, v567, v568, v569, v570);
          WTF::fastFree(v1317, v1318, v1319, v1320, v1321, v1322, v1323, v1324);
        }
        else
        {
          *(_DWORD *)v571 -= 2;
        }
        if (v561 != 251 || v562)
          goto LABEL_931;
        if (v544 != 251 || v546)
          goto LABEL_908;
        if (v529 != 251 || v530)
          goto LABEL_909;
        v1530 = 0;
        v573 = *(_QWORD **)(a2 + 48);
        v574 = v573[11];
        v575 = (JSC::B3::Value *)v573[7];
        if (*v573)
          v576 = *(_QWORD *)(*v573 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v573 + 14992) << 32);
        else
          v576 = 0;
        v577 = WTF::fastMalloc((WTF *)0x30);
        v578 = *(_DWORD *)(v563 + 4);
        *(_DWORD *)(v577 + 8) = -1;
        *(_WORD *)(v577 + 12) = 10;
        *(_DWORD *)(v577 + 16) = v578;
        *(_BYTE *)(v577 + 20) = 0;
        *(_QWORD *)(v577 + 24) = v576;
        *(_QWORD *)(v577 + 32) = 0;
        *(_QWORD *)v577 = off_1E357F0F8;
        *(_QWORD *)(v577 + 40) = v563;
        JSC::B3::Procedure::addValueImpl(v575, (JSC::B3::Value *)v577);
        *(_QWORD *)&v1522 = v577;
        v579 = (_QWORD *)(v574 + 8);
        v580 = *(unsigned int *)(v574 + 20);
        v1466 = v575;
        if ((_DWORD)v580 == *(_DWORD *)(v574 + 16))
        {
          v1142 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v574 + 8), v580 + 1, (unint64_t)&v1522);
          v580 = *(unsigned int *)(v574 + 20);
          *(_QWORD *)(*(_QWORD *)(v574 + 8) + 8 * v580) = *(_QWORD *)v1142;
          v581 = v1522;
        }
        else
        {
          *(_QWORD *)(*v579 + 8 * v580) = v577;
          v581 = v577;
        }
        *(_DWORD *)(v574 + 20) = v580 + 1;
        *(_QWORD *)(v581 + 32) = v574;
        v582 = v573[11];
        v583 = (JSC::B3::Value *)v573[7];
        if (*v573)
          v584 = *(_QWORD *)(*v573 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v573 + 14992) << 32);
        else
          v584 = 0;
        v585 = WTF::fastMalloc((WTF *)0x30);
        v586 = *(_DWORD *)(v547 + 4);
        *(_DWORD *)(v585 + 8) = -1;
        *(_WORD *)(v585 + 12) = 10;
        *(_DWORD *)(v585 + 16) = v586;
        *(_BYTE *)(v585 + 20) = 0;
        *(_QWORD *)(v585 + 24) = v584;
        *(_QWORD *)(v585 + 32) = 0;
        *(_QWORD *)v585 = off_1E357F0F8;
        *(_QWORD *)(v585 + 40) = v547;
        JSC::B3::Procedure::addValueImpl(v583, (JSC::B3::Value *)v585);
        *(_QWORD *)&v1522 = v585;
        v587 = (char **)(v582 + 8);
        v588 = *(unsigned int *)(v582 + 20);
        if ((_DWORD)v588 == *(_DWORD *)(v582 + 16))
        {
          v1143 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v587, v588 + 1, (unint64_t)&v1522);
          v588 = *(unsigned int *)(v582 + 20);
          *(_QWORD *)(*(_QWORD *)(v582 + 8) + 8 * v588) = *(_QWORD *)v1143;
          v589 = v1522;
        }
        else
        {
          *(_QWORD *)&(*v587)[8 * v588] = v585;
          v589 = v585;
        }
        *(_DWORD *)(v582 + 20) = v588 + 1;
        *(_QWORD *)(v589 + 32) = v582;
        v590 = v573[11];
        v591 = (JSC::B3::Value *)v573[7];
        if (*v573)
          v592 = *(_QWORD *)(*v573 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v573 + 14992) << 32);
        else
          v592 = 0;
        v593 = WTF::fastMalloc((WTF *)0x30);
        v594 = *((_DWORD *)v1481 + 1);
        *(_DWORD *)(v593 + 8) = -1;
        *(_WORD *)(v593 + 12) = 10;
        *(_DWORD *)(v593 + 16) = v594;
        *(_BYTE *)(v593 + 20) = 0;
        *(_QWORD *)(v593 + 24) = v592;
        *(_QWORD *)(v593 + 32) = 0;
        *(_QWORD *)v593 = off_1E357F0F8;
        *(_QWORD *)(v593 + 40) = v1481;
        JSC::B3::Procedure::addValueImpl(v591, (JSC::B3::Value *)v593);
        *(_QWORD *)&v1522 = v593;
        v595 = (char **)(v590 + 8);
        v596 = *(unsigned int *)(v590 + 20);
        if ((_DWORD)v596 == *(_DWORD *)(v590 + 16))
        {
          v1144 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v595, v596 + 1, (unint64_t)&v1522);
          v596 = *(unsigned int *)(v590 + 20);
          *(_QWORD *)(*(_QWORD *)(v590 + 8) + 8 * v596) = *(_QWORD *)v1144;
          v597 = v1522;
        }
        else
        {
          *(_QWORD *)&(*v595)[8 * v596] = v593;
          v597 = v593;
        }
        *(_DWORD *)(v590 + 20) = v596 + 1;
        *(_QWORD *)(v597 + 32) = v590;
        v598 = WTF::fastMalloc((WTF *)0x48);
        *(_QWORD *)v598 = off_1E357F5F0;
        *(_DWORD *)(v598 + 8) = -1;
        *(_WORD *)(v598 + 12) = 142;
        *(_DWORD *)(v598 + 16) = 5;
        *(_BYTE *)(v598 + 20) = 3;
        *(_QWORD *)(v598 + 24) = v576;
        *(_QWORD *)(v598 + 32) = 0;
        v599 = (uint64_t *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v598);
        *v599 = v577;
        v599[1] = v585;
        v599[2] = v593;
        *(_QWORD *)v598 = off_1E357EA50;
        *(_WORD *)(v598 + 40) = 0;
        JSC::B3::Procedure::addValueImpl(v1466, (JSC::B3::Value *)v598);
        *(_QWORD *)&v1522 = v598;
        v600 = *(unsigned int *)(v574 + 20);
        if ((_DWORD)v600 == *(_DWORD *)(v574 + 16))
        {
          v1145 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v574 + 8), v600 + 1, (unint64_t)&v1522);
          v600 = *(unsigned int *)(v574 + 20);
          *(_QWORD *)(*(_QWORD *)(v574 + 8) + 8 * v600) = *(_QWORD *)v1145;
          v601 = v1522;
        }
        else
        {
          *(_QWORD *)(*v579 + 8 * v600) = v598;
          v601 = v598;
        }
        v602 = a2;
        *(_DWORD *)(v574 + 20) = v600 + 1;
        *(_QWORD *)(v601 + 32) = v574;
        v603 = (void (**)(WTF::StringPrintStream *__hidden))JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)v573, *(_DWORD *)(v598 + 16));
        v604 = v573[11];
        v605 = (JSC::B3::Value *)v573[7];
        if (*v573)
          v606 = *(_QWORD *)(*v573 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v573 + 14992) << 32);
        else
          v606 = 0;
        v607 = v1487;
LABEL_888:
        v1390 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v1390 + 8) = -1;
        *(_WORD *)(v1390 + 12) = 9;
        *(_DWORD *)(v1390 + 16) = 0;
        *(_BYTE *)(v1390 + 20) = 1;
        *(_QWORD *)(v1390 + 24) = v606;
        *(_QWORD *)(v1390 + 32) = 0;
        *(_QWORD *)v1390 = off_1E357F0F8;
        *(_QWORD *)(v1390 + 40) = v603;
        *(_QWORD *)(v1390 + 48) = v598;
        JSC::B3::Procedure::addValueImpl(v605, (JSC::B3::Value *)v1390);
        *(_QWORD *)&v1522 = v1390;
        v1391 = (char **)(v604 + 8);
        v1392 = *(unsigned int *)(v604 + 20);
        if ((_DWORD)v1392 == *(_DWORD *)(v604 + 16))
        {
          v1395 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1391, v1392 + 1, (unint64_t)&v1522);
          v1392 = *(unsigned int *)(v604 + 20);
          *(_QWORD *)(*(_QWORD *)(v604 + 8) + 8 * v1392) = *(_QWORD *)v1395;
          v1390 = v1522;
        }
        else
        {
          *(_QWORD *)&(*v1391)[8 * v1392] = v1390;
        }
        *(_DWORD *)(v604 + 20) = v1392 + 1;
        *(_QWORD *)(v1390 + 32) = v604;
        v1530 = v603;
        v1393 = *(_DWORD *)(v602 + 68);
        if (v1393 == *(_DWORD *)(v602 + 64))
        {
          v895 = v602 + 56;
          goto LABEL_579;
        }
        v1394 = *(_QWORD *)(v602 + 56) + 24 * v1393;
        *(_OWORD *)v1394 = xmmword_19915A170;
        *(_QWORD *)(v1394 + 16) = v603;
        ++*(_DWORD *)(v602 + 68);
        goto LABEL_583;
      case 79:
      case 80:
        v237 = *(_DWORD *)(a2 + 68);
        if (!v237)
          goto LABEL_900;
        v238 = *(_QWORD *)(a2 + 48);
        v239 = *(_QWORD *)(a2 + 56) + 24 * v237;
        v240 = (JSC::B3::Procedure *)*(unsigned __int8 *)(v239 - 24);
        v242 = *(JSC::B3::Procedure **)(v239 - 16);
        v241 = *(_QWORD *)(v239 - 8);
        *(_DWORD *)(a2 + 68) = v237 - 1;
        *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
        DWORD2(v1522) = 21;
        LODWORD(v1530) = 1325;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1501);
        v250 = v1501;
        if (!v1501)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07190);
        }
        v251 = *(_DWORD *)(v238 + 512);
        if (!v251)
        {
          __break(0xC471u);
          JUMPOUT(0x198E07198);
        }
        *(_DWORD *)(v238 + 512) = v251 - 1;
        v1501 = 0;
        if (*(_DWORD *)v250 == 2)
        {
          WTF::StringImpl::~StringImpl(v250, v243, v244, v245, v246, v247, v248, v249);
          WTF::fastFree(v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077);
        }
        else
        {
          *(_DWORD *)v250 -= 2;
        }
        v1462 = v242;
        v1476 = v240;
        v1487 = v9;
        v252 = *(_DWORD *)(v8 + 68);
        if (!v252)
          goto LABEL_926;
        v253 = *(_QWORD *)(v8 + 48);
        v254 = *(_QWORD *)(v8 + 56) + 24 * v252;
        v255 = *(unsigned __int8 *)(v254 - 24);
        v257 = *(_QWORD *)(v254 - 16);
        v256 = *(_QWORD *)(v254 - 8);
        *(_DWORD *)(v8 + 68) = v252 - 1;
        *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
        DWORD2(v1522) = 21;
        LODWORD(v1530) = 1326;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1500);
        v265 = v1500;
        if (!v1500)
        {
          __break(0xC471u);
          JUMPOUT(0x198E071A0);
        }
        v266 = *(_DWORD *)(v253 + 512);
        if (!v266)
        {
          __break(0xC471u);
          JUMPOUT(0x198E071A8);
        }
        *(_DWORD *)(v253 + 512) = v266 - 1;
        v1500 = 0;
        if (*(_DWORD *)v265 == 2)
        {
          WTF::StringImpl::~StringImpl(v265, v258, v259, v260, v261, v262, v263, v264);
          WTF::fastFree(v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109);
        }
        else
        {
          *(_DWORD *)v265 -= 2;
        }
        v1448 = v256;
        v1454 = v241;
        v267 = *(_DWORD *)(v8 + 68);
        if (v267)
        {
          v268 = *(_QWORD *)(v8 + 48);
          v269 = *(_QWORD *)(v8 + 56) + 24 * v267;
          v270 = *(unsigned __int8 *)(v269 - 24);
          v271 = v8;
          v272 = *(_QWORD *)(v269 - 16);
          v273 = *(_QWORD *)(v269 - 8);
          *(_DWORD *)(v271 + 68) = v267 - 1;
          *(_QWORD *)&v1522 = "WasmFunctionParser.h:";
          DWORD2(v1522) = 21;
          LODWORD(v1530) = 1327;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v1522, (unsigned int *)&v1530, (int **)&v1499);
          v281 = v1499;
          if (!v1499)
          {
            __break(0xC471u);
            JUMPOUT(0x198E071B0);
          }
          v282 = *(_DWORD *)(v268 + 512);
          if (!v282)
          {
            __break(0xC471u);
            JUMPOUT(0x198E071B8);
          }
          *(_DWORD *)(v268 + 512) = v282 - 1;
          v1499 = 0;
          if (*(_DWORD *)v281 == 2)
          {
            WTF::StringImpl::~StringImpl(v281, v274, v275, v276, v277, v278, v279, v280);
            WTF::fastFree(v1126, v1127, v1128, v1129, v1130, v1131, v1132, v1133);
          }
          else
          {
            *(_DWORD *)v281 -= 2;
          }
          if (v270 != 251 || v272)
          {
LABEL_909:
            v1419 = "type mismatch for argument 0";
          }
          else if (v255 != 251 || v257)
          {
LABEL_908:
            v1419 = "type mismatch for argument 1";
          }
          else
          {
            if (v1476 == (JSC::B3::Procedure *)251 && !v1462)
            {
              v1530 = 0;
              v283 = *(_QWORD **)(a2 + 48);
              if (a3 == 80)
                v284 = -107;
              else
                v284 = -97;
              if (a3 == 79)
                v285 = -108;
              else
                v285 = v284;
              v286 = v283[11];
              v287 = (JSC::B3::Value *)v283[7];
              v1447 = v285;
              if (*v283)
                v288 = *(_QWORD *)(*v283 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v283 + 14992) << 32);
              else
                v288 = 0;
              v289 = WTF::fastMalloc((WTF *)0x30);
              v290 = *(_DWORD *)(v273 + 4);
              *(_DWORD *)(v289 + 8) = -1;
              *(_WORD *)(v289 + 12) = 10;
              *(_DWORD *)(v289 + 16) = v290;
              *(_BYTE *)(v289 + 20) = 0;
              *(_QWORD *)(v289 + 24) = v288;
              *(_QWORD *)(v289 + 32) = 0;
              *(_QWORD *)v289 = off_1E357F0F8;
              *(_QWORD *)(v289 + 40) = v273;
              JSC::B3::Procedure::addValueImpl(v287, (JSC::B3::Value *)v289);
              *(_QWORD *)&v1522 = v289;
              v291 = (_QWORD *)(v286 + 8);
              v292 = *(unsigned int *)(v286 + 20);
              v1463 = (JSC::B3::Procedure *)v288;
              v1477 = v287;
              if ((_DWORD)v292 == *(_DWORD *)(v286 + 16))
              {
                v1045 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v286 + 8), v292 + 1, (unint64_t)&v1522);
                v292 = *(unsigned int *)(v286 + 20);
                *(_QWORD *)(*(_QWORD *)(v286 + 8) + 8 * v292) = *(_QWORD *)v1045;
                v293 = v1522;
              }
              else
              {
                *(_QWORD *)(*v291 + 8 * v292) = v289;
                v293 = v289;
              }
              *(_DWORD *)(v286 + 20) = v292 + 1;
              *(_QWORD *)(v293 + 32) = v286;
              v294 = v283[11];
              v295 = (JSC::B3::Value *)v283[7];
              if (*v283)
                v296 = *(_QWORD *)(*v283 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v283 + 14992) << 32);
              else
                v296 = 0;
              v297 = WTF::fastMalloc((WTF *)0x30);
              v298 = *(_DWORD *)(v1448 + 4);
              *(_DWORD *)(v297 + 8) = -1;
              *(_WORD *)(v297 + 12) = 10;
              *(_DWORD *)(v297 + 16) = v298;
              *(_BYTE *)(v297 + 20) = 0;
              *(_QWORD *)(v297 + 24) = v296;
              *(_QWORD *)(v297 + 32) = 0;
              *(_QWORD *)v297 = off_1E357F0F8;
              *(_QWORD *)(v297 + 40) = v1448;
              JSC::B3::Procedure::addValueImpl(v295, (JSC::B3::Value *)v297);
              *(_QWORD *)&v1522 = v297;
              v299 = (char **)(v294 + 8);
              v300 = *(unsigned int *)(v294 + 20);
              if ((_DWORD)v300 == *(_DWORD *)(v294 + 16))
              {
                v1046 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v299, v300 + 1, (unint64_t)&v1522);
                v300 = *(unsigned int *)(v294 + 20);
                *(_QWORD *)(*(_QWORD *)(v294 + 8) + 8 * v300) = *(_QWORD *)v1046;
                v301 = v1522;
              }
              else
              {
                *(_QWORD *)&(*v299)[8 * v300] = v297;
                v301 = v297;
              }
              v302 = a4 & 0x3F;
              *(_DWORD *)(v294 + 20) = v300 + 1;
              *(_QWORD *)(v301 + 32) = v294;
              v303 = v283[11];
              v304 = (JSC::B3::Value *)v283[7];
              if (*v283)
                v305 = *(_QWORD *)(*v283 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v283 + 14992) << 32);
              else
                v305 = 0;
              v306 = v302 | (a5 << 6);
              v307 = WTF::fastMalloc((WTF *)0x30);
              v308 = *(_DWORD *)(v1454 + 4);
              *(_DWORD *)(v307 + 8) = -1;
              *(_WORD *)(v307 + 12) = 10;
              *(_DWORD *)(v307 + 16) = v308;
              *(_BYTE *)(v307 + 20) = 0;
              *(_QWORD *)(v307 + 24) = v305;
              *(_QWORD *)(v307 + 32) = 0;
              *(_QWORD *)v307 = off_1E357F0F8;
              *(_QWORD *)(v307 + 40) = v1454;
              JSC::B3::Procedure::addValueImpl(v304, (JSC::B3::Value *)v307);
              *(_QWORD *)&v1522 = v307;
              v309 = (char **)(v303 + 8);
              v310 = *(unsigned int *)(v303 + 20);
              if ((_DWORD)v310 == *(_DWORD *)(v303 + 16))
              {
                v1047 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v309, v310 + 1, (unint64_t)&v1522);
                v310 = *(unsigned int *)(v303 + 20);
                *(_QWORD *)(*(_QWORD *)(v303 + 8) + 8 * v310) = *(_QWORD *)v1047;
                v311 = v1522;
              }
              else
              {
                *(_QWORD *)&(*v309)[8 * v310] = v307;
                v311 = v307;
              }
              v9 = v1487;
              *(_DWORD *)(v303 + 20) = v310 + 1;
              *(_QWORD *)(v311 + 32) = v303;
              v312 = JSC::B3::Value::allocateSpace(v1447, 48);
              *(_QWORD *)v312 = off_1E357F5F0;
              *(_DWORD *)(v312 + 8) = -1;
              *(_WORD *)(v312 + 12) = v1447;
              *(_DWORD *)(v312 + 16) = 5;
              *(_BYTE *)(v312 + 20) = 3;
              *(_QWORD *)(v312 + 24) = v1463;
              *(_QWORD *)(v312 + 32) = 0;
              v313 = (uint64_t *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v312);
              *v313 = v289;
              v313[1] = v297;
              v313[2] = v307;
              *(_QWORD *)v312 = off_1E357EA50;
              *(_BYTE *)(v312 + 40) = v306;
              *(_BYTE *)(v312 + 41) = 0;
              JSC::B3::Procedure::addValueImpl(v1477, (JSC::B3::Value *)v312);
              *(_QWORD *)&v1522 = v312;
              v314 = *(unsigned int *)(v286 + 20);
              if ((_DWORD)v314 == *(_DWORD *)(v286 + 16))
              {
                v1048 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v286 + 8), v314 + 1, (unint64_t)&v1522);
                v314 = *(unsigned int *)(v286 + 20);
                *(_QWORD *)(*(_QWORD *)(v286 + 8) + 8 * v314) = *(_QWORD *)v1048;
                v315 = v1522;
              }
              else
              {
                *(_QWORD *)(*v291 + 8 * v314) = v312;
                v315 = v312;
              }
              *(_DWORD *)(v286 + 20) = v314 + 1;
              *(_QWORD *)(v315 + 32) = v286;
              v316 = (void (**)(WTF::StringPrintStream *__hidden))JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)v283, *(_DWORD *)(v312 + 16));
              v317 = v283[11];
              v318 = (JSC::B3::Value *)v283[7];
              if (*v283)
                v319 = *(_QWORD *)(*v283 + 15000) | ((unint64_t)*(unsigned __int8 *)(*v283 + 14992) << 32);
              else
                v319 = 0;
              v320 = WTF::fastMalloc((WTF *)0x38);
              *(_DWORD *)(v320 + 8) = -1;
              *(_WORD *)(v320 + 12) = 9;
              *(_DWORD *)(v320 + 16) = 0;
              *(_BYTE *)(v320 + 20) = 1;
              *(_QWORD *)(v320 + 24) = v319;
              *(_QWORD *)(v320 + 32) = 0;
              *(_QWORD *)v320 = off_1E357F0F8;
              *(_QWORD *)(v320 + 40) = v316;
              *(_QWORD *)(v320 + 48) = v312;
              JSC::B3::Procedure::addValueImpl(v318, (JSC::B3::Value *)v320);
              *(_QWORD *)&v1522 = v320;
              v326 = (char **)(v317 + 8);
              v327 = *(unsigned int *)(v317 + 20);
              if ((_DWORD)v327 == *(_DWORD *)(v317 + 16))
              {
                v1049 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v326, v327 + 1, (unint64_t)&v1522);
                v327 = *(unsigned int *)(v317 + 20);
                *(_QWORD *)(*(_QWORD *)(v317 + 8) + 8 * v327) = *(_QWORD *)v1049;
                v320 = v1522;
              }
              else
              {
                *(_QWORD *)&(*v326)[8 * v327] = v320;
              }
              *(_DWORD *)(v317 + 20) = v327 + 1;
              *(_QWORD *)(v320 + 32) = v317;
              v1530 = v316;
              v328 = *(_DWORD *)(a2 + 68);
              if (v328 != *(_DWORD *)(a2 + 64))
              {
                v831 = *(_QWORD *)(a2 + 56) + 24 * v328;
                *(_OWORD *)v831 = xmmword_19915A170;
                *(_QWORD *)(v831 + 16) = v316;
                ++*(_DWORD *)(a2 + 68);
                goto LABEL_672;
              }
              v329 = a2 + 56;
LABEL_311:
              v520 = (uint64_t *)&v1530;
              goto LABEL_518;
            }
LABEL_931:
            v1419 = "type mismatch for argument 2";
          }
          v1420 = 29;
LABEL_911:
          *(_QWORD *)&v1522 = v1419;
          *((_QWORD *)&v1522 + 1) = v1420;
          JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v1530, (uint64_t)&v1522, v44, a8);
          v1421 = v1530;
        }
        else
        {
LABEL_926:
          v1425 = "vector argument";
          v557 = (unint64_t *)v8;
LABEL_927:
          v1426 = 16;
LABEL_942:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v557, 26, v1425, v1426, &v1522, v189);
          v1421 = (void (**)(WTF::StringPrintStream *__hidden))v1522;
        }
        *(_QWORD *)v1487 = v1421;
        v1487[8] = 1;
        return;
      default:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,JSC::SIMDLaneOperationDump>("invalid simd op ", (unint64_t *)a2, 17, a3, &v1522, a8);
        goto LABEL_358;
    }
  }
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v522, v523, v524, &v1522, a8);
  goto LABEL_358;
}

